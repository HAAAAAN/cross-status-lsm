[{"repo": "flux", "type": "elite", "title": "", "number of text": 379, "text": "  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla. **If you are contributing on behalf of someone else (eg your employer)**, the individual CLA may not be sufficient and your employer may need the corporate CLA signed.\n\nIf you have received this in error or have any questions, please contact us at cla@fb.com. Thanks! Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!  Thanks!  Can you elaborate on what does not work? And I can look into fixing it Ah, just to more clearly state the problem, this is necessary because the `^` only allows higher minor versions so if you have React 16 as a dependency the Flux package would not believe dependencies are satisfied since it needs a version of 15.\r\n\r\n @mikecousins, I just published https://github.com/facebook/flux/tree/3.1.3  Yeah it's really annoying to do a website release :( the scripts are like 4 years old, will leave this up to track doing another release. If `four` -> `three` is the only change I don't think it will be very high pri to me though  Sounds like an issue with `create-react-app fluxflow` here is the example demonstrating how to set up Flux+Flow: https://github.com/facebook/flux/tree/master/examples/flux-flow\r\n\r\nIf something is wrong with that example let me know  Thanks :)  Does running `npm run build` fix the issue? This seems like you just are running something from the wrong directory/your setup is incorrect.\r\n\r\nCan you follow the steps exactly here: https://github.com/facebook/flux/tree/master/examples/flux-todomvc#1-getting-started\r\n\r\nAnd let me know which step fails? When it does fail what is the entire output? And what is the entire output of `pwd` and `ls -asl`?  When it was written there was some problems with functional components which forced us to literally call the function rather than create it properly with JSX syntax, I think at this point it could be fixed by updating this line to use JSX: https://github.com/facebook/flux/blob/master/src/container/FluxContainer.js#L266  Awesome, thanks!  See comments in: https://github.com/facebook/flux/issues/410\r\n\r\nNo reason to couple Dispatcher docs and FluxStore. There would need to be a bigger refactor of this example in order to do that.  Thanks for pointing this out, but it is not technically incorrect :)\r\n\r\nThe dispatcher doesn't have to be used with FluxStore. Right now the documentation assigns the token to the store's `.dispatchToken` property and accesses it in that way consistently throughout:\r\n\r\nhttps://github.com/facebook/flux/blob/master/src/Dispatcher.js#L69\r\n\r\nI don't think this needs to be updated.  Container.createFunctional only accepts 4 arguments, you gave it 5  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks! Thanks, looks good!  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions. I really liked the comments on everything, I think they were all very accurate and captured the correct ideas/information. If you have a specific part of the tutorial that was confusing that you'd like to know more about just ask :)  Thanks!  Looks good to me! Thanks!  The contents of your repository when experiencing this error would be helpful to see Please re-open with more info if you still have this issue.  The problem with explicitly mentioning `my-todomvc` here is that you can use the same logic to mention it constantly throughout the entire guide. Through most of the example you should be referencing/copying parts of the original `todomvc`. If that is not clear we can add a line somewhere around where `my-todomvc` is created and be explicit, but this is not the correct place to mention it.  Can you clarify what you mean? If you have errors what are they? If you had to perform additional steps to get a working todomvc what are they?\r\n\r\nAs far as I'm aware following the steps results in a working todomvc. Thanks for the feedback, will look over some of these areas and see if I can make them a bit more clear. There were certainly areas where I went with less direction in an attempt to not make the tutorial super long. I may have been a bit aggressive in places and can clear them up.  Thanks for the PR.\r\n\r\nIn general you should not do multiple things in a single PR, if there are 3 separate issues they should be resolved in 3 separate PRs. It's no clear to me which parts of the code fix what so I can't help diagnose your issues and review your PR as is.\r\n\r\nCan you split this up/provide more information about the issue you were having and how these changes fix it? For example what commands did you run, from what directory, with what changes, etc.\r\n\r\nAs for your 3rd change regarding updating dist, I intentionally did not update dist for 3.1.2, the 3.1.1 -> 3.1.2 bump was just to get npm to accept a new readme, there should not have been any functionality changes.  There is no start command: https://github.com/facebook/flux/blob/master/package.json#L24-L26\r\n\r\nI'm not sure what you would expect it to do either. Like I said there isn't a start command, running `npm start` shouldn't do anything. Whether it throws an error or not doesn't matter because there is no behavior defined that it should be trying to start.\r\n\r\nIf there is something you're trying to accomplish, first read through the readme and examples: https://github.com/facebook/flux/blob/master/README.md\r\n\r\nThen if you are still having a problem open up an issue with clear details about what you are trying to do, what you expect to happen, and what is actually happening.  Thanks!  Either is fine I believe, going to keep the old way so I don't need to re-sync the website which is a real pain  I'm not sure what this means. Try reading through the tutorials and if that doesn't help feel free to post a clear question with more context and information. Not that I'm aware of  Good point I can see how that would be confusing. T is the polymorphic type specified in the ReduceStore class: https://github.com/facebook/flux/blob/master/src/stores/FluxReduceStore.js#L42\r\n\r\nSimilar to polymorphic types/generics in many other languages.\r\n\r\nDo you have any recommendations for how to capture that more clearly in the docs? Thanks for the perspective, everything you're saying makes sense  and I expect if you had issues understanding what T means others will as well. I'll try to add documentation with links to an explanation of polymorphic types in flow, or a quick example or something in the docs to explain what it means.  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks! I actually prefer the old terminology using `dispatch` as a verb. It ties the purpose of the Dispatcher to a common English verb in a real scenario. It also keeps the material shorter.\r\n\r\nCan you provide a bit more context on why you prefer your phrasing? Happy to discuss Thanks for the context. How about splitting this up into two bullets:\r\n\r\n1. When a user types in the title of a new Todo and hits enter the view tells the Dispatcher to dispatch an action\r\n2. All stores receive the dispatched action\r\n\r\nI guess I prefer each step of the process to be succinct. Long sentences are scary. Not sure if this is better or not than your change Feel free to update and I'll merge it! Thanks!  Seems good to me! Thanks! `<*>` is generally better because it allows flow to infer a specific type, `<any>` will just allow anything, example: https://flowtype.org/try/#0PTAEAEDMBsHsHcBQiDG0CGBnToDCAeAFQD5QBvRUUdALlEIG5LRmVYA7TAFwCcBXFF1g8AFLXoBKcsypcAFgEtMAOnSgAvNSZUAvoj2oO3UCgCMdAunYBPUpvYBTeHhEAWAEwSmbTlxOmABR5YAAc6bh4FdgBzDX9VBlAQUAADK2sU0CVQACN0ABMAQmQfYxR3C3wAKjtQR2dcN09vIz9yoNDw3ijYzXKEpLBrdGsAGlAHHmCeTEKgA\r\n\r\nBut in the places you added `<any>` there is no association to a polymorphic type in those classes so this shouldn't affect the level of Flow coverage. I don't think there's a need to change it yet.  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks! Looks good, thanks for finding the issue.\r\n\r\nWould you mind adding a quick test case for it in here: https://github.com/facebook/flux/blob/master/src/container/__tests__/FluxContainer-test.js\r\n\r\nI think it should be really similar to the last test case.\r\n\r\n  Thanks  the gh-pages branch is generated so we shouldn't just sed replace over it, also I think almost all of these files got delete with recent updates to docs :)\r\n\r\nJust going to close this out. If you want to poke around and find dates on master branch happy for you to resubmit. If you do make sure dates are `2014-present` though.  You can find one way of dealing with async actions here: https://github.com/facebook/flux/tree/master/examples\r\n\r\nGoing to close this out because I'm not sure what action items are left in this issue. Reopen if necessary.  Thanks for the report, will investigate shortly. I think we may need to remove the invariant or add in a workaround, whichever seems cleanest.\n That was a particular feature that was requested in order to support passing stores down via props.\n\nI'm just going to remove these invariants, I don't think they catch a common issue or something that is necessarily an anti-pattern.\n Published 3.1.0 which should fix the issue. Let me know if it doesn't!\n  Thanks, I just pushed the tag, I think this should resolve the issue: https://github.com/facebook/flux/tree/3.0.0\n\nLet me know if you meant something different!\n  Yeah any usage of flux/utils will require react to be installed unfortunately, it's listed in the peer dependencies.\n\nhttps://github.com/facebook/flux/blob/master/package.json#L67\n I don't think that is a good use of time. Any decent packager should not include the source code for react if you are not using it. If you don't use FluxContainer and your packager still includes react in your bundle I'd consider that a bug in the packager.\n > FWIW most packagers won't/can't do tree shaking yet. While it's great to say it's a bug in the packager, it's not really fair.\n\nThat's surprising to me, for some reason I thought webpack did this already.\n  Because the site is really annoying to update/maintain. It's very old and regularly comes down when I try to push an update.\r\n\r\nWould love someone to spend some time cleaning up that part of the repo.  Thanks for the PR, we recently updated the examples so this is no longer relevant.\r\n\r\nhttps://github.com/facebook/flux/tree/master/examples  Hey @alexeyraspopov, before doing to much work on this we should chat about what this example explains that the others do not cover. I'm certainly open to adding more examples but do not want to add examples that are just re-hashing what others already cover. That will just lead to a lot more maintenance cost without much benefit.\r\n\r\nCould you run through how it's different from https://github.com/facebook/flux/tree/master/examples/flux-async for example.  Sounds like not a bug or needs more info.  Thanks for the PR and pointing out the issue, your PR currently has merge conflicts and wasn't quite what I think I was going for with this comment so I just resolved it here: https://github.com/facebook/flux/commit/7aeddbb320d4cb47348a230c14ccd262ca46d313\r\n\r\nAgain, thanks for pointing out the typo!  I use it like this: https://github.com/facebook/flux/tree/master/examples/flux-flow seems okay  Thanks for the PR, we recently updated the examples so this is no longer relevant.\r\n\r\nhttps://github.com/facebook/flux/tree/master/examples  We use FluxContainer, you can see how we build our applications by following the examples here: https://github.com/facebook/flux/tree/master/examples  Everything should be updated here: https://github.com/facebook/flux/tree/master/examples\r\n\r\nLet me know if you still have issues.  Thanks!  Sounds like this issue was answered :)  Thanks for the PR, we recently updated the examples so this is no longer relevant.\r\n\r\nhttps://github.com/facebook/flux/tree/master/examples  I don't think we are likely to change this. InitialState is really meant to be an empty state, not where you initialized the data for the store. It's expected that you return something like an empty map, then initialize you data through an action. The initial state should be constant all the time.\r\n\r\nThis helps to ensure the state of your flux application is a pure function of actions, so you could theoretically record and replay them to get in the same state. If you move the initialization out of the chain of actions that is no longer possible.\r\n\r\nIn any case there is a workaround if you need to have it behave in that manner, I believe this will work:\r\n\r\n```\r\nclass FluxReduceStore2 extends FluxReduceStore {\r\n  constructor(dispatcher, initialState) {\r\n    super(dispatcher);\r\n    this._state = initialState;\r\n  }\r\n  getInitialState() {\r\n    return undefined;\r\n  }\r\n}\r\n``` If your \"empty\" state has a list and favorites you would write:\r\n\r\n```\r\ngetInitialState() {\r\n  return {\r\n    list: [],\r\n    favorites: [],\r\n  };\r\n}\r\n```\r\n\r\nTo do the initial data fetching you would fetch data in the componentWillMount of the relevant component and then dispatch an action that the store responds to.  @murilobr, the example does work on the client (most use cases), and there is a workaround on the server as mentioned above. I'm not sure why it's broken on the server, but PRs are welcome.  Thanks for the PR, we recently updated the examples so this is no longer relevant.\r\n\r\nhttps://github.com/facebook/flux/tree/master/examples  I probably won't get to this. Code is documentation right? :')  Thanks for the PR, I updated the site recently and this should no longer be an issue.  Thanks for the PR, we recently updated the examples so this is no longer relevant.\r\n\r\nhttps://github.com/facebook/flux/tree/master/examples  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n  I tend to fire the actions from the store where data is being requested. In order to accomplish what you want you will need to have a sense of \"status\" of a particular piece of data in your store, not just the raw data.\n\n``` js\nimport {ReduceStore} from 'flux/utils';\n\ntype Status<T> = {\n  status: 'not_loaded' | 'loading' | 'loaded',\n  data?: T,\n}\n\nclass FooStore extends ReduceStore<Status<string>> {\n  getInitialState() {\n    return {status: 'not_loaded'};\n  }\n\n  reduce(state: Status<string>, action: Object) {\n    switch (action.type) {\n      case 'start_loading':\n        if (state.status === 'loading') {\n          return state; // we don't want to generate many requests if we are already loading\n        } else {\n          FooDataManager.loadFoo();\n          return {status: 'loading'};\n        }\n\n      case 'foo_loaded':\n        return {\n          status: 'loaded',\n          data: action.foo.name,\n        };\n\n      case 'foo_load_error'\n        return {status: 'not_loaded'}; // Or create an \"error\" status and put the error in data\n\n      default:\n        return state;\n    }\n  }\n\n  // Make sure to override this so that we can transition to loading when we need to. Alternatively\n  // you could check at every call site to getState() and do the exact same thing instead\n  getState() {\n    const state = super.getState();\n    if (state.status === 'not_loaded') {\n      FooDispatcher.dispatch({type: 'start_loading'});\n    }\n    return state;\n  }\n}\n\n// We centralize all network requests in a \"data manager\" or \"web api utils\"\n// call it whatever, just keep them in one place\nconst FooDataManager = {\n  loadFoo() {\n    xhr({uri: 'http://api.mywebsite.com/foo'}, (err, resp, body) => {\n      if (err) {\n        FooDispatcher.dispatch({type: 'foo_load_error'});\n        console.error(err); // do whatever you want with the error\n      };\n      const data = JSON.parse(body); // may want to verify resp code\n      FooDispatcher.dispatch({\n        type: 'foo_loaded',\n        foo: data,\n      });\n    });\n  }\n}\n```\n That is basically cache invalidation problem :) you can do a simple TTL, and after 5 minutes or so invalidate your data, or the web socket solution you mentioned. After that just fire a new action when you want to clear the data.\n\nIt's fine to issue a request from your store, the one critical thing is that the result of that request re-enters the flux system via a separate action. If you do this it would be really bad:\n\n``` js\n// Counter example, never do this!\nclass Store {\n  onDispatch(action) {\n    switch (action.type) {\n      case 'start_loading'\n        xhr({uri: ...}, (err, resp, body) => {\n          this._state = JSON.parse(body); // Don't do this! You are mutating the store outside of a dispatch\n        });\n    }    \n  }\n}\n```\n\nIt's pretty much impossible to do the above though when using reducers though\n https://github.com/facebook/flux/tree/master/examples includes how we handle async actions now, hopefully that will provide enough guidance to consider this issue resolved.  Seems okay to me. An alternative is to just check before firing the action\n\n```\nif (Store.checkValid(id) {\n  Action.save(id);\n}\n```\n The one way flow is most important for the mutation path. The action is still flowing through the system in one direction.\n\nI do think it is better to not use stores within action creators, but I do not have that strong of an opinion either way.\n\nIdeally your action creators would be \"pure\" functions that generate the action based only on their input, but action creators are inherently not pure because they dispatch an action as a side effect. (If you are using Redux though actions creators are pure functions!)\n\nThis is probably ideal:\n\n``` js\nchangeCurrentUsersName(id, name) {\n  Dispatcher.dispatch({\n    type: 'change_current_user_name',\n    id,\n    name,\n  });\n}\n```\n\nBut you may find that you do this everywhere:\n\n``` js\nchangeCurrentUsersName(CurrentUserStore.getID(), this.state.name);\n```\n\nSo you _could_ refactor it to this for ease of use, but I do think it's slightly worse code:\n\n``` js\nchangeCurrentUsersName(name) {\n  Dispatcher.dispatch({\n    type: 'change_current_user_name',\n    id: CurrentUserStore.getID(),\n    name,\n  });\n}\n```\n\nHope that helps.\n Yeah that is what I was trying to communicate in my second code block :)\n  Sounds like you are not transforming classes?\n\nThis is exactly how we transform each file: https://github.com/facebook/flux/blob/master/Gulpfile.js#L24-L64\n\nOr you can just use the pre-transformed dist file: https://github.com/facebook/flux/blob/master/dist/Flux.js\n Since we've also used browserify on the Dispatcher in the past this doesn't seem like a Flux issue, but rather a setup issue. Going to close this.\n  Chasing dependencies kind of sucks, @ide how can we make this work for react native so that we don't have to arbitrarily update dependencies when we don't need to?\n Awesome! So in ~1 month this will be fixed from react natives side?\n Is there a particular version we can update to for now just to unblock this? Is it still `^0.6.0` like you did here: https://github.com/facebook/emitter/pull/16 ?\n  Yeah this is a case where it's okay to pass props to the container. In particular passing an ID to a container is okay when it's needed, I haven't really run into any other valid use cases though\n  Thank you for the PR, but in short we do not want to make the dispatcher aware of actions. All payloads do not necessarily have a type and then this error message would not make sense.\n\nThere is a bit more context here: https://github.com/facebook/flux/issues/95\n  It kinda sucks that we have to update flux every single time `fbjs` gets a version bump. We just bumped it about a week ago too.\n\nThoughts @zpao?\n It might also be possible to simply remove fbjs as a dependency of flux. I don't think we use much other than invariant from it. (would also need to remove from emitter too, but I think it's the same story there)\n Hmm, fair enough :)\n\nGoing to close this then since it doesn't seem like a great idea to be chasing every project having the same set of dependencies.\n  It looks like your question was answered on stack overflow. This question is also unrelated to Flux.\n  Thanks for the PR, we recently updated the examples so this is no longer relevant.\r\n\r\nhttps://github.com/facebook/flux/tree/master/examples  Thanks for the PR, we recently updated the examples so this is no longer relevant.\r\n\r\nhttps://github.com/facebook/flux/tree/master/examples  Thanks for the PR, we recently updated the examples so this is no longer relevant.\r\n\r\nhttps://github.com/facebook/flux/tree/master/examples  Aha, thanks for looking into this @bannaN! Yes there is a timing gap where changes fired between `getInitialState()` and `componentDidMount()` are lost.\n  Thanks for the PR, we recently updated the examples so this is no longer relevant.\r\n\r\nhttps://github.com/facebook/flux/tree/master/examples  This is no longer relevant, chat example is gone and replace with new async tutorial here: https://github.com/facebook/flux/tree/master/examples  Thanks for the PR, we recently updated the examples so this is no longer relevant.\r\n\r\nhttps://github.com/facebook/flux/tree/master/examples  You should generally choose one or the other for any single component. Either get the component's state purely from stores, or have a component maintain it's own state. Merging of state will likely lead to a mess.\n  See conversation from @lukescott in #285.\n\nFlow types do not appear to be able to be included properly in the .flowconfig.\n  This is something that has been recommended several times as smaller points in somewhat related issues. Creating an issue to track this specifically.\n  This whole bit was removed thanks to #137 \n  This is a reasonable overview of flux, http://blog.andrewray.me/flux-for-stupid-people/, there are also many others if you search for them.\n  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n Thanks for the PR, we recently updated the examples so this is no longer relevant.\r\n\r\nhttps://github.com/facebook/flux/tree/master/examples  Thanks!\n  This should be resolved now - please reopen this if it hasn't been.\n  ```\r\nvar handleClick = function() {\r\n  Dispatcher.dispatch('PROFILE_NAME_CHANGED');\r\n  Dispatcher.dispatch('SHOW_DASHBOARD');\r\n};\r\n```\r\n\r\nIsn't the worst thing in the world. It shouldn't be necessary but sometimes it's easier to do things this way. I know we sequentially dispatch actions in several places.\r\n\r\nI don't have anything else to add other than my previous comments. Going to close this out. If you'd like to discuss this further please re-open.  Removed this tutorial in favor of: https://github.com/facebook/flux/tree/master/examples  I opened #297 to track that issue since it is separate from what this was originally opened for. It looks to me like that is how the flowconfig should be set up so i'll have to dig into it a bit more.\n  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n Looks like #241 beat you to it :)\n  This conflicts now, please rebase.\n Thanks!\n  Should be resolved now, `npm install` and `npm run build` work successfully for me on:\n\nnode v4.2.1\nnpm 3.3.11\n\nPlease re-open if this is still failing for you!\n I killed the old examples, everything under https://github.com/facebook/flux/tree/master/examples should now work and npm install fine.  Any changes to the examples should be done through PR, hope that answers your question!\n  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  I have no idea how to have multiple bower packages in the same repo. I was just reading: https://bower.io/docs/creating-packages/\r\n\r\nIf someone wants to put up a PR/help with this I'm happy to accept them. The files are in /dist now.  Opened #296 for adding in these invariants. We'll also want to add one for register I think.\n  Thanks!\n  Thanks!\n  I like your way better, even if both are fine :+1: \n  Seems like there are a few workarounds, and this appears to be more appropriate as an issue with react-router than here.\n  We will prefer ES6 classes for extending the Dispatcher going forward.\n\nThat said, in general you should not need to extend the Dispatcher. If you want additional functionality to happen on every action just register a callback with the dispatcher.\n  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n I don't think this step is actually necessary:\n\n```\n[kad flux-todomvc] pwd\n/Users/kad/dev/flux/examples/flux-todomvc\n[kad flux-todomvc] rm -rf node_modules\n[kad flux-todomvc] npm install\n# output omitted, but it completes succesfully\n[kad flux-todomvc] npm start\n\n> todomvc-flux@0.0.3 start /Users/kad/dev/flux/examples/flux-todomvc\n> watchify -o js/bundle.js -v -d js/app.js\n\n2906584 bytes written to js/bundle.js (1.64 seconds)\n```\n Installing watchify globally is not the fix we want. If that's required there is another bug somewhere that we should resolve.\n  Looks like this got resolved.\n  Should be resolved now, re-open #288 if that's not the case.\n  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n I see this used here: https://github.com/facebook/flux/blob/master/examples/flux-todomvc/js/components/MainSection.react.js#L45\n\nI think it's easiest to just keep these in sync even if there is a slight bit of extra information.\n  Thanks for the PR, we recently updated the examples so this is no longer relevant.\r\n\r\nhttps://github.com/facebook/flux/tree/master/examples  Can you revert your changes to dist/Flux.js and squash your commits?\n That may be the case, but it shouldn't be part of this PR in any case. I don't know if for this repo we prefer to update the dist/ files only when doing a new release or with every commit.\n Thanks!\n  Looks okay to me! Thanks.\n  These are actually auto-generated by a script I believe, so I don't think we should be changing them manually.\n  Something fishy is going on, but this looks like it will break this call-site: https://github.com/facebook/flux/blob/master/examples/flux-chat/js/components/MessageComposer.react.js#L49\n\nBut I'm not convinced that this call-site is even correct. Would you mind cleaning up this call-site to not use the second parameter if you are removing it?\n Thanks for the PR, we recently updated the examples so this is no longer relevant. \r\n\r\nhttps://github.com/facebook/flux/tree/master/examples  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n  Thanks!\n  It is present and in use here: https://github.com/facebook/flux/blob/master/examples/flux-todomvc/js/components/MainSection.react.js#L45\n Ah whoops I misread this as actually modifying the code, not the documentation! My mistake!\n\nI think there was another PR doing the same thing that I had closed as not an issue, but if multiple people find this confusing perhaps we can merge this in.\n  Looks good to me! Thanks!\n  If you can change that this looks ready to merge!\n And merged just about another year later... :) Nice teamwork! :P  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n Hey @jepezi, sorry this hasn't had any action in such a long time. I just updated the documentation on the website so not all of these documents are still relevant, some are though. If you don't mind bringing this in line with the current state of the site I can merge it. This is really awesome work :)\r\n\r\nIf you don't have the time we can just close this so it's not hanging around forever. It's completely up to you, let me know how you'd like to proceed.\r\n\r\nThanks! I'm going to close this due to staleness. Please re-open if you'd like to work on it and I'll be happy to help merge it.  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  #137 removes this part of the documentation, so this shouldn't be necessary\n  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n  Yeah generally you need to associate the result of the WebAPIUtils actions with the initial input. Generally an ID, text could work too.\n  We have one in ES6, I think that is okay for now.\n  I've completely rewritten the examples, including a complex example dealing with server data and async actions. Hopefully it will provide enough guidance on dealing with async actions.\r\n\r\nhttps://github.com/facebook/flux/tree/master/examples  Here's an example that use Flux while talking to a real server implementation: https://github.com/staltz/flux-challenge/tree/master/submissions/kyldvs\n  I think at this point Redux captures the wait-for-less use case very cleanly. I would highly recommend that library. We will not be removing waitFor from our implementation of dispatcher any time soon though.  We added some more examples, and specifically the async-example has actions originating from stores. The two referenced documents have also been removed. So I believe this is no longer an issue.\r\n\r\nNew Examples: https://github.com/facebook/flux/tree/master/examples  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  A PR for this would be nice :)\n  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n  Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  Looks good!  I'll merge this in and then sync the change to our internal code.  Thanks for this!\n Done.  thx for the reminder!\n  I consider Ruby on Rails to be a fairly canonical MVC implementation.  This was certainly the MVC implementation with which I was most familiar when I wrote that documentation.  Rails controllers retrieve data from the model and then render the view, providing the view with that data. http://guides.rubyonrails.org/layouts_and_rendering.html#overview-how-the-pieces-fit-together\n\nBut I'd rather not debate what is and is not MVC.  That's one of the most tired and endless debates on the internet, rivaling Vim vs. Emacs or semicolons in JavaScript.  I'd rather just work on having some documentation about Flux that the majority of developers will be able to understand.\n\nFacebook is not interested in criticizing MVC.  I am not interested in criticizing MVC.  We've simply found Flux to be a better way for us to write our applications.  It's not MVC.  It's almost CQRS, but not quite.  But since it's not really either of these or trying to be a perfect implementation of any theoretical pattern in particular, we just call it Flux.\n  Thanks!\n  Just following the source...\nhttps://github.com/facebook/flux/blob/master/examples/flux-chat/js/utils/ChatWebAPIUtils.js#L29\nhttps://github.com/facebook/flux/blob/master/examples/flux-chat/js/actions/ChatServerActionCreators.js#L20\n...looks like that's needed to initialize the stores with a dispatched action.\n\nThe server interaction is getting faked with local storage in the chat app.  I wouldn't take it too seriously.\n  This is really great, but I have not yet had time to do a full review.  Soon!\n\nAs an aside, I have rarely felt the need to create tests for components once I get all state into the stores.  I think it's much more important to be testing stores than to be testing components.  However, I like the idea that we should point the way toward how to this kind of testing, should the need arise.\n  I think the missing piece here is a WebAPIUtils module.  This module has access to all the stores and knows how to construct a query to the Web API.  The call to the Web API is based on the current values it can retrieve from the stores through the stores' getter methods.\n\nHere's the sequence:\n1. User performs edit.\n2. View component calls action creator (with edited text?).\n  `SearchActionCreators.refresh()`\n3. The action creator calls the WebAPIUtils module after dispatching the action. \n  `WebAPIUtils.refresh()`\n4. The WebAPIUtils module gets data from the stores that it needs to make the call to the server.\n  `var query = SearchStore.getCurrentQuery()`\n5. WebAPIUtils initiates server call and in turn calls an action creator when it handles the response.\n\n``` javascript\n// XHR using something like jQuery\n$.ajax({\n  url: mySearchAPIEndpoint,\n  data: query,\n  success: SearchActionCreators.refreshSucceeded,   \n  error: SearchActionCreators.refreshErrored,\n});\n```\n\nI want to clarify some things mentioned above, however.\n\nOther than the controller-views, the view components should not have references to the stores.  If you need a value in the views, you should be passing that value down through props.\n\nActions (objects) should report on what has just happened in the \"real\" world (the server responded in a certain way, the user acted upon the UI in a certain way, a requestAnimationFrame has just cycled, etc).  \n\nAction creators (methods) should not be responsible for maintaining state or passing unchanged values around the application.  Instead, they just construct an action and pass it to the dispatcher.  They can also call out to a WebAPIUtils module to initiate a server call as an additional side effect.\n\nThe action should be as complete of a picture as possible as to what just happened.  Then the stores take over and decide what to do about it.  If the stores need to know information from a different store, they can call that store's getters after a call to Dispatcher.waitFor(), ensuring that they will receive the latest data.\n  Should be resolved now\n  Watchify writes to bundle.js whenever any part of the code changes.  This is the transpiling process, allowing JSX and ECMAScript6 and all that good stuff to work.\n\nAs far as the build size goes, you're seeing the development build.  This is unminified.\n\nThe production build seems to be buggy at the moment (not sure if the API for browserify/envify has changed since I first wrote this), but I was able to get it to work after globally installing envify and uglify, and then running the following:\n\n$ browserify . -t [envify --NODE_ENV production] | uglifyjs -cm > js/bundle.min.js\n\nThis produced the following:\n\n189793 Mar 24 20:07 bundle.min.js\n\nTo find out how much of that is React, I built my own copy of React, and that produced this:\n\n121391 Mar 24 20:36 react.min.js\n React gzipped is \n  compressed uncompressed  ratio uncompressed_name\n       36347       121391  70.0% react.min.js\n\nand flux-chat gzipped is\n  compressed uncompressed  ratio uncompressed_name\n       51823       189793  72.6% bundle.min.js\n  Why would we want to load the minified code in an example application?  The unminified code is there so that people can inspect it, put in debugger and console.log statements, etc.\n  thanks!\n  Yes, this is correct.  One could also put the `emitChange()` in the update method (some would say this is cleaner) but that adds additional side effects to that method.  I also like seeing where all the emits are happening in one place, making it easier to understand which actions cause an emit, and why, and which don't.\n  thanks!\n  I typically initialize the stores by dispatching an INITIAL_LOAD action prior to rendering.\n\nBy the way, the best way to my attention on Stack Overflow is to tag your question with one of these:\nreactjs-flux\nreact-flux\nflux-react\nfluxjs\n\nI use the [Question Monitor for Stack Exchange](https://chrome.google.com/webstore/detail/question-monitor-for-stac/bnnkhapbhkejookmhgpgaikfdoegkmdp) (aka \"StackTrack\") Chrome extension to monitor those tags.\n  Yes, this is often the best approach.  Just like relational databases should be normalized, so should the stores.  Some folks may disagree with me, but I think you save yourself some insanity if you maintain a single source of truth for all data.\n\n>  would the main user store need to listen to all actions that can change any of the derived stores or is there some other way to update it when one of the derived stores changes?\n\nThe main store is already receiving all the actions, but yes it might need to have more cases in the switch statement that handles the actions.\n\nYou may be touching on one of the problems we've discovered at Facebook in working in very large Flux applications: when an engineer is adding code to handle new actions, how is that engineer to know what other stores need to also be updated to handle the same actions?\n\nWe have some new solutions that help with this, and we hope to open source them soon in the form of both a FluxStore base class and some non-breaking changes to the dispatcher.  These include a hasChanged() method in the store, and a mechanism by which additional callbacks may be invoked at the end of the dispatch, after all data mutations are complete.  One can build a system on top of these features that will alert engineers with console warnings when dependent stores need to handle the same actions as their \"upstream\" stores.\n Appears answered.\n  Use immutable data if you are working with shouldComponentUpdate.  I'd recommend [ImmutableJS](http://facebook.github.io/immutable-js/) for that.\n\nWe are keeping these examples very simple so they are easy to understand -- the minimum code required to explain the pattern.  Use of shouldComponentUpdate fall outside of that.\n  Woohoo!  Thanks for doing this!  This is great!  This has been on my list of things to do for a long time.\n  You really don't want to chain dispatches.  In your case, it sounds like you really want to do more work server-side and simply return the correct data.  However, if you don't have control over the server-side code, then I can understand that you need to create a hack to make this work.  In that case, yes, a Promise is the best strategy.  \n\nKeep in mind also that you don't have to use an action creator to create a call to the server.  You simply need to handle the response with a new action.\n  The stores should be largely reusable.  They are very decoupled from the rest of the application, if you have created them correctly.  However, dependencies between stores can sometimes make this more difficult.  To move a fully decoupled store from one application to another, you would simply need to be using the same action types in both applications.\n You can get a lot more reuse out of individual, low-level React components if you pass methods into them as props to define their behavior.  This lets you use them in whatever situation you want.\n\nWhen creating a Flux application that needs to be able to be used multiple times on the page, I find that either need to pass around a reference to the Dispatcher and move to store instances, or I need to pass around an appID for each instance of the app and stick with singleton stores.\n  Yeah, the name is probably a little clumsy. There's a lot of information out in the world now about action creators, so I doubt we want to create more confusion by changing the name now.  \n\nThe history here is that we used to call the FooActionCreators module just simply FooActions, but this led to some confusion -- the methods were seen as the action instead of the object they create and pass to the dispatcher.  In the summer of 2014 Jing Chen and I were putting together a [presentation for ForwardJS](http://facebook.github.io/flux/docs/videos.html#react-and-flux-building-applications-with-a-unidirectional-data-flow-forward-js-2014) and we wanted to dispel this confusion. We came up with ActionCreator a day or two before the conference.  Now we're a bit stuck with it.\n\nI'll think about it, though.  Thanks for bringing it up.\n\nI think Actor or Intent is a fine name for these methods, and I encourage you to do what you think is best for your teams.  There are connotations to both that I might quibble with, however.  \n\nActor tends to be something with agency, which these methods do not really have.  \n\nIntent leans toward thinking of the methods like setters, and this is an easy trap to fall into.  The actions are reporting on something that happened in the real world -- the user clicked, the server responded, etc -- and the Flux stores need to respond to this real world change.  Intent implies that the server \"intends\" for something to happen in the client side application, which is not really true -- it's the store that needs listen to actions and respond.  The actions are more like a newspaper, reporting on the real world.  Thinking more in these terms, I've switched to naming all my action types in the past tense.\n\nSee also this conversation I had with @abdullin, who is the person who first emphasized this \"past\" quality of actions. https://gist.github.com/abdullin/5953ab4f5eae0a7fc8f9\n I don't think we will be changing from the name Action Creators anytime soon. Even if it isn't the perfect name.\n  Thanks for this!\n  @zpao is working on this, but it probably won't live here.  I think eventually we will require invariant from another module.\n  Jest uses Node so that we can run tests from the command line.  I don't think there is any other reason beyond that.  We aren't doing much isomorphic Flux with Node at Facebook yet.  We might be doing some server-side rendering later, with Relay, but we're not doing that with Flux.\n\nIf you want to use promises, for example, which a browser might support but Node does not, you would probably want to add a polyfill and then provide a mock implementation of the polyfill.  Alternatively, you could simply tell Jest not to mock the polyfill, but you might experience some async weirdness in the test in that case.  \n\nmock return values: https://facebook.github.io/jest/docs/api.html#mockfn-mockreturnvalue-value\nmock implementations: https://facebook.github.io/jest/docs/api.html#mockfn-mockimplementation-fn\nmock timers: https://facebook.github.io/jest/docs/timer-mocks.html#content\ndon't mock, if you really need it: https://facebook.github.io/jest/docs/api.html#jest-dontmock-modulename\nnuke jest automocking: https://facebook.github.io/jest/docs/api.html#jest-automockoff\n\n@jeffmo would know more about using Jest with promises (or other browser-specific features), and I think asking this question in Jest repo would be appropriate.\n It appears like this is mostly answered. Feel free to re-open if there are more questions here.\n  I pulled this CSS directly from TodoMVC.  It's not supposed to be anything other than an example, so getting it perfect is not a priority.  But I would like to keep this aligned with their CSS.  It looks like the best way to do that would be to load the css from a npm module: https://www.npmjs.com/package/todomvc-app-css\n\nSo I'd rather not go down the road of editing the CSS here, but if you'd like to convert the app to use the npm module in a new pull request, that would be super helpful.\n  I'm going to have to say no on this one, sorry.\nTwo reasons: \nFirst, this is the way I think of it: step #1: create the repo.  step #2: build.  The two sentences are there for a reason. \nSecondly, this change is just a little too trivial.\n poetic license, yo.\n  According to [Merriam-Webster](http://www.merriam-webster.com/dictionary/broadcast), \"broadcast\" may be used as a noun, an adjective, an adverb and as both a transitive or intransitive verb.  I see an example on that page that seems quite similar to how I used it in Overview.md: \"The interview was broadcast from London.\" \n  thanks!\n  thanks!\n  This seems like a fine thing for you to do in your own fork, but it really doesn't belong here.  The Flux-TodoMVC app should be as simple as possible, with a minimum of clutter.  It's not supposed to be an ideal implementation.  It's supposed to be instructional for someone new to Flux.\n  I'm running Mavericks, as are most people that have gotten this running.  This is a problem with how something related to node or npm or node_modules is installed (or not) on your machine, not Mavericks.\n  thanks!\n  Nice!  thank you.\n  Interesting point about the potential for abuse, but I disagree that we want to pass an array of tokens to `register()`.  This would create the same dependency graph for every action, and we want different dependency graphs per action.\n\nI like the idea of the invariants in `register` and `unregister`, though.  I will float that idea internally at FB to @yungsters and others, and if the idea is accepted by those folks, I'll ask you for a pull request.\n Opened #296 to track adding in these invariants.\n  2nd pull request on this, and I am unable to repro.\nshould be referencing https://github.com/facebook/flux/blob/master/website/src/flux/img/flux-simple-f8-diagram-with-client-action-1300w.png.\nare you unable to see the image?\n seems to be very similar to part of #139 \n  Yeah, right on.  Thanks.  Matches https://github.com/facebook/flux/blob/master/examples/flux-todomvc/js/stores/TodoStore.js#L15\n  I would love that!  I'll connect with @vjeux on how to make sure we can support the translated docs.  Thanks!\n Any progress on these translations?   I would really love to see this happen.\n Going to close this out, let's open new issues if there are more questions related to this rather than having a single long-running issue related to all things translation :)\n  thanks!\n  Thanks for this PR, @benhartley!  I already added the .md extension before I saw this, however.  Also, I dropped the old image on purpose in favor of the new one.  Do you think the old image is better?  I have been a bit sorry to see that floating around the web so much, because I think it makes Flux seem complex (and I really think it isn't) and it also misleadingly implies that web API calls can only emanate from the action creators.  Curious about your thoughts on old vs. new.\n  I don't think we are going to change Dispatcher to provide a hook _after_ the dispatch completes, but internally we are looking very seriously at updating Dispatcher to provide a hook after all data mutations and just before `_stopDispatching` is called.  That is, just before this line: https://github.com/facebook/flux/blob/master/src/Dispatcher.js#L195  That change will make it to GitHub if we find that it helps us internally at FB with our applications.\n ^^^ That's a hack that should be avoided.  Dispatch-within-a-dispatch errors are caused by improper code design 99.9% of the time.  Instead of doing the setTimeout, do what you need to do in response to the original action.  I think this is most often a reflection of equating actions with setters -- they are not the same.\n Closing this out since there hasn't been activity for a while and a few solutions have been provided above.\n  This is really great!  Thanks for doing all this!  Do you want to make the small changes I suggested, or should I make those on your PR, or even as a follow up?\n Looks good, and I'm not too concerned with my comment! Thanks for cleaning this up!\n  Thanks!\n  The main place for chat right now is the reactjs channel on freenode IRC.  \n\nLots of Facebook employees hang out there who have extensive experience with Flux.  Many have been working with Flux for about two years, and a few even a bit longer than that.\n\nThat said, I'm open to the idea of creating a Gitter chatroom.  I am seeing some concerns on the web about their request for extended permissions, however, which might be a deal breaker for me.  I will do some research on it.\n  @tindli to answer your questions:\n\n1 & 2:\nI'm definitely interested in cursors, but I am not sure if a cursor-based example should be the _next_ example app.  Just ImmutableJS should be good enough for our next step.  Not to say we can't start thinking about a cursor example -- I'd just prefer to focus on the immediate next example right now.  I do like the ideas you are putting forth about cursors in actions, etc.  But to be honest here, I have not done it yet.  We'll be teaching each other on that.\n\n3:\nA local `setState()` is definitely not a thing of the past when using immutable data.  Controlled input components in particular, as you noted, often have a bit of local component state.  It is not a bad practice.  \n\nThere are a couple of warning signs that imply that some local state should get moved to a store:\n1. the data in this.state gets passed to a child\n2. the data in this.state needs to be known by another part of the application\n3. the logic surrounding the management of this.state becomes more than trivial.\n\nThe checks on these values are typically quite minimal.  How many values would we be checking?  And `PureRenderMixin` makes it quite easy, by using `shallowEqual()`:\nhttps://github.com/facebook/react/blob/master/src/addons/ReactComponentWithPureRenderMixin.js\nhttps://github.com/facebook/react/blob/master/src/utils/shallowEqual.js\n\n4:\nMy understanding is that the GC for ImmutableJS is quite good and was definitely on the mind of @leebyron while he was developing it.  Also, memory usage is low due to \"structural sharing\" of data between versions of the same data structure.  See Lee's excellent React.js Conf talk: https://www.youtube.com/watch?v=I7IdS-PbEgI  \n\nI can't comment too much on server-side Flux other than to say there are definitely different ways to approach it.  You can go the route of Yahoo! and do full blown Flux on the server, or you can do something more like SoundCloud and use Flux as a rendering middleware.  I'm sure there are other approaches as well.\n\nBuilding an immutable example:\n\nI think we could try to build a small example together.  I am open to suggestions on what that application should be, or what the process of collaboration should be.  But I do think we should keep it relatively small and simple -- it is an example, after all, and as such it should be readable, understandable, and free of distractions.  I believe @kevinold was interested in contributing too.\n\nI'd suggest that \"immutable\" be used in the example name. Like flux-chat or flux-todomvc, something like flux-immutable or flux-immutable-[whatever] should be the name.  Also, I'd ask that any prefix on the files to identify them as belonging to the same app should be ~7 characters or less (e.g. the use of \"Chat\" here: https://github.com/facebook/flux/tree/master/examples/flux-chat/js/utils).\n http://facebook.github.io/flux/docs/flux-utils.html#content is built with immutability in mind, and here is an example using it: https://github.com/staltz/flux-challenge/tree/master/submissions/kyldvs\n  Do you need to block the code execution while the long-running stuff is happening?  If not, you might consider putting it in a promise, and then issuing the action when it's complete.  This would be a bit more like the way XHR calls work -- the asynchronous nature of what you're doing is more upfront, rather than a hack at the end.\n\nThe setTimeout trick is really a hack, and I think it's a somewhat dangerous habit to get into.  Most of the time, these dispatch-within-a-dispatch errors are telling us that we have something wrong with our design, that we are thinking sequentially.  The usual fix is to back up and build the second action into the first action.  But with truly long-running stuff this isn't possible, and if an asynchronous solution is possible, it tends to be the best route.\n  The Flux testing blog post was already added to the Flux documents in 1eb5fb13.\n\nAlso, the tests in the example application pass.  Maybe you can follow the example tests to see what the problem might be in your tests.  If there is an actual problem in the documentation, please reopen this issue.\n  Mainly because we were trying to create an example where we could show waitFor().  The example is a bit forced.\n  Yeah, okay.  I'm actually not entirely sure why JSTransform folks are doing the munge.  I know there is a desire to create a kind of pseudo-privacy, but I agree that it's hard to read while debugging.  I'll merge this but if I hear differently from them at some point with some new info, I might put it back.  Do you think this means I should bump the version? \n  Done in commit 1eb5fb13.\n  thanks!\n  Audit and revise:\nhttps://github.com/facebook/flux/blob/master/src/Dispatcher.js#L20-L110\n\nIn particular:\n\nUse of \"chained\" is not clear -- the docs mean to say that a chain of dependencies may be declared across multiple stores.\nhttps://github.com/facebook/flux/blob/master/src/Dispatcher.js#L89\n\nThere might also be something strange going on with the multiple cases, as revised in #7 and this is worth examining again.\n  Thanks for this!  Looking at this again, I'm seeing that those docs were never very clear.  I've opened #126 to remind me to update them.\n  thanks!\n  The handleServerAction and handleViewAction wrappers around Dispatcher.dispatch() were unnecessary cruft that came over from a couple of applications we built at Facebook.  If one needs to determine whether a particular action came from the server or the view, a property can be added to the action to denote the origin.\n\nIt's a bit cleaner to have the dispatcher's payload be synonymous with the action.\n  @sterpe and @sompylasar thanks for jumping in here.  you guys are correct -- all application state should be maintained in the stores, not the view components.\n  Yes, component state is different from application state, and React components should maintain component state when necessary.  Your example seems like a good candidate for maintaining a little bit of component state.  However, if any _other_ component needs to know whether the balloon is open, it becomes application state, and then it should be maintained in a store.\n Looks like bill mostly answered this.\n  Yeah, this makes more sense to me, honestly.  \n\nThe chat example was something I put together for a presentation at the ForwardJS conference in the fall of 2014 as an attempt to show a more complicated example than the TodoMVC one, yet still keep it simple.  Jing and I wanted to show both waitFor() and web API interactions.  Unfortunately, my attempt at increased complexity while staying as simple as possible resulted in an example that was a little bit forced.\n\nWe wanted to show the API calls coming out of the action creators, as this is the style Jing prefers in most cases.  Other folks at FB prefer to make the calls to the web API in the store, as you have done here.  I'm pretty neutral about it.  There are two different ways to do it, and both are correct. \n\nOne advantage of doing the XHR call in the action creator instead of the store, as a rule: this makes it impossible to make the mistake of handling the XHR response directly in the store, rather than creating a new action.  Then requiring the action creator modules in the store becomes an easily recognizable red flag.  But this is really a matter of taste and of team dynamics, I think.\n\nI think we should let the current code stand as-is, and not cause too much confusion in the Flux community by changing it at this point.  But I'll keep this open and think about it some more.  I should probably write up a full explanation of all this in blog post or documentation page, and maybe even develop a new example that shows stores making web API calls.\n ok that's cool, we can do that.  If you revise this in that way, I'll merge it in.\n  Hi @RileyTomasek that would be great.  Been meaning to get to this for a long time. I'm actively working on the Flux repo / site this week, so if there is any delay just let me know, and I'll take it on myself.  Thanks!\n @tleunen If you need to use the same action, you can just add a property to the action denoting the origin and use that as a flag in the stores to handle the action differently.\n This was taken care of in #172 by @jarsbe.\n  Paragraph is still valid.  Flux is not a framework, its a pattern.  boilerplate project has not yet been written.\n  tabs vs. spaces ftw. ;)  but seriously, thanks.\n  Thanks\n  The dispatcher is an abstracted object that doesn't necessarily know anything about Flux.  We use the dispatcher at Facebook for more than just Flux, so we can't modify it here to become Flux-specific.\n  We actually want to get rid of that handleViewAction stuff entirely and just call ChatAppDispatcher.dispatch() directly in the action creators.\n  Thanks for this clean up!\n  Yes this is an artifact of how Flux was initially released with my own less-than-ideal Dispatcher instead of the real one that Facebook uses in production.  Please feel free to correct the error with a pull request.\n One of the major problems with the Promise-based solution was that I could not figure out how to detect a circular dependency.  In the FB production implementation, with the synchronous loop, this error is detected and displayed to the programmer: \nhttps://github.com/facebook/flux/blob/master/src/Dispatcher.js#L162-L167\n The [Flux overview page](http://facebook.github.io/flux/docs/overview.html) has been updated.  Among other changes, it now accurately reflects the API of the FB [dispatcher](https://www.npmjs.com/package/flux) available on npm.\n  The current version of the dispatcher is working correctly and I would expect the error to occur, given how you have described the situation.  \n\nThe reason why it works with a setTimeout is that this puts the faked API response into a new execution context, which only runs after the current execution context completes.  Without the setTimeout, you are in the same execution context, and you are then dispatching while you are already in the middle of a dispatch.\n\nWhether the dispatcher could be improved, however, is another question, and I welcome your ideas on how to do that.  We don't want to allow overlapping dispatches, as that would make the entire Flux update cycle much more difficult to manage and to reason about.  I do recall at one time a suggestion for creating an action queue.  But this would encourage bad code, where a person could enqueue cascading dispatches -- a store would respond to a dispatched action and then directly dispatch a new action, rather than providing code for responding to the original action.  We do not want the dispatcher to allow that sort of thing.\n Yes, this is a good solution, and has actually been discussed at FB (which is why I mentioned it above) but it's a little bit dangerous for inexperienced Flux programmers.  One could easily call AppDispatcher.assign() from within the stores and get involved with cascading actions, which we want to avoid.  If you think you have the discipline on your team to not do that, then I'd say you should go for it.  But I'd rather not introduce that here in the Flux repo (nor do I want to get involved in additional dependencies on npm modules).  If you can figure out a way to introduce this queue that would not allow cascading actions issued by stores, then I'd definitely be more inclined to accept that solution.\n  There are some tests now.\n  You might be saying that we should be using ES6 classes?  And I would agree, generally, but the examples are intended to be instructional to the widest possible audiece, so they are written in ES5.  It would be worth publishing an ES6 version of he Flux examples just so people could see how we _really_ write code at FB.\n  In practice we've not noticed performance problems with stores \"over-informing\". That said there are some nice constructs to help make sure that:\n1. Stores only inform when they change compare references at the end: https://github.com/facebook/flux/blob/master/src/stores/FluxReduceStore.js#L81-L88\n2. Only update the state of a react component once per dispatch: https://github.com/facebook/flux/blob/master/src/FluxContainer.js#L89\n3. Wrap Dispatcher.dispatch in ReactBatchedUpdates so that rendering only happens once all stores have handled an action.\n\nClosing this out since it's old and appears to be mostly answered.\n  thanks!\n  Also see McFly\nhttps://github.com/kenwheeler/mcfly\n\nOn Thursday, November 13, 2014, Reza Akhavan notifications@github.com\nwrote:\n\n> I'm happy to share flux-store https://github.com/jedireza/flux-store [image:\n> :heart:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/flux/issues/97#issuecomment-62928999.\n  thanks for letting me know!\n  The dispatcher was designed to be a more abstract component, capable of many uses beyond Flux, and to keep this in sync with Facebook's production code we need to keep it this way.  It knows nothing about the payload.type -- a payload may not have a type, if the dispatcher is not being used in a Flux application.  So let's remove the ideas here about the action and the type, and just display the whole new payload in the error.\n  thanks!\n  Yes, I think you're right.  Pull request?  Or I can take care of it next week.\n added in #93 \n  Merged it by hand.  The use of object-assign still blames to you.  Thanks a ton for this!  \n  Yes, this is how I would actually build it, but we were trying to show that Web API calls can happen directly out of the action creators.  There is nothing wrong with making the call in either place, per se, and sometimes its actually cleaner to do it in the action creators than to do it in the stores.\n\nBut the important part is what you have in the comment:\n\n> ChatWebAPIUtils.createMessage would trigger an error/success action\n\nI'm open to changing the example, but I do want to keep it as simple as possible.\n  You can put logic in an ActionCreator, but often there is a better design.\n\n> \"Calculate and apply a route which brings this resource to that target\"\n\nIs this in response to a user interaction with the UI?  \n\nIf so, I would try to do as much logic as possible in the stores, perhaps utilizing Dispatcher.waitFor(), and pass those values down as props to the view. In an event handler, the view would only apply the user-driven variables against those precalculated values that were passed down, and then call the appropriate ActionCreator with the parameters it needs.\n\nIf this is in response to another action, I would back up and look at how I am handling that action.  I would gather all the required information, again possibly with waitFor(), to \"apply a route...\" in response to that original action.\n  thanks!\n  Thanks!\n  dispatcherIndex is supposed to be a property of the store, so that other stores can refer to it with \n\n``` javascript\nAppDispatcher.waitFor([TodoStore.dispatcherIndex]);\n```\n\nI see that there is a discrepancy with real code here, but it's not what you have in the PR.\n\nhttps://github.com/facebook/flux/blob/master/examples/flux-todomvc/js/stores/TodoStore.js\n\nIn the tutorial, it's useful for people to see that dispatchToken is a property of the store, so I'm tempted to let it continue to be slightly out of sync with the code.  Alternatively, we might use bind or something (if needed) to bring the registered callback back into the body of the store.\n  I can port over Facebook's internal tests, I think.  Let's keep this issue open until I get that done.\n I'm not sure what those tests are trying to do.  I copied these over from our internal tests, but these don't make sense.  I also can't find any history in our internal code of some legacy version of the dispatcher having these second arguments.  I'll ask around at FB about this, but for now I'm going to pull out those tests.\n Did not pull out the tests, but rather simply fixed them to take the correct arguments.  These are the tests that make sure the dispatcher throws an error if you create a circular dependency -- very important.\n  Yeah, we should hoist the original declaration of those variables out to the closure of the describe() function.  Please submit a pull request, if you want, or I can get to it when I can.\n Thanks for taking care of this!\n  thanks!\n  A lot of this seems very specific to your application, and it's difficult to get enough context from what you have written here.  Perhaps more code would help the community here understand your issue?\n\nBut on a side note, this concerns me:\n\n``` javascript\nalertStore.add({contents: new UnlockJob({...})})\n```\n\nThat looks an awful lot like a setter on your store, and a store should not have any setter methods.  The only way data should be getting into the store is though the callback it registers with the dispatcher.\n I would render a PopupControllerView at the bottom of the body, in it's own React root, which would be listening to stores.  It might have number of child popups, or I might create logic to dynamically create those children.\n\nI might maintain a PopupStore, which would have currentPopupID value, which could be null.  Down in my list of popup components, they would all receive currentPopupID as a prop, and if their popupID matched, they would get displayed.  \n\nOr I would simply let the values in the other stores drive what popup to render more directly, perhaps with some logic in PopupControllerView determining if a popup should be displayed, or which one.\n\nBasically this is all just Flux + React -- nothing special going on, other than creating a separate root for it, and I'm not even sure that's necessary.  The generic Popup React component could be made to simply take props and let the store or controller-view above it determine those props.  You could then use that generic component to compose various different popups.\n  My understanding is that FB is working on exposing Object.assign in a way that can be shared across projects, not just within React.  But we're not there yet.  So I am thinking about using Sindre's npm module for Object.assign until then.\n  It's difficult to say without more context.  This might be a situation where I would utilize the component's state, or I might move the state to the store.  I think it would depend on the situation, and how the animation relates to the rest of the application state.\n\nIf you were to use the component's state, you could set up a requestAnimationFrame (rAF) in the component and call setState() with a new value on every cycle of the rAF.  You could also do something similar in the store instead.\n\nIf you were using CSS transitions, you might let other parts of the application know you are currently animating (if needed) with a new action, store that state in the stores, and then when the animation is over, dispatch a new action to inform other parts of the app again.\n\nThe only complex animation I've done with React/Flux has been with a rAF in the store, and it was managing a very long animation -- over a minute in length.  \n\nFor shorter, more UI-oriented things, I think I would keep the animation state in the components, and the more application-oriented state in the store.  For example, I would have a value in the store like _isEditing.  When _isEditing is true, the user should see an edit interface in a modal.  When _isEditing first changes from false to true (checked in componentWillReceiveProps), the react component changes its state and starts the animation.\n\ncc @sebmarkbage\n  I'd venture to say that S1 and S2 should probably be the same store.  Why aren't they?\n Why not manage both jobs and achievements in one store?  If you really want to separate the code for readability/maintainability, then yes, you want to have those actions as cases in the AchievementStore's switch statement, waitFor the JobStore, and then retrieve the updated data from the JobStore.  But if you can, it really sounds like they should be the same store.  waitFor is really a last resort for managing complexity, and not at all the ideal in a well-designed system.  Sometimes, it's unavoidable.  But in your situation, I would seriously consider merging the two stores.  Please remember that stores are not ORM-style models, and they are not Backbone collections.  They manage a \"domain\" of logic and data.  It sounds to me like jobs and achievements might actually be within the same domain.\n  In what way does this involve the actions, dispatcher or stores?\n\nOn Saturday, October 4, 2014, Justin Gordon notifications@github.com\nwrote:\n\n> I have an callback for onBlur that will setState, and based on the state,\n> some buttons may be removed from the screen.\n> \n> The problem is that one of these buttons has a callback that needs to run,\n> and if setState is called from the onBlur callback, then the callback for\n> the button does not run, probably because it's not technically visible. I\n> verified that the button callback works fine if the onBlur callback does\n> not call setState.\n> \n> I worked around the issue by using a window.setTimout that calls setState\n> after 250ms.\n> - Is this the right approach?\n> - Or is this a bug in flux that all callbacks don't run?\n> \n> My expectation is that the all callbacks would run and the setState calls\n> would be cummulative.\n> \n> Thanks for any advice.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/flux/issues/73.\n  Thanks!\n  We've added another example since this was opened (still todo-mvc) I'm also thinking about potentially pulling in the implementation for: https://github.com/staltz/flux-challenge/tree/master/submissions/kyldvs\n  Thank you!\n  Thanks!\n  Browserify helps us do modular development in the browser with the CommonJS module system.  It will also do the JSX and ES6 transpilation for us.  As such, it has a lot of value, and to some extent, the code depends on it.  \n\nThe examples were written not only to show people how to use Flux, but also to point the way toward \"best practices\".  JSX, CommonJS and ES6 are, in my opinion, best practices for Flux.  I don' t want to recommend other package managers or module systems, as I believe that npm and CommonJS are currently the best options that the open source community has.\n\nIf at some point we decide to switch from CommonJS to ES6 modules, then we'll update all the code that is helping us with CommonJS.\n\nHowever, I do understand that this may be a barrier for some folks, and I'd happily entertain a more fleshed out idea for a new, extremely basic example for newcomers.  Please let me know what were the biggest hurdles for you, and we can take a look at what we could do to make things easier.\n I would consider the [Flux TodoMVC tutorial](http://facebook.github.io/flux/docs/todo-list.html) to be a core part of the documentation, and Browserify, bundle.js, etc. are clearly explained there.  I do apologize that this was difficult for you.  But I encourage you to give it another try!  It really is a nice way to work, once you get it set up.\n\nIn the mean time, I'll put together another, even simpler example very soon.\n  Please take questions about variations on Flux or quasi-Flux experiments to the [React Google Group](https://groups.google.com/forum/#!forum/reactjs), rather than this repo.\n  This code was written this way because the performance implications were judged to be significant enough to warrant limiting the replacement strings to six.  And we want to keep this open source version in sync with our production code.\n\nSix is really plenty.  I've never used more than three.\n\nHere is a jsperf test I put together, with a stubbed error object.\nhttp://jsperf.com/invariant-with-and-without-explicit-parameters\n  This is stale so closing out. Looking over the examples may be useful to you. There have also been some recent examples that include talking to the server: https://github.com/staltz/flux-challenge/tree/master/submissions/kyldvs\n  I've grown to prefer the reverse syntax of `NOUN_VERB`, like `TODO_SELECT`.  This way, in an alphabetized list, all my `TODO` actions are together, and I generally want to sort on nouns, not verbs.  But really this is just a personal preference, and any naming scheme you and your team have good reasons to adopt is perfectly appropriate.\n  Done.  `bower install flux` will give you `bower_components/flux/dist/Flux.js`, which if you add to your page will give you a global `Flux` object.  `Flux.dispatcher` is your dispatcher.\n  @abergs Stores should not directly create actions.  This will lead to a dispatch-within-a-dispatch problem and an unstable state.  You can just make the async call to the web API directly from the store (or by directly calling a method in a Utils module), and then create an action within the error/success callback.\n\nI like the idea of `{id: 123, status: loading}`, as it will allow the user to continue to work with the rest of the app.\n ^^^ nice! I hadn't seen that project of Ian's before. Thanks for that link.\n The most important Flux data flow diagram is this:\n\nAction -> Dispatcher -> Store -> View\n\nThe rest, while suggesting best practices, are really just implementation details.  How data leaves the system and goes to the server does not matter very much.  What matters more is how it enters the system and flows through it.  Always start the flow with dispatched actions.\n @igo88 This is one approach that we use quite heavily at Facebook: https://github.com/staltz/flux-challenge/tree/master/submissions/kyldvs\n\nRelevant files are SithStore and SithDataManager.\n Going to close this out since I feel like the example above demonstrates solutions to most aspects of async data in flux. If you would still like to discuss this issue further please feel free to re-open!\n  I'm realizing now that this would force this very abstract Dispatcher to know the structure of the payload.  People do create their payloads in different ways, and there is nothing wrong with doing something a little different.  For example, we don't always differentiate between payload and action, so in some apps there is no payload wrapper around the action.  Also, the type is what we're really looking to verify here, and people use actionType or type or any other arbitrary string as the key for this value.\n\nSo now I think the appropriate place to do this check is actually within the application-specific dispatcher, and we should simply recommend this as a best practice.\n\nThose are:\nhttps://github.com/facebook/flux/blob/master/examples/flux-todomvc/js/dispatcher/AppDispatcher.js\nhttps://github.com/facebook/flux/blob/master/examples/flux-chat/js/dispatcher/ChatAppDispatcher.js\n\nLet's close this PR but keep the issue open to make sure this work gets done by whomever can take the time to do it.\n  Yeah that's a good idea. It would be nice to use the invariant module that\nis a dependency of the dispatcher for this.  But I think we have not\nexposed it in the npm module, so maybe we should do that.\n\n@zpao, any thoughts on this?\n Yes, sounds great.  Really great idea.  Looking forward to the pull request!\n Answered in the pull request, but basically, I'm concerned that the dispatcher would need to know the structure of the payload.\n  Hi Dmitri,\n\nWe call them controller-views instead of ViewControllers because they are actual views, and not exactly controllers in the sense of MVC.  They do pull data from the stores and pass that data to their children, however, and this is somewhat controller-like.  Hence the name controller-view: a view that has controller-like functionality.  If you compare this with ViewControllers in iOS, for example, you'll see that most people use that term to mean actual controllers that manage views, and do a whole lot more than what we are talking about here.\n\nThe use of setState() is a convention of React.  You can certainly use forceUpdate() instead, but having the handle to this.state can be convenient.  We are not really _managing_ state in these controller-views.  It's simply a convenient way to respond to the 'change' event and to get the data to the render method, allowing the render method to remain dedicated to rendering logic, instead of putting data fetching in there too.  As long as you're not actually trying to manage state in the controller-view, there is nothing wrong with using this.state in this way.  All the children below this controller-view will simply take the data in as props, and remain stateless.\n\nWhen an individual component needs to manage it's own state (such as an input element, as you have noted) we do use this.state to do this.  This is the one place in a Flux + React app where you do store state in a component that would otherwise be stateless.  A significant difference here is that only this one component -- none of its children -- no other components -- need a reference to the component's state.  Shared state should always be in the stores and pass through the component hierarchy as props.  For more info on why input elements need to manage their own state, please see:\n\nhttp://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#what-components-should-have-state\nand\nhttp://facebook.github.io/react/docs/forms.html\n\nI hope that helps!\n @dmitrig01 Very sorry to have closed this on you.  Please close when you feel you are understanding the Flux way of handling this.\n\nWe want to get rid of as much state from our React components as possible, and to move that state into the stores.  So every time you find yourself keeping state in your components, ask yourself: \"Can I move this state into the stores?\" After thinking about it a bit, you'll find that this is possible, and it actually cleans up your code quite a bit.  In your scenario, the hover state would be kept in the store as well.  This might be something like the ChartStore's private _hightlightedPieSliceID variable.\n\nThe _only_ exception to this rule is state that is 100% internal to the component, and even this is often something that can be put in stores.  As I've said above, text input components are an example of this kind of component.\n\nController-views are slightly different, however.  The state they contain is often, as you say, a mirror of the stores' state.  It also can be tailored to their specific needs, by providing more specific getter methods in the stores.  \n\nSo in your scenario, I'm assuming you have something like this:\n\n```\n<PieChartControllerView>\n  <PieChart />\n  <PieChart />\n  <PieChart />\n</PieChartControllerView>\n```\n\nYou could either get the entire state of the ChartStore, including the _highlightedPieSliceID (which can be null), or you could more specifically invoke ChartStore.getHightlightedPieSliceID().\n\nEach PieChart would then receive the id as props, and know what to do with it.\n > Is that fair, or are you thinking something more along the lines of the pie chart components are actually their own controller-views? That feels really ugly to me.\n\nYes, it sounds like you understand it correctly.  No, they should not be their own controller-views.\n\n> In this instance, it seems somewhat pointless to store hover data in the store, as it's not shared state \u2013 it's only used in one instance of component, the controller-view\n\nIt's not pointless.  It maintains the proper data flow, and as soon as you want to do something else with that hover state, like display related information in a table off to the side in a different column, you are looking at a significant refactoring.  If you stick with the Flux pattern, you will have an easier time down the road.  You will know where all the state is being maintained, how it gets updated, etc.  Six months from now you will be able to open this app up again and know where everything lives.  Putting the state in React components makes them less reusable, harder to reason about, more tightly coupled to each other and their specific context.\n\nAnd it _is_ in fact shared state -- each PieChart needs to know the currently hovered slice.\n Since we haven't continued this in a while, I'm assuming we're okay to close this one.\n  Sweet!\n  Pretty old, closing this out. Sounds like there might be a bug in your code :) didn't seem obvious to me right away either.\n  I did accept the PR for the React tools.  Thanks very much for that!  These other changes seem to make the render method read a bit less linearly, which I'm not convinced is good for this example.\n  Specifically what do we gain by switching to Webpack?  That is, how does switching to Webpack clarify the examples or make them easier to get up and running?  If you can make the case that people will gain a better understanding of Flux, and be up and running faster and easier, then I think it makes sense to switch.  If not, then I think this seems like a situation where you could fork the repo, and we could point interested Webpack enthusiasts to your fork.\n I'd rather not have the Browserify vs. Webpack debate here.  If you're inclined, there are plenty of other places on the web to have that debate, such as https://gist.github.com/substack/68f8d502be42d5cd4942.\n\nI think a new Flux example might be worth developing -- perhaps that one could use Webpack, just to show another way of doing it.  The subject of a new example has come up a couple of times, most recently in #134, so I think we could see a Webpack example soon.\n  awesome!\n  No activity for over a year and doesn't merge cleanly anymore. Please re-open and rebase if you'd like to keep pursuing this PR.\n  We enforce this to ensure that a single action has caused all of the relevant stores to update themselves before moving forward with the next round of updates.  Flux was originally created to deal with derived data: dependencies between stores.  So if Store A needs to get data from Store B, and both stores respond to an particular action, we need to make sure that both of these have updated before they can get updated again.  Otherwise, we are getting into a race condition.  Instead we enforce that the state of the all the stores remain in sync.\n\nThe design of the application (and the cognitive overhead) becomes much simpler when you cannot invoke a new dispatch while another dispatch is still occurring.  It also forces you to always work with the singular flow of actions -> dispatcher -> stores -> views.  If you have data flowing through the stores and views in any other way, then you are not conforming to that singular data flow, and your application will get messy as it grows larger and more complex.\n\nAn action queue would not be a bad solution if you have multiple async API calls coming back at the same time.  We are actually working on an action queue on the other end -- the store end, after the dispatches have occurred -- to maintain an action history for the purpose of optimistic updates.  However, the same concept could get implemented at the point of the dispatcher, to manage the situation you are describing.  The important thing would be to ensure, however, that two dispatches were not happening at the same time.\n\nThe dispatcher does expose a `isDispatching()` method that you could utilize in your action queue.\n @sterpe quantum-flux looks like it has a lot of great ideas in it.  I'll take a deeper look, but the docs are nicely written and very understandable.\n  I agree that you might want to do this in a _real_ application, but the idea here is to reset the _example_ app with every page refresh.  So you are free to add messages or whatever, then refresh to start over with the example.\n  The dispatcher does work in Chrome.  But it does not work while you're using source maps, correct?  I believe the issue is the \"use strict\" declaration that is getting inserted by gulp-react during the transformation from ES6 with the `harmony: true` option.\nhttps://github.com/facebook/flux/blob/master/Gulpfile.js#L19\n\nFastclick was dealing with a similar issue:\nhttps://github.com/ftlabs/fastclick/pull/270\nhttps://github.com/ftlabs/fastclick/pull/288\n\nThis might be an issue for Chrome devtools, or maybe for gulp-react?  Not sure Flux is the correct place to correct it, but I'm totally open to suggestions on what band-aid we should provide in the mean time.\n  There have been problems on Windows, yes.  I have not yet looked into node on windows, so I don't know if this is the source of your problems.\n  Thanks, Brian for clarifying this for Guy and other readers!  I believe you\nhave it correct.\n\nI'd like to add that the Sections in this example are at the second level\nof the hierarchy, quite near the top.  They receive no props -- as\ncontroller-views they are the source of props for all their children.\n Please also note that there is no \"hard rule\" about the level of the\nhierarchy where controller-views should live.  I find that debugging is\neasier when you keep them at the top, but there are benefits to having low\nlevel ones too -- this allows you to encapsulate code better (not pass down\na lot of extra data in the props).  Like I said, I much prefer keeping them\nat the top and passing data down, but other people here at Facebook feel\notherwise.  Different strokes.\n\nI'm very curious as to why stores as singletons were problematic for you,\nso I'm looking forward to reading a blog post about that too.\n\nOn Sat, Aug 23, 2014 at 12:41 PM, Brian Di Palma notifications@github.com\nwrote:\n\n> 1) Props are immutable and passed in from your parent, state is mutable\n> and local to the component. This aids in pinpointing bugs. I think if you\n> relied on your parent feeding all data from Stores into you as props you\n> would be asking React to do too much unnecessary work. Anyway the only ways\n> that parents could trigger a render of them self is either via setState\n> or a force update. The Stores are the source of truth, you can't ask your\n> React components for that data, you can only ask the Stores.\n> \n> 2) Will do.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/flux/issues/41#issuecomment-53163281.\n\n## \n\nBill Fisher\n510.414.8771\nhttp://fisherwebdev.com\n  Thanks!\n  Except for the the fact that stores don't update views.  Views update themselves in response to a the change in the store.\n Maybe: \"When a user interacts with a React view, the view propagates an action through a central dispatcher.  The dispatcher propagates this action to the various stores that hold the application's data and business logic, which in turn cause an update of the views.\"\n\nI'm trying to make sure this is a simple overview without oversimplifying to the point of misleading the reader.\n @etripier a dispatch indirectly causes an update of the views, but in reality the controller-views (at the top of the hierarchy of views) are updating themselves, in response to a 'change' event published by the stores. After these controller-views receive a 'change' event, they call the stores' getters to get the data.  So while the stores inform the controller-views, they do not truly update them, and this is an important distinction.  Similarly, the stores are not truly updated by any external entity -- they update themselves.  Both the controller-views and the stores are self-controlling entities, without setter methods.\n Want to attempt this one more time?  Or I can close this and attempt to clarify it myself.\n @etripier We're very close, I think.  Sorry for the churn, but this is a very important sentence in the docs, so I think it's worth the iteration.\n\nI like what you've done with the first part.  The very last thing about the store-view communication is the stumbling block, I think.  I don't think we need to get into the details here so much.  I think the important thing is to say is that data flows from store to view, without saying anything misleading.\n\nMaybe:\n\n\"When a user interacts with a React view, the view propagates an action through a central dispatcher. The dispatcher propagates this action to the various stores that hold the application's data and business logic. The stores then cause the views to update themselves, based on their new data.\"\n\nNot sure if this is getting too long-winded.  I'd prefer to simplify, if possible.\n\n@plaxdan This is intro stuff.  Needs to be light, at a very high level, and not confusing at all.  It's not the place to detail the mechanics.\n There hasn't been activity here for over a year. I'm going to close this out, please re-open if you want to keep pursuing this PR.\n  I would highly recommend the new dispatcher.  It's the one we use at Facebook.  The other one was just a temporary stand-in while we were getting approval to release the real code.  The new dispatcher has been battle-tested in many different applications at Facebook and we trust it.  The other one was a totally naive implementation I created just to get the ball rolling, after Jing Chen had presented Flux at the F8 conference.  Some people have enjoyed the async nature of the previous one, but I personally would not use it in production.\n\nAll that said, yes I need to update the tutorial and I will do that.\n Pull request sent to ReactJS: https://github.com/facebook/react/pull/2080\n  The `src` directory contains the ES6 version of Dispatcher.  We have released this version in this way to keep it in sync with the Dispatcher we use at Facebook.\n\nOnce you run the build with `npm install`, you will find the `lib` directory has been created with the de-sugared ES5 Dispatcher in it.  Other modules in your application will want to require this de-sugared version, so this is where index.js (\"main\" in package.json) should get the Dispatcher.\n\nPlease see https://github.com/facebook/flux#building-and-installing-flux\n  Hi Paul, thanks for the suggestion.\n\nWhen this gets minified, however, these function names will no longer work as you expect them to, I believe.\n\nEven if they did work after minification, I'm not a huge fan of naming functions with constants or the object[methodName] pattern, except in cases of true metaprogramming to reduce the file size, which this is not.\n\nAlso, if you're interested in micro-optimization, you might want to check this out, which indicates that the switch is faster, at least in Chrome: http://jsperf.com/object-of-functions-vs-switch\n I'm sure it depends on what you use for minification, but for example, Closure Compiler: https://developers.google.com/closure/compiler/docs/limitations under the section entitled \"Restrictions for ADVANCED_OPTIMIZATIONS\".  In that scenario, you would need to use quoted strings for the function names.\n\nBut yes, if you feel this is better or more readable, by all means please do this in your own apps.  There is nothing about this that breaks the rules of what we consider to be the core ideas behind Flux.\n  I'm not in favor of using ES6 in the examples.  While I love ES6 and we use it extensively at Facebook, not everyone is familiar with it yet.  The examples are created to instruct rather than to be optimal or clever.  So I'd rather keep them more understandable to more people.  Unless we think our mission in this repo is to evangelize ES6 (which I'd rather leave to others), let's just keep it in the old time style for a while.\n  Please see: https://groups.google.com/forum/#!topic/reactjs/kaQBbTqEj_s\n\nNot sure I can implement this without increasing the complexity to the point where it may cause more harm than good.  But I will look into fleshing this out more.\n That is, I want to keep the example simple and easy to understand.\n Looks like original issue is resolved so closing this out. If there is a specific aspect of the example you feel could be improved (such as adding a comment) a PR would be great.\n  We can't symlink because the dispatcher in /src is written in ES6.  We need to transform it and take the de-sugared file into the examples.  @zpao is there a better solution here? \n  We have no plans for this at the moment.  Great idea, though, and I'd love to see something like this as a github project coming from the community.\n  thanks!\n  Well, I think all we need on on lastMessage is the date and whether or not it has been read.  CREATE_MESSAGE could contain the date and anything created is obviously already read.  This could be one way to go -- let the ThreadStore respond to CREATE_MESSAGE by creating a lastMessage object and mark it as read.  CREATE_MESSAGE should be modified to contain the date.  Not sure we need any other data in the lastMessage object.\n The idea for a shared object for dispatcher tokens seemed interesting, but I don't think it will work -- you would still need to get the last message from the MessageStore, which would necessitate a require. \n @tobice sorry for the slow reply. I think what we typically do in this situation is allow both stores to reference each other in a circular manner, generally via an inline require.\r\n\r\n```\r\n// Not inline\r\nconst gameStatus = StatusStore.get();\r\n\r\n// Inline\r\nconst gameStatus = require('StatusStore').get();\r\n\r\n// Or move it to a function\r\nfunction getStatusStore() {\r\n  return require('StatusStore'); // or however else you get the reference\r\n}\r\nconst gameStatus = getStatusStore().get();\r\n```\r\n\r\n---\r\n\r\nGoing to close this out as there seems to have been sufficient discussion and the chat example was also removed. If there are still specific questions or action items feel free to reopen or file a different issue.\r\n  Removed statics.  https://github.com/facebook/flux/commit/b3f53b179f58e9ec2b221574abdb621c4005fd50\n  thanks!\n  Looks good to me.  Barring any objection from @vjeux or @zpao I'll accept this within the next day or so.\n  thanks @fattenap -- I think something in the JSX transformation must have changed.  I've updated all the React components to reflect what you found.  @nobodyguy -- not sure why this is happening for you.  I'll need to investigate that further.\n Removed statics.  https://github.com/facebook/flux/commit/b3f53b179f58e9ec2b221574abdb621c4005fd50\n  Yes, @bogdan-dumitru is correct that the synchronous nature is intentional, and is required if we are to be able to cause the stores to update themselves only after the stores they depend on have been updated.\n\nWhen communicating with a server, one should split the data flow at the point of creating an action.  An example of this can be seen here: https://github.com/facebook/flux/blob/master/examples/flux-chat/js/actions/ChatMessageActionCreators.js#L23-28 -- in this example, we optimistically update the store with the client-side data.  Then in the the XHR success or failure callback, you would create another action.\n @sterpe I could imagine this scenario if your store logic was computationally expensive, but it's uncommon that the store logic is the bottleneck in performance.  I've seen pretty crazy things like dispatches on a requestAnimationFrame cycle, and Flux/React handled them just fine.\n\nOne place where I did see some lag was in an initial data load, when the load was quite large.  I'm not sure how we eventually improved that, but I'll try to find out and get back to you.\n  Yes, this was something I was thinking about for a code example and blog\npost. Hoping to get to this idea and also a blog post about  immutable data\nin the coming week or two.\n On Aug 8, 2014 10:20 PM, \"Justin Belcher\" notifications@github.com wrote:\n\n> [image: :+1:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/flux/issues/20#issuecomment-51677699.\n Testing Flux Applications\nhttp://facebook.github.io/react/blog/2014/09/24/testing-flux-applications.html\n\nAlso, example code:\nhttps://github.com/facebook/flux/blob/master/examples/flux-todomvc/js/stores/__tests__/TodoStore-test.js\nhttps://github.com/facebook/flux/blob/master/examples/flux-chat/js/stores/__tests__/UnreadThreadStore-test.js\n  I agree we should make this easy for Windows. I'll take a look at\ngrunt-based and gulp-based solutions.  Please consider it to be on the road\nmap.\nOn Aug 1, 2014 2:51 PM, \"Brian Di Palma\" notifications@github.com wrote:\n\n> I didn't know about CMake. I wouldn't be surprised if that's the case for\n> many people looking at this repo.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/flux/issues/15#issuecomment-50938868.\n  Thanks for the fix, do you mind signing the CLA so we can pull this in? Thanks!\n\nhttps://code.facebook.com/cla\n Woops. Sorry since the repo is new our tooling is not properly configured yet. You indeed already have signed the CLA :)\n  Hmm this is strange, I probably forgot to add them on gitignore\n  Thanks!\n  News: 'npm install flux' now installs this project.  Yay!  Check it out: https://www.npmjs.org/package/flux\n Currently, the flux npm module is essentially that -- the dispatcher along with its one dependency, the invariant module.  If we want to go beyond that in the future with the flux module, then we'll need to come up with a solution to expose the dispatcher separately.\n  cc @fisherwebdev \n Thanks!\n  Will do that when i get back to a computer tomorrow. Feel free to race me to it and see how easy it is to push the website compared to the jekyll version :)\n\n## \n\nChristopher \"vjeux\" Chedeau\nFacebook Engineer\nhttp://blog.vjeux.com/\n\n> On Jul 29, 2014, at 1:59 AM, Ben Alpert notifications@github.com wrote:\n> \n> (+1)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n", "text_all_count": 18787, "text_word_token": ["Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "If", "you", "be", "contribute", "on", "behalf", "of", "someone", "else", "eg", "your", "employer", "the", "individual", "CLA", "may", "not", "be", "sufficient", "and", "your", "employer", "may", "need", "the", "corporate", "CLA", "sign", "NUMBER", "If", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "contact", "us", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Thanks", "Can", "you", "elaborate", "on", "what", "do", "not", "work", "And", "I", "can", "look", "into", "fix", "it", "Ah", "just", "to", "more", "clearly", "state", "the", "problem", "this", "be", "necessary", "because", "the", "only", "allows", "higher", "minor", "version", "so", "if", "you", "have", "React", "NUMBER", "as", "a", "dependency", "the", "Flux", "package", "would", "not", "believe", "dependencies", "be", "satisfied", "since", "it", "needs", "a", "version", "of", "NUMBER", "mikecousins", "I", "just", "publish", "LINK", "Yeah", "it", "s", "really", "annoying", "to", "do", "a", "website", "release", "the", "scripts", "be", "like", "NUMBER", "years", "old", "will", "leave", "this", "up", "to", "track", "doing", "another", "release", "NUMBER", "If", "four", "three", "be", "the", "only", "change", "I", "don", "t", "think", "it", "will", "be", "very", "high", "pri", "to", "me", "though", "Sounds", "like", "an", "issue", "with", "create", "react", "app", "fluxflow", "here", "be", "the", "example", "demonstrating", "how", "to", "set", "up", "Flux", "Flow", "LINK", "flow", "If", "something", "be", "wrong", "with", "that", "example", "let", "me", "know", "Thanks", "Does", "run", "npm", "run", "build", "fix", "the", "issue", "This", "seems", "like", "you", "just", "be", "run", "something", "from", "the", "wrong", "directory", "your", "setup", "be", "incorrect", "NUMBER", "Can", "you", "follow", "the", "steps", "exactly", "here", "LINK", "todomvc", "NUMBER", "get", "start", "And", "let", "me", "know", "which", "step", "fail", "When", "it", "do", "fail", "what", "be", "the", "entire", "output", "And", "what", "be", "the", "entire", "output", "of", "pwd", "and", "ls", "asl", "When", "it", "was", "write", "there", "was", "some", "problem", "with", "functional", "components", "which", "forced", "us", "to", "literally", "call", "the", "function", "rather", "than", "create", "it", "properly", "with", "JSX", "syntax", "I", "think", "at", "this", "point", "it", "could", "be", "fix", "by", "update", "this", "line", "to", "use", "JSX", "LINK", "L", "NUMBER", "Awesome", "thanks", "See", "comments", "in", "LINK", "No", "reason", "to", "couple", "Dispatcher", "docs", "and", "FluxStore", "NUMBER", "There", "would", "need", "to", "be", "a", "bigger", "refactor", "of", "this", "example", "in", "order", "to", "do", "that", "NUMBER", "Thanks", "for", "point", "this", "out", "but", "it", "be", "not", "technically", "incorrect", "The", "dispatcher", "doesn", "t", "have", "to", "be", "use", "with", "FluxStore", "NUMBER", "Right", "now", "the", "documentation", "assigns", "the", "token", "to", "the", "store", "s", "NUMBER", "dispatchToken", "property", "and", "accesses", "it", "in", "that", "way", "consistently", "throughout", "LINK", "L", "NUMBER", "I", "don", "t", "think", "this", "needs", "to", "be", "update", "NUMBER", "Container", "NUMBER", "createFunctional", "only", "accepts", "NUMBER", "argument", "you", "gave", "it", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "If", "you", "be", "contribute", "on", "behalf", "of", "someone", "else", "eg", "your", "employer", "the", "individual", "CLA", "be", "not", "sufficient", "use", "LINK", "company", "instead", "NUMBER", "Contact", "cla", "fb", "NUMBER", "com", "if", "you", "have", "any", "question", "NUMBER", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Thanks", "looks", "good", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "If", "you", "be", "contribute", "on", "behalf", "of", "someone", "else", "eg", "your", "employer", "the", "individual", "CLA", "be", "not", "sufficient", "use", "LINK", "company", "instead", "NUMBER", "Contact", "cla", "fb", "NUMBER", "com", "if", "you", "have", "any", "question", "NUMBER", "I", "really", "liked", "the", "comments", "on", "everything", "I", "think", "they", "were", "all", "very", "accurate", "and", "captured", "the", "correct", "ideas", "information", "NUMBER", "If", "you", "have", "a", "specific", "part", "of", "the", "tutorial", "that", "was", "confusing", "that", "you", "d", "like", "to", "know", "more", "about", "just", "ask", "Thanks", "Looks", "good", "to", "me", "Thanks", "The", "contents", "of", "your", "repository", "when", "experience", "this", "error", "would", "be", "helpful", "to", "see", "Please", "re", "open", "with", "more", "info", "if", "you", "still", "have", "this", "issue", "NUMBER", "The", "problem", "with", "explicitly", "mentioning", "my", "todomvc", "here", "be", "that", "you", "can", "use", "the", "same", "logic", "to", "mention", "it", "constantly", "throughout", "the", "entire", "guide", "NUMBER", "Through", "most", "of", "the", "example", "you", "should", "be", "referencing", "copying", "parts", "of", "the", "original", "todomvc", "NUMBER", "If", "that", "be", "not", "clear", "we", "can", "add", "a", "line", "somewhere", "around", "where", "my", "todomvc", "be", "created", "and", "be", "explicit", "but", "this", "be", "not", "the", "correct", "place", "to", "mention", "it", "NUMBER", "Can", "you", "clarify", "what", "you", "mean", "If", "you", "have", "error", "what", "be", "they", "If", "you", "had", "to", "perform", "additional", "steps", "to", "get", "a", "work", "todomvc", "what", "be", "they", "As", "far", "as", "I", "m", "aware", "following", "the", "steps", "results", "in", "a", "work", "todomvc", "NUMBER", "Thanks", "for", "the", "feedback", "will", "look", "over", "some", "of", "these", "areas", "and", "see", "if", "I", "can", "make", "them", "a", "bit", "more", "clear", "NUMBER", "There", "were", "certainly", "areas", "where", "I", "went", "with", "less", "direction", "in", "an", "attempt", "to", "not", "make", "the", "tutorial", "super", "long", "NUMBER", "I", "may", "have", "be", "a", "bit", "aggressive", "in", "places", "and", "can", "clear", "them", "up", "NUMBER", "Thanks", "for", "the", "PR", "NUMBER", "In", "general", "you", "should", "not", "do", "multiple", "things", "in", "a", "single", "PR", "if", "there", "be", "NUMBER", "separate", "issue", "they", "should", "be", "resolve", "in", "NUMBER", "separate", "PRs", "NUMBER", "It", "s", "no", "clear", "to", "me", "which", "parts", "of", "the", "code", "fix", "what", "so", "I", "can", "t", "help", "diagnose", "your", "issue", "and", "review", "your", "PR", "as", "be", "NUMBER", "Can", "you", "split", "this", "up", "provide", "more", "information", "about", "the", "issue", "you", "were", "having", "and", "how", "these", "change", "fix", "it", "For", "example", "what", "commands", "did", "you", "run", "from", "what", "directory", "with", "what", "change", "etc", "NUMBER", "As", "for", "your", "NUMBER", "change", "regard", "update", "dist", "I", "intentionally", "did", "not", "update", "dist", "for", "NUMBER", "the", "NUMBER", "NUMBER", "bump", "was", "just", "to", "get", "npm", "to", "accept", "a", "new", "readme", "there", "should", "not", "have", "be", "any", "functionality", "change", "NUMBER", "There", "be", "no", "start", "command", "LINK", "L", "NUMBER", "L", "NUMBER", "I", "m", "not", "sure", "what", "you", "would", "expect", "it", "to", "do", "either", "NUMBER", "Like", "I", "said", "there", "isn", "t", "a", "start", "command", "run", "npm", "start", "shouldn", "t", "do", "anything", "NUMBER", "Whether", "it", "throw", "an", "error", "or", "not", "doesn", "t", "matter", "because", "there", "be", "no", "behavior", "defined", "that", "it", "should", "be", "trying", "to", "start", "NUMBER", "If", "there", "be", "something", "you", "re", "trying", "to", "accomplish", "first", "read", "through", "the", "readme", "and", "examples", "LINK", "Then", "if", "you", "be", "still", "having", "a", "problem", "open", "up", "an", "issue", "with", "clear", "details", "about", "what", "you", "be", "trying", "to", "do", "what", "you", "expect", "to", "happen", "and", "what", "be", "actually", "happening", "NUMBER", "Thanks", "Either", "be", "fine", "I", "believe", "going", "to", "keep", "the", "old", "way", "so", "I", "don", "t", "need", "to", "re", "sync", "the", "website", "which", "be", "a", "real", "pain", "I", "m", "not", "sure", "what", "this", "means", "NUMBER", "Try", "reading", "through", "the", "tutorials", "and", "if", "that", "doesn", "t", "help", "feel", "free", "to", "post", "a", "clear", "question", "with", "more", "context", "and", "information", "NUMBER", "Not", "that", "I", "m", "aware", "of", "Good", "point", "I", "can", "see", "how", "that", "would", "be", "confusing", "NUMBER", "T", "be", "the", "polymorphic", "type", "specified", "in", "the", "ReduceStore", "class", "LINK", "L", "NUMBER", "Similar", "to", "polymorphic", "types", "generics", "in", "many", "other", "languages", "NUMBER", "Do", "you", "have", "any", "recommendations", "for", "how", "to", "capture", "that", "more", "clearly", "in", "the", "docs", "Thanks", "for", "the", "perspective", "everything", "you", "re", "saying", "makes", "sense", "and", "I", "expect", "if", "you", "had", "issue", "understanding", "what", "T", "means", "others", "will", "as", "well", "NUMBER", "I", "ll", "try", "to", "add", "documentation", "with", "links", "to", "an", "explanation", "of", "polymorphic", "types", "in", "flow", "or", "a", "quick", "example", "or", "something", "in", "the", "docs", "to", "explain", "what", "it", "means", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "If", "you", "be", "contribute", "on", "behalf", "of", "someone", "else", "eg", "your", "employer", "the", "individual", "CLA", "be", "not", "sufficient", "use", "LINK", "company", "instead", "NUMBER", "Contact", "cla", "fb", "NUMBER", "com", "if", "you", "have", "any", "question", "NUMBER", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "I", "actually", "prefer", "the", "old", "terminology", "use", "dispatch", "as", "a", "verb", "NUMBER", "It", "ties", "the", "purpose", "of", "the", "Dispatcher", "to", "a", "common", "English", "verb", "in", "a", "real", "scenario", "NUMBER", "It", "also", "keep", "the", "material", "shorter", "NUMBER", "Can", "you", "provide", "a", "bit", "more", "context", "on", "why", "you", "prefer", "your", "phrasing", "Happy", "to", "discuss", "Thanks", "for", "the", "context", "NUMBER", "How", "about", "splitting", "this", "up", "into", "two", "bullets", "NUMBER", "When", "a", "user", "types", "in", "the", "title", "of", "a", "new", "Todo", "and", "hits", "enter", "the", "view", "tells", "the", "Dispatcher", "to", "dispatch", "an", "action", "NUMBER", "All", "stores", "receive", "the", "dispatched", "action", "I", "guess", "I", "prefer", "each", "step", "of", "the", "process", "to", "be", "succinct", "NUMBER", "Long", "sentences", "be", "scary", "NUMBER", "Not", "sure", "if", "this", "be", "better", "or", "not", "than", "your", "change", "Feel", "free", "to", "update", "and", "I", "ll", "merge", "it", "Thanks", "Seems", "good", "to", "me", "Thanks", "TAG", "be", "generally", "better", "because", "it", "allows", "flow", "to", "infer", "a", "specific", "type", "TAG", "will", "just", "allow", "anything", "example", "LINK", "NUMBER", "PTAEAEDMBsHsHcBQiDG", "NUMBER", "CGBnToDCAeAFQD", "NUMBER", "QBvRUUdALlEIG", "NUMBER", "LRmVYA", "NUMBER", "TAFwCcBXFF", "NUMBER", "g", "NUMBER", "AFLXoBKcsypcAFgEtMAOnSgAvNSZUAvoj", "NUMBER", "oO", "NUMBER", "UCgCMdAunYBPUpvYBTeHhEAWAEwSmbTlxOmABR", "NUMBER", "YAAc", "NUMBER", "bh", "NUMBER", "FdgBzDX", "NUMBER", "VBlAQUAADK", "NUMBER", "sU", "NUMBER", "CVQACN", "NUMBER", "ABMAQmQfYxR", "NUMBER", "C", "NUMBER", "wAKjtQR", "NUMBER", "dcN", "NUMBER", "vIz", "NUMBER", "yoNDw", "NUMBER", "ijYzXKEpLBrdGsAGlAHHmCeTEKgA", "But", "in", "the", "places", "you", "add", "TAG", "there", "be", "no", "association", "to", "a", "polymorphic", "type", "in", "those", "classes", "so", "this", "shouldn", "t", "affect", "the", "level", "of", "Flow", "coverage", "NUMBER", "I", "don", "t", "think", "there", "s", "a", "need", "to", "change", "it", "yet", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "If", "you", "be", "contribute", "on", "behalf", "of", "someone", "else", "eg", "your", "employer", "the", "individual", "CLA", "be", "not", "sufficient", "use", "LINK", "company", "instead", "NUMBER", "Contact", "cla", "fb", "NUMBER", "com", "if", "you", "have", "any", "question", "NUMBER", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Looks", "good", "thanks", "for", "finding", "the", "issue", "NUMBER", "Would", "you", "mind", "add", "a", "quick", "test", "case", "for", "it", "in", "here", "LINK", "test", "FluxContainer", "test", "NUMBER", "js", "I", "think", "it", "should", "be", "really", "similar", "to", "the", "last", "test", "case", "NUMBER", "Thanks", "the", "gh", "pages", "branch", "be", "generate", "so", "we", "shouldn", "t", "just", "sed", "replace", "over", "it", "also", "I", "think", "almost", "all", "of", "these", "file", "get", "delete", "with", "recent", "update", "to", "docs", "Just", "going", "to", "close", "this", "out", "NUMBER", "If", "you", "want", "to", "poke", "around", "and", "find", "dates", "on", "master", "branch", "happy", "for", "you", "to", "resubmit", "NUMBER", "If", "you", "do", "make", "sure", "dates", "be", "NUMBER", "present", "though", "NUMBER", "You", "can", "find", "one", "way", "of", "dealing", "with", "async", "actions", "here", "LINK", "Going", "to", "close", "this", "out", "because", "I", "m", "not", "sure", "what", "action", "items", "be", "left", "in", "this", "issue", "NUMBER", "Reopen", "if", "necessary", "NUMBER", "Thanks", "for", "the", "report", "will", "investigate", "shortly", "NUMBER", "I", "think", "we", "may", "need", "to", "remove", "the", "invariant", "or", "add", "in", "a", "workaround", "whichever", "seems", "cleanest", "NUMBER", "That", "was", "a", "particular", "feature", "that", "was", "request", "in", "order", "to", "support", "passing", "stores", "down", "via", "props", "NUMBER", "I", "m", "just", "going", "to", "remove", "these", "invariants", "I", "don", "t", "think", "they", "catch", "a", "common", "issue", "or", "something", "that", "be", "necessarily", "an", "anti", "pattern", "NUMBER", "Published", "NUMBER", "which", "should", "fix", "the", "issue", "NUMBER", "Let", "me", "know", "if", "it", "doesn", "t", "Thanks", "I", "just", "push", "the", "tag", "I", "think", "this", "should", "resolve", "the", "issue", "LINK", "Let", "me", "know", "if", "you", "meant", "something", "different", "Yeah", "any", "usage", "of", "flux", "utils", "will", "require", "react", "to", "be", "install", "unfortunately", "it", "s", "listed", "in", "the", "peer", "dependencies", "NUMBER", "LINK", "L", "NUMBER", "I", "don", "t", "think", "that", "be", "a", "good", "use", "of", "time", "NUMBER", "Any", "decent", "packager", "should", "not", "include", "the", "source", "code", "for", "react", "if", "you", "be", "not", "use", "it", "NUMBER", "If", "you", "don", "t", "use", "FluxContainer", "and", "your", "packager", "still", "include", "react", "in", "your", "bundle", "I", "d", "consider", "that", "a", "bug", "in", "the", "packager", "NUMBER", "FWIW", "most", "packagers", "won", "t", "can", "t", "do", "tree", "shaking", "yet", "NUMBER", "While", "it", "s", "great", "to", "say", "it", "s", "a", "bug", "in", "the", "packager", "it", "s", "not", "really", "fair", "NUMBER", "That", "s", "surprising", "to", "me", "for", "some", "reason", "I", "thought", "webpack", "did", "this", "already", "NUMBER", "Because", "the", "site", "be", "really", "annoying", "to", "update", "maintain", "NUMBER", "It", "s", "very", "old", "and", "regularly", "comes", "down", "when", "I", "try", "to", "push", "an", "update", "NUMBER", "Would", "love", "someone", "to", "spend", "some", "time", "cleaning", "up", "that", "part", "of", "the", "repo", "NUMBER", "Thanks", "for", "the", "PR", "we", "recently", "update", "the", "examples", "so", "this", "be", "no", "longer", "relevant", "NUMBER", "LINK", "Hey", "alexeyraspopov", "before", "doing", "to", "much", "work", "on", "this", "we", "should", "chat", "about", "what", "this", "example", "explains", "that", "the", "others", "do", "not", "cover", "NUMBER", "I", "m", "certainly", "open", "to", "add", "more", "examples", "but", "do", "not", "want", "to", "add", "examples", "that", "be", "just", "re", "hashing", "what", "others", "already", "cover", "NUMBER", "That", "will", "just", "lead", "to", "a", "lot", "more", "maintenance", "cost", "without", "much", "benefit", "NUMBER", "Could", "you", "run", "through", "how", "it", "s", "different", "from", "LINK", "async", "for", "example", "NUMBER", "Sounds", "like", "not", "a", "bug", "or", "needs", "more", "info", "NUMBER", "Thanks", "for", "the", "PR", "and", "point", "out", "the", "issue", "your", "PR", "currently", "has", "merge", "conflict", "and", "wasn", "t", "quite", "what", "I", "think", "I", "was", "going", "for", "with", "this", "comment", "so", "I", "just", "resolve", "it", "here", "LINK", "Again", "thanks", "for", "point", "out", "the", "typo", "I", "use", "it", "like", "this", "LINK", "flow", "seems", "okay", "Thanks", "for", "the", "PR", "we", "recently", "update", "the", "examples", "so", "this", "be", "no", "longer", "relevant", "NUMBER", "LINK", "We", "use", "FluxContainer", "you", "can", "see", "how", "we", "build", "our", "applications", "by", "following", "the", "examples", "here", "LINK", "Everything", "should", "be", "update", "here", "LINK", "Let", "me", "know", "if", "you", "still", "have", "issue", "NUMBER", "Thanks", "Sounds", "like", "this", "issue", "was", "answered", "Thanks", "for", "the", "PR", "we", "recently", "update", "the", "examples", "so", "this", "be", "no", "longer", "relevant", "NUMBER", "LINK", "I", "don", "t", "think", "we", "be", "likely", "to", "change", "this", "NUMBER", "InitialState", "be", "really", "meant", "to", "be", "an", "empty", "state", "not", "where", "you", "initialized", "the", "data", "for", "the", "store", "NUMBER", "It", "s", "expected", "that", "you", "return", "something", "like", "an", "empty", "map", "then", "initialize", "you", "data", "through", "an", "action", "NUMBER", "The", "initial", "state", "should", "be", "constant", "all", "the", "time", "NUMBER", "This", "helps", "to", "ensure", "the", "state", "of", "your", "flux", "application", "be", "a", "pure", "function", "of", "actions", "so", "you", "could", "theoretically", "record", "and", "replay", "them", "to", "get", "in", "the", "same", "state", "NUMBER", "If", "you", "move", "the", "initialization", "out", "of", "the", "chain", "of", "actions", "that", "be", "no", "longer", "possible", "NUMBER", "In", "any", "case", "there", "be", "a", "workaround", "if", "you", "need", "to", "have", "it", "behave", "in", "that", "manner", "I", "believe", "this", "will", "work", "class", "FluxReduceStore", "NUMBER", "extend", "FluxReduceStore", "constructor", "dispatcher", "initialState", "super", "dispatcher", "this", "NUMBER", "_state", "initialState", "getInitialState", "return", "undefined", "If", "your", "empty", "state", "has", "a", "list", "and", "favorites", "you", "would", "write", "getInitialState", "return", "list", "favorites", "To", "do", "the", "initial", "data", "fetching", "you", "would", "fetch", "data", "in", "the", "componentWillMount", "of", "the", "relevant", "component", "and", "then", "dispatch", "an", "action", "that", "the", "store", "responds", "to", "NUMBER", "murilobr", "the", "example", "do", "work", "on", "the", "client", "most", "use", "cases", "and", "there", "be", "a", "workaround", "on", "the", "server", "as", "mention", "above", "NUMBER", "I", "m", "not", "sure", "why", "it", "s", "broken", "on", "the", "server", "but", "PRs", "be", "welcome", "NUMBER", "Thanks", "for", "the", "PR", "we", "recently", "update", "the", "examples", "so", "this", "be", "no", "longer", "relevant", "NUMBER", "LINK", "I", "probably", "won", "t", "get", "to", "this", "NUMBER", "Code", "be", "documentation", "right", "Thanks", "for", "the", "PR", "I", "update", "the", "site", "recently", "and", "this", "should", "no", "longer", "be", "an", "issue", "NUMBER", "Thanks", "for", "the", "PR", "we", "recently", "update", "the", "examples", "so", "this", "be", "no", "longer", "relevant", "NUMBER", "LINK", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "I", "tend", "to", "fire", "the", "actions", "from", "the", "store", "where", "data", "be", "be", "request", "NUMBER", "In", "order", "to", "accomplish", "what", "you", "want", "you", "will", "need", "to", "have", "a", "sense", "of", "status", "of", "a", "particular", "piece", "of", "data", "in", "your", "store", "not", "just", "the", "raw", "data", "NUMBER", "js", "import", "ReduceStore", "from", "flux", "utils", "type", "Status", "TAG", "status", "not_loaded", "loading", "loaded", "data", "T", "class", "FooStore", "extend", "ReduceStore", "TAG", "getInitialState", "return", "status", "not_loaded", "reduce", "state", "Status", "TAG", "action", "Object", "switch", "action", "NUMBER", "type", "case", "start_loading", "if", "state", "NUMBER", "atus", "loading", "return", "state", "we", "don", "t", "want", "to", "generate", "many", "request", "if", "we", "be", "already", "loading", "else", "FooDataManager", "NUMBER", "loadFoo", "return", "status", "loading", "case", "foo_loaded", "return", "status", "loaded", "data", "action", "NUMBER", "foo", "NUMBER", "name", "case", "foo_load_error", "return", "status", "not_loaded", "Or", "create", "an", "error", "status", "and", "put", "the", "error", "in", "data", "default", "return", "state", "Make", "sure", "to", "override", "this", "so", "that", "we", "can", "transition", "to", "loading", "when", "we", "need", "to", "NUMBER", "Alternatively", "you", "could", "check", "at", "every", "call", "site", "to", "getState", "and", "do", "the", "exact", "same", "thing", "instead", "getState", "const", "state", "super", "NUMBER", "getState", "if", "state", "NUMBER", "atus", "not_loaded", "FooDispatcher", "NUMBER", "dispatch", "type", "start_loading", "return", "state", "We", "centralize", "all", "network", "request", "in", "a", "data", "manager", "or", "web", "api", "utils", "call", "it", "whatever", "just", "keep", "them", "in", "one", "place", "const", "FooDataManager", "loadFoo", "xhr", "uri", "LINK", "err", "resp", "body", "if", "err", "FooDispatcher", "NUMBER", "dispatch", "type", "foo_load_error", "console", "NUMBER", "error", "err", "do", "whatever", "you", "want", "with", "the", "error", "const", "data", "JSON", "NUMBER", "parse", "body", "may", "want", "to", "verify", "resp", "code", "FooDispatcher", "NUMBER", "dispatch", "type", "foo_loaded", "foo", "data", "That", "be", "basically", "cache", "invalidation", "problem", "you", "can", "do", "a", "simple", "TTL", "and", "after", "NUMBER", "minutes", "or", "so", "invalidate", "your", "data", "or", "the", "web", "socket", "solution", "you", "mention", "NUMBER", "After", "that", "just", "fire", "a", "new", "action", "when", "you", "want", "to", "clear", "the", "data", "NUMBER", "It", "s", "fine", "to", "issue", "a", "request", "from", "your", "store", "the", "one", "critical", "thing", "be", "that", "the", "result", "of", "that", "request", "re", "enters", "the", "flux", "system", "via", "a", "separate", "action", "NUMBER", "If", "you", "do", "this", "it", "would", "be", "really", "bad", "js", "Counter", "example", "never", "do", "this", "class", "Store", "onDispatch", "action", "switch", "action", "NUMBER", "type", "case", "start_loading", "xhr", "uri", "NUMBER", "err", "resp", "body", "this", "NUMBER", "_state", "JSON", "NUMBER", "parse", "body", "Don", "t", "do", "this", "You", "be", "mutating", "the", "store", "outside", "of", "a", "dispatch", "It", "s", "pretty", "much", "impossible", "to", "do", "the", "above", "though", "when", "use", "reducers", "though", "LINK", "include", "how", "we", "handle", "async", "actions", "now", "hopefully", "that", "will", "provide", "enough", "guidance", "to", "consider", "this", "issue", "resolve", "NUMBER", "Seems", "okay", "to", "me", "NUMBER", "An", "alternative", "be", "to", "just", "check", "before", "firing", "the", "action", "if", "Store", "NUMBER", "checkValid", "id", "Action", "NUMBER", "save", "id", "The", "one", "way", "flow", "be", "most", "important", "for", "the", "mutation", "path", "NUMBER", "The", "action", "be", "still", "flowing", "through", "the", "system", "in", "one", "direction", "NUMBER", "I", "do", "think", "it", "be", "better", "to", "not", "use", "stores", "within", "action", "creators", "but", "I", "do", "not", "have", "that", "strong", "of", "an", "opinion", "either", "way", "NUMBER", "Ideally", "your", "action", "creators", "would", "be", "pure", "function", "that", "generate", "the", "action", "based", "only", "on", "their", "input", "but", "action", "creators", "be", "inherently", "not", "pure", "because", "they", "dispatch", "an", "action", "as", "a", "side", "effect", "NUMBER", "If", "you", "be", "use", "Redux", "though", "actions", "creators", "be", "pure", "function", "This", "be", "probably", "ideal", "js", "changeCurrentUsersName", "id", "name", "Dispatcher", "NUMBER", "dispatch", "type", "change_current_user_name", "id", "name", "But", "you", "may", "find", "that", "you", "do", "this", "everywhere", "js", "changeCurrentUsersName", "CurrentUserStore", "NUMBER", "getID", "this", "NUMBER", "ate", "NUMBER", "name", "So", "you", "_could_", "refactor", "it", "to", "this", "for", "ease", "of", "use", "but", "I", "do", "think", "it", "s", "slightly", "worse", "code", "js", "changeCurrentUsersName", "name", "Dispatcher", "NUMBER", "dispatch", "type", "change_current_user_name", "id", "CurrentUserStore", "NUMBER", "getID", "name", "Hope", "that", "helps", "NUMBER", "Yeah", "that", "be", "what", "I", "was", "trying", "to", "communicate", "in", "my", "second", "code", "block", "Sounds", "like", "you", "be", "not", "transforming", "classes", "This", "be", "exactly", "how", "we", "transform", "each", "file", "LINK", "L", "NUMBER", "L", "NUMBER", "Or", "you", "can", "just", "use", "the", "pre", "transformed", "dist", "file", "LINK", "Since", "we", "ve", "also", "use", "browserify", "on", "the", "Dispatcher", "in", "the", "past", "this", "doesn", "t", "seem", "like", "a", "Flux", "issue", "but", "rather", "a", "setup", "issue", "NUMBER", "Going", "to", "close", "this", "NUMBER", "Chasing", "dependencies", "kind", "of", "sucks", "ide", "how", "can", "we", "make", "this", "work", "for", "react", "native", "so", "that", "we", "don", "t", "have", "to", "arbitrarily", "update", "dependencies", "when", "we", "don", "t", "need", "to", "Awesome", "So", "in", "NUMBER", "month", "this", "will", "be", "fix", "from", "react", "natives", "side", "Is", "there", "a", "particular", "version", "we", "can", "update", "to", "for", "now", "just", "to", "unblock", "this", "Is", "it", "still", "NUMBER", "like", "you", "did", "here", "LINK", "Yeah", "this", "be", "a", "case", "where", "it", "s", "okay", "to", "pass", "props", "to", "the", "container", "NUMBER", "In", "particular", "passing", "an", "ID", "to", "a", "container", "be", "okay", "when", "it", "s", "needed", "I", "haven", "t", "really", "run", "into", "any", "other", "valid", "use", "cases", "though", "Thank", "you", "for", "the", "PR", "but", "in", "short", "we", "do", "not", "want", "to", "make", "the", "dispatcher", "aware", "of", "actions", "NUMBER", "All", "payloads", "do", "not", "necessarily", "have", "a", "type", "and", "then", "this", "error", "message", "would", "not", "make", "sense", "NUMBER", "There", "be", "a", "bit", "more", "context", "here", "LINK", "It", "kinda", "sucks", "that", "we", "have", "to", "update", "flux", "every", "single", "time", "fbjs", "gets", "a", "version", "bump", "NUMBER", "We", "just", "bump", "it", "about", "a", "week", "ago", "too", "NUMBER", "Thoughts", "zpao", "It", "might", "also", "be", "possible", "to", "simply", "remove", "fbjs", "as", "a", "dependency", "of", "flux", "NUMBER", "I", "don", "t", "think", "we", "use", "much", "other", "than", "invariant", "from", "it", "NUMBER", "would", "also", "need", "to", "remove", "from", "emitter", "too", "but", "I", "think", "it", "s", "the", "same", "story", "there", "Hmm", "fair", "enough", "Going", "to", "close", "this", "then", "since", "it", "doesn", "t", "seem", "like", "a", "great", "idea", "to", "be", "chasing", "every", "project", "having", "the", "same", "set", "of", "dependencies", "NUMBER", "It", "looks", "like", "your", "question", "was", "answered", "on", "stack", "overflow", "NUMBER", "This", "question", "be", "also", "unrelated", "to", "Flux", "NUMBER", "Thanks", "for", "the", "PR", "we", "recently", "update", "the", "examples", "so", "this", "be", "no", "longer", "relevant", "NUMBER", "LINK", "Thanks", "for", "the", "PR", "we", "recently", "update", "the", "examples", "so", "this", "be", "no", "longer", "relevant", "NUMBER", "LINK", "Thanks", "for", "the", "PR", "we", "recently", "update", "the", "examples", "so", "this", "be", "no", "longer", "relevant", "NUMBER", "LINK", "Aha", "thanks", "for", "looking", "into", "this", "bannaN", "Yes", "there", "be", "a", "timing", "gap", "where", "change", "fired", "between", "getInitialState", "and", "componentDidMount", "be", "lost", "NUMBER", "Thanks", "for", "the", "PR", "we", "recently", "update", "the", "examples", "so", "this", "be", "no", "longer", "relevant", "NUMBER", "LINK", "This", "be", "no", "longer", "relevant", "chat", "example", "be", "gone", "and", "replace", "with", "new", "async", "tutorial", "here", "LINK", "Thanks", "for", "the", "PR", "we", "recently", "update", "the", "examples", "so", "this", "be", "no", "longer", "relevant", "NUMBER", "LINK", "You", "should", "generally", "choose", "one", "or", "the", "other", "for", "any", "single", "component", "NUMBER", "Either", "get", "the", "component", "s", "state", "purely", "from", "stores", "or", "have", "a", "component", "maintain", "it", "s", "own", "state", "NUMBER", "Merging", "of", "state", "will", "likely", "lead", "to", "a", "mess", "NUMBER", "See", "conversation", "from", "lukescott", "in", "NUMBER", "Flow", "types", "do", "not", "appear", "to", "be", "able", "to", "be", "include", "properly", "in", "the", "NUMBER", "flowconfig", "NUMBER", "This", "be", "something", "that", "has", "be", "recommended", "several", "times", "as", "smaller", "points", "in", "somewhat", "relate", "issue", "NUMBER", "Creating", "an", "issue", "to", "track", "this", "specifically", "NUMBER", "This", "whole", "bit", "was", "remove", "thanks", "to", "NUMBER", "This", "be", "a", "reasonable", "overview", "of", "flux", "LINK", "for", "stupid", "people", "there", "be", "also", "many", "others", "if", "you", "search", "for", "them", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Thanks", "for", "the", "PR", "we", "recently", "update", "the", "examples", "so", "this", "be", "no", "longer", "relevant", "NUMBER", "LINK", "Thanks", "This", "should", "be", "resolve", "now", "please", "reopen", "this", "if", "it", "hasn", "t", "be", "NUMBER", "var", "handleClick", "function", "Dispatcher", "NUMBER", "dispatch", "PROFILE_NAME_CHANGED", "Dispatcher", "NUMBER", "dispatch", "SHOW_DASHBOARD", "Isn", "t", "the", "worst", "thing", "in", "the", "world", "NUMBER", "It", "shouldn", "t", "be", "necessary", "but", "sometimes", "it", "s", "easier", "to", "do", "things", "this", "way", "NUMBER", "I", "know", "we", "sequentially", "dispatch", "actions", "in", "several", "places", "NUMBER", "I", "don", "t", "have", "anything", "else", "to", "add", "other", "than", "my", "previous", "comments", "NUMBER", "Going", "to", "close", "this", "out", "NUMBER", "If", "you", "d", "like", "to", "discuss", "this", "further", "please", "re", "open", "NUMBER", "Removed", "this", "tutorial", "in", "favor", "of", "LINK", "I", "opened", "NUMBER", "to", "track", "that", "issue", "since", "it", "be", "separate", "from", "what", "this", "was", "originally", "opened", "for", "NUMBER", "It", "looks", "to", "me", "like", "that", "be", "how", "the", "flowconfig", "should", "be", "set", "up", "so", "i", "ll", "have", "to", "dig", "into", "it", "a", "bit", "more", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Looks", "like", "NUMBER", "beat", "you", "to", "it", "This", "conflict", "now", "please", "rebase", "NUMBER", "Thanks", "Should", "be", "resolve", "now", "npm", "install", "and", "npm", "run", "build", "work", "successfully", "for", "me", "on", "node", "v", "NUMBER", "npm", "NUMBER", "Please", "re", "open", "if", "this", "be", "still", "fail", "for", "you", "I", "killed", "the", "old", "examples", "everything", "under", "LINK", "should", "now", "work", "and", "npm", "install", "fine", "NUMBER", "Any", "change", "to", "the", "examples", "should", "be", "do", "through", "PR", "hope", "that", "answers", "your", "question", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "I", "have", "no", "idea", "how", "to", "have", "multiple", "bower", "package", "in", "the", "same", "repo", "NUMBER", "I", "was", "just", "reading", "LINK", "package", "If", "someone", "wants", "to", "put", "up", "a", "PR", "help", "with", "this", "I", "m", "happy", "to", "accept", "them", "NUMBER", "The", "file", "be", "in", "dist", "now", "NUMBER", "Opened", "NUMBER", "for", "add", "in", "these", "invariants", "NUMBER", "We", "ll", "also", "want", "to", "add", "one", "for", "register", "I", "think", "NUMBER", "Thanks", "Thanks", "I", "like", "your", "way", "better", "even", "if", "both", "be", "fine", "NUMBER", "Seems", "like", "there", "be", "a", "few", "workarounds", "and", "this", "appears", "to", "be", "more", "appropriate", "as", "an", "issue", "with", "react", "router", "than", "here", "NUMBER", "We", "will", "prefer", "ES", "NUMBER", "classes", "for", "extending", "the", "Dispatcher", "going", "forward", "NUMBER", "That", "said", "in", "general", "you", "should", "not", "need", "to", "extend", "the", "Dispatcher", "NUMBER", "If", "you", "want", "additional", "functionality", "to", "happen", "on", "every", "action", "just", "register", "a", "callback", "with", "the", "dispatcher", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "I", "don", "t", "think", "this", "step", "be", "actually", "necessary", "kad", "flux", "todomvc", "pwd", "Users", "kad", "dev", "flux", "examples", "flux", "todomvc", "kad", "flux", "todomvc", "rm", "rf", "node_modules", "kad", "flux", "todomvc", "npm", "install", "output", "omitted", "but", "it", "completes", "succesfully", "kad", "flux", "todomvc", "npm", "start", "todomvc", "flux", "NUMBER", "start", "Users", "kad", "dev", "flux", "examples", "flux", "todomvc", "watchify", "o", "js", "bundle", "NUMBER", "js", "v", "d", "js", "app", "NUMBER", "js", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "Installing", "watchify", "globally", "be", "not", "the", "fix", "we", "want", "NUMBER", "If", "that", "s", "required", "there", "be", "another", "bug", "somewhere", "that", "we", "should", "resolve", "NUMBER", "Looks", "like", "this", "get", "resolve", "NUMBER", "Should", "be", "resolve", "now", "re", "open", "NUMBER", "if", "that", "s", "not", "the", "case", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "I", "see", "this", "use", "here", "LINK", "todomvc", "js", "components", "MainSection", "NUMBER", "react", "NUMBER", "js", "L", "NUMBER", "I", "think", "it", "s", "easiest", "to", "just", "keep", "these", "in", "sync", "even", "if", "there", "be", "a", "slight", "bit", "of", "extra", "information", "NUMBER", "Thanks", "for", "the", "PR", "we", "recently", "update", "the", "examples", "so", "this", "be", "no", "longer", "relevant", "NUMBER", "LINK", "Can", "you", "revert", "your", "change", "to", "dist", "Flux", "NUMBER", "js", "and", "squash", "your", "commit", "That", "may", "be", "the", "case", "but", "it", "shouldn", "t", "be", "part", "of", "this", "PR", "in", "any", "case", "NUMBER", "I", "don", "t", "know", "if", "for", "this", "repo", "we", "prefer", "to", "update", "the", "dist", "file", "only", "when", "doing", "a", "new", "release", "or", "with", "every", "commit", "NUMBER", "Thanks", "Looks", "okay", "to", "me", "Thanks", "NUMBER", "These", "be", "actually", "auto", "generate", "by", "a", "script", "I", "believe", "so", "I", "don", "t", "think", "we", "should", "be", "change", "them", "manually", "NUMBER", "Something", "fishy", "be", "going", "on", "but", "this", "looks", "like", "it", "will", "break", "this", "call", "site", "LINK", "chat", "js", "components", "MessageComposer", "NUMBER", "react", "NUMBER", "js", "L", "NUMBER", "But", "I", "m", "not", "convinced", "that", "this", "call", "site", "be", "even", "correct", "NUMBER", "Would", "you", "mind", "cleaning", "up", "this", "call", "site", "to", "not", "use", "the", "second", "parameter", "if", "you", "be", "remove", "it", "Thanks", "for", "the", "PR", "we", "recently", "update", "the", "examples", "so", "this", "be", "no", "longer", "relevant", "NUMBER", "LINK", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thanks", "It", "be", "present", "and", "in", "use", "here", "LINK", "todomvc", "js", "components", "MainSection", "NUMBER", "react", "NUMBER", "js", "L", "NUMBER", "Ah", "whoops", "I", "misread", "this", "as", "actually", "modifying", "the", "code", "not", "the", "documentation", "My", "mistake", "I", "think", "there", "was", "another", "PR", "doing", "the", "same", "thing", "that", "I", "had", "close", "as", "not", "an", "issue", "but", "if", "multiple", "people", "find", "this", "confusing", "perhaps", "we", "can", "merge", "this", "in", "NUMBER", "Looks", "good", "to", "me", "Thanks", "If", "you", "can", "change", "that", "this", "looks", "ready", "to", "merge", "And", "merge", "just", "about", "another", "year", "later", "NUMBER", "Nice", "teamwork", "P", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Hey", "jepezi", "sorry", "this", "hasn", "t", "had", "any", "action", "in", "such", "a", "long", "time", "NUMBER", "I", "just", "update", "the", "documentation", "on", "the", "website", "so", "not", "all", "of", "these", "documents", "be", "still", "relevant", "some", "be", "though", "NUMBER", "If", "you", "don", "t", "mind", "bringing", "this", "in", "line", "with", "the", "current", "state", "of", "the", "site", "I", "can", "merge", "it", "NUMBER", "This", "be", "really", "awesome", "work", "If", "you", "don", "t", "have", "the", "time", "we", "can", "just", "close", "this", "so", "it", "s", "not", "hanging", "around", "forever", "NUMBER", "It", "s", "completely", "up", "to", "you", "let", "me", "know", "how", "you", "d", "like", "to", "proceed", "NUMBER", "Thanks", "I", "m", "going", "to", "close", "this", "due", "to", "staleness", "NUMBER", "Please", "re", "open", "if", "you", "d", "like", "to", "work", "on", "it", "and", "I", "ll", "be", "happy", "to", "help", "merge", "it", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "NUMBER", "remove", "this", "part", "of", "the", "documentation", "so", "this", "shouldn", "t", "be", "necessary", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Yeah", "generally", "you", "need", "to", "associate", "the", "result", "of", "the", "WebAPIUtils", "actions", "with", "the", "initial", "input", "NUMBER", "Generally", "an", "ID", "text", "could", "work", "too", "NUMBER", "We", "have", "one", "in", "ES", "NUMBER", "I", "think", "that", "be", "okay", "for", "now", "NUMBER", "I", "ve", "completely", "rewritten", "the", "examples", "including", "a", "complex", "example", "dealing", "with", "server", "data", "and", "async", "actions", "NUMBER", "Hopefully", "it", "will", "provide", "enough", "guidance", "on", "dealing", "with", "async", "actions", "NUMBER", "LINK", "Here", "s", "an", "example", "that", "use", "Flux", "while", "talking", "to", "a", "real", "server", "implementation", "LINK", "challenge", "tree", "master", "submissions", "kyldvs", "I", "think", "at", "this", "point", "Redux", "captures", "the", "wait", "for", "less", "use", "case", "very", "cleanly", "NUMBER", "I", "would", "highly", "recommend", "that", "library", "NUMBER", "We", "will", "not", "be", "remove", "waitFor", "from", "our", "implementation", "of", "dispatcher", "any", "time", "soon", "though", "NUMBER", "We", "add", "some", "more", "examples", "and", "specifically", "the", "async", "example", "has", "actions", "originating", "from", "stores", "NUMBER", "The", "two", "referenced", "documents", "have", "also", "be", "remove", "NUMBER", "So", "I", "believe", "this", "be", "no", "longer", "an", "issue", "NUMBER", "New", "Examples", "LINK", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "A", "PR", "for", "this", "would", "be", "nice", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Looks", "good", "I", "ll", "merge", "this", "in", "and", "then", "sync", "the", "change", "to", "our", "internal", "code", "NUMBER", "Thanks", "for", "this", "Done", "NUMBER", "thx", "for", "the", "reminder", "I", "consider", "Ruby", "on", "Rails", "to", "be", "a", "fairly", "canonical", "MVC", "implementation", "NUMBER", "This", "was", "certainly", "the", "MVC", "implementation", "with", "which", "I", "was", "most", "familiar", "when", "I", "write", "that", "documentation", "NUMBER", "Rails", "controllers", "retrieve", "data", "from", "the", "model", "and", "then", "render", "the", "view", "provide", "the", "view", "with", "that", "data", "NUMBER", "LINK", "_and_rendering", "NUMBER", "html", "overview", "how", "the", "pieces", "fit", "together", "But", "I", "d", "rather", "not", "debate", "what", "be", "and", "be", "not", "MVC", "NUMBER", "That", "s", "one", "of", "the", "most", "tired", "and", "endless", "debates", "on", "the", "internet", "rivaling", "Vim", "vs", "NUMBER", "Emacs", "or", "semicolons", "in", "JavaScript", "NUMBER", "I", "d", "rather", "just", "work", "on", "having", "some", "documentation", "about", "Flux", "that", "the", "majority", "of", "developers", "will", "be", "able", "to", "understand", "NUMBER", "Facebook", "be", "not", "interested", "in", "criticizing", "MVC", "NUMBER", "I", "be", "not", "interested", "in", "criticizing", "MVC", "NUMBER", "We", "ve", "simply", "find", "Flux", "to", "be", "a", "better", "way", "for", "us", "to", "write", "our", "applications", "NUMBER", "It", "s", "not", "MVC", "NUMBER", "It", "s", "almost", "CQRS", "but", "not", "quite", "NUMBER", "But", "since", "it", "s", "not", "really", "either", "of", "these", "or", "trying", "to", "be", "a", "perfect", "implementation", "of", "any", "theoretical", "pattern", "in", "particular", "we", "just", "call", "it", "Flux", "NUMBER", "Thanks", "Just", "following", "the", "source", "NUMBER", "LINK", "chat", "js", "utils", "ChatWebAPIUtils", "NUMBER", "js", "L", "NUMBER", "LINK", "chat", "js", "actions", "ChatServerActionCreators", "NUMBER", "js", "L", "NUMBER", "NUMBER", "looks", "like", "that", "s", "needed", "to", "initialize", "the", "stores", "with", "a", "dispatched", "action", "NUMBER", "The", "server", "interaction", "be", "get", "faked", "with", "local", "storage", "in", "the", "chat", "app", "NUMBER", "I", "wouldn", "t", "take", "it", "too", "seriously", "NUMBER", "This", "be", "really", "great", "but", "I", "have", "not", "yet", "had", "time", "to", "do", "a", "full", "review", "NUMBER", "Soon", "As", "an", "aside", "I", "have", "rarely", "felt", "the", "need", "to", "create", "test", "for", "components", "once", "I", "get", "all", "state", "into", "the", "stores", "NUMBER", "I", "think", "it", "s", "much", "more", "important", "to", "be", "test", "stores", "than", "to", "be", "test", "components", "NUMBER", "However", "I", "like", "the", "idea", "that", "we", "should", "point", "the", "way", "toward", "how", "to", "this", "kind", "of", "test", "should", "the", "need", "arise", "NUMBER", "I", "think", "the", "miss", "piece", "here", "be", "a", "WebAPIUtils", "module", "NUMBER", "This", "module", "has", "access", "to", "all", "the", "stores", "and", "knows", "how", "to", "construct", "a", "query", "to", "the", "Web", "API", "NUMBER", "The", "call", "to", "the", "Web", "API", "be", "based", "on", "the", "current", "values", "it", "can", "retrieve", "from", "the", "stores", "through", "the", "stores", "getter", "methods", "NUMBER", "Here", "s", "the", "sequence", "NUMBER", "User", "performs", "edit", "NUMBER", "NUMBER", "View", "component", "calls", "action", "creator", "with", "edit", "text", "NUMBER", "SearchActionCreators", "NUMBER", "refresh", "NUMBER", "The", "action", "creator", "calls", "the", "WebAPIUtils", "module", "after", "dispatching", "the", "action", "NUMBER", "WebAPIUtils", "NUMBER", "refresh", "NUMBER", "The", "WebAPIUtils", "module", "gets", "data", "from", "the", "stores", "that", "it", "needs", "to", "make", "the", "call", "to", "the", "server", "NUMBER", "var", "query", "SearchStore", "NUMBER", "getCurrentQuery", "NUMBER", "WebAPIUtils", "initiates", "server", "call", "and", "in", "turn", "calls", "an", "action", "creator", "when", "it", "handles", "the", "response", "NUMBER", "javascript", "XHR", "use", "something", "like", "jQuery", "NUMBER", "ajax", "url", "mySearchAPIEndpoint", "data", "query", "success", "SearchActionCreators", "NUMBER", "refreshSucceeded", "error", "SearchActionCreators", "NUMBER", "refreshErrored", "I", "want", "to", "clarify", "some", "things", "mention", "above", "however", "NUMBER", "Other", "than", "the", "controller", "views", "the", "view", "components", "should", "not", "have", "references", "to", "the", "stores", "NUMBER", "If", "you", "need", "a", "value", "in", "the", "views", "you", "should", "be", "passing", "that", "value", "down", "through", "props", "NUMBER", "Actions", "objects", "should", "report", "on", "what", "has", "just", "happened", "in", "the", "real", "world", "the", "server", "responded", "in", "a", "certain", "way", "the", "user", "acted", "upon", "the", "UI", "in", "a", "certain", "way", "a", "requestAnimationFrame", "has", "just", "cycled", "etc", "NUMBER", "Action", "creators", "methods", "should", "not", "be", "responsible", "for", "maintaining", "state", "or", "passing", "unchanged", "values", "around", "the", "application", "NUMBER", "Instead", "they", "just", "construct", "an", "action", "and", "pass", "it", "to", "the", "dispatcher", "NUMBER", "They", "can", "also", "call", "out", "to", "a", "WebAPIUtils", "module", "to", "initiate", "a", "server", "call", "as", "an", "additional", "side", "effect", "NUMBER", "The", "action", "should", "be", "as", "complete", "of", "a", "picture", "as", "possible", "as", "to", "what", "just", "happened", "NUMBER", "Then", "the", "stores", "take", "over", "and", "decide", "what", "to", "do", "about", "it", "NUMBER", "If", "the", "stores", "need", "to", "know", "information", "from", "a", "different", "store", "they", "can", "call", "that", "store", "s", "getters", "after", "a", "call", "to", "Dispatcher", "NUMBER", "waitFor", "ensuring", "that", "they", "will", "receive", "the", "latest", "data", "NUMBER", "Should", "be", "resolve", "now", "Watchify", "writes", "to", "bundle", "NUMBER", "js", "whenever", "any", "part", "of", "the", "code", "change", "NUMBER", "This", "be", "the", "transpiling", "process", "allowing", "JSX", "and", "ECMAScript", "NUMBER", "and", "all", "that", "good", "stuff", "to", "work", "NUMBER", "As", "far", "as", "the", "build", "size", "goes", "you", "re", "seeing", "the", "development", "build", "NUMBER", "This", "be", "unminified", "NUMBER", "The", "production", "build", "seems", "to", "be", "buggy", "at", "the", "moment", "not", "sure", "if", "the", "API", "for", "browserify", "envify", "has", "change", "since", "I", "first", "write", "this", "but", "I", "was", "able", "to", "get", "it", "to", "work", "after", "globally", "installing", "envify", "and", "uglify", "and", "then", "run", "the", "following", "browserify", "NUMBER", "t", "envify", "NODE_ENV", "production", "uglifyjs", "cm", "js", "bundle", "NUMBER", "min", "NUMBER", "js", "This", "produced", "the", "following", "NUMBER", "Mar", "NUMBER", "NUMBER", "NUMBER", "bundle", "NUMBER", "min", "NUMBER", "js", "To", "find", "out", "how", "much", "of", "that", "be", "React", "I", "build", "my", "own", "copy", "of", "React", "and", "that", "produced", "this", "NUMBER", "Mar", "NUMBER", "NUMBER", "NUMBER", "react", "NUMBER", "min", "NUMBER", "js", "React", "gzipped", "be", "compressed", "uncompressed", "ratio", "uncompressed_name", "NUMBER", "NUMBER", "NUMBER", "react", "NUMBER", "min", "NUMBER", "js", "and", "flux", "chat", "gzipped", "be", "compressed", "uncompressed", "ratio", "uncompressed_name", "NUMBER", "NUMBER", "NUMBER", "bundle", "NUMBER", "min", "NUMBER", "js", "Why", "would", "we", "want", "to", "load", "the", "minify", "code", "in", "an", "example", "application", "The", "unminified", "code", "be", "there", "so", "that", "people", "can", "inspect", "it", "put", "in", "debugger", "and", "console", "NUMBER", "log", "statements", "etc", "NUMBER", "thanks", "Yes", "this", "be", "correct", "NUMBER", "One", "could", "also", "put", "the", "emitChange", "in", "the", "update", "method", "some", "would", "say", "this", "be", "cleaner", "but", "that", "add", "additional", "side", "effect", "to", "that", "method", "NUMBER", "I", "also", "like", "seeing", "where", "all", "the", "emits", "be", "happening", "in", "one", "place", "make", "it", "easier", "to", "understand", "which", "actions", "cause", "an", "emit", "and", "why", "and", "which", "don", "t", "NUMBER", "thanks", "I", "typically", "initialize", "the", "stores", "by", "dispatching", "an", "INITIAL_LOAD", "action", "prior", "to", "rendering", "NUMBER", "By", "the", "way", "the", "best", "way", "to", "my", "attention", "on", "Stack", "Overflow", "be", "to", "tag", "your", "question", "with", "one", "of", "these", "reactjs", "flux", "react", "flux", "flux", "react", "fluxjs", "I", "use", "the", "Question", "Monitor", "for", "Stack", "Exchange", "LINK", "monitor", "for", "stac", "bnnkhapbhkejookmhgpgaikfdoegkmdp", "aka", "StackTrack", "Chrome", "extension", "to", "monitor", "those", "tags", "NUMBER", "Yes", "this", "be", "often", "the", "best", "approach", "NUMBER", "Just", "like", "relational", "databases", "should", "be", "normalized", "so", "should", "the", "stores", "NUMBER", "Some", "folks", "may", "disagree", "with", "me", "but", "I", "think", "you", "save", "yourself", "some", "insanity", "if", "you", "maintain", "a", "single", "source", "of", "truth", "for", "all", "data", "NUMBER", "would", "the", "main", "user", "store", "need", "to", "listen", "to", "all", "actions", "that", "can", "change", "any", "of", "the", "derived", "stores", "or", "be", "there", "some", "other", "way", "to", "update", "it", "when", "one", "of", "the", "derived", "stores", "change", "The", "main", "store", "be", "already", "receiving", "all", "the", "actions", "but", "yes", "it", "might", "need", "to", "have", "more", "cases", "in", "the", "switch", "statement", "that", "handles", "the", "actions", "NUMBER", "You", "may", "be", "touching", "on", "one", "of", "the", "problem", "we", "ve", "discover", "at", "Facebook", "in", "work", "in", "very", "large", "Flux", "applications", "when", "an", "engineer", "be", "add", "code", "to", "handle", "new", "actions", "how", "be", "that", "engineer", "to", "know", "what", "other", "stores", "need", "to", "also", "be", "update", "to", "handle", "the", "same", "actions", "We", "have", "some", "new", "solutions", "that", "help", "with", "this", "and", "we", "hope", "to", "open", "source", "them", "soon", "in", "the", "form", "of", "both", "a", "FluxStore", "base", "class", "and", "some", "non", "breaking", "change", "to", "the", "dispatcher", "NUMBER", "These", "include", "a", "hasChanged", "method", "in", "the", "store", "and", "a", "mechanism", "by", "which", "additional", "callbacks", "may", "be", "invoked", "at", "the", "end", "of", "the", "dispatch", "after", "all", "data", "mutations", "be", "complete", "NUMBER", "One", "can", "build", "a", "system", "on", "top", "of", "these", "features", "that", "will", "alert", "engineers", "with", "console", "warnings", "when", "dependent", "stores", "need", "to", "handle", "the", "same", "actions", "as", "their", "upstream", "stores", "NUMBER", "Appears", "answered", "NUMBER", "Use", "immutable", "data", "if", "you", "be", "work", "with", "shouldComponentUpdate", "NUMBER", "I", "d", "recommend", "ImmutableJS", "LINK", "js", "for", "that", "NUMBER", "We", "be", "keep", "these", "examples", "very", "simple", "so", "they", "be", "easy", "to", "understand", "the", "minimum", "code", "required", "to", "explain", "the", "pattern", "NUMBER", "Use", "of", "shouldComponentUpdate", "fall", "outside", "of", "that", "NUMBER", "Woohoo", "Thanks", "for", "doing", "this", "This", "be", "great", "This", "has", "be", "on", "my", "list", "of", "things", "to", "do", "for", "a", "long", "time", "NUMBER", "You", "really", "don", "t", "want", "to", "chain", "dispatches", "NUMBER", "In", "your", "case", "it", "sounds", "like", "you", "really", "want", "to", "do", "more", "work", "server", "side", "and", "simply", "return", "the", "correct", "data", "NUMBER", "However", "if", "you", "don", "t", "have", "control", "over", "the", "server", "side", "code", "then", "I", "can", "understand", "that", "you", "need", "to", "create", "a", "hack", "to", "make", "this", "work", "NUMBER", "In", "that", "case", "yes", "a", "Promise", "be", "the", "best", "strategy", "NUMBER", "Keep", "in", "mind", "also", "that", "you", "don", "t", "have", "to", "use", "an", "action", "creator", "to", "create", "a", "call", "to", "the", "server", "NUMBER", "You", "simply", "need", "to", "handle", "the", "response", "with", "a", "new", "action", "NUMBER", "The", "stores", "should", "be", "largely", "reusable", "NUMBER", "They", "be", "very", "decoupled", "from", "the", "rest", "of", "the", "application", "if", "you", "have", "created", "them", "correctly", "NUMBER", "However", "dependencies", "between", "stores", "can", "sometimes", "make", "this", "more", "difficult", "NUMBER", "To", "move", "a", "fully", "decoupled", "store", "from", "one", "application", "to", "another", "you", "would", "simply", "need", "to", "be", "use", "the", "same", "action", "types", "in", "both", "applications", "NUMBER", "You", "can", "get", "a", "lot", "more", "reuse", "out", "of", "individual", "low", "level", "React", "components", "if", "you", "pass", "methods", "into", "them", "as", "props", "to", "define", "their", "behavior", "NUMBER", "This", "lets", "you", "use", "them", "in", "whatever", "situation", "you", "want", "NUMBER", "When", "creating", "a", "Flux", "application", "that", "needs", "to", "be", "able", "to", "be", "use", "multiple", "times", "on", "the", "page", "I", "find", "that", "either", "need", "to", "pass", "around", "a", "reference", "to", "the", "Dispatcher", "and", "move", "to", "store", "instances", "or", "I", "need", "to", "pass", "around", "an", "appID", "for", "each", "instance", "of", "the", "app", "and", "stick", "with", "singleton", "stores", "NUMBER", "Yeah", "the", "name", "be", "probably", "a", "little", "clumsy", "NUMBER", "There", "s", "a", "lot", "of", "information", "out", "in", "the", "world", "now", "about", "action", "creators", "so", "I", "doubt", "we", "want", "to", "create", "more", "confusion", "by", "change", "the", "name", "now", "NUMBER", "The", "history", "here", "be", "that", "we", "use", "to", "call", "the", "FooActionCreators", "module", "just", "simply", "FooActions", "but", "this", "led", "to", "some", "confusion", "the", "methods", "were", "seen", "as", "the", "action", "instead", "of", "the", "object", "they", "create", "and", "pass", "to", "the", "dispatcher", "NUMBER", "In", "the", "summer", "of", "NUMBER", "Jing", "Chen", "and", "I", "were", "putting", "together", "a", "presentation", "for", "ForwardJS", "LINK", "react", "and", "flux", "build", "applications", "with", "a", "unidirectional", "data", "flow", "forward", "js", "NUMBER", "and", "we", "wanted", "to", "dispel", "this", "confusion", "NUMBER", "We", "came", "up", "with", "ActionCreator", "a", "day", "or", "two", "before", "the", "conference", "NUMBER", "Now", "we", "re", "a", "bit", "stuck", "with", "it", "NUMBER", "I", "ll", "think", "about", "it", "though", "NUMBER", "Thanks", "for", "bringing", "it", "up", "NUMBER", "I", "think", "Actor", "or", "Intent", "be", "a", "fine", "name", "for", "these", "methods", "and", "I", "encourage", "you", "to", "do", "what", "you", "think", "be", "best", "for", "your", "teams", "NUMBER", "There", "be", "connotations", "to", "both", "that", "I", "might", "quibble", "with", "however", "NUMBER", "Actor", "tends", "to", "be", "something", "with", "agency", "which", "these", "methods", "do", "not", "really", "have", "NUMBER", "Intent", "leans", "toward", "thinking", "of", "the", "methods", "like", "setters", "and", "this", "be", "an", "easy", "trap", "to", "fall", "into", "NUMBER", "The", "actions", "be", "report", "on", "something", "that", "happened", "in", "the", "real", "world", "the", "user", "clicked", "the", "server", "responded", "etc", "and", "the", "Flux", "stores", "need", "to", "respond", "to", "this", "real", "world", "change", "NUMBER", "Intent", "implies", "that", "the", "server", "intends", "for", "something", "to", "happen", "in", "the", "client", "side", "application", "which", "be", "not", "really", "true", "it", "s", "the", "store", "that", "needs", "listen", "to", "actions", "and", "respond", "NUMBER", "The", "actions", "be", "more", "like", "a", "newspaper", "report", "on", "the", "real", "world", "NUMBER", "Thinking", "more", "in", "these", "terms", "I", "ve", "switched", "to", "naming", "all", "my", "action", "types", "in", "the", "past", "tense", "NUMBER", "See", "also", "this", "conversation", "I", "had", "with", "abdullin", "who", "be", "the", "person", "who", "first", "emphasized", "this", "past", "quality", "of", "actions", "NUMBER", "LINK", "I", "don", "t", "think", "we", "will", "be", "change", "from", "the", "name", "Action", "Creators", "anytime", "soon", "NUMBER", "Even", "if", "it", "isn", "t", "the", "perfect", "name", "NUMBER", "Thanks", "for", "this", "zpao", "be", "work", "on", "this", "but", "it", "probably", "won", "t", "live", "here", "NUMBER", "I", "think", "eventually", "we", "will", "require", "invariant", "from", "another", "module", "NUMBER", "Jest", "uses", "Node", "so", "that", "we", "can", "run", "test", "from", "the", "command", "line", "NUMBER", "I", "don", "t", "think", "there", "be", "any", "other", "reason", "beyond", "that", "NUMBER", "We", "aren", "t", "doing", "much", "isomorphic", "Flux", "with", "Node", "at", "Facebook", "yet", "NUMBER", "We", "might", "be", "doing", "some", "server", "side", "rendering", "later", "with", "Relay", "but", "we", "re", "not", "doing", "that", "with", "Flux", "NUMBER", "If", "you", "want", "to", "use", "promises", "for", "example", "which", "a", "browser", "might", "support", "but", "Node", "do", "not", "you", "would", "probably", "want", "to", "add", "a", "polyfill", "and", "then", "provide", "a", "mock", "implementation", "of", "the", "polyfill", "NUMBER", "Alternatively", "you", "could", "simply", "tell", "Jest", "not", "to", "mock", "the", "polyfill", "but", "you", "might", "experience", "some", "async", "weirdness", "in", "the", "test", "in", "that", "case", "NUMBER", "mock", "return", "values", "LINK", "mockfn", "mockreturnvalue", "value", "mock", "implementations", "LINK", "mockfn", "mockimplementation", "fn", "mock", "timers", "LINK", "mocks", "NUMBER", "html", "content", "don", "t", "mock", "if", "you", "really", "need", "it", "LINK", "jest", "dontmock", "modulename", "nuke", "jest", "automocking", "LINK", "jest", "automockoff", "jeffmo", "would", "know", "more", "about", "use", "Jest", "with", "promises", "or", "other", "browser", "specific", "features", "and", "I", "think", "ask", "this", "question", "in", "Jest", "repo", "would", "be", "appropriate", "NUMBER", "It", "appears", "like", "this", "be", "mostly", "answered", "NUMBER", "Feel", "free", "to", "re", "open", "if", "there", "be", "more", "question", "here", "NUMBER", "I", "pull", "this", "CSS", "directly", "from", "TodoMVC", "NUMBER", "It", "s", "not", "supposed", "to", "be", "anything", "other", "than", "an", "example", "so", "get", "it", "perfect", "be", "not", "a", "priority", "NUMBER", "But", "I", "would", "like", "to", "keep", "this", "aligned", "with", "their", "CSS", "NUMBER", "It", "looks", "like", "the", "best", "way", "to", "do", "that", "would", "be", "to", "load", "the", "css", "from", "a", "npm", "module", "LINK", "app", "css", "So", "I", "d", "rather", "not", "go", "down", "the", "road", "of", "editing", "the", "CSS", "here", "but", "if", "you", "d", "like", "to", "convert", "the", "app", "to", "use", "the", "npm", "module", "in", "a", "new", "pull", "request", "that", "would", "be", "super", "helpful", "NUMBER", "I", "m", "going", "to", "have", "to", "say", "no", "on", "this", "one", "sorry", "NUMBER", "Two", "reasons", "First", "this", "be", "the", "way", "I", "think", "of", "it", "step", "NUMBER", "create", "the", "repo", "NUMBER", "step", "NUMBER", "build", "NUMBER", "The", "two", "sentences", "be", "there", "for", "a", "reason", "NUMBER", "Secondly", "this", "change", "be", "just", "a", "little", "too", "trivial", "NUMBER", "poetic", "license", "yo", "NUMBER", "According", "to", "Merriam", "Webster", "LINK", "webster", "NUMBER", "com", "dictionary", "broadcast", "broadcast", "may", "be", "use", "as", "a", "noun", "an", "adjective", "an", "adverb", "and", "as", "both", "a", "transitive", "or", "intransitive", "verb", "NUMBER", "I", "see", "an", "example", "on", "that", "page", "that", "seems", "quite", "similar", "to", "how", "I", "use", "it", "in", "Overview", "NUMBER", "md", "The", "interview", "was", "broadcast", "from", "London", "NUMBER", "thanks", "thanks", "This", "seems", "like", "a", "fine", "thing", "for", "you", "to", "do", "in", "your", "own", "fork", "but", "it", "really", "doesn", "t", "belong", "here", "NUMBER", "The", "Flux", "TodoMVC", "app", "should", "be", "as", "simple", "as", "possible", "with", "a", "minimum", "of", "clutter", "NUMBER", "It", "s", "not", "supposed", "to", "be", "an", "ideal", "implementation", "NUMBER", "It", "s", "supposed", "to", "be", "instructional", "for", "someone", "new", "to", "Flux", "NUMBER", "I", "m", "run", "Mavericks", "as", "be", "most", "people", "that", "have", "gotten", "this", "run", "NUMBER", "This", "be", "a", "problem", "with", "how", "something", "relate", "to", "node", "or", "npm", "or", "node_modules", "be", "install", "or", "not", "on", "your", "machine", "not", "Mavericks", "NUMBER", "thanks", "Nice", "thank", "you", "NUMBER", "Interesting", "point", "about", "the", "potential", "for", "abuse", "but", "I", "disagree", "that", "we", "want", "to", "pass", "an", "array", "of", "tokens", "to", "register", "NUMBER", "This", "would", "create", "the", "same", "dependency", "graph", "for", "every", "action", "and", "we", "want", "different", "dependency", "graphs", "per", "action", "NUMBER", "I", "like", "the", "idea", "of", "the", "invariants", "in", "register", "and", "unregister", "though", "NUMBER", "I", "will", "float", "that", "idea", "internally", "at", "FB", "to", "yungsters", "and", "others", "and", "if", "the", "idea", "be", "accepted", "by", "those", "folks", "I", "ll", "ask", "you", "for", "a", "pull", "request", "NUMBER", "Opened", "NUMBER", "to", "track", "add", "in", "these", "invariants", "NUMBER", "NUMBER", "pull", "request", "on", "this", "and", "I", "be", "unable", "to", "repro", "NUMBER", "should", "be", "referencing", "LINK", "simple", "f", "NUMBER", "diagram", "with", "client", "action", "NUMBER", "w", "NUMBER", "png", "NUMBER", "be", "you", "unable", "to", "see", "the", "image", "seems", "to", "be", "very", "similar", "to", "part", "of", "NUMBER", "Yeah", "right", "on", "NUMBER", "Thanks", "NUMBER", "Matches", "LINK", "todomvc", "js", "stores", "TodoStore", "NUMBER", "js", "L", "NUMBER", "I", "would", "love", "that", "I", "ll", "connect", "with", "vjeux", "on", "how", "to", "make", "sure", "we", "can", "support", "the", "translated", "docs", "NUMBER", "Thanks", "Any", "progress", "on", "these", "translations", "I", "would", "really", "love", "to", "see", "this", "happen", "NUMBER", "Going", "to", "close", "this", "out", "let", "s", "open", "new", "issue", "if", "there", "be", "more", "question", "relate", "to", "this", "rather", "than", "having", "a", "single", "long", "run", "issue", "relate", "to", "all", "things", "translation", "thanks", "Thanks", "for", "this", "PR", "benhartley", "I", "already", "add", "the", "NUMBER", "md", "extension", "before", "I", "saw", "this", "however", "NUMBER", "Also", "I", "drop", "the", "old", "image", "on", "purpose", "in", "favor", "of", "the", "new", "one", "NUMBER", "Do", "you", "think", "the", "old", "image", "be", "better", "I", "have", "be", "a", "bit", "sorry", "to", "see", "that", "floating", "around", "the", "web", "so", "much", "because", "I", "think", "it", "makes", "Flux", "seem", "complex", "and", "I", "really", "think", "it", "isn", "t", "and", "it", "also", "misleadingly", "implies", "that", "web", "API", "calls", "can", "only", "emanate", "from", "the", "action", "creators", "NUMBER", "Curious", "about", "your", "thoughts", "on", "old", "vs", "NUMBER", "new", "NUMBER", "I", "don", "t", "think", "we", "be", "going", "to", "change", "Dispatcher", "to", "provide", "a", "hook", "_after_", "the", "dispatch", "completes", "but", "internally", "we", "be", "looking", "very", "seriously", "at", "update", "Dispatcher", "to", "provide", "a", "hook", "after", "all", "data", "mutations", "and", "just", "before", "_stopDispatching", "be", "call", "NUMBER", "That", "be", "just", "before", "this", "line", "LINK", "L", "NUMBER", "That", "change", "will", "make", "it", "to", "GitHub", "if", "we", "find", "that", "it", "helps", "us", "internally", "at", "FB", "with", "our", "applications", "NUMBER", "That", "s", "a", "hack", "that", "should", "be", "avoided", "NUMBER", "Dispatch", "within", "a", "dispatch", "error", "be", "cause", "by", "improper", "code", "design", "NUMBER", "of", "the", "time", "NUMBER", "Instead", "of", "doing", "the", "setTimeout", "do", "what", "you", "need", "to", "do", "in", "response", "to", "the", "original", "action", "NUMBER", "I", "think", "this", "be", "most", "often", "a", "reflection", "of", "equating", "actions", "with", "setters", "they", "be", "not", "the", "same", "NUMBER", "Closing", "this", "out", "since", "there", "hasn", "t", "be", "activity", "for", "a", "while", "and", "a", "few", "solutions", "have", "be", "provide", "above", "NUMBER", "This", "be", "really", "great", "Thanks", "for", "doing", "all", "this", "Do", "you", "want", "to", "make", "the", "small", "change", "I", "suggested", "or", "should", "I", "make", "those", "on", "your", "PR", "or", "even", "as", "a", "follow", "up", "Looks", "good", "and", "I", "m", "not", "too", "concerned", "with", "my", "comment", "Thanks", "for", "cleaning", "this", "up", "Thanks", "The", "main", "place", "for", "chat", "right", "now", "be", "the", "reactjs", "channel", "on", "freenode", "IRC", "NUMBER", "Lots", "of", "Facebook", "employees", "hang", "out", "there", "who", "have", "extensive", "experience", "with", "Flux", "NUMBER", "Many", "have", "be", "work", "with", "Flux", "for", "about", "two", "years", "and", "a", "few", "even", "a", "bit", "longer", "than", "that", "NUMBER", "That", "said", "I", "m", "open", "to", "the", "idea", "of", "creating", "a", "Gitter", "chatroom", "NUMBER", "I", "be", "seeing", "some", "concerns", "on", "the", "web", "about", "their", "request", "for", "extend", "permissions", "however", "which", "might", "be", "a", "deal", "breaker", "for", "me", "NUMBER", "I", "will", "do", "some", "research", "on", "it", "NUMBER", "tindli", "to", "answer", "your", "question", "NUMBER", "NUMBER", "I", "m", "definitely", "interested", "in", "cursors", "but", "I", "be", "not", "sure", "if", "a", "cursor", "based", "example", "should", "be", "the", "_next_", "example", "app", "NUMBER", "Just", "ImmutableJS", "should", "be", "good", "enough", "for", "our", "next", "step", "NUMBER", "Not", "to", "say", "we", "can", "t", "start", "thinking", "about", "a", "cursor", "example", "I", "d", "just", "prefer", "to", "focus", "on", "the", "immediate", "next", "example", "right", "now", "NUMBER", "I", "do", "like", "the", "ideas", "you", "be", "putting", "forth", "about", "cursors", "in", "actions", "etc", "NUMBER", "But", "to", "be", "honest", "here", "I", "have", "not", "do", "it", "yet", "NUMBER", "We", "ll", "be", "teaching", "each", "other", "on", "that", "NUMBER", "NUMBER", "A", "local", "setState", "be", "definitely", "not", "a", "thing", "of", "the", "past", "when", "use", "immutable", "data", "NUMBER", "Controlled", "input", "components", "in", "particular", "as", "you", "noted", "often", "have", "a", "bit", "of", "local", "component", "state", "NUMBER", "It", "be", "not", "a", "bad", "practice", "NUMBER", "There", "be", "a", "couple", "of", "warning", "signs", "that", "imply", "that", "some", "local", "state", "should", "get", "moved", "to", "a", "store", "NUMBER", "the", "data", "in", "this", "NUMBER", "ate", "gets", "pass", "to", "a", "child", "NUMBER", "the", "data", "in", "this", "NUMBER", "ate", "needs", "to", "be", "know", "by", "another", "part", "of", "the", "application", "NUMBER", "the", "logic", "surrounding", "the", "management", "of", "this", "NUMBER", "ate", "becomes", "more", "than", "trivial", "NUMBER", "The", "checks", "on", "these", "values", "be", "typically", "quite", "minimal", "NUMBER", "How", "many", "values", "would", "we", "be", "checking", "And", "PureRenderMixin", "makes", "it", "quite", "easy", "by", "use", "shallowEqual", "LINK", "LINK", "NUMBER", "My", "understanding", "be", "that", "the", "GC", "for", "ImmutableJS", "be", "quite", "good", "and", "was", "definitely", "on", "the", "mind", "of", "leebyron", "while", "he", "was", "developing", "it", "NUMBER", "Also", "memory", "usage", "be", "low", "due", "to", "structural", "sharing", "of", "data", "between", "version", "of", "the", "same", "data", "structure", "NUMBER", "See", "Lee", "s", "excellent", "React", "NUMBER", "js", "Conf", "talk", "LINK", "I", "NUMBER", "IdS", "PbEgI", "I", "can", "t", "comment", "too", "much", "on", "server", "side", "Flux", "other", "than", "to", "say", "there", "be", "definitely", "different", "ways", "to", "approach", "it", "NUMBER", "You", "can", "go", "the", "route", "of", "Yahoo", "and", "do", "full", "blown", "Flux", "on", "the", "server", "or", "you", "can", "do", "something", "more", "like", "SoundCloud", "and", "use", "Flux", "as", "a", "rendering", "middleware", "NUMBER", "I", "m", "sure", "there", "be", "other", "approaches", "as", "well", "NUMBER", "Building", "an", "immutable", "example", "I", "think", "we", "could", "try", "to", "build", "a", "small", "example", "together", "NUMBER", "I", "be", "open", "to", "suggestions", "on", "what", "that", "application", "should", "be", "or", "what", "the", "process", "of", "collaboration", "should", "be", "NUMBER", "But", "I", "do", "think", "we", "should", "keep", "it", "relatively", "small", "and", "simple", "it", "be", "an", "example", "after", "all", "and", "as", "such", "it", "should", "be", "readable", "understandable", "and", "free", "of", "distractions", "NUMBER", "I", "believe", "kevinold", "was", "interested", "in", "contribute", "too", "NUMBER", "I", "d", "suggest", "that", "immutable", "be", "use", "in", "the", "example", "name", "NUMBER", "Like", "flux", "chat", "or", "flux", "todomvc", "something", "like", "flux", "immutable", "or", "flux", "immutable", "whatever", "should", "be", "the", "name", "NUMBER", "Also", "I", "d", "ask", "that", "any", "prefix", "on", "the", "file", "to", "identify", "them", "as", "belonging", "to", "the", "same", "app", "should", "be", "NUMBER", "characters", "or", "less", "e", "NUMBER", "g", "NUMBER", "the", "use", "of", "Chat", "here", "LINK", "chat", "js", "utils", "NUMBER", "LINK", "utils", "NUMBER", "html", "content", "be", "build", "with", "immutability", "in", "mind", "and", "here", "be", "an", "example", "use", "it", "LINK", "challenge", "tree", "master", "submissions", "kyldvs", "Do", "you", "need", "to", "block", "the", "code", "execution", "while", "the", "long", "run", "stuff", "be", "happening", "If", "not", "you", "might", "consider", "putting", "it", "in", "a", "promise", "and", "then", "issue", "the", "action", "when", "it", "s", "complete", "NUMBER", "This", "would", "be", "a", "bit", "more", "like", "the", "way", "XHR", "calls", "work", "the", "asynchronous", "nature", "of", "what", "you", "re", "doing", "be", "more", "upfront", "rather", "than", "a", "hack", "at", "the", "end", "NUMBER", "The", "setTimeout", "trick", "be", "really", "a", "hack", "and", "I", "think", "it", "s", "a", "somewhat", "dangerous", "habit", "to", "get", "into", "NUMBER", "Most", "of", "the", "time", "these", "dispatch", "within", "a", "dispatch", "error", "be", "telling", "us", "that", "we", "have", "something", "wrong", "with", "our", "design", "that", "we", "be", "thinking", "sequentially", "NUMBER", "The", "usual", "fix", "be", "to", "back", "up", "and", "build", "the", "second", "action", "into", "the", "first", "action", "NUMBER", "But", "with", "truly", "long", "run", "stuff", "this", "isn", "t", "possible", "and", "if", "an", "asynchronous", "solution", "be", "possible", "it", "tends", "to", "be", "the", "best", "route", "NUMBER", "The", "Flux", "test", "blog", "post", "was", "already", "add", "to", "the", "Flux", "documents", "in", "NUMBER", "eb", "NUMBER", "fb", "NUMBER", "Also", "the", "test", "in", "the", "example", "application", "pass", "NUMBER", "Maybe", "you", "can", "follow", "the", "example", "test", "to", "see", "what", "the", "problem", "might", "be", "in", "your", "test", "NUMBER", "If", "there", "be", "an", "actual", "problem", "in", "the", "documentation", "please", "reopen", "this", "issue", "NUMBER", "Mainly", "because", "we", "were", "trying", "to", "create", "an", "example", "where", "we", "could", "show", "waitFor", "NUMBER", "The", "example", "be", "a", "bit", "forced", "NUMBER", "Yeah", "okay", "NUMBER", "I", "m", "actually", "not", "entirely", "sure", "why", "JSTransform", "folks", "be", "doing", "the", "munge", "NUMBER", "I", "know", "there", "be", "a", "desire", "to", "create", "a", "kind", "of", "pseudo", "privacy", "but", "I", "agree", "that", "it", "s", "hard", "to", "read", "while", "debugging", "NUMBER", "I", "ll", "merge", "this", "but", "if", "I", "hear", "differently", "from", "them", "at", "some", "point", "with", "some", "new", "info", "I", "might", "put", "it", "back", "NUMBER", "Do", "you", "think", "this", "means", "I", "should", "bump", "the", "version", "Done", "in", "commit", "NUMBER", "eb", "NUMBER", "fb", "NUMBER", "thanks", "Audit", "and", "revise", "LINK", "L", "NUMBER", "L", "NUMBER", "In", "particular", "Use", "of", "chained", "be", "not", "clear", "the", "docs", "mean", "to", "say", "that", "a", "chain", "of", "dependencies", "may", "be", "declared", "across", "multiple", "stores", "NUMBER", "LINK", "L", "NUMBER", "There", "might", "also", "be", "something", "strange", "going", "on", "with", "the", "multiple", "cases", "as", "revised", "in", "NUMBER", "and", "this", "be", "worth", "examining", "again", "NUMBER", "Thanks", "for", "this", "Looking", "at", "this", "again", "I", "m", "seeing", "that", "those", "docs", "were", "never", "very", "clear", "NUMBER", "I", "ve", "opened", "NUMBER", "to", "remind", "me", "to", "update", "them", "NUMBER", "thanks", "The", "handleServerAction", "and", "handleViewAction", "wrappers", "around", "Dispatcher", "NUMBER", "dispatch", "were", "unnecessary", "cruft", "that", "came", "over", "from", "a", "couple", "of", "applications", "we", "build", "at", "Facebook", "NUMBER", "If", "one", "needs", "to", "determine", "whether", "a", "particular", "action", "came", "from", "the", "server", "or", "the", "view", "a", "property", "can", "be", "add", "to", "the", "action", "to", "denote", "the", "origin", "NUMBER", "It", "s", "a", "bit", "cleaner", "to", "have", "the", "dispatcher", "s", "payload", "be", "synonymous", "with", "the", "action", "NUMBER", "sterpe", "and", "sompylasar", "thanks", "for", "jumping", "in", "here", "NUMBER", "you", "guys", "be", "correct", "all", "application", "state", "should", "be", "maintained", "in", "the", "stores", "not", "the", "view", "components", "NUMBER", "Yes", "component", "state", "be", "different", "from", "application", "state", "and", "React", "components", "should", "maintain", "component", "state", "when", "necessary", "NUMBER", "Your", "example", "seems", "like", "a", "good", "candidate", "for", "maintaining", "a", "little", "bit", "of", "component", "state", "NUMBER", "However", "if", "any", "_other_", "component", "needs", "to", "know", "whether", "the", "balloon", "be", "open", "it", "becomes", "application", "state", "and", "then", "it", "should", "be", "maintained", "in", "a", "store", "NUMBER", "Looks", "like", "bill", "mostly", "answered", "this", "NUMBER", "Yeah", "this", "makes", "more", "sense", "to", "me", "honestly", "NUMBER", "The", "chat", "example", "was", "something", "I", "put", "together", "for", "a", "presentation", "at", "the", "ForwardJS", "conference", "in", "the", "fall", "of", "NUMBER", "as", "an", "attempt", "to", "show", "a", "more", "complicated", "example", "than", "the", "TodoMVC", "one", "yet", "still", "keep", "it", "simple", "NUMBER", "Jing", "and", "I", "wanted", "to", "show", "both", "waitFor", "and", "web", "API", "interactions", "NUMBER", "Unfortunately", "my", "attempt", "at", "increase", "complexity", "while", "staying", "as", "simple", "as", "possible", "resulted", "in", "an", "example", "that", "was", "a", "little", "bit", "forced", "NUMBER", "We", "wanted", "to", "show", "the", "API", "calls", "come", "out", "of", "the", "action", "creators", "as", "this", "be", "the", "style", "Jing", "prefers", "in", "most", "cases", "NUMBER", "Other", "folks", "at", "FB", "prefer", "to", "make", "the", "calls", "to", "the", "web", "API", "in", "the", "store", "as", "you", "have", "do", "here", "NUMBER", "I", "m", "pretty", "neutral", "about", "it", "NUMBER", "There", "be", "two", "different", "ways", "to", "do", "it", "and", "both", "be", "correct", "NUMBER", "One", "advantage", "of", "doing", "the", "XHR", "call", "in", "the", "action", "creator", "instead", "of", "the", "store", "as", "a", "rule", "this", "makes", "it", "impossible", "to", "make", "the", "mistake", "of", "handle", "the", "XHR", "response", "directly", "in", "the", "store", "rather", "than", "creating", "a", "new", "action", "NUMBER", "Then", "requiring", "the", "action", "creator", "modules", "in", "the", "store", "becomes", "an", "easily", "recognizable", "red", "flag", "NUMBER", "But", "this", "be", "really", "a", "matter", "of", "taste", "and", "of", "team", "dynamics", "I", "think", "NUMBER", "I", "think", "we", "should", "let", "the", "current", "code", "stand", "as", "be", "and", "not", "cause", "too", "much", "confusion", "in", "the", "Flux", "community", "by", "change", "it", "at", "this", "point", "NUMBER", "But", "I", "ll", "keep", "this", "open", "and", "think", "about", "it", "some", "more", "NUMBER", "I", "should", "probably", "write", "up", "a", "full", "explanation", "of", "all", "this", "in", "blog", "post", "or", "documentation", "page", "and", "maybe", "even", "develop", "a", "new", "example", "that", "shows", "stores", "make", "web", "API", "calls", "NUMBER", "ok", "that", "s", "cool", "we", "can", "do", "that", "NUMBER", "If", "you", "revise", "this", "in", "that", "way", "I", "ll", "merge", "it", "in", "NUMBER", "Hi", "RileyTomasek", "that", "would", "be", "great", "NUMBER", "Been", "meaning", "to", "get", "to", "this", "for", "a", "long", "time", "NUMBER", "I", "m", "actively", "work", "on", "the", "Flux", "repo", "site", "this", "week", "so", "if", "there", "be", "any", "delay", "just", "let", "me", "know", "and", "I", "ll", "take", "it", "on", "myself", "NUMBER", "Thanks", "tleunen", "If", "you", "need", "to", "use", "the", "same", "action", "you", "can", "just", "add", "a", "property", "to", "the", "action", "denoting", "the", "origin", "and", "use", "that", "as", "a", "flag", "in", "the", "stores", "to", "handle", "the", "action", "differently", "NUMBER", "This", "was", "taken", "care", "of", "in", "NUMBER", "by", "jarsbe", "NUMBER", "Paragraph", "be", "still", "valid", "NUMBER", "Flux", "be", "not", "a", "framework", "its", "a", "pattern", "NUMBER", "boilerplate", "project", "has", "not", "yet", "be", "write", "NUMBER", "tabs", "vs", "NUMBER", "spaces", "ftw", "NUMBER", "but", "seriously", "thanks", "NUMBER", "Thanks", "The", "dispatcher", "be", "an", "abstracted", "object", "that", "doesn", "t", "necessarily", "know", "anything", "about", "Flux", "NUMBER", "We", "use", "the", "dispatcher", "at", "Facebook", "for", "more", "than", "just", "Flux", "so", "we", "can", "t", "modify", "it", "here", "to", "become", "Flux", "specific", "NUMBER", "We", "actually", "want", "to", "get", "rid", "of", "that", "handleViewAction", "stuff", "entirely", "and", "just", "call", "ChatAppDispatcher", "NUMBER", "dispatch", "directly", "in", "the", "action", "creators", "NUMBER", "Thanks", "for", "this", "clean", "up", "Yes", "this", "be", "an", "artifact", "of", "how", "Flux", "was", "initially", "release", "with", "my", "own", "less", "than", "ideal", "Dispatcher", "instead", "of", "the", "real", "one", "that", "Facebook", "uses", "in", "production", "NUMBER", "Please", "feel", "free", "to", "correct", "the", "error", "with", "a", "pull", "request", "NUMBER", "One", "of", "the", "major", "problem", "with", "the", "Promise", "based", "solution", "was", "that", "I", "could", "not", "figure", "out", "how", "to", "detect", "a", "circular", "dependency", "NUMBER", "In", "the", "FB", "production", "implementation", "with", "the", "synchronous", "loop", "this", "error", "be", "detected", "and", "display", "to", "the", "programmer", "LINK", "L", "NUMBER", "L", "NUMBER", "The", "Flux", "overview", "page", "LINK", "has", "be", "update", "NUMBER", "Among", "other", "change", "it", "now", "accurately", "reflects", "the", "API", "of", "the", "FB", "dispatcher", "LINK", "available", "on", "npm", "NUMBER", "The", "current", "version", "of", "the", "dispatcher", "be", "work", "correctly", "and", "I", "would", "expect", "the", "error", "to", "occur", "given", "how", "you", "have", "describe", "the", "situation", "NUMBER", "The", "reason", "why", "it", "works", "with", "a", "setTimeout", "be", "that", "this", "puts", "the", "faked", "API", "response", "into", "a", "new", "execution", "context", "which", "only", "runs", "after", "the", "current", "execution", "context", "completes", "NUMBER", "Without", "the", "setTimeout", "you", "be", "in", "the", "same", "execution", "context", "and", "you", "be", "then", "dispatching", "while", "you", "be", "already", "in", "the", "middle", "of", "a", "dispatch", "NUMBER", "Whether", "the", "dispatcher", "could", "be", "improved", "however", "be", "another", "question", "and", "I", "welcome", "your", "ideas", "on", "how", "to", "do", "that", "NUMBER", "We", "don", "t", "want", "to", "allow", "overlapping", "dispatches", "as", "that", "would", "make", "the", "entire", "Flux", "update", "cycle", "much", "more", "difficult", "to", "manage", "and", "to", "reason", "about", "NUMBER", "I", "do", "recall", "at", "one", "time", "a", "suggestion", "for", "creating", "an", "action", "queue", "NUMBER", "But", "this", "would", "encourage", "bad", "code", "where", "a", "person", "could", "enqueue", "cascading", "dispatches", "a", "store", "would", "respond", "to", "a", "dispatched", "action", "and", "then", "directly", "dispatch", "a", "new", "action", "rather", "than", "provide", "code", "for", "responding", "to", "the", "original", "action", "NUMBER", "We", "do", "not", "want", "the", "dispatcher", "to", "allow", "that", "sort", "of", "thing", "NUMBER", "Yes", "this", "be", "a", "good", "solution", "and", "has", "actually", "be", "discussed", "at", "FB", "which", "be", "why", "I", "mention", "it", "above", "but", "it", "s", "a", "little", "bit", "dangerous", "for", "inexperienced", "Flux", "programmers", "NUMBER", "One", "could", "easily", "call", "AppDispatcher", "NUMBER", "assign", "from", "within", "the", "stores", "and", "get", "involved", "with", "cascading", "actions", "which", "we", "want", "to", "avoid", "NUMBER", "If", "you", "think", "you", "have", "the", "discipline", "on", "your", "team", "to", "not", "do", "that", "then", "I", "d", "say", "you", "should", "go", "for", "it", "NUMBER", "But", "I", "d", "rather", "not", "introduce", "that", "here", "in", "the", "Flux", "repo", "nor", "do", "I", "want", "to", "get", "involved", "in", "additional", "dependencies", "on", "npm", "modules", "NUMBER", "If", "you", "can", "figure", "out", "a", "way", "to", "introduce", "this", "queue", "that", "would", "not", "allow", "cascading", "actions", "issue", "by", "stores", "then", "I", "d", "definitely", "be", "more", "inclined", "to", "accept", "that", "solution", "NUMBER", "There", "be", "some", "test", "now", "NUMBER", "You", "might", "be", "saying", "that", "we", "should", "be", "use", "ES", "NUMBER", "classes", "And", "I", "would", "agree", "generally", "but", "the", "examples", "be", "intended", "to", "be", "instructional", "to", "the", "widest", "possible", "audiece", "so", "they", "be", "write", "in", "ES", "NUMBER", "It", "would", "be", "worth", "publishing", "an", "ES", "NUMBER", "version", "of", "he", "Flux", "examples", "just", "so", "people", "could", "see", "how", "we", "_really_", "write", "code", "at", "FB", "NUMBER", "In", "practice", "we", "ve", "not", "notice", "performance", "problem", "with", "stores", "over", "informing", "NUMBER", "That", "said", "there", "be", "some", "nice", "constructs", "to", "help", "make", "sure", "that", "NUMBER", "Stores", "only", "inform", "when", "they", "change", "compare", "references", "at", "the", "end", "LINK", "L", "NUMBER", "L", "NUMBER", "NUMBER", "Only", "update", "the", "state", "of", "a", "react", "component", "once", "per", "dispatch", "LINK", "L", "NUMBER", "NUMBER", "Wrap", "Dispatcher", "NUMBER", "dispatch", "in", "ReactBatchedUpdates", "so", "that", "rendering", "only", "happens", "once", "all", "stores", "have", "handle", "an", "action", "NUMBER", "Closing", "this", "out", "since", "it", "s", "old", "and", "appears", "to", "be", "mostly", "answered", "NUMBER", "thanks", "Also", "see", "McFly", "LINK", "On", "Thursday", "November", "NUMBER", "NUMBER", "Reza", "Akhavan", "notifications", "github", "NUMBER", "com", "write", "I", "m", "happy", "to", "share", "flux", "store", "LINK", "store", "image", "heart", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "thanks", "for", "letting", "me", "know", "The", "dispatcher", "was", "designed", "to", "be", "a", "more", "abstract", "component", "capable", "of", "many", "uses", "beyond", "Flux", "and", "to", "keep", "this", "in", "sync", "with", "Facebook", "s", "production", "code", "we", "need", "to", "keep", "it", "this", "way", "NUMBER", "It", "knows", "nothing", "about", "the", "payload", "NUMBER", "type", "a", "payload", "may", "not", "have", "a", "type", "if", "the", "dispatcher", "be", "not", "be", "use", "in", "a", "Flux", "application", "NUMBER", "So", "let", "s", "remove", "the", "ideas", "here", "about", "the", "action", "and", "the", "type", "and", "just", "display", "the", "whole", "new", "payload", "in", "the", "error", "NUMBER", "thanks", "Yes", "I", "think", "you", "re", "right", "NUMBER", "Pull", "request", "Or", "I", "can", "take", "care", "of", "it", "next", "week", "NUMBER", "add", "in", "NUMBER", "Merged", "it", "by", "hand", "NUMBER", "The", "use", "of", "object", "assign", "still", "blames", "to", "you", "NUMBER", "Thanks", "a", "ton", "for", "this", "Yes", "this", "be", "how", "I", "would", "actually", "build", "it", "but", "we", "were", "trying", "to", "show", "that", "Web", "API", "calls", "can", "happen", "directly", "out", "of", "the", "action", "creators", "NUMBER", "There", "be", "nothing", "wrong", "with", "make", "the", "call", "in", "either", "place", "per", "se", "and", "sometimes", "its", "actually", "cleaner", "to", "do", "it", "in", "the", "action", "creators", "than", "to", "do", "it", "in", "the", "stores", "NUMBER", "But", "the", "important", "part", "be", "what", "you", "have", "in", "the", "comment", "ChatWebAPIUtils", "NUMBER", "createMessage", "would", "trigger", "an", "error", "success", "action", "I", "m", "open", "to", "change", "the", "example", "but", "I", "do", "want", "to", "keep", "it", "as", "simple", "as", "possible", "NUMBER", "You", "can", "put", "logic", "in", "an", "ActionCreator", "but", "often", "there", "be", "a", "better", "design", "NUMBER", "Calculate", "and", "apply", "a", "route", "which", "brings", "this", "resource", "to", "that", "target", "Is", "this", "in", "response", "to", "a", "user", "interaction", "with", "the", "UI", "If", "so", "I", "would", "try", "to", "do", "as", "much", "logic", "as", "possible", "in", "the", "stores", "perhaps", "utilizing", "Dispatcher", "NUMBER", "waitFor", "and", "pass", "those", "values", "down", "as", "props", "to", "the", "view", "NUMBER", "In", "an", "event", "handler", "the", "view", "would", "only", "apply", "the", "user", "driven", "variables", "against", "those", "precalculated", "values", "that", "were", "pass", "down", "and", "then", "call", "the", "appropriate", "ActionCreator", "with", "the", "parameters", "it", "needs", "NUMBER", "If", "this", "be", "in", "response", "to", "another", "action", "I", "would", "back", "up", "and", "look", "at", "how", "I", "be", "handle", "that", "action", "NUMBER", "I", "would", "gather", "all", "the", "required", "information", "again", "possibly", "with", "waitFor", "to", "apply", "a", "route", "NUMBER", "in", "response", "to", "that", "original", "action", "NUMBER", "thanks", "Thanks", "dispatcherIndex", "be", "supposed", "to", "be", "a", "property", "of", "the", "store", "so", "that", "other", "stores", "can", "refer", "to", "it", "with", "javascript", "AppDispatcher", "NUMBER", "waitFor", "TodoStore", "NUMBER", "dispatcherIndex", "I", "see", "that", "there", "be", "a", "discrepancy", "with", "real", "code", "here", "but", "it", "s", "not", "what", "you", "have", "in", "the", "PR", "NUMBER", "LINK", "todomvc", "js", "stores", "TodoStore", "NUMBER", "js", "In", "the", "tutorial", "it", "s", "useful", "for", "people", "to", "see", "that", "dispatchToken", "be", "a", "property", "of", "the", "store", "so", "I", "m", "tempted", "to", "let", "it", "continue", "to", "be", "slightly", "out", "of", "sync", "with", "the", "code", "NUMBER", "Alternatively", "we", "might", "use", "bind", "or", "something", "if", "needed", "to", "bring", "the", "registered", "callback", "back", "into", "the", "body", "of", "the", "store", "NUMBER", "I", "can", "port", "over", "Facebook", "s", "internal", "test", "I", "think", "NUMBER", "Let", "s", "keep", "this", "issue", "open", "until", "I", "get", "that", "do", "NUMBER", "I", "m", "not", "sure", "what", "those", "test", "be", "trying", "to", "do", "NUMBER", "I", "copied", "these", "over", "from", "our", "internal", "test", "but", "these", "don", "t", "make", "sense", "NUMBER", "I", "also", "can", "t", "find", "any", "history", "in", "our", "internal", "code", "of", "some", "legacy", "version", "of", "the", "dispatcher", "having", "these", "second", "argument", "NUMBER", "I", "ll", "ask", "around", "at", "FB", "about", "this", "but", "for", "now", "I", "m", "going", "to", "pull", "out", "those", "test", "NUMBER", "Did", "not", "pull", "out", "the", "test", "but", "rather", "simply", "fix", "them", "to", "take", "the", "correct", "argument", "NUMBER", "These", "be", "the", "test", "that", "make", "sure", "the", "dispatcher", "throw", "an", "error", "if", "you", "create", "a", "circular", "dependency", "very", "important", "NUMBER", "Yeah", "we", "should", "hoist", "the", "original", "declaration", "of", "those", "variables", "out", "to", "the", "closure", "of", "the", "describe", "function", "NUMBER", "Please", "submit", "a", "pull", "request", "if", "you", "want", "or", "I", "can", "get", "to", "it", "when", "I", "can", "NUMBER", "Thanks", "for", "taking", "care", "of", "this", "thanks", "A", "lot", "of", "this", "seems", "very", "specific", "to", "your", "application", "and", "it", "s", "difficult", "to", "get", "enough", "context", "from", "what", "you", "have", "write", "here", "NUMBER", "Perhaps", "more", "code", "would", "help", "the", "community", "here", "understand", "your", "issue", "But", "on", "a", "side", "note", "this", "concerns", "me", "javascript", "alertStore", "NUMBER", "add", "contents", "new", "UnlockJob", "NUMBER", "That", "looks", "an", "awful", "lot", "like", "a", "setter", "on", "your", "store", "and", "a", "store", "should", "not", "have", "any", "setter", "methods", "NUMBER", "The", "only", "way", "data", "should", "be", "get", "into", "the", "store", "be", "though", "the", "callback", "it", "registers", "with", "the", "dispatcher", "NUMBER", "I", "would", "render", "a", "PopupControllerView", "at", "the", "bottom", "of", "the", "body", "in", "it", "s", "own", "React", "root", "which", "would", "be", "listening", "to", "stores", "NUMBER", "It", "might", "have", "number", "of", "child", "popups", "or", "I", "might", "create", "logic", "to", "dynamically", "create", "those", "children", "NUMBER", "I", "might", "maintain", "a", "PopupStore", "which", "would", "have", "currentPopupID", "value", "which", "could", "be", "null", "NUMBER", "Down", "in", "my", "list", "of", "popup", "components", "they", "would", "all", "receive", "currentPopupID", "as", "a", "prop", "and", "if", "their", "popupID", "matched", "they", "would", "get", "display", "NUMBER", "Or", "I", "would", "simply", "let", "the", "values", "in", "the", "other", "stores", "drive", "what", "popup", "to", "render", "more", "directly", "perhaps", "with", "some", "logic", "in", "PopupControllerView", "determining", "if", "a", "popup", "should", "be", "display", "or", "which", "one", "NUMBER", "Basically", "this", "be", "all", "just", "Flux", "React", "nothing", "special", "going", "on", "other", "than", "creating", "a", "separate", "root", "for", "it", "and", "I", "m", "not", "even", "sure", "that", "s", "necessary", "NUMBER", "The", "generic", "Popup", "React", "component", "could", "be", "made", "to", "simply", "take", "props", "and", "let", "the", "store", "or", "controller", "view", "above", "it", "determine", "those", "props", "NUMBER", "You", "could", "then", "use", "that", "generic", "component", "to", "compose", "various", "different", "popups", "NUMBER", "My", "understanding", "be", "that", "FB", "be", "work", "on", "exposing", "Object", "NUMBER", "assign", "in", "a", "way", "that", "can", "be", "shared", "across", "projects", "not", "just", "within", "React", "NUMBER", "But", "we", "re", "not", "there", "yet", "NUMBER", "So", "I", "be", "thinking", "about", "use", "Sindre", "s", "npm", "module", "for", "Object", "NUMBER", "assign", "until", "then", "NUMBER", "It", "s", "difficult", "to", "say", "without", "more", "context", "NUMBER", "This", "might", "be", "a", "situation", "where", "I", "would", "utilize", "the", "component", "s", "state", "or", "I", "might", "move", "the", "state", "to", "the", "store", "NUMBER", "I", "think", "it", "would", "depend", "on", "the", "situation", "and", "how", "the", "animation", "relate", "to", "the", "rest", "of", "the", "application", "state", "NUMBER", "If", "you", "were", "to", "use", "the", "component", "s", "state", "you", "could", "set", "up", "a", "requestAnimationFrame", "rAF", "in", "the", "component", "and", "call", "setState", "with", "a", "new", "value", "on", "every", "cycle", "of", "the", "rAF", "NUMBER", "You", "could", "also", "do", "something", "similar", "in", "the", "store", "instead", "NUMBER", "If", "you", "were", "use", "CSS", "transitions", "you", "might", "let", "other", "parts", "of", "the", "application", "know", "you", "be", "currently", "animating", "if", "needed", "with", "a", "new", "action", "store", "that", "state", "in", "the", "stores", "and", "then", "when", "the", "animation", "be", "over", "dispatch", "a", "new", "action", "to", "inform", "other", "parts", "of", "the", "app", "again", "NUMBER", "The", "only", "complex", "animation", "I", "ve", "do", "with", "React", "Flux", "has", "be", "with", "a", "rAF", "in", "the", "store", "and", "it", "was", "managing", "a", "very", "long", "animation", "over", "a", "minute", "in", "length", "NUMBER", "For", "shorter", "more", "UI", "oriented", "things", "I", "think", "I", "would", "keep", "the", "animation", "state", "in", "the", "components", "and", "the", "more", "application", "oriented", "state", "in", "the", "store", "NUMBER", "For", "example", "I", "would", "have", "a", "value", "in", "the", "store", "like", "_isEditing", "NUMBER", "When", "_isEditing", "be", "true", "the", "user", "should", "see", "an", "edit", "interface", "in", "a", "modal", "NUMBER", "When", "_isEditing", "first", "change", "from", "false", "to", "true", "checked", "in", "componentWillReceiveProps", "the", "react", "component", "change", "its", "state", "and", "starts", "the", "animation", "NUMBER", "cc", "sebmarkbage", "I", "d", "venture", "to", "say", "that", "S", "NUMBER", "and", "S", "NUMBER", "should", "probably", "be", "the", "same", "store", "NUMBER", "Why", "aren", "t", "they", "Why", "not", "manage", "both", "jobs", "and", "achievements", "in", "one", "store", "If", "you", "really", "want", "to", "separate", "the", "code", "for", "readability", "maintainability", "then", "yes", "you", "want", "to", "have", "those", "actions", "as", "cases", "in", "the", "AchievementStore", "s", "switch", "statement", "waitFor", "the", "JobStore", "and", "then", "retrieve", "the", "update", "data", "from", "the", "JobStore", "NUMBER", "But", "if", "you", "can", "it", "really", "sounds", "like", "they", "should", "be", "the", "same", "store", "NUMBER", "waitFor", "be", "really", "a", "last", "resort", "for", "managing", "complexity", "and", "not", "at", "all", "the", "ideal", "in", "a", "well", "designed", "system", "NUMBER", "Sometimes", "it", "s", "unavoidable", "NUMBER", "But", "in", "your", "situation", "I", "would", "seriously", "consider", "merge", "the", "two", "stores", "NUMBER", "Please", "remember", "that", "stores", "be", "not", "ORM", "style", "models", "and", "they", "be", "not", "Backbone", "collections", "NUMBER", "They", "manage", "a", "domain", "of", "logic", "and", "data", "NUMBER", "It", "sounds", "to", "me", "like", "jobs", "and", "achievements", "might", "actually", "be", "within", "the", "same", "domain", "NUMBER", "In", "what", "way", "do", "this", "involve", "the", "actions", "dispatcher", "or", "stores", "On", "Saturday", "October", "NUMBER", "NUMBER", "Justin", "Gordon", "notifications", "github", "NUMBER", "com", "write", "I", "have", "an", "callback", "for", "onBlur", "that", "will", "setState", "and", "based", "on", "the", "state", "some", "buttons", "may", "be", "remove", "from", "the", "screen", "NUMBER", "The", "problem", "be", "that", "one", "of", "these", "buttons", "has", "a", "callback", "that", "needs", "to", "run", "and", "if", "setState", "be", "call", "from", "the", "onBlur", "callback", "then", "the", "callback", "for", "the", "button", "do", "not", "run", "probably", "because", "it", "s", "not", "technically", "visible", "NUMBER", "I", "verify", "that", "the", "button", "callback", "works", "fine", "if", "the", "onBlur", "callback", "do", "not", "call", "setState", "NUMBER", "I", "worked", "around", "the", "issue", "by", "use", "a", "window", "NUMBER", "setTimout", "that", "calls", "setState", "after", "NUMBER", "ms", "NUMBER", "Is", "this", "the", "right", "approach", "Or", "be", "this", "a", "bug", "in", "flux", "that", "all", "callbacks", "don", "t", "run", "My", "expectation", "be", "that", "the", "all", "callbacks", "would", "run", "and", "the", "setState", "calls", "would", "be", "cummulative", "NUMBER", "Thanks", "for", "any", "advice", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "Thanks", "We", "ve", "add", "another", "example", "since", "this", "was", "opened", "still", "todo", "mvc", "I", "m", "also", "thinking", "about", "potentially", "pulling", "in", "the", "implementation", "for", "LINK", "challenge", "tree", "master", "submissions", "kyldvs", "Thank", "you", "Thanks", "Browserify", "helps", "us", "do", "modular", "development", "in", "the", "browser", "with", "the", "CommonJS", "module", "system", "NUMBER", "It", "will", "also", "do", "the", "JSX", "and", "ES", "NUMBER", "transpilation", "for", "us", "NUMBER", "As", "such", "it", "has", "a", "lot", "of", "value", "and", "to", "some", "extent", "the", "code", "depends", "on", "it", "NUMBER", "The", "examples", "were", "write", "not", "only", "to", "show", "people", "how", "to", "use", "Flux", "but", "also", "to", "point", "the", "way", "toward", "best", "practices", "NUMBER", "JSX", "CommonJS", "and", "ES", "NUMBER", "be", "in", "my", "opinion", "best", "practices", "for", "Flux", "NUMBER", "I", "don", "t", "want", "to", "recommend", "other", "package", "managers", "or", "module", "systems", "as", "I", "believe", "that", "npm", "and", "CommonJS", "be", "currently", "the", "best", "options", "that", "the", "open", "source", "community", "has", "NUMBER", "If", "at", "some", "point", "we", "decide", "to", "switch", "from", "CommonJS", "to", "ES", "NUMBER", "modules", "then", "we", "ll", "update", "all", "the", "code", "that", "be", "helping", "us", "with", "CommonJS", "NUMBER", "However", "I", "do", "understand", "that", "this", "may", "be", "a", "barrier", "for", "some", "folks", "and", "I", "d", "happily", "entertain", "a", "more", "fleshed", "out", "idea", "for", "a", "new", "extremely", "basic", "example", "for", "newcomers", "NUMBER", "Please", "let", "me", "know", "what", "were", "the", "biggest", "hurdles", "for", "you", "and", "we", "can", "take", "a", "look", "at", "what", "we", "could", "do", "to", "make", "things", "easier", "NUMBER", "I", "would", "consider", "the", "Flux", "TodoMVC", "tutorial", "LINK", "list", "NUMBER", "html", "to", "be", "a", "core", "part", "of", "the", "documentation", "and", "Browserify", "bundle", "NUMBER", "js", "etc", "NUMBER", "be", "clearly", "explained", "there", "NUMBER", "I", "do", "apologize", "that", "this", "was", "difficult", "for", "you", "NUMBER", "But", "I", "encourage", "you", "to", "give", "it", "another", "try", "It", "really", "be", "a", "nice", "way", "to", "work", "once", "you", "get", "it", "set", "up", "NUMBER", "In", "the", "mean", "time", "I", "ll", "put", "together", "another", "even", "simpler", "example", "very", "soon", "NUMBER", "Please", "take", "question", "about", "variations", "on", "Flux", "or", "quasi", "Flux", "experiments", "to", "the", "React", "Google", "Group", "LINK", "forum", "reactjs", "rather", "than", "this", "repo", "NUMBER", "This", "code", "was", "write", "this", "way", "because", "the", "performance", "implications", "were", "judged", "to", "be", "significant", "enough", "to", "warrant", "limiting", "the", "replacement", "strings", "to", "six", "NUMBER", "And", "we", "want", "to", "keep", "this", "open", "source", "version", "in", "sync", "with", "our", "production", "code", "NUMBER", "Six", "be", "really", "plenty", "NUMBER", "I", "ve", "never", "use", "more", "than", "three", "NUMBER", "Here", "be", "a", "jsperf", "test", "I", "put", "together", "with", "a", "stubbed", "error", "object", "NUMBER", "LINK", "with", "and", "without", "explicit", "parameters", "This", "be", "stale", "so", "closing", "out", "NUMBER", "Looking", "over", "the", "examples", "may", "be", "useful", "to", "you", "NUMBER", "There", "have", "also", "be", "some", "recent", "examples", "that", "include", "talking", "to", "the", "server", "LINK", "challenge", "tree", "master", "submissions", "kyldvs", "I", "ve", "grown", "to", "prefer", "the", "reverse", "syntax", "of", "NOUN_VERB", "like", "TODO_SELECT", "NUMBER", "This", "way", "in", "an", "alphabetized", "list", "all", "my", "TODO", "actions", "be", "together", "and", "I", "generally", "want", "to", "sort", "on", "nouns", "not", "verb", "NUMBER", "But", "really", "this", "be", "just", "a", "personal", "preference", "and", "any", "naming", "scheme", "you", "and", "your", "team", "have", "good", "reasons", "to", "adopt", "be", "perfectly", "appropriate", "NUMBER", "Done", "NUMBER", "bower", "install", "flux", "will", "give", "you", "bower_components", "flux", "dist", "Flux", "NUMBER", "js", "which", "if", "you", "add", "to", "your", "page", "will", "give", "you", "a", "global", "Flux", "object", "NUMBER", "Flux", "NUMBER", "dispatcher", "be", "your", "dispatcher", "NUMBER", "abergs", "Stores", "should", "not", "directly", "create", "actions", "NUMBER", "This", "will", "lead", "to", "a", "dispatch", "within", "a", "dispatch", "problem", "and", "an", "unstable", "state", "NUMBER", "You", "can", "just", "make", "the", "async", "call", "to", "the", "web", "API", "directly", "from", "the", "store", "or", "by", "directly", "calling", "a", "method", "in", "a", "Utils", "module", "and", "then", "create", "an", "action", "within", "the", "error", "success", "callback", "NUMBER", "I", "like", "the", "idea", "of", "id", "NUMBER", "status", "loading", "as", "it", "will", "allow", "the", "user", "to", "continue", "to", "work", "with", "the", "rest", "of", "the", "app", "NUMBER", "nice", "I", "hadn", "t", "seen", "that", "project", "of", "Ian", "s", "before", "NUMBER", "Thanks", "for", "that", "link", "NUMBER", "The", "most", "important", "Flux", "data", "flow", "diagram", "be", "this", "Action", "Dispatcher", "Store", "View", "The", "rest", "while", "suggesting", "best", "practices", "be", "really", "just", "implementation", "details", "NUMBER", "How", "data", "leaves", "the", "system", "and", "goes", "to", "the", "server", "do", "not", "matter", "very", "much", "NUMBER", "What", "matters", "more", "be", "how", "it", "enters", "the", "system", "and", "flows", "through", "it", "NUMBER", "Always", "start", "the", "flow", "with", "dispatched", "actions", "NUMBER", "igo", "NUMBER", "This", "be", "one", "approach", "that", "we", "use", "quite", "heavily", "at", "Facebook", "LINK", "challenge", "tree", "master", "submissions", "kyldvs", "Relevant", "file", "be", "SithStore", "and", "SithDataManager", "NUMBER", "Going", "to", "close", "this", "out", "since", "I", "feel", "like", "the", "example", "above", "demonstrates", "solutions", "to", "most", "aspects", "of", "async", "data", "in", "flux", "NUMBER", "If", "you", "would", "still", "like", "to", "discuss", "this", "issue", "further", "please", "feel", "free", "to", "re", "open", "I", "m", "realizing", "now", "that", "this", "would", "force", "this", "very", "abstract", "Dispatcher", "to", "know", "the", "structure", "of", "the", "payload", "NUMBER", "People", "do", "create", "their", "payloads", "in", "different", "ways", "and", "there", "be", "nothing", "wrong", "with", "doing", "something", "a", "little", "different", "NUMBER", "For", "example", "we", "don", "t", "always", "differentiate", "between", "payload", "and", "action", "so", "in", "some", "apps", "there", "be", "no", "payload", "wrapper", "around", "the", "action", "NUMBER", "Also", "the", "type", "be", "what", "we", "re", "really", "looking", "to", "verify", "here", "and", "people", "use", "actionType", "or", "type", "or", "any", "other", "arbitrary", "string", "as", "the", "key", "for", "this", "value", "NUMBER", "So", "now", "I", "think", "the", "appropriate", "place", "to", "do", "this", "check", "be", "actually", "within", "the", "application", "specific", "dispatcher", "and", "we", "should", "simply", "recommend", "this", "as", "a", "best", "practice", "NUMBER", "Those", "be", "LINK", "todomvc", "js", "dispatcher", "AppDispatcher", "NUMBER", "js", "LINK", "chat", "js", "dispatcher", "ChatAppDispatcher", "NUMBER", "js", "Let", "s", "close", "this", "PR", "but", "keep", "the", "issue", "open", "to", "make", "sure", "this", "work", "gets", "do", "by", "whomever", "can", "take", "the", "time", "to", "do", "it", "NUMBER", "Yeah", "that", "s", "a", "good", "idea", "NUMBER", "It", "would", "be", "nice", "to", "use", "the", "invariant", "module", "that", "be", "a", "dependency", "of", "the", "dispatcher", "for", "this", "NUMBER", "But", "I", "think", "we", "have", "not", "expose", "it", "in", "the", "npm", "module", "so", "maybe", "we", "should", "do", "that", "NUMBER", "zpao", "any", "thoughts", "on", "this", "Yes", "sounds", "great", "NUMBER", "Really", "great", "idea", "NUMBER", "Looking", "forward", "to", "the", "pull", "request", "Answered", "in", "the", "pull", "request", "but", "basically", "I", "m", "concerned", "that", "the", "dispatcher", "would", "need", "to", "know", "the", "structure", "of", "the", "payload", "NUMBER", "Hi", "Dmitri", "We", "call", "them", "controller", "views", "instead", "of", "ViewControllers", "because", "they", "be", "actual", "views", "and", "not", "exactly", "controllers", "in", "the", "sense", "of", "MVC", "NUMBER", "They", "do", "pull", "data", "from", "the", "stores", "and", "pass", "that", "data", "to", "their", "children", "however", "and", "this", "be", "somewhat", "controller", "like", "NUMBER", "Hence", "the", "name", "controller", "view", "a", "view", "that", "has", "controller", "like", "functionality", "NUMBER", "If", "you", "compare", "this", "with", "ViewControllers", "in", "iOS", "for", "example", "you", "ll", "see", "that", "most", "people", "use", "that", "term", "to", "mean", "actual", "controllers", "that", "manage", "views", "and", "do", "a", "whole", "lot", "more", "than", "what", "we", "be", "talking", "about", "here", "NUMBER", "The", "use", "of", "setState", "be", "a", "convention", "of", "React", "NUMBER", "You", "can", "certainly", "use", "forceUpdate", "instead", "but", "having", "the", "handle", "to", "this", "NUMBER", "ate", "can", "be", "convenient", "NUMBER", "We", "be", "not", "really", "_managing_", "state", "in", "these", "controller", "views", "NUMBER", "It", "s", "simply", "a", "convenient", "way", "to", "respond", "to", "the", "change", "event", "and", "to", "get", "the", "data", "to", "the", "render", "method", "allowing", "the", "render", "method", "to", "remain", "dedicated", "to", "rendering", "logic", "instead", "of", "putting", "data", "fetching", "in", "there", "too", "NUMBER", "As", "long", "as", "you", "re", "not", "actually", "trying", "to", "manage", "state", "in", "the", "controller", "view", "there", "be", "nothing", "wrong", "with", "use", "this", "NUMBER", "ate", "in", "this", "way", "NUMBER", "All", "the", "children", "below", "this", "controller", "view", "will", "simply", "take", "the", "data", "in", "as", "props", "and", "remain", "stateless", "NUMBER", "When", "an", "individual", "component", "needs", "to", "manage", "it", "s", "own", "state", "such", "as", "an", "input", "element", "as", "you", "have", "noted", "we", "do", "use", "this", "NUMBER", "ate", "to", "do", "this", "NUMBER", "This", "be", "the", "one", "place", "in", "a", "Flux", "React", "app", "where", "you", "do", "store", "state", "in", "a", "component", "that", "would", "otherwise", "be", "stateless", "NUMBER", "A", "significant", "difference", "here", "be", "that", "only", "this", "one", "component", "none", "of", "its", "children", "no", "other", "components", "need", "a", "reference", "to", "the", "component", "s", "state", "NUMBER", "Shared", "state", "should", "always", "be", "in", "the", "stores", "and", "pass", "through", "the", "component", "hierarchy", "as", "props", "NUMBER", "For", "more", "info", "on", "why", "input", "elements", "need", "to", "manage", "their", "own", "state", "please", "see", "LINK", "and", "dynamic", "uis", "NUMBER", "html", "what", "components", "should", "have", "state", "and", "LINK", "I", "hope", "that", "helps", "dmitrig", "NUMBER", "Very", "sorry", "to", "have", "close", "this", "on", "you", "NUMBER", "Please", "close", "when", "you", "feel", "you", "be", "understanding", "the", "Flux", "way", "of", "handle", "this", "NUMBER", "We", "want", "to", "get", "rid", "of", "as", "much", "state", "from", "our", "React", "components", "as", "possible", "and", "to", "move", "that", "state", "into", "the", "stores", "NUMBER", "So", "every", "time", "you", "find", "yourself", "keep", "state", "in", "your", "components", "ask", "yourself", "Can", "I", "move", "this", "state", "into", "the", "stores", "After", "thinking", "about", "it", "a", "bit", "you", "ll", "find", "that", "this", "be", "possible", "and", "it", "actually", "cleans", "up", "your", "code", "quite", "a", "bit", "NUMBER", "In", "your", "scenario", "the", "hover", "state", "would", "be", "keep", "in", "the", "store", "as", "well", "NUMBER", "This", "might", "be", "something", "like", "the", "ChartStore", "s", "private", "_hightlightedPieSliceID", "variable", "NUMBER", "The", "_only_", "exception", "to", "this", "rule", "be", "state", "that", "be", "NUMBER", "internal", "to", "the", "component", "and", "even", "this", "be", "often", "something", "that", "can", "be", "put", "in", "stores", "NUMBER", "As", "I", "ve", "said", "above", "text", "input", "components", "be", "an", "example", "of", "this", "kind", "of", "component", "NUMBER", "Controller", "views", "be", "slightly", "different", "however", "NUMBER", "The", "state", "they", "contain", "be", "often", "as", "you", "say", "a", "mirror", "of", "the", "stores", "state", "NUMBER", "It", "also", "can", "be", "tailored", "to", "their", "specific", "needs", "by", "provide", "more", "specific", "getter", "methods", "in", "the", "stores", "NUMBER", "So", "in", "your", "scenario", "I", "m", "assuming", "you", "have", "something", "like", "this", "TAG", "TAG", "TAG", "TAG", "TAG", "You", "could", "either", "get", "the", "entire", "state", "of", "the", "ChartStore", "including", "the", "_highlightedPieSliceID", "which", "can", "be", "null", "or", "you", "could", "more", "specifically", "invoke", "ChartStore", "NUMBER", "getHightlightedPieSliceID", "NUMBER", "Each", "PieChart", "would", "then", "receive", "the", "id", "as", "props", "and", "know", "what", "to", "do", "with", "it", "NUMBER", "Is", "that", "fair", "or", "be", "you", "thinking", "something", "more", "along", "the", "lines", "of", "the", "pie", "chart", "components", "be", "actually", "their", "own", "controller", "views", "That", "feels", "really", "ugly", "to", "me", "NUMBER", "Yes", "it", "sounds", "like", "you", "understand", "it", "correctly", "NUMBER", "No", "they", "should", "not", "be", "their", "own", "controller", "views", "NUMBER", "In", "this", "instance", "it", "seems", "somewhat", "pointless", "to", "store", "hover", "data", "in", "the", "store", "as", "it", "s", "not", "shared", "state", "it", "s", "only", "use", "in", "one", "instance", "of", "component", "the", "controller", "view", "It", "s", "not", "pointless", "NUMBER", "It", "maintains", "the", "proper", "data", "flow", "and", "as", "soon", "as", "you", "want", "to", "do", "something", "else", "with", "that", "hover", "state", "like", "display", "relate", "information", "in", "a", "table", "off", "to", "the", "side", "in", "a", "different", "column", "you", "be", "looking", "at", "a", "significant", "refactoring", "NUMBER", "If", "you", "stick", "with", "the", "Flux", "pattern", "you", "will", "have", "an", "easier", "time", "down", "the", "road", "NUMBER", "You", "will", "know", "where", "all", "the", "state", "be", "be", "maintained", "how", "it", "gets", "update", "etc", "NUMBER", "Six", "months", "from", "now", "you", "will", "be", "able", "to", "open", "this", "app", "up", "again", "and", "know", "where", "everything", "lives", "NUMBER", "Putting", "the", "state", "in", "React", "components", "makes", "them", "less", "reusable", "harder", "to", "reason", "about", "more", "tightly", "coupled", "to", "each", "other", "and", "their", "specific", "context", "NUMBER", "And", "it", "_is_", "in", "fact", "shared", "state", "each", "PieChart", "needs", "to", "know", "the", "currently", "hovered", "slice", "NUMBER", "Since", "we", "haven", "t", "continued", "this", "in", "a", "while", "I", "m", "assuming", "we", "re", "okay", "to", "close", "this", "one", "NUMBER", "Sweet", "Pretty", "old", "closing", "this", "out", "NUMBER", "Sounds", "like", "there", "might", "be", "a", "bug", "in", "your", "code", "didn", "t", "seem", "obvious", "to", "me", "right", "away", "either", "NUMBER", "I", "did", "accept", "the", "PR", "for", "the", "React", "tool", "NUMBER", "Thanks", "very", "much", "for", "that", "These", "other", "change", "seem", "to", "make", "the", "render", "method", "read", "a", "bit", "less", "linearly", "which", "I", "m", "not", "convinced", "be", "good", "for", "this", "example", "NUMBER", "Specifically", "what", "do", "we", "gain", "by", "switching", "to", "Webpack", "That", "be", "how", "do", "switching", "to", "Webpack", "clarify", "the", "examples", "or", "make", "them", "easier", "to", "get", "up", "and", "run", "If", "you", "can", "make", "the", "case", "that", "people", "will", "gain", "a", "better", "understanding", "of", "Flux", "and", "be", "up", "and", "run", "faster", "and", "easier", "then", "I", "think", "it", "makes", "sense", "to", "switch", "NUMBER", "If", "not", "then", "I", "think", "this", "seems", "like", "a", "situation", "where", "you", "could", "fork", "the", "repo", "and", "we", "could", "point", "interested", "Webpack", "enthusiasts", "to", "your", "fork", "NUMBER", "I", "d", "rather", "not", "have", "the", "Browserify", "vs", "NUMBER", "Webpack", "debate", "here", "NUMBER", "If", "you", "re", "inclined", "there", "be", "plenty", "of", "other", "places", "on", "the", "web", "to", "have", "that", "debate", "such", "as", "LINK", "I", "think", "a", "new", "Flux", "example", "might", "be", "worth", "developing", "perhaps", "that", "one", "could", "use", "Webpack", "just", "to", "show", "another", "way", "of", "doing", "it", "NUMBER", "The", "subject", "of", "a", "new", "example", "has", "come", "up", "a", "couple", "of", "times", "most", "recently", "in", "NUMBER", "so", "I", "think", "we", "could", "see", "a", "Webpack", "example", "soon", "NUMBER", "awesome", "No", "activity", "for", "over", "a", "year", "and", "doesn", "t", "merge", "cleanly", "anymore", "NUMBER", "Please", "re", "open", "and", "rebase", "if", "you", "d", "like", "to", "keep", "pursuing", "this", "PR", "NUMBER", "We", "enforce", "this", "to", "ensure", "that", "a", "single", "action", "has", "cause", "all", "of", "the", "relevant", "stores", "to", "update", "themselves", "before", "moving", "forward", "with", "the", "next", "round", "of", "update", "NUMBER", "Flux", "was", "originally", "created", "to", "deal", "with", "derived", "data", "dependencies", "between", "stores", "NUMBER", "So", "if", "Store", "A", "needs", "to", "get", "data", "from", "Store", "B", "and", "both", "stores", "respond", "to", "an", "particular", "action", "we", "need", "to", "make", "sure", "that", "both", "of", "these", "have", "update", "before", "they", "can", "get", "update", "again", "NUMBER", "Otherwise", "we", "be", "get", "into", "a", "race", "condition", "NUMBER", "Instead", "we", "enforce", "that", "the", "state", "of", "the", "all", "the", "stores", "remain", "in", "sync", "NUMBER", "The", "design", "of", "the", "application", "and", "the", "cognitive", "overhead", "becomes", "much", "simpler", "when", "you", "cannot", "invoke", "a", "new", "dispatch", "while", "another", "dispatch", "be", "still", "occurring", "NUMBER", "It", "also", "forces", "you", "to", "always", "work", "with", "the", "singular", "flow", "of", "actions", "dispatcher", "stores", "views", "NUMBER", "If", "you", "have", "data", "flowing", "through", "the", "stores", "and", "views", "in", "any", "other", "way", "then", "you", "be", "not", "conforming", "to", "that", "singular", "data", "flow", "and", "your", "application", "will", "get", "messy", "as", "it", "grows", "larger", "and", "more", "complex", "NUMBER", "An", "action", "queue", "would", "not", "be", "a", "bad", "solution", "if", "you", "have", "multiple", "async", "API", "calls", "come", "back", "at", "the", "same", "time", "NUMBER", "We", "be", "actually", "work", "on", "an", "action", "queue", "on", "the", "other", "end", "the", "store", "end", "after", "the", "dispatches", "have", "occur", "to", "maintain", "an", "action", "history", "for", "the", "purpose", "of", "optimistic", "update", "NUMBER", "However", "the", "same", "concept", "could", "get", "implement", "at", "the", "point", "of", "the", "dispatcher", "to", "manage", "the", "situation", "you", "be", "describing", "NUMBER", "The", "important", "thing", "would", "be", "to", "ensure", "however", "that", "two", "dispatches", "were", "not", "happening", "at", "the", "same", "time", "NUMBER", "The", "dispatcher", "do", "expose", "a", "isDispatching", "method", "that", "you", "could", "utilize", "in", "your", "action", "queue", "NUMBER", "sterpe", "quantum", "flux", "looks", "like", "it", "has", "a", "lot", "of", "great", "ideas", "in", "it", "NUMBER", "I", "ll", "take", "a", "deeper", "look", "but", "the", "docs", "be", "nicely", "write", "and", "very", "understandable", "NUMBER", "I", "agree", "that", "you", "might", "want", "to", "do", "this", "in", "a", "_real_", "application", "but", "the", "idea", "here", "be", "to", "reset", "the", "_example_", "app", "with", "every", "page", "refresh", "NUMBER", "So", "you", "be", "free", "to", "add", "message", "or", "whatever", "then", "refresh", "to", "start", "over", "with", "the", "example", "NUMBER", "The", "dispatcher", "do", "work", "in", "Chrome", "NUMBER", "But", "it", "do", "not", "work", "while", "you", "re", "use", "source", "maps", "correct", "I", "believe", "the", "issue", "be", "the", "use", "strict", "declaration", "that", "be", "get", "inserted", "by", "gulp", "react", "during", "the", "transformation", "from", "ES", "NUMBER", "with", "the", "harmony", "true", "option", "NUMBER", "LINK", "L", "NUMBER", "Fastclick", "was", "dealing", "with", "a", "similar", "issue", "LINK", "LINK", "This", "might", "be", "an", "issue", "for", "Chrome", "devtools", "or", "maybe", "for", "gulp", "react", "Not", "sure", "Flux", "be", "the", "correct", "place", "to", "correct", "it", "but", "I", "m", "totally", "open", "to", "suggestions", "on", "what", "band", "aid", "we", "should", "provide", "in", "the", "mean", "time", "NUMBER", "There", "have", "be", "problem", "on", "Windows", "yes", "NUMBER", "I", "have", "not", "yet", "looked", "into", "node", "on", "windows", "so", "I", "don", "t", "know", "if", "this", "be", "the", "source", "of", "your", "problem", "NUMBER", "Thanks", "Brian", "for", "clarifying", "this", "for", "Guy", "and", "other", "readers", "I", "believe", "you", "have", "it", "correct", "NUMBER", "I", "d", "like", "to", "add", "that", "the", "Sections", "in", "this", "example", "be", "at", "the", "second", "level", "of", "the", "hierarchy", "quite", "near", "the", "top", "NUMBER", "They", "receive", "no", "props", "as", "controller", "views", "they", "be", "the", "source", "of", "props", "for", "all", "their", "children", "NUMBER", "Please", "also", "note", "that", "there", "be", "no", "hard", "rule", "about", "the", "level", "of", "the", "hierarchy", "where", "controller", "views", "should", "live", "NUMBER", "I", "find", "that", "debugging", "be", "easier", "when", "you", "keep", "them", "at", "the", "top", "but", "there", "be", "benefits", "to", "having", "low", "level", "ones", "too", "this", "allows", "you", "to", "encapsulate", "code", "better", "not", "pass", "down", "a", "lot", "of", "extra", "data", "in", "the", "props", "NUMBER", "Like", "I", "said", "I", "much", "prefer", "keep", "them", "at", "the", "top", "and", "passing", "data", "down", "but", "other", "people", "here", "at", "Facebook", "feel", "otherwise", "NUMBER", "Different", "strokes", "NUMBER", "I", "m", "very", "curious", "as", "to", "why", "stores", "as", "singletons", "were", "problematic", "for", "you", "so", "I", "m", "looking", "forward", "to", "reading", "a", "blog", "post", "about", "that", "too", "NUMBER", "On", "Sat", "Aug", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Brian", "Di", "Palma", "notifications", "github", "NUMBER", "com", "write", "NUMBER", "Props", "be", "immutable", "and", "pass", "in", "from", "your", "parent", "state", "be", "mutable", "and", "local", "to", "the", "component", "NUMBER", "This", "aids", "in", "pinpointing", "bug", "NUMBER", "I", "think", "if", "you", "relied", "on", "your", "parent", "feeding", "all", "data", "from", "Stores", "into", "you", "as", "props", "you", "would", "be", "ask", "React", "to", "do", "too", "much", "unnecessary", "work", "NUMBER", "Anyway", "the", "only", "ways", "that", "parents", "could", "trigger", "a", "render", "of", "them", "self", "be", "either", "via", "setState", "or", "a", "force", "update", "NUMBER", "The", "Stores", "be", "the", "source", "of", "truth", "you", "can", "t", "ask", "your", "React", "components", "for", "that", "data", "you", "can", "only", "ask", "the", "Stores", "NUMBER", "NUMBER", "Will", "do", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "Bill", "Fisher", "NUMBER", "LINK", "Thanks", "Except", "for", "the", "the", "fact", "that", "stores", "don", "t", "update", "views", "NUMBER", "Views", "update", "themselves", "in", "response", "to", "a", "the", "change", "in", "the", "store", "NUMBER", "Maybe", "When", "a", "user", "interacts", "with", "a", "React", "view", "the", "view", "propagates", "an", "action", "through", "a", "central", "dispatcher", "NUMBER", "The", "dispatcher", "propagates", "this", "action", "to", "the", "various", "stores", "that", "hold", "the", "application", "s", "data", "and", "business", "logic", "which", "in", "turn", "cause", "an", "update", "of", "the", "views", "NUMBER", "I", "m", "trying", "to", "make", "sure", "this", "be", "a", "simple", "overview", "without", "oversimplifying", "to", "the", "point", "of", "misleading", "the", "reader", "NUMBER", "etripier", "a", "dispatch", "indirectly", "causes", "an", "update", "of", "the", "views", "but", "in", "reality", "the", "controller", "views", "at", "the", "top", "of", "the", "hierarchy", "of", "views", "be", "update", "themselves", "in", "response", "to", "a", "change", "event", "publish", "by", "the", "stores", "NUMBER", "After", "these", "controller", "views", "receive", "a", "change", "event", "they", "call", "the", "stores", "getters", "to", "get", "the", "data", "NUMBER", "So", "while", "the", "stores", "inform", "the", "controller", "views", "they", "do", "not", "truly", "update", "them", "and", "this", "be", "an", "important", "distinction", "NUMBER", "Similarly", "the", "stores", "be", "not", "truly", "update", "by", "any", "external", "entity", "they", "update", "themselves", "NUMBER", "Both", "the", "controller", "views", "and", "the", "stores", "be", "self", "controlling", "entities", "without", "setter", "methods", "NUMBER", "Want", "to", "attempt", "this", "one", "more", "time", "Or", "I", "can", "close", "this", "and", "attempt", "to", "clarify", "it", "myself", "NUMBER", "etripier", "We", "re", "very", "close", "I", "think", "NUMBER", "Sorry", "for", "the", "churn", "but", "this", "be", "a", "very", "important", "sentence", "in", "the", "docs", "so", "I", "think", "it", "s", "worth", "the", "iteration", "NUMBER", "I", "like", "what", "you", "ve", "do", "with", "the", "first", "part", "NUMBER", "The", "very", "last", "thing", "about", "the", "store", "view", "communication", "be", "the", "stumbling", "block", "I", "think", "NUMBER", "I", "don", "t", "think", "we", "need", "to", "get", "into", "the", "details", "here", "so", "much", "NUMBER", "I", "think", "the", "important", "thing", "be", "to", "say", "be", "that", "data", "flows", "from", "store", "to", "view", "without", "saying", "anything", "misleading", "NUMBER", "Maybe", "When", "a", "user", "interacts", "with", "a", "React", "view", "the", "view", "propagates", "an", "action", "through", "a", "central", "dispatcher", "NUMBER", "The", "dispatcher", "propagates", "this", "action", "to", "the", "various", "stores", "that", "hold", "the", "application", "s", "data", "and", "business", "logic", "NUMBER", "The", "stores", "then", "cause", "the", "views", "to", "update", "themselves", "based", "on", "their", "new", "data", "NUMBER", "Not", "sure", "if", "this", "be", "get", "too", "long", "winded", "NUMBER", "I", "d", "prefer", "to", "simplify", "if", "possible", "NUMBER", "plaxdan", "This", "be", "intro", "stuff", "NUMBER", "Needs", "to", "be", "light", "at", "a", "very", "high", "level", "and", "not", "confusing", "at", "all", "NUMBER", "It", "s", "not", "the", "place", "to", "detail", "the", "mechanics", "NUMBER", "There", "hasn", "t", "be", "activity", "here", "for", "over", "a", "year", "NUMBER", "I", "m", "going", "to", "close", "this", "out", "please", "re", "open", "if", "you", "want", "to", "keep", "pursuing", "this", "PR", "NUMBER", "I", "would", "highly", "recommend", "the", "new", "dispatcher", "NUMBER", "It", "s", "the", "one", "we", "use", "at", "Facebook", "NUMBER", "The", "other", "one", "was", "just", "a", "temporary", "stand", "in", "while", "we", "were", "get", "approval", "to", "release", "the", "real", "code", "NUMBER", "The", "new", "dispatcher", "has", "be", "battle", "test", "in", "many", "different", "applications", "at", "Facebook", "and", "we", "trust", "it", "NUMBER", "The", "other", "one", "was", "a", "totally", "naive", "implementation", "I", "created", "just", "to", "get", "the", "ball", "rolling", "after", "Jing", "Chen", "had", "presented", "Flux", "at", "the", "F", "NUMBER", "conference", "NUMBER", "Some", "people", "have", "enjoyed", "the", "async", "nature", "of", "the", "previous", "one", "but", "I", "personally", "would", "not", "use", "it", "in", "production", "NUMBER", "All", "that", "said", "yes", "I", "need", "to", "update", "the", "tutorial", "and", "I", "will", "do", "that", "NUMBER", "Pull", "request", "sent", "to", "ReactJS", "LINK", "The", "src", "directory", "contains", "the", "ES", "NUMBER", "version", "of", "Dispatcher", "NUMBER", "We", "have", "release", "this", "version", "in", "this", "way", "to", "keep", "it", "in", "sync", "with", "the", "Dispatcher", "we", "use", "at", "Facebook", "NUMBER", "Once", "you", "run", "the", "build", "with", "npm", "install", "you", "will", "find", "the", "lib", "directory", "has", "be", "created", "with", "the", "de", "sugared", "ES", "NUMBER", "Dispatcher", "in", "it", "NUMBER", "Other", "modules", "in", "your", "application", "will", "want", "to", "require", "this", "de", "sugared", "version", "so", "this", "be", "where", "index", "NUMBER", "js", "main", "in", "package", "NUMBER", "json", "should", "get", "the", "Dispatcher", "NUMBER", "Please", "see", "LINK", "build", "and", "installing", "flux", "Hi", "Paul", "thanks", "for", "the", "suggestion", "NUMBER", "When", "this", "gets", "minify", "however", "these", "function", "names", "will", "no", "longer", "work", "as", "you", "expect", "them", "to", "I", "believe", "NUMBER", "Even", "if", "they", "did", "work", "after", "minification", "I", "m", "not", "a", "huge", "fan", "of", "naming", "function", "with", "constants", "or", "the", "object", "methodName", "pattern", "except", "in", "cases", "of", "true", "metaprogramming", "to", "reduce", "the", "file", "size", "which", "this", "be", "not", "NUMBER", "Also", "if", "you", "re", "interested", "in", "micro", "optimization", "you", "might", "want", "to", "check", "this", "out", "which", "indicates", "that", "the", "switch", "be", "faster", "at", "least", "in", "Chrome", "LINK", "of", "function", "vs", "switch", "I", "m", "sure", "it", "depends", "on", "what", "you", "use", "for", "minification", "but", "for", "example", "Closure", "Compiler", "LINK", "under", "the", "section", "entitled", "Restrictions", "for", "ADVANCED_OPTIMIZATIONS", "NUMBER", "In", "that", "scenario", "you", "would", "need", "to", "use", "quoted", "strings", "for", "the", "function", "names", "NUMBER", "But", "yes", "if", "you", "feel", "this", "be", "better", "or", "more", "readable", "by", "all", "means", "please", "do", "this", "in", "your", "own", "apps", "NUMBER", "There", "be", "nothing", "about", "this", "that", "breaks", "the", "rules", "of", "what", "we", "consider", "to", "be", "the", "core", "ideas", "behind", "Flux", "NUMBER", "I", "m", "not", "in", "favor", "of", "use", "ES", "NUMBER", "in", "the", "examples", "NUMBER", "While", "I", "love", "ES", "NUMBER", "and", "we", "use", "it", "extensively", "at", "Facebook", "not", "everyone", "be", "familiar", "with", "it", "yet", "NUMBER", "The", "examples", "be", "created", "to", "instruct", "rather", "than", "to", "be", "optimal", "or", "clever", "NUMBER", "So", "I", "d", "rather", "keep", "them", "more", "understandable", "to", "more", "people", "NUMBER", "Unless", "we", "think", "our", "mission", "in", "this", "repo", "be", "to", "evangelize", "ES", "NUMBER", "which", "I", "d", "rather", "leave", "to", "others", "let", "s", "just", "keep", "it", "in", "the", "old", "time", "style", "for", "a", "while", "NUMBER", "Please", "see", "LINK", "topic", "reactjs", "kaQBbTqEj_s", "Not", "sure", "I", "can", "implement", "this", "without", "increasing", "the", "complexity", "to", "the", "point", "where", "it", "may", "cause", "more", "harm", "than", "good", "NUMBER", "But", "I", "will", "look", "into", "fleshing", "this", "out", "more", "NUMBER", "That", "be", "I", "want", "to", "keep", "the", "example", "simple", "and", "easy", "to", "understand", "NUMBER", "Looks", "like", "original", "issue", "be", "resolve", "so", "closing", "this", "out", "NUMBER", "If", "there", "be", "a", "specific", "aspect", "of", "the", "example", "you", "feel", "could", "be", "improved", "such", "as", "add", "a", "comment", "a", "PR", "would", "be", "great", "NUMBER", "We", "can", "t", "symlink", "because", "the", "dispatcher", "in", "src", "be", "write", "in", "ES", "NUMBER", "We", "need", "to", "transform", "it", "and", "take", "the", "de", "sugared", "file", "into", "the", "examples", "NUMBER", "zpao", "be", "there", "a", "better", "solution", "here", "We", "have", "no", "plan", "for", "this", "at", "the", "moment", "NUMBER", "Great", "idea", "though", "and", "I", "d", "love", "to", "see", "something", "like", "this", "as", "a", "github", "project", "come", "from", "the", "community", "NUMBER", "thanks", "Well", "I", "think", "all", "we", "need", "on", "on", "lastMessage", "be", "the", "date", "and", "whether", "or", "not", "it", "has", "be", "read", "NUMBER", "CREATE_MESSAGE", "could", "contain", "the", "date", "and", "anything", "created", "be", "obviously", "already", "read", "NUMBER", "This", "could", "be", "one", "way", "to", "go", "let", "the", "ThreadStore", "respond", "to", "CREATE_MESSAGE", "by", "creating", "a", "lastMessage", "object", "and", "mark", "it", "as", "read", "NUMBER", "CREATE_MESSAGE", "should", "be", "modify", "to", "contain", "the", "date", "NUMBER", "Not", "sure", "we", "need", "any", "other", "data", "in", "the", "lastMessage", "object", "NUMBER", "The", "idea", "for", "a", "shared", "object", "for", "dispatcher", "tokens", "seem", "interesting", "but", "I", "don", "t", "think", "it", "will", "work", "you", "would", "still", "need", "to", "get", "the", "last", "message", "from", "the", "MessageStore", "which", "would", "necessitate", "a", "require", "NUMBER", "tobice", "sorry", "for", "the", "slow", "reply", "NUMBER", "I", "think", "what", "we", "typically", "do", "in", "this", "situation", "be", "allow", "both", "stores", "to", "reference", "each", "other", "in", "a", "circular", "manner", "generally", "via", "an", "inline", "require", "NUMBER", "Not", "inline", "const", "gameStatus", "StatusStore", "NUMBER", "get", "Inline", "const", "gameStatus", "require", "StatusStore", "NUMBER", "get", "Or", "move", "it", "to", "a", "function", "function", "getStatusStore", "return", "require", "StatusStore", "or", "however", "else", "you", "get", "the", "reference", "const", "gameStatus", "getStatusStore", "NUMBER", "get", "Going", "to", "close", "this", "out", "as", "there", "seems", "to", "have", "be", "sufficient", "discussion", "and", "the", "chat", "example", "was", "also", "remove", "NUMBER", "If", "there", "be", "still", "specific", "question", "or", "action", "items", "feel", "free", "to", "reopen", "or", "file", "a", "different", "issue", "NUMBER", "Removed", "statics", "NUMBER", "LINK", "thanks", "Looks", "good", "to", "me", "NUMBER", "Barring", "any", "objection", "from", "vjeux", "or", "zpao", "I", "ll", "accept", "this", "within", "the", "next", "day", "or", "so", "NUMBER", "thanks", "fattenap", "I", "think", "something", "in", "the", "JSX", "transformation", "must", "have", "change", "NUMBER", "I", "ve", "update", "all", "the", "React", "components", "to", "reflect", "what", "you", "find", "NUMBER", "nobodyguy", "not", "sure", "why", "this", "be", "happening", "for", "you", "NUMBER", "I", "ll", "need", "to", "investigate", "that", "further", "NUMBER", "Removed", "statics", "NUMBER", "LINK", "Yes", "bogdan", "dumitru", "be", "correct", "that", "the", "synchronous", "nature", "be", "intentional", "and", "be", "required", "if", "we", "be", "to", "be", "able", "to", "cause", "the", "stores", "to", "update", "themselves", "only", "after", "the", "stores", "they", "depend", "on", "have", "be", "update", "NUMBER", "When", "communicating", "with", "a", "server", "one", "should", "split", "the", "data", "flow", "at", "the", "point", "of", "creating", "an", "action", "NUMBER", "An", "example", "of", "this", "can", "be", "seen", "here", "LINK", "chat", "js", "actions", "ChatMessageActionCreators", "NUMBER", "js", "L", "NUMBER", "NUMBER", "in", "this", "example", "we", "optimistically", "update", "the", "store", "with", "the", "client", "side", "data", "NUMBER", "Then", "in", "the", "the", "XHR", "success", "or", "failure", "callback", "you", "would", "create", "another", "action", "NUMBER", "sterpe", "I", "could", "imagine", "this", "scenario", "if", "your", "store", "logic", "was", "computationally", "expensive", "but", "it", "s", "uncommon", "that", "the", "store", "logic", "be", "the", "bottleneck", "in", "performance", "NUMBER", "I", "ve", "seen", "pretty", "crazy", "things", "like", "dispatches", "on", "a", "requestAnimationFrame", "cycle", "and", "Flux", "React", "handle", "them", "just", "fine", "NUMBER", "One", "place", "where", "I", "did", "see", "some", "lag", "was", "in", "an", "initial", "data", "load", "when", "the", "load", "was", "quite", "large", "NUMBER", "I", "m", "not", "sure", "how", "we", "eventually", "improved", "that", "but", "I", "ll", "try", "to", "find", "out", "and", "get", "back", "to", "you", "NUMBER", "Yes", "this", "was", "something", "I", "was", "thinking", "about", "for", "a", "code", "example", "and", "blog", "post", "NUMBER", "Hoping", "to", "get", "to", "this", "idea", "and", "also", "a", "blog", "post", "about", "immutable", "data", "in", "the", "come", "week", "or", "two", "NUMBER", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "Justin", "Belcher", "notifications", "github", "NUMBER", "com", "write", "image", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "Testing", "Flux", "Applications", "LINK", "flux", "applications", "NUMBER", "html", "Also", "example", "code", "LINK", "todomvc", "js", "stores", "test", "TodoStore", "test", "NUMBER", "js", "LINK", "chat", "js", "stores", "test", "UnreadThreadStore", "test", "NUMBER", "js", "I", "agree", "we", "should", "make", "this", "easy", "for", "Windows", "NUMBER", "I", "ll", "take", "a", "look", "at", "grunt", "based", "and", "gulp", "based", "solutions", "NUMBER", "Please", "consider", "it", "to", "be", "on", "the", "road", "map", "NUMBER", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "Brian", "Di", "Palma", "notifications", "github", "NUMBER", "com", "write", "I", "didn", "t", "know", "about", "CMake", "NUMBER", "I", "wouldn", "t", "be", "surprised", "if", "that", "s", "the", "case", "for", "many", "people", "looking", "at", "this", "repo", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "Thanks", "for", "the", "fix", "do", "you", "mind", "signing", "the", "CLA", "so", "we", "can", "pull", "this", "in", "Thanks", "LINK", "Woops", "NUMBER", "Sorry", "since", "the", "repo", "be", "new", "our", "tooling", "be", "not", "properly", "configured", "yet", "NUMBER", "You", "indeed", "already", "have", "sign", "the", "CLA", "Hmm", "this", "be", "strange", "I", "probably", "forgot", "to", "add", "them", "on", "gitignore", "Thanks", "News", "npm", "install", "flux", "now", "installs", "this", "project", "NUMBER", "Yay", "Check", "it", "out", "LINK", "Currently", "the", "flux", "npm", "module", "be", "essentially", "that", "the", "dispatcher", "along", "with", "its", "one", "dependency", "the", "invariant", "module", "NUMBER", "If", "we", "want", "to", "go", "beyond", "that", "in", "the", "future", "with", "the", "flux", "module", "then", "we", "ll", "need", "to", "come", "up", "with", "a", "solution", "to", "expose", "the", "dispatcher", "separately", "NUMBER", "cc", "fisherwebdev", "Thanks", "Will", "do", "that", "when", "i", "get", "back", "to", "a", "computer", "tomorrow", "NUMBER", "Feel", "free", "to", "race", "me", "to", "it", "and", "see", "how", "easy", "it", "be", "to", "push", "the", "website", "compared", "to", "the", "jekyll", "version", "Christopher", "vjeux", "Chedeau", "Facebook", "Engineer", "LINK", "On", "Jul", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Ben", "Alpert", "notifications", "github", "NUMBER", "com", "write", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER"], "text_count": [0, 8686, 2220, 1081, 269, 274, 674, 2, 76, 1137, 1194, 2234, 1297, 871, 915, 267, 0, 0, 0, 0, 2449, 747, 436, 279, 425, 418, 0, 0, 0, 0, 4128, 2819, 1353, 41, 704, 237, 0, 0, 0, 0, 5584, 26, 1787, 1501, 1587, 0, 0, 0, 0, 0, 1520, 733, 745, 481, 704, 283, 623, 0, 0, 0, 3659, 249, 2918, 154, 0, 0, 0, 0, 0, 0, 3422, 402, 2462, 1033, 476, 0, 0, 0, 0, 0, 5138, 2377, 392, 2199, 273, 141, 0, 0, 0, 0, 241, 1772, 159, 0, 0, 0, 0, 0, 0, 0, 4544, 1136, 2516, 942, 0, 0, 0, 0, 0, 0, 8108, 16845, 255, 879, 142, 382, 0, 0, 0, 0, 20558, 212, 15540, 246, 3983, 4392]}, {"repo": "flux", "type": "nonelite", "title": "", "number of text": 987, "text": "  This seems like the best practice to support a beta version and the official. We can optionally remove this later when the full version is released.  Fixes #419   Currently this doesn't work with React 16 beta. What is the timeline looking like for supporting React 16? It might be as simple as changing your peerDependencies:\r\n\r\n```\"peerDependencies\": {\r\n    \"react\": \"^15.0.2\"\r\n  }\r\n```\r\n\r\nThat could change to `^15.0.2 || ^16.0.0` or `>=15.0.2`\r\n\r\nI don't know if this will have knock on effects though. Created a pull request for this. #420  Yes, exactly. Any idea when the next release of Flux might go out?  https://facebook.github.io/flux/docs/flux-utils.html\r\n\r\n```\r\nThere are four main classes exposed in Flux Utils:\r\n```\r\nOn github it says `three` but on production page it still says `four` @kyldvs thanks for the info, I agree it's low priority. glad it is being tracked now.  With:\r\n```\r\n    \"flow\": \"^0.2.3\",\r\n    \"flux\": \"^3.1.2\"\r\n```\r\nHow to reproduce:\r\n\r\n```bash\r\ncreate-react-app fluxflow\r\ncd fluxflow\r\nyarn add flow flux flow-types flux-bin\r\nflow init\r\nflow\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nnode_modules/flux/lib/FluxContainer.js.flow:15\r\n 15: import type FluxStore from 'FluxStore';\r\n                                ^^^^^^^^^^^ FluxStore. Required module not found\r\n\r\nnode_modules/flux/lib/FluxContainer.js.flow:17\r\n 17: const FluxContainerSubscriptions = require('FluxContainerSubscriptions');\r\n                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ FluxContainerSubscriptions. Required module not found\r\n\r\nnode_modules/flux/lib/FluxContainer.js.flow:21\r\n 21: const shallowEqual = require('shallowEqual');\r\n                                  ^^^^^^^^^^^^^^ shallowEqual. Required module not found\r\n\r\nnode_modules/flux/lib/FluxContainerSubscriptions.js.flow:14\r\n 14: import type FluxStore from 'FluxStore';\r\n                                ^^^^^^^^^^^ FluxStore. Required module not found\r\n\r\nnode_modules/flux/lib/FluxContainerSubscriptions.js.flow:16\r\n 16: const FluxStoreGroup = require('FluxStoreGroup');\r\n                                    ^^^^^^^^^^^^^^^^ FluxStoreGroup. Required module not found\r\n\r\nnode_modules/flux/lib/FluxContainerSubscriptions.js.flow:35\r\n 35:     if (__DEV__) {\r\n             ^^^^^^^ identifier `__DEV__`. Could not resolve name\r\n\r\nnode_modules/flux/lib/FluxMixinLegacy.js.flow:14\r\n 14: import type FluxStore from 'FluxStore';\r\n                                ^^^^^^^^^^^ FluxStore. Required module not found\r\n\r\nnode_modules/flux/lib/FluxMixinLegacy.js.flow:16\r\n 16: var FluxStoreGroup = require('FluxStoreGroup');\r\n                                  ^^^^^^^^^^^^^^^^ FluxStoreGroup. Required module not found\r\n\r\nnode_modules/flux/lib/FluxReduceStore.js.flow:14\r\n 14: import type Dispatcher from 'Dispatcher';\r\n                                 ^^^^^^^^^^^^ Dispatcher. Required module not found\r\n\r\nnode_modules/flux/lib/FluxReduceStore.js.flow:16\r\n 16: const FluxStore = require('FluxStore');\r\n                               ^^^^^^^^^^^ FluxStore. Required module not found\r\n\r\nnode_modules/flux/lib/FluxReduceStore.js.flow:18\r\n 18: const abstractMethod = require('abstractMethod');\r\n                                    ^^^^^^^^^^^^^^^^ abstractMethod. Required module not found\r\n\r\nnode_modules/flux/lib/FluxStore.js.flow:14\r\n 14: import type Dispatcher from 'Dispatcher';\r\n                                 ^^^^^^^^^^^^ Dispatcher. Required module not found\r\n\r\nnode_modules/flux/lib/FluxStoreGroup.js.flow:15\r\n 15: import type Dispatcher from 'Dispatcher';\r\n                                 ^^^^^^^^^^^^ Dispatcher. Required module not found\r\n\r\nnode_modules/flux/lib/FluxStoreGroup.js.flow:16\r\n 16: import type FluxStore from 'FluxStore';\r\n                                ^^^^^^^^^^^ FluxStore. Required module not found\r\n\r\nnode_modules/flux/lib/FluxStoreGroup.js.flow:54\r\n 54:   if (__DEV__) {\r\n           ^^^^^^^ identifier `__DEV__`. Could not resolve name\r\n\r\n```\r\n\r\n It should work without any additional configuration, that's the point.\r\nMoreover, that example apparently suggests to ignore everything in node_modules, which I believe is not recommended anymore. Looks more like a hack than a proper implementation.  Whilst trying to follow along with the documentation the location of the import statement in one of the suggested bits of code was incorrect. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla. **If you are contributing on behalf of someone else (eg your employer)**, the individual CLA may not be sufficient and your employer may need the corporate CLA signed.\n\nIf you have received this in error or have any questions, please contact us at cla@fb.com. Thanks! Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks! Cheers, that was a fast review \ud83d\udc4d   Hello, I'm new to flux and I have followed to step: 3. Setting up Flux\r\n\r\nBut after fill all sample codes, I ran into an error:\r\n\r\n```\r\nERROR in ./~/flux/index.js\r\nModule not found: Error: Cannot resolve 'file' or 'directory' ./lib/Dispatcher in /home/tdquang/Workshop/flux/examples/my-todomvc/node_modules/flux\r\n @ ./~/flux/index.js 10:28-55\r\n```\r\n\r\nWhat did I do wrong???\r\n\r\nMany thanks!!!\r\n I got the same error on running `npm run build`  - `props.router` is not passed to` StatelessFuncApp`\r\n```\r\nexport default withRouter(Container.createFunctional(\r\n  StatelessFuncApp,\r\n  () => [Store],\r\n  () => ({conditions: Store.getState()}),\r\n))\r\n```\r\n\r\n- Become an error\r\n```\r\nexport default Container.createFunctional(\r\n  withRouter(StatelessFuncApp),\r\n  () => [Store],\r\n  () => ({conditions: Store.getState()}),\r\n)\r\n```\r\n\r\n```\r\nWarning: Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory\r\n\r\nUncaught TypeError: Cannot read property '__reactAutoBindPairs' of undefined\r\n```\r\n\r\nWhy does `Container.createFunctional` not take components from class as arguments? I reread the source code and solved it. It worked out successfully below.\r\n```\r\nexport default withRouter(Container.createFunctional(\r\n  StatelessFuncApp,\r\n  () => [Store],\r\n  (prevState, props) => ({...props, conditions: Store.getState()}),\r\n  {withProps: true}\r\n))\r\n```\r\n\r\n> Why does Container.createFunctional not take components from class as arguments?\r\n\r\nJust mentioned above. I saw the code to try jsx, but can not I raise the babel version from 5?  A `FluxContainer` recomputes the stores list (the one created by\r\n`getStores`) after every change in `props` and `context`. It is needed\r\nbecause a container can use `props` to refine how the `state` is\r\ncomputed. The `FluxContainerSubscriptions` manages when a container\r\nshould be recomputed. It is done listening for changes in dependent\r\nstores. In order to do that, `FluxContainerSubscriptions` creates a\r\nstore group that is a fake store that wait for all dependent stores.\r\nIf the stores change during the dispatching cycle, then it call the\r\nlistener which one recompute the state of the container.\r\n\r\nThis PR changes `FluxContainerSubscriptions` to only create new\r\nlistener and a new store group when the stores list changes. Any new tests needed?  Please see Issue https://github.com/facebook/flux/issues/410  Please refer to the example in the comments at [https://github.com/facebook/flux/blob/master/src/Dispatcher.js](https://github.com/facebook/flux/blob/master/src/Dispatcher.js#L83)\r\n\r\nHere to get the dispatchToken from the Store, Store.dispatchToken is used. Whereas as per the Store API documentation, the method to get the dispatchToken is [getDispatchToken](https://facebook.github.io/flux/docs/flux-utils.html#store)\r\n\r\nRaising a PR to fix this. \r\n  I call an Container inside an Container , but confuse that how to passing props from Container A to Container B , I had read about \r\n\r\n> containers cannot access props By default containers are not able to access any props. This is both for performance reasons, and to ensure that containers are re-usable and props do not have to be threaded throughout a component tree. There are some valid situations in which you need to determine your state based on both props and a store's state. In those situations pass options {withProps: true} as the second argument to create(). This will expose the components props as the second argument to calculateState().\r\n\r\nAnd try to research but cannot find any solution . \r\n\r\n```\r\nclass ActivityLayout extends React.Component {\r\nrender() {\r\n       \r\n            var popup = this.state.isShowPopup ?   <PopupContainer tooglePopup={this.tooglePopup}  />:<div></div>;\r\n            var acFormStyle = this.state.isShowPopup ? \"none\":\"block\";\r\n            return \r\n                    <div> {popup}</div>;\r\n        \r\n\r\n    }\r\n}\r\nexport default ActivityListView;\r\n```\r\nAnd here is my PopupContainer : \r\n\r\n```\r\nfunction getStores(){\r\n    return [PhotoStore];\r\n}\r\nfunction calculateState(prevState,props) {\r\n        console.log(props.tooglePopup);\r\n        return {\r\n           //tooglePopup: PhotoStore.get(props.tooglePopup),\r\n           tooglePopup: props.tooglePopup(),\r\n        };\r\n    }\r\nfunction getState(){\r\n    return {\r\n        photos:PhotoStore.getState(),\r\n    };\r\n}\r\n\r\nexport default Container.createFunctional(PopupView, getStores, getState ,calculateState , { withProps: true } );\r\n\r\n```\r\n\r\n   I made the changes you requested.   Set up the project and go through the guided tutorial steps for Flux - all makes sense so far!  To get rid of warnings when working on the `my-todomvc` tutorial\r\n\r\n```\r\nnpm WARN flux-shell@1.0.0 No license field.\r\n```\r\n\r\nUsed the license from the root.  Changes instances of 2014-{specific year} to 2014-present for consistency across the docs/codebase.   I following the [example](https://github.com/facebook/flux/tree/master/examples/flux-todomvc) after finishing the step of _3. Setting up Flux_ . My local file doesn't show \"Hello from Flux!\"\r\n\r\nHere is the error in console:\r\n`Uncaught Error: Subclasses of FluxReduceStore must override getInitialState() with their own implementation.`\r\n\r\nAnyone meets this problem?  I'm not sure if the intentions were for the user to have the option of creating their own Counter file, but currently  it is unclear where the `Counter` and `Todo` files are being imported. I edited lines 241 and 245 to clarify so the user knows to import these two files. I welcome feedback .\r\n  The Readme for the example todomvc misses the import of critical files. That is following the directions exactly does not produce a working todomvc. \r\n Thanks for all the work it took to make this example and once running it was very helpful walk-through. \r\nThere are a few spots that need more explicit clarification. \r\nI'll just go through them:\r\n> cp -R examples/flux-shell examples/my-todomvc\r\n> cd examples/my-todomvc\r\n> npm install\r\n> npm run watch\r\n> Open examples/my-todomvc/index.html in your browser.\r\n> \r\n>  You should see a blank page that says \"Hello World!\"\r\n> 2. Set up TodoMVC assets\r\n> \r\n> Copy assets from examples/todomvc-common\r\n> \r\n> cp -R ../todomvc-common todomvc-common\r\n> \r\n\r\nIt isn't clear given that the original open terminal in examples/my-todomvc is now running npm run watch,  where you are copying files to. The reader (hopefully) reasonably guesses my-todomvc. \r\n\r\n> Now we can use this structure, along with a simple Counter to implement the ADD_TODO action. Update data/TodoStore.js.\r\n> \r\n> class TodoStore extends ReduceStore {\r\n\r\nShould include an import statement for Counter and Todo and just a general point here... at some points in this readme... the author tells the reader to update a file and lists the entire contents of the file to replace, but here and other spots the reader should only update a specific function (reduce). Coincidentally...  the definition of update is mutable... leading to confusion... or is that ironic or both? I would just stick to listing the entire contents of the file. \r\n\r\n\r\n  This commit resolves two issues with `examples/flux-todomvc`\r\n\r\n1. On Step 3: after making the required code changes I get this error\r\n```\r\nERROR in ./src/root.js\r\nModule not found: Error: Cannot resolve 'file' or 'directory' ./containers/AppContainer in /projects/mkolenda/flux/examples/my-todomvc/src\r\n @ ./src/root.js 3:20-56\r\n```\r\n\r\n\r\n2. Also on Step 3: after resolving the issue in #1 I get `babel-runtime` is not found.\r\n```ERROR in ./data/TodoStore.js\r\nModule not found: Error: Cannot resolve module 'babel-runtime/core-js/object/get-prototype-of' in /projects/mkolenda/flux/examples/my-todomvc/data\r\n @ ./data/TodoStore.js 7:22-78\r\n\r\nERROR in ./data/TodoStore.js\r\nModule not found: Error: Cannot resolve module 'babel-runtime/helpers/classCallCheck' in /projects/mkolenda/flux/examples/my-todomvc/data\r\n @ ./data/TodoStore.js 11:23-70\r\n\r\nERROR in ./data/TodoStore.js\r\nModule not found: Error: Cannot resolve module 'babel-runtime/helpers/createClass' in /projects/mkolenda/flux/examples/my-todomvc/data\r\n @ ./data/TodoStore.js 15:20-64\r\n\r\nERROR in ./data/TodoStore.js\r\nModule not found: Error: Cannot resolve module 'babel-runtime/helpers/possibleConstructorReturn' in /projects/mkolenda/flux/examples/my-todomvc/data\r\n @ ./data/TodoStore.js 19:34-92\r\n\r\nERROR in ./data/TodoStore.js\r\nModule not found: Error: Cannot resolve module 'babel-runtime/helpers/inherits' in /projects/mkolenda/flux/examples/my-todomvc/data\r\n @ ./data/TodoStore.js 23:17-58\r\n```\r\n\r\n3. dist/Flux.js now properly reflects the version specified in package.json (3.1.2) Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!  npm server is not running for this project .I have used following commands:\r\nC:\\Users\\admin\\Desktop\\flux-master>npm start\r\n\r\n> flux@3.1.2 start C:\\Users\\admin\\Desktop\\flux-master\r\n> node index.js \r\n\r\nbut server is not starting.\r\nthanks I have not found this  module\r\nError: Cannot find module 'react-page-middleware'\r\n    at Function.Module._resolveFilename (module.js:469:15)\r\n    at Function.Module._load (module.js:417:25)\r\n    at Module.require (module.js:497:17)\r\n    at require (internal/module.js:20:19)\r\n    at Object.<anonymous> (C:\\Users\\admin\\Desktop\\flux-master\\website\\server\\ser\r\nver.js:11:23)\r\n    at Module._compile (module.js:570:32)\r\n    at Object.Module._extensions..js (module.js:579:10)\r\n    at Module.load (module.js:487:32)\r\n    at tryModuleLoad (module.js:446:12)\r\n    at Function.Module._load (module.js:438:3)\r\n\r\n I want to run website using following link\n\nhttps://github.com/facebook/flux/blob/master/website/README.md\n\nOn Jan 27, 2017 8:49 PM, \"Kyle Davis\" <notifications@github.com> wrote:\n\n> Like I said there isn't a start command, running npm start shouldn't do\n> anything. Whether it throws an error or not doesn't matter because there is\n> no behavior defined that it should be trying to start.\n>\n> If there is something you're trying to accomplish, first read through the\n> readme and examples: https://github.com/facebook/\n> flux/blob/master/README.md\n>\n> Then if you are still having a problem open up an issue with clear details\n> about what you are trying to do, what you expect to happen, and what is\n> actually happening.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/facebook/flux/issues/394#issuecomment-275689425>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AMAmE9QD6-siThAweHEATFP7OCRdUo4Hks5rWgrogaJpZM4LvsEG>\n> .\n>\n       I have a project with react, and I am using this gem (\nhttps://github.com/reactjs/react-rails), I like to know if exists the gem\nfor flux. Thanks\n\n2017-01-20 17:32 GMT-02:00 Kyle Davis <notifications@github.com>:\n\n> I'm not sure what this means. Try reading through the tutorials and if\n> that doesn't help feel free to post a clear question with more context and\n> information.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/facebook/flux/issues/391#issuecomment-274159203>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AMlGKiAuNjowgifv440Sto7rNF3O3xGmks5rUQvdgaJpZM4Lpo_g>\n> .\n>\n  https://github.com/facebook/flux/blob/master/docs/Flux-Utils.md has a capital T show up often in the section on ReduceStore but I see no explanation of what it is supposed to mean. Is this copy-pasta of markup from a previous version of the docs? Or is it supposed to mean something? Wow.  OK, it hadn't occurred to me that \"T\" was a proper name, and that it was supposed to be conveying meaningful content on its own. \r\n\r\nI mean, the usual thing is to link to an explanatory text or document when a novel term is first used; that seems like it might apply here, if there's a useful thing you can link to. Personally, I would advocate for a longer and more descriptive name, especially since \"T\" is incredibly unfriendly to web searches, and the convention **method(params): returnValue** is obscure enough that it isn't even obvious that's what you're doing. You could also spell out what it means, and what that means, the first time you use it: \r\n\r\n`**getState(): T** Getter method that returns the entire state of this store (a TState object, as defined [TState|here]. This is a thing that is different from the store itself and is useful if you know what to do with it because blah blah blah.) If your state is not immutable you should override this and not expose state directly.`\r\n\r\nThat said, I don't see any more useful documentation at the provided link, which appears to just be an inline version of approximately what's here; it doesn't actually explain what a TState is, or why you're calling it that instead of saying that this returns the store. In fact, \"TState\" doesn't appear to be very search-friendly, either (though it is a bit better than just \"T\") in terms of finding out what this means or does. I suspect it may not be a basic enough concept that it's safe to just assume everybody already has it. Or maybe I'm just not the target audience for this documentation, and the people it's for will understand it. But, if understanding it is key to grokking flux, it may be worth finding and pointing to -- or writing and pointing to -- a clear explanation.   Hey Kyle, thanks for taking the time to reply.\r\n\r\nThe reason I sent my pull request is because  of a question a colleague asked me while I was trying to explain the basics of flux to him. We read through the page, and when we got to this point in the documentation, while I had no problems with the sentence, my colleague asked: \"Shouldn't be the dispatcher the one who notifies the stores subscribed to it?\"\r\n\r\nI think for someone who is familiar with flux, your phrasing makes perfect sense, and it has the extra benefits you mention in your comment. However, when someone who is new to flux (arguably most people reading this page in the docs) comes across the original sentence, they could interpret that it's the view itself which is dispatching the action and notifying the stores, like it happened to my colleague. \r\n\r\nI think my edit, though a bit more verbose, reflects the data flow more explicitly, and avoids the possibility of making wrong assumptions.\r\n\r\nHaving said that, neither my friend nor I are native English speakers (we both speak it fluently though!). Yeah, the two bullets work :)\r\n\r\n\r\n  Same version as used by React Native. Main breaking change is the deprecation of default wildcard generics for explicit generics. I didn't improve the typing (we do have a version that better typed I believe?). Meanwhile React Native bumbed to 0.36.0 (which is ok, they are compatible)., and I realized that the previous version was `Dispatcher<*>`, not `Dispatcher<any>`. I think it behaves the same for exports.   Thank you for your reply.\r\n\r\nI added test case.   Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!  A good old-fashioned `s/2015/2016/g`. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks! Cool, no worries.\n\n> On 16 Dec 2016, at 02:33, Kyle Davis <notifications@github.com> wrote:\n> \n> the gh-pages branch is generated so we shouldn't just sed replace over it, also I think almost all of these files got delete with recent updates to docs :)\n> \n> Just going to close this out. If you want to poke around and find dates on master branch happy for you to resubmit. If you do make sure dates are 2014-present though.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n  I have this `store` updates from server. I would like to put the API call in action creator like that chat room example, except when I realize that way it's not likely possible to `waitFor` other actions.\n\n~~Later I came up with this solution but I am wondering if it adheres the flux pattern. Suppose the API action is A, and B is the action it should wait for. I decided to put a status flag in B's store, and let B emit a event if complete. So in A creator can query B's status first, then decide to proceed or wait for that signal from B.~~\n Action B can return a Promise which action A will handle:\n\n``` javascript\nasync function setOfActions() {\n  await B();\n  A(...);\n}\n```\n  Hi everyone!\n\nI noticed that since the introduction of #346 Containers created with `withProps: true` are not working anymore, or at least I did not managed to get them working the way I used to.\n\n**Disclaimer**: it's a long read, but I try to explain it as clear as I can. For the one in a hurry, I try to give an explanation at the end of the description:\n\nLet me try to reproduce it with a minimal setup for create-react-app (I don't know how to Flux in Plunker, or Codepen, or ...)\nMy use case is quite simple (or maybe I am doing something totally wrong, then please tell me):\nI have 2 components with a Parent-Child relationship, both are Containers, the child is a Container that get a prop injected to calculate her state.\nMy two components are listening to 2 different stores. I then update these stores one after the other with proper delays of 2500ms and 5000ms.\n\nI have setup a default value for my injected prop, so you could see what it does without or with `withProps: true` on `NameContainer` that is causing the Invariant Violation\n\nSo here is my scenario:\n\n``` bash\ncreate-react-app flux-with-props\ncd flux-with-props\nnpm install flux immutable\n```\n\nReplace the content of App.js\n\n``` jsx\nimport React, { Component } from 'react';\nimport { Map } from \"immutable\";\n\nimport { Dispatcher as FluxDispatcher } from \"flux\";\nimport { ReduceStore, Container } from \"flux/utils\";\n\nconst Dispatcher = new FluxDispatcher();\n\nconst NameStore = new (class extends ReduceStore {\n  getInitialState() {\n    return new Map({ name: \"Julian\" });\n  }\n\n  reduce(state, payload) {\n    switch(payload.type) {\n      case \"CHANGE_NAME\":\n        return state.set(\"name\", payload.name);\n      default:\n        return state;\n    }\n  }\n\n  getName(mood) {\n    return `${this.getState().get(\"name\")} is ${mood}`;\n  }\n})(Dispatcher);\n\nconst InfoStore = new (class extends ReduceStore {\n  getInitialState() {\n    return new Map();\n  }\n\n  reduce(state, payload) {\n    switch(payload.type) {\n      case \"UPDATE_MOOD\":\n        return state.set(\"info\", {mood: payload.mood});\n      default:\n        return state;\n    }\n  }\n\n  getInfo(mood = \"sad\") {\n    return this.getState().get(\"info\", {mood});\n  }\n})(Dispatcher);\n\nclass Name extends Component {\n  static getStores() {\n    return [NameStore];\n  }\n\n  static calculateState(prevState, props) {\n    const mood = (props && props.info && props.info.mood);\n    return {\n      name: NameStore.getName(mood || \"neither sad nor happy\")\n    }\n  }\n\n  render() {\n    return (\n      <div>{this.state.name}</div>\n    )\n  }\n}\n\nconst NameContainer = Container.create(Name, { withProps: false });\n\nclass Wrapper extends Component {\n  static getStores() {\n    return [InfoStore];\n  }\n\n  static calculateState() {\n    return {\n      info: InfoStore.getInfo()\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Information</h3>\n        <NameContainer info={this.state.info} />\n      </div>\n    );\n  }\n}\n\nconst WrapperContainer = Container.create(Wrapper);\n\nsetTimeout(() => {\n  Dispatcher.dispatch({\n    type: \"UPDATE_MOOD\",\n    mood: \"happy\"\n  });\n}, 5000);\n\nsetTimeout(() => {\n  Dispatcher.dispatch({\n    type: \"CHANGE_NAME\",\n    name: \"Patrick\"\n  });\n}, 2500);\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WrapperContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n``` bash\nnpm run start\n```\n\nYou should see\n\n_Julian is neither sad nor happy_\n\n_Patrick is neither sad nor happy_\n\nNow activate `withProps: true` on NameContainer (line 66).\nWe will then inject a prop on it that default value is still _neither sad nor happy_ but we also dispatch a change to _happy_ after a delay.\n\nWe then should see\n\n_Julian is neither sad nor happy_\n\n_Patrick is neither sad nor happy_\n\n_Patrick is happy_\n\nBut the last state never occurs, due to the invariant check.\n\n---\n\n**My debugging session lead me here:**\nAt one point the `FluxContainerSubscriptions` will trigger a reset on the underlying `FluxStoreGroup` that will trigger a `Dispatcher.unregister/register`. But if we are here, it's because we are reacting to a prop change that might be triggered by a dispatch !\n\nThere it is... a dispatch that trigger an unregister/register. Boom. Invariant :(\n\nAm I really doing something wrong here ? 2 components encapsulated, 2 stores, updates... Sounds pretty normal to me...\n\nThanks for the help, and really sorry for the long reading !!\n @kyldvs, maybe we can get rid of the logic which resets listeners each time before calling `getStores()`? I never saw a case where I'd put some logic in my `getStores()` methods. It's always just a list of all stores that are used by any condition in `calculateState()`.\n Thanks @kyldvs ! Works like a charm \ud83d\udc4d \n  Hi there,\n\nI just found that the v3.0.0 was published on npm but not on GitHub, I guess you may forget it, so just report to let you know! Thanks for your working on flux!\n\ncc cdnjs/cdnjs#9301\n @kyldvs thanks!\n  I'm upgrading from v2.1.1 and am getting the following error in WebPack:\n\n![screen shot 2016-10-05 at 2 13 19 pm](https://cloud.githubusercontent.com/assets/1444385/19132027/a3131830-8b06-11e6-93bf-e447109fc67d.png)\n\nFrom the library I'm not directly importing FluxContainer, but I am using Store.\n Could that dependency be isolated to another import? Such as `flux/react`? I think people already are biased to think flux is only for React, making this library have a dependency on it would seem to  only reinforce that perception.\n `FluxContainer` initially implemented for React usage only. If you use Flux with different UI layer, you need different container implementation. Anything else can be imported from `flux/lib/*` which won't require React to be installed.\n @alexeyraspopov thanks for the tip, lets me keep using Flux without installing a React dependency I won't be making use of.\n > Any decent packager\n\nFWIW _most_ packagers won't/can't do tree shaking yet. While it's great to say it's a bug in the packager, it's not really fair.\n\n> Anything else can be imported from `flux/lib/*`\n\nThat'll work but it's not supported so it might break in the future.\n\nWe probably should support this is some more official way, maybe make `require('flux/utils/store')` work\n > That's surprising to me, for some reason I thought webpack did this already.\n\nIt probably will be a part of 2.0, but I'm not sure how this can work (or even possible) with CommonJS Modules.\n  This is a very large PR that will add a whole suite of new examples for Flux. It will cover many basic topics like, TodoMVC, Unit testing, Logging, and some advances topics like Static Typing and Async Actions.\r\n\r\nI think this is mostly ready so going to go ahead and put up the PR, have a few things left to do:\r\n- [x] Write flux-concepts part of the tutorial (or copy from old docs)\r\n- [x] Make sure website is up to date and references correct examples\r\n- [x] Add disclaimer to flux-async that this is just _a way_ to handle async actions, not the only way\r\n\r\nIf you have any feedback on these examples I would appreciate any comments.\r\n Why is `flux-concepts` in the repo rather than on the site, if it's just text?  Refine code to fix bug that message id is not same as which store in localStorage.\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n @facebook-github-bot-8 Got it.\n Pls refine it . @kyldvs \n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  Flux Chat example is old and does not use good things like Flux Utils or ImmutableJS. Let's fix this.\n\nThis Flux Chat wrote from scratch, so here is a list of things that are changed:\n- Used `immutable` lib for all data (messages, threads). `MessageRecord` and `ThreadRecord` are introduced to provide the shape of data. I did not consider using Flow (see #365).\n- Better files structure: top level folders `core`, `message`, `thread` which contain related components/stores/records.\n- ES2015 everywhere.\n- `ReduceStore` and `Container` are used.\n- `MessageBufferStore` holds incomplete messages per threads.\n- Example chat data was moved to JSON file.\n\nNext pull requests are included here or becoming outdated:\n- #312: becomes irrelevant\n- #324, #337: included here\n- #323: `package.json` updated\n- #321: included here\n- #307: becomes irrelevant\n- #291: changes to `ThreadStore` are included here\n- #250: can be updated if this will be merged\n- #236: becomes irrelevant\n\n_Note: GIT has some weird definition of showing diff, it's much easier to review by pulling the branch and checking new files._\n\ncc @kyldvs @fisherwebdev \n @kyldvs, Flux tests are failing on Travis, probably, because of Jest version. I can open separate PR with changes to `package.json` if needed.\n @kyldvs, any chances to have this reviewed? I can write better description of particular changes if you need.\n @kyldvs, I've updated folders structure.\n @kyldvs, any chance for this to be merged?\n Oh boy\r\n\r\nGonna resolve conflicts in the morning. Stay tuned.  I have setup payload in \"action\", with the intention to dispatch api data to the store. But switch case is not triggered inside Dispatcher.register.\n\nFlux version: \"flux\": \"^2.1.1\",\n\n1) action file: (note: have confirmed that receivedAllServices is triggered by using debugger )\n\n```\n\"use strict\"\n\nvar Dispatcher = require('../dispatcher/appDispatcher');\n// var requestActions = require('./requestActions');\nvar ActionTypes = require('../constants/actionTypes');\n\nvar ResponseActions = {\n\n    receivedAllServices: function(all_services){\n\n        console.log('response received');\n        debugger;\n\n        Dispatcher.dispatch({\n            actionType: ActionTypes.RECEIVED_ALL_SERVICES,\n            services: all_servicess\n        });\n    }\n\n\n\n};\n\nmodule.exports = ResponseActions;\n```\n\n2) Store: (note: debugger inside store action is not triggered )\n\n```\nDispatcher.register(function(action){\n    switch(action.actionType){\n        case ActionTypes.RECEIVED_ALL_SERVICES:\n\n            debugger;\n\n            // AuthorStore.emitChange();\n            break;\n    }\n});\n```\n\n3) Dispatcher file:\n\n```\nvar Dispatcher = require('flux').Dispatcher;\n\nmodule.exports = new Dispatcher();\n```\n\n4) actionTypes.js file\n\n```\n\"use strict\"\n\nvar keyMirror = require('fbjs/lib/keyMirror');\n\nmodule.exports = keyMirror({\n    RECEIVED_ALL_SERVICES: null, \n});\n```\n @rosnk, how is your store created? Is it included in the project? I've created a gist with the code you have, and it worked for me: https://gist.github.com/alexeyraspopov/8596b6fce1aaf060861d53c7e5ed28a3\n   Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  How to use Flowtype with Flux? What should `node_modules/flux/flow` folder do?\n\nIt's unclear and seems to be not documented anywhere? Correct me if I wrong.\n Yeah, I'm not sure how yet either :)\n\nI'm planning to set up a specific example on how to set up a repository using flux+flow though: Progress is over here at the moment: https://github.com/kyldvs/flux/tree/docs/examples/flux-flow\n   Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  With singleton stores, how do you prevent all components listening to a certain store from re-rendering when only one of them has updated?\n\nexample:\napp like instagram that have a list of  photos and  each item  have actions that change only one of them  like  'favorite\"\n**ps**: all items in **same view**\n**ps**: without **shouldComponentUpdate** \n\n@kyldvs  how solve this?   multiple instances ? \n  ## react 12.2\n\nWhen I clone the repo, run the example, everything is ok, except:\nIn the Chrome console, it warning:\n\n``` error\nbackend.js:8266 You are using a version of React with limited support in this version of the devtools.\nPlease upgrade to use at least 0.13, or you can downgrade to use the old version of the devtools:\ninstructions here https://github.com/facebook/react-devtools/tree/devtools-next#how-do-i-use-this-for-react--013\n```\n\nThe url [https://github.com/facebook/react-devtools/tree/devtools-next#how-do-i-use-this-for-react--013](https://github.com/facebook/react-devtools/tree/devtools-next#how-do-i-use-this-for-react--013) can not be open.\n\nI know it is because this todomvc use the react 12.2 (in the package.json).If I update react to 13.0 or above, the error will gone off.\n## react15.0\n\n_But_ when I update react to 15.0, another error appears in the Chrome. The error is:\n\n``` error\nwarning.js:46Warning: React.render is deprecated. Please use ReactDOM.render from require('react-dom') instead.\n```\n\nI think this todomvc example is for beginners. \nSo why not update the code ?\n This was huge issue for me when I started off. I spend a lot of time debugging this when all I wanted was to understand React.\n I'm working on updating the examples, should be coming soon. Just need to polish up the documentation on it\n Test for todomvc are also failing.\r\n\r\n```\r\n$ npm run test\r\n\r\n> todomvc-flux@0.0.3 test /home/roman/Documents/projects/playground/flux-react/flux/examples/flux-todomvc\r\n> jest\r\n\r\nUsing Jest CLI v0.4.19\r\n FAIL  dispatcher/__tests__/AppDispatcher-test.js\r\nTypeError: Cannot read property 'length' of undefined\r\n  at maybeReadMore_ (_stream_readable.js:451:18)\r\n  at /home/roman/Documents/projects/playground/flux-react/flux/examples/flux-todomvc/node_modules/jest-cli/src\r\n/lib/FakeTimers.js:342:7\r\n  at _combinedTickCallback (internal/process/next_tick.js:67:7)\r\n  at process._tickCallback (internal/process/next_tick.js:98:9)\r\n\r\n/home/roman/Documents/projects/playground/flux-react/flux/examples/flux-todomvc/node_modules/node-worker-pool/\r\nWorker.js:106\r\n    throw new Error('Received unexpected data from child process: ' + data);\r\n\r\n...\r\n\r\n```   Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  Hi everyone,\n\nI just came across this problematic and wondered how I could resolve it.\n\nI have a accountService with a login method, giving a user and a password. \nThis method hash the password and start a first action \"TempAction\" to keep for a time in the accountStore the non-encrypted password and user. \nIt then makes an ajax request to give the hash and username to our server. \nAt the end, as a callback, it triggers another action \"RetrieveAccountInfo\" located in the same Store which will use both server-given information and temporary info.\n\nMy issue is the following : the waitFor is perfect for this, but not when the action we are waiting for is in the same store.\nAs this behavior will happen frequently in our project, the use of another \"temporaryStore\" might become another issue, as in the end, the \"RetrieveAccountInfo\" might wait for different from TempAction action to end in the temporaryStore.\n\nBefore you ask, it is wished to give a hashed password to our lovely server. ;)\n\nAnd damn it is really hard to explain, so I hope I was clear enough. If not, feel free to ask for more information.\n Accurate naming seems like an issue here, and I think the lack of accurate naming is causing you to get tripped up.  \"TempAction\" is very vague.  \"RetrieveAccountInfo\" sounds very imperative.  Remember actions do not say what to do.  Instead, they describe what happened.\n\nI'm assuming we are talking about basic, standard Flux of the variety that this repo is about.  I'm also assuming that all code here is on the client.\n\nPlease correct me if I'm wrong:\n\nThe first action I'll name LOGIN_SUBMITTED.\n\nThe LoginStore responds to this action by storing the non-encrypted username and password (why do you need to do this?  seems like a security risk).\n\nAdditionally, the LOGIN_SUBMITTED action creator calls the WebAPIUtils to make a request to the server.  Upon success, the LOGIN_VALIDATED action is dispatched.\n\nThe AccountStore responds to LOGIN_VALIDATED by retrieving the temporary information from the LoginStore and combining that with the account information from the server, contained in the action.  I don't think there is any need for waitFor() in the retrieval of the temporary info, since the LoginStore is not updating in response to LOGIN_VALIDATED.\n  separate component\uff0cmake example easyer to understand\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n  When instantiating a store which is extending `ReduceStore`, I would like to be able to pass the initial state as a constructor variable.\n\nMy use case involves injecting some part of the initial state at the server side through window variables, like so:\n\n``` JS\nvar initialState = {{ server injects state object here }};\n```\n\nI could access the window var in `getInitialState`, but I'd rather have my store be unaware of the window, and this method of injecting initial state.\n\nAm I missing something? Is there any way of injecting state from outside of the store, apart from firing some `INITIALIZE` action?\n @edorivai, where do you instantiate stores?\n @alexeyraspopov Well I have this entrypoint file where I render all of my top level components. This is where I'd wish to instantiate my stores as well.\n I'm also curious how server-side rendering injects data into ReduceStore.\n Here is [how I do](https://github.com/piglovesyou/react-server-side-rendering-with-css-modules/blob/55ba3be3e61b5490411265850ef95b81fb3c3093/src/express.js#L49) (still wip).  Because it's usual to deal with ReduceStore as singleton, I let it be in server-side and just inject data before a use and clean it right afterward, even though I didn't like it.\n\nI guess that Flux Container has to have a data injection point for its `this.state` on server-side rendering, with using [context](https://facebook.github.io/react/docs/context.html) or something. If it does we don't have to care stores instantiation.\n Hi, if getInitialState is supposed to be an empty state, where would you initialise the store data? I'm a bit lost\r\n\r\n\r\n```\r\nclass MusicStore extends ReduceStore{\r\n\r\n  constructor() {\r\n  super(Dispatcher);\r\n\r\n   this.state = {\r\n    list:[],\r\n    favorites:[]\r\n  };\r\n }\r\n\r\n getInitialState() {\r\n   return [];\r\n  }\r\n...\r\n\r\n}\r\n```\r\n\r\nwhere would I pass initial data to my this.data object?\r\n\r\n\r\n  Hi,\n\nWhen attempting to extend FluxContainer and create a class from it on the server side in Node v6.x, the component throws an error when instantiated:\n\n```\nTypeError: Class constructor OverviewComponent cannot be invoked without 'new'\n    at PureFluxContainerClass.FluxContainerClass (/ProjectLocation/node_modules/flux/lib/FluxContainer.js:50:13)\n```\n\nThe component looks like this:\n\n```\nclass OverviewComponent extends React.Component {\n   ...\n}\n\nmodule.exports = Flux.Container.create(OverviewComponent);\n```\n\nNote that this is not transpiled - this is executed natively with Node v6.x's ES6 support.\n\nI believe this error is because Flux is expecting the component to be transpiled to ES5, and therefore be able to call the constructor be calling it directly, which it can't do in ES6. Is this correct?\n I'm not sure if we will try to support this or suggest to just use transpiled files, but please provide more information to debug. What precisely is the line of code that is throwing?\n Why would you suggest using transpiled files? ES6 should eventually be natively supported in runtimes, so Flux should follow the ES6 spec properly. It so happens that Node v6.x is there now.\n\nI believe all the information necessary is displayed above. In FluxContainer.js on line 50 (Of the built version), it calls:\n\n `_Base.call(this, props);`\n\nInside the create() function. _Base in this instance is the passed component - OverviewComponent in my case, so essentially the code is calling OverviewComponent.call(this, props), or effectively OverviewComponent(props).\n\nIn ES6 one cannot call the constructor directly, you must use \"new\" to instantiate the class.\n Okay I was misunderstanding, you mean your code is not transpiled, the `lib/FluxContainer` code **is** transpiled.\n\nThis may just mean we need to turn on stricter options when building, can you try\n\n1: Change this line to false: https://github.com/facebook/flux/blob/master/scripts/babel/default-options.js#L24\n2: Run `npm run prepublish`\n3: And then try to run your code again\n Thanks for the response Kyle. I've just tried that and unfortunately I had the same results.\n1. Fresh clone into my local node_modules\n2. Change scripts/babel/default-options.js#L24\n3. npm install\n\n```\nTypeError: Class constructor OverviewComponent cannot be invoked without 'new'\n   at PureFluxContainerClass.FluxContainerClass (/ProjectDir/node_modules/flux/lib/FluxContainer.js:54:86)\n   at new PureFluxContainerClass (/ProjectDir/node_modules/flux/lib/FluxContainer.js:177:90)\n   at ReactCompositeComponentMixin._constructComponentWithoutOwner (/ProjectDir/node_modules/react/lib/ReactCompositeComponent.js:248:14)\n   at ReactCompositeComponentMixin._constructComponent (/ProjectDir/node_modules/react/lib/ReactCompositeComponent.js:236:21)\n   at ReactCompositeComponentMixin.mountComponent (/ProjectDir/node_modules/react/lib/ReactCompositeComponent.js:159:21)\n   at wrapper [as mountComponent] (/ProjectDir/node_modules/react/lib/ReactPerf.js:66:21)\n   at Object.ReactReconciler.mountComponent (/ProjectDir/node_modules/react/lib/ReactReconciler.js:39:35)\n   at ReactDOMComponent.ReactMultiChild.Mixin.mountChildren (/ProjectDir/node_modules/react/lib/ReactMultiChild.js:203:44)\n   at ReactDOMComponent.Mixin._createContentMarkup (/ProjectDir/node_modules/react/lib/ReactDOMComponent.js:593:32)\n   at ReactDOMComponent.Mixin.mountComponent (/ProjectDir/node_modules/react/lib/ReactDOMComponent.js:478:29) \n```\n If anyone else comes across this, here is a possible (ugly) workaround:\n\n```\n/// FluxContainerConverter.js\n\nmodule.exports = {\n    convert: function(containerClass) {\n        const tmp = containerClass;\n        containerClass = function(...args) {\n            return new tmp(...args);\n        };\n        containerClass.prototype = tmp.prototype;\n        containerClass.getStores = tmp.getStores;\n        containerClass.calculateState = tmp.calculateState;\n        return containerClass;\n    }\n};\n```\n\nNow you can use it to create your FluxContainer like this:\n\n```\nvar fluxContainerConverter = require('./FluxContainerConverter');\n\nContainer.create(\n    fluxContainerConverter.convert(MyComponent));\n```\n Such a mess There is a sample in official docs page, but doesn't work!\r\nIt's brilliant.\r\nhttp://facebook.github.io/flux/docs/flux-utils.html#container Sad but true! Flux Containers is not working with es6.  I do not understand why is not fixed till now, in this long period of time.  @murilobr - thanks providing the workaround. It really helps.  I know this is an abbreviated code, but when I was reading this docs I got really confused where the call \"this.state.allTodos\" (previously in line :212) was getting the function from so I had to go to the source.\n\nI think adding this code won't harm the brevity of the code and will make it more undestandable.\n  For example, what is the expectation when you override `componenWillMount` and then pass it to FluxContainer.create(), should it still work? (right now the answer is yes)\n\nWhat about the timing of it in relation to `static getStores()`? On the 2.1.1 it always happens before `getStores()` on 3.0.0 it will happen after in order to fix #316. We should document this more clearly.\n  The \"next\" link of the following page is 404.\n\nhttps://facebook.github.io/flux/docs/examples-and-tools.html#content\n Thanks!  composed message as the last message in the ThreadSection component\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n   Thanks for the PR,\n1. There is no need to update lib/dist files in the PR. We do that in one big batch when we make a release every once in a while. Please just submit the small change you are making, https://github.com/yaliyingwy/flux/commit/e81e73cfca9808db59bedc8ddbb04cb24057d26a\n2. Can you provide more context in your description so that we can understand why this change is necessary? A code example of something that breaks would be helpful.\n @kyldvs @facebook-github-bot \n\n```\nclass Foo extends Component {\n  constructor() {\n    super();\n    this.displayName = 'Foo';\n    this.state = {\n      bar: 'some value',\n    };\n  }\n\n  static getStores() {\n    return [FooStore];\n  }\n\n  static calculateState() {\n    return {\n      stateInStore: FooStore.getState().get('stateInStore'),\n    };\n  }\n  render() {\n    const { bar } = this.state;  //bar is undefine in the first render, becase container rewrite the state after constructor .\n  }\n}\n\nconst FooContainer =  Container.create(Foo);\nexport default FooContainer;\n\n```\n Sometimes I don't want to put all states in the stores, like form in the login page,  I just bind the input values on the component state, but now I cant find a way to set the component initial state, container will rewrite my state .\n I think mixing component state with store state in a single component is a bad pattern. A container's only responsibility should be connecting state from a store to a view. So I would rewrite the above as:\n\n```\nclass FooView extends Component {\n  static propTypes = {\n    stateInStore: PropTypes.string,\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = { bar: 'some value' };\n  }\n\n  render() {\n    const bar = this.state.bar;\n    const stateInStore = this.props.stateInStore;\n    // render something\n  }\n}\n\nclass FooContainer extends Component {\n  static getStores() {\n    return [FooStore];\n  }\n\n  static calculateState() {\n    return {\n      stateInStore: FooStore.getState().get('stateInStore');\n    }\n  }\n\n  render() {\n    return <FooView {...this.state} />;\n  }\n}\n```\n Thank you,  I will try this in my code.\n @kyldvs ,Is this also the right way to resole  [https://github.com/facebook/flux/issues/316](https://github.com/facebook/flux/issues/316)? In FooView's `componentDidMount`, call an action to change state in the store.\n I think that is a different issue, there is a small period of time through the mounting process that can cause changes to be ignored by a container.\n  One example of where this would break is when using the `react-intl`'s `Container.create(injectIntl(Component))` where the `injectIntl` does an invariant check on the context.\n Does flux support to build website using 3Rd party JSON r XML API \n I like to built website like redbus, ticketghoose and abhibus it's a bus booking engine using their API \n Sorry I changed things so this had conflicts, just did you change here though: https://github.com/facebook/flux/commit/70a25820885e7879c0f5b8814c580979e17ac205\n Hi kyldvs I have an API documents for can design it \n Hi I need to frontend and backend design using XML r JSON API \n I'm not sure what your goal is @tollbus but this isn't an appropriate place for it. If you have a specific question about how Flux works, please read the examples and documentation and if it is still unanswered, file a new issue.\n  Currently I have 3 component (A, B and C) need to use the same kind of data from server\nAll of 3 component can listen to Store change and get data from Store. But the problem is I dont know where to place the data fetching action.\nIf all 3 components do the data fetching action, It will cause the same data to be fetched multiple time and component will re-render many time when data received\nIf I place the data fetching action in a top level component and these 3 components only listen to store change, it will be hard to reuse these 3 components.\nIn summary, should I fetch the data from server and listen to Store change in the same component (to make component easier to reuse) or should I fetch the data in a top component and listen to Store change in lower level component\n I thought we should not fetch data in Store\nThe data should be fetch via action from View if I recall correctly\nBut in general I understand the concept of status\nOne more question is that if status is 'foo_loaded' so we can get data directly from Store and do not fire Action to fetch data. But after a while, the data is out-of-date but still in the Store. How we can refresh the data after a while\nI know one solution is using real time Websocket to notify when the data is changed from the server. Other than that is there any work around ?\n @kyldvs Am i right that on your FooStore example there is a lot of chance of dispathing in a middle of another dispatching ? \n\nI know from the conf you track almost all loading state at FB. But the FB AdsManager seems to don't track loading with actions but stores directly mutate states (in some cases, for modal ?). Since these stores are mainly used for initialization I think there is nothing wrong with that ? You just mutate the last state because you know you can't give it to the components since this is not what they ask.\n\nis it still a good practice ? \n\n---\n\nAdd an after dispatch callback on dispatcher to call the start_load looks better. Will you update the dispatcher as @fisherwebdev said in #138 ?\n No there should be no chance of dispatching in the middle of a dispatch otherwise your application will crash. In my simplified example yeah it could be possible if you are calling `getState()` within another store. In practice I think we do something like this (in some base class/util so we don't keep writing it):\n\n```\n  getState() {\n    const state = super.getState();\n    if (state.status === 'not_loaded') {\n      if (FooDispatcher.isDispatching()) {\n        setImmediate(() => FooDispatcher.dispatch({type: 'start_loading'}));\n      } else {\n        FooDispatcher.dispatch({type: 'start_loading'});\n      }\n    }\n    return state;\n  }\n```\n\nYes used to we would directly mutate the state of a store from `not_loaded` to `loading` without emitting a change. It generally works and is a bit simpler, but strictly speaking it breaks some of the core principles of the Flux architecture so we moved away from that. In particular you should always emit a change when your state changes and you must only emit a change during a dispatch. In the old system it was impossible to maintain these two conditions.\n\n## \n\nNo we do not have any plans to add an after dispatch callback. We played around with it for a bit, but it was not ever used and generally complicated the system.\n @kyldvs One more question is in FB, how do you manage the loading state of entity\nFor example, I have BookStore to manage all the book in library. In my application, sometime I need to fetch data for 1 book only, but sometime I need to get data for all available book\nHow do you design the state to manage both the single item fetching and group item fetching\n  Hi guys\nI have a case. I need to check if the Id is valid from Store or not, but I need to call Store function here. Is it a good practice ? Thanks !\n\nAction.js\n\n``` js\nsave(id) {\n     //Check if is valid or not\n     if (Store.checkValid(id)) {\n          api.save(id).then(dispatchSuccess)\n     }\n     else {\n          dispatchError();\n     }\n}\n```\n @kyldvs  but it will not a good practice for\nAction -> Dispatcher -> Store -> View\nWe call Store in Action is look like a loop back.\n @kyldvs \nSorry, but how about using Store in View to follow one way direction. Is it a better way ? \n\n```\nonClick() {\n    let name = ReactDOM.findDOMNode(this.refs['username']).value;\n    action.changeCurrentUserName(CurrentUserStore.getID(), name);\n}\n```\n @kyldvs  \nYeah Thanks, So can you update FLUX document about good practice for using in Action, Store, Views\n  src/libs/dispatcher.js: Missing class properties transform. while parsing file: src/libs/dispatcher.js\n\nI am sorry that I am a little unsure why this is happening I am trying to include using browserify like this \n\n`var bundler = browserify([config.js.src+\"/app.jsx\",\n                            \"src/libs/dispatcher.js\",\n                            \"src/libs/microevent.js\"],\n                            args) // Browserify\n    .plugin(watchify, {ignoreWatch: ['**/node_modules/**', '**/bower_components/**']}) // Watchify to watch source file changes\n    .transform(babelify, {presets: ['es2015', 'react']}); // Babel tranforms`\n\nThank you\n  When installing flux via `npm`, there is a `\"fbjs\": \"0.1.0-alpha.7\"` in flux's package json. \n\nThis issue causes an `Error building DependencyGraph` error while using react-native packager.\n\nnode version: v5.5.0\nnpm version: 3.7.1\n Yes, React Native will be updated in the coming weeks (ETA 2-4 wks till release). The PR is ready but FB is having issues merging it so thanks for your patience.\n Yes -- the plan is to fix a bug and allow different copies of fbjs to co-exist under node_modules.\n Is there a workaround for this?\n Fork this repo, update the deep, use your fork.\n +1 on the issue\nPrevents alt  from being used in react-native (and a number of react-native demo apps that use alt)\n\n```\n\n> `-- alt@0.18.2\n>   +-- flux@2.1.1\n>   | +-- fbemitter@2.0.2\n> **  | `-- fbjs@0.1.0-alpha.7\n> **  +-- is-promise@2.1.0\n>   `-- transmitter@1.1.0\n> \n\n```\n Is this fixed in react native `0.21`?\n @tristangodfrey - Not fixed as of RN 0.21, I'm trying to upgrade my project now and still getting this conflict.\n Can we PLEASE fix this? @kyldvs i get that chasing dependencies is a chore, but breaking tons of builds for users is just evil.\n Submit a PR + test plan if this is important to you. On the fbemitter repo @kyldvs was receptive to merging dep upgrades w/ a responsible test plan.\n Please suggest an actionable test plan. I'll gladly submit a PR for the\npackage.json .\n\nOn Thu, Mar 3, 2016 at 9:34 PM James Ide notifications@github.com wrote:\n\n> Submit a PR + test plan if this is important to you. On the fbemitter repo\n> @kyldvs https://github.com/kyldvs was receptive to merging dep upgrades\n> w/ a responsible test plan.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/flux/issues/329#issuecomment-191950976.\n `npm test` is a good start. Also verifying that it works in a complex app is another good test.\n For now, this is what helps: \n\n```\nrm -rf ./node_modules/fbemitter/node_modules/fbjs\nrm -rf ./node_modules/flux/node_modules/fbjs\nrm -rf ./node_modules/react/node_modules/fbjs\nrm -rf ./node_modules/react-native/node_modules/fbjs\nwatchman watch-del-all\nrm -rf $TMPDIR/react-packager-*\n```\n\nI have added this code to package.json as a npm task `clean`, because every time I install a package via npm, it also installs missing fbjs, so this fix is pretty often used.\n Yes, feel free to submit a PR. I don't use react-native so I simply don't know how to update this in such a way to unblock everyone.\n If https://github.com/facebook/flux/pull/326 fixes react native we can just go with that.\n That really would!\n It's just the alpha dependency that triggers a conflict, because NPM thinks it has to install two versions of it, and spits out a warning about it.\n I doubt it's just the alpha dep, it's likely any dep that doesn't match exactly what react-native uses. It's a stupid thing the chase but might be necessary short-term.\n Updated to 0.8.0 here: https://github.com/facebook/flux/commit/ba9d6b7296d572ed7d1af5a54b8d0637f3986b84\n  http://facebook.github.io/flux/docs/flux-utils.html#content\nFlux Document said that Container should have no props but in some cases I find it quite hard to follow this principle. For example I have 3 component:\n- Post list\n  - Post\n    - Comment list\n\nThe `Post list` can be easily wrap with container fetch data from store\nBut I need `Post` id to fetch `Comment list`\nSo my question is if I want to create a Container for `Comment list`, should I pass in some props or how to keep the Container pure\n  Add new action that is being dispatched to the error message.\n  npm v3 tries to dedupe the dependencies by default, and keeping dependencies up-to-date helps better deduplication.\n\nThough it seems that this repository is not tested on any CIs, I ran npm test on my PC and it passed all the tests.\n\n```\n$ npm t\n\n> flux@2.1.1 test /Users/Shinnosuke/github/flux\n> NODE_ENV=test jest\n\nUsing Jest CLI v0.5.10\n PASS  src/__tests__/Dispatcher-test.js (0.019s)\n PASS  src/__tests__/FluxStoreGroup-test.js (0.039s)\n PASS  src/stores/__tests__/FluxStore-test.js (0.04s)\n PASS  src/stores/__tests__/FluxMapStore-test.js (0.062s)\n4 tests passed (4 total)\nRun time: 0.935s\n```\n We don't _have to_ and I'm inclined not to (I think RN has removed knowledge of fbjs from it's packager at this point and normal resolution just works). I think it's a losing game because any combination of packages is not going to have the same set of deps. Perhaps once we feel comfortable and bump fbjs to 1.x this won't be much of an issue.\n Then you have to copy in invariant and the goal of fbjs was to avoid that. I'd rather not do that here and keep a consistent process for our packages.\n  @jhubert @benjamn @tomocchino \n\nGuys I am not sure, whether my question is valid or not, but I could not able to achieve the problem given, have discussed in the channel too https://gitter.im/dev-ua/reactjs\n\nMy question :\nwhen it is bind to defaultValue,\n\nWhen I use : `defaultChecked={(this.state.typeSelected =='locker')}`\n\nThe select box is not able to mark wrt the condition given, but manually could able to mark checked/notchecked.\n\nWhen I use :  `checked={(this.state.typeSelected =='locker')}`\n\nOn this checked attribute, the checkbox is able to mark as checked, based on select box option value. BUT in this case the manual way of checking or un-checking is not happening. \n\nHave a full question with fiddle here:\n http://stackoverflow.com/questions/35232384/reactjs-defaultchecked-is-not-allowing-to-select-the-checkbox/\n  Hi, I'd like to submit this fix to updating the time and date of the threadlist, upon creating a message. \n\nIt may not be perfect since it has the `require` for the `MessageStore` within the Action Handler in the `ThreadStore`. I did this to avoid a circular dependency between the `ThreadStore` and the `MessageStore`. If someone knows a cleaner solution, I would be happy to refactor this.\n\n**Note**: There was a pull request #292 that solved this problem differently, but it was rejected without feedback.\n\n**Note**: The change also includes mods to package.json. This relates to #323, which was mandatory for me to get the code to run before changing otherwise.\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n  Hi, I had to update dependencies for the project to run on my local machine. It might be a good idea to update to the latest packages anyway. Thank you for considering this pull request.\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n   Can you please add some sort of test plan/screenshots demonstrating that it still works?\n sure.\n  Hi guys.\nI have a _Component_. I want after  **componentDidMount** , call action to get all the _links_. But it does not work, so I have to use _setTimeout_ to make it work.\n\n``` ts\nclass MainComponent extends React.Component<any, State> {\n    static getStores(): Array<Store> {\n        return [MainStore];\n    }\n\n    static calculateState(prevState?: State): any {\n        console.log(\"MainComponent: calculateState\");\n        let state = MainStore.getState();\n\n        return {\n            links: state.get(\"links\"),\n            currentComponent: state.get(\"currentComponent\")\n        };\n    }\n\n    componentDidMount() {\n        // Call actions after MainComponent init Store\n        setTimeout(() => {\n            MainActions.getLinks();\n        });\n    }\n}\n\n```\n This works for me. Make sure you are registering your store with the dispatcher prior to componentDidMount.\n It might be that we are using a anti pattern, but I have i similar problem.\n\nWe are creating a fluxcontainer, and in componentDidMount we are  dispatching a action to populate certain state properties in a store.\n\nSince the flux container calls the base.prototype.componentDidMount before it sets up the change listener any action I dispatch will not be reflected in the UI since the change event is not picked up by the component. Could the call to the component defined componentDidMount method be moved to after the fluxcontainer has attached its listener? Or is it some better way of solving this particular usecase?\n Fixed here: https://github.com/facebook/flux/commit/ba9d6b7296d572ed7d1af5a54b8d0637f3986b84\n Nice, thanks! This will let me remove some setTimeout hacks. Really appreciated!\n @kyldvs  thanks please release it to npm \n  flux-todomvc `npm test` fails due to https://github.com/facebook/jest/issues/340:\n\n```\nTypeError: Cannot read property 'length' of undefined\n  at maybeReadMore_ (_stream_readable.js:425:18)\n  at /home/xxx/node_modules/gulp-jest/node_modules/jest-cli/src/lib/FakeTimers.js:325:7\n  at process._tickCallback (node.js:341:15)\n```\n\nOther examples do not fail, but upgrade any way.\nI did not upgrade the main flux package.json, as the tests do not currently pass.\n Just confirming that I was experiencing the same error until I found your merge request. Upgraded the version and all tests pass. Thanks!\n  I cannot understand where is the point at which server side data (messages, threads) appear in the app. Where is that line of code that fetches data from the server (or in this case from localStore)?\n\nHere is how initial state of MessageSection is created. And how `MessageStore.getAllForCurrentThread(),` looks like:\n\n```\n// MessageSection.js\nfunction getStateFromStores() {\n    return {\n        messages: MessageStore.getAllForCurrentThread(), // this should return the data\n        thread: ThreadStore.getCurrent()\n    };\n}\n```\n\nHere is `MessageStore.getAllForCurrentThread()`. There is no data in `_messages`, this `for/in` just do nothing. How does the data appears in the system, in `_messages`?\n\n```\n  /**\n   * @param {string} threadID\n   */\n  getAllForThread: function(threadID) {\n    var threadMessages = [];\n    for (var id in _messages) {\n      if (_messages[id].threadID === threadID) {\n        threadMessages.push(_messages[id]);\n      }\n    }\n    threadMessages.sort(function(a, b) {\n      if (a.date < b.date) {\n        return -1;\n      } else if (a.date > b.date) {\n        return 1;\n      }\n      return 0;\n    });\n    return threadMessages;\n  },\n```\n @wzup, there is an action for this, called `CREATE_MESSAGE`, which is then passed to the MessageStore callback (using the dispatcher).\nThen, the MessageStore internally adds the new message:\n\n``` javascript\n_messages[message.id] = message;\n```\n\nIf there is no messages, an empty array is returned.\n  Converted messages don't have timestamp property, they have date property\n  I trying to use flux in my current project, and I get a little confused,\n\nWhen implementing Flux, should I put all state and props inside a `store`, and the components just get state and props from store every single time?\n\nOr I could put some of the states and props inside components' code, and merge it with the states and props from store, and then provide to components?\n :+1: \n  So far I've observed the following:\n- The todomvc example uses `[include]`, when http://flowtype.org/docs/third-party.html talks about `[lib]`\n- The thirt-party docs mentions `declare`. `node_modules/flux/flow/include` contains actual source code, which may explain why this doesn't work.\n- The npm module has pre-compiled in `node_modules/lib`, which is why `node_modules/flux/flow/include` is needed.\n\nIs flux out of date with flow? Couple of possible solutions come to mind:\n- Update flux/flow to use declare\n- Enable babel's flow comments plugin to keep type annotations in the compiled source\n\nIf I include this in my source file it works:\n\n```\ndeclare class Dispatcher<TPayload> {\n    register(callback: (payload: TPayload) => void): DispatchToken;\n    unregister(id: DispatchToken): void;\n    waitFor(ids: Array<DispatchToken>): void;\n    dispatch(payload: TPayload): void;\n    isDispatching(): boolean;\n}\n```\n This overlaps with stuff I've been doing with fbjs. Currently we ship the original src files for flow to pick up and parse. We do this because there are some cases where the inline comments don't work well, namely polymorphic classes. With the next Flow release, it will support shipping a declaration file next to the original source so that we don't have to do special things with includes in `.flowconfig` files, so we'll do that for fbjs and I'll say we should do the same thing here.\n > Currently we ship the original src files for flow to pick up and parse.\n\nDo we actually include the src files in the npm package? If so, we should be able to close #272\n Only in fbjs. Not here afaik. But the infra that's being worked on for fbjs can be used here.\n  #346 fixes this.\n  The dispatch override returned void before, making _promises (module scoped, and otherwise unused), and its 'supporting code' unnecessary; especially for an example. I tried to maintain the intent of the code, for whatever pedantic reasons it was there before.\n  @all can you guys tell me when flux can and cannot used in web app\n  - Made the latest thread on top (more regular)\n- Added a \\* before unread thread title (more clear)\n- Sync'd thread after message sent (more reactive)\n New to react & flux, but wanted to become a contributor of flux. Related to #280.\nThank you!\n Thanks bot. I'm done.\n  Fixes #288\n\nThere's probably a couple more things to do (probably should pull in the preprocessor cache busting for jest from fbjs-scripts). But this does the minimum to get us updated.\n For this fix, I think you may also have to update package.son for the examples projects e.g. flux-chat\n  Here is a link to the to the existing issue about contextify: https://github.com/brianmcd/contextify/issues/188\n\nHere is my npm install log:\n\n```\nnpm install\nnpm WARN engine jest-cli@0.4.19: wanted: {\"node\":\"0.8.x || 0.10.x\"} (current: {\"node\":\"4.2.1\",\"npm\":\"2.14.7\"})\n\n> contextify@0.1.14 install /Users/eugene/htdocs/nodejs_projects/flux/node_modules/jest-cli/node_modules/jsdom/node_modules/contextify\n> node-gyp rebuild\n\n  CXX(target) Release/obj.target/contextify/src/contextify.o\nIn file included from ../src/contextify.cc:3:\n../node_modules/nan/nan.h:261:25: error: redefinition of '_NanEnsureLocal'\nNAN_INLINE v8::Local<T> _NanEnsureLocal(v8::Local<T> val) {\n                        ^\n../node_modules/nan/nan.h:256:25: note: previous definition is here\nNAN_INLINE v8::Local<T> _NanEnsureLocal(v8::Handle<T> val) {\n                        ^\n../node_modules/nan/nan.h:661:13: error: no member named 'smalloc' in namespace 'node'\n    , node::smalloc::FreeCallback callback\n      ~~~~~~^\n../node_modules/nan/nan.h:672:12: error: no matching function for call to 'New'\n    return node::Buffer::New(v8::Isolate::GetCurrent(), data, size);\n           ^~~~~~~~~~~~~~~~~\n/Users/eugene/.node-gyp/4.2.1/include/node/node_buffer.h:31:40: note: candidate function not viable: no known conversion from 'uint32_t'\n      (aka 'unsigned int') to 'enum encoding' for 3rd argument\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate,\n                                       ^\n/Users/eugene/.node-gyp/4.2.1/include/node/node_buffer.h:43:40: note: candidate function not viable: 2nd argument ('const char *') would\n      lose const qualifier\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate,\n                                       ^\n/Users/eugene/.node-gyp/4.2.1/include/node/node_buffer.h:28:40: note: candidate function not viable: requires 2 arguments, but 3 were\n      provided\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate, size_t length);\n                                       ^\n/Users/eugene/.node-gyp/4.2.1/include/node/node_buffer.h:36:40: note: candidate function not viable: requires 5 arguments, but 3 were\n      provided\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate,\n                                       ^\nIn file included from ../src/contextify.cc:3:\n../node_modules/nan/nan.h:676:12: error: no viable conversion from 'v8::MaybeLocal<v8::Object>' to 'v8::Local<v8::Object>'\n    return node::Buffer::New(v8::Isolate::GetCurrent(), size);\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:210:7: note: candidate constructor (the implicit copy constructor) not viable: no known\n      conversion from 'v8::MaybeLocal<v8::Object>' to 'const v8::Local<v8::Object> &' for 1st argument\nclass Local {\n      ^\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:210:7: note: candidate constructor (the implicit move constructor) not viable: no known\n      conversion from 'v8::MaybeLocal<v8::Object>' to 'v8::Local<v8::Object> &&' for 1st argument\nclass Local {\n      ^\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:214:13: note: candidate template ignored: could not match 'Local' against 'MaybeLocal'\n  V8_INLINE Local(Local<S> that)\n            ^\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:326:13: note: candidate template ignored: could not match 'S *' against\n      'v8::MaybeLocal<v8::Object>'\n  V8_INLINE Local(S* that)\n            ^\nIn file included from ../src/contextify.cc:3:\n../node_modules/nan/nan.h:683:26: error: no member named 'Use' in namespace 'node::Buffer'\n    return node::Buffer::Use(v8::Isolate::GetCurrent(), data, size);\n           ~~~~~~~~~~~~~~^\nIn file included from ../src/contextify.cc:1:\nIn file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:221:5: error: assigning to 'v8::Primitive *volatile' from incompatible type 'v8::Value *'\n    TYPE_CHECK(T, S);\n    ^~~~~~~~~~~~~~~~\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n    *(static_cast<T* volatile*>(0)) = static_cast<S*>(0);      \\\n                                    ^ ~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:414:12: note: in instantiation of function template specialization 'v8::Local<v8::Primitive>::Local<v8::Value>'\n      requested here\n    return NanEscapeScope(NanNew(v8::Undefined(v8::Isolate::GetCurrent())));\n           ^\n../node_modules/nan/nan.h:398:30: note: expanded from macro 'NanEscapeScope'\n# define NanEscapeScope(val) scope.Escape(_NanEnsureLocal(val))\n                             ^\nIn file included from ../src/contextify.cc:1:\nIn file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:221:5: error: assigning to 'v8::Boolean *volatile' from incompatible type 'v8::Value *'\n    TYPE_CHECK(T, S);\n    ^~~~~~~~~~~~~~~~\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n    *(static_cast<T* volatile*>(0)) = static_cast<S*>(0);      \\\n                                    ^ ~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:424:12: note: in instantiation of function template specialization 'v8::Local<v8::Boolean>::Local<v8::Value>'\n      requested here\n    return NanEscapeScope(NanNew(v8::True(v8::Isolate::GetCurrent())));\n           ^\n../node_modules/nan/nan.h:398:30: note: expanded from macro 'NanEscapeScope'\n# define NanEscapeScope(val) scope.Escape(_NanEnsureLocal(val))\n                             ^\nIn file included from ../src/contextify.cc:1:\nIn file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:221:5: error: assigning to 'v8::Function *volatile' from incompatible type 'v8::Value *'\n    TYPE_CHECK(T, S);\n    ^~~~~~~~~~~~~~~~\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n    *(static_cast<T* volatile*>(0)) = static_cast<S*>(0);      \\\n                                    ^ ~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:1514:12: note: in instantiation of function template specialization 'v8::Local<v8::Function>::Local<v8::Value>'\n      requested here\n    return NanEscapeScope(NanNew(handle)->Get(kCallbackIndex)\n           ^\n../node_modules/nan/nan.h:398:30: note: expanded from macro 'NanEscapeScope'\n# define NanEscapeScope(val) scope.Escape(_NanEnsureLocal(val))\n                             ^\nIn file included from ../src/contextify.cc:1:\nIn file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:221:5: error: assigning to 'v8::Object *volatile' from incompatible type 'v8::Value *'\n    TYPE_CHECK(T, S);\n    ^~~~~~~~~~~~~~~~\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n    *(static_cast<T* volatile*>(0)) = static_cast<S*>(0);      \\\n                                    ^ ~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:1632:12: note: in instantiation of function template specialization 'v8::Local<v8::Object>::Local<v8::Value>'\n      requested here\n    return NanEscapeScope(handle->Get(NanNew(key)).As<v8::Object>());\n           ^\n../node_modules/nan/nan.h:398:30: note: expanded from macro 'NanEscapeScope'\n# define NanEscapeScope(val) scope.Escape(_NanEnsureLocal(val))\n                             ^\nIn file included from ../src/contextify.cc:1:\nIn file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:221:5: error: assigning to 'v8::Value *volatile' from incompatible type 'v8::Context *'\n    TYPE_CHECK(T, S);\n    ^~~~~~~~~~~~~~~~\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n    *(static_cast<T* volatile*>(0)) = static_cast<S*>(0);      \\\n                                    ^ ~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:267:10: note: in instantiation of function template specialization 'v8::Local<v8::Value>::Local<v8::Context>'\n      requested here\n  return NanNew(val);\n         ^\n../src/contextify.cc:159:16: note: in instantiation of function template specialization '_NanEnsureLocal<v8::Local<v8::Context> >'\n      requested here\n        return NanEscapeScope(NanNew<Context>(\n               ^\n../node_modules/nan/nan.h:398:43: note: expanded from macro 'NanEscapeScope'\n# define NanEscapeScope(val) scope.Escape(_NanEnsureLocal(val))\n                                          ^\nIn file included from ../src/contextify.cc:1:\nIn file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:221:5: error: assigning to 'v8::Context *volatile' from incompatible type 'v8::Value *'\n    TYPE_CHECK(T, S);\n    ^~~~~~~~~~~~~~~~\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n    *(static_cast<T* volatile*>(0)) = static_cast<S*>(0);      \\\n                                    ^ ~~~~~~~~~~~~~~~~~~\n../src/contextify.cc:159:16: note: in instantiation of function template specialization 'v8::Local<v8::Context>::Local<v8::Value>'\n      requested here\n        return NanEscapeScope(NanNew<Context>(\n               ^\n../node_modules/nan/nan.h:398:30: note: expanded from macro 'NanEscapeScope'\n# define NanEscapeScope(val) scope.Escape(_NanEnsureLocal(val))\n                             ^\nIn file included from ../src/contextify.cc:1:\nIn file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:7380:3: error: assigning to 'v8::Integer *volatile' from incompatible type 'v8::Value *'\n  TYPE_CHECK(T, S);\n  ^~~~~~~~~~~~~~~~\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n    *(static_cast<T* volatile*>(0)) = static_cast<S*>(0);      \\\n                                    ^ ~~~~~~~~~~~~~~~~~~\n../src/contextify.cc:211:13: note: in instantiation of function template specialization 'v8::ReturnValue<v8::Integer>::Set<v8::Value>'\n      requested here\n            NanReturnValue(NanNew<Integer>(None));\n            ^\n../node_modules/nan/nan.h:401:61: note: expanded from macro 'NanReturnValue'\n# define NanReturnValue(value) return args.GetReturnValue().Set(_NanEnsureLocal(value))\n                                                            ^\nIn file included from ../src/contextify.cc:1:\nIn file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:7380:3: error: assigning to 'v8::Boolean *volatile' from incompatible type 'v8::Value *'\n  TYPE_CHECK(T, S);\n  ^~~~~~~~~~~~~~~~\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n    *(static_cast<T* volatile*>(0)) = static_cast<S*>(0);      \\\n                                    ^ ~~~~~~~~~~~~~~~~~~\n../src/contextify.cc:225:13: note: in instantiation of function template specialization 'v8::ReturnValue<v8::Boolean>::Set<v8::Value>'\n      requested here\n            NanReturnValue(NanNew<Boolean>(false));\n            ^\n../node_modules/nan/nan.h:401:61: note: expanded from macro 'NanReturnValue'\n# define NanReturnValue(value) return args.GetReturnValue().Set(_NanEnsureLocal(value))\n                                                            ^\nIn file included from ../src/contextify.cc:1:\nIn file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:7380:3: error: assigning to 'v8::Array *volatile' from incompatible type 'v8::Value *'\n  TYPE_CHECK(T, S);\n  ^~~~~~~~~~~~~~~~\n/Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n    *(static_cast<T* volatile*>(0)) = static_cast<S*>(0);      \\\n                                    ^ ~~~~~~~~~~~~~~~~~~\n../src/contextify.cc:236:13: note: in instantiation of function template specialization 'v8::ReturnValue<v8::Array>::Set<v8::Value>'\n      requested here\n            NanReturnValue(blank);\n            ^\n../node_modules/nan/nan.h:401:61: note: expanded from macro 'NanReturnValue'\n# define NanReturnValue(value) return args.GetReturnValue().Set(_NanEnsureLocal(value))\n                                                            ^\n14 errors generated.\nmake: *** [Release/obj.target/contextify/src/contextify.o] Error 1\ngyp ERR! build error \ngyp ERR! stack Error: `make` failed with exit code: 2\ngyp ERR! stack     at ChildProcess.onExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:270:23)\ngyp ERR! stack     at emitTwo (events.js:87:13)\ngyp ERR! stack     at ChildProcess.emit (events.js:172:7)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)\ngyp ERR! System Darwin 15.0.0\ngyp ERR! command \"/usr/local/bin/node\" \"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd /Users/eugene/htdocs/nodejs_projects/flux/node_modules/jest-cli/node_modules/jsdom/node_modules/contextify\ngyp ERR! node -v v4.2.1\ngyp ERR! node-gyp -v v3.0.3\ngyp ERR! not ok \n\\\n> fsevents@1.0.2 install /Users/eugene/htdocs/nodejs_projects/flux/node_modules/babel/node_modules/chokidar/node_modules/fsevents\n> node-pre-gyp install --fallback-to-build\n\n[fsevents] Success: \"/Users/eugene/htdocs/nodejs_projects/flux/node_modules/babel/node_modules/chokidar/node_modules/fsevents/lib/binding/Release/node-v46-darwin-x64/fse.node\" is installed via remote\n\n> fsevents@1.0.2 install /Users/eugene/htdocs/nodejs_projects/flux/node_modules/webpack/node_modules/watchpack/node_modules/chokidar/node_modules/fsevents\n> node-pre-gyp install --fallback-to-build\n\n[fsevents] Success: \"/Users/eugene/htdocs/nodejs_projects/flux/node_modules/webpack/node_modules/watchpack/node_modules/chokidar/node_modules/fsevents/lib/binding/Release/node-v46-darwin-x64/fse.node\" is installed via remote\nnpm ERR! Darwin 15.0.0\nnpm ERR! argv \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! node v4.2.1\nnpm ERR! npm  v2.14.7\nnpm ERR! code ELIFECYCLE\n\nnpm ERR! contextify@0.1.14 install: `node-gyp rebuild`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the contextify@0.1.14 install script 'node-gyp rebuild'.\nnpm ERR! This is most likely a problem with the contextify package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node-gyp rebuild\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls contextify\nnpm ERR! There is likely additional logging output above.\n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/eugene/htdocs/nodejs_projects/flux/npm-debug.log\n```\n Why are you using 4.x when jest-cli 0.4.x requires 0.8 - 0.10?\n\nSent from my iPhone\n\n> On Oct 22, 2015, at 11:00 AM, epavlenko notifications@github.com wrote:\n> \n> Here is a link to the to the existing issue about contextify: brianmcd/contextify#188\n> \n> Here is my npm install log:\n> \n> npm install\n> npm WARN engine jest-cli@0.4.19: wanted: {\"node\":\"0.8.x || 0.10.x\"} (current: {\"node\":\"4.2.1\",\"npm\":\"2.14.7\"})\n> \n> > contextify@0.1.14 install /Users/eugene/htdocs/nodejs_projects/flux/node_modules/jest-cli/node_modules/jsdom/node_modules/contextify\n> > node-gyp rebuild\n> \n>   CXX(target) Release/obj.target/contextify/src/contextify.o\n> In file included from ../src/contextify.cc:3:\n> ../node_modules/nan/nan.h:261:25: error: redefinition of '_NanEnsureLocal'\n> NAN_INLINE v8::Local<T> _NanEnsureLocal(v8::Local<T> val) {\n>                         ^\n> ../node_modules/nan/nan.h:256:25: note: previous definition is here\n> NAN_INLINE v8::Local<T> _NanEnsureLocal(v8::Handle<T> val) {\n>                         ^\n> ../node_modules/nan/nan.h:661:13: error: no member named 'smalloc' in namespace 'node'\n>     , node::smalloc::FreeCallback callback\n>       ~~~~~~^\n> ../node_modules/nan/nan.h:672:12: error: no matching function for call to 'New'\n>     return node::Buffer::New(v8::Isolate::GetCurrent(), data, size);\n>            ^~~~~~~~~~~~~~~~~\n> /Users/eugene/.node-gyp/4.2.1/include/node/node_buffer.h:31:40: note: candidate function not viable: no known conversion from 'uint32_t'\n>       (aka 'unsigned int') to 'enum encoding' for 3rd argument\n> NODE_EXTERN v8::MaybeLocalv8::Object New(v8::Isolate\\* isolate,\n>                                        ^\n> /Users/eugene/.node-gyp/4.2.1/include/node/node_buffer.h:43:40: note: candidate function not viable: 2nd argument ('const char _') would\n>       lose const qualifier\n> NODE_EXTERN v8::MaybeLocalv8::Object New(v8::Isolate_ isolate,\n>                                        ^\n> /Users/eugene/.node-gyp/4.2.1/include/node/node_buffer.h:28:40: note: candidate function not viable: requires 2 arguments, but 3 were\n>       provided\n> NODE_EXTERN v8::MaybeLocalv8::Object New(v8::Isolate\\* isolate, size_t length);\n>                                        ^\n> /Users/eugene/.node-gyp/4.2.1/include/node/node_buffer.h:36:40: note: candidate function not viable: requires 5 arguments, but 3 were\n>       provided\n> NODE_EXTERN v8::MaybeLocalv8::Object New(v8::Isolate\\* isolate,\n>                                        ^\n> In file included from ../src/contextify.cc:3:\n> ../node_modules/nan/nan.h:676:12: error: no viable conversion from 'v8::MaybeLocalv8::Object' to 'v8::Localv8::Object'\n>     return node::Buffer::New(v8::Isolate::GetCurrent(), size);\n>            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:210:7: note: candidate constructor (the implicit copy constructor) not viable: no known\n>       conversion from 'v8::MaybeLocalv8::Object' to 'const v8::Localv8::Object &' for 1st argument\n> class Local {\n>       ^\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:210:7: note: candidate constructor (the implicit move constructor) not viable: no known\n>       conversion from 'v8::MaybeLocalv8::Object' to 'v8::Localv8::Object &&' for 1st argument\n> class Local {\n>       ^\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:214:13: note: candidate template ignored: could not match 'Local' against 'MaybeLocal'\n>   V8_INLINE Local(Local<S> that)\n>             ^\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:326:13: note: candidate template ignored: could not match 'S _' against\n>       'v8::MaybeLocalv8::Object'\n>   V8_INLINE Local(S_ that)\n>             ^\n> In file included from ../src/contextify.cc:3:\n> ../node_modules/nan/nan.h:683:26: error: no member named 'Use' in namespace 'node::Buffer'\n>     return node::Buffer::Use(v8::Isolate::GetCurrent(), data, size);\n>            ~~~~~~~~~~~~~~^\n> In file included from ../src/contextify.cc:1:\n> In file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:221:5: error: assigning to 'v8::Primitive *volatile' from incompatible type 'v8::Value *'\n>     TYPE_CHECK(T, S);\n>     ^~~~~~~~~~~~~~~~\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n>     _(static_cast<T_ volatile_>(0)) = static_cast<S_>(0);      \\\n>                                     ^ ~~~~~~~~~~~~~~~~~~\n> ../node_modules/nan/nan.h:414:12: note: in instantiation of function template specialization 'v8::Localv8::Primitive::Localv8::Value'\n>       requested here\n>     return NanEscapeScope(NanNew(v8::Undefined(v8::Isolate::GetCurrent())));\n>            ^\n> ../node_modules/nan/nan.h:398:30: note: expanded from macro 'NanEscapeScope'\n> \n> # define NanEscapeScope(val) scope.Escape(_NanEnsureLocal(val))\n> \n> ```\n>                          ^\n> ```\n> \n> In file included from ../src/contextify.cc:1:\n> In file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:221:5: error: assigning to 'v8::Boolean _volatile' from incompatible type 'v8::Value *'\n>     TYPE_CHECK(T, S);\n>     ^~~~~~~~~~~~~~~~\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n>     *(static_cast<T_ volatile_>(0)) = static_cast<S_>(0);      \\\n>                                     ^ ~~~~~~~~~~~~~~~~~~\n> ../node_modules/nan/nan.h:424:12: note: in instantiation of function template specialization 'v8::Localv8::Boolean::Localv8::Value'\n>       requested here\n>     return NanEscapeScope(NanNew(v8::True(v8::Isolate::GetCurrent())));\n>            ^\n> ../node_modules/nan/nan.h:398:30: note: expanded from macro 'NanEscapeScope'\n> \n> # define NanEscapeScope(val) scope.Escape(_NanEnsureLocal(val))\n> \n> ```\n>                          ^\n> ```\n> \n> In file included from ../src/contextify.cc:1:\n> In file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:221:5: error: assigning to 'v8::Function _volatile' from incompatible type 'v8::Value *'\n>     TYPE_CHECK(T, S);\n>     ^~~~~~~~~~~~~~~~\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n>     *(static_cast<T_ volatile_>(0)) = static_cast<S_>(0);      \\\n>                                     ^ ~~~~~~~~~~~~~~~~~~\n> ../node_modules/nan/nan.h:1514:12: note: in instantiation of function template specialization 'v8::Localv8::Function::Localv8::Value'\n>       requested here\n>     return NanEscapeScope(NanNew(handle)->Get(kCallbackIndex)\n>            ^\n> ../node_modules/nan/nan.h:398:30: note: expanded from macro 'NanEscapeScope'\n> \n> # define NanEscapeScope(val) scope.Escape(_NanEnsureLocal(val))\n> \n> ```\n>                          ^\n> ```\n> \n> In file included from ../src/contextify.cc:1:\n> In file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:221:5: error: assigning to 'v8::Object _volatile' from incompatible type 'v8::Value *'\n>     TYPE_CHECK(T, S);\n>     ^~~~~~~~~~~~~~~~\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n>     *(static_cast<T_ volatile_>(0)) = static_cast<S_>(0);      \\\n>                                     ^ ~~~~~~~~~~~~~~~~~~\n> ../node_modules/nan/nan.h:1632:12: note: in instantiation of function template specialization 'v8::Localv8::Object::Localv8::Value'\n>       requested here\n>     return NanEscapeScope(handle->Get(NanNew(key)).Asv8::Object());\n>            ^\n> ../node_modules/nan/nan.h:398:30: note: expanded from macro 'NanEscapeScope'\n> \n> # define NanEscapeScope(val) scope.Escape(_NanEnsureLocal(val))\n> \n> ```\n>                          ^\n> ```\n> \n> In file included from ../src/contextify.cc:1:\n> In file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:221:5: error: assigning to 'v8::Value _volatile' from incompatible type 'v8::Context *'\n>     TYPE_CHECK(T, S);\n>     ^~~~~~~~~~~~~~~~\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n>     *(static_cast<T_ volatile_>(0)) = static_cast<S_>(0);      \\\n>                                     ^ ~~~~~~~~~~~~~~~~~~\n> ../node_modules/nan/nan.h:267:10: note: in instantiation of function template specialization 'v8::Localv8::Value::Localv8::Context'\n>       requested here\n>   return NanNew(val);\n>          ^\n> ../src/contextify.cc:159:16: note: in instantiation of function template specialization '_NanEnsureLocalv8::Local<v8::Context >'\n>       requested here\n>         return NanEscapeScope(NanNew<Context>(\n>                ^\n> ../node_modules/nan/nan.h:398:43: note: expanded from macro 'NanEscapeScope'\n> \n> # define NanEscapeScope(val) scope.Escape(_NanEnsureLocal(val))\n> \n> ```\n>                                       ^\n> ```\n> \n> In file included from ../src/contextify.cc:1:\n> In file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:221:5: error: assigning to 'v8::Context _volatile' from incompatible type 'v8::Value *'\n>     TYPE_CHECK(T, S);\n>     ^~~~~~~~~~~~~~~~\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n>     *(static_cast<T_ volatile_>(0)) = static_cast<S_>(0);      \\\n>                                     ^ ~~~~~~~~~~~~~~~~~~\n> ../src/contextify.cc:159:16: note: in instantiation of function template specialization 'v8::Localv8::Context::Localv8::Value'\n>       requested here\n>         return NanEscapeScope(NanNew<Context>(\n>                ^\n> ../node_modules/nan/nan.h:398:30: note: expanded from macro 'NanEscapeScope'\n> \n> # define NanEscapeScope(val) scope.Escape(_NanEnsureLocal(val))\n> \n> ```\n>                          ^\n> ```\n> \n> In file included from ../src/contextify.cc:1:\n> In file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:7380:3: error: assigning to 'v8::Integer _volatile' from incompatible type 'v8::Value *'\n>   TYPE_CHECK(T, S);\n>   ^~~~~~~~~~~~~~~~\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n>     *(static_cast<T_ volatile_>(0)) = static_cast<S_>(0);      \\\n>                                     ^ ~~~~~~~~~~~~~~~~~~\n> ../src/contextify.cc:211:13: note: in instantiation of function template specialization 'v8::ReturnValuev8::Integer::Setv8::Value'\n>       requested here\n>             NanReturnValue(NanNew<Integer>(None));\n>             ^\n> ../node_modules/nan/nan.h:401:61: note: expanded from macro 'NanReturnValue'\n> \n> # define NanReturnValue(value) return args.GetReturnValue().Set(_NanEnsureLocal(value))\n> \n> ```\n>                                                         ^\n> ```\n> \n> In file included from ../src/contextify.cc:1:\n> In file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:7380:3: error: assigning to 'v8::Boolean _volatile' from incompatible type 'v8::Value *'\n>   TYPE_CHECK(T, S);\n>   ^~~~~~~~~~~~~~~~\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n>     *(static_cast<T_ volatile_>(0)) = static_cast<S_>(0);      \\\n>                                     ^ ~~~~~~~~~~~~~~~~~~\n> ../src/contextify.cc:225:13: note: in instantiation of function template specialization 'v8::ReturnValuev8::Boolean::Setv8::Value'\n>       requested here\n>             NanReturnValue(NanNew<Boolean>(false));\n>             ^\n> ../node_modules/nan/nan.h:401:61: note: expanded from macro 'NanReturnValue'\n> \n> # define NanReturnValue(value) return args.GetReturnValue().Set(_NanEnsureLocal(value))\n> \n> ```\n>                                                         ^\n> ```\n> \n> In file included from ../src/contextify.cc:1:\n> In file included from /Users/eugene/.node-gyp/4.2.1/include/node/node.h:42:\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:7380:3: error: assigning to 'v8::Array _volatile' from incompatible type 'v8::Value *'\n>   TYPE_CHECK(T, S);\n>   ^~~~~~~~~~~~~~~~\n> /Users/eugene/.node-gyp/4.2.1/include/node/v8.h:180:37: note: expanded from macro 'TYPE_CHECK'\n>     *(static_cast<T_ volatile_>(0)) = static_cast<S_>(0);      \\\n>                                     ^ ~~~~~~~~~~~~~~~~~~\n> ../src/contextify.cc:236:13: note: in instantiation of function template specialization 'v8::ReturnValuev8::Array::Setv8::Value'\n>       requested here\n>             NanReturnValue(blank);\n>             ^\n> ../node_modules/nan/nan.h:401:61: note: expanded from macro 'NanReturnValue'\n> \n> # define NanReturnValue(value) return args.GetReturnValue().Set(_NanEnsureLocal(value))\n> \n> ```\n>                                                         ^\n> ```\n> \n> 14 errors generated.\n> make: **\\* [Release/obj.target/contextify/src/contextify.o] Error 1\n> gyp ERR! build error \n> gyp ERR! stack Error: `make` failed with exit code: 2\n> gyp ERR! stack     at ChildProcess.onExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:270:23)\n> gyp ERR! stack     at emitTwo (events.js:87:13)\n> gyp ERR! stack     at ChildProcess.emit (events.js:172:7)\n> gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)\n> gyp ERR! System Darwin 15.0.0\n> gyp ERR! command \"/usr/local/bin/node\" \"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\n> gyp ERR! cwd /Users/eugene/htdocs/nodejs_projects/flux/node_modules/jest-cli/node_modules/jsdom/node_modules/contextify\n> gyp ERR! node -v v4.2.1\n> gyp ERR! node-gyp -v v3.0.3\n> gyp ERR! not ok \n> \\\n> \n> > fsevents@1.0.2 install /Users/eugene/htdocs/nodejs_projects/flux/node_modules/babel/node_modules/chokidar/node_modules/fsevents\n> > node-pre-gyp install --fallback-to-build\n> \n> [fsevents] Success: \"/Users/eugene/htdocs/nodejs_projects/flux/node_modules/babel/node_modules/chokidar/node_modules/fsevents/lib/binding/Release/node-v46-darwin-x64/fse.node\" is installed via remote\n> \n> > fsevents@1.0.2 install /Users/eugene/htdocs/nodejs_projects/flux/node_modules/webpack/node_modules/watchpack/node_modules/chokidar/node_modules/fsevents\n> > node-pre-gyp install --fallback-to-build\n> \n> [fsevents] Success: \"/Users/eugene/htdocs/nodejs_projects/flux/node_modules/webpack/node_modules/watchpack/node_modules/chokidar/node_modules/fsevents/lib/binding/Release/node-v46-darwin-x64/fse.node\" is installed via remote\n> npm ERR! Darwin 15.0.0\n> npm ERR! argv \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"install\"\n> npm ERR! node v4.2.1\n> npm ERR! npm  v2.14.7\n> npm ERR! code ELIFECYCLE\n> \n> npm ERR! contextify@0.1.14 install: `node-gyp rebuild`\n> npm ERR! Exit status 1\n> npm ERR! \n> npm ERR! Failed at the contextify@0.1.14 install script 'node-gyp rebuild'.\n> npm ERR! This is most likely a problem with the contextify package,\n> npm ERR! not with npm itself.\n> npm ERR! Tell the author that this fails on your system:\n> npm ERR!     node-gyp rebuild\n> npm ERR! You can get their info via:\n> npm ERR!     npm owner ls contextify\n> npm ERR! There is likely additional logging output above.\n> \n> npm ERR! Please include the following file with any support request:\n> npm ERR!     /Users/eugene/htdocs/nodejs_projects/flux/npm-debug.log\n> \u2014\n> Reply to this email directly or view it on GitHub.\n I understand that. I just wanted to let contributors know, so they could fix that incompatibility problem.\nThe same problem there is with node 4.0.0.\n Do we not want feedback related to things not working in the latest stable node version? Seems like that's what an issue tracker is for. Also, npm 3 deprecates the node engine requirement at the module level.\n @chevex @epavlenko -- I'm not a maintainer here, obviously.  But `jest-cli` >= 0.5.x doesn't have a dependency on `contextify` and is the version of `jest` that is intended for `iojs`-ish node versions.  Even without the current compile issue in El Capitan, you still wouldn't have a working `jest-cli 0.4.19` installed under 4.2.x (or any iojs version, for that matter), since the jest test modules would fail to self-register.\n\nSuffice to say that `npm` warnings are there for a reason, so it should come as no surprise when stuff breaks when you ignore them.\n\nThat said, since `jest-cli-0.4.x` is broken for any node > 0.12 and `jest-cli >= 0.5` doesn't run in 0.8 or 0.10 (and possibly 0.12), I'm not sure what the maintainers will decide to do...damned if you do damned if you don't, I guess.\n\n+1 for a fix to this.\n Failing to build also on Debian here, \n\n```\n$ nvm use v4.1.1\nNow using node v4.1.1 (npm v3.3.5)\ntop@Bkkdaily:~/flux/examples/flux-chat$ npm install\nnpm WARN engine jest-cli@0.4.19: wanted: {\"node\":\"0.8.x || 0.10.x\"} (current: {\"node\":\"4.1.1\",\"npm\":\"3.3.5\"})\nnpm WARN install Couldn't install optional dependency: Unsupported\nnpm WARN prefer global coffee-script@1.10.0 should be installed with -g\nnpm WARN prefer global cover@0.2.9 should be installed with -g\n\n> contextify@0.1.14 install /home/top/flux/examples/flux-chat/node_modules/contextify\n> node-gyp rebuild\n\nmake: Entering directory `/home/top/flux/examples/flux-chat/node_modules/contextify/build'\n  CXX(target) Release/obj.target/contextify/src/contextify.o\nIn file included from ../src/contextify.cc:3:0:\n../../nan/nan.h:261:25: error: redefinition of \u2018template<class T> v8::Local<T> _NanEnsureLocal(v8::Local<T>)\u2019\n../../nan/nan.h:256:25: error: \u2018template<class T> v8::Local<T> _NanEnsureLocal(v8::Handle<T>)\u2019 previously declared here\n../../nan/nan.h:661:13: error: \u2018node::smalloc\u2019 has not been declared\n../../nan/nan.h:661:35: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018callback\u2019\n../../nan/nan.h: In function \u2018v8::Local<v8::Object> NanNewBufferHandle(char*, size_t, int)\u2019:\n../../nan/nan.h:665:50: error: \u2018callback\u2019 was not declared in this scope\n../../nan/nan.h:665:60: error: \u2018hint\u2019 was not declared in this scope\n../../nan/nan.h: In function \u2018v8::Local<v8::Object> NanNewBufferHandle(const char*, uint32_t)\u2019:\n../../nan/nan.h:672:67: error: call of overloaded \u2018New(v8::Isolate*, const char*&, uint32_t&)\u2019 is ambiguous\n../../nan/nan.h:672:67: note: candidates are:\nIn file included from ../../nan/nan.h:25:0,\n                 from ../src/contextify.cc:3:\n/home/top/.node-gyp/4.1.1/include/node/node_buffer.h:31:40: note: v8::MaybeLocal<v8::Object> node::Buffer::New(v8::Isolate*, v8::Local<v8::String>, node::encoding) <near match>\n/home/top/.node-gyp/4.1.1/include/node/node_buffer.h:31:40: note:   no known conversion for argument 3 from \u2018uint32_t {aka unsigned int}\u2019 to \u2018node::encoding\u2019\n/home/top/.node-gyp/4.1.1/include/node/node_buffer.h:43:40: note: v8::MaybeLocal<v8::Object> node::Buffer::New(v8::Isolate*, char*, size_t) <near match>\n/home/top/.node-gyp/4.1.1/include/node/node_buffer.h:43:40: note:   no known conversion for argument 2 from \u2018const char*\u2019 to \u2018char*\u2019\nIn file included from ../src/contextify.cc:3:0:\n../../nan/nan.h: In function \u2018v8::Local<v8::Object> NanNewBufferHandle(uint32_t)\u2019:\n../../nan/nan.h:676:61: error: could not convert \u2018node::Buffer::New(v8::Isolate::GetCurrent(), ((size_t)size))\u2019 from \u2018v8::MaybeLocal<v8::Object>\u2019 to \u2018v8::Local<v8::Object>\u2019\n../../nan/nan.h: In function \u2018v8::Local<v8::Object> NanBufferUse(char*, uint32_t)\u2019:\n../../nan/nan.h:683:12: error: \u2018Use\u2019 is not a member of \u2018node::Buffer\u2019\nmake: *** [Release/obj.target/contextify/src/contextify.o] Error 1\nmake: Leaving directory `/home/top/flux/examples/flux-chat/node_modules/contextify/build'\ngyp ERR! build error \ngyp ERR! stack Error: `make` failed with exit code: 2\ngyp ERR! stack     at ChildProcess.onExit (/usr/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:270:23)\ngyp ERR! stack     at emitTwo (events.js:87:13)\ngyp ERR! stack     at ChildProcess.emit (events.js:172:7)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)\ngyp ERR! System Linux 3.2.0-4-amd64\ngyp ERR! command \"/home/top/.nvm/versions/node/v4.1.1/bin/node\" \"/usr/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd /home/top/flux/examples/flux-chat/node_modules/contextify\ngyp ERR! node -v v4.1.1\ngyp ERR! node-gyp -v v3.0.3\ngyp ERR! not ok \nflux-chat@0.0.2 /home/top/flux/examples/flux-chat\n\u251c\u2500\u2500 bluebird@2.9.34  extraneous\n\u251c\u2500\u252c browserify@6.3.4\n\u2502 \u251c\u2500\u252c browser-pack@3.2.0\n\u2502 \u2502 \u251c\u2500\u252c combine-source-map@0.3.0\n\u2502 \u2502 \u2502 \u251c\u2500\u252c inline-source-map@0.3.1\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c source-map@0.3.0\n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 amdefine@1.0.0 \n\u2502 \u2502 \u2502 \u2514\u2500\u252c source-map@0.1.43\n\u2502 \u2502 \u2502   \u2514\u2500\u2500 amdefine@1.0.0 \n\u2502 \u2502 \u2514\u2500\u252c through2@0.5.1\n\u2502 \u2502   \u2514\u2500\u252c readable-stream@1.0.33\n\u2502 \u2502     \u2514\u2500\u2500 core-util-is@1.0.1 \n\u2502 \u251c\u2500\u252c browser-resolve@1.10.1\n\u2502 \u2502 \u2514\u2500\u2500 resolve@1.1.6 \n\u2502 \u251c\u2500\u252c deps-sort@1.3.9\n\u2502 \u2502 \u2514\u2500\u252c JSONStream@1.0.6\n\u2502 \u2502   \u2514\u2500\u2500 through@2.3.8 \n\u2502 \u251c\u2500\u252c glob@4.5.3\n\u2502 \u2502 \u251c\u2500\u252c inflight@1.0.4 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 wrappy@1.0.1 \n\u2502 \u2502 \u251c\u2500\u252c minimatch@2.0.10 \n\u2502 \u2502 \u2502 \u2514\u2500\u252c brace-expansion@1.1.1 \n\u2502 \u2502 \u2502   \u251c\u2500\u2500 balanced-match@0.2.1 \n\u2502 \u2502 \u2502   \u2514\u2500\u2500 concat-map@0.0.1 \n\u2502 \u2502 \u2514\u2500\u252c once@1.3.2 \n\u2502 \u2502   \u2514\u2500\u2500 wrappy@1.0.1 \n\u2502 \u251c\u2500\u2500 inherits@2.0.1 \n\u2502 \u251c\u2500\u252c insert-module-globals@6.6.3\n\u2502 \u2502 \u251c\u2500\u252c combine-source-map@0.6.1\n\u2502 \u2502 \u2502 \u2514\u2500\u252c source-map@0.4.4 \n\u2502 \u2502 \u2502   \u2514\u2500\u2500 amdefine@1.0.0 \n\u2502 \u2502 \u251c\u2500\u252c JSONStream@1.0.6\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 through@2.3.8 \n\u2502 \u2502 \u2514\u2500\u2500 xtend@4.0.0 \n\u2502 \u251c\u2500\u2500 isarray@0.0.1 \n\u2502 \u251c\u2500\u252c JSONStream@0.8.4\n\u2502 \u2502 \u2514\u2500\u2500 through@2.3.8 \n\u2502 \u251c\u2500\u252c module-deps@3.9.1\n\u2502 \u2502 \u251c\u2500\u252c detective@4.2.0\n\u2502 \u2502 \u2502 \u2514\u2500\u252c escodegen@1.7.0 \n\u2502 \u2502 \u2502   \u251c\u2500\u2500 esprima@1.2.5 \n\u2502 \u2502 \u2502   \u251c\u2500\u2500 estraverse@1.9.3 \n\u2502 \u2502 \u2502   \u251c\u2500\u2500 esutils@2.0.2 \n\u2502 \u2502 \u2502   \u251c\u2500\u252c optionator@0.5.0 \n\u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 deep-is@0.1.3 \n\u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 fast-levenshtein@1.0.7 \n\u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 levn@0.2.5 \n\u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 prelude-ls@1.1.2 \n\u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 type-check@0.3.1 \n\u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 wordwrap@0.0.3 \n\u2502 \u2502 \u2502   \u2514\u2500\u252c source-map@0.2.0 \n\u2502 \u2502 \u2502     \u2514\u2500\u2500 amdefine@1.0.0 \n\u2502 \u2502 \u251c\u2500\u252c JSONStream@1.0.6\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 through@2.3.8 \n\u2502 \u2502 \u251c\u2500\u2500 resolve@1.1.6 \n\u2502 \u2502 \u251c\u2500\u252c stream-combiner2@1.0.2\n\u2502 \u2502 \u2502 \u2514\u2500\u252c through2@0.5.1\n\u2502 \u2502 \u2502   \u2514\u2500\u252c readable-stream@1.0.33\n\u2502 \u2502 \u2502     \u2514\u2500\u2500 core-util-is@1.0.1 \n\u2502 \u2502 \u2514\u2500\u2500 xtend@4.0.0 \n\u2502 \u251c\u2500\u252c readable-stream@1.1.13 \n\u2502 \u2502 \u2514\u2500\u2500 core-util-is@1.0.1 \n\u2502 \u251c\u2500\u2500 string_decoder@0.10.31 \n\u2502 \u251c\u2500\u252c through2@1.1.1\n\u2502 \u2502 \u2514\u2500\u2500 xtend@4.0.0 \n\u2502 \u2514\u2500\u252c umd@2.1.0\n\u2502   \u251c\u2500\u252c ruglify@1.0.0\n\u2502   \u2502 \u2514\u2500\u252c uglify-js@2.2.5\n\u2502   \u2502   \u251c\u2500\u252c optimist@0.3.7\n\u2502   \u2502   \u2502 \u2514\u2500\u2500 wordwrap@0.0.3 \n\u2502   \u2502   \u2514\u2500\u252c source-map@0.1.43\n\u2502   \u2502     \u2514\u2500\u2500 amdefine@1.0.0 \n\u2502   \u2514\u2500\u2500 through@2.3.8 \n\u251c\u2500\u2500 coffee-script@1.10.0  extraneous\n\u251c\u2500\u2500 cover@0.2.9  extraneous\n\u251c\u2500\u2500 cssstyle@0.2.30  extraneous\n\u251c\u2500\u2500 diff@1.0.8  extraneous\n\u251c\u2500\u252c envify@3.4.0\n\u2502 \u251c\u2500\u252c jstransform@10.1.0\n\u2502 \u2502 \u2514\u2500\u252c source-map@0.1.31\n\u2502 \u2502   \u2514\u2500\u2500 amdefine@1.0.0 \n\u2502 \u2514\u2500\u2500 through@2.3.8 \n\u251c\u2500\u2500 graceful-fs@2.0.3  extraneous\n\u251c\u2500\u2500 harmonize@1.4.2  extraneous\n\u251c\u2500\u2500 htmlparser2@3.8.3  extraneous\n\u251c\u2500\u2500 istanbul@0.3.22  extraneous\n\u251c\u2500\u2500 jasmine-only@0.1.0  extraneous\n\u251c\u2500\u2500 jasmine-pit@2.0.2  extraneous\n\u251c\u2500\u2500 lodash.template@3.6.2  extraneous\n\u251c\u2500\u2500 node-haste@1.2.8  extraneous\n\u251c\u2500\u2500 node-worker-pool@2.4.5  extraneous\n\u251c\u2500\u2500 nwmatcher@1.3.6  extraneous\n\u251c\u2500\u252c reactify@0.15.2\n\u2502 \u251c\u2500\u252c jstransform@6.3.2\n\u2502 \u2502 \u2514\u2500\u252c source-map@0.1.31\n\u2502 \u2502   \u2514\u2500\u2500 amdefine@1.0.0 \n\u2502 \u251c\u2500\u252c react-tools@0.12.2\n\u2502 \u2502 \u251c\u2500\u252c commoner@0.10.3\n\u2502 \u2502 \u2502 \u251c\u2500\u252c glob@4.2.2\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c inflight@1.0.4 \n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 wrappy@1.0.1 \n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 inherits@2.0.1 \n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c once@1.3.2 \n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 wrappy@1.0.1 \n\u2502 \u2502 \u2502 \u2514\u2500\u252c mkdirp@0.5.1 \n\u2502 \u2502 \u2502   \u2514\u2500\u2500 minimist@0.0.8 \n\u2502 \u2502 \u2514\u2500\u252c jstransform@8.2.0\n\u2502 \u2502   \u2514\u2500\u252c source-map@0.1.31\n\u2502 \u2502     \u2514\u2500\u2500 amdefine@1.0.0 \n\u2502 \u2514\u2500\u2500 through@2.3.8 \n\u251c\u2500\u2500 request@2.65.0  extraneous\n\u251c\u2500\u2500 resolve@0.6.3  extraneous\n\u251c\u2500\u2500 through@2.3.8  extraneous\n\u251c\u2500\u252c uglify-js@2.4.24\n\u2502 \u2514\u2500\u252c source-map@0.1.34\n\u2502   \u2514\u2500\u2500 amdefine@1.0.0 \n\u251c\u2500\u252c watchify@2.6.2\n\u2502 \u251c\u2500\u252c browserify@9.0.8\n\u2502 \u2502 \u251c\u2500\u252c browser-pack@4.0.4\n\u2502 \u2502 \u2502 \u251c\u2500\u252c combine-source-map@0.3.0\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c inline-source-map@0.3.1\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c source-map@0.3.0\n\u2502 \u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 amdefine@1.0.0 \n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c source-map@0.1.43\n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 amdefine@1.0.0 \n\u2502 \u2502 \u2502 \u251c\u2500\u252c JSONStream@1.0.6\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 through@2.3.8 \n\u2502 \u2502 \u2502 \u2514\u2500\u252c through2@0.5.1\n\u2502 \u2502 \u2502   \u2514\u2500\u252c readable-stream@1.0.33\n\u2502 \u2502 \u2502     \u2514\u2500\u2500 core-util-is@1.0.1 \n\u2502 \u2502 \u251c\u2500\u252c deps-sort@1.3.9\n\u2502 \u2502 \u2502 \u2514\u2500\u252c JSONStream@1.0.6\n\u2502 \u2502 \u2502   \u2514\u2500\u2500 through@2.3.8 \n\u2502 \u2502 \u251c\u2500\u252c glob@4.5.3\n\u2502 \u2502 \u2502 \u251c\u2500\u252c inflight@1.0.4 \n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 wrappy@1.0.1 \n\u2502 \u2502 \u2502 \u251c\u2500\u252c minimatch@2.0.10 \n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c brace-expansion@1.1.1 \n\u2502 \u2502 \u2502 \u2502   \u251c\u2500\u2500 balanced-match@0.2.1 \n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 concat-map@0.0.1 \n\u2502 \u2502 \u2502 \u2514\u2500\u252c once@1.3.2 \n\u2502 \u2502 \u2502   \u2514\u2500\u2500 wrappy@1.0.1 \n\u2502 \u2502 \u251c\u2500\u2500 inherits@2.0.1 \n\u2502 \u2502 \u251c\u2500\u252c insert-module-globals@6.6.3\n\u2502 \u2502 \u2502 \u251c\u2500\u252c combine-source-map@0.6.1\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c source-map@0.4.4 \n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 amdefine@1.0.0 \n\u2502 \u2502 \u2502 \u251c\u2500\u252c JSONStream@1.0.6\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 through@2.3.8 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 xtend@4.0.0 \n\u2502 \u2502 \u251c\u2500\u2500 isarray@0.0.1 \n\u2502 \u2502 \u251c\u2500\u252c JSONStream@0.10.0\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 through@2.3.8 \n\u2502 \u2502 \u251c\u2500\u252c module-deps@3.9.1\n\u2502 \u2502 \u2502 \u251c\u2500\u252c detective@4.2.0\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c escodegen@1.7.0 \n\u2502 \u2502 \u2502 \u2502   \u251c\u2500\u2500 esprima@1.2.5 \n\u2502 \u2502 \u2502 \u2502   \u251c\u2500\u2500 estraverse@1.9.3 \n\u2502 \u2502 \u2502 \u2502   \u251c\u2500\u2500 esutils@2.0.2 \n\u2502 \u2502 \u2502 \u2502   \u251c\u2500\u252c optionator@0.5.0 \n\u2502 \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 deep-is@0.1.3 \n\u2502 \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 fast-levenshtein@1.0.7 \n\u2502 \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 levn@0.2.5 \n\u2502 \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 prelude-ls@1.1.2 \n\u2502 \u2502 \u2502 \u2502   \u2502 \u251c\u2500\u2500 type-check@0.3.1 \n\u2502 \u2502 \u2502 \u2502   \u2502 \u2514\u2500\u2500 wordwrap@0.0.3 \n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u252c source-map@0.2.0 \n\u2502 \u2502 \u2502 \u2502     \u2514\u2500\u2500 amdefine@1.0.0 \n\u2502 \u2502 \u2502 \u251c\u2500\u252c JSONStream@1.0.6\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 through@2.3.8 \n\u2502 \u2502 \u2502 \u251c\u2500\u252c stream-combiner2@1.0.2\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c through2@0.5.1\n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u252c readable-stream@1.0.33\n\u2502 \u2502 \u2502 \u2502     \u2514\u2500\u2500 core-util-is@1.0.1 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 xtend@4.0.0 \n\u2502 \u2502 \u251c\u2500\u252c readable-stream@1.1.13 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 core-util-is@1.0.1 \n\u2502 \u2502 \u251c\u2500\u2500 resolve@1.1.6 \n\u2502 \u2502 \u251c\u2500\u2500 string_decoder@0.10.31 \n\u2502 \u2502 \u2514\u2500\u252c through2@1.1.1\n\u2502 \u2502   \u2514\u2500\u2500 xtend@4.0.0 \n\u2502 \u251c\u2500\u252c chokidar@0.12.6\n\u2502 \u2502 \u2514\u2500\u252c readdirp@1.3.0\n\u2502 \u2502   \u251c\u2500\u2500 graceful-fs@2.0.3 \n\u2502 \u2502   \u2514\u2500\u252c readable-stream@1.0.33\n\u2502 \u2502     \u251c\u2500\u2500 core-util-is@1.0.1 \n\u2502 \u2502     \u251c\u2500\u2500 inherits@2.0.1 \n\u2502 \u2502     \u251c\u2500\u2500 isarray@0.0.1 \n\u2502 \u2502     \u2514\u2500\u2500 string_decoder@0.10.31 \n\u2502 \u251c\u2500\u252c through2@0.5.1\n\u2502 \u2502 \u2514\u2500\u252c readable-stream@1.0.33\n\u2502 \u2502   \u251c\u2500\u2500 core-util-is@1.0.1 \n\u2502 \u2502   \u251c\u2500\u2500 inherits@2.0.1 \n\u2502 \u2502   \u251c\u2500\u2500 isarray@0.0.1 \n\u2502 \u2502   \u2514\u2500\u2500 string_decoder@0.10.31 \n\u2502 \u2514\u2500\u2500 xtend@4.0.0 \n\u2514\u2500\u2500 xmlhttprequest@1.8.0  extraneous\n\nnpm WARN EPACKAGEJSON flux-chat@0.0.2 No license field.\nnpm ERR! Linux 3.2.0-4-amd64\nnpm ERR! argv \"/home/top/.nvm/versions/node/v4.1.1/bin/node\" \"/usr/bin/npm\" \"install\"\nnpm ERR! node v4.1.1\nnpm ERR! npm  v3.3.5\nnpm ERR! code ELIFECYCLE\n\nnpm ERR! contextify@0.1.14 install: `node-gyp rebuild`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the contextify@0.1.14 install script 'node-gyp rebuild'.\nnpm ERR! This is most likely a problem with the contextify package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node-gyp rebuild\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls contextify\nnpm ERR! There is likely additional logging output above.\n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/top/flux/examples/flux-chat/npm-debug.log\n```\n  Hi there,\n\nConsider the following scenario. We have an app with a router:\n- Each time the user clicks a link, we catch it and dispatch an action, for example, clicking on `\"/profile\"` dispatches `\"SHOW_PROFILE\"` (and we update the url as well, of course).\n- We have **Stores** which register to those `\"SHOW_PAGE\"` actions to do stuff. For example, **_analyticsStore**_ which sends events to your analytics solution or **_breadcrumbsStore**_ which updates the breadcrumb with the actual page info.\n\nSo far, so well. But when a new user creates an account, it is a redirected to a new screen called `AddNameAndCreateFirstPost`. In that screen...\n- The user enters his own name.\n- The user enters the content of his first Post.\n- The user clicks the `Submit` button.\n\n_BTW, I'm using optimistic UI updates here, so everything is sync._\n\nWhen the user clicks that `Submit` button, we need to store his name in the **_userStore**_, store the new Post in the **_postsStore**_ and redirect him to the dashboard.\n\nThe **Stores** are currently registered to these actions, used among the app:\n- **_userStore**_ is registered to `\"UPDATE_USER_NAME\"` to change the name.\n- **_postsStore**_ is registered to `\"NEW_POST_CREATED\"` to add new posts.\n- **_analyticsStore**_ is registered to `\"SHOW_DASHBOARD\"` to send analytics.\n- **_breadcrumbsStore**_ is registered to `\"SHOW_DASHBOARD\"` to change the breadcrumb.\n\nI see these possible implementations:\n- When user clicks `Submit` we dispatch `\"CREATE_FIRST_POST_FORM_SUBMITTED\"`. \n  This makes sense, is what the user did, but we will have to change all our **Stores** and add that `\"CREATE_FIRST_POST_FORM_SUBMITTED\"` action when they register to `\"UPDATE_USER_NAME\"`, `\"NEW_POST_CREATED\"` or `\"SHOW_DASHBOARD\"`. \n  This is really ugly and couples the **Stores** to too-specific actions. I am sure when the app grows somebody will add a new **Store** and will forget to register to the `\"CREATE_FIRST_POST_FORM_SUBMITTED\"` action when he is registering to `\"UPDATE_USER_NAME\"`, `\"NEW_POST_CREATED\"` or `\"SHOW_DASHBOARD\"`.\n- When user clicks `Submit` we dispatch three actions, one after another to avoid the `Cannot dispatch in the middle of a dispatch` restriction. First `\"UPDATE_USER_NAME\"`, then `\"NEW_POST_CREATED\"` and finally `\"SHOW_DASHBOARD\"`.\n\n``` javascript\n// ...\n  Dispatcher.dispatch({ actionType: \"UPDATE_USER_NAME\", userName: ... });\n  Dispatcher.dispatch({ actionType: \"NEW_POST_CREATED\", postContent: ... });\n  Dispatcher.dispatch({ actionType: \"SHOW_DASHBOARD\" });\n```\n\nThis second implementation seems ok, but I have never seen dispatching more than one action in any Flux example, so I am suspicious. Besides, we are making flow decisions in the UI (are we?), not sure if that is right as well.\n\nI am wondering if I am missing something and this could be addressed in some other way. I have researched a lot but I have not seen any good Flux and Router examples, where the router actually dispatch actions and after some action you need to redirect the user to another page.\n\nThanks in advance!\n See comment and response here:  https://github.com/facebook/flux/issues/106#issuecomment-104922886\n Thanks @sterpe.\n\n@fisherwebdev said this in that thread:\n_\"@sterpe Those sequential calls to dispatch are happening synchronously. They are separate dispatches, so yes this works fine. However, I've never seen that done at FB, and I'm not sure why anyone would do that. We would simply merge them, as you suggested.\"_\n\nIn my case, merging dispatches seems far from ideal and dispatching one after the other seems strange as well. Like @fisherwebdev said, he never saw it before.\n\nSo I still have the doubt of which implementation is better, or if there is another I didn't think about.\n Why is merging of the actions strange to you? Generally an action fired should correspond to what the user is doing, it doesn't correspond to what you want a store to do.\n\nThis doesn't mean you have to duplicate logic in many places though, for common things you can pull it out into helper functions. Consider for a moment if you had one giant store, your action handling may look this:\n\n``` javascript\nreduce(state, action) {\n  switch (action.type) {\n    case 'change_username':\n      return updateUserName(state, action.userName);\n\n    case 'create_first_post_form_submitted':\n      state = updateUserName(state, action.userName);\n      state = newPostCreated(state, action.postContent);\n      state = showDashboard(state);\n      return state;\n\n    case 'dashboard_clicked':\n      return showDashboard(state);\n  }\n\n  return state;\n}\n```\n\nHere we don't duplicate the logic for common things an action may do. We do have a clear list of things the user can do, and then for each of those things a list of how it affects the state.\n We have also run into cases where firing multiple actions synchronously has broken the UI. What tends to happen is someone assumes that a button being clicked will cause one chunk of work to happen and then not handle intermediate states. Something like\n\n``` javascript\ndispatch({type: 'set_tab', tab: 'dashboardTab'});\n\n// let's pretend props.dashboard is null until after this action\ndispatch({type: 'select_default_dashboard'});\n\n// This is the component that is rendered when the dashboard is rendered\nfunction DashboardView(props) {\n  const {dashboard} = props;\n  return (\n    <div>\n      <h1>{dashboard.name}</h1>\n      <div>{renderDashboardContent(dashboard.content)}</div>\n    </div>\n  );\n}\n```\n\nIn the render function it is perfectly reasonable to assume that when rendering the dashboard view there is some dashboard that exists. And it kind of appears safe because the default dashboard is set immediately after switching to this view. However; it will cause an exceptions because as soon as that first dispatch happens the react tree will re-render with an inconsistent view of your stores.\n\nThis scenario has played out a few times for us. It's usually been hard to detect because it worked at first, but then while refactoring parts of our flux infrastructure all of these places started breaking.\n\nThe two solutions are to either always dispatch exactly one thing describing the entire action that is taking place, or write logic to safely handle intermediate steps that may happen in your application. Generally we have preferred the former.\n @kyldvs I eventually ran into that too.\n Many thanks for your answer @kyldvs. \n\n_I hope you get my answer as a constructive argument. I don't mean to be rude questioning yours. I really want to get a better understanding of this case and it's possible implications and I hope it helps other people with the same problem as well._\n\nWhat is bugging me about \"merging several actions\" into one is that you have to remember a lot of specific actions, which doesn't describe what is really happening.\n\nIf you have one giant store, like you wrote, it is clear what is happening and easier to debug. But when the app grows, I think this may lead to problems. \n\nThink about the `\"SHOW_DASHBOARD\"` action, for example. Imagine it's used in 10 different **Stores**. And imagine we merge a lot of more actions like this, which they end up redirecting the user to the dashboard. It's quite possible that you end up having something like this:\n\n``` javascript\n// analyticsStore.js\nDispatcher.register(function(payload){\n  switch(payload.actionType) {\n    case 'SHOW_DASHBOARD':\n    case 'CREATE_FIRST_POST_FORM_SUBMITTED':\n    case 'LOGIN_SUCCESSFUL':\n    case 'CURRENT_POST_DELETED':\n    case 'CURRENT_PAGE_DELETED':\n    case 'UPDATE_FINISHED':\n      sendDashboardAnalytics();\n      break;\n    ...\n  };\n});\n\n// breadcrumbsStore.js\nDispatcher.register(function(payload){\n  switch(payload.actionType) {\n    case 'SHOW_DASHBOARD':\n    case 'CREATE_FIRST_POST_FORM_SUBMITTED':\n    case 'LOGIN_SUCCESSFUL':\n    case 'CURRENT_POST_DELETED':\n    case 'CURRENT_PAGE_DELETED':\n    case 'UPDATE_FINISHED':\n      changeBreadcrumbs('dashboard');\n      break;\n    ...\n  };\n});\n\n// renderStore.js\nDispatcher.register(function(payload){\n  switch(payload.actionType) {\n    case 'SHOW_DASHBOARD':\n    case 'CREATE_FIRST_POST_FORM_SUBMITTED':\n    case 'LOGIN_SUCCESSFUL':\n    case 'CURRENT_POST_DELETED':\n    case 'CURRENT_PAGE_DELETED':\n    case 'UPDATE_FINISHED':\n      renderDashboard();\n      break;\n    ...\n  };\n});\n\n// and 7 more stores...\n```\n\nI see two possible problems:\n- Imagine you write a new **Store** which does something when the Dashboard is shown. You have to know exactly all the actions which lead to a redirection to the dashboard. Imagine how easy should be to write only `\"SHOW_DASHBOARD\"` instead.\n- Imagine you want to change the redirection of the `AddNameAndCreateFirstPost` screen to the `EditPost`screen. You have to go find and change the `\"CREATE_FIRST_POST_FORM_SUBMITTED\"` in 10 different files. Imagine how easy it should be to just change `\"SHOW_DASHBOARD\"` to `\"SHOW_EDIT_POST\"` instead.\n\nAbout describing what the user did, you said:\n_@kyldvs \"Generally an action fired should correspond to what the user is doing, it doesn't correspond to what you want a store to do.\"_\n\nIn my `AddNameAndCreateFirstPost` screen the user, you are right, the user did this action:  `\"CREATE_FIRST_POST_FORM_SUBMITTED\"`.\n\nBut when he is in the `EditProfile` screen, the action is `\"USER_NAME_CHANGED\"` and not `\"PROFILE_FORM_SUBMITTED\"`. And in the `CreatePost` screen the action is `\"NEW_POST_CREATED\"` and not `\"NEW_POST_FORM_SUBMITTED\"` as well.\n\nSo if we can describe what has happened in those terms, why `\"USER_NAME_CHANGED\" && \"NEW_POST_CREATED\" && \"SHOW_DASHBOARD\"` instead of `\"CREATE_FIRST_POST_FORM_SUBMITTED\"` is wrong to describe what the user just did?\n Generally we try to use `hasChanged()` in order to prevent needing to have large lists of actions that we need to maintain.\n\nhttps://github.com/facebook/flux/blob/master/src/stores/FluxStore.js#L117\n\nWhile I don't completely understand the purpose of all of your stores, a revised structure may look more similar to this:\n\n``` javascript\nclass RouteStore extends FluxReduceStore {\n  getInitialState() {\n    return '/login';\n  }\n\n  reduce(state, action) {\n    switch (action.type) {\n      case 'show_dashboard':\n      case 'create_first_post_form_submitted':\n      case 'login_successful':\n        // updating of the url omitted\n        return '/foo/dashboard';\n\n      default:\n        return state;\n    }\n  }\n}\n\nclass BreadCrumbStore extends FluxReduceStore {\n  ...\n  reduce(state, action) {\n    this.getDispatcher().waitFor([RouteStore.getDispatchToken()]);\n    // The current route changed, so we need to update the breadcrumb\n    if (RouteStore.hasChanged()) {\n      const route = RouteStore.getState();\n      switch (route) {\n        case '/login':\n          return loginBreadCrumbs(state);\n\n        case '/foo/dashboard':\n          return dashboardBreadCrumbs(state);\n\n        default:\n          return fourOhFourBreadCrumb(state);\n      }\n    }\n    return state;\n  }\n}\n```\n\nIn this way you can build dependencies between the data within stores. This enables you to have stores depend on the data in another store rather than the entire list of actions that may cause a specific store to change.\n\nSometimes it is necessary to maintain two larger list of actions within separate stores, but we've not found it all that common even though we have well over 200 stores at this point.\n\nWe tend to pull out any cross store accesses into a separate function in order to document the side-effects of reduce better. See here for a working example: https://github.com/staltz/flux-challenge/blob/master/submissions/kyldvs/src/SithStore.js#L146-L149\n Thanks again @kyldvs for taking the time to keep answering me in this regard.\n\nI understand this solution, and it works well in many situations. I have used it myself in non-Flux applications. \n\nNow... I know I am giving this a hard time, but I still have concerns regarding this solution.\n1. To make my example work, you are getting rid of Flux. \n   Imagine another person creates a new **Store** in the future. He registers for `\"SHOW_DASHBOARD\"` and sometimes it doesn't work because the user is on the dashboard but `\"SHOW_DASHBOARD\"` is not triggered. You have to explain him that even though `\"SHOW_DASHBOARD\"` exists, he can't use it because that part of the app is outside Flux and he has to use `RouteStore.hasChanged()` instead of `Dispatcher.register()` and make his **Store** dependent on `RouteStore`.\n2. To avoid chaining notifications in the Dispatcher, you are actually using a different notification system: `RouteStore.hasChanged()` instead of `Dispatcher.register()`. \n   If you refactor your code and use `Dispatcher.register()` instead, you end up dispatching in the middle of a dispatch. So it looks like changing the notification system only has the benefit of bypassing that rule. `RouteStore.hasChanged()` doesn't add any other benefit to the `Dispatcher` system.\n3. If one of the Flux principles is easy debugging and you look at the flow of your user actions, you will see things like \n\n```\n\"SHOW_LOGIN\" => \"LOGIN_SUCCEED\" => \"SHOW_CREATE_FIRST_POST\" => \n=> \"CREATE_FIRST_POST_FORM_SENT\" => \"SHOW_EDIT_POST\" => \"DELETED_POST\"\n```\n\nAll the `\"SHOW_DASHBOARDS\"` are hidden here, even if the user was actually in the dashboard screen twice in this flow, after `\"CREATE_FIRST_POST_FORM_SENT\"` and after `\"DELETED_POST\"`. To know what's really going on, you would have to implement new logging features to include the `RouteStore.hasChanged()` notifications.\n\n---\n\nSo, after all our conversation, what I am wondering is... why is it so wrong to do THIS, that you are trying so hard to avoid it? \n\n``` javascript\nvar handleClick = function() {\n  Dispatcher.dispatch('PROFILE_NAME_CHANGED');\n  Dispatcher.dispatch('SHOW_DASHBOARD');\n};\n```\n\nWhy is it so wrong that if the user did a `MultiTask` in one step, you write instead `SmallTask AND SmallTask`? What type of problems can it lead to?\n\nI can imagine other workarounds in the UI side. For example, if I give the user a `SAVE` button with a  `\"PROFILE_NAME_CHANGED\"` dispatch. Then I give him a `NAME SAVED!` hint and a new button `GO TO DASHBOARD` with a `\"SHOW_DASHBOARD\"` dispatch.  That would work just fine in Flux and we won't be having this conversation.\n\nIn the way I see it, dispatching `SmallTask AND SmallTask` I am just saving the user that second click. Why is it so wrong to save him a click when he actually wants to save his name and go to the dashboard in one step? You are not chaining actions, your actions are still easy to trace and debug, your log is fine, all your app parts use Flux. So what are you seeing I am not?\n\n---\n\nI am sorry, it looks like I am pretty sure that \"my solution\" is right and I am trying hard to defend it, but I'm not. I really love Flux and all its principles. I am just trying to understand Flux in this scenario. \n\nI just asked in the first place because I never saw something like this before and wanted to know your impressions.\n\nMany thanks for your help here. I really appreciate it.\n One of the problems I found is that you begin having to push increasing amounts of state into your dispatch payloads so that the backing stores can differentiate between event targets.  This becomes necessary as the application ui interaction becomes non-trivial.\n\nMy 2 cents \n\nSent from my iPhone\n\n> On Oct 21, 2015, at 5:49 AM, Luis Herranz notifications@github.com wrote:\n> \n> Thanks again @kyldvs for taking the time to keep answering me in this regard.\n> \n> I understand this solution, and it works well in many situations. I have used it myself in non-Flux applications.\n> \n> Now... I know I am giving this a hard time, but I still have concerns regarding this solution.\n> \n> To make my example work, you are getting rid of Flux. \n> Imagine another person creates a new Store in the future. He registers for \"SHOW_DASHBOARD\" and sometimes it doesn't work because the user is on the dashboard but \"SHOW_DASHBOARD\" is not triggered. You have to explain him that even though \"SHOW_DASHBOARD\" exists, he can't use it because that part of the app is outside Flux and he has to use RouteStore.hasChanged() instead of Dispatcher.register() and make his Store dependent on RouteStore.\n> \n> To avoid chaining notifications in the Dispatcher, you are actually using a different notification system: RouteStore.hasChanged() instead of Dispatcher.register(). \n> If you refactor your code and use Dispatcher.register() instead, you end up dispatching in the middle of a dispatch. So it looks like changing the notification system only has the benefit of bypassing that rule. RouteStore.hasChanged() doesn't add any other benefit to the Dispatcher system.\n> \n> If one of the Flux principles is easy debugging and you look at the flow of your user actions, you will see things like\n> \n> \"SHOW_LOGIN\" => \"LOGIN_SUCCEED\" => \"SHOW_CREATE_FIRST_POST\" => \n> => \"CREATE_FIRST_POST_FORM_SENT\" => \"SHOW_EDIT_POST\" => \"DELETED_POST\"\n> All the \"SHOW_DASHBOARDS\" are hidden here, even if the user was actually in the dashboard screen twice in this flow, after \"CREATE_FIRST_POST_FORM_SENT\" and after \"DELETED_POST\". To know what's really going on, you would have to implement new logging features to include the RouteStore.hasChanged() notifications.\n> \n> So, after all our conversation, what I am wondering is... why is it so wrong to do THIS, that you are trying so hard to avoid it? \n> \n> var handleClick = function() {\n>   Dispatcher.dispatch('PROFILE_NAME_CHANGED');\n>   Dispatcher.dispatch('SHOW_DASHBOARD');\n> };\n> Why is it so wrong that if the user did a MultiTask in one step, you write instead SmallTask AND SmallTask? What type of problems can it lead to?\n> \n> I can imagine other workarounds in the UI side. For example, if I give the user a SAVE button with a \"PROFILE_NAME_CHANGED\" dispatch. Then I give him a NAME SAVED! hint and a new button GO TO DASHBOARD with a \"SHOW_DASHBOARD\" dispatch. That would work just fine in Flux and we won't be having this conversation.\n> \n> In the way I see it, dispatching SmallTask AND SmallTask I am just saving the user that second click. Why is it so wrong to save him a click when he actually wants to save his name and go to the dashboard in one step? You are not chaining actions, your actions are still easy to trace and debug, your log is fine, all your app parts use Flux. So what are you seeing I am not?\n> \n> I am sorry, I think it looks like I am pretty sure that \"my solution\" is right and I am trying hard to defend it, but I'm not. I really love Flux and all its principles. I am just trying to understand Flux in this scenario.\n> \n> I just asked in the first place because I never saw something like this before and wanted to know your impressions.\n> \n> Many thanks for your help here. I really appreciate it.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n Thanks @kyldvs. I've using that approach since then and so far it has worked fine.  The code in here does not seem in sync with what's described on the web page:\nhttps://facebook.github.io/flux/docs/todo-list.html\nFor instance the dispatcher does not have the same content, and using react-boilerplate seems to bring an \"src\" directory rather than a \"js\" directory.\n To clarify, this issue is specific to the tutorial \"TODO MVC\".\n +1\n +1\n +1 This tutorial is outdated :(\n +1\n  flow version `0.16.0`\nnode version `v0.12.7`\n\nsteps to reproduce:\n- checkout https://github.com/facebook/flux/tree/master/examples/flux-utils-todomvc\n- run `npm install`\n- download flow (https://facebook.github.io/flow/downloads/flow-linux64-latest.zip)\n- run `~/Downloads/flow/flow check`\n\n```\n/home/user/projects/flux/examples/flux-utils-todomvc/js/components/Footer.react.js:26:12,16: todos\nconst cannot be reassigned\n/home/user/projects/flux/examples/flux-utils-todomvc/js/components/Footer.react.js:26:11,30: const todos\n\n/home/user/projects/flux/examples/flux-utils-todomvc/js/components/Footer.react.js:28:5,30:5: todos\nconst referenced before declaration\n/home/user/projects/flux/examples/flux-utils-todomvc/js/components/Footer.react.js:26:11,30: const todos\n\n/home/user/projects/flux/examples/flux-utils-todomvc/js/components/Footer.react.js:28:9,13: todos\nconst referenced before declaration\n/home/user/projects/flux/examples/flux-utils-todomvc/js/components/Footer.react.js:26:11,30: const todos\n\n/home/user/projects/flux/examples/flux-utils-todomvc/js/components/Header.react.js:16:27,49: TodoTextInput.react.js\nRequired module not found\n\n/home/user/projects/flux/examples/flux-utils-todomvc/js/components/MainSection.react.js:35:14,23: Destructuring assignment must be initialized\n\n/home/user/projects/flux/examples/flux-utils-todomvc/js/components/TodoApp.react.js:26:25,45: MainSection.react.js\nRequired module not found\n\n/home/user/projects/flux/examples/flux-utils-todomvc/js/components/TodoItem.react.js:35:3,8: Unexpected identifier\n\n/home/user/projects/flux/examples/flux-utils-todomvc/js/components/TodoTextInput.react.js:36:3,8: Unexpected identifier\n\n/home/user/projects/flux/examples/flux-utils-todomvc/node_modules/flux/flow/include/FluxStoreGroup.js:55:7,13: identifier __DEV__\nCould not resolve name\n\nFound 9 errors\n\n```\n\nWhy is that and how can we fix it?\n Yup when I wrote it let/const was not supported in flow so it was not possible to commit it with flow being clean. Now that flow has support for let/const it should be possible to get it clean.\n @kyldvs flow documentation says it supports [es6 features](https://github.com/facebook/flow/issues/560) already. What should I do to clean those?  would you point me to the right direction please?\n\nPS: the error doesn't seem to be of let/cons though...\n @kyldvs, I'm getting this errors with the latest Flow 0.18.1 for that example project.\n\n```\njs/components/Header.react.js:16\n 16: import TodoTextInput from './TodoTextInput.react';\n                               ^^^^^^^^^^^^^^^^^^^^^^^ TodoTextInput.react.js. Required module not found\n\njs/components/MainSection.react.js:19\n 19: import TodoItem from './TodoItem.react';\n                          ^^^^^^^^^^^^^^^^^^ TodoItem.react.js. Required module not found\n\njs/components/TodoItem.react.js:35\n 35:   render(): ?ReactElement {\n       ^^^^^^ Unexpected identifier\n\njs/components/TodoTextInput.react.js:36\n 36:   render(): ?ReactElement {\n       ^^^^^^ Unexpected identifier\n\nnode_modules/flux/flow/include/FluxStoreGroup.js:55\n 55:   if (__DEV__) {\n           ^^^^^^^ identifier `__DEV__`. Could not resolve name\n```\n\nSome errors seem to be related to the fact that you're using babel stage 0 that includes [Proposal: ES Class Fields & Static Properties](https://github.com/jeffmo/es-class-static-properties-and-fields) which Flow doesn't support.\n I'm having these errors as well. Also, isn't this supposed to be an error?\n\n``` javascript\nconst instance: Dispatcher<Action> = new Dispatcher();\nexport default instance;\n\ninstance.dispatch(5); // <--- not showing as error\n```\n\nI've been trying nuclide-flow and it seems like nothing on the Dispatcher instance is showing up for the auto-complete either.\n @lukescott if you have a look at the contents of the Dispatcher file that is installed via npm, I think you'll find that it doesn't have the flow types in it. I think that is what explains the missing error in your case.\n @camspiers There is some sort of field def here:\nhttps://github.com/facebook/flux/blob/master/examples/flux-utils-todomvc/.flowconfig#L10\n\nThat directory does contain a Dispatcher file, although I'm not sure how that works exactly. There is no index.js file in the flux/flow/include directory. There is also a definition for `__DEV__` in flux/flow/lib, but flux isn't able to resolve it.\n Unsure how the include is meant to work. @kyldvs any ideas?\n With flow 0.22.1 I'm getting 25 errors mostly along the lines of:\n\n```\ncitta:flux-utils-todomvc eikeon$ flow\nLaunching Flow server for /private/tmp/flux/examples/flux-utils-todomvc\nSpawned flow server (child pid=78961)\nLogs will go to /private/tmp/flow/zSprivatezStmpzSfluxzSexampleszSflux-utils-todomvc.log\njs/components/Footer.react.js:24\n 24: export default class Footer extends Component<{}, Props, {}> {\n                                                   ^^ object type. This type is incompatible with\n 24: export default class Footer extends Component<{}, Props, {}> {\n                                                   ^^ undefined. Did you forget to declare object type?\n```\n\nHas anyone been able to get the example to not have any flow errors? Or have any idea for pointing me in the right direction.\n The example should run fine, the flow types are not correct. If the example does not work let's open another issue to track it, if the example does work and just reports some flow errors that's what this issue is meant to be tracking.\n The example is running fine for me. I'll fix my wording at the end. It's the flow errors that I'm trying to get working. Think I may have just figured out what is causing most of them. Looking at the HOC class at the end of http://flowtype.org/docs/react.html#_ I noticed it has a state property. Adding these to Footer etc is at least part of the fixes needed. I'll see if I can put together a pull request.\n Awesome! Thanks for looking into it. A pull request would be great.\n #336 should have fixed this!\n  Respected All,\n\n```\n        i did a grep search on my system ubuntu 14.04 64 bit . i made the necessary changes according to that.\n```\n\nregards,\nTapesh Mandal\n   I'll do that next week when I get my Mac.\n\nSent from my iPhone\n\n> On 19 Nov 2015, at 7:13 AM, Kyle Davis notifications@github.com wrote:\n> \n> This conflicts now, please rebase.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n Sorry, I'll work on this soon.\n Hi @kyldvs , its done now :)\n  https://facebook.github.io/flux/docs/todo-list.html is using react-boilerplate which is apparently deprecated according to https://facebook.github.io/react/blog/2015/06/12/deprecating-jstransform-and-react-tools.html\n\n```\n$ npm install\nnpm WARN package.json react-boilerplate@0.2.0 No repository field.\nnpm WARN package.json react-boilerplate@0.2.0 license should be a valid SPDX license expression\nnpm WARN deprecated react-tools@0.8.0: react-tools is deprecated. For more information, visit https://fb.me/react-tools-deprecated\n/\n> fsevents@0.2.1 install /Users/makepeace/react-boilerplate/node_modules/jsxc/node_modules/chokidar/node_modules/fsevents\n> node-gyp rebuild\n\n  CXX(target) Release/obj.target/fse/fsevents.o\nIn file included from ../fsevents.cc:6:\n../node_modules/nan/nan.h:339:13: error: no member named 'New' in 'v8::String'\n    return  _NAN_ERROR(v8::Exception::Error, errmsg);\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:319:50: note: expanded from macro '_NAN_ERROR'\n# define _NAN_ERROR(fun, errmsg) fun(v8::String::New(errmsg))\n                                     ~~~~~~~~~~~~^\n../node_modules/nan/nan.h:343:5: error: no member named 'ThrowException' in namespace 'v8'\n    _NAN_THROW_ERROR(v8::Exception::Error, errmsg);\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[goes on and on]\n```\n :+1: \n :+1: \n :thumbsup:\n Would love to get this working. Any fix on the horizon?\n Hmm, @fisherwebdev what do you think about taking this as a chance to upgrade examples to ES6 as well?\n I was able to build it with following versions of node and npm:\n\nnode v0.12.7\nnpm 2.11.3\nnpm install just works with those version. I use nvm to change node version.\n Same node/npm as @destan but I wasn't able to run npm install. :(\n jest-cli expected a lower version node. Upgrade jest-cli works for me (I am using node version 4.0.0)\nnpm install jest-cli --save-dev\nnpm install\n What @justwy suggested works.\nJust first delete the node_modules directory if it failed already\nRunning node v4.2.1, npm 2.14.7\n someone should submit a pull request updating the dependencies.  this is an easy fix to a problem a lot of people are having.\n @justwy It works. O(\u2229_\u2229)O thank you~\n\n``` bash\nnpm install jest-cli --save-dev \nnpm install\n```\n @justwy @trojanc @BuptStEve I am using Node v4.2.1, npm v2.14.7. Upon cloning the directory and running the following commands:\n`npm install jest-cli --save-dev` \n`npm install`\n\nI still receive errors. Is this expected behavior?\n\n```\nnpm WARN package.json react-boilerplate@0.2.0 No repository field.\nnpm WARN package.json react-boilerplate@0.2.0 license should be a valid SPDX license expression\nnpm WARN peerDependencies The peer dependency envify@~0.2.0 included from stylesheets will no\nnpm WARN peerDependencies longer be automatically installed to fulfill the peerDependency \nnpm WARN peerDependencies in npm 3+. Your application will need to depend on it explicitly.\nnpm WARN peerDependencies The peer dependency envify@~0.2.0 included from react will no\nnpm WARN peerDependencies longer be automatically installed to fulfill the peerDependency \nnpm WARN peerDependencies in npm 3+. Your application will need to depend on it explicitly.\nnpm WARN deprecated react-tools@0.8.0: react-tools is deprecated. For more information, visit https://fb.me/react-tools-deprecated\n\n> fsevents@0.2.1 install /Users/vmaudgalya/projects/react/react-boilerplate/node_modules/jsxc/node_modules/chokidar/node_modules/fsevents\n> node-gyp rebuild\n\n  CXX(target) Release/obj.target/fse/fsevents.o\nIn file included from ../fsevents.cc:6:\n../node_modules/nan/nan.h:339:13: error: no member named 'New' in 'v8::String'\n    return  _NAN_ERROR(v8::Exception::Error, errmsg);\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:319:50: note: expanded from macro '_NAN_ERROR'\n# define _NAN_ERROR(fun, errmsg) fun(v8::String::New(errmsg))\n                                     ~~~~~~~~~~~~^\n../node_modules/nan/nan.h:343:5: error: no member named 'ThrowException' in namespace 'v8'\n    _NAN_THROW_ERROR(v8::Exception::Error, errmsg);\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:324:11: note: expanded from macro '_NAN_THROW_ERROR'\n      v8::ThrowException(_NAN_ERROR(fun, errmsg));                             \\\n      ~~~~^\n../node_modules/nan/nan.h:343:5: error: no member named 'New' in 'v8::String'\n    _NAN_THROW_ERROR(v8::Exception::Error, errmsg);\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:324:26: note: expanded from macro '_NAN_THROW_ERROR'\n      v8::ThrowException(_NAN_ERROR(fun, errmsg));                             \\\n                         ^~~~~~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:319:50: note: expanded from macro '_NAN_ERROR'\n# define _NAN_ERROR(fun, errmsg) fun(v8::String::New(errmsg))\n                                     ~~~~~~~~~~~~^\n../node_modules/nan/nan.h:348:9: error: no type named 'ThrowException' in namespace 'v8'\n    v8::ThrowException(error);\n    ~~~~^\n../node_modules/nan/nan.h:355:53: error: no member named 'New' in 'v8::String'; did you mean 'v8::TypeSwitch::New'?\n    v8::Local<v8::Value> err = v8::Exception::Error(v8::String::New(msg));\n                                                    ^~~~~~~~~~~~~~~\n                                                    v8::TypeSwitch::New\n/Users/vmaudgalya/.node-gyp/4.2.1/include/node/v8.h:4705:28: note: 'v8::TypeSwitch::New' declared here\n  static Local<TypeSwitch> New(Local<FunctionTemplate> type);\n                           ^\nIn file included from ../fsevents.cc:6:\n../node_modules/nan/nan.h:355:69: error: calling a private constructor of class 'v8::Local<v8::FunctionTemplate>'\n    v8::Local<v8::Value> err = v8::Exception::Error(v8::String::New(msg));\n                                                                    ^\n/Users/vmaudgalya/.node-gyp/4.2.1/include/node/v8.h:326:13: note: declared private here\n  V8_INLINE Local(S* that)\n            ^\nIn file included from ../fsevents.cc:6:\n../node_modules/nan/nan.h:357:65: error: too few arguments to function call, expected 2, have 1\n    obj->Set(v8::String::New(\"code\"), v8::Int32::New(errorNumber));\n                                      ~~~~~~~~~~~~~~            ^\n/Users/vmaudgalya/.node-gyp/4.2.1/include/node/v8.h:2499:3: note: 'New' declared here\n  static Local<Integer> New(Isolate* isolate, int32_t value);\n  ^\nIn file included from ../fsevents.cc:6:\n../node_modules/nan/nan.h:357:26: error: no member named 'New' in 'v8::String'\n    obj->Set(v8::String::New(\"code\"), v8::Int32::New(errorNumber));\n             ~~~~~~~~~~~~^\n../node_modules/nan/nan.h:369:12: error: no member named 'New' in 'v8::String'\n    return _NAN_ERROR(v8::Exception::TypeError, errmsg);\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:319:50: note: expanded from macro '_NAN_ERROR'\n# define _NAN_ERROR(fun, errmsg) fun(v8::String::New(errmsg))\n                                     ~~~~~~~~~~~~^\n../node_modules/nan/nan.h:373:5: error: no member named 'ThrowException' in namespace 'v8'\n    _NAN_THROW_ERROR(v8::Exception::TypeError, errmsg);\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:324:11: note: expanded from macro '_NAN_THROW_ERROR'\n      v8::ThrowException(_NAN_ERROR(fun, errmsg));                             \\\n      ~~~~^\n../node_modules/nan/nan.h:373:5: error: no member named 'New' in 'v8::String'\n    _NAN_THROW_ERROR(v8::Exception::TypeError, errmsg);\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:324:26: note: expanded from macro '_NAN_THROW_ERROR'\n      v8::ThrowException(_NAN_ERROR(fun, errmsg));                             \\\n                         ^~~~~~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:319:50: note: expanded from macro '_NAN_ERROR'\n# define _NAN_ERROR(fun, errmsg) fun(v8::String::New(errmsg))\n                                     ~~~~~~~~~~~~^\n../node_modules/nan/nan.h:377:12: error: no member named 'New' in 'v8::String'\n    return _NAN_ERROR(v8::Exception::RangeError, errmsg);\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:319:50: note: expanded from macro '_NAN_ERROR'\n# define _NAN_ERROR(fun, errmsg) fun(v8::String::New(errmsg))\n                                     ~~~~~~~~~~~~^\n../node_modules/nan/nan.h:381:5: error: no member named 'ThrowException' in namespace 'v8'\n    _NAN_THROW_ERROR(v8::Exception::RangeError, errmsg);\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:324:11: note: expanded from macro '_NAN_THROW_ERROR'\n      v8::ThrowException(_NAN_ERROR(fun, errmsg));                             \\\n      ~~~~^\n../node_modules/nan/nan.h:381:5: error: no member named 'New' in 'v8::String'\n    _NAN_THROW_ERROR(v8::Exception::RangeError, errmsg);\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:324:26: note: expanded from macro '_NAN_THROW_ERROR'\n      v8::ThrowException(_NAN_ERROR(fun, errmsg));                             \\\n                         ^~~~~~~~~~~~~~~~~~~~~~~\n../node_modules/nan/nan.h:319:50: note: expanded from macro '_NAN_ERROR'\n# define _NAN_ERROR(fun, errmsg) fun(v8::String::New(errmsg))\n                                     ~~~~~~~~~~~~^\n../node_modules/nan/nan.h:406:13: error: no member named 'smalloc' in namespace 'node'\n    , node::smalloc::FreeCallback callback\n      ~~~~~~^\n../node_modules/nan/nan.h:141:71: note: expanded from macro 'NAN_INLINE'\n# define NAN_INLINE(declarator) inline __attribute__((always_inline)) declarator\n                                                                      ^\n../node_modules/nan/nan.h:416:12: error: no matching function for call to 'New'\n    return node::Buffer::New(data, size);\n           ^~~~~~~~~~~~~~~~~\n/Users/vmaudgalya/.node-gyp/4.2.1/include/node/node_buffer.h:28:40: note: candidate function not viable: no known conversion from 'char *' to 'v8::Isolate *' for 1st argument\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate, size_t length);\n                                       ^\n/Users/vmaudgalya/.node-gyp/4.2.1/include/node/node_buffer.h:31:40: note: candidate function not viable: no known conversion from 'char *' to 'v8::Isolate *' for 1st argument\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate,\n                                       ^\n/Users/vmaudgalya/.node-gyp/4.2.1/include/node/node_buffer.h:43:40: note: candidate function not viable: requires 3 arguments, but 2 were provided\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate,\n                                       ^\n/Users/vmaudgalya/.node-gyp/4.2.1/include/node/node_buffer.h:36:40: note: candidate function not viable: requires 5 arguments, but 2 were provided\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate,\n                                       ^\nIn file included from ../fsevents.cc:6:\n../node_modules/nan/nan.h:420:12: error: no matching function for call to 'New'\n    return node::Buffer::New(size);\n           ^~~~~~~~~~~~~~~~~\n/Users/vmaudgalya/.node-gyp/4.2.1/include/node/node_buffer.h:28:40: note: candidate function not viable: requires 2 arguments, but 1 was provided\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate, size_t length);\n                                       ^\n/Users/vmaudgalya/.node-gyp/4.2.1/include/node/node_buffer.h:31:40: note: candidate function not viable: requires at least 2 arguments, but 1 was provided\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate,\n                                       ^\n/Users/vmaudgalya/.node-gyp/4.2.1/include/node/node_buffer.h:43:40: note: candidate function not viable: requires 3 arguments, but 1 was provided\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate,\n                                       ^\n/Users/vmaudgalya/.node-gyp/4.2.1/include/node/node_buffer.h:36:40: note: candidate function not viable: requires 5 arguments, but 1 was provided\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate,\n                                       ^\nIn file included from ../fsevents.cc:6:\n../node_modules/nan/nan.h:427:26: error: no member named 'Use' in namespace 'node::Buffer'\n    return node::Buffer::Use(data, size);\n           ~~~~~~~~~~~~~~^\n../node_modules/nan/nan.h:727:49: error: too few arguments to function call, single argument 'isolate' was not specified\n    v8::Local<v8::Object> obj = v8::Object::New();\n                                ~~~~~~~~~~~~~~~ ^\n/Users/vmaudgalya/.node-gyp/4.2.1/include/node/v8.h:2933:3: note: 'New' declared here\n  static Local<Object> New(Isolate* isolate);\n  ^\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\n20 errors generated.\nmake: *** [Release/obj.target/fse/fsevents.o] Error 1\ngyp ERR! build error \ngyp ERR! stack Error: `make` failed with exit code: 2\ngyp ERR! stack     at ChildProcess.onExit (/Users/vmaudgalya/.nvm/versions/node/v4.2.1/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:270:23)\ngyp ERR! stack     at emitTwo (events.js:87:13)\ngyp ERR! stack     at ChildProcess.emit (events.js:172:7)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)\ngyp ERR! System Darwin 14.5.0\ngyp ERR! command \"/Users/vmaudgalya/.nvm/versions/node/v4.2.1/bin/node\" \"/Users/vmaudgalya/.nvm/versions/node/v4.2.1/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd /Users/vmaudgalya/projects/react/react-boilerplate/node_modules/jsxc/node_modules/chokidar/node_modules/fsevents\ngyp ERR! node -v v4.2.1\ngyp ERR! node-gyp -v v3.0.3\ngyp ERR! not ok \nnpm WARN optional dep failed, continuing fsevents@0.2.1\n```\n @justwy Thanks, it works for me.\n I'm having this problem again in Node v5.1.0. @justwy solution did not work.\n\n```\nnpm WARN deprecated react-tools@0.8.0: react-tools is deprecated. For more information, visit https://fb.me/react-tools-deprecated\nnpm WARN prefer global react-tools@0.8.0 should be installed with -g\n\n> fsevents@0.2.1 install /Users/erickmaynard/react-node/node_modules/fsevents\n> node-gyp rebuild\n\nCXX(target) Release/obj.target/fse/fsevents.o\nIn file included from ../fsevents.cc:6:\n../../nan/nan.h:339:13: error: no member named 'New' in 'v8::String'\nreturn  _NAN_ERROR(v8::Exception::Error, errmsg);\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../nan/nan.h:319:50: note: expanded from macro '_NAN_ERROR'\n# define _NAN_ERROR(fun, errmsg) fun(v8::String::New(errmsg))\n                                 ~~~~~~~~~~~~^\n../../nan/nan.h:343:5: error: no member named 'ThrowException' in namespace 'v8'\n_NAN_THROW_ERROR(v8::Exception::Error, errmsg);\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../nan/nan.h:324:11: note: expanded from macro '_NAN_THROW_ERROR'\n  v8::ThrowException(_NAN_ERROR(fun, errmsg));                             \\\n  ~~~~^\n../../nan/nan.h:343:5: error: no member named 'New' in 'v8::String'\n_NAN_THROW_ERROR(v8::Exception::Error, errmsg);\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../nan/nan.h:324:26: note: expanded from macro '_NAN_THROW_ERROR'\n  v8::ThrowException(_NAN_ERROR(fun, errmsg));                             \\\n                     ^~~~~~~~~~~~~~~~~~~~~~~\n../../nan/nan.h:319:50: note: expanded from macro '_NAN_ERROR'\n# define _NAN_ERROR(fun, errmsg) fun(v8::String::New(errmsg))\n                                 ~~~~~~~~~~~~^\n../../nan/nan.h:348:9: error: no type named 'ThrowException' in namespace 'v8'\nv8::ThrowException(error);\n~~~~^\n../../nan/nan.h:355:65: error: no member named 'New' in 'v8::String'\nv8::Local<v8::Value> err = v8::Exception::Error(v8::String::New(msg));\n                                                ~~~~~~~~~~~~^\n../../nan/nan.h:357:26: error: no member named 'New' in 'v8::String'\nobj->Set(v8::String::New(\"code\"), v8::Int32::New(errorNumber));\n         ~~~~~~~~~~~~^\n../../nan/nan.h:357:65: error: too few arguments to function call, expected 2,\n  have 1\nobj->Set(v8::String::New(\"code\"), v8::Int32::New(errorNumber));\n                                  ~~~~~~~~~~~~~~            ^\n/Users/erickmaynard/.node-gyp/5.1.0/include/node/v8.h:2496:3: note: 'New' declared\n  here\nstatic Local<Integer> New(Isolate* isolate, int32_t value);\n^\nIn file included from ../fsevents.cc:6:\n../../nan/nan.h:369:12: error: no member named 'New' in 'v8::String'\nreturn _NAN_ERROR(v8::Exception::TypeError, errmsg);\n       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../nan/nan.h:319:50: note: expanded from macro '_NAN_ERROR'\n# define _NAN_ERROR(fun, errmsg) fun(v8::String::New(errmsg))\n                                 ~~~~~~~~~~~~^\n../../nan/nan.h:373:5: error: no member named 'ThrowException' in namespace 'v8'\n_NAN_THROW_ERROR(v8::Exception::TypeError, errmsg);\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../nan/nan.h:324:11: note: expanded from macro '_NAN_THROW_ERROR'\n  v8::ThrowException(_NAN_ERROR(fun, errmsg));                             \\\n  ~~~~^\n../../nan/nan.h:373:5: error: no member named 'New' in 'v8::String'\n_NAN_THROW_ERROR(v8::Exception::TypeError, errmsg);\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../nan/nan.h:324:26: note: expanded from macro '_NAN_THROW_ERROR'\n  v8::ThrowException(_NAN_ERROR(fun, errmsg));                             \\\n                     ^~~~~~~~~~~~~~~~~~~~~~~\n../../nan/nan.h:319:50: note: expanded from macro '_NAN_ERROR'\n# define _NAN_ERROR(fun, errmsg) fun(v8::String::New(errmsg))\n                                 ~~~~~~~~~~~~^\n../../nan/nan.h:377:12: error: no member named 'New' in 'v8::String'\nreturn _NAN_ERROR(v8::Exception::RangeError, errmsg);\n       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../nan/nan.h:319:50: note: expanded from macro '_NAN_ERROR'\n# define _NAN_ERROR(fun, errmsg) fun(v8::String::New(errmsg))\n                                 ~~~~~~~~~~~~^\n../../nan/nan.h:381:5: error: no member named 'ThrowException' in namespace 'v8'\n_NAN_THROW_ERROR(v8::Exception::RangeError, errmsg);\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../nan/nan.h:324:11: note: expanded from macro '_NAN_THROW_ERROR'\n  v8::ThrowException(_NAN_ERROR(fun, errmsg));                             \\\n  ~~~~^\n../../nan/nan.h:381:5: error: no member named 'New' in 'v8::String'\n_NAN_THROW_ERROR(v8::Exception::RangeError, errmsg);\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../nan/nan.h:324:26: note: expanded from macro '_NAN_THROW_ERROR'\n  v8::ThrowException(_NAN_ERROR(fun, errmsg));                             \\\n                     ^~~~~~~~~~~~~~~~~~~~~~~\n../../nan/nan.h:319:50: note: expanded from macro '_NAN_ERROR'\n# define _NAN_ERROR(fun, errmsg) fun(v8::String::New(errmsg))\n                                 ~~~~~~~~~~~~^\n../../nan/nan.h:406:13: error: no member named 'smalloc' in namespace 'node'\n, node::smalloc::FreeCallback callback\n  ~~~~~~^\n../../nan/nan.h:141:71: note: expanded from macro 'NAN_INLINE'\n# define NAN_INLINE(declarator) inline __attribute__((always_inline)) declarator\n                                                                  ^\n../../nan/nan.h:416:12: error: no matching function for call to 'New'\nreturn node::Buffer::New(data, size);\n       ^~~~~~~~~~~~~~~~~\n/Users/erickmaynard/.node-gyp/5.1.0/include/node/node_buffer.h:28:40: note: \n  candidate function not viable: no known conversion from 'char *' to\n  'v8::Isolate *' for 1st argument\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate, size_t length);\n                                   ^\n/Users/erickmaynard/.node-gyp/5.1.0/include/node/node_buffer.h:31:40: note: \n  candidate function not viable: no known conversion from 'char *' to\n  'v8::Isolate *' for 1st argument\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate,\n                                   ^\n/Users/erickmaynard/.node-gyp/5.1.0/include/node/node_buffer.h:43:40: note: \n  candidate function not viable: requires 3 arguments, but 2 were provided\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate,\n                                   ^\n/Users/erickmaynard/.node-gyp/5.1.0/include/node/node_buffer.h:36:40: note: \n  candidate function not viable: requires 5 arguments, but 2 were provided\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate,\n                                   ^\nIn file included from ../fsevents.cc:6:\n../../nan/nan.h:420:12: error: no matching function for call to 'New'\nreturn node::Buffer::New(size);\n       ^~~~~~~~~~~~~~~~~\n/Users/erickmaynard/.node-gyp/5.1.0/include/node/node_buffer.h:28:40: note: \n  candidate function not viable: requires 2 arguments, but 1 was provided\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate, size_t length);\n                                   ^\n/Users/erickmaynard/.node-gyp/5.1.0/include/node/node_buffer.h:31:40: note: \n  candidate function not viable: requires at least 2 arguments, but 1 was\n  provided\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate,\n                                   ^\n/Users/erickmaynard/.node-gyp/5.1.0/include/node/node_buffer.h:43:40: note: \n  candidate function not viable: requires 3 arguments, but 1 was provided\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate,\n                                   ^\n/Users/erickmaynard/.node-gyp/5.1.0/include/node/node_buffer.h:36:40: note: \n  candidate function not viable: requires 5 arguments, but 1 was provided\nNODE_EXTERN v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate,\n                                   ^\nIn file included from ../fsevents.cc:6:\n../../nan/nan.h:427:26: error: no member named 'Use' in namespace 'node::Buffer'\nreturn node::Buffer::Use(data, size);\n       ~~~~~~~~~~~~~~^\n../../nan/nan.h:727:49: error: too few arguments to function call, single argument\n  'isolate' was not specified\nv8::Local<v8::Object> obj = v8::Object::New();\n                            ~~~~~~~~~~~~~~~ ^\n/Users/erickmaynard/.node-gyp/5.1.0/include/node/v8.h:2930:3: note: 'New' declared\n  here\nstatic Local<Object> New(Isolate* isolate);\n^\nIn file included from ../fsevents.cc:6:\n../../nan/nan.h:733:49: error: too few arguments to function call, single argument\n  'isolate' was not specified\nv8::Local<v8::Object> obj = v8::Object::New();\n                            ~~~~~~~~~~~~~~~ ^\n/Users/erickmaynard/.node-gyp/5.1.0/include/node/v8.h:2930:3: note: 'New' declared\n  here\nstatic Local<Object> New(Isolate* isolate);\n^\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\n20 errors generated.\nmake: *** [Release/obj.target/fse/fsevents.o] Error 1\ngyp ERR! build error \ngyp ERR! stack Error: `make` failed with exit code: 2\ngyp ERR! stack     at ChildProcess.onExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:270:23)\ngyp ERR! stack     at emitTwo (events.js:87:13)\ngyp ERR! stack     at ChildProcess.emit (events.js:172:7)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)\ngyp ERR! System Darwin 15.0.0\ngyp ERR! command \"/usr/local/bin/node\" \"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd /Users/erickmaynard/react-node/node_modules/fsevents\ngyp ERR! node -v v5.1.0\ngyp ERR! node-gyp -v v3.0.3\ngyp ERR! not ok \nnpm WARN install:fsevents@0.2.1 fsevents@0.2.1 install: `node-gyp rebuild`\nnpm WARN install:fsevents@0.2.1 Exit status 1\nreact-boilerplate@0.2.0 /Users/erickmaynard/react-node\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY envify@~0.2.0\n\u251c\u2500\u252c jsxc@0.1.6 \n\u2502 \u251c\u2500\u252c chokidar@0.8.4 \n\u2502 \u2502 \u2514\u2500\u2500 recursive-readdir@0.0.2 \n\u2502 \u251c\u2500\u252c glob@3.2.11 \n\u2502 \u2502 \u2514\u2500\u2500 minimatch@0.3.0 \n\u2502 \u251c\u2500\u2500 mkdirp@0.3.5 \n\u2502 \u2514\u2500\u252c react-tools@0.8.0 \n\u2502   \u251c\u2500\u252c commoner@0.8.15 \n\u2502   \u2502 \u251c\u2500\u2500 graceful-fs@2.0.3 \n\u2502   \u2502 \u251c\u2500\u2500 install@0.4.0 \n\u2502   \u2502 \u251c\u2500\u2500 private@0.1.6 \n\u2502   \u2502 \u251c\u2500\u2500 q@1.4.1 \n\u2502   \u2502 \u251c\u2500\u252c recast@0.5.27 \n\u2502   \u2502 \u2502 \u251c\u2500\u2500 ast-types@0.3.38 \n\u2502   \u2502 \u2502 \u251c\u2500\u2500 cls@0.1.5 \n\u2502   \u2502 \u2502 \u251c\u2500\u2500 esprima@1.1.0-dev-harmony  (git+https://github.com/ariya/esprima.git#a65a3eb93b9a5dce9a1184ca2d1bd0b184c6b8fd)\n\u2502   \u2502 \u2502 \u2514\u2500\u2500 source-map@0.1.32 \n\u2502   \u2502 \u2514\u2500\u252c whiskey@0.6.13 \n\u2502   \u2502   \u251c\u2500\u2500 gex@0.0.1 \n\u2502   \u2502   \u251c\u2500\u2500 logmagic@0.1.4 \n\u2502   \u2502   \u251c\u2500\u2500 magic-templates@0.1.1 \n\u2502   \u2502   \u251c\u2500\u2500 rimraf@1.0.1 \n\u2502   \u2502   \u251c\u2500\u2500 simplesets@1.1.6 \n\u2502   \u2502   \u251c\u2500\u2500 sprintf@0.1.5 \n\u2502   \u2502   \u251c\u2500\u2500 terminal@0.1.3 \n\u2502   \u2502   \u2514\u2500\u2500 underscore@1.8.3 \n\u2502   \u251c\u2500\u2500 esprima-fb@2001.1001.0-dev-harmony-fb \n\u2502   \u2514\u2500\u252c jstransform@2.0.3 \n\u2502     \u251c\u2500\u2500 base62@0.1.1 \n\u2502     \u251c\u2500\u2500 esprima-fb@2001.1001.0-dev-harmony-fb \n\u2502     \u2514\u2500\u2500 source-map@0.1.31 \n\u251c\u2500\u2500 react@0.8.0 \n\u251c\u2500\u252c statics-stylesheets@0.0.1 \n\u2502 \u251c\u2500\u252c fs-extra@0.8.1 \n\u2502 \u2502 \u251c\u2500\u2500 jsonfile@1.1.1 \n\u2502 \u2502 \u251c\u2500\u2500 mkdirp@0.3.5 \n\u2502 \u2502 \u251c\u2500\u2500 ncp@0.4.2 \n\u2502 \u2502 \u2514\u2500\u2500 rimraf@2.2.8 \n\u2502 \u251c\u2500\u252c glob@3.2.11 \n\u2502 \u2502 \u2514\u2500\u2500 minimatch@0.3.0 \n\u2502 \u251c\u2500\u2500 mimetype@0.0.5 \n\u2502 \u2514\u2500\u252c rework@0.19.0 \n\u2502   \u251c\u2500\u2500 color-parser@0.1.0 \n\u2502   \u251c\u2500\u252c commander@1.0.4 \n\u2502   \u2502 \u2514\u2500\u2500 keypress@0.1.0 \n\u2502   \u251c\u2500\u252c css@1.4.4 \n\u2502   \u2502 \u251c\u2500\u2500 css-parse@1.6.0 \n\u2502   \u2502 \u2514\u2500\u2500 css-stringify@1.3.2 \n\u2502   \u251c\u2500\u252c debug@2.2.0 \n\u2502   \u2502 \u2514\u2500\u2500 ms@0.7.1 \n\u2502   \u251c\u2500\u2500 hsb2rgb@1.0.2 \n\u2502   \u251c\u2500\u2500 mime@1.2.11 \n\u2502   \u251c\u2500\u2500 rework-inherit@0.2.1 \n\u2502   \u2514\u2500\u2500 rework-visit@1.0.0 \n\u2514\u2500\u2500 stylesheets@0.0.5 \n\nnpm WARN EPEERINVALID stylesheets@0.0.5 requires a peer of envify@~0.2.0 but none was installed.\nnpm WARN EPEERINVALID react@0.8.0 requires a peer of envify@~0.2.0 but none was installed.\nnpm WARN EPACKAGEJSON react-boilerplate@0.2.0 No repository field.\nnpm WARN EPACKAGEJSON react-boilerplate@0.2.0 license should be a valid SPDX license expression\n```\n :+1: \n Why it is not reopened?\n @kyldvs - this is in reference to the tutorial (https://facebook.github.io/flux/docs/todo-list.html) which mentions using react-boilerplate (https://github.com/petehunt/react-boilerplate) as a starting point. That doesn't work. /examples/flux-todomvc does work but it also doesn't use the react-boilerplate project. This should be fixed.\n :+1:\n\nI don't know whether to be proud or ashamed that I absolutely exhausted my options for making the tutorial work as written before questioning why it uses a clearly deprecated boilerplate repo (it's kind of like admitting defeat, but this was not particularly efficient) but yeah, this should be fixed. \n\n[This tutorial](https://github.com/reactjs/react-tutorial) is really great; it doesn't seem like it'd be too hard to knock together a similar repo. (I'd do it myself, but I'm trying to learn Flux here - kind of a bootstrapping problem.)\n +1\n I used `nvm` to install node `4.2.1` (as @kyldvs said it worked for him on that version). I was then able to run @justwy 's solution and `npm install` executed without error.\n  Hi, I just extracted the Flux Chat example into it's [own repo](https://github.com/d6u/flux-chat) and made numbers of changes to make it up to date. The reason I like to put it in its own repo is that I also working on Chat example for other Flux implementation, e.g. [Redux Chat](https://github.com/d6u/redux-chat). I don't know how you feel about this direction? Do you prefer a PR to update the example here or you are fine to add a link to (https://github.com/d6u/flux-chat)[https://github.com/d6u/flux-chat]?\n\nChanges from original example:\n- Update React.js to 0.14rc1\n- Fixed some bugs, e.g. `latestMessage` on thread is not update when create new message\n- Mock server latency when \"fetching\" messages (use setTimeout)\n- Use ES6 syntax\n- Consolidate actions into single file (`actions.js`)\n- Webpack instead of Browserify\n- Babel instead of Reactify\n  Updating the link in todomvc tutorial to the current one.\n Thanks!\n  Hello,\n\nIs there any chance of getting flux-utils included into a tagged build?  Current dist/ includes dispatcher only (which is awesome) but it would be double -- heck even triple-awesome -- if some of the new store types were available to folks outside the Babel toolchain.\n\nThanks!\n-Eric\n It should still be usable after `npm install flux` by requiring `flux/utils`, or are you outside of a node environment completely?\n\n(it will get compiled into plain javascript inside of `node_modules/flux` as part of the installation process)\n @kyldvs I'm running in a browser context, currently installing flux via bower.  It looks like immutable.js would need to be added as a dependency, and then if needed I could set up a bower post-install hook.  \n @kyldvs Took longer than I expected but I told you somebody would want it :wink: \n Yeah looks like we need to add a second bower module that pulls in flux utils, you did call it @zpao  :P\n Ha well @zpao I posted something about this on Twitter about 2 weeks ago, just wasn't sure who to tag then! ;)  Glad to hear it'll make its way in.\n Yup, same thing. It would be nice to have flux/utils as part of the flux bower package.\n\n@adamsea :thumbsup:\n  If you run Dispatch.unregister in the middle of a dispatch, then you modify the _callbacks object while the Dispatch loop is running.  Depending on the id you unregister, this can cause the dispatch loop to raise an error like\n\n`Dispatcher.waitFor(...): `ID_23` does not map to a registered callback.`\n\nIt would be much nicer to add an invariant in the unregister function that asserts we are not currently in a dispatch.  A slightly more complicated option is to wait for all other callbacks before performing the unregister (however this may cause a circular dependency).\n hi carlsverre,\n\ni want to work on this bug ..can you help me simulate this on my system :)\nRegards,\nTapesh Mandal\n Just run dispatch.unregister while you are in an active dispatch.  And then call waitFor right after running unregister on the dispatch id you just unregistered.\n  Add punctuation to make comment styling consistent with the rest of the repo. Nothing else was changed.\n  Add capitalization and punctuation to make comment styling consistent with the rest of the repo. Nothing else changed.\n  Fixed a typo. Didn't change anything else in the repo.\n Not a typo - this is fine either way. I don't care though so I'll let @kyldvs or @fisherwebdev take care of it.\n  ReactRouter's <Link> and possibly other transition methods are broken when used in conjunction with FluxContainer\n Looks like the same issue here: https://github.com/rackt/react-router/issues/470\n\nIf it doesn't get fixed in react-router or react itself we can try to address it. The workaround for now is to just not create containers as pure `Container.create(Foo, {pure: false})`\n ### Updating the Views\n\nThat's pretty easy to fix: pass router state down to all route handlers.\n\n[React Router 0.13 instructions](https://github.com/rackt/react-redux#my-views-arent-updating-on-route-change-with-react-router-013)\nReact Router 1.0 does this anyway, so no need to do anything special there\n\n### Updating the `<Link>` state\n\nThat's the tricky one. I'd suggest keeping the router state in the Flux store and writing your own `<Link>` that reads from it to sidestep the issue completely.\n  After you added `function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }` how is supposed to inherit from the Dispatcher?\n\nThis code doesn't work anymore because the Constructor of the instance is now AppDispatcher instead of Dispatcher.\n\n```\nvar AppDispatcher = function () {\n  Dispatcher.apply(this, arguments);\n};\n\nextend(AppDispatcher.prototype, Dispatcher.prototype, {\n});\n```\n Why not use classes and and extends?\n\n```\nclass AppDispatcher extends Dispatcher {}\n```\n I'm not using the new ES6 syntax. There is no old js way of doing that? I would not like to use all this huge thing: https://babeljs.io/repl/#?experimental=true&evaluate=true&loose=false&spec=false&code=class%20AppDispatcher%20extends%20Dispatcher%20%7B%7D\n Why do you need to extend AppDispatcher anyway?\n\nFor now I'd recommend just using 2.0.3 then, I'll look a bit into how we can support non ES6 environments.\n Yes, currently we are using the 2.0.3, but will not be able to upgrade very soon to the newest versions. I appreciate your help.\n  Adding note on installing watchify which was missing.\n This is why it was required: https://github.com/facebook/flux/issues/257\n  I'm running the example and getting the following errors:\n\n```\nMacBook-Pro:flux-todomvc $ npm install\nnpm WARN package.json todomvc-flux@0.0.3 No license field.\nnpm WARN unmet dependency /Users/J/Documents/flux/examples/flux-todomvc/node_modules/watchify requires browserify@'^9.0.2' but will load\nnpm WARN unmet dependency /Users/J/Documents/flux/examples/flux-todomvc/node_modules/browserify,\nnpm WARN unmet dependency which is version 6.3.4\nMacBook-Pro:flux-todomvc $ npm start\n\n> todomvc-flux@0.0.3 start /Users/J/Documents/flux/examples/flux-todomvc\n> watchify -o js/bundle.js -v -d js/app.js\n\nsh: watchify: command not found\n\nnpm ERR! Darwin 14.4.0\nnpm ERR! argv \"node\" \"/usr/local/bin/npm\" \"start\"\nnpm ERR! node v0.12.7\nnpm ERR! npm  v2.12.1\nnpm ERR! file sh\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno ENOENT\nnpm ERR! syscall spawn\nnpm ERR! todomvc-flux@0.0.3 start: `watchify -o js/bundle.js -v -d js/app.js`\nnpm ERR! spawn ENOENT\nnpm ERR! \nnpm ERR! Failed at the todomvc-flux@0.0.3 start script 'watchify -o js/bundle.js -v -d js/app.js'.\nnpm ERR! This is most likely a problem with the todomvc-flux package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     watchify -o js/bundle.js -v -d js/app.js\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls todomvc-flux\nnpm ERR! There is likely additional logging output above.\n```\n\nDoes the example work on other machines?\n Is watchify in `.../flux-todomvc/node_modules` ?\n Yes it is. \n ```\ngit clone git@github.com:facebook/flux\ncd flux/examples/flux-todomvc\nnpm install\nnpm start\n```\n\nAnd then navigating to index.html in my browser works fine for me.\n\nWhat npm/node version are you on? And what's the output of `npm ls` in your todomvc directory?\n It may rely on Watchify being installed globally (unfortunately). Try `npm install -g watchify` to install Watchify globally.\n Yeah `npm install -g watchify` fixed it. \n  I was just starting out with the TodoMVC tutorial/example. I cloned down the `react-boilerplate` and then I copied the `flux/examples/todomvc/package.json` into the `react-boilerplate` directory. I then did `npm install` and then `npm run build` and I get this:\n\n```\nError: Cannot find module '/Users/user/Sandbox/react-boilerplate' from '/Users/user/Sandbox/react-boilerplate'\n    at /Users/user/Sandbox/react-boilerplate/node_modules/browserify/node_modules/browser-resolve/node_modules/resolve/lib/async.js:55:21\n    at load (/Users/user/Sandbox/react-boilerplate/node_modules/browserify/node_modules/browser-resolve/node_modules/resolve/lib/async.js:69:43)\n    at onex (/Users/user/Sandbox/react-boilerplate/node_modules/browserify/node_modules/browser-resolve/node_modules/resolve/lib/async.js:92:31)\n    at /Users/user/Sandbox/react-boilerplate/node_modules/browserify/node_modules/browser-resolve/node_modules/resolve/lib/async.js:22:47\n    at FSReqWrap.oncomplete (fs.js:95:15)\n```\n\nWhat am I doing wrong? The tutorial says to make sure your `react-boilerplate` `package.json` is setup like the `package.json` from the example directory, so I just copied it over and overwrote it. Maybe that was incorrect to do? Any hints on this?\n (+1)\n I had the a similar error\n\n> todomvc-flux@0.0.3 build /home/samuele/react-boilerplate\n> browserify . -t [envify --NODE_ENV production] | uglifyjs -cm > js/bundle.min.js\n\nsh: 1: cannot create js/bundle.min.js: Directory nonexistent\nError: Cannot find module '/home/samuele/react-boilerplate' from '/home/samuele/react-boilerplate'\n    at /home/samuele/react-boilerplate/node_modules/browser-resolve/node_modules/resolve/lib/async.js:55:21\n    at load (/home/samuele/react-boilerplate/node_modules/browser-resolve/node_modules/resolve/lib/async.js:69:43)\n    at onex (/home/samuele/react-boilerplate/node_modules/browser-resolve/node_modules/resolve/lib/async.js:92:31)\n    at /home/samuele/react-boilerplate/node_modules/browser-resolve/node_modules/resolve/lib/async.js:22:47\n    at FSReqWrap.oncomplete (fs.js:82:15)\n\nnpm ERR! Linux 3.19.0-33-generic\nnpm ERR! argv \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"run\" \"build\"\nnpm ERR! node v5.1.0\nnpm ERR! npm  v3.3.12\nnpm ERR! code ELIFECYCLE\nnpm ERR! todomvc-flux@0.0.3 build: `browserify . -t [envify --NODE_ENV production] | uglifyjs -cm > js/bundle.min.js`\nnpm ERR! Exit status 2\nnpm ERR! \nnpm ERR! Failed at the todomvc-flux@0.0.3 build script 'browserify . -t [envify --NODE_ENV production] | uglifyjs -cm > js/bundle.min.js'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the todomvc-flux package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     browserify . -t [envify --NODE_ENV production] | uglifyjs -cm > js/bundle.min.js\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls todomvc-flux\nnpm ERR! There is likely additional logging output above.\n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/samuele/react-boilerplate/npm-debug.log\n  The Todo Tutorial embeds abbreviated versions of the actual code, but it included `areAllComplete={this.state.areAllComplete}` in the `TodoApp` component, which isn't actually mentioned anywhere in the tutorial itself.\n\nSince its not actually relevant to the tutorial it's probably best to remove the reference to avoid confusion.\n  When I introducing in Flux application architecture throught chat example, I can't see in UI an indication for unread thdeads in thread list.\nI think this feature is needed for this example. It's no critical, but I think this feature must exist.\nMay be without animation, but it good thing in that introducing example.\n\n<img width=\"262\" alt=\"2015-08-05 18 44 04\" src=\"https://cloud.githubusercontent.com/assets/3241812/9090288/0e6c1060-3ba2-11e5-87b5-90a6f9dda4b3.png\">\n\nOr not? :)\n\nThanks.\n  react/lib/cx has been deprecated (https://facebook.github.io/react/docs/class-name-manipulation.html). Using JedWatson/classnames.\n @spicyj The changes that you are referring to in the `dist/Flux.js` are a result of running gulp \"build\" task. Shouldn't `./dist` reflect the latest build?\n Will need to do a rebase and force push. Going to take a few minutes.\n Cool. Learned something new (How to use interactive rebase and squash commits).\n   Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  refs https://github.com/facebook/react/pull/4349\n\n\"text/javascript\" is default value of the type attribute. So we don't need to write it.\n\nAnd, Modified script tags position. (I was inspired by https://developers.google.com/speed/docs/insights/BlockingJS .)\n  Remove threadName argument from ChatWebAPIUtils.createMessage function because (1) the parameter is omitted when called from ChatMessageActionCreators and (2) the existing message parameter already contains the message theadName data.\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  The `build` command compiles to a js file called `bundle.min.js`, but the `index.html` tries to load `bundle.js`.\n See https://github.com/facebook/flux/pull/182. `npm start` should be used, which builds to `bundle.js`. We probably should get rid of the `build` script to avoid this confusion.\n Ah, okay, sounds good!\n @zpao yes, run `npm start` on the subdirectory works. Maybe Readme file should prompt us :)\n  Copyright (c)  should be 2014-2015 \n  The docs has a stripped down version of the actualTodoApp.react.js in the repo. 'areAllComplete' is passed as a prop, but is not really a part of the initial state (or) TodoStore\nFYI, the complete example linked via github has 'areAllComplete'. But in this example, we might not need it as it might confuse the readers.\n @kyldvs Like I mentioned in the earlier comment. The TodoStore sample code in the docs is a stripped down version and does not have a reference to 'areAllComplete' in it.\n\nThis makes it difficult for readers to reason about where 'areAllComplete' comes from, unless you actually look into the source code on github. Hope that helps.\n Cool.. Thanks @kyldvs :+1: \n  Improve styling for clarity in Actions-and-the-Dispatcher.md &Actions-and-the-Dispatcher.ko-KR.md\n  I updated the contribution guide to be similar to the one found in the React repo:\nhttps://github.com/facebook/react/blob/master/CONTRIBUTING.md\n @kyldvs done! nearly a year later...:)\n  Hi there! This PR has the translated docs in Thai. \n Done.\n Just want to really express my gratitude for this.  This is really awesome.  I tried to spot check the translations here and there, and would like to just verify that a couple of key points aren't getting lost.  I'll merge this in and update the site within the next week.\n Cool! You're welcome man! Let me know other points I might have missed but the docs is so very well-written that it's very hard to get it wrong. Thanks to you too.\n Hi @fisherwebdev. I just updated the translation with some polished wording while waiting for a merge. Let me know if you need more verification. \n  Per bower/bower.json-spec@a325da3\n Signed\n I think version is helpful documentation even if bower doesn't necessarily need it\n To each their own. I strongly disagree with you. \n Not familiar with bower so feel free to teach me something. Is it easy to see what version of flux you will be using from bower if this version key is not there?\n Bower will use git tags and tell you what version you installed when it installs. We should just do what is common practice / spec.\n\nWe should also probably be adding a header to our dist files that includes copyright and version information, then there's always that to look at if you don't know what version you have installed.\n Though maybe it's not so useless as VS still uses it: https://github.com/reactjs/react-bower/issues/17\n Hmm, if there are plans to merge that into react I guess we should keep version too. If not I'm happy to remove it.\n   @facebook-github-bot I just signed up. Thanks bot! :smile: \n :+1:\n Thanks!\n   Hey I just did!\n Thanks!\n  I think the `_promises` member in the `Dispatcher` is cleared to soon (flux documentation in the todo list example). If you clear it right after the `forEach` loop, changes are the callbacks have not resolved. So if you call `waitFor` then it seems that all the promises are already resolved, because the `_promises` arraty is empty. My solution is to splice the array after resolving.\n jeez i can't believe we still have that dispatcher up on the site.  really just needs to get removed from the docs entirely.\n\nhow did you test your solution?\n I think it's a nice way to use Promises so I'm glad it's still on the site!\n\nI did a simple test - see [this gist](https://gist.github.com/michielvaneerd/d67ebb8c5c0e9c45a629)\n\nThis is just the `Dispatcher` from the docs and 2 callbacks (`syncFunc` and `asyncFunc`) that I register at the `Dispatcher`. After the dispatch, I call `waitFor`. When the `_promises` is cleared right after the `forEach` loop, the `waitFor` callback is called before the `asyncFunc` has finished. When the `_promises` array is spliced after the resolve or reject, the `waitFor` callback is called after the `asyncFunc` has finised.\n   This is the same callback, not a copy.  The memory reference of the callback is being added to an array, so the dispatcher can iterate over them and call each one when dispatch() is invoked.\n @fisherwebdev - Sorry, May be I didn't explain well\n\nvar store = ...;\nvar store2 = ...;\n\nvar dt1 = dispatcher.register(store.handleCallback);\nvar dt2 = dispatcher.register(store2.handleCallback);\n//Dispatcher code, allow me to added callback again\nvar dt3 = dispatcher.register(store.handleCallback); // if dt3 is not equal to dt -meaning, same callback being called twice by dispatcher for every action.\ndispatcher.unregister(dt1); // still dt3 callback is attached to dispatcher\n\nIs this scenario, right? Please show me light - S.p I am a newbie to JS world \n  The `_onKeyDown` handler in `MessageComposer` has a naive implementation:\n\n```\n_onKeyDown: function(event) {\n    if (event.keyCode === ENTER_KEY_CODE) {\n      event.preventDefault();\n      var text = this.state.text.trim();\n      if (text) {\n        ChatMessageActionCreators.createMessage(text, this.props.threadID);\n      }\n      this.setState({text: ''});\n    }\n  }\n```\n\nThis implementation assumes that the message will be 100% saved and clears the input immediately. But often we do not want clear a form until we are not sure that AJAX call was successful. How to improve this method to restore the text if saving fails?\n We need to add two actions, one of which will be called when the XHR completes: MESSAGE_SAVED_SUCCESS and MESSAGED_SAVED_ERROR.  Based on these actions, the store should either rollback the message (and probably provide some UX around retrying) or mark/clear the message record as confirmed.\n The `MESSAGED_SAVED_ERROR` action must be called with the same `text` which was received in `createMessage`, I correctly understand? Something like this:\n\n```\ncreateMessage(text) {\n    ApiUtils.createMessage(text)\n        .then(() => this.dispatchSuccessAction())\n        .fail(() => this.dispatchFailAction(text))\n}\n\n```\n todomv\nWhy EventEmitter just register one event, then  in callback use case..\n  Was just wondering if you guys would want a PR for that\n https://twitter.com/fisherwebdev/status/603585880255639552\n\nMaybe, haven't decided.  Going to talk with some folks at FB about it.  Regardless, I wouldn't want one massive PR for both examples, but would need to approach it in digestible chunks.  At least two PRs, one for each example, but cutting it down further would be better.\n Here is at least one example in ES6, https://github.com/facebook/flux/tree/master/examples/flux-utils-todomvc\n\nI would support moving the others too.\n  People new to the concept of Flux seem to consistently have questions on a few areas:\n- when actions should be fired, and what they should represent\n- how to introduce data from a server \n\nThis suggests that the documentation for these areas is pretty consistently failing people. Additionally, people very often attempt to use actions imperatively, which--to my understanding--is a poor design decision that undercuts what Flux is supposed to encourage. \n\nI propose that documentation should be made that demonstrates what an application's actions should look like. I would love to make a PR for this, but I don't feel confident in my knowledge of how Flux is intended to be used. If this issue gets some discussion that helps my understanding, I'd be happy to write a first pass.\n @vcarl Thanks for raising this question once again. To my understanding, actions should really be called events in Flux architecture, the docs say that we should call actions like 'something has happened' (which is a notification about an event), not 'do something' (which is an imperative command).\n @sompylasar Yeah, I definitely agree with you. The problem is that most people refer to actions as Commands in CQRS terms, therefore something what should happen rather than what has actually happened. \nAction in my opinion is definitely an interaction with the system (be that a user interaction or API callback) and should never expose implementation detail. An example might be `LOAD_USER` vs `USER_LOADING_REQUESTED`.\n Discussion like this is why I want there to be more clarification around actions. I don't think simply changing what actions are named is enough to change a system of imperative to declarative, but there isn't really good information about how to plan a declarative system. I'd love to avoid writing multiple applications in order to figure out seemingly simple questions like this.\n\nI'd also like to say that the reason I think this needs attention is because the bar for documentation has been set so high by React. Those docs were so fantastic that I felt really let down that the Flux docs are only _good_, not amazing.\n The Flux docs will get a new page soon that will focus on async programming, and I will attempt to revise some existing pages soon after that.  \n\nNote: there is no Flux team at Facebook, and there is no Flux framework at Facebook. So comparing the documentation there to the docs here is a little bit unfair, in my opinion.  I know they could be better, and like I said, I'm working on it.\n @vcarl Could you please explain why 'imperatively' is bad in Flux architecture? I'm new to Flux. I fail to understand why it is bad. Looking at the TodoActions.js from the Todo example, the actions look almost exactly same as commands in CQRS system. They simply act as DTOs. What's wrong with them?\n @moon0326 In simple cases the imperative way is probably not a big deal. Like in the example, it's pretty straightforward. However, when it comes to more complex use cases you might want to treat your actions like events instead of commands. \n\nIn my opinion, it's always a bad practice to call more actions at once, especially when those actions are fired only when certain condition is met (meaning it depends on application state, meaning you are pulling the business logic from stores - where it should actually be). Eventually, you will have to do it when using commands.\n\nLet's say you have two stores in your application: `BreadcrumbsStore` and `ProductDetailStore`. Once your application loads detail data, it will get name of product and you would like the name to display in breadcrumbs and product detail. Treating them as commands would result in firing two actions `UPDATE_BREADCRUMBS` and `UPDATE_DETAIL` not very descriptive though and very specifically tied to the business logic. However, if it was an event `PRODUCT_DETAIL_LOADED` the application could handle the action (event) in both stores.\n\nAction represents interaction with system. Mostly an action initiated by user (click), but it may also be a callback from API call. And this interaction has definitely happened in the past and therefore it's an event. On other hand, command is something that should happen. Just ask yourself, what is the click on the button? Is that an event or command?\n\n**Treating actions as commands is leading to exposing your business logic outside the store**.\n @fisherwebdev Ah, I wasn't aware of that. That explains a lot of the differences then, I was under the impression it was larger.\n\nI began writing a blog post attempting to explain some of the fundamentals of Flux (directly in response to the consistent questions I was seeing), but after a while started to feel like I didn't understand what I was explaining. I'd love some feedback or contributions. The bottom is the roughest part. https://gist.github.com/vcarl/a5b362abef48767255cb\n\n@tomkis1 That's precisely what I was talking about, I love your example. Imperative actions aren't bad at a small scale (which I think is part of their danger), but when you have a massive isomorphic application with 20 people working on it, having them be glorified function calls doesn't have any benefit. \n\nThe difficulty I've had is figuring out how to have actions be decoupled from the business logic. Should there be a 'BUTTON_CLICKED' with a payload that allows stores to figure out if they should respond? Should each button click have a distinct action? I feel like the answer is somewhere in the middle, but I'm not sure what that would look like, or how it would be implemented. \n @tomkis1 Ah I see. So there's no command in Flux system. I was still thinking in CQRS where we usually command something then emit events. So..in this frontend case, where we have users....I guess user interactions are command and Actions in flux should be event.\n\nThank you for the answer.\n @vcarl Me personally always choose naming that reflects the interaction with the system. IMO firing `BUTTON_CLICKED` with payload is not optimal as you hide your business logic in action's payload. It's better to use something like `USER_LOADING_REQUESTED`\n\n@moon0326 well the difference here is that in standard CQRS, command is responsible for emitting corresponding events based on business logic. Handling emitted events serves for creating a projection (though it's most likely combination of EventSourcing and CQRS). In Flux action handler / event handler (which is store) is responsible for business logic, Store `reduce`s events into application state.\n @tomkis1  Thank you for the write up. That explains a lot.\n\nI should get my hands dirty on Flux more, but it sounds like to me that even Facebook uses imperatively action names (https://news.ycombinator.com/item?id=7719957) and past tense event names at the same time.\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  Hey there!\n\nI would like to see in chat app example using of promises to simulate real API call. \nTo me it makes differences in flux architecture.\nEg. how flux can handle asynchronous code (in actions or stores?!) etc.\n\nThanks in advance! \n +1\n if you look at the [createMessage](https://github.com/facebook/flux/blob/master/examples/flux-chat/js/utils/ChatWebAPIUtils.js#L49) method in the ChatWebAPIUtils file, there is a fake success callback simulated with a timeout. This is pretty much it. \n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  I don't really think it has any benefit to keep `waitFor` method in dispatcher as it's leading to wrong design. \n\nA great example of that is implementation in flux-chat. I was actually thinking about sending a PR where `waitFor` method is not used, then I realised that the only correct way would be to get rid of `ThreadStore` and `UnreadThreadStore`.\n\nI believe the right approach would be to to keep entire state in one store and get rid of direct dependencies which may eventually lead to inconsistent state as the application grows. For example, once new action which modifies `currentID` is presented and handled **only** in `ThreadStore`.\n\nIf we need a state variable across multiple stores, it's much better to listen to **all** actions which modify the state variable instead of presenting dependencies between stores. `waitFor` does not have any other utilisation than waiting for stores to handle actions so that we can be sure that the state has been set already and we don't need to do that as long as we keep the variable in every single store that needs the variable.\n Are you suggesting that you would duplicate the logic and the cached value in multiple stores?  That sounds like a maintenance nightmare.  I vastly prefer a single source of truth.\n\nEven if you have a global cache, with something like [baobab](https://github.com/Yomguithereal/baobab), you would still potentially have one mutation that needs to maybe happen first, depending on logic, and then a second mutation that happens based on that value.\n\nSo we have something like this:\n\n```\n// StoreA, within the switch:\ncase FOO:\n  if (shouldBarBeMutated()) {\n    mutateBar();\n    emitChange();\n  }\n  break;\n\n// StoreB, within the switch\ncase FOO:\n  waitFor([StoreA.getDispatchToken]);\n  mutateBaz(StoreA.getBar());\n  emitChange();\n  break;\n```\n\nNot sure how you'd pull that off without `waitFor()` without duplicating logic and/or cached values.\n Yes, I am suggesting to duplicate state. It does not necessarily mean that I need to duplicate logic. For the shared logic we can use [stateless service](https://lostechies.com/jimmybogard/2008/08/21/services-in-domain-driven-design/) (in Domain Driven Design terms). It's essential to realize the frequency of such a case (state dependency between stores). It's definitely a very minor use case and therefore I can imagine using shared stateless service as an ideal solution.\n\nHowever, what does concern me a lot are tight dependencies between stores. For example the snippet you have posted above, let's imagine the application grows and there is a new action (`qux`) which mutates `bar`\n\n```\n// StoreA, withing the switch:\ncase QUX:\n  mutateBar();\n```\n\n`bar` is correctly mutated and therefore consistent, however in StoreB `baz` depends on `bar` which has changed while handling `QUX` and therefore `baz` is not consistent. One solution would be to listen on the same action `QUX` even in StoreB which I found very complicated and error-prone.\n Yes, responding to the same action in both stores is how we handle this at Facebook.\n\nThe only problem we have with this approach is that an engineer may not realize they need to respond to a particular action in a \"downstream\" store.  We've talked about and experimented with developing warnings whenever an upstream store changes in an action that is not handled by its downstream stores.\n\nIf you have a solution where the state and logic are not duplicated, we could consider suggesting this in the documentation.  I'll take a look at stateless services.\n Uhm... I'm going to jump in because this is interesting.\n\nI've been using Flux in Meteor and after a while I realised I wasn't using waitFor at all. That's because in Meteor you can use reactive variables like this:\n\n``` javascript\n// StoreA:\nvar bar = new ReactiveVar(\"default value\");\nStoreA.getBar = function(){\n  return bar;\n}\n// ...\n// then, within the switch\ncase FOO:\n  if (shouldBarBeMutated()) {\n    mutateBar();\n    // you don't need emitChange with Meteor's reactivity either\n  }\n  break;\n\n// StoreB, not in the switch\nTracker.autorun(function(){\n  mutateBaz(StoreA.getBar());\n  // not need for emitChange either, UI's update reactively\n});\n```\n\nStoreA.getBar() returns a reactive variable, `bar`, so Tracker.autorun will rerun again automatically whenever `bar` changes, keeping everything in sync.\n\nActually, when it comes to case QUX, it still works without any other code in StoreB:\n\n``` javascript\n// StoreA, withing the switch:\ncase QUX:\n  mutateBar();\n```\n\nBecause again, whenever `bar` changes, no matter where, all Tracker.autorun functions depending on `bar` rerun automatically again.\n\n## \n\nOn other side, [Optimizely's Flux implementation](https://github.com/optimizely/nuclear-js) don't use waitFor either, because they use getters outside stores (point 3 of how Nuclear differs from Flux). They can do that because state is not spread out through stores, but contained in a single immutable map.\n Thanks for those explanations, Luis.  I think this is somewhat similar to where a few folks I've talked to are going with Flux + Baobab.  I'm very interested in the idea of a global state cache, accessible by all stores.\n\nIt does seems to reduce the amount of dependency logic, but I'm a bit concerned about the amount of hidden magic going on in a system where updates cascade through the data layer.  This is exactly the situation that Flux was created to avoid.  Making the updates explicitly declared in the stores helped us to reason about complex updates that touched a lot of domains.  When mutations are happening reactively (I might say magically) it becomes more difficult to understand how data is changing throughout the application.\n\nBut perhaps it doesn't matter.  Maybe all we need is to focus on writing in an FRP style throughout the stores, and I might be able to get on board with this.  I'll take a deeper look at the suggestions you've offered.\n Yeah, I definitely think that reasonable option would be to keep the store stateless and pull the state to single shared storage. The storage of shared state may be for example Baobab or any other immutable tree data structure.\n\nThat would mean stores would become just a dummy action handlers (business logic handlers) and I am still thinking about the name, as Store is probably not very descriptive in this case.\n\nBill, you have mentioned that even in this case, you most likely won't avoid the need for `waitFor` because you probably want to execute those dummy handlers in particular order as one handler may depend on state which has been reduced by other handler. Just please, keep in mind that waitFor will not help you when using Baobab. The reason why is because `change` is emitted only once on the end of the call stack (setting value to baobab and then immediately reading it, will result in reading old value).\n\nAnyway, I would say that the need to use `waitFor` to keep particular order of handled actions is most likely caused by wrong architectural decision. Stateful store is supposed to encapsulate specific domain and the **state is responsible to determine those boundaries**. However, if the store is stateless and entire state of app is held in single tree, the decision about store boundaries is not that strict and we create those boundaries only to make our code logically grouped together (we could possibly have just single store to handle all actions, which is of course not ideal). The tree itself is responsible for emitting change for specific views which really need to update. So in other words, if we really need to rely on order then it's probably better to handle everything in single action handler, but in most cases we could avoid it by proper schema of the tree.\n\nEven though Baobab is a great idea, there is in my opinion one even better approach. We can possibly have just one emit event for entire tree (any change in the tree would result in the emit change) and the topmost view would listen to the change and pass the state down through the component hierarchy via props. However, there is one requirement. All components but the root must be **pure**. If the condition is met and we are using immutable data structure (which we should anyway) we could possibly have `PureRenderMixin` in all our components and the immutable data tree with the mixin allows us to update views only when necessary. In that case we don't even need Baobab.\n There is my contribution on this topic.\n\nYou can treat Dispatcher's API as a low-level and create your definition of stores above. For example, in my [Stores implementation](https://github.com/alexeyraspopov/flux-stateful) I've used `waitFor` under the hood, [inside state getter](https://github.com/alexeyraspopov/flux-stateful/blob/master/index.js#L45-L47).\n\nThat means that you can just use getter and don't even think about `waitFor`. Check example [here](https://github.com/alexeyraspopov/flux-stateful#dispatchers-waitfor).\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  Based on the current writings and diagrams, it's possible for developers to hastily conclude that it is strongly recommended that stores themselves are not allowed to create actions. The documentation on  [Structure and Data Flow](https://facebook.github.io/flux/docs/overview.html#structure-and-data-flow) or [Actions and the Dispatcher](https://facebook.github.io/flux/docs/actions-and-the-dispatcher.html#content) needs to be supplemented with an exemplar data flow that is not originating from client-side interactions exclusively.\n\nResearching the discussions on the internet reveals that many developers are strongly fixated to the understanding that stores are conceptualized in a way that doesn't permit them to initiate cyclic, blow-for-blow, action-response flows together with a dispatcher, even though such communication still warrants that stores self-update in response to an action, maintaining the unidirectional flow of data within the application.\n\nFor example, please see the [comments thread](http://stackoverflow.com/a/26581808/44041) on a SO question where @fisherwebdev explains that stores are allowed to communicate with the dispatcher to generate actions that they can reciprocally use to update themselves in response to data received from a Web API request they instigated.\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n   thanks!\n  feature request: add a flux example that does not use react\n angular?\n a small example\n Blaze (Meteor): https://github.com/meteorflux/todoflux\n\nInfo about Blaze: http://meteor.github.io/blaze/\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n No activity here for a while and I do not plan to add this, so I am going to close this issue. If anyone is still interested in this I am happy to accept a PR for it.\n  TodoConstants module is not mocked but jest is mocking keymirror module that is\nin use by TodoConstants. I had to turn mocking off on keymirror to get\nTodoConstants to return a correct map in the tests.\n The tests are passing for me.  I'm putting a console.log in the test and seeing the action type represented as a string accurately.\n\nI did just update the jest version throughout the repo.  Can you verify that you are using Jest 0.4.3 and still seeing problems?\n\nthanks\n :+1: that fixed it, thank you\n   Thanks! However we actually need this change to happen in our docs in master, otherwise they'll get clobbered the next time we generate gh-pages. I just pushed 228ba3b186f22e8303c32cb5427ba3991aef6246 with the change in the right place.\n  This pull request changes the value of the license property in `package.json` to a standard, machine-readable SPDX license identifier.\n\nI'll be honest: This is a semi-automated pull request. I started by using [dat](http://dat-data.com/) and [dat-npm](https://www.npmjs.com/package/dat-npm) to review metadata for all packages on [npm](http://npmjs.com), looking for packages that don't use a valid [SPDX license identifier](https://spdx.org/licenses/) in `package.json`. I used my own npm module, [spdx-correct](https://github.com/kemitchell/spdx-correct.js) to guess what license you were after: [`\"BSD-3-Clause\"`](https://spdx.org/licenses/BSD-3-Clause). A quick manual check and a few shell scripts later, and this pull request was born.\n\nnpm doesn't require that you use a valid SPDX identifier, but it's strongly recommended. (Try `npm help 7 package.json` and search for \u201cLicense\u201d.) Other source code package managers, like Maven for Java and RubyGems for Ruby, recommend the same. \n\nWhy care about SPDX? A machine-readable standard makes it possible for programs, rather than just people, to review a module or even an entire codebase to make sure that licenses are compatible. Whatever the reason\u2014strong personal conviction, company policy, terms of a business deal\u2014SPDX makes it easier to collaborate with others when licenses can be a problem, and helps take open-source software to more places. Given that [npm has a ton of modules](http://www.modulecounts.com/) but also handles dependencies in a novel way, I think a little license hygiene could help npm build amazing new relationships between communities that lawyers have long kept apart.\n\nThough this PR was semi-automated, my responses to any questions you have won't be. I can't give legal advice via GitHub, but I'm happy to answer questions about SPDX or point you to good resources.\n\nThanks for your contribution to open-source software!\n\nK\n This is trivial so is fine without the CLA signed.\n Thanks, @zpao.\n No problem, thank you :)\n  While developing a few utility libraries for some of our Flux applications, I thought it might be nice if those were broken down to use the invariant dependency so that our errors could leverage it as well and be a bit more unified with how other messages are exposed in Flux.\n\nIt's quite a simple module however, and if you think it would raise more complications then we can just mirror the behavior instead of just utilizing it directly off of `require('flux').invariant`.\n I think this is the wrong solution to the problem. I'll let @fisherwebdev actually make the call though.\n\nFWIW, you may be interested in https://www.npmjs.com/package/invariant which was pulled from our code.\n @zapo There's likely a more elegant solution yes. I came across it when I tried to just use it and notice that `var Invariant = require('flux').invariant` was undefined. Right after I opened this, I realized there may be reasons why you wouldn't want this exposed or supported publicly.\n\nI saw [this](https://github.com/rackt/react-router/search?utf8=%E2%9C%93&q=invariant) in `react-router` and wondered if using it that way would also be a less-than-desirable solution.\n\nFor some reason, I'd thought that Flux and React would be using the **same** invariant dependency.\n @sprjr I'm using `browserify` to re-expose `flux`. See if it helps.\n\n```\n// myflux.js\nvar Flux = require('flux');\nvar EventEmitter = require('events').EventEmitter;\nFlux.EventEmitter = EventEmitter;\nmodule.exports = Flux;\n\n// index.js\nvar Flux = require('./myflux');\n```\n @zpao I was under the impression that there was a plan to expose invariant in a way that would be not tied to any one FB open source project.  Is that still going to happen?\n I'm working on it.\n Closing this because Paul's solution is coming soon.  If it turns out that Paul's solution is not what the community wants, we can revisit.\n  Dispatcher `_lastID` is not currently bound directly to the `Dispatcher` class, meaning that if multiple instances are created, they share, and increment the same variable.\n\nIn the context of isomorphic flux apps, it can make sense to use per-request flux instances on the server (as opposed to the singleton flux pattern), as this allows flux instantiating to be fully asynchronous.\n\nWhen this per-request flux pattern is used, the `_lastID` should really be bound to the class to avoid shared \"state\", and to also avoid the very, very, very unlikely (and yet still possible) case that our ID counter surpasses the [magic JS integer limit](http://stackoverflow.com/a/307200) and we have a very annoying-to-debug issue.\n +1\n <3 thanks for this!\n @fisherwebdev maybe update npm package with new version? https://github.com/goatslacker/alt and https://github.com/acdlite/flummox still have `\"flux\": \"~2.0.1\",` as dependency which is latest on npm - https://www.npmjs.com/package/flux\n @fisherwebdev thanks! :+1: \n @fisherwebdev Seems like currently the file on npm is still `v2.0.1` although `package.json` says it's `v2.0.3`, might need to update npm with correct content again? Thanks.\n  The overview page states that \"Controllers do exist in a Flux application, but they are controller-views \u2014 views often found at the top of the hierarchy that retrieve data from the stores and pass this data down to their children.\"\n\nThis is incorrect; a controller in MVC does not manipulate the view or know anything about view state.  A controller merely updates the model when it receives events from the view.\n\nThere is so much wrong information about MVC out there; it's one of the most misunderstood concepts in programming.  The most pure form of MVC is a reactive data flow just like in Flux:\n- The view listens to the model for change events.  Whenever it gets one it updates itself to display the latest model data\n- The view fires an event to all registered listeners when the user performs an action\n- The controller listens to the view for action events.  Whenever it gets one it changes the model state accordingly.\n- The model does not listen to anything.  Whenever its state is changed, it fires a change event to all registered listeners.\n\nmodel -> view -> controller -> model -> view -> controller -> etc...\n\nViews updating models is wrong\nControllers updating views is wrong\nControllers listening to models is wrong\nModels listening to anything else is wrong\n\nNot often covered in articles about MVC is that often something _outside_ these three typically hooks the three together.\n\n`this.state` for any React component is a ViewModel; the actual models are state inside Stores or the backend.  If one View fetches data from stores and passes it down to child views, this is view logic responding to a model change event by updating ViewModels.\n\nThis is one example of how, IMHO many of Flux' criticisms of MVC show a misunderstanding of how to properly implement MVC.  Please stop spreading this kind of misinformation.\n IMO, Flux is almost the same with MVC: ActionCreator is Controller, Store is Model, Component is View. Just one thing difference, that's Dispatcher. We need the dispatcher to implement the waitFor method. \nAnd one other concept in Flux, that is one way data flow. Usually other implementations of MVC didn't use that concept, especially in JS world.\n The action creators are not controllers. Controllers act _upon_ models. No\nentity acts upon the stores. Rather, they define how they will respond to\nactions. It is really not the same -- there is no controller imperatively\norchestrating how the data layer should be updated.\n On May 11, 2015 3:39 PM, \"soul-wos-vn\" notifications@github.com wrote:\n\n> IMO, Flux is almost the same with MVC: ActionCreator is Controller, Store\n> is Model, Component is View. Just one thing difference, that's Dispatcher.\n> We need the dispatcher to implement the waitFor method.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/flux/issues/193#issuecomment-101067749.\n Thank for your explanation. Sorry I mean Action function, not ActionCreator. But may be I'm still misunderstood because I use some transformation in my action:\n\n``` js\nActionDoSomething = function() {\n// get data from api methods\n// transform the data\n// dispatch the payload data\n}\n```\n\nShould I use the transformation before dispatching to stores, or just leave the transforming will be done later in the View rendering?\n If you need to do a transformation that is generally applicable to your entire application, I would do that in the success callback defined within a WebAPIUtils module.\n\nBut if the transformation is specific to a single store, I would do it in the store.\n\nLikewise, if a particular transformation is only applicable to a view, or if there is a good reason to maintain the data in the store in a different, more maintainable way, then you would want to do that transformation in the view.\n Just as a historical note...\n\nIt's kind of hard to tell, but I think before the web days the\ncontroller was only considered responsible for listening to the view and\nupdating the model. When web MVC frameworks came around they reused\nthese terms, but the responsibilities are completely different, since\nthere is no persistent view listening to the model: instead the\ncontroller builds a view from scratch to respond to every request. I'm\npretty sure that's why there have been so many debates about the\nterminology.\n\nOn Mon, May 11, 2015, at 06:27 PM, Bill Fisher wrote:\n\n> The action creators are not controllers. Controllers act _upon_\n> models. No\n> \n> entity acts upon the stores. Rather, they define how they will\n> respond to\n> \n> actions. It is really not the same -- there is no controller\n> imperatively\n> \n> orchestrating how the data layer should be updated.\n> \n>  On May 11, 2015 3:39 PM, \"soul-wos-vn\"\n>  notifications@github.com wrote:\n> \n> IMO, Flux is almost the same with MVC: ActionCreator is\n> Controller, Store\n> \n> is Model, Component is View. Just one thing difference, that's\n> Dispatcher.\n> \n> We need the dispatcher to implement the waitFor method.\n> \n> \u2014\n> \n> Reply to this email directly or view it on GitHub\n> \n> https://github.com/facebook/flux/issues/193#issuecomment-101067749.\n> \n> \u2014 Reply to this email directly or view it on GitHub[1].\n\nLinks:\n1. https://github.com/facebook/flux/issues/193#issuecomment-101073545\n   @fisherwebdev I just updated this PR with latest changes from master. Is it good to accept or do you need other changes?\n  The Chat example does the following in the top level [app.js](https://github.com/facebook/flux/blob/master/examples/flux-chat/js/app.js) :\n\n```\nChatExampleData.init(); // load example data into localstorage\n\nChatWebAPIUtils.getAllMessages();\n...\n```\n\nSo `getAllMessages()` has side effects? Otherwise, why call it and throw away the result? That part doesn't seem clean.\n why  call getAllMessages  on  view ??\n\nhttps://github.com/facebook/flux/blob/master/examples/flux-chat/js/app.js#L23\n\nisn't better to have an action to do this??\n  First time contributor here!\nI found these example repositories to be tremendously helpful while getting the hang of flux, but was finding it difficult to locate resources on jest testing, particularly around testing components (aside from the few StackOverflow threads and the notes on react/flux doc pages). \nThis PR adds a handful of new tests aimed at the todomvc example's component files. \nLooking forward to feedback, and any best practices to know about!\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  In short.  I am issuing an XHR.  When it returns I need to trigger an action with input data from a Store.  What is the preferred approach?\n\nIn long, consider the following scenario :)\nI have a page that contains a list of search results.  The search results and the query used to retrieve them are stored in a SearchStore.  These search results are loaded via an XHR dispatched from SearchActionCreators.  Users can edit items in the search results.  When they do so I issue an XHR via EditActionCreators.  When the xhr returns (eg the action is complete) I want to \"refresh\" the search results in the SearchStore using the current query in the SearchStore.  \n\nThere are a few approaches I can take to accomplish this:\n1.  Invoke SearchActionCreators.refresh(SearchStore.currentQuery) from within EditActionCreators when the XHR is complete.  This approach requires my ActionCreator maintain a reference to my Store.  \n2.  Invoke SearchActionCreators.refresh(SearchActionCreators.currentQuery) from within EditActionCreators when the XHR is complete.  This approach requires my ActionCreator to maintain state.  \n3.  Invoke SearchActionCreators.refresh(SearchStore.currentQuery) from componentWillUpdate within my view.  This does not seem to fit with the intent of componentWillUpdate.\n\nFlux is straight forward when XHR's result in DOM changes, but I start to get confused when XHR's result issuing other XHR's with input from the current state of the app (contained in a Store).\n If you are storing the query in the SearchStore why do you need to send it again?\n\nI think in your case I would register the SearchStore for the action dispatched when the edit returns. In that callback, I would update the Store data accordingly and send the change event (so the view refreshes itself).\n @LuisHerranz \n\nLet me clarify what I mean what I say \"and the query used to retrieve them are stored in a SearchStore\":\n\nI am consuming a search API; the parameters to that request {partnerName:string, startDate:Date} are stored in the SearchStore.  \n\nI need to send the query again (via an action) to refresh (via SearchActionCreators.refresh) the search results after a user performs an edit (via EditActionCreators). \n\nI'm not sure how to get query parameters stored in SearchStore to SearchActionCreators.refresh.\n Why not pass the query to the action creator via the component onclick?\n\nI.e:\nonClick: function(){\n   Actioncreator.refresh(store.query);\n}\n\nPresumably the component should be able to access the store already.\n\nBut also I don't think there is any conceptual problem with an action creator keeping a reference to a store to read data so long as any writes to the store are done as  regular dispatches and not as some type of special non flux relationship.\n\nSometimes it makes sense that there would be a store with raw data that is used to populate a lower store with a version of that data specific to a components needs.  In this case I have an action creator that maintains a ref to the more abstract data store and reloads the dependent store via a dispatch.  The component only knows about the dependent store so the action creator maintains a handle to the main store itself.\n\nSent from my iPhone\n\n> On Mar 27, 2015, at 6:26 AM, TimothyRHuertas notifications@github.com wrote:\n> \n> @LuisHerranz\n> \n> Let me clarify what I mean what I say \"and the query used to retrieve them are stored in a SearchStore\":\n> \n> I am consuming a search API; the parameters to that request {partnerName:string, startDate:Date} are stored in the SearchStore.\n> \n> I need to send the query again (via an action) to refresh (via SearchActionCreators.refresh) the search results after a user performs an edit (via EditActionCreators).\n> \n> I'm not sure how to get query parameters stored in SearchStore to SearchActionCreators.refresh.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n @sterpe your suggestions are pretty pragmatic; I like them. I wasn't sure about the action creators maintaining a reference to the store because the architecture diagram doesn't suggest that. Passing the query parameters to the edit action seems like the right thing to do. Perhaps I should change the name of the method to editAndReload for the sake of semantics.  Thanks for the suggestion.  I'm going to leave this open for another day or two to see if others agree. \n @fisherwebdev You are correct.  The missing link is web api util's having knowledge of stores.  I was under the impression that they were intended to be plain old web clients.  Things make sense now.\n\nThanks for clarifying how store data gets passed to components.  I would add that for controller views that composite a large amount of components (e.g. data grids) understanding the PureRenderMixin and immutability is key to avoiding performance problems.  Our team struggled with this in the beginning.  \n Thanks for the reply here @fisherwebdev, the clarifications at the end help a lot with some other stuff I've been trying to sort through. I haven't run in to the issue Tim has yet, but I'm building a similar project in parallel and I'm bound to eventually.\n\nRight now my stores are not taking advantage of `Dispatcher.waitFor()` so I'll try to dig in to that a bit more.\n Closing this out.  Thanks again all for your help.  It really helped move my code forward.\n @fisherwebdev I still have a question with the `WebAPIUtils` Module\n\n> Here's the sequence:\n> 1. User performs edit.\n> 2. View component calls action creator (with edited text?).\n> `SearchActionCreators.refresh()`\n> 3. The action creator calls the WebAPIUtils module after dispatching the action. \n> `WebAPIUtils.refresh()`\n> 4. The WebAPIUtils module gets data from the stores that it needs to make the call to the server.\n> `var query = SearchStore.getCurrentQuery()`\n> 5. WebAPIUtils initiates server call and in turn calls an action creator when it handles the response.\n\nThe `SearchActionCreator` can call the `WebAPIUtils.refresh()` means the `WebAPIUtils` module may have a dependency of action creators. And when the `WebAPIUtils` take action creator's method as xhr callback, it means the action creator have a dependency of `WebAPIUtils` module.\n\nWhy this comes into in a dependency cycle?\n I don't think WebAPIUtils should depend on SearchActionCreator.  Rather have WebAPIUtils.refresh dispatch a complete event (or return a promise, or take a callback) that SearchActionCreator listens to.  When SearchActionCreator is notified that WebAPIUtils.refresh is complete it can create a new action (REFRESH_COMPLETE or REFRESH_ERROR).  \n\nThat said if you are creating a new project you should consider using Redux.  There are some nice tutorial videos linked to from the readme https://github.com/rackt/redux.  This video explains how Flux inspired redux https://www.youtube.com/watch?v=xsSnOQynTHs\n Thanks @TimothyRHuertas , promises seems to be a better solution. Heard of redux for a while, will take a look into it in a couple days.\n  [Line 14 of ThreadSection](https://github.com/facebook/flux/blob/master/examples/flux-chat/js/components/ThreadSection.react.js#L14)\n Good catch!\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n this is the grep output for string \"MessageStore\"\nBinary file .git/index matches\nexamples/flux-chat/js/components/MessageSection.react.js:var MessageStore = require('../stores/MessageStore');\nexamples/flux-chat/js/components/MessageSection.react.js:    messages: MessageStore.getAllForCurrentThread(),\nexamples/flux-chat/js/components/MessageSection.react.js:    MessageStore.addChangeListener(this._onChange);\nexamples/flux-chat/js/components/MessageSection.react.js:    MessageStore.removeChangeListener(this._onChange);\nexamples/flux-chat/js/components/MessageSection.react.js:   \\* Event handler for 'change' events coming from the MessageStore\nexamples/flux-chat/js/components/ThreadSection.react.js:var MessageStore = require('../stores/MessageStore');\nexamples/flux-chat/js/stores/UnreadThreadStore.js:var MessageStore = require('../stores/MessageStore');\nexamples/flux-chat/js/stores/UnreadThreadStore.js:    MessageStore.dispatchToken\nexamples/flux-chat/js/stores/MessageStore.js:var MessageStore = assign({}, EventEmitter.prototype, {\nexamples/flux-chat/js/stores/MessageStore.js:MessageStore.dispatchToken = ChatAppDispatcher.register(function(action) {\nexamples/flux-chat/js/stores/MessageStore.js:      MessageStore.emitChange();\nexamples/flux-chat/js/stores/MessageStore.js:      MessageStore.emitChange();\nexamples/flux-chat/js/stores/MessageStore.js:      MessageStore.emitChange();\nexamples/flux-chat/js/stores/MessageStore.js:module.exports = MessageStore;\n examples/flux-chat/js/components/ThreadSection.react.js  is the only one to be modified according to the above grep search ..it is a simple one line deletion ..opened a PR :)\n  hi im trying to run the flux examples and im not updating any files but it looks like watchify is constantly adding to bundle.js. is this correct or is there something wrong with this installation? im a bit of a newbie so maybe its meant to work this way by the bundle.js files looks pretty MASSIVE.\n\n/var/www/flux/examples/flux-chat$ npm start\n\n> flux-chat@0.0.2 start /var/www/flux/examples/flux-chat\n> watchify -o js/bundle.js -v -d .\n> 1615032 bytes written to js/bundle.js (3.82 seconds)\n> 1615032 bytes written to js/bundle.js (0.53 seconds)\n> 1615032 bytes written to js/bundle.js (0.44 seconds)\n> 1615032 bytes written to js/bundle.js (0.62 seconds)\n> 1615032 bytes written to js/bundle.js (0.51 seconds)\n> 1615032 bytes written to js/bundle.js (0.50 seconds)\n> 1615032 bytes written to js/bundle.js (0.44 seconds)\n> 1615032 bytes written to js/bundle.js (0.47 seconds)\n> 1615032 bytes written to js/bundle.js (0.39 seconds)\n> 1615032 bytes written to js/bundle.js (0.47 seconds)\n> 1615032 bytes written to js/bundle.js (0.48 seconds)\n> 1615032 bytes written to js/bundle.js (0.47 seconds)\n> 1615032 bytes written to js/bundle.js (0.45 seconds)\n> 1615032 bytes written to js/bundle.js (0.52 seconds)\n> 1615032 bytes written to js/bundle.js (0.43 seconds)\n> 1615032 bytes written to js/bundle.js (0.49 seconds)\n> 1615032 bytes written to js/bundle.js (0.42 seconds)\n> 1615032 bytes written to js/bundle.js (0.53 seconds)\n> 1615032 bytes written to js/bundle.js (0.40 seconds)\n> (and so on ad infinitum)\n watchify is constantly updating the console even though i am not making any changes to code. is that normal/expected operation?\n You have be explicit about the entry file(s). This works without the constant rebuilding: `watchify -o js/bundle.js -v -d js/app.js`\n Fixed. Thanks @zertosh for the solution!\n Thanks @zertosh!  I had copied a bit of boilerplate code for my project from the flux tutorial and encountered this problem only when I switched a new HD and re-downloaded all my NPM packages.\n  update src from `bundle.js` to `bundle.min.js` as built from `npm run build`\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n Problem is if you build and open the project it does not work because index.html tries to load the non-minified one. In any case this PR was solving that but creating problems when running `npm run start`. My bad sorry.\n  Since I find no _build.js_ in this repo , I suppose it to be _bundle.js_ generated by `npm start`:relaxed:\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  We want to trigger Store.emitChange() only if data were changed.\n For our stores we emit change every time, although I don't think it would be too terribly difficult to implement a `shouldStoreEmitChange` function - but I don't know that you could do that in Flux, there would still be some manual calculations you'd have to perform. (if I'm understanding what you're asking)\n No. My proposition is much simpler :). \nI believe I wrote some kind of misdirection in my explanation for the patch.\n\nNow code is:\ncase TodoConstants.TODO_CREATE:\nif (text !== '') {\n  create(text); // here we save changes to our Data/Model\n}\nTodoStore.emitChange(); // here we run View re-rendering\nbreak;\n\nWe do re-rendering even if we have not changed Data/Model.\nThis is meaningless.\n\nI propose to run View re-rendering (that starts when we fire TodoStore.emitChange() event)\nonly when Data/Model were changed. Only if we run create(text).\nif (text !== '') {\n  create(text);\n  TodoStore.emitChange();\n}\nbreak;\n  We need the starting year, not just the most recent year. We may be able to change this to `2014-present` but lets do this first.\n\nThis reverts and then does #160 correctly.\n  Hi there,\n\nI have asked a question on Stack Overflow regarding getting initial state into a store: http://stackoverflow.com/questions/28958290/react-flux-getting-initial-state-into-a-store\n\nI would appreciate any input (even though I'm using Reflux).\n Thanks for you input @fisherwebdev  - an initial load sounds like the best approach. With regards to the Stack Overflow tags - noted :)\n  Let's assume that there are many stores that store e.g. user records like users' friend lists, user search results, likers of posts, authors of comments etc. It's possible that some users will be in more than one store, e.g. one of my friends likes one of my posts. Does it make sense to store all user records in a single store and keep only their IDs in derived stores to avoid storing copies and worry about synchronizing them across stores? If so, would the main user store need to listen to _all_ actions that can change _any_ of the derived stores or is there some other way to update it when one of the derived stores changes?\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  Please consider updating the docs and examples from this pattern:\n\n``` javascript\nvar user = {\n      name: ''\n    };\n\nexport default new class Store extends EventEmitter {\n\n  ...\n\n  get value() {\n    return user;\n  }\n\n  ...\n\n}();\n```\n\nto this pattern:\n\n``` javascript\n  get value() {\n    return Object.assign({}, user);\n  }\n```\n\nMore information [here](https://github.com/facebook/react/issues/3297).\n  As noted from #119 the example chat application contains separate server and view dispatch methods which provide no value. This PR removes those methods and unused constants, updates the actions and updates the store callbacks.\n @fisherwebdev Happy to help :)\n  I've also run into some problems with the `cannot dispatch in the middle of a dispatch` error message.\n\nMy use case is as follows:\n\nI load something from the server (a `calendar` object), the dispatcher dispatches an action once it has completed loading (`UPDATE_CALENDAR`). Now, I need to perform _another_ call to the server if _some attributes of the calender object specify a certain criteria_. \n\nSo, prefreably, I would be able to call the server (once again using the `ActionCreators`) in response to my `calendar` object, but the problem is that my `Calendar` component is being updated in the `CalendarStore`'s dispatch-token callback, so in effect the `UPDATE_CALENDAR` event is still being dispatched.\n\nIs there a way to chain various dispatches? (The `setTimeout` hack works, but feels ugh.)\n\nIn essence, something like this:\n\n```\nActionCreator -> (WebAPIUtils) -> ServerActionCreators -> \nDispatcher -> Store callbacks -> add new dispatch to be executed *after* the current dispatch finishes \n```\n\nOr perhaps some sort of `after` hook?\n\nIf this is unfeasable, is there a way to make components call an `ActionCreator` without user interaction / setTimeout?\n Faced this too ... \nYou can return _Promise_ from action creators. This looks more clearer than _setTimeout_\n  For example, a complex multi-step wizard interconnected with other app components. I understand this is a very general question without context. I am looking into different Flux implementations (Facebook's, Nuclear.js, RiotControl) and trying to understand which is more suitable for an existing large app to migrate to and as a result have more benefits than issues. It would be great to hear from the community if someone has got this experience. Thanks in advance!\n Thanks, the case you described is quite obvious.\n\nBut the complete components rarely consist of a single store. They at least have a set of views, which in turn have a set of styles and other resources. They could also have dependencies on other stores, HTTP APIs etc.\n\nWhat could be the options to reuse such components?\n So you want to say there is no arrchitecture pattern how to develop Flux\napps to make their parts that make a complete component (N stores + M views\n- dispatcher + actions + etc) reusable in several apps, am I right?\n\nPlease could you also describe passing a dispatcher and moving to store\ninstances in more detail?\n\nThanks!\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  Is it just me, or is the name \"ActionCreator\" a bit clumsy \u2013 and also slightly inaccurate considering its purpose in the Flux architecture? There has been some confusion circulating about the purpose of this type of components, and I think that's mainly because of its name.\n\nAn ActionCreator is responsible for creating an Action, but also for passing the action along to the Dispatcher. Now, the name of the component does not encompass the latter responsibility. So maybe ActionCreators should have a different name?\n\nI find \"Actor\" to be a better name. Not just is it an easier word, I also consider it more precise. As we know, an Actor is someone or something that acts on a system, and it does so by means of Actions. Also, an Actor is the _origin_ of a performed Action, i.e., Actors also _create_ Actions. This definition fits in nicely with the responsibility of today's ActionCreators.\n\nConceptually, the coupling between the Actor and the Dispatcher is also pretty easy to explain. When an Actor performs an Action on a system, it does so by way of a channel. In this case, the channel is the Dispatcher.\n\nSo, what do you guys think? Actors or ActionCreators? Or maybe someone else has a better suggestion?\n Internally we named our ActionCreators Intents for the same reasons (admittedly risking confusion with Android Intents).\n I would agree that using term \"actor\" to describe \"action creator\" can\ncause a lot of confusion for some folks. In Erlang (and inspired\nplatforms), actors are the core building block with very strong\nconnotations. People keep state and logic inside actors. Meanwhile in\npre-Relay React/Flux I observe that action creators tend to be stateless\nand simple.\n\nIt is in the nature of people to try to find patterns in things and follow\nthem. If \"action creators\" were called \"actors\", a lot of people could\nstart putting logic and state in them.\n\nI found some success in using term \"event creator\", while describing\n\"action creator\" in Flux to the folks with the event-driven background.\n\"Event\" has a strong meaning in that context: it is something that has\nhappened in the past, is named in the past tense (\"UserProfileFetched\",\n\"LikeSentToServer\", \"ServerFailedToHandleLike\") and that can't be rejected\nby the subscribers, since you can't change the past (in that it differs\nfrom \"commands\" and \"actions\", which can be rejected by the handler or\nfail). We have a lot of intuitive knowledge about the events and the past\n(e.g. see this image https://twitter.com/abdullin/status/532464175671672832)\n\n\"Event creator\" was accepted well in explanations as well, since \"creator\"\nfeels like a \"factory\": just a helper method, which contains the bare\nminimum of logic to create events.\n\nHowever, while explaining Flux in these terms, I always clarify that all\noriginal documentation on the subject refers to these items as \"actions\"\nand \"action creators\".\n\nBest regards,\nRinat\n\n_Rinat Abdullin_ | Writer at Abdullin.com http://abdullin.com\n\nOn Tue, Feb 24, 2015 at 10:04 PM, Bill Fisher notifications@github.com\nwrote:\n\n> Yeah, the name is probably a little clumsy. There's a lot of information\n> out in the world now about action creators, so I doubt we want to create\n> more confusion by changing the name now.\n> \n> The history here is that we used to call the FooActionCreators module just\n> simply FooActions, but this led to some confusion -- the methods were seen\n> as the action instead of the object they create and pass to the dispatcher.\n> In the summer of 2014 Jing Chen and I were putting together a presentation\n> for ForwardJS\n> http://facebook.github.io/flux/docs/videos.html#react-and-flux-building-applications-with-a-unidirectional-data-flow-forward-js-2014\n> and we wanted to dispel this confusion. We came up with ActionCreator a day\n> or two before the conference. Now we're a bit stuck with it.\n> \n> I'll think about it, though. Thanks for bringing it up.\n> \n> I think Actor or Intent is a fine name for these methods, and I encourage\n> you to do what you think is best for your teams. There are connotations to\n> both that I might quibble with, however.\n> \n> Actor tends to be something with agency, which these methods do not really\n> have.\n> \n> Intent leans toward thinking of the methods like setters, and this is an\n> easy trap to fall into. The actions are reporting on something that\n> happened in the real world -- the user clicked, the server responded, etc\n> -- and the Flux stores need to respond to this real world change. Intent\n> implies that the server \"intends\" for something to happen in the client\n> side application, which is not really true -- it's the store that needs\n> listen to actions and respond. The actions are more like a newspaper,\n> reporting on the real world. Thinking more in these terms, I've switched to\n> naming all my action types in the past tense.\n> \n> See also this conversation I had with @abdullin\n> https://github.com/abdullin, who is the person who first emphasized\n> this \"past\" quality of actions.\n> https://gist.github.com/abdullin/5953ab4f5eae0a7fc8f9\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/flux/issues/165#issuecomment-75797532.\n Thanks for the lively discussion. I'm learning a lot from you guys. I agree with @fisherwebdev that neither Intent nor Actor fully captures the purpose of ActionCreators. Using the past tense in the action name is a fantastic suggestion. Sometimes I get asked if it's possible to prevent an action by returning false, which indicates the confusion that an ActionCreator might be like an ordinary event handler, and this naming convention might prevent that mistake.\n Call them simply actions. When a component needs to perform a particular task it executes the relevant action. That \"action\" code could perform a server side call, or two, and dispatch out events (in past tense) informing the rest of the system of what just occurred. So it comes down to just two terms then; actions that could be performed, and events that occur.\n One of the reasons we chose the name `Intents` is that conceptually an actor has the intent to do something, but the actual behavior of the flux system as a result of that intent is unknown by the actor. For example, you have the intent to fetch new ToDo data from the server.\n\n``` javascript\n// pseudocode\nToDoIntents.refreshFromServer = function() { // asynchronously tries to fetch the data, meanwhile...\n  dispatch Constants.TODO_REFRESH_ATTEMPTED // past tense\n  // later, on response from server...\n  dispatch Constants.TODO_REFRESH_SUCCEEDED // or FAILED, also past tense\n}\n```\n\nTypes of actor could include humans, time, network conditions, or external systems. An actor could be a human (clicking a refresh button, manually log out), or it could be time (refresh every n mins, session expired). \n\np.s. @fisherwebdev thanks for the detailed discussion!\np.p.s also using past tense for the action names is a great idea. Again we made a little naming tweak here and called the actions messages. Because `action` implied intent to do something but really it is a `message` that something already happened.\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  Amended various files' copyright dates to update the language for the year 2015.\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  Dear core team,\n\nCould you make \"invariant\" as a standalone dependency (or as least export it as require('flux').invariant) to allow other users use it in their code. \n\nFor example, i'm developing library, which using your flux dispatcher as an underlying layer for my own dispatcher. So, i'd like to use your assert mechanism in my code too.\n\nNow i'm using\n\n``` javascript\nvar invariant = require('flux/lib/invariant');\n```\n\nbut not sure it's a best idea.\n @fisherwebdev Oh I didn't know this. @zpao Let me know if you guys want to own this https://www.npmjs.com/package/invariant or if it's fine like that\n  I understand that Facebook has released Jest for testing Flux and React applications. From my understanding Jest runs the unit tests in a node based environment which is ideal when you want to make sure your code works in isomorphic situations so it can be rendered on a server.\n\nI don't have the requirement for server rendered react, and do have a lot of browser code that I want to interact with via flux / react and I'm trying to figure out good ways to accomplish this. Do you guys have any recommendations of approaches? \n\nThe main issue I have is being able to get a single store's register call to the dispatcher since I won't be able to use Jest and its beautiful mock all by default implementation which keeps other stores from registering. What are some good approaches people have taken towards this problem?\n Thanks for that @fisherwebdev. That gives me some good direction for the questions we talked about a while back and I should definitely take that conversation deeper on the Jest repo.\n\nIn this case I was wondering if you guys have seen or have any suggestions for testing a Flux app in one of the other classic testing frameworks (mocha, jasmine, qunit, etc), but still being able to get a reference to the specific store under test's dispatcher callback without it being muddled by the other store's in your app registering themselves to the dispatcher.\n @fisherwebdev FYI, Node 0.12 and iojs both have native promises, though bluebird can usually be faster.  In General iojs will be in close lockstep with V8 in terms of JavaScript features.\n Ooh, good to know. Lets ignore Promises for now though, that seems to be distracting from the actual issue. :)  \n\nPerhaps a better example is that we are adding some react/flux examples to a large non-react/non-flux code base that has a lot of other DOM manipulation stuff. We don't want to split out into two different test frameworks, so we are required to test in the browser with everything else. :)\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n   Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  Merge the two sentences together into one concise instruction. \nFrom: Clone the repo and navigate into the resulting `flux` directory. Then run `npm install`.\nTo: Clone the repo and navigate into the resulting `flux` directory, then run `npm install`.\n\nThis only makes changes to the README.md, and does not break Flux in any way.\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n @fisherwebdev Understandable that it's a trivial commit but 'Then run `npm install`' is a fragmented sentence. We can _still_ convey the message of it being two steps by simply joining it with a comma. \n\n[Purdue.edu](https://owl.english.purdue.edu/owl/resource/620/1/) states that \" fragments are pieces of sentences that have become disconnected from the main clause.\", which is exactly the case we have here.\n  Fix a typo\n @fisherwebdev Wow... actually I didn't know `broadcast` can be used as an irregular verb. I still prefer the regular one but since it's an acceptable usage I'd say it's your call.\n  MessageStore is imported but never used.\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n   Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n @facebook-github-bot done!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  Status: **Opened for discussion**\nReviewers: _None yet_\n## Notes\n\nAfter having weighed the options, I felt like this deserved some exploration. The demos are using global CSS, which kind of goes away from the same idea for proposing HTML in JS. Then there's some which seem to be compiling and injecting style tags on a per-component basis or something (seems like Instagram). That's where vjeux comes in with inline styles. Which generally I like because we have interoperability with other interfaces (React Native now, maybe games or wearables in the future - Unreal Engine, Hololens). Whichever way Facebook moves, I feel like there's going to be a demand for some sort of utility library around styling. Things like vendor prefixing, validating properties, and generally just making it easier to style. If we have a system around something that's already quite mainstream like LESS, it should be easier to adopt. While this system may not be as fast as straight style objects, it still compiles down into the same thing. I'm not sure the performance is going to be _noticeably_ impacted. It needs to be explored, as I know UI performance is one of the goals of React people. I'd love to explore this some more with somebody :)\n\nI did try [transforming the string into an AST in place](https://github.com/ericmuyser/reactify-stylify), but it was too large and required some work hooking up the right classes. [Similar to GraphQL, I gather.](https://gist.github.com/wincent/598fa75e22bdfa44cf47?#how-is-graphql-syntax-different-from-jsx)\n`There is actually some additional magic going on here \u2014 our transform pipeline actually embeds the AST directly (as JavaScript objects) in place of the template \u2014 but generally developers won't need to worry about that at all.`\n## TODO\n- [ ] Clean up LESS (actually just CSS right now -- haven't converted to take advantage of LESS yet)\n- [ ] Style attributes should be optimized (stop returning 4 attributes for each border).\n- [ ] Helper so we can just go `styles.find('#todo-list li.edit')` and it'll return all rules that match that selector, including `#todo-list li.edit {}`, `#todo-list li {}` and `li {}`.\n## Changes\n- Moved the global CSS into each relevant component.\n- Added 6to5ify so we can use new strings (for CSS/LESS).\n- Added LESS so we can parse the string into an AST tree.\n- Added JSCSSP so we can parse the resulting CSS from the AST tree into style rules without the browser.\n## How to test\n- Start the demo with `npm start` after `npm install` and you should see something like this:\n  ![preview](http://dl.dropbox.com/u/58484258/Screenshots/0in-.png)\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  npm WARN package.json jsxc@0.1.6 No repository field.\nnpm WARN prefer global jsxc@0.1.6 should be installed with -g\nnpm ERR! Darwin 13.4.0\nnpm ERR! argv \"node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! node v0.10.36\nnpm ERR! npm  v2.3.0\nnpm ERR! code EPEERINVALID\n\nnpm ERR! peerinvalid The package envify does not satisfy its siblings' peerDependencies requirements!\n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!    /react-boilerplate/npm-debug.log\n    Added a quick link to the dispatcher API and examples on the flux docs, from the dispatcher section of the README.md. This will make it easy for those interested to see how the dispatcher can be used. \n No problem happy to help any way I can!\n  It looks like there is some code to prevent nested `dispatch` and some cycle-detection logic in https://github.com/facebook/flux/blob/master/src/Dispatcher.js.  However, it looks like that defense can be subverted by combining `waitFor` with named function expressions.\n\n``` JavaScript\ndispatcher.register(function handler () {\n    var tok = dispatcher.register(handler); // appends a new handler to _callbacks, increments id\n    dispatcher.waitFor([tok]); // directly invokes the new handler\n    // without a base case, this doesn't terminate (stack overflow)\n});\n\ndispatcher.dispatch({}); \n```\n\nThis contrived example reveals a couple of problems.  First, `_callbacks` is not locked for updates during the scope of a `dispatch` operation.  Second, the way dependencies are expressed using this API is open to confusion and error.  A quick fix might be to assert `invariant(!_isDispatching)` within `register` and `unregister`, but consider redesigning the `register` function to accept an array of tokens as a parameter.  Then you could resolve a proper dependency graph.  See RequireJS for an example of this sort of API.\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  fixed just linked to what I believe it was referencing https://github.com/facebook/flux/blob/master/website/src/flux/img/flux-simple-f8-diagram-1300w.png or just /website/src/flux/img/flux-simple-f8-diagram-1300w.png.\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  I believe the standard across Facebook projects is now to use object-assign rather than react/lib/merge.\n  Hello guys,\n\n[React Korea](https://github.com/reactkr) volunteers are currently translating React docs into Korean. But we would like to translate Flux docs as well. What do you guys think?\n If that's possible, then people from http://react-china.org would be interested in a Chinese translation too :)\n Everything's possible :)\n Nice, I'll try to translate docs to Russian. How it should be organized? Just \"ru\" folder in the docs?\n @Kureev We are currently doing like [this](https://github.com/reactkr/react/tree/translation/docs/docs) for React docs translation (just modifying link and filenames), I think it is Jekyll-style i18n, but have not done detailed research on it\n @sairion how do you view the korean version on the website?\n @vjeux Since I'm no Jekyll (nor GH pages) expert, only thing I can say currently, is only by manually changing url like this: http://facebook.github.io/react/docs/why-react-zh-CN.html But I think there can be much better way to do it. I will investigate further ;)\n Oh okay, this is easy enough :)\n\nIf you start translating the articles i'll make sure to support those on the website\n @jsgeeker is working on a Chinese one, mainly on React:\nhttps://github.com/reactjs-cn/react-docs/commits/master\n @fisherwebdev We've just finished React docs translation, and will work on Flux docs next.\n Great!\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n Hi @sairion I just added a new page of docs at http://facebook.github.io/flux/docs/flux-utils.html#content pinging this issue so you are aware in case you are able to help get it translated\n I heard flux-utils was added but haven't looked it yet, thanks for sharing. By the way, anyone working on Flux repo saw https://github.com/facebook/react/pull/4633 ? I think it would be great if React-related FB  docs websites take same approach on i18n-ing, just letting you know.\n   Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  I grabbed the image from the [related blog post](http://facebook.github.io/react/blog/2014/07/30/flux-actions-and-the-dispatcher.html) - assuming this is correct, apologies if not!\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n No problem. The image update was more due to it being a broken link rather than suggesting a different one (looks like I picked the wrong image). Seems like #143 solves this issue so I'll close this.\n  This is seemingly related to all of those \"Cannot dispatch in the middle of a dispatch\" issues, but I've narrowed it down to a store listener being triggered _before_ the dispatcher's finished up.\n\nShould that ever happen?\n\nI can use the `setTimeout` hack, or the queue suggested in #106 but it doesn't feel right.\n\nIn my setup I have a login component with the following listener:\n\n``` js\n  onAuthStoreChange: function() {\n    if (AuthStore.userIsAuthenticated() === true) {\n      this.transitionTo('people');\n    }\n  },\n```\n\nNow when that gets fired I kind of expect the dispatcher to be finished dispatching... but it's not. So then when I transition to a new route and new actions are created there are obviously problems...\n\nIs there any way to get listeners to only be triggered once the dispatcher's done?\n\nJust to be clear, all of my actions are being created in the same place (with action creators) and this isn't a case of actions creating actions etc.\n p.s. Hope everyone's having fun at the conf :)\n I think this is expected.  The stores' dispatcher-registered listeners are called sequentially on a trampoline of sorts, so the #dispatch() function call isn't popped off the stack until all of the stores's callbacks have returned, then #dispatch() returns.  Your store is likely firing it's 'change' event in the same execution context, so `onAuthStoreChange` is called while the function call to #dispatch() is still sitting on the stack waiting to return.\n\nAfaik, the only thing you're guaranteed is that any required browser repaint won't happen until after the call to #dispatch() returns, and that that browser repaint will include all updates to reflect the singular point in time/state that exists after the last dispatch.\n I encounter similar error.\n`Error: Invariant Violation: Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch`\n\nI got this error when I tried to start another dispatch in a `listener` that is triggered by `emitChange()` of a `Store`. I can workaround this by below two approaches, but both look like a hack\n1. Invoke listener method by setTimeout\n2. Make the `emit` async (using setTimeout as well)\n   \n   ```\n   emitChange: function() {\n     var self = this;\n     window.setTimeout(function() {\n       self.emit(CHANGE_EVENT);\n     }, 1)\n   },\n   ```\n\nSo my question is that when a dispatch should be treated as done/completed, after the executions of all listeners on a `Store', or not care the execution of the listener (in which case I think we should make the emit async)\n @fisherwebdev how do you guys feel about serial dispatches inside some Actioncreator.action()?\n\nI.e: \n\ndispatcher.dispatch({});\ndispatcher.dispatch({});\n\nIs this ok or better to merge into a single action type?\n\nSent from my iPhone\n\n> On Apr 2, 2015, at 9:40 AM, Bill Fisher notifications@github.com wrote:\n> \n> ^^^ That's a hack that should be avoided. Dispatch-within-a-dispatch errors are caused by improper code design 99.9% of the time. Instead of doing the setTimeout, do what you need to do in response to the original action. I think this is most often a reflection of equating actions with setters -- they are not the same.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n @sterpe that's an interesting question. Do you have a real example?\n\nI guess you should fire only one action which describes in whole what happened and stores should react to that single change.\n\nI want to know what @fisherwebdev has to say anyway.\n Say WebAPIUtils does something like \n\nContactsApiGetsResponse.then( f(x) {\n// inform spinner status store or whatever emit change\ndispatcher.dispatch ({\nactiontype: \"response-succes\"\ndata:null\n})\n//store should load this new data and emit change\ndispatcher.dispatch({\nactiontype: \"load-API-data-into - relevant store\"\ndata:x.responsedata\n})\n\nSent from my iPhone\n\n> On Apr 3, 2015, at 3:42 AM, Luis Herranz notifications@github.com wrote:\n> \n> @sterpe that's an interesting question. Do you have a real example?\n> \n> I guess you should fire only one action which describes in whole what happened and stores should react to that single change.\n> \n> I want to know what @fisherwebdev has to say anyway.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n In that case I think the store which is interested on that data should listen to the \"response-success\" event.\n Point being that the spinner store is really only a Boolean toggle and seems like it shouldn't need cases for every API actiontype just a generic request-started requested-ended : put up and pull down the spinner modal?\n\nSent from my iPhone\n\n> On Apr 3, 2015, at 8:33 AM, srterpe@gmail.com wrote:\n> \n> Say WebAPIUtils does something like \n> \n> ContactsApiGetsResponse.then( f(x) {\n> // inform spinner status store or whatever emit change\n> dispatcher.dispatch ({\n> actiontype: \"response-succes\"\n> data:null\n> })\n> //store should load this new data and emit change\n> dispatcher.dispatch({\n> actiontype: \"load-API-data-into - relevant store\"\n> data:x.responsedata\n> })\n> \n> Sent from my iPhone\n> \n> > On Apr 3, 2015, at 3:42 AM, Luis Herranz notifications@github.com wrote:\n> > \n> > @sterpe that's an interesting question. Do you have a real example?\n> > \n> > I guess you should fire only one action which describes in whole what happened and stores should react to that single change.\n> > \n> > I want to know what @fisherwebdev has to say anyway.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n As @fisherwebdev has said above, you shouldn't confuse actions with setters.\n\nMaybe you can do a regex of the actionType and check if it has \"API\" and \"success\" in it, or something like that.\n @LuisHerranz, In this case I don't feel like there's a confusion of setters and actions, though I can stand to be corrected.  When my data store receives new items that is a server initiated action -- load these new items into the store and by extension dependent stores (through waitFor on same action) and component views respond to the emitted change.  Otherwise it seems like you're proposing calling the store.loadItems method directly from say WebAPIUtils, skipping the dispatcher entirely, and then force emitting a change event so dependent views would rerender.  I'm not sure how you see a store hierarchy working in that case?\n\nIn my particular case I must float a div at top of page on every CRUD action indicating that the changes were saved (or conversely not saved).  This component (and it's store) doesn't particularly care about the details of any particular api request WebAPIUtils makes behalf of a particular data store that the user is manipulating.  So not sure if it makes sense for this component to be aware of the unique actions that are relevant to unique stores when WebAPIUtils makes requests. \n @LuisHerranz, I don't know...I can't buy into regexing actionType strings, that seems potentially very brittle.\n What I mean by confusing setters and actions is that you shouldn't name your actions like this:\n\n`actiontype: \"load-API-data-into - relevant store\"``\n\nYou should name them like\n\n`actiontype: \"relevant-data-received\"`\n\nand the relevant store, which is interested in that data, should be listening to that action.\n Perhaps, but that's a semantic issue in action naming--I feel like the heart is the question of what point you collapse actions together vs perform sequential dispatches, b/c say a certain component needs to respond to a multitude of different actions but in some sense doesn't need to be aware of them.\n\nSent from my iPhone\n\n> On Apr 3, 2015, at 9:55 AM, Luis Herranz notifications@github.com wrote:\n> \n> What I mean by confusing setters and actions is that you shouldn't name your actions like this:\n> \n> actiontype: \"load-API-data-into - relevant store\"`\n> \n> You should name them like\n> \n> actiontype: \"relevant-data-received\"\n> \n> and the relevant store, which is interested in that data, should be listening to that action.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n *component should be 'store'\n\nSent from my iPhone\n\n> On Apr 3, 2015, at 10:07 AM, srterpe@gmail.com wrote:\n> \n> Perhaps, but that's a semantic issue in action naming--I feel like the heart is the question of what point you collapse actions together vs perform sequential dispatches, b/c say a certain component needs to respond to a multitude of different actions but in some sense doesn't need to be aware of them.\n> \n> Sent from my iPhone\n> \n> > On Apr 3, 2015, at 9:55 AM, Luis Herranz notifications@github.com wrote:\n> > \n> > What I mean by confusing setters and actions is that you shouldn't name your actions like this:\n> > \n> > actiontype: \"load-API-data-into - relevant store\"`\n> > \n> > You should name them like\n> > \n> > actiontype: \"relevant-data-received\"\n> > \n> > and the relevant store, which is interested in that data, should be listening to that action.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n @fisherwebdev There is another problem with firing emitChange in the middle of dispatch process: your app may receive inconsistent state from stores.\n\nConsider simple example: Component depends on stores \"A\" & \"B\". Store \"B\" waitsFor store \"A\". When store \"A\" receives action and does \"emitChange\" store \"B\" hasn't done yet. Your component tries to update and recieves new state from store \"A\", but old state from store \"B\".\n\nI faced with this issue with item / list stores, but pretty sure there might be other scenarios as well.\n\nThe only good way to solve this is to emitChange after all stores are done mutating. But there is no such option in Dispatcher yet. So what else can you do except setTimeout(emitChange, 0) at this point?\n @vladar There are a couple of different strategies to solving this problem. We believe we have a good solution and hope to open source it soon.  But it's not the only solution.\n\nOptions:\n1. Debounce the `change` events in the React components.  We currently think this is the best solution.\n2. Modify the dispatcher to call another set of callbacks at the end of the dispatch cycle.  We went pretty far down this road, but in the end it did not seem as good as debouncing the change events.  I think the primary concern was that it didn't seem like something the Dispatcher should be responsible for.  It seemed like we were putting code in the Dispatcher that didn't really have anything to do with its original purpose, but was really tied to the store-view communication.\n3. Create an \"OmegaStore\" -- one that will `waitFor` all the other stores to update, and then emit change if those stores have changed.  This solution seemed cool at first, but then wound up looking like a gigantic hack.\n Out of interest, is debouncing the change events in the components the solution you are open sourcing, or is there another solution on its way?\n You can use underscore, for example:\nhttp://underscorejs.org/#debounce\n Yeah we are using lodash - I meant in terms of the wording, wanted to know whether or not debouncing was what was being referred to in the following: \"We believe we have a good solution and hope to open source it soon\", as it implicitly suggested there was another solution not including the options listed.\n Man, still feels like a bit of a hack considering there is already `waitFor()`. Sort of feels like the `waitFor` method should do this for you.\n\nRegardless, debouncing does work quite well. For anyone that is interested here is what I ended up doing:\n\n``` js\nvar _ = require('lodash');\nvar CHANGE_EVENT = \"change\";\nvar ApplicationStore = _.extend({}, EventEmitter.prototype, {\n\n  emitChange: function() {\n    this.emit(CHANGE_EVENT);\n  },\n\n  addChangeListener: function(callback) {\n    this.on(CHANGE_EVENT, _.debounce(callback, 100));\n  },\n\n  removeChangeListener: function(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  },\n\n  getState: function(){\n    return {\n      showConsole: _showConsole\n    }\n  }\n});\n```\n As a little update I ran into an issue using `debounce`. If you don't call `.cancel()` on the debounced function then you'll end up with event leaks because the `removeListener` doesn't actually remove the callback.\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n Just pushed 2.1.0 which releases the Mixin/Container classes we use to solve the debounce issue.\n\nhttps://github.com/facebook/flux/blob/master/src/FluxStoreGroup.js Allows you to add a hook after the dispatches of certain stores have finishes (but before the dispatch is done)\n\nhttps://github.com/facebook/flux/blob/master/src/FluxContainer.js#L89 This is how we use it to synchronously \"debounce\" calls to setState in a react component.\n @ekryski How to call the cancel() method on the function?\nlike this?\n\n```\nthis.method = _. debounce(callback, 100) \nthis.method.cancel()\n```\n\nIt doesn't work... ;(\n call .cancel() on the debounced function like this:\n[http://stackoverflow.com/a/34830349/2195426](http://stackoverflow.com/a/34830349/2195426)\n Hack with setTimeout in emit worked for me.\n\n``` javascript\nimport { EventEmitter } from \"events\";\n\nexport default class Store extends EventEmitter\n{\n    emitChange()\n    {\n        // this.emit('change')\n        setTimeout(() => this.emit('change'), 0);\n    }\n\n    addChangeListener(callback)\n    {\n        this.on('change', callback);\n    }\n\n    removeChangeListener(callback)\n    {\n        this.removeListener('change', callback);\n    }\n}\n```\n  The code for the todomvc example has changed but the documentation was not updated (I saw it was on purpose in PR#83, but open for discussion). Many times though the doc invites the reader to read the full source, so a sync between the doc and the code might be a good idea now.\n\nIn particular, the dispatcher is handwritten and makes use of promises, which is neat as a feature, but can lead to much confusion when reading the source as a reference along the documentation, especially since this Todo example acts as an _introduction_ to the Flux _architecture_. It seems like useless complexity with this end in mind :)\n\nI hereby propose to reduce the complexity of this introductory example by having the documentation stick to what is in the source. The goal is to focus on the architecture, not the implementation and features, so as to provide the newcomers with just the required elements to get started with Flux as a concept.\n\nAs for the custom dispatcher, the concept of wrapping actions to distinguish between views and server is in use in the more advanced chat example, where it makes more sense.\n\n---\n\nAlso edited the section summarizing the chain of events from click to re-rendering. The current implementation is based on a single, root controller-view (`TodoApp`) which is responsible for editing the (application-wise) state and fetching data from the store (`TodoStore`), then passing it along as a prop upon rendering itself. Cascading rendering then kicks in for all owned, nested components.\n\nSigned-off-by: Jean-Denis Vauguet jd@vauguet.fr\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n Hi, Thank you for the feedback on this. I think you would be better doing the final editing, for you seem to have better wording skills :+1:\n @fisherwebdev reviewing my opened PR, I wondered what was the current status for this one :)\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n @fisherwebdev I've just rebased this PR against latest `master`, taking into account your proposed edits. It's basically ready for merging!\n Nice, thank you @kyldvs\n  **Stumbled across this while looking at examples of flux tests:**\nThis test is exactly the same as the one above it, with just a minor\nvariance in wording in the title.\n  Switching from Marionette over to React/Flux i'm now wishing their becomes a [Gitter](https://gitter.im/dev-ua/reactjs) chatroom for React/Flux :)\n\nReasons I think it's a great idea\n- You can ask questions to the community and easily get answers from others and core contributors\n- You get to see how other users are taking advantage of Actions, Dispatchers, Stores, Getters, etc.\n- It's an awesome way to share other design patterns and cool projects surrounding flux like [NuclearJS](https://github.com/optimizely/nuclear-js), [ImmutableJS](https://github.com/facebook/immutable-js), [VueJS](http://vuejs.org/) and [RiotJS](https://muut.com/riotjs/)\n- You can see all of the issues/PRs being actively opened within the repo\n\nHopefully that's convincing enough to start one :)\n You can ask questions and talk to others about Flux with Github issues too. Case in point, this issue.\n Look how active this room is for example, you can't achieve the same thing with github issues. Otherwise I wouldn't create an issue :)\n[https://gitter.im/marionettejs/backbone.marionette](https://gitter.im/marionettejs/backbone.marionette)\n There's #reactjs channel at irc.freenode.net which is active (around 400 members).\n If you want more information about the permissions: https://gitter.zendesk.com/hc/en-us/articles/200176672-Authenticating-with-GitHub\n there is also Slack chat http://www.slackchats.com/site/contents/content/43043/2014-12-24/flux-reactjs-chat\n Awesome thanks for sharing I guess those are sufficient enough, I'll close this.\n also you can get invite to react + flux slack chat here http://reactiflux.com/\n  It would be awesome to have a kind of reference implementation of flux \nutilizing immutable data and cursors with immutable.js or something similar...\n(immutablity helpers + cursors...)\n\nThere are quite a few implementations but they either differ or re-implement/change\nthe original ideas of flux... \n\nI have a bit of a hard time to understand, if all the state (even a components transient UI state) should be treated as application state (in a store) when using immutables... in the standard flux implementation with mutable data, we have UI state within react components and application state in stores... In my view with immutable data, everything (even a components UI state) should be handled in stores and are combined to a single big application state object given to a single controller-view component at the top.\n\nIt would be great to see flux and immutable objects in action...\n https://github.com/optimizely/nuclear-js is a flux implementation built on\ntop of ImmutableJS and utilitizes a singular immutable app state map.\n\nOn Friday, January 23, 2015, tindli notifications@github.com wrote:\n\n> It would be awesome to have a kind of reference implementation of flux\n> utilizing immutable data and cursors with immutable.js or something\n> similar...\n> (immutablity helpers + cursors...)\n> \n> There are quite a few implementations but they either differ or\n> re-implement/change\n> the original ideas of flux...\n> \n> I have a bit of a hard time to understand, if all the state (even a\n> components transient UI state) should be treated as application state (in a\n> store) when using immutables... in the standard flux implementation with\n> mutable data, we have UI state within react components and application\n> state in stores... In my view with immutable data, everything (even a\n> components UI state) should be handled in stores and are combined to a\n> single big application state object given to a single controller-view\n> component at the top.\n> \n> It would be great to see flux and immutable objects in action...\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/flux/issues/134.\n @jordangarcia thanks - I have already found nuclear.js as a possible implementation of flux with immutables; sadly, the examples are a bit out of date so they are a bit hard to follow ;)\n I also agree that this would be helpful. Is this something you might be interested in a pull request for @fisherwebdev?\n @fisherwebdev @RileyTomasek @jordangarcia \nI am open for all ideas/suggestions regarding proper flux + immutable data...\n\nFor me, the main topics of concern are:\n1. Generic immutable library and cursors?\n   Aside from immutable.js (which is great but pretty complex) there are react's immutablity helpers.  If the immutablility helpers are used, a proper cursor implementation is required - but thats a bit a problem.\n   There are quite a few of there but they are often very opinionated about calling setState() directly together with updating the cursor... I think that manipulating state outside stores is a anti-pattern when using flux. In order to maintain the proper flow, one should be able to manipulate cursors and when finished emit the change to controller views (it is flux after all... isn't it)...\n2. Proper use of actions?\n   When cursors are used throughout the component hierarchy, it makes sense to use them within stores as well - so instead of passing an ID of a deeply nested dataset (and searching it within the store), why not passing the cursor in the action payload directly? The store could then use this cursor to directly update itself at the right position... when done, emit the change event. Sometimes, searching stuff in stores is pretty costly thats why I would prefer passing cursors directly into stores (via actions of course).\n   I don't know if this violates flux principles... but it would definitely help.\n3. Is local setState() a thing of the past when using immutable data structures?\n   When immutable data is used, one can limit the shouldComponentUpdate() checks\n   to props as there would not be any local component state within components (this would be perfect when speaking of stateless components)... Now that seems to be fine most of the time but how can you do an efficient implementation of something like controlled components? Firing an action on every change, alter the store (with a given cursor), emit the change and run through each components shouldComponentUpdate() checks? This approach seems then pretty costly for something that simple...\n   Of course one can call setState() in a component but since shouldComponentUpdate() only looks at props, there is a chance that the UI gets out of sync.... (ignoring all local state changes)...\n   So having transient UI state that would normally require local state is pretty hard when having only application state.\n4. Immutable data on the server side?\n   When flux is used with immutables, we should really keep an eye on server side rendering since I don't know if it is a good idea to use common immutable libraries on long running servers... but this might just be a bad feeling... (GC cleanup on unused immutables) If mutable and immutables objects are used in an isomorphic environment, one might implement a wrapper around immutables to allow the same code to be performed server and client side - with mutable and immutable data... \n   Yahoo's excellent isomorphic flux libs are awesome and I want to think about flux + immutables in a context like that too.\n\nSo these are my basic thoughts about the topic...\nAfter all, utilizing immutables would definitely help to build more robust apps as data cannot be changed accidentally...\n I was looking for such examples, but also failed to get a satisfying one.\n\nOnce I thought I got one but told that it's being switched to cursor... https://github.com/olslash/cmdv.io/issues/1\n Hi @fisherwebdev,\n\nYes, I'd love to contribute.   As I mentioned, I would love to see a complete client to server example.  I would be ok extending the flux-chat or flux-todomvc to add immutable data and a simple hapi or express server to return static json.\n\nIf we'd like to disconnect from the chat or todomvc apps, I would suggest:\n1. Invoice\n2. Recipe Book (or Card)\n3. Team Roster\n\nThe common theme among these would be that they have an Entity with a bit of complexity (as much as we'd like to add) and are typically managed in a List of some sort.\n What if you just did the chat or todo example using immutable data? That would make it relatively easy for people to compare the pros/cons of each approach. It is also a very small and focused step that could be released quickly.\n @fisherwebdev \nThanks for your detailed answers and hints! Really helpful. \nIt is nice to brainstorm about examples that make use of immutables.\n\n@kevinold \nRegarding the complete client/server example: As @fisherwebdev already said,\nYahoo is doing a super awesome job with demonstrating how flux can be used\nclient + server side. Their fluxible apps combines a lot of useful stuff! \nI don't know if we should overload an example with client/server side implementation - there\nhas to be done quite a bit of work - e.g. transfer data from server stores to\nclient stores - all this has already been solved very elegantly by fluxible.\n\nTo keep it as simple as possible/and focused to immutables, I would prefer something\nbasic like one of the things @kevinold mentioned or something like a digital stopwatch.\nThere could be a way to log the current time and put it in a list below the running watch... \n\nI guess we would need a self managing store that would hold the time and emits\nchange events pretty often to update the time. Due to reference equality (thanks to immutables)\nthis would be pretty efficient (although updates happen every 1/10 of a second or something like that). \nFor the log of captured timestamps below the watch, a undo feature could be used to undo/redo logged timestamps - one of the things immutables make easy.\n\nAn example could use immutable.js or the simpler immutable helpers from react addons... \nAs the project should be something tiny, even the react update helpers would do a nice job.\nStructural sharing and all the other awesome benefits immutable.js brings are definitely \nnice though...\n\n@RileyTomasek\nYeah why not :+1:  @leebyron shows immutable todos in his talk...\n\nAbout cursors:\nI think they would really help to have a nice way to update stores... but I am happy to ignore them for now. They add another layer of complexity; not really required for something simple.\n\nI am a bit busy currently but if something nice comes up, I am definitely looking forward to contribute.\n I will try and find time over the next week to do an immutable version of the todo example.\n\nEven if the difference isn't worth adding another example, it will hopefully be a good starting point for which parts of immutability should and shouldn't be focused on in the Flux specific examples.\n Cursors are very interesting. But two questions arise with them. Do we need flux stores at all if we have common big application immutable state and transfer parts of it (cursors) to children components as props? And what if one day some grandchild component wants additional data from another part of application state - change its parent and grandparent to nip off this data and transfer it down to that grandchild component?\n @klimashkin Depending on your needs, you may or may not need flux if you are using global immutable state and passing things via cursors. You might still want to use flux or events so that the global app state is mutated in the proper way before the cursor triggers a render, but you might not need as many listeners on the render side (just passing cursors to props and use efficient shouldComponentUpdate).\n\nAs for the grandchildren needing additional data, you may want to simply add the data and any additional props or for certain use cases you might want to use a reference cursor. Reference cursors are similar to lenses or zippers in that they provide access deep into a structure. In some cases you may want to use reference cursors directly or in others maybe passing down through ancestors is more appropriate.\n\nFor more info on reference cursors see:\n- https://github.com/omniscientjs/immstruct#references - reference cursors in immstruct\n- https://github.com/omniscientjs/omniscient-immstruct-reference repo demonstrating use of a reference cursor\n- https://github.com/omcljs/om/wiki/Advanced-Tutorial#reference-cursors - original idea used in Om\n- http://onbeyondlambda.blogspot.com/2014/10/trying-out-reference-cursors.html\n- http://slides.com/thebearmayor/reference-cursors-in-om#/\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  I have an action that performs a long-running operation. When it's done, I want to tell it to signal it's done by dispatching another action. But when I do that, I come across the error above. My setup looks like this:\n\n``` coffee\ndoSomeLongRunningStuff = ->\n  # Does something \n  if isDone()\n    MapActions.initDone()\nMapStore =  _.extend {}, MicroEvent::,\n\n  dispatchIndex: Dispatcher.register (payload) ->\n    action  = payload.action\n    type    = action.actionType\n    announce = true\n\n    switch type\n      when C.INIT \n        doSomeLongRunningStuff()\n      when C.INIT_DONE then ''\n      else \n        # Don't trigger change because the action is not in this store\n        announce = false\n\n    if announce \n      console.log type \n      MapStore.trigger(CHANGE_EVENT)\n\n```\n\nI also tried throwing the initDone() callback to the next event loop by delaying it for 1 ms. That prevented the error, but then the change event was not being picked up by the views.\n My bad. I had the listener on the views misconfigured. The setTimeout trick actually works.\n Yeah, it's a hack. I tried a few other things, like using a different store and putting a waitFor on the original store, but nothing helped except for this one thing. Using a promise might be more explicit, though, and I'll give that a try. Thanks, @fisherwebdev! \n So I'm having this same problem. I have a situation where I do need to chain actions. \n1. Toggle an active flag,\n2. If flag is active perform a request.\n\nI run into the \"middle of a dispatch\" scenario with this, as when the callback of the first action is fired, I would like to fire the second action based on the outcome of the first action (which I fire from the react component). \n\nI can't see a way to \"back up and build the second action into the first action\" as the firing of the second action completely depends on the result (ie the result of a calculation in the store) of the first one.\n\nI guess creating another store and using waitFor sounds like a solution, but to me that route seems to be deferring the problem, and results in the action being chained anyway, just across stores\n\nI've heard creating a queue is also another solution (https://github.com/facebook/flux/issues/106), but again to me the net affect is that you have chained the actions anyway, and has also been suggested that that solution is not optimal as it requires trusting developers not to use AppDispatcher.assign() in the stores (I'm also not sure why we trust them not to fire actions in the stores, but seems that we can't trust them to not use AppDispatcher.assign() in stores)\n\nAnd setTimeout seems to work, but as suggested above, this may be a code smell as well? \n\nIt seems the above are 3 ways to enable the chaining of actions in Flux, all are noted as \"hacks\" or sub optimal solutions, but I'm struggling to find an example of a design which avoids having to do the above, but still allowing me to do what I need to do. \n > I can't see a way to \"back up and build the second action into the first action\" as the firing of the second action completely depends on the result (ie the result of a calculation in the store) of the first one.\n\n@adeperio I actually managed to get around this issue by adding more logic into my actions. You can also achieve the same effect by having the store just do everything, but to keep the store free of control flow logic, you can put this kind of decision into the actions. I also had to modify the original action trigger to send a bit more data to the action.\n I was thinking about this, and wanted to go down this route as well. The only thing was that actions would then need to observe state changes in the stores right which meant observing store states as the second action waited for the first?\n Not necessarily. If your actions depend on the state of the store, they aren't actions. The \"view action\" by definition is a UI event performed by a user. The \"server action\" is an event performed by the server, e.g. callback of an API call. All other events that stores perform, e.g. starting to fetch data, are internal events and shouldn't be called via actions. \n OK, so does that mean I should fire a http request from the Store? Using superagent my request would look something like the code below. If I run this code in the store wouldn't it mean that the server action would be triggered in the Store? If so does this break the Flux pattern?\n\n```\nhttp.get(url)\n      .accept('application/json')\n      .end((err, res) => {\n        if(!err){\n          Dispatcher.handleServerAction({\n            actionType: ActionTypes.SOME_SERVER_RES,\n            data: res.body\n          });\n        }\n      });\n\n```\n That looks good to me. I use the same pattern but I placed it in an API adapter file that is solely responsible for data fetching, and it's called from a view action.\n  just a recommendation. I have a growing number of TDD type specs in a current large project and would be fine contributing if needed.\n\nalso they should be correct ;) The instructions for getting the ref to the mocked register at http://facebook.github.io/react/blog/2014/09/24/testing-flux-applications.html#testing-stores do not work for me...\n  Hi! I'm wondering why a new store has been created to provide the views a count of unread threads on `flux-chat` example.\n\nWouldn't it be better if we had a `getUnreadCount` method in the `ThreadStore`? If I had to count archived threads, would it be better to create a ArchivedThreadStore?\n\nThanks in advance ;)\n Got it. It made me confused on the role of stores in Flux, wondering if I would need that level of abstraction. Maybe we should update the `flux-chat` example to avoid this. If you agree, I can spend some time thinking about an alternative.\n The `getCount()` function recomputes its value every time it is called. It could instead recompute it after receiving actions that indicate that the result may have changed. It would store the cached value and `getCount()` would just return it.\n\nBTW is it expected that a derived store like `UnreadThreadStore` has to know which specific actions will cause `ThreadStore` to modify the results of `getAll()`? It feels like it has knowledge of the internals of the store it is reading from.\n Where a store is computing \"derived\" data like this, is it possible that it would also respond to actions to mutate the data? Is there a realistic example of that? It sounds like it would result in inconsistency.\n +1 for finding an appropriate example of waitFor rather than forcing the contrived example\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  It's easier on the eyes.\n @fisherwebdev Sounds good. I think it's worth a patch version bump since it only affects the private API.\n  I think this ([http://facebook.github.io/react/blog/2014/09/24/testing-flux-applications.html](http://facebook.github.io/react/blog/2014/09/24/testing-flux-applications.html)) should be added to or at least referenced from the Flux homepage.\n  \"re-rendering\", not \"re-rending\"\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n  Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  This pull-request brings the in-line documentation up to date with what's in /docs/Dispatcher.md. Except for a paren, it replicates what was done in commit bf9f01a27e96ba952540ad3b6fea350cd7ff8878.\n  'should throw on multi-circular dependencies' and 'should throw on\nself-circular dependencies' tests were checking for always-satisfying\nconditions\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  Why remove the AppDispatcher.handleAction, was it because it isn't need in TodoApp example? Or it is entirely not needed in most applications? Or we need it in some real life use cases because:\n\n> We also add a handleAction helper method to our Dispatcher instance, so that we can identify where this action came from. -- [scotch.io tut](https://scotch.io/tutorials/creating-a-simple-shopping-cart-with-react-js-and-flux#dispatcher)\n For those wondering what the above means: just replace 'dispatcher.handleAction()' calls with 'dispatcher.dispatch()' and it will work.  Just hit a bit of a wall and hoping someone here could help...\n\nI'm trying to implement adding a resource using Flux and can't figure out how it would fit in.\n\nHere's the flow\n1. User clicks an \"Add Article\" button\n2. The click handler calls `ArticleActionCreators.createArticle`\n3. `ArticleActionCreators.createArticle` makes a `POST` request to the API and passes the response on to the `ArticleStore`\n4. `Router` navigates to `/articles/1` where `1` is the id of the newly created Article.\n\nThe problem is, where do I hook in to the system to get the id of the newly created Article?\n\nMy first thoughts are to have a callback on the action creator, but that doesn't feel right...\n\nAny ideas? Does this make any sense?\n Shouldn't createArticle issue the route change only when it has the server response from the POST (with the Id)?  Otherwise how are you detecting a server error?\n\nSent from my iPhone\n\n> On Jan 8, 2015, at 7:45 AM, Wayne Ashley Berry notifications@github.com wrote:\n> \n> Just hit a bit of a wall and hoping someone here could help...\n> \n> I'm trying to implement adding a resource using Flux and can't figure out how it would fit in.\n> \n> Here's the flow\n> \n> User clicks an \"Add Article\" button\n> The click handler calls ArticleActionCreators.createArticle\n> ArticleActionCreators.createArticle makes a POST request to the API and passes the response on to the ArticleStore\n> Router navigates to /articles/1 where 1 is the id of the newly created Article.\n> The problem is, where do I hook in to the system to get the id of the newly created Article?\n> \n> My first thoughts are to have a callback on the action creator, but that doesn't feel right...\n> \n> Any ideas? Does this make any sense?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n I.e. Because the dispatcher is guaranteed to be synchronous you can dispatch the payload , the store will be updated in the same priority and when dispatch function returns at the next line you can perform the route change.  This should avoid nesting dispatches.\n\nSent from my iPhone\n\n> On Jan 8, 2015, at 7:45 AM, Wayne Ashley Berry notifications@github.com wrote:\n> \n> Just hit a bit of a wall and hoping someone here could help...\n> \n> I'm trying to implement adding a resource using Flux and can't figure out how it would fit in.\n> \n> Here's the flow\n> \n> User clicks an \"Add Article\" button\n> The click handler calls ArticleActionCreators.createArticle\n> ArticleActionCreators.createArticle makes a POST request to the API and passes the response on to the ArticleStore\n> Router navigates to /articles/1 where 1 is the id of the newly created Article.\n> The problem is, where do I hook in to the system to get the id of the newly created Article?\n> \n> My first thoughts are to have a callback on the action creator, but that doesn't feel right...\n> \n> Any ideas? Does this make any sense?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n Hey @sterpe, that's what I'm thinking. Have the action creators support callbacks or return promises or something like that.\n\nWould getting the article id from the action creator callback not conflict with Flux's philosophy of all data coming from stores?\n\nHere's some pseudo code to demonstrate what I'm thinking...\n\n``` js\nvar ArticleActionCreators = {\n\n  createArticle: function() {\n    var request = $.ajax({\n      type: 'POST',\n      url: '/article'\n    });\n    request.done(function(response) {\n      Dispatcher.handleViewAction({\n        actionType: 'NEW_ARTICLE',\n        responseBody: response\n      });\n    });\n    return request;\n  }\n\n};\n\nvar CreateArticleButton = React.createClass({\n\n  createArticle: function(e) {\n    e.preventDefault();\n    var action = ArticleActionCreators.createArticle();\n    // the following 4 lines are what i'm most concerned about\n    action.done(function() {\n      var id = ArticleStore.getNewlyCreatedArticleId();\n      Router.navigate('/articles/'+id);\n    });\n  },\n\n  render: function() {\n    return <a href=\"#\" onClick={this.clickHandler}>Create Article</a>;\n  }\n\n});\n```\n Here's another option for the `createArticle` method:\n\n``` js\ncreateArticle: function(e) {\n  e.preventDefault();\n  var action = ArticleActionCreators.createArticle();\n  // get the id directly from the action creator, might conflict with Flux's\n  // philosophy of all data coming from stores?\n  action.done(function(id) {\n    Router.navigate('/articles/'+id);\n  });\n},\n```\n As far as I understand Flux philosophy, you should have:\n- your action creator to dispatch 'article creation started' before sending ajax request; 'article created' and 'article create error' actions on ajax promise resolve/reject\n- your store moving to some 'creating article' state on 'article creation started' action so that the view could render some progress indicator\n- your store moving from 'creating article' state on 'article created' and either updating the route or notifying the view that the route should be updated\n- your store moving from 'creating article' state on 'article create error' and storing the error so the view could display it (and not updating the router)\n\nPlease correct me if I am wrong. I am interested in this workflow, too, so I would be glad to hear a solution from Flux developers.\n @sompylasar you are 100% correct. I'm intentionally leaving out a lot of those states and events because i'm just prototyping an application for now.\n\nThis is what i'm most interested in:\n\n> your store moving from 'creating article' state on 'article created' and either updating the route or notifying the view that the route should be updated\n\nI've decided to go with returning the newly created article id from the action creator for now. It just seems like the simplest solution. I have a feeling this might change as time goes on though.\n\nHere's my code:\n\n``` js\nvar ArticleActionCreators = {\n\n  createArticle: function() {\n    var Deferred = new $.Deferred();\n    API.POST('/articles').done(function(response) {\n      dispatch({\n        actionType: 'CREATE_ARTICLE',\n        responseBody: response\n      });\n      Deferred.resolve(response.data.id);\n    });\n    return Deferred.promise();\n  }\n\n}\n\nvar CreateArticleButton = React.createClass({\n\n  mixins: [Router.Navigation],\n\n  getInitialState: function() {\n    return {\n      adding: false\n    };\n  },\n\n  clickHandler: function(e) {\n    e.preventDefault();\n    e.target.blur();\n    this.createAndTransition();\n  },\n\n  createAndTransition: function() {\n    this.setState({adding: true});\n    ArticleActionCreators.createArticle().done(function(id) {\n      this.setState({adding: false});\n      this.transitionTo('article', {id: id});\n    }.bind(this));\n  },\n\n  render: function() {\n    if (this.state.adding) {\n      return <span className=\"text-muted\">Adding Article\u2026</span>;\n    }\n\n    return <a href=\"#\" onClick={this.clickHandler}>Add Article</a>;\n  }\n\n});\n```\n @sompylasar I would think maybe have a generalized request state store that managed that and could keep track of multiple concurrent request.  It seem like keeping track of all that in the article store could lead to it being overly messy or in an inaccessible state for some other dispatch, plus you need to handle it for other types of requests too.\n @wayneashleyberry What I see from your code is that you track 'article creating' state in your view but you should in the article store. When you move this state to the store, you won't need the promise returned from the action creator.\n\nMixing a router into a button view is wrong, they have nothing in common. There should be some store that tracks the whole app state including the current route which is global (that's how browsers work having a single URL for an app state, we cannot change it).\n\n@sterpe Yes, you could additionally have a store that tracks all requests in a single place. But you should track articles state in article store for those views which only work with articles.\n P.S. If you are \"leaving out intentionally\", then you should also leave out Flux philosophy instead of twisting and bending it to make less architecture components than the philosophy requires to implement it.\n Having calbacks do more than just dispatching actions breaks the Flux flow. This is what happens in your code, you attach a callback that changes the view state and the router state, but this change does not happen as a result of handling the store's change event.\n @sompylasar the reason i'm asking is because i'm trying to stick to the Flux philosophy but there's no documentation on using routers or anything like that.\n\nSo if I have `CREAT_ARTICLE` and `CREATE_ARTICLE_SUCCESS` actions, some component still needs to listen to them and trigger a transition on the router... which component should do this? The top-level `App` component?\n @wayneashleyberry I think this should be like follows.\n\nThere should be a store that tracks the current route because it's a part of the application state (let's name it AppStore if it is responsible for more than that, or just RouteStore).\n\nBoth the ArticleStore and the AppStore/RouteStore handle ARTICLE_CREATE_SUCCESS action.\n\nThe ArticleStore updates its internal data and emits a change event that is handled by the views (the button becomes enabled again, the new article appears in the list etc.).\n\nThe AppStore/RouteStore depends on the ArticleStore via waitFor, updates the route if required (you could put a flag into the action payload whether the navigation is required or not) and emits a change event so the view displays the page that corresponds to the current route.\n @sompylasar that helped a lot, thanks so much :)\n What about an action which depends on the result of another action?\n\nI have a form component to CREATE/UPDATE 2 entities : \n1) Submit form\n2) First call APIAction.saveEntityData and save \"parentEntityData\"\n3) Second call APIAction.saveEntityData and save \"childEntityData\" with the \"parentEntityData\" id received from server.\n\nDoes it make sense to add a callback to action payload ?\n\n```\nAPIAction.saveEntityData({\n    entity: 'parentEntity',\n    model: parentModel,\n    next: (parentEntityId) => {\n        APIAction.saveEntityData({\n            entity: 'childEntity',\n            model: childModel.set('parentId', parentEntityId)\n        })          \n    }\n})\n```\n @loun4 it sounds like you need to split that up into two actions.\n\n``` javascript\nAPIAction.saveEntityData({...});\n\n// Which causes an api request somewhere, where you do:\n// (assuming a promise-like interface)\nrequest.then((parentEntityId) => {\n  // In this action you can do anything that requires the request\n  // to have been completed.\n  APIAction.entityDataSaved({...});\n});\n```\n  For example i have some third-party component - Map. \nMap has marks. And i want to show some balloon with information from server when mark click event occurs.\n\n_No flux_ pseudo code looks like:\n\n``` javascript\nmarks.on('click', mark_id => \n    server.getmarkinfo(mark_id)\n      .then(data => marks.show_balloon(mark_id, data)));\n```\n\n_In flux_ i call action, action makes call to server and dispatch some event to store when data available, store save data and call on_change event, jsx component receive on_change event, get data and mark_id from store.\n\nWhat is recommended way to call ONCE marks.show_balloon(mark_id, data). \nThe only way i see for one time calls, i need to have some kind of state at jsx component level, in this situation is something like `marks.is_ballon_open(mark_id) || marks.show_balloon(mark_id, data)` . \n Thank you for your answer.\nI've just found some interesting way to maintain such component level state using react.\nSo my problem was how to call `show_balloon` on specific mark_id once and only once.\nThe idea is to use react ability to maintain keyed children collection elements. For example if i create some react component\n\n``` javascript\nvar Marker = React.createClass({\n  componentDidMount() {\n    var p = this.props;    \n    p.api.show_balloon(p.mark_id, p.data)\n  },\n  componentWillUnmount() {\n    var p = this.props;\n    p.api.close_balloon(p.mark_id);\n  },\n  shouldComponentUpdate() {\n    return false;   \n  },\n  render () {\n    return null;\n  }\n});\n```\n\nand use this component from some jsx render as collection element\n\n``` javascript\nrender () {\n  <map>\n     {markers\n       .filter(m => m.has_balloon)\n       .map(m => <Marker key={m.mark_id} api={api} {...m} />)} \n  </map>\n}\n```\n\nI get `once and only once` call to  `p.api.show_balloon` for each marker with has_balloon set to true in markers collection (_also destruction code `p.api.close_balloon` will work as has_balloon become false_).\n\nFor me it looks like `implicit state` of component, and looks more funny than explicit call to `marks.is_ballon_open(mark_id)`\n\nBut i don't sure would react use `key` attribute for maintain collection element state in the future.\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  Since the `getCreatedMessageData` method of the `MessageStore` is just a message specific utility, it makes more sense to put it in `ChatMessageUtils`. The debatable part here is that I then moved the call to the APIs create method to the store. The primary motivation for that was the availability of `currentThreadID`, however, this may also be more maintainable because it keeps the optimistic store update close to the server/API create call.\n Sorry, my intent wasn't to change the location the API calls were made from. All of your points above are valid and I agree that it makes sense to leave the API call in the action creator for this example.\n\nMy intent was to move the  `getCreatedMessageData` method to `ChatMessageUtils` since it is an API utility and not a store getter. Moving the API call from the action creator to store was motivated mainly by easy access to the current thread id, due to not being able to access it in the action creator due to that creating a circular dependency between the `MessageStore` and the `ThreadStore`.\n\nWould it make sense to pass the current thread id in the payload with the message text, or do you think adding the extra dependency to the `MessageComposer` component is worse than just leaving the util method in the store?\n Sorry I forgot about this. I will try and remember to do it after work this evening...\n @fisherwebdev sorry for the series of delays. Is this an acceptable compromise of not making an API call from the store, but factoring the utils method out of the store?\n  Why do server and view actions have separate dispatch methods in the examples, without ever providing any inherent value. It seems like this could easily be done by just passing an extra property on the action instead. Am I missing something here or should this separation be removed?\n @fisherwebdev I see that you just updated the todo example to address this issue. Would you like me to open a PR doing this for the chat example?\n @fisherwebdev I will try to get to it tomorrow. It should be pretty fast.\n\nDid you see my PR that was also for the chat example? (#120)\n I thought it was separate because you could use the same action both for view and server event, and do something different in both cases.\nBut for sure it didn't make sense to have it in the todo example as there is no server api.\n  flux has already been open-sourced so why include that paragraph :smile:\n Ah, ok.\n  The rest of the project is 2 space and the tabs render terribly in GitHub.\n    ### Abstract\n\nThe more the registered actions, the more time the dispatcher spent time to choice matched callback.\nSo this p-r enables to give actionType to register action optionally.\n### Usage\n\n``` javascript\nvar dispatcher = require(\"flux\").Dispatcher;\n\ndispatcher.register(\"some-event\", function(payload){\n  // without checking payload.actionType\n})\n\nvar payload = {\n  actionType: \"some-event\"\n}\ndispatcher.dispatch(payload); //=> fire registered callback with \"some-event\"\n```\n Isn't it enough to create an another `Dispatcher`'s instance for each callbacks?\n Sorry, I cannot find what you say \"another\".\nCurrently \"another\" `Dispatcher` libraries (repositories) are out of my scope.\n\nIn this p-r, `Dispatcher` has backward compatibility. \nThe default actionType is \"*\" and callbacks that registered with it fire all action type with actionType in given payload.\n\nBoth is ok:\n\n``` javascript\nvar dispatcher = require(\"flux\").Dispatcher;\n\n// new way\ndispatcher.register(\"some-event\", function(payload){\n  // without checking payload.actionType\n})\n\nvar payload = {\n  actionType: \"some-event\"\n}\ndispatcher.dispatch(payload); //=> fire registered callback with \"some-event\"\n\n// current way, the callback is fired by any actionType.\ndispatcher.register(function(payload){\n  // check or not by switch/case\n})\n\nvar payload = {\n  actionType: \"some-event\"\n}\ndispatcher.dispatch(payload); //=> fire\n\nvar payload = {\n  actionType: \"other-event\"\n}\ndispatcher.dispatch(payload); //=> fire\n```\n > Sorry, I cannot find what you say \"another\".\n\nOh, my comment confused you. This \"another\" means \"createing a new `require(\"flux\").Dispatcher`'s instance\" like the following. I seem it will be able to cover your use-case.\n\n``` javascript\nvar Dispatcher = require(\"flux\").Dispatcher;\n\nvar callback1 = function () {\n  //...\n};\n\nvar callback2 = function () {\n  // ...\n};\n\nvar general = new Dispatcher();\ngeneral.register(callback1);\ngeneral.register(callback2);\n\n// If you call `callback1` without the look up time,\n// creating a new instance of `Dispatcher` will help you.\nvar special = new Dispatcher();\nspecial.register(callback1);\n\nvar payload2 = {\n  // ...\n}\n// In this case,` special` calls `callback1` only.\nspecial.dispatch(payload2);\n```\n Thank you for your explanation.\n\nI will check it so please give me a time.\n Sorry to response late.\n\nI can find what your meanings.\n\nIt is exactly to establish to do same with multiple dispatcher.\nBut I do not think it better because multiple dispatcher should be shared in several source code files, do you?\n  Remove redundant code. It can be helpful if someone is re-using(or extending) the code of this class.\n  Addresses this issue https://github.com/facebook/flux/issues/107\n  Just noticed that the documentation located [here](http://facebook.github.io/flux/docs/overview.html#what-about-that-dispatcher) states that a call to `...waitFor(...)` takes a second `argument`, a callback. [I am pretty sure that is not correct](https://github.com/facebook/flux/blob/master/src/Dispatcher.js#L154).\n Hope this doesn't count as a hijack, but I have a few thoughts I'd like to see clarification on as well.\n\nI'm trying to reconcile the Promise based implementation in TodoMVC with the callback based approach in the chat example. The callback driven one is newer. Should we be aware of some pitfalls in using promises that prompted this evolution?\n\nMy own thoughts:\n\nThe for loop indicates that all callbacks are invoked synchronously. [This line](https://github.com/facebook/flux/blob/master/src/Dispatcher.js#L175) is invoked after iterating over dependencies - if you're using waitFor, the dispatch order \"sorts itself out\" as we recursively crawl dependencies, otherwise we simply invoke the callbacks in the order the stores registered themselves with the dispatcher \u2020.\n\nIt does seem like this would simplify reasoning about the dispatch loop - there's no possibility of the dispatch loop yielding because of an asynchronous callback, only to be overtaken by a subsequent action. In this case, the callbacks all run to completion. If you need to do something asynchronous, you should dispatch an action and when the asynchronous thing you're doing resolves, have it trigger it's own dispatch loop instead of blocking the current one - something which I believe is possible with the promise implementation.\n\n| Tick | ViewMessageAction | DeleteMessageAction |\n| --- | --- | --- |\n| 1 | MessageStore |  |\n| 2 | MessageStore.pending | MessageStore |\n| 3 | .. | HeaderStore |\n| 4 | MessageStore.fulfilled |  |\n| 5 | HeaderStore |  |\n\n\u2020 It seems like this might lead to inadvertent sequential coupling between stores. The golang folks recently randomized the the order of keys inside their `map's` in order to keep developers from relying on (what I assume was) insertion order. I'm wondering if similar reasoning can't be applied to the dispatcher?\n  Hi,\n\nCurrently I have the following order of events, which are causing this error to occur:\n1. User click's a button to add a product to a cart (the button calls action creator and send ADD_ITEM event, which will be send throught the dispatcher to te stores);\n2. The cart store get this event and update with the product data sended throught the action;\n3. At the same time an API at the UTIL folder calls an async operation to write that update to the server\n\nFor testing purposes i'm simulating an local API, which makes the response be imediately.The idea is that the API will dispatch another event through the action creator once the response from the server arrives, something like ADD_ITEM_SUCCESS or ADD_ITEM_ERROR should be dispatched throught the action creator. Currently that's the precisely moment when the error happens, i'm guessing that's because there are almost no delay between the ADD_iTEM and the response from the server event (SUCCESS or ERROR).\n\nHowever, if I encapsulate the code in a setTimeout function everything works fine, even if I set the timeOut to be at only 1ms or 0. Which leaves me thinking if that might be a bug in the currently version of the dispatcher?\n Hi fisher, thanks for your reply.\n\nI have been thinking about the best way to solve this and I ended up with a solution that need to use some sort of queue at the dispatcher. Here's my thoughts:\n\n**Sync or Async Action Creators?**\n\nLooking at the facebook chat example I saw that the external Api call are made through the WebChatApiUtil, the Action Creator call it when creating a message and, once the return from the server is back, the WebChatApiUtil calls an action.\n\nThe other solution that I found is the one used by Yahoo and Fluxxor (and maybe some others) that is to make the Action Creator async. Different from the Facebook Chat example, the Action Creator dispatch an action, call the Util that will sync with the server and then wait for the callback from the function. \n\nThey both do basically the same thing but one using events and another using callbacks, since all the flux idea is based on an event system I think that the first scenario is the best one.\n\n**The problem (that will happen with both solutions above)**\n\nNow both these solutions will end up with the same concurrency problem since we never know when the callback will arrive/the event will be fired and the user might initiate new actions while we are waiting for this answer. As the application grows this becomes even more problematic since we can have many information arriving from the server (keeping data in sync). The root of this problem is from the fact that we have two sources of Actions, the View Component (user) or the Api functions (server).\n\nTo avoid this the solution that i'm using so far is the following one:\n1. Only the files in Util folder that sync with the server and the Views (react components) can create actions through the Action Creators (for instance, stores should never call actions);\n2. The action creator \"fire and forget\" the functions in the Util folder as needed to sync with the server, once the payload is ready the Util will then call the action creator it needs with the correct action and payload (just like shown at facebook chat app example);\n3. Stores only receive data from the dispatcher, action creators send action throught the dispatcher only, the views consume data from the store as the store emit changes and stores subscribe to events in the dispatcher to update itself (basic flux idea);\n4. The main difference actually happen at my AppDispatcher file, I created a queued list (using the async npm module), so when the action creator call's something like handleViewAction(source, action) or handleViewServer(source, action), both these functions will put a new request on the last place in the queued line, so the actions will keep getting fired in the same order they arrived and will all be controlled by the AppDispatcher, so the rest of the App can keep working in a synchronous manner and don't worry about any of that;\n\nBellow that's how my AppDispatcher file currently looks like:\n\n``` javascript\nvar AppConstants = require('../constants/AppConstants'),\n    Dispatcher = require('flux').Dispatcher,\n    async = require('async'),\n    assign = require('object-assign'),\n    PayloadSources = AppConstants.PayloadSources,\n    dispatcher,\n    queue,\n    AppDispatcher;\n\ndispatcher = new Dispatcher();\n\nqueue = async.queue( function (task, callback) {\n    var payload = {\n        source: PayloadSources[task.source],\n        action: task.action\n    };\n    AppDispatcher.dispatch(payload);\n    callback();\n}, 1); // only one worker, one event at a time\n\nAppDispatcher = assign(dispatcher, {\n    handleServerAction: function (action) {\n        queue.push({source : 'SERVER_ACTION', action : action});\n    },\n    handleViewAction: function (action) {\n        queue.push({source: 'VIEW_ACTION', action : action});\n    }\n});\n```\n Would like to hear @fisherwebdev feedback on the strategy used above. We are running into some of the same issues; emitChange triggers a view to change in a manner that dispatches an action (for example a \"DebugLog_Add\"-action. I\n There is a great concept of Statecharts (or UML State Machines) which has some similarities with Flux. It is kind of stuck in academia world, but is well established technology and tested for decades.\n\nOne of the similarities with Flux is the dispatch process. They call it RTC (run to completion):\n\n\"In the RTC model, the system processes events in discrete, indivisible RTC steps. New incoming events cannot interrupt the processing of the current event and must be stored (typically in an event queue) until the state machine becomes idle again. These semantics completely avoid any internal concurrency issues within a single state machine. The RTC model also gets around the conceptual problem of processing actions associated with transitions, where the state machine is not in a well-defined state (is between two states) for the duration of the action.\"\n\nhttp://en.wikipedia.org/wiki/UML_state_machine#Run-to-completion_execution_model\n\nSo it is basically the same as Flux dispatch cycle, with one major difference: nested dispatches are allowed, but they are added to (sync) queue and dispatched only after current dispatch cycle is complete. \n\nThe problem with Flux dispatcher right now is that sometimes you really need to fire some action in response to other action (and this is perfectly valid case in Statecharts too). \n\nIn some cases these actions are created in async handlers (e.g. web api utils). So it kinda works because it doesn't interfere with current dispatch cycle. But why would you allow async operation from store and disallow sync one?\n\nOnly because sync operations may interfere with current dispatch process (when your app is in non-consistent state).\n\nI think RTC approach and sync queue solves this problem and doesn't add as much complexity or external dependencies to code as async queue.\n That's actually not the reasoning as to why we disallow the dispatch-within-a-dispatch.\n\nThe reason is that we are interested in preventing cascading updates.  This is the primary problem that causes complexity in the data layer, leading it to become difficult for engineers to reason about how application state is changing.\n\nThe Flux perspective is that a mutation should not cause another mutation.  Instead, mutations are passive, merely responding to things happening \"outside\" of the application -- the user clicks, the server responds, the browser cycles an animation frame, etc.\n\nWe've talked about and experimented with creating an action queue in front of the dispatcher, but we've stopped short of going forward with it, as it leads immediately to these cascading updates.\n @fisherwebdev So how do you cope with cascading updates that should happen within the application? Do you fire subsequent actions from stores in a setTimeout callback which in fact relies on the JavaScript internal event queue?\n @sompylasar I've often found that \"cascading\" updates can often be handled alternatively like so without need to use `setTimeout`:\n\n```\nsomeActionCreator.action = function () {\n  dispatcher.dispatch({ actionType: \"A\"...});\n  dispatcher.dispatch({ actionType: \"B\"...});\n  ...\n};\n```\n\nThere won't be a browser repaint until the thread is free.\n\nHowever, @fisherwebdev, @zpao I'm not sure if this is a good, bad, or ugly practice?  Does FB code do this at all or is it just better to merge sequential dispatches 'A' & 'B' above into a third dispatch 'C' which conglomerates them?\n @sterpe Those sequential calls to dispatch are happening synchronously.  They are separate dispatches, so yes this works fine.  However, I've never seen that done at FB, and I'm not sure why anyone would do that.  We would simply merge them, as you suggested.\n\n@sompylasar We believe that cascading actions are a sign of a design problem, and we avoid them entirely.  When all stores are receiving all actions, it's often trivial to simply respond to the original action and `waitFor()` anything that needs to happen first.\n Thanks\n\nSent from my iPhone\n\n> On May 27, 2015, at 2:47 AM, Bill Fisher notifications@github.com wrote:\n> \n> @sterpe Those sequential calls to dispatch are happening synchronously. They are separate dispatches, so yes this works fine. However, I've never seen that done at FB, and I'm not sure why anyone would do that. We would simply merge them, as you suggested.\n> \n> @sompylasar We believe that cascading actions are a sign of a design problem, and we avoid them entirely. When all stores are receiving all actions, it's often trivial to simply respond to the original action and waitFor() anything that needs to happen first.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n If anyone is interested I've modified the @fabiozaffani 's dispatcher to work without `async` and it solved all of our `Cannot dispatch in the middle of dispatch` problems. \n\nIn our case components that had their data loaded in store were displaying components that in their turn threw actions to load their content, so that caused the error. Queue solves it and order remains the same.\n\nHere's the code:\nNote that it's not implementing 2 methods `handleServerAction` and `handleViewAction` but just `handleAction`. It is using tiny sync-queue dependency. https://github.com/tessel/sync-queue \n\n```\n'use strict';\n\nimport Flux from 'flux';\nimport assign from 'react/lib/Object.assign';\nimport Queue from 'sync-queue';\n\nlet queue = new Queue();\n\nlet Dispatcher = assign(new Flux.Dispatcher(), {\n  handleAction (action, data) {\n\n    let payload = {};\n\n    payload = assign(\n      {\n        event: action\n      },\n      data\n    );\n\n    queue.place(() => {\n\n      this.dispatch(payload);\n      queue.next();\n    }); \n  }\n});\n\nexport default Dispatcher;\n```\n I have a similar situation to @mkrn's, I have a component that can have anywhere from 4-8 child components that each trigger an action to load their own data. When one of those `FETCH_DATA` actions gets dispatched at the same time as a previous request's `SUCCESS` action I get the `\"Cannot dispatch in the middle of a dispatch.\"` error.\n\nI'm wondering if there's a better way for achieving this, for now I think I will go with @mkrn's solution.\n How about following as a solution? I had to override `_stopDispatching` but FB can provide a flux hook, something like `onDispatchCompletion` @fisherwebdev \n\n`var Dispatcher = require('flux').Dispatcher,`\n&nbsp;&nbsp;`appDispatcher = new Dispatcher();`\n\n`appDispatcher.handleAction = function(action) {`\n&nbsp;&nbsp;`this.dispatch({`\n&nbsp;&nbsp;&nbsp;&nbsp;`source: 'VIEW_ACTION',`\n&nbsp;&nbsp;&nbsp;&nbsp;`action: action`\n&nbsp;&nbsp;`});`\n`};`\n\n`appDispatcher.dispatch = function(dispatchAction) {`\n&nbsp;&nbsp;`if ( this.isDispatching() ) {`\n&nbsp;&nbsp;&nbsp;&nbsp;`this._pendingDispatches = this._pendingDispatches || [];`\n&nbsp;&nbsp;&nbsp;&nbsp;`this._pendingDispatches.push(dispatchAction);`\n&nbsp;&nbsp;`} else {`\n&nbsp;&nbsp;&nbsp;&nbsp;`Dispatcher.prototype.dispatch.call(this, dispatchAction);`\n&nbsp;&nbsp;`}`\n`};`\n\n`appDispatcher._stopDispatching = function() {`\n&nbsp;&nbsp;`var pendingDispatch;`\n&nbsp;&nbsp;`Dispatcher.prototype._stopDispatching.call(this);`\n&nbsp;&nbsp;`if (this._pendingDispatches && this._pendingDispatches.length > 0) {`\n&nbsp;&nbsp;&nbsp;&nbsp;`pendingDispatch = this._pendingDispatches.shift();`\n&nbsp;&nbsp;&nbsp;&nbsp;`Dispatcher.prototype.dispatch.call(this, pendingDispatch);`\n&nbsp;&nbsp;`}`\n`};`\n\n`module.exports = appDispatcher;`\n  It would be great to see some example unit tests for components and mocking the stores.\n Also related, when cd to examples/flux-todomvc and run \"npm test\" I see it starts up Jest but it just hangs without running any of the actual tests. What gives?\n Jest has issues when running in node / iojs > 0.10, could be that.\n I am following the unit test for TotoStores.js. Writing up my own unit test according to this file\nhttps://github.com/facebook/flux/blob/master/examples/flux-todomvc/js/stores/__tests__/TodoStore-test.js\n\nIt fails on this line:\ncallback = AppDispatcher.register.mock.calls[0][0];\n\nUnit tests error output:\nTypeError: Cannot read property '0' of undefined.\n\nHere is my sample code\nhttp://pastebin.com/GGB3ZVMy\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n I'm down with this issue as well. Looks like callback is not registered with the dispatcher.\nAppDispatcher.register.mock returns { calls: [], instances: [] }. \nEverything is mocked except mystore and object-assign.\n\nNode: v4.2.2\nJest: v0.8.0\n\nNot sure if this is fixed and closed.. is there a workaround?\n Having same issue as sahas\n i'm having the same issue. Any updates on this?\n I'm having something similar to this one \r\nTypeError: Cannot read property 'calls' of undefined\r\nany idea how to pass this error ?  Wouldn't something like the following encourage better encapsulation?\n\n``` javascript\n\nvar _emitter = new EventEmitter();\nvar MyStore = {\n\n   emitChange() {\n       _emitter.emit('change');\n   },\n\n   addChangeListener(callback) {\n      _emitter.on('change', callback);\n   },\n\n   removeChangeListener(callback) {\n      _emitter.removeListener('change', callback);\n   }\n\n};\n\n```\n I'm not sure this would even run.\n  I'm looking solutions for our single page app built with React and Backbone. And in Backbone, a view listens to its own Model or Collection. So given a View of message, it does not refresh when a message of another room updates.\n\nWhile in React it appears maintaining Stores like Models is quite a bad idea. In the Chat demo, there is only one MessageStore here.\nhttps://github.com/facebook/flux/tree/master/examples/flux-chat/js/stores\nSuppose someone is chatting in room A, updates of room B may trigger a View refresh. When there are hundreds of messages, we may face a issue of performance.\n\nSo I quite like to know what's your concern when you wrote the Chat demo, how about that it performance when it gets large?\n Hi @jiyinyiyong \n\nThe way we've tried to deal with this is by not using singletons but instead pass a factory into the React components that will allow them to create their own Stores/ActionCreators etc http://slides.com/briandipalma/react#/37 this is OK for us because we would use React for components in the page and not the entire app so we create a new factory per component. I'm sure it should still work for full React applications though.\n Hi @jiyinyiyong, I work on Messages at FB. In our actual implementation, we include thread IDs as data with the Store's change event. If the thread ID doesn't match the view's thread ID (passed as a prop), we ignore the change event.\n\nIn addition to that, we use immutable data wherever we can, so we can short-circuit re-rendering when data hasn't changed. Check out [immutable-js](https://github.com/facebook/immutable-js) if you haven't already! :)\n @briandipalma By creating one store per component, there's one issue on my side. We have server pushing events in our app. While Stores are placed inside components, those Stores need their own solution to listen updates from server and update themselves, which need a lot of code.\n\n@kmeht It's quite nice to hear Facebook's solution on this. Trigger change events with IDs is a reasonable solution. I want to look deeper into it.\nImmutable-js is nice. Since our app currently uses Backbone Models, it's not easy for us to switch at this moment.\n By component I mean something that would be a useable piece of functionality on it's own but that could be composed of many smaller React components. So for example the chat users and chat windows in FB would be a chat component. It is made up of many smaller React components though.\nOn their own they aren't much use but composed together they provided a feature.\n\nThere should very little extra code, it's all exactly the same structure with APIUtilities providing messages it's just instead of singletons they would be instances. The factory news them up if they don't already exist and provides them to any Store or View that requests one.\n\nSo for example each chat window would have it's own Store/ActionCreator/Utility instances but they are all the same classes in the same modules. The only difference is you don't have to write\n\n``` javascript\nif (action.id === this.myid) {\n}\n```\n\nall the time.\n @briandipalma I think I didn't get your meaning here. Is there any example on GitHub that implemented your soultion? Maybe I can just see how it works.\n @jiyinyiyong Nope I'm sorry I have no OSS that implements this slight devitation from flux but I have been meaning for a long time to write up a blog on it. I really should finish it off. In essence everywhere that you use singletons in normal flux you instead call the factory and ask for a Store/ActionCreator/Utility and as the factory is rooted by a certain React view all classes below that root use the same factory and therefore the same instances.\n\nThe factory is passed down into all the React child views as a prop so they all can access the same instances. There is some simple code in the slides I linked to that might help explain it all.\n @briandipalma I'm not sure about my comprehsnsion about the term \"factory\". I can see in you solution, there's still one store, which is than passed down too all children from its root component. So that every component still listens to a same Store. Is that correct?\n @briandipalma Looks like what you have called a \"Factory\" is actually a \"Factory + Service Locator\". The \"Factory\" part internally creates an instance of a Store/ActionCreator/Utility via \"register\", the \"Service Locator\" part returns the previously registered instance via \"get\".\n @jiyinyiyong The factory creates Stores/ActionCreators/Utilities. There is one Store class but there can be 0 or more instances of the Store class. The Store isn't passed down through the components, the factory is. It is a registry for all the instances that are relevant for a specific component tree.\n\nImagine you have a `ChatWindow.react.js` component and it is composed of several other React components, like a `ChatMessagesList.react.js` and `ChatMessageInput.react.js`. A user can have 0 or more open chat windows in the application and you don't want all the relevant Stores sharing the same data.\n\nSo in the case of two chat windows you render your react components into two different mount nodes and you provide each component tree with a different factory.\n\n``` javascript\nconst chatDependenciesFactory = new ChatDependenciesFactory(chatDispatcher);\n\nReact.renderComponent(\n        <ChatWindow factory={chatDependenciesFactory} />,\n        this._mountNode\n    );\n\nconst anotherChatDependenciesFactory = new ChatDependenciesFactory(anotherChatDispatcher);\n\nReact.renderComponent(\n        <ChatWindow factory={anotherChatDependenciesFactory} />,\n        this._anotherMountNode\n    );\n```\n\nSo the component trees have different factories which means they have different Stores/Dispatcher etc. It's still flux, it's just scoped at the component level as opposed to singleton, global app level.\n\nNow you would not write the code above of course, the ChatWindows would be dynamically created as the user opens more of them but I hope it helps explain the object lifecycles and links.\n\n@sompylasar I wouldn't expect there to be many different, unrelated Service Locators present in an application, it would normally be a single source of truth but as I explained you can have many different factories operating at the same time, all they do is `new` a Store etc when they are asked for one if one doesn't already exist they aren't application service repositories.\n @briandipalma interesting.   How do you find multiple component level dispatchers in practice?  Do you ever need to communicate x-dispatchers?\n\nSent from my iPhone\n\n> On Nov 20, 2014, at 1:37 PM, Brian Di Palma notifications@github.com wrote:\n> \n> @jiyinyiyong The factory creates Stores/ActionCreators/Utilities. There is one Store class but there can be 0 or more instances of the Store class. The Store isn't passed down through the components, the factory is. It is a registry for all the instances that are relevant for a specific component tree.\n> \n> Imagine you have a ChatWindow.react.js component and it is composed of several other React components, like a ChatMessagesList.react.js and ChatMessageInput.react.js. A user can have 0 or more open chat windows in the application and you don't want all the relevant Stores sharing the same data.\n> \n> So in the case of two chat windows you render your react components into two different mount nodes and you provide each component tree with a different factory.\n> \n> const chatDependenciesFactory = new ChatDependenciesFactory(chatDispatcher);\n> \n> React.renderComponent(\n>         <ChatWindow factory={chatDependenciesFactory} />,\n>         this._mountNode\n>     );\n> \n> const anotherChatDependenciesFactory = new ChatDependenciesFactory(anotherChatDispatcher);\n> \n> React.renderComponent(\n>         <ChatWindow factory={anotherChatDependenciesFactory} />,\n>         this._anotherMountNode\n>     );\n> So the component trees have different factories which means they have different Stores/Dispatcher etc. It's still flux, it's just scoped at the component level as opposed to singleton, global app level.\n> \n> Now you would not write the code above of course, the ChatWindows would be dynamically created as the user opens more of them but I hope it helps explain the object lifecycles and links.\n> \n> @sompylasar I wouldn't expect there to be many different, unrelated Service Locators present in an application, it would normally be a single source of truth but as I explained you can have many different factories operating at the same time, all they do is new a Store etc when they are asked for one if one doesn't already exist they aren't application service repositories.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n ``` js\nconst chatDependenciesFactory = new ChatDependenciesFactory(chatDispatcher);\n```\n\n> it's just scoped at the component level as opposed to singleton, global app level.\n\nNow I know that each components get a factory created from Dispatcher. However, the whole graph how data flow pass from Stores to Views(also Actions) is still unclear.\n @sterpe I think it would be helpful if I provided context. We already have many large web apps for online trading, FX, stock trading, instutional trader, mobile etc. These apps were mostly build with components that use a wrapper library around KO. These components would be trade tickets, tiles and grids. As we sometimes needed inter component communication we have an app wide event bus already in place for such purposes.\n\nThat is what we would use even with React/flux based components. I think using React/flux rooted at individual components and a separate event bus for app communications is perfectly acceptable. At the end of the day the complexity is mostly inside those components and inter component communication is the exception.\n\n@jiyinyiyong The Stores are created by the factory if they don't already exist so instead of.\n\n``` javascript\nconst ChatMessagesStore = require('ChatMessagesStore');\n```\n\nIn the component module you do this\n\n``` javascript\ncomponentWillMount: function(){\n    this.props.factory.getStore('ChatMessages').addChangeListener(this._onChange, this);\n}\n```\n\nWhich returns an instance of the Store scoped for your component. Call it a second time and you get the same instance as the factory retains it. The factory passes itself into the Store so the Store can register with the dispatcher by asking for it. The API from the slides, with one change.\n\n``` javascript\nclass ComponentDependenciesFactory {\n\n    constructor(state, dispatcher) {}\n\n    registerActionCreator(actionCreatorName, actionCreatorClass) {}\n\n    registerUtility(utilityName, utilityClass) {}\n\n    registerStore(storeName, storeClass) {}\n\n    getActionCreator(actionCreatorName) {}\n\n    getUtility(utilityName) {}\n\n    getStore(storeName) {}\n\n    getDispatcher {}\n}\n```\n\nThe change is `state` as a parameter to the factory constructor. This is the initialization data that the Stores might need. It's an object literal. When the factory creates the Stores it also passes in to them a Cursor which wraps around a part of that state/object literal so that the Store has the correct initial data (for your example a chat channel to a specific user, each window would have a different chat channel/subscription subject name i.e. \"/CHAT/USER1/USER2\").\n\nYou could serialize our components and they have a lot of state so we needed this but you might not. Nothing was global and everything was provided via the factory which allowed us to inject in component specific dependencies. The data flow is still exactly the same as normal flux, the only difference is instances instead of singletons.\n @briandipalma Thanks. Now I see how Factories connect to Stores. Hopefully I will get more details when I implement one in my own app.\n @briandipalma This sounds very similar to what we're doing with https://github.com/yahoo/dispatchr and https://github.com/yahoo/fluxible-app. We're using classes for stores and the dispatcher instead of singletons and fluxible-app provides the central piece that all of the actions flow through to provide access to the store instances.\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  As PR #83, if dispatcherIndex is a property of the store, I think you need a comma here.\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  I think it's kind of silly that clients of this module still have to write the same boilerplate for their stores. I think it'd be nice to provide a base for clients.\n\nThe simplest way to do this would be to do something like this:\n\n``` js\nvar EventEmitter = require('events').EventEmitter;\nvar assign = require('react/lib/Object.assign');\nvar CHANGE_EVENT = 'change';\n\nvar Store = assign({}, EventEmitter.prototype, {\n  emitChange: function() {\n    this.emit(CHANGE_EVENT);\n  },\n\n  /**\n   * @param {function} callback\n   */\n  addChangeListener: function(callback) {\n    this.on(CHANGE_EVENT, callback);\n  },\n\n  /**\n   * @param {function} callback\n   */\n  removeChangeListener: function(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n});\n\nmodule.exports = Store;\n```\n\nFor even better usability, a constructing function could be provided:\n\n``` js\nfunction createStore(dispatcherCallback, methods) {\n  return assign({}, BaseStore, methods, {\n    dispatcherIndex: Dispatcher.register(dispatcherCallback)\n  });\n}\n```\n\nHere's an 'example' of how I think it could be done/used: https://github.com/justinwoo/15-puzzle/blob/c600e4d82344b2aa0ccf6c83e06c47a76e2431f7/src/Store.js#L114\n\nThoughts? Are people's implementations of stores much too different to handle something like this?\n Might be using Backbone.event.\n\nSent from my iPhone\n\n> On Nov 12, 2014, at 10:43 PM, Justin Woo notifications@github.com wrote:\n> \n> I think it's kind of silly that clients of this module still have to write the same boilerplate for their stores. I think it'd be nice to provide a base for clients.\n> \n> The simplest way to do this would be to do something like this:\n> \n> var EventEmitter = require('events').EventEmitter;\n> var assign = require('react/lib/Object.assign');\n> \n> var Store = assign({}, EventEmitter.prototype, {\n>   emitChange: function() {\n>     this.emit(CHANGE_EVENT);\n>   },\n> \n>   /**\n> - @param {function} callback\n>   */\n>   addChangeListener: function(callback) {\n>     this.on(CHANGE_EVENT, callback);\n>   },\n>   \n>   /**\n> - @param {function} callback\n>   */\n>   removeChangeListener: function(callback) {\n>     this.removeListener(CHANGE_EVENT, callback);\n>   }\n>   });\n> \n> module.exports = Store;\n> For even better usability, a constructing function could be provided:\n> \n> function createStore(dispatcherCallback, methods) {\n>   return assign({}, BaseStore, methods, {\n>     dispatcherIndex: Dispatcher.register(dispatcherCallback)\n>   });\n> }\n> Here's an 'example' of how I think it could be done/used: https://github.com/kimagure/15-puzzle/blob/master/src/Store.js#L120\n> \n> Thoughts? Are people's implementations of stores much too different to handle something like this?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n I'm happy to share [`flux-store`](https://github.com/jedireza/flux-store) :heart:\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n We just released some of the basic Flux infrastructure we use at Facebook, including a base store.\n\nhttp://facebook.github.io/flux/docs/flux-utils.html#content\n cool, thanks! :beer: \n  This error is raised at build time. TodoConstants.js requires keyMirror instead of keymirror.\n  This error is useful to spot cascading actions, but it can sometimes be difficult to track down the cause.\n\nAdding information on the `_pendingPayload` as well as the `payload` that triggered the error could be useful. (@iirvine 's Dispatcher has a nice warning message in this spirit: https://github.com/iirvine/fluent-flux/blob/master/src/Dispatcher.js).\n\nHow to display each payload? One idea could be having a `_displayAction` method that you could override when constructing the Dispatcher? Something like:\n\n``` javascript\nconstructor(options) {\n  if (options && options.displayAction) {\n    this._displayAction = options.displayAction;\n  }  \n}\n\n_displayAction(payload) {\n  return payload.type;\n}\n\ndispatch(payload) {\n    invariant(\n      !this._isDispatching,\n      'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch. ' +\n      `Received action '${this._displayAction(payload)}' while still dispatching action '${this._displayAction(this._pendingPayload)}'. `\n    );\n}\n```\n\nI can try to put together a PR for this, but wanted to jot down some ideas here first see what you think...\n Thanks for the feedback. That makes a lot of sense. A couple of questions though:\n- I assume we need to pass strings to `invariant()`, so should we `JSON.stringify(payload)`? What about potentially big payloads (ex: with large arrays)?\n- Maybe we can choose to leave the error as-is by default, but if the client passes a `displayPayload` function to the `Dispatcher` constructor, more error information will be displayed?\n Re #1, it could be but how big is it really going to be?  And at this point you've had something of a critical breakdown anyway so it feels less important that you might be hanging the browser on a long JSON.stringify when your app has effectively already crashed.\n\nSent from my iPhone\n\n> On Nov 9, 2014, at 4:46 PM, Nicolas Hery notifications@github.com wrote:\n> \n> Thanks for the feedback. That makes a lot of sense. A couple of questions though:\n> \n> I assume we need to pass strings to invariant(), so should we JSON.stringify(payload)? What about potentially big payloads (ex: with large arrays)?\n> Maybe we can choose to leave the error as-is by default, but if the client passes a displayPayload function to the Dispatcher constructor, more error information will be displayed?\n> \u2014\n> Reply to this email directly or view it on GitHub.\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  The removeListener was missing in this store.\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  Seems like MessageStore is missing removeChangeListener method\n just did the Pull Request\n  0.12 deprecates usage of merge and copyProperties and autofactories\n\nObject.assign is provided in react/lib/Object.assign as of now, but may\nmove to a more freely accessible place in the future.\n Rebased, took care of some versioning stuff and threw out react/lib/Object.assign usage.\n  From [Flux Overview](http://facebook.github.io/flux/docs/overview.html), we have these statements:\n1. Stores contain the application state and logic.\n2. The actions are simply discrete, semantic helper functions that facilitate passing data to the dispatcher.\n\nThat said:\n\nhttps://github.com/facebook/flux/blob/master/examples/flux-chat/js/actions/ChatMessageActionCreators.js\n\n``` javascript\nvar message = MessageStore.getCreatedMessageData(text);\n    ChatWebAPIUtils.createMessage(message);\n```\n\nI think that this logic should be placed inside the MessageStore:\n\nhttps://github.com/facebook/flux/blob/master/examples/flux-chat/js/stores/MessageStore.js\n\n``` javascript\ncase ActionTypes.CREATE_MESSAGE:\n      var message = MessageStore.getCreatedMessageData(action.text);\n      _messages[message.id] = message;\n      /* HERE we call an async request, but don't wait for a response\n          ChatWebAPIUtils.createMessage would trigger an error/success action */\n      ChatWebAPIUtils.createMessage(message);\n      MessageStore.emitChange();\n      break;\n```\n\nBusiness logic is not responsibility of actions. Actions are just simple semantic helpers, while stores contain the application state and logic.\n\nWhat do you think about?\n Hey @fisherwebdev, thank you for your perfect answer.\n\nI get the idea. But looking at the Flux repo, I saw an updated flowchart that makes this clear:\n\nAction creators should be used to call web API, not stores.\n\nThis \"rule\" makes it simple to know what part of the code is calling the web API. As you said, it's actually cleaner to do it in the action creators.\n\nThank you!\n  I have a scenario where an action is to be dispatched however I need to perform some logic dependent on the state of certain stores to determine what actions to dispatch. Since a store cannot dispatch while already dispatching I cannot create a store which handles this logic. Note that this logic is non trivial.\n\nBasically I need to perform an action which says \"Calculate and apply a route which brings this resource to that target\". The route that the resource has to take depends on available resources provided by the different stores. So I need to query all the stores and perform some logic to figure out what route is the best one and then dispatch the corresponding actions to the stores to make it happen.\n\nShould I put the logic in the ActionCreator? Although that does not quite follow the guidelines which explicitly state the ActionCreators should just be helper methods to create and dispatch the actions.\n   Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  This is a simple change to the docs based on a question I sent to @vjeux around the statement that the _todos variable could not be accessed from outside.\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n This is great thanks! Do you mind doing the CLA and I'll bring it in :)\n @vjeux Done. :-)\n\nOn Friday, October 17, 2014, Christopher Chedeau notifications@github.com\nwrote:\n\n> This is great thanks! Do you mind doing the CLA and I'll bring it in :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/flux/pull/84#issuecomment-59535889.\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  TodoStore object needs to be closed after removeChangeListener method. Also reindented AppDispatcher.register due to the change in the TodoStore object.\n I think this was fixed long ago in #98 so closing out.\n  No test folder in the repo, but assume (some)  exists somewhere.\n @fisherwebdev The tests expect the Dispatcher with `waitFor` taking 2nd argument:\nhttps://github.com/facebook/flux/commit/83a9505d9814f034bc19c451e011bca0b738b273#diff-e0947f38df5ab3cb5b2137999fb1a23cR141\n\nThe Dispatcher in the repo does not match this signature, it takes a single argument:\nhttps://github.com/facebook/flux/blob/master/src/Dispatcher.js#L154\n @fisherwebdev Thanks! didn't see this.\n  In `TodoStore-test.js` the variables at lines 37-39 are missing var, and i think they are going global\n\n``` js\nbeforeEach(function() {\n  AppDispatcher = require('../../dispatcher/AppDispatcher');\n  TodoStore = require('../TodoStore');\n  callback = AppDispatcher.register.mock.calls[0][0];\n});\n```\n\nNot a big deal though :)\n   Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  I'm still trying to figure out how to setup alerts like a popups.\n- Should I have an alert store?\n- Or should the domain store keep some variable to let me know that needs to open the store?\n\nI've tried both approaches and nothing seems correct.\n# An alert store?\n\nIf the contents of the alert has more logic, is managed by whom? The alert can't manage that.\nHere is how is done:\n- `alertStore.add({contents: new UnlockJob({...})})`\n- In my root `alertStore.getAll().map(function(alert){return alert})`\n# Or should the domain store keep some variable to let me know that needs to open the store?\n\nHow do I open the alert in the first place? I do: `myStore.unlockingJob ? new UnlockJob({...}) : null` (the UnlockJob is the alert view) in my root component. But then I can't manage any alerts properly. \n > A lot of this seems very specific to your application, and it's difficult to get enough context from what you have written here. Perhaps more code would help the community here understand your issue?\n\nImagine a popup, where would you store in your app?\n  These are internal and implementation details of how React builds for npm. We're going to deprecate them. `merge` is now simply `Object.assign` and `copyProperties` is a simple `for in` (and can be replaced with `Object.assign`)\n What's your position on this now, with the release of 0.12 with deprecation warnings for merge/copyProperties and the provision of Object.assign in react/lib? Is it okay for the examples to simply be updated to use react/lib/Object.assign instead, or will even that be very quickly moved out of React entirely?\n Cool, I'll look into updating my PR sometime later. It'd also be nice if we could also get Invariant to be shared when things are being bundled up.\n Done: https://github.com/facebook/flux/pull/91\n  Its quite common that a subcomponent like a modal does not just instantaneously appears but that an animation is associated with it. Since the initial user action would be called in an action and communicated to the store, i suppose the store would handle the animation and communicate the state change to the react component ?\n  - I have store S1 which listens to actions A1, A2 and A3. \n- Then I have store S2 which only change when the S1 store changes. \n- With flux architecture I have to make S2 also listen on actions A1, A2 and A3?\n\nThis is not DRY and can lead to many bugs.\n\nWhat is your opinion? How to solve this?\n @fisherwebdev Because they are not sharing the same data. For example S1 is a jobStore and S2 is an achievementStore. The achivements are only increased when the jobs are done.\n But I also have other stores which will change the archievement store. I\nwill have too many stores joied in the same store.  Then is a mess again.\n\nOn Thursday, October 9, 2014, Bill Fisher notifications@github.com wrote:\n\n> Why not manage both jobs and achievements in one store? If you really want\n> to separate the code for readability/maintainability, then yes, you want to\n> have those actions as cases in the AchievementStore's switch statement,\n> waitFor the JobStore, and then retrieve the updated data from the JobStore.\n> But if you can, it really sounds like they should be the same store.\n> waitFor is really a last resort for managing complexity, and not at all the\n> ideal in a well-designed system. Sometimes, it's unavoidable. But in your\n> situation, I would seriously consider merging the two stores. Please\n> remember that stores are not ORM-style models, and they are not Backbone\n> collections. They manage a \"domain\" of logic and data. It sounds to me like\n> jobs and achievements might actually be within the same domain.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/flux/issues/75#issuecomment-58539059.\n\n## \n\nBest regards, Melhores cumprimentos,\n\nBlog    : ProJavaScript\nhttps://WebDesignPorto.com?utm_source=email-footer-text&utm_medium=email-footer-text&utm_campaign=email-footer-text\nTwitter : @ProJavaScript https://twitter.com/ProJavaScript\nGoogle+ : ProJavaScript+\nhttps://plus.google.com/104273320601694264357/posts\n\nhttps://WebDesignPorto.com?utm_source=email-footer-logo&utm_medium=email-footer-logo&utm_campaign=email-footer-logo\n  I have an callback for onBlur that will setState, and based on the state, some buttons may be removed from the screen.\n\nThe problem is that one of these buttons has a callback that needs to run, and if setState is called from the onBlur callback, then the callback for the button does not run, probably because it's not technically visible. I verified that the button callback works fine if the onBlur callback does not call setState.\n\nI worked around the issue by using a window.setTimout that calls setState after 250ms.\n- Is this the right approach?\n- Or is this a bug in flux that all callbacks don't run?\n\nMy expectation is that the all callbacks would run and the setState calls would be cummulative.\n\nThanks for any advice.\n Oh! Sorry, I need to put this in the React repo. Late at night when I filed this.\n  The index.html is not a result of any compilation/bundling process rather the bundle.js.\nThis has been clarified in the rephrasing.\n  You might include this example: https://github.com/totty90/jogabo-flux-react\n I have created an example too :smile:\n\nhttps://github.com/torifat/flux-shopping-cart-demo\n Both of the above are missing tests.\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  Call event.preventDefault() to stop a newline being added to the\ntextarea in the MessageComposer component after sending a\nmessage with enter.\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  Changed the TodoApp.js reference to TodoApp.react.js to reflect the file tree.\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Now signed the CLA.\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  If it's not needed. yank it! I think some of these examples are needlessly complex.\n I can't imagine large scale Web app development without using a module system and loader. It would be a step back to remove those. If people find those complex their use case might not need patterns like flux, a simpler approach might be as productive.\n There is nothing in the docs about it. I had to grep `bundle.js` to find mention as a comment in a separate example that it dealt with Browserify. I still have no idea what Browserify does or why it's needed.\n\nBackbone for example doesn't this at all -- and `flux` is supposed to be a replacement, no?\n Maybe the documentation needs to mention that the examples use a CJS loader. You can use either Browserify or WebPack and if you don't know what they are I recommend spending some time reading up on them. Do you still load all your JS/CSS etc by creating script and link tags? That's painful to scale so you might find these module loaders helpful.\n Here is an example: https://github.com/totty90/jogabo-flux-react\n  Hy!\n\nCurrently I have an app that has a changed version of flux in which the action manages all the stores changes:\n- Some stores;\n- Communicates with the server;\n- Tracking;\n\nI don't need to wait for stores (anyway flux's `waitFor()` is synchronous), I just put the things in the order. For now is scaling well, but I might wonder what would be the benefits of implementing a strict flux architecture (where the stuff is done in the register callback in each model)?\n\nThe first thing that can go wrong is having a lot of stuff in each action. But you have the benefit of knowing in one glance what is going on each action. In the strict flux architecture you would have to open each store and check it's relative action listener.\n\nThis is the real action, without any modification:\n\n```\ndefine(function(require, exports, module){\n\n    var _         = require('underscore');\n    var utils     = require('client/utils');\n    var async     = require('async');\n    var constants = require('client/constants');\n    var tempShipIdCounter = 0;\n    return function(args, cb){\n        var logic = require('client/logic/logic');\n        var _this = this;\n        var data  = _this.ctx.data;\n\n        var planet  = args.planet;\n        var taskId  = args.taskId;\n        var payload = args.payload;\n\n        async.series({\n            _: function(cb){\n                var res = planet.getTask().startTask(taskId, payload, data.authStore.currentPlayer);\n                if(res.err){\n                    data.popupStore.addPopup('task', {\n                        planet    : planet,\n                        taskState : 'error',\n                        err       : res.err\n                    });\n                    return;\n                }\n                _this.api('startTask', res.data, {handleError: true}).then(function(res){\n                    if(res.err){\n                        if(DEBUG){\n                            debugger\n                            return console.error(res.err);\n                        }else{\n                            return location.reload();\n                        }\n                    }\n                })\n                // We need to get from the res.data because the taskId can be undefined\n                // when we auto-restart last task.\n                taskId = res.data.taskTypeId;\n                data.sounds.startTask.play(taskId);\n                woopra.track('start ' + taskId)\n                data.taskStore.trackPlanet(planet);\n                data.popupStore.addPopup('task', {\n                    added     : res.details.added,\n                    task      : planet.getTask().toJSON(),\n                    taskState : 'started',\n                    planet    : planet\n                });\n\n                cb();\n            }\n        }, cb)\n    };\n});\n```\n Open license; you're free to do whatever you want.\n\nPersonally, I'm finding the trick with React & Flux is how to model some particular state change such that you don't find yourself trying/needing/wanting to issue dispatches from inside component life cycle functions or otherwise circumvent the dispatch flow as you are doing here.\n @sterpe I'm not dispatching from the component. This code is an action from flux. So instead of making a global dispatch that stores listen to and do stuff, I do the stuff needed in the action and in this particular order, which is easier to read IMO. No need for waitFor. I'm only asking what are the benefits of using a strict flux architecture vs my version.\n- Flux flow: view->action->dispatcher->stores->dispatch->views-updated\n- My flow: view->action->stores->dispatch->views-updated\n\nI'm only skipping the dispatcher from the view.\n > stores->dispatch->views-updated\n\neh, stores should be event emitters and that should be their mechanism to notify the views listening to them of updated, I guess that was typo?\n Yes, isn't that what I've said?\n- Store emits (dispatches) the change;\n- Views which listened to store update;\n\nStore->dispatches->then the views update\n Sorry I read it as another action being dispatched, which seemed wrong.\n @totty90, As the application grows, say you add ten more stores for planetary defense, ship drive efficiency, etc you will have to modify each \"action\" fn to call & update the particular store.  Compare with using the dispatcher where you would only declare what actions this store updates against within the store itself.\n @fisherwebdev Ok.\n@sterpe But in your case with 100 stores and 100 actions. If your flow is distributed between 100 of stores, how can you read the code? You will have to jump from store to store to see the sequence, then you should also check all the waitFor preconditions. In your case, where you have the code in the store you will have stores which handles lets say 100 actions (not real, just for the example). Which one is easier to debug/check the dependencies and check the flow of the program?\n\nContinue here: https://groups.google.com/forum/#!topic/reactjs/krY5aiMk540\n > If your flow is distributed between 100 of stores, how can you read the code? You will have to jump from store to store to see the sequence, then you should also check all the waitFor preconditions.\n\nNo one sits down to just read an entire codebase, normally you want to focus on one concern and with stores that one concern should be in one place.\n\n> (not real, just for the example)\n\nExactly. Not real at all, what you are describing is a God object not a well factored store.\n @briandipalma even with my game example above, putting everything in each store is harder to maintain. \n\n> No one sits down to just read an entire codebase, normally you want to focus on one concern and with stores that one concern should be in one place.\n\nNormally you don't need to read it all, but for example I would like to know what exactly happens when I click on a button. If you have unexpected behaviour you have to check all the stores for that particular action. If you have an action you read it all there. I can't see any use case / making my life easier about storing that logic in each store. But this is me. Have you developed any app with pure flux? Show me your code or part of it.\n Following that logic you should put all your code in one file so you don't have to look at any other files.\n\n> If you have unexpected behaviour you have to check all the stores for that particular action.\n\nPersonally I wouldn't do it that way, I'd open up the view and then the store/stores that provide data to the view that appears incorrect and debug in that order. What you are doing in your pattern is making the stores mutable from outside. This negates one of the advantages of flux, as long as you are dealing with manageable interactions this seems fine but it's more difficult to scale with increasing complexity.\n\nBy the way I believe the action is simply an object literal with a type property, the action creator is the module/class with the API on it.\n\nI think it's quite handy to decouple the action creator and the store processing the action as it allows users of your flux component to easy add their own stores without having to modify the action creator code. All they do is register to the dispatcher, while in your pattern they would have to register to the dispatcher and modify the action creator code. Also if you wanted to see what action a store responds to you would have to look at all action creators and see if they call the store. In essence the reverse of your \"what stores are notified by what action\" problem.\n > Following that logic you should put all your code in one file so you don't have to look at any other files.\n\nThis is not the same logic. I've said to only keep in an action the whole flow. So when I look at an action I can see everything it does. Is not the same as putting all the code in the same file, as you can think.\n\n> All they do is register to the dispatcher, while in your pattern they would have to register to the dispatcher and modify the action creator code.\n\nNo, just change the action creator code.\n\n> Also if you wanted to see what action a store responds to you would have to look at all action creators and see if they call the store. In essence the reverse of your \"what stores are notified by what action\" problem.\n\nThat's also true. So the final question is: **do you want to see what an action does or what a store responds to.** Normally you want to know the flow other times you want to see what changes a store. Both can't be done together. **For me is more useful to see what happens when an something triggers an action than knowing what changes a store.**\n  This should prevent once in a blue moon errors regarding argument count. Also makes the function arguments look a little less odd. Any performance hits related to the `arguments` object are as far as I'm aware of extremely negligible.\n @fisherwebdev Oh wow, the performance hit is greater than I expected. For my own projects I wouldn't bother, but I guess that's different for you guys (especially with `invariant` being used all over the place). Closing this for now, I guess your current implementation makes sense :).\n  I would like to discuss best practice about form wizard.\nFollowing example. We have a page with 3 components: header, content, footer. In the header we show the name of the step. Content component shows the form for actual step. The footer contains buttons to go to the previous step or to the next step.\n## Problem 1:\n\nBecause the submit button and the form are capsulated in different components, how can we retrieve the data from the form component and submit this data to the server? By clicking on the button in the footer component it fires an action. This action can't contain the form data, because it can't access other components data. The action is received by a store. But the store don't have the form data to send it to server.\n### Solution 1.\n\nOn every input chage in the form, we fire an action with this change and transfer changed input value to the store. So we can guarantee, that the store always has fresh data of the form.\nWhen the store receives the submit action, it sends its data to server.\nDisadvantage is that we have to fire on each keypress an action.\n### Solution 2.\n\nIn addition to change event we create in the store a request event. Our form listen to the request event. After receiving a submit action the store emit a request event. The form receives the request event, collects all field data and fire an action with collected data to the store.\n## Problem 2:\n\nFor each step and each form we have different stores. The main process state is handeled by separeted MainStore. MainStore may show a popup with error message. \nFor example we have 2 forms on one page. Each form have to be validated by server. After we click on submit button each form store receives the submit action and makes an ajax request to validate its form data. If something with data is wrong the MainStore have to show the error messages in the popup. How to synchronize responses from these two async server validations and show the merged response in the popup by the MainStore?\n### Solution 1.\n\nCentralize all validation actions from all forms in the MainStore. The MainStore executes the ajax requests through a promise lib and after complete of all requests it fires a change event with merged server response. In this solution the MainStore should have write access to other stores to transfert the server field errors to form stores. \nDisadvantage is that we have a very big MainStore with whole logic.\n### Solution 2.\n\nSubmit action goes to each form store and each form store makes an ajax request to validate its data.  After the form store have received the response from server it has to send the errors to the MainStore, so the MainStore can show the popup with errors. \nDisadvantage is that we have to synchronize all ajax responses from to know when to switch to next step in the wizard.\nOther disadvantage is that we cant make a logic in sequences of validations. For example execute form A and if (and only if) the validation is OK execute the validation of form B.\n Problem 1:\n\nWhy don't you keep your data/state in a parent component containing both the form and the submit?\n\nProblem 2:\n\nIf I'm correct, flux dictates that you should submit to the server with util classes, not in the stores. The util classes can then send an action (succeeded or failure).\nIf you want to show merged responses, then I think the util class should keep track of requests send and should wait until all request have either failed or succeeded, and then send the action with all results as an argument. Each responsible store can then act on them. The mainstore could check for failed requests and show the popup.\n @tcoopman \n1. because in the UI the submit button is far far away from content frame\n2. Is it ok from architecture point of view to send from store A messages to store B without dispatcher? With dispatcher its not always possible, because sometimes store would send an action while executing another action.\n Sort of violates unidirectional data flow.  If you really had to use dispatcher from store you could setImmediate(dispatchfn)\n\nSent from my iPhone\n\n> On Sep 19, 2014, at 5:35 AM, Michael Tsyganov notifications@github.com wrote:\n> \n> @tcoopman \n> 1. because in the UI the submit button is far far away from content frame\n> \n> Is it ok from architecture point of view to send from store A messages to store B without dispatcher? With dispatcher its not always possible, because sometimes store would send an action while executing another action.\n> \u2014\n> Reply to this email directly or view it on GitHub.\n It feels like you have a pre-existing system state that is sort of side-effect based then you are trying to model that system with a flux architecture and it's not really working.  \n\nSent from my iPhone\n\n> On Sep 19, 2014, at 5:35 AM, Michael Tsyganov notifications@github.com wrote:\n> \n> @tcoopman \n> 1. because in the UI the submit button is far far away from content frame\n> \n> Is it ok from architecture point of view to send from store A messages to store B without dispatcher? With dispatcher its not always possible, because sometimes store would send an action while executing another action.\n> \u2014\n> Reply to this email directly or view it on GitHub.\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  I'd like to discuss best practices about naming actions. Currently I use actions named after what user has done, for example 'FILE_CLICKED', 'ZOOMED', 'VIEW_MODE_BUTTON_CLICKED' etc, is that good convention to name action like that? Only issue I see so far is that I have many *._CLICKED actions. Some people also tend to name actions more like commands, for example 'LOAD_DOCUMENT', 'CHANGE_VIEW_MODE' etc. I'd love your thoughts on that.\n Not a maintainer but I started doing : \n\nsrc/constants/X/Y.json\n\nWhich might look like:\n\n{\n\"FOO\": \"FOO@X/Y\"\n}\n\nSent from my iPhone\n\n> On Sep 18, 2014, at 2:53 PM, Tadeusz W\u00f3jcik notifications@github.com wrote:\n> \n> I'd like to discuss best practices about naming actions. Currently I use actions named after what user has done, for example 'FILE_CLICKED', 'ZOOMED', 'VIEW_MODE_BUTTON_CLICKED' etc, is that good convention to name action like that? Only issue I see so far is that I have many *._CLICKED actions. Some people also tend to name actions more like commands, for example 'LOAD_DOCUMENT', 'CHANGE_VIEW_MODE' etc. I'd love your thoughts on that.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n I would try and not use the event trigger in an action name, for example 'CLICKED'. You could envision using the same code on a mobile app so it would in fact be triggered by a touch event and not a click.\n\nMinor point though. I'd tend toward an imperative, command approach, i.e. PERFORM_THIS_ACTION and not include what triggered the action or how it should be done.\n Great, thanks guys for the feedback! It's all what I wanted to know.\n   bower depends on both npm and node...\n What is the problem with that?\n Well how can something that uses bower not depend on node/npm?\n Just publish it to bower... I don't understand what is so complicated about that. Why do you care whenever bower depends on node/npm? It doesn't matter.\n \"publishing\" to bower actually means we need to keep compiled files in the repo. That might not be the worst thing, but is the exact reason we actually maintain a separate repo with builds for React (https://github.com/facebook/react-bower). It's not as simple as publishing compiled files to npm.\n\n@briandipalma Please take it elsewhere. Yes, I mostly agree that bower is silly for how I build sites, but it serves a slightly different purpose than npm, even if it depends on node/npm. So let's respect the people who use it.\n\n@fisherwebdev I think we could do this. I would probably just say have a `dist` folder and only add the `Flux.js` file there when we tag version updates (bower depends on git tags), rejecting other changes to that file. If you're interested, let's chat and iron it out.\n Thanks for your attention. \n +1\n\nIt'd be great to see this in bower.  My team uses bower for our client code and if absolutely nothing else, this would make it _even easier_ to bring into our projects.\n\nPlus there's the fact that React is in bower, so publishing it there would allow us to keep our dependencies ~~clean~~ cleaner ;)\n Thanks, Bill (:\n @fisherwebdev That's cool. Maybe it would be worth putting that in the docs (readme) as well? :)\n  Hi. I want to discuss the best practice for a situation where data will be lazily fetched and if the way I'm currently doing it is a good way to do it.\n1. view calls `store.getItem(123)`\n2. store realize it haven't loaded item 123\n3. store sets loading = true\n4. store calls `API.LoadItem({id:123})`\n5. store emits that it has changed (due to loading = true)\n6. store returns null\n7. view handles null result\n8. view receives change event and can show user that store is loading\n9. [Async at 4] API.LoadItem fires ajax request. When request is resolved, fires `Actions.ItemLoaded({result: ...})`\n10. store receives callback on ItemLoaded, stores the result, sets loading to false and emit that it has changed.\n11. view receives change event, and updates it state, effetively recalling store.getItem(123).\n\nIs this the proper way to solve such problem? I can see one issue above, which is number 6 & 7, because if `getItem` returns null, the view don't know if the resource doesn't exist or if it's pending. Would it be wise to wrap all get-calls with a status wrapper that could tell if we know for sure that 123 doesn't exist (we already tried ajax request and it failed) or if we just have to fire an request before we have the result.\n Just a few thoughts on this ... the store could hold a record of any item ids waiting for a response and could expose this through a function to views. ie `getItemsBeingFetched`. \n\nThen if this array has any items in it the view could show a loading state, or if it is only concerned with a particular id it would check for that?\n @davetayls yeah, we are having a discussion on #reactjs and the store would create an representation of item 123, such as: {id: 123, status: loading} and clients could then query the store for loading items and we could easily cancel repetitive loading calls for the same item if it's already loading.\n @abergs that sounds like a good idea, my only thought would be when another view requests `allItems` what would you return? I guess all currently known items to exist. Would also be good to think about how this would cater for `delete` or `put` changes?? :+1: \n @fisherwebdev Any chance you could integrate this into one of the examples? You might recall [I asked something very similar on StackOverflow](http://stackoverflow.com/questions/25860642/avoiding-event-chains-with-asynchronous-data-dependencies) regarding this type of flow.\n\nIdeally it would cover the original points from @abergs, but also writing asychronous data using actions and why cascading events are a bad idea.\n The excellent [interview of Ian Obermiller](http://ianobermiller.com/blog/2014/09/15/react-and-flux-interview) also has a lot of helpful tips on this subject.\n @abergs Also check out https://github.com/ianobermiller/nuclearmail\n I've tried implementing the approach outlined in the interview with Ian and the Nuclearmail project. At first avoiding actions for reads make a lot of sense as it simplifies many aspects of an app. \n\nHowever as soon as multiple components attempt to read the same data at the same time the approach becomes quite complex. \n\nConsider two lists of todos where both show the exact same list of todos. List A would attempt to fetch todos from the store, the store calls an API function and stores the list of todos. List B however is attempting to do the exact same thing at the same time, this forces you to not only cache the underlying data but also currently active requests/promises so that you don't perform duplicate requests.\n\nThis becomes increasingly complex when something like pagination is added to the mix. Let's say you again have two paginated lists of todos, but this time list A shows todos 10-20 and B 1-20, obviously there's no point in fetching 10-20 as they will be included in the 1-20 request.\n @fisherwebdev by saying : \n\n> You can just make the async call to the web API directly from the store (or by directly calling a method in a Utils module)\n\ndo you imply that calling the webapi utils from a store dispatchToken is fine ? I just did it and it fixed my issue with Dispatch called during dispatch. However it feels kind of weird doing that in the perspective of that diagram : \n![image](https://cloud.githubusercontent.com/assets/1869/5191535/08692222-74a4-11e4-8482-d7557117b23e.png)\n I played around a bit with this approach today:\n\n_Edit: I realize this has some Reflux specific code but it should be quite similar in \"pure\" Flux_\n\n**Store:**\n\n``` jsx\nvar ProductStore = Reflux.createStore({\n  init() {\n    this.products = {};\n  },\n\n  get(id) {\n    // Attempt to fetch product from cache\n    var product = this.products[id];\n\n    // If no product was found, create a placeholder while we load it\n    if (!product) {\n      product = this.products[id] = {\n        id: id,\n        loading: true\n      };\n\n      // Fetch the product from our API\n      API.get('/products/' + id)\n        .then(res => {\n          this.products[id] = res.data;\n          this.trigger();\n        });\n    }\n\n    // Return either the actual product or the placeholder\n    return product;\n  }\n});\n```\n\n**Component:**\n\n``` jsx\nvar ProductDetailPage = React.createClass({\n  getInitialState() {\n    return this.getStateFromStores();\n  },\n\n  getStateFromStores() {\n    var productId = this.getQuery().productId;\n\n    return {\n      product: ProductStore.get(productId)\n    };\n  },\n\n  onStoreChange() {\n    this.setState(this.getStateFromStores());\n  },\n\n  componentDidMount() {\n    this.listenTo(ProductStore, this.onStoreChange);\n  },\n\n  render() {\n    var product = this.state.product;\n\n    return product.loading ? <Loader /> : <ProductDetails product={product} />;\n  }\n});\n```\n\nI've yet to play around with list type responses yet, but I'm leaning towards wrapping list results in a type of \"query\"-object that includes the list of data along with `hasMore`, `total` etc. for the given query.\n This is really interesting. In my angular apps I tend to work heavily with promises. I essentially have stores that maintain a promise based cache of things, and each method makes the relevant API request if necessary to populate the cache. for example:\n\n``` javascript\nvar itemCache = {}\n\nfunction makeApiRequest(url){\n    return new Promise(function(res, err){\n        //fetch data from server..\n        res(data);\n    });\n}\n\nfunction copy(item){\n    //deep copy item...\n    return angular.copy( item );\n}\n\nfunction getItem(id){\n\n    //promise for item in cache? return a copy of it\n    if(itemCache[id]) {\n        return itemCache[id].then(copy)\n    }\n\n    //else, immediately cache promise for item:\n    var itemPromise = itemCache[id] = makeApiRequest(\"url/for/item/\"+id);\n    return itemPromise;\n}\n\n//common usage (we can act on \"loading\" state easily):\n\nisLoadingData = true;\ngetItem(12).then(function(item){\n     isLoadingData = false \n    /* do something with item */ \n})\n\n\n```\n\nThe things I like about this approach are\n1. Something using this store doesnt care where the data is coming from. It might take a few seconds or it might be instant, but it's handled the same in either case. No need to keep track of loading state. An interested view can do that very easily if it cares, as above.\n2. It's really easy in most cases to ensure that a request for something never happens more than once. The moment there is a promise in the cache, every subsequent request will just be handed that same thing.\n\nHowever, the downsides are that you end up working with promises throughout the system, which means everything becomes asyns. Also, I imagine storing promises is a less economical approach in terms of memory.\n\nIn practise I haven't found these to be a problem (yet), but I am intrigued to see whether a flux style architecture, which eliminates promises and async code from everything but the web API code, can do it better, so I'll be having a go at it for my next project.\n\n@simenbrekken I like your approach. It makes total sense to me to make the XHR request from inside the store, as the store is the thing that knows what exactly it needs to get, and in my mind is responsible for, well, storing whatever data is asked for. Knowing exactly what data it is storing might allow it to be cleverer with regard to making XHR requests as well (eg batching multiple requests for different item details).\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n Is there any update on this issue?\n  related to https://github.com/facebook/flux/issues/58\nMissing constant for action will result in matching undefined within the stores.\nThis simply kills the dispatch process and throws an error if the payload.action is undefined\n  This is more of best practice suggestion then a bug but caused me some headaches today.\n\nThe stores run a switch statement on action.type and match it to your list of constants.\n\nthis is where spelling mistakes / random fuck ups can add up in a rather ugly manner.\n\nif for example you forgot to add a specific constant to your list you will basically be comparing undefined to undefined - which will work just fine.\n\nYou will catch it the next time you make a similar mistake and multiple actions get fired.\n\nHighly suggest verifying action.type exist before the switch statement :) \n\nCan add a pull req for the examples if this makes sense\n `require('flux/lib/invariant')` will work for node & anything using browserify/webpack. This is how it's \"exposed\" with React as well. I don't think it should be exposed at the top level, it's weird (`require('flux').invariant` feels wrong, `invariant` is entirely unrelated). Ultimately we want to get to a point where these shared dependencies are not duplicated and bundled like this and they are usable in a sane way for third parties. But in the mean time, the relative module path works.\n I've had a chat with a few colleagues and it feels like implementing this within the dispatcher would make more sense (otherwise each store fires an error).\n\nAdding a simple action validator method on the Dispatcher dispatch method is rather straight forward and require 0 code change from the users. Does this sound sensible?\n https://github.com/facebook/flux/pull/59 is this ok?\n Since the examples all seem to follow this specific implementation I just assumed this was the intended way to use the actions.\n\nI understand the problem, though if I'm completely honest - I'm not sure that enforcing specific structure / naming conventions are necessary bad.\n\nI've been using Backbone for a good while now, and the biggest hurdle in learning how to use it properly is what I consider to be fake freedom that they offer. It seems amazing at first, but as soon as you start building bigger applications you begin to stumble into quite a few problems.\n\nNow the community did come up with best practices and certain tools / wrappers (like Marionette) were invented but this (in my opinion again) is too little too late - and frameworks like AngularJS just gain huge traction.\n\nNow I'm not suggesting to turn Flux into anything that all encompassing, but I'm also weary of leaving these (and others?) known issues to the individual implementation just for the sake of what seems like edge cases?\n\nObviously just my own opinion here :)\n  This is not really an issue, more of a question, but I couldn't find a place to put it.\n\nAs far as I can see, top level ViewControllers end up pretty much just mirroring stores in their state. Is there any reason to do this as opposed to just pulling data straight from the stores and calling forceUpdate on change? My app has 20 ViewControllers and growing, so it adds up to a ton of boilerplate nearly repeated between every ViewController.\n\nHere is all the boilerplate in the `TodoApp` example, which effectively serves to mirror the `TodoStore` state into `TodoApp`'s state:\n\n``` javascript\nfunction getTodoState() {\n  return {\n    allTodos: TodoStore.getAll(),\n    areAllComplete: TodoStore.areAllComplete()\n  };\n}\nvar TodoApp = React.createClass({\n  getInitialState: function() {\n    return getTodoState();\n  },\n  componentDidMount: function() {\n    TodoStore.addChangeListener(this._onChange);\n  },\n  componentWillUnmount: function() {\n    TodoStore.removeChangeListener(this._onChange);\n  },\n  _onChange: function() {\n    this.setState(getTodoState());\n  }\n});\n\nmodule.exports = TodoApp;\n```\n I suppose I could make a mixin to eliminate some of the boilerplate, but this doesn't really solve the underlying problem: now, instead of storing state just in one place or another (in the component or store state), it's effectively stored in two places, which makes it a pretty terrible state mess.\n Digging a little deeper \u2013\u00a0sometimes parts of component state is not mirrored in stores \u2013 in the chat app, the message composer stores the message while it's being composed in local state, but when it's saved, it gets moved into a store. Maybe I'm not seeing something here \u2013\u00a0but it feels very inconsistent to me, and again, spreading state out over more places than necessary. Thoughts?\n Yeah, the name makes total sense... I think I must have just forgotten\u00a0\u2013 at least I got that the name had \"controller\" and \"view\" in it :-)\n\nVery interesting on the distinction between shared state and individual state. Makes total sense. Maybe this is a silly question, but would it make sense for a component which manages its own state pass that state down to other components through their props, and listen via some kind of change listeners? In that case, why not have controller-views encapsulate the state entirely, without using stores?\n\nAlso interesting thought on using this.state as an effective shortcut to the store. I guess another part of my concern is mixing \"store-state\" with \"component-state\" in some components gets messy as well. I've managed this by having controller-views hold all their state in the store, even when it's not necessarily shared state. Does this make sense to do?\n Thanks for the answer @fisherwebdev \n\n@dmitrig01 If you need to share state between react components flux recommends using stores, I see controller-views as views that layout other views and pass store data into them. Not as places to try and keep consistent models as you will be mingling concerns (the view and the domain model) if you were to do that.\n\nState in stores doesn't have to be shared so I don't see an issue with storing everything in stores.\n\nYour problem might be that your app isn't quite complex enough to require using flux, flux is something I would use for medium to high complexity applications/components.\n @fisherwebdev still curious on the best practice here \u2013 not sure about the best practice in terms of mixing \"store-state\" with individual/component-state in the component's state variable. Isn't it a little messy to do?\n\nAs a concrete example, I have a controller-view which has three pie charts which have the same keys but different values. When you hover over a slice on one, the same highlights on all three. The data contained by the charts would be considered \"shared state\", and resides in the store, but hover data seems to be state local to the controller-view. However, the component's state variable now contains aliased state from the store as well as actual/local state, which feels very messy. Does this make sense?\n Hover state does not seem local to the controller-view, that should be state that is local to the child view components, you hover over them not the view controller. The view controller just passes what is hover over into the child views when it's notified of a change by the store it listens to.\n\nYou shouldn't store hover state in the child views either then as they should have that value passed in to them from their parent view controller, all they do is call action creators which will eventually be handled by the store which then notifies the view controller which then...\n Interesting, this is what I got from what you were saying:\n1. Store the hovered state in a store\n2. Pie charts have an onHover callback\n3. The parent controller-view attaches an onHover function to its child pie charts that set data in the store (well, fires an action that sets data, but w/e)\n4. Have the parent controller-view pass in the store data to the when the store changes \n\nIs that fair, or are you thinking something more along the lines of the pie chart components are actually their own controller-views? That feels really ugly to me.\n\nIn this instance, it seems somewhat pointless to store hover data in the store, as it's not shared state \u2013 it's only used in one instance of component, the controller-view\n yes \u2013 thanks\n  The npm package works very well now, and I think the actual dispatcher\ncode in the flux package should be a good enough example for people who\nwould want to implement their own dispatchers.\n\nThis commit removes the duplicate Dispatcher and dependent invariant\ncode in favor of using the npm packages.\n Seems reasonable to me, but I'll let @fisherwebdev decide.\n :thumbsup: \n  Per this change:\nhttps://github.com/justin808/flux/commit/643ca19b68ec63170648e9f5cba2456aba23a92c\n\nI can't figure out why `_onChange` is not called in the todo example after return is pressed, yet it is called in the chat example.\n\nI'm guessing there must be some subtle difference.\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  2 minor changes:\n1. Enable react chrome dev tools.\n2. Smaller methods.\n @zpao @jingc I think the PR might be OK now. Net result is:\n1. Broke out a couple of methods of render to reduce some very long methods.\n2. Expose React on window for the react-devtools\n I stand by my original comments about not moving things out of `render` but @fisherwebdev has the final say. It's not really adding anything here and it's important to remember this is example code so making it perfectly clean and production ready isn't the goal. The devtools change should happen though, preferably in a new PR on its own so we don't have to worry about the other bits here.\n @zpao I did as you requested with a separate PR for enabling the react-devtools: https://github.com/facebook/flux/pull/66\n  I've got the React tutorial running with ES6 with Webpack: https://github.com/justin808/react-tutorial-hot/tree/es6.\n\nThis seems way better than watchify.\n\n@petehunt turned me to webpack and it's awesome. \n\nI'd be happy to submit a PR for the two example programs if this is useful.\n As part of the PR, I'd like to update the dispatcher to the newer ES6 version.\n I think #54 is going to update to the latest dispatcher code. I think we should use npm and not force anything ES6 just because we can.\n\nI don't feel strongly about webpack (sure it has some upsides) so I'll let @fisherwebdev chime in.\n @petehunt turned me on to webpack. I cannot comment on the alternative, as I've mostly used WebPack. I really enjoy how WebPack updates the client side JavaScript code nearly instantly, and these updates include the rendering, and often the models. Sometimes I do refresh the browser, but more often, I don't. The configuration is also very easy for a newbie. In this repo, https://github.com/justin808/react-webpack-rails-tutorial, inside of the webpack directory, the webpack dev server handles the code there. I wrote this up here: http://www.railsonmaui.com/blog/2014/10/02/integrating-webpack-and-the-es6-transpiler-into-an-existing-rails-project/. \n @fisherwebdev Hot reload (whether via webpack, browsersync.io, or other library) makes exploratory development -- AKA, exactly what an interested React/Flux beginner will want to do -- significantly easier.\n @pikeas given the issues cited here (for example) http://mattdesl.svbtle.com/browserify-vs-webpack\n\nWhy would webpack be any easier than currently using browserify?  It certainly seems less scalable.\n\nLooking at the documentation for webpack the configuration is almost more complex than require.js-- which feels like a step back, but the killer issue is that the overloading of require calls with loader directives makes webpack modules unrunnable in node:\n\nrequire('json!./foo.json')\n\nThat's hard to see as a win.\n @sterpe Your points are fair. Although I personally prefer webpack, I'm advocating for hot reloading in some capacity, regardless of implementation details.\n\nRegarding `require('json!./foo.json')`, loaders can be specified in the webpack config file, so that `require` stays clean: http://webpack.github.io/docs/loaders.html#loaders-by-config\n Sure but there we get into that configuration complexity to do something that browserify does with none or very little.  Just seems weird to me.\n\nReally do we need to hot load these demos?  Honestly how much time do people spend playing with them before they put them away and start building something real?\n  Added a video page to the documentation section. Page contains videos of the presentations given by Jing Chen.\n  I'd like to get some feedback if these changes are helpful.\n\nIn particular, I wanted to have the ThreadStore listen for new messages created, and then pull the last message from the MessageStore. However, due to some circular dependency issue, I could not get that work. The code that doesn't work is commented out in ThreadStore.\n\nI'd also like to know if having the MessageStore send a message to update the ThreadStore directly is acceptable. Clearly, the MessageStore is dependent on the ThreadStore. I'm guessing that having this dependency only go in one direction was critical.\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n To justify having separate handlers for _onChange and _onKeyDown, I added support for shift-enter.\n @fisherwebdev What do you think if the suggested changes here? Anything I should change to get this accepted?\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  Is there any reason why the dispatcher can't handle a dispatch in the middle of a dispatch?\n\nI can't be sure, that this will not happen. I have a lot of async API calls that will dispatch events simultaneously and i'm running into this error.\n\nAm i doing s.th. wrong? Is there any reason why you should not have a queue in the dispatcher?\n Yeah, had the same concern, I wrote a pure async dispatcher (it's pretty beta) but supports recursive dispatching in the correct order, while ensuring that there are no browser redraws until all affected views have updated.\n\nYou can check it out here, maybe it would work for you too.\n\nhttps://www.npmjs.org/package/quantum-flux\n thanks for your replies! i'm excited to see the action queue at the stores - i'll have my own dispatching queue for now. thank you guys. \n @fisherwebdev Thanks for your reply. Let's imagine I have multiple instances of the same component, which must fire an action inside componentDidMount.  All of those components are rendered from an array of data objects ( simultaneously ). How should I implement this? I am using Alt, but their docs say they use your dispatcher, so I figured I should ask here as well. Thanks  Minor change...\nIn the chat example, we don't have to refill store with sample messages, if we already have some data in localStorage...\nExisting data is already pulled by ChatWebAPIUtils...\n  `_prefix is not defined`\n\nI'm actually experiencing this issue because we're using react-router which in turn uses Flux. It's been referenced over in Webpack's issues, but it doesn't appear to be a Webpack issue:\n\nhttps://github.com/webpack/webpack/issues/417\nhttp://jsfiddle.net/rokkkjcs/1/\n Does it makes sense to remove the \"use strict' requirement there? Is that the issue?\n I'm working around this by using `jsx?harmony` Webpack loader and original ES6 `Dispatcher.js` file with my own `'use strict'` added at the very top.\n Just ran into this as well...\n @fisherwebdev For me, putting `'use strict'` at the top of `Dispatcher.js` helps: it no longer generates `'use strict'` inside functions, and thus doesn't break `eval` in Chrome.\n We're not going to be changing the class transforms which is adding the inner `'use strict'`s (in `jstransform` via `react-tools`) so I think doing what @gaearon says and putting `'use strict'` at the top of the file is the right move.\n :+1: Thanks!\n  So I can't get a corect bundle.js. Maybe the reason is Windows 8.1?\n\nnpm ERR! todomvc-flux@0.0.1 start: `STATIC_ROOT=./static watchify -o js/bundle.\ns -v -d .`\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the todomvc-flux@0.0.1 start script.\nnpm ERR! This is most likely a problem with the todomvc-flux package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     STATIC_ROOT=./static watchify -o js/bundle.js -v -d .\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls todomvc-flux\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Windows_NT 6.2.9200\nnpm ERR! command \"d:\\Program Files\\nodejs\\node.exe\" \"d:\\Program Files\\node\ns\\node_modules\\npm\\bin\\npm-cli.js\" \"start\"\nnpm ERR! cwd d:\\web_try\\flux\\examples\\flux-todomvc\nnpm ERR! node -v v0.10.31\nnpm ERR! npm -v 1.4.23\nnpm ERR! code ELIFECYCLE\nnpm ERR!\nnpm ERR! Additional logging details can be found in:\nnpm ERR!     d:\\web_try\\flux\\examples\\flux-todomvc\\npm-debug.log\nnpm ERR! not ok code 0\n This is a Windows problem (can't set env variables via command like this), so this is basically a dupe of #22 and should get fixed by dropping the use of statics - #25.\n  I've noticed that both child components (Sections) are listening to the stores directly while saving the data as state (and not props). This seems a bit counter intuitive to me because:\n1. I would have expected the stores to be the only source of \"truth\", by storing their data as state in multiple components I can theoretically have colliding data.\n2. I also assumed that stores will be connected to the top most component and passed down as props.\n\nIs this just an oversight? Or am I missing something here?\n I'm outside the React/Flux team but this is my understanding of things, it might be wrong.\n\n1) Stores are the source of truth, they are event emitters and are listened to by the components. The `setState` call is because React has no observables so it must be told when the component needs to be rendered, that data would almost always come from Stores so in reality it's not state that the React components would mutate, they simply rendered it to the screen.\n\n2) Yes the fact Stores etc are all Singletons is a problem for us in our particular use of Flux. We have solved it by using a factory to return instances of Stores etc. We might write a blog post about it soon.\n @briandipalma \n1. React does have a setProps method which re-renders the component. However it can only be called by top level components. They specifically discourage you from using it (or so it seems) but they do suggest in the docs that only one source of truth should exist in the app - aka components should not duplicate it. I just feel like I'm missing something here :)\n2. I'd be very interested in reading that - do drop a line if / when you do\n 1) Props are immutable and passed in from your parent, state is mutable and local to the component. This aids in pinpointing bugs. I think if you relied on your parent feeding all data from Stores into you as props you would be asking React to do too much unnecessary work. Anyway the only ways that parents could trigger a render of them self is either via `setState` or a force update. The Stores are the source of truth, you can't ask your React components for that data, you can only ask the Stores.\n\n2) Will do. \n Thanks @fisherwebdev @briandipalma was somewhat confused about this. \n\nfyi - http://facebook.github.io/react/tips/props-in-getInitialState-as-anti-pattern.html can be interpreted as saying you should use setProps when getting data from stores.\n\nClosing this for now\n    Clarifies the description of Flux functionality in the README. The following text on lines 41 - 43 is difficult to understand:\n\nBEFORE: \"When a user interacts with a React view, the view propagates an action through a central dispatcher, to the various stores that hold the application's data and business logic, which updates all of the views that are affected.\"\n\nAFTER: \"When a user interacts with a React view, the view propagates an action through a central dispatcher to the various stores that hold the application's data and business logic, updating all affected views.\"\n\nIn the original case, the \"which\" in \"which updates all of the views that are affected\" refers to an ambiguous subject (could be the React view, the central dispatcher, the stores or the data and business logic). I would like to change this sentence so that the gerund implies that propagating an action from the view down to the stores is causing all affected views to be updated.\n\nI had some trouble initially understanding what this sentence was trying to say and I think my change might relieve some possible confusion. I hope this is helpful - I was trying to explain Flux to my class and we spent some time parsing out the README.\n To be honest, I feel like the change leaves the issue of who or what has the responsibility for updating the views with changes just as ambiguous.  The passivity of the wording  presents view updates merely as a side effect of the flux flow.  I think the original issue can be better fixed by properly conjugating 'update' so that it binds to the stores as the actors... ie..  '[stores] which update all of the views...'\n I agree, I think that makes it much more clear. I had trouble understanding what was ultimately affecting the views so I think this is a good change.\n In your example it sounds like the dispatcher is causing an update of the views by propagating the view action. Is that what is happening?\n @fisherwebdev, right, I guess the point I was trying to make is that a view\nhas attached a listener to the store which is an instance of an event\nemitter of some type,  and that is how it is informed about the change in\nthe store's data.\n\nOn Fri, Aug 22, 2014 at 9:23 AM, Etienne Tripier notifications@github.com\nwrote:\n\n> In your example it sounds like the dispatcher is causing an update of the\n> views by propagating the view action. Is that what is happening?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/flux/pull/38#issuecomment-53083691.\n @fisherwebdev Thanks for the explanation. How do you feel about the following clarification?\n\n\"When a user interacts with a React view, the view propagates an action through a central dispatcher. The dispatcher propagates this action to the various stores that hold the application's data and business logic; these stores then trigger an update event on the views.\"\n Just throwin' it out there....how about a more structured sequence of\nevents along with some basic examples:\n-  In response to user interaction, React components fire a Flux Action (optionally sending data to the action)\n  - _Example: submitting the contents of a form*_\n- The Flux Action then acts upon the data it received\n  - _Example: sending the data to a web service for persistence*_\n- The Flux Action then sends a message with a payload to the dispatcher.\n  - _Example: payload is the response from the web service*_\n- The dispatcher broadcasts the message with its payload to all Flux\n  Stores.\n- Each Flux store inspects the payload and decides whether or not, or how to update its state.\n  - _Example: the store has an opportunity to ignore, filter or aggregate the payload*_\n- React components will update their state if the stores they are listening to are one of the stores that chose to update its state.\n- React components that updated their state will re-render\n\nOn Thu, Aug 28, 2014 at 1:29 PM, Etienne Tripier notifications@github.com\nwrote:\n\n> @fisherwebdev https://github.com/fisherwebdev Thanks for the\n> explanation. How do you feel about the following clarification?\n> \n> \"When a user interacts with a React view, the view propagates an action\n> through a central dispatcher. The dispatcher propagates this action to the\n> various stores that hold the application's data and business logic; these\n> stores then trigger an update event on the views.\"\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/flux/pull/38#issuecomment-53782797.\n Maybe we're focusing on the wrong actor?  Maybe the final sentence should be something like:\n\n\"In response to changes in application state Views then query the stores for the new data (state) and re-render themselves as appropriate.\"\n\nMaybe avoid the implication that a store is an actor on a view.\n\nSent from my iPhone\n\n> On Aug 28, 2014, at 10:08 PM, Bill Fisher notifications@github.com wrote:\n> \n> @etripier We're very close, I think. Sorry for the churn, but this is a very important sentence in the docs, so I think it's worth the iteration.\n> \n> I like what you've done with the first part. The very last thing about the store-view communication is the stumbling block, I think. I don't think we need to get into the details here so much. I think the important thing is to say is that data flows from store to view, without saying anything misleading.\n> \n> Maybe:\n> \n> \"When a user interacts with a React view, the view propagates an action through a central dispatcher. The dispatcher propagates this action to the various stores that hold the application's data and business logic. The stores then cause the views to update themselves, based on their new data.\"\n> \n> Not sure if this is getting too long-winded. I'd prefer to simplify, if possible.\n> \n> @plaxdan This is intro stuff. Needs to be light, at a very high level, and not confusing at all. It's not the place to detail the mechanics.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n @plaxdan I really appreciate the breakdown of the process, that's actually exactly what I needed, but I understand the need to provide a simplified explanation.\n\n@fisherwebdev When you say, \"The stores then cause the views to update themselves, based on their new data,\" does that mean that changes to the stores' data triggers an event listener in the views? I'm interested particularly in what \"cause the views\" means.\n\nThanks again for taking the time to walk me through this.\n @etripier The [`StoreWatchMixin`](https://github.com/BinaryMuse/fluxxor/blob/3f0eb00a89835f871177ead589faa44684864aa0/lib/store_watch_mixin.js) from Fluxxor demonstrates this nicely. The concepts to understand are:\n- stores are [Node event emitters](http://nodejs.org/api/events.html) (thought they don't have to be, this is just how Fluxxor implemented their stores)\n- therefore, other objects can listen for events that stores choose to emit\n- when the store receives a message from the dispatcher, it may or may not decide to update its state. If it _does_ update its state, then, because it is a node event emitter, it can emit a 'change' event\n- the Fluxxor `StoreWatchMixin` does the job of [signing the React component up to listen](https://github.com/BinaryMuse/fluxxor/blob/master/lib/store_watch_mixin.js#L9) to the event emmitter 'change' events on certain stores\n- the mixin also provides [automatic setting of the React component state](https://github.com/BinaryMuse/fluxxor/blob/master/lib/store_watch_mixin.js#L20), from the store state when such an event occurs\n\nSo the glue between your action and your store is the dispatcher, but the glue between your store and your React components are Node event emitters (at least that's what's used in Fluxxor and a couple of other implementations of Flux I've seen).\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  This is related to #31. The code in the [Flux Todo MVC](https://github.com/facebook/flux/tree/master/examples/flux-todomvc) has a [different dispatcher](https://github.com/facebook/flux/blob/master/examples/flux-todomvc/js/dispatcher/Dispatcher.js) than the [tutorial](http://facebook.github.io/flux/docs/todo-list.html#content) on the site. \n\nThis is pretty confusing because I had the tutorial open side by side with the code.\n\nI would be happy to send a PR to update the site but I'm not sure if adding the new dispatcher is the right decision since the previous dispatcher seems shorter and simpler.\n   Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n  Feels cleaner this way to me.\n Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n okay then, no worries. But can this be considered as a possible pattern in user apps or is there something bad in particular with the idea?\n\n> When this gets minified, however, these function names will no longer work as you expect them to, I believe.\n\nthat's wrong btw\n  More recent versions of reactify (which depend on browserify and\nwatchify) support ES6 transforms via package.json. This makes it easy\nto use ES6 features like arrow functions without much additional code.\n\nI upgraded the versions references in both the todo and chat examples,\nand modified the chat example to use ES6 and arrow functions as an\nexample.\n OK, nuked this this call and tested the code. Seems to work!\n  Just wondering what happens when `RECEIVE_RAW_CREATED_MESSAGE` was dispatched, currently in the code base it was _not_ handled anywhere.\n\nAlso, what if `ChatWebAPIUtils.createMessage()` received error from the XHR call to server, what happens next? Should the data already in Stores and Views be rolled back?\n Assuming you're using Browserify, is the Store handling that action actually being `require`'d by a component or anything? \n Thanks, please feel free to close this issue.\n FWIW, even if you only implement the happy path acceptance of the \"confirmed\" message I think it would    make this example feel more complete. Right now the complete absence of any handler for this action led me to hunt around to see if I was missing something.\n\nA comment about the `RECEIVE_RAW_CREATED_MESSAGE_FAILURE` being left as an exercise for the reader would be fine but I don't think closing the loop of accepting the confirmed message from the \"server\" would over complicate this.\n\nI could take care of that for you with a PR but I have another [related question](https://groups.google.com/forum/#!topic/reactjs/t7q_SW-77uY) I posted on the google group where I need some clarification.\n +1\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  Seems there is a newer version in /src/dispatcher.js, but an older one was used in flux-chat example.\n\nProbably this file should be symlinked from /src to the example dir?\n Yeah I found out about the `class` keyword after a while and realized it won't work without ES6 support.\n  Are there any plans to create a flux inspector?  \n\nSomething analogous to the [React Dev tools](https://github.com/facebook/react-devtools) or [Ember Inspector](https://github.com/emberjs/ember-inspector).\n\nI imagine any of these would be useful:   \n1.  List of all registered actions, with the ability to trigger them\n2.  For a given action, show a list of stores that subscribe to it\n3.  List of all stores and their current data\n4.  For a given store, show a list of subscribed React Views.  \n5.  Show dependency tree of waitFor()'s\n\nThere are probably plenty of other snazzy things it could do that would help with prototyping and debugging.  \n   Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n  The current flux-chat example has a bug that means it doesn't update the lastMessage object in the ThreadStore. Trying to reconcile this by waiting for the MessageStore to complete (and then request the message list from the store) creates a circular dependency between MessageStore and ThreadStore.\n\nI've ended up fixing this by doing the following:\n- Making a shared \"DispatchTokens\" object so one store can wait for another without requiring it as a dependency\n- Adding the full message object to payload.action (which otherwise only stores the text of the message)\n- Having the ThreadStore listen to the CREATE_MESSAGE action, wait for the MessageStore to complete, and updating lastMessage with the message object on the payload.\n\nI'm curious if modifying the payload is the appropriate way of fixing this kind of issue. It seems like a viable option given that the waitFor guarantees that the message callback has completed, but does require a different way of storing dispatch tokens.\n\nThe other solution I had was to simply require MessageStore inside the ThreadStore callback instead of at the top of the file, but this felt a bit hacky.\n\nIs mutating the payload considered an acceptable way of resolving this between stores, or is there a more 'Fluxy' way of doing things?\n Here's my attempt to resolve this.\n\nhttps://github.com/facebook/flux/pull/48\n Is there any concrete advice now on how to handle the circular dependency problem between stores?\n Hi, this issue is rather old but I'd also like to hear more on this. There are problems that contain circular dependencies stemming directly from their nature. There is no way around. How should we face them? \n\nTo give an example we can talk about, let's consider a game with two stores:\n- StateStore that contains the current game state, i. e. _playing_, _paused_, _over_ and responds to actions like **PAUSE** or **RESUME**.\n- CharacterStore that contains the current position of the game character (i. e. coordinates) and responds to actions like **MOVE_LEFT**, **MOVE_RIGHT** etc.\n\nWhen the game is paused, the CharacterStore shouldn't respond to any actions so it depends on the StateStore. But when the **MOVE_LEFT** action is dispatched and the game character falls into a trap (which is handled by the CharacterStore), the game state should change to _over_, so clearly the StateStore depends on the CharacterStore here.\n\nThe order in which the actions are handled is not a problem here. So I could solve this by instantiating both stores and exchanging references between them so they could both arbitrarily read from each other (something like the shared object for the dispatcher tokens, except it wouldn't be just the tokens, it would be the actual instances of stores). That would solve it... but is it right?\n\nThe other way would be to merge those stores into one. That would be logical. However, in a more complex example (with more stores representing the game situation) it could mean collapsing a huge app into a single store. There would not be much of Flux left.\n\nIs there any strong opinion on this? Possibly my whole thinking is wrong. It's probably naive to expect Flux to work in every situation.\n\n(I posted similar question on [StackOverflow](http://stackoverflow.com/questions/30834806/what-if-two-flux-stores-have-to-depend-on-each-other) as well)\n Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n  It's not clear if `statics` is even being used, but even if it is, it's probably overkill in these examples and is causing confusion/issues (#22).\n  The `PayloadSources` constants are already defined, but they weren't being used. Though nothing uses the `sources` property in the example, it's probably best to reference the constants directly from `ChatConstants` to keep its use consistent.\n  Reduce noise by replacing the repeated `&&` chain with use of `set -e`,\nwhich will cause the script to bail on the first command that exits with\na non-zero exit code.\n This is an awesome trick!\n\n## \n\nChristopher \"vjeux\" Chedeau\nFacebook Engineer\nhttp://blog.vjeux.com/\n\n> On Aug 22, 2014, at 6:13 PM, Bill Fisher notifications@github.com wrote:\n> \n> Merged #23.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n  Hi,\n\nI was trying to run the flux-todomvc example and followed the instructions but it didn't work. I found that `reactify` requires  `/ * * @jsx React.DOM  */` to be the first line in any .jsx/.js files. Once I added the directive to the top of all the components I was able to get it to work.\n\nIs this just me?\n\nFrank\n I was not able to get it work even with this modification + it throws me \"'STATIC_ROOT' is not recognized as an internal or external command, operable program or batch file.\" (I'm using Win7).\n @fisherwebdev thanks a lot. If you need any information or help with investigating, just let me know.\n I just tried last version of todo example and the only thing that didn't work is the STATIC_ROOT variable in package.json, because you can't define variables in Windows this way.\nSo, if I change it to \"set STATIC_ROOT=./static & watchify -o js/bundle.js -v -d .\", it works as expected.\nBtw, is STATIC_ROOT really needed?\n  I think flux is a great architecture for building web appliactions, i'm very interested in it\n\nI read the dispatcher soucre code but i can't understand the waitFor method, it's not asynchronous but synchronous.\n\nIt makes me confused\uff0cis there any store's callback could include some ajax call to server and make a asynchronous example of the waitFor method?\n **I'm not a maintainer**, but as far as my understanding of flux goes, server side communication should happen in actions. The result of a server side communication should update the stores, to reflect the server response. Stores should (at least for the most part) be able to update synchronously.\n @bogdan-dumitru, this is my understanding too, and I can buy the logic of that, but I also wonder whether the inability to get any browser repaints while stores are digesting becomes problematic as a flux architecture application grows?\n\n@Maintainers, any thoughts on this?\n  It would be great if the examples included a few (Jest) test cases. Preferably test cases that deal with both components and stores.\n Yeah, I was thinking about the same :+1: \n :+1:\n Probably too specific for a blog post, but one thing I've found tricky/messy is testing Store functions that don't emit change events. And for those that do, making Jest wait until the action has processed to verify behavior. \n @fisherwebdev I think it's perfect topic for a blog post and immutable data also sounds great!\n :+1: \n :+1: :-)\n :+1: \n :+1: \n :+1: \n :+1: \n :+1: \n :+1: \n :+1:\n @fisherwebdev thanks bill! probably can close this issue tho.\n @fisherwebdev Did you add docs on how to run the tests, and should they be passing? I just pulled the lastest and get errors running `npm test` from the example directories. Should I open a new issue for this?\n @justin808 this is somewhat related to #68 regarding documenting the build process for the examples. For running the examples test one needs to actually go into the example's folder, install dependencies and then run the tests  (e.g,`cd examples/flux-chat && npm install && npm test && cd ...`). This is needed as the intention was (i suspect) to not agglomerate unrelated dependencies (which is the expected).\n  Is there any reason this project uses make? Could it be replaced with something that npm could install?\n Because `make` was super easy for me to get up and running in a few minutes :) Make also supports lots of things out of the box (like importantly, detecting file modifications to determine if a task needs to be run). It took 16 lines to do everything I needed.\n\nI know `make` isn't great for Windows, but I actually really like the simplicity we have here now. Gulp or Grunt are probably fine too.\n There was also a Python dependency I think so I gave up and built it in Linux, something like Gulp would be nice so it could be built using the one tool chain.\n There shouldn't be a python dependency... `mkdir`, `sed`, `rm` are the only unix things needed. The other pieces are installed via npm and shouldn't have their own python dependencies.\n What about the other npm packages...do they have native code they compile? I might be misremembering this part! I might try and building again on my Windows machine when I'm on it next.\n I'm not sure about the dependency tree. Something might need contextify which might need to build binary pieces which might need python. But that's going to be totally outside our control. I would expect Windows+node+npm to handle that however it needs.\n Is there any reason not to use CMake if you're on Windows? Make is a relatively common build dependency.\n I didn't know about CMake. I wouldn't be surprised if that's the case for many people looking at this repo.\n Thanks!\n Thanks!\n   I have already signed that before. Thanks! Just updated my information anyway, I think my Github username had been changed since.\n  corresponding #10\n These html files are generated automatically from the markdown in the master branch; there's no need to update it separately.\n I don't think you forgot, this is just against the gh-pages branch :)\n    E.g. is the code here something you intend for others to use or is just for learning purposes?\n This code is usable and we'll publish this to npm sometime soonish. We weren't quite prepared for the attention this has gotten today :)\n That's because you haven't experienced the HUNGER! :D j/k... kinda.\n\nOk, will install manually for now.\n Or you could try using [reflux](https://github.com/spoike/reflux) instead, it requires less boilerplate code. It's available on npm and bower. ;-)\n I'm all for competition :) Checking it out.\n +1. Installing manually for now but looking forward to this issue being resolved :smile: \n Temporary until in NPM, but if it helps anyone: \n\nhttps://github.com/ndreckshage/flux\nhttps://github.com/ndreckshage/flux/compare/facebook:master...master\n\npackage.json\n\n``` json\n\"dependencies\": {\n    \"flux\": \"git://github.com/ndreckshage/flux.git#master\"\n}\n```\n\n``` javascript\nrequire('flux').Dispatcher;\n```\n\nthen no build necessary\n Today I published an [npm package called `react-dispatcher`](https://www.npmjs.org/package/react-dispatcher). It's an npm-installable fork of this repo with the top-level export being set to the `Dispatcher` object. No other modifications have been (or will be) made to the source. All changes will be pulled from upstream.\n\nJust `npm install react-dispatcher` and then\n\n``` js\nvar Dispatcher = require('react-dispatcher');\n```\n\n@zpao You guys are more than welcome to that package name if you'd like to use it. For now, it just makes it easier for us to use the dispatcher :)\n +1\n +1, lack of npm module is an annoying barrier to entry.\n\n@mjackson thanks for this, much appreciated\n \ud83c\udf89\n @fisherwebdev :smiley: nice work! I'll get rid of the `react-dispatcher` package.\n :+1: \n Any plans on adding the dispatcher as standalone package?\n @rafayepes Do you mean separately from the `flux` package? What advantage would there be?\n  Thank you for writing this document. I'm just learning Flux and this seemed to be very beneficial.\n\nI changed the final example because I think that `getFlightPriceStore` would need to wait for the `CityStore.dispatchToken` for either action type.\n  We just shouldn't. It should remain logo-less and not reuse anything. It hurts branding and identity, even if it's a different color.\n\nJest logo was surely accidental. React logo was not.\n Can you get this merged and up on the site @vjeux?\n (+1)\n And gone - a5e22953f2342fef562d16ef60c09fc0fcac1b7b\n\nbtw @vjeux, you must have an old React you're using to generate the site (npm cached maybe) - we don't escape slashes anymore (thus the churn in my rev).\n", "text_all_count": 71583, "text_word_token": ["This", "seems", "like", "the", "best", "practice", "to", "support", "a", "beta", "version", "and", "the", "official", "NUMBER", "We", "can", "optionally", "remove", "this", "later", "when", "the", "full", "version", "be", "release", "NUMBER", "Fixes", "NUMBER", "Currently", "this", "doesn", "t", "work", "with", "React", "NUMBER", "beta", "NUMBER", "What", "be", "the", "timeline", "looking", "like", "for", "support", "React", "NUMBER", "It", "might", "be", "as", "simple", "as", "change", "your", "peerDependencies", "peerDependencies", "react", "NUMBER", "That", "could", "change", "to", "NUMBER", "NUMBER", "or", "NUMBER", "I", "don", "t", "know", "if", "this", "will", "have", "knock", "on", "effect", "though", "NUMBER", "Created", "a", "pull", "request", "for", "this", "NUMBER", "NUMBER", "Yes", "exactly", "NUMBER", "Any", "idea", "when", "the", "next", "release", "of", "Flux", "might", "go", "out", "LINK", "utils", "NUMBER", "html", "There", "be", "four", "main", "classes", "expose", "in", "Flux", "Utils", "On", "github", "it", "says", "three", "but", "on", "production", "page", "it", "still", "says", "four", "kyldvs", "thanks", "for", "the", "info", "I", "agree", "it", "s", "low", "priority", "NUMBER", "glad", "it", "be", "be", "tracked", "now", "NUMBER", "With", "flow", "NUMBER", "flux", "NUMBER", "How", "to", "reproduce", "bash", "create", "react", "app", "fluxflow", "cd", "fluxflow", "yarn", "add", "flow", "flux", "flow", "types", "flux", "bin", "flow", "init", "flow", "Output", "node_modules", "flux", "lib", "FluxContainer", "NUMBER", "js", "NUMBER", "flow", "NUMBER", "NUMBER", "import", "type", "FluxStore", "from", "FluxStore", "FluxStore", "NUMBER", "Required", "module", "not", "find", "node_modules", "flux", "lib", "FluxContainer", "NUMBER", "js", "NUMBER", "flow", "NUMBER", "NUMBER", "const", "FluxContainerSubscriptions", "require", "FluxContainerSubscriptions", "FluxContainerSubscriptions", "NUMBER", "Required", "module", "not", "find", "node_modules", "flux", "lib", "FluxContainer", "NUMBER", "js", "NUMBER", "flow", "NUMBER", "NUMBER", "const", "shallowEqual", "require", "shallowEqual", "shallowEqual", "NUMBER", "Required", "module", "not", "find", "node_modules", "flux", "lib", "FluxContainerSubscriptions", "NUMBER", "js", "NUMBER", "flow", "NUMBER", "NUMBER", "import", "type", "FluxStore", "from", "FluxStore", "FluxStore", "NUMBER", "Required", "module", "not", "find", "node_modules", "flux", "lib", "FluxContainerSubscriptions", "NUMBER", "js", "NUMBER", "flow", "NUMBER", "NUMBER", "const", "FluxStoreGroup", "require", "FluxStoreGroup", "FluxStoreGroup", "NUMBER", "Required", "module", "not", "find", "node_modules", "flux", "lib", "FluxContainerSubscriptions", "NUMBER", "js", "NUMBER", "flow", "NUMBER", "NUMBER", "if", "__DEV__", "identifier", "__DEV__", "NUMBER", "Could", "not", "resolve", "name", "node_modules", "flux", "lib", "FluxMixinLegacy", "NUMBER", "js", "NUMBER", "flow", "NUMBER", "NUMBER", "import", "type", "FluxStore", "from", "FluxStore", "FluxStore", "NUMBER", "Required", "module", "not", "find", "node_modules", "flux", "lib", "FluxMixinLegacy", "NUMBER", "js", "NUMBER", "flow", "NUMBER", "NUMBER", "var", "FluxStoreGroup", "require", "FluxStoreGroup", "FluxStoreGroup", "NUMBER", "Required", "module", "not", "find", "node_modules", "flux", "lib", "FluxReduceStore", "NUMBER", "js", "NUMBER", "flow", "NUMBER", "NUMBER", "import", "type", "Dispatcher", "from", "Dispatcher", "Dispatcher", "NUMBER", "Required", "module", "not", "find", "node_modules", "flux", "lib", "FluxReduceStore", "NUMBER", "js", "NUMBER", "flow", "NUMBER", "NUMBER", "const", "FluxStore", "require", "FluxStore", "FluxStore", "NUMBER", "Required", "module", "not", "find", "node_modules", "flux", "lib", "FluxReduceStore", "NUMBER", "js", "NUMBER", "flow", "NUMBER", "NUMBER", "const", "abstractMethod", "require", "abstractMethod", "abstractMethod", "NUMBER", "Required", "module", "not", "find", "node_modules", "flux", "lib", "FluxStore", "NUMBER", "js", "NUMBER", "flow", "NUMBER", "NUMBER", "import", "type", "Dispatcher", "from", "Dispatcher", "Dispatcher", "NUMBER", "Required", "module", "not", "find", "node_modules", "flux", "lib", "FluxStoreGroup", "NUMBER", "js", "NUMBER", "flow", "NUMBER", "NUMBER", "import", "type", "Dispatcher", "from", "Dispatcher", "Dispatcher", "NUMBER", "Required", "module", "not", "find", "node_modules", "flux", "lib", "FluxStoreGroup", "NUMBER", "js", "NUMBER", "flow", "NUMBER", "NUMBER", "import", "type", "FluxStore", "from", "FluxStore", "FluxStore", "NUMBER", "Required", "module", "not", "find", "node_modules", "flux", "lib", "FluxStoreGroup", "NUMBER", "js", "NUMBER", "flow", "NUMBER", "NUMBER", "if", "__DEV__", "identifier", "__DEV__", "NUMBER", "Could", "not", "resolve", "name", "It", "should", "work", "without", "any", "additional", "configuration", "that", "s", "the", "point", "NUMBER", "Moreover", "that", "example", "apparently", "suggests", "to", "ignore", "everything", "in", "node_modules", "which", "I", "believe", "be", "not", "recommended", "anymore", "NUMBER", "Looks", "more", "like", "a", "hack", "than", "a", "proper", "implementation", "NUMBER", "Whilst", "trying", "to", "follow", "along", "with", "the", "documentation", "the", "location", "of", "the", "import", "statement", "in", "one", "of", "the", "suggested", "bits", "of", "code", "was", "incorrect", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "If", "you", "be", "contribute", "on", "behalf", "of", "someone", "else", "eg", "your", "employer", "the", "individual", "CLA", "may", "not", "be", "sufficient", "and", "your", "employer", "may", "need", "the", "corporate", "CLA", "sign", "NUMBER", "If", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "contact", "us", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Cheers", "that", "was", "a", "fast", "review", "Hello", "I", "m", "new", "to", "flux", "and", "I", "have", "followed", "to", "step", "NUMBER", "Setting", "up", "Flux", "But", "after", "fill", "all", "sample", "code", "I", "run", "into", "an", "error", "ERROR", "in", "NUMBER", "flux", "index", "NUMBER", "js", "Module", "not", "find", "Error", "Cannot", "resolve", "file", "or", "directory", "NUMBER", "lib", "Dispatcher", "in", "home", "tdquang", "Workshop", "flux", "examples", "my", "todomvc", "node_modules", "flux", "NUMBER", "flux", "index", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "What", "did", "I", "do", "wrong", "Many", "thanks", "I", "get", "the", "same", "error", "on", "run", "npm", "run", "build", "props", "NUMBER", "router", "be", "not", "pass", "to", "StatelessFuncApp", "export", "default", "withRouter", "Container", "NUMBER", "createFunctional", "StatelessFuncApp", "Store", "conditions", "Store", "NUMBER", "getState", "Become", "an", "error", "export", "default", "Container", "NUMBER", "createFunctional", "withRouter", "StatelessFuncApp", "Store", "conditions", "Store", "NUMBER", "getState", "Warning", "Something", "be", "calling", "a", "React", "component", "directly", "NUMBER", "Use", "a", "factory", "or", "JSX", "instead", "NUMBER", "See", "LINK", "legacyfactory", "Uncaught", "TypeError", "Cannot", "read", "property", "__reactAutoBindPairs", "of", "undefined", "Why", "do", "Container", "NUMBER", "createFunctional", "not", "take", "components", "from", "class", "as", "argument", "I", "reread", "the", "source", "code", "and", "solve", "it", "NUMBER", "It", "worked", "out", "successfully", "below", "NUMBER", "export", "default", "withRouter", "Container", "NUMBER", "createFunctional", "StatelessFuncApp", "Store", "prevState", "props", "NUMBER", "props", "conditions", "Store", "NUMBER", "getState", "withProps", "true", "Why", "do", "Container", "NUMBER", "createFunctional", "not", "take", "components", "from", "class", "as", "argument", "Just", "mention", "above", "NUMBER", "I", "saw", "the", "code", "to", "try", "jsx", "but", "can", "not", "I", "raise", "the", "babel", "version", "from", "NUMBER", "A", "FluxContainer", "recomputes", "the", "stores", "list", "the", "one", "created", "by", "getStores", "after", "every", "change", "in", "props", "and", "context", "NUMBER", "It", "be", "needed", "because", "a", "container", "can", "use", "props", "to", "refine", "how", "the", "state", "be", "computed", "NUMBER", "The", "FluxContainerSubscriptions", "manages", "when", "a", "container", "should", "be", "recomputed", "NUMBER", "It", "be", "do", "listening", "for", "change", "in", "dependent", "stores", "NUMBER", "In", "order", "to", "do", "that", "FluxContainerSubscriptions", "creates", "a", "store", "group", "that", "be", "a", "fake", "store", "that", "wait", "for", "all", "dependent", "stores", "NUMBER", "If", "the", "stores", "change", "during", "the", "dispatching", "cycle", "then", "it", "call", "the", "listener", "which", "one", "recompute", "the", "state", "of", "the", "container", "NUMBER", "This", "PR", "change", "FluxContainerSubscriptions", "to", "only", "create", "new", "listener", "and", "a", "new", "store", "group", "when", "the", "stores", "list", "change", "NUMBER", "Any", "new", "test", "needed", "Please", "see", "Issue", "LINK", "Please", "refer", "to", "the", "example", "in", "the", "comments", "at", "LINK", "LINK", "L", "NUMBER", "Here", "to", "get", "the", "dispatchToken", "from", "the", "Store", "Store", "NUMBER", "dispatchToken", "be", "use", "NUMBER", "Whereas", "as", "per", "the", "Store", "API", "documentation", "the", "method", "to", "get", "the", "dispatchToken", "be", "getDispatchToken", "LINK", "utils", "NUMBER", "html", "store", "Raising", "a", "PR", "to", "fix", "this", "NUMBER", "I", "call", "an", "Container", "inside", "an", "Container", "but", "confuse", "that", "how", "to", "passing", "props", "from", "Container", "A", "to", "Container", "B", "I", "had", "read", "about", "container", "cannot", "access", "props", "By", "default", "container", "be", "not", "able", "to", "access", "any", "props", "NUMBER", "This", "be", "both", "for", "performance", "reasons", "and", "to", "ensure", "that", "container", "be", "re", "usable", "and", "props", "do", "not", "have", "to", "be", "threaded", "throughout", "a", "component", "tree", "NUMBER", "There", "be", "some", "valid", "situations", "in", "which", "you", "need", "to", "determine", "your", "state", "based", "on", "both", "props", "and", "a", "store", "s", "state", "NUMBER", "In", "those", "situations", "pass", "options", "withProps", "true", "as", "the", "second", "argument", "to", "create", "NUMBER", "This", "will", "expose", "the", "components", "props", "as", "the", "second", "argument", "to", "calculateState", "NUMBER", "And", "try", "to", "research", "but", "cannot", "find", "any", "solution", "NUMBER", "class", "ActivityLayout", "extend", "React", "NUMBER", "Component", "render", "var", "popup", "this", "NUMBER", "ate", "NUMBER", "isShowPopup", "TAG", "TAG", "TAG", "var", "acFormStyle", "this", "NUMBER", "ate", "NUMBER", "isShowPopup", "none", "block", "return", "TAG", "popup", "TAG", "export", "default", "ActivityListView", "And", "here", "be", "my", "PopupContainer", "function", "getStores", "return", "PhotoStore", "function", "calculateState", "prevState", "props", "console", "NUMBER", "log", "props", "NUMBER", "tooglePopup", "return", "tooglePopup", "PhotoStore", "NUMBER", "get", "props", "NUMBER", "tooglePopup", "tooglePopup", "props", "NUMBER", "tooglePopup", "function", "getState", "return", "photos", "PhotoStore", "NUMBER", "getState", "export", "default", "Container", "NUMBER", "createFunctional", "PopupView", "getStores", "getState", "calculateState", "withProps", "true", "I", "made", "the", "change", "you", "request", "NUMBER", "Set", "up", "the", "project", "and", "go", "through", "the", "guided", "tutorial", "steps", "for", "Flux", "all", "makes", "sense", "so", "far", "To", "get", "rid", "of", "warnings", "when", "work", "on", "the", "my", "todomvc", "tutorial", "npm", "WARN", "flux", "shell", "NUMBER", "No", "license", "field", "NUMBER", "Used", "the", "license", "from", "the", "root", "NUMBER", "Changes", "instances", "of", "NUMBER", "specific", "year", "to", "NUMBER", "present", "for", "consistency", "across", "the", "docs", "codebase", "NUMBER", "I", "following", "the", "example", "LINK", "todomvc", "after", "finishing", "the", "step", "of", "_", "NUMBER", "Setting", "up", "Flux_", "NUMBER", "My", "local", "file", "doesn", "t", "show", "Hello", "from", "Flux", "Here", "be", "the", "error", "in", "console", "Uncaught", "Error", "Subclasses", "of", "FluxReduceStore", "must", "override", "getInitialState", "with", "their", "own", "implementation", "NUMBER", "Anyone", "meets", "this", "problem", "I", "m", "not", "sure", "if", "the", "intentions", "were", "for", "the", "user", "to", "have", "the", "option", "of", "creating", "their", "own", "Counter", "file", "but", "currently", "it", "be", "unclear", "where", "the", "Counter", "and", "Todo", "file", "be", "be", "imported", "NUMBER", "I", "edit", "lines", "NUMBER", "and", "NUMBER", "to", "clarify", "so", "the", "user", "knows", "to", "import", "these", "two", "file", "NUMBER", "I", "welcome", "feedback", "NUMBER", "The", "Readme", "for", "the", "example", "todomvc", "misses", "the", "import", "of", "critical", "file", "NUMBER", "That", "be", "following", "the", "directions", "exactly", "do", "not", "produce", "a", "work", "todomvc", "NUMBER", "Thanks", "for", "all", "the", "work", "it", "took", "to", "make", "this", "example", "and", "once", "run", "it", "was", "very", "helpful", "walk", "through", "NUMBER", "There", "be", "a", "few", "spots", "that", "need", "more", "explicit", "clarification", "NUMBER", "I", "ll", "just", "go", "through", "them", "cp", "R", "examples", "flux", "shell", "examples", "my", "todomvc", "cd", "examples", "my", "todomvc", "npm", "install", "npm", "run", "watch", "Open", "examples", "my", "todomvc", "index", "NUMBER", "html", "in", "your", "browser", "NUMBER", "You", "should", "see", "a", "blank", "page", "that", "says", "Hello", "World", "NUMBER", "Set", "up", "TodoMVC", "assets", "Copy", "assets", "from", "examples", "todomvc", "common", "cp", "R", "NUMBER", "todomvc", "common", "todomvc", "common", "It", "isn", "t", "clear", "given", "that", "the", "original", "open", "terminal", "in", "examples", "my", "todomvc", "be", "now", "run", "npm", "run", "watch", "where", "you", "be", "copying", "file", "to", "NUMBER", "The", "reader", "hopefully", "reasonably", "guesses", "my", "todomvc", "NUMBER", "Now", "we", "can", "use", "this", "structure", "along", "with", "a", "simple", "Counter", "to", "implement", "the", "ADD_TODO", "action", "NUMBER", "Update", "data", "TodoStore", "NUMBER", "js", "NUMBER", "class", "TodoStore", "extend", "ReduceStore", "Should", "include", "an", "import", "statement", "for", "Counter", "and", "Todo", "and", "just", "a", "general", "point", "here", "NUMBER", "at", "some", "points", "in", "this", "readme", "NUMBER", "the", "author", "tells", "the", "reader", "to", "update", "a", "file", "and", "lists", "the", "entire", "contents", "of", "the", "file", "to", "replace", "but", "here", "and", "other", "spots", "the", "reader", "should", "only", "update", "a", "specific", "function", "reduce", "NUMBER", "Coincidentally", "NUMBER", "the", "definition", "of", "update", "be", "mutable", "NUMBER", "leading", "to", "confusion", "NUMBER", "or", "be", "that", "ironic", "or", "both", "I", "would", "just", "stick", "to", "listing", "the", "entire", "contents", "of", "the", "file", "NUMBER", "This", "commit", "resolve", "two", "issue", "with", "examples", "flux", "todomvc", "NUMBER", "On", "Step", "NUMBER", "after", "make", "the", "required", "code", "change", "I", "get", "this", "error", "ERROR", "in", "NUMBER", "src", "root", "NUMBER", "js", "Module", "not", "find", "Error", "Cannot", "resolve", "file", "or", "directory", "NUMBER", "container", "AppContainer", "in", "projects", "mkolenda", "flux", "examples", "my", "todomvc", "src", "NUMBER", "src", "root", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Also", "on", "Step", "NUMBER", "after", "resolving", "the", "issue", "in", "NUMBER", "I", "get", "babel", "runtime", "be", "not", "find", "NUMBER", "ERROR", "in", "NUMBER", "data", "TodoStore", "NUMBER", "js", "Module", "not", "find", "Error", "Cannot", "resolve", "module", "babel", "runtime", "core", "js", "object", "get", "prototype", "of", "in", "projects", "mkolenda", "flux", "examples", "my", "todomvc", "data", "NUMBER", "data", "TodoStore", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "ERROR", "in", "NUMBER", "data", "TodoStore", "NUMBER", "js", "Module", "not", "find", "Error", "Cannot", "resolve", "module", "babel", "runtime", "helpers", "classCallCheck", "in", "projects", "mkolenda", "flux", "examples", "my", "todomvc", "data", "NUMBER", "data", "TodoStore", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "ERROR", "in", "NUMBER", "data", "TodoStore", "NUMBER", "js", "Module", "not", "find", "Error", "Cannot", "resolve", "module", "babel", "runtime", "helpers", "createClass", "in", "projects", "mkolenda", "flux", "examples", "my", "todomvc", "data", "NUMBER", "data", "TodoStore", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "ERROR", "in", "NUMBER", "data", "TodoStore", "NUMBER", "js", "Module", "not", "find", "Error", "Cannot", "resolve", "module", "babel", "runtime", "helpers", "possibleConstructorReturn", "in", "projects", "mkolenda", "flux", "examples", "my", "todomvc", "data", "NUMBER", "data", "TodoStore", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "ERROR", "in", "NUMBER", "data", "TodoStore", "NUMBER", "js", "Module", "not", "find", "Error", "Cannot", "resolve", "module", "babel", "runtime", "helpers", "inherits", "in", "projects", "mkolenda", "flux", "examples", "my", "todomvc", "data", "NUMBER", "data", "TodoStore", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "dist", "Flux", "NUMBER", "js", "now", "properly", "reflects", "the", "version", "specified", "in", "package", "NUMBER", "json", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "If", "you", "be", "contribute", "on", "behalf", "of", "someone", "else", "eg", "your", "employer", "the", "individual", "CLA", "be", "not", "sufficient", "use", "LINK", "company", "instead", "NUMBER", "Contact", "cla", "fb", "NUMBER", "com", "if", "you", "have", "any", "question", "NUMBER", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "npm", "server", "be", "not", "run", "for", "this", "project", "NUMBER", "I", "have", "use", "following", "commands", "C", "Users", "admin", "Desktop", "flux", "master", "npm", "start", "flux", "NUMBER", "start", "C", "Users", "admin", "Desktop", "flux", "master", "node", "index", "NUMBER", "js", "but", "server", "be", "not", "starting", "NUMBER", "thanks", "I", "have", "not", "find", "this", "module", "Error", "Cannot", "find", "module", "react", "page", "middleware", "at", "Function", "NUMBER", "Module", "NUMBER", "_resolveFilename", "module", "NUMBER", "js", "NUMBER", "NUMBER", "at", "Function", "NUMBER", "Module", "NUMBER", "_load", "module", "NUMBER", "js", "NUMBER", "NUMBER", "at", "Module", "NUMBER", "require", "module", "NUMBER", "js", "NUMBER", "NUMBER", "at", "require", "internal", "module", "NUMBER", "js", "NUMBER", "NUMBER", "at", "Object", "NUMBER", "TAG", "C", "Users", "admin", "Desktop", "flux", "master", "website", "server", "ser", "ver", "NUMBER", "js", "NUMBER", "NUMBER", "at", "Module", "NUMBER", "_compile", "module", "NUMBER", "js", "NUMBER", "NUMBER", "at", "Object", "NUMBER", "Module", "NUMBER", "_extensions", "NUMBER", "js", "module", "NUMBER", "js", "NUMBER", "NUMBER", "at", "Module", "NUMBER", "load", "module", "NUMBER", "js", "NUMBER", "NUMBER", "at", "tryModuleLoad", "module", "NUMBER", "js", "NUMBER", "NUMBER", "at", "Function", "NUMBER", "Module", "NUMBER", "_load", "module", "NUMBER", "js", "NUMBER", "NUMBER", "I", "want", "to", "run", "website", "use", "following", "link", "LINK", "On", "Jan", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "Kyle", "Davis", "TAG", "write", "Like", "I", "said", "there", "isn", "t", "a", "start", "command", "run", "npm", "start", "shouldn", "t", "do", "anything", "NUMBER", "Whether", "it", "throw", "an", "error", "or", "not", "doesn", "t", "matter", "because", "there", "be", "no", "behavior", "defined", "that", "it", "should", "be", "trying", "to", "start", "NUMBER", "If", "there", "be", "something", "you", "re", "trying", "to", "accomplish", "first", "read", "through", "the", "readme", "and", "examples", "LINK", "flux", "blob", "master", "README", "NUMBER", "md", "Then", "if", "you", "be", "still", "having", "a", "problem", "open", "up", "an", "issue", "with", "clear", "details", "about", "what", "you", "be", "trying", "to", "do", "what", "you", "expect", "to", "happen", "and", "what", "be", "actually", "happening", "NUMBER", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "I", "have", "a", "project", "with", "react", "and", "I", "be", "use", "this", "gem", "LINK", "rails", "I", "like", "to", "know", "if", "exists", "the", "gem", "for", "flux", "NUMBER", "Thanks", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "NUMBER", "NUMBER", "Kyle", "Davis", "TAG", "I", "m", "not", "sure", "what", "this", "means", "NUMBER", "Try", "reading", "through", "the", "tutorials", "and", "if", "that", "doesn", "t", "help", "feel", "free", "to", "post", "a", "clear", "question", "with", "more", "context", "and", "information", "NUMBER", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "LINK", "Utils", "NUMBER", "md", "has", "a", "capital", "T", "show", "up", "often", "in", "the", "section", "on", "ReduceStore", "but", "I", "see", "no", "explanation", "of", "what", "it", "be", "supposed", "to", "mean", "NUMBER", "Is", "this", "copy", "pasta", "of", "markup", "from", "a", "previous", "version", "of", "the", "docs", "Or", "be", "it", "supposed", "to", "mean", "something", "Wow", "NUMBER", "OK", "it", "hadn", "t", "occur", "to", "me", "that", "T", "was", "a", "proper", "name", "and", "that", "it", "was", "supposed", "to", "be", "conveying", "meaningful", "content", "on", "its", "own", "NUMBER", "I", "mean", "the", "usual", "thing", "be", "to", "link", "to", "an", "explanatory", "text", "or", "document", "when", "a", "novel", "term", "be", "first", "use", "that", "seems", "like", "it", "might", "apply", "here", "if", "there", "s", "a", "useful", "thing", "you", "can", "link", "to", "NUMBER", "Personally", "I", "would", "advocate", "for", "a", "longer", "and", "more", "descriptive", "name", "especially", "since", "T", "be", "incredibly", "unfriendly", "to", "web", "searches", "and", "the", "convention", "method", "params", "returnValue", "be", "obscure", "enough", "that", "it", "isn", "t", "even", "obvious", "that", "s", "what", "you", "re", "doing", "NUMBER", "You", "could", "also", "spell", "out", "what", "it", "means", "and", "what", "that", "means", "the", "first", "time", "you", "use", "it", "getState", "T", "Getter", "method", "that", "returns", "the", "entire", "state", "of", "this", "store", "a", "TState", "object", "as", "defined", "TState", "here", "NUMBER", "This", "be", "a", "thing", "that", "be", "different", "from", "the", "store", "itself", "and", "be", "useful", "if", "you", "know", "what", "to", "do", "with", "it", "because", "blah", "blah", "blah", "NUMBER", "If", "your", "state", "be", "not", "immutable", "you", "should", "override", "this", "and", "not", "expose", "state", "directly", "NUMBER", "That", "said", "I", "don", "t", "see", "any", "more", "useful", "documentation", "at", "the", "provide", "link", "which", "appears", "to", "just", "be", "an", "inline", "version", "of", "approximately", "what", "s", "here", "it", "doesn", "t", "actually", "explain", "what", "a", "TState", "be", "or", "why", "you", "re", "calling", "it", "that", "instead", "of", "saying", "that", "this", "returns", "the", "store", "NUMBER", "In", "fact", "TState", "doesn", "t", "appear", "to", "be", "very", "search", "friendly", "either", "though", "it", "be", "a", "bit", "better", "than", "just", "T", "in", "terms", "of", "finding", "out", "what", "this", "means", "or", "do", "NUMBER", "I", "suspect", "it", "may", "not", "be", "a", "basic", "enough", "concept", "that", "it", "s", "safe", "to", "just", "assume", "everybody", "already", "has", "it", "NUMBER", "Or", "maybe", "I", "m", "just", "not", "the", "target", "audience", "for", "this", "documentation", "and", "the", "people", "it", "s", "for", "will", "understand", "it", "NUMBER", "But", "if", "understanding", "it", "be", "key", "to", "grokking", "flux", "it", "may", "be", "worth", "finding", "and", "point", "to", "or", "write", "and", "point", "to", "a", "clear", "explanation", "NUMBER", "Hey", "Kyle", "thanks", "for", "taking", "the", "time", "to", "reply", "NUMBER", "The", "reason", "I", "sent", "my", "pull", "request", "be", "because", "of", "a", "question", "a", "colleague", "asked", "me", "while", "I", "was", "trying", "to", "explain", "the", "basics", "of", "flux", "to", "him", "NUMBER", "We", "read", "through", "the", "page", "and", "when", "we", "get", "to", "this", "point", "in", "the", "documentation", "while", "I", "had", "no", "problem", "with", "the", "sentence", "my", "colleague", "asked", "Shouldn", "t", "be", "the", "dispatcher", "the", "one", "who", "notifies", "the", "stores", "subscribed", "to", "it", "I", "think", "for", "someone", "who", "be", "familiar", "with", "flux", "your", "phrasing", "makes", "perfect", "sense", "and", "it", "has", "the", "extra", "benefits", "you", "mention", "in", "your", "comment", "NUMBER", "However", "when", "someone", "who", "be", "new", "to", "flux", "arguably", "most", "people", "reading", "this", "page", "in", "the", "docs", "comes", "across", "the", "original", "sentence", "they", "could", "interpret", "that", "it", "s", "the", "view", "itself", "which", "be", "dispatching", "the", "action", "and", "notifying", "the", "stores", "like", "it", "happened", "to", "my", "colleague", "NUMBER", "I", "think", "my", "edit", "though", "a", "bit", "more", "verbose", "reflects", "the", "data", "flow", "more", "explicitly", "and", "avoids", "the", "possibility", "of", "make", "wrong", "assumptions", "NUMBER", "Having", "said", "that", "neither", "my", "friend", "nor", "I", "be", "native", "English", "speakers", "we", "both", "speak", "it", "fluently", "though", "NUMBER", "Yeah", "the", "two", "bullets", "work", "Same", "version", "as", "use", "by", "React", "Native", "NUMBER", "Main", "breaking", "change", "be", "the", "deprecation", "of", "default", "wildcard", "generics", "for", "explicit", "generics", "NUMBER", "I", "didn", "t", "improve", "the", "typing", "we", "do", "have", "a", "version", "that", "better", "typed", "I", "believe", "NUMBER", "Meanwhile", "React", "Native", "bumbed", "to", "NUMBER", "which", "be", "ok", "they", "be", "compatible", "NUMBER", "and", "I", "realized", "that", "the", "previous", "version", "was", "Dispatcher", "TAG", "not", "Dispatcher", "TAG", "NUMBER", "I", "think", "it", "behaves", "the", "same", "for", "export", "NUMBER", "Thank", "you", "for", "your", "reply", "NUMBER", "I", "add", "test", "case", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "If", "you", "be", "contribute", "on", "behalf", "of", "someone", "else", "eg", "your", "employer", "the", "individual", "CLA", "be", "not", "sufficient", "use", "LINK", "company", "instead", "NUMBER", "Contact", "cla", "fb", "NUMBER", "com", "if", "you", "have", "any", "question", "NUMBER", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "A", "good", "old", "fashioned", "s", "NUMBER", "NUMBER", "g", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "If", "you", "be", "contribute", "on", "behalf", "of", "someone", "else", "eg", "your", "employer", "the", "individual", "CLA", "be", "not", "sufficient", "use", "LINK", "company", "instead", "NUMBER", "Contact", "cla", "fb", "NUMBER", "com", "if", "you", "have", "any", "question", "NUMBER", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Cool", "no", "worries", "NUMBER", "On", "NUMBER", "Dec", "NUMBER", "at", "NUMBER", "NUMBER", "Kyle", "Davis", "TAG", "write", "the", "gh", "pages", "branch", "be", "generate", "so", "we", "shouldn", "t", "just", "sed", "replace", "over", "it", "also", "I", "think", "almost", "all", "of", "these", "file", "get", "delete", "with", "recent", "update", "to", "docs", "Just", "going", "to", "close", "this", "out", "NUMBER", "If", "you", "want", "to", "poke", "around", "and", "find", "dates", "on", "master", "branch", "happy", "for", "you", "to", "resubmit", "NUMBER", "If", "you", "do", "make", "sure", "dates", "be", "NUMBER", "present", "though", "NUMBER", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "or", "mute", "the", "thread", "NUMBER", "I", "have", "this", "store", "update", "from", "server", "NUMBER", "I", "would", "like", "to", "put", "the", "API", "call", "in", "action", "creator", "like", "that", "chat", "room", "example", "except", "when", "I", "realize", "that", "way", "it", "s", "not", "likely", "possible", "to", "waitFor", "other", "actions", "NUMBER", "Later", "I", "came", "up", "with", "this", "solution", "but", "I", "be", "wondering", "if", "it", "adheres", "the", "flux", "pattern", "NUMBER", "Suppose", "the", "API", "action", "be", "A", "and", "B", "be", "the", "action", "it", "should", "wait", "for", "NUMBER", "I", "decided", "to", "put", "a", "status", "flag", "in", "B", "s", "store", "and", "let", "B", "emit", "a", "event", "if", "complete", "NUMBER", "So", "in", "A", "creator", "can", "query", "B", "s", "status", "first", "then", "decide", "to", "proceed", "or", "wait", "for", "that", "signal", "from", "B", "NUMBER", "Action", "B", "can", "return", "a", "Promise", "which", "action", "A", "will", "handle", "javascript", "async", "function", "setOfActions", "await", "B", "A", "NUMBER", "Hi", "everyone", "I", "notice", "that", "since", "the", "introduction", "of", "NUMBER", "Containers", "created", "with", "withProps", "true", "be", "not", "work", "anymore", "or", "at", "least", "I", "did", "not", "managed", "to", "get", "them", "work", "the", "way", "I", "use", "to", "NUMBER", "Disclaimer", "it", "s", "a", "long", "read", "but", "I", "try", "to", "explain", "it", "as", "clear", "as", "I", "can", "NUMBER", "For", "the", "one", "in", "a", "hurry", "I", "try", "to", "give", "an", "explanation", "at", "the", "end", "of", "the", "description", "Let", "me", "try", "to", "reproduce", "it", "with", "a", "minimal", "setup", "for", "create", "react", "app", "I", "don", "t", "know", "how", "to", "Flux", "in", "Plunker", "or", "Codepen", "or", "NUMBER", "My", "use", "case", "be", "quite", "simple", "or", "maybe", "I", "be", "doing", "something", "totally", "wrong", "then", "please", "tell", "me", "I", "have", "NUMBER", "components", "with", "a", "Parent", "Child", "relationship", "both", "be", "Containers", "the", "child", "be", "a", "Container", "that", "get", "a", "prop", "injected", "to", "calculate", "her", "state", "NUMBER", "My", "two", "components", "be", "listening", "to", "NUMBER", "different", "stores", "NUMBER", "I", "then", "update", "these", "stores", "one", "after", "the", "other", "with", "proper", "delays", "of", "NUMBER", "ms", "and", "NUMBER", "ms", "NUMBER", "I", "have", "setup", "a", "default", "value", "for", "my", "injected", "prop", "so", "you", "could", "see", "what", "it", "do", "without", "or", "with", "withProps", "true", "on", "NameContainer", "that", "be", "cause", "the", "Invariant", "Violation", "So", "here", "be", "my", "scenario", "bash", "create", "react", "app", "flux", "with", "props", "cd", "flux", "with", "props", "npm", "install", "flux", "immutable", "Replace", "the", "content", "of", "App", "NUMBER", "js", "jsx", "import", "React", "Component", "from", "react", "import", "Map", "from", "immutable", "import", "Dispatcher", "as", "FluxDispatcher", "from", "flux", "import", "ReduceStore", "Container", "from", "flux", "utils", "const", "Dispatcher", "new", "FluxDispatcher", "const", "NameStore", "new", "class", "extend", "ReduceStore", "getInitialState", "return", "new", "Map", "name", "Julian", "reduce", "state", "payload", "switch", "payload", "NUMBER", "type", "case", "CHANGE_NAME", "return", "state", "NUMBER", "set", "name", "payload", "NUMBER", "name", "default", "return", "state", "getName", "mood", "return", "this", "NUMBER", "getState", "NUMBER", "get", "name", "be", "mood", "Dispatcher", "const", "InfoStore", "new", "class", "extend", "ReduceStore", "getInitialState", "return", "new", "Map", "reduce", "state", "payload", "switch", "payload", "NUMBER", "type", "case", "UPDATE_MOOD", "return", "state", "NUMBER", "set", "info", "mood", "payload", "NUMBER", "mood", "default", "return", "state", "getInfo", "mood", "sad", "return", "this", "NUMBER", "getState", "NUMBER", "get", "info", "mood", "Dispatcher", "class", "Name", "extend", "Component", "static", "getStores", "return", "NameStore", "static", "calculateState", "prevState", "props", "const", "mood", "props", "props", "NUMBER", "info", "props", "NUMBER", "info", "NUMBER", "mood", "return", "name", "NameStore", "NUMBER", "getName", "mood", "neither", "sad", "nor", "happy", "render", "return", "TAG", "this", "NUMBER", "ate", "NUMBER", "name", "TAG", "const", "NameContainer", "Container", "NUMBER", "create", "Name", "withProps", "false", "class", "Wrapper", "extend", "Component", "static", "getStores", "return", "InfoStore", "static", "calculateState", "return", "info", "InfoStore", "NUMBER", "getInfo", "render", "return", "TAG", "TAG", "Information", "TAG", "TAG", "TAG", "const", "WrapperContainer", "Container", "NUMBER", "create", "Wrapper", "setTimeout", "Dispatcher", "NUMBER", "dispatch", "type", "UPDATE_MOOD", "mood", "happy", "NUMBER", "setTimeout", "Dispatcher", "NUMBER", "dispatch", "type", "CHANGE_NAME", "name", "Patrick", "NUMBER", "class", "App", "extend", "Component", "render", "return", "TAG", "TAG", "TAG", "export", "default", "App", "bash", "npm", "run", "start", "You", "should", "see", "_Julian", "be", "neither", "sad", "nor", "happy_", "_Patrick", "be", "neither", "sad", "nor", "happy_", "Now", "activate", "withProps", "true", "on", "NameContainer", "line", "NUMBER", "NUMBER", "We", "will", "then", "inject", "a", "prop", "on", "it", "that", "default", "value", "be", "still", "_neither", "sad", "nor", "happy_", "but", "we", "also", "dispatch", "a", "change", "to", "_happy_", "after", "a", "delay", "NUMBER", "We", "then", "should", "see", "_Julian", "be", "neither", "sad", "nor", "happy_", "_Patrick", "be", "neither", "sad", "nor", "happy_", "_Patrick", "be", "happy_", "But", "the", "last", "state", "never", "occur", "due", "to", "the", "invariant", "check", "NUMBER", "My", "debugging", "session", "lead", "me", "here", "At", "one", "point", "the", "FluxContainerSubscriptions", "will", "trigger", "a", "reset", "on", "the", "underlying", "FluxStoreGroup", "that", "will", "trigger", "a", "Dispatcher", "NUMBER", "unregister", "register", "NUMBER", "But", "if", "we", "be", "here", "it", "s", "because", "we", "be", "reacting", "to", "a", "prop", "change", "that", "might", "be", "triggered", "by", "a", "dispatch", "There", "it", "be", "NUMBER", "a", "dispatch", "that", "trigger", "an", "unregister", "register", "NUMBER", "Boom", "NUMBER", "Invariant", "Am", "I", "really", "doing", "something", "wrong", "here", "NUMBER", "components", "encapsulated", "NUMBER", "stores", "update", "NUMBER", "Sounds", "pretty", "normal", "to", "me", "NUMBER", "Thanks", "for", "the", "help", "and", "really", "sorry", "for", "the", "long", "reading", "kyldvs", "maybe", "we", "can", "get", "rid", "of", "the", "logic", "which", "resets", "listeners", "each", "time", "before", "calling", "getStores", "I", "never", "saw", "a", "case", "where", "I", "d", "put", "some", "logic", "in", "my", "getStores", "methods", "NUMBER", "It", "s", "always", "just", "a", "list", "of", "all", "stores", "that", "be", "use", "by", "any", "condition", "in", "calculateState", "NUMBER", "Thanks", "kyldvs", "Works", "like", "a", "charm", "Hi", "there", "I", "just", "find", "that", "the", "v", "NUMBER", "was", "publish", "on", "npm", "but", "not", "on", "GitHub", "I", "guess", "you", "may", "forget", "it", "so", "just", "report", "to", "let", "you", "know", "Thanks", "for", "your", "work", "on", "flux", "cc", "cdnjs", "cdnjs", "NUMBER", "kyldvs", "thanks", "I", "m", "upgrading", "from", "v", "NUMBER", "and", "be", "get", "the", "following", "error", "in", "WebPack", "screen", "shot", "NUMBER", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "NUMBER", "pm", "LINK", "NUMBER", "b", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "bf", "e", "NUMBER", "fc", "NUMBER", "d", "NUMBER", "png", "From", "the", "library", "I", "m", "not", "directly", "importing", "FluxContainer", "but", "I", "be", "use", "Store", "NUMBER", "Could", "that", "dependency", "be", "isolated", "to", "another", "import", "Such", "as", "flux", "react", "I", "think", "people", "already", "be", "biased", "to", "think", "flux", "be", "only", "for", "React", "make", "this", "library", "have", "a", "dependency", "on", "it", "would", "seem", "to", "only", "reinforce", "that", "perception", "NUMBER", "FluxContainer", "initially", "implement", "for", "React", "usage", "only", "NUMBER", "If", "you", "use", "Flux", "with", "different", "UI", "layer", "you", "need", "different", "container", "implementation", "NUMBER", "Anything", "else", "can", "be", "imported", "from", "flux", "lib", "which", "won", "t", "require", "React", "to", "be", "install", "NUMBER", "alexeyraspopov", "thanks", "for", "the", "tip", "lets", "me", "keep", "use", "Flux", "without", "installing", "a", "React", "dependency", "I", "won", "t", "be", "make", "use", "of", "NUMBER", "Any", "decent", "packager", "FWIW", "_most_", "packagers", "won", "t", "can", "t", "do", "tree", "shaking", "yet", "NUMBER", "While", "it", "s", "great", "to", "say", "it", "s", "a", "bug", "in", "the", "packager", "it", "s", "not", "really", "fair", "NUMBER", "Anything", "else", "can", "be", "imported", "from", "flux", "lib", "That", "ll", "work", "but", "it", "s", "not", "support", "so", "it", "might", "break", "in", "the", "future", "NUMBER", "We", "probably", "should", "support", "this", "be", "some", "more", "official", "way", "maybe", "make", "require", "flux", "utils", "store", "work", "That", "s", "surprising", "to", "me", "for", "some", "reason", "I", "thought", "webpack", "did", "this", "already", "NUMBER", "It", "probably", "will", "be", "a", "part", "of", "NUMBER", "but", "I", "m", "not", "sure", "how", "this", "can", "work", "or", "even", "possible", "with", "CommonJS", "Modules", "NUMBER", "This", "be", "a", "very", "large", "PR", "that", "will", "add", "a", "whole", "suite", "of", "new", "examples", "for", "Flux", "NUMBER", "It", "will", "cover", "many", "basic", "topics", "like", "TodoMVC", "Unit", "test", "Logging", "and", "some", "advances", "topics", "like", "Static", "Typing", "and", "Async", "Actions", "NUMBER", "I", "think", "this", "be", "mostly", "ready", "so", "going", "to", "go", "ahead", "and", "put", "up", "the", "PR", "have", "a", "few", "things", "left", "to", "do", "x", "Write", "flux", "concepts", "part", "of", "the", "tutorial", "or", "copy", "from", "old", "docs", "x", "Make", "sure", "website", "be", "up", "to", "date", "and", "references", "correct", "examples", "x", "Add", "disclaimer", "to", "flux", "async", "that", "this", "be", "just", "_a", "way_", "to", "handle", "async", "actions", "not", "the", "only", "way", "If", "you", "have", "any", "feedback", "on", "these", "examples", "I", "would", "appreciate", "any", "comments", "NUMBER", "Why", "be", "flux", "concepts", "in", "the", "repo", "rather", "than", "on", "the", "site", "if", "it", "s", "just", "text", "Refine", "code", "to", "fix", "bug", "that", "message", "id", "be", "not", "same", "as", "which", "store", "in", "localStorage", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "facebook", "github", "bot", "NUMBER", "Got", "it", "NUMBER", "Pls", "refine", "it", "NUMBER", "kyldvs", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Flux", "Chat", "example", "be", "old", "and", "do", "not", "use", "good", "things", "like", "Flux", "Utils", "or", "ImmutableJS", "NUMBER", "Let", "s", "fix", "this", "NUMBER", "This", "Flux", "Chat", "write", "from", "scratch", "so", "here", "be", "a", "list", "of", "things", "that", "be", "change", "Used", "immutable", "lib", "for", "all", "data", "message", "threads", "NUMBER", "MessageRecord", "and", "ThreadRecord", "be", "introduce", "to", "provide", "the", "shape", "of", "data", "NUMBER", "I", "did", "not", "consider", "use", "Flow", "see", "NUMBER", "NUMBER", "Better", "file", "structure", "top", "level", "folders", "core", "message", "thread", "which", "contain", "relate", "components", "stores", "records", "NUMBER", "ES", "NUMBER", "everywhere", "NUMBER", "ReduceStore", "and", "Container", "be", "use", "NUMBER", "MessageBufferStore", "holds", "incomplete", "message", "per", "threads", "NUMBER", "Example", "chat", "data", "was", "moved", "to", "JSON", "file", "NUMBER", "Next", "pull", "request", "be", "include", "here", "or", "becoming", "outdate", "NUMBER", "becomes", "irrelevant", "NUMBER", "NUMBER", "include", "here", "NUMBER", "package", "NUMBER", "json", "update", "NUMBER", "include", "here", "NUMBER", "becomes", "irrelevant", "NUMBER", "change", "to", "ThreadStore", "be", "include", "here", "NUMBER", "can", "be", "update", "if", "this", "will", "be", "merge", "NUMBER", "becomes", "irrelevant", "_Note", "GIT", "has", "some", "weird", "definition", "of", "showing", "diff", "it", "s", "much", "easier", "to", "review", "by", "pulling", "the", "branch", "and", "checking", "new", "file", "NUMBER", "_", "cc", "kyldvs", "fisherwebdev", "kyldvs", "Flux", "test", "be", "fail", "on", "Travis", "probably", "because", "of", "Jest", "version", "NUMBER", "I", "can", "open", "separate", "PR", "with", "change", "to", "package", "NUMBER", "json", "if", "needed", "NUMBER", "kyldvs", "any", "chances", "to", "have", "this", "review", "I", "can", "write", "better", "description", "of", "particular", "change", "if", "you", "need", "NUMBER", "kyldvs", "I", "ve", "update", "folders", "structure", "NUMBER", "kyldvs", "any", "chance", "for", "this", "to", "be", "merge", "Oh", "boy", "Gonna", "resolve", "conflict", "in", "the", "morning", "NUMBER", "Stay", "tuned", "NUMBER", "I", "have", "setup", "payload", "in", "action", "with", "the", "intention", "to", "dispatch", "api", "data", "to", "the", "store", "NUMBER", "But", "switch", "case", "be", "not", "triggered", "inside", "Dispatcher", "NUMBER", "register", "NUMBER", "Flux", "version", "flux", "NUMBER", "NUMBER", "action", "file", "note", "have", "confirmed", "that", "receivedAllServices", "be", "triggered", "by", "use", "debugger", "use", "strict", "var", "Dispatcher", "require", "NUMBER", "dispatcher", "appDispatcher", "var", "requestActions", "require", "NUMBER", "requestActions", "var", "ActionTypes", "require", "NUMBER", "constants", "actionTypes", "var", "ResponseActions", "receivedAllServices", "function", "all_services", "console", "NUMBER", "log", "response", "received", "debugger", "Dispatcher", "NUMBER", "dispatch", "actionType", "ActionTypes", "NUMBER", "RECEIVED_ALL_SERVICES", "services", "all_servicess", "module", "NUMBER", "export", "ResponseActions", "NUMBER", "Store", "note", "debugger", "inside", "store", "action", "be", "not", "triggered", "Dispatcher", "NUMBER", "register", "function", "action", "switch", "action", "NUMBER", "actionType", "case", "ActionTypes", "NUMBER", "RECEIVED_ALL_SERVICES", "debugger", "AuthorStore", "NUMBER", "emitChange", "break", "NUMBER", "Dispatcher", "file", "var", "Dispatcher", "require", "flux", "NUMBER", "Dispatcher", "module", "NUMBER", "export", "new", "Dispatcher", "NUMBER", "actionTypes", "NUMBER", "js", "file", "use", "strict", "var", "keyMirror", "require", "fbjs", "lib", "keyMirror", "module", "NUMBER", "export", "keyMirror", "RECEIVED_ALL_SERVICES", "null", "rosnk", "how", "be", "your", "store", "created", "Is", "it", "include", "in", "the", "project", "I", "ve", "created", "a", "gist", "with", "the", "code", "you", "have", "and", "it", "worked", "for", "me", "LINK", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "How", "to", "use", "Flowtype", "with", "Flux", "What", "should", "node_modules", "flux", "flow", "folder", "do", "It", "s", "unclear", "and", "seems", "to", "be", "not", "documented", "anywhere", "Correct", "me", "if", "I", "wrong", "NUMBER", "Yeah", "I", "m", "not", "sure", "how", "yet", "either", "I", "m", "planning", "to", "set", "up", "a", "specific", "example", "on", "how", "to", "set", "up", "a", "repository", "use", "flux", "flow", "though", "Progress", "be", "over", "here", "at", "the", "moment", "LINK", "flow", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "With", "singleton", "stores", "how", "do", "you", "prevent", "all", "components", "listening", "to", "a", "certain", "store", "from", "re", "rendering", "when", "only", "one", "of", "them", "has", "update", "example", "app", "like", "instagram", "that", "have", "a", "list", "of", "photos", "and", "each", "item", "have", "actions", "that", "change", "only", "one", "of", "them", "like", "favorite", "ps", "all", "items", "in", "same", "view", "ps", "without", "shouldComponentUpdate", "kyldvs", "how", "solve", "this", "multiple", "instances", "react", "NUMBER", "When", "I", "clone", "the", "repo", "run", "the", "example", "everything", "be", "ok", "except", "In", "the", "Chrome", "console", "it", "warning", "error", "backend", "NUMBER", "js", "NUMBER", "You", "be", "use", "a", "version", "of", "React", "with", "limited", "support", "in", "this", "version", "of", "the", "devtools", "NUMBER", "Please", "upgrade", "to", "use", "at", "least", "NUMBER", "or", "you", "can", "downgrade", "to", "use", "the", "old", "version", "of", "the", "devtools", "instructions", "here", "LINK", "devtools", "tree", "devtools", "next", "how", "do", "i", "use", "this", "for", "react", "NUMBER", "The", "url", "LINK", "devtools", "tree", "devtools", "next", "how", "do", "i", "use", "this", "for", "react", "NUMBER", "LINK", "devtools", "tree", "devtools", "next", "how", "do", "i", "use", "this", "for", "react", "NUMBER", "can", "not", "be", "open", "NUMBER", "I", "know", "it", "be", "because", "this", "todomvc", "use", "the", "react", "NUMBER", "in", "the", "package", "NUMBER", "json", "NUMBER", "If", "I", "update", "react", "to", "NUMBER", "or", "above", "the", "error", "will", "gone", "off", "NUMBER", "react", "NUMBER", "_But_", "when", "I", "update", "react", "to", "NUMBER", "another", "error", "appears", "in", "the", "Chrome", "NUMBER", "The", "error", "be", "error", "warning", "NUMBER", "js", "NUMBER", "Warning", "React", "NUMBER", "render", "be", "deprecate", "NUMBER", "Please", "use", "ReactDOM", "NUMBER", "render", "from", "require", "react", "dom", "instead", "NUMBER", "I", "think", "this", "todomvc", "example", "be", "for", "beginners", "NUMBER", "So", "why", "not", "update", "the", "code", "This", "was", "huge", "issue", "for", "me", "when", "I", "start", "off", "NUMBER", "I", "spend", "a", "lot", "of", "time", "debugging", "this", "when", "all", "I", "wanted", "was", "to", "understand", "React", "NUMBER", "I", "m", "work", "on", "update", "the", "examples", "should", "be", "come", "soon", "NUMBER", "Just", "need", "to", "polish", "up", "the", "documentation", "on", "it", "Test", "for", "todomvc", "be", "also", "fail", "NUMBER", "npm", "run", "test", "todomvc", "flux", "NUMBER", "test", "home", "roman", "Documents", "projects", "playground", "flux", "react", "flux", "examples", "flux", "todomvc", "jest", "Using", "Jest", "CLI", "v", "NUMBER", "FAIL", "dispatcher", "test", "AppDispatcher", "test", "NUMBER", "js", "TypeError", "Cannot", "read", "property", "length", "of", "undefined", "at", "maybeReadMore_", "_stream_readable", "NUMBER", "js", "NUMBER", "NUMBER", "at", "home", "roman", "Documents", "projects", "playground", "flux", "react", "flux", "examples", "flux", "todomvc", "node_modules", "jest", "cli", "src", "lib", "FakeTimers", "NUMBER", "js", "NUMBER", "NUMBER", "at", "_combinedTickCallback", "internal", "process", "next_tick", "NUMBER", "js", "NUMBER", "NUMBER", "at", "process", "NUMBER", "_tickCallback", "internal", "process", "next_tick", "NUMBER", "js", "NUMBER", "NUMBER", "home", "roman", "Documents", "projects", "playground", "flux", "react", "flux", "examples", "flux", "todomvc", "node_modules", "node", "worker", "pool", "Worker", "NUMBER", "js", "NUMBER", "throw", "new", "Error", "Received", "unexpect", "data", "from", "child", "process", "data", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Hi", "everyone", "I", "just", "came", "across", "this", "problematic", "and", "wondered", "how", "I", "could", "resolve", "it", "NUMBER", "I", "have", "a", "accountService", "with", "a", "login", "method", "giving", "a", "user", "and", "a", "password", "NUMBER", "This", "method", "hash", "the", "password", "and", "start", "a", "first", "action", "TempAction", "to", "keep", "for", "a", "time", "in", "the", "accountStore", "the", "non", "encrypted", "password", "and", "user", "NUMBER", "It", "then", "makes", "an", "ajax", "request", "to", "give", "the", "hash", "and", "username", "to", "our", "server", "NUMBER", "At", "the", "end", "as", "a", "callback", "it", "triggers", "another", "action", "RetrieveAccountInfo", "located", "in", "the", "same", "Store", "which", "will", "use", "both", "server", "given", "information", "and", "temporary", "info", "NUMBER", "My", "issue", "be", "the", "following", "the", "waitFor", "be", "perfect", "for", "this", "but", "not", "when", "the", "action", "we", "be", "waiting", "for", "be", "in", "the", "same", "store", "NUMBER", "As", "this", "behavior", "will", "happen", "frequently", "in", "our", "project", "the", "use", "of", "another", "temporaryStore", "might", "become", "another", "issue", "as", "in", "the", "end", "the", "RetrieveAccountInfo", "might", "wait", "for", "different", "from", "TempAction", "action", "to", "end", "in", "the", "temporaryStore", "NUMBER", "Before", "you", "ask", "it", "be", "wished", "to", "give", "a", "hashed", "password", "to", "our", "lovely", "server", "NUMBER", "And", "damn", "it", "be", "really", "hard", "to", "explain", "so", "I", "hope", "I", "was", "clear", "enough", "NUMBER", "If", "not", "feel", "free", "to", "ask", "for", "more", "information", "NUMBER", "Accurate", "naming", "seems", "like", "an", "issue", "here", "and", "I", "think", "the", "lack", "of", "accurate", "naming", "be", "cause", "you", "to", "get", "tripped", "up", "NUMBER", "TempAction", "be", "very", "vague", "NUMBER", "RetrieveAccountInfo", "sounds", "very", "imperative", "NUMBER", "Remember", "actions", "do", "not", "say", "what", "to", "do", "NUMBER", "Instead", "they", "describe", "what", "happened", "NUMBER", "I", "m", "assuming", "we", "be", "talking", "about", "basic", "standard", "Flux", "of", "the", "variety", "that", "this", "repo", "be", "about", "NUMBER", "I", "m", "also", "assuming", "that", "all", "code", "here", "be", "on", "the", "client", "NUMBER", "Please", "correct", "me", "if", "I", "m", "wrong", "The", "first", "action", "I", "ll", "name", "LOGIN_SUBMITTED", "NUMBER", "The", "LoginStore", "responds", "to", "this", "action", "by", "storing", "the", "non", "encrypted", "username", "and", "password", "why", "do", "you", "need", "to", "do", "this", "seems", "like", "a", "security", "risk", "NUMBER", "Additionally", "the", "LOGIN_SUBMITTED", "action", "creator", "calls", "the", "WebAPIUtils", "to", "make", "a", "request", "to", "the", "server", "NUMBER", "Upon", "success", "the", "LOGIN_VALIDATED", "action", "be", "dispatched", "NUMBER", "The", "AccountStore", "responds", "to", "LOGIN_VALIDATED", "by", "retrieving", "the", "temporary", "information", "from", "the", "LoginStore", "and", "combining", "that", "with", "the", "account", "information", "from", "the", "server", "contained", "in", "the", "action", "NUMBER", "I", "don", "t", "think", "there", "be", "any", "need", "for", "waitFor", "in", "the", "retrieval", "of", "the", "temporary", "info", "since", "the", "LoginStore", "be", "not", "update", "in", "response", "to", "LOGIN_VALIDATED", "NUMBER", "separate", "component", "make", "example", "easyer", "to", "understand", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "When", "instantiating", "a", "store", "which", "be", "extending", "ReduceStore", "I", "would", "like", "to", "be", "able", "to", "pass", "the", "initial", "state", "as", "a", "constructor", "variable", "NUMBER", "My", "use", "case", "involves", "injecting", "some", "part", "of", "the", "initial", "state", "at", "the", "server", "side", "through", "window", "variables", "like", "so", "JS", "var", "initialState", "server", "injects", "state", "object", "here", "I", "could", "access", "the", "window", "var", "in", "getInitialState", "but", "I", "d", "rather", "have", "my", "store", "be", "unaware", "of", "the", "window", "and", "this", "method", "of", "injecting", "initial", "state", "NUMBER", "Am", "I", "miss", "something", "Is", "there", "any", "way", "of", "injecting", "state", "from", "outside", "of", "the", "store", "apart", "from", "firing", "some", "INITIALIZE", "action", "edorivai", "where", "do", "you", "instantiate", "stores", "alexeyraspopov", "Well", "I", "have", "this", "entrypoint", "file", "where", "I", "render", "all", "of", "my", "top", "level", "components", "NUMBER", "This", "be", "where", "I", "d", "wish", "to", "instantiate", "my", "stores", "as", "well", "NUMBER", "I", "m", "also", "curious", "how", "server", "side", "rendering", "injects", "data", "into", "ReduceStore", "NUMBER", "Here", "be", "how", "I", "do", "LINK", "server", "side", "rendering", "with", "css", "modules", "blob", "NUMBER", "ba", "NUMBER", "be", "NUMBER", "e", "NUMBER", "b", "NUMBER", "ef", "NUMBER", "b", "NUMBER", "fb", "NUMBER", "c", "NUMBER", "src", "express", "NUMBER", "js", "L", "NUMBER", "still", "wip", "NUMBER", "Because", "it", "s", "usual", "to", "deal", "with", "ReduceStore", "as", "singleton", "I", "let", "it", "be", "in", "server", "side", "and", "just", "inject", "data", "before", "a", "use", "and", "clean", "it", "right", "afterward", "even", "though", "I", "didn", "t", "like", "it", "NUMBER", "I", "guess", "that", "Flux", "Container", "has", "to", "have", "a", "data", "injection", "point", "for", "its", "this", "NUMBER", "ate", "on", "server", "side", "rendering", "with", "use", "context", "LINK", "or", "something", "NUMBER", "If", "it", "do", "we", "don", "t", "have", "to", "care", "stores", "instantiation", "NUMBER", "Hi", "if", "getInitialState", "be", "supposed", "to", "be", "an", "empty", "state", "where", "would", "you", "initialise", "the", "store", "data", "I", "m", "a", "bit", "lost", "class", "MusicStore", "extend", "ReduceStore", "constructor", "super", "Dispatcher", "this", "NUMBER", "ate", "list", "favorites", "getInitialState", "return", "NUMBER", "where", "would", "I", "pass", "initial", "data", "to", "my", "this", "NUMBER", "data", "object", "Hi", "When", "attempting", "to", "extend", "FluxContainer", "and", "create", "a", "class", "from", "it", "on", "the", "server", "side", "in", "Node", "v", "NUMBER", "x", "the", "component", "throw", "an", "error", "when", "instantiated", "TypeError", "Class", "constructor", "OverviewComponent", "cannot", "be", "invoked", "without", "new", "at", "PureFluxContainerClass", "NUMBER", "FluxContainerClass", "ProjectLocation", "node_modules", "flux", "lib", "FluxContainer", "NUMBER", "js", "NUMBER", "NUMBER", "The", "component", "looks", "like", "this", "class", "OverviewComponent", "extend", "React", "NUMBER", "Component", "NUMBER", "module", "NUMBER", "export", "Flux", "NUMBER", "Container", "NUMBER", "create", "OverviewComponent", "Note", "that", "this", "be", "not", "transpiled", "this", "be", "executed", "natively", "with", "Node", "v", "NUMBER", "x", "s", "ES", "NUMBER", "support", "NUMBER", "I", "believe", "this", "error", "be", "because", "Flux", "be", "expecting", "the", "component", "to", "be", "transpiled", "to", "ES", "NUMBER", "and", "therefore", "be", "able", "to", "call", "the", "constructor", "be", "calling", "it", "directly", "which", "it", "can", "t", "do", "in", "ES", "NUMBER", "Is", "this", "correct", "I", "m", "not", "sure", "if", "we", "will", "try", "to", "support", "this", "or", "suggest", "to", "just", "use", "transpiled", "file", "but", "please", "provide", "more", "information", "to", "debug", "NUMBER", "What", "precisely", "be", "the", "line", "of", "code", "that", "be", "throw", "Why", "would", "you", "suggest", "use", "transpiled", "file", "ES", "NUMBER", "should", "eventually", "be", "natively", "support", "in", "runtimes", "so", "Flux", "should", "follow", "the", "ES", "NUMBER", "spec", "properly", "NUMBER", "It", "so", "happens", "that", "Node", "v", "NUMBER", "x", "be", "there", "now", "NUMBER", "I", "believe", "all", "the", "information", "necessary", "be", "display", "above", "NUMBER", "In", "FluxContainer", "NUMBER", "js", "on", "line", "NUMBER", "Of", "the", "build", "version", "it", "calls", "_Base", "NUMBER", "call", "this", "props", "Inside", "the", "create", "function", "NUMBER", "_Base", "in", "this", "instance", "be", "the", "pass", "component", "OverviewComponent", "in", "my", "case", "so", "essentially", "the", "code", "be", "calling", "OverviewComponent", "NUMBER", "call", "this", "props", "or", "effectively", "OverviewComponent", "props", "NUMBER", "In", "ES", "NUMBER", "one", "cannot", "call", "the", "constructor", "directly", "you", "must", "use", "new", "to", "instantiate", "the", "class", "NUMBER", "Okay", "I", "was", "misunderstanding", "you", "mean", "your", "code", "be", "not", "transpiled", "the", "lib", "FluxContainer", "code", "be", "transpiled", "NUMBER", "This", "may", "just", "mean", "we", "need", "to", "turn", "on", "stricter", "options", "when", "build", "can", "you", "try", "NUMBER", "Change", "this", "line", "to", "false", "LINK", "options", "NUMBER", "js", "L", "NUMBER", "NUMBER", "Run", "npm", "run", "prepublish", "NUMBER", "And", "then", "try", "to", "run", "your", "code", "again", "Thanks", "for", "the", "response", "Kyle", "NUMBER", "I", "ve", "just", "tried", "that", "and", "unfortunately", "I", "had", "the", "same", "results", "NUMBER", "NUMBER", "Fresh", "clone", "into", "my", "local", "node_modules", "NUMBER", "Change", "scripts", "babel", "default", "options", "NUMBER", "js", "L", "NUMBER", "NUMBER", "npm", "install", "TypeError", "Class", "constructor", "OverviewComponent", "cannot", "be", "invoked", "without", "new", "at", "PureFluxContainerClass", "NUMBER", "FluxContainerClass", "ProjectDir", "node_modules", "flux", "lib", "FluxContainer", "NUMBER", "js", "NUMBER", "NUMBER", "at", "new", "PureFluxContainerClass", "ProjectDir", "node_modules", "flux", "lib", "FluxContainer", "NUMBER", "js", "NUMBER", "NUMBER", "at", "ReactCompositeComponentMixin", "NUMBER", "_constructComponentWithoutOwner", "ProjectDir", "node_modules", "react", "lib", "ReactCompositeComponent", "NUMBER", "js", "NUMBER", "NUMBER", "at", "ReactCompositeComponentMixin", "NUMBER", "_constructComponent", "ProjectDir", "node_modules", "react", "lib", "ReactCompositeComponent", "NUMBER", "js", "NUMBER", "NUMBER", "at", "ReactCompositeComponentMixin", "NUMBER", "mountComponent", "ProjectDir", "node_modules", "react", "lib", "ReactCompositeComponent", "NUMBER", "js", "NUMBER", "NUMBER", "at", "wrapper", "as", "mountComponent", "ProjectDir", "node_modules", "react", "lib", "ReactPerf", "NUMBER", "js", "NUMBER", "NUMBER", "at", "Object", "NUMBER", "ReactReconciler", "NUMBER", "mountComponent", "ProjectDir", "node_modules", "react", "lib", "ReactReconciler", "NUMBER", "js", "NUMBER", "NUMBER", "at", "ReactDOMComponent", "NUMBER", "ReactMultiChild", "NUMBER", "Mixin", "NUMBER", "mountChildren", "ProjectDir", "node_modules", "react", "lib", "ReactMultiChild", "NUMBER", "js", "NUMBER", "NUMBER", "at", "ReactDOMComponent", "NUMBER", "Mixin", "NUMBER", "_createContentMarkup", "ProjectDir", "node_modules", "react", "lib", "ReactDOMComponent", "NUMBER", "js", "NUMBER", "NUMBER", "at", "ReactDOMComponent", "NUMBER", "Mixin", "NUMBER", "mountComponent", "ProjectDir", "node_modules", "react", "lib", "ReactDOMComponent", "NUMBER", "js", "NUMBER", "NUMBER", "If", "anyone", "else", "comes", "across", "this", "here", "be", "a", "possible", "ugly", "workaround", "FluxContainerConverter", "NUMBER", "js", "module", "NUMBER", "export", "convert", "function", "containerClass", "const", "tmp", "containerClass", "containerClass", "function", "NUMBER", "args", "return", "new", "tmp", "NUMBER", "args", "containerClass", "NUMBER", "prototype", "tmp", "NUMBER", "prototype", "containerClass", "NUMBER", "getStores", "tmp", "NUMBER", "getStores", "containerClass", "NUMBER", "calculateState", "tmp", "NUMBER", "calculateState", "return", "containerClass", "Now", "you", "can", "use", "it", "to", "create", "your", "FluxContainer", "like", "this", "var", "fluxContainerConverter", "require", "NUMBER", "FluxContainerConverter", "Container", "NUMBER", "create", "fluxContainerConverter", "NUMBER", "convert", "MyComponent", "Such", "a", "mess", "There", "be", "a", "sample", "in", "official", "docs", "page", "but", "doesn", "t", "work", "It", "s", "brilliant", "NUMBER", "LINK", "utils", "NUMBER", "html", "container", "Sad", "but", "true", "Flux", "Containers", "be", "not", "work", "with", "es", "NUMBER", "I", "do", "not", "understand", "why", "be", "not", "fix", "till", "now", "in", "this", "long", "period", "of", "time", "NUMBER", "murilobr", "thanks", "provide", "the", "workaround", "NUMBER", "It", "really", "helps", "NUMBER", "I", "know", "this", "be", "an", "abbreviated", "code", "but", "when", "I", "was", "reading", "this", "docs", "I", "get", "really", "confused", "where", "the", "call", "this", "NUMBER", "ate", "NUMBER", "allTodos", "previously", "in", "line", "NUMBER", "was", "get", "the", "function", "from", "so", "I", "had", "to", "go", "to", "the", "source", "NUMBER", "I", "think", "add", "this", "code", "won", "t", "harm", "the", "brevity", "of", "the", "code", "and", "will", "make", "it", "more", "undestandable", "NUMBER", "For", "example", "what", "be", "the", "expectation", "when", "you", "override", "componenWillMount", "and", "then", "pass", "it", "to", "FluxContainer", "NUMBER", "create", "should", "it", "still", "work", "right", "now", "the", "answer", "be", "yes", "What", "about", "the", "timing", "of", "it", "in", "relation", "to", "static", "getStores", "On", "the", "NUMBER", "it", "always", "happens", "before", "getStores", "on", "NUMBER", "it", "will", "happen", "after", "in", "order", "to", "fix", "NUMBER", "We", "should", "document", "this", "more", "clearly", "NUMBER", "The", "next", "link", "of", "the", "following", "page", "be", "NUMBER", "LINK", "and", "tool", "NUMBER", "html", "content", "Thanks", "composed", "message", "as", "the", "last", "message", "in", "the", "ThreadSection", "component", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Thanks", "for", "the", "PR", "NUMBER", "There", "be", "no", "need", "to", "update", "lib", "dist", "file", "in", "the", "PR", "NUMBER", "We", "do", "that", "in", "one", "big", "batch", "when", "we", "make", "a", "release", "every", "once", "in", "a", "while", "NUMBER", "Please", "just", "submit", "the", "small", "change", "you", "be", "make", "LINK", "NUMBER", "Can", "you", "provide", "more", "context", "in", "your", "description", "so", "that", "we", "can", "understand", "why", "this", "change", "be", "necessary", "A", "code", "example", "of", "something", "that", "breaks", "would", "be", "helpful", "NUMBER", "kyldvs", "facebook", "github", "bot", "class", "Foo", "extend", "Component", "constructor", "super", "this", "NUMBER", "displayName", "Foo", "this", "NUMBER", "ate", "bar", "some", "value", "static", "getStores", "return", "FooStore", "static", "calculateState", "return", "stateInStore", "FooStore", "NUMBER", "getState", "NUMBER", "get", "stateInStore", "render", "const", "bar", "this", "NUMBER", "ate", "bar", "be", "undefine", "in", "the", "first", "render", "becase", "container", "rewrite", "the", "state", "after", "constructor", "NUMBER", "const", "FooContainer", "Container", "NUMBER", "create", "Foo", "export", "default", "FooContainer", "Sometimes", "I", "don", "t", "want", "to", "put", "all", "state", "in", "the", "stores", "like", "form", "in", "the", "login", "page", "I", "just", "bind", "the", "input", "values", "on", "the", "component", "state", "but", "now", "I", "cant", "find", "a", "way", "to", "set", "the", "component", "initial", "state", "container", "will", "rewrite", "my", "state", "NUMBER", "I", "think", "mixing", "component", "state", "with", "store", "state", "in", "a", "single", "component", "be", "a", "bad", "pattern", "NUMBER", "A", "container", "s", "only", "responsibility", "should", "be", "connecting", "state", "from", "a", "store", "to", "a", "view", "NUMBER", "So", "I", "would", "rewrite", "the", "above", "as", "class", "FooView", "extend", "Component", "static", "propTypes", "stateInStore", "PropTypes", "NUMBER", "ring", "constructor", "props", "super", "props", "this", "NUMBER", "ate", "bar", "some", "value", "render", "const", "bar", "this", "NUMBER", "ate", "NUMBER", "bar", "const", "stateInStore", "this", "NUMBER", "props", "NUMBER", "ateInStore", "render", "something", "class", "FooContainer", "extend", "Component", "static", "getStores", "return", "FooStore", "static", "calculateState", "return", "stateInStore", "FooStore", "NUMBER", "getState", "NUMBER", "get", "stateInStore", "render", "return", "TAG", "Thank", "you", "I", "will", "try", "this", "in", "my", "code", "NUMBER", "kyldvs", "Is", "this", "also", "the", "right", "way", "to", "resole", "LINK", "LINK", "In", "FooView", "s", "componentDidMount", "call", "an", "action", "to", "change", "state", "in", "the", "store", "NUMBER", "I", "think", "that", "be", "a", "different", "issue", "there", "be", "a", "small", "period", "of", "time", "through", "the", "mounting", "process", "that", "can", "cause", "change", "to", "be", "ignored", "by", "a", "container", "NUMBER", "One", "example", "of", "where", "this", "would", "break", "be", "when", "use", "the", "react", "intl", "s", "Container", "NUMBER", "create", "injectIntl", "Component", "where", "the", "injectIntl", "do", "an", "invariant", "check", "on", "the", "context", "NUMBER", "Does", "flux", "support", "to", "build", "website", "use", "NUMBER", "Rd", "party", "JSON", "r", "XML", "API", "I", "like", "to", "build", "website", "like", "redbus", "ticketghoose", "and", "abhibus", "it", "s", "a", "bus", "booking", "engine", "use", "their", "API", "Sorry", "I", "change", "things", "so", "this", "had", "conflict", "just", "did", "you", "change", "here", "though", "LINK", "Hi", "kyldvs", "I", "have", "an", "API", "documents", "for", "can", "design", "it", "Hi", "I", "need", "to", "frontend", "and", "backend", "design", "use", "XML", "r", "JSON", "API", "I", "m", "not", "sure", "what", "your", "goal", "be", "tollbus", "but", "this", "isn", "t", "an", "appropriate", "place", "for", "it", "NUMBER", "If", "you", "have", "a", "specific", "question", "about", "how", "Flux", "works", "please", "read", "the", "examples", "and", "documentation", "and", "if", "it", "be", "still", "unanswered", "file", "a", "new", "issue", "NUMBER", "Currently", "I", "have", "NUMBER", "component", "A", "B", "and", "C", "need", "to", "use", "the", "same", "kind", "of", "data", "from", "server", "All", "of", "NUMBER", "component", "can", "listen", "to", "Store", "change", "and", "get", "data", "from", "Store", "NUMBER", "But", "the", "problem", "be", "I", "dont", "know", "where", "to", "place", "the", "data", "fetching", "action", "NUMBER", "If", "all", "NUMBER", "components", "do", "the", "data", "fetching", "action", "It", "will", "cause", "the", "same", "data", "to", "be", "fetched", "multiple", "time", "and", "component", "will", "re", "render", "many", "time", "when", "data", "received", "If", "I", "place", "the", "data", "fetching", "action", "in", "a", "top", "level", "component", "and", "these", "NUMBER", "components", "only", "listen", "to", "store", "change", "it", "will", "be", "hard", "to", "reuse", "these", "NUMBER", "components", "NUMBER", "In", "summary", "should", "I", "fetch", "the", "data", "from", "server", "and", "listen", "to", "Store", "change", "in", "the", "same", "component", "to", "make", "component", "easier", "to", "reuse", "or", "should", "I", "fetch", "the", "data", "in", "a", "top", "component", "and", "listen", "to", "Store", "change", "in", "lower", "level", "component", "I", "thought", "we", "should", "not", "fetch", "data", "in", "Store", "The", "data", "should", "be", "fetch", "via", "action", "from", "View", "if", "I", "recall", "correctly", "But", "in", "general", "I", "understand", "the", "concept", "of", "status", "One", "more", "question", "be", "that", "if", "status", "be", "foo_loaded", "so", "we", "can", "get", "data", "directly", "from", "Store", "and", "do", "not", "fire", "Action", "to", "fetch", "data", "NUMBER", "But", "after", "a", "while", "the", "data", "be", "out", "of", "date", "but", "still", "in", "the", "Store", "NUMBER", "How", "we", "can", "refresh", "the", "data", "after", "a", "while", "I", "know", "one", "solution", "be", "use", "real", "time", "Websocket", "to", "notify", "when", "the", "data", "be", "change", "from", "the", "server", "NUMBER", "Other", "than", "that", "be", "there", "any", "work", "around", "kyldvs", "Am", "i", "right", "that", "on", "your", "FooStore", "example", "there", "be", "a", "lot", "of", "chance", "of", "dispathing", "in", "a", "middle", "of", "another", "dispatching", "I", "know", "from", "the", "conf", "you", "track", "almost", "all", "loading", "state", "at", "FB", "NUMBER", "But", "the", "FB", "AdsManager", "seems", "to", "don", "t", "track", "loading", "with", "actions", "but", "stores", "directly", "mutate", "state", "in", "some", "cases", "for", "modal", "NUMBER", "Since", "these", "stores", "be", "mainly", "use", "for", "initialization", "I", "think", "there", "be", "nothing", "wrong", "with", "that", "You", "just", "mutate", "the", "last", "state", "because", "you", "know", "you", "can", "t", "give", "it", "to", "the", "components", "since", "this", "be", "not", "what", "they", "ask", "NUMBER", "be", "it", "still", "a", "good", "practice", "Add", "an", "after", "dispatch", "callback", "on", "dispatcher", "to", "call", "the", "start_load", "looks", "better", "NUMBER", "Will", "you", "update", "the", "dispatcher", "as", "fisherwebdev", "said", "in", "NUMBER", "No", "there", "should", "be", "no", "chance", "of", "dispatching", "in", "the", "middle", "of", "a", "dispatch", "otherwise", "your", "application", "will", "crash", "NUMBER", "In", "my", "simplified", "example", "yeah", "it", "could", "be", "possible", "if", "you", "be", "calling", "getState", "within", "another", "store", "NUMBER", "In", "practice", "I", "think", "we", "do", "something", "like", "this", "in", "some", "base", "class", "util", "so", "we", "don", "t", "keep", "write", "it", "getState", "const", "state", "super", "NUMBER", "getState", "if", "state", "NUMBER", "atus", "not_loaded", "if", "FooDispatcher", "NUMBER", "isDispatching", "setImmediate", "FooDispatcher", "NUMBER", "dispatch", "type", "start_loading", "else", "FooDispatcher", "NUMBER", "dispatch", "type", "start_loading", "return", "state", "Yes", "use", "to", "we", "would", "directly", "mutate", "the", "state", "of", "a", "store", "from", "not_loaded", "to", "loading", "without", "emitting", "a", "change", "NUMBER", "It", "generally", "works", "and", "be", "a", "bit", "simpler", "but", "strictly", "speaking", "it", "breaks", "some", "of", "the", "core", "principles", "of", "the", "Flux", "architecture", "so", "we", "moved", "away", "from", "that", "NUMBER", "In", "particular", "you", "should", "always", "emit", "a", "change", "when", "your", "state", "change", "and", "you", "must", "only", "emit", "a", "change", "during", "a", "dispatch", "NUMBER", "In", "the", "old", "system", "it", "was", "impossible", "to", "maintain", "these", "two", "conditions", "NUMBER", "No", "we", "do", "not", "have", "any", "plan", "to", "add", "an", "after", "dispatch", "callback", "NUMBER", "We", "played", "around", "with", "it", "for", "a", "bit", "but", "it", "was", "not", "ever", "use", "and", "generally", "complicated", "the", "system", "NUMBER", "kyldvs", "One", "more", "question", "be", "in", "FB", "how", "do", "you", "manage", "the", "loading", "state", "of", "entity", "For", "example", "I", "have", "BookStore", "to", "manage", "all", "the", "book", "in", "library", "NUMBER", "In", "my", "application", "sometime", "I", "need", "to", "fetch", "data", "for", "NUMBER", "book", "only", "but", "sometime", "I", "need", "to", "get", "data", "for", "all", "available", "book", "How", "do", "you", "design", "the", "state", "to", "manage", "both", "the", "single", "item", "fetching", "and", "group", "item", "fetching", "Hi", "guys", "I", "have", "a", "case", "NUMBER", "I", "need", "to", "check", "if", "the", "Id", "be", "valid", "from", "Store", "or", "not", "but", "I", "need", "to", "call", "Store", "function", "here", "NUMBER", "Is", "it", "a", "good", "practice", "Thanks", "Action", "NUMBER", "js", "js", "save", "id", "Check", "if", "be", "valid", "or", "not", "if", "Store", "NUMBER", "checkValid", "id", "api", "NUMBER", "save", "id", "NUMBER", "en", "dispatchSuccess", "else", "dispatchError", "kyldvs", "but", "it", "will", "not", "a", "good", "practice", "for", "Action", "Dispatcher", "Store", "View", "We", "call", "Store", "in", "Action", "be", "look", "like", "a", "loop", "back", "NUMBER", "kyldvs", "Sorry", "but", "how", "about", "use", "Store", "in", "View", "to", "follow", "one", "way", "direction", "NUMBER", "Is", "it", "a", "better", "way", "onClick", "let", "name", "ReactDOM", "NUMBER", "findDOMNode", "this", "NUMBER", "refs", "username", "NUMBER", "value", "action", "NUMBER", "changeCurrentUserName", "CurrentUserStore", "NUMBER", "getID", "name", "kyldvs", "Yeah", "Thanks", "So", "can", "you", "update", "FLUX", "document", "about", "good", "practice", "for", "use", "in", "Action", "Store", "Views", "src", "libs", "dispatcher", "NUMBER", "js", "Missing", "class", "properties", "transform", "NUMBER", "while", "parsing", "file", "src", "libs", "dispatcher", "NUMBER", "js", "I", "be", "sorry", "that", "I", "be", "a", "little", "unsure", "why", "this", "be", "happening", "I", "be", "trying", "to", "include", "use", "browserify", "like", "this", "var", "bundler", "browserify", "config", "NUMBER", "js", "NUMBER", "src", "app", "NUMBER", "jsx", "src", "libs", "dispatcher", "NUMBER", "js", "src", "libs", "microevent", "NUMBER", "js", "args", "Browserify", "NUMBER", "plugin", "watchify", "ignoreWatch", "node_modules", "bower_components", "Watchify", "to", "watch", "source", "file", "change", "NUMBER", "transform", "babelify", "presets", "es", "NUMBER", "react", "Babel", "tranforms", "Thank", "you", "When", "installing", "flux", "via", "npm", "there", "be", "a", "fbjs", "NUMBER", "alpha", "NUMBER", "in", "flux", "s", "package", "json", "NUMBER", "This", "issue", "causes", "an", "Error", "build", "DependencyGraph", "error", "while", "use", "react", "native", "packager", "NUMBER", "node", "version", "v", "NUMBER", "npm", "version", "NUMBER", "Yes", "React", "Native", "will", "be", "update", "in", "the", "come", "weeks", "ETA", "NUMBER", "NUMBER", "wks", "till", "release", "NUMBER", "The", "PR", "be", "ready", "but", "FB", "be", "having", "issue", "merge", "it", "so", "thanks", "for", "your", "patience", "NUMBER", "Yes", "the", "plan", "be", "to", "fix", "a", "bug", "and", "allow", "different", "copies", "of", "fbjs", "to", "co", "exist", "under", "node_modules", "NUMBER", "Is", "there", "a", "workaround", "for", "this", "Fork", "this", "repo", "update", "the", "deep", "use", "your", "fork", "NUMBER", "NUMBER", "on", "the", "issue", "Prevents", "alt", "from", "be", "use", "in", "react", "native", "and", "a", "number", "of", "react", "native", "demo", "apps", "that", "use", "alt", "alt", "NUMBER", "flux", "NUMBER", "fbemitter", "NUMBER", "fbjs", "NUMBER", "alpha", "NUMBER", "be", "promise", "NUMBER", "transmitter", "NUMBER", "Is", "this", "fix", "in", "react", "native", "NUMBER", "tristangodfrey", "Not", "fix", "as", "of", "RN", "NUMBER", "I", "m", "trying", "to", "upgrade", "my", "project", "now", "and", "still", "get", "this", "conflict", "NUMBER", "Can", "we", "PLEASE", "fix", "this", "kyldvs", "i", "get", "that", "chasing", "dependencies", "be", "a", "chore", "but", "breaking", "tons", "of", "build", "for", "users", "be", "just", "evil", "NUMBER", "Submit", "a", "PR", "test", "plan", "if", "this", "be", "important", "to", "you", "NUMBER", "On", "the", "fbemitter", "repo", "kyldvs", "was", "receptive", "to", "merge", "dep", "upgrades", "w", "a", "responsible", "test", "plan", "NUMBER", "Please", "suggest", "an", "actionable", "test", "plan", "NUMBER", "I", "ll", "gladly", "submit", "a", "PR", "for", "the", "package", "NUMBER", "json", "NUMBER", "On", "Thu", "Mar", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "James", "Ide", "notifications", "github", "NUMBER", "com", "write", "Submit", "a", "PR", "test", "plan", "if", "this", "be", "important", "to", "you", "NUMBER", "On", "the", "fbemitter", "repo", "kyldvs", "LINK", "was", "receptive", "to", "merge", "dep", "upgrades", "w", "a", "responsible", "test", "plan", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "npm", "test", "be", "a", "good", "start", "NUMBER", "Also", "verifying", "that", "it", "works", "in", "a", "complex", "app", "be", "another", "good", "test", "NUMBER", "For", "now", "this", "be", "what", "helps", "rm", "rf", "NUMBER", "node_modules", "fbemitter", "node_modules", "fbjs", "rm", "rf", "NUMBER", "node_modules", "flux", "node_modules", "fbjs", "rm", "rf", "NUMBER", "node_modules", "react", "node_modules", "fbjs", "rm", "rf", "NUMBER", "node_modules", "react", "native", "node_modules", "fbjs", "watchman", "watch", "del", "all", "rm", "rf", "TMPDIR", "react", "packager", "I", "have", "add", "this", "code", "to", "package", "NUMBER", "json", "as", "a", "npm", "task", "clean", "because", "every", "time", "I", "install", "a", "package", "via", "npm", "it", "also", "installs", "miss", "fbjs", "so", "this", "fix", "be", "pretty", "often", "use", "NUMBER", "Yes", "feel", "free", "to", "submit", "a", "PR", "NUMBER", "I", "don", "t", "use", "react", "native", "so", "I", "simply", "don", "t", "know", "how", "to", "update", "this", "in", "such", "a", "way", "to", "unblock", "everyone", "NUMBER", "If", "LINK", "fix", "react", "native", "we", "can", "just", "go", "with", "that", "NUMBER", "That", "really", "would", "It", "s", "just", "the", "alpha", "dependency", "that", "triggers", "a", "conflict", "because", "NPM", "thinks", "it", "has", "to", "install", "two", "version", "of", "it", "and", "spits", "out", "a", "warning", "about", "it", "NUMBER", "I", "doubt", "it", "s", "just", "the", "alpha", "dep", "it", "s", "likely", "any", "dep", "that", "doesn", "t", "match", "exactly", "what", "react", "native", "uses", "NUMBER", "It", "s", "a", "stupid", "thing", "the", "chase", "but", "might", "be", "necessary", "short", "term", "NUMBER", "Updated", "to", "NUMBER", "here", "LINK", "LINK", "utils", "NUMBER", "html", "content", "Flux", "Document", "said", "that", "Container", "should", "have", "no", "props", "but", "in", "some", "cases", "I", "find", "it", "quite", "hard", "to", "follow", "this", "principle", "NUMBER", "For", "example", "I", "have", "NUMBER", "component", "Post", "list", "Post", "Comment", "list", "The", "Post", "list", "can", "be", "easily", "wrap", "with", "container", "fetch", "data", "from", "store", "But", "I", "need", "Post", "id", "to", "fetch", "Comment", "list", "So", "my", "question", "be", "if", "I", "want", "to", "create", "a", "Container", "for", "Comment", "list", "should", "I", "pass", "in", "some", "props", "or", "how", "to", "keep", "the", "Container", "pure", "Add", "new", "action", "that", "be", "be", "dispatched", "to", "the", "error", "message", "NUMBER", "npm", "v", "NUMBER", "try", "to", "dedupe", "the", "dependencies", "by", "default", "and", "keep", "dependencies", "up", "to", "date", "helps", "better", "deduplication", "NUMBER", "Though", "it", "seems", "that", "this", "repository", "be", "not", "test", "on", "any", "CIs", "I", "run", "npm", "test", "on", "my", "PC", "and", "it", "pass", "all", "the", "test", "NUMBER", "npm", "t", "flux", "NUMBER", "test", "Users", "Shinnosuke", "github", "flux", "NODE_ENV", "test", "jest", "Using", "Jest", "CLI", "v", "NUMBER", "PASS", "src", "test", "Dispatcher", "test", "NUMBER", "js", "NUMBER", "s", "PASS", "src", "test", "FluxStoreGroup", "test", "NUMBER", "js", "NUMBER", "s", "PASS", "src", "stores", "test", "FluxStore", "test", "NUMBER", "js", "NUMBER", "s", "PASS", "src", "stores", "test", "FluxMapStore", "test", "NUMBER", "js", "NUMBER", "s", "NUMBER", "test", "pass", "NUMBER", "total", "Run", "time", "NUMBER", "s", "We", "don", "t", "_have", "to_", "and", "I", "m", "inclined", "not", "to", "I", "think", "RN", "has", "remove", "knowledge", "of", "fbjs", "from", "it", "s", "packager", "at", "this", "point", "and", "normal", "resolution", "just", "works", "NUMBER", "I", "think", "it", "s", "a", "losing", "game", "because", "any", "combination", "of", "package", "be", "not", "going", "to", "have", "the", "same", "set", "of", "deps", "NUMBER", "Perhaps", "once", "we", "feel", "comfortable", "and", "bump", "fbjs", "to", "NUMBER", "x", "this", "won", "t", "be", "much", "of", "an", "issue", "NUMBER", "Then", "you", "have", "to", "copy", "in", "invariant", "and", "the", "goal", "of", "fbjs", "was", "to", "avoid", "that", "NUMBER", "I", "d", "rather", "not", "do", "that", "here", "and", "keep", "a", "consistent", "process", "for", "our", "package", "NUMBER", "jhubert", "benjamn", "tomocchino", "Guys", "I", "be", "not", "sure", "whether", "my", "question", "be", "valid", "or", "not", "but", "I", "could", "not", "able", "to", "achieve", "the", "problem", "given", "have", "discussed", "in", "the", "channel", "too", "LINK", "ua", "reactjs", "My", "question", "when", "it", "be", "bind", "to", "defaultValue", "When", "I", "use", "defaultChecked", "this", "NUMBER", "ate", "NUMBER", "typeSelected", "locker", "The", "select", "box", "be", "not", "able", "to", "mark", "wrt", "the", "condition", "given", "but", "manually", "could", "able", "to", "mark", "checked", "notchecked", "NUMBER", "When", "I", "use", "checked", "this", "NUMBER", "ate", "NUMBER", "typeSelected", "locker", "On", "this", "checked", "attribute", "the", "checkbox", "be", "able", "to", "mark", "as", "checked", "based", "on", "select", "box", "option", "value", "NUMBER", "BUT", "in", "this", "case", "the", "manual", "way", "of", "checking", "or", "un", "checking", "be", "not", "happening", "NUMBER", "Have", "a", "full", "question", "with", "fiddle", "here", "LINK", "defaultchecked", "be", "not", "allowing", "to", "select", "the", "checkbox", "Hi", "I", "d", "like", "to", "submit", "this", "fix", "to", "update", "the", "time", "and", "date", "of", "the", "threadlist", "upon", "creating", "a", "message", "NUMBER", "It", "may", "not", "be", "perfect", "since", "it", "has", "the", "require", "for", "the", "MessageStore", "within", "the", "Action", "Handler", "in", "the", "ThreadStore", "NUMBER", "I", "did", "this", "to", "avoid", "a", "circular", "dependency", "between", "the", "ThreadStore", "and", "the", "MessageStore", "NUMBER", "If", "someone", "knows", "a", "cleaner", "solution", "I", "would", "be", "happy", "to", "refactor", "this", "NUMBER", "Note", "There", "was", "a", "pull", "request", "NUMBER", "that", "solve", "this", "problem", "differently", "but", "it", "was", "rejected", "without", "feedback", "NUMBER", "Note", "The", "change", "also", "include", "mods", "to", "package", "NUMBER", "json", "NUMBER", "This", "relate", "to", "NUMBER", "which", "was", "mandatory", "for", "me", "to", "get", "the", "code", "to", "run", "before", "change", "otherwise", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Hi", "I", "had", "to", "update", "dependencies", "for", "the", "project", "to", "run", "on", "my", "local", "machine", "NUMBER", "It", "might", "be", "a", "good", "idea", "to", "update", "to", "the", "latest", "package", "anyway", "NUMBER", "Thank", "you", "for", "considering", "this", "pull", "request", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Can", "you", "please", "add", "some", "sort", "of", "test", "plan", "screenshots", "demonstrating", "that", "it", "still", "works", "sure", "NUMBER", "Hi", "guys", "NUMBER", "I", "have", "a", "_Component_", "NUMBER", "I", "want", "after", "componentDidMount", "call", "action", "to", "get", "all", "the", "_links_", "NUMBER", "But", "it", "do", "not", "work", "so", "I", "have", "to", "use", "_setTimeout_", "to", "make", "it", "work", "NUMBER", "ts", "class", "MainComponent", "extend", "React", "NUMBER", "Component", "TAG", "static", "getStores", "Array", "TAG", "return", "MainStore", "static", "calculateState", "prevState", "State", "any", "console", "NUMBER", "log", "MainComponent", "calculateState", "let", "state", "MainStore", "NUMBER", "getState", "return", "links", "state", "NUMBER", "get", "links", "currentComponent", "state", "NUMBER", "get", "currentComponent", "componentDidMount", "Call", "actions", "after", "MainComponent", "init", "Store", "setTimeout", "MainActions", "NUMBER", "getLinks", "This", "works", "for", "me", "NUMBER", "Make", "sure", "you", "be", "registering", "your", "store", "with", "the", "dispatcher", "prior", "to", "componentDidMount", "NUMBER", "It", "might", "be", "that", "we", "be", "use", "a", "anti", "pattern", "but", "I", "have", "i", "similar", "problem", "NUMBER", "We", "be", "creating", "a", "fluxcontainer", "and", "in", "componentDidMount", "we", "be", "dispatching", "a", "action", "to", "populate", "certain", "state", "properties", "in", "a", "store", "NUMBER", "Since", "the", "flux", "container", "calls", "the", "base", "NUMBER", "prototype", "NUMBER", "componentDidMount", "before", "it", "sets", "up", "the", "change", "listener", "any", "action", "I", "dispatch", "will", "not", "be", "reflected", "in", "the", "UI", "since", "the", "change", "event", "be", "not", "pick", "up", "by", "the", "component", "NUMBER", "Could", "the", "call", "to", "the", "component", "defined", "componentDidMount", "method", "be", "moved", "to", "after", "the", "fluxcontainer", "has", "attached", "its", "listener", "Or", "be", "it", "some", "better", "way", "of", "solving", "this", "particular", "usecase", "Fixed", "here", "LINK", "Nice", "thanks", "This", "will", "let", "me", "remove", "some", "setTimeout", "hacks", "NUMBER", "Really", "appreciated", "kyldvs", "thanks", "please", "release", "it", "to", "npm", "flux", "todomvc", "npm", "test", "fail", "due", "to", "LINK", "TypeError", "Cannot", "read", "property", "length", "of", "undefined", "at", "maybeReadMore_", "_stream_readable", "NUMBER", "js", "NUMBER", "NUMBER", "at", "home", "xxx", "node_modules", "gulp", "jest", "node_modules", "jest", "cli", "src", "lib", "FakeTimers", "NUMBER", "js", "NUMBER", "NUMBER", "at", "process", "NUMBER", "_tickCallback", "node", "NUMBER", "js", "NUMBER", "NUMBER", "Other", "examples", "do", "not", "fail", "but", "upgrade", "any", "way", "NUMBER", "I", "did", "not", "upgrade", "the", "main", "flux", "package", "NUMBER", "json", "as", "the", "test", "do", "not", "currently", "pass", "NUMBER", "Just", "confirming", "that", "I", "was", "experience", "the", "same", "error", "until", "I", "find", "your", "merge", "request", "NUMBER", "Upgraded", "the", "version", "and", "all", "test", "pass", "NUMBER", "Thanks", "I", "cannot", "understand", "where", "be", "the", "point", "at", "which", "server", "side", "data", "message", "threads", "appear", "in", "the", "app", "NUMBER", "Where", "be", "that", "line", "of", "code", "that", "fetches", "data", "from", "the", "server", "or", "in", "this", "case", "from", "localStore", "Here", "be", "how", "initial", "state", "of", "MessageSection", "be", "created", "NUMBER", "And", "how", "MessageStore", "NUMBER", "getAllForCurrentThread", "looks", "like", "MessageSection", "NUMBER", "js", "function", "getStateFromStores", "return", "message", "MessageStore", "NUMBER", "getAllForCurrentThread", "this", "should", "return", "the", "data", "thread", "ThreadStore", "NUMBER", "getCurrent", "Here", "be", "MessageStore", "NUMBER", "getAllForCurrentThread", "NUMBER", "There", "be", "no", "data", "in", "_messages", "this", "for", "in", "just", "do", "nothing", "NUMBER", "How", "do", "the", "data", "appears", "in", "the", "system", "in", "_messages", "param", "string", "threadID", "getAllForThread", "function", "threadID", "var", "threadMessages", "for", "var", "id", "in", "_messages", "if", "_messages", "id", "NUMBER", "readID", "threadID", "threadMessages", "NUMBER", "push", "_messages", "id", "threadMessages", "NUMBER", "sort", "function", "a", "b", "if", "a", "NUMBER", "date", "TAG", "b", "NUMBER", "date", "return", "NUMBER", "return", "NUMBER", "return", "threadMessages", "wzup", "there", "be", "an", "action", "for", "this", "call", "CREATE_MESSAGE", "which", "be", "then", "pass", "to", "the", "MessageStore", "callback", "use", "the", "dispatcher", "NUMBER", "Then", "the", "MessageStore", "internally", "add", "the", "new", "message", "javascript", "_messages", "message", "NUMBER", "id", "message", "If", "there", "be", "no", "message", "an", "empty", "array", "be", "returned", "NUMBER", "Converted", "message", "don", "t", "have", "timestamp", "property", "they", "have", "date", "property", "I", "trying", "to", "use", "flux", "in", "my", "current", "project", "and", "I", "get", "a", "little", "confused", "When", "implement", "Flux", "should", "I", "put", "all", "state", "and", "props", "inside", "a", "store", "and", "the", "components", "just", "get", "state", "and", "props", "from", "store", "every", "single", "time", "Or", "I", "could", "put", "some", "of", "the", "state", "and", "props", "inside", "components", "code", "and", "merge", "it", "with", "the", "state", "and", "props", "from", "store", "and", "then", "provide", "to", "components", "NUMBER", "So", "far", "I", "ve", "observed", "the", "following", "The", "todomvc", "example", "uses", "include", "when", "LINK", "party", "NUMBER", "html", "talks", "about", "lib", "The", "thirt", "party", "docs", "mentions", "declare", "NUMBER", "node_modules", "flux", "flow", "include", "contains", "actual", "source", "code", "which", "may", "explain", "why", "this", "doesn", "t", "work", "NUMBER", "The", "npm", "module", "has", "pre", "compiled", "in", "node_modules", "lib", "which", "be", "why", "node_modules", "flux", "flow", "include", "be", "needed", "NUMBER", "Is", "flux", "out", "of", "date", "with", "flow", "Couple", "of", "possible", "solutions", "come", "to", "mind", "Update", "flux", "flow", "to", "use", "declare", "Enable", "babel", "s", "flow", "comments", "plugin", "to", "keep", "type", "annotations", "in", "the", "compiled", "source", "If", "I", "include", "this", "in", "my", "source", "file", "it", "works", "declare", "class", "Dispatcher", "TAG", "register", "callback", "payload", "TPayload", "void", "DispatchToken", "unregister", "id", "DispatchToken", "void", "waitFor", "ids", "Array", "TAG", "void", "dispatch", "payload", "TPayload", "void", "isDispatching", "boolean", "This", "overlaps", "with", "stuff", "I", "ve", "be", "doing", "with", "fbjs", "NUMBER", "Currently", "we", "ship", "the", "original", "src", "file", "for", "flow", "to", "pick", "up", "and", "parse", "NUMBER", "We", "do", "this", "because", "there", "be", "some", "cases", "where", "the", "inline", "comments", "don", "t", "work", "well", "namely", "polymorphic", "classes", "NUMBER", "With", "the", "next", "Flow", "release", "it", "will", "support", "shipping", "a", "declaration", "file", "next", "to", "the", "original", "source", "so", "that", "we", "don", "t", "have", "to", "do", "special", "things", "with", "include", "in", "NUMBER", "flowconfig", "file", "so", "we", "ll", "do", "that", "for", "fbjs", "and", "I", "ll", "say", "we", "should", "do", "the", "same", "thing", "here", "NUMBER", "Currently", "we", "ship", "the", "original", "src", "file", "for", "flow", "to", "pick", "up", "and", "parse", "NUMBER", "Do", "we", "actually", "include", "the", "src", "file", "in", "the", "npm", "package", "If", "so", "we", "should", "be", "able", "to", "close", "NUMBER", "Only", "in", "fbjs", "NUMBER", "Not", "here", "afaik", "NUMBER", "But", "the", "infra", "that", "s", "be", "worked", "on", "for", "fbjs", "can", "be", "use", "here", "NUMBER", "NUMBER", "fix", "this", "NUMBER", "The", "dispatch", "override", "returned", "void", "before", "make", "_promises", "module", "scoped", "and", "otherwise", "unuse", "and", "its", "support", "code", "unnecessary", "especially", "for", "an", "example", "NUMBER", "I", "tried", "to", "maintain", "the", "intent", "of", "the", "code", "for", "whatever", "pedantic", "reasons", "it", "was", "there", "before", "NUMBER", "all", "can", "you", "guys", "tell", "me", "when", "flux", "can", "and", "cannot", "use", "in", "web", "app", "Made", "the", "latest", "thread", "on", "top", "more", "regular", "Added", "a", "before", "unread", "thread", "title", "more", "clear", "Sync", "d", "thread", "after", "message", "sent", "more", "reactive", "New", "to", "react", "flux", "but", "wanted", "to", "become", "a", "contributor", "of", "flux", "NUMBER", "Related", "to", "NUMBER", "Thank", "you", "Thanks", "bot", "NUMBER", "I", "m", "do", "NUMBER", "Fixes", "NUMBER", "There", "s", "probably", "a", "couple", "more", "things", "to", "do", "probably", "should", "pull", "in", "the", "preprocessor", "cache", "busting", "for", "jest", "from", "fbjs", "scripts", "NUMBER", "But", "this", "do", "the", "minimum", "to", "get", "us", "update", "NUMBER", "For", "this", "fix", "I", "think", "you", "may", "also", "have", "to", "update", "package", "NUMBER", "son", "for", "the", "examples", "projects", "e", "NUMBER", "g", "NUMBER", "flux", "chat", "Here", "be", "a", "link", "to", "the", "to", "the", "exist", "issue", "about", "contextify", "LINK", "Here", "be", "my", "npm", "install", "log", "npm", "install", "npm", "WARN", "engine", "jest", "cli", "NUMBER", "wanted", "node", "NUMBER", "x", "NUMBER", "x", "current", "node", "NUMBER", "npm", "NUMBER", "contextify", "NUMBER", "install", "Users", "eugene", "htdocs", "nodejs_projects", "flux", "node_modules", "jest", "cli", "node_modules", "jsdom", "node_modules", "contextify", "node", "gyp", "rebuild", "CXX", "target", "Release", "obj", "NUMBER", "target", "contextify", "src", "contextify", "NUMBER", "o", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "redefinition", "of", "_NanEnsureLocal", "NAN_INLINE", "v", "NUMBER", "Local", "TAG", "_NanEnsureLocal", "v", "NUMBER", "Local", "TAG", "val", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "previous", "definition", "be", "here", "NAN_INLINE", "v", "NUMBER", "Local", "TAG", "_NanEnsureLocal", "v", "NUMBER", "Handle", "TAG", "val", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "smalloc", "in", "namespace", "node", "node", "smalloc", "FreeCallback", "callback", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "matching", "function", "for", "call", "to", "New", "return", "node", "Buffer", "New", "v", "NUMBER", "Isolate", "GetCurrent", "data", "size", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "no", "know", "conversion", "from", "uint", "NUMBER", "_t", "aka", "unsigned", "int", "to", "enum", "encoding", "for", "NUMBER", "argument", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "NUMBER", "argument", "const", "char", "would", "lose", "const", "qualifier", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "requires", "NUMBER", "argument", "but", "NUMBER", "were", "provide", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "size_t", "length", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "requires", "NUMBER", "argument", "but", "NUMBER", "were", "provide", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "viable", "conversion", "from", "v", "NUMBER", "MaybeLocal", "TAG", "to", "v", "NUMBER", "Local", "TAG", "return", "node", "Buffer", "New", "v", "NUMBER", "Isolate", "GetCurrent", "size", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "constructor", "the", "implicit", "copy", "constructor", "not", "viable", "no", "know", "conversion", "from", "v", "NUMBER", "MaybeLocal", "TAG", "to", "const", "v", "NUMBER", "Local", "TAG", "for", "NUMBER", "argument", "class", "Local", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "constructor", "the", "implicit", "move", "constructor", "not", "viable", "no", "know", "conversion", "from", "v", "NUMBER", "MaybeLocal", "TAG", "to", "v", "NUMBER", "Local", "TAG", "for", "NUMBER", "argument", "class", "Local", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "template", "ignored", "could", "not", "match", "Local", "against", "MaybeLocal", "V", "NUMBER", "_INLINE", "Local", "Local", "TAG", "that", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "template", "ignored", "could", "not", "match", "S", "against", "v", "NUMBER", "MaybeLocal", "TAG", "V", "NUMBER", "_INLINE", "Local", "S", "that", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "Use", "in", "namespace", "node", "Buffer", "return", "node", "Buffer", "Use", "v", "NUMBER", "Isolate", "GetCurrent", "data", "size", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Primitive", "volatile", "from", "incompatible", "type", "v", "NUMBER", "Value", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "Local", "TAG", "Local", "TAG", "request", "here", "return", "NanEscapeScope", "NanNew", "v", "NUMBER", "Undefined", "v", "NUMBER", "Isolate", "GetCurrent", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanEscapeScope", "define", "NanEscapeScope", "val", "scope", "NUMBER", "Escape", "_NanEnsureLocal", "val", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Boolean", "volatile", "from", "incompatible", "type", "v", "NUMBER", "Value", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "Local", "TAG", "Local", "TAG", "request", "here", "return", "NanEscapeScope", "NanNew", "v", "NUMBER", "True", "v", "NUMBER", "Isolate", "GetCurrent", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanEscapeScope", "define", "NanEscapeScope", "val", "scope", "NUMBER", "Escape", "_NanEnsureLocal", "val", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Function", "volatile", "from", "incompatible", "type", "v", "NUMBER", "Value", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "Local", "TAG", "Local", "TAG", "request", "here", "return", "NanEscapeScope", "NanNew", "handle", "Get", "kCallbackIndex", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanEscapeScope", "define", "NanEscapeScope", "val", "scope", "NUMBER", "Escape", "_NanEnsureLocal", "val", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Object", "volatile", "from", "incompatible", "type", "v", "NUMBER", "Value", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "Local", "TAG", "Local", "TAG", "request", "here", "return", "NanEscapeScope", "handle", "Get", "NanNew", "key", "NUMBER", "As", "TAG", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanEscapeScope", "define", "NanEscapeScope", "val", "scope", "NUMBER", "Escape", "_NanEnsureLocal", "val", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Value", "volatile", "from", "incompatible", "type", "v", "NUMBER", "Context", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "Local", "TAG", "Local", "TAG", "request", "here", "return", "NanNew", "val", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "_NanEnsureLocal", "TAG", "request", "here", "return", "NanEscapeScope", "NanNew", "TAG", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanEscapeScope", "define", "NanEscapeScope", "val", "scope", "NUMBER", "Escape", "_NanEnsureLocal", "val", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Context", "volatile", "from", "incompatible", "type", "v", "NUMBER", "Value", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "Local", "TAG", "Local", "TAG", "request", "here", "return", "NanEscapeScope", "NanNew", "TAG", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanEscapeScope", "define", "NanEscapeScope", "val", "scope", "NUMBER", "Escape", "_NanEnsureLocal", "val", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Integer", "volatile", "from", "incompatible", "type", "v", "NUMBER", "Value", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "ReturnValue", "TAG", "Set", "TAG", "request", "here", "NanReturnValue", "NanNew", "TAG", "None", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanReturnValue", "define", "NanReturnValue", "value", "return", "args", "NUMBER", "GetReturnValue", "NUMBER", "Set", "_NanEnsureLocal", "value", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Boolean", "volatile", "from", "incompatible", "type", "v", "NUMBER", "Value", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "ReturnValue", "TAG", "Set", "TAG", "request", "here", "NanReturnValue", "NanNew", "TAG", "false", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanReturnValue", "define", "NanReturnValue", "value", "return", "args", "NUMBER", "GetReturnValue", "NUMBER", "Set", "_NanEnsureLocal", "value", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Array", "volatile", "from", "incompatible", "type", "v", "NUMBER", "Value", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "ReturnValue", "TAG", "Set", "TAG", "request", "here", "NanReturnValue", "blank", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanReturnValue", "define", "NanReturnValue", "value", "return", "args", "NUMBER", "GetReturnValue", "NUMBER", "Set", "_NanEnsureLocal", "value", "NUMBER", "error", "generate", "NUMBER", "make", "Release", "obj", "NUMBER", "target", "contextify", "src", "contextify", "NUMBER", "o", "Error", "NUMBER", "gyp", "ERR", "build", "error", "gyp", "ERR", "stack", "Error", "make", "fail", "with", "exit", "code", "NUMBER", "gyp", "ERR", "stack", "at", "ChildProcess", "NUMBER", "onExit", "usr", "local", "lib", "node_modules", "npm", "node_modules", "node", "gyp", "lib", "build", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "stack", "at", "emitTwo", "events", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "stack", "at", "ChildProcess", "NUMBER", "emit", "events", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "stack", "at", "Process", "NUMBER", "ChildProcess", "NUMBER", "_handle", "NUMBER", "onexit", "internal", "child_process", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "System", "Darwin", "NUMBER", "gyp", "ERR", "command", "usr", "local", "bin", "node", "usr", "local", "lib", "node_modules", "npm", "node_modules", "node", "gyp", "bin", "node", "gyp", "NUMBER", "js", "rebuild", "gyp", "ERR", "cwd", "Users", "eugene", "htdocs", "nodejs_projects", "flux", "node_modules", "jest", "cli", "node_modules", "jsdom", "node_modules", "contextify", "gyp", "ERR", "node", "v", "v", "NUMBER", "gyp", "ERR", "node", "gyp", "v", "v", "NUMBER", "gyp", "ERR", "not", "ok", "fsevents", "NUMBER", "install", "Users", "eugene", "htdocs", "nodejs_projects", "flux", "node_modules", "babel", "node_modules", "chokidar", "node_modules", "fsevents", "node", "pre", "gyp", "install", "fallback", "to", "build", "fsevents", "Success", "Users", "eugene", "htdocs", "nodejs_projects", "flux", "node_modules", "babel", "node_modules", "chokidar", "node_modules", "fsevents", "lib", "binding", "Release", "node", "v", "NUMBER", "darwin", "x", "NUMBER", "fse", "NUMBER", "node", "be", "install", "via", "remote", "fsevents", "NUMBER", "install", "Users", "eugene", "htdocs", "nodejs_projects", "flux", "node_modules", "webpack", "node_modules", "watchpack", "node_modules", "chokidar", "node_modules", "fsevents", "node", "pre", "gyp", "install", "fallback", "to", "build", "fsevents", "Success", "Users", "eugene", "htdocs", "nodejs_projects", "flux", "node_modules", "webpack", "node_modules", "watchpack", "node_modules", "chokidar", "node_modules", "fsevents", "lib", "binding", "Release", "node", "v", "NUMBER", "darwin", "x", "NUMBER", "fse", "NUMBER", "node", "be", "install", "via", "remote", "npm", "ERR", "Darwin", "NUMBER", "npm", "ERR", "argv", "usr", "local", "bin", "node", "usr", "local", "bin", "npm", "install", "npm", "ERR", "node", "v", "NUMBER", "npm", "ERR", "npm", "v", "NUMBER", "npm", "ERR", "code", "ELIFECYCLE", "npm", "ERR", "contextify", "NUMBER", "install", "node", "gyp", "rebuild", "npm", "ERR", "Exit", "status", "NUMBER", "npm", "ERR", "npm", "ERR", "Failed", "at", "the", "contextify", "NUMBER", "install", "script", "node", "gyp", "rebuild", "NUMBER", "npm", "ERR", "This", "be", "most", "likely", "a", "problem", "with", "the", "contextify", "package", "npm", "ERR", "not", "with", "npm", "itself", "NUMBER", "npm", "ERR", "Tell", "the", "author", "that", "this", "fail", "on", "your", "system", "npm", "ERR", "node", "gyp", "rebuild", "npm", "ERR", "You", "can", "get", "their", "info", "via", "npm", "ERR", "npm", "owner", "ls", "contextify", "npm", "ERR", "There", "be", "likely", "additional", "logging", "output", "above", "NUMBER", "npm", "ERR", "Please", "include", "the", "following", "file", "with", "any", "support", "request", "npm", "ERR", "Users", "eugene", "htdocs", "nodejs_projects", "flux", "npm", "debug", "NUMBER", "log", "Why", "be", "you", "use", "NUMBER", "x", "when", "jest", "cli", "NUMBER", "x", "requires", "NUMBER", "NUMBER", "Sent", "from", "my", "iPhone", "On", "Oct", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "epavlenko", "notifications", "github", "NUMBER", "com", "write", "Here", "be", "a", "link", "to", "the", "to", "the", "exist", "issue", "about", "contextify", "brianmcd", "contextify", "NUMBER", "Here", "be", "my", "npm", "install", "log", "npm", "install", "npm", "WARN", "engine", "jest", "cli", "NUMBER", "wanted", "node", "NUMBER", "x", "NUMBER", "x", "current", "node", "NUMBER", "npm", "NUMBER", "contextify", "NUMBER", "install", "Users", "eugene", "htdocs", "nodejs_projects", "flux", "node_modules", "jest", "cli", "node_modules", "jsdom", "node_modules", "contextify", "node", "gyp", "rebuild", "CXX", "target", "Release", "obj", "NUMBER", "target", "contextify", "src", "contextify", "NUMBER", "o", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "redefinition", "of", "_NanEnsureLocal", "NAN_INLINE", "v", "NUMBER", "Local", "TAG", "_NanEnsureLocal", "v", "NUMBER", "Local", "TAG", "val", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "previous", "definition", "be", "here", "NAN_INLINE", "v", "NUMBER", "Local", "TAG", "_NanEnsureLocal", "v", "NUMBER", "Handle", "TAG", "val", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "smalloc", "in", "namespace", "node", "node", "smalloc", "FreeCallback", "callback", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "matching", "function", "for", "call", "to", "New", "return", "node", "Buffer", "New", "v", "NUMBER", "Isolate", "GetCurrent", "data", "size", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "no", "know", "conversion", "from", "uint", "NUMBER", "_t", "aka", "unsigned", "int", "to", "enum", "encoding", "for", "NUMBER", "argument", "NODE_EXTERN", "v", "NUMBER", "MaybeLocalv", "NUMBER", "Object", "New", "v", "NUMBER", "Isolate", "isolate", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "NUMBER", "argument", "const", "char", "_", "would", "lose", "const", "qualifier", "NODE_EXTERN", "v", "NUMBER", "MaybeLocalv", "NUMBER", "Object", "New", "v", "NUMBER", "Isolate_", "isolate", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "requires", "NUMBER", "argument", "but", "NUMBER", "were", "provide", "NODE_EXTERN", "v", "NUMBER", "MaybeLocalv", "NUMBER", "Object", "New", "v", "NUMBER", "Isolate", "isolate", "size_t", "length", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "requires", "NUMBER", "argument", "but", "NUMBER", "were", "provide", "NODE_EXTERN", "v", "NUMBER", "MaybeLocalv", "NUMBER", "Object", "New", "v", "NUMBER", "Isolate", "isolate", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "viable", "conversion", "from", "v", "NUMBER", "MaybeLocalv", "NUMBER", "Object", "to", "v", "NUMBER", "Localv", "NUMBER", "Object", "return", "node", "Buffer", "New", "v", "NUMBER", "Isolate", "GetCurrent", "size", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "constructor", "the", "implicit", "copy", "constructor", "not", "viable", "no", "know", "conversion", "from", "v", "NUMBER", "MaybeLocalv", "NUMBER", "Object", "to", "const", "v", "NUMBER", "Localv", "NUMBER", "Object", "for", "NUMBER", "argument", "class", "Local", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "constructor", "the", "implicit", "move", "constructor", "not", "viable", "no", "know", "conversion", "from", "v", "NUMBER", "MaybeLocalv", "NUMBER", "Object", "to", "v", "NUMBER", "Localv", "NUMBER", "Object", "for", "NUMBER", "argument", "class", "Local", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "template", "ignored", "could", "not", "match", "Local", "against", "MaybeLocal", "V", "NUMBER", "_INLINE", "Local", "Local", "TAG", "that", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "template", "ignored", "could", "not", "match", "S", "_", "against", "v", "NUMBER", "MaybeLocalv", "NUMBER", "Object", "V", "NUMBER", "_INLINE", "Local", "S_", "that", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "Use", "in", "namespace", "node", "Buffer", "return", "node", "Buffer", "Use", "v", "NUMBER", "Isolate", "GetCurrent", "data", "size", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Primitive", "volatile", "from", "incompatible", "type", "v", "NUMBER", "Value", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "_", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "Localv", "NUMBER", "Primitive", "Localv", "NUMBER", "Value", "request", "here", "return", "NanEscapeScope", "NanNew", "v", "NUMBER", "Undefined", "v", "NUMBER", "Isolate", "GetCurrent", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanEscapeScope", "define", "NanEscapeScope", "val", "scope", "NUMBER", "Escape", "_NanEnsureLocal", "val", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Boolean", "_volatile", "from", "incompatible", "type", "v", "NUMBER", "Value", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "Localv", "NUMBER", "Boolean", "Localv", "NUMBER", "Value", "request", "here", "return", "NanEscapeScope", "NanNew", "v", "NUMBER", "True", "v", "NUMBER", "Isolate", "GetCurrent", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanEscapeScope", "define", "NanEscapeScope", "val", "scope", "NUMBER", "Escape", "_NanEnsureLocal", "val", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Function", "_volatile", "from", "incompatible", "type", "v", "NUMBER", "Value", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "Localv", "NUMBER", "Function", "Localv", "NUMBER", "Value", "request", "here", "return", "NanEscapeScope", "NanNew", "handle", "Get", "kCallbackIndex", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanEscapeScope", "define", "NanEscapeScope", "val", "scope", "NUMBER", "Escape", "_NanEnsureLocal", "val", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Object", "_volatile", "from", "incompatible", "type", "v", "NUMBER", "Value", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "Localv", "NUMBER", "Object", "Localv", "NUMBER", "Value", "request", "here", "return", "NanEscapeScope", "handle", "Get", "NanNew", "key", "NUMBER", "Asv", "NUMBER", "Object", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanEscapeScope", "define", "NanEscapeScope", "val", "scope", "NUMBER", "Escape", "_NanEnsureLocal", "val", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Value", "_volatile", "from", "incompatible", "type", "v", "NUMBER", "Context", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "Localv", "NUMBER", "Value", "Localv", "NUMBER", "Context", "request", "here", "return", "NanNew", "val", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "_NanEnsureLocalv", "NUMBER", "Local", "TAG", "request", "here", "return", "NanEscapeScope", "NanNew", "TAG", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanEscapeScope", "define", "NanEscapeScope", "val", "scope", "NUMBER", "Escape", "_NanEnsureLocal", "val", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Context", "_volatile", "from", "incompatible", "type", "v", "NUMBER", "Value", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "Localv", "NUMBER", "Context", "Localv", "NUMBER", "Value", "request", "here", "return", "NanEscapeScope", "NanNew", "TAG", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanEscapeScope", "define", "NanEscapeScope", "val", "scope", "NUMBER", "Escape", "_NanEnsureLocal", "val", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Integer", "_volatile", "from", "incompatible", "type", "v", "NUMBER", "Value", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "ReturnValuev", "NUMBER", "Integer", "Setv", "NUMBER", "Value", "request", "here", "NanReturnValue", "NanNew", "TAG", "None", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanReturnValue", "define", "NanReturnValue", "value", "return", "args", "NUMBER", "GetReturnValue", "NUMBER", "Set", "_NanEnsureLocal", "value", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Boolean", "_volatile", "from", "incompatible", "type", "v", "NUMBER", "Value", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "ReturnValuev", "NUMBER", "Boolean", "Setv", "NUMBER", "Value", "request", "here", "NanReturnValue", "NanNew", "TAG", "false", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanReturnValue", "define", "NanReturnValue", "value", "return", "args", "NUMBER", "GetReturnValue", "NUMBER", "Set", "_NanEnsureLocal", "value", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node", "NUMBER", "h", "NUMBER", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "error", "assigning", "to", "v", "NUMBER", "Array", "_volatile", "from", "incompatible", "type", "v", "NUMBER", "Value", "TYPE_CHECK", "T", "S", "Users", "eugene", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "TYPE_CHECK", "static_cast", "TAG", "NUMBER", "static_cast", "TAG", "NUMBER", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "note", "in", "instantiation", "of", "function", "template", "specialization", "v", "NUMBER", "ReturnValuev", "NUMBER", "Array", "Setv", "NUMBER", "Value", "request", "here", "NanReturnValue", "blank", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NanReturnValue", "define", "NanReturnValue", "value", "return", "args", "NUMBER", "GetReturnValue", "NUMBER", "Set", "_NanEnsureLocal", "value", "NUMBER", "error", "generate", "NUMBER", "make", "Release", "obj", "NUMBER", "target", "contextify", "src", "contextify", "NUMBER", "o", "Error", "NUMBER", "gyp", "ERR", "build", "error", "gyp", "ERR", "stack", "Error", "make", "fail", "with", "exit", "code", "NUMBER", "gyp", "ERR", "stack", "at", "ChildProcess", "NUMBER", "onExit", "usr", "local", "lib", "node_modules", "npm", "node_modules", "node", "gyp", "lib", "build", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "stack", "at", "emitTwo", "events", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "stack", "at", "ChildProcess", "NUMBER", "emit", "events", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "stack", "at", "Process", "NUMBER", "ChildProcess", "NUMBER", "_handle", "NUMBER", "onexit", "internal", "child_process", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "System", "Darwin", "NUMBER", "gyp", "ERR", "command", "usr", "local", "bin", "node", "usr", "local", "lib", "node_modules", "npm", "node_modules", "node", "gyp", "bin", "node", "gyp", "NUMBER", "js", "rebuild", "gyp", "ERR", "cwd", "Users", "eugene", "htdocs", "nodejs_projects", "flux", "node_modules", "jest", "cli", "node_modules", "jsdom", "node_modules", "contextify", "gyp", "ERR", "node", "v", "v", "NUMBER", "gyp", "ERR", "node", "gyp", "v", "v", "NUMBER", "gyp", "ERR", "not", "ok", "fsevents", "NUMBER", "install", "Users", "eugene", "htdocs", "nodejs_projects", "flux", "node_modules", "babel", "node_modules", "chokidar", "node_modules", "fsevents", "node", "pre", "gyp", "install", "fallback", "to", "build", "fsevents", "Success", "Users", "eugene", "htdocs", "nodejs_projects", "flux", "node_modules", "babel", "node_modules", "chokidar", "node_modules", "fsevents", "lib", "binding", "Release", "node", "v", "NUMBER", "darwin", "x", "NUMBER", "fse", "NUMBER", "node", "be", "install", "via", "remote", "fsevents", "NUMBER", "install", "Users", "eugene", "htdocs", "nodejs_projects", "flux", "node_modules", "webpack", "node_modules", "watchpack", "node_modules", "chokidar", "node_modules", "fsevents", "node", "pre", "gyp", "install", "fallback", "to", "build", "fsevents", "Success", "Users", "eugene", "htdocs", "nodejs_projects", "flux", "node_modules", "webpack", "node_modules", "watchpack", "node_modules", "chokidar", "node_modules", "fsevents", "lib", "binding", "Release", "node", "v", "NUMBER", "darwin", "x", "NUMBER", "fse", "NUMBER", "node", "be", "install", "via", "remote", "npm", "ERR", "Darwin", "NUMBER", "npm", "ERR", "argv", "usr", "local", "bin", "node", "usr", "local", "bin", "npm", "install", "npm", "ERR", "node", "v", "NUMBER", "npm", "ERR", "npm", "v", "NUMBER", "npm", "ERR", "code", "ELIFECYCLE", "npm", "ERR", "contextify", "NUMBER", "install", "node", "gyp", "rebuild", "npm", "ERR", "Exit", "status", "NUMBER", "npm", "ERR", "npm", "ERR", "Failed", "at", "the", "contextify", "NUMBER", "install", "script", "node", "gyp", "rebuild", "NUMBER", "npm", "ERR", "This", "be", "most", "likely", "a", "problem", "with", "the", "contextify", "package", "npm", "ERR", "not", "with", "npm", "itself", "NUMBER", "npm", "ERR", "Tell", "the", "author", "that", "this", "fail", "on", "your", "system", "npm", "ERR", "node", "gyp", "rebuild", "npm", "ERR", "You", "can", "get", "their", "info", "via", "npm", "ERR", "npm", "owner", "ls", "contextify", "npm", "ERR", "There", "be", "likely", "additional", "logging", "output", "above", "NUMBER", "npm", "ERR", "Please", "include", "the", "following", "file", "with", "any", "support", "request", "npm", "ERR", "Users", "eugene", "htdocs", "nodejs_projects", "flux", "npm", "debug", "NUMBER", "log", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "I", "understand", "that", "NUMBER", "I", "just", "wanted", "to", "let", "contributors", "know", "so", "they", "could", "fix", "that", "incompatibility", "problem", "NUMBER", "The", "same", "problem", "there", "be", "with", "node", "NUMBER", "Do", "we", "not", "want", "feedback", "relate", "to", "things", "not", "work", "in", "the", "latest", "stable", "node", "version", "Seems", "like", "that", "s", "what", "an", "issue", "tracker", "be", "for", "NUMBER", "Also", "npm", "NUMBER", "deprecates", "the", "node", "engine", "requirement", "at", "the", "module", "level", "NUMBER", "chevex", "epavlenko", "I", "m", "not", "a", "maintainer", "here", "obviously", "NUMBER", "But", "jest", "cli", "NUMBER", "x", "doesn", "t", "have", "a", "dependency", "on", "contextify", "and", "be", "the", "version", "of", "jest", "that", "be", "intended", "for", "iojs", "ish", "node", "version", "NUMBER", "Even", "without", "the", "current", "compile", "issue", "in", "El", "Capitan", "you", "still", "wouldn", "t", "have", "a", "work", "jest", "cli", "NUMBER", "install", "under", "NUMBER", "x", "or", "any", "iojs", "version", "for", "that", "matter", "since", "the", "jest", "test", "modules", "would", "fail", "to", "self", "register", "NUMBER", "Suffice", "to", "say", "that", "npm", "warnings", "be", "there", "for", "a", "reason", "so", "it", "should", "come", "as", "no", "surprise", "when", "stuff", "breaks", "when", "you", "ignore", "them", "NUMBER", "That", "said", "since", "jest", "cli", "NUMBER", "x", "be", "broken", "for", "any", "node", "NUMBER", "and", "jest", "cli", "NUMBER", "doesn", "t", "run", "in", "NUMBER", "or", "NUMBER", "and", "possibly", "NUMBER", "I", "m", "not", "sure", "what", "the", "maintainers", "will", "decide", "to", "do", "NUMBER", "damned", "if", "you", "do", "damned", "if", "you", "don", "t", "I", "guess", "NUMBER", "NUMBER", "for", "a", "fix", "to", "this", "NUMBER", "Failing", "to", "build", "also", "on", "Debian", "here", "nvm", "use", "v", "NUMBER", "Now", "use", "node", "v", "NUMBER", "npm", "v", "NUMBER", "top", "Bkkdaily", "flux", "examples", "flux", "chat", "npm", "install", "npm", "WARN", "engine", "jest", "cli", "NUMBER", "wanted", "node", "NUMBER", "x", "NUMBER", "x", "current", "node", "NUMBER", "npm", "NUMBER", "npm", "WARN", "install", "Couldn", "t", "install", "optional", "dependency", "Unsupported", "npm", "WARN", "prefer", "global", "coffee", "script", "NUMBER", "should", "be", "install", "with", "g", "npm", "WARN", "prefer", "global", "cover", "NUMBER", "should", "be", "install", "with", "g", "contextify", "NUMBER", "install", "home", "top", "flux", "examples", "flux", "chat", "node_modules", "contextify", "node", "gyp", "rebuild", "make", "Entering", "directory", "home", "top", "flux", "examples", "flux", "chat", "node_modules", "contextify", "build", "CXX", "target", "Release", "obj", "NUMBER", "target", "contextify", "src", "contextify", "NUMBER", "o", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "redefinition", "of", "template", "TAG", "v", "NUMBER", "Local", "TAG", "_NanEnsureLocal", "v", "NUMBER", "Local", "TAG", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "template", "TAG", "v", "NUMBER", "Local", "TAG", "_NanEnsureLocal", "v", "NUMBER", "Handle", "TAG", "previously", "declared", "here", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "node", "smalloc", "has", "not", "be", "declared", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "expected", "or", "NUMBER", "before", "callback", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "In", "function", "v", "NUMBER", "Local", "TAG", "NanNewBufferHandle", "char", "size_t", "int", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "callback", "was", "not", "declared", "in", "this", "scope", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "hint", "was", "not", "declared", "in", "this", "scope", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "In", "function", "v", "NUMBER", "Local", "TAG", "NanNewBufferHandle", "const", "char", "uint", "NUMBER", "_t", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "call", "of", "overloaded", "New", "v", "NUMBER", "Isolate", "const", "char", "uint", "NUMBER", "_t", "be", "ambiguous", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidates", "be", "In", "file", "include", "from", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "home", "top", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "v", "NUMBER", "MaybeLocal", "TAG", "node", "Buffer", "New", "v", "NUMBER", "Isolate", "v", "NUMBER", "Local", "TAG", "node", "encoding", "TAG", "home", "top", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "no", "know", "conversion", "for", "argument", "NUMBER", "from", "uint", "NUMBER", "_t", "aka", "unsigned", "int", "to", "node", "encoding", "home", "top", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "v", "NUMBER", "MaybeLocal", "TAG", "node", "Buffer", "New", "v", "NUMBER", "Isolate", "char", "size_t", "TAG", "home", "top", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "no", "know", "conversion", "for", "argument", "NUMBER", "from", "const", "char", "to", "char", "In", "file", "include", "from", "NUMBER", "src", "contextify", "NUMBER", "cc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "In", "function", "v", "NUMBER", "Local", "TAG", "NanNewBufferHandle", "uint", "NUMBER", "_t", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "could", "not", "convert", "node", "Buffer", "New", "v", "NUMBER", "Isolate", "GetCurrent", "size_t", "size", "from", "v", "NUMBER", "MaybeLocal", "TAG", "to", "v", "NUMBER", "Local", "TAG", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "In", "function", "v", "NUMBER", "Local", "TAG", "NanBufferUse", "char", "uint", "NUMBER", "_t", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "Use", "be", "not", "a", "member", "of", "node", "Buffer", "make", "Release", "obj", "NUMBER", "target", "contextify", "src", "contextify", "NUMBER", "o", "Error", "NUMBER", "make", "Leaving", "directory", "home", "top", "flux", "examples", "flux", "chat", "node_modules", "contextify", "build", "gyp", "ERR", "build", "error", "gyp", "ERR", "stack", "Error", "make", "fail", "with", "exit", "code", "NUMBER", "gyp", "ERR", "stack", "at", "ChildProcess", "NUMBER", "onExit", "usr", "lib", "node_modules", "npm", "node_modules", "node", "gyp", "lib", "build", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "stack", "at", "emitTwo", "events", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "stack", "at", "ChildProcess", "NUMBER", "emit", "events", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "stack", "at", "Process", "NUMBER", "ChildProcess", "NUMBER", "_handle", "NUMBER", "onexit", "internal", "child_process", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "System", "Linux", "NUMBER", "NUMBER", "amd", "NUMBER", "gyp", "ERR", "command", "home", "top", "NUMBER", "nvm", "version", "node", "v", "NUMBER", "bin", "node", "usr", "lib", "node_modules", "npm", "node_modules", "node", "gyp", "bin", "node", "gyp", "NUMBER", "js", "rebuild", "gyp", "ERR", "cwd", "home", "top", "flux", "examples", "flux", "chat", "node_modules", "contextify", "gyp", "ERR", "node", "v", "v", "NUMBER", "gyp", "ERR", "node", "gyp", "v", "v", "NUMBER", "gyp", "ERR", "not", "ok", "flux", "chat", "NUMBER", "home", "top", "flux", "examples", "flux", "chat", "bluebird", "NUMBER", "extraneous", "browserify", "NUMBER", "browser", "pack", "NUMBER", "combine", "source", "map", "NUMBER", "inline", "source", "map", "NUMBER", "source", "map", "NUMBER", "amdefine", "NUMBER", "source", "map", "NUMBER", "amdefine", "NUMBER", "through", "NUMBER", "NUMBER", "readable", "stream", "NUMBER", "core", "util", "be", "NUMBER", "browser", "resolve", "NUMBER", "resolve", "NUMBER", "deps", "sort", "NUMBER", "JSONStream", "NUMBER", "through", "NUMBER", "glob", "NUMBER", "inflight", "NUMBER", "wrappy", "NUMBER", "minimatch", "NUMBER", "brace", "expansion", "NUMBER", "balanced", "match", "NUMBER", "concat", "map", "NUMBER", "once", "NUMBER", "wrappy", "NUMBER", "inherits", "NUMBER", "insert", "module", "globals", "NUMBER", "combine", "source", "map", "NUMBER", "source", "map", "NUMBER", "amdefine", "NUMBER", "JSONStream", "NUMBER", "through", "NUMBER", "xtend", "NUMBER", "isarray", "NUMBER", "JSONStream", "NUMBER", "through", "NUMBER", "module", "deps", "NUMBER", "detective", "NUMBER", "escodegen", "NUMBER", "esprima", "NUMBER", "estraverse", "NUMBER", "esutils", "NUMBER", "optionator", "NUMBER", "deep", "be", "NUMBER", "fast", "levenshtein", "NUMBER", "levn", "NUMBER", "prelude", "ls", "NUMBER", "type", "check", "NUMBER", "wordwrap", "NUMBER", "source", "map", "NUMBER", "amdefine", "NUMBER", "JSONStream", "NUMBER", "through", "NUMBER", "resolve", "NUMBER", "stream", "combiner", "NUMBER", "NUMBER", "through", "NUMBER", "NUMBER", "readable", "stream", "NUMBER", "core", "util", "be", "NUMBER", "xtend", "NUMBER", "readable", "stream", "NUMBER", "core", "util", "be", "NUMBER", "string_decoder", "NUMBER", "through", "NUMBER", "NUMBER", "xtend", "NUMBER", "umd", "NUMBER", "ruglify", "NUMBER", "uglify", "js", "NUMBER", "optimist", "NUMBER", "wordwrap", "NUMBER", "source", "map", "NUMBER", "amdefine", "NUMBER", "through", "NUMBER", "coffee", "script", "NUMBER", "extraneous", "cover", "NUMBER", "extraneous", "cssstyle", "NUMBER", "extraneous", "diff", "NUMBER", "extraneous", "envify", "NUMBER", "jstransform", "NUMBER", "source", "map", "NUMBER", "amdefine", "NUMBER", "through", "NUMBER", "graceful", "fs", "NUMBER", "extraneous", "harmonize", "NUMBER", "extraneous", "htmlparser", "NUMBER", "NUMBER", "extraneous", "istanbul", "NUMBER", "extraneous", "jasmine", "only", "NUMBER", "extraneous", "jasmine", "pit", "NUMBER", "extraneous", "lodash", "NUMBER", "template", "NUMBER", "extraneous", "node", "haste", "NUMBER", "extraneous", "node", "worker", "pool", "NUMBER", "extraneous", "nwmatcher", "NUMBER", "extraneous", "reactify", "NUMBER", "jstransform", "NUMBER", "source", "map", "NUMBER", "amdefine", "NUMBER", "react", "tool", "NUMBER", "commoner", "NUMBER", "glob", "NUMBER", "inflight", "NUMBER", "wrappy", "NUMBER", "inherits", "NUMBER", "once", "NUMBER", "wrappy", "NUMBER", "mkdirp", "NUMBER", "minimist", "NUMBER", "jstransform", "NUMBER", "source", "map", "NUMBER", "amdefine", "NUMBER", "through", "NUMBER", "request", "NUMBER", "extraneous", "resolve", "NUMBER", "extraneous", "through", "NUMBER", "extraneous", "uglify", "js", "NUMBER", "source", "map", "NUMBER", "amdefine", "NUMBER", "watchify", "NUMBER", "browserify", "NUMBER", "browser", "pack", "NUMBER", "combine", "source", "map", "NUMBER", "inline", "source", "map", "NUMBER", "source", "map", "NUMBER", "amdefine", "NUMBER", "source", "map", "NUMBER", "amdefine", "NUMBER", "JSONStream", "NUMBER", "through", "NUMBER", "through", "NUMBER", "NUMBER", "readable", "stream", "NUMBER", "core", "util", "be", "NUMBER", "deps", "sort", "NUMBER", "JSONStream", "NUMBER", "through", "NUMBER", "glob", "NUMBER", "inflight", "NUMBER", "wrappy", "NUMBER", "minimatch", "NUMBER", "brace", "expansion", "NUMBER", "balanced", "match", "NUMBER", "concat", "map", "NUMBER", "once", "NUMBER", "wrappy", "NUMBER", "inherits", "NUMBER", "insert", "module", "globals", "NUMBER", "combine", "source", "map", "NUMBER", "source", "map", "NUMBER", "amdefine", "NUMBER", "JSONStream", "NUMBER", "through", "NUMBER", "xtend", "NUMBER", "isarray", "NUMBER", "JSONStream", "NUMBER", "through", "NUMBER", "module", "deps", "NUMBER", "detective", "NUMBER", "escodegen", "NUMBER", "esprima", "NUMBER", "estraverse", "NUMBER", "esutils", "NUMBER", "optionator", "NUMBER", "deep", "be", "NUMBER", "fast", "levenshtein", "NUMBER", "levn", "NUMBER", "prelude", "ls", "NUMBER", "type", "check", "NUMBER", "wordwrap", "NUMBER", "source", "map", "NUMBER", "amdefine", "NUMBER", "JSONStream", "NUMBER", "through", "NUMBER", "stream", "combiner", "NUMBER", "NUMBER", "through", "NUMBER", "NUMBER", "readable", "stream", "NUMBER", "core", "util", "be", "NUMBER", "xtend", "NUMBER", "readable", "stream", "NUMBER", "core", "util", "be", "NUMBER", "resolve", "NUMBER", "string_decoder", "NUMBER", "through", "NUMBER", "NUMBER", "xtend", "NUMBER", "chokidar", "NUMBER", "readdirp", "NUMBER", "graceful", "fs", "NUMBER", "readable", "stream", "NUMBER", "core", "util", "be", "NUMBER", "inherits", "NUMBER", "isarray", "NUMBER", "string_decoder", "NUMBER", "through", "NUMBER", "NUMBER", "readable", "stream", "NUMBER", "core", "util", "be", "NUMBER", "inherits", "NUMBER", "isarray", "NUMBER", "string_decoder", "NUMBER", "xtend", "NUMBER", "xmlhttprequest", "NUMBER", "extraneous", "npm", "WARN", "EPACKAGEJSON", "flux", "chat", "NUMBER", "No", "license", "field", "NUMBER", "npm", "ERR", "Linux", "NUMBER", "NUMBER", "amd", "NUMBER", "npm", "ERR", "argv", "home", "top", "NUMBER", "nvm", "version", "node", "v", "NUMBER", "bin", "node", "usr", "bin", "npm", "install", "npm", "ERR", "node", "v", "NUMBER", "npm", "ERR", "npm", "v", "NUMBER", "npm", "ERR", "code", "ELIFECYCLE", "npm", "ERR", "contextify", "NUMBER", "install", "node", "gyp", "rebuild", "npm", "ERR", "Exit", "status", "NUMBER", "npm", "ERR", "npm", "ERR", "Failed", "at", "the", "contextify", "NUMBER", "install", "script", "node", "gyp", "rebuild", "NUMBER", "npm", "ERR", "This", "be", "most", "likely", "a", "problem", "with", "the", "contextify", "package", "npm", "ERR", "not", "with", "npm", "itself", "NUMBER", "npm", "ERR", "Tell", "the", "author", "that", "this", "fail", "on", "your", "system", "npm", "ERR", "node", "gyp", "rebuild", "npm", "ERR", "You", "can", "get", "their", "info", "via", "npm", "ERR", "npm", "owner", "ls", "contextify", "npm", "ERR", "There", "be", "likely", "additional", "logging", "output", "above", "NUMBER", "npm", "ERR", "Please", "include", "the", "following", "file", "with", "any", "support", "request", "npm", "ERR", "home", "top", "flux", "examples", "flux", "chat", "npm", "debug", "NUMBER", "log", "Hi", "there", "Consider", "the", "following", "scenario", "NUMBER", "We", "have", "an", "app", "with", "a", "router", "Each", "time", "the", "user", "clicks", "a", "link", "we", "catch", "it", "and", "dispatch", "an", "action", "for", "example", "clicking", "on", "profile", "dispatches", "SHOW_PROFILE", "and", "we", "update", "the", "url", "as", "well", "of", "course", "NUMBER", "We", "have", "Stores", "which", "register", "to", "those", "SHOW_PAGE", "actions", "to", "do", "stuff", "NUMBER", "For", "example", "_analyticsStore", "_", "which", "sends", "events", "to", "your", "analytics", "solution", "or", "_breadcrumbsStore", "_", "which", "update", "the", "breadcrumb", "with", "the", "actual", "page", "info", "NUMBER", "So", "far", "so", "well", "NUMBER", "But", "when", "a", "new", "user", "creates", "an", "account", "it", "be", "a", "redirected", "to", "a", "new", "screen", "call", "AddNameAndCreateFirstPost", "NUMBER", "In", "that", "screen", "NUMBER", "The", "user", "enters", "his", "own", "name", "NUMBER", "The", "user", "enters", "the", "content", "of", "his", "first", "Post", "NUMBER", "The", "user", "clicks", "the", "Submit", "button", "NUMBER", "_BTW", "I", "m", "use", "optimistic", "UI", "update", "here", "so", "everything", "be", "sync", "NUMBER", "_", "When", "the", "user", "clicks", "that", "Submit", "button", "we", "need", "to", "store", "his", "name", "in", "the", "_userStore", "_", "store", "the", "new", "Post", "in", "the", "_postsStore", "_", "and", "redirect", "him", "to", "the", "dashboard", "NUMBER", "The", "Stores", "be", "currently", "registered", "to", "these", "actions", "use", "among", "the", "app", "_userStore", "_", "be", "registered", "to", "UPDATE_USER_NAME", "to", "change", "the", "name", "NUMBER", "_postsStore", "_", "be", "registered", "to", "NEW_POST_CREATED", "to", "add", "new", "posts", "NUMBER", "_analyticsStore", "_", "be", "registered", "to", "SHOW_DASHBOARD", "to", "send", "analytics", "NUMBER", "_breadcrumbsStore", "_", "be", "registered", "to", "SHOW_DASHBOARD", "to", "change", "the", "breadcrumb", "NUMBER", "I", "see", "these", "possible", "implementations", "When", "user", "clicks", "Submit", "we", "dispatch", "CREATE_FIRST_POST_FORM_SUBMITTED", "NUMBER", "This", "makes", "sense", "be", "what", "the", "user", "did", "but", "we", "will", "have", "to", "change", "all", "our", "Stores", "and", "add", "that", "CREATE_FIRST_POST_FORM_SUBMITTED", "action", "when", "they", "register", "to", "UPDATE_USER_NAME", "NEW_POST_CREATED", "or", "SHOW_DASHBOARD", "NUMBER", "This", "be", "really", "ugly", "and", "couples", "the", "Stores", "to", "too", "specific", "actions", "NUMBER", "I", "be", "sure", "when", "the", "app", "grows", "somebody", "will", "add", "a", "new", "Store", "and", "will", "forget", "to", "register", "to", "the", "CREATE_FIRST_POST_FORM_SUBMITTED", "action", "when", "he", "be", "registering", "to", "UPDATE_USER_NAME", "NEW_POST_CREATED", "or", "SHOW_DASHBOARD", "NUMBER", "When", "user", "clicks", "Submit", "we", "dispatch", "three", "actions", "one", "after", "another", "to", "avoid", "the", "Cannot", "dispatch", "in", "the", "middle", "of", "a", "dispatch", "restriction", "NUMBER", "First", "UPDATE_USER_NAME", "then", "NEW_POST_CREATED", "and", "finally", "SHOW_DASHBOARD", "NUMBER", "javascript", "NUMBER", "Dispatcher", "NUMBER", "dispatch", "actionType", "UPDATE_USER_NAME", "userName", "NUMBER", "Dispatcher", "NUMBER", "dispatch", "actionType", "NEW_POST_CREATED", "postContent", "NUMBER", "Dispatcher", "NUMBER", "dispatch", "actionType", "SHOW_DASHBOARD", "This", "second", "implementation", "seems", "ok", "but", "I", "have", "never", "seen", "dispatching", "more", "than", "one", "action", "in", "any", "Flux", "example", "so", "I", "be", "suspicious", "NUMBER", "Besides", "we", "be", "make", "flow", "decisions", "in", "the", "UI", "be", "we", "not", "sure", "if", "that", "be", "right", "as", "well", "NUMBER", "I", "be", "wondering", "if", "I", "be", "miss", "something", "and", "this", "could", "be", "address", "in", "some", "other", "way", "NUMBER", "I", "have", "researched", "a", "lot", "but", "I", "have", "not", "seen", "any", "good", "Flux", "and", "Router", "examples", "where", "the", "router", "actually", "dispatch", "actions", "and", "after", "some", "action", "you", "need", "to", "redirect", "the", "user", "to", "another", "page", "NUMBER", "Thanks", "in", "advance", "See", "comment", "and", "response", "here", "LINK", "issuecomment", "NUMBER", "Thanks", "sterpe", "NUMBER", "fisherwebdev", "said", "this", "in", "that", "thread", "_", "sterpe", "Those", "sequential", "calls", "to", "dispatch", "be", "happening", "synchronously", "NUMBER", "They", "be", "separate", "dispatches", "so", "yes", "this", "works", "fine", "NUMBER", "However", "I", "ve", "never", "seen", "that", "do", "at", "FB", "and", "I", "m", "not", "sure", "why", "anyone", "would", "do", "that", "NUMBER", "We", "would", "simply", "merge", "them", "as", "you", "suggested", "NUMBER", "_", "In", "my", "case", "merge", "dispatches", "seems", "far", "from", "ideal", "and", "dispatching", "one", "after", "the", "other", "seems", "strange", "as", "well", "NUMBER", "Like", "fisherwebdev", "said", "he", "never", "saw", "it", "before", "NUMBER", "So", "I", "still", "have", "the", "doubt", "of", "which", "implementation", "be", "better", "or", "if", "there", "be", "another", "I", "didn", "t", "think", "about", "NUMBER", "Why", "be", "merge", "of", "the", "actions", "strange", "to", "you", "Generally", "an", "action", "fired", "should", "correspond", "to", "what", "the", "user", "be", "doing", "it", "doesn", "t", "correspond", "to", "what", "you", "want", "a", "store", "to", "do", "NUMBER", "This", "doesn", "t", "mean", "you", "have", "to", "duplicate", "logic", "in", "many", "places", "though", "for", "common", "things", "you", "can", "pull", "it", "out", "into", "helper", "function", "NUMBER", "Consider", "for", "a", "moment", "if", "you", "had", "one", "giant", "store", "your", "action", "handle", "may", "look", "this", "javascript", "reduce", "state", "action", "switch", "action", "NUMBER", "type", "case", "change_username", "return", "updateUserName", "state", "action", "NUMBER", "userName", "case", "create_first_post_form_submitted", "state", "updateUserName", "state", "action", "NUMBER", "userName", "state", "newPostCreated", "state", "action", "NUMBER", "postContent", "state", "showDashboard", "state", "return", "state", "case", "dashboard_clicked", "return", "showDashboard", "state", "return", "state", "Here", "we", "don", "t", "duplicate", "the", "logic", "for", "common", "things", "an", "action", "may", "do", "NUMBER", "We", "do", "have", "a", "clear", "list", "of", "things", "the", "user", "can", "do", "and", "then", "for", "each", "of", "those", "things", "a", "list", "of", "how", "it", "affects", "the", "state", "NUMBER", "We", "have", "also", "run", "into", "cases", "where", "firing", "multiple", "actions", "synchronously", "has", "broken", "the", "UI", "NUMBER", "What", "tends", "to", "happen", "be", "someone", "assumes", "that", "a", "button", "be", "clicked", "will", "cause", "one", "chunk", "of", "work", "to", "happen", "and", "then", "not", "handle", "intermediate", "state", "NUMBER", "Something", "like", "javascript", "dispatch", "type", "set_tab", "tab", "dashboardTab", "let", "s", "pretend", "props", "NUMBER", "dashboard", "be", "null", "until", "after", "this", "action", "dispatch", "type", "select_default_dashboard", "This", "be", "the", "component", "that", "be", "rendered", "when", "the", "dashboard", "be", "rendered", "function", "DashboardView", "props", "const", "dashboard", "props", "return", "TAG", "TAG", "dashboard", "NUMBER", "name", "TAG", "TAG", "renderDashboardContent", "dashboard", "NUMBER", "content", "TAG", "TAG", "In", "the", "render", "function", "it", "be", "perfectly", "reasonable", "to", "assume", "that", "when", "rendering", "the", "dashboard", "view", "there", "be", "some", "dashboard", "that", "exists", "NUMBER", "And", "it", "kind", "of", "appears", "safe", "because", "the", "default", "dashboard", "be", "set", "immediately", "after", "switching", "to", "this", "view", "NUMBER", "However", "it", "will", "cause", "an", "exception", "because", "as", "soon", "as", "that", "first", "dispatch", "happens", "the", "react", "tree", "will", "re", "render", "with", "an", "inconsistent", "view", "of", "your", "stores", "NUMBER", "This", "scenario", "has", "played", "out", "a", "few", "times", "for", "us", "NUMBER", "It", "s", "usually", "be", "hard", "to", "detect", "because", "it", "worked", "at", "first", "but", "then", "while", "refactoring", "parts", "of", "our", "flux", "infrastructure", "all", "of", "these", "places", "start", "breaking", "NUMBER", "The", "two", "solutions", "be", "to", "either", "always", "dispatch", "exactly", "one", "thing", "describing", "the", "entire", "action", "that", "be", "taking", "place", "or", "write", "logic", "to", "safely", "handle", "intermediate", "steps", "that", "may", "happen", "in", "your", "application", "NUMBER", "Generally", "we", "have", "preferred", "the", "former", "NUMBER", "kyldvs", "I", "eventually", "run", "into", "that", "too", "NUMBER", "Many", "thanks", "for", "your", "answer", "kyldvs", "NUMBER", "_I", "hope", "you", "get", "my", "answer", "as", "a", "constructive", "argument", "NUMBER", "I", "don", "t", "mean", "to", "be", "rude", "questioning", "yours", "NUMBER", "I", "really", "want", "to", "get", "a", "better", "understanding", "of", "this", "case", "and", "it", "s", "possible", "implications", "and", "I", "hope", "it", "helps", "other", "people", "with", "the", "same", "problem", "as", "well", "NUMBER", "_", "What", "be", "bugging", "me", "about", "merge", "several", "actions", "into", "one", "be", "that", "you", "have", "to", "remember", "a", "lot", "of", "specific", "actions", "which", "doesn", "t", "describe", "what", "be", "really", "happening", "NUMBER", "If", "you", "have", "one", "giant", "store", "like", "you", "write", "it", "be", "clear", "what", "be", "happening", "and", "easier", "to", "debug", "NUMBER", "But", "when", "the", "app", "grows", "I", "think", "this", "may", "lead", "to", "problem", "NUMBER", "Think", "about", "the", "SHOW_DASHBOARD", "action", "for", "example", "NUMBER", "Imagine", "it", "s", "use", "in", "NUMBER", "different", "Stores", "NUMBER", "And", "imagine", "we", "merge", "a", "lot", "of", "more", "actions", "like", "this", "which", "they", "end", "up", "redirecting", "the", "user", "to", "the", "dashboard", "NUMBER", "It", "s", "quite", "possible", "that", "you", "end", "up", "having", "something", "like", "this", "javascript", "analyticsStore", "NUMBER", "js", "Dispatcher", "NUMBER", "register", "function", "payload", "switch", "payload", "NUMBER", "actionType", "case", "SHOW_DASHBOARD", "case", "CREATE_FIRST_POST_FORM_SUBMITTED", "case", "LOGIN_SUCCESSFUL", "case", "CURRENT_POST_DELETED", "case", "CURRENT_PAGE_DELETED", "case", "UPDATE_FINISHED", "sendDashboardAnalytics", "break", "NUMBER", "breadcrumbsStore", "NUMBER", "js", "Dispatcher", "NUMBER", "register", "function", "payload", "switch", "payload", "NUMBER", "actionType", "case", "SHOW_DASHBOARD", "case", "CREATE_FIRST_POST_FORM_SUBMITTED", "case", "LOGIN_SUCCESSFUL", "case", "CURRENT_POST_DELETED", "case", "CURRENT_PAGE_DELETED", "case", "UPDATE_FINISHED", "changeBreadcrumbs", "dashboard", "break", "NUMBER", "renderStore", "NUMBER", "js", "Dispatcher", "NUMBER", "register", "function", "payload", "switch", "payload", "NUMBER", "actionType", "case", "SHOW_DASHBOARD", "case", "CREATE_FIRST_POST_FORM_SUBMITTED", "case", "LOGIN_SUCCESSFUL", "case", "CURRENT_POST_DELETED", "case", "CURRENT_PAGE_DELETED", "case", "UPDATE_FINISHED", "renderDashboard", "break", "NUMBER", "and", "NUMBER", "more", "stores", "NUMBER", "I", "see", "two", "possible", "problem", "Imagine", "you", "write", "a", "new", "Store", "which", "do", "something", "when", "the", "Dashboard", "be", "shown", "NUMBER", "You", "have", "to", "know", "exactly", "all", "the", "actions", "which", "lead", "to", "a", "redirection", "to", "the", "dashboard", "NUMBER", "Imagine", "how", "easy", "should", "be", "to", "write", "only", "SHOW_DASHBOARD", "instead", "NUMBER", "Imagine", "you", "want", "to", "change", "the", "redirection", "of", "the", "AddNameAndCreateFirstPost", "screen", "to", "the", "EditPost", "screen", "NUMBER", "You", "have", "to", "go", "find", "and", "change", "the", "CREATE_FIRST_POST_FORM_SUBMITTED", "in", "NUMBER", "different", "file", "NUMBER", "Imagine", "how", "easy", "it", "should", "be", "to", "just", "change", "SHOW_DASHBOARD", "to", "SHOW_EDIT_POST", "instead", "NUMBER", "About", "describing", "what", "the", "user", "did", "you", "said", "_", "kyldvs", "Generally", "an", "action", "fired", "should", "correspond", "to", "what", "the", "user", "be", "doing", "it", "doesn", "t", "correspond", "to", "what", "you", "want", "a", "store", "to", "do", "NUMBER", "_", "In", "my", "AddNameAndCreateFirstPost", "screen", "the", "user", "you", "be", "right", "the", "user", "did", "this", "action", "CREATE_FIRST_POST_FORM_SUBMITTED", "NUMBER", "But", "when", "he", "be", "in", "the", "EditProfile", "screen", "the", "action", "be", "USER_NAME_CHANGED", "and", "not", "PROFILE_FORM_SUBMITTED", "NUMBER", "And", "in", "the", "CreatePost", "screen", "the", "action", "be", "NEW_POST_CREATED", "and", "not", "NEW_POST_FORM_SUBMITTED", "as", "well", "NUMBER", "So", "if", "we", "can", "describe", "what", "has", "happened", "in", "those", "terms", "why", "USER_NAME_CHANGED", "NEW_POST_CREATED", "SHOW_DASHBOARD", "instead", "of", "CREATE_FIRST_POST_FORM_SUBMITTED", "be", "wrong", "to", "describe", "what", "the", "user", "just", "did", "Generally", "we", "try", "to", "use", "hasChanged", "in", "order", "to", "prevent", "needing", "to", "have", "large", "lists", "of", "actions", "that", "we", "need", "to", "maintain", "NUMBER", "LINK", "L", "NUMBER", "While", "I", "don", "t", "completely", "understand", "the", "purpose", "of", "all", "of", "your", "stores", "a", "revised", "structure", "may", "look", "more", "similar", "to", "this", "javascript", "class", "RouteStore", "extend", "FluxReduceStore", "getInitialState", "return", "login", "reduce", "state", "action", "switch", "action", "NUMBER", "type", "case", "show_dashboard", "case", "create_first_post_form_submitted", "case", "login_successful", "update", "of", "the", "url", "omitted", "return", "foo", "dashboard", "default", "return", "state", "class", "BreadCrumbStore", "extend", "FluxReduceStore", "NUMBER", "reduce", "state", "action", "this", "NUMBER", "getDispatcher", "NUMBER", "waitFor", "RouteStore", "NUMBER", "getDispatchToken", "The", "current", "route", "change", "so", "we", "need", "to", "update", "the", "breadcrumb", "if", "RouteStore", "NUMBER", "hasChanged", "const", "route", "RouteStore", "NUMBER", "getState", "switch", "route", "case", "login", "return", "loginBreadCrumbs", "state", "case", "foo", "dashboard", "return", "dashboardBreadCrumbs", "state", "default", "return", "fourOhFourBreadCrumb", "state", "return", "state", "In", "this", "way", "you", "can", "build", "dependencies", "between", "the", "data", "within", "stores", "NUMBER", "This", "enable", "you", "to", "have", "stores", "depend", "on", "the", "data", "in", "another", "store", "rather", "than", "the", "entire", "list", "of", "actions", "that", "may", "cause", "a", "specific", "store", "to", "change", "NUMBER", "Sometimes", "it", "be", "necessary", "to", "maintain", "two", "larger", "list", "of", "actions", "within", "separate", "stores", "but", "we", "ve", "not", "find", "it", "all", "that", "common", "even", "though", "we", "have", "well", "over", "NUMBER", "stores", "at", "this", "point", "NUMBER", "We", "tend", "to", "pull", "out", "any", "cross", "store", "accesses", "into", "a", "separate", "function", "in", "order", "to", "document", "the", "side", "effect", "of", "reduce", "better", "NUMBER", "See", "here", "for", "a", "work", "example", "LINK", "challenge", "blob", "master", "submissions", "kyldvs", "src", "SithStore", "NUMBER", "js", "L", "NUMBER", "L", "NUMBER", "Thanks", "again", "kyldvs", "for", "taking", "the", "time", "to", "keep", "answering", "me", "in", "this", "regard", "NUMBER", "I", "understand", "this", "solution", "and", "it", "works", "well", "in", "many", "situations", "NUMBER", "I", "have", "use", "it", "myself", "in", "non", "Flux", "applications", "NUMBER", "Now", "NUMBER", "I", "know", "I", "be", "giving", "this", "a", "hard", "time", "but", "I", "still", "have", "concerns", "regard", "this", "solution", "NUMBER", "NUMBER", "To", "make", "my", "example", "work", "you", "be", "get", "rid", "of", "Flux", "NUMBER", "Imagine", "another", "person", "creates", "a", "new", "Store", "in", "the", "future", "NUMBER", "He", "registers", "for", "SHOW_DASHBOARD", "and", "sometimes", "it", "doesn", "t", "work", "because", "the", "user", "be", "on", "the", "dashboard", "but", "SHOW_DASHBOARD", "be", "not", "triggered", "NUMBER", "You", "have", "to", "explain", "him", "that", "even", "though", "SHOW_DASHBOARD", "exists", "he", "can", "t", "use", "it", "because", "that", "part", "of", "the", "app", "be", "outside", "Flux", "and", "he", "has", "to", "use", "RouteStore", "NUMBER", "hasChanged", "instead", "of", "Dispatcher", "NUMBER", "register", "and", "make", "his", "Store", "dependent", "on", "RouteStore", "NUMBER", "NUMBER", "To", "avoid", "chaining", "notifications", "in", "the", "Dispatcher", "you", "be", "actually", "use", "a", "different", "notification", "system", "RouteStore", "NUMBER", "hasChanged", "instead", "of", "Dispatcher", "NUMBER", "register", "NUMBER", "If", "you", "refactor", "your", "code", "and", "use", "Dispatcher", "NUMBER", "register", "instead", "you", "end", "up", "dispatching", "in", "the", "middle", "of", "a", "dispatch", "NUMBER", "So", "it", "looks", "like", "change", "the", "notification", "system", "only", "has", "the", "benefit", "of", "bypassing", "that", "rule", "NUMBER", "RouteStore", "NUMBER", "hasChanged", "doesn", "t", "add", "any", "other", "benefit", "to", "the", "Dispatcher", "system", "NUMBER", "NUMBER", "If", "one", "of", "the", "Flux", "principles", "be", "easy", "debugging", "and", "you", "look", "at", "the", "flow", "of", "your", "user", "actions", "you", "will", "see", "things", "like", "SHOW_LOGIN", "LOGIN_SUCCEED", "SHOW_CREATE_FIRST_POST", "CREATE_FIRST_POST_FORM_SENT", "SHOW_EDIT_POST", "DELETED_POST", "All", "the", "SHOW_DASHBOARDS", "be", "hidden", "here", "even", "if", "the", "user", "was", "actually", "in", "the", "dashboard", "screen", "twice", "in", "this", "flow", "after", "CREATE_FIRST_POST_FORM_SENT", "and", "after", "DELETED_POST", "NUMBER", "To", "know", "what", "s", "really", "going", "on", "you", "would", "have", "to", "implement", "new", "logging", "features", "to", "include", "the", "RouteStore", "NUMBER", "hasChanged", "notifications", "NUMBER", "So", "after", "all", "our", "conversation", "what", "I", "be", "wondering", "be", "NUMBER", "why", "be", "it", "so", "wrong", "to", "do", "THIS", "that", "you", "be", "trying", "so", "hard", "to", "avoid", "it", "javascript", "var", "handleClick", "function", "Dispatcher", "NUMBER", "dispatch", "PROFILE_NAME_CHANGED", "Dispatcher", "NUMBER", "dispatch", "SHOW_DASHBOARD", "Why", "be", "it", "so", "wrong", "that", "if", "the", "user", "did", "a", "MultiTask", "in", "one", "step", "you", "write", "instead", "SmallTask", "AND", "SmallTask", "What", "type", "of", "problem", "can", "it", "lead", "to", "I", "can", "imagine", "other", "workarounds", "in", "the", "UI", "side", "NUMBER", "For", "example", "if", "I", "give", "the", "user", "a", "SAVE", "button", "with", "a", "PROFILE_NAME_CHANGED", "dispatch", "NUMBER", "Then", "I", "give", "him", "a", "NAME", "SAVED", "hint", "and", "a", "new", "button", "GO", "TO", "DASHBOARD", "with", "a", "SHOW_DASHBOARD", "dispatch", "NUMBER", "That", "would", "work", "just", "fine", "in", "Flux", "and", "we", "won", "t", "be", "having", "this", "conversation", "NUMBER", "In", "the", "way", "I", "see", "it", "dispatching", "SmallTask", "AND", "SmallTask", "I", "be", "just", "saving", "the", "user", "that", "second", "click", "NUMBER", "Why", "be", "it", "so", "wrong", "to", "save", "him", "a", "click", "when", "he", "actually", "wants", "to", "save", "his", "name", "and", "go", "to", "the", "dashboard", "in", "one", "step", "You", "be", "not", "chaining", "actions", "your", "actions", "be", "still", "easy", "to", "trace", "and", "debug", "your", "log", "be", "fine", "all", "your", "app", "parts", "use", "Flux", "NUMBER", "So", "what", "be", "you", "seeing", "I", "be", "not", "I", "be", "sorry", "it", "looks", "like", "I", "be", "pretty", "sure", "that", "my", "solution", "be", "right", "and", "I", "be", "trying", "hard", "to", "defend", "it", "but", "I", "m", "not", "NUMBER", "I", "really", "love", "Flux", "and", "all", "its", "principles", "NUMBER", "I", "be", "just", "trying", "to", "understand", "Flux", "in", "this", "scenario", "NUMBER", "I", "just", "asked", "in", "the", "first", "place", "because", "I", "never", "saw", "something", "like", "this", "before", "and", "wanted", "to", "know", "your", "impressions", "NUMBER", "Many", "thanks", "for", "your", "help", "here", "NUMBER", "I", "really", "appreciate", "it", "NUMBER", "One", "of", "the", "problem", "I", "find", "be", "that", "you", "begin", "having", "to", "push", "increasing", "amounts", "of", "state", "into", "your", "dispatch", "payloads", "so", "that", "the", "backing", "stores", "can", "differentiate", "between", "event", "target", "NUMBER", "This", "becomes", "necessary", "as", "the", "application", "ui", "interaction", "becomes", "non", "trivial", "NUMBER", "My", "NUMBER", "cents", "Sent", "from", "my", "iPhone", "On", "Oct", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Luis", "Herranz", "notifications", "github", "NUMBER", "com", "write", "Thanks", "again", "kyldvs", "for", "taking", "the", "time", "to", "keep", "answering", "me", "in", "this", "regard", "NUMBER", "I", "understand", "this", "solution", "and", "it", "works", "well", "in", "many", "situations", "NUMBER", "I", "have", "use", "it", "myself", "in", "non", "Flux", "applications", "NUMBER", "Now", "NUMBER", "I", "know", "I", "be", "giving", "this", "a", "hard", "time", "but", "I", "still", "have", "concerns", "regard", "this", "solution", "NUMBER", "To", "make", "my", "example", "work", "you", "be", "get", "rid", "of", "Flux", "NUMBER", "Imagine", "another", "person", "creates", "a", "new", "Store", "in", "the", "future", "NUMBER", "He", "registers", "for", "SHOW_DASHBOARD", "and", "sometimes", "it", "doesn", "t", "work", "because", "the", "user", "be", "on", "the", "dashboard", "but", "SHOW_DASHBOARD", "be", "not", "triggered", "NUMBER", "You", "have", "to", "explain", "him", "that", "even", "though", "SHOW_DASHBOARD", "exists", "he", "can", "t", "use", "it", "because", "that", "part", "of", "the", "app", "be", "outside", "Flux", "and", "he", "has", "to", "use", "RouteStore", "NUMBER", "hasChanged", "instead", "of", "Dispatcher", "NUMBER", "register", "and", "make", "his", "Store", "dependent", "on", "RouteStore", "NUMBER", "To", "avoid", "chaining", "notifications", "in", "the", "Dispatcher", "you", "be", "actually", "use", "a", "different", "notification", "system", "RouteStore", "NUMBER", "hasChanged", "instead", "of", "Dispatcher", "NUMBER", "register", "NUMBER", "If", "you", "refactor", "your", "code", "and", "use", "Dispatcher", "NUMBER", "register", "instead", "you", "end", "up", "dispatching", "in", "the", "middle", "of", "a", "dispatch", "NUMBER", "So", "it", "looks", "like", "change", "the", "notification", "system", "only", "has", "the", "benefit", "of", "bypassing", "that", "rule", "NUMBER", "RouteStore", "NUMBER", "hasChanged", "doesn", "t", "add", "any", "other", "benefit", "to", "the", "Dispatcher", "system", "NUMBER", "If", "one", "of", "the", "Flux", "principles", "be", "easy", "debugging", "and", "you", "look", "at", "the", "flow", "of", "your", "user", "actions", "you", "will", "see", "things", "like", "SHOW_LOGIN", "LOGIN_SUCCEED", "SHOW_CREATE_FIRST_POST", "CREATE_FIRST_POST_FORM_SENT", "SHOW_EDIT_POST", "DELETED_POST", "All", "the", "SHOW_DASHBOARDS", "be", "hidden", "here", "even", "if", "the", "user", "was", "actually", "in", "the", "dashboard", "screen", "twice", "in", "this", "flow", "after", "CREATE_FIRST_POST_FORM_SENT", "and", "after", "DELETED_POST", "NUMBER", "To", "know", "what", "s", "really", "going", "on", "you", "would", "have", "to", "implement", "new", "logging", "features", "to", "include", "the", "RouteStore", "NUMBER", "hasChanged", "notifications", "NUMBER", "So", "after", "all", "our", "conversation", "what", "I", "be", "wondering", "be", "NUMBER", "why", "be", "it", "so", "wrong", "to", "do", "THIS", "that", "you", "be", "trying", "so", "hard", "to", "avoid", "it", "var", "handleClick", "function", "Dispatcher", "NUMBER", "dispatch", "PROFILE_NAME_CHANGED", "Dispatcher", "NUMBER", "dispatch", "SHOW_DASHBOARD", "Why", "be", "it", "so", "wrong", "that", "if", "the", "user", "did", "a", "MultiTask", "in", "one", "step", "you", "write", "instead", "SmallTask", "AND", "SmallTask", "What", "type", "of", "problem", "can", "it", "lead", "to", "I", "can", "imagine", "other", "workarounds", "in", "the", "UI", "side", "NUMBER", "For", "example", "if", "I", "give", "the", "user", "a", "SAVE", "button", "with", "a", "PROFILE_NAME_CHANGED", "dispatch", "NUMBER", "Then", "I", "give", "him", "a", "NAME", "SAVED", "hint", "and", "a", "new", "button", "GO", "TO", "DASHBOARD", "with", "a", "SHOW_DASHBOARD", "dispatch", "NUMBER", "That", "would", "work", "just", "fine", "in", "Flux", "and", "we", "won", "t", "be", "having", "this", "conversation", "NUMBER", "In", "the", "way", "I", "see", "it", "dispatching", "SmallTask", "AND", "SmallTask", "I", "be", "just", "saving", "the", "user", "that", "second", "click", "NUMBER", "Why", "be", "it", "so", "wrong", "to", "save", "him", "a", "click", "when", "he", "actually", "wants", "to", "save", "his", "name", "and", "go", "to", "the", "dashboard", "in", "one", "step", "You", "be", "not", "chaining", "actions", "your", "actions", "be", "still", "easy", "to", "trace", "and", "debug", "your", "log", "be", "fine", "all", "your", "app", "parts", "use", "Flux", "NUMBER", "So", "what", "be", "you", "seeing", "I", "be", "not", "I", "be", "sorry", "I", "think", "it", "looks", "like", "I", "be", "pretty", "sure", "that", "my", "solution", "be", "right", "and", "I", "be", "trying", "hard", "to", "defend", "it", "but", "I", "m", "not", "NUMBER", "I", "really", "love", "Flux", "and", "all", "its", "principles", "NUMBER", "I", "be", "just", "trying", "to", "understand", "Flux", "in", "this", "scenario", "NUMBER", "I", "just", "asked", "in", "the", "first", "place", "because", "I", "never", "saw", "something", "like", "this", "before", "and", "wanted", "to", "know", "your", "impressions", "NUMBER", "Many", "thanks", "for", "your", "help", "here", "NUMBER", "I", "really", "appreciate", "it", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "Thanks", "kyldvs", "NUMBER", "I", "ve", "use", "that", "approach", "since", "then", "and", "so", "far", "it", "has", "worked", "fine", "NUMBER", "The", "code", "in", "here", "do", "not", "seem", "in", "sync", "with", "what", "s", "describe", "on", "the", "web", "page", "LINK", "list", "NUMBER", "html", "For", "instance", "the", "dispatcher", "do", "not", "have", "the", "same", "content", "and", "use", "react", "boilerplate", "seems", "to", "bring", "an", "src", "directory", "rather", "than", "a", "js", "directory", "NUMBER", "To", "clarify", "this", "issue", "be", "specific", "to", "the", "tutorial", "TODO", "MVC", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "This", "tutorial", "be", "outdate", "NUMBER", "flow", "version", "NUMBER", "node", "version", "v", "NUMBER", "steps", "to", "reproduce", "checkout", "LINK", "utils", "todomvc", "run", "npm", "install", "download", "flow", "LINK", "linux", "NUMBER", "latest", "NUMBER", "zip", "run", "Downloads", "flow", "flow", "check", "home", "user", "projects", "flux", "examples", "flux", "utils", "todomvc", "js", "components", "Footer", "NUMBER", "react", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "todos", "const", "cannot", "be", "reassigned", "home", "user", "projects", "flux", "examples", "flux", "utils", "todomvc", "js", "components", "Footer", "NUMBER", "react", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "const", "todos", "home", "user", "projects", "flux", "examples", "flux", "utils", "todomvc", "js", "components", "Footer", "NUMBER", "react", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "todos", "const", "referenced", "before", "declaration", "home", "user", "projects", "flux", "examples", "flux", "utils", "todomvc", "js", "components", "Footer", "NUMBER", "react", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "const", "todos", "home", "user", "projects", "flux", "examples", "flux", "utils", "todomvc", "js", "components", "Footer", "NUMBER", "react", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "todos", "const", "referenced", "before", "declaration", "home", "user", "projects", "flux", "examples", "flux", "utils", "todomvc", "js", "components", "Footer", "NUMBER", "react", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "const", "todos", "home", "user", "projects", "flux", "examples", "flux", "utils", "todomvc", "js", "components", "Header", "NUMBER", "react", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "TodoTextInput", "NUMBER", "react", "NUMBER", "js", "Required", "module", "not", "find", "home", "user", "projects", "flux", "examples", "flux", "utils", "todomvc", "js", "components", "MainSection", "NUMBER", "react", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "Destructuring", "assignment", "must", "be", "initialized", "home", "user", "projects", "flux", "examples", "flux", "utils", "todomvc", "js", "components", "TodoApp", "NUMBER", "react", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "MainSection", "NUMBER", "react", "NUMBER", "js", "Required", "module", "not", "find", "home", "user", "projects", "flux", "examples", "flux", "utils", "todomvc", "js", "components", "TodoItem", "NUMBER", "react", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "Unexpected", "identifier", "home", "user", "projects", "flux", "examples", "flux", "utils", "todomvc", "js", "components", "TodoTextInput", "NUMBER", "react", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "Unexpected", "identifier", "home", "user", "projects", "flux", "examples", "flux", "utils", "todomvc", "node_modules", "flux", "flow", "include", "FluxStoreGroup", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "identifier", "__DEV__", "Could", "not", "resolve", "name", "Found", "NUMBER", "error", "Why", "be", "that", "and", "how", "can", "we", "fix", "it", "Yup", "when", "I", "write", "it", "let", "const", "was", "not", "support", "in", "flow", "so", "it", "was", "not", "possible", "to", "commit", "it", "with", "flow", "be", "clean", "NUMBER", "Now", "that", "flow", "has", "support", "for", "let", "const", "it", "should", "be", "possible", "to", "get", "it", "clean", "NUMBER", "kyldvs", "flow", "documentation", "says", "it", "support", "es", "NUMBER", "features", "LINK", "already", "NUMBER", "What", "should", "I", "do", "to", "clean", "those", "would", "you", "point", "me", "to", "the", "right", "direction", "please", "PS", "the", "error", "doesn", "t", "seem", "to", "be", "of", "let", "cons", "though", "NUMBER", "kyldvs", "I", "m", "get", "this", "error", "with", "the", "latest", "Flow", "NUMBER", "for", "that", "example", "project", "NUMBER", "js", "components", "Header", "NUMBER", "react", "NUMBER", "js", "NUMBER", "NUMBER", "import", "TodoTextInput", "from", "NUMBER", "TodoTextInput", "NUMBER", "react", "TodoTextInput", "NUMBER", "react", "NUMBER", "js", "NUMBER", "Required", "module", "not", "find", "js", "components", "MainSection", "NUMBER", "react", "NUMBER", "js", "NUMBER", "NUMBER", "import", "TodoItem", "from", "NUMBER", "TodoItem", "NUMBER", "react", "TodoItem", "NUMBER", "react", "NUMBER", "js", "NUMBER", "Required", "module", "not", "find", "js", "components", "TodoItem", "NUMBER", "react", "NUMBER", "js", "NUMBER", "NUMBER", "render", "ReactElement", "Unexpected", "identifier", "js", "components", "TodoTextInput", "NUMBER", "react", "NUMBER", "js", "NUMBER", "NUMBER", "render", "ReactElement", "Unexpected", "identifier", "node_modules", "flux", "flow", "include", "FluxStoreGroup", "NUMBER", "js", "NUMBER", "NUMBER", "if", "__DEV__", "identifier", "__DEV__", "NUMBER", "Could", "not", "resolve", "name", "Some", "error", "seem", "to", "be", "relate", "to", "the", "fact", "that", "you", "re", "use", "babel", "stage", "NUMBER", "that", "include", "Proposal", "ES", "Class", "Fields", "Static", "Properties", "LINK", "class", "static", "properties", "and", "field", "which", "Flow", "doesn", "t", "support", "NUMBER", "I", "m", "having", "these", "error", "as", "well", "NUMBER", "Also", "isn", "t", "this", "supposed", "to", "be", "an", "error", "javascript", "const", "instance", "Dispatcher", "TAG", "new", "Dispatcher", "export", "default", "instance", "instance", "NUMBER", "dispatch", "NUMBER", "TAG", "object", "type", "NUMBER", "This", "type", "be", "incompatible", "with", "NUMBER", "export", "default", "class", "Footer", "extend", "Component", "TAG", "undefined", "NUMBER", "Did", "you", "forget", "to", "declare", "object", "type", "Has", "anyone", "be", "able", "to", "get", "the", "example", "to", "not", "have", "any", "flow", "error", "Or", "have", "any", "idea", "for", "point", "me", "in", "the", "right", "direction", "NUMBER", "The", "example", "should", "run", "fine", "the", "flow", "types", "be", "not", "correct", "NUMBER", "If", "the", "example", "do", "not", "work", "let", "s", "open", "another", "issue", "to", "track", "it", "if", "the", "example", "do", "work", "and", "just", "report", "some", "flow", "error", "that", "s", "what", "this", "issue", "be", "meant", "to", "be", "track", "NUMBER", "The", "example", "be", "run", "fine", "for", "me", "NUMBER", "I", "ll", "fix", "my", "word", "at", "the", "end", "NUMBER", "It", "s", "the", "flow", "error", "that", "I", "m", "trying", "to", "get", "work", "NUMBER", "Think", "I", "may", "have", "just", "figured", "out", "what", "be", "cause", "most", "of", "them", "NUMBER", "Looking", "at", "the", "HOC", "class", "at", "the", "end", "of", "LINK", "_", "I", "notice", "it", "has", "a", "state", "property", "NUMBER", "Adding", "these", "to", "Footer", "etc", "be", "at", "least", "part", "of", "the", "fix", "needed", "NUMBER", "I", "ll", "see", "if", "I", "can", "put", "together", "a", "pull", "request", "NUMBER", "Awesome", "Thanks", "for", "looking", "into", "it", "NUMBER", "A", "pull", "request", "would", "be", "great", "NUMBER", "NUMBER", "should", "have", "fix", "this", "Respected", "All", "i", "did", "a", "grep", "search", "on", "my", "system", "ubuntu", "NUMBER", "NUMBER", "bit", "NUMBER", "i", "made", "the", "necessary", "change", "according", "to", "that", "NUMBER", "regards", "Tapesh", "Mandal", "I", "ll", "do", "that", "next", "week", "when", "I", "get", "my", "Mac", "NUMBER", "Sent", "from", "my", "iPhone", "On", "NUMBER", "Nov", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Kyle", "Davis", "notifications", "github", "NUMBER", "com", "write", "This", "conflict", "now", "please", "rebase", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "Sorry", "I", "ll", "work", "on", "this", "soon", "NUMBER", "Hi", "kyldvs", "its", "do", "now", "LINK", "list", "NUMBER", "html", "be", "use", "react", "boilerplate", "which", "be", "apparently", "deprecate", "according", "to", "LINK", "jstransform", "and", "react", "tool", "NUMBER", "html", "npm", "install", "npm", "WARN", "package", "NUMBER", "json", "react", "boilerplate", "NUMBER", "No", "repository", "field", "NUMBER", "npm", "WARN", "package", "NUMBER", "json", "react", "boilerplate", "NUMBER", "license", "should", "be", "a", "valid", "SPDX", "license", "expression", "npm", "WARN", "deprecate", "react", "tool", "NUMBER", "react", "tool", "be", "deprecate", "NUMBER", "For", "more", "information", "visit", "LINK", "tool", "deprecate", "fsevents", "NUMBER", "install", "Users", "makepeace", "react", "boilerplate", "node_modules", "jsxc", "node_modules", "chokidar", "node_modules", "fsevents", "node", "gyp", "rebuild", "CXX", "target", "Release", "obj", "NUMBER", "target", "fse", "fsevents", "NUMBER", "o", "In", "file", "include", "from", "NUMBER", "fsevents", "NUMBER", "cc", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "return", "_NAN_ERROR", "v", "NUMBER", "Exception", "Error", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_ERROR", "define", "_NAN_ERROR", "fun", "errmsg", "fun", "v", "NUMBER", "String", "New", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "ThrowException", "in", "namespace", "v", "NUMBER", "_NAN_THROW_ERROR", "v", "NUMBER", "Exception", "Error", "errmsg", "goes", "on", "and", "on", "NUMBER", "NUMBER", "thumbsup", "Would", "love", "to", "get", "this", "work", "NUMBER", "Any", "fix", "on", "the", "horizon", "Hmm", "fisherwebdev", "what", "do", "you", "think", "about", "taking", "this", "as", "a", "chance", "to", "upgrade", "examples", "to", "ES", "NUMBER", "as", "well", "I", "was", "able", "to", "build", "it", "with", "following", "version", "of", "node", "and", "npm", "node", "v", "NUMBER", "npm", "NUMBER", "npm", "install", "just", "works", "with", "those", "version", "NUMBER", "I", "use", "nvm", "to", "change", "node", "version", "NUMBER", "Same", "node", "npm", "as", "destan", "but", "I", "wasn", "t", "able", "to", "run", "npm", "install", "NUMBER", "jest", "cli", "expected", "a", "lower", "version", "node", "NUMBER", "Upgrade", "jest", "cli", "works", "for", "me", "I", "be", "use", "node", "version", "NUMBER", "npm", "install", "jest", "cli", "save", "dev", "npm", "install", "What", "justwy", "suggested", "works", "NUMBER", "Just", "first", "delete", "the", "node_modules", "directory", "if", "it", "fail", "already", "Running", "node", "v", "NUMBER", "npm", "NUMBER", "someone", "should", "submit", "a", "pull", "request", "update", "the", "dependencies", "NUMBER", "this", "be", "an", "easy", "fix", "to", "a", "problem", "a", "lot", "of", "people", "be", "having", "NUMBER", "justwy", "It", "works", "NUMBER", "O", "_", "O", "thank", "you", "bash", "npm", "install", "jest", "cli", "save", "dev", "npm", "install", "justwy", "trojanc", "BuptStEve", "I", "be", "use", "Node", "v", "NUMBER", "npm", "v", "NUMBER", "Upon", "cloning", "the", "directory", "and", "run", "the", "following", "commands", "npm", "install", "jest", "cli", "save", "dev", "npm", "install", "I", "still", "receive", "error", "NUMBER", "Is", "this", "expected", "behavior", "npm", "WARN", "package", "NUMBER", "json", "react", "boilerplate", "NUMBER", "No", "repository", "field", "NUMBER", "npm", "WARN", "package", "NUMBER", "json", "react", "boilerplate", "NUMBER", "license", "should", "be", "a", "valid", "SPDX", "license", "expression", "npm", "WARN", "peerDependencies", "The", "peer", "dependency", "envify", "NUMBER", "include", "from", "stylesheets", "will", "no", "npm", "WARN", "peerDependencies", "longer", "be", "automatically", "install", "to", "fulfill", "the", "peerDependency", "npm", "WARN", "peerDependencies", "in", "npm", "NUMBER", "NUMBER", "Your", "application", "will", "need", "to", "depend", "on", "it", "explicitly", "NUMBER", "npm", "WARN", "peerDependencies", "The", "peer", "dependency", "envify", "NUMBER", "include", "from", "react", "will", "no", "npm", "WARN", "peerDependencies", "longer", "be", "automatically", "install", "to", "fulfill", "the", "peerDependency", "npm", "WARN", "peerDependencies", "in", "npm", "NUMBER", "NUMBER", "Your", "application", "will", "need", "to", "depend", "on", "it", "explicitly", "NUMBER", "npm", "WARN", "deprecate", "react", "tool", "NUMBER", "react", "tool", "be", "deprecate", "NUMBER", "For", "more", "information", "visit", "LINK", "tool", "deprecate", "fsevents", "NUMBER", "install", "Users", "vmaudgalya", "projects", "react", "react", "boilerplate", "node_modules", "jsxc", "node_modules", "chokidar", "node_modules", "fsevents", "node", "gyp", "rebuild", "CXX", "target", "Release", "obj", "NUMBER", "target", "fse", "fsevents", "NUMBER", "o", "In", "file", "include", "from", "NUMBER", "fsevents", "NUMBER", "cc", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "return", "_NAN_ERROR", "v", "NUMBER", "Exception", "Error", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_ERROR", "define", "_NAN_ERROR", "fun", "errmsg", "fun", "v", "NUMBER", "String", "New", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "ThrowException", "in", "namespace", "v", "NUMBER", "_NAN_THROW_ERROR", "v", "NUMBER", "Exception", "Error", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_THROW_ERROR", "v", "NUMBER", "ThrowException", "_NAN_ERROR", "fun", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "_NAN_THROW_ERROR", "v", "NUMBER", "Exception", "Error", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_THROW_ERROR", "v", "NUMBER", "ThrowException", "_NAN_ERROR", "fun", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_ERROR", "define", "_NAN_ERROR", "fun", "errmsg", "fun", "v", "NUMBER", "String", "New", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "type", "named", "ThrowException", "in", "namespace", "v", "NUMBER", "v", "NUMBER", "ThrowException", "error", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "did", "you", "mean", "v", "NUMBER", "TypeSwitch", "New", "v", "NUMBER", "Local", "TAG", "err", "v", "NUMBER", "Exception", "Error", "v", "NUMBER", "String", "New", "msg", "v", "NUMBER", "TypeSwitch", "New", "Users", "vmaudgalya", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "v", "NUMBER", "TypeSwitch", "New", "declared", "here", "static", "Local", "TAG", "New", "Local", "TAG", "type", "In", "file", "include", "from", "NUMBER", "fsevents", "NUMBER", "cc", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "calling", "a", "private", "constructor", "of", "class", "v", "NUMBER", "Local", "TAG", "v", "NUMBER", "Local", "TAG", "err", "v", "NUMBER", "Exception", "Error", "v", "NUMBER", "String", "New", "msg", "Users", "vmaudgalya", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "declared", "private", "here", "V", "NUMBER", "_INLINE", "Local", "S", "that", "In", "file", "include", "from", "NUMBER", "fsevents", "NUMBER", "cc", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "too", "few", "argument", "to", "function", "call", "expected", "NUMBER", "have", "NUMBER", "obj", "Set", "v", "NUMBER", "String", "New", "code", "v", "NUMBER", "Int", "NUMBER", "New", "errorNumber", "Users", "vmaudgalya", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "New", "declared", "here", "static", "Local", "TAG", "New", "Isolate", "isolate", "int", "NUMBER", "_t", "value", "In", "file", "include", "from", "NUMBER", "fsevents", "NUMBER", "cc", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "obj", "Set", "v", "NUMBER", "String", "New", "code", "v", "NUMBER", "Int", "NUMBER", "New", "errorNumber", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "return", "_NAN_ERROR", "v", "NUMBER", "Exception", "TypeError", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_ERROR", "define", "_NAN_ERROR", "fun", "errmsg", "fun", "v", "NUMBER", "String", "New", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "ThrowException", "in", "namespace", "v", "NUMBER", "_NAN_THROW_ERROR", "v", "NUMBER", "Exception", "TypeError", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_THROW_ERROR", "v", "NUMBER", "ThrowException", "_NAN_ERROR", "fun", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "_NAN_THROW_ERROR", "v", "NUMBER", "Exception", "TypeError", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_THROW_ERROR", "v", "NUMBER", "ThrowException", "_NAN_ERROR", "fun", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_ERROR", "define", "_NAN_ERROR", "fun", "errmsg", "fun", "v", "NUMBER", "String", "New", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "return", "_NAN_ERROR", "v", "NUMBER", "Exception", "RangeError", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_ERROR", "define", "_NAN_ERROR", "fun", "errmsg", "fun", "v", "NUMBER", "String", "New", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "ThrowException", "in", "namespace", "v", "NUMBER", "_NAN_THROW_ERROR", "v", "NUMBER", "Exception", "RangeError", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_THROW_ERROR", "v", "NUMBER", "ThrowException", "_NAN_ERROR", "fun", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "_NAN_THROW_ERROR", "v", "NUMBER", "Exception", "RangeError", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_THROW_ERROR", "v", "NUMBER", "ThrowException", "_NAN_ERROR", "fun", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_ERROR", "define", "_NAN_ERROR", "fun", "errmsg", "fun", "v", "NUMBER", "String", "New", "errmsg", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "smalloc", "in", "namespace", "node", "node", "smalloc", "FreeCallback", "callback", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NAN_INLINE", "define", "NAN_INLINE", "declarator", "inline", "__attribute__", "always_inline", "declarator", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "matching", "function", "for", "call", "to", "New", "return", "node", "Buffer", "New", "data", "size", "Users", "vmaudgalya", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "no", "know", "conversion", "from", "char", "to", "v", "NUMBER", "Isolate", "for", "NUMBER", "argument", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "size_t", "length", "Users", "vmaudgalya", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "no", "know", "conversion", "from", "char", "to", "v", "NUMBER", "Isolate", "for", "NUMBER", "argument", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "Users", "vmaudgalya", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "requires", "NUMBER", "argument", "but", "NUMBER", "were", "provide", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "Users", "vmaudgalya", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "requires", "NUMBER", "argument", "but", "NUMBER", "were", "provide", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "In", "file", "include", "from", "NUMBER", "fsevents", "NUMBER", "cc", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "matching", "function", "for", "call", "to", "New", "return", "node", "Buffer", "New", "size", "Users", "vmaudgalya", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "requires", "NUMBER", "argument", "but", "NUMBER", "was", "provide", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "size_t", "length", "Users", "vmaudgalya", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "requires", "at", "least", "NUMBER", "argument", "but", "NUMBER", "was", "provide", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "Users", "vmaudgalya", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "requires", "NUMBER", "argument", "but", "NUMBER", "was", "provide", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "Users", "vmaudgalya", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "requires", "NUMBER", "argument", "but", "NUMBER", "was", "provide", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "In", "file", "include", "from", "NUMBER", "fsevents", "NUMBER", "cc", "NUMBER", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "Use", "in", "namespace", "node", "Buffer", "return", "node", "Buffer", "Use", "data", "size", "NUMBER", "node_modules", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "too", "few", "argument", "to", "function", "call", "single", "argument", "isolate", "was", "not", "specified", "v", "NUMBER", "Local", "TAG", "obj", "v", "NUMBER", "Object", "New", "Users", "vmaudgalya", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "New", "declared", "here", "static", "Local", "TAG", "New", "Isolate", "isolate", "fatal", "error", "too", "many", "error", "emitted", "stopping", "now", "ferror", "limit", "NUMBER", "error", "generate", "NUMBER", "make", "Release", "obj", "NUMBER", "target", "fse", "fsevents", "NUMBER", "o", "Error", "NUMBER", "gyp", "ERR", "build", "error", "gyp", "ERR", "stack", "Error", "make", "fail", "with", "exit", "code", "NUMBER", "gyp", "ERR", "stack", "at", "ChildProcess", "NUMBER", "onExit", "Users", "vmaudgalya", "NUMBER", "nvm", "version", "node", "v", "NUMBER", "lib", "node_modules", "npm", "node_modules", "node", "gyp", "lib", "build", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "stack", "at", "emitTwo", "events", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "stack", "at", "ChildProcess", "NUMBER", "emit", "events", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "stack", "at", "Process", "NUMBER", "ChildProcess", "NUMBER", "_handle", "NUMBER", "onexit", "internal", "child_process", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "System", "Darwin", "NUMBER", "gyp", "ERR", "command", "Users", "vmaudgalya", "NUMBER", "nvm", "version", "node", "v", "NUMBER", "bin", "node", "Users", "vmaudgalya", "NUMBER", "nvm", "version", "node", "v", "NUMBER", "lib", "node_modules", "npm", "node_modules", "node", "gyp", "bin", "node", "gyp", "NUMBER", "js", "rebuild", "gyp", "ERR", "cwd", "Users", "vmaudgalya", "projects", "react", "react", "boilerplate", "node_modules", "jsxc", "node_modules", "chokidar", "node_modules", "fsevents", "gyp", "ERR", "node", "v", "v", "NUMBER", "gyp", "ERR", "node", "gyp", "v", "v", "NUMBER", "gyp", "ERR", "not", "ok", "npm", "WARN", "optional", "dep", "fail", "continuing", "fsevents", "NUMBER", "justwy", "Thanks", "it", "works", "for", "me", "NUMBER", "I", "m", "having", "this", "problem", "again", "in", "Node", "v", "NUMBER", "justwy", "solution", "did", "not", "work", "NUMBER", "npm", "WARN", "deprecate", "react", "tool", "NUMBER", "react", "tool", "be", "deprecate", "NUMBER", "For", "more", "information", "visit", "LINK", "tool", "deprecate", "npm", "WARN", "prefer", "global", "react", "tool", "NUMBER", "should", "be", "install", "with", "g", "fsevents", "NUMBER", "install", "Users", "erickmaynard", "react", "node", "node_modules", "fsevents", "node", "gyp", "rebuild", "CXX", "target", "Release", "obj", "NUMBER", "target", "fse", "fsevents", "NUMBER", "o", "In", "file", "include", "from", "NUMBER", "fsevents", "NUMBER", "cc", "NUMBER", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "return", "_NAN_ERROR", "v", "NUMBER", "Exception", "Error", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_ERROR", "define", "_NAN_ERROR", "fun", "errmsg", "fun", "v", "NUMBER", "String", "New", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "ThrowException", "in", "namespace", "v", "NUMBER", "_NAN_THROW_ERROR", "v", "NUMBER", "Exception", "Error", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_THROW_ERROR", "v", "NUMBER", "ThrowException", "_NAN_ERROR", "fun", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "_NAN_THROW_ERROR", "v", "NUMBER", "Exception", "Error", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_THROW_ERROR", "v", "NUMBER", "ThrowException", "_NAN_ERROR", "fun", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_ERROR", "define", "_NAN_ERROR", "fun", "errmsg", "fun", "v", "NUMBER", "String", "New", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "type", "named", "ThrowException", "in", "namespace", "v", "NUMBER", "v", "NUMBER", "ThrowException", "error", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "v", "NUMBER", "Local", "TAG", "err", "v", "NUMBER", "Exception", "Error", "v", "NUMBER", "String", "New", "msg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "obj", "Set", "v", "NUMBER", "String", "New", "code", "v", "NUMBER", "Int", "NUMBER", "New", "errorNumber", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "too", "few", "argument", "to", "function", "call", "expected", "NUMBER", "have", "NUMBER", "obj", "Set", "v", "NUMBER", "String", "New", "code", "v", "NUMBER", "Int", "NUMBER", "New", "errorNumber", "Users", "erickmaynard", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "New", "declared", "here", "static", "Local", "TAG", "New", "Isolate", "isolate", "int", "NUMBER", "_t", "value", "In", "file", "include", "from", "NUMBER", "fsevents", "NUMBER", "cc", "NUMBER", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "return", "_NAN_ERROR", "v", "NUMBER", "Exception", "TypeError", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_ERROR", "define", "_NAN_ERROR", "fun", "errmsg", "fun", "v", "NUMBER", "String", "New", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "ThrowException", "in", "namespace", "v", "NUMBER", "_NAN_THROW_ERROR", "v", "NUMBER", "Exception", "TypeError", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_THROW_ERROR", "v", "NUMBER", "ThrowException", "_NAN_ERROR", "fun", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "_NAN_THROW_ERROR", "v", "NUMBER", "Exception", "TypeError", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_THROW_ERROR", "v", "NUMBER", "ThrowException", "_NAN_ERROR", "fun", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_ERROR", "define", "_NAN_ERROR", "fun", "errmsg", "fun", "v", "NUMBER", "String", "New", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "return", "_NAN_ERROR", "v", "NUMBER", "Exception", "RangeError", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_ERROR", "define", "_NAN_ERROR", "fun", "errmsg", "fun", "v", "NUMBER", "String", "New", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "ThrowException", "in", "namespace", "v", "NUMBER", "_NAN_THROW_ERROR", "v", "NUMBER", "Exception", "RangeError", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_THROW_ERROR", "v", "NUMBER", "ThrowException", "_NAN_ERROR", "fun", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "New", "in", "v", "NUMBER", "String", "_NAN_THROW_ERROR", "v", "NUMBER", "Exception", "RangeError", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_THROW_ERROR", "v", "NUMBER", "ThrowException", "_NAN_ERROR", "fun", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "_NAN_ERROR", "define", "_NAN_ERROR", "fun", "errmsg", "fun", "v", "NUMBER", "String", "New", "errmsg", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "smalloc", "in", "namespace", "node", "node", "smalloc", "FreeCallback", "callback", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "note", "expanded", "from", "macro", "NAN_INLINE", "define", "NAN_INLINE", "declarator", "inline", "__attribute__", "always_inline", "declarator", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "matching", "function", "for", "call", "to", "New", "return", "node", "Buffer", "New", "data", "size", "Users", "erickmaynard", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "no", "know", "conversion", "from", "char", "to", "v", "NUMBER", "Isolate", "for", "NUMBER", "argument", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "size_t", "length", "Users", "erickmaynard", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "no", "know", "conversion", "from", "char", "to", "v", "NUMBER", "Isolate", "for", "NUMBER", "argument", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "Users", "erickmaynard", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "requires", "NUMBER", "argument", "but", "NUMBER", "were", "provide", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "Users", "erickmaynard", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "requires", "NUMBER", "argument", "but", "NUMBER", "were", "provide", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "In", "file", "include", "from", "NUMBER", "fsevents", "NUMBER", "cc", "NUMBER", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "matching", "function", "for", "call", "to", "New", "return", "node", "Buffer", "New", "size", "Users", "erickmaynard", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "requires", "NUMBER", "argument", "but", "NUMBER", "was", "provide", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "size_t", "length", "Users", "erickmaynard", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "requires", "at", "least", "NUMBER", "argument", "but", "NUMBER", "was", "provide", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "Users", "erickmaynard", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "requires", "NUMBER", "argument", "but", "NUMBER", "was", "provide", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "Users", "erickmaynard", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "node_buffer", "NUMBER", "h", "NUMBER", "NUMBER", "note", "candidate", "function", "not", "viable", "requires", "NUMBER", "argument", "but", "NUMBER", "was", "provide", "NODE_EXTERN", "v", "NUMBER", "MaybeLocal", "TAG", "New", "v", "NUMBER", "Isolate", "isolate", "In", "file", "include", "from", "NUMBER", "fsevents", "NUMBER", "cc", "NUMBER", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "no", "member", "named", "Use", "in", "namespace", "node", "Buffer", "return", "node", "Buffer", "Use", "data", "size", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "too", "few", "argument", "to", "function", "call", "single", "argument", "isolate", "was", "not", "specified", "v", "NUMBER", "Local", "TAG", "obj", "v", "NUMBER", "Object", "New", "Users", "erickmaynard", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "New", "declared", "here", "static", "Local", "TAG", "New", "Isolate", "isolate", "In", "file", "include", "from", "NUMBER", "fsevents", "NUMBER", "cc", "NUMBER", "NUMBER", "NUMBER", "nan", "nan", "NUMBER", "h", "NUMBER", "NUMBER", "error", "too", "few", "argument", "to", "function", "call", "single", "argument", "isolate", "was", "not", "specified", "v", "NUMBER", "Local", "TAG", "obj", "v", "NUMBER", "Object", "New", "Users", "erickmaynard", "NUMBER", "node", "gyp", "NUMBER", "include", "node", "v", "NUMBER", "h", "NUMBER", "NUMBER", "note", "New", "declared", "here", "static", "Local", "TAG", "New", "Isolate", "isolate", "fatal", "error", "too", "many", "error", "emitted", "stopping", "now", "ferror", "limit", "NUMBER", "error", "generate", "NUMBER", "make", "Release", "obj", "NUMBER", "target", "fse", "fsevents", "NUMBER", "o", "Error", "NUMBER", "gyp", "ERR", "build", "error", "gyp", "ERR", "stack", "Error", "make", "fail", "with", "exit", "code", "NUMBER", "gyp", "ERR", "stack", "at", "ChildProcess", "NUMBER", "onExit", "usr", "local", "lib", "node_modules", "npm", "node_modules", "node", "gyp", "lib", "build", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "stack", "at", "emitTwo", "events", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "stack", "at", "ChildProcess", "NUMBER", "emit", "events", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "stack", "at", "Process", "NUMBER", "ChildProcess", "NUMBER", "_handle", "NUMBER", "onexit", "internal", "child_process", "NUMBER", "js", "NUMBER", "NUMBER", "gyp", "ERR", "System", "Darwin", "NUMBER", "gyp", "ERR", "command", "usr", "local", "bin", "node", "usr", "local", "lib", "node_modules", "npm", "node_modules", "node", "gyp", "bin", "node", "gyp", "NUMBER", "js", "rebuild", "gyp", "ERR", "cwd", "Users", "erickmaynard", "react", "node", "node_modules", "fsevents", "gyp", "ERR", "node", "v", "v", "NUMBER", "gyp", "ERR", "node", "gyp", "v", "v", "NUMBER", "gyp", "ERR", "not", "ok", "npm", "WARN", "install", "fsevents", "NUMBER", "fsevents", "NUMBER", "install", "node", "gyp", "rebuild", "npm", "WARN", "install", "fsevents", "NUMBER", "Exit", "status", "NUMBER", "react", "boilerplate", "NUMBER", "Users", "erickmaynard", "react", "node", "UNMET", "PEER", "DEPENDENCY", "envify", "NUMBER", "jsxc", "NUMBER", "chokidar", "NUMBER", "recursive", "readdir", "NUMBER", "glob", "NUMBER", "minimatch", "NUMBER", "mkdirp", "NUMBER", "react", "tool", "NUMBER", "commoner", "NUMBER", "graceful", "fs", "NUMBER", "install", "NUMBER", "private", "NUMBER", "q", "NUMBER", "recast", "NUMBER", "ast", "types", "NUMBER", "cls", "NUMBER", "esprima", "NUMBER", "dev", "harmony", "git", "LINK", "a", "NUMBER", "a", "NUMBER", "eb", "NUMBER", "b", "NUMBER", "a", "NUMBER", "dce", "NUMBER", "a", "NUMBER", "ca", "NUMBER", "d", "NUMBER", "bd", "NUMBER", "b", "NUMBER", "c", "NUMBER", "b", "NUMBER", "fd", "source", "map", "NUMBER", "whiskey", "NUMBER", "gex", "NUMBER", "logmagic", "NUMBER", "magic", "template", "NUMBER", "rimraf", "NUMBER", "simplesets", "NUMBER", "sprintf", "NUMBER", "terminal", "NUMBER", "underscore", "NUMBER", "esprima", "fb", "NUMBER", "dev", "harmony", "fb", "jstransform", "NUMBER", "base", "NUMBER", "NUMBER", "esprima", "fb", "NUMBER", "dev", "harmony", "fb", "source", "map", "NUMBER", "react", "NUMBER", "statics", "stylesheets", "NUMBER", "fs", "extra", "NUMBER", "jsonfile", "NUMBER", "mkdirp", "NUMBER", "ncp", "NUMBER", "rimraf", "NUMBER", "glob", "NUMBER", "minimatch", "NUMBER", "mimetype", "NUMBER", "rework", "NUMBER", "color", "parser", "NUMBER", "commander", "NUMBER", "keypress", "NUMBER", "css", "NUMBER", "css", "parse", "NUMBER", "css", "stringify", "NUMBER", "debug", "NUMBER", "ms", "NUMBER", "hsb", "NUMBER", "rgb", "NUMBER", "mime", "NUMBER", "rework", "inherit", "NUMBER", "rework", "visit", "NUMBER", "stylesheets", "NUMBER", "npm", "WARN", "EPEERINVALID", "stylesheets", "NUMBER", "requires", "a", "peer", "of", "envify", "NUMBER", "but", "none", "was", "install", "NUMBER", "npm", "WARN", "EPEERINVALID", "react", "NUMBER", "requires", "a", "peer", "of", "envify", "NUMBER", "but", "none", "was", "install", "NUMBER", "npm", "WARN", "EPACKAGEJSON", "react", "boilerplate", "NUMBER", "No", "repository", "field", "NUMBER", "npm", "WARN", "EPACKAGEJSON", "react", "boilerplate", "NUMBER", "license", "should", "be", "a", "valid", "SPDX", "license", "expression", "NUMBER", "Why", "it", "be", "not", "reopened", "kyldvs", "this", "be", "in", "reference", "to", "the", "tutorial", "LINK", "list", "NUMBER", "html", "which", "mentions", "use", "react", "boilerplate", "LINK", "boilerplate", "as", "a", "starting", "point", "NUMBER", "That", "doesn", "t", "work", "NUMBER", "examples", "flux", "todomvc", "do", "work", "but", "it", "also", "doesn", "t", "use", "the", "react", "boilerplate", "project", "NUMBER", "This", "should", "be", "fix", "NUMBER", "NUMBER", "I", "don", "t", "know", "whether", "to", "be", "proud", "or", "ashamed", "that", "I", "absolutely", "exhausted", "my", "options", "for", "make", "the", "tutorial", "work", "as", "write", "before", "questioning", "why", "it", "uses", "a", "clearly", "deprecate", "boilerplate", "repo", "it", "s", "kind", "of", "like", "admitting", "defeat", "but", "this", "was", "not", "particularly", "efficient", "but", "yeah", "this", "should", "be", "fix", "NUMBER", "This", "tutorial", "LINK", "tutorial", "be", "really", "great", "it", "doesn", "t", "seem", "like", "it", "d", "be", "too", "hard", "to", "knock", "together", "a", "similar", "repo", "NUMBER", "I", "d", "do", "it", "myself", "but", "I", "m", "trying", "to", "learn", "Flux", "here", "kind", "of", "a", "bootstrapping", "problem", "NUMBER", "NUMBER", "I", "use", "nvm", "to", "install", "node", "NUMBER", "as", "kyldvs", "said", "it", "worked", "for", "him", "on", "that", "version", "NUMBER", "I", "was", "then", "able", "to", "run", "justwy", "s", "solution", "and", "npm", "install", "executed", "without", "error", "NUMBER", "Hi", "I", "just", "extracted", "the", "Flux", "Chat", "example", "into", "it", "s", "own", "repo", "LINK", "chat", "and", "made", "numbers", "of", "change", "to", "make", "it", "up", "to", "date", "NUMBER", "The", "reason", "I", "like", "to", "put", "it", "in", "its", "own", "repo", "be", "that", "I", "also", "work", "on", "Chat", "example", "for", "other", "Flux", "implementation", "e", "NUMBER", "g", "NUMBER", "Redux", "Chat", "LINK", "chat", "NUMBER", "I", "don", "t", "know", "how", "you", "feel", "about", "this", "direction", "Do", "you", "prefer", "a", "PR", "to", "update", "the", "example", "here", "or", "you", "be", "fine", "to", "add", "a", "link", "to", "LINK", "chat", "LINK", "chat", "Changes", "from", "original", "example", "Update", "React", "NUMBER", "js", "to", "NUMBER", "rc", "NUMBER", "Fixed", "some", "bug", "e", "NUMBER", "g", "NUMBER", "latestMessage", "on", "thread", "be", "not", "update", "when", "create", "new", "message", "Mock", "server", "latency", "when", "fetching", "message", "use", "setTimeout", "Use", "ES", "NUMBER", "syntax", "Consolidate", "actions", "into", "single", "file", "actions", "NUMBER", "js", "Webpack", "instead", "of", "Browserify", "Babel", "instead", "of", "Reactify", "Updating", "the", "link", "in", "todomvc", "tutorial", "to", "the", "current", "one", "NUMBER", "Thanks", "Hello", "Is", "there", "any", "chance", "of", "get", "flux", "utils", "include", "into", "a", "tag", "build", "Current", "dist", "include", "dispatcher", "only", "which", "be", "awesome", "but", "it", "would", "be", "double", "heck", "even", "triple", "awesome", "if", "some", "of", "the", "new", "store", "types", "were", "available", "to", "folks", "outside", "the", "Babel", "toolchain", "NUMBER", "Thanks", "Eric", "It", "should", "still", "be", "usable", "after", "npm", "install", "flux", "by", "requiring", "flux", "utils", "or", "be", "you", "outside", "of", "a", "node", "environment", "completely", "it", "will", "get", "compiled", "into", "plain", "javascript", "inside", "of", "node_modules", "flux", "as", "part", "of", "the", "installation", "process", "kyldvs", "I", "m", "run", "in", "a", "browser", "context", "currently", "installing", "flux", "via", "bower", "NUMBER", "It", "looks", "like", "immutable", "NUMBER", "js", "would", "need", "to", "be", "add", "as", "a", "dependency", "and", "then", "if", "needed", "I", "could", "set", "up", "a", "bower", "post", "install", "hook", "NUMBER", "kyldvs", "Took", "longer", "than", "I", "expected", "but", "I", "told", "you", "somebody", "would", "want", "it", "wink", "Yeah", "looks", "like", "we", "need", "to", "add", "a", "second", "bower", "module", "that", "pulls", "in", "flux", "utils", "you", "did", "call", "it", "zpao", "P", "Ha", "well", "zpao", "I", "posted", "something", "about", "this", "on", "Twitter", "about", "NUMBER", "weeks", "ago", "just", "wasn", "t", "sure", "who", "to", "tag", "then", "Glad", "to", "hear", "it", "ll", "make", "its", "way", "in", "NUMBER", "Yup", "same", "thing", "NUMBER", "It", "would", "be", "nice", "to", "have", "flux", "utils", "as", "part", "of", "the", "flux", "bower", "package", "NUMBER", "adamsea", "thumbsup", "If", "you", "run", "Dispatch", "NUMBER", "unregister", "in", "the", "middle", "of", "a", "dispatch", "then", "you", "modify", "the", "_callbacks", "object", "while", "the", "Dispatch", "loop", "be", "run", "NUMBER", "Depending", "on", "the", "id", "you", "unregister", "this", "can", "cause", "the", "dispatch", "loop", "to", "raise", "an", "error", "like", "Dispatcher", "NUMBER", "waitFor", "NUMBER", "ID_", "NUMBER", "do", "not", "map", "to", "a", "registered", "callback", "NUMBER", "It", "would", "be", "much", "nicer", "to", "add", "an", "invariant", "in", "the", "unregister", "function", "that", "asserts", "we", "be", "not", "currently", "in", "a", "dispatch", "NUMBER", "A", "slightly", "more", "complicated", "option", "be", "to", "wait", "for", "all", "other", "callbacks", "before", "performing", "the", "unregister", "however", "this", "may", "cause", "a", "circular", "dependency", "NUMBER", "hi", "carlsverre", "i", "want", "to", "work", "on", "this", "bug", "NUMBER", "can", "you", "help", "me", "simulate", "this", "on", "my", "system", "Regards", "Tapesh", "Mandal", "Just", "run", "dispatch", "NUMBER", "unregister", "while", "you", "be", "in", "an", "active", "dispatch", "NUMBER", "And", "then", "call", "waitFor", "right", "after", "run", "unregister", "on", "the", "dispatch", "id", "you", "just", "unregistered", "NUMBER", "Add", "punctuation", "to", "make", "comment", "styling", "consistent", "with", "the", "rest", "of", "the", "repo", "NUMBER", "Nothing", "else", "was", "change", "NUMBER", "Add", "capitalization", "and", "punctuation", "to", "make", "comment", "styling", "consistent", "with", "the", "rest", "of", "the", "repo", "NUMBER", "Nothing", "else", "change", "NUMBER", "Fixed", "a", "typo", "NUMBER", "Didn", "t", "change", "anything", "else", "in", "the", "repo", "NUMBER", "Not", "a", "typo", "this", "be", "fine", "either", "way", "NUMBER", "I", "don", "t", "care", "though", "so", "I", "ll", "let", "kyldvs", "or", "fisherwebdev", "take", "care", "of", "it", "NUMBER", "ReactRouter", "s", "TAG", "and", "possibly", "other", "transition", "methods", "be", "broken", "when", "use", "in", "conjunction", "with", "FluxContainer", "Looks", "like", "the", "same", "issue", "here", "LINK", "router", "issue", "NUMBER", "If", "it", "doesn", "t", "get", "fix", "in", "react", "router", "or", "react", "itself", "we", "can", "try", "to", "address", "it", "NUMBER", "The", "workaround", "for", "now", "be", "to", "just", "not", "create", "container", "as", "pure", "Container", "NUMBER", "create", "Foo", "pure", "false", "Updating", "the", "Views", "That", "s", "pretty", "easy", "to", "fix", "pass", "router", "state", "down", "to", "all", "route", "handlers", "NUMBER", "React", "Router", "NUMBER", "instructions", "LINK", "redux", "my", "views", "arent", "update", "on", "route", "change", "with", "react", "router", "NUMBER", "React", "Router", "NUMBER", "do", "this", "anyway", "so", "no", "need", "to", "do", "anything", "special", "there", "Updating", "the", "TAG", "state", "That", "s", "the", "tricky", "one", "NUMBER", "I", "d", "suggest", "keep", "the", "router", "state", "in", "the", "Flux", "store", "and", "write", "your", "own", "TAG", "that", "reads", "from", "it", "to", "sidestep", "the", "issue", "completely", "NUMBER", "After", "you", "add", "function", "_classCallCheck", "instance", "Constructor", "if", "instance", "instanceof", "Constructor", "throw", "new", "TypeError", "Cannot", "call", "a", "class", "as", "a", "function", "how", "be", "supposed", "to", "inherit", "from", "the", "Dispatcher", "This", "code", "doesn", "t", "work", "anymore", "because", "the", "Constructor", "of", "the", "instance", "be", "now", "AppDispatcher", "instead", "of", "Dispatcher", "NUMBER", "var", "AppDispatcher", "function", "Dispatcher", "NUMBER", "apply", "this", "argument", "extend", "AppDispatcher", "NUMBER", "prototype", "Dispatcher", "NUMBER", "prototype", "Why", "not", "use", "classes", "and", "and", "extend", "class", "AppDispatcher", "extend", "Dispatcher", "I", "m", "not", "use", "the", "new", "ES", "NUMBER", "syntax", "NUMBER", "There", "be", "no", "old", "js", "way", "of", "doing", "that", "I", "would", "not", "like", "to", "use", "all", "this", "huge", "thing", "LINK", "experimental", "true", "evaluate", "true", "loose", "false", "spec", "false", "code", "class", "NUMBER", "AppDispatcher", "NUMBER", "extend", "NUMBER", "Dispatcher", "NUMBER", "NUMBER", "B", "NUMBER", "D", "Why", "do", "you", "need", "to", "extend", "AppDispatcher", "anyway", "For", "now", "I", "d", "recommend", "just", "use", "NUMBER", "then", "I", "ll", "look", "a", "bit", "into", "how", "we", "can", "support", "non", "ES", "NUMBER", "environments", "NUMBER", "Yes", "currently", "we", "be", "use", "the", "NUMBER", "but", "will", "not", "be", "able", "to", "upgrade", "very", "soon", "to", "the", "newest", "version", "NUMBER", "I", "appreciate", "your", "help", "NUMBER", "Adding", "note", "on", "installing", "watchify", "which", "was", "miss", "NUMBER", "This", "be", "why", "it", "was", "required", "LINK", "I", "m", "run", "the", "example", "and", "get", "the", "following", "error", "MacBook", "Pro", "flux", "todomvc", "npm", "install", "npm", "WARN", "package", "NUMBER", "json", "todomvc", "flux", "NUMBER", "No", "license", "field", "NUMBER", "npm", "WARN", "unmet", "dependency", "Users", "J", "Documents", "flux", "examples", "flux", "todomvc", "node_modules", "watchify", "requires", "browserify", "NUMBER", "but", "will", "load", "npm", "WARN", "unmet", "dependency", "Users", "J", "Documents", "flux", "examples", "flux", "todomvc", "node_modules", "browserify", "npm", "WARN", "unmet", "dependency", "which", "be", "version", "NUMBER", "MacBook", "Pro", "flux", "todomvc", "npm", "start", "todomvc", "flux", "NUMBER", "start", "Users", "J", "Documents", "flux", "examples", "flux", "todomvc", "watchify", "o", "js", "bundle", "NUMBER", "js", "v", "d", "js", "app", "NUMBER", "js", "sh", "watchify", "command", "not", "find", "npm", "ERR", "Darwin", "NUMBER", "npm", "ERR", "argv", "node", "usr", "local", "bin", "npm", "start", "npm", "ERR", "node", "v", "NUMBER", "npm", "ERR", "npm", "v", "NUMBER", "npm", "ERR", "file", "sh", "npm", "ERR", "code", "ELIFECYCLE", "npm", "ERR", "errno", "ENOENT", "npm", "ERR", "syscall", "spawn", "npm", "ERR", "todomvc", "flux", "NUMBER", "start", "watchify", "o", "js", "bundle", "NUMBER", "js", "v", "d", "js", "app", "NUMBER", "js", "npm", "ERR", "spawn", "ENOENT", "npm", "ERR", "npm", "ERR", "Failed", "at", "the", "todomvc", "flux", "NUMBER", "start", "script", "watchify", "o", "js", "bundle", "NUMBER", "js", "v", "d", "js", "app", "NUMBER", "js", "NUMBER", "npm", "ERR", "This", "be", "most", "likely", "a", "problem", "with", "the", "todomvc", "flux", "package", "npm", "ERR", "not", "with", "npm", "itself", "NUMBER", "npm", "ERR", "Tell", "the", "author", "that", "this", "fail", "on", "your", "system", "npm", "ERR", "watchify", "o", "js", "bundle", "NUMBER", "js", "v", "d", "js", "app", "NUMBER", "js", "npm", "ERR", "You", "can", "get", "their", "info", "via", "npm", "ERR", "npm", "owner", "ls", "todomvc", "flux", "npm", "ERR", "There", "be", "likely", "additional", "logging", "output", "above", "NUMBER", "Does", "the", "example", "work", "on", "other", "machines", "Is", "watchify", "in", "NUMBER", "flux", "todomvc", "node_modules", "Yes", "it", "be", "NUMBER", "git", "clone", "git", "github", "NUMBER", "com", "facebook", "flux", "cd", "flux", "examples", "flux", "todomvc", "npm", "install", "npm", "start", "And", "then", "navigating", "to", "index", "NUMBER", "html", "in", "my", "browser", "works", "fine", "for", "me", "NUMBER", "What", "npm", "node", "version", "be", "you", "on", "And", "what", "s", "the", "output", "of", "npm", "ls", "in", "your", "todomvc", "directory", "It", "may", "rely", "on", "Watchify", "be", "install", "globally", "unfortunately", "NUMBER", "Try", "npm", "install", "g", "watchify", "to", "install", "Watchify", "globally", "NUMBER", "Yeah", "npm", "install", "g", "watchify", "fix", "it", "NUMBER", "I", "was", "just", "starting", "out", "with", "the", "TodoMVC", "tutorial", "example", "NUMBER", "I", "cloned", "down", "the", "react", "boilerplate", "and", "then", "I", "copied", "the", "flux", "examples", "todomvc", "package", "NUMBER", "json", "into", "the", "react", "boilerplate", "directory", "NUMBER", "I", "then", "did", "npm", "install", "and", "then", "npm", "run", "build", "and", "I", "get", "this", "Error", "Cannot", "find", "module", "Users", "user", "Sandbox", "react", "boilerplate", "from", "Users", "user", "Sandbox", "react", "boilerplate", "at", "Users", "user", "Sandbox", "react", "boilerplate", "node_modules", "browserify", "node_modules", "browser", "resolve", "node_modules", "resolve", "lib", "async", "NUMBER", "js", "NUMBER", "NUMBER", "at", "load", "Users", "user", "Sandbox", "react", "boilerplate", "node_modules", "browserify", "node_modules", "browser", "resolve", "node_modules", "resolve", "lib", "async", "NUMBER", "js", "NUMBER", "NUMBER", "at", "onex", "Users", "user", "Sandbox", "react", "boilerplate", "node_modules", "browserify", "node_modules", "browser", "resolve", "node_modules", "resolve", "lib", "async", "NUMBER", "js", "NUMBER", "NUMBER", "at", "Users", "user", "Sandbox", "react", "boilerplate", "node_modules", "browserify", "node_modules", "browser", "resolve", "node_modules", "resolve", "lib", "async", "NUMBER", "js", "NUMBER", "NUMBER", "at", "FSReqWrap", "NUMBER", "oncomplete", "fs", "NUMBER", "js", "NUMBER", "NUMBER", "What", "be", "I", "doing", "wrong", "The", "tutorial", "says", "to", "make", "sure", "your", "react", "boilerplate", "package", "NUMBER", "json", "be", "setup", "like", "the", "package", "NUMBER", "json", "from", "the", "example", "directory", "so", "I", "just", "copied", "it", "over", "and", "overwrote", "it", "NUMBER", "Maybe", "that", "was", "incorrect", "to", "do", "Any", "hints", "on", "this", "NUMBER", "I", "had", "the", "a", "similar", "error", "todomvc", "flux", "NUMBER", "build", "home", "samuele", "react", "boilerplate", "browserify", "NUMBER", "t", "envify", "NODE_ENV", "production", "uglifyjs", "cm", "js", "bundle", "NUMBER", "min", "NUMBER", "js", "sh", "NUMBER", "cannot", "create", "js", "bundle", "NUMBER", "min", "NUMBER", "js", "Directory", "nonexistent", "Error", "Cannot", "find", "module", "home", "samuele", "react", "boilerplate", "from", "home", "samuele", "react", "boilerplate", "at", "home", "samuele", "react", "boilerplate", "node_modules", "browser", "resolve", "node_modules", "resolve", "lib", "async", "NUMBER", "js", "NUMBER", "NUMBER", "at", "load", "home", "samuele", "react", "boilerplate", "node_modules", "browser", "resolve", "node_modules", "resolve", "lib", "async", "NUMBER", "js", "NUMBER", "NUMBER", "at", "onex", "home", "samuele", "react", "boilerplate", "node_modules", "browser", "resolve", "node_modules", "resolve", "lib", "async", "NUMBER", "js", "NUMBER", "NUMBER", "at", "home", "samuele", "react", "boilerplate", "node_modules", "browser", "resolve", "node_modules", "resolve", "lib", "async", "NUMBER", "js", "NUMBER", "NUMBER", "at", "FSReqWrap", "NUMBER", "oncomplete", "fs", "NUMBER", "js", "NUMBER", "NUMBER", "npm", "ERR", "Linux", "NUMBER", "NUMBER", "generic", "npm", "ERR", "argv", "usr", "bin", "nodejs", "usr", "bin", "npm", "run", "build", "npm", "ERR", "node", "v", "NUMBER", "npm", "ERR", "npm", "v", "NUMBER", "npm", "ERR", "code", "ELIFECYCLE", "npm", "ERR", "todomvc", "flux", "NUMBER", "build", "browserify", "NUMBER", "t", "envify", "NODE_ENV", "production", "uglifyjs", "cm", "js", "bundle", "NUMBER", "min", "NUMBER", "js", "npm", "ERR", "Exit", "status", "NUMBER", "npm", "ERR", "npm", "ERR", "Failed", "at", "the", "todomvc", "flux", "NUMBER", "build", "script", "browserify", "NUMBER", "t", "envify", "NODE_ENV", "production", "uglifyjs", "cm", "js", "bundle", "NUMBER", "min", "NUMBER", "js", "NUMBER", "npm", "ERR", "Make", "sure", "you", "have", "the", "latest", "version", "of", "node", "NUMBER", "js", "and", "npm", "install", "NUMBER", "npm", "ERR", "If", "you", "do", "this", "be", "most", "likely", "a", "problem", "with", "the", "todomvc", "flux", "package", "npm", "ERR", "not", "with", "npm", "itself", "NUMBER", "npm", "ERR", "Tell", "the", "author", "that", "this", "fail", "on", "your", "system", "npm", "ERR", "browserify", "NUMBER", "t", "envify", "NODE_ENV", "production", "uglifyjs", "cm", "js", "bundle", "NUMBER", "min", "NUMBER", "js", "npm", "ERR", "You", "can", "get", "their", "info", "via", "npm", "ERR", "npm", "owner", "ls", "todomvc", "flux", "npm", "ERR", "There", "be", "likely", "additional", "logging", "output", "above", "NUMBER", "npm", "ERR", "Please", "include", "the", "following", "file", "with", "any", "support", "request", "npm", "ERR", "home", "samuele", "react", "boilerplate", "npm", "debug", "NUMBER", "log", "The", "Todo", "Tutorial", "embeds", "abbreviated", "version", "of", "the", "actual", "code", "but", "it", "include", "areAllComplete", "this", "NUMBER", "ate", "NUMBER", "areAllComplete", "in", "the", "TodoApp", "component", "which", "isn", "t", "actually", "mention", "anywhere", "in", "the", "tutorial", "itself", "NUMBER", "Since", "its", "not", "actually", "relevant", "to", "the", "tutorial", "it", "s", "probably", "best", "to", "remove", "the", "reference", "to", "avoid", "confusion", "NUMBER", "When", "I", "introduce", "in", "Flux", "application", "architecture", "throught", "chat", "example", "I", "can", "t", "see", "in", "UI", "an", "indication", "for", "unread", "thdeads", "in", "thread", "list", "NUMBER", "I", "think", "this", "feature", "be", "needed", "for", "this", "example", "NUMBER", "It", "s", "no", "critical", "but", "I", "think", "this", "feature", "must", "exist", "NUMBER", "May", "be", "without", "animation", "but", "it", "good", "thing", "in", "that", "introduce", "example", "NUMBER", "TAG", "Or", "not", "Thanks", "NUMBER", "react", "lib", "cx", "has", "be", "deprecate", "LINK", "name", "manipulation", "NUMBER", "html", "NUMBER", "Using", "JedWatson", "classnames", "NUMBER", "spicyj", "The", "change", "that", "you", "be", "referring", "to", "in", "the", "dist", "Flux", "NUMBER", "js", "be", "a", "result", "of", "run", "gulp", "build", "task", "NUMBER", "Shouldn", "t", "NUMBER", "dist", "reflect", "the", "latest", "build", "Will", "need", "to", "do", "a", "rebase", "and", "force", "push", "NUMBER", "Going", "to", "take", "a", "few", "minutes", "NUMBER", "Cool", "NUMBER", "Learned", "something", "new", "How", "to", "use", "interactive", "rebase", "and", "squash", "commit", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "refs", "LINK", "text", "javascript", "be", "default", "value", "of", "the", "type", "attribute", "NUMBER", "So", "we", "don", "t", "need", "to", "write", "it", "NUMBER", "And", "Modified", "script", "tags", "position", "NUMBER", "I", "was", "inspired", "by", "LINK", "NUMBER", "Remove", "threadName", "argument", "from", "ChatWebAPIUtils", "NUMBER", "createMessage", "function", "because", "NUMBER", "the", "parameter", "be", "omitted", "when", "call", "from", "ChatMessageActionCreators", "and", "NUMBER", "the", "exist", "message", "parameter", "already", "contains", "the", "message", "theadName", "data", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "The", "build", "command", "compiles", "to", "a", "js", "file", "call", "bundle", "NUMBER", "min", "NUMBER", "js", "but", "the", "index", "NUMBER", "html", "try", "to", "load", "bundle", "NUMBER", "js", "NUMBER", "See", "LINK", "npm", "start", "should", "be", "use", "which", "build", "to", "bundle", "NUMBER", "js", "NUMBER", "We", "probably", "should", "get", "rid", "of", "the", "build", "script", "to", "avoid", "this", "confusion", "NUMBER", "Ah", "okay", "sounds", "good", "zpao", "yes", "run", "npm", "start", "on", "the", "subdirectory", "works", "NUMBER", "Maybe", "Readme", "file", "should", "prompt", "us", "Copyright", "c", "should", "be", "NUMBER", "NUMBER", "The", "docs", "has", "a", "stripped", "down", "version", "of", "the", "actualTodoApp", "NUMBER", "react", "NUMBER", "js", "in", "the", "repo", "NUMBER", "areAllComplete", "be", "pass", "as", "a", "prop", "but", "be", "not", "really", "a", "part", "of", "the", "initial", "state", "or", "TodoStore", "FYI", "the", "complete", "example", "linked", "via", "github", "has", "areAllComplete", "NUMBER", "But", "in", "this", "example", "we", "might", "not", "need", "it", "as", "it", "might", "confuse", "the", "readers", "NUMBER", "kyldvs", "Like", "I", "mention", "in", "the", "earlier", "comment", "NUMBER", "The", "TodoStore", "sample", "code", "in", "the", "docs", "be", "a", "stripped", "down", "version", "and", "do", "not", "have", "a", "reference", "to", "areAllComplete", "in", "it", "NUMBER", "This", "makes", "it", "difficult", "for", "readers", "to", "reason", "about", "where", "areAllComplete", "comes", "from", "unless", "you", "actually", "look", "into", "the", "source", "code", "on", "github", "NUMBER", "Hope", "that", "helps", "NUMBER", "Cool", "NUMBER", "Thanks", "kyldvs", "NUMBER", "Improve", "styling", "for", "clarity", "in", "Actions", "and", "the", "Dispatcher", "NUMBER", "md", "Actions", "and", "the", "Dispatcher", "NUMBER", "ko", "KR", "NUMBER", "md", "I", "update", "the", "contribution", "guide", "to", "be", "similar", "to", "the", "one", "find", "in", "the", "React", "repo", "LINK", "kyldvs", "do", "nearly", "a", "year", "later", "NUMBER", "Hi", "there", "This", "PR", "has", "the", "translated", "docs", "in", "Thai", "NUMBER", "Done", "NUMBER", "Just", "want", "to", "really", "express", "my", "gratitude", "for", "this", "NUMBER", "This", "be", "really", "awesome", "NUMBER", "I", "tried", "to", "spot", "check", "the", "translations", "here", "and", "there", "and", "would", "like", "to", "just", "verify", "that", "a", "couple", "of", "key", "points", "aren", "t", "get", "lost", "NUMBER", "I", "ll", "merge", "this", "in", "and", "update", "the", "site", "within", "the", "next", "week", "NUMBER", "Cool", "You", "re", "welcome", "man", "Let", "me", "know", "other", "points", "I", "might", "have", "miss", "but", "the", "docs", "be", "so", "very", "well", "write", "that", "it", "s", "very", "hard", "to", "get", "it", "wrong", "NUMBER", "Thanks", "to", "you", "too", "NUMBER", "Hi", "fisherwebdev", "NUMBER", "I", "just", "update", "the", "translation", "with", "some", "polished", "word", "while", "waiting", "for", "a", "merge", "NUMBER", "Let", "me", "know", "if", "you", "need", "more", "verification", "NUMBER", "Per", "bower", "bower", "NUMBER", "json", "spec", "a", "NUMBER", "da", "NUMBER", "Signed", "I", "think", "version", "be", "helpful", "documentation", "even", "if", "bower", "doesn", "t", "necessarily", "need", "it", "To", "each", "their", "own", "NUMBER", "I", "strongly", "disagree", "with", "you", "NUMBER", "Not", "familiar", "with", "bower", "so", "feel", "free", "to", "teach", "me", "something", "NUMBER", "Is", "it", "easy", "to", "see", "what", "version", "of", "flux", "you", "will", "be", "use", "from", "bower", "if", "this", "version", "key", "be", "not", "there", "Bower", "will", "use", "git", "tags", "and", "tell", "you", "what", "version", "you", "install", "when", "it", "installs", "NUMBER", "We", "should", "just", "do", "what", "be", "common", "practice", "spec", "NUMBER", "We", "should", "also", "probably", "be", "add", "a", "header", "to", "our", "dist", "file", "that", "include", "copyright", "and", "version", "information", "then", "there", "s", "always", "that", "to", "look", "at", "if", "you", "don", "t", "know", "what", "version", "you", "have", "install", "NUMBER", "Though", "maybe", "it", "s", "not", "so", "useless", "as", "VS", "still", "uses", "it", "LINK", "bower", "issue", "NUMBER", "Hmm", "if", "there", "be", "plan", "to", "merge", "that", "into", "react", "I", "guess", "we", "should", "keep", "version", "too", "NUMBER", "If", "not", "I", "m", "happy", "to", "remove", "it", "NUMBER", "facebook", "github", "bot", "I", "just", "sign", "up", "NUMBER", "Thanks", "bot", "smile", "NUMBER", "Thanks", "Hey", "I", "just", "did", "Thanks", "I", "think", "the", "_promises", "member", "in", "the", "Dispatcher", "be", "cleared", "to", "soon", "flux", "documentation", "in", "the", "todo", "list", "example", "NUMBER", "If", "you", "clear", "it", "right", "after", "the", "forEach", "loop", "change", "be", "the", "callbacks", "have", "not", "resolve", "NUMBER", "So", "if", "you", "call", "waitFor", "then", "it", "seems", "that", "all", "the", "promises", "be", "already", "resolve", "because", "the", "_promises", "arraty", "be", "empty", "NUMBER", "My", "solution", "be", "to", "splice", "the", "array", "after", "resolving", "NUMBER", "jeez", "i", "can", "t", "believe", "we", "still", "have", "that", "dispatcher", "up", "on", "the", "site", "NUMBER", "really", "just", "needs", "to", "get", "remove", "from", "the", "docs", "entirely", "NUMBER", "how", "did", "you", "test", "your", "solution", "I", "think", "it", "s", "a", "nice", "way", "to", "use", "Promises", "so", "I", "m", "glad", "it", "s", "still", "on", "the", "site", "I", "did", "a", "simple", "test", "see", "this", "gist", "LINK", "This", "be", "just", "the", "Dispatcher", "from", "the", "docs", "and", "NUMBER", "callbacks", "syncFunc", "and", "asyncFunc", "that", "I", "register", "at", "the", "Dispatcher", "NUMBER", "After", "the", "dispatch", "I", "call", "waitFor", "NUMBER", "When", "the", "_promises", "be", "cleared", "right", "after", "the", "forEach", "loop", "the", "waitFor", "callback", "be", "call", "before", "the", "asyncFunc", "has", "finished", "NUMBER", "When", "the", "_promises", "array", "be", "spliced", "after", "the", "resolve", "or", "reject", "the", "waitFor", "callback", "be", "call", "after", "the", "asyncFunc", "has", "finised", "NUMBER", "This", "be", "the", "same", "callback", "not", "a", "copy", "NUMBER", "The", "memory", "reference", "of", "the", "callback", "be", "be", "add", "to", "an", "array", "so", "the", "dispatcher", "can", "iterate", "over", "them", "and", "call", "each", "one", "when", "dispatch", "be", "invoked", "NUMBER", "fisherwebdev", "Sorry", "May", "be", "I", "didn", "t", "explain", "well", "var", "store", "NUMBER", "var", "store", "NUMBER", "NUMBER", "var", "dt", "NUMBER", "dispatcher", "NUMBER", "register", "store", "NUMBER", "handleCallback", "var", "dt", "NUMBER", "dispatcher", "NUMBER", "register", "store", "NUMBER", "handleCallback", "Dispatcher", "code", "allow", "me", "to", "add", "callback", "again", "var", "dt", "NUMBER", "dispatcher", "NUMBER", "register", "store", "NUMBER", "handleCallback", "if", "dt", "NUMBER", "be", "not", "equal", "to", "dt", "meaning", "same", "callback", "be", "call", "twice", "by", "dispatcher", "for", "every", "action", "NUMBER", "dispatcher", "NUMBER", "unregister", "dt", "NUMBER", "still", "dt", "NUMBER", "callback", "be", "attached", "to", "dispatcher", "Is", "this", "scenario", "right", "Please", "show", "me", "light", "S", "NUMBER", "p", "I", "be", "a", "newbie", "to", "JS", "world", "The", "_onKeyDown", "handler", "in", "MessageComposer", "has", "a", "naive", "implementation", "_onKeyDown", "function", "event", "if", "event", "NUMBER", "keyCode", "ENTER_KEY_CODE", "event", "NUMBER", "preventDefault", "var", "text", "this", "NUMBER", "ate", "NUMBER", "text", "NUMBER", "trim", "if", "text", "ChatMessageActionCreators", "NUMBER", "createMessage", "text", "this", "NUMBER", "props", "NUMBER", "readID", "this", "NUMBER", "setState", "text", "This", "implementation", "assumes", "that", "the", "message", "will", "be", "NUMBER", "saved", "and", "clears", "the", "input", "immediately", "NUMBER", "But", "often", "we", "do", "not", "want", "clear", "a", "form", "until", "we", "be", "not", "sure", "that", "AJAX", "call", "was", "successful", "NUMBER", "How", "to", "improve", "this", "method", "to", "restore", "the", "text", "if", "saving", "fail", "We", "need", "to", "add", "two", "actions", "one", "of", "which", "will", "be", "call", "when", "the", "XHR", "completes", "MESSAGE_SAVED_SUCCESS", "and", "MESSAGED_SAVED_ERROR", "NUMBER", "Based", "on", "these", "actions", "the", "store", "should", "either", "rollback", "the", "message", "and", "probably", "provide", "some", "UX", "around", "retrying", "or", "mark", "clear", "the", "message", "record", "as", "confirmed", "NUMBER", "The", "MESSAGED_SAVED_ERROR", "action", "must", "be", "call", "with", "the", "same", "text", "which", "was", "received", "in", "createMessage", "I", "correctly", "understand", "Something", "like", "this", "createMessage", "text", "ApiUtils", "NUMBER", "createMessage", "text", "NUMBER", "en", "this", "NUMBER", "dispatchSuccessAction", "NUMBER", "fail", "this", "NUMBER", "dispatchFailAction", "text", "todomv", "Why", "EventEmitter", "just", "register", "one", "event", "then", "in", "callback", "use", "case", "NUMBER", "Was", "just", "wondering", "if", "you", "guys", "would", "want", "a", "PR", "for", "that", "LINK", "Maybe", "haven", "t", "decided", "NUMBER", "Going", "to", "talk", "with", "some", "folks", "at", "FB", "about", "it", "NUMBER", "Regardless", "I", "wouldn", "t", "want", "one", "massive", "PR", "for", "both", "examples", "but", "would", "need", "to", "approach", "it", "in", "digestible", "chunks", "NUMBER", "At", "least", "two", "PRs", "one", "for", "each", "example", "but", "cutting", "it", "down", "further", "would", "be", "better", "NUMBER", "Here", "be", "at", "least", "one", "example", "in", "ES", "NUMBER", "LINK", "utils", "todomvc", "I", "would", "support", "moving", "the", "others", "too", "NUMBER", "People", "new", "to", "the", "concept", "of", "Flux", "seem", "to", "consistently", "have", "question", "on", "a", "few", "areas", "when", "actions", "should", "be", "fired", "and", "what", "they", "should", "represent", "how", "to", "introduce", "data", "from", "a", "server", "This", "suggests", "that", "the", "documentation", "for", "these", "areas", "be", "pretty", "consistently", "fail", "people", "NUMBER", "Additionally", "people", "very", "often", "attempt", "to", "use", "actions", "imperatively", "which", "to", "my", "understanding", "be", "a", "poor", "design", "decision", "that", "undercuts", "what", "Flux", "be", "supposed", "to", "encourage", "NUMBER", "I", "propose", "that", "documentation", "should", "be", "made", "that", "demonstrates", "what", "an", "application", "s", "actions", "should", "look", "like", "NUMBER", "I", "would", "love", "to", "make", "a", "PR", "for", "this", "but", "I", "don", "t", "feel", "confident", "in", "my", "knowledge", "of", "how", "Flux", "be", "intended", "to", "be", "use", "NUMBER", "If", "this", "issue", "gets", "some", "discussion", "that", "helps", "my", "understanding", "I", "d", "be", "happy", "to", "write", "a", "first", "pass", "NUMBER", "vcarl", "Thanks", "for", "raising", "this", "question", "once", "again", "NUMBER", "To", "my", "understanding", "actions", "should", "really", "be", "call", "events", "in", "Flux", "architecture", "the", "docs", "say", "that", "we", "should", "call", "actions", "like", "something", "has", "happened", "which", "be", "a", "notification", "about", "an", "event", "not", "do", "something", "which", "be", "an", "imperative", "command", "NUMBER", "sompylasar", "Yeah", "I", "definitely", "agree", "with", "you", "NUMBER", "The", "problem", "be", "that", "most", "people", "refer", "to", "actions", "as", "Commands", "in", "CQRS", "terms", "therefore", "something", "what", "should", "happen", "rather", "than", "what", "has", "actually", "happened", "NUMBER", "Action", "in", "my", "opinion", "be", "definitely", "an", "interaction", "with", "the", "system", "be", "that", "a", "user", "interaction", "or", "API", "callback", "and", "should", "never", "expose", "implementation", "detail", "NUMBER", "An", "example", "might", "be", "LOAD_USER", "vs", "USER_LOADING_REQUESTED", "NUMBER", "Discussion", "like", "this", "be", "why", "I", "want", "there", "to", "be", "more", "clarification", "around", "actions", "NUMBER", "I", "don", "t", "think", "simply", "change", "what", "actions", "be", "named", "be", "enough", "to", "change", "a", "system", "of", "imperative", "to", "declarative", "but", "there", "isn", "t", "really", "good", "information", "about", "how", "to", "plan", "a", "declarative", "system", "NUMBER", "I", "d", "love", "to", "avoid", "write", "multiple", "applications", "in", "order", "to", "figure", "out", "seemingly", "simple", "question", "like", "this", "NUMBER", "I", "d", "also", "like", "to", "say", "that", "the", "reason", "I", "think", "this", "needs", "attention", "be", "because", "the", "bar", "for", "documentation", "has", "be", "set", "so", "high", "by", "React", "NUMBER", "Those", "docs", "were", "so", "fantastic", "that", "I", "felt", "really", "let", "down", "that", "the", "Flux", "docs", "be", "only", "_good_", "not", "amazing", "NUMBER", "The", "Flux", "docs", "will", "get", "a", "new", "page", "soon", "that", "will", "focus", "on", "async", "programming", "and", "I", "will", "attempt", "to", "revise", "some", "exist", "pages", "soon", "after", "that", "NUMBER", "Note", "there", "be", "no", "Flux", "team", "at", "Facebook", "and", "there", "be", "no", "Flux", "framework", "at", "Facebook", "NUMBER", "So", "comparing", "the", "documentation", "there", "to", "the", "docs", "here", "be", "a", "little", "bit", "unfair", "in", "my", "opinion", "NUMBER", "I", "know", "they", "could", "be", "better", "and", "like", "I", "said", "I", "m", "work", "on", "it", "NUMBER", "vcarl", "Could", "you", "please", "explain", "why", "imperatively", "be", "bad", "in", "Flux", "architecture", "I", "m", "new", "to", "Flux", "NUMBER", "I", "fail", "to", "understand", "why", "it", "be", "bad", "NUMBER", "Looking", "at", "the", "TodoActions", "NUMBER", "js", "from", "the", "Todo", "example", "the", "actions", "look", "almost", "exactly", "same", "as", "commands", "in", "CQRS", "system", "NUMBER", "They", "simply", "act", "as", "DTOs", "NUMBER", "What", "s", "wrong", "with", "them", "moon", "NUMBER", "In", "simple", "cases", "the", "imperative", "way", "be", "probably", "not", "a", "big", "deal", "NUMBER", "Like", "in", "the", "example", "it", "s", "pretty", "straightforward", "NUMBER", "However", "when", "it", "comes", "to", "more", "complex", "use", "cases", "you", "might", "want", "to", "treat", "your", "actions", "like", "events", "instead", "of", "commands", "NUMBER", "In", "my", "opinion", "it", "s", "always", "a", "bad", "practice", "to", "call", "more", "actions", "at", "once", "especially", "when", "those", "actions", "be", "fired", "only", "when", "certain", "condition", "be", "met", "meaning", "it", "depends", "on", "application", "state", "meaning", "you", "be", "pulling", "the", "business", "logic", "from", "stores", "where", "it", "should", "actually", "be", "NUMBER", "Eventually", "you", "will", "have", "to", "do", "it", "when", "use", "commands", "NUMBER", "Let", "s", "say", "you", "have", "two", "stores", "in", "your", "application", "BreadcrumbsStore", "and", "ProductDetailStore", "NUMBER", "Once", "your", "application", "loads", "detail", "data", "it", "will", "get", "name", "of", "product", "and", "you", "would", "like", "the", "name", "to", "display", "in", "breadcrumbs", "and", "product", "detail", "NUMBER", "Treating", "them", "as", "commands", "would", "result", "in", "firing", "two", "actions", "UPDATE_BREADCRUMBS", "and", "UPDATE_DETAIL", "not", "very", "descriptive", "though", "and", "very", "specifically", "tied", "to", "the", "business", "logic", "NUMBER", "However", "if", "it", "was", "an", "event", "PRODUCT_DETAIL_LOADED", "the", "application", "could", "handle", "the", "action", "event", "in", "both", "stores", "NUMBER", "Action", "represents", "interaction", "with", "system", "NUMBER", "Mostly", "an", "action", "initiated", "by", "user", "click", "but", "it", "may", "also", "be", "a", "callback", "from", "API", "call", "NUMBER", "And", "this", "interaction", "has", "definitely", "happened", "in", "the", "past", "and", "therefore", "it", "s", "an", "event", "NUMBER", "On", "other", "hand", "command", "be", "something", "that", "should", "happen", "NUMBER", "Just", "ask", "yourself", "what", "be", "the", "click", "on", "the", "button", "Is", "that", "an", "event", "or", "command", "Treating", "actions", "as", "commands", "be", "leading", "to", "exposing", "your", "business", "logic", "outside", "the", "store", "NUMBER", "fisherwebdev", "Ah", "I", "wasn", "t", "aware", "of", "that", "NUMBER", "That", "explains", "a", "lot", "of", "the", "differences", "then", "I", "was", "under", "the", "impression", "it", "was", "larger", "NUMBER", "I", "began", "write", "a", "blog", "post", "attempting", "to", "explain", "some", "of", "the", "fundamentals", "of", "Flux", "directly", "in", "response", "to", "the", "consistent", "question", "I", "was", "seeing", "but", "after", "a", "while", "start", "to", "feel", "like", "I", "didn", "t", "understand", "what", "I", "was", "explaining", "NUMBER", "I", "d", "love", "some", "feedback", "or", "contributions", "NUMBER", "The", "bottom", "be", "the", "roughest", "part", "NUMBER", "LINK", "tomkis", "NUMBER", "That", "s", "precisely", "what", "I", "was", "talking", "about", "I", "love", "your", "example", "NUMBER", "Imperative", "actions", "aren", "t", "bad", "at", "a", "small", "scale", "which", "I", "think", "be", "part", "of", "their", "danger", "but", "when", "you", "have", "a", "massive", "isomorphic", "application", "with", "NUMBER", "people", "work", "on", "it", "having", "them", "be", "glorified", "function", "calls", "doesn", "t", "have", "any", "benefit", "NUMBER", "The", "difficulty", "I", "ve", "had", "be", "figuring", "out", "how", "to", "have", "actions", "be", "decoupled", "from", "the", "business", "logic", "NUMBER", "Should", "there", "be", "a", "BUTTON_CLICKED", "with", "a", "payload", "that", "allows", "stores", "to", "figure", "out", "if", "they", "should", "respond", "Should", "each", "button", "click", "have", "a", "distinct", "action", "I", "feel", "like", "the", "answer", "be", "somewhere", "in", "the", "middle", "but", "I", "m", "not", "sure", "what", "that", "would", "look", "like", "or", "how", "it", "would", "be", "implement", "NUMBER", "tomkis", "NUMBER", "Ah", "I", "see", "NUMBER", "So", "there", "s", "no", "command", "in", "Flux", "system", "NUMBER", "I", "was", "still", "thinking", "in", "CQRS", "where", "we", "usually", "command", "something", "then", "emit", "events", "NUMBER", "So", "NUMBER", "in", "this", "frontend", "case", "where", "we", "have", "users", "NUMBER", "I", "guess", "user", "interactions", "be", "command", "and", "Actions", "in", "flux", "should", "be", "event", "NUMBER", "Thank", "you", "for", "the", "answer", "NUMBER", "vcarl", "Me", "personally", "always", "choose", "naming", "that", "reflects", "the", "interaction", "with", "the", "system", "NUMBER", "IMO", "firing", "BUTTON_CLICKED", "with", "payload", "be", "not", "optimal", "as", "you", "hide", "your", "business", "logic", "in", "action", "s", "payload", "NUMBER", "It", "s", "better", "to", "use", "something", "like", "USER_LOADING_REQUESTED", "moon", "NUMBER", "well", "the", "difference", "here", "be", "that", "in", "standard", "CQRS", "command", "be", "responsible", "for", "emitting", "corresponding", "events", "based", "on", "business", "logic", "NUMBER", "Handling", "emitted", "events", "serves", "for", "creating", "a", "projection", "though", "it", "s", "most", "likely", "combination", "of", "EventSourcing", "and", "CQRS", "NUMBER", "In", "Flux", "action", "handler", "event", "handler", "which", "be", "store", "be", "responsible", "for", "business", "logic", "Store", "reduce", "s", "events", "into", "application", "state", "NUMBER", "tomkis", "NUMBER", "Thank", "you", "for", "the", "write", "up", "NUMBER", "That", "explains", "a", "lot", "NUMBER", "I", "should", "get", "my", "hands", "dirty", "on", "Flux", "more", "but", "it", "sounds", "like", "to", "me", "that", "even", "Facebook", "uses", "imperatively", "action", "names", "LINK", "NUMBER", "and", "past", "tense", "event", "names", "at", "the", "same", "time", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "Hey", "there", "I", "would", "like", "to", "see", "in", "chat", "app", "example", "use", "of", "promises", "to", "simulate", "real", "API", "call", "NUMBER", "To", "me", "it", "makes", "differences", "in", "flux", "architecture", "NUMBER", "Eg", "NUMBER", "how", "flux", "can", "handle", "asynchronous", "code", "in", "actions", "or", "stores", "etc", "NUMBER", "Thanks", "in", "advance", "NUMBER", "if", "you", "look", "at", "the", "createMessage", "LINK", "chat", "js", "utils", "ChatWebAPIUtils", "NUMBER", "js", "L", "NUMBER", "method", "in", "the", "ChatWebAPIUtils", "file", "there", "be", "a", "fake", "success", "callback", "simulated", "with", "a", "timeout", "NUMBER", "This", "be", "pretty", "much", "it", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "I", "don", "t", "really", "think", "it", "has", "any", "benefit", "to", "keep", "waitFor", "method", "in", "dispatcher", "as", "it", "s", "leading", "to", "wrong", "design", "NUMBER", "A", "great", "example", "of", "that", "be", "implementation", "in", "flux", "chat", "NUMBER", "I", "was", "actually", "thinking", "about", "sending", "a", "PR", "where", "waitFor", "method", "be", "not", "use", "then", "I", "realised", "that", "the", "only", "correct", "way", "would", "be", "to", "get", "rid", "of", "ThreadStore", "and", "UnreadThreadStore", "NUMBER", "I", "believe", "the", "right", "approach", "would", "be", "to", "to", "keep", "entire", "state", "in", "one", "store", "and", "get", "rid", "of", "direct", "dependencies", "which", "may", "eventually", "lead", "to", "inconsistent", "state", "as", "the", "application", "grows", "NUMBER", "For", "example", "once", "new", "action", "which", "modifies", "currentID", "be", "presented", "and", "handle", "only", "in", "ThreadStore", "NUMBER", "If", "we", "need", "a", "state", "variable", "across", "multiple", "stores", "it", "s", "much", "better", "to", "listen", "to", "all", "actions", "which", "modify", "the", "state", "variable", "instead", "of", "presenting", "dependencies", "between", "stores", "NUMBER", "waitFor", "do", "not", "have", "any", "other", "utilisation", "than", "waiting", "for", "stores", "to", "handle", "actions", "so", "that", "we", "can", "be", "sure", "that", "the", "state", "has", "be", "set", "already", "and", "we", "don", "t", "need", "to", "do", "that", "as", "long", "as", "we", "keep", "the", "variable", "in", "every", "single", "store", "that", "needs", "the", "variable", "NUMBER", "Are", "you", "suggesting", "that", "you", "would", "duplicate", "the", "logic", "and", "the", "cached", "value", "in", "multiple", "stores", "That", "sounds", "like", "a", "maintenance", "nightmare", "NUMBER", "I", "vastly", "prefer", "a", "single", "source", "of", "truth", "NUMBER", "Even", "if", "you", "have", "a", "global", "cache", "with", "something", "like", "baobab", "LINK", "you", "would", "still", "potentially", "have", "one", "mutation", "that", "needs", "to", "maybe", "happen", "first", "depending", "on", "logic", "and", "then", "a", "second", "mutation", "that", "happens", "based", "on", "that", "value", "NUMBER", "So", "we", "have", "something", "like", "this", "StoreA", "within", "the", "switch", "case", "FOO", "if", "shouldBarBeMutated", "mutateBar", "emitChange", "break", "StoreB", "within", "the", "switch", "case", "FOO", "waitFor", "StoreA", "NUMBER", "getDispatchToken", "mutateBaz", "StoreA", "NUMBER", "getBar", "emitChange", "break", "Not", "sure", "how", "you", "d", "pull", "that", "off", "without", "waitFor", "without", "duplicating", "logic", "and", "or", "cached", "values", "NUMBER", "Yes", "I", "be", "suggesting", "to", "duplicate", "state", "NUMBER", "It", "do", "not", "necessarily", "mean", "that", "I", "need", "to", "duplicate", "logic", "NUMBER", "For", "the", "shared", "logic", "we", "can", "use", "stateless", "service", "LINK", "in", "domain", "driven", "design", "in", "Domain", "Driven", "Design", "terms", "NUMBER", "It", "s", "essential", "to", "realize", "the", "frequency", "of", "such", "a", "case", "state", "dependency", "between", "stores", "NUMBER", "It", "s", "definitely", "a", "very", "minor", "use", "case", "and", "therefore", "I", "can", "imagine", "use", "shared", "stateless", "service", "as", "an", "ideal", "solution", "NUMBER", "However", "what", "do", "concern", "me", "a", "lot", "be", "tight", "dependencies", "between", "stores", "NUMBER", "For", "example", "the", "snippet", "you", "have", "posted", "above", "let", "s", "imagine", "the", "application", "grows", "and", "there", "be", "a", "new", "action", "qux", "which", "mutates", "bar", "StoreA", "withing", "the", "switch", "case", "QUX", "mutateBar", "bar", "be", "correctly", "mutated", "and", "therefore", "consistent", "however", "in", "StoreB", "baz", "depends", "on", "bar", "which", "has", "change", "while", "handle", "QUX", "and", "therefore", "baz", "be", "not", "consistent", "NUMBER", "One", "solution", "would", "be", "to", "listen", "on", "the", "same", "action", "QUX", "even", "in", "StoreB", "which", "I", "find", "very", "complicated", "and", "error", "prone", "NUMBER", "Yes", "responding", "to", "the", "same", "action", "in", "both", "stores", "be", "how", "we", "handle", "this", "at", "Facebook", "NUMBER", "The", "only", "problem", "we", "have", "with", "this", "approach", "be", "that", "an", "engineer", "may", "not", "realize", "they", "need", "to", "respond", "to", "a", "particular", "action", "in", "a", "downstream", "store", "NUMBER", "We", "ve", "talked", "about", "and", "experimented", "with", "developing", "warnings", "whenever", "an", "upstream", "store", "change", "in", "an", "action", "that", "be", "not", "handle", "by", "its", "downstream", "stores", "NUMBER", "If", "you", "have", "a", "solution", "where", "the", "state", "and", "logic", "be", "not", "duplicate", "we", "could", "consider", "suggesting", "this", "in", "the", "documentation", "NUMBER", "I", "ll", "take", "a", "look", "at", "stateless", "services", "NUMBER", "Uhm", "NUMBER", "I", "m", "going", "to", "jump", "in", "because", "this", "be", "interesting", "NUMBER", "I", "ve", "be", "use", "Flux", "in", "Meteor", "and", "after", "a", "while", "I", "realised", "I", "wasn", "t", "use", "waitFor", "at", "all", "NUMBER", "That", "s", "because", "in", "Meteor", "you", "can", "use", "reactive", "variables", "like", "this", "javascript", "StoreA", "var", "bar", "new", "ReactiveVar", "default", "value", "StoreA", "NUMBER", "getBar", "function", "return", "bar", "NUMBER", "then", "within", "the", "switch", "case", "FOO", "if", "shouldBarBeMutated", "mutateBar", "you", "don", "t", "need", "emitChange", "with", "Meteor", "s", "reactivity", "either", "break", "StoreB", "not", "in", "the", "switch", "Tracker", "NUMBER", "autorun", "function", "mutateBaz", "StoreA", "NUMBER", "getBar", "not", "need", "for", "emitChange", "either", "UI", "s", "update", "reactively", "StoreA", "NUMBER", "getBar", "returns", "a", "reactive", "variable", "bar", "so", "Tracker", "NUMBER", "autorun", "will", "rerun", "again", "automatically", "whenever", "bar", "change", "keep", "everything", "in", "sync", "NUMBER", "Actually", "when", "it", "comes", "to", "case", "QUX", "it", "still", "works", "without", "any", "other", "code", "in", "StoreB", "javascript", "StoreA", "withing", "the", "switch", "case", "QUX", "mutateBar", "Because", "again", "whenever", "bar", "change", "no", "matter", "where", "all", "Tracker", "NUMBER", "autorun", "function", "depending", "on", "bar", "rerun", "automatically", "again", "NUMBER", "On", "other", "side", "Optimizely", "s", "Flux", "implementation", "LINK", "js", "don", "t", "use", "waitFor", "either", "because", "they", "use", "getters", "outside", "stores", "point", "NUMBER", "of", "how", "Nuclear", "differs", "from", "Flux", "NUMBER", "They", "can", "do", "that", "because", "state", "be", "not", "spread", "out", "through", "stores", "but", "contained", "in", "a", "single", "immutable", "map", "NUMBER", "Thanks", "for", "those", "explanations", "Luis", "NUMBER", "I", "think", "this", "be", "somewhat", "similar", "to", "where", "a", "few", "folks", "I", "ve", "talked", "to", "be", "going", "with", "Flux", "Baobab", "NUMBER", "I", "m", "very", "interested", "in", "the", "idea", "of", "a", "global", "state", "cache", "accessible", "by", "all", "stores", "NUMBER", "It", "do", "seems", "to", "reduce", "the", "amount", "of", "dependency", "logic", "but", "I", "m", "a", "bit", "concerned", "about", "the", "amount", "of", "hidden", "magic", "going", "on", "in", "a", "system", "where", "update", "cascade", "through", "the", "data", "layer", "NUMBER", "This", "be", "exactly", "the", "situation", "that", "Flux", "was", "created", "to", "avoid", "NUMBER", "Making", "the", "update", "explicitly", "declared", "in", "the", "stores", "helped", "us", "to", "reason", "about", "complex", "update", "that", "touched", "a", "lot", "of", "domains", "NUMBER", "When", "mutations", "be", "happening", "reactively", "I", "might", "say", "magically", "it", "becomes", "more", "difficult", "to", "understand", "how", "data", "be", "change", "throughout", "the", "application", "NUMBER", "But", "perhaps", "it", "doesn", "t", "matter", "NUMBER", "Maybe", "all", "we", "need", "be", "to", "focus", "on", "write", "in", "an", "FRP", "style", "throughout", "the", "stores", "and", "I", "might", "be", "able", "to", "get", "on", "board", "with", "this", "NUMBER", "I", "ll", "take", "a", "deeper", "look", "at", "the", "suggestions", "you", "ve", "offered", "NUMBER", "Yeah", "I", "definitely", "think", "that", "reasonable", "option", "would", "be", "to", "keep", "the", "store", "stateless", "and", "pull", "the", "state", "to", "single", "shared", "storage", "NUMBER", "The", "storage", "of", "shared", "state", "may", "be", "for", "example", "Baobab", "or", "any", "other", "immutable", "tree", "data", "structure", "NUMBER", "That", "would", "mean", "stores", "would", "become", "just", "a", "dummy", "action", "handlers", "business", "logic", "handlers", "and", "I", "be", "still", "thinking", "about", "the", "name", "as", "Store", "be", "probably", "not", "very", "descriptive", "in", "this", "case", "NUMBER", "Bill", "you", "have", "mention", "that", "even", "in", "this", "case", "you", "most", "likely", "won", "t", "avoid", "the", "need", "for", "waitFor", "because", "you", "probably", "want", "to", "execute", "those", "dummy", "handlers", "in", "particular", "order", "as", "one", "handler", "may", "depend", "on", "state", "which", "has", "be", "reduced", "by", "other", "handler", "NUMBER", "Just", "please", "keep", "in", "mind", "that", "waitFor", "will", "not", "help", "you", "when", "use", "Baobab", "NUMBER", "The", "reason", "why", "be", "because", "change", "be", "emitted", "only", "once", "on", "the", "end", "of", "the", "call", "stack", "setting", "value", "to", "baobab", "and", "then", "immediately", "reading", "it", "will", "result", "in", "reading", "old", "value", "NUMBER", "Anyway", "I", "would", "say", "that", "the", "need", "to", "use", "waitFor", "to", "keep", "particular", "order", "of", "handle", "actions", "be", "most", "likely", "cause", "by", "wrong", "architectural", "decision", "NUMBER", "Stateful", "store", "be", "supposed", "to", "encapsulate", "specific", "domain", "and", "the", "state", "be", "responsible", "to", "determine", "those", "boundaries", "NUMBER", "However", "if", "the", "store", "be", "stateless", "and", "entire", "state", "of", "app", "be", "held", "in", "single", "tree", "the", "decision", "about", "store", "boundaries", "be", "not", "that", "strict", "and", "we", "create", "those", "boundaries", "only", "to", "make", "our", "code", "logically", "grouped", "together", "we", "could", "possibly", "have", "just", "single", "store", "to", "handle", "all", "actions", "which", "be", "of", "course", "not", "ideal", "NUMBER", "The", "tree", "itself", "be", "responsible", "for", "emitting", "change", "for", "specific", "views", "which", "really", "need", "to", "update", "NUMBER", "So", "in", "other", "words", "if", "we", "really", "need", "to", "rely", "on", "order", "then", "it", "s", "probably", "better", "to", "handle", "everything", "in", "single", "action", "handler", "but", "in", "most", "cases", "we", "could", "avoid", "it", "by", "proper", "schema", "of", "the", "tree", "NUMBER", "Even", "though", "Baobab", "be", "a", "great", "idea", "there", "be", "in", "my", "opinion", "one", "even", "better", "approach", "NUMBER", "We", "can", "possibly", "have", "just", "one", "emit", "event", "for", "entire", "tree", "any", "change", "in", "the", "tree", "would", "result", "in", "the", "emit", "change", "and", "the", "topmost", "view", "would", "listen", "to", "the", "change", "and", "pass", "the", "state", "down", "through", "the", "component", "hierarchy", "via", "props", "NUMBER", "However", "there", "be", "one", "requirement", "NUMBER", "All", "components", "but", "the", "root", "must", "be", "pure", "NUMBER", "If", "the", "condition", "be", "met", "and", "we", "be", "use", "immutable", "data", "structure", "which", "we", "should", "anyway", "we", "could", "possibly", "have", "PureRenderMixin", "in", "all", "our", "components", "and", "the", "immutable", "data", "tree", "with", "the", "mixin", "allows", "us", "to", "update", "views", "only", "when", "necessary", "NUMBER", "In", "that", "case", "we", "don", "t", "even", "need", "Baobab", "NUMBER", "There", "be", "my", "contribution", "on", "this", "topic", "NUMBER", "You", "can", "treat", "Dispatcher", "s", "API", "as", "a", "low", "level", "and", "create", "your", "definition", "of", "stores", "above", "NUMBER", "For", "example", "in", "my", "Stores", "implementation", "LINK", "stateful", "I", "ve", "use", "waitFor", "under", "the", "hood", "inside", "state", "getter", "LINK", "stateful", "blob", "master", "index", "NUMBER", "js", "L", "NUMBER", "L", "NUMBER", "NUMBER", "That", "means", "that", "you", "can", "just", "use", "getter", "and", "don", "t", "even", "think", "about", "waitFor", "NUMBER", "Check", "example", "here", "LINK", "stateful", "dispatchers", "waitfor", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "Based", "on", "the", "current", "writings", "and", "diagrams", "it", "s", "possible", "for", "developers", "to", "hastily", "conclude", "that", "it", "be", "strongly", "recommended", "that", "stores", "themselves", "be", "not", "allow", "to", "create", "actions", "NUMBER", "The", "documentation", "on", "Structure", "and", "Data", "Flow", "LINK", "structure", "and", "data", "flow", "or", "Actions", "and", "the", "Dispatcher", "LINK", "and", "the", "dispatcher", "NUMBER", "html", "content", "needs", "to", "be", "supplemented", "with", "an", "exemplar", "data", "flow", "that", "be", "not", "originating", "from", "client", "side", "interactions", "exclusively", "NUMBER", "Researching", "the", "discussions", "on", "the", "internet", "reveals", "that", "many", "developers", "be", "strongly", "fixated", "to", "the", "understanding", "that", "stores", "be", "conceptualized", "in", "a", "way", "that", "doesn", "t", "permit", "them", "to", "initiate", "cyclic", "blow", "for", "blow", "action", "response", "flows", "together", "with", "a", "dispatcher", "even", "though", "such", "communication", "still", "warrants", "that", "stores", "self", "update", "in", "response", "to", "an", "action", "maintaining", "the", "unidirectional", "flow", "of", "data", "within", "the", "application", "NUMBER", "For", "example", "please", "see", "the", "comments", "thread", "LINK", "on", "a", "SO", "question", "where", "fisherwebdev", "explains", "that", "stores", "be", "allow", "to", "communicate", "with", "the", "dispatcher", "to", "generate", "actions", "that", "they", "can", "reciprocally", "use", "to", "update", "themselves", "in", "response", "to", "data", "received", "from", "a", "Web", "API", "request", "they", "instigated", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "thanks", "feature", "request", "add", "a", "flux", "example", "that", "do", "not", "use", "react", "angular", "a", "small", "example", "Blaze", "Meteor", "LINK", "Info", "about", "Blaze", "LINK", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "No", "activity", "here", "for", "a", "while", "and", "I", "do", "not", "plan", "to", "add", "this", "so", "I", "be", "going", "to", "close", "this", "issue", "NUMBER", "If", "anyone", "be", "still", "interested", "in", "this", "I", "be", "happy", "to", "accept", "a", "PR", "for", "it", "NUMBER", "TodoConstants", "module", "be", "not", "mocked", "but", "jest", "be", "mocking", "keymirror", "module", "that", "be", "in", "use", "by", "TodoConstants", "NUMBER", "I", "had", "to", "turn", "mocking", "off", "on", "keymirror", "to", "get", "TodoConstants", "to", "return", "a", "correct", "map", "in", "the", "test", "NUMBER", "The", "test", "be", "passing", "for", "me", "NUMBER", "I", "m", "putting", "a", "console", "NUMBER", "log", "in", "the", "test", "and", "seeing", "the", "action", "type", "represented", "as", "a", "string", "accurately", "NUMBER", "I", "did", "just", "update", "the", "jest", "version", "throughout", "the", "repo", "NUMBER", "Can", "you", "verify", "that", "you", "be", "use", "Jest", "NUMBER", "and", "still", "seeing", "problem", "thanks", "NUMBER", "that", "fix", "it", "thank", "you", "Thanks", "However", "we", "actually", "need", "this", "change", "to", "happen", "in", "our", "docs", "in", "master", "otherwise", "they", "ll", "get", "clobbered", "the", "next", "time", "we", "generate", "gh", "pages", "NUMBER", "I", "just", "push", "NUMBER", "ba", "NUMBER", "b", "NUMBER", "f", "NUMBER", "e", "NUMBER", "c", "NUMBER", "cb", "NUMBER", "ba", "NUMBER", "aef", "NUMBER", "with", "the", "change", "in", "the", "right", "place", "NUMBER", "This", "pull", "request", "change", "the", "value", "of", "the", "license", "property", "in", "package", "NUMBER", "json", "to", "a", "standard", "machine", "readable", "SPDX", "license", "identifier", "NUMBER", "I", "ll", "be", "honest", "This", "be", "a", "semi", "automate", "pull", "request", "NUMBER", "I", "start", "by", "use", "dat", "LINK", "data", "NUMBER", "com", "and", "dat", "npm", "LINK", "npm", "to", "review", "metadata", "for", "all", "package", "on", "npm", "LINK", "looking", "for", "package", "that", "don", "t", "use", "a", "valid", "SPDX", "license", "identifier", "LINK", "in", "package", "NUMBER", "json", "NUMBER", "I", "use", "my", "own", "npm", "module", "spdx", "correct", "LINK", "correct", "NUMBER", "js", "to", "guess", "what", "license", "you", "were", "after", "BSD", "NUMBER", "Clause", "LINK", "NUMBER", "Clause", "NUMBER", "A", "quick", "manual", "check", "and", "a", "few", "shell", "scripts", "later", "and", "this", "pull", "request", "was", "born", "NUMBER", "npm", "doesn", "t", "require", "that", "you", "use", "a", "valid", "SPDX", "identifier", "but", "it", "s", "strongly", "recommended", "NUMBER", "Try", "npm", "help", "NUMBER", "package", "NUMBER", "json", "and", "search", "for", "License", "NUMBER", "Other", "source", "code", "package", "managers", "like", "Maven", "for", "Java", "and", "RubyGems", "for", "Ruby", "recommend", "the", "same", "NUMBER", "Why", "care", "about", "SPDX", "A", "machine", "readable", "standard", "makes", "it", "possible", "for", "program", "rather", "than", "just", "people", "to", "review", "a", "module", "or", "even", "an", "entire", "codebase", "to", "make", "sure", "that", "licenses", "be", "compatible", "NUMBER", "Whatever", "the", "reason", "strong", "personal", "conviction", "company", "policy", "terms", "of", "a", "business", "deal", "SPDX", "makes", "it", "easier", "to", "collaborate", "with", "others", "when", "licenses", "can", "be", "a", "problem", "and", "helps", "take", "open", "source", "software", "to", "more", "places", "NUMBER", "Given", "that", "npm", "has", "a", "ton", "of", "modules", "LINK", "but", "also", "handles", "dependencies", "in", "a", "novel", "way", "I", "think", "a", "little", "license", "hygiene", "could", "help", "npm", "build", "amazing", "new", "relationships", "between", "communities", "that", "lawyers", "have", "long", "keep", "apart", "NUMBER", "Though", "this", "PR", "was", "semi", "automate", "my", "responses", "to", "any", "question", "you", "have", "won", "t", "be", "NUMBER", "I", "can", "t", "give", "legal", "advice", "via", "GitHub", "but", "I", "m", "happy", "to", "answer", "question", "about", "SPDX", "or", "point", "you", "to", "good", "resources", "NUMBER", "Thanks", "for", "your", "contribution", "to", "open", "source", "software", "K", "This", "be", "trivial", "so", "be", "fine", "without", "the", "CLA", "sign", "NUMBER", "Thanks", "zpao", "NUMBER", "No", "problem", "thank", "you", "While", "developing", "a", "few", "utility", "libraries", "for", "some", "of", "our", "Flux", "applications", "I", "thought", "it", "might", "be", "nice", "if", "those", "were", "broken", "down", "to", "use", "the", "invariant", "dependency", "so", "that", "our", "error", "could", "leverage", "it", "as", "well", "and", "be", "a", "bit", "more", "unified", "with", "how", "other", "message", "be", "expose", "in", "Flux", "NUMBER", "It", "s", "quite", "a", "simple", "module", "however", "and", "if", "you", "think", "it", "would", "raise", "more", "complications", "then", "we", "can", "just", "mirror", "the", "behavior", "instead", "of", "just", "utilizing", "it", "directly", "off", "of", "require", "flux", "NUMBER", "invariant", "NUMBER", "I", "think", "this", "be", "the", "wrong", "solution", "to", "the", "problem", "NUMBER", "I", "ll", "let", "fisherwebdev", "actually", "make", "the", "call", "though", "NUMBER", "FWIW", "you", "may", "be", "interested", "in", "LINK", "which", "was", "pull", "from", "our", "code", "NUMBER", "zapo", "There", "s", "likely", "a", "more", "elegant", "solution", "yes", "NUMBER", "I", "came", "across", "it", "when", "I", "tried", "to", "just", "use", "it", "and", "notice", "that", "var", "Invariant", "require", "flux", "NUMBER", "invariant", "was", "undefined", "NUMBER", "Right", "after", "I", "opened", "this", "I", "realized", "there", "may", "be", "reasons", "why", "you", "wouldn", "t", "want", "this", "expose", "or", "support", "publicly", "NUMBER", "I", "saw", "this", "LINK", "router", "search", "utf", "NUMBER", "E", "NUMBER", "NUMBER", "C", "NUMBER", "q", "invariant", "in", "react", "router", "and", "wondered", "if", "use", "it", "that", "way", "would", "also", "be", "a", "less", "than", "desirable", "solution", "NUMBER", "For", "some", "reason", "I", "d", "thought", "that", "Flux", "and", "React", "would", "be", "use", "the", "same", "invariant", "dependency", "NUMBER", "sprjr", "I", "m", "use", "browserify", "to", "re", "expose", "flux", "NUMBER", "See", "if", "it", "helps", "NUMBER", "myflux", "NUMBER", "js", "var", "Flux", "require", "flux", "var", "EventEmitter", "require", "events", "NUMBER", "EventEmitter", "Flux", "NUMBER", "EventEmitter", "EventEmitter", "module", "NUMBER", "export", "Flux", "index", "NUMBER", "js", "var", "Flux", "require", "NUMBER", "myflux", "zpao", "I", "was", "under", "the", "impression", "that", "there", "was", "a", "plan", "to", "expose", "invariant", "in", "a", "way", "that", "would", "be", "not", "tied", "to", "any", "one", "FB", "open", "source", "project", "NUMBER", "Is", "that", "still", "going", "to", "happen", "I", "m", "work", "on", "it", "NUMBER", "Closing", "this", "because", "Paul", "s", "solution", "be", "come", "soon", "NUMBER", "If", "it", "turns", "out", "that", "Paul", "s", "solution", "be", "not", "what", "the", "community", "wants", "we", "can", "revisit", "NUMBER", "Dispatcher", "_lastID", "be", "not", "currently", "bound", "directly", "to", "the", "Dispatcher", "class", "meaning", "that", "if", "multiple", "instances", "be", "created", "they", "share", "and", "increment", "the", "same", "variable", "NUMBER", "In", "the", "context", "of", "isomorphic", "flux", "apps", "it", "can", "make", "sense", "to", "use", "per", "request", "flux", "instances", "on", "the", "server", "as", "oppose", "to", "the", "singleton", "flux", "pattern", "as", "this", "allows", "flux", "instantiating", "to", "be", "fully", "asynchronous", "NUMBER", "When", "this", "per", "request", "flux", "pattern", "be", "use", "the", "_lastID", "should", "really", "be", "bound", "to", "the", "class", "to", "avoid", "shared", "state", "and", "to", "also", "avoid", "the", "very", "very", "very", "unlikely", "and", "yet", "still", "possible", "case", "that", "our", "ID", "counter", "surpasses", "the", "magic", "JS", "integer", "limit", "LINK", "and", "we", "have", "a", "very", "annoying", "to", "debug", "issue", "NUMBER", "NUMBER", "TAG", "view", "controller", "model", "view", "controller", "etc", "NUMBER", "Views", "update", "models", "be", "wrong", "Controllers", "update", "views", "be", "wrong", "Controllers", "listening", "to", "models", "be", "wrong", "Models", "listening", "to", "anything", "else", "be", "wrong", "Not", "often", "covered", "in", "articles", "about", "MVC", "be", "that", "often", "something", "_outside_", "these", "three", "typically", "hooks", "the", "three", "together", "NUMBER", "this", "NUMBER", "ate", "for", "any", "React", "component", "be", "a", "ViewModel", "the", "actual", "models", "be", "state", "inside", "Stores", "or", "the", "backend", "NUMBER", "If", "one", "View", "fetches", "data", "from", "stores", "and", "pass", "it", "down", "to", "child", "views", "this", "be", "view", "logic", "responding", "to", "a", "model", "change", "event", "by", "update", "ViewModels", "NUMBER", "This", "be", "one", "example", "of", "how", "IMHO", "many", "of", "Flux", "criticisms", "of", "MVC", "show", "a", "misunderstanding", "of", "how", "to", "properly", "implement", "MVC", "NUMBER", "Please", "stop", "spreading", "this", "kind", "of", "misinformation", "NUMBER", "IMO", "Flux", "be", "almost", "the", "same", "with", "MVC", "ActionCreator", "be", "Controller", "Store", "be", "Model", "Component", "be", "View", "NUMBER", "Just", "one", "thing", "difference", "that", "s", "Dispatcher", "NUMBER", "We", "need", "the", "dispatcher", "to", "implement", "the", "waitFor", "method", "NUMBER", "And", "one", "other", "concept", "in", "Flux", "that", "be", "one", "way", "data", "flow", "NUMBER", "Usually", "other", "implementations", "of", "MVC", "didn", "t", "use", "that", "concept", "especially", "in", "JS", "world", "NUMBER", "The", "action", "creators", "be", "not", "controllers", "NUMBER", "Controllers", "act", "_upon_", "models", "NUMBER", "No", "entity", "acts", "upon", "the", "stores", "NUMBER", "Rather", "they", "define", "how", "they", "will", "respond", "to", "actions", "NUMBER", "It", "be", "really", "not", "the", "same", "there", "be", "no", "controller", "imperatively", "orchestrating", "how", "the", "data", "layer", "should", "be", "update", "NUMBER", "On", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "soul", "wos", "vn", "notifications", "github", "NUMBER", "com", "write", "IMO", "Flux", "be", "almost", "the", "same", "with", "MVC", "ActionCreator", "be", "Controller", "Store", "be", "Model", "Component", "be", "View", "NUMBER", "Just", "one", "thing", "difference", "that", "s", "Dispatcher", "NUMBER", "We", "need", "the", "dispatcher", "to", "implement", "the", "waitFor", "method", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "Thank", "for", "your", "explanation", "NUMBER", "Sorry", "I", "mean", "Action", "function", "not", "ActionCreator", "NUMBER", "But", "may", "be", "I", "m", "still", "misunderstood", "because", "I", "use", "some", "transformation", "in", "my", "action", "js", "ActionDoSomething", "function", "get", "data", "from", "api", "methods", "transform", "the", "data", "dispatch", "the", "payload", "data", "Should", "I", "use", "the", "transformation", "before", "dispatching", "to", "stores", "or", "just", "leave", "the", "transforming", "will", "be", "do", "later", "in", "the", "View", "rendering", "If", "you", "need", "to", "do", "a", "transformation", "that", "be", "generally", "applicable", "to", "your", "entire", "application", "I", "would", "do", "that", "in", "the", "success", "callback", "defined", "within", "a", "WebAPIUtils", "module", "NUMBER", "But", "if", "the", "transformation", "be", "specific", "to", "a", "single", "store", "I", "would", "do", "it", "in", "the", "store", "NUMBER", "Likewise", "if", "a", "particular", "transformation", "be", "only", "applicable", "to", "a", "view", "or", "if", "there", "be", "a", "good", "reason", "to", "maintain", "the", "data", "in", "the", "store", "in", "a", "different", "more", "maintainable", "way", "then", "you", "would", "want", "to", "do", "that", "transformation", "in", "the", "view", "NUMBER", "Just", "as", "a", "historical", "note", "NUMBER", "It", "s", "kind", "of", "hard", "to", "tell", "but", "I", "think", "before", "the", "web", "days", "the", "controller", "was", "only", "considered", "responsible", "for", "listening", "to", "the", "view", "and", "update", "the", "model", "NUMBER", "When", "web", "MVC", "frameworks", "came", "around", "they", "reused", "these", "terms", "but", "the", "responsibilities", "be", "completely", "different", "since", "there", "be", "no", "persistent", "view", "listening", "to", "the", "model", "instead", "the", "controller", "build", "a", "view", "from", "scratch", "to", "respond", "to", "every", "request", "NUMBER", "I", "m", "pretty", "sure", "that", "s", "why", "there", "have", "be", "so", "many", "debates", "about", "the", "terminology", "NUMBER", "On", "Mon", "May", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Bill", "Fisher", "write", "The", "action", "creators", "be", "not", "controllers", "NUMBER", "Controllers", "act", "_upon_", "models", "NUMBER", "No", "entity", "acts", "upon", "the", "stores", "NUMBER", "Rather", "they", "define", "how", "they", "will", "respond", "to", "actions", "NUMBER", "It", "be", "really", "not", "the", "same", "there", "be", "no", "controller", "imperatively", "orchestrating", "how", "the", "data", "layer", "should", "be", "update", "NUMBER", "On", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "soul", "wos", "vn", "notifications", "github", "NUMBER", "com", "write", "IMO", "Flux", "be", "almost", "the", "same", "with", "MVC", "ActionCreator", "be", "Controller", "Store", "be", "Model", "Component", "be", "View", "NUMBER", "Just", "one", "thing", "difference", "that", "s", "Dispatcher", "NUMBER", "We", "need", "the", "dispatcher", "to", "implement", "the", "waitFor", "method", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "NUMBER", "Links", "NUMBER", "LINK", "issuecomment", "NUMBER", "fisherwebdev", "I", "just", "update", "this", "PR", "with", "latest", "change", "from", "master", "NUMBER", "Is", "it", "good", "to", "accept", "or", "do", "you", "need", "other", "change", "The", "Chat", "example", "do", "the", "following", "in", "the", "top", "level", "app", "NUMBER", "js", "LINK", "chat", "js", "app", "NUMBER", "js", "ChatExampleData", "NUMBER", "init", "load", "example", "data", "into", "localstorage", "ChatWebAPIUtils", "NUMBER", "getAllMessages", "NUMBER", "So", "getAllMessages", "has", "side", "effect", "Otherwise", "why", "call", "it", "and", "throw", "away", "the", "result", "That", "part", "doesn", "t", "seem", "clean", "NUMBER", "why", "call", "getAllMessages", "on", "view", "LINK", "chat", "js", "app", "NUMBER", "js", "L", "NUMBER", "isn", "t", "better", "to", "have", "an", "action", "to", "do", "this", "First", "time", "contributor", "here", "I", "find", "these", "example", "repositories", "to", "be", "tremendously", "helpful", "while", "get", "the", "hang", "of", "flux", "but", "was", "finding", "it", "difficult", "to", "locate", "resources", "on", "jest", "test", "particularly", "around", "test", "components", "aside", "from", "the", "few", "StackOverflow", "threads", "and", "the", "note", "on", "react", "flux", "doc", "pages", "NUMBER", "This", "PR", "add", "a", "handful", "of", "new", "test", "aimed", "at", "the", "todomvc", "example", "s", "component", "file", "NUMBER", "Looking", "forward", "to", "feedback", "and", "any", "best", "practices", "to", "know", "about", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "In", "short", "NUMBER", "I", "be", "issue", "an", "XHR", "NUMBER", "When", "it", "returns", "I", "need", "to", "trigger", "an", "action", "with", "input", "data", "from", "a", "Store", "NUMBER", "What", "be", "the", "preferred", "approach", "In", "long", "consider", "the", "following", "scenario", "I", "have", "a", "page", "that", "contains", "a", "list", "of", "search", "results", "NUMBER", "The", "search", "results", "and", "the", "query", "use", "to", "retrieve", "them", "be", "stored", "in", "a", "SearchStore", "NUMBER", "These", "search", "results", "be", "loaded", "via", "an", "XHR", "dispatched", "from", "SearchActionCreators", "NUMBER", "Users", "can", "edit", "items", "in", "the", "search", "results", "NUMBER", "When", "they", "do", "so", "I", "issue", "an", "XHR", "via", "EditActionCreators", "NUMBER", "When", "the", "xhr", "returns", "eg", "the", "action", "be", "complete", "I", "want", "to", "refresh", "the", "search", "results", "in", "the", "SearchStore", "use", "the", "current", "query", "in", "the", "SearchStore", "NUMBER", "There", "be", "a", "few", "approaches", "I", "can", "take", "to", "accomplish", "this", "NUMBER", "Invoke", "SearchActionCreators", "NUMBER", "refresh", "SearchStore", "NUMBER", "currentQuery", "from", "within", "EditActionCreators", "when", "the", "XHR", "be", "complete", "NUMBER", "This", "approach", "requires", "my", "ActionCreator", "maintain", "a", "reference", "to", "my", "Store", "NUMBER", "NUMBER", "Invoke", "SearchActionCreators", "NUMBER", "refresh", "SearchActionCreators", "NUMBER", "currentQuery", "from", "within", "EditActionCreators", "when", "the", "XHR", "be", "complete", "NUMBER", "This", "approach", "requires", "my", "ActionCreator", "to", "maintain", "state", "NUMBER", "NUMBER", "Invoke", "SearchActionCreators", "NUMBER", "refresh", "SearchStore", "NUMBER", "currentQuery", "from", "componentWillUpdate", "within", "my", "view", "NUMBER", "This", "do", "not", "seem", "to", "fit", "with", "the", "intent", "of", "componentWillUpdate", "NUMBER", "Flux", "be", "straight", "forward", "when", "XHR", "s", "result", "in", "DOM", "change", "but", "I", "start", "to", "get", "confused", "when", "XHR", "s", "result", "issue", "other", "XHR", "s", "with", "input", "from", "the", "current", "state", "of", "the", "app", "contained", "in", "a", "Store", "NUMBER", "If", "you", "be", "storing", "the", "query", "in", "the", "SearchStore", "why", "do", "you", "need", "to", "send", "it", "again", "I", "think", "in", "your", "case", "I", "would", "register", "the", "SearchStore", "for", "the", "action", "dispatched", "when", "the", "edit", "returns", "NUMBER", "In", "that", "callback", "I", "would", "update", "the", "Store", "data", "accordingly", "and", "send", "the", "change", "event", "so", "the", "view", "refreshes", "itself", "NUMBER", "LuisHerranz", "Let", "me", "clarify", "what", "I", "mean", "what", "I", "say", "and", "the", "query", "use", "to", "retrieve", "them", "be", "stored", "in", "a", "SearchStore", "I", "be", "consuming", "a", "search", "API", "the", "parameters", "to", "that", "request", "partnerName", "string", "startDate", "Date", "be", "stored", "in", "the", "SearchStore", "NUMBER", "I", "need", "to", "send", "the", "query", "again", "via", "an", "action", "to", "refresh", "via", "SearchActionCreators", "NUMBER", "refresh", "the", "search", "results", "after", "a", "user", "performs", "an", "edit", "via", "EditActionCreators", "NUMBER", "I", "m", "not", "sure", "how", "to", "get", "query", "parameters", "stored", "in", "SearchStore", "to", "SearchActionCreators", "NUMBER", "refresh", "NUMBER", "Why", "not", "pass", "the", "query", "to", "the", "action", "creator", "via", "the", "component", "onclick", "I", "NUMBER", "e", "onClick", "function", "Actioncreator", "NUMBER", "refresh", "store", "NUMBER", "query", "Presumably", "the", "component", "should", "be", "able", "to", "access", "the", "store", "already", "NUMBER", "But", "also", "I", "don", "t", "think", "there", "be", "any", "conceptual", "problem", "with", "an", "action", "creator", "keep", "a", "reference", "to", "a", "store", "to", "read", "data", "so", "long", "as", "any", "writes", "to", "the", "store", "be", "do", "as", "regular", "dispatches", "and", "not", "as", "some", "type", "of", "special", "non", "flux", "relationship", "NUMBER", "Sometimes", "it", "makes", "sense", "that", "there", "would", "be", "a", "store", "with", "raw", "data", "that", "be", "use", "to", "populate", "a", "lower", "store", "with", "a", "version", "of", "that", "data", "specific", "to", "a", "components", "needs", "NUMBER", "In", "this", "case", "I", "have", "an", "action", "creator", "that", "maintains", "a", "ref", "to", "the", "more", "abstract", "data", "store", "and", "reloads", "the", "dependent", "store", "via", "a", "dispatch", "NUMBER", "The", "component", "only", "knows", "about", "the", "dependent", "store", "so", "the", "action", "creator", "maintains", "a", "handle", "to", "the", "main", "store", "itself", "NUMBER", "Sent", "from", "my", "iPhone", "On", "Mar", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "TimothyRHuertas", "notifications", "github", "NUMBER", "com", "write", "LuisHerranz", "Let", "me", "clarify", "what", "I", "mean", "what", "I", "say", "and", "the", "query", "use", "to", "retrieve", "them", "be", "stored", "in", "a", "SearchStore", "I", "be", "consuming", "a", "search", "API", "the", "parameters", "to", "that", "request", "partnerName", "string", "startDate", "Date", "be", "stored", "in", "the", "SearchStore", "NUMBER", "I", "need", "to", "send", "the", "query", "again", "via", "an", "action", "to", "refresh", "via", "SearchActionCreators", "NUMBER", "refresh", "the", "search", "results", "after", "a", "user", "performs", "an", "edit", "via", "EditActionCreators", "NUMBER", "I", "m", "not", "sure", "how", "to", "get", "query", "parameters", "stored", "in", "SearchStore", "to", "SearchActionCreators", "NUMBER", "refresh", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "sterpe", "your", "suggestions", "be", "pretty", "pragmatic", "I", "like", "them", "NUMBER", "I", "wasn", "t", "sure", "about", "the", "action", "creators", "maintaining", "a", "reference", "to", "the", "store", "because", "the", "architecture", "diagram", "doesn", "t", "suggest", "that", "NUMBER", "Passing", "the", "query", "parameters", "to", "the", "edit", "action", "seems", "like", "the", "right", "thing", "to", "do", "NUMBER", "Perhaps", "I", "should", "change", "the", "name", "of", "the", "method", "to", "editAndReload", "for", "the", "sake", "of", "semantics", "NUMBER", "Thanks", "for", "the", "suggestion", "NUMBER", "I", "m", "going", "to", "leave", "this", "open", "for", "another", "day", "or", "two", "to", "see", "if", "others", "agree", "NUMBER", "fisherwebdev", "You", "be", "correct", "NUMBER", "The", "miss", "link", "be", "web", "api", "util", "s", "having", "knowledge", "of", "stores", "NUMBER", "I", "was", "under", "the", "impression", "that", "they", "were", "intended", "to", "be", "plain", "old", "web", "clients", "NUMBER", "Things", "make", "sense", "now", "NUMBER", "Thanks", "for", "clarifying", "how", "store", "data", "gets", "pass", "to", "components", "NUMBER", "I", "would", "add", "that", "for", "controller", "views", "that", "composite", "a", "large", "amount", "of", "components", "e", "NUMBER", "g", "NUMBER", "data", "grids", "understanding", "the", "PureRenderMixin", "and", "immutability", "be", "key", "to", "avoiding", "performance", "problem", "NUMBER", "Our", "team", "struggled", "with", "this", "in", "the", "beginning", "NUMBER", "Thanks", "for", "the", "reply", "here", "fisherwebdev", "the", "clarifications", "at", "the", "end", "help", "a", "lot", "with", "some", "other", "stuff", "I", "ve", "be", "trying", "to", "sort", "through", "NUMBER", "I", "haven", "t", "run", "in", "to", "the", "issue", "Tim", "has", "yet", "but", "I", "m", "build", "a", "similar", "project", "in", "parallel", "and", "I", "m", "bound", "to", "eventually", "NUMBER", "Right", "now", "my", "stores", "be", "not", "taking", "advantage", "of", "Dispatcher", "NUMBER", "waitFor", "so", "I", "ll", "try", "to", "dig", "in", "to", "that", "a", "bit", "more", "NUMBER", "Closing", "this", "out", "NUMBER", "Thanks", "again", "all", "for", "your", "help", "NUMBER", "It", "really", "helped", "move", "my", "code", "forward", "NUMBER", "fisherwebdev", "I", "still", "have", "a", "question", "with", "the", "WebAPIUtils", "Module", "Here", "s", "the", "sequence", "NUMBER", "User", "performs", "edit", "NUMBER", "NUMBER", "View", "component", "calls", "action", "creator", "with", "edit", "text", "NUMBER", "SearchActionCreators", "NUMBER", "refresh", "NUMBER", "The", "action", "creator", "calls", "the", "WebAPIUtils", "module", "after", "dispatching", "the", "action", "NUMBER", "WebAPIUtils", "NUMBER", "refresh", "NUMBER", "The", "WebAPIUtils", "module", "gets", "data", "from", "the", "stores", "that", "it", "needs", "to", "make", "the", "call", "to", "the", "server", "NUMBER", "var", "query", "SearchStore", "NUMBER", "getCurrentQuery", "NUMBER", "WebAPIUtils", "initiates", "server", "call", "and", "in", "turn", "calls", "an", "action", "creator", "when", "it", "handles", "the", "response", "NUMBER", "The", "SearchActionCreator", "can", "call", "the", "WebAPIUtils", "NUMBER", "refresh", "means", "the", "WebAPIUtils", "module", "may", "have", "a", "dependency", "of", "action", "creators", "NUMBER", "And", "when", "the", "WebAPIUtils", "take", "action", "creator", "s", "method", "as", "xhr", "callback", "it", "means", "the", "action", "creator", "have", "a", "dependency", "of", "WebAPIUtils", "module", "NUMBER", "Why", "this", "comes", "into", "in", "a", "dependency", "cycle", "I", "don", "t", "think", "WebAPIUtils", "should", "depend", "on", "SearchActionCreator", "NUMBER", "Rather", "have", "WebAPIUtils", "NUMBER", "refresh", "dispatch", "a", "complete", "event", "or", "return", "a", "promise", "or", "take", "a", "callback", "that", "SearchActionCreator", "listens", "to", "NUMBER", "When", "SearchActionCreator", "be", "notified", "that", "WebAPIUtils", "NUMBER", "refresh", "be", "complete", "it", "can", "create", "a", "new", "action", "REFRESH_COMPLETE", "or", "REFRESH_ERROR", "NUMBER", "That", "said", "if", "you", "be", "creating", "a", "new", "project", "you", "should", "consider", "use", "Redux", "NUMBER", "There", "be", "some", "nice", "tutorial", "videos", "linked", "to", "from", "the", "readme", "LINK", "This", "video", "explains", "how", "Flux", "inspired", "redux", "LINK", "xsSnOQynTHs", "Thanks", "TimothyRHuertas", "promises", "seems", "to", "be", "a", "better", "solution", "NUMBER", "Heard", "of", "redux", "for", "a", "while", "will", "take", "a", "look", "into", "it", "in", "a", "couple", "days", "NUMBER", "Line", "NUMBER", "of", "ThreadSection", "LINK", "chat", "js", "components", "ThreadSection", "NUMBER", "react", "NUMBER", "js", "L", "NUMBER", "Good", "catch", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "this", "be", "the", "grep", "output", "for", "string", "MessageStore", "Binary", "file", "NUMBER", "git", "index", "matches", "examples", "flux", "chat", "js", "components", "MessageSection", "NUMBER", "react", "NUMBER", "js", "var", "MessageStore", "require", "NUMBER", "stores", "MessageStore", "examples", "flux", "chat", "js", "components", "MessageSection", "NUMBER", "react", "NUMBER", "js", "message", "MessageStore", "NUMBER", "getAllForCurrentThread", "examples", "flux", "chat", "js", "components", "MessageSection", "NUMBER", "react", "NUMBER", "js", "MessageStore", "NUMBER", "addChangeListener", "this", "NUMBER", "_onChange", "examples", "flux", "chat", "js", "components", "MessageSection", "NUMBER", "react", "NUMBER", "js", "MessageStore", "NUMBER", "removeChangeListener", "this", "NUMBER", "_onChange", "examples", "flux", "chat", "js", "components", "MessageSection", "NUMBER", "react", "NUMBER", "js", "Event", "handler", "for", "change", "events", "come", "from", "the", "MessageStore", "examples", "flux", "chat", "js", "components", "ThreadSection", "NUMBER", "react", "NUMBER", "js", "var", "MessageStore", "require", "NUMBER", "stores", "MessageStore", "examples", "flux", "chat", "js", "stores", "UnreadThreadStore", "NUMBER", "js", "var", "MessageStore", "require", "NUMBER", "stores", "MessageStore", "examples", "flux", "chat", "js", "stores", "UnreadThreadStore", "NUMBER", "js", "MessageStore", "NUMBER", "dispatchToken", "examples", "flux", "chat", "js", "stores", "MessageStore", "NUMBER", "js", "var", "MessageStore", "assign", "EventEmitter", "NUMBER", "prototype", "examples", "flux", "chat", "js", "stores", "MessageStore", "NUMBER", "js", "MessageStore", "NUMBER", "dispatchToken", "ChatAppDispatcher", "NUMBER", "register", "function", "action", "examples", "flux", "chat", "js", "stores", "MessageStore", "NUMBER", "js", "MessageStore", "NUMBER", "emitChange", "examples", "flux", "chat", "js", "stores", "MessageStore", "NUMBER", "js", "MessageStore", "NUMBER", "emitChange", "examples", "flux", "chat", "js", "stores", "MessageStore", "NUMBER", "js", "MessageStore", "NUMBER", "emitChange", "examples", "flux", "chat", "js", "stores", "MessageStore", "NUMBER", "js", "module", "NUMBER", "export", "MessageStore", "examples", "flux", "chat", "js", "components", "ThreadSection", "NUMBER", "react", "NUMBER", "js", "be", "the", "only", "one", "to", "be", "modify", "according", "to", "the", "above", "grep", "search", "NUMBER", "it", "be", "a", "simple", "one", "line", "deletion", "NUMBER", "opened", "a", "PR", "hi", "im", "trying", "to", "run", "the", "flux", "examples", "and", "im", "not", "update", "any", "file", "but", "it", "looks", "like", "watchify", "be", "constantly", "add", "to", "bundle", "NUMBER", "js", "NUMBER", "be", "this", "correct", "or", "be", "there", "something", "wrong", "with", "this", "installation", "im", "a", "bit", "of", "a", "newbie", "so", "maybe", "its", "meant", "to", "work", "this", "way", "by", "the", "bundle", "NUMBER", "js", "file", "looks", "pretty", "MASSIVE", "NUMBER", "var", "www", "flux", "examples", "flux", "chat", "npm", "start", "flux", "chat", "NUMBER", "start", "var", "www", "flux", "examples", "flux", "chat", "watchify", "o", "js", "bundle", "NUMBER", "js", "v", "d", "NUMBER", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "NUMBER", "bytes", "write", "to", "js", "bundle", "NUMBER", "js", "NUMBER", "seconds", "and", "so", "on", "ad", "infinitum", "watchify", "be", "constantly", "update", "the", "console", "even", "though", "i", "be", "not", "make", "any", "change", "to", "code", "NUMBER", "be", "that", "normal", "expected", "operation", "You", "have", "be", "explicit", "about", "the", "entry", "file", "s", "NUMBER", "This", "works", "without", "the", "constant", "rebuilding", "watchify", "o", "js", "bundle", "NUMBER", "js", "v", "d", "js", "app", "NUMBER", "js", "Fixed", "NUMBER", "Thanks", "zertosh", "for", "the", "solution", "Thanks", "zertosh", "I", "had", "copied", "a", "bit", "of", "boilerplate", "code", "for", "my", "project", "from", "the", "flux", "tutorial", "and", "encountered", "this", "problem", "only", "when", "I", "switched", "a", "new", "HD", "and", "re", "downloaded", "all", "my", "NPM", "package", "NUMBER", "update", "src", "from", "bundle", "NUMBER", "js", "to", "bundle", "NUMBER", "min", "NUMBER", "js", "as", "build", "from", "npm", "run", "build", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Problem", "be", "if", "you", "build", "and", "open", "the", "project", "it", "do", "not", "work", "because", "index", "NUMBER", "html", "try", "to", "load", "the", "non", "minify", "one", "NUMBER", "In", "any", "case", "this", "PR", "was", "solving", "that", "but", "creating", "problem", "when", "run", "npm", "run", "start", "NUMBER", "My", "bad", "sorry", "NUMBER", "Since", "I", "find", "no", "_build", "NUMBER", "js_", "in", "this", "repo", "I", "suppose", "it", "to", "be", "_bundle", "NUMBER", "js_", "generate", "by", "npm", "start", "relaxed", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "We", "want", "to", "trigger", "Store", "NUMBER", "emitChange", "only", "if", "data", "were", "change", "NUMBER", "For", "our", "stores", "we", "emit", "change", "every", "time", "although", "I", "don", "t", "think", "it", "would", "be", "too", "terribly", "difficult", "to", "implement", "a", "shouldStoreEmitChange", "function", "but", "I", "don", "t", "know", "that", "you", "could", "do", "that", "in", "Flux", "there", "would", "still", "be", "some", "manual", "calculations", "you", "d", "have", "to", "perform", "NUMBER", "if", "I", "m", "understanding", "what", "you", "re", "ask", "No", "NUMBER", "My", "proposition", "be", "much", "simpler", "NUMBER", "I", "believe", "I", "write", "some", "kind", "of", "misdirection", "in", "my", "explanation", "for", "the", "patch", "NUMBER", "Now", "code", "be", "case", "TodoConstants", "NUMBER", "TODO_CREATE", "if", "text", "create", "text", "here", "we", "save", "change", "to", "our", "Data", "Model", "TodoStore", "NUMBER", "emitChange", "here", "we", "run", "View", "re", "rendering", "break", "We", "do", "re", "rendering", "even", "if", "we", "have", "not", "change", "Data", "Model", "NUMBER", "This", "be", "meaningless", "NUMBER", "I", "propose", "to", "run", "View", "re", "rendering", "that", "starts", "when", "we", "fire", "TodoStore", "NUMBER", "emitChange", "event", "only", "when", "Data", "Model", "were", "change", "NUMBER", "Only", "if", "we", "run", "create", "text", "NUMBER", "if", "text", "create", "text", "TodoStore", "NUMBER", "emitChange", "break", "We", "need", "the", "starting", "year", "not", "just", "the", "most", "recent", "year", "NUMBER", "We", "may", "be", "able", "to", "change", "this", "to", "NUMBER", "present", "but", "lets", "do", "this", "first", "NUMBER", "This", "revert", "and", "then", "do", "NUMBER", "correctly", "NUMBER", "Hi", "there", "I", "have", "asked", "a", "question", "on", "Stack", "Overflow", "regard", "get", "initial", "state", "into", "a", "store", "LINK", "flux", "get", "initial", "state", "into", "a", "store", "I", "would", "appreciate", "any", "input", "even", "though", "I", "m", "use", "Reflux", "NUMBER", "Thanks", "for", "you", "input", "fisherwebdev", "an", "initial", "load", "sounds", "like", "the", "best", "approach", "NUMBER", "With", "regards", "to", "the", "Stack", "Overflow", "tags", "noted", "Let", "s", "assume", "that", "there", "be", "many", "stores", "that", "store", "e", "NUMBER", "g", "NUMBER", "user", "records", "like", "users", "friend", "lists", "user", "search", "results", "likers", "of", "posts", "authors", "of", "comments", "etc", "NUMBER", "It", "s", "possible", "that", "some", "users", "will", "be", "in", "more", "than", "one", "store", "e", "NUMBER", "g", "NUMBER", "one", "of", "my", "friends", "likes", "one", "of", "my", "posts", "NUMBER", "Does", "it", "make", "sense", "to", "store", "all", "user", "records", "in", "a", "single", "store", "and", "keep", "only", "their", "IDs", "in", "derived", "stores", "to", "avoid", "storing", "copies", "and", "worry", "about", "synchronizing", "them", "across", "stores", "If", "so", "would", "the", "main", "user", "store", "need", "to", "listen", "to", "_all_", "actions", "that", "can", "change", "_any_", "of", "the", "derived", "stores", "or", "be", "there", "some", "other", "way", "to", "update", "it", "when", "one", "of", "the", "derived", "stores", "change", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "Please", "consider", "update", "the", "docs", "and", "examples", "from", "this", "pattern", "javascript", "var", "user", "name", "export", "default", "new", "class", "Store", "extend", "EventEmitter", "NUMBER", "get", "value", "return", "user", "NUMBER", "to", "this", "pattern", "javascript", "get", "value", "return", "Object", "NUMBER", "assign", "user", "More", "information", "here", "LINK", "NUMBER", "As", "noted", "from", "NUMBER", "the", "example", "chat", "application", "contains", "separate", "server", "and", "view", "dispatch", "methods", "which", "provide", "no", "value", "NUMBER", "This", "PR", "remove", "those", "methods", "and", "unuse", "constants", "update", "the", "actions", "and", "update", "the", "store", "callbacks", "NUMBER", "fisherwebdev", "Happy", "to", "help", "I", "ve", "also", "run", "into", "some", "problem", "with", "the", "cannot", "dispatch", "in", "the", "middle", "of", "a", "dispatch", "error", "message", "NUMBER", "My", "use", "case", "be", "as", "follows", "I", "load", "something", "from", "the", "server", "a", "calendar", "object", "the", "dispatcher", "dispatches", "an", "action", "once", "it", "has", "completed", "loading", "UPDATE_CALENDAR", "NUMBER", "Now", "I", "need", "to", "perform", "_another_", "call", "to", "the", "server", "if", "_some", "attributes", "of", "the", "calender", "object", "specify", "a", "certain", "criteria_", "NUMBER", "So", "prefreably", "I", "would", "be", "able", "to", "call", "the", "server", "once", "again", "use", "the", "ActionCreators", "in", "response", "to", "my", "calendar", "object", "but", "the", "problem", "be", "that", "my", "Calendar", "component", "be", "be", "update", "in", "the", "CalendarStore", "s", "dispatch", "token", "callback", "so", "in", "effect", "the", "UPDATE_CALENDAR", "event", "be", "still", "be", "dispatched", "NUMBER", "Is", "there", "a", "way", "to", "chain", "various", "dispatches", "The", "setTimeout", "hack", "works", "but", "feels", "ugh", "NUMBER", "In", "essence", "something", "like", "this", "ActionCreator", "WebAPIUtils", "ServerActionCreators", "Dispatcher", "Store", "callbacks", "add", "new", "dispatch", "to", "be", "executed", "after", "the", "current", "dispatch", "finishes", "Or", "perhaps", "some", "sort", "of", "after", "hook", "If", "this", "be", "unfeasable", "be", "there", "a", "way", "to", "make", "components", "call", "an", "ActionCreator", "without", "user", "interaction", "setTimeout", "Faced", "this", "too", "NUMBER", "You", "can", "return", "_Promise_", "from", "action", "creators", "NUMBER", "This", "looks", "more", "clearer", "than", "_setTimeout_", "For", "example", "a", "complex", "multi", "step", "wizard", "interconnected", "with", "other", "app", "components", "NUMBER", "I", "understand", "this", "be", "a", "very", "general", "question", "without", "context", "NUMBER", "I", "be", "looking", "into", "different", "Flux", "implementations", "Facebook", "s", "Nuclear", "NUMBER", "js", "RiotControl", "and", "trying", "to", "understand", "which", "be", "more", "suitable", "for", "an", "exist", "large", "app", "to", "migrate", "to", "and", "as", "a", "result", "have", "more", "benefits", "than", "issue", "NUMBER", "It", "would", "be", "great", "to", "hear", "from", "the", "community", "if", "someone", "has", "get", "this", "experience", "NUMBER", "Thanks", "in", "advance", "Thanks", "the", "case", "you", "describe", "be", "quite", "obvious", "NUMBER", "But", "the", "complete", "components", "rarely", "consist", "of", "a", "single", "store", "NUMBER", "They", "at", "least", "have", "a", "set", "of", "views", "which", "in", "turn", "have", "a", "set", "of", "styles", "and", "other", "resources", "NUMBER", "They", "could", "also", "have", "dependencies", "on", "other", "stores", "HTTP", "APIs", "etc", "NUMBER", "What", "could", "be", "the", "options", "to", "reuse", "such", "components", "So", "you", "want", "to", "say", "there", "be", "no", "arrchitecture", "pattern", "how", "to", "develop", "Flux", "apps", "to", "make", "their", "parts", "that", "make", "a", "complete", "component", "N", "stores", "M", "views", "dispatcher", "actions", "etc", "reusable", "in", "several", "apps", "be", "I", "right", "Please", "could", "you", "also", "describe", "passing", "a", "dispatcher", "and", "moving", "to", "store", "instances", "in", "more", "detail", "Thanks", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "Is", "it", "just", "me", "or", "be", "the", "name", "ActionCreator", "a", "bit", "clumsy", "and", "also", "slightly", "inaccurate", "considering", "its", "purpose", "in", "the", "Flux", "architecture", "There", "has", "be", "some", "confusion", "circulating", "about", "the", "purpose", "of", "this", "type", "of", "components", "and", "I", "think", "that", "s", "mainly", "because", "of", "its", "name", "NUMBER", "An", "ActionCreator", "be", "responsible", "for", "creating", "an", "Action", "but", "also", "for", "passing", "the", "action", "along", "to", "the", "Dispatcher", "NUMBER", "Now", "the", "name", "of", "the", "component", "do", "not", "encompass", "the", "latter", "responsibility", "NUMBER", "So", "maybe", "ActionCreators", "should", "have", "a", "different", "name", "I", "find", "Actor", "to", "be", "a", "better", "name", "NUMBER", "Not", "just", "be", "it", "an", "easier", "word", "I", "also", "consider", "it", "more", "precise", "NUMBER", "As", "we", "know", "an", "Actor", "be", "someone", "or", "something", "that", "acts", "on", "a", "system", "and", "it", "do", "so", "by", "means", "of", "Actions", "NUMBER", "Also", "an", "Actor", "be", "the", "_origin_", "of", "a", "performed", "Action", "i", "NUMBER", "e", "NUMBER", "Actors", "also", "_create_", "Actions", "NUMBER", "This", "definition", "fits", "in", "nicely", "with", "the", "responsibility", "of", "today", "s", "ActionCreators", "NUMBER", "Conceptually", "the", "coupling", "between", "the", "Actor", "and", "the", "Dispatcher", "be", "also", "pretty", "easy", "to", "explain", "NUMBER", "When", "an", "Actor", "performs", "an", "Action", "on", "a", "system", "it", "do", "so", "by", "way", "of", "a", "channel", "NUMBER", "In", "this", "case", "the", "channel", "be", "the", "Dispatcher", "NUMBER", "So", "what", "do", "you", "guys", "think", "Actors", "or", "ActionCreators", "Or", "maybe", "someone", "else", "has", "a", "better", "suggestion", "Internally", "we", "named", "our", "ActionCreators", "Intents", "for", "the", "same", "reasons", "admittedly", "risking", "confusion", "with", "Android", "Intents", "NUMBER", "I", "would", "agree", "that", "use", "term", "actor", "to", "describe", "action", "creator", "can", "cause", "a", "lot", "of", "confusion", "for", "some", "folks", "NUMBER", "In", "Erlang", "and", "inspired", "platforms", "actors", "be", "the", "core", "build", "block", "with", "very", "strong", "connotations", "NUMBER", "People", "keep", "state", "and", "logic", "inside", "actors", "NUMBER", "Meanwhile", "in", "pre", "Relay", "React", "Flux", "I", "observe", "that", "action", "creators", "tend", "to", "be", "stateless", "and", "simple", "NUMBER", "It", "be", "in", "the", "nature", "of", "people", "to", "try", "to", "find", "patterns", "in", "things", "and", "follow", "them", "NUMBER", "If", "action", "creators", "were", "call", "actors", "a", "lot", "of", "people", "could", "start", "putting", "logic", "and", "state", "in", "them", "NUMBER", "I", "find", "some", "success", "in", "use", "term", "event", "creator", "while", "describing", "action", "creator", "in", "Flux", "to", "the", "folks", "with", "the", "event", "driven", "background", "NUMBER", "Event", "has", "a", "strong", "meaning", "in", "that", "context", "it", "be", "something", "that", "has", "happened", "in", "the", "past", "be", "named", "in", "the", "past", "tense", "UserProfileFetched", "LikeSentToServer", "ServerFailedToHandleLike", "and", "that", "can", "t", "be", "rejected", "by", "the", "subscribers", "since", "you", "can", "t", "change", "the", "past", "in", "that", "it", "differs", "from", "commands", "and", "actions", "which", "can", "be", "rejected", "by", "the", "handler", "or", "fail", "NUMBER", "We", "have", "a", "lot", "of", "intuitive", "knowledge", "about", "the", "events", "and", "the", "past", "e", "NUMBER", "g", "NUMBER", "see", "this", "image", "LINK", "Event", "creator", "was", "accepted", "well", "in", "explanations", "as", "well", "since", "creator", "feels", "like", "a", "factory", "just", "a", "helper", "method", "which", "contains", "the", "bare", "minimum", "of", "logic", "to", "create", "events", "NUMBER", "However", "while", "explaining", "Flux", "in", "these", "terms", "I", "always", "clarify", "that", "all", "original", "documentation", "on", "the", "subject", "refers", "to", "these", "items", "as", "actions", "and", "action", "creators", "NUMBER", "Best", "regards", "Rinat", "_Rinat", "Abdullin_", "Writer", "at", "Abdullin", "NUMBER", "com", "LINK", "On", "Tue", "Feb", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Bill", "Fisher", "notifications", "github", "NUMBER", "com", "write", "Yeah", "the", "name", "be", "probably", "a", "little", "clumsy", "NUMBER", "There", "s", "a", "lot", "of", "information", "out", "in", "the", "world", "now", "about", "action", "creators", "so", "I", "doubt", "we", "want", "to", "create", "more", "confusion", "by", "change", "the", "name", "now", "NUMBER", "The", "history", "here", "be", "that", "we", "use", "to", "call", "the", "FooActionCreators", "module", "just", "simply", "FooActions", "but", "this", "led", "to", "some", "confusion", "the", "methods", "were", "seen", "as", "the", "action", "instead", "of", "the", "object", "they", "create", "and", "pass", "to", "the", "dispatcher", "NUMBER", "In", "the", "summer", "of", "NUMBER", "Jing", "Chen", "and", "I", "were", "putting", "together", "a", "presentation", "for", "ForwardJS", "LINK", "react", "and", "flux", "build", "applications", "with", "a", "unidirectional", "data", "flow", "forward", "js", "NUMBER", "and", "we", "wanted", "to", "dispel", "this", "confusion", "NUMBER", "We", "came", "up", "with", "ActionCreator", "a", "day", "or", "two", "before", "the", "conference", "NUMBER", "Now", "we", "re", "a", "bit", "stuck", "with", "it", "NUMBER", "I", "ll", "think", "about", "it", "though", "NUMBER", "Thanks", "for", "bringing", "it", "up", "NUMBER", "I", "think", "Actor", "or", "Intent", "be", "a", "fine", "name", "for", "these", "methods", "and", "I", "encourage", "you", "to", "do", "what", "you", "think", "be", "best", "for", "your", "teams", "NUMBER", "There", "be", "connotations", "to", "both", "that", "I", "might", "quibble", "with", "however", "NUMBER", "Actor", "tends", "to", "be", "something", "with", "agency", "which", "these", "methods", "do", "not", "really", "have", "NUMBER", "Intent", "leans", "toward", "thinking", "of", "the", "methods", "like", "setters", "and", "this", "be", "an", "easy", "trap", "to", "fall", "into", "NUMBER", "The", "actions", "be", "report", "on", "something", "that", "happened", "in", "the", "real", "world", "the", "user", "clicked", "the", "server", "responded", "etc", "and", "the", "Flux", "stores", "need", "to", "respond", "to", "this", "real", "world", "change", "NUMBER", "Intent", "implies", "that", "the", "server", "intends", "for", "something", "to", "happen", "in", "the", "client", "side", "application", "which", "be", "not", "really", "true", "it", "s", "the", "store", "that", "needs", "listen", "to", "actions", "and", "respond", "NUMBER", "The", "actions", "be", "more", "like", "a", "newspaper", "report", "on", "the", "real", "world", "NUMBER", "Thinking", "more", "in", "these", "terms", "I", "ve", "switched", "to", "naming", "all", "my", "action", "types", "in", "the", "past", "tense", "NUMBER", "See", "also", "this", "conversation", "I", "had", "with", "abdullin", "LINK", "who", "be", "the", "person", "who", "first", "emphasized", "this", "past", "quality", "of", "actions", "NUMBER", "LINK", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "Thanks", "for", "the", "lively", "discussion", "NUMBER", "I", "m", "learning", "a", "lot", "from", "you", "guys", "NUMBER", "I", "agree", "with", "fisherwebdev", "that", "neither", "Intent", "nor", "Actor", "fully", "captures", "the", "purpose", "of", "ActionCreators", "NUMBER", "Using", "the", "past", "tense", "in", "the", "action", "name", "be", "a", "fantastic", "suggestion", "NUMBER", "Sometimes", "I", "get", "asked", "if", "it", "s", "possible", "to", "prevent", "an", "action", "by", "returning", "false", "which", "indicates", "the", "confusion", "that", "an", "ActionCreator", "might", "be", "like", "an", "ordinary", "event", "handler", "and", "this", "naming", "convention", "might", "prevent", "that", "mistake", "NUMBER", "Call", "them", "simply", "actions", "NUMBER", "When", "a", "component", "needs", "to", "perform", "a", "particular", "task", "it", "executes", "the", "relevant", "action", "NUMBER", "That", "action", "code", "could", "perform", "a", "server", "side", "call", "or", "two", "and", "dispatch", "out", "events", "in", "past", "tense", "informing", "the", "rest", "of", "the", "system", "of", "what", "just", "occur", "NUMBER", "So", "it", "comes", "down", "to", "just", "two", "terms", "then", "actions", "that", "could", "be", "performed", "and", "events", "that", "occur", "NUMBER", "One", "of", "the", "reasons", "we", "chose", "the", "name", "Intents", "be", "that", "conceptually", "an", "actor", "has", "the", "intent", "to", "do", "something", "but", "the", "actual", "behavior", "of", "the", "flux", "system", "as", "a", "result", "of", "that", "intent", "be", "unknown", "by", "the", "actor", "NUMBER", "For", "example", "you", "have", "the", "intent", "to", "fetch", "new", "ToDo", "data", "from", "the", "server", "NUMBER", "javascript", "pseudocode", "ToDoIntents", "NUMBER", "refreshFromServer", "function", "asynchronously", "try", "to", "fetch", "the", "data", "meanwhile", "NUMBER", "dispatch", "Constants", "NUMBER", "TODO_REFRESH_ATTEMPTED", "past", "tense", "later", "on", "response", "from", "server", "NUMBER", "dispatch", "Constants", "NUMBER", "TODO_REFRESH_SUCCEEDED", "or", "FAILED", "also", "past", "tense", "Types", "of", "actor", "could", "include", "humans", "time", "network", "conditions", "or", "external", "systems", "NUMBER", "An", "actor", "could", "be", "a", "human", "clicking", "a", "refresh", "button", "manually", "log", "out", "or", "it", "could", "be", "time", "refresh", "every", "n", "mins", "session", "expired", "NUMBER", "p", "NUMBER", "s", "NUMBER", "fisherwebdev", "thanks", "for", "the", "detailed", "discussion", "p", "NUMBER", "p", "NUMBER", "s", "also", "use", "past", "tense", "for", "the", "action", "names", "be", "a", "great", "idea", "NUMBER", "Again", "we", "made", "a", "little", "naming", "tweak", "here", "and", "call", "the", "actions", "message", "NUMBER", "Because", "action", "implied", "intent", "to", "do", "something", "but", "really", "it", "be", "a", "message", "that", "something", "already", "happened", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "Amended", "various", "file", "copyright", "dates", "to", "update", "the", "language", "for", "the", "year", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Dear", "core", "team", "Could", "you", "make", "invariant", "as", "a", "standalone", "dependency", "or", "as", "least", "export", "it", "as", "require", "flux", "NUMBER", "invariant", "to", "allow", "other", "users", "use", "it", "in", "their", "code", "NUMBER", "For", "example", "i", "m", "developing", "library", "which", "use", "your", "flux", "dispatcher", "as", "an", "underlying", "layer", "for", "my", "own", "dispatcher", "NUMBER", "So", "i", "d", "like", "to", "use", "your", "assert", "mechanism", "in", "my", "code", "too", "NUMBER", "Now", "i", "m", "use", "javascript", "var", "invariant", "require", "flux", "lib", "invariant", "but", "not", "sure", "it", "s", "a", "best", "idea", "NUMBER", "fisherwebdev", "Oh", "I", "didn", "t", "know", "this", "NUMBER", "zpao", "Let", "me", "know", "if", "you", "guys", "want", "to", "own", "this", "LINK", "or", "if", "it", "s", "fine", "like", "that", "I", "understand", "that", "Facebook", "has", "release", "Jest", "for", "test", "Flux", "and", "React", "applications", "NUMBER", "From", "my", "understanding", "Jest", "runs", "the", "unit", "test", "in", "a", "node", "based", "environment", "which", "be", "ideal", "when", "you", "want", "to", "make", "sure", "your", "code", "works", "in", "isomorphic", "situations", "so", "it", "can", "be", "rendered", "on", "a", "server", "NUMBER", "I", "don", "t", "have", "the", "requirement", "for", "server", "rendered", "react", "and", "do", "have", "a", "lot", "of", "browser", "code", "that", "I", "want", "to", "interact", "with", "via", "flux", "react", "and", "I", "m", "trying", "to", "figure", "out", "good", "ways", "to", "accomplish", "this", "NUMBER", "Do", "you", "guys", "have", "any", "recommendations", "of", "approaches", "The", "main", "issue", "I", "have", "be", "be", "able", "to", "get", "a", "single", "store", "s", "register", "call", "to", "the", "dispatcher", "since", "I", "won", "t", "be", "able", "to", "use", "Jest", "and", "its", "beautiful", "mock", "all", "by", "default", "implementation", "which", "keep", "other", "stores", "from", "registering", "NUMBER", "What", "be", "some", "good", "approaches", "people", "have", "taken", "towards", "this", "problem", "Thanks", "for", "that", "fisherwebdev", "NUMBER", "That", "gives", "me", "some", "good", "direction", "for", "the", "question", "we", "talked", "about", "a", "while", "back", "and", "I", "should", "definitely", "take", "that", "conversation", "deeper", "on", "the", "Jest", "repo", "NUMBER", "In", "this", "case", "I", "was", "wondering", "if", "you", "guys", "have", "seen", "or", "have", "any", "suggestions", "for", "test", "a", "Flux", "app", "in", "one", "of", "the", "other", "classic", "test", "frameworks", "mocha", "jasmine", "qunit", "etc", "but", "still", "be", "able", "to", "get", "a", "reference", "to", "the", "specific", "store", "under", "test", "s", "dispatcher", "callback", "without", "it", "be", "muddled", "by", "the", "other", "store", "s", "in", "your", "app", "registering", "themselves", "to", "the", "dispatcher", "NUMBER", "fisherwebdev", "FYI", "Node", "NUMBER", "and", "iojs", "both", "have", "native", "promises", "though", "bluebird", "can", "usually", "be", "faster", "NUMBER", "In", "General", "iojs", "will", "be", "in", "close", "lockstep", "with", "V", "NUMBER", "in", "terms", "of", "JavaScript", "features", "NUMBER", "Ooh", "good", "to", "know", "NUMBER", "Lets", "ignore", "Promises", "for", "now", "though", "that", "seems", "to", "be", "distracting", "from", "the", "actual", "issue", "NUMBER", "Perhaps", "a", "better", "example", "be", "that", "we", "be", "add", "some", "react", "flux", "examples", "to", "a", "large", "non", "react", "non", "flux", "code", "base", "that", "has", "a", "lot", "of", "other", "DOM", "manipulation", "stuff", "NUMBER", "We", "don", "t", "want", "to", "split", "out", "into", "two", "different", "test", "frameworks", "so", "we", "be", "required", "to", "test", "in", "the", "browser", "with", "everything", "else", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Merge", "the", "two", "sentences", "together", "into", "one", "concise", "instruction", "NUMBER", "From", "Clone", "the", "repo", "and", "navigate", "into", "the", "resulting", "flux", "directory", "NUMBER", "Then", "run", "npm", "install", "NUMBER", "To", "Clone", "the", "repo", "and", "navigate", "into", "the", "resulting", "flux", "directory", "then", "run", "npm", "install", "NUMBER", "This", "only", "makes", "change", "to", "the", "README", "NUMBER", "md", "and", "do", "not", "break", "Flux", "in", "any", "way", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "fisherwebdev", "Understandable", "that", "it", "s", "a", "trivial", "commit", "but", "Then", "run", "npm", "install", "be", "a", "fragmented", "sentence", "NUMBER", "We", "can", "_still_", "convey", "the", "message", "of", "it", "be", "two", "steps", "by", "simply", "joining", "it", "with", "a", "comma", "NUMBER", "Purdue", "NUMBER", "edu", "LINK", "state", "that", "fragment", "be", "pieces", "of", "sentences", "that", "have", "become", "disconnected", "from", "the", "main", "clause", "NUMBER", "which", "be", "exactly", "the", "case", "we", "have", "here", "NUMBER", "Fix", "a", "typo", "fisherwebdev", "Wow", "NUMBER", "actually", "I", "didn", "t", "know", "broadcast", "can", "be", "use", "as", "an", "irregular", "verb", "NUMBER", "I", "still", "prefer", "the", "regular", "one", "but", "since", "it", "s", "an", "acceptable", "usage", "I", "d", "say", "it", "s", "your", "call", "NUMBER", "MessageStore", "be", "imported", "but", "never", "use", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "facebook", "github", "bot", "do", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Status", "Opened", "for", "discussion", "Reviewers", "_None", "yet_", "Notes", "After", "having", "weighed", "the", "options", "I", "felt", "like", "this", "deserved", "some", "exploration", "NUMBER", "The", "demos", "be", "use", "global", "CSS", "which", "kind", "of", "goes", "away", "from", "the", "same", "idea", "for", "proposing", "HTML", "in", "JS", "NUMBER", "Then", "there", "s", "some", "which", "seem", "to", "be", "compile", "and", "injecting", "style", "tags", "on", "a", "per", "component", "basis", "or", "something", "seems", "like", "Instagram", "NUMBER", "That", "s", "where", "vjeux", "comes", "in", "with", "inline", "styles", "NUMBER", "Which", "generally", "I", "like", "because", "we", "have", "interoperability", "with", "other", "interfaces", "React", "Native", "now", "maybe", "games", "or", "wearables", "in", "the", "future", "Unreal", "Engine", "Hololens", "NUMBER", "Whichever", "way", "Facebook", "moves", "I", "feel", "like", "there", "s", "going", "to", "be", "a", "demand", "for", "some", "sort", "of", "utility", "library", "around", "styling", "NUMBER", "Things", "like", "vendor", "prefixing", "validating", "properties", "and", "generally", "just", "make", "it", "easier", "to", "style", "NUMBER", "If", "we", "have", "a", "system", "around", "something", "that", "s", "already", "quite", "mainstream", "like", "LESS", "it", "should", "be", "easier", "to", "adopt", "NUMBER", "While", "this", "system", "may", "not", "be", "as", "fast", "as", "straight", "style", "objects", "it", "still", "compiles", "down", "into", "the", "same", "thing", "NUMBER", "I", "m", "not", "sure", "the", "performance", "be", "going", "to", "be", "_noticeably_", "impacted", "NUMBER", "It", "needs", "to", "be", "explored", "as", "I", "know", "UI", "performance", "be", "one", "of", "the", "goal", "of", "React", "people", "NUMBER", "I", "d", "love", "to", "explore", "this", "some", "more", "with", "somebody", "I", "did", "try", "transforming", "the", "string", "into", "an", "AST", "in", "place", "LINK", "stylify", "but", "it", "was", "too", "large", "and", "required", "some", "work", "hooking", "up", "the", "right", "classes", "NUMBER", "Similar", "to", "GraphQL", "I", "gather", "NUMBER", "LINK", "how", "be", "graphql", "syntax", "different", "from", "jsx", "There", "be", "actually", "some", "additional", "magic", "going", "on", "here", "our", "transform", "pipeline", "actually", "embeds", "the", "AST", "directly", "as", "JavaScript", "objects", "in", "place", "of", "the", "template", "but", "generally", "developers", "won", "t", "need", "to", "worry", "about", "that", "at", "all", "NUMBER", "TODO", "Clean", "up", "LESS", "actually", "just", "CSS", "right", "now", "haven", "t", "converted", "to", "take", "advantage", "of", "LESS", "yet", "Style", "attributes", "should", "be", "optimized", "stop", "returning", "NUMBER", "attributes", "for", "each", "border", "NUMBER", "Helper", "so", "we", "can", "just", "go", "styles", "NUMBER", "find", "todo", "list", "li", "NUMBER", "edit", "and", "it", "ll", "return", "all", "rules", "that", "match", "that", "selector", "including", "todo", "list", "li", "NUMBER", "edit", "todo", "list", "li", "and", "li", "NUMBER", "Changes", "Moved", "the", "global", "CSS", "into", "each", "relevant", "component", "NUMBER", "Added", "NUMBER", "to", "NUMBER", "ify", "so", "we", "can", "use", "new", "strings", "for", "CSS", "LESS", "NUMBER", "Added", "LESS", "so", "we", "can", "parse", "the", "string", "into", "an", "AST", "tree", "NUMBER", "Added", "JSCSSP", "so", "we", "can", "parse", "the", "resulting", "CSS", "from", "the", "AST", "tree", "into", "style", "rules", "without", "the", "browser", "NUMBER", "How", "to", "test", "Start", "the", "demo", "with", "npm", "start", "after", "npm", "install", "and", "you", "should", "see", "something", "like", "this", "preview", "LINK", "NUMBER", "png", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "npm", "WARN", "package", "NUMBER", "json", "jsxc", "NUMBER", "No", "repository", "field", "NUMBER", "npm", "WARN", "prefer", "global", "jsxc", "NUMBER", "should", "be", "install", "with", "g", "npm", "ERR", "Darwin", "NUMBER", "npm", "ERR", "argv", "node", "usr", "local", "bin", "npm", "install", "npm", "ERR", "node", "v", "NUMBER", "npm", "ERR", "npm", "v", "NUMBER", "npm", "ERR", "code", "EPEERINVALID", "npm", "ERR", "peerinvalid", "The", "package", "envify", "do", "not", "satisfy", "its", "siblings", "peerDependencies", "requirements", "npm", "ERR", "Please", "include", "the", "following", "file", "with", "any", "support", "request", "npm", "ERR", "react", "boilerplate", "npm", "debug", "NUMBER", "log", "Added", "a", "quick", "link", "to", "the", "dispatcher", "API", "and", "examples", "on", "the", "flux", "docs", "from", "the", "dispatcher", "section", "of", "the", "README", "NUMBER", "md", "NUMBER", "This", "will", "make", "it", "easy", "for", "those", "interested", "to", "see", "how", "the", "dispatcher", "can", "be", "use", "NUMBER", "No", "problem", "happy", "to", "help", "any", "way", "I", "can", "It", "looks", "like", "there", "be", "some", "code", "to", "prevent", "nested", "dispatch", "and", "some", "cycle", "detection", "logic", "in", "LINK", "However", "it", "looks", "like", "that", "defense", "can", "be", "subverted", "by", "combining", "waitFor", "with", "named", "function", "expressions", "NUMBER", "JavaScript", "dispatcher", "NUMBER", "register", "function", "handler", "var", "tok", "dispatcher", "NUMBER", "register", "handler", "appends", "a", "new", "handler", "to", "_callbacks", "increments", "id", "dispatcher", "NUMBER", "waitFor", "tok", "directly", "invokes", "the", "new", "handler", "without", "a", "base", "case", "this", "doesn", "t", "terminate", "stack", "overflow", "dispatcher", "NUMBER", "dispatch", "This", "contrived", "example", "reveals", "a", "couple", "of", "problem", "NUMBER", "First", "_callbacks", "be", "not", "locked", "for", "update", "during", "the", "scope", "of", "a", "dispatch", "operation", "NUMBER", "Second", "the", "way", "dependencies", "be", "expressed", "use", "this", "API", "be", "open", "to", "confusion", "and", "error", "NUMBER", "A", "quick", "fix", "might", "be", "to", "assert", "invariant", "_isDispatching", "within", "register", "and", "unregister", "but", "consider", "redesigning", "the", "register", "function", "to", "accept", "an", "array", "of", "tokens", "as", "a", "parameter", "NUMBER", "Then", "you", "could", "resolve", "a", "proper", "dependency", "graph", "NUMBER", "See", "RequireJS", "for", "an", "example", "of", "this", "sort", "of", "API", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "fix", "just", "linked", "to", "what", "I", "believe", "it", "was", "referencing", "LINK", "simple", "f", "NUMBER", "diagram", "NUMBER", "w", "NUMBER", "png", "or", "just", "website", "src", "flux", "img", "flux", "simple", "f", "NUMBER", "diagram", "NUMBER", "w", "NUMBER", "png", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "I", "believe", "the", "standard", "across", "Facebook", "projects", "be", "now", "to", "use", "object", "assign", "rather", "than", "react", "lib", "merge", "NUMBER", "Hello", "guys", "React", "Korea", "LINK", "volunteers", "be", "currently", "translating", "React", "docs", "into", "Korean", "NUMBER", "But", "we", "would", "like", "to", "translate", "Flux", "docs", "as", "well", "NUMBER", "What", "do", "you", "guys", "think", "If", "that", "s", "possible", "then", "people", "from", "LINK", "china", "NUMBER", "org", "would", "be", "interested", "in", "a", "Chinese", "translation", "too", "Everything", "s", "possible", "Nice", "I", "ll", "try", "to", "translate", "docs", "to", "Russian", "NUMBER", "How", "it", "should", "be", "organized", "Just", "ru", "folder", "in", "the", "docs", "Kureev", "We", "be", "currently", "doing", "like", "this", "LINK", "for", "React", "docs", "translation", "just", "modifying", "link", "and", "filenames", "I", "think", "it", "be", "Jekyll", "style", "i", "NUMBER", "n", "but", "have", "not", "do", "detailed", "research", "on", "it", "sairion", "how", "do", "you", "view", "the", "korean", "version", "on", "the", "website", "vjeux", "Since", "I", "m", "no", "Jekyll", "nor", "GH", "pages", "expert", "only", "thing", "I", "can", "say", "currently", "be", "only", "by", "manually", "change", "url", "like", "this", "LINK", "react", "zh", "CN", "NUMBER", "html", "But", "I", "think", "there", "can", "be", "much", "better", "way", "to", "do", "it", "NUMBER", "I", "will", "investigate", "further", "Oh", "okay", "this", "be", "easy", "enough", "If", "you", "start", "translating", "the", "articles", "i", "ll", "make", "sure", "to", "support", "those", "on", "the", "website", "jsgeeker", "be", "work", "on", "a", "Chinese", "one", "mainly", "on", "React", "LINK", "cn", "react", "docs", "commit", "master", "fisherwebdev", "We", "ve", "just", "finished", "React", "docs", "translation", "and", "will", "work", "on", "Flux", "docs", "next", "NUMBER", "Great", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "Hi", "sairion", "I", "just", "add", "a", "new", "page", "of", "docs", "at", "LINK", "utils", "NUMBER", "html", "content", "pinging", "this", "issue", "so", "you", "be", "aware", "in", "case", "you", "be", "able", "to", "help", "get", "it", "translated", "I", "heard", "flux", "utils", "was", "add", "but", "haven", "t", "looked", "it", "yet", "thanks", "for", "sharing", "NUMBER", "By", "the", "way", "anyone", "work", "on", "Flux", "repo", "saw", "LINK", "I", "think", "it", "would", "be", "great", "if", "React", "relate", "FB", "docs", "websites", "take", "same", "approach", "on", "i", "NUMBER", "n", "ing", "just", "letting", "you", "know", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "I", "grabbed", "the", "image", "from", "the", "relate", "blog", "post", "LINK", "actions", "and", "the", "dispatcher", "NUMBER", "html", "assuming", "this", "be", "correct", "apologies", "if", "not", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "No", "problem", "NUMBER", "The", "image", "update", "was", "more", "due", "to", "it", "be", "a", "broken", "link", "rather", "than", "suggesting", "a", "different", "one", "looks", "like", "I", "pick", "the", "wrong", "image", "NUMBER", "Seems", "like", "NUMBER", "solves", "this", "issue", "so", "I", "ll", "close", "this", "NUMBER", "This", "be", "seemingly", "relate", "to", "all", "of", "those", "Cannot", "dispatch", "in", "the", "middle", "of", "a", "dispatch", "issue", "but", "I", "ve", "narrowed", "it", "down", "to", "a", "store", "listener", "be", "triggered", "_before_", "the", "dispatcher", "s", "finished", "up", "NUMBER", "Should", "that", "ever", "happen", "I", "can", "use", "the", "setTimeout", "hack", "or", "the", "queue", "suggested", "in", "NUMBER", "but", "it", "doesn", "t", "feel", "right", "NUMBER", "In", "my", "setup", "I", "have", "a", "login", "component", "with", "the", "following", "listener", "js", "onAuthStoreChange", "function", "if", "AuthStore", "NUMBER", "userIsAuthenticated", "true", "this", "NUMBER", "transitionTo", "people", "Now", "when", "that", "gets", "fired", "I", "kind", "of", "expect", "the", "dispatcher", "to", "be", "finished", "dispatching", "NUMBER", "but", "it", "s", "not", "NUMBER", "So", "then", "when", "I", "transition", "to", "a", "new", "route", "and", "new", "actions", "be", "created", "there", "be", "obviously", "problem", "NUMBER", "Is", "there", "any", "way", "to", "get", "listeners", "to", "only", "be", "triggered", "once", "the", "dispatcher", "s", "do", "Just", "to", "be", "clear", "all", "of", "my", "actions", "be", "be", "created", "in", "the", "same", "place", "with", "action", "creators", "and", "this", "isn", "t", "a", "case", "of", "actions", "creating", "actions", "etc", "NUMBER", "p", "NUMBER", "s", "NUMBER", "Hope", "everyone", "s", "having", "fun", "at", "the", "conf", "I", "think", "this", "be", "expected", "NUMBER", "The", "stores", "dispatcher", "registered", "listeners", "be", "call", "sequentially", "on", "a", "trampoline", "of", "sorts", "so", "the", "dispatch", "function", "call", "isn", "t", "popped", "off", "the", "stack", "until", "all", "of", "the", "stores", "s", "callbacks", "have", "returned", "then", "dispatch", "returns", "NUMBER", "Your", "store", "be", "likely", "firing", "it", "s", "change", "event", "in", "the", "same", "execution", "context", "so", "onAuthStoreChange", "be", "call", "while", "the", "function", "call", "to", "dispatch", "be", "still", "sitting", "on", "the", "stack", "waiting", "to", "return", "NUMBER", "Afaik", "the", "only", "thing", "you", "re", "guaranteed", "be", "that", "any", "required", "browser", "repaint", "won", "t", "happen", "until", "after", "the", "call", "to", "dispatch", "returns", "and", "that", "that", "browser", "repaint", "will", "include", "all", "update", "to", "reflect", "the", "singular", "point", "in", "time", "state", "that", "exists", "after", "the", "last", "dispatch", "NUMBER", "I", "encounter", "similar", "error", "NUMBER", "Error", "Invariant", "Violation", "Dispatch", "NUMBER", "dispatch", "NUMBER", "Cannot", "dispatch", "in", "the", "middle", "of", "a", "dispatch", "I", "get", "this", "error", "when", "I", "tried", "to", "start", "another", "dispatch", "in", "a", "listener", "that", "be", "triggered", "by", "emitChange", "of", "a", "Store", "NUMBER", "I", "can", "workaround", "this", "by", "below", "two", "approaches", "but", "both", "look", "like", "a", "hack", "NUMBER", "Invoke", "listener", "method", "by", "setTimeout", "NUMBER", "Make", "the", "emit", "async", "use", "setTimeout", "as", "well", "emitChange", "function", "var", "self", "this", "window", "NUMBER", "setTimeout", "function", "self", "NUMBER", "emit", "CHANGE_EVENT", "NUMBER", "So", "my", "question", "be", "that", "when", "a", "dispatch", "should", "be", "treated", "as", "do", "completed", "after", "the", "executions", "of", "all", "listeners", "on", "a", "Store", "or", "not", "care", "the", "execution", "of", "the", "listener", "in", "which", "case", "I", "think", "we", "should", "make", "the", "emit", "async", "fisherwebdev", "how", "do", "you", "guys", "feel", "about", "serial", "dispatches", "inside", "some", "Actioncreator", "NUMBER", "action", "I", "NUMBER", "e", "dispatcher", "NUMBER", "dispatch", "dispatcher", "NUMBER", "dispatch", "Is", "this", "ok", "or", "better", "to", "merge", "into", "a", "single", "action", "type", "Sent", "from", "my", "iPhone", "On", "Apr", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Bill", "Fisher", "notifications", "github", "NUMBER", "com", "write", "That", "s", "a", "hack", "that", "should", "be", "avoided", "NUMBER", "Dispatch", "within", "a", "dispatch", "error", "be", "cause", "by", "improper", "code", "design", "NUMBER", "of", "the", "time", "NUMBER", "Instead", "of", "doing", "the", "setTimeout", "do", "what", "you", "need", "to", "do", "in", "response", "to", "the", "original", "action", "NUMBER", "I", "think", "this", "be", "most", "often", "a", "reflection", "of", "equating", "actions", "with", "setters", "they", "be", "not", "the", "same", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "sterpe", "that", "s", "an", "interesting", "question", "NUMBER", "Do", "you", "have", "a", "real", "example", "I", "guess", "you", "should", "fire", "only", "one", "action", "which", "describes", "in", "whole", "what", "happened", "and", "stores", "should", "react", "to", "that", "single", "change", "NUMBER", "I", "want", "to", "know", "what", "fisherwebdev", "has", "to", "say", "anyway", "NUMBER", "Say", "WebAPIUtils", "do", "something", "like", "ContactsApiGetsResponse", "NUMBER", "en", "f", "x", "inform", "spinner", "status", "store", "or", "whatever", "emit", "change", "dispatcher", "NUMBER", "dispatch", "actiontype", "response", "succes", "data", "null", "store", "should", "load", "this", "new", "data", "and", "emit", "change", "dispatcher", "NUMBER", "dispatch", "actiontype", "load", "API", "data", "into", "relevant", "store", "data", "x", "NUMBER", "responsedata", "Sent", "from", "my", "iPhone", "On", "Apr", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Luis", "Herranz", "notifications", "github", "NUMBER", "com", "write", "sterpe", "that", "s", "an", "interesting", "question", "NUMBER", "Do", "you", "have", "a", "real", "example", "I", "guess", "you", "should", "fire", "only", "one", "action", "which", "describes", "in", "whole", "what", "happened", "and", "stores", "should", "react", "to", "that", "single", "change", "NUMBER", "I", "want", "to", "know", "what", "fisherwebdev", "has", "to", "say", "anyway", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "In", "that", "case", "I", "think", "the", "store", "which", "be", "interested", "on", "that", "data", "should", "listen", "to", "the", "response", "success", "event", "NUMBER", "Point", "be", "that", "the", "spinner", "store", "be", "really", "only", "a", "Boolean", "toggle", "and", "seems", "like", "it", "shouldn", "t", "need", "cases", "for", "every", "API", "actiontype", "just", "a", "generic", "request", "start", "request", "ended", "put", "up", "and", "pull", "down", "the", "spinner", "modal", "Sent", "from", "my", "iPhone", "On", "Apr", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "srterpe", "gmail", "NUMBER", "com", "write", "Say", "WebAPIUtils", "do", "something", "like", "ContactsApiGetsResponse", "NUMBER", "en", "f", "x", "inform", "spinner", "status", "store", "or", "whatever", "emit", "change", "dispatcher", "NUMBER", "dispatch", "actiontype", "response", "succes", "data", "null", "store", "should", "load", "this", "new", "data", "and", "emit", "change", "dispatcher", "NUMBER", "dispatch", "actiontype", "load", "API", "data", "into", "relevant", "store", "data", "x", "NUMBER", "responsedata", "Sent", "from", "my", "iPhone", "On", "Apr", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Luis", "Herranz", "notifications", "github", "NUMBER", "com", "write", "sterpe", "that", "s", "an", "interesting", "question", "NUMBER", "Do", "you", "have", "a", "real", "example", "I", "guess", "you", "should", "fire", "only", "one", "action", "which", "describes", "in", "whole", "what", "happened", "and", "stores", "should", "react", "to", "that", "single", "change", "NUMBER", "I", "want", "to", "know", "what", "fisherwebdev", "has", "to", "say", "anyway", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "As", "fisherwebdev", "has", "said", "above", "you", "shouldn", "t", "confuse", "actions", "with", "setters", "NUMBER", "Maybe", "you", "can", "do", "a", "regex", "of", "the", "actionType", "and", "check", "if", "it", "has", "API", "and", "success", "in", "it", "or", "something", "like", "that", "NUMBER", "LuisHerranz", "In", "this", "case", "I", "don", "t", "feel", "like", "there", "s", "a", "confusion", "of", "setters", "and", "actions", "though", "I", "can", "stand", "to", "be", "correct", "NUMBER", "When", "my", "data", "store", "receives", "new", "items", "that", "be", "a", "server", "initiated", "action", "load", "these", "new", "items", "into", "the", "store", "and", "by", "extension", "dependent", "stores", "through", "waitFor", "on", "same", "action", "and", "component", "views", "respond", "to", "the", "emitted", "change", "NUMBER", "Otherwise", "it", "seems", "like", "you", "re", "proposing", "calling", "the", "store", "NUMBER", "loadItems", "method", "directly", "from", "say", "WebAPIUtils", "skipping", "the", "dispatcher", "entirely", "and", "then", "force", "emitting", "a", "change", "event", "so", "dependent", "views", "would", "rerender", "NUMBER", "I", "m", "not", "sure", "how", "you", "see", "a", "store", "hierarchy", "work", "in", "that", "case", "In", "my", "particular", "case", "I", "must", "float", "a", "div", "at", "top", "of", "page", "on", "every", "CRUD", "action", "indicating", "that", "the", "change", "were", "saved", "or", "conversely", "not", "saved", "NUMBER", "This", "component", "and", "it", "s", "store", "doesn", "t", "particularly", "care", "about", "the", "details", "of", "any", "particular", "api", "request", "WebAPIUtils", "makes", "behalf", "of", "a", "particular", "data", "store", "that", "the", "user", "be", "manipulating", "NUMBER", "So", "not", "sure", "if", "it", "makes", "sense", "for", "this", "component", "to", "be", "aware", "of", "the", "unique", "actions", "that", "be", "relevant", "to", "unique", "stores", "when", "WebAPIUtils", "makes", "request", "NUMBER", "LuisHerranz", "I", "don", "t", "know", "NUMBER", "I", "can", "t", "buy", "into", "regexing", "actionType", "strings", "that", "seems", "potentially", "very", "brittle", "NUMBER", "What", "I", "mean", "by", "confusing", "setters", "and", "actions", "be", "that", "you", "shouldn", "t", "name", "your", "actions", "like", "this", "actiontype", "load", "API", "data", "into", "relevant", "store", "You", "should", "name", "them", "like", "actiontype", "relevant", "data", "received", "and", "the", "relevant", "store", "which", "be", "interested", "in", "that", "data", "should", "be", "listening", "to", "that", "action", "NUMBER", "Perhaps", "but", "that", "s", "a", "semantic", "issue", "in", "action", "naming", "I", "feel", "like", "the", "heart", "be", "the", "question", "of", "what", "point", "you", "collapse", "actions", "together", "vs", "perform", "sequential", "dispatches", "b", "c", "say", "a", "certain", "component", "needs", "to", "respond", "to", "a", "multitude", "of", "different", "actions", "but", "in", "some", "sense", "doesn", "t", "need", "to", "be", "aware", "of", "them", "NUMBER", "Sent", "from", "my", "iPhone", "On", "Apr", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Luis", "Herranz", "notifications", "github", "NUMBER", "com", "write", "What", "I", "mean", "by", "confusing", "setters", "and", "actions", "be", "that", "you", "shouldn", "t", "name", "your", "actions", "like", "this", "actiontype", "load", "API", "data", "into", "relevant", "store", "You", "should", "name", "them", "like", "actiontype", "relevant", "data", "received", "and", "the", "relevant", "store", "which", "be", "interested", "in", "that", "data", "should", "be", "listening", "to", "that", "action", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "component", "should", "be", "store", "Sent", "from", "my", "iPhone", "On", "Apr", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "srterpe", "gmail", "NUMBER", "com", "write", "Perhaps", "but", "that", "s", "a", "semantic", "issue", "in", "action", "naming", "I", "feel", "like", "the", "heart", "be", "the", "question", "of", "what", "point", "you", "collapse", "actions", "together", "vs", "perform", "sequential", "dispatches", "b", "c", "say", "a", "certain", "component", "needs", "to", "respond", "to", "a", "multitude", "of", "different", "actions", "but", "in", "some", "sense", "doesn", "t", "need", "to", "be", "aware", "of", "them", "NUMBER", "Sent", "from", "my", "iPhone", "On", "Apr", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Luis", "Herranz", "notifications", "github", "NUMBER", "com", "write", "What", "I", "mean", "by", "confusing", "setters", "and", "actions", "be", "that", "you", "shouldn", "t", "name", "your", "actions", "like", "this", "actiontype", "load", "API", "data", "into", "relevant", "store", "You", "should", "name", "them", "like", "actiontype", "relevant", "data", "received", "and", "the", "relevant", "store", "which", "be", "interested", "in", "that", "data", "should", "be", "listening", "to", "that", "action", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "fisherwebdev", "There", "be", "another", "problem", "with", "firing", "emitChange", "in", "the", "middle", "of", "dispatch", "process", "your", "app", "may", "receive", "inconsistent", "state", "from", "stores", "NUMBER", "Consider", "simple", "example", "Component", "depends", "on", "stores", "A", "B", "NUMBER", "Store", "B", "waitsFor", "store", "A", "NUMBER", "When", "store", "A", "receives", "action", "and", "do", "emitChange", "store", "B", "hasn", "t", "do", "yet", "NUMBER", "Your", "component", "try", "to", "update", "and", "recieves", "new", "state", "from", "store", "A", "but", "old", "state", "from", "store", "B", "NUMBER", "I", "faced", "with", "this", "issue", "with", "item", "list", "stores", "but", "pretty", "sure", "there", "might", "be", "other", "scenarios", "as", "well", "NUMBER", "The", "only", "good", "way", "to", "solve", "this", "be", "to", "emitChange", "after", "all", "stores", "be", "do", "mutating", "NUMBER", "But", "there", "be", "no", "such", "option", "in", "Dispatcher", "yet", "NUMBER", "So", "what", "else", "can", "you", "do", "except", "setTimeout", "emitChange", "NUMBER", "at", "this", "point", "vladar", "There", "be", "a", "couple", "of", "different", "strategies", "to", "solving", "this", "problem", "NUMBER", "We", "believe", "we", "have", "a", "good", "solution", "and", "hope", "to", "open", "source", "it", "soon", "NUMBER", "But", "it", "s", "not", "the", "only", "solution", "NUMBER", "Options", "NUMBER", "Debounce", "the", "change", "events", "in", "the", "React", "components", "NUMBER", "We", "currently", "think", "this", "be", "the", "best", "solution", "NUMBER", "NUMBER", "Modify", "the", "dispatcher", "to", "call", "another", "set", "of", "callbacks", "at", "the", "end", "of", "the", "dispatch", "cycle", "NUMBER", "We", "went", "pretty", "far", "down", "this", "road", "but", "in", "the", "end", "it", "did", "not", "seem", "as", "good", "as", "debouncing", "the", "change", "events", "NUMBER", "I", "think", "the", "primary", "concern", "was", "that", "it", "didn", "t", "seem", "like", "something", "the", "Dispatcher", "should", "be", "responsible", "for", "NUMBER", "It", "seem", "like", "we", "were", "putting", "code", "in", "the", "Dispatcher", "that", "didn", "t", "really", "have", "anything", "to", "do", "with", "its", "original", "purpose", "but", "was", "really", "tied", "to", "the", "store", "view", "communication", "NUMBER", "NUMBER", "Create", "an", "OmegaStore", "one", "that", "will", "waitFor", "all", "the", "other", "stores", "to", "update", "and", "then", "emit", "change", "if", "those", "stores", "have", "change", "NUMBER", "This", "solution", "seem", "cool", "at", "first", "but", "then", "wound", "up", "looking", "like", "a", "gigantic", "hack", "NUMBER", "Out", "of", "interest", "be", "debouncing", "the", "change", "events", "in", "the", "components", "the", "solution", "you", "be", "open", "sourcing", "or", "be", "there", "another", "solution", "on", "its", "way", "You", "can", "use", "underscore", "for", "example", "LINK", "debounce", "Yeah", "we", "be", "use", "lodash", "I", "meant", "in", "terms", "of", "the", "word", "wanted", "to", "know", "whether", "or", "not", "debouncing", "was", "what", "was", "be", "referred", "to", "in", "the", "following", "We", "believe", "we", "have", "a", "good", "solution", "and", "hope", "to", "open", "source", "it", "soon", "as", "it", "implicitly", "suggested", "there", "was", "another", "solution", "not", "including", "the", "options", "listed", "NUMBER", "Man", "still", "feels", "like", "a", "bit", "of", "a", "hack", "considering", "there", "be", "already", "waitFor", "NUMBER", "Sort", "of", "feels", "like", "the", "waitFor", "method", "should", "do", "this", "for", "you", "NUMBER", "Regardless", "debouncing", "do", "work", "quite", "well", "NUMBER", "For", "anyone", "that", "be", "interested", "here", "be", "what", "I", "ended", "up", "doing", "js", "var", "_", "require", "lodash", "var", "CHANGE_EVENT", "change", "var", "ApplicationStore", "_", "NUMBER", "extend", "EventEmitter", "NUMBER", "prototype", "emitChange", "function", "this", "NUMBER", "emit", "CHANGE_EVENT", "addChangeListener", "function", "callback", "this", "NUMBER", "on", "CHANGE_EVENT", "_", "NUMBER", "debounce", "callback", "NUMBER", "removeChangeListener", "function", "callback", "this", "NUMBER", "removeListener", "CHANGE_EVENT", "callback", "getState", "function", "return", "showConsole", "_showConsole", "As", "a", "little", "update", "I", "run", "into", "an", "issue", "use", "debounce", "NUMBER", "If", "you", "don", "t", "call", "NUMBER", "cancel", "on", "the", "debounced", "function", "then", "you", "ll", "end", "up", "with", "event", "leaks", "because", "the", "removeListener", "doesn", "t", "actually", "remove", "the", "callback", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "Just", "push", "NUMBER", "which", "release", "the", "Mixin", "Container", "classes", "we", "use", "to", "solve", "the", "debounce", "issue", "NUMBER", "LINK", "Allows", "you", "to", "add", "a", "hook", "after", "the", "dispatches", "of", "certain", "stores", "have", "finishes", "but", "before", "the", "dispatch", "be", "do", "LINK", "L", "NUMBER", "This", "be", "how", "we", "use", "it", "to", "synchronously", "debounce", "calls", "to", "setState", "in", "a", "react", "component", "NUMBER", "ekryski", "How", "to", "call", "the", "cancel", "method", "on", "the", "function", "like", "this", "this", "NUMBER", "method", "_", "NUMBER", "debounce", "callback", "NUMBER", "this", "NUMBER", "method", "NUMBER", "cancel", "It", "doesn", "t", "work", "NUMBER", "call", "NUMBER", "cancel", "on", "the", "debounced", "function", "like", "this", "LINK", "LINK", "Hack", "with", "setTimeout", "in", "emit", "worked", "for", "me", "NUMBER", "javascript", "import", "EventEmitter", "from", "events", "export", "default", "class", "Store", "extend", "EventEmitter", "emitChange", "this", "NUMBER", "emit", "change", "setTimeout", "this", "NUMBER", "emit", "change", "NUMBER", "addChangeListener", "callback", "this", "NUMBER", "on", "change", "callback", "removeChangeListener", "callback", "this", "NUMBER", "removeListener", "change", "callback", "The", "code", "for", "the", "todomvc", "example", "has", "change", "but", "the", "documentation", "was", "not", "update", "I", "saw", "it", "was", "on", "purpose", "in", "PR", "NUMBER", "but", "open", "for", "discussion", "NUMBER", "Many", "times", "though", "the", "doc", "invites", "the", "reader", "to", "read", "the", "full", "source", "so", "a", "sync", "between", "the", "doc", "and", "the", "code", "might", "be", "a", "good", "idea", "now", "NUMBER", "In", "particular", "the", "dispatcher", "be", "handwritten", "and", "makes", "use", "of", "promises", "which", "be", "neat", "as", "a", "feature", "but", "can", "lead", "to", "much", "confusion", "when", "reading", "the", "source", "as", "a", "reference", "along", "the", "documentation", "especially", "since", "this", "Todo", "example", "acts", "as", "an", "_introduction_", "to", "the", "Flux", "_architecture_", "NUMBER", "It", "seems", "like", "useless", "complexity", "with", "this", "end", "in", "mind", "I", "hereby", "propose", "to", "reduce", "the", "complexity", "of", "this", "introductory", "example", "by", "having", "the", "documentation", "stick", "to", "what", "be", "in", "the", "source", "NUMBER", "The", "goal", "be", "to", "focus", "on", "the", "architecture", "not", "the", "implementation", "and", "features", "so", "as", "to", "provide", "the", "newcomers", "with", "just", "the", "required", "elements", "to", "get", "start", "with", "Flux", "as", "a", "concept", "NUMBER", "As", "for", "the", "custom", "dispatcher", "the", "concept", "of", "wrapping", "actions", "to", "distinguish", "between", "views", "and", "server", "be", "in", "use", "in", "the", "more", "advance", "chat", "example", "where", "it", "makes", "more", "sense", "NUMBER", "Also", "edit", "the", "section", "summarizing", "the", "chain", "of", "events", "from", "click", "to", "re", "rendering", "NUMBER", "The", "current", "implementation", "be", "based", "on", "a", "single", "root", "controller", "view", "TodoApp", "which", "be", "responsible", "for", "editing", "the", "application", "wise", "state", "and", "fetching", "data", "from", "the", "store", "TodoStore", "then", "passing", "it", "along", "as", "a", "prop", "upon", "rendering", "itself", "NUMBER", "Cascading", "rendering", "then", "kicks", "in", "for", "all", "owned", "nested", "components", "NUMBER", "Signed", "off", "by", "Jean", "Denis", "Vauguet", "jd", "vauguet", "NUMBER", "fr", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Hi", "Thank", "you", "for", "the", "feedback", "on", "this", "NUMBER", "I", "think", "you", "would", "be", "better", "doing", "the", "final", "editing", "for", "you", "seem", "to", "have", "better", "word", "skills", "NUMBER", "fisherwebdev", "reviewing", "my", "opened", "PR", "I", "wondered", "what", "was", "the", "current", "status", "for", "this", "one", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "fisherwebdev", "I", "ve", "just", "rebased", "this", "PR", "against", "latest", "master", "taking", "into", "account", "your", "propose", "edits", "NUMBER", "It", "s", "basically", "ready", "for", "merge", "Nice", "thank", "you", "kyldvs", "Stumbled", "across", "this", "while", "looking", "at", "examples", "of", "flux", "test", "This", "test", "be", "exactly", "the", "same", "as", "the", "one", "above", "it", "with", "just", "a", "minor", "variance", "in", "word", "in", "the", "title", "NUMBER", "Switching", "from", "Marionette", "over", "to", "React", "Flux", "i", "m", "now", "wishing", "their", "becomes", "a", "Gitter", "LINK", "ua", "reactjs", "chatroom", "for", "React", "Flux", "Reasons", "I", "think", "it", "s", "a", "great", "idea", "You", "can", "ask", "question", "to", "the", "community", "and", "easily", "get", "answers", "from", "others", "and", "core", "contributors", "You", "get", "to", "see", "how", "other", "users", "be", "taking", "advantage", "of", "Actions", "Dispatchers", "Stores", "Getters", "etc", "NUMBER", "It", "s", "an", "awesome", "way", "to", "share", "other", "design", "patterns", "and", "cool", "projects", "surrounding", "flux", "like", "NuclearJS", "LINK", "js", "ImmutableJS", "LINK", "js", "VueJS", "LINK", "and", "RiotJS", "LINK", "You", "can", "see", "all", "of", "the", "issue", "PRs", "be", "actively", "opened", "within", "the", "repo", "Hopefully", "that", "s", "convincing", "enough", "to", "start", "one", "You", "can", "ask", "question", "and", "talk", "to", "others", "about", "Flux", "with", "Github", "issue", "too", "NUMBER", "Case", "in", "point", "this", "issue", "NUMBER", "Look", "how", "active", "this", "room", "be", "for", "example", "you", "can", "t", "achieve", "the", "same", "thing", "with", "github", "issue", "NUMBER", "Otherwise", "I", "wouldn", "t", "create", "an", "issue", "LINK", "LINK", "There", "s", "reactjs", "channel", "at", "irc", "NUMBER", "freenode", "NUMBER", "net", "which", "be", "active", "around", "NUMBER", "members", "NUMBER", "If", "you", "want", "more", "information", "about", "the", "permissions", "LINK", "us", "articles", "NUMBER", "Authenticating", "with", "GitHub", "there", "be", "also", "Slack", "chat", "LINK", "NUMBER", "NUMBER", "flux", "reactjs", "chat", "Awesome", "thanks", "for", "sharing", "I", "guess", "those", "be", "sufficient", "enough", "I", "ll", "close", "this", "NUMBER", "also", "you", "can", "get", "invite", "to", "react", "flux", "slack", "chat", "here", "LINK", "It", "would", "be", "awesome", "to", "have", "a", "kind", "of", "reference", "implementation", "of", "flux", "utilizing", "immutable", "data", "and", "cursors", "with", "immutable", "NUMBER", "js", "or", "something", "similar", "NUMBER", "immutablity", "helpers", "cursors", "NUMBER", "There", "be", "quite", "a", "few", "implementations", "but", "they", "either", "differ", "or", "re", "implement", "change", "the", "original", "ideas", "of", "flux", "NUMBER", "I", "have", "a", "bit", "of", "a", "hard", "time", "to", "understand", "if", "all", "the", "state", "even", "a", "components", "transient", "UI", "state", "should", "be", "treated", "as", "application", "state", "in", "a", "store", "when", "use", "immutables", "NUMBER", "in", "the", "standard", "flux", "implementation", "with", "mutable", "data", "we", "have", "UI", "state", "within", "react", "components", "and", "application", "state", "in", "stores", "NUMBER", "In", "my", "view", "with", "immutable", "data", "everything", "even", "a", "components", "UI", "state", "should", "be", "handle", "in", "stores", "and", "be", "combined", "to", "a", "single", "big", "application", "state", "object", "given", "to", "a", "single", "controller", "view", "component", "at", "the", "top", "NUMBER", "It", "would", "be", "great", "to", "see", "flux", "and", "immutable", "objects", "in", "action", "NUMBER", "LINK", "js", "be", "a", "flux", "implementation", "build", "on", "top", "of", "ImmutableJS", "and", "utilitizes", "a", "singular", "immutable", "app", "state", "map", "NUMBER", "On", "Friday", "January", "NUMBER", "NUMBER", "tindli", "notifications", "github", "NUMBER", "com", "write", "It", "would", "be", "awesome", "to", "have", "a", "kind", "of", "reference", "implementation", "of", "flux", "utilizing", "immutable", "data", "and", "cursors", "with", "immutable", "NUMBER", "js", "or", "something", "similar", "NUMBER", "immutablity", "helpers", "cursors", "NUMBER", "There", "be", "quite", "a", "few", "implementations", "but", "they", "either", "differ", "or", "re", "implement", "change", "the", "original", "ideas", "of", "flux", "NUMBER", "I", "have", "a", "bit", "of", "a", "hard", "time", "to", "understand", "if", "all", "the", "state", "even", "a", "components", "transient", "UI", "state", "should", "be", "treated", "as", "application", "state", "in", "a", "store", "when", "use", "immutables", "NUMBER", "in", "the", "standard", "flux", "implementation", "with", "mutable", "data", "we", "have", "UI", "state", "within", "react", "components", "and", "application", "state", "in", "stores", "NUMBER", "In", "my", "view", "with", "immutable", "data", "everything", "even", "a", "components", "UI", "state", "should", "be", "handle", "in", "stores", "and", "be", "combined", "to", "a", "single", "big", "application", "state", "object", "given", "to", "a", "single", "controller", "view", "component", "at", "the", "top", "NUMBER", "It", "would", "be", "great", "to", "see", "flux", "and", "immutable", "objects", "in", "action", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "jordangarcia", "thanks", "I", "have", "already", "find", "nuclear", "NUMBER", "js", "as", "a", "possible", "implementation", "of", "flux", "with", "immutables", "sadly", "the", "examples", "be", "a", "bit", "out", "of", "date", "so", "they", "be", "a", "bit", "hard", "to", "follow", "I", "also", "agree", "that", "this", "would", "be", "helpful", "NUMBER", "Is", "this", "something", "you", "might", "be", "interested", "in", "a", "pull", "request", "for", "fisherwebdev", "fisherwebdev", "RileyTomasek", "jordangarcia", "I", "be", "open", "for", "all", "ideas", "suggestions", "regard", "proper", "flux", "immutable", "data", "NUMBER", "For", "me", "the", "main", "topics", "of", "concern", "be", "NUMBER", "Generic", "immutable", "library", "and", "cursors", "Aside", "from", "immutable", "NUMBER", "js", "which", "be", "great", "but", "pretty", "complex", "there", "be", "react", "s", "immutablity", "helpers", "NUMBER", "If", "the", "immutablility", "helpers", "be", "use", "a", "proper", "cursor", "implementation", "be", "required", "but", "thats", "a", "bit", "a", "problem", "NUMBER", "There", "be", "quite", "a", "few", "of", "there", "but", "they", "be", "often", "very", "opinionated", "about", "calling", "setState", "directly", "together", "with", "update", "the", "cursor", "NUMBER", "I", "think", "that", "manipulating", "state", "outside", "stores", "be", "a", "anti", "pattern", "when", "use", "flux", "NUMBER", "In", "order", "to", "maintain", "the", "proper", "flow", "one", "should", "be", "able", "to", "manipulate", "cursors", "and", "when", "finished", "emit", "the", "change", "to", "controller", "views", "it", "be", "flux", "after", "all", "NUMBER", "isn", "t", "it", "NUMBER", "NUMBER", "Proper", "use", "of", "actions", "When", "cursors", "be", "use", "throughout", "the", "component", "hierarchy", "it", "makes", "sense", "to", "use", "them", "within", "stores", "as", "well", "so", "instead", "of", "passing", "an", "ID", "of", "a", "deeply", "nested", "dataset", "and", "searching", "it", "within", "the", "store", "why", "not", "passing", "the", "cursor", "in", "the", "action", "payload", "directly", "The", "store", "could", "then", "use", "this", "cursor", "to", "directly", "update", "itself", "at", "the", "right", "position", "NUMBER", "when", "do", "emit", "the", "change", "event", "NUMBER", "Sometimes", "searching", "stuff", "in", "stores", "be", "pretty", "costly", "thats", "why", "I", "would", "prefer", "passing", "cursors", "directly", "into", "stores", "via", "actions", "of", "course", "NUMBER", "I", "don", "t", "know", "if", "this", "violates", "flux", "principles", "NUMBER", "but", "it", "would", "definitely", "help", "NUMBER", "NUMBER", "Is", "local", "setState", "a", "thing", "of", "the", "past", "when", "use", "immutable", "data", "structures", "When", "immutable", "data", "be", "use", "one", "can", "limit", "the", "shouldComponentUpdate", "checks", "to", "props", "as", "there", "would", "not", "be", "any", "local", "component", "state", "within", "components", "this", "would", "be", "perfect", "when", "speaking", "of", "stateless", "components", "NUMBER", "Now", "that", "seems", "to", "be", "fine", "most", "of", "the", "time", "but", "how", "can", "you", "do", "an", "efficient", "implementation", "of", "something", "like", "controlled", "components", "Firing", "an", "action", "on", "every", "change", "alter", "the", "store", "with", "a", "given", "cursor", "emit", "the", "change", "and", "run", "through", "each", "components", "shouldComponentUpdate", "checks", "This", "approach", "seems", "then", "pretty", "costly", "for", "something", "that", "simple", "NUMBER", "Of", "course", "one", "can", "call", "setState", "in", "a", "component", "but", "since", "shouldComponentUpdate", "only", "looks", "at", "props", "there", "be", "a", "chance", "that", "the", "UI", "gets", "out", "of", "sync", "NUMBER", "ignoring", "all", "local", "state", "change", "NUMBER", "So", "having", "transient", "UI", "state", "that", "would", "normally", "require", "local", "state", "be", "pretty", "hard", "when", "having", "only", "application", "state", "NUMBER", "NUMBER", "Immutable", "data", "on", "the", "server", "side", "When", "flux", "be", "use", "with", "immutables", "we", "should", "really", "keep", "an", "eye", "on", "server", "side", "rendering", "since", "I", "don", "t", "know", "if", "it", "be", "a", "good", "idea", "to", "use", "common", "immutable", "libraries", "on", "long", "run", "servers", "NUMBER", "but", "this", "might", "just", "be", "a", "bad", "feeling", "NUMBER", "GC", "cleanup", "on", "unuse", "immutables", "If", "mutable", "and", "immutables", "objects", "be", "use", "in", "an", "isomorphic", "environment", "one", "might", "implement", "a", "wrapper", "around", "immutables", "to", "allow", "the", "same", "code", "to", "be", "performed", "server", "and", "client", "side", "with", "mutable", "and", "immutable", "data", "NUMBER", "Yahoo", "s", "excellent", "isomorphic", "flux", "libs", "be", "awesome", "and", "I", "want", "to", "think", "about", "flux", "immutables", "in", "a", "context", "like", "that", "too", "NUMBER", "So", "these", "be", "my", "basic", "thoughts", "about", "the", "topic", "NUMBER", "After", "all", "utilizing", "immutables", "would", "definitely", "help", "to", "build", "more", "robust", "apps", "as", "data", "cannot", "be", "change", "accidentally", "NUMBER", "I", "was", "looking", "for", "such", "examples", "but", "also", "fail", "to", "get", "a", "satisfying", "one", "NUMBER", "Once", "I", "thought", "I", "get", "one", "but", "told", "that", "it", "s", "be", "switched", "to", "cursor", "NUMBER", "LINK", "Hi", "fisherwebdev", "Yes", "I", "d", "love", "to", "contribute", "NUMBER", "As", "I", "mention", "I", "would", "love", "to", "see", "a", "complete", "client", "to", "server", "example", "NUMBER", "I", "would", "be", "ok", "extending", "the", "flux", "chat", "or", "flux", "todomvc", "to", "add", "immutable", "data", "and", "a", "simple", "hapi", "or", "express", "server", "to", "return", "static", "json", "NUMBER", "If", "we", "d", "like", "to", "disconnect", "from", "the", "chat", "or", "todomvc", "apps", "I", "would", "suggest", "NUMBER", "Invoice", "NUMBER", "Recipe", "Book", "or", "Card", "NUMBER", "Team", "Roster", "The", "common", "theme", "among", "these", "would", "be", "that", "they", "have", "an", "Entity", "with", "a", "bit", "of", "complexity", "as", "much", "as", "we", "d", "like", "to", "add", "and", "be", "typically", "managed", "in", "a", "List", "of", "some", "sort", "NUMBER", "What", "if", "you", "just", "did", "the", "chat", "or", "todo", "example", "use", "immutable", "data", "That", "would", "make", "it", "relatively", "easy", "for", "people", "to", "compare", "the", "pros", "cons", "of", "each", "approach", "NUMBER", "It", "be", "also", "a", "very", "small", "and", "focused", "step", "that", "could", "be", "release", "quickly", "NUMBER", "fisherwebdev", "Thanks", "for", "your", "detailed", "answers", "and", "hints", "Really", "helpful", "NUMBER", "It", "be", "nice", "to", "brainstorm", "about", "examples", "that", "make", "use", "of", "immutables", "NUMBER", "kevinold", "Regarding", "the", "complete", "client", "server", "example", "As", "fisherwebdev", "already", "said", "Yahoo", "be", "doing", "a", "super", "awesome", "job", "with", "demonstrating", "how", "flux", "can", "be", "use", "client", "server", "side", "NUMBER", "Their", "fluxible", "apps", "combines", "a", "lot", "of", "useful", "stuff", "I", "don", "t", "know", "if", "we", "should", "overload", "an", "example", "with", "client", "server", "side", "implementation", "there", "has", "to", "be", "do", "quite", "a", "bit", "of", "work", "e", "NUMBER", "g", "NUMBER", "transfer", "data", "from", "server", "stores", "to", "client", "stores", "all", "this", "has", "already", "be", "solve", "very", "elegantly", "by", "fluxible", "NUMBER", "To", "keep", "it", "as", "simple", "as", "possible", "and", "focused", "to", "immutables", "I", "would", "prefer", "something", "basic", "like", "one", "of", "the", "things", "kevinold", "mention", "or", "something", "like", "a", "digital", "stopwatch", "NUMBER", "There", "could", "be", "a", "way", "to", "log", "the", "current", "time", "and", "put", "it", "in", "a", "list", "below", "the", "run", "watch", "NUMBER", "I", "guess", "we", "would", "need", "a", "self", "managing", "store", "that", "would", "hold", "the", "time", "and", "emits", "change", "events", "pretty", "often", "to", "update", "the", "time", "NUMBER", "Due", "to", "reference", "equality", "thanks", "to", "immutables", "this", "would", "be", "pretty", "efficient", "although", "update", "happen", "every", "NUMBER", "NUMBER", "of", "a", "second", "or", "something", "like", "that", "NUMBER", "For", "the", "log", "of", "captured", "timestamps", "below", "the", "watch", "a", "undo", "feature", "could", "be", "use", "to", "undo", "redo", "logged", "timestamps", "one", "of", "the", "things", "immutables", "make", "easy", "NUMBER", "An", "example", "could", "use", "immutable", "NUMBER", "js", "or", "the", "simpler", "immutable", "helpers", "from", "react", "addons", "NUMBER", "As", "the", "project", "should", "be", "something", "tiny", "even", "the", "react", "update", "helpers", "would", "do", "a", "nice", "job", "NUMBER", "Structural", "sharing", "and", "all", "the", "other", "awesome", "benefits", "immutable", "NUMBER", "js", "brings", "be", "definitely", "nice", "though", "NUMBER", "RileyTomasek", "Yeah", "why", "not", "NUMBER", "leebyron", "shows", "immutable", "todos", "in", "his", "talk", "NUMBER", "About", "cursors", "I", "think", "they", "would", "really", "help", "to", "have", "a", "nice", "way", "to", "update", "stores", "NUMBER", "but", "I", "be", "happy", "to", "ignore", "them", "for", "now", "NUMBER", "They", "add", "another", "layer", "of", "complexity", "not", "really", "required", "for", "something", "simple", "NUMBER", "I", "be", "a", "bit", "busy", "currently", "but", "if", "something", "nice", "comes", "up", "I", "be", "definitely", "looking", "forward", "to", "contribute", "NUMBER", "I", "will", "try", "and", "find", "time", "over", "the", "next", "week", "to", "do", "an", "immutable", "version", "of", "the", "todo", "example", "NUMBER", "Even", "if", "the", "difference", "isn", "t", "worth", "add", "another", "example", "it", "will", "hopefully", "be", "a", "good", "starting", "point", "for", "which", "parts", "of", "immutability", "should", "and", "shouldn", "t", "be", "focused", "on", "in", "the", "Flux", "specific", "examples", "NUMBER", "Cursors", "be", "very", "interesting", "NUMBER", "But", "two", "question", "arise", "with", "them", "NUMBER", "Do", "we", "need", "flux", "stores", "at", "all", "if", "we", "have", "common", "big", "application", "immutable", "state", "and", "transfer", "parts", "of", "it", "cursors", "to", "children", "components", "as", "props", "And", "what", "if", "one", "day", "some", "grandchild", "component", "wants", "additional", "data", "from", "another", "part", "of", "application", "state", "change", "its", "parent", "and", "grandparent", "to", "nip", "off", "this", "data", "and", "transfer", "it", "down", "to", "that", "grandchild", "component", "klimashkin", "Depending", "on", "your", "needs", "you", "may", "or", "may", "not", "need", "flux", "if", "you", "be", "use", "global", "immutable", "state", "and", "passing", "things", "via", "cursors", "NUMBER", "You", "might", "still", "want", "to", "use", "flux", "or", "events", "so", "that", "the", "global", "app", "state", "be", "mutated", "in", "the", "proper", "way", "before", "the", "cursor", "triggers", "a", "render", "but", "you", "might", "not", "need", "as", "many", "listeners", "on", "the", "render", "side", "just", "passing", "cursors", "to", "props", "and", "use", "efficient", "shouldComponentUpdate", "NUMBER", "As", "for", "the", "grandchildren", "needing", "additional", "data", "you", "may", "want", "to", "simply", "add", "the", "data", "and", "any", "additional", "props", "or", "for", "certain", "use", "cases", "you", "might", "want", "to", "use", "a", "reference", "cursor", "NUMBER", "Reference", "cursors", "be", "similar", "to", "lenses", "or", "zippers", "in", "that", "they", "provide", "access", "deep", "into", "a", "structure", "NUMBER", "In", "some", "cases", "you", "may", "want", "to", "use", "reference", "cursors", "directly", "or", "in", "others", "maybe", "passing", "down", "through", "ancestors", "be", "more", "appropriate", "NUMBER", "For", "more", "info", "on", "reference", "cursors", "see", "LINK", "references", "reference", "cursors", "in", "immstruct", "LINK", "immstruct", "reference", "repo", "demonstrating", "use", "of", "a", "reference", "cursor", "LINK", "Tutorial", "reference", "cursors", "original", "idea", "use", "in", "Om", "LINK", "out", "reference", "cursors", "NUMBER", "html", "LINK", "cursors", "in", "om", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "I", "have", "an", "action", "that", "performs", "a", "long", "run", "operation", "NUMBER", "When", "it", "s", "do", "I", "want", "to", "tell", "it", "to", "signal", "it", "s", "do", "by", "dispatching", "another", "action", "NUMBER", "But", "when", "I", "do", "that", "I", "come", "across", "the", "error", "above", "NUMBER", "My", "setup", "looks", "like", "this", "coffee", "doSomeLongRunningStuff", "Does", "something", "if", "isDone", "MapActions", "NUMBER", "initDone", "MapStore", "_", "NUMBER", "extend", "MicroEvent", "dispatchIndex", "Dispatcher", "NUMBER", "register", "payload", "action", "payload", "NUMBER", "action", "type", "action", "NUMBER", "actionType", "announce", "true", "switch", "type", "when", "C", "NUMBER", "INIT", "doSomeLongRunningStuff", "when", "C", "NUMBER", "INIT_DONE", "then", "else", "Don", "t", "trigger", "change", "because", "the", "action", "be", "not", "in", "this", "store", "announce", "false", "if", "announce", "console", "NUMBER", "log", "type", "MapStore", "NUMBER", "trigger", "CHANGE_EVENT", "I", "also", "tried", "throw", "the", "initDone", "callback", "to", "the", "next", "event", "loop", "by", "delaying", "it", "for", "NUMBER", "ms", "NUMBER", "That", "prevented", "the", "error", "but", "then", "the", "change", "event", "was", "not", "be", "pick", "up", "by", "the", "views", "NUMBER", "My", "bad", "NUMBER", "I", "had", "the", "listener", "on", "the", "views", "misconfigured", "NUMBER", "The", "setTimeout", "trick", "actually", "works", "NUMBER", "Yeah", "it", "s", "a", "hack", "NUMBER", "I", "tried", "a", "few", "other", "things", "like", "use", "a", "different", "store", "and", "putting", "a", "waitFor", "on", "the", "original", "store", "but", "nothing", "helped", "except", "for", "this", "one", "thing", "NUMBER", "Using", "a", "promise", "might", "be", "more", "explicit", "though", "and", "I", "ll", "give", "that", "a", "try", "NUMBER", "Thanks", "fisherwebdev", "So", "I", "m", "having", "this", "same", "problem", "NUMBER", "I", "have", "a", "situation", "where", "I", "do", "need", "to", "chain", "actions", "NUMBER", "NUMBER", "Toggle", "an", "active", "flag", "NUMBER", "If", "flag", "be", "active", "perform", "a", "request", "NUMBER", "I", "run", "into", "the", "middle", "of", "a", "dispatch", "scenario", "with", "this", "as", "when", "the", "callback", "of", "the", "first", "action", "be", "fired", "I", "would", "like", "to", "fire", "the", "second", "action", "based", "on", "the", "outcome", "of", "the", "first", "action", "which", "I", "fire", "from", "the", "react", "component", "NUMBER", "I", "can", "t", "see", "a", "way", "to", "back", "up", "and", "build", "the", "second", "action", "into", "the", "first", "action", "as", "the", "firing", "of", "the", "second", "action", "completely", "depends", "on", "the", "result", "ie", "the", "result", "of", "a", "calculation", "in", "the", "store", "of", "the", "first", "one", "NUMBER", "I", "guess", "creating", "another", "store", "and", "use", "waitFor", "sounds", "like", "a", "solution", "but", "to", "me", "that", "route", "seems", "to", "be", "deferring", "the", "problem", "and", "results", "in", "the", "action", "be", "chained", "anyway", "just", "across", "stores", "I", "ve", "heard", "creating", "a", "queue", "be", "also", "another", "solution", "LINK", "but", "again", "to", "me", "the", "net", "affect", "be", "that", "you", "have", "chained", "the", "actions", "anyway", "and", "has", "also", "be", "suggested", "that", "that", "solution", "be", "not", "optimal", "as", "it", "requires", "trusting", "developers", "not", "to", "use", "AppDispatcher", "NUMBER", "assign", "in", "the", "stores", "I", "m", "also", "not", "sure", "why", "we", "trust", "them", "not", "to", "fire", "actions", "in", "the", "stores", "but", "seems", "that", "we", "can", "t", "trust", "them", "to", "not", "use", "AppDispatcher", "NUMBER", "assign", "in", "stores", "And", "setTimeout", "seems", "to", "work", "but", "as", "suggested", "above", "this", "may", "be", "a", "code", "smell", "as", "well", "It", "seems", "the", "above", "be", "NUMBER", "ways", "to", "enable", "the", "chaining", "of", "actions", "in", "Flux", "all", "be", "noted", "as", "hacks", "or", "sub", "optimal", "solutions", "but", "I", "m", "struggling", "to", "find", "an", "example", "of", "a", "design", "which", "avoids", "having", "to", "do", "the", "above", "but", "still", "allowing", "me", "to", "do", "what", "I", "need", "to", "do", "NUMBER", "I", "can", "t", "see", "a", "way", "to", "back", "up", "and", "build", "the", "second", "action", "into", "the", "first", "action", "as", "the", "firing", "of", "the", "second", "action", "completely", "depends", "on", "the", "result", "ie", "the", "result", "of", "a", "calculation", "in", "the", "store", "of", "the", "first", "one", "NUMBER", "adeperio", "I", "actually", "managed", "to", "get", "around", "this", "issue", "by", "add", "more", "logic", "into", "my", "actions", "NUMBER", "You", "can", "also", "achieve", "the", "same", "effect", "by", "having", "the", "store", "just", "do", "everything", "but", "to", "keep", "the", "store", "free", "of", "control", "flow", "logic", "you", "can", "put", "this", "kind", "of", "decision", "into", "the", "actions", "NUMBER", "I", "also", "had", "to", "modify", "the", "original", "action", "trigger", "to", "send", "a", "bit", "more", "data", "to", "the", "action", "NUMBER", "I", "was", "thinking", "about", "this", "and", "wanted", "to", "go", "down", "this", "route", "as", "well", "NUMBER", "The", "only", "thing", "was", "that", "actions", "would", "then", "need", "to", "observe", "state", "change", "in", "the", "stores", "right", "which", "meant", "observing", "store", "state", "as", "the", "second", "action", "waited", "for", "the", "first", "Not", "necessarily", "NUMBER", "If", "your", "actions", "depend", "on", "the", "state", "of", "the", "store", "they", "aren", "t", "actions", "NUMBER", "The", "view", "action", "by", "definition", "be", "a", "UI", "event", "performed", "by", "a", "user", "NUMBER", "The", "server", "action", "be", "an", "event", "performed", "by", "the", "server", "e", "NUMBER", "g", "NUMBER", "callback", "of", "an", "API", "call", "NUMBER", "All", "other", "events", "that", "stores", "perform", "e", "NUMBER", "g", "NUMBER", "starting", "to", "fetch", "data", "be", "internal", "events", "and", "shouldn", "t", "be", "call", "via", "actions", "NUMBER", "OK", "so", "do", "that", "mean", "I", "should", "fire", "a", "http", "request", "from", "the", "Store", "Using", "superagent", "my", "request", "would", "look", "something", "like", "the", "code", "below", "NUMBER", "If", "I", "run", "this", "code", "in", "the", "store", "wouldn", "t", "it", "mean", "that", "the", "server", "action", "would", "be", "triggered", "in", "the", "Store", "If", "so", "do", "this", "break", "the", "Flux", "pattern", "http", "NUMBER", "get", "url", "NUMBER", "accept", "application", "json", "NUMBER", "end", "err", "res", "if", "err", "Dispatcher", "NUMBER", "handleServerAction", "actionType", "ActionTypes", "NUMBER", "SOME_SERVER_RES", "data", "res", "NUMBER", "body", "That", "looks", "good", "to", "me", "NUMBER", "I", "use", "the", "same", "pattern", "but", "I", "placed", "it", "in", "an", "API", "adapter", "file", "that", "be", "solely", "responsible", "for", "data", "fetching", "and", "it", "s", "call", "from", "a", "view", "action", "NUMBER", "just", "a", "recommendation", "NUMBER", "I", "have", "a", "growing", "number", "of", "TDD", "type", "specs", "in", "a", "current", "large", "project", "and", "would", "be", "fine", "contribute", "if", "needed", "NUMBER", "also", "they", "should", "be", "correct", "The", "instructions", "for", "get", "the", "ref", "to", "the", "mocked", "register", "at", "LINK", "flux", "applications", "NUMBER", "html", "test", "stores", "do", "not", "work", "for", "me", "NUMBER", "Hi", "I", "m", "wondering", "why", "a", "new", "store", "has", "be", "created", "to", "provide", "the", "views", "a", "count", "of", "unread", "threads", "on", "flux", "chat", "example", "NUMBER", "Wouldn", "t", "it", "be", "better", "if", "we", "had", "a", "getUnreadCount", "method", "in", "the", "ThreadStore", "If", "I", "had", "to", "count", "archived", "threads", "would", "it", "be", "better", "to", "create", "a", "ArchivedThreadStore", "Thanks", "in", "advance", "Got", "it", "NUMBER", "It", "made", "me", "confused", "on", "the", "role", "of", "stores", "in", "Flux", "wondering", "if", "I", "would", "need", "that", "level", "of", "abstraction", "NUMBER", "Maybe", "we", "should", "update", "the", "flux", "chat", "example", "to", "avoid", "this", "NUMBER", "If", "you", "agree", "I", "can", "spend", "some", "time", "thinking", "about", "an", "alternative", "NUMBER", "The", "getCount", "function", "recomputes", "its", "value", "every", "time", "it", "be", "call", "NUMBER", "It", "could", "instead", "recompute", "it", "after", "receiving", "actions", "that", "indicate", "that", "the", "result", "may", "have", "change", "NUMBER", "It", "would", "store", "the", "cached", "value", "and", "getCount", "would", "just", "return", "it", "NUMBER", "BTW", "be", "it", "expected", "that", "a", "derived", "store", "like", "UnreadThreadStore", "has", "to", "know", "which", "specific", "actions", "will", "cause", "ThreadStore", "to", "modify", "the", "results", "of", "getAll", "It", "feels", "like", "it", "has", "knowledge", "of", "the", "internals", "of", "the", "store", "it", "be", "reading", "from", "NUMBER", "Where", "a", "store", "be", "computing", "derived", "data", "like", "this", "be", "it", "possible", "that", "it", "would", "also", "respond", "to", "actions", "to", "mutate", "the", "data", "Is", "there", "a", "realistic", "example", "of", "that", "It", "sounds", "like", "it", "would", "result", "in", "inconsistency", "NUMBER", "NUMBER", "for", "finding", "an", "appropriate", "example", "of", "waitFor", "rather", "than", "forcing", "the", "contrived", "example", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "It", "s", "easier", "on", "the", "eyes", "NUMBER", "fisherwebdev", "Sounds", "good", "NUMBER", "I", "think", "it", "s", "worth", "a", "patch", "version", "bump", "since", "it", "only", "affects", "the", "private", "API", "NUMBER", "I", "think", "this", "LINK", "flux", "applications", "NUMBER", "html", "LINK", "flux", "applications", "NUMBER", "html", "should", "be", "add", "to", "or", "at", "least", "referenced", "from", "the", "Flux", "homepage", "NUMBER", "re", "rendering", "not", "re", "rending", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "This", "pull", "request", "brings", "the", "in", "line", "documentation", "up", "to", "date", "with", "what", "s", "in", "docs", "Dispatcher", "NUMBER", "md", "NUMBER", "Except", "for", "a", "paren", "it", "replicates", "what", "was", "do", "in", "commit", "bf", "NUMBER", "f", "NUMBER", "a", "NUMBER", "e", "NUMBER", "ba", "NUMBER", "ad", "NUMBER", "b", "NUMBER", "fea", "NUMBER", "cd", "NUMBER", "ff", "NUMBER", "should", "throw", "on", "multi", "circular", "dependencies", "and", "should", "throw", "on", "self", "circular", "dependencies", "test", "were", "checking", "for", "always", "satisfying", "conditions", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Why", "remove", "the", "AppDispatcher", "NUMBER", "handleAction", "was", "it", "because", "it", "isn", "t", "need", "in", "TodoApp", "example", "Or", "it", "be", "entirely", "not", "needed", "in", "most", "applications", "Or", "we", "need", "it", "in", "some", "real", "life", "use", "cases", "because", "We", "also", "add", "a", "handleAction", "helper", "method", "to", "our", "Dispatcher", "instance", "so", "that", "we", "can", "identify", "where", "this", "action", "came", "from", "NUMBER", "scotch", "NUMBER", "io", "tut", "LINK", "a", "simple", "shopping", "cart", "with", "react", "js", "and", "flux", "dispatcher", "For", "those", "wondering", "what", "the", "above", "means", "just", "replace", "dispatcher", "NUMBER", "handleAction", "calls", "with", "dispatcher", "NUMBER", "dispatch", "and", "it", "will", "work", "NUMBER", "Just", "hit", "a", "bit", "of", "a", "wall", "and", "hoping", "someone", "here", "could", "help", "NUMBER", "I", "m", "trying", "to", "implement", "add", "a", "resource", "use", "Flux", "and", "can", "t", "figure", "out", "how", "it", "would", "fit", "in", "NUMBER", "Here", "s", "the", "flow", "NUMBER", "User", "clicks", "an", "Add", "Article", "button", "NUMBER", "The", "click", "handler", "calls", "ArticleActionCreators", "NUMBER", "createArticle", "NUMBER", "ArticleActionCreators", "NUMBER", "createArticle", "makes", "a", "POST", "request", "to", "the", "API", "and", "pass", "the", "response", "on", "to", "the", "ArticleStore", "NUMBER", "Router", "navigates", "to", "articles", "NUMBER", "where", "NUMBER", "be", "the", "id", "of", "the", "newly", "created", "Article", "NUMBER", "The", "problem", "be", "where", "do", "I", "hook", "in", "to", "the", "system", "to", "get", "the", "id", "of", "the", "newly", "created", "Article", "My", "first", "thoughts", "be", "to", "have", "a", "callback", "on", "the", "action", "creator", "but", "that", "doesn", "t", "feel", "right", "NUMBER", "Any", "ideas", "Does", "this", "make", "any", "sense", "Shouldn", "t", "createArticle", "issue", "the", "route", "change", "only", "when", "it", "has", "the", "server", "response", "from", "the", "POST", "with", "the", "Id", "Otherwise", "how", "be", "you", "detecting", "a", "server", "error", "Sent", "from", "my", "iPhone", "On", "Jan", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Wayne", "Ashley", "Berry", "notifications", "github", "NUMBER", "com", "write", "Just", "hit", "a", "bit", "of", "a", "wall", "and", "hoping", "someone", "here", "could", "help", "NUMBER", "I", "m", "trying", "to", "implement", "add", "a", "resource", "use", "Flux", "and", "can", "t", "figure", "out", "how", "it", "would", "fit", "in", "NUMBER", "Here", "s", "the", "flow", "User", "clicks", "an", "Add", "Article", "button", "The", "click", "handler", "calls", "ArticleActionCreators", "NUMBER", "createArticle", "ArticleActionCreators", "NUMBER", "createArticle", "makes", "a", "POST", "request", "to", "the", "API", "and", "pass", "the", "response", "on", "to", "the", "ArticleStore", "Router", "navigates", "to", "articles", "NUMBER", "where", "NUMBER", "be", "the", "id", "of", "the", "newly", "created", "Article", "NUMBER", "The", "problem", "be", "where", "do", "I", "hook", "in", "to", "the", "system", "to", "get", "the", "id", "of", "the", "newly", "created", "Article", "My", "first", "thoughts", "be", "to", "have", "a", "callback", "on", "the", "action", "creator", "but", "that", "doesn", "t", "feel", "right", "NUMBER", "Any", "ideas", "Does", "this", "make", "any", "sense", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "I", "NUMBER", "e", "NUMBER", "Because", "the", "dispatcher", "be", "guaranteed", "to", "be", "synchronous", "you", "can", "dispatch", "the", "payload", "the", "store", "will", "be", "update", "in", "the", "same", "priority", "and", "when", "dispatch", "function", "returns", "at", "the", "next", "line", "you", "can", "perform", "the", "route", "change", "NUMBER", "This", "should", "avoid", "nesting", "dispatches", "NUMBER", "Sent", "from", "my", "iPhone", "On", "Jan", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Wayne", "Ashley", "Berry", "notifications", "github", "NUMBER", "com", "write", "Just", "hit", "a", "bit", "of", "a", "wall", "and", "hoping", "someone", "here", "could", "help", "NUMBER", "I", "m", "trying", "to", "implement", "add", "a", "resource", "use", "Flux", "and", "can", "t", "figure", "out", "how", "it", "would", "fit", "in", "NUMBER", "Here", "s", "the", "flow", "User", "clicks", "an", "Add", "Article", "button", "The", "click", "handler", "calls", "ArticleActionCreators", "NUMBER", "createArticle", "ArticleActionCreators", "NUMBER", "createArticle", "makes", "a", "POST", "request", "to", "the", "API", "and", "pass", "the", "response", "on", "to", "the", "ArticleStore", "Router", "navigates", "to", "articles", "NUMBER", "where", "NUMBER", "be", "the", "id", "of", "the", "newly", "created", "Article", "NUMBER", "The", "problem", "be", "where", "do", "I", "hook", "in", "to", "the", "system", "to", "get", "the", "id", "of", "the", "newly", "created", "Article", "My", "first", "thoughts", "be", "to", "have", "a", "callback", "on", "the", "action", "creator", "but", "that", "doesn", "t", "feel", "right", "NUMBER", "Any", "ideas", "Does", "this", "make", "any", "sense", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "Hey", "sterpe", "that", "s", "what", "I", "m", "thinking", "NUMBER", "Have", "the", "action", "creators", "support", "callbacks", "or", "return", "promises", "or", "something", "like", "that", "NUMBER", "Would", "get", "the", "article", "id", "from", "the", "action", "creator", "callback", "not", "conflict", "with", "Flux", "s", "philosophy", "of", "all", "data", "come", "from", "stores", "Here", "s", "some", "pseudo", "code", "to", "demonstrate", "what", "I", "m", "thinking", "NUMBER", "js", "var", "ArticleActionCreators", "createArticle", "function", "var", "request", "NUMBER", "ajax", "type", "POST", "url", "article", "request", "NUMBER", "do", "function", "response", "Dispatcher", "NUMBER", "handleViewAction", "actionType", "NEW_ARTICLE", "responseBody", "response", "return", "request", "var", "CreateArticleButton", "React", "NUMBER", "createClass", "createArticle", "function", "e", "e", "NUMBER", "preventDefault", "var", "action", "ArticleActionCreators", "NUMBER", "createArticle", "the", "following", "NUMBER", "lines", "be", "what", "i", "m", "most", "concerned", "about", "action", "NUMBER", "do", "function", "var", "id", "ArticleStore", "NUMBER", "getNewlyCreatedArticleId", "Router", "NUMBER", "navigate", "articles", "id", "render", "function", "return", "TAG", "Create", "Article", "TAG", "Here", "s", "another", "option", "for", "the", "createArticle", "method", "js", "createArticle", "function", "e", "e", "NUMBER", "preventDefault", "var", "action", "ArticleActionCreators", "NUMBER", "createArticle", "get", "the", "id", "directly", "from", "the", "action", "creator", "might", "conflict", "with", "Flux", "s", "philosophy", "of", "all", "data", "come", "from", "stores", "action", "NUMBER", "do", "function", "id", "Router", "NUMBER", "navigate", "articles", "id", "As", "far", "as", "I", "understand", "Flux", "philosophy", "you", "should", "have", "your", "action", "creator", "to", "dispatch", "article", "creation", "start", "before", "sending", "ajax", "request", "article", "created", "and", "article", "create", "error", "actions", "on", "ajax", "promise", "resolve", "reject", "your", "store", "moving", "to", "some", "creating", "article", "state", "on", "article", "creation", "start", "action", "so", "that", "the", "view", "could", "render", "some", "progress", "indicator", "your", "store", "moving", "from", "creating", "article", "state", "on", "article", "created", "and", "either", "update", "the", "route", "or", "notifying", "the", "view", "that", "the", "route", "should", "be", "update", "your", "store", "moving", "from", "creating", "article", "state", "on", "article", "create", "error", "and", "storing", "the", "error", "so", "the", "view", "could", "display", "it", "and", "not", "update", "the", "router", "Please", "correct", "me", "if", "I", "be", "wrong", "NUMBER", "I", "be", "interested", "in", "this", "workflow", "too", "so", "I", "would", "be", "glad", "to", "hear", "a", "solution", "from", "Flux", "developers", "NUMBER", "sompylasar", "you", "be", "NUMBER", "correct", "NUMBER", "I", "m", "intentionally", "leaving", "out", "a", "lot", "of", "those", "state", "and", "events", "because", "i", "m", "just", "prototyping", "an", "application", "for", "now", "NUMBER", "This", "be", "what", "i", "m", "most", "interested", "in", "your", "store", "moving", "from", "creating", "article", "state", "on", "article", "created", "and", "either", "update", "the", "route", "or", "notifying", "the", "view", "that", "the", "route", "should", "be", "update", "I", "ve", "decided", "to", "go", "with", "returning", "the", "newly", "created", "article", "id", "from", "the", "action", "creator", "for", "now", "NUMBER", "It", "just", "seems", "like", "the", "simplest", "solution", "NUMBER", "I", "have", "a", "feeling", "this", "might", "change", "as", "time", "goes", "on", "though", "NUMBER", "Here", "s", "my", "code", "js", "var", "ArticleActionCreators", "createArticle", "function", "var", "Deferred", "new", "NUMBER", "Deferred", "API", "NUMBER", "POST", "articles", "NUMBER", "do", "function", "response", "dispatch", "actionType", "CREATE_ARTICLE", "responseBody", "response", "Deferred", "NUMBER", "resolve", "response", "NUMBER", "data", "NUMBER", "id", "return", "Deferred", "NUMBER", "promise", "var", "CreateArticleButton", "React", "NUMBER", "createClass", "mixins", "Router", "NUMBER", "Navigation", "getInitialState", "function", "return", "add", "false", "clickHandler", "function", "e", "e", "NUMBER", "preventDefault", "e", "NUMBER", "target", "NUMBER", "blur", "this", "NUMBER", "createAndTransition", "createAndTransition", "function", "this", "NUMBER", "setState", "add", "true", "ArticleActionCreators", "NUMBER", "createArticle", "NUMBER", "do", "function", "id", "this", "NUMBER", "setState", "add", "false", "this", "NUMBER", "transitionTo", "article", "id", "id", "NUMBER", "bind", "this", "render", "function", "if", "this", "NUMBER", "ate", "NUMBER", "add", "return", "TAG", "Adding", "Article", "TAG", "return", "TAG", "Add", "Article", "TAG", "sompylasar", "I", "would", "think", "maybe", "have", "a", "generalized", "request", "state", "store", "that", "managed", "that", "and", "could", "keep", "track", "of", "multiple", "concurrent", "request", "NUMBER", "It", "seem", "like", "keep", "track", "of", "all", "that", "in", "the", "article", "store", "could", "lead", "to", "it", "be", "overly", "messy", "or", "in", "an", "inaccessible", "state", "for", "some", "other", "dispatch", "plus", "you", "need", "to", "handle", "it", "for", "other", "types", "of", "request", "too", "NUMBER", "wayneashleyberry", "What", "I", "see", "from", "your", "code", "be", "that", "you", "track", "article", "creating", "state", "in", "your", "view", "but", "you", "should", "in", "the", "article", "store", "NUMBER", "When", "you", "move", "this", "state", "to", "the", "store", "you", "won", "t", "need", "the", "promise", "returned", "from", "the", "action", "creator", "NUMBER", "Mixing", "a", "router", "into", "a", "button", "view", "be", "wrong", "they", "have", "nothing", "in", "common", "NUMBER", "There", "should", "be", "some", "store", "that", "tracks", "the", "whole", "app", "state", "including", "the", "current", "route", "which", "be", "global", "that", "s", "how", "browsers", "work", "having", "a", "single", "URL", "for", "an", "app", "state", "we", "cannot", "change", "it", "NUMBER", "sterpe", "Yes", "you", "could", "additionally", "have", "a", "store", "that", "tracks", "all", "request", "in", "a", "single", "place", "NUMBER", "But", "you", "should", "track", "articles", "state", "in", "article", "store", "for", "those", "views", "which", "only", "work", "with", "articles", "NUMBER", "P", "NUMBER", "S", "NUMBER", "If", "you", "be", "leaving", "out", "intentionally", "then", "you", "should", "also", "leave", "out", "Flux", "philosophy", "instead", "of", "twisting", "and", "bending", "it", "to", "make", "less", "architecture", "components", "than", "the", "philosophy", "requires", "to", "implement", "it", "NUMBER", "Having", "calbacks", "do", "more", "than", "just", "dispatching", "actions", "breaks", "the", "Flux", "flow", "NUMBER", "This", "be", "what", "happens", "in", "your", "code", "you", "attach", "a", "callback", "that", "change", "the", "view", "state", "and", "the", "router", "state", "but", "this", "change", "do", "not", "happen", "as", "a", "result", "of", "handle", "the", "store", "s", "change", "event", "NUMBER", "sompylasar", "the", "reason", "i", "m", "ask", "be", "because", "i", "m", "trying", "to", "stick", "to", "the", "Flux", "philosophy", "but", "there", "s", "no", "documentation", "on", "use", "routers", "or", "anything", "like", "that", "NUMBER", "So", "if", "I", "have", "CREAT_ARTICLE", "and", "CREATE_ARTICLE_SUCCESS", "actions", "some", "component", "still", "needs", "to", "listen", "to", "them", "and", "trigger", "a", "transition", "on", "the", "router", "NUMBER", "which", "component", "should", "do", "this", "The", "top", "level", "App", "component", "wayneashleyberry", "I", "think", "this", "should", "be", "like", "follows", "NUMBER", "There", "should", "be", "a", "store", "that", "tracks", "the", "current", "route", "because", "it", "s", "a", "part", "of", "the", "application", "state", "let", "s", "name", "it", "AppStore", "if", "it", "be", "responsible", "for", "more", "than", "that", "or", "just", "RouteStore", "NUMBER", "Both", "the", "ArticleStore", "and", "the", "AppStore", "RouteStore", "handle", "ARTICLE_CREATE_SUCCESS", "action", "NUMBER", "The", "ArticleStore", "update", "its", "internal", "data", "and", "emits", "a", "change", "event", "that", "be", "handle", "by", "the", "views", "the", "button", "becomes", "enable", "again", "the", "new", "article", "appears", "in", "the", "list", "etc", "NUMBER", "NUMBER", "The", "AppStore", "RouteStore", "depends", "on", "the", "ArticleStore", "via", "waitFor", "update", "the", "route", "if", "required", "you", "could", "put", "a", "flag", "into", "the", "action", "payload", "whether", "the", "navigation", "be", "required", "or", "not", "and", "emits", "a", "change", "event", "so", "the", "view", "displays", "the", "page", "that", "corresponds", "to", "the", "current", "route", "NUMBER", "sompylasar", "that", "helped", "a", "lot", "thanks", "so", "much", "What", "about", "an", "action", "which", "depends", "on", "the", "result", "of", "another", "action", "I", "have", "a", "form", "component", "to", "CREATE", "UPDATE", "NUMBER", "entities", "NUMBER", "Submit", "form", "NUMBER", "First", "call", "APIAction", "NUMBER", "saveEntityData", "and", "save", "parentEntityData", "NUMBER", "Second", "call", "APIAction", "NUMBER", "saveEntityData", "and", "save", "childEntityData", "with", "the", "parentEntityData", "id", "received", "from", "server", "NUMBER", "Does", "it", "make", "sense", "to", "add", "a", "callback", "to", "action", "payload", "APIAction", "NUMBER", "saveEntityData", "entity", "parentEntity", "model", "parentModel", "next", "parentEntityId", "APIAction", "NUMBER", "saveEntityData", "entity", "childEntity", "model", "childModel", "NUMBER", "set", "parentId", "parentEntityId", "loun", "NUMBER", "it", "sounds", "like", "you", "need", "to", "split", "that", "up", "into", "two", "actions", "NUMBER", "javascript", "APIAction", "NUMBER", "saveEntityData", "NUMBER", "Which", "causes", "an", "api", "request", "somewhere", "where", "you", "do", "assuming", "a", "promise", "like", "interface", "request", "NUMBER", "en", "parentEntityId", "In", "this", "action", "you", "can", "do", "anything", "that", "requires", "the", "request", "to", "have", "be", "completed", "NUMBER", "APIAction", "NUMBER", "entityDataSaved", "NUMBER", "For", "example", "i", "have", "some", "third", "party", "component", "Map", "NUMBER", "Map", "has", "marks", "NUMBER", "And", "i", "want", "to", "show", "some", "balloon", "with", "information", "from", "server", "when", "mark", "click", "event", "occur", "NUMBER", "_No", "flux_", "pseudo", "code", "looks", "like", "javascript", "marks", "NUMBER", "on", "click", "mark_id", "server", "NUMBER", "getmarkinfo", "mark_id", "NUMBER", "en", "data", "marks", "NUMBER", "show_balloon", "mark_id", "data", "_In", "flux_", "i", "call", "action", "action", "makes", "call", "to", "server", "and", "dispatch", "some", "event", "to", "store", "when", "data", "available", "store", "save", "data", "and", "call", "on_change", "event", "jsx", "component", "receive", "on_change", "event", "get", "data", "and", "mark_id", "from", "store", "NUMBER", "What", "be", "recommended", "way", "to", "call", "ONCE", "marks", "NUMBER", "show_balloon", "mark_id", "data", "NUMBER", "The", "only", "way", "i", "see", "for", "one", "time", "calls", "i", "need", "to", "have", "some", "kind", "of", "state", "at", "jsx", "component", "level", "in", "this", "situation", "be", "something", "like", "marks", "NUMBER", "is_ballon_open", "mark_id", "marks", "NUMBER", "show_balloon", "mark_id", "data", "NUMBER", "Thank", "you", "for", "your", "answer", "NUMBER", "I", "ve", "just", "find", "some", "interesting", "way", "to", "maintain", "such", "component", "level", "state", "use", "react", "NUMBER", "So", "my", "problem", "was", "how", "to", "call", "show_balloon", "on", "specific", "mark_id", "once", "and", "only", "once", "NUMBER", "The", "idea", "be", "to", "use", "react", "ability", "to", "maintain", "keyed", "children", "collection", "elements", "NUMBER", "For", "example", "if", "i", "create", "some", "react", "component", "javascript", "var", "Marker", "React", "NUMBER", "createClass", "componentDidMount", "var", "p", "this", "NUMBER", "props", "p", "NUMBER", "api", "NUMBER", "show_balloon", "p", "NUMBER", "mark_id", "p", "NUMBER", "data", "componentWillUnmount", "var", "p", "this", "NUMBER", "props", "p", "NUMBER", "api", "NUMBER", "close_balloon", "p", "NUMBER", "mark_id", "shouldComponentUpdate", "return", "false", "render", "return", "null", "and", "use", "this", "component", "from", "some", "jsx", "render", "as", "collection", "element", "javascript", "render", "TAG", "markers", "NUMBER", "filter", "m", "m", "NUMBER", "has_balloon", "NUMBER", "map", "m", "TAG", "TAG", "I", "get", "once", "and", "only", "once", "call", "to", "p", "NUMBER", "api", "NUMBER", "show_balloon", "for", "each", "marker", "with", "has_balloon", "set", "to", "true", "in", "markers", "collection", "_also", "destruction", "code", "p", "NUMBER", "api", "NUMBER", "close_balloon", "will", "work", "as", "has_balloon", "become", "false_", "NUMBER", "For", "me", "it", "looks", "like", "implicit", "state", "of", "component", "and", "looks", "more", "funny", "than", "explicit", "call", "to", "marks", "NUMBER", "is_ballon_open", "mark_id", "But", "i", "don", "t", "sure", "would", "react", "use", "key", "attribute", "for", "maintain", "collection", "element", "state", "in", "the", "future", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "Since", "the", "getCreatedMessageData", "method", "of", "the", "MessageStore", "be", "just", "a", "message", "specific", "utility", "it", "makes", "more", "sense", "to", "put", "it", "in", "ChatMessageUtils", "NUMBER", "The", "debatable", "part", "here", "be", "that", "I", "then", "moved", "the", "call", "to", "the", "APIs", "create", "method", "to", "the", "store", "NUMBER", "The", "primary", "motivation", "for", "that", "was", "the", "availability", "of", "currentThreadID", "however", "this", "may", "also", "be", "more", "maintainable", "because", "it", "keep", "the", "optimistic", "store", "update", "close", "to", "the", "server", "API", "create", "call", "NUMBER", "Sorry", "my", "intent", "wasn", "t", "to", "change", "the", "location", "the", "API", "calls", "were", "made", "from", "NUMBER", "All", "of", "your", "points", "above", "be", "valid", "and", "I", "agree", "that", "it", "makes", "sense", "to", "leave", "the", "API", "call", "in", "the", "action", "creator", "for", "this", "example", "NUMBER", "My", "intent", "was", "to", "move", "the", "getCreatedMessageData", "method", "to", "ChatMessageUtils", "since", "it", "be", "an", "API", "utility", "and", "not", "a", "store", "getter", "NUMBER", "Moving", "the", "API", "call", "from", "the", "action", "creator", "to", "store", "was", "motivated", "mainly", "by", "easy", "access", "to", "the", "current", "thread", "id", "due", "to", "not", "be", "able", "to", "access", "it", "in", "the", "action", "creator", "due", "to", "that", "creating", "a", "circular", "dependency", "between", "the", "MessageStore", "and", "the", "ThreadStore", "NUMBER", "Would", "it", "make", "sense", "to", "pass", "the", "current", "thread", "id", "in", "the", "payload", "with", "the", "message", "text", "or", "do", "you", "think", "add", "the", "extra", "dependency", "to", "the", "MessageComposer", "component", "be", "worse", "than", "just", "leaving", "the", "util", "method", "in", "the", "store", "Sorry", "I", "forgot", "about", "this", "NUMBER", "I", "will", "try", "and", "remember", "to", "do", "it", "after", "work", "this", "evening", "NUMBER", "fisherwebdev", "sorry", "for", "the", "series", "of", "delays", "NUMBER", "Is", "this", "an", "acceptable", "compromise", "of", "not", "make", "an", "API", "call", "from", "the", "store", "but", "factoring", "the", "utils", "method", "out", "of", "the", "store", "Why", "do", "server", "and", "view", "actions", "have", "separate", "dispatch", "methods", "in", "the", "examples", "without", "ever", "provide", "any", "inherent", "value", "NUMBER", "It", "seems", "like", "this", "could", "easily", "be", "do", "by", "just", "passing", "an", "extra", "property", "on", "the", "action", "instead", "NUMBER", "Am", "I", "miss", "something", "here", "or", "should", "this", "separation", "be", "remove", "fisherwebdev", "I", "see", "that", "you", "just", "update", "the", "todo", "example", "to", "address", "this", "issue", "NUMBER", "Would", "you", "like", "me", "to", "open", "a", "PR", "doing", "this", "for", "the", "chat", "example", "fisherwebdev", "I", "will", "try", "to", "get", "to", "it", "tomorrow", "NUMBER", "It", "should", "be", "pretty", "fast", "NUMBER", "Did", "you", "see", "my", "PR", "that", "was", "also", "for", "the", "chat", "example", "NUMBER", "I", "thought", "it", "was", "separate", "because", "you", "could", "use", "the", "same", "action", "both", "for", "view", "and", "server", "event", "and", "do", "something", "different", "in", "both", "cases", "NUMBER", "But", "for", "sure", "it", "didn", "t", "make", "sense", "to", "have", "it", "in", "the", "todo", "example", "as", "there", "be", "no", "server", "api", "NUMBER", "flux", "has", "already", "be", "open", "sourced", "so", "why", "include", "that", "paragraph", "smile", "Ah", "ok", "NUMBER", "The", "rest", "of", "the", "project", "be", "NUMBER", "space", "and", "the", "tabs", "render", "terribly", "in", "GitHub", "NUMBER", "Abstract", "The", "more", "the", "registered", "actions", "the", "more", "time", "the", "dispatcher", "spent", "time", "to", "choice", "matched", "callback", "NUMBER", "So", "this", "p", "r", "enable", "to", "give", "actionType", "to", "register", "action", "optionally", "NUMBER", "Usage", "javascript", "var", "dispatcher", "require", "flux", "NUMBER", "Dispatcher", "dispatcher", "NUMBER", "register", "some", "event", "function", "payload", "without", "checking", "payload", "NUMBER", "actionType", "var", "payload", "actionType", "some", "event", "dispatcher", "NUMBER", "dispatch", "payload", "fire", "registered", "callback", "with", "some", "event", "Isn", "t", "it", "enough", "to", "create", "an", "another", "Dispatcher", "s", "instance", "for", "each", "callbacks", "Sorry", "I", "cannot", "find", "what", "you", "say", "another", "NUMBER", "Currently", "another", "Dispatcher", "libraries", "repositories", "be", "out", "of", "my", "scope", "NUMBER", "In", "this", "p", "r", "Dispatcher", "has", "backward", "compatibility", "NUMBER", "The", "default", "actionType", "be", "and", "callbacks", "that", "registered", "with", "it", "fire", "all", "action", "type", "with", "actionType", "in", "given", "payload", "NUMBER", "Both", "be", "ok", "javascript", "var", "dispatcher", "require", "flux", "NUMBER", "Dispatcher", "new", "way", "dispatcher", "NUMBER", "register", "some", "event", "function", "payload", "without", "checking", "payload", "NUMBER", "actionType", "var", "payload", "actionType", "some", "event", "dispatcher", "NUMBER", "dispatch", "payload", "fire", "registered", "callback", "with", "some", "event", "current", "way", "the", "callback", "be", "fired", "by", "any", "actionType", "NUMBER", "dispatcher", "NUMBER", "register", "function", "payload", "check", "or", "not", "by", "switch", "case", "var", "payload", "actionType", "some", "event", "dispatcher", "NUMBER", "dispatch", "payload", "fire", "var", "payload", "actionType", "other", "event", "dispatcher", "NUMBER", "dispatch", "payload", "fire", "Sorry", "I", "cannot", "find", "what", "you", "say", "another", "NUMBER", "Oh", "my", "comment", "confused", "you", "NUMBER", "This", "another", "means", "createing", "a", "new", "require", "flux", "NUMBER", "Dispatcher", "s", "instance", "like", "the", "following", "NUMBER", "I", "seem", "it", "will", "be", "able", "to", "cover", "your", "use", "case", "NUMBER", "javascript", "var", "Dispatcher", "require", "flux", "NUMBER", "Dispatcher", "var", "callback", "NUMBER", "function", "NUMBER", "var", "callback", "NUMBER", "function", "NUMBER", "var", "general", "new", "Dispatcher", "general", "NUMBER", "register", "callback", "NUMBER", "general", "NUMBER", "register", "callback", "NUMBER", "If", "you", "call", "callback", "NUMBER", "without", "the", "look", "up", "time", "creating", "a", "new", "instance", "of", "Dispatcher", "will", "help", "you", "NUMBER", "var", "special", "new", "Dispatcher", "special", "NUMBER", "register", "callback", "NUMBER", "var", "payload", "NUMBER", "NUMBER", "In", "this", "case", "special", "calls", "callback", "NUMBER", "only", "NUMBER", "special", "NUMBER", "dispatch", "payload", "NUMBER", "Thank", "you", "for", "your", "explanation", "NUMBER", "I", "will", "check", "it", "so", "please", "give", "me", "a", "time", "NUMBER", "Sorry", "to", "response", "late", "NUMBER", "I", "can", "find", "what", "your", "meanings", "NUMBER", "It", "be", "exactly", "to", "establish", "to", "do", "same", "with", "multiple", "dispatcher", "NUMBER", "But", "I", "do", "not", "think", "it", "better", "because", "multiple", "dispatcher", "should", "be", "shared", "in", "several", "source", "code", "file", "do", "you", "Remove", "redundant", "code", "NUMBER", "It", "can", "be", "helpful", "if", "someone", "be", "re", "use", "or", "extending", "the", "code", "of", "this", "class", "NUMBER", "Addresses", "this", "issue", "LINK", "Just", "notice", "that", "the", "documentation", "located", "here", "LINK", "what", "about", "that", "dispatcher", "state", "that", "a", "call", "to", "NUMBER", "waitFor", "NUMBER", "takes", "a", "second", "argument", "a", "callback", "NUMBER", "I", "be", "pretty", "sure", "that", "be", "not", "correct", "LINK", "L", "NUMBER", "NUMBER", "Hope", "this", "doesn", "t", "count", "as", "a", "hijack", "but", "I", "have", "a", "few", "thoughts", "I", "d", "like", "to", "see", "clarification", "on", "as", "well", "NUMBER", "I", "m", "trying", "to", "reconcile", "the", "Promise", "based", "implementation", "in", "TodoMVC", "with", "the", "callback", "based", "approach", "in", "the", "chat", "example", "NUMBER", "The", "callback", "driven", "one", "be", "newer", "NUMBER", "Should", "we", "be", "aware", "of", "some", "pitfalls", "in", "use", "promises", "that", "prompted", "this", "evolution", "My", "own", "thoughts", "The", "for", "loop", "indicates", "that", "all", "callbacks", "be", "invoked", "synchronously", "NUMBER", "This", "line", "LINK", "L", "NUMBER", "be", "invoked", "after", "iterating", "over", "dependencies", "if", "you", "re", "use", "waitFor", "the", "dispatch", "order", "sorts", "itself", "out", "as", "we", "recursively", "crawl", "dependencies", "otherwise", "we", "simply", "invoke", "the", "callbacks", "in", "the", "order", "the", "stores", "registered", "themselves", "with", "the", "dispatcher", "NUMBER", "It", "do", "seem", "like", "this", "would", "simplify", "reasoning", "about", "the", "dispatch", "loop", "there", "s", "no", "possibility", "of", "the", "dispatch", "loop", "yielding", "because", "of", "an", "asynchronous", "callback", "only", "to", "be", "overtaken", "by", "a", "subsequent", "action", "NUMBER", "In", "this", "case", "the", "callbacks", "all", "run", "to", "completion", "NUMBER", "If", "you", "need", "to", "do", "something", "asynchronous", "you", "should", "dispatch", "an", "action", "and", "when", "the", "asynchronous", "thing", "you", "re", "doing", "resolve", "have", "it", "trigger", "it", "s", "own", "dispatch", "loop", "instead", "of", "blocking", "the", "current", "one", "something", "which", "I", "believe", "be", "possible", "with", "the", "promise", "implementation", "NUMBER", "Tick", "ViewMessageAction", "DeleteMessageAction", "NUMBER", "MessageStore", "NUMBER", "MessageStore", "NUMBER", "pending", "MessageStore", "NUMBER", "NUMBER", "HeaderStore", "NUMBER", "MessageStore", "NUMBER", "fulfilled", "NUMBER", "HeaderStore", "It", "seems", "like", "this", "might", "lead", "to", "inadvertent", "sequential", "coupling", "between", "stores", "NUMBER", "The", "golang", "folks", "recently", "randomized", "the", "the", "order", "of", "keys", "inside", "their", "map", "s", "in", "order", "to", "keep", "developers", "from", "relying", "on", "what", "I", "assume", "was", "insertion", "order", "NUMBER", "I", "m", "wondering", "if", "similar", "reasoning", "can", "t", "be", "applied", "to", "the", "dispatcher", "Hi", "Currently", "I", "have", "the", "following", "order", "of", "events", "which", "be", "cause", "this", "error", "to", "occur", "NUMBER", "User", "click", "s", "a", "button", "to", "add", "a", "product", "to", "a", "cart", "the", "button", "calls", "action", "creator", "and", "send", "ADD_ITEM", "event", "which", "will", "be", "send", "throught", "the", "dispatcher", "to", "te", "stores", "NUMBER", "The", "cart", "store", "get", "this", "event", "and", "update", "with", "the", "product", "data", "sended", "throught", "the", "action", "NUMBER", "At", "the", "same", "time", "an", "API", "at", "the", "UTIL", "folder", "calls", "an", "async", "operation", "to", "write", "that", "update", "to", "the", "server", "For", "test", "purposes", "i", "m", "simulating", "an", "local", "API", "which", "makes", "the", "response", "be", "imediately", "NUMBER", "The", "idea", "be", "that", "the", "API", "will", "dispatch", "another", "event", "through", "the", "action", "creator", "once", "the", "response", "from", "the", "server", "arrives", "something", "like", "ADD_ITEM_SUCCESS", "or", "ADD_ITEM_ERROR", "should", "be", "dispatched", "throught", "the", "action", "creator", "NUMBER", "Currently", "that", "s", "the", "precisely", "moment", "when", "the", "error", "happens", "i", "m", "guessing", "that", "s", "because", "there", "be", "almost", "no", "delay", "between", "the", "ADD_iTEM", "and", "the", "response", "from", "the", "server", "event", "SUCCESS", "or", "ERROR", "NUMBER", "However", "if", "I", "encapsulate", "the", "code", "in", "a", "setTimeout", "function", "everything", "works", "fine", "even", "if", "I", "set", "the", "timeOut", "to", "be", "at", "only", "NUMBER", "ms", "or", "NUMBER", "Which", "leaves", "me", "thinking", "if", "that", "might", "be", "a", "bug", "in", "the", "currently", "version", "of", "the", "dispatcher", "Hi", "fisher", "thanks", "for", "your", "reply", "NUMBER", "I", "have", "be", "thinking", "about", "the", "best", "way", "to", "solve", "this", "and", "I", "ended", "up", "with", "a", "solution", "that", "need", "to", "use", "some", "sort", "of", "queue", "at", "the", "dispatcher", "NUMBER", "Here", "s", "my", "thoughts", "Sync", "or", "Async", "Action", "Creators", "Looking", "at", "the", "facebook", "chat", "example", "I", "saw", "that", "the", "external", "Api", "call", "be", "made", "through", "the", "WebChatApiUtil", "the", "Action", "Creator", "call", "it", "when", "creating", "a", "message", "and", "once", "the", "return", "from", "the", "server", "be", "back", "the", "WebChatApiUtil", "calls", "an", "action", "NUMBER", "The", "other", "solution", "that", "I", "find", "be", "the", "one", "use", "by", "Yahoo", "and", "Fluxxor", "and", "maybe", "some", "others", "that", "be", "to", "make", "the", "Action", "Creator", "async", "NUMBER", "Different", "from", "the", "Facebook", "Chat", "example", "the", "Action", "Creator", "dispatch", "an", "action", "call", "the", "Util", "that", "will", "sync", "with", "the", "server", "and", "then", "wait", "for", "the", "callback", "from", "the", "function", "NUMBER", "They", "both", "do", "basically", "the", "same", "thing", "but", "one", "use", "events", "and", "another", "use", "callbacks", "since", "all", "the", "flux", "idea", "be", "based", "on", "an", "event", "system", "I", "think", "that", "the", "first", "scenario", "be", "the", "best", "one", "NUMBER", "The", "problem", "that", "will", "happen", "with", "both", "solutions", "above", "Now", "both", "these", "solutions", "will", "end", "up", "with", "the", "same", "concurrency", "problem", "since", "we", "never", "know", "when", "the", "callback", "will", "arrive", "the", "event", "will", "be", "fired", "and", "the", "user", "might", "initiate", "new", "actions", "while", "we", "be", "waiting", "for", "this", "answer", "NUMBER", "As", "the", "application", "grows", "this", "becomes", "even", "more", "problematic", "since", "we", "can", "have", "many", "information", "arriving", "from", "the", "server", "keep", "data", "in", "sync", "NUMBER", "The", "root", "of", "this", "problem", "be", "from", "the", "fact", "that", "we", "have", "two", "sources", "of", "Actions", "the", "View", "Component", "user", "or", "the", "Api", "function", "server", "NUMBER", "To", "avoid", "this", "the", "solution", "that", "i", "m", "use", "so", "far", "be", "the", "following", "one", "NUMBER", "Only", "the", "file", "in", "Util", "folder", "that", "sync", "with", "the", "server", "and", "the", "Views", "react", "components", "can", "create", "actions", "through", "the", "Action", "Creators", "for", "instance", "stores", "should", "never", "call", "actions", "NUMBER", "The", "action", "creator", "fire", "and", "forget", "the", "function", "in", "the", "Util", "folder", "as", "needed", "to", "sync", "with", "the", "server", "once", "the", "payload", "be", "ready", "the", "Util", "will", "then", "call", "the", "action", "creator", "it", "needs", "with", "the", "correct", "action", "and", "payload", "just", "like", "shown", "at", "facebook", "chat", "app", "example", "NUMBER", "Stores", "only", "receive", "data", "from", "the", "dispatcher", "action", "creators", "send", "action", "throught", "the", "dispatcher", "only", "the", "views", "consume", "data", "from", "the", "store", "as", "the", "store", "emit", "change", "and", "stores", "subscribe", "to", "events", "in", "the", "dispatcher", "to", "update", "itself", "basic", "flux", "idea", "NUMBER", "The", "main", "difference", "actually", "happen", "at", "my", "AppDispatcher", "file", "I", "created", "a", "queued", "list", "use", "the", "async", "npm", "module", "so", "when", "the", "action", "creator", "call", "s", "something", "like", "handleViewAction", "source", "action", "or", "handleViewServer", "source", "action", "both", "these", "function", "will", "put", "a", "new", "request", "on", "the", "last", "place", "in", "the", "queued", "line", "so", "the", "actions", "will", "keep", "get", "fired", "in", "the", "same", "order", "they", "arrived", "and", "will", "all", "be", "controlled", "by", "the", "AppDispatcher", "so", "the", "rest", "of", "the", "App", "can", "keep", "work", "in", "a", "synchronous", "manner", "and", "don", "t", "worry", "about", "any", "of", "that", "Bellow", "that", "s", "how", "my", "AppDispatcher", "file", "currently", "looks", "like", "javascript", "var", "AppConstants", "require", "NUMBER", "constants", "AppConstants", "Dispatcher", "require", "flux", "NUMBER", "Dispatcher", "async", "require", "async", "assign", "require", "object", "assign", "PayloadSources", "AppConstants", "NUMBER", "PayloadSources", "dispatcher", "queue", "AppDispatcher", "dispatcher", "new", "Dispatcher", "queue", "async", "NUMBER", "queue", "function", "task", "callback", "var", "payload", "source", "PayloadSources", "task", "NUMBER", "source", "action", "task", "NUMBER", "action", "AppDispatcher", "NUMBER", "dispatch", "payload", "callback", "NUMBER", "only", "one", "worker", "one", "event", "at", "a", "time", "AppDispatcher", "assign", "dispatcher", "handleServerAction", "function", "action", "queue", "NUMBER", "push", "source", "SERVER_ACTION", "action", "action", "handleViewAction", "function", "action", "queue", "NUMBER", "push", "source", "VIEW_ACTION", "action", "action", "Would", "like", "to", "hear", "fisherwebdev", "feedback", "on", "the", "strategy", "use", "above", "NUMBER", "We", "be", "run", "into", "some", "of", "the", "same", "issue", "emitChange", "triggers", "a", "view", "to", "change", "in", "a", "manner", "that", "dispatches", "an", "action", "for", "example", "a", "DebugLog_Add", "action", "NUMBER", "I", "There", "be", "a", "great", "concept", "of", "Statecharts", "or", "UML", "State", "Machines", "which", "has", "some", "similarities", "with", "Flux", "NUMBER", "It", "be", "kind", "of", "stuck", "in", "academia", "world", "but", "be", "well", "established", "technology", "and", "test", "for", "decades", "NUMBER", "One", "of", "the", "similarities", "with", "Flux", "be", "the", "dispatch", "process", "NUMBER", "They", "call", "it", "RTC", "run", "to", "completion", "In", "the", "RTC", "model", "the", "system", "processes", "events", "in", "discrete", "indivisible", "RTC", "steps", "NUMBER", "New", "incoming", "events", "cannot", "interrupt", "the", "processing", "of", "the", "current", "event", "and", "must", "be", "stored", "typically", "in", "an", "event", "queue", "until", "the", "state", "machine", "becomes", "idle", "again", "NUMBER", "These", "semantics", "completely", "avoid", "any", "internal", "concurrency", "issue", "within", "a", "single", "state", "machine", "NUMBER", "The", "RTC", "model", "also", "gets", "around", "the", "conceptual", "problem", "of", "processing", "actions", "associated", "with", "transitions", "where", "the", "state", "machine", "be", "not", "in", "a", "well", "defined", "state", "be", "between", "two", "state", "for", "the", "duration", "of", "the", "action", "NUMBER", "LINK", "_state_machine", "Run", "to", "completion_execution_model", "So", "it", "be", "basically", "the", "same", "as", "Flux", "dispatch", "cycle", "with", "one", "major", "difference", "nested", "dispatches", "be", "allow", "but", "they", "be", "add", "to", "sync", "queue", "and", "dispatched", "only", "after", "current", "dispatch", "cycle", "be", "complete", "NUMBER", "The", "problem", "with", "Flux", "dispatcher", "right", "now", "be", "that", "sometimes", "you", "really", "need", "to", "fire", "some", "action", "in", "response", "to", "other", "action", "and", "this", "be", "perfectly", "valid", "case", "in", "Statecharts", "too", "NUMBER", "In", "some", "cases", "these", "actions", "be", "created", "in", "async", "handlers", "e", "NUMBER", "g", "NUMBER", "web", "api", "utils", "NUMBER", "So", "it", "kinda", "works", "because", "it", "doesn", "t", "interfere", "with", "current", "dispatch", "cycle", "NUMBER", "But", "why", "would", "you", "allow", "async", "operation", "from", "store", "and", "disallow", "sync", "one", "Only", "because", "sync", "operations", "may", "interfere", "with", "current", "dispatch", "process", "when", "your", "app", "be", "in", "non", "consistent", "state", "NUMBER", "I", "think", "RTC", "approach", "and", "sync", "queue", "solves", "this", "problem", "and", "doesn", "t", "add", "as", "much", "complexity", "or", "external", "dependencies", "to", "code", "as", "async", "queue", "NUMBER", "That", "s", "actually", "not", "the", "reasoning", "as", "to", "why", "we", "disallow", "the", "dispatch", "within", "a", "dispatch", "NUMBER", "The", "reason", "be", "that", "we", "be", "interested", "in", "preventing", "cascading", "update", "NUMBER", "This", "be", "the", "primary", "problem", "that", "causes", "complexity", "in", "the", "data", "layer", "leading", "it", "to", "become", "difficult", "for", "engineers", "to", "reason", "about", "how", "application", "state", "be", "change", "NUMBER", "The", "Flux", "perspective", "be", "that", "a", "mutation", "should", "not", "cause", "another", "mutation", "NUMBER", "Instead", "mutations", "be", "passive", "merely", "responding", "to", "things", "happening", "outside", "of", "the", "application", "the", "user", "clicks", "the", "server", "responds", "the", "browser", "cycles", "an", "animation", "frame", "etc", "NUMBER", "We", "ve", "talked", "about", "and", "experimented", "with", "creating", "an", "action", "queue", "in", "front", "of", "the", "dispatcher", "but", "we", "ve", "stopped", "short", "of", "going", "forward", "with", "it", "as", "it", "leads", "immediately", "to", "these", "cascading", "update", "NUMBER", "fisherwebdev", "So", "how", "do", "you", "cope", "with", "cascading", "update", "that", "should", "happen", "within", "the", "application", "Do", "you", "fire", "subsequent", "actions", "from", "stores", "in", "a", "setTimeout", "callback", "which", "in", "fact", "relies", "on", "the", "JavaScript", "internal", "event", "queue", "sompylasar", "I", "ve", "often", "find", "that", "cascading", "update", "can", "often", "be", "handle", "alternatively", "like", "so", "without", "need", "to", "use", "setTimeout", "someActionCreator", "NUMBER", "action", "function", "dispatcher", "NUMBER", "dispatch", "actionType", "A", "NUMBER", "dispatcher", "NUMBER", "dispatch", "actionType", "B", "NUMBER", "NUMBER", "There", "won", "t", "be", "a", "browser", "repaint", "until", "the", "thread", "be", "free", "NUMBER", "However", "fisherwebdev", "zpao", "I", "m", "not", "sure", "if", "this", "be", "a", "good", "bad", "or", "ugly", "practice", "Does", "FB", "code", "do", "this", "at", "all", "or", "be", "it", "just", "better", "to", "merge", "sequential", "dispatches", "A", "B", "above", "into", "a", "third", "dispatch", "C", "which", "conglomerates", "them", "sterpe", "Those", "sequential", "calls", "to", "dispatch", "be", "happening", "synchronously", "NUMBER", "They", "be", "separate", "dispatches", "so", "yes", "this", "works", "fine", "NUMBER", "However", "I", "ve", "never", "seen", "that", "do", "at", "FB", "and", "I", "m", "not", "sure", "why", "anyone", "would", "do", "that", "NUMBER", "We", "would", "simply", "merge", "them", "as", "you", "suggested", "NUMBER", "sompylasar", "We", "believe", "that", "cascading", "actions", "be", "a", "sign", "of", "a", "design", "problem", "and", "we", "avoid", "them", "entirely", "NUMBER", "When", "all", "stores", "be", "receiving", "all", "actions", "it", "s", "often", "trivial", "to", "simply", "respond", "to", "the", "original", "action", "and", "waitFor", "anything", "that", "needs", "to", "happen", "first", "NUMBER", "Thanks", "Sent", "from", "my", "iPhone", "On", "May", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Bill", "Fisher", "notifications", "github", "NUMBER", "com", "write", "sterpe", "Those", "sequential", "calls", "to", "dispatch", "be", "happening", "synchronously", "NUMBER", "They", "be", "separate", "dispatches", "so", "yes", "this", "works", "fine", "NUMBER", "However", "I", "ve", "never", "seen", "that", "do", "at", "FB", "and", "I", "m", "not", "sure", "why", "anyone", "would", "do", "that", "NUMBER", "We", "would", "simply", "merge", "them", "as", "you", "suggested", "NUMBER", "sompylasar", "We", "believe", "that", "cascading", "actions", "be", "a", "sign", "of", "a", "design", "problem", "and", "we", "avoid", "them", "entirely", "NUMBER", "When", "all", "stores", "be", "receiving", "all", "actions", "it", "s", "often", "trivial", "to", "simply", "respond", "to", "the", "original", "action", "and", "waitFor", "anything", "that", "needs", "to", "happen", "first", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "If", "anyone", "be", "interested", "I", "ve", "modify", "the", "fabiozaffani", "s", "dispatcher", "to", "work", "without", "async", "and", "it", "solve", "all", "of", "our", "Cannot", "dispatch", "in", "the", "middle", "of", "dispatch", "problem", "NUMBER", "In", "our", "case", "components", "that", "had", "their", "data", "loaded", "in", "store", "were", "display", "components", "that", "in", "their", "turn", "throw", "actions", "to", "load", "their", "content", "so", "that", "cause", "the", "error", "NUMBER", "Queue", "solves", "it", "and", "order", "remains", "the", "same", "NUMBER", "Here", "s", "the", "code", "Note", "that", "it", "s", "not", "implement", "NUMBER", "methods", "handleServerAction", "and", "handleViewAction", "but", "just", "handleAction", "NUMBER", "It", "be", "use", "tiny", "sync", "queue", "dependency", "NUMBER", "LINK", "queue", "use", "strict", "import", "Flux", "from", "flux", "import", "assign", "from", "react", "lib", "Object", "NUMBER", "assign", "import", "Queue", "from", "sync", "queue", "let", "queue", "new", "Queue", "let", "Dispatcher", "assign", "new", "Flux", "NUMBER", "Dispatcher", "handleAction", "action", "data", "let", "payload", "payload", "assign", "event", "action", "data", "queue", "NUMBER", "place", "this", "NUMBER", "dispatch", "payload", "queue", "NUMBER", "next", "export", "default", "Dispatcher", "I", "have", "a", "similar", "situation", "to", "mkrn", "s", "I", "have", "a", "component", "that", "can", "have", "anywhere", "from", "NUMBER", "NUMBER", "child", "components", "that", "each", "trigger", "an", "action", "to", "load", "their", "own", "data", "NUMBER", "When", "one", "of", "those", "FETCH_DATA", "actions", "gets", "dispatched", "at", "the", "same", "time", "as", "a", "previous", "request", "s", "SUCCESS", "action", "I", "get", "the", "Cannot", "dispatch", "in", "the", "middle", "of", "a", "dispatch", "NUMBER", "error", "NUMBER", "I", "m", "wondering", "if", "there", "s", "a", "better", "way", "for", "achieving", "this", "for", "now", "I", "think", "I", "will", "go", "with", "mkrn", "s", "solution", "NUMBER", "How", "about", "following", "as", "a", "solution", "I", "had", "to", "override", "_stopDispatching", "but", "FB", "can", "provide", "a", "flux", "hook", "something", "like", "onDispatchCompletion", "fisherwebdev", "var", "Dispatcher", "require", "flux", "NUMBER", "Dispatcher", "nbsp", "nbsp", "appDispatcher", "new", "Dispatcher", "appDispatcher", "NUMBER", "handleAction", "function", "action", "nbsp", "nbsp", "this", "NUMBER", "dispatch", "nbsp", "nbsp", "nbsp", "nbsp", "source", "VIEW_ACTION", "nbsp", "nbsp", "nbsp", "nbsp", "action", "action", "nbsp", "nbsp", "appDispatcher", "NUMBER", "dispatch", "function", "dispatchAction", "nbsp", "nbsp", "if", "this", "NUMBER", "isDispatching", "nbsp", "nbsp", "nbsp", "nbsp", "this", "NUMBER", "_pendingDispatches", "this", "NUMBER", "_pendingDispatches", "nbsp", "nbsp", "nbsp", "nbsp", "this", "NUMBER", "_pendingDispatches", "NUMBER", "push", "dispatchAction", "nbsp", "nbsp", "else", "nbsp", "nbsp", "nbsp", "nbsp", "Dispatcher", "NUMBER", "prototype", "NUMBER", "dispatch", "NUMBER", "call", "this", "dispatchAction", "nbsp", "nbsp", "appDispatcher", "NUMBER", "_stopDispatching", "function", "nbsp", "nbsp", "var", "pendingDispatch", "nbsp", "nbsp", "Dispatcher", "NUMBER", "prototype", "NUMBER", "_stopDispatching", "NUMBER", "call", "this", "nbsp", "nbsp", "if", "this", "NUMBER", "_pendingDispatches", "this", "NUMBER", "_pendingDispatches", "NUMBER", "length", "NUMBER", "nbsp", "nbsp", "nbsp", "nbsp", "pendingDispatch", "this", "NUMBER", "_pendingDispatches", "NUMBER", "shift", "nbsp", "nbsp", "nbsp", "nbsp", "Dispatcher", "NUMBER", "prototype", "NUMBER", "dispatch", "NUMBER", "call", "this", "pendingDispatch", "nbsp", "nbsp", "module", "NUMBER", "export", "appDispatcher", "It", "would", "be", "great", "to", "see", "some", "example", "unit", "test", "for", "components", "and", "mocking", "the", "stores", "NUMBER", "Also", "relate", "when", "cd", "to", "examples", "flux", "todomvc", "and", "run", "npm", "test", "I", "see", "it", "starts", "up", "Jest", "but", "it", "just", "hangs", "without", "run", "any", "of", "the", "actual", "test", "NUMBER", "What", "gives", "Jest", "has", "issue", "when", "run", "in", "node", "iojs", "NUMBER", "could", "be", "that", "NUMBER", "I", "be", "following", "the", "unit", "test", "for", "TotoStores", "NUMBER", "js", "NUMBER", "Writing", "up", "my", "own", "unit", "test", "according", "to", "this", "file", "LINK", "todomvc", "js", "stores", "test", "TodoStore", "test", "NUMBER", "js", "It", "fail", "on", "this", "line", "callback", "AppDispatcher", "NUMBER", "register", "NUMBER", "mock", "NUMBER", "calls", "NUMBER", "NUMBER", "Unit", "test", "error", "output", "TypeError", "Cannot", "read", "property", "NUMBER", "of", "undefined", "NUMBER", "Here", "be", "my", "sample", "code", "LINK", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "I", "m", "down", "with", "this", "issue", "as", "well", "NUMBER", "Looks", "like", "callback", "be", "not", "registered", "with", "the", "dispatcher", "NUMBER", "AppDispatcher", "NUMBER", "register", "NUMBER", "mock", "returns", "calls", "instances", "NUMBER", "Everything", "be", "mocked", "except", "mystore", "and", "object", "assign", "NUMBER", "Node", "v", "NUMBER", "Jest", "v", "NUMBER", "Not", "sure", "if", "this", "be", "fix", "and", "close", "NUMBER", "be", "there", "a", "workaround", "Having", "same", "issue", "as", "sahas", "i", "m", "having", "the", "same", "issue", "NUMBER", "Any", "update", "on", "this", "I", "m", "having", "something", "similar", "to", "this", "one", "TypeError", "Cannot", "read", "property", "calls", "of", "undefined", "any", "idea", "how", "to", "pass", "this", "error", "Wouldn", "t", "something", "like", "the", "following", "encourage", "better", "encapsulation", "javascript", "var", "_emitter", "new", "EventEmitter", "var", "MyStore", "emitChange", "_emitter", "NUMBER", "emit", "change", "addChangeListener", "callback", "_emitter", "NUMBER", "on", "change", "callback", "removeChangeListener", "callback", "_emitter", "NUMBER", "removeListener", "change", "callback", "I", "m", "not", "sure", "this", "would", "even", "run", "NUMBER", "I", "m", "looking", "solutions", "for", "our", "single", "page", "app", "build", "with", "React", "and", "Backbone", "NUMBER", "And", "in", "Backbone", "a", "view", "listens", "to", "its", "own", "Model", "or", "Collection", "NUMBER", "So", "given", "a", "View", "of", "message", "it", "do", "not", "refresh", "when", "a", "message", "of", "another", "room", "update", "NUMBER", "While", "in", "React", "it", "appears", "maintaining", "Stores", "like", "Models", "be", "quite", "a", "bad", "idea", "NUMBER", "In", "the", "Chat", "demo", "there", "be", "only", "one", "MessageStore", "here", "NUMBER", "LINK", "chat", "js", "stores", "Suppose", "someone", "be", "chatting", "in", "room", "A", "update", "of", "room", "B", "may", "trigger", "a", "View", "refresh", "NUMBER", "When", "there", "be", "hundreds", "of", "message", "we", "may", "face", "a", "issue", "of", "performance", "NUMBER", "So", "I", "quite", "like", "to", "know", "what", "s", "your", "concern", "when", "you", "write", "the", "Chat", "demo", "how", "about", "that", "it", "performance", "when", "it", "gets", "large", "Hi", "jiyinyiyong", "The", "way", "we", "ve", "tried", "to", "deal", "with", "this", "be", "by", "not", "use", "singletons", "but", "instead", "pass", "a", "factory", "into", "the", "React", "components", "that", "will", "allow", "them", "to", "create", "their", "own", "Stores", "ActionCreators", "etc", "LINK", "NUMBER", "this", "be", "OK", "for", "us", "because", "we", "would", "use", "React", "for", "components", "in", "the", "page", "and", "not", "the", "entire", "app", "so", "we", "create", "a", "new", "factory", "per", "component", "NUMBER", "I", "m", "sure", "it", "should", "still", "work", "for", "full", "React", "applications", "though", "NUMBER", "Hi", "jiyinyiyong", "I", "work", "on", "Messages", "at", "FB", "NUMBER", "In", "our", "actual", "implementation", "we", "include", "thread", "IDs", "as", "data", "with", "the", "Store", "s", "change", "event", "NUMBER", "If", "the", "thread", "ID", "doesn", "t", "match", "the", "view", "s", "thread", "ID", "pass", "as", "a", "prop", "we", "ignore", "the", "change", "event", "NUMBER", "In", "addition", "to", "that", "we", "use", "immutable", "data", "wherever", "we", "can", "so", "we", "can", "short", "circuit", "re", "rendering", "when", "data", "hasn", "t", "change", "NUMBER", "Check", "out", "immutable", "js", "LINK", "js", "if", "you", "haven", "t", "already", "briandipalma", "By", "creating", "one", "store", "per", "component", "there", "s", "one", "issue", "on", "my", "side", "NUMBER", "We", "have", "server", "push", "events", "in", "our", "app", "NUMBER", "While", "Stores", "be", "placed", "inside", "components", "those", "Stores", "need", "their", "own", "solution", "to", "listen", "update", "from", "server", "and", "update", "themselves", "which", "need", "a", "lot", "of", "code", "NUMBER", "kmeht", "It", "s", "quite", "nice", "to", "hear", "Facebook", "s", "solution", "on", "this", "NUMBER", "Trigger", "change", "events", "with", "IDs", "be", "a", "reasonable", "solution", "NUMBER", "I", "want", "to", "look", "deeper", "into", "it", "NUMBER", "Immutable", "js", "be", "nice", "NUMBER", "Since", "our", "app", "currently", "uses", "Backbone", "Models", "it", "s", "not", "easy", "for", "us", "to", "switch", "at", "this", "moment", "NUMBER", "By", "component", "I", "mean", "something", "that", "would", "be", "a", "useable", "piece", "of", "functionality", "on", "it", "s", "own", "but", "that", "could", "be", "composed", "of", "many", "smaller", "React", "components", "NUMBER", "So", "for", "example", "the", "chat", "users", "and", "chat", "windows", "in", "FB", "would", "be", "a", "chat", "component", "NUMBER", "It", "be", "made", "up", "of", "many", "smaller", "React", "components", "though", "NUMBER", "On", "their", "own", "they", "aren", "t", "much", "use", "but", "composed", "together", "they", "provide", "a", "feature", "NUMBER", "There", "should", "very", "little", "extra", "code", "it", "s", "all", "exactly", "the", "same", "structure", "with", "APIUtilities", "provide", "message", "it", "s", "just", "instead", "of", "singletons", "they", "would", "be", "instances", "NUMBER", "The", "factory", "news", "them", "up", "if", "they", "don", "t", "already", "exist", "and", "provides", "them", "to", "any", "Store", "or", "View", "that", "request", "one", "NUMBER", "So", "for", "example", "each", "chat", "window", "would", "have", "it", "s", "own", "Store", "ActionCreator", "Utility", "instances", "but", "they", "be", "all", "the", "same", "classes", "in", "the", "same", "modules", "NUMBER", "The", "only", "difference", "be", "you", "don", "t", "have", "to", "write", "javascript", "if", "action", "NUMBER", "id", "this", "NUMBER", "myid", "all", "the", "time", "NUMBER", "briandipalma", "I", "think", "I", "didn", "t", "get", "your", "meaning", "here", "NUMBER", "Is", "there", "any", "example", "on", "GitHub", "that", "implement", "your", "soultion", "Maybe", "I", "can", "just", "see", "how", "it", "works", "NUMBER", "jiyinyiyong", "Nope", "I", "m", "sorry", "I", "have", "no", "OSS", "that", "implement", "this", "slight", "devitation", "from", "flux", "but", "I", "have", "be", "meaning", "for", "a", "long", "time", "to", "write", "up", "a", "blog", "on", "it", "NUMBER", "I", "really", "should", "finish", "it", "off", "NUMBER", "In", "essence", "everywhere", "that", "you", "use", "singletons", "in", "normal", "flux", "you", "instead", "call", "the", "factory", "and", "ask", "for", "a", "Store", "ActionCreator", "Utility", "and", "as", "the", "factory", "be", "rooted", "by", "a", "certain", "React", "view", "all", "classes", "below", "that", "root", "use", "the", "same", "factory", "and", "therefore", "the", "same", "instances", "NUMBER", "The", "factory", "be", "pass", "down", "into", "all", "the", "React", "child", "views", "as", "a", "prop", "so", "they", "all", "can", "access", "the", "same", "instances", "NUMBER", "There", "be", "some", "simple", "code", "in", "the", "slides", "I", "linked", "to", "that", "might", "help", "explain", "it", "all", "NUMBER", "briandipalma", "I", "m", "not", "sure", "about", "my", "comprehsnsion", "about", "the", "term", "factory", "NUMBER", "I", "can", "see", "in", "you", "solution", "there", "s", "still", "one", "store", "which", "be", "than", "pass", "down", "too", "all", "children", "from", "its", "root", "component", "NUMBER", "So", "that", "every", "component", "still", "listens", "to", "a", "same", "Store", "NUMBER", "Is", "that", "correct", "briandipalma", "Looks", "like", "what", "you", "have", "call", "a", "Factory", "be", "actually", "a", "Factory", "Service", "Locator", "NUMBER", "The", "Factory", "part", "internally", "creates", "an", "instance", "of", "a", "Store", "ActionCreator", "Utility", "via", "register", "the", "Service", "Locator", "part", "returns", "the", "previously", "registered", "instance", "via", "get", "NUMBER", "jiyinyiyong", "The", "factory", "creates", "Stores", "ActionCreators", "Utilities", "NUMBER", "There", "be", "one", "Store", "class", "but", "there", "can", "be", "NUMBER", "or", "more", "instances", "of", "the", "Store", "class", "NUMBER", "The", "Store", "isn", "t", "pass", "down", "through", "the", "components", "the", "factory", "be", "NUMBER", "It", "be", "a", "registry", "for", "all", "the", "instances", "that", "be", "relevant", "for", "a", "specific", "component", "tree", "NUMBER", "Imagine", "you", "have", "a", "ChatWindow", "NUMBER", "react", "NUMBER", "js", "component", "and", "it", "be", "composed", "of", "several", "other", "React", "components", "like", "a", "ChatMessagesList", "NUMBER", "react", "NUMBER", "js", "and", "ChatMessageInput", "NUMBER", "react", "NUMBER", "js", "NUMBER", "A", "user", "can", "have", "NUMBER", "or", "more", "open", "chat", "windows", "in", "the", "application", "and", "you", "don", "t", "want", "all", "the", "relevant", "Stores", "sharing", "the", "same", "data", "NUMBER", "So", "in", "the", "case", "of", "two", "chat", "windows", "you", "render", "your", "react", "components", "into", "two", "different", "mount", "nodes", "and", "you", "provide", "each", "component", "tree", "with", "a", "different", "factory", "NUMBER", "javascript", "const", "chatDependenciesFactory", "new", "ChatDependenciesFactory", "chatDispatcher", "React", "NUMBER", "renderComponent", "TAG", "this", "NUMBER", "_mountNode", "const", "anotherChatDependenciesFactory", "new", "ChatDependenciesFactory", "anotherChatDispatcher", "React", "NUMBER", "renderComponent", "TAG", "this", "NUMBER", "_anotherMountNode", "So", "the", "component", "trees", "have", "different", "factories", "which", "means", "they", "have", "different", "Stores", "Dispatcher", "etc", "NUMBER", "It", "s", "still", "flux", "it", "s", "just", "scoped", "at", "the", "component", "level", "as", "oppose", "to", "singleton", "global", "app", "level", "NUMBER", "Now", "you", "would", "not", "write", "the", "code", "above", "of", "course", "the", "ChatWindows", "would", "be", "dynamically", "created", "as", "the", "user", "opens", "more", "of", "them", "but", "I", "hope", "it", "helps", "explain", "the", "object", "lifecycles", "and", "links", "NUMBER", "sompylasar", "I", "wouldn", "t", "expect", "there", "to", "be", "many", "different", "unrelated", "Service", "Locators", "present", "in", "an", "application", "it", "would", "normally", "be", "a", "single", "source", "of", "truth", "but", "as", "I", "explained", "you", "can", "have", "many", "different", "factories", "operate", "at", "the", "same", "time", "all", "they", "do", "be", "new", "a", "Store", "etc", "when", "they", "be", "asked", "for", "one", "if", "one", "doesn", "t", "already", "exist", "they", "aren", "t", "application", "service", "repositories", "NUMBER", "briandipalma", "interesting", "NUMBER", "How", "do", "you", "find", "multiple", "component", "level", "dispatchers", "in", "practice", "Do", "you", "ever", "need", "to", "communicate", "x", "dispatchers", "Sent", "from", "my", "iPhone", "On", "Nov", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Brian", "Di", "Palma", "notifications", "github", "NUMBER", "com", "write", "jiyinyiyong", "The", "factory", "creates", "Stores", "ActionCreators", "Utilities", "NUMBER", "There", "be", "one", "Store", "class", "but", "there", "can", "be", "NUMBER", "or", "more", "instances", "of", "the", "Store", "class", "NUMBER", "The", "Store", "isn", "t", "pass", "down", "through", "the", "components", "the", "factory", "be", "NUMBER", "It", "be", "a", "registry", "for", "all", "the", "instances", "that", "be", "relevant", "for", "a", "specific", "component", "tree", "NUMBER", "Imagine", "you", "have", "a", "ChatWindow", "NUMBER", "react", "NUMBER", "js", "component", "and", "it", "be", "composed", "of", "several", "other", "React", "components", "like", "a", "ChatMessagesList", "NUMBER", "react", "NUMBER", "js", "and", "ChatMessageInput", "NUMBER", "react", "NUMBER", "js", "NUMBER", "A", "user", "can", "have", "NUMBER", "or", "more", "open", "chat", "windows", "in", "the", "application", "and", "you", "don", "t", "want", "all", "the", "relevant", "Stores", "sharing", "the", "same", "data", "NUMBER", "So", "in", "the", "case", "of", "two", "chat", "windows", "you", "render", "your", "react", "components", "into", "two", "different", "mount", "nodes", "and", "you", "provide", "each", "component", "tree", "with", "a", "different", "factory", "NUMBER", "const", "chatDependenciesFactory", "new", "ChatDependenciesFactory", "chatDispatcher", "React", "NUMBER", "renderComponent", "TAG", "this", "NUMBER", "_mountNode", "const", "anotherChatDependenciesFactory", "new", "ChatDependenciesFactory", "anotherChatDispatcher", "React", "NUMBER", "renderComponent", "TAG", "this", "NUMBER", "_anotherMountNode", "So", "the", "component", "trees", "have", "different", "factories", "which", "means", "they", "have", "different", "Stores", "Dispatcher", "etc", "NUMBER", "It", "s", "still", "flux", "it", "s", "just", "scoped", "at", "the", "component", "level", "as", "oppose", "to", "singleton", "global", "app", "level", "NUMBER", "Now", "you", "would", "not", "write", "the", "code", "above", "of", "course", "the", "ChatWindows", "would", "be", "dynamically", "created", "as", "the", "user", "opens", "more", "of", "them", "but", "I", "hope", "it", "helps", "explain", "the", "object", "lifecycles", "and", "links", "NUMBER", "sompylasar", "I", "wouldn", "t", "expect", "there", "to", "be", "many", "different", "unrelated", "Service", "Locators", "present", "in", "an", "application", "it", "would", "normally", "be", "a", "single", "source", "of", "truth", "but", "as", "I", "explained", "you", "can", "have", "many", "different", "factories", "operate", "at", "the", "same", "time", "all", "they", "do", "be", "new", "a", "Store", "etc", "when", "they", "be", "asked", "for", "one", "if", "one", "doesn", "t", "already", "exist", "they", "aren", "t", "application", "service", "repositories", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "js", "const", "chatDependenciesFactory", "new", "ChatDependenciesFactory", "chatDispatcher", "it", "s", "just", "scoped", "at", "the", "component", "level", "as", "oppose", "to", "singleton", "global", "app", "level", "NUMBER", "Now", "I", "know", "that", "each", "components", "get", "a", "factory", "created", "from", "Dispatcher", "NUMBER", "However", "the", "whole", "graph", "how", "data", "flow", "pass", "from", "Stores", "to", "Views", "also", "Actions", "be", "still", "unclear", "NUMBER", "sterpe", "I", "think", "it", "would", "be", "helpful", "if", "I", "provide", "context", "NUMBER", "We", "already", "have", "many", "large", "web", "apps", "for", "online", "trading", "FX", "stock", "trading", "instutional", "trader", "mobile", "etc", "NUMBER", "These", "apps", "were", "mostly", "build", "with", "components", "that", "use", "a", "wrapper", "library", "around", "KO", "NUMBER", "These", "components", "would", "be", "trade", "tickets", "tiles", "and", "grids", "NUMBER", "As", "we", "sometimes", "needed", "inter", "component", "communication", "we", "have", "an", "app", "wide", "event", "bus", "already", "in", "place", "for", "such", "purposes", "NUMBER", "That", "be", "what", "we", "would", "use", "even", "with", "React", "flux", "based", "components", "NUMBER", "I", "think", "use", "React", "flux", "rooted", "at", "individual", "components", "and", "a", "separate", "event", "bus", "for", "app", "communications", "be", "perfectly", "acceptable", "NUMBER", "At", "the", "end", "of", "the", "day", "the", "complexity", "be", "mostly", "inside", "those", "components", "and", "inter", "component", "communication", "be", "the", "exception", "NUMBER", "jiyinyiyong", "The", "Stores", "be", "created", "by", "the", "factory", "if", "they", "don", "t", "already", "exist", "so", "instead", "of", "NUMBER", "javascript", "const", "ChatMessagesStore", "require", "ChatMessagesStore", "In", "the", "component", "module", "you", "do", "this", "javascript", "componentWillMount", "function", "this", "NUMBER", "props", "NUMBER", "factory", "NUMBER", "getStore", "ChatMessages", "NUMBER", "addChangeListener", "this", "NUMBER", "_onChange", "this", "Which", "returns", "an", "instance", "of", "the", "Store", "scoped", "for", "your", "component", "NUMBER", "Call", "it", "a", "second", "time", "and", "you", "get", "the", "same", "instance", "as", "the", "factory", "retains", "it", "NUMBER", "The", "factory", "pass", "itself", "into", "the", "Store", "so", "the", "Store", "can", "register", "with", "the", "dispatcher", "by", "ask", "for", "it", "NUMBER", "The", "API", "from", "the", "slides", "with", "one", "change", "NUMBER", "javascript", "class", "ComponentDependenciesFactory", "constructor", "state", "dispatcher", "registerActionCreator", "actionCreatorName", "actionCreatorClass", "registerUtility", "utilityName", "utilityClass", "registerStore", "storeName", "storeClass", "getActionCreator", "actionCreatorName", "getUtility", "utilityName", "getStore", "storeName", "getDispatcher", "The", "change", "be", "state", "as", "a", "parameter", "to", "the", "factory", "constructor", "NUMBER", "This", "be", "the", "initialization", "data", "that", "the", "Stores", "might", "need", "NUMBER", "It", "s", "an", "object", "literal", "NUMBER", "When", "the", "factory", "creates", "the", "Stores", "it", "also", "pass", "in", "to", "them", "a", "Cursor", "which", "wraps", "around", "a", "part", "of", "that", "state", "object", "literal", "so", "that", "the", "Store", "has", "the", "correct", "initial", "data", "for", "your", "example", "a", "chat", "channel", "to", "a", "specific", "user", "each", "window", "would", "have", "a", "different", "chat", "channel", "subscription", "subject", "name", "i", "NUMBER", "e", "NUMBER", "CHAT", "USER", "NUMBER", "USER", "NUMBER", "NUMBER", "You", "could", "serialize", "our", "components", "and", "they", "have", "a", "lot", "of", "state", "so", "we", "needed", "this", "but", "you", "might", "not", "NUMBER", "Nothing", "was", "global", "and", "everything", "was", "provide", "via", "the", "factory", "which", "allow", "us", "to", "inject", "in", "component", "specific", "dependencies", "NUMBER", "The", "data", "flow", "be", "still", "exactly", "the", "same", "as", "normal", "flux", "the", "only", "difference", "be", "instances", "instead", "of", "singletons", "NUMBER", "briandipalma", "Thanks", "NUMBER", "Now", "I", "see", "how", "Factories", "connect", "to", "Stores", "NUMBER", "Hopefully", "I", "will", "get", "more", "details", "when", "I", "implement", "one", "in", "my", "own", "app", "NUMBER", "briandipalma", "This", "sounds", "very", "similar", "to", "what", "we", "re", "doing", "with", "LINK", "and", "LINK", "app", "NUMBER", "We", "re", "use", "classes", "for", "stores", "and", "the", "dispatcher", "instead", "of", "singletons", "and", "fluxible", "app", "provides", "the", "central", "piece", "that", "all", "of", "the", "actions", "flow", "through", "to", "provide", "access", "to", "the", "store", "instances", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "As", "PR", "NUMBER", "if", "dispatcherIndex", "be", "a", "property", "of", "the", "store", "I", "think", "you", "need", "a", "comma", "here", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "I", "think", "it", "s", "kind", "of", "silly", "that", "clients", "of", "this", "module", "still", "have", "to", "write", "the", "same", "boilerplate", "for", "their", "stores", "NUMBER", "I", "think", "it", "d", "be", "nice", "to", "provide", "a", "base", "for", "clients", "NUMBER", "The", "simplest", "way", "to", "do", "this", "would", "be", "to", "do", "something", "like", "this", "js", "var", "EventEmitter", "require", "events", "NUMBER", "EventEmitter", "var", "assign", "require", "react", "lib", "Object", "NUMBER", "assign", "var", "CHANGE_EVENT", "change", "var", "Store", "assign", "EventEmitter", "NUMBER", "prototype", "emitChange", "function", "this", "NUMBER", "emit", "CHANGE_EVENT", "param", "function", "callback", "addChangeListener", "function", "callback", "this", "NUMBER", "on", "CHANGE_EVENT", "callback", "param", "function", "callback", "removeChangeListener", "function", "callback", "this", "NUMBER", "removeListener", "CHANGE_EVENT", "callback", "module", "NUMBER", "export", "Store", "For", "even", "better", "usability", "a", "constructing", "function", "could", "be", "provide", "js", "function", "createStore", "dispatcherCallback", "methods", "return", "assign", "BaseStore", "methods", "dispatcherIndex", "Dispatcher", "NUMBER", "register", "dispatcherCallback", "Here", "s", "an", "example", "of", "how", "I", "think", "it", "could", "be", "do", "use", "LINK", "puzzle", "blob", "c", "NUMBER", "e", "NUMBER", "d", "NUMBER", "b", "NUMBER", "aa", "NUMBER", "ccf", "NUMBER", "c", "NUMBER", "e", "NUMBER", "c", "NUMBER", "a", "NUMBER", "e", "NUMBER", "f", "NUMBER", "src", "Store", "NUMBER", "js", "L", "NUMBER", "Thoughts", "Are", "people", "s", "implementations", "of", "stores", "much", "too", "different", "to", "handle", "something", "like", "this", "Might", "be", "use", "Backbone", "NUMBER", "event", "NUMBER", "Sent", "from", "my", "iPhone", "On", "Nov", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Justin", "Woo", "notifications", "github", "NUMBER", "com", "write", "I", "think", "it", "s", "kind", "of", "silly", "that", "clients", "of", "this", "module", "still", "have", "to", "write", "the", "same", "boilerplate", "for", "their", "stores", "NUMBER", "I", "think", "it", "d", "be", "nice", "to", "provide", "a", "base", "for", "clients", "NUMBER", "The", "simplest", "way", "to", "do", "this", "would", "be", "to", "do", "something", "like", "this", "var", "EventEmitter", "require", "events", "NUMBER", "EventEmitter", "var", "assign", "require", "react", "lib", "Object", "NUMBER", "assign", "var", "Store", "assign", "EventEmitter", "NUMBER", "prototype", "emitChange", "function", "this", "NUMBER", "emit", "CHANGE_EVENT", "param", "function", "callback", "addChangeListener", "function", "callback", "this", "NUMBER", "on", "CHANGE_EVENT", "callback", "param", "function", "callback", "removeChangeListener", "function", "callback", "this", "NUMBER", "removeListener", "CHANGE_EVENT", "callback", "module", "NUMBER", "export", "Store", "For", "even", "better", "usability", "a", "constructing", "function", "could", "be", "provide", "function", "createStore", "dispatcherCallback", "methods", "return", "assign", "BaseStore", "methods", "dispatcherIndex", "Dispatcher", "NUMBER", "register", "dispatcherCallback", "Here", "s", "an", "example", "of", "how", "I", "think", "it", "could", "be", "do", "use", "LINK", "puzzle", "blob", "master", "src", "Store", "NUMBER", "js", "L", "NUMBER", "Thoughts", "Are", "people", "s", "implementations", "of", "stores", "much", "too", "different", "to", "handle", "something", "like", "this", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "I", "m", "happy", "to", "share", "flux", "store", "LINK", "store", "heart", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "We", "just", "release", "some", "of", "the", "basic", "Flux", "infrastructure", "we", "use", "at", "Facebook", "including", "a", "base", "store", "NUMBER", "LINK", "utils", "NUMBER", "html", "content", "cool", "thanks", "beer", "This", "error", "be", "raise", "at", "build", "time", "NUMBER", "TodoConstants", "NUMBER", "js", "requires", "keyMirror", "instead", "of", "keymirror", "NUMBER", "This", "error", "be", "useful", "to", "spot", "cascading", "actions", "but", "it", "can", "sometimes", "be", "difficult", "to", "track", "down", "the", "cause", "NUMBER", "Adding", "information", "on", "the", "_pendingPayload", "as", "well", "as", "the", "payload", "that", "triggered", "the", "error", "could", "be", "useful", "NUMBER", "iirvine", "s", "Dispatcher", "has", "a", "nice", "warning", "message", "in", "this", "spirit", "LINK", "flux", "blob", "master", "src", "Dispatcher", "NUMBER", "js", "NUMBER", "How", "to", "display", "each", "payload", "One", "idea", "could", "be", "having", "a", "_displayAction", "method", "that", "you", "could", "override", "when", "constructing", "the", "Dispatcher", "Something", "like", "javascript", "constructor", "options", "if", "options", "options", "NUMBER", "displayAction", "this", "NUMBER", "_displayAction", "options", "NUMBER", "displayAction", "_displayAction", "payload", "return", "payload", "NUMBER", "type", "dispatch", "payload", "invariant", "this", "NUMBER", "_isDispatching", "Dispatch", "NUMBER", "dispatch", "NUMBER", "Cannot", "dispatch", "in", "the", "middle", "of", "a", "dispatch", "NUMBER", "Received", "action", "this", "NUMBER", "_displayAction", "payload", "while", "still", "dispatching", "action", "this", "NUMBER", "_displayAction", "this", "NUMBER", "_pendingPayload", "NUMBER", "I", "can", "try", "to", "put", "together", "a", "PR", "for", "this", "but", "wanted", "to", "jot", "down", "some", "ideas", "here", "first", "see", "what", "you", "think", "NUMBER", "Thanks", "for", "the", "feedback", "NUMBER", "That", "makes", "a", "lot", "of", "sense", "NUMBER", "A", "couple", "of", "question", "though", "I", "assume", "we", "need", "to", "pass", "strings", "to", "invariant", "so", "should", "we", "JSON", "NUMBER", "ringify", "payload", "What", "about", "potentially", "big", "payloads", "ex", "with", "large", "arrays", "Maybe", "we", "can", "choose", "to", "leave", "the", "error", "as", "be", "by", "default", "but", "if", "the", "client", "pass", "a", "displayPayload", "function", "to", "the", "Dispatcher", "constructor", "more", "error", "information", "will", "be", "display", "Re", "NUMBER", "it", "could", "be", "but", "how", "big", "be", "it", "really", "going", "to", "be", "And", "at", "this", "point", "you", "ve", "had", "something", "of", "a", "critical", "breakdown", "anyway", "so", "it", "feels", "less", "important", "that", "you", "might", "be", "hanging", "the", "browser", "on", "a", "long", "JSON", "NUMBER", "ringify", "when", "your", "app", "has", "effectively", "already", "crashed", "NUMBER", "Sent", "from", "my", "iPhone", "On", "Nov", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Nicolas", "Hery", "notifications", "github", "NUMBER", "com", "write", "Thanks", "for", "the", "feedback", "NUMBER", "That", "makes", "a", "lot", "of", "sense", "NUMBER", "A", "couple", "of", "question", "though", "I", "assume", "we", "need", "to", "pass", "strings", "to", "invariant", "so", "should", "we", "JSON", "NUMBER", "ringify", "payload", "What", "about", "potentially", "big", "payloads", "ex", "with", "large", "arrays", "Maybe", "we", "can", "choose", "to", "leave", "the", "error", "as", "be", "by", "default", "but", "if", "the", "client", "pass", "a", "displayPayload", "function", "to", "the", "Dispatcher", "constructor", "more", "error", "information", "will", "be", "display", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "The", "removeListener", "was", "miss", "in", "this", "store", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Seems", "like", "MessageStore", "be", "miss", "removeChangeListener", "method", "just", "did", "the", "Pull", "Request", "NUMBER", "deprecates", "usage", "of", "merge", "and", "copyProperties", "and", "autofactories", "Object", "NUMBER", "assign", "be", "provide", "in", "react", "lib", "Object", "NUMBER", "assign", "as", "of", "now", "but", "may", "move", "to", "a", "more", "freely", "accessible", "place", "in", "the", "future", "NUMBER", "Rebased", "took", "care", "of", "some", "version", "stuff", "and", "throw", "out", "react", "lib", "Object", "NUMBER", "assign", "usage", "NUMBER", "From", "Flux", "Overview", "LINK", "we", "have", "these", "statements", "NUMBER", "Stores", "contain", "the", "application", "state", "and", "logic", "NUMBER", "NUMBER", "The", "actions", "be", "simply", "discrete", "semantic", "helper", "function", "that", "facilitate", "passing", "data", "to", "the", "dispatcher", "NUMBER", "That", "said", "LINK", "chat", "js", "actions", "ChatMessageActionCreators", "NUMBER", "js", "javascript", "var", "message", "MessageStore", "NUMBER", "getCreatedMessageData", "text", "ChatWebAPIUtils", "NUMBER", "createMessage", "message", "I", "think", "that", "this", "logic", "should", "be", "placed", "inside", "the", "MessageStore", "LINK", "chat", "js", "stores", "MessageStore", "NUMBER", "js", "javascript", "case", "ActionTypes", "NUMBER", "CREATE_MESSAGE", "var", "message", "MessageStore", "NUMBER", "getCreatedMessageData", "action", "NUMBER", "text", "_messages", "message", "NUMBER", "id", "message", "HERE", "we", "call", "an", "async", "request", "but", "don", "t", "wait", "for", "a", "response", "ChatWebAPIUtils", "NUMBER", "createMessage", "would", "trigger", "an", "error", "success", "action", "ChatWebAPIUtils", "NUMBER", "createMessage", "message", "MessageStore", "NUMBER", "emitChange", "break", "Business", "logic", "be", "not", "responsibility", "of", "actions", "NUMBER", "Actions", "be", "just", "simple", "semantic", "helpers", "while", "stores", "contain", "the", "application", "state", "and", "logic", "NUMBER", "What", "do", "you", "think", "about", "Hey", "fisherwebdev", "thank", "you", "for", "your", "perfect", "answer", "NUMBER", "I", "get", "the", "idea", "NUMBER", "But", "looking", "at", "the", "Flux", "repo", "I", "saw", "an", "update", "flowchart", "that", "makes", "this", "clear", "Action", "creators", "should", "be", "use", "to", "call", "web", "API", "not", "stores", "NUMBER", "This", "rule", "makes", "it", "simple", "to", "know", "what", "part", "of", "the", "code", "be", "calling", "the", "web", "API", "NUMBER", "As", "you", "said", "it", "s", "actually", "cleaner", "to", "do", "it", "in", "the", "action", "creators", "NUMBER", "Thank", "you", "I", "have", "a", "scenario", "where", "an", "action", "be", "to", "be", "dispatched", "however", "I", "need", "to", "perform", "some", "logic", "dependent", "on", "the", "state", "of", "certain", "stores", "to", "determine", "what", "actions", "to", "dispatch", "NUMBER", "Since", "a", "store", "cannot", "dispatch", "while", "already", "dispatching", "I", "cannot", "create", "a", "store", "which", "handles", "this", "logic", "NUMBER", "Note", "that", "this", "logic", "be", "non", "trivial", "NUMBER", "Basically", "I", "need", "to", "perform", "an", "action", "which", "says", "Calculate", "and", "apply", "a", "route", "which", "brings", "this", "resource", "to", "that", "target", "NUMBER", "The", "route", "that", "the", "resource", "has", "to", "take", "depends", "on", "available", "resources", "provide", "by", "the", "different", "stores", "NUMBER", "So", "I", "need", "to", "query", "all", "the", "stores", "and", "perform", "some", "logic", "to", "figure", "out", "what", "route", "be", "the", "best", "one", "and", "then", "dispatch", "the", "corresponding", "actions", "to", "the", "stores", "to", "make", "it", "happen", "NUMBER", "Should", "I", "put", "the", "logic", "in", "the", "ActionCreator", "Although", "that", "do", "not", "quite", "follow", "the", "guidelines", "which", "explicitly", "state", "the", "ActionCreators", "should", "just", "be", "helper", "methods", "to", "create", "and", "dispatch", "the", "actions", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "This", "be", "a", "simple", "change", "to", "the", "docs", "based", "on", "a", "question", "I", "sent", "to", "vjeux", "around", "the", "statement", "that", "the", "_todos", "variable", "could", "not", "be", "accessed", "from", "outside", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "This", "be", "great", "thanks", "Do", "you", "mind", "doing", "the", "CLA", "and", "I", "ll", "bring", "it", "in", "vjeux", "Done", "NUMBER", "On", "Friday", "October", "NUMBER", "NUMBER", "Christopher", "Chedeau", "notifications", "github", "NUMBER", "com", "write", "This", "be", "great", "thanks", "Do", "you", "mind", "doing", "the", "CLA", "and", "I", "ll", "bring", "it", "in", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "TodoStore", "object", "needs", "to", "be", "close", "after", "removeChangeListener", "method", "NUMBER", "Also", "reindented", "AppDispatcher", "NUMBER", "register", "due", "to", "the", "change", "in", "the", "TodoStore", "object", "NUMBER", "I", "think", "this", "was", "fix", "long", "ago", "in", "NUMBER", "so", "closing", "out", "NUMBER", "No", "test", "folder", "in", "the", "repo", "but", "assume", "some", "exists", "somewhere", "NUMBER", "fisherwebdev", "The", "test", "expect", "the", "Dispatcher", "with", "waitFor", "taking", "NUMBER", "argument", "LINK", "diff", "e", "NUMBER", "f", "NUMBER", "df", "NUMBER", "ab", "NUMBER", "cb", "NUMBER", "b", "NUMBER", "fb", "NUMBER", "a", "NUMBER", "cR", "NUMBER", "The", "Dispatcher", "in", "the", "repo", "do", "not", "match", "this", "signature", "it", "takes", "a", "single", "argument", "LINK", "L", "NUMBER", "fisherwebdev", "Thanks", "didn", "t", "see", "this", "NUMBER", "In", "TodoStore", "test", "NUMBER", "js", "the", "variables", "at", "lines", "NUMBER", "NUMBER", "be", "miss", "var", "and", "i", "think", "they", "be", "going", "global", "js", "beforeEach", "function", "AppDispatcher", "require", "NUMBER", "NUMBER", "dispatcher", "AppDispatcher", "TodoStore", "require", "NUMBER", "TodoStore", "callback", "AppDispatcher", "NUMBER", "register", "NUMBER", "mock", "NUMBER", "calls", "NUMBER", "NUMBER", "Not", "a", "big", "deal", "though", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "I", "m", "still", "trying", "to", "figure", "out", "how", "to", "setup", "alerts", "like", "a", "popups", "NUMBER", "Should", "I", "have", "an", "alert", "store", "Or", "should", "the", "domain", "store", "keep", "some", "variable", "to", "let", "me", "know", "that", "needs", "to", "open", "the", "store", "I", "ve", "tried", "both", "approaches", "and", "nothing", "seems", "correct", "NUMBER", "An", "alert", "store", "If", "the", "contents", "of", "the", "alert", "has", "more", "logic", "be", "managed", "by", "whom", "The", "alert", "can", "t", "manage", "that", "NUMBER", "Here", "be", "how", "be", "do", "alertStore", "NUMBER", "add", "contents", "new", "UnlockJob", "NUMBER", "In", "my", "root", "alertStore", "NUMBER", "getAll", "NUMBER", "map", "function", "alert", "return", "alert", "Or", "should", "the", "domain", "store", "keep", "some", "variable", "to", "let", "me", "know", "that", "needs", "to", "open", "the", "store", "How", "do", "I", "open", "the", "alert", "in", "the", "first", "place", "I", "do", "myStore", "NUMBER", "unlockingJob", "new", "UnlockJob", "NUMBER", "null", "the", "UnlockJob", "be", "the", "alert", "view", "in", "my", "root", "component", "NUMBER", "But", "then", "I", "can", "t", "manage", "any", "alerts", "properly", "NUMBER", "A", "lot", "of", "this", "seems", "very", "specific", "to", "your", "application", "and", "it", "s", "difficult", "to", "get", "enough", "context", "from", "what", "you", "have", "write", "here", "NUMBER", "Perhaps", "more", "code", "would", "help", "the", "community", "here", "understand", "your", "issue", "Imagine", "a", "popup", "where", "would", "you", "store", "in", "your", "app", "These", "be", "internal", "and", "implementation", "details", "of", "how", "React", "build", "for", "npm", "NUMBER", "We", "re", "going", "to", "deprecate", "them", "NUMBER", "merge", "be", "now", "simply", "Object", "NUMBER", "assign", "and", "copyProperties", "be", "a", "simple", "for", "in", "and", "can", "be", "replaced", "with", "Object", "NUMBER", "assign", "What", "s", "your", "position", "on", "this", "now", "with", "the", "release", "of", "NUMBER", "with", "deprecation", "warnings", "for", "merge", "copyProperties", "and", "the", "provision", "of", "Object", "NUMBER", "assign", "in", "react", "lib", "Is", "it", "okay", "for", "the", "examples", "to", "simply", "be", "update", "to", "use", "react", "lib", "Object", "NUMBER", "assign", "instead", "or", "will", "even", "that", "be", "very", "quickly", "moved", "out", "of", "React", "entirely", "Cool", "I", "ll", "look", "into", "update", "my", "PR", "sometime", "later", "NUMBER", "It", "d", "also", "be", "nice", "if", "we", "could", "also", "get", "Invariant", "to", "be", "shared", "when", "things", "be", "be", "bundled", "up", "NUMBER", "Done", "LINK", "Its", "quite", "common", "that", "a", "subcomponent", "like", "a", "modal", "do", "not", "just", "instantaneously", "appears", "but", "that", "an", "animation", "be", "associated", "with", "it", "NUMBER", "Since", "the", "initial", "user", "action", "would", "be", "call", "in", "an", "action", "and", "communicated", "to", "the", "store", "i", "suppose", "the", "store", "would", "handle", "the", "animation", "and", "communicate", "the", "state", "change", "to", "the", "react", "component", "I", "have", "store", "S", "NUMBER", "which", "listens", "to", "actions", "A", "NUMBER", "A", "NUMBER", "and", "A", "NUMBER", "Then", "I", "have", "store", "S", "NUMBER", "which", "only", "change", "when", "the", "S", "NUMBER", "store", "change", "NUMBER", "With", "flux", "architecture", "I", "have", "to", "make", "S", "NUMBER", "also", "listen", "on", "actions", "A", "NUMBER", "A", "NUMBER", "and", "A", "NUMBER", "This", "be", "not", "DRY", "and", "can", "lead", "to", "many", "bug", "NUMBER", "What", "be", "your", "opinion", "How", "to", "solve", "this", "fisherwebdev", "Because", "they", "be", "not", "sharing", "the", "same", "data", "NUMBER", "For", "example", "S", "NUMBER", "be", "a", "jobStore", "and", "S", "NUMBER", "be", "an", "achievementStore", "NUMBER", "The", "achivements", "be", "only", "increase", "when", "the", "jobs", "be", "do", "NUMBER", "But", "I", "also", "have", "other", "stores", "which", "will", "change", "the", "archievement", "store", "NUMBER", "I", "will", "have", "too", "many", "stores", "joied", "in", "the", "same", "store", "NUMBER", "Then", "be", "a", "mess", "again", "NUMBER", "On", "Thursday", "October", "NUMBER", "NUMBER", "Bill", "Fisher", "notifications", "github", "NUMBER", "com", "write", "Why", "not", "manage", "both", "jobs", "and", "achievements", "in", "one", "store", "If", "you", "really", "want", "to", "separate", "the", "code", "for", "readability", "maintainability", "then", "yes", "you", "want", "to", "have", "those", "actions", "as", "cases", "in", "the", "AchievementStore", "s", "switch", "statement", "waitFor", "the", "JobStore", "and", "then", "retrieve", "the", "update", "data", "from", "the", "JobStore", "NUMBER", "But", "if", "you", "can", "it", "really", "sounds", "like", "they", "should", "be", "the", "same", "store", "NUMBER", "waitFor", "be", "really", "a", "last", "resort", "for", "managing", "complexity", "and", "not", "at", "all", "the", "ideal", "in", "a", "well", "designed", "system", "NUMBER", "Sometimes", "it", "s", "unavoidable", "NUMBER", "But", "in", "your", "situation", "I", "would", "seriously", "consider", "merge", "the", "two", "stores", "NUMBER", "Please", "remember", "that", "stores", "be", "not", "ORM", "style", "models", "and", "they", "be", "not", "Backbone", "collections", "NUMBER", "They", "manage", "a", "domain", "of", "logic", "and", "data", "NUMBER", "It", "sounds", "to", "me", "like", "jobs", "and", "achievements", "might", "actually", "be", "within", "the", "same", "domain", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "Best", "regards", "Melhores", "cumprimentos", "Blog", "ProJavaScript", "LINK", "_source", "email", "footer", "text", "utm_medium", "email", "footer", "text", "utm_campaign", "email", "footer", "text", "Twitter", "ProJavaScript", "LINK", "Google", "ProJavaScript", "LINK", "LINK", "_source", "email", "footer", "logo", "utm_medium", "email", "footer", "logo", "utm_campaign", "email", "footer", "logo", "I", "have", "an", "callback", "for", "onBlur", "that", "will", "setState", "and", "based", "on", "the", "state", "some", "buttons", "may", "be", "remove", "from", "the", "screen", "NUMBER", "The", "problem", "be", "that", "one", "of", "these", "buttons", "has", "a", "callback", "that", "needs", "to", "run", "and", "if", "setState", "be", "call", "from", "the", "onBlur", "callback", "then", "the", "callback", "for", "the", "button", "do", "not", "run", "probably", "because", "it", "s", "not", "technically", "visible", "NUMBER", "I", "verify", "that", "the", "button", "callback", "works", "fine", "if", "the", "onBlur", "callback", "do", "not", "call", "setState", "NUMBER", "I", "worked", "around", "the", "issue", "by", "use", "a", "window", "NUMBER", "setTimout", "that", "calls", "setState", "after", "NUMBER", "ms", "NUMBER", "Is", "this", "the", "right", "approach", "Or", "be", "this", "a", "bug", "in", "flux", "that", "all", "callbacks", "don", "t", "run", "My", "expectation", "be", "that", "the", "all", "callbacks", "would", "run", "and", "the", "setState", "calls", "would", "be", "cummulative", "NUMBER", "Thanks", "for", "any", "advice", "NUMBER", "Oh", "Sorry", "I", "need", "to", "put", "this", "in", "the", "React", "repo", "NUMBER", "Late", "at", "night", "when", "I", "file", "this", "NUMBER", "The", "index", "NUMBER", "html", "be", "not", "a", "result", "of", "any", "compilation", "bundling", "process", "rather", "the", "bundle", "NUMBER", "js", "NUMBER", "This", "has", "be", "clarified", "in", "the", "rephrasing", "NUMBER", "You", "might", "include", "this", "example", "LINK", "flux", "react", "I", "have", "created", "an", "example", "too", "smile", "LINK", "shopping", "cart", "demo", "Both", "of", "the", "above", "be", "miss", "test", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "Call", "event", "NUMBER", "preventDefault", "to", "stop", "a", "newline", "be", "add", "to", "the", "textarea", "in", "the", "MessageComposer", "component", "after", "sending", "a", "message", "with", "enter", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "Changed", "the", "TodoApp", "NUMBER", "js", "reference", "to", "TodoApp", "NUMBER", "react", "NUMBER", "js", "to", "reflect", "the", "file", "tree", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Now", "sign", "the", "CLA", "NUMBER", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "If", "it", "s", "not", "needed", "NUMBER", "yank", "it", "I", "think", "some", "of", "these", "examples", "be", "needlessly", "complex", "NUMBER", "I", "can", "t", "imagine", "large", "scale", "Web", "app", "development", "without", "use", "a", "module", "system", "and", "loader", "NUMBER", "It", "would", "be", "a", "step", "back", "to", "remove", "those", "NUMBER", "If", "people", "find", "those", "complex", "their", "use", "case", "might", "not", "need", "patterns", "like", "flux", "a", "simpler", "approach", "might", "be", "as", "productive", "NUMBER", "There", "be", "nothing", "in", "the", "docs", "about", "it", "NUMBER", "I", "had", "to", "grep", "bundle", "NUMBER", "js", "to", "find", "mention", "as", "a", "comment", "in", "a", "separate", "example", "that", "it", "dealt", "with", "Browserify", "NUMBER", "I", "still", "have", "no", "idea", "what", "Browserify", "do", "or", "why", "it", "s", "needed", "NUMBER", "Backbone", "for", "example", "doesn", "t", "this", "at", "all", "and", "flux", "be", "supposed", "to", "be", "a", "replacement", "no", "Maybe", "the", "documentation", "needs", "to", "mention", "that", "the", "examples", "use", "a", "CJS", "loader", "NUMBER", "You", "can", "use", "either", "Browserify", "or", "WebPack", "and", "if", "you", "don", "t", "know", "what", "they", "be", "I", "recommend", "spending", "some", "time", "reading", "up", "on", "them", "NUMBER", "Do", "you", "still", "load", "all", "your", "JS", "CSS", "etc", "by", "creating", "script", "and", "link", "tags", "That", "s", "painful", "to", "scale", "so", "you", "might", "find", "these", "module", "loaders", "helpful", "NUMBER", "Here", "be", "an", "example", "LINK", "flux", "react", "Hy", "Currently", "I", "have", "an", "app", "that", "has", "a", "change", "version", "of", "flux", "in", "which", "the", "action", "manages", "all", "the", "stores", "change", "Some", "stores", "Communicates", "with", "the", "server", "Tracking", "I", "don", "t", "need", "to", "wait", "for", "stores", "anyway", "flux", "s", "waitFor", "be", "synchronous", "I", "just", "put", "the", "things", "in", "the", "order", "NUMBER", "For", "now", "be", "scaling", "well", "but", "I", "might", "wonder", "what", "would", "be", "the", "benefits", "of", "implement", "a", "strict", "flux", "architecture", "where", "the", "stuff", "be", "do", "in", "the", "register", "callback", "in", "each", "model", "The", "first", "thing", "that", "can", "go", "wrong", "be", "having", "a", "lot", "of", "stuff", "in", "each", "action", "NUMBER", "But", "you", "have", "the", "benefit", "of", "knowing", "in", "one", "glance", "what", "be", "going", "on", "each", "action", "NUMBER", "In", "the", "strict", "flux", "architecture", "you", "would", "have", "to", "open", "each", "store", "and", "check", "it", "s", "relative", "action", "listener", "NUMBER", "This", "be", "the", "real", "action", "without", "any", "modification", "define", "function", "require", "export", "module", "var", "_", "require", "underscore", "var", "utils", "require", "client", "utils", "var", "async", "require", "async", "var", "constants", "require", "client", "constants", "var", "tempShipIdCounter", "NUMBER", "return", "function", "args", "cb", "var", "logic", "require", "client", "logic", "logic", "var", "_this", "this", "var", "data", "_this", "NUMBER", "ctx", "NUMBER", "data", "var", "planet", "args", "NUMBER", "planet", "var", "taskId", "args", "NUMBER", "taskId", "var", "payload", "args", "NUMBER", "payload", "async", "NUMBER", "series", "_", "function", "cb", "var", "res", "planet", "NUMBER", "getTask", "NUMBER", "artTask", "taskId", "payload", "data", "NUMBER", "authStore", "NUMBER", "currentPlayer", "if", "res", "NUMBER", "err", "data", "NUMBER", "popupStore", "NUMBER", "addPopup", "task", "planet", "planet", "taskState", "error", "err", "res", "NUMBER", "err", "return", "_this", "NUMBER", "api", "startTask", "res", "NUMBER", "data", "handleError", "true", "NUMBER", "en", "function", "res", "if", "res", "NUMBER", "err", "if", "DEBUG", "debugger", "return", "console", "NUMBER", "error", "res", "NUMBER", "err", "else", "return", "location", "NUMBER", "reload", "We", "need", "to", "get", "from", "the", "res", "NUMBER", "data", "because", "the", "taskId", "can", "be", "undefined", "when", "we", "auto", "restart", "last", "task", "NUMBER", "taskId", "res", "NUMBER", "data", "NUMBER", "taskTypeId", "data", "NUMBER", "sounds", "NUMBER", "artTask", "NUMBER", "play", "taskId", "woopra", "NUMBER", "track", "start", "taskId", "data", "NUMBER", "taskStore", "NUMBER", "trackPlanet", "planet", "data", "NUMBER", "popupStore", "NUMBER", "addPopup", "task", "add", "res", "NUMBER", "details", "NUMBER", "add", "task", "planet", "NUMBER", "getTask", "NUMBER", "toJSON", "taskState", "start", "planet", "planet", "cb", "cb", "Open", "license", "you", "re", "free", "to", "do", "whatever", "you", "want", "NUMBER", "Personally", "I", "m", "finding", "the", "trick", "with", "React", "Flux", "be", "how", "to", "model", "some", "particular", "state", "change", "such", "that", "you", "don", "t", "find", "yourself", "trying", "needing", "wanting", "to", "issue", "dispatches", "from", "inside", "component", "life", "cycle", "function", "or", "otherwise", "circumvent", "the", "dispatch", "flow", "as", "you", "be", "doing", "here", "NUMBER", "sterpe", "I", "m", "not", "dispatching", "from", "the", "component", "NUMBER", "This", "code", "be", "an", "action", "from", "flux", "NUMBER", "So", "instead", "of", "make", "a", "global", "dispatch", "that", "stores", "listen", "to", "and", "do", "stuff", "I", "do", "the", "stuff", "needed", "in", "the", "action", "and", "in", "this", "particular", "order", "which", "be", "easier", "to", "read", "IMO", "NUMBER", "No", "need", "for", "waitFor", "NUMBER", "I", "m", "only", "ask", "what", "be", "the", "benefits", "of", "use", "a", "strict", "flux", "architecture", "vs", "my", "version", "NUMBER", "Flux", "flow", "view", "action", "dispatcher", "stores", "dispatch", "views", "update", "My", "flow", "view", "action", "stores", "dispatch", "views", "update", "I", "m", "only", "skipping", "the", "dispatcher", "from", "the", "view", "NUMBER", "stores", "dispatch", "views", "update", "eh", "stores", "should", "be", "event", "emitters", "and", "that", "should", "be", "their", "mechanism", "to", "notify", "the", "views", "listening", "to", "them", "of", "update", "I", "guess", "that", "was", "typo", "Yes", "isn", "t", "that", "what", "I", "ve", "said", "Store", "emits", "dispatches", "the", "change", "Views", "which", "listened", "to", "store", "update", "Store", "dispatches", "then", "the", "views", "update", "Sorry", "I", "read", "it", "as", "another", "action", "be", "dispatched", "which", "seem", "wrong", "NUMBER", "totty", "NUMBER", "As", "the", "application", "grows", "say", "you", "add", "ten", "more", "stores", "for", "planetary", "defense", "ship", "drive", "efficiency", "etc", "you", "will", "have", "to", "modify", "each", "action", "fn", "to", "call", "update", "the", "particular", "store", "NUMBER", "Compare", "with", "use", "the", "dispatcher", "where", "you", "would", "only", "declare", "what", "actions", "this", "store", "update", "against", "within", "the", "store", "itself", "NUMBER", "fisherwebdev", "Ok", "NUMBER", "sterpe", "But", "in", "your", "case", "with", "NUMBER", "stores", "and", "NUMBER", "actions", "NUMBER", "If", "your", "flow", "be", "distributed", "between", "NUMBER", "of", "stores", "how", "can", "you", "read", "the", "code", "You", "will", "have", "to", "jump", "from", "store", "to", "store", "to", "see", "the", "sequence", "then", "you", "should", "also", "check", "all", "the", "waitFor", "preconditions", "NUMBER", "In", "your", "case", "where", "you", "have", "the", "code", "in", "the", "store", "you", "will", "have", "stores", "which", "handles", "lets", "say", "NUMBER", "actions", "not", "real", "just", "for", "the", "example", "NUMBER", "Which", "one", "be", "easier", "to", "debug", "check", "the", "dependencies", "and", "check", "the", "flow", "of", "the", "program", "Continue", "here", "LINK", "topic", "reactjs", "krY", "NUMBER", "aiMk", "NUMBER", "If", "your", "flow", "be", "distributed", "between", "NUMBER", "of", "stores", "how", "can", "you", "read", "the", "code", "You", "will", "have", "to", "jump", "from", "store", "to", "store", "to", "see", "the", "sequence", "then", "you", "should", "also", "check", "all", "the", "waitFor", "preconditions", "NUMBER", "No", "one", "sits", "down", "to", "just", "read", "an", "entire", "codebase", "normally", "you", "want", "to", "focus", "on", "one", "concern", "and", "with", "stores", "that", "one", "concern", "should", "be", "in", "one", "place", "NUMBER", "not", "real", "just", "for", "the", "example", "Exactly", "NUMBER", "Not", "real", "at", "all", "what", "you", "be", "describing", "be", "a", "God", "object", "not", "a", "well", "factored", "store", "NUMBER", "briandipalma", "even", "with", "my", "game", "example", "above", "putting", "everything", "in", "each", "store", "be", "harder", "to", "maintain", "NUMBER", "No", "one", "sits", "down", "to", "just", "read", "an", "entire", "codebase", "normally", "you", "want", "to", "focus", "on", "one", "concern", "and", "with", "stores", "that", "one", "concern", "should", "be", "in", "one", "place", "NUMBER", "Normally", "you", "don", "t", "need", "to", "read", "it", "all", "but", "for", "example", "I", "would", "like", "to", "know", "what", "exactly", "happens", "when", "I", "click", "on", "a", "button", "NUMBER", "If", "you", "have", "unexpect", "behaviour", "you", "have", "to", "check", "all", "the", "stores", "for", "that", "particular", "action", "NUMBER", "If", "you", "have", "an", "action", "you", "read", "it", "all", "there", "NUMBER", "I", "can", "t", "see", "any", "use", "case", "make", "my", "life", "easier", "about", "storing", "that", "logic", "in", "each", "store", "NUMBER", "But", "this", "be", "me", "NUMBER", "Have", "you", "developed", "any", "app", "with", "pure", "flux", "Show", "me", "your", "code", "or", "part", "of", "it", "NUMBER", "Following", "that", "logic", "you", "should", "put", "all", "your", "code", "in", "one", "file", "so", "you", "don", "t", "have", "to", "look", "at", "any", "other", "file", "NUMBER", "If", "you", "have", "unexpect", "behaviour", "you", "have", "to", "check", "all", "the", "stores", "for", "that", "particular", "action", "NUMBER", "Personally", "I", "wouldn", "t", "do", "it", "that", "way", "I", "d", "open", "up", "the", "view", "and", "then", "the", "store", "stores", "that", "provide", "data", "to", "the", "view", "that", "appears", "incorrect", "and", "debug", "in", "that", "order", "NUMBER", "What", "you", "be", "doing", "in", "your", "pattern", "be", "make", "the", "stores", "mutable", "from", "outside", "NUMBER", "This", "negates", "one", "of", "the", "advantages", "of", "flux", "as", "long", "as", "you", "be", "dealing", "with", "manageable", "interactions", "this", "seems", "fine", "but", "it", "s", "more", "difficult", "to", "scale", "with", "increasing", "complexity", "NUMBER", "By", "the", "way", "I", "believe", "the", "action", "be", "simply", "an", "object", "literal", "with", "a", "type", "property", "the", "action", "creator", "be", "the", "module", "class", "with", "the", "API", "on", "it", "NUMBER", "I", "think", "it", "s", "quite", "handy", "to", "decouple", "the", "action", "creator", "and", "the", "store", "processing", "the", "action", "as", "it", "allows", "users", "of", "your", "flux", "component", "to", "easy", "add", "their", "own", "stores", "without", "having", "to", "modify", "the", "action", "creator", "code", "NUMBER", "All", "they", "do", "be", "register", "to", "the", "dispatcher", "while", "in", "your", "pattern", "they", "would", "have", "to", "register", "to", "the", "dispatcher", "and", "modify", "the", "action", "creator", "code", "NUMBER", "Also", "if", "you", "wanted", "to", "see", "what", "action", "a", "store", "responds", "to", "you", "would", "have", "to", "look", "at", "all", "action", "creators", "and", "see", "if", "they", "call", "the", "store", "NUMBER", "In", "essence", "the", "reverse", "of", "your", "what", "stores", "be", "notified", "by", "what", "action", "problem", "NUMBER", "Following", "that", "logic", "you", "should", "put", "all", "your", "code", "in", "one", "file", "so", "you", "don", "t", "have", "to", "look", "at", "any", "other", "file", "NUMBER", "This", "be", "not", "the", "same", "logic", "NUMBER", "I", "ve", "said", "to", "only", "keep", "in", "an", "action", "the", "whole", "flow", "NUMBER", "So", "when", "I", "look", "at", "an", "action", "I", "can", "see", "everything", "it", "do", "NUMBER", "Is", "not", "the", "same", "as", "putting", "all", "the", "code", "in", "the", "same", "file", "as", "you", "can", "think", "NUMBER", "All", "they", "do", "be", "register", "to", "the", "dispatcher", "while", "in", "your", "pattern", "they", "would", "have", "to", "register", "to", "the", "dispatcher", "and", "modify", "the", "action", "creator", "code", "NUMBER", "No", "just", "change", "the", "action", "creator", "code", "NUMBER", "Also", "if", "you", "wanted", "to", "see", "what", "action", "a", "store", "responds", "to", "you", "would", "have", "to", "look", "at", "all", "action", "creators", "and", "see", "if", "they", "call", "the", "store", "NUMBER", "In", "essence", "the", "reverse", "of", "your", "what", "stores", "be", "notified", "by", "what", "action", "problem", "NUMBER", "That", "s", "also", "true", "NUMBER", "So", "the", "final", "question", "be", "do", "you", "want", "to", "see", "what", "an", "action", "do", "or", "what", "a", "store", "responds", "to", "NUMBER", "Normally", "you", "want", "to", "know", "the", "flow", "other", "times", "you", "want", "to", "see", "what", "change", "a", "store", "NUMBER", "Both", "can", "t", "be", "do", "together", "NUMBER", "For", "me", "be", "more", "useful", "to", "see", "what", "happens", "when", "an", "something", "triggers", "an", "action", "than", "knowing", "what", "change", "a", "store", "NUMBER", "This", "should", "prevent", "once", "in", "a", "blue", "moon", "error", "regard", "argument", "count", "NUMBER", "Also", "makes", "the", "function", "argument", "look", "a", "little", "less", "odd", "NUMBER", "Any", "performance", "hits", "relate", "to", "the", "argument", "object", "be", "as", "far", "as", "I", "m", "aware", "of", "extremely", "negligible", "NUMBER", "fisherwebdev", "Oh", "wow", "the", "performance", "hit", "be", "greater", "than", "I", "expected", "NUMBER", "For", "my", "own", "projects", "I", "wouldn", "t", "bother", "but", "I", "guess", "that", "s", "different", "for", "you", "guys", "especially", "with", "invariant", "be", "use", "all", "over", "the", "place", "NUMBER", "Closing", "this", "for", "now", "I", "guess", "your", "current", "implementation", "makes", "sense", "NUMBER", "I", "would", "like", "to", "discuss", "best", "practice", "about", "form", "wizard", "NUMBER", "Following", "example", "NUMBER", "We", "have", "a", "page", "with", "NUMBER", "components", "header", "content", "footer", "NUMBER", "In", "the", "header", "we", "show", "the", "name", "of", "the", "step", "NUMBER", "Content", "component", "shows", "the", "form", "for", "actual", "step", "NUMBER", "The", "footer", "contains", "buttons", "to", "go", "to", "the", "previous", "step", "or", "to", "the", "next", "step", "NUMBER", "Problem", "NUMBER", "Because", "the", "submit", "button", "and", "the", "form", "be", "capsulated", "in", "different", "components", "how", "can", "we", "retrieve", "the", "data", "from", "the", "form", "component", "and", "submit", "this", "data", "to", "the", "server", "By", "clicking", "on", "the", "button", "in", "the", "footer", "component", "it", "fires", "an", "action", "NUMBER", "This", "action", "can", "t", "contain", "the", "form", "data", "because", "it", "can", "t", "access", "other", "components", "data", "NUMBER", "The", "action", "be", "received", "by", "a", "store", "NUMBER", "But", "the", "store", "don", "t", "have", "the", "form", "data", "to", "send", "it", "to", "server", "NUMBER", "Solution", "NUMBER", "On", "every", "input", "chage", "in", "the", "form", "we", "fire", "an", "action", "with", "this", "change", "and", "transfer", "change", "input", "value", "to", "the", "store", "NUMBER", "So", "we", "can", "guarantee", "that", "the", "store", "always", "has", "fresh", "data", "of", "the", "form", "NUMBER", "When", "the", "store", "receives", "the", "submit", "action", "it", "sends", "its", "data", "to", "server", "NUMBER", "Disadvantage", "be", "that", "we", "have", "to", "fire", "on", "each", "keypress", "an", "action", "NUMBER", "Solution", "NUMBER", "In", "addition", "to", "change", "event", "we", "create", "in", "the", "store", "a", "request", "event", "NUMBER", "Our", "form", "listen", "to", "the", "request", "event", "NUMBER", "After", "receiving", "a", "submit", "action", "the", "store", "emit", "a", "request", "event", "NUMBER", "The", "form", "receives", "the", "request", "event", "collects", "all", "field", "data", "and", "fire", "an", "action", "with", "collected", "data", "to", "the", "store", "NUMBER", "Problem", "NUMBER", "For", "each", "step", "and", "each", "form", "we", "have", "different", "stores", "NUMBER", "The", "main", "process", "state", "be", "handeled", "by", "separeted", "MainStore", "NUMBER", "MainStore", "may", "show", "a", "popup", "with", "error", "message", "NUMBER", "For", "example", "we", "have", "NUMBER", "form", "on", "one", "page", "NUMBER", "Each", "form", "have", "to", "be", "validated", "by", "server", "NUMBER", "After", "we", "click", "on", "submit", "button", "each", "form", "store", "receives", "the", "submit", "action", "and", "makes", "an", "ajax", "request", "to", "validate", "its", "form", "data", "NUMBER", "If", "something", "with", "data", "be", "wrong", "the", "MainStore", "have", "to", "show", "the", "error", "message", "in", "the", "popup", "NUMBER", "How", "to", "synchronize", "responses", "from", "these", "two", "async", "server", "validations", "and", "show", "the", "merge", "response", "in", "the", "popup", "by", "the", "MainStore", "Solution", "NUMBER", "Centralize", "all", "validation", "actions", "from", "all", "form", "in", "the", "MainStore", "NUMBER", "The", "MainStore", "executes", "the", "ajax", "request", "through", "a", "promise", "lib", "and", "after", "complete", "of", "all", "request", "it", "fires", "a", "change", "event", "with", "merge", "server", "response", "NUMBER", "In", "this", "solution", "the", "MainStore", "should", "have", "write", "access", "to", "other", "stores", "to", "transfert", "the", "server", "field", "error", "to", "form", "stores", "NUMBER", "Disadvantage", "be", "that", "we", "have", "a", "very", "big", "MainStore", "with", "whole", "logic", "NUMBER", "Solution", "NUMBER", "Submit", "action", "goes", "to", "each", "form", "store", "and", "each", "form", "store", "makes", "an", "ajax", "request", "to", "validate", "its", "data", "NUMBER", "After", "the", "form", "store", "have", "received", "the", "response", "from", "server", "it", "has", "to", "send", "the", "error", "to", "the", "MainStore", "so", "the", "MainStore", "can", "show", "the", "popup", "with", "error", "NUMBER", "Disadvantage", "be", "that", "we", "have", "to", "synchronize", "all", "ajax", "responses", "from", "to", "know", "when", "to", "switch", "to", "next", "step", "in", "the", "wizard", "NUMBER", "Other", "disadvantage", "be", "that", "we", "cant", "make", "a", "logic", "in", "sequences", "of", "validations", "NUMBER", "For", "example", "execute", "form", "A", "and", "if", "and", "only", "if", "the", "validation", "be", "OK", "execute", "the", "validation", "of", "form", "B", "NUMBER", "Problem", "NUMBER", "Why", "don", "t", "you", "keep", "your", "data", "state", "in", "a", "parent", "component", "containing", "both", "the", "form", "and", "the", "submit", "Problem", "NUMBER", "If", "I", "m", "correct", "flux", "dictates", "that", "you", "should", "submit", "to", "the", "server", "with", "util", "classes", "not", "in", "the", "stores", "NUMBER", "The", "util", "classes", "can", "then", "send", "an", "action", "succeeded", "or", "failure", "NUMBER", "If", "you", "want", "to", "show", "merge", "responses", "then", "I", "think", "the", "util", "class", "should", "keep", "track", "of", "request", "send", "and", "should", "wait", "until", "all", "request", "have", "either", "fail", "or", "succeeded", "and", "then", "send", "the", "action", "with", "all", "results", "as", "an", "argument", "NUMBER", "Each", "responsible", "store", "can", "then", "act", "on", "them", "NUMBER", "The", "mainstore", "could", "check", "for", "fail", "request", "and", "show", "the", "popup", "NUMBER", "tcoopman", "NUMBER", "because", "in", "the", "UI", "the", "submit", "button", "be", "far", "far", "away", "from", "content", "frame", "NUMBER", "Is", "it", "ok", "from", "architecture", "point", "of", "view", "to", "send", "from", "store", "A", "message", "to", "store", "B", "without", "dispatcher", "With", "dispatcher", "its", "not", "always", "possible", "because", "sometimes", "store", "would", "send", "an", "action", "while", "executing", "another", "action", "NUMBER", "Sort", "of", "violates", "unidirectional", "data", "flow", "NUMBER", "If", "you", "really", "had", "to", "use", "dispatcher", "from", "store", "you", "could", "setImmediate", "dispatchfn", "Sent", "from", "my", "iPhone", "On", "Sep", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Michael", "Tsyganov", "notifications", "github", "NUMBER", "com", "write", "tcoopman", "NUMBER", "because", "in", "the", "UI", "the", "submit", "button", "be", "far", "far", "away", "from", "content", "frame", "Is", "it", "ok", "from", "architecture", "point", "of", "view", "to", "send", "from", "store", "A", "message", "to", "store", "B", "without", "dispatcher", "With", "dispatcher", "its", "not", "always", "possible", "because", "sometimes", "store", "would", "send", "an", "action", "while", "executing", "another", "action", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "It", "feels", "like", "you", "have", "a", "pre", "exist", "system", "state", "that", "be", "sort", "of", "side", "effect", "based", "then", "you", "be", "trying", "to", "model", "that", "system", "with", "a", "flux", "architecture", "and", "it", "s", "not", "really", "work", "NUMBER", "Sent", "from", "my", "iPhone", "On", "Sep", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Michael", "Tsyganov", "notifications", "github", "NUMBER", "com", "write", "tcoopman", "NUMBER", "because", "in", "the", "UI", "the", "submit", "button", "be", "far", "far", "away", "from", "content", "frame", "Is", "it", "ok", "from", "architecture", "point", "of", "view", "to", "send", "from", "store", "A", "message", "to", "store", "B", "without", "dispatcher", "With", "dispatcher", "its", "not", "always", "possible", "because", "sometimes", "store", "would", "send", "an", "action", "while", "executing", "another", "action", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "I", "d", "like", "to", "discuss", "best", "practices", "about", "naming", "actions", "NUMBER", "Currently", "I", "use", "actions", "named", "after", "what", "user", "has", "do", "for", "example", "FILE_CLICKED", "ZOOMED", "VIEW_MODE_BUTTON_CLICKED", "etc", "be", "that", "good", "convention", "to", "name", "action", "like", "that", "Only", "issue", "I", "see", "so", "far", "be", "that", "I", "have", "many", "NUMBER", "_CLICKED", "actions", "NUMBER", "Some", "people", "also", "tend", "to", "name", "actions", "more", "like", "commands", "for", "example", "LOAD_DOCUMENT", "CHANGE_VIEW_MODE", "etc", "NUMBER", "I", "d", "love", "your", "thoughts", "on", "that", "NUMBER", "Not", "a", "maintainer", "but", "I", "start", "doing", "src", "constants", "X", "Y", "NUMBER", "json", "Which", "might", "look", "like", "FOO", "FOO", "X", "Y", "Sent", "from", "my", "iPhone", "On", "Sep", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Tadeusz", "W\u00f3jcik", "notifications", "github", "NUMBER", "com", "write", "I", "d", "like", "to", "discuss", "best", "practices", "about", "naming", "actions", "NUMBER", "Currently", "I", "use", "actions", "named", "after", "what", "user", "has", "do", "for", "example", "FILE_CLICKED", "ZOOMED", "VIEW_MODE_BUTTON_CLICKED", "etc", "be", "that", "good", "convention", "to", "name", "action", "like", "that", "Only", "issue", "I", "see", "so", "far", "be", "that", "I", "have", "many", "NUMBER", "_CLICKED", "actions", "NUMBER", "Some", "people", "also", "tend", "to", "name", "actions", "more", "like", "commands", "for", "example", "LOAD_DOCUMENT", "CHANGE_VIEW_MODE", "etc", "NUMBER", "I", "d", "love", "your", "thoughts", "on", "that", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "I", "would", "try", "and", "not", "use", "the", "event", "trigger", "in", "an", "action", "name", "for", "example", "CLICKED", "NUMBER", "You", "could", "envision", "use", "the", "same", "code", "on", "a", "mobile", "app", "so", "it", "would", "in", "fact", "be", "triggered", "by", "a", "touch", "event", "and", "not", "a", "click", "NUMBER", "Minor", "point", "though", "NUMBER", "I", "d", "tend", "toward", "an", "imperative", "command", "approach", "i", "NUMBER", "e", "NUMBER", "PERFORM_THIS_ACTION", "and", "not", "include", "what", "triggered", "the", "action", "or", "how", "it", "should", "be", "do", "NUMBER", "Great", "thanks", "guys", "for", "the", "feedback", "It", "s", "all", "what", "I", "wanted", "to", "know", "NUMBER", "bower", "depends", "on", "both", "npm", "and", "node", "NUMBER", "What", "be", "the", "problem", "with", "that", "Well", "how", "can", "something", "that", "uses", "bower", "not", "depend", "on", "node", "npm", "Just", "publish", "it", "to", "bower", "NUMBER", "I", "don", "t", "understand", "what", "be", "so", "complicated", "about", "that", "NUMBER", "Why", "do", "you", "care", "whenever", "bower", "depends", "on", "node", "npm", "It", "doesn", "t", "matter", "NUMBER", "publishing", "to", "bower", "actually", "means", "we", "need", "to", "keep", "compiled", "file", "in", "the", "repo", "NUMBER", "That", "might", "not", "be", "the", "worst", "thing", "but", "be", "the", "exact", "reason", "we", "actually", "maintain", "a", "separate", "repo", "with", "build", "for", "React", "LINK", "bower", "NUMBER", "It", "s", "not", "as", "simple", "as", "publishing", "compiled", "file", "to", "npm", "NUMBER", "briandipalma", "Please", "take", "it", "elsewhere", "NUMBER", "Yes", "I", "mostly", "agree", "that", "bower", "be", "silly", "for", "how", "I", "build", "sites", "but", "it", "serves", "a", "slightly", "different", "purpose", "than", "npm", "even", "if", "it", "depends", "on", "node", "npm", "NUMBER", "So", "let", "s", "respect", "the", "people", "who", "use", "it", "NUMBER", "fisherwebdev", "I", "think", "we", "could", "do", "this", "NUMBER", "I", "would", "probably", "just", "say", "have", "a", "dist", "folder", "and", "only", "add", "the", "Flux", "NUMBER", "js", "file", "there", "when", "we", "tag", "version", "update", "bower", "depends", "on", "git", "tags", "rejecting", "other", "change", "to", "that", "file", "NUMBER", "If", "you", "re", "interested", "let", "s", "chat", "and", "iron", "it", "out", "NUMBER", "Thanks", "for", "your", "attention", "NUMBER", "NUMBER", "It", "d", "be", "great", "to", "see", "this", "in", "bower", "NUMBER", "My", "team", "uses", "bower", "for", "our", "client", "code", "and", "if", "absolutely", "nothing", "else", "this", "would", "make", "it", "_even", "easier_", "to", "bring", "into", "our", "projects", "NUMBER", "Plus", "there", "s", "the", "fact", "that", "React", "be", "in", "bower", "so", "publishing", "it", "there", "would", "allow", "us", "to", "keep", "our", "dependencies", "clean", "cleaner", "Thanks", "Bill", "fisherwebdev", "That", "s", "cool", "NUMBER", "Maybe", "it", "would", "be", "worth", "putting", "that", "in", "the", "docs", "readme", "as", "well", "Hi", "NUMBER", "I", "want", "to", "discuss", "the", "best", "practice", "for", "a", "situation", "where", "data", "will", "be", "lazily", "fetched", "and", "if", "the", "way", "I", "m", "currently", "doing", "it", "be", "a", "good", "way", "to", "do", "it", "NUMBER", "NUMBER", "view", "calls", "store", "NUMBER", "getItem", "NUMBER", "NUMBER", "store", "realize", "it", "haven", "t", "loaded", "item", "NUMBER", "NUMBER", "store", "sets", "loading", "true", "NUMBER", "store", "calls", "API", "NUMBER", "LoadItem", "id", "NUMBER", "NUMBER", "store", "emits", "that", "it", "has", "change", "due", "to", "loading", "true", "NUMBER", "store", "returns", "null", "NUMBER", "view", "handles", "null", "result", "NUMBER", "view", "receives", "change", "event", "and", "can", "show", "user", "that", "store", "be", "loading", "NUMBER", "Async", "at", "NUMBER", "API", "NUMBER", "LoadItem", "fires", "ajax", "request", "NUMBER", "When", "request", "be", "resolve", "fires", "Actions", "NUMBER", "ItemLoaded", "result", "NUMBER", "NUMBER", "store", "receives", "callback", "on", "ItemLoaded", "stores", "the", "result", "sets", "loading", "to", "false", "and", "emit", "that", "it", "has", "change", "NUMBER", "NUMBER", "view", "receives", "change", "event", "and", "update", "it", "state", "effetively", "recalling", "store", "NUMBER", "getItem", "NUMBER", "NUMBER", "Is", "this", "the", "proper", "way", "to", "solve", "such", "problem", "I", "can", "see", "one", "issue", "above", "which", "be", "number", "NUMBER", "NUMBER", "because", "if", "getItem", "returns", "null", "the", "view", "don", "t", "know", "if", "the", "resource", "doesn", "t", "exist", "or", "if", "it", "s", "pending", "NUMBER", "Would", "it", "be", "wise", "to", "wrap", "all", "get", "calls", "with", "a", "status", "wrapper", "that", "could", "tell", "if", "we", "know", "for", "sure", "that", "NUMBER", "doesn", "t", "exist", "we", "already", "tried", "ajax", "request", "and", "it", "fail", "or", "if", "we", "just", "have", "to", "fire", "an", "request", "before", "we", "have", "the", "result", "NUMBER", "Just", "a", "few", "thoughts", "on", "this", "NUMBER", "the", "store", "could", "hold", "a", "record", "of", "any", "item", "ids", "waiting", "for", "a", "response", "and", "could", "expose", "this", "through", "a", "function", "to", "views", "NUMBER", "ie", "getItemsBeingFetched", "NUMBER", "Then", "if", "this", "array", "has", "any", "items", "in", "it", "the", "view", "could", "show", "a", "loading", "state", "or", "if", "it", "be", "only", "concerned", "with", "a", "particular", "id", "it", "would", "check", "for", "that", "davetayls", "yeah", "we", "be", "having", "a", "discussion", "on", "reactjs", "and", "the", "store", "would", "create", "an", "representation", "of", "item", "NUMBER", "such", "as", "id", "NUMBER", "status", "loading", "and", "clients", "could", "then", "query", "the", "store", "for", "loading", "items", "and", "we", "could", "easily", "cancel", "repetitive", "loading", "calls", "for", "the", "same", "item", "if", "it", "s", "already", "loading", "NUMBER", "abergs", "that", "sounds", "like", "a", "good", "idea", "my", "only", "thought", "would", "be", "when", "another", "view", "request", "allItems", "what", "would", "you", "return", "I", "guess", "all", "currently", "know", "items", "to", "exist", "NUMBER", "Would", "also", "be", "good", "to", "think", "about", "how", "this", "would", "cater", "for", "delete", "or", "put", "change", "NUMBER", "fisherwebdev", "Any", "chance", "you", "could", "integrate", "this", "into", "one", "of", "the", "examples", "You", "might", "recall", "I", "asked", "something", "very", "similar", "on", "StackOverflow", "LINK", "event", "chains", "with", "asynchronous", "data", "dependencies", "regard", "this", "type", "of", "flow", "NUMBER", "Ideally", "it", "would", "cover", "the", "original", "points", "from", "abergs", "but", "also", "write", "asychronous", "data", "use", "actions", "and", "why", "cascading", "events", "be", "a", "bad", "idea", "NUMBER", "The", "excellent", "interview", "of", "Ian", "Obermiller", "LINK", "and", "flux", "interview", "also", "has", "a", "lot", "of", "helpful", "tips", "on", "this", "subject", "NUMBER", "abergs", "Also", "check", "out", "LINK", "I", "ve", "tried", "implement", "the", "approach", "outlined", "in", "the", "interview", "with", "Ian", "and", "the", "Nuclearmail", "project", "NUMBER", "At", "first", "avoiding", "actions", "for", "reads", "make", "a", "lot", "of", "sense", "as", "it", "simplifies", "many", "aspects", "of", "an", "app", "NUMBER", "However", "as", "soon", "as", "multiple", "components", "attempt", "to", "read", "the", "same", "data", "at", "the", "same", "time", "the", "approach", "becomes", "quite", "complex", "NUMBER", "Consider", "two", "lists", "of", "todos", "where", "both", "show", "the", "exact", "same", "list", "of", "todos", "NUMBER", "List", "A", "would", "attempt", "to", "fetch", "todos", "from", "the", "store", "the", "store", "calls", "an", "API", "function", "and", "stores", "the", "list", "of", "todos", "NUMBER", "List", "B", "however", "be", "attempting", "to", "do", "the", "exact", "same", "thing", "at", "the", "same", "time", "this", "forces", "you", "to", "not", "only", "cache", "the", "underlying", "data", "but", "also", "currently", "active", "request", "promises", "so", "that", "you", "don", "t", "perform", "duplicate", "request", "NUMBER", "This", "becomes", "increasingly", "complex", "when", "something", "like", "pagination", "be", "add", "to", "the", "mix", "NUMBER", "Let", "s", "say", "you", "again", "have", "two", "paginated", "lists", "of", "todos", "but", "this", "time", "list", "A", "shows", "todos", "NUMBER", "NUMBER", "and", "B", "NUMBER", "NUMBER", "obviously", "there", "s", "no", "point", "in", "fetching", "NUMBER", "NUMBER", "as", "they", "will", "be", "include", "in", "the", "NUMBER", "NUMBER", "request", "NUMBER", "fisherwebdev", "by", "saying", "You", "can", "just", "make", "the", "async", "call", "to", "the", "web", "API", "directly", "from", "the", "store", "or", "by", "directly", "calling", "a", "method", "in", "a", "Utils", "module", "do", "you", "imply", "that", "calling", "the", "webapi", "utils", "from", "a", "store", "dispatchToken", "be", "fine", "I", "just", "did", "it", "and", "it", "fix", "my", "issue", "with", "Dispatch", "call", "during", "dispatch", "NUMBER", "However", "it", "feels", "kind", "of", "weird", "doing", "that", "in", "the", "perspective", "of", "that", "diagram", "image", "LINK", "NUMBER", "a", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "d", "NUMBER", "b", "NUMBER", "e", "NUMBER", "png", "I", "played", "around", "a", "bit", "with", "this", "approach", "today", "_Edit", "I", "realize", "this", "has", "some", "Reflux", "specific", "code", "but", "it", "should", "be", "quite", "similar", "in", "pure", "Flux_", "Store", "jsx", "var", "ProductStore", "Reflux", "NUMBER", "createStore", "init", "this", "NUMBER", "products", "get", "id", "Attempt", "to", "fetch", "product", "from", "cache", "var", "product", "this", "NUMBER", "products", "id", "If", "no", "product", "was", "find", "create", "a", "placeholder", "while", "we", "load", "it", "if", "product", "product", "this", "NUMBER", "products", "id", "id", "id", "loading", "true", "Fetch", "the", "product", "from", "our", "API", "API", "NUMBER", "get", "products", "id", "NUMBER", "en", "res", "this", "NUMBER", "products", "id", "res", "NUMBER", "data", "this", "NUMBER", "trigger", "Return", "either", "the", "actual", "product", "or", "the", "placeholder", "return", "product", "Component", "jsx", "var", "ProductDetailPage", "React", "NUMBER", "createClass", "getInitialState", "return", "this", "NUMBER", "getStateFromStores", "getStateFromStores", "var", "productId", "this", "NUMBER", "getQuery", "NUMBER", "productId", "return", "product", "ProductStore", "NUMBER", "get", "productId", "onStoreChange", "this", "NUMBER", "setState", "this", "NUMBER", "getStateFromStores", "componentDidMount", "this", "NUMBER", "listenTo", "ProductStore", "this", "NUMBER", "onStoreChange", "render", "var", "product", "this", "NUMBER", "ate", "NUMBER", "product", "return", "product", "NUMBER", "loading", "TAG", "TAG", "I", "ve", "yet", "to", "play", "around", "with", "list", "type", "responses", "yet", "but", "I", "m", "leaning", "towards", "wrapping", "list", "results", "in", "a", "type", "of", "query", "object", "that", "include", "the", "list", "of", "data", "along", "with", "hasMore", "total", "etc", "NUMBER", "for", "the", "given", "query", "NUMBER", "This", "be", "really", "interesting", "NUMBER", "In", "my", "angular", "apps", "I", "tend", "to", "work", "heavily", "with", "promises", "NUMBER", "I", "essentially", "have", "stores", "that", "maintain", "a", "promise", "based", "cache", "of", "things", "and", "each", "method", "makes", "the", "relevant", "API", "request", "if", "necessary", "to", "populate", "the", "cache", "NUMBER", "for", "example", "javascript", "var", "itemCache", "function", "makeApiRequest", "url", "return", "new", "Promise", "function", "res", "err", "fetch", "data", "from", "server", "NUMBER", "res", "data", "function", "copy", "item", "deep", "copy", "item", "NUMBER", "return", "angular", "NUMBER", "copy", "item", "function", "getItem", "id", "promise", "for", "item", "in", "cache", "return", "a", "copy", "of", "it", "if", "itemCache", "id", "return", "itemCache", "id", "NUMBER", "en", "copy", "else", "immediately", "cache", "promise", "for", "item", "var", "itemPromise", "itemCache", "id", "makeApiRequest", "url", "for", "item", "id", "return", "itemPromise", "common", "usage", "we", "can", "act", "on", "loading", "state", "easily", "isLoadingData", "true", "getItem", "NUMBER", "NUMBER", "en", "function", "item", "isLoadingData", "false", "do", "something", "with", "item", "The", "things", "I", "like", "about", "this", "approach", "be", "NUMBER", "Something", "use", "this", "store", "doesnt", "care", "where", "the", "data", "be", "come", "from", "NUMBER", "It", "might", "take", "a", "few", "seconds", "or", "it", "might", "be", "instant", "but", "it", "s", "handle", "the", "same", "in", "either", "case", "NUMBER", "No", "need", "to", "keep", "track", "of", "loading", "state", "NUMBER", "An", "interested", "view", "can", "do", "that", "very", "easily", "if", "it", "cares", "as", "above", "NUMBER", "NUMBER", "It", "s", "really", "easy", "in", "most", "cases", "to", "ensure", "that", "a", "request", "for", "something", "never", "happens", "more", "than", "once", "NUMBER", "The", "moment", "there", "be", "a", "promise", "in", "the", "cache", "every", "subsequent", "request", "will", "just", "be", "handed", "that", "same", "thing", "NUMBER", "However", "the", "downsides", "be", "that", "you", "end", "up", "work", "with", "promises", "throughout", "the", "system", "which", "means", "everything", "becomes", "asyns", "NUMBER", "Also", "I", "imagine", "storing", "promises", "be", "a", "less", "economical", "approach", "in", "terms", "of", "memory", "NUMBER", "In", "practise", "I", "haven", "t", "find", "these", "to", "be", "a", "problem", "yet", "but", "I", "be", "intrigued", "to", "see", "whether", "a", "flux", "style", "architecture", "which", "eliminates", "promises", "and", "async", "code", "from", "everything", "but", "the", "web", "API", "code", "can", "do", "it", "better", "so", "I", "ll", "be", "having", "a", "go", "at", "it", "for", "my", "next", "project", "NUMBER", "simenbrekken", "I", "like", "your", "approach", "NUMBER", "It", "makes", "total", "sense", "to", "me", "to", "make", "the", "XHR", "request", "from", "inside", "the", "store", "as", "the", "store", "be", "the", "thing", "that", "knows", "what", "exactly", "it", "needs", "to", "get", "and", "in", "my", "mind", "be", "responsible", "for", "well", "storing", "whatever", "data", "be", "asked", "for", "NUMBER", "Knowing", "exactly", "what", "data", "it", "be", "storing", "might", "allow", "it", "to", "be", "cleverer", "with", "regard", "to", "make", "XHR", "request", "as", "well", "eg", "batching", "multiple", "request", "for", "different", "item", "details", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "Is", "there", "any", "update", "on", "this", "issue", "relate", "to", "LINK", "Missing", "constant", "for", "action", "will", "result", "in", "matching", "undefined", "within", "the", "stores", "NUMBER", "This", "simply", "kills", "the", "dispatch", "process", "and", "throw", "an", "error", "if", "the", "payload", "NUMBER", "action", "be", "undefined", "This", "be", "more", "of", "best", "practice", "suggestion", "then", "a", "bug", "but", "cause", "me", "some", "headaches", "today", "NUMBER", "The", "stores", "run", "a", "switch", "statement", "on", "action", "NUMBER", "type", "and", "match", "it", "to", "your", "list", "of", "constants", "NUMBER", "this", "be", "where", "spelling", "mistakes", "random", "fuck", "ups", "can", "add", "up", "in", "a", "rather", "ugly", "manner", "NUMBER", "if", "for", "example", "you", "forgot", "to", "add", "a", "specific", "constant", "to", "your", "list", "you", "will", "basically", "be", "comparing", "undefined", "to", "undefined", "which", "will", "work", "just", "fine", "NUMBER", "You", "will", "catch", "it", "the", "next", "time", "you", "make", "a", "similar", "mistake", "and", "multiple", "actions", "get", "fired", "NUMBER", "Highly", "suggest", "verifying", "action", "NUMBER", "type", "exist", "before", "the", "switch", "statement", "Can", "add", "a", "pull", "req", "for", "the", "examples", "if", "this", "makes", "sense", "require", "flux", "lib", "invariant", "will", "work", "for", "node", "anything", "use", "browserify", "webpack", "NUMBER", "This", "be", "how", "it", "s", "expose", "with", "React", "as", "well", "NUMBER", "I", "don", "t", "think", "it", "should", "be", "expose", "at", "the", "top", "level", "it", "s", "weird", "require", "flux", "NUMBER", "invariant", "feels", "wrong", "invariant", "be", "entirely", "unrelated", "NUMBER", "Ultimately", "we", "want", "to", "get", "to", "a", "point", "where", "these", "shared", "dependencies", "be", "not", "duplicate", "and", "bundled", "like", "this", "and", "they", "be", "usable", "in", "a", "sane", "way", "for", "third", "parties", "NUMBER", "But", "in", "the", "mean", "time", "the", "relative", "module", "path", "works", "NUMBER", "I", "ve", "had", "a", "chat", "with", "a", "few", "colleagues", "and", "it", "feels", "like", "implement", "this", "within", "the", "dispatcher", "would", "make", "more", "sense", "otherwise", "each", "store", "fires", "an", "error", "NUMBER", "Adding", "a", "simple", "action", "validator", "method", "on", "the", "Dispatcher", "dispatch", "method", "be", "rather", "straight", "forward", "and", "require", "NUMBER", "code", "change", "from", "the", "users", "NUMBER", "Does", "this", "sound", "sensible", "LINK", "be", "this", "ok", "Since", "the", "examples", "all", "seem", "to", "follow", "this", "specific", "implementation", "I", "just", "assumed", "this", "was", "the", "intended", "way", "to", "use", "the", "actions", "NUMBER", "I", "understand", "the", "problem", "though", "if", "I", "m", "completely", "honest", "I", "m", "not", "sure", "that", "enforcing", "specific", "structure", "naming", "conventions", "be", "necessary", "bad", "NUMBER", "I", "ve", "be", "use", "Backbone", "for", "a", "good", "while", "now", "and", "the", "biggest", "hurdle", "in", "learning", "how", "to", "use", "it", "properly", "be", "what", "I", "consider", "to", "be", "fake", "freedom", "that", "they", "offer", "NUMBER", "It", "seems", "amazing", "at", "first", "but", "as", "soon", "as", "you", "start", "build", "bigger", "applications", "you", "begin", "to", "stumble", "into", "quite", "a", "few", "problem", "NUMBER", "Now", "the", "community", "did", "come", "up", "with", "best", "practices", "and", "certain", "tool", "wrappers", "like", "Marionette", "were", "invented", "but", "this", "in", "my", "opinion", "again", "be", "too", "little", "too", "late", "and", "frameworks", "like", "AngularJS", "just", "gain", "huge", "traction", "NUMBER", "Now", "I", "m", "not", "suggesting", "to", "turn", "Flux", "into", "anything", "that", "all", "encompassing", "but", "I", "m", "also", "weary", "of", "leaving", "these", "and", "others", "know", "issue", "to", "the", "individual", "implementation", "just", "for", "the", "sake", "of", "what", "seems", "like", "edge", "cases", "Obviously", "just", "my", "own", "opinion", "here", "This", "be", "not", "really", "an", "issue", "more", "of", "a", "question", "but", "I", "couldn", "t", "find", "a", "place", "to", "put", "it", "NUMBER", "As", "far", "as", "I", "can", "see", "top", "level", "ViewControllers", "end", "up", "pretty", "much", "just", "mirroring", "stores", "in", "their", "state", "NUMBER", "Is", "there", "any", "reason", "to", "do", "this", "as", "oppose", "to", "just", "pulling", "data", "straight", "from", "the", "stores", "and", "calling", "forceUpdate", "on", "change", "My", "app", "has", "NUMBER", "ViewControllers", "and", "growing", "so", "it", "add", "up", "to", "a", "ton", "of", "boilerplate", "nearly", "repeated", "between", "every", "ViewController", "NUMBER", "Here", "be", "all", "the", "boilerplate", "in", "the", "TodoApp", "example", "which", "effectively", "serves", "to", "mirror", "the", "TodoStore", "state", "into", "TodoApp", "s", "state", "javascript", "function", "getTodoState", "return", "allTodos", "TodoStore", "NUMBER", "getAll", "areAllComplete", "TodoStore", "NUMBER", "areAllComplete", "var", "TodoApp", "React", "NUMBER", "createClass", "getInitialState", "function", "return", "getTodoState", "componentDidMount", "function", "TodoStore", "NUMBER", "addChangeListener", "this", "NUMBER", "_onChange", "componentWillUnmount", "function", "TodoStore", "NUMBER", "removeChangeListener", "this", "NUMBER", "_onChange", "_onChange", "function", "this", "NUMBER", "setState", "getTodoState", "module", "NUMBER", "export", "TodoApp", "I", "suppose", "I", "could", "make", "a", "mixin", "to", "eliminate", "some", "of", "the", "boilerplate", "but", "this", "doesn", "t", "really", "solve", "the", "underlying", "problem", "now", "instead", "of", "storing", "state", "just", "in", "one", "place", "or", "another", "in", "the", "component", "or", "store", "state", "it", "s", "effectively", "stored", "in", "two", "places", "which", "makes", "it", "a", "pretty", "terrible", "state", "mess", "NUMBER", "Digging", "a", "little", "deeper", "sometimes", "parts", "of", "component", "state", "be", "not", "mirrored", "in", "stores", "in", "the", "chat", "app", "the", "message", "composer", "stores", "the", "message", "while", "it", "s", "be", "composed", "in", "local", "state", "but", "when", "it", "s", "saved", "it", "gets", "moved", "into", "a", "store", "NUMBER", "Maybe", "I", "m", "not", "seeing", "something", "here", "but", "it", "feels", "very", "inconsistent", "to", "me", "and", "again", "spreading", "state", "out", "over", "more", "places", "than", "necessary", "NUMBER", "Thoughts", "Yeah", "the", "name", "makes", "total", "sense", "NUMBER", "I", "think", "I", "must", "have", "just", "forgotten", "at", "least", "I", "get", "that", "the", "name", "had", "controller", "and", "view", "in", "it", "Very", "interesting", "on", "the", "distinction", "between", "shared", "state", "and", "individual", "state", "NUMBER", "Makes", "total", "sense", "NUMBER", "Maybe", "this", "be", "a", "silly", "question", "but", "would", "it", "make", "sense", "for", "a", "component", "which", "manages", "its", "own", "state", "pass", "that", "state", "down", "to", "other", "components", "through", "their", "props", "and", "listen", "via", "some", "kind", "of", "change", "listeners", "In", "that", "case", "why", "not", "have", "controller", "views", "encapsulate", "the", "state", "entirely", "without", "use", "stores", "Also", "interesting", "thought", "on", "use", "this", "NUMBER", "ate", "as", "an", "effective", "shortcut", "to", "the", "store", "NUMBER", "I", "guess", "another", "part", "of", "my", "concern", "be", "mixing", "store", "state", "with", "component", "state", "in", "some", "components", "gets", "messy", "as", "well", "NUMBER", "I", "ve", "managed", "this", "by", "having", "controller", "views", "hold", "all", "their", "state", "in", "the", "store", "even", "when", "it", "s", "not", "necessarily", "shared", "state", "NUMBER", "Does", "this", "make", "sense", "to", "do", "Thanks", "for", "the", "answer", "fisherwebdev", "dmitrig", "NUMBER", "If", "you", "need", "to", "share", "state", "between", "react", "components", "flux", "recommends", "use", "stores", "I", "see", "controller", "views", "as", "views", "that", "layout", "other", "views", "and", "pass", "store", "data", "into", "them", "NUMBER", "Not", "as", "places", "to", "try", "and", "keep", "consistent", "models", "as", "you", "will", "be", "mingling", "concerns", "the", "view", "and", "the", "domain", "model", "if", "you", "were", "to", "do", "that", "NUMBER", "State", "in", "stores", "doesn", "t", "have", "to", "be", "shared", "so", "I", "don", "t", "see", "an", "issue", "with", "storing", "everything", "in", "stores", "NUMBER", "Your", "problem", "might", "be", "that", "your", "app", "isn", "t", "quite", "complex", "enough", "to", "require", "use", "flux", "flux", "be", "something", "I", "would", "use", "for", "medium", "to", "high", "complexity", "applications", "components", "NUMBER", "fisherwebdev", "still", "curious", "on", "the", "best", "practice", "here", "not", "sure", "about", "the", "best", "practice", "in", "terms", "of", "mixing", "store", "state", "with", "individual", "component", "state", "in", "the", "component", "s", "state", "variable", "NUMBER", "Isn", "t", "it", "a", "little", "messy", "to", "do", "As", "a", "concrete", "example", "I", "have", "a", "controller", "view", "which", "has", "three", "pie", "charts", "which", "have", "the", "same", "keys", "but", "different", "values", "NUMBER", "When", "you", "hover", "over", "a", "slice", "on", "one", "the", "same", "highlights", "on", "all", "three", "NUMBER", "The", "data", "contained", "by", "the", "charts", "would", "be", "considered", "shared", "state", "and", "resides", "in", "the", "store", "but", "hover", "data", "seems", "to", "be", "state", "local", "to", "the", "controller", "view", "NUMBER", "However", "the", "component", "s", "state", "variable", "now", "contains", "aliased", "state", "from", "the", "store", "as", "well", "as", "actual", "local", "state", "which", "feels", "very", "messy", "NUMBER", "Does", "this", "make", "sense", "Hover", "state", "do", "not", "seem", "local", "to", "the", "controller", "view", "that", "should", "be", "state", "that", "be", "local", "to", "the", "child", "view", "components", "you", "hover", "over", "them", "not", "the", "view", "controller", "NUMBER", "The", "view", "controller", "just", "pass", "what", "be", "hover", "over", "into", "the", "child", "views", "when", "it", "s", "notified", "of", "a", "change", "by", "the", "store", "it", "listens", "to", "NUMBER", "You", "shouldn", "t", "store", "hover", "state", "in", "the", "child", "views", "either", "then", "as", "they", "should", "have", "that", "value", "pass", "in", "to", "them", "from", "their", "parent", "view", "controller", "all", "they", "do", "be", "call", "action", "creators", "which", "will", "eventually", "be", "handle", "by", "the", "store", "which", "then", "notifies", "the", "view", "controller", "which", "then", "NUMBER", "Interesting", "this", "be", "what", "I", "get", "from", "what", "you", "were", "saying", "NUMBER", "Store", "the", "hovered", "state", "in", "a", "store", "NUMBER", "Pie", "charts", "have", "an", "onHover", "callback", "NUMBER", "The", "parent", "controller", "view", "attaches", "an", "onHover", "function", "to", "its", "child", "pie", "charts", "that", "set", "data", "in", "the", "store", "well", "fires", "an", "action", "that", "sets", "data", "but", "w", "e", "NUMBER", "Have", "the", "parent", "controller", "view", "pass", "in", "the", "store", "data", "to", "the", "when", "the", "store", "change", "Is", "that", "fair", "or", "be", "you", "thinking", "something", "more", "along", "the", "lines", "of", "the", "pie", "chart", "components", "be", "actually", "their", "own", "controller", "views", "That", "feels", "really", "ugly", "to", "me", "NUMBER", "In", "this", "instance", "it", "seems", "somewhat", "pointless", "to", "store", "hover", "data", "in", "the", "store", "as", "it", "s", "not", "shared", "state", "it", "s", "only", "use", "in", "one", "instance", "of", "component", "the", "controller", "view", "yes", "thanks", "The", "npm", "package", "works", "very", "well", "now", "and", "I", "think", "the", "actual", "dispatcher", "code", "in", "the", "flux", "package", "should", "be", "a", "good", "enough", "example", "for", "people", "who", "would", "want", "to", "implement", "their", "own", "dispatchers", "NUMBER", "This", "commit", "remove", "the", "duplicate", "Dispatcher", "and", "dependent", "invariant", "code", "in", "favor", "of", "use", "the", "npm", "package", "NUMBER", "Seems", "reasonable", "to", "me", "but", "I", "ll", "let", "fisherwebdev", "decide", "NUMBER", "thumbsup", "Per", "this", "change", "LINK", "I", "can", "t", "figure", "out", "why", "_onChange", "be", "not", "call", "in", "the", "todo", "example", "after", "return", "be", "pressed", "yet", "it", "be", "call", "in", "the", "chat", "example", "NUMBER", "I", "m", "guessing", "there", "must", "be", "some", "subtle", "difference", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "NUMBER", "minor", "change", "NUMBER", "Enable", "react", "chrome", "dev", "tool", "NUMBER", "NUMBER", "Smaller", "methods", "NUMBER", "zpao", "jingc", "I", "think", "the", "PR", "might", "be", "OK", "now", "NUMBER", "Net", "result", "be", "NUMBER", "Broke", "out", "a", "couple", "of", "methods", "of", "render", "to", "reduce", "some", "very", "long", "methods", "NUMBER", "NUMBER", "Expose", "React", "on", "window", "for", "the", "react", "devtools", "I", "stand", "by", "my", "original", "comments", "about", "not", "moving", "things", "out", "of", "render", "but", "fisherwebdev", "has", "the", "final", "say", "NUMBER", "It", "s", "not", "really", "add", "anything", "here", "and", "it", "s", "important", "to", "remember", "this", "be", "example", "code", "so", "make", "it", "perfectly", "clean", "and", "production", "ready", "isn", "t", "the", "goal", "NUMBER", "The", "devtools", "change", "should", "happen", "though", "preferably", "in", "a", "new", "PR", "on", "its", "own", "so", "we", "don", "t", "have", "to", "worry", "about", "the", "other", "bits", "here", "NUMBER", "zpao", "I", "did", "as", "you", "request", "with", "a", "separate", "PR", "for", "enabling", "the", "react", "devtools", "LINK", "I", "ve", "get", "the", "React", "tutorial", "run", "with", "ES", "NUMBER", "with", "Webpack", "LINK", "tutorial", "hot", "tree", "es", "NUMBER", "This", "seems", "way", "better", "than", "watchify", "NUMBER", "petehunt", "turned", "me", "to", "webpack", "and", "it", "s", "awesome", "NUMBER", "I", "d", "be", "happy", "to", "submit", "a", "PR", "for", "the", "two", "example", "program", "if", "this", "be", "useful", "NUMBER", "As", "part", "of", "the", "PR", "I", "d", "like", "to", "update", "the", "dispatcher", "to", "the", "newer", "ES", "NUMBER", "version", "NUMBER", "I", "think", "NUMBER", "be", "going", "to", "update", "to", "the", "latest", "dispatcher", "code", "NUMBER", "I", "think", "we", "should", "use", "npm", "and", "not", "force", "anything", "ES", "NUMBER", "just", "because", "we", "can", "NUMBER", "I", "don", "t", "feel", "strongly", "about", "webpack", "sure", "it", "has", "some", "upsides", "so", "I", "ll", "let", "fisherwebdev", "chime", "in", "NUMBER", "petehunt", "turned", "me", "on", "to", "webpack", "NUMBER", "I", "cannot", "comment", "on", "the", "alternative", "as", "I", "ve", "mostly", "use", "WebPack", "NUMBER", "I", "really", "enjoy", "how", "WebPack", "update", "the", "client", "side", "JavaScript", "code", "nearly", "instantly", "and", "these", "update", "include", "the", "rendering", "and", "often", "the", "models", "NUMBER", "Sometimes", "I", "do", "refresh", "the", "browser", "but", "more", "often", "I", "don", "t", "NUMBER", "The", "configuration", "be", "also", "very", "easy", "for", "a", "newbie", "NUMBER", "In", "this", "repo", "LINK", "webpack", "rails", "tutorial", "inside", "of", "the", "webpack", "directory", "the", "webpack", "dev", "server", "handles", "the", "code", "there", "NUMBER", "I", "write", "this", "up", "here", "LINK", "webpack", "and", "the", "es", "NUMBER", "transpiler", "into", "an", "exist", "rails", "project", "NUMBER", "fisherwebdev", "Hot", "reload", "whether", "via", "webpack", "browsersync", "NUMBER", "io", "or", "other", "library", "makes", "exploratory", "development", "AKA", "exactly", "what", "an", "interested", "React", "Flux", "beginner", "will", "want", "to", "do", "significantly", "easier", "NUMBER", "pikeas", "given", "the", "issue", "cited", "here", "for", "example", "LINK", "vs", "webpack", "Why", "would", "webpack", "be", "any", "easier", "than", "currently", "use", "browserify", "It", "certainly", "seems", "less", "scalable", "NUMBER", "Looking", "at", "the", "documentation", "for", "webpack", "the", "configuration", "be", "almost", "more", "complex", "than", "require", "NUMBER", "js", "which", "feels", "like", "a", "step", "back", "but", "the", "killer", "issue", "be", "that", "the", "overloading", "of", "require", "calls", "with", "loader", "directives", "makes", "webpack", "modules", "unrunnable", "in", "node", "require", "json", "NUMBER", "foo", "NUMBER", "json", "That", "s", "hard", "to", "see", "as", "a", "win", "NUMBER", "sterpe", "Your", "points", "be", "fair", "NUMBER", "Although", "I", "personally", "prefer", "webpack", "I", "m", "advocating", "for", "hot", "reloading", "in", "some", "capacity", "regardless", "of", "implementation", "details", "NUMBER", "Regarding", "require", "json", "NUMBER", "foo", "NUMBER", "json", "loaders", "can", "be", "specified", "in", "the", "webpack", "config", "file", "so", "that", "require", "stays", "clean", "LINK", "loaders", "by", "config", "Sure", "but", "there", "we", "get", "into", "that", "configuration", "complexity", "to", "do", "something", "that", "browserify", "do", "with", "none", "or", "very", "little", "NUMBER", "Just", "seems", "weird", "to", "me", "NUMBER", "Really", "do", "we", "need", "to", "hot", "load", "these", "demos", "Honestly", "how", "much", "time", "do", "people", "spend", "playing", "with", "them", "before", "they", "put", "them", "away", "and", "start", "build", "something", "real", "Added", "a", "video", "page", "to", "the", "documentation", "section", "NUMBER", "Page", "contains", "videos", "of", "the", "presentations", "given", "by", "Jing", "Chen", "NUMBER", "I", "d", "like", "to", "get", "some", "feedback", "if", "these", "change", "be", "helpful", "NUMBER", "In", "particular", "I", "wanted", "to", "have", "the", "ThreadStore", "listen", "for", "new", "message", "created", "and", "then", "pull", "the", "last", "message", "from", "the", "MessageStore", "NUMBER", "However", "due", "to", "some", "circular", "dependency", "issue", "I", "could", "not", "get", "that", "work", "NUMBER", "The", "code", "that", "doesn", "t", "work", "be", "commented", "out", "in", "ThreadStore", "NUMBER", "I", "d", "also", "like", "to", "know", "if", "having", "the", "MessageStore", "send", "a", "message", "to", "update", "the", "ThreadStore", "directly", "be", "acceptable", "NUMBER", "Clearly", "the", "MessageStore", "be", "dependent", "on", "the", "ThreadStore", "NUMBER", "I", "m", "guessing", "that", "having", "this", "dependency", "only", "go", "in", "one", "direction", "was", "critical", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "To", "justify", "having", "separate", "handlers", "for", "_onChange", "and", "_onKeyDown", "I", "add", "support", "for", "shift", "enter", "NUMBER", "fisherwebdev", "What", "do", "you", "think", "if", "the", "suggested", "change", "here", "Anything", "I", "should", "change", "to", "get", "this", "accepted", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "Is", "there", "any", "reason", "why", "the", "dispatcher", "can", "t", "handle", "a", "dispatch", "in", "the", "middle", "of", "a", "dispatch", "I", "can", "t", "be", "sure", "that", "this", "will", "not", "happen", "NUMBER", "I", "have", "a", "lot", "of", "async", "API", "calls", "that", "will", "dispatch", "events", "simultaneously", "and", "i", "m", "run", "into", "this", "error", "NUMBER", "Am", "i", "doing", "s", "NUMBER", "NUMBER", "wrong", "Is", "there", "any", "reason", "why", "you", "should", "not", "have", "a", "queue", "in", "the", "dispatcher", "Yeah", "had", "the", "same", "concern", "I", "write", "a", "pure", "async", "dispatcher", "it", "s", "pretty", "beta", "but", "support", "recursive", "dispatching", "in", "the", "correct", "order", "while", "ensuring", "that", "there", "be", "no", "browser", "redraws", "until", "all", "affected", "views", "have", "update", "NUMBER", "You", "can", "check", "it", "out", "here", "maybe", "it", "would", "work", "for", "you", "too", "NUMBER", "LINK", "flux", "thanks", "for", "your", "replies", "i", "m", "excited", "to", "see", "the", "action", "queue", "at", "the", "stores", "i", "ll", "have", "my", "own", "dispatching", "queue", "for", "now", "NUMBER", "thank", "you", "guys", "NUMBER", "fisherwebdev", "Thanks", "for", "your", "reply", "NUMBER", "Let", "s", "imagine", "I", "have", "multiple", "instances", "of", "the", "same", "component", "which", "must", "fire", "an", "action", "inside", "componentDidMount", "NUMBER", "All", "of", "those", "components", "be", "rendered", "from", "an", "array", "of", "data", "objects", "simultaneously", "NUMBER", "How", "should", "I", "implement", "this", "I", "be", "use", "Alt", "but", "their", "docs", "say", "they", "use", "your", "dispatcher", "so", "I", "figured", "I", "should", "ask", "here", "as", "well", "NUMBER", "Thanks", "Minor", "change", "NUMBER", "In", "the", "chat", "example", "we", "don", "t", "have", "to", "refill", "store", "with", "sample", "message", "if", "we", "already", "have", "some", "data", "in", "localStorage", "NUMBER", "Existing", "data", "be", "already", "pull", "by", "ChatWebAPIUtils", "NUMBER", "_prefix", "be", "not", "defined", "I", "m", "actually", "experience", "this", "issue", "because", "we", "re", "use", "react", "router", "which", "in", "turn", "uses", "Flux", "NUMBER", "It", "s", "be", "referenced", "over", "in", "Webpack", "s", "issue", "but", "it", "doesn", "t", "appear", "to", "be", "a", "Webpack", "issue", "LINK", "LINK", "Does", "it", "makes", "sense", "to", "remove", "the", "use", "strict", "requirement", "there", "Is", "that", "the", "issue", "I", "m", "work", "around", "this", "by", "use", "jsx", "harmony", "Webpack", "loader", "and", "original", "ES", "NUMBER", "Dispatcher", "NUMBER", "js", "file", "with", "my", "own", "use", "strict", "add", "at", "the", "very", "top", "NUMBER", "Just", "run", "into", "this", "as", "well", "NUMBER", "fisherwebdev", "For", "me", "putting", "use", "strict", "at", "the", "top", "of", "Dispatcher", "NUMBER", "js", "helps", "it", "no", "longer", "generates", "use", "strict", "inside", "function", "and", "thus", "doesn", "t", "break", "eval", "in", "Chrome", "NUMBER", "We", "re", "not", "going", "to", "be", "change", "the", "class", "transforms", "which", "be", "add", "the", "inner", "use", "strict", "s", "in", "jstransform", "via", "react", "tool", "so", "I", "think", "doing", "what", "gaearon", "says", "and", "putting", "use", "strict", "at", "the", "top", "of", "the", "file", "be", "the", "right", "move", "NUMBER", "NUMBER", "Thanks", "So", "I", "can", "t", "get", "a", "corect", "bundle", "NUMBER", "js", "NUMBER", "Maybe", "the", "reason", "be", "Windows", "NUMBER", "npm", "ERR", "todomvc", "flux", "NUMBER", "start", "STATIC_ROOT", "NUMBER", "static", "watchify", "o", "js", "bundle", "NUMBER", "s", "v", "d", "NUMBER", "npm", "ERR", "Exit", "status", "NUMBER", "npm", "ERR", "npm", "ERR", "Failed", "at", "the", "todomvc", "flux", "NUMBER", "start", "script", "NUMBER", "npm", "ERR", "This", "be", "most", "likely", "a", "problem", "with", "the", "todomvc", "flux", "package", "npm", "ERR", "not", "with", "npm", "itself", "NUMBER", "npm", "ERR", "Tell", "the", "author", "that", "this", "fail", "on", "your", "system", "npm", "ERR", "STATIC_ROOT", "NUMBER", "static", "watchify", "o", "js", "bundle", "NUMBER", "js", "v", "d", "NUMBER", "npm", "ERR", "You", "can", "get", "their", "info", "via", "npm", "ERR", "npm", "owner", "ls", "todomvc", "flux", "npm", "ERR", "There", "be", "likely", "additional", "logging", "output", "above", "NUMBER", "npm", "ERR", "System", "Windows_NT", "NUMBER", "npm", "ERR", "command", "d", "Program", "Files", "nodejs", "node", "NUMBER", "exe", "d", "Program", "Files", "node", "s", "node_modules", "npm", "bin", "npm", "cli", "NUMBER", "js", "start", "npm", "ERR", "cwd", "d", "web_try", "flux", "examples", "flux", "todomvc", "npm", "ERR", "node", "v", "v", "NUMBER", "npm", "ERR", "npm", "v", "NUMBER", "npm", "ERR", "code", "ELIFECYCLE", "npm", "ERR", "npm", "ERR", "Additional", "logging", "details", "can", "be", "find", "in", "npm", "ERR", "d", "web_try", "flux", "examples", "flux", "todomvc", "npm", "debug", "NUMBER", "log", "npm", "ERR", "not", "ok", "code", "NUMBER", "This", "be", "a", "Windows", "problem", "can", "t", "set", "env", "variables", "via", "command", "like", "this", "so", "this", "be", "basically", "a", "dupe", "of", "NUMBER", "and", "should", "get", "fix", "by", "dropping", "the", "use", "of", "statics", "NUMBER", "I", "ve", "notice", "that", "both", "child", "components", "Sections", "be", "listening", "to", "the", "stores", "directly", "while", "saving", "the", "data", "as", "state", "and", "not", "props", "NUMBER", "This", "seems", "a", "bit", "counter", "intuitive", "to", "me", "because", "NUMBER", "I", "would", "have", "expected", "the", "stores", "to", "be", "the", "only", "source", "of", "truth", "by", "storing", "their", "data", "as", "state", "in", "multiple", "components", "I", "can", "theoretically", "have", "colliding", "data", "NUMBER", "NUMBER", "I", "also", "assumed", "that", "stores", "will", "be", "connected", "to", "the", "top", "most", "component", "and", "pass", "down", "as", "props", "NUMBER", "Is", "this", "just", "an", "oversight", "Or", "be", "I", "miss", "something", "here", "I", "m", "outside", "the", "React", "Flux", "team", "but", "this", "be", "my", "understanding", "of", "things", "it", "might", "be", "wrong", "NUMBER", "NUMBER", "Stores", "be", "the", "source", "of", "truth", "they", "be", "event", "emitters", "and", "be", "listened", "to", "by", "the", "components", "NUMBER", "The", "setState", "call", "be", "because", "React", "has", "no", "observables", "so", "it", "must", "be", "told", "when", "the", "component", "needs", "to", "be", "rendered", "that", "data", "would", "almost", "always", "come", "from", "Stores", "so", "in", "reality", "it", "s", "not", "state", "that", "the", "React", "components", "would", "mutate", "they", "simply", "rendered", "it", "to", "the", "screen", "NUMBER", "NUMBER", "Yes", "the", "fact", "Stores", "etc", "be", "all", "Singletons", "be", "a", "problem", "for", "us", "in", "our", "particular", "use", "of", "Flux", "NUMBER", "We", "have", "solve", "it", "by", "use", "a", "factory", "to", "return", "instances", "of", "Stores", "etc", "NUMBER", "We", "might", "write", "a", "blog", "post", "about", "it", "soon", "NUMBER", "briandipalma", "NUMBER", "React", "do", "have", "a", "setProps", "method", "which", "re", "renders", "the", "component", "NUMBER", "However", "it", "can", "only", "be", "call", "by", "top", "level", "components", "NUMBER", "They", "specifically", "discourage", "you", "from", "use", "it", "or", "so", "it", "seems", "but", "they", "do", "suggest", "in", "the", "docs", "that", "only", "one", "source", "of", "truth", "should", "exist", "in", "the", "app", "aka", "components", "should", "not", "duplicate", "it", "NUMBER", "I", "just", "feel", "like", "I", "m", "miss", "something", "here", "NUMBER", "I", "d", "be", "very", "interested", "in", "reading", "that", "do", "drop", "a", "line", "if", "when", "you", "do", "NUMBER", "Props", "be", "immutable", "and", "pass", "in", "from", "your", "parent", "state", "be", "mutable", "and", "local", "to", "the", "component", "NUMBER", "This", "aids", "in", "pinpointing", "bug", "NUMBER", "I", "think", "if", "you", "relied", "on", "your", "parent", "feeding", "all", "data", "from", "Stores", "into", "you", "as", "props", "you", "would", "be", "ask", "React", "to", "do", "too", "much", "unnecessary", "work", "NUMBER", "Anyway", "the", "only", "ways", "that", "parents", "could", "trigger", "a", "render", "of", "them", "self", "be", "either", "via", "setState", "or", "a", "force", "update", "NUMBER", "The", "Stores", "be", "the", "source", "of", "truth", "you", "can", "t", "ask", "your", "React", "components", "for", "that", "data", "you", "can", "only", "ask", "the", "Stores", "NUMBER", "NUMBER", "Will", "do", "NUMBER", "Thanks", "fisherwebdev", "briandipalma", "was", "somewhat", "confused", "about", "this", "NUMBER", "fyi", "LINK", "in", "getInitialState", "as", "anti", "pattern", "NUMBER", "html", "can", "be", "interpreted", "as", "saying", "you", "should", "use", "setProps", "when", "get", "data", "from", "stores", "NUMBER", "Closing", "this", "for", "now", "Clarifies", "the", "description", "of", "Flux", "functionality", "in", "the", "README", "NUMBER", "The", "following", "text", "on", "lines", "NUMBER", "NUMBER", "be", "difficult", "to", "understand", "BEFORE", "When", "a", "user", "interacts", "with", "a", "React", "view", "the", "view", "propagates", "an", "action", "through", "a", "central", "dispatcher", "to", "the", "various", "stores", "that", "hold", "the", "application", "s", "data", "and", "business", "logic", "which", "update", "all", "of", "the", "views", "that", "be", "affected", "NUMBER", "AFTER", "When", "a", "user", "interacts", "with", "a", "React", "view", "the", "view", "propagates", "an", "action", "through", "a", "central", "dispatcher", "to", "the", "various", "stores", "that", "hold", "the", "application", "s", "data", "and", "business", "logic", "update", "all", "affected", "views", "NUMBER", "In", "the", "original", "case", "the", "which", "in", "which", "update", "all", "of", "the", "views", "that", "be", "affected", "refers", "to", "an", "ambiguous", "subject", "could", "be", "the", "React", "view", "the", "central", "dispatcher", "the", "stores", "or", "the", "data", "and", "business", "logic", "NUMBER", "I", "would", "like", "to", "change", "this", "sentence", "so", "that", "the", "gerund", "implies", "that", "propagating", "an", "action", "from", "the", "view", "down", "to", "the", "stores", "be", "cause", "all", "affected", "views", "to", "be", "update", "NUMBER", "I", "had", "some", "trouble", "initially", "understanding", "what", "this", "sentence", "was", "trying", "to", "say", "and", "I", "think", "my", "change", "might", "relieve", "some", "possible", "confusion", "NUMBER", "I", "hope", "this", "be", "helpful", "I", "was", "trying", "to", "explain", "Flux", "to", "my", "class", "and", "we", "spent", "some", "time", "parsing", "out", "the", "README", "NUMBER", "To", "be", "honest", "I", "feel", "like", "the", "change", "leaves", "the", "issue", "of", "who", "or", "what", "has", "the", "responsibility", "for", "update", "the", "views", "with", "change", "just", "as", "ambiguous", "NUMBER", "The", "passivity", "of", "the", "word", "presents", "view", "update", "merely", "as", "a", "side", "effect", "of", "the", "flux", "flow", "NUMBER", "I", "think", "the", "original", "issue", "can", "be", "better", "fix", "by", "properly", "conjugating", "update", "so", "that", "it", "binds", "to", "the", "stores", "as", "the", "actors", "NUMBER", "ie", "NUMBER", "stores", "which", "update", "all", "of", "the", "views", "NUMBER", "I", "agree", "I", "think", "that", "makes", "it", "much", "more", "clear", "NUMBER", "I", "had", "trouble", "understanding", "what", "was", "ultimately", "affecting", "the", "views", "so", "I", "think", "this", "be", "a", "good", "change", "NUMBER", "In", "your", "example", "it", "sounds", "like", "the", "dispatcher", "be", "cause", "an", "update", "of", "the", "views", "by", "propagating", "the", "view", "action", "NUMBER", "Is", "that", "what", "be", "happening", "fisherwebdev", "right", "I", "guess", "the", "point", "I", "was", "trying", "to", "make", "be", "that", "a", "view", "has", "attached", "a", "listener", "to", "the", "store", "which", "be", "an", "instance", "of", "an", "event", "emitter", "of", "some", "type", "and", "that", "be", "how", "it", "be", "informed", "about", "the", "change", "in", "the", "store", "s", "data", "NUMBER", "On", "Fri", "Aug", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Etienne", "Tripier", "notifications", "github", "NUMBER", "com", "write", "In", "your", "example", "it", "sounds", "like", "the", "dispatcher", "be", "cause", "an", "update", "of", "the", "views", "by", "propagating", "the", "view", "action", "NUMBER", "Is", "that", "what", "be", "happening", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "fisherwebdev", "Thanks", "for", "the", "explanation", "NUMBER", "How", "do", "you", "feel", "about", "the", "following", "clarification", "When", "a", "user", "interacts", "with", "a", "React", "view", "the", "view", "propagates", "an", "action", "through", "a", "central", "dispatcher", "NUMBER", "The", "dispatcher", "propagates", "this", "action", "to", "the", "various", "stores", "that", "hold", "the", "application", "s", "data", "and", "business", "logic", "these", "stores", "then", "trigger", "an", "update", "event", "on", "the", "views", "NUMBER", "Just", "throwin", "it", "out", "there", "NUMBER", "how", "about", "a", "more", "structured", "sequence", "of", "events", "along", "with", "some", "basic", "examples", "In", "response", "to", "user", "interaction", "React", "components", "fire", "a", "Flux", "Action", "optionally", "sending", "data", "to", "the", "action", "_Example", "submit", "the", "contents", "of", "a", "form", "_", "The", "Flux", "Action", "then", "acts", "upon", "the", "data", "it", "received", "_Example", "sending", "the", "data", "to", "a", "web", "service", "for", "persistence", "_", "The", "Flux", "Action", "then", "sends", "a", "message", "with", "a", "payload", "to", "the", "dispatcher", "NUMBER", "_Example", "payload", "be", "the", "response", "from", "the", "web", "service", "_", "The", "dispatcher", "broadcasts", "the", "message", "with", "its", "payload", "to", "all", "Flux", "Stores", "NUMBER", "Each", "Flux", "store", "inspects", "the", "payload", "and", "decides", "whether", "or", "not", "or", "how", "to", "update", "its", "state", "NUMBER", "_Example", "the", "store", "has", "an", "opportunity", "to", "ignore", "filter", "or", "aggregate", "the", "payload", "_", "React", "components", "will", "update", "their", "state", "if", "the", "stores", "they", "be", "listening", "to", "be", "one", "of", "the", "stores", "that", "chose", "to", "update", "its", "state", "NUMBER", "React", "components", "that", "update", "their", "state", "will", "re", "render", "On", "Thu", "Aug", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Etienne", "Tripier", "notifications", "github", "NUMBER", "com", "write", "fisherwebdev", "LINK", "Thanks", "for", "the", "explanation", "NUMBER", "How", "do", "you", "feel", "about", "the", "following", "clarification", "When", "a", "user", "interacts", "with", "a", "React", "view", "the", "view", "propagates", "an", "action", "through", "a", "central", "dispatcher", "NUMBER", "The", "dispatcher", "propagates", "this", "action", "to", "the", "various", "stores", "that", "hold", "the", "application", "s", "data", "and", "business", "logic", "these", "stores", "then", "trigger", "an", "update", "event", "on", "the", "views", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "Maybe", "we", "re", "focusing", "on", "the", "wrong", "actor", "Maybe", "the", "final", "sentence", "should", "be", "something", "like", "In", "response", "to", "change", "in", "application", "state", "Views", "then", "query", "the", "stores", "for", "the", "new", "data", "state", "and", "re", "render", "themselves", "as", "appropriate", "NUMBER", "Maybe", "avoid", "the", "implication", "that", "a", "store", "be", "an", "actor", "on", "a", "view", "NUMBER", "Sent", "from", "my", "iPhone", "On", "Aug", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Bill", "Fisher", "notifications", "github", "NUMBER", "com", "write", "etripier", "We", "re", "very", "close", "I", "think", "NUMBER", "Sorry", "for", "the", "churn", "but", "this", "be", "a", "very", "important", "sentence", "in", "the", "docs", "so", "I", "think", "it", "s", "worth", "the", "iteration", "NUMBER", "I", "like", "what", "you", "ve", "do", "with", "the", "first", "part", "NUMBER", "The", "very", "last", "thing", "about", "the", "store", "view", "communication", "be", "the", "stumbling", "block", "I", "think", "NUMBER", "I", "don", "t", "think", "we", "need", "to", "get", "into", "the", "details", "here", "so", "much", "NUMBER", "I", "think", "the", "important", "thing", "be", "to", "say", "be", "that", "data", "flows", "from", "store", "to", "view", "without", "saying", "anything", "misleading", "NUMBER", "Maybe", "When", "a", "user", "interacts", "with", "a", "React", "view", "the", "view", "propagates", "an", "action", "through", "a", "central", "dispatcher", "NUMBER", "The", "dispatcher", "propagates", "this", "action", "to", "the", "various", "stores", "that", "hold", "the", "application", "s", "data", "and", "business", "logic", "NUMBER", "The", "stores", "then", "cause", "the", "views", "to", "update", "themselves", "based", "on", "their", "new", "data", "NUMBER", "Not", "sure", "if", "this", "be", "get", "too", "long", "winded", "NUMBER", "I", "d", "prefer", "to", "simplify", "if", "possible", "NUMBER", "plaxdan", "This", "be", "intro", "stuff", "NUMBER", "Needs", "to", "be", "light", "at", "a", "very", "high", "level", "and", "not", "confusing", "at", "all", "NUMBER", "It", "s", "not", "the", "place", "to", "detail", "the", "mechanics", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "plaxdan", "I", "really", "appreciate", "the", "breakdown", "of", "the", "process", "that", "s", "actually", "exactly", "what", "I", "needed", "but", "I", "understand", "the", "need", "to", "provide", "a", "simplified", "explanation", "NUMBER", "fisherwebdev", "When", "you", "say", "The", "stores", "then", "cause", "the", "views", "to", "update", "themselves", "based", "on", "their", "new", "data", "do", "that", "mean", "that", "change", "to", "the", "stores", "data", "triggers", "an", "event", "listener", "in", "the", "views", "I", "m", "interested", "particularly", "in", "what", "cause", "the", "views", "means", "NUMBER", "Thanks", "again", "for", "taking", "the", "time", "to", "walk", "me", "through", "this", "NUMBER", "etripier", "The", "StoreWatchMixin", "LINK", "_watch_mixin", "NUMBER", "js", "from", "Fluxxor", "demonstrates", "this", "nicely", "NUMBER", "The", "concepts", "to", "understand", "be", "stores", "be", "Node", "event", "emitters", "LINK", "thought", "they", "don", "t", "have", "to", "be", "this", "be", "just", "how", "Fluxxor", "implement", "their", "stores", "therefore", "other", "objects", "can", "listen", "for", "events", "that", "stores", "choose", "to", "emit", "when", "the", "store", "receives", "a", "message", "from", "the", "dispatcher", "it", "may", "or", "may", "not", "decide", "to", "update", "its", "state", "NUMBER", "If", "it", "_does_", "update", "its", "state", "then", "because", "it", "be", "a", "node", "event", "emitter", "it", "can", "emit", "a", "change", "event", "the", "Fluxxor", "StoreWatchMixin", "do", "the", "job", "of", "signing", "the", "React", "component", "up", "to", "listen", "LINK", "_watch_mixin", "NUMBER", "js", "L", "NUMBER", "to", "the", "event", "emmitter", "change", "events", "on", "certain", "stores", "the", "mixin", "also", "provides", "automatic", "setting", "of", "the", "React", "component", "state", "LINK", "_watch_mixin", "NUMBER", "js", "L", "NUMBER", "from", "the", "store", "state", "when", "such", "an", "event", "occur", "So", "the", "glue", "between", "your", "action", "and", "your", "store", "be", "the", "dispatcher", "but", "the", "glue", "between", "your", "store", "and", "your", "React", "components", "be", "Node", "event", "emitters", "at", "least", "that", "s", "what", "s", "use", "in", "Fluxxor", "and", "a", "couple", "of", "other", "implementations", "of", "Flux", "I", "ve", "seen", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "This", "be", "relate", "to", "NUMBER", "The", "code", "in", "the", "Flux", "Todo", "MVC", "LINK", "todomvc", "has", "a", "different", "dispatcher", "LINK", "todomvc", "js", "dispatcher", "Dispatcher", "NUMBER", "js", "than", "the", "tutorial", "LINK", "list", "NUMBER", "html", "content", "on", "the", "site", "NUMBER", "This", "be", "pretty", "confusing", "because", "I", "had", "the", "tutorial", "open", "side", "by", "side", "with", "the", "code", "NUMBER", "I", "would", "be", "happy", "to", "send", "a", "PR", "to", "update", "the", "site", "but", "I", "m", "not", "sure", "if", "add", "the", "new", "dispatcher", "be", "the", "right", "decision", "since", "the", "previous", "dispatcher", "seems", "shorter", "and", "simpler", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Feels", "cleaner", "this", "way", "to", "me", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "okay", "then", "no", "worries", "NUMBER", "But", "can", "this", "be", "considered", "as", "a", "possible", "pattern", "in", "user", "apps", "or", "be", "there", "something", "bad", "in", "particular", "with", "the", "idea", "When", "this", "gets", "minify", "however", "these", "function", "names", "will", "no", "longer", "work", "as", "you", "expect", "them", "to", "I", "believe", "NUMBER", "that", "s", "wrong", "btw", "More", "recent", "version", "of", "reactify", "which", "depend", "on", "browserify", "and", "watchify", "support", "ES", "NUMBER", "transforms", "via", "package", "NUMBER", "json", "NUMBER", "This", "makes", "it", "easy", "to", "use", "ES", "NUMBER", "features", "like", "arrow", "function", "without", "much", "additional", "code", "NUMBER", "I", "upgrade", "the", "version", "references", "in", "both", "the", "todo", "and", "chat", "examples", "and", "modify", "the", "chat", "example", "to", "use", "ES", "NUMBER", "and", "arrow", "function", "as", "an", "example", "NUMBER", "OK", "nuked", "this", "this", "call", "and", "test", "the", "code", "NUMBER", "Seems", "to", "work", "Just", "wondering", "what", "happens", "when", "RECEIVE_RAW_CREATED_MESSAGE", "was", "dispatched", "currently", "in", "the", "code", "base", "it", "was", "_not_", "handle", "anywhere", "NUMBER", "Also", "what", "if", "ChatWebAPIUtils", "NUMBER", "createMessage", "received", "error", "from", "the", "XHR", "call", "to", "server", "what", "happens", "next", "Should", "the", "data", "already", "in", "Stores", "and", "Views", "be", "rolled", "back", "Assuming", "you", "re", "use", "Browserify", "be", "the", "Store", "handle", "that", "action", "actually", "be", "require", "d", "by", "a", "component", "or", "anything", "Thanks", "please", "feel", "free", "to", "close", "this", "issue", "NUMBER", "FWIW", "even", "if", "you", "only", "implement", "the", "happy", "path", "acceptance", "of", "the", "confirmed", "message", "I", "think", "it", "would", "make", "this", "example", "feel", "more", "complete", "NUMBER", "Right", "now", "the", "complete", "absence", "of", "any", "handler", "for", "this", "action", "led", "me", "to", "hunt", "around", "to", "see", "if", "I", "was", "miss", "something", "NUMBER", "A", "comment", "about", "the", "RECEIVE_RAW_CREATED_MESSAGE_FAILURE", "be", "left", "as", "an", "exercise", "for", "the", "reader", "would", "be", "fine", "but", "I", "don", "t", "think", "closing", "the", "loop", "of", "accepting", "the", "confirmed", "message", "from", "the", "server", "would", "over", "complicate", "this", "NUMBER", "I", "could", "take", "care", "of", "that", "for", "you", "with", "a", "PR", "but", "I", "have", "another", "relate", "question", "LINK", "topic", "reactjs", "t", "NUMBER", "q_SW", "NUMBER", "uY", "I", "posted", "on", "the", "google", "group", "where", "I", "need", "some", "clarification", "NUMBER", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "Seems", "there", "be", "a", "newer", "version", "in", "src", "dispatcher", "NUMBER", "js", "but", "an", "older", "one", "was", "use", "in", "flux", "chat", "example", "NUMBER", "Probably", "this", "file", "should", "be", "symlinked", "from", "src", "to", "the", "example", "dir", "Yeah", "I", "find", "out", "about", "the", "class", "keyword", "after", "a", "while", "and", "realized", "it", "won", "t", "work", "without", "ES", "NUMBER", "support", "NUMBER", "Are", "there", "any", "plan", "to", "create", "a", "flux", "inspector", "Something", "analogous", "to", "the", "React", "Dev", "tool", "LINK", "devtools", "or", "Ember", "Inspector", "LINK", "inspector", "NUMBER", "I", "imagine", "any", "of", "these", "would", "be", "useful", "NUMBER", "List", "of", "all", "registered", "actions", "with", "the", "ability", "to", "trigger", "them", "NUMBER", "For", "a", "given", "action", "show", "a", "list", "of", "stores", "that", "subscribe", "to", "it", "NUMBER", "List", "of", "all", "stores", "and", "their", "current", "data", "NUMBER", "For", "a", "given", "store", "show", "a", "list", "of", "subscribed", "React", "Views", "NUMBER", "NUMBER", "Show", "dependency", "tree", "of", "waitFor", "s", "There", "be", "probably", "plenty", "of", "other", "snazzy", "things", "it", "could", "do", "that", "would", "help", "with", "prototyping", "and", "debugging", "NUMBER", "Thank", "you", "for", "your", "pull", "request", "and", "welcome", "to", "our", "community", "NUMBER", "We", "require", "contributors", "to", "sign", "our", "Contributor", "License", "Agreement", "and", "we", "don", "t", "seem", "to", "have", "you", "on", "file", "NUMBER", "In", "order", "for", "us", "to", "review", "and", "merge", "your", "code", "please", "sign", "up", "at", "LINK", "and", "if", "you", "have", "received", "this", "in", "error", "or", "have", "any", "question", "please", "drop", "us", "a", "line", "at", "cla", "fb", "NUMBER", "com", "NUMBER", "Thanks", "Thank", "you", "for", "signing", "our", "Contributor", "License", "Agreement", "NUMBER", "We", "can", "now", "accept", "your", "code", "for", "this", "and", "any", "Facebook", "open", "source", "project", "NUMBER", "Thanks", "The", "current", "flux", "chat", "example", "has", "a", "bug", "that", "means", "it", "doesn", "t", "update", "the", "lastMessage", "object", "in", "the", "ThreadStore", "NUMBER", "Trying", "to", "reconcile", "this", "by", "waiting", "for", "the", "MessageStore", "to", "complete", "and", "then", "request", "the", "message", "list", "from", "the", "store", "creates", "a", "circular", "dependency", "between", "MessageStore", "and", "ThreadStore", "NUMBER", "I", "ve", "ended", "up", "fix", "this", "by", "doing", "the", "following", "Making", "a", "shared", "DispatchTokens", "object", "so", "one", "store", "can", "wait", "for", "another", "without", "requiring", "it", "as", "a", "dependency", "Adding", "the", "full", "message", "object", "to", "payload", "NUMBER", "action", "which", "otherwise", "only", "stores", "the", "text", "of", "the", "message", "Having", "the", "ThreadStore", "listen", "to", "the", "CREATE_MESSAGE", "action", "wait", "for", "the", "MessageStore", "to", "complete", "and", "update", "lastMessage", "with", "the", "message", "object", "on", "the", "payload", "NUMBER", "I", "m", "curious", "if", "modifying", "the", "payload", "be", "the", "appropriate", "way", "of", "fix", "this", "kind", "of", "issue", "NUMBER", "It", "seems", "like", "a", "viable", "option", "given", "that", "the", "waitFor", "guarantees", "that", "the", "message", "callback", "has", "completed", "but", "do", "require", "a", "different", "way", "of", "storing", "dispatch", "tokens", "NUMBER", "The", "other", "solution", "I", "had", "was", "to", "simply", "require", "MessageStore", "inside", "the", "ThreadStore", "callback", "instead", "of", "at", "the", "top", "of", "the", "file", "but", "this", "felt", "a", "bit", "hacky", "NUMBER", "Is", "mutating", "the", "payload", "considered", "an", "acceptable", "way", "of", "resolving", "this", "between", "stores", "or", "be", "there", "a", "more", "Fluxy", "way", "of", "doing", "things", "Here", "s", "my", "attempt", "to", "resolve", "this", "NUMBER", "LINK", "Is", "there", "any", "concrete", "advice", "now", "on", "how", "to", "handle", "the", "circular", "dependency", "problem", "between", "stores", "Hi", "this", "issue", "be", "rather", "old", "but", "I", "d", "also", "like", "to", "hear", "more", "on", "this", "NUMBER", "There", "be", "problem", "that", "contain", "circular", "dependencies", "stemming", "directly", "from", "their", "nature", "NUMBER", "There", "be", "no", "way", "around", "NUMBER", "How", "should", "we", "face", "them", "To", "give", "an", "example", "we", "can", "talk", "about", "let", "s", "consider", "a", "game", "with", "two", "stores", "StateStore", "that", "contains", "the", "current", "game", "state", "i", "NUMBER", "e", "NUMBER", "_playing_", "_paused_", "_over_", "and", "responds", "to", "actions", "like", "PAUSE", "or", "RESUME", "NUMBER", "CharacterStore", "that", "contains", "the", "current", "position", "of", "the", "game", "character", "i", "NUMBER", "e", "NUMBER", "coordinates", "and", "responds", "to", "actions", "like", "MOVE_LEFT", "MOVE_RIGHT", "etc", "NUMBER", "When", "the", "game", "be", "paused", "the", "CharacterStore", "shouldn", "t", "respond", "to", "any", "actions", "so", "it", "depends", "on", "the", "StateStore", "NUMBER", "But", "when", "the", "MOVE_LEFT", "action", "be", "dispatched", "and", "the", "game", "character", "falls", "into", "a", "trap", "which", "be", "handle", "by", "the", "CharacterStore", "the", "game", "state", "should", "change", "to", "_over_", "so", "clearly", "the", "StateStore", "depends", "on", "the", "CharacterStore", "here", "NUMBER", "The", "order", "in", "which", "the", "actions", "be", "handle", "be", "not", "a", "problem", "here", "NUMBER", "So", "I", "could", "solve", "this", "by", "instantiating", "both", "stores", "and", "exchanging", "references", "between", "them", "so", "they", "could", "both", "arbitrarily", "read", "from", "each", "other", "something", "like", "the", "shared", "object", "for", "the", "dispatcher", "tokens", "except", "it", "wouldn", "t", "be", "just", "the", "tokens", "it", "would", "be", "the", "actual", "instances", "of", "stores", "NUMBER", "That", "would", "solve", "it", "NUMBER", "but", "be", "it", "right", "The", "other", "way", "would", "be", "to", "merge", "those", "stores", "into", "one", "NUMBER", "That", "would", "be", "logical", "NUMBER", "However", "in", "a", "more", "complex", "example", "with", "more", "stores", "representing", "the", "game", "situation", "it", "could", "mean", "collapsing", "a", "huge", "app", "into", "a", "single", "store", "NUMBER", "There", "would", "not", "be", "much", "of", "Flux", "left", "NUMBER", "Is", "there", "any", "strong", "opinion", "on", "this", "Possibly", "my", "whole", "thinking", "be", "wrong", "NUMBER", "It", "s", "probably", "naive", "to", "expect", "Flux", "to", "work", "in", "every", "situation", "NUMBER", "I", "posted", "similar", "question", "on", "StackOverflow", "LINK", "if", "two", "flux", "stores", "have", "to", "depend", "on", "each", "other", "as", "well", "Thank", "you", "for", "report", "this", "issue", "and", "appreciate", "your", "patience", "NUMBER", "We", "ve", "notified", "the", "core", "team", "for", "an", "update", "on", "this", "issue", "NUMBER", "We", "re", "looking", "for", "a", "response", "within", "the", "next", "NUMBER", "days", "or", "the", "issue", "may", "be", "close", "NUMBER", "It", "s", "not", "clear", "if", "statics", "be", "even", "be", "use", "but", "even", "if", "it", "be", "it", "s", "probably", "overkill", "in", "these", "examples", "and", "be", "cause", "confusion", "issue", "NUMBER", "NUMBER", "The", "PayloadSources", "constants", "be", "already", "defined", "but", "they", "weren", "t", "be", "use", "NUMBER", "Though", "nothing", "uses", "the", "sources", "property", "in", "the", "example", "it", "s", "probably", "best", "to", "reference", "the", "constants", "directly", "from", "ChatConstants", "to", "keep", "its", "use", "consistent", "NUMBER", "Reduce", "noise", "by", "replacing", "the", "repeated", "chain", "with", "use", "of", "set", "e", "which", "will", "cause", "the", "script", "to", "bail", "on", "the", "first", "command", "that", "exits", "with", "a", "non", "zero", "exit", "code", "NUMBER", "This", "be", "an", "awesome", "trick", "Christopher", "vjeux", "Chedeau", "Facebook", "Engineer", "LINK", "On", "Aug", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Bill", "Fisher", "notifications", "github", "NUMBER", "com", "write", "Merged", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "Hi", "I", "was", "trying", "to", "run", "the", "flux", "todomvc", "example", "and", "followed", "the", "instructions", "but", "it", "didn", "t", "work", "NUMBER", "I", "find", "that", "reactify", "requires", "jsx", "React", "NUMBER", "DOM", "to", "be", "the", "first", "line", "in", "any", "NUMBER", "jsx", "NUMBER", "js", "file", "NUMBER", "Once", "I", "add", "the", "directive", "to", "the", "top", "of", "all", "the", "components", "I", "was", "able", "to", "get", "it", "to", "work", "NUMBER", "Is", "this", "just", "me", "Frank", "I", "was", "not", "able", "to", "get", "it", "work", "even", "with", "this", "modification", "it", "throw", "me", "STATIC_ROOT", "be", "not", "recognized", "as", "an", "internal", "or", "external", "command", "operable", "program", "or", "batch", "file", "NUMBER", "I", "m", "use", "Win", "NUMBER", "NUMBER", "fisherwebdev", "thanks", "a", "lot", "NUMBER", "If", "you", "need", "any", "information", "or", "help", "with", "investigating", "just", "let", "me", "know", "NUMBER", "I", "just", "tried", "last", "version", "of", "todo", "example", "and", "the", "only", "thing", "that", "didn", "t", "work", "be", "the", "STATIC_ROOT", "variable", "in", "package", "NUMBER", "json", "because", "you", "can", "t", "define", "variables", "in", "Windows", "this", "way", "NUMBER", "So", "if", "I", "change", "it", "to", "set", "STATIC_ROOT", "NUMBER", "static", "watchify", "o", "js", "bundle", "NUMBER", "js", "v", "d", "NUMBER", "it", "works", "as", "expected", "NUMBER", "Btw", "be", "STATIC_ROOT", "really", "needed", "I", "think", "flux", "be", "a", "great", "architecture", "for", "build", "web", "appliactions", "i", "m", "very", "interested", "in", "it", "I", "read", "the", "dispatcher", "soucre", "code", "but", "i", "can", "t", "understand", "the", "waitFor", "method", "it", "s", "not", "asynchronous", "but", "synchronous", "NUMBER", "It", "makes", "me", "confused", "be", "there", "any", "store", "s", "callback", "could", "include", "some", "ajax", "call", "to", "server", "and", "make", "a", "asynchronous", "example", "of", "the", "waitFor", "method", "I", "m", "not", "a", "maintainer", "but", "as", "far", "as", "my", "understanding", "of", "flux", "goes", "server", "side", "communication", "should", "happen", "in", "actions", "NUMBER", "The", "result", "of", "a", "server", "side", "communication", "should", "update", "the", "stores", "to", "reflect", "the", "server", "response", "NUMBER", "Stores", "should", "at", "least", "for", "the", "most", "part", "be", "able", "to", "update", "synchronously", "NUMBER", "bogdan", "dumitru", "this", "be", "my", "understanding", "too", "and", "I", "can", "buy", "the", "logic", "of", "that", "but", "I", "also", "wonder", "whether", "the", "inability", "to", "get", "any", "browser", "repaints", "while", "stores", "be", "digesting", "becomes", "problematic", "as", "a", "flux", "architecture", "application", "grows", "Maintainers", "any", "thoughts", "on", "this", "It", "would", "be", "great", "if", "the", "examples", "include", "a", "few", "Jest", "test", "cases", "NUMBER", "Preferably", "test", "cases", "that", "deal", "with", "both", "components", "and", "stores", "NUMBER", "Yeah", "I", "was", "thinking", "about", "the", "same", "NUMBER", "NUMBER", "Probably", "too", "specific", "for", "a", "blog", "post", "but", "one", "thing", "I", "ve", "find", "tricky", "messy", "be", "test", "Store", "function", "that", "don", "t", "emit", "change", "events", "NUMBER", "And", "for", "those", "that", "do", "make", "Jest", "wait", "until", "the", "action", "has", "processed", "to", "verify", "behavior", "NUMBER", "fisherwebdev", "I", "think", "it", "s", "perfect", "topic", "for", "a", "blog", "post", "and", "immutable", "data", "also", "sounds", "great", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fisherwebdev", "thanks", "bill", "probably", "can", "close", "this", "issue", "tho", "NUMBER", "fisherwebdev", "Did", "you", "add", "docs", "on", "how", "to", "run", "the", "test", "and", "should", "they", "be", "passing", "I", "just", "pull", "the", "lastest", "and", "get", "error", "run", "npm", "test", "from", "the", "example", "directories", "NUMBER", "Should", "I", "open", "a", "new", "issue", "for", "this", "justin", "NUMBER", "this", "be", "somewhat", "relate", "to", "NUMBER", "regard", "documenting", "the", "build", "process", "for", "the", "examples", "NUMBER", "For", "run", "the", "examples", "test", "one", "needs", "to", "actually", "go", "into", "the", "example", "s", "folder", "install", "dependencies", "and", "then", "run", "the", "test", "e", "NUMBER", "g", "cd", "examples", "flux", "chat", "npm", "install", "npm", "test", "cd", "NUMBER", "NUMBER", "This", "be", "needed", "as", "the", "intention", "was", "i", "suspect", "to", "not", "agglomerate", "unrelated", "dependencies", "which", "be", "the", "expected", "NUMBER", "Is", "there", "any", "reason", "this", "project", "uses", "make", "Could", "it", "be", "replaced", "with", "something", "that", "npm", "could", "install", "Because", "make", "was", "super", "easy", "for", "me", "to", "get", "up", "and", "run", "in", "a", "few", "minutes", "Make", "also", "support", "lots", "of", "things", "out", "of", "the", "box", "like", "importantly", "detecting", "file", "modifications", "to", "determine", "if", "a", "task", "needs", "to", "be", "run", "NUMBER", "It", "took", "NUMBER", "lines", "to", "do", "everything", "I", "needed", "NUMBER", "I", "know", "make", "isn", "t", "great", "for", "Windows", "but", "I", "actually", "really", "like", "the", "simplicity", "we", "have", "here", "now", "NUMBER", "Gulp", "or", "Grunt", "be", "probably", "fine", "too", "NUMBER", "There", "was", "also", "a", "Python", "dependency", "I", "think", "so", "I", "gave", "up", "and", "build", "it", "in", "Linux", "something", "like", "Gulp", "would", "be", "nice", "so", "it", "could", "be", "build", "use", "the", "one", "tool", "chain", "NUMBER", "There", "shouldn", "t", "be", "a", "python", "dependency", "NUMBER", "mkdir", "sed", "rm", "be", "the", "only", "unix", "things", "needed", "NUMBER", "The", "other", "pieces", "be", "install", "via", "npm", "and", "shouldn", "t", "have", "their", "own", "python", "dependencies", "NUMBER", "What", "about", "the", "other", "npm", "package", "NUMBER", "do", "they", "have", "native", "code", "they", "compile", "I", "might", "be", "misremembering", "this", "part", "I", "might", "try", "and", "build", "again", "on", "my", "Windows", "machine", "when", "I", "m", "on", "it", "next", "NUMBER", "I", "m", "not", "sure", "about", "the", "dependency", "tree", "NUMBER", "Something", "might", "need", "contextify", "which", "might", "need", "to", "build", "binary", "pieces", "which", "might", "need", "python", "NUMBER", "But", "that", "s", "going", "to", "be", "totally", "outside", "our", "control", "NUMBER", "I", "would", "expect", "Windows", "node", "npm", "to", "handle", "that", "however", "it", "needs", "NUMBER", "Is", "there", "any", "reason", "not", "to", "use", "CMake", "if", "you", "re", "on", "Windows", "Make", "be", "a", "relatively", "common", "build", "dependency", "NUMBER", "I", "didn", "t", "know", "about", "CMake", "NUMBER", "I", "wouldn", "t", "be", "surprised", "if", "that", "s", "the", "case", "for", "many", "people", "looking", "at", "this", "repo", "NUMBER", "Thanks", "Thanks", "I", "have", "already", "sign", "that", "before", "NUMBER", "Thanks", "Just", "update", "my", "information", "anyway", "I", "think", "my", "Github", "username", "had", "be", "change", "since", "NUMBER", "corresponding", "NUMBER", "These", "html", "file", "be", "generate", "automatically", "from", "the", "markdown", "in", "the", "master", "branch", "there", "s", "no", "need", "to", "update", "it", "separately", "NUMBER", "I", "don", "t", "think", "you", "forgot", "this", "be", "just", "against", "the", "gh", "pages", "branch", "E", "NUMBER", "g", "NUMBER", "be", "the", "code", "here", "something", "you", "intend", "for", "others", "to", "use", "or", "be", "just", "for", "learning", "purposes", "This", "code", "be", "usable", "and", "we", "ll", "publish", "this", "to", "npm", "sometime", "soonish", "NUMBER", "We", "weren", "t", "quite", "prepared", "for", "the", "attention", "this", "has", "gotten", "today", "That", "s", "because", "you", "haven", "t", "experienced", "the", "HUNGER", "D", "j", "k", "NUMBER", "kinda", "NUMBER", "Ok", "will", "install", "manually", "for", "now", "NUMBER", "Or", "you", "could", "try", "use", "reflux", "LINK", "instead", "it", "requires", "less", "boilerplate", "code", "NUMBER", "It", "s", "available", "on", "npm", "and", "bower", "NUMBER", "I", "m", "all", "for", "competition", "Checking", "it", "out", "NUMBER", "NUMBER", "Installing", "manually", "for", "now", "but", "looking", "forward", "to", "this", "issue", "be", "resolve", "smile", "Temporary", "until", "in", "NPM", "but", "if", "it", "helps", "anyone", "LINK", "LINK", "package", "NUMBER", "json", "json", "dependencies", "flux", "git", "github", "NUMBER", "com", "ndreckshage", "flux", "NUMBER", "git", "master", "javascript", "require", "flux", "NUMBER", "Dispatcher", "then", "no", "build", "necessary", "Today", "I", "publish", "an", "npm", "package", "call", "react", "dispatcher", "LINK", "dispatcher", "NUMBER", "It", "s", "an", "npm", "installable", "fork", "of", "this", "repo", "with", "the", "top", "level", "export", "be", "set", "to", "the", "Dispatcher", "object", "NUMBER", "No", "other", "modifications", "have", "be", "or", "will", "be", "made", "to", "the", "source", "NUMBER", "All", "change", "will", "be", "pull", "from", "upstream", "NUMBER", "Just", "npm", "install", "react", "dispatcher", "and", "then", "js", "var", "Dispatcher", "require", "react", "dispatcher", "zpao", "You", "guys", "be", "more", "than", "welcome", "to", "that", "package", "name", "if", "you", "d", "like", "to", "use", "it", "NUMBER", "For", "now", "it", "just", "makes", "it", "easier", "for", "us", "to", "use", "the", "dispatcher", "NUMBER", "NUMBER", "lack", "of", "npm", "module", "be", "an", "annoying", "barrier", "to", "entry", "NUMBER", "mjackson", "thanks", "for", "this", "much", "appreciated", "fisherwebdev", "smiley", "nice", "work", "I", "ll", "get", "rid", "of", "the", "react", "dispatcher", "package", "NUMBER", "NUMBER", "Any", "plan", "on", "add", "the", "dispatcher", "as", "standalone", "package", "rafayepes", "Do", "you", "mean", "separately", "from", "the", "flux", "package", "What", "advantage", "would", "there", "be", "Thank", "you", "for", "write", "this", "document", "NUMBER", "I", "m", "just", "learning", "Flux", "and", "this", "seem", "to", "be", "very", "beneficial", "NUMBER", "I", "change", "the", "final", "example", "because", "I", "think", "that", "getFlightPriceStore", "would", "need", "to", "wait", "for", "the", "CityStore", "NUMBER", "dispatchToken", "for", "either", "action", "type", "NUMBER", "We", "just", "shouldn", "t", "NUMBER", "It", "should", "remain", "logo", "less", "and", "not", "reuse", "anything", "NUMBER", "It", "hurts", "branding", "and", "identity", "even", "if", "it", "s", "a", "different", "color", "NUMBER", "Jest", "logo", "was", "surely", "accidental", "NUMBER", "React", "logo", "was", "not", "NUMBER", "Can", "you", "get", "this", "merge", "and", "up", "on", "the", "site", "vjeux", "NUMBER", "And", "gone", "a", "NUMBER", "e", "NUMBER", "f", "NUMBER", "fef", "NUMBER", "d", "NUMBER", "ef", "NUMBER", "c", "NUMBER", "fc", "NUMBER", "fcac", "NUMBER", "b", "NUMBER", "b", "btw", "vjeux", "you", "must", "have", "an", "old", "React", "you", "re", "use", "to", "generate", "the", "site", "npm", "cached", "maybe", "we", "don", "t", "escape", "slashes", "anymore", "thus", "the", "churn", "in", "my", "rev", "NUMBER"], "text_count": [0, 26718, 6462, 3079, 1358, 495, 2015, 27, 192, 3380, 3905, 7048, 3913, 2431, 2916, 1129, 0, 0, 0, 0, 7738, 2154, 1196, 1006, 1618, 1160, 0, 0, 0, 0, 13755, 8997, 5022, 240, 2760, 805, 0, 0, 0, 0, 18603, 371, 6635, 5829, 5291, 0, 0, 0, 0, 0, 4886, 2209, 2843, 1213, 2165, 904, 1823, 0, 0, 0, 14479, 930, 11867, 658, 0, 0, 0, 0, 0, 0, 12078, 1044, 8896, 3621, 1797, 0, 0, 0, 0, 0, 17775, 7943, 1342, 7961, 789, 596, 0, 0, 0, 0, 1126, 5341, 494, 0, 0, 0, 0, 0, 0, 0, 14840, 3602, 7781, 3636, 0, 0, 0, 0, 0, 0, 31731, 62261, 1045, 3443, 524, 1170, 0, 0, 0, 0, 75026, 367, 55842, 681, 12913, 17289]}]