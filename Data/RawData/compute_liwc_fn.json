[{"repo": "fn", "type": "elite", "title": "", "number of text": 926, "text": "  Image pull and container uds initialization duration is\r\nout of Fn Service control, therefore should not be included\r\nin scheduler latency which tracks service health. The remaining time is container create & setup and any delay during slot queue wait. However, noticed that this simplistic subtraction will not work as I intended since the container might not necessarily serve the request that triggered it. I'm going to close this PR since converting the request-vs-container processing to 1-1 will alleviate these issues and will make such accounting very trivial.  \r\n- What I did\r\n added helper functions to generate log scale and linear histogram buckets for metrics\r\n\r\n  Catches and generates function errors for two new cases.  The first\r\noccurs due to a function/FDK error.  If the function closes the read end\r\nof the pipe that the hostagent uses to write data before the hostagent\r\nhas finished writing the data, generate an error.  This ensures that\r\nany premature close of the input stream is detected and handled by the\r\nhostagent.\r\n\r\nSecond, catch any cases where the function attempts to respond before\r\nreading all of the input data from the stream.  This is safe because we\r\nalready enforce a maximum upper bound on the request body, so a function\r\nor fdk will not have to read for an unbounded amount of time to consume\r\nthe outstanding data.  Since the container contract enforces HTTP-like\r\nsemantics, and HTTP expects the server side to wait for the response\r\nbody to arrive before responding, this is not unreasonable.  If the\r\nfunction or fdk attempts to write before the end of the input stream has\r\nbeen processed by the hostagent, return a different function error\r\nindicating that a premature write has been detected.  https://github.com/fnproject/fn/issues/1517\r\n\r\nAdded fn appid and fnid (needed for internal tracing), and corrected span name in lb_agent.go to avoid duplicate span conflict with span in agent.go\r\nhttps://github.com/fnproject/fn/blob/1fb78ed8362693105aee48a506129e6776d1a3a8/api/agent/lb_agent.go#L200\r\nhttps://github.com/fnproject/fn/blob/4ccd8fa0c63e65aa4b35c1f76cbd7db919f59c7c/api/agent/agent.go#L250\r\n\r\nIt's gonna look like this\r\n![Screen Shot 2019-06-27 at 11 00 22 AM](https://user-images.githubusercontent.com/25177182/60289790-226f9880-98cc-11e9-87b5-1c542d09e733.png)\r\n\r\nChanging duplicate span name\r\n\r\n Hold off on merge, need to add a couple other things to span attribs  - Link to issue this resolves\r\ncloses https://github.com/fnproject/fn/issues/1513\r\n\r\n- What I did\r\n- How I did it\r\nAdded ocgrpc wrappers to dialopts for grpc runner client and static pool server\r\n\r\n- How to verify it\r\nRun a Jaeger instance, set the collector URL, and view traces\r\n\r\n- One line description for the changelog\r\nAdd ocgrpc wrapper for runnner, static_pool\r\n\r\n- One moving picture involving robots (not mandatory but encouraged)\r\n Diagnosing the build failure\r\n:| gofmt  this file was pushing to deprecated refs we don't really need anymore. we\r\nstarted using the vX.Y.Z to make mod happy and that's widely tracked in VCS\r\nnow, whereas I doubt the naked versions are tracked anywhere without something\r\nanalogous existing (we've been on mod for some time now).\r\n\r\nfnproject/functions was deprecated, and I was only able to find a couple of\r\nstale references (some merely comments). I suspect we can safely remove this.\r\n\r\nreduced git pushes from 5 to 1 (woo)\r\nreduced docker pushes from 4 to 1 (yay)\r\n\r\n  inside of TryExec we were writing directly to the response writer inside of a\r\ngoroutine, but TryExec can timeout and then get called again to a different\r\nrunner or even have the front end writing headers while TryExec is writing\r\nheaders.\r\n\r\none way to make this safe is to make a new response writer for TryExec to\r\nwrite the response into, and only after the goroutine handling the response\r\nhas returned, from the TryExec goroutine we can copy the response back up as\r\nthe caller will not call TryExec again until it has returned (this is\r\nseemingly part of the placer contract). unfortunately, we're already buffering\r\nthe response writer in the front end, too - it's possible we can get rid of\r\nthat but it may need further testing.\r\n\r\nthis adds an optimization when copying the request body from the LB to a\r\nrunner, since we're using request.GetBody() and returning a reader we\r\nare familiar with that happens to just wrap a buffer's bytes (which we just\r\nneed multiple readers on, but the data doesn't change). anyway, this whole\r\ninteraction is unfortunate but kind of necessary due to needing to maneuver\r\ninto a protobuf, it seems like a worth it and somewhat ok abstraction wise\r\noptimization.\r\n\r\nadditionally, this gets rid of passing the client response headers down into\r\nthe agent for detached functions. we don't need these since detached functions\r\nare not responding with the functions response to the client, only a 202, this\r\nwas leading to races around writing the headers in retries too, but this is\r\njust for posterity/correctness now.\r\n\r\nupdated the makefile/system test script so that I could run these faster to\r\nrepro, pretty handy, should add to other stuff too...\r\n\r\ncloses #1484\r\n > even have the front end writing headers while TryExec is writing headers.\r\nIs this change addresses this issue as well? Reading the code seems to me that this case (having the front end writing headers) is still possible\r\n\r\nI should have been more clear here. TryExec and the front end will not compete for writing headers anymore as the [client] headers (well, buffered client headers, or the front end response writer, however we want to look at it) are no longer written to from a goroutine in TryExec (whose lifetime may exceed TryExec's lifetime). the front end will only write headers after TryExec has returned, now that we're writing headers to the front end's response writer inside of TryExec and not in a goroutine, this operation is safe as long as the contract there holds (namely, that TryExec is waited on by its calling routine, or at least when submit returns there are no outstanding TryExec's lingering in other goroutines).\r\n\r\n> The change to the sentToRunner function is about the optimisation for copying RequestBody, right?\r\n\r\nI can move this, no problem. try to slip in some cleanup where I can > The change to the sentToRunner function is about the optimisation for copying RequestBody, right?\r\n\r\nthis is removed from this PR  we weren't stripping transport headers from function response before copying\r\nto the client response. this means e.g. a function could send a \"Connection:\r\nclose\" when fn wants to use a keep alive.\r\n\r\nthis also moved this to common since we're doing it in 3 places. I know that\r\nit's not the ideal ideal big O performance and we can pedant about it, but\r\nwe're talking about 7 things here. I'm open to ideas about what this should\r\nlook like, I ripped it out of the stdlib and it seems okay. changed the\r\ntrigger stuff to use this too, as it was copied. added tests to cover all 3 of\r\nthese spots.\r\n\r\nthe only behavior change for existing behavior is no longer stripping 'authorization' header when\r\npassing headers from the client request into the function. authorization seems\r\nlike a useful header for users that want to use auth in their functions, I\r\nthink if we need to use this one in the backend we should more carefully strip\r\nout the parts we use before passing them on instead of relying on the agent to\r\nstrip the header to not leak anything into a function.\r\n\r\ncloses #1488\r\n\r\n  ```\r\n=== RUN   TestBasicConcurrentDetachedExecution\r\nfatal error: concurrent map read and map write\r\n\r\ngoroutine 1182 [running]:\r\nruntime.throw(0x1006393, 0x21)\r\n\t/usr/local/go/src/runtime/panic.go:617 +0x72 fp=0xc00379f8b0 sp=0xc00379f880 pc=0x439e12\r\nruntime.mapaccess1_faststr(0xef6880, 0xc001b3ea80, 0xff1dd1, 0xe, 0x0)\r\n\t/usr/local/go/src/runtime/map_faststr.go:21 +0x469 fp=0xc00379f920 sp=0xc00379f8b0 pc=0x41e9f9\r\nnet/textproto.MIMEHeader.Get(0xc001b3ea80, 0xff1dd1, 0xe, 0x0, 0x30)\r\n\t/usr/local/go/src/net/textproto/header.go:35 +0x5d fp=0xc00379f958 sp=0xc00379f920 pc=0x6a8add\r\nnet/http.Header.Get(...)\r\n\t/usr/local/go/src/net/http/header.go:47\r\ngithub.com/fnproject/fn/api/agent.logCallFinish(0x118be20, 0xc003790780, 0xc0036a4aa8, 0xc001b3ea80, 0xc0000000ca)\r\n\t/home/circleci/go/src/github.com/fnproject/fn/api/agent/runner_client.go:446 +0xa8 fp=0xc00379f9e8 sp=0xc00379f958 pc=0xbcb9e8\r\ngithub.com/fnproject/fn/api/agent.receiveFromRunner(0x1174280, 0xc00372be30, 0x1183ba0, 0xc003701fb0, 0xff1c81, 0xe, 0x1183ae0, 0xc003770120, 0xc003790300)\r\n\t/home/circleci/go/src/github.com/fnproject/fn/api/agent/runner_client.go:403 +0x64e fp=0xc00379ff98 sp=0xc00379f9e8 pc=0xbcafde\r\nruntime.goexit()\r\n\t/usr/local/go/src/runtime/asm_amd64.s:1337 +0x1 fp=0xc00379ffa0 sp=0xc00379ff98 pc=0x4695c1\r\ncreated by github.com/fnproject/fn/api/agent.(*gRPCRunner).TryExec\r\n\t/home/circleci/go/src/github.com/fnproject/fn/api/agent/runner_client.go:217 +0xbbd\r\n```\r\n\r\nhttps://circleci.com/gh/fnproject/fn/5549 while it lasts\r\n\r\nI can't figure out if it's a race in tests or a race in the code. it looks awfully suspicious since it's detached and we write the headers early on that one, but the race appears in the lb, which seems funky. thanks for details. yeah, I buy that. am having trouble reproducing locally. fix doesn't seem straightforward, for detached we probably shouldn't be handing over the same response writer that we're using to write back a response to the client, since we want to discard the response basically? for the sync writer, submit should return before it's used.  i've got a possible fix, working on it at least. i need to read the detached stuff again to be sure. thanks, I follow and agree about the logger. from what I can tell, this means that TryExec itself needs to be handed a response writer that is safe for writing body and headers to? (at least, the issue itself does not seem to be from within TryExec or receiveFromRunner as they appear safe on their own, but not safe when TryExec is called multiple times with the same RunnerCall?)\r\n\r\nedit: have trouble with words, at least, I'm finding it hard to spot how to do this in receiveFromRunner alone as that routine itself is writing or reading the headers at various spots, logger included. in any case, it seems that the issue itself is deeper than the logger, as there are other spots that the header map could be read/written, this one just cropped up in the logger. agree about not doing concurrent safe respwriter, yea. that option sounds the best to me, I was trying to figure out where to do this. TryExec seems just fine. PlaceCall kind of stinks because every placer has to do it, TryRunner is another possibility. TryExec is implemented by any runner, whereas every placer calls TryRunner. not sure i follow about moving w/o copying with the way the runnercall is done atm, if you want to have it at / explain, at least it sounds nicer than copying if we can figure out a way to avoid it. no worries. the copy isn't too bad, I guess the sad part is we're copying in two places, but we can probably change that, too.  closes #1473 \r\n\r\nwithout this, is vm.swappiness is not turned off, then it allows containers to\r\nuse unlimited (up to host max) anonymous swap space on the host. this behavior\r\nis not what we want, particularly for getting tests to pass on everybody's dev\r\nenvironment, but we don't really want this behavior in any case.\r\n\r\nsee https://github.com/fsouza/go-dockerclient/pull/776 for 'why fsouza needed to be updated' - this will affect https://github.com/fnproject/fn/pull/1477 as well (it is easy to update, just change pid limit to a pointer, so I'm not sure order matters).\r\n\r\npretty small and straightforward change though thanks!  Hey @Daniel15 - I am going to try to get the auth and dns middleware examples working again this/next week, I suspect this is just a few minor compile bugs but may use the opportunity to clean up extensions stuff in general. \r\n\r\nwe do have support for an auth token in the cli I think by happenstance, as far as supporting it out of the box in fn, I suppose we could support it by allowing a token to be configured on server startup, but I think our hope in general is that if this is desired it's easy enough to build and use fn with auth extensions - have not thought out specifically supporting auth out of the box and intersection with any additional middleware authentication, specifically schemes that are not basic auth (and how to configure this to override basic, abstraction, etc).  hey @Daniel15 - first step of updating https://github.com/fnproject/fn/pull/1481 (pending review) - I think I'm going to rework the example's main to set up the datastore itself, grab the db out of there, and use it, rather than all the additional plumbing to get the datastore out. sorry for delay here, wedged getting reviews for a bit now.  @dgutson https://github.com/fnproject/fn/issues/1476#issuecomment-498455578 is the plan, it's going to take some time to add some methods to fn and then make the changes in the ext-auth repo to use them. if you have an existing auth solution you need to integrate with, ext-auth is a decent template as is and the changes I'm making won't help much - just remove all the db usage and change it to client calls to your auth service (/ caching).   there's a more pressing issue of actually updating the runtime images, which probably precedes this task. none of them have automatic update in CI on a cron schedule regularly (and few on a master gets updated schedule, too). all that this says is that we don't run `apk upgrade`, which is easy to fix. I don't disagree about doing this but we should automate it. I could just as easily every monday send an email that says we haven't updated the packages in the runtime images -- the info we're getting here isn't very valuable at least from what I can tell and could be automated away. though it's fine for us to run snyk, at present we don't even have the runtime images set up to update, think that task precedes this or this is just annoying and not telling us anything we don't already know. moving dockerfiles to fdks is fine. please make sure there is a script for updating them (fnproject/dockers has a script). we need to get a docker hub bot and set up CI to do this chore, too, ideally, it's manual atm. and further, as stated, need to set up cron since the FDKs are updated infrequently but can do that after getting CI bot set up. can we cover all FDKs before merging any one of them? I am very much trying to protect against the situation where we update a couple of them with all this fancy build stuff but leave the others to rot, also not to have intermediate patches that we aren't sure about with repos in different states to track. it would be nice to be consistent across everything, for the build stuff as well as this.\r\n\r\nreviewing is ok first, to figure out the shape of all this stuff.  since we've accomplished #1055 now and the logs API is gone, there is no default logging story for functions for users that run `fn start`. this is kinda bad.\r\n\r\nthere are 2 ways to get logs now, neither of which are defaulted to:\r\n\r\n* add a syslog url to an app\r\n* set `FN_LOG_LEVEL=debug` / `fn start --log-level=debug`\r\n\r\none solution is that we could provide additional configuration to turn off the logs and allow setting the container log level, possibly defaulting to out of the box using 'info' level, but allow disabling this / setting to debug level. then users could see the logs from the `fn start` docker container or from their terminal in attached mode. these are not great, but a definite improvement over nothing. and having them available via `docker logs` allows running easy grep commands against call ids, etc. \r\n\r\n`fn start` itself is a dind container, so we could do \"interesting\" things like leaving logs laying around in there somewhere. other ideas are welcome here.\r\n\r\n  currently, the lb read cache only covers apps. however, the API itself can be [and is] used for fns, app ids and triggers, as well. without using the read cache, this means that we were hitting the datastore every invoke request to get the function and the app id, which resulted in added latency due to contention and costs there. get about a 20-30% throughput bump by doing this, and it seems like a pretty obvious thing to do - my load test has functions that run in about 1ms themselves in a not under duress fn environment, making the 5s window coverage a considerable reduction in db calls (like 10k less, in tests, since i'm running 10k in about 10s now it's about 2 db calls instead of 10k)\r\n\r\nnote that this does affect the service upstream, as the service uses this as well. this means that functions will have an additional worst case 5 second update latency from the sync update. from what I can tell, it's using bolt, so it's decent savings (at least, with sqlite3 it's about 20% for my load test) - if this is undesirable, it is one update in service code to stop wrapping the read access store with the cache (it's explicitly doing this atm). \r\n\r\nthis also makes an update to the configuration dance, so that the read access actually shoots out metrics (and hits validator, which is pass through for get stuff, and uses the extensions), which helps for debugging things like this... from what I can tell, there are no other behavior changes here since we were previously doing the wrap for any datastore just later down the line than from the config option, this is just adding the same treatment to the read store pretty much.  here's my hokey load tests for the curious (well, a sample of them, have run this a lot now.. note that i'm far from scientifically precise but still pretty good confidence anyway):\r\n\r\n```\r\nthis patch:\r\n\r\nn 10000 p 20 duration: 9.420491084s tps: 1061.5157862613185 max: 161.733308ms min: 750.382\u00b5s mean: 17.725253ms median: 15.882986ms std: 10.653208ms\r\nn 10000 p 20 duration: 9.456716897s tps: 1057.449441377731 max: 133.333246ms min: 665.583\u00b5s mean: 17.643815ms median: 15.542724ms std: 10.804356ms\r\n\r\nmaster: \r\n\r\nn 10000 p 20 duration: 13.516036645s tps: 739.8618591123242 max: 281.636281ms min: 905.501\u00b5s mean: 25.403707ms median: 21.105557ms std: 18.449826ms\r\nn 10000 p 20 duration: 15.589936024s tps: 641.4394507203527 max: 243.949316ms min: 788.739\u00b5s mean: 29.79846ms median: 24.202449ms std: 22.995301ms\r\n```\r\n\r\nsauce: https://github.com/fnproject/load > I haven't done any benchmarking but it would be good to have a way to disable caching or maybe the solution is to implement a DataAccess without caching, what do you think?\r\n\r\nI've linked to how to do this in slack ;) - by default, the data access is not wrapped with the cache when providing a ReadDataAccess layer via `server.WithReadDataAccess` and we're manually wrapping with the cache in the service lb code before passing in the option, which we could delete that line if we're not interested in. agree that it would be useful to benchmark, as noted, with sqlite3 even the gains are pretty nice. i guess the state of things is that it's already explicitly being used for apps, unwittingly or not, since we have some load testing stuff now it may be interesting to see if there's any perf bump when adding in the use of it for functions, that ought to give a good idea. am gonna merge since all concerns are addressed (andrea out ROW), happy to follow up, thanks all... hoping to get another 10x or so out of the agent before digging into lb_agent/pure_runner  @denismakogon seems like it's a node fdk issue if they can't repro with java, no need to try other fdks.\r\n\r\nany info on fdk version? just double checking that was updated, as well. I think we can try to repro from this info and debug, thanks. it looks like the container is exiting and being removed for whatever reason - it could be a race [in fn], but it would probably also happen with other fdks if that was the case. have not seen the 'unknown container' bug yet... hopefully we can repro, we might need to get more logs about what's going on. i can't reproduce locally with go fwiw (invoke...wait 22s.... invoke... both work) thanks for all the info here\r\n\r\n> I googled and docker exit code 137 seems to have something to do with the OOM killer. I updated func.yaml to memory:1024. My fnserver has 12 GB Ram (and there is nothing in dmesg).\r\n\r\nthis is an interesting wrinkle. it's also interesting that it's happening on 0.3.690 and not 0.3.689, the traces shouldn't be propagated into the container even when they're turned on, so i'd be surprised if it was that, though it would make sense as those headers could be pretty large - I've tested this and confirmed that I'm not getting the headers. I'm not sure what else would be effected there. \r\n\r\nare we working off the theory that this is related to the function hitting oom from the node fdk? I see earlier that memory was raised but it's not clear to me from the comments whether this fixed anything or not?\r\n\r\nI'm not sure that traces will prove very useful for this case, i don't think we need to get into that here. the logs are pretty useful (especially with `fn start --log-level=debug` usually)\r\n\r\nI am yet to try to repro with nodejs, I can give this a whirl, also, however my machine notably doesn't throw off 137 when it should (the tests on master fail for me locally), so I am not expecting much if that's what's going on here, which may/may not be useful to figure out.  i got a repro with the node fdk from the cli hello world function and fn 0.3.690 just now after doing the wait thing:\r\n\r\n```\r\nINFO[2019-04-13T00:00:31-07:00] starting call                                 action=\"server.(*Server).handleFnInvokeCall-fm\" app_id=01D722GHXY180043RZJ0000001 call_id=01D8AQYSD3180043RZJ000000C container_id=01D8AQXVT6180043RZJ000000A fn_id=01D722GS89180043RZJ0000002\r\nDEBU[2019-04-13T00:00:31-07:00] docker unpause                                app_id=01D722GHXY180043RZJ0000001 call_id=01D8AQXVT6180043RZJ000000A container_id=01D8AQXVT6180043RZJ000000A cpus= fn_id=01D722GS89180043RZJ0000002 idle_timeout=30 image=\"rdallman/hello:0.0.2\" memory=128 stack=Unfreeze\r\nERRO[2019-04-13T00:00:31-07:00] api error                                     action=\"server.(*Server).handleFnInvokeCall-fm\" code=502 error=\"error receiving function response\" fn_id=01D722GS89180043RZJ0000002\r\nINFO[2019-04-13T00:00:31-07:00] hot function terminating                      app_id=01D722GHXY180043RZJ0000001 container_id=01D8AQXVT6180043RZJ000000A cpus= error=\"Post http://localhost/call: read unix @->/tmp/iofs/lsnr.sock.tmp: read: connection reset by peer\" fn_id=01D722GS89180043RZJ0000002 idle_timeout=30 image=\"rdallman/hello:0.0.2\" memory=128\r\n```\r\n\r\nwell, good news to confirm at least. need to get some node logs I think, can turn on debug mode on fdk I think...\r\n\r\nusually this error is from the container exiting, which looks like what's going on here, we just need to figure out why the node fdk is exiting I got container stats out of here and only see about 9-10MB of usage after 1 invocation (I wish we made this easier to do... alas). my docker kill event looks like this:\r\n\r\n```\r\n2019-04-13T00:11:57.131178484-07:00 container kill d32e00e8ac1d890679bc5c7b7547039037756b178472001da59002d7fca5e58c (image=rdallman/hello:0.0.2, name=01D8ARJVTG180043RZJ0000006, signal=9) \r\n```\r\n\r\n^ is when the function invocation fails. if I invoke 'quickly' this also doesn't happen, ie I can run the function in the same container multiple times in a row until I wait.\r\n\r\nnow that I think about it, I think changing idle to 2 minutes is what did the trick. we're expecting to re-use the connection but the fdk server* has closed it. the node fdk needs to respect the idle timeout.\r\n\r\n* edit: fixed definitions of client/server  @tuempeltaucher @denismakogon I believe I have posted a fix for this https://github.com/fnproject/fdk-node/pull/26 - see PR for github links to issues, seems like node made a baddie. I confirmed this is fixed with 0.0.14 of the node fdk. thanks everyone!  was 30, now 255. the service validates the same value, via a different method,\r\nfor each of these already. sql uses varchar 256 so we're good. can't think of\r\nany other ways this might break, so going for it.\r\n\r\ncloses #1452  thanks @denismakogon   was getting checksum mismatches, this fixes\r\n\r\ni still don't really understand mod, there's all kinds of crap in here we don't have any trace of in vendor, but it builds so? i updated go to 1.12.1 in circleci, assuming that this was the root cause of my mismatch to begin with, so that we can build the thing after merging this thing.  @riconnon the makefile ought to be doing this?   Hey @fadams - a quick look at your kube config, and I'm guessing that the runner node(s) is missing a couple of env vars it needs to run functions. `fn start` is a decent display of them here https://github.com/fnproject/cli/blob/master/commands/start.go#L57 - though, you shouldn't need to mount through to a host volume, just specifying `FN_IOFS_DOCKER_PATH` and `FN_IOFS_PATH` might do the trick. we should add those to the image or make some defaults, but alas, hope that helps! I can try to look into this in more detail soon if you can paste lb and runner logs here, it could also help (or slack may be faster). it may help to run FN_LOG_LEVEL=debug while this is an issue, as well, to at least figure out how far a request might be getting. the lb will have a log entry for the `internal server error` that was returned to you, at least, that would be the place to look.   \\* I've left the comments splayed out in case someone prefers that for larger PRs, I will clean up later.\r\n\r\n# details\r\n\r\nthe goal here was to do raw removals without doing any shuffling. there are some shuffling opportunities, no doubt, but this shaves a lot of things off to hopefully make that easier should we get the time. most of the changes are just to the tests, really, as the mq/log stuff was all over the place and this just removes it.\r\n\r\n**on logs and calls:**\r\n\r\nthe service can't support the logs api so this removes it. there was basically no discussion when it was brought up to discuss log removal, specifically, and with these changes, we will end up in the stone age, so to speak, where users can get logs from fn either by starting it in debug mode or by hooking up a syslog url to their apps. wrt the service, that is about parity at time of writing, though this is changing soon. we've been recommending syslog mostly for some time anyway since it was impossible to debug uds bugs with the logs API anyway, and that's the source of seemingly all of our support requests now (let's not talk about it here). i'm ears (and mouth) on making a better getting started experience for logs in particular, however, this removes quite a bit of cruft which may make it easier to pave forward on that. I think in particular some kind of extension that hands the logs off to a function that users can configure to do whatever may be useful, and we can probably use some of the s3 stuff deleted here to make an example of that...\r\n\r\nthe calls api was also not easily supported by a service and so this removes it. we have extensions for this one, unlike the logs, so there's slightly less damage. there are some updates to add things like call ids into the logs that will further dampen the blow here. without async, this was not exactly necessary either.\r\n\r\nboth of these have a migration and are removed from the datastore tables, the service code never used this stuff so there's nothing to do there.\r\n\r\n**on hybrid/data access:**\r\n\r\nthere is one use that is not part of the '/v2' normal APIs for things like get app, fn, and that is the GetTriggerBySource method. this prevents full scale removal of the whole thing without some rewiring. the hybrid client is basically a wrapper around the v2 API now, with the previously noted exception. the service code uses this interface (agent.DataAccess), as well, in the lb. there are no longer any uses of this interface in the agent, which not only speeds up function calls by default (15%ish for me locally) but will make the agent easier to munge around too. again, tried to keep shuffling to a minimum here to make this easier to follow. it would be nice to get rid of this interface wholesale soon enough.\r\n\r\nFN_NODE_TYPE=runner has gone away (in theory, completely unused, since we have pure runner)\r\n\r\n**on hard interface breakages:**\r\n\r\nagent.New() has changed, and agent.NewLBAgent() has changed, simply to remove the first arg (a data access thing, from the hybrid stuff). afaik, there are no other hard breakages for still to be used interfaces. these are easy to update, only updating the factory method call for each.\r\n\r\nCallHandler has also died, this is easy to remove too.\r\n\r\n**on API changes:**\r\n\r\nwe need to update SDKs, I have the CLI update ready, I've left 410 stubs for dead APIs during the transition period. the swagger has been updated. there may be docs to update as well, this can be done pretty quickly, starting the process here and don't think it's blocking. \r\n\r\n**on async:**\r\n\r\nmostly this is raw removal, and like the log thing we can probably make some examples of using a queue to fire functions off with this code, but it's dead code atm. there are some changes to the resource manager that are worth eye balling to double check, this is mostly just removal of the async watermark and the special method for async to wait on resources to free up.\r\n\r\n# user facing breakage issues\r\n\r\nif this eats into any current user's use case, i'm reluctant to think we shouldn't proceed here as this is really a lot of cruft removal we need to do here to align things, but we should figure out a path forward and fill in any holes for things like extensions. considering the pain involved in making this change, it'd be nice to rip the band aid off and work quickly to fill in the holes with this landed, even if users need to skip a few versions and freeze on a current version of fn before this. TBD, please pipe up if this will shatter anyone's world, would like to keep the users happy.\r\n\r\n > logs API must go away, but calls should remain until better option.\r\n\r\ncan we add the prometheus metrics of interest to the particular case noted earlier? any info here? I'm guessing call start/end and status, anything else? am not sure if we're already logging metrics for those, as it is. also, we have extensions for calls, so if a user wants to send the call as a json blob somewhere or anything else (metrics, too, when it starts or ends), they can do that with the code that exists with this patch. I maintain it's a good idea to move forward here to tidy up the API to be consistent with the service, for tooling and ux purposes, but let's talk about how to fill these gaps.\r\n\r\n> One question: if we no longer have async calls (for now, of course), should we also get rid of MQ dependencies?\r\n\r\nthanks, i'll add this. probably aws bindings will go away too. @denismakogon sure, no problem, thanks @denismakogon thanks! It sounds like https://github.com/fnproject/fn/blob/master/fnext/listeners.go#L77 will be sufficient for them. It's also possible to get this from prometheus, which is doing aggregations already. any way we can help them move over to unblock here? they can freeze fn version, too, if they need a little time. using the call extensions stuff, it should be relatively easy for a user to connect to their syslog url and post a log with the call to it. we had code to connect to syslog not so long ago, it was maybe 30 LOC (dial, form body, copy). we could have an example extension showing that but it's probably not a part of core.\r\n\r\nwith the way things are at present, without async, the calls api had relatively low utility to begin with, as the client will get the info back about errors or success in the response. with async this api was more needed, to show errors for calls that fail, but extension based would be okay too.  the problem with supporting webhooks on function invokes in core API would be that we would need to support it in the service, and supporting webhook requests from the runner nodes presents networking issues as well as scalability considerations - it's better to leave as extension I guess. the docker logs driver ends up making this easier to do for logs than webhooks, but in any case, we're talking about new features now. will plan to merge this monday and dance around with CLI/SDKs/other deps unless any objections come in over the weekend... thanks all doing it live.   yep, discussed this the other day. a possible path forward here is allowing upper case chars in the name, and in deploy create the image name from the function name after lower casing it. the only nitty bugs I can think of is if a user has a function named `bar` and a function named `Bar` then when they go to deploy a function as user `foo` they'll end up with `foo/bar` for either one, and if the func.yaml are at different versions then it can inadvertently make the versions hop around in a not contiguous fashion while pointing to the same base image, which wouldn't be a great ux. kind of a 'have to assume the user is dumb' thing but anyway, throwing it out there. I'm not sure it's a deal breaker, either, this is basically already the case for directories that are named in the aforementioned fashion (which translates to the name).   we're looking into increasing the default of this value, it may be possible to just bump it up but running some checks first.  yep, we used to use the same models for everything (fn_go are generated as it is, fn were a long time ago, but have been manually updated since). it would be possible to go back to that but i'm not sure how much undoing might have to get done to do that in fn server in particular. I forgot if there was a reason that happened or not, API updates have been painful regardless, but I have a feeling it was from that... say we use fn_go models in fn, we have to update them at fn_go and vendor them in fn before using them in order to make an API update. that's just a vague recollection though. \r\n\r\nI think that moving most of the validations to be all server side (well, removing the cli validations) will make things a bit smoother here, too.  thanks for digging into this. I think I understand the crux of the issue here (though, perhaps not), primarily that currently we're calling Close() [here](https://github.com/fnproject/fn/blob/master/api/agent/agent.go#L798) on the concrete implementation of the container task so we need something to expose a way for drivers to add things to the container close method. this does seem like a general flaw in interface design, namely, that we've created an interface to hand over that will have most of its methods called by another package, yet we still require calling one of them from the caller (Close). \r\n\r\nI did some marinating and had a thought that maybe we should move this onto the cookie. If we made part of the contract for close [here](https://github.com/fnproject/fn/blob/master/api/agent/drivers/driver.go#L24) to be responsible for closing the container task, we get part of the way there. we'd also need to make CreateCookie responsible for calling close on the container if it fails to return a cookie (otherwise we leak resources). the thinking being that we need to be able to decorate the driver and container and have a clear contract there; handing off all container responsibilities to the driver via the cookie. any thoughts here? is it sufficient for this use case?\r\n\r\nBeforeCall and AfterCall seem out of place being on the driver itself as the driver is simply about container execution (not call execution), but I can't think of alternative ways to access the underlying container before and after each call on a container. what is the need for the WrapXxxCall methods? since the agent package is calling cookie.BeforeCall/AfterCall it should be possible to simply implement the BeforeCall/AfterCall methods on the cookie without the need for wrap by having the decorated driver return the decorated cookie with the BeforeCall/AfterCall methods implemented?  This is a tracking ticket to cover all the things we should do to make Fn work \"nice\" for windows developers. \r\n\r\nGoal:  If you have docker4windows set up, it's as easy to run fn on windows as it is on a mac. \r\n\r\n\r\nCurrent state of affairs: \r\n\r\nFn start broken: \r\n```\r\nfn.exe start \r\n\r\ndocker: Error response from daemon: Mount denied:\r\nThe source path \"C:/Users/Owen Cliffe/.fn/iofs\"\r\ndoesn't exist and is not known to Docker.\r\nSee 'docker run --help'.\r\n2019/03/31 15:21:33 Error: processed finished with error exit status 125\r\n```\r\n* Invalid Mode: /tmp/iofs :  https://github.com/fnproject/fn/issues/1447\r\n* Mount denied: https://github.com/fnproject/fn/issues/1446\r\n* fn start gives two mount warnings in Windows 10  https://github.com/fnproject/fn/issues/1268\r\n* Fn cli is not signed, have to run in developer mode  : https://github.com/fnproject/cli/issues/560\r\n* Fn cli colors don't work on windows:  https://github.com/fnproject/cli/issues/561\r\n\r\n  Thanks for raising this! \r\n\r\nFWIW what is happening here is that Fn server is creating a directory to share unix sockets between it and Fn containers - because fn is itself running in docker on the desktop  it needs to share that directory with the docker host. : \r\n\r\ne.g. (on OSX) : \r\n\r\n* Fn cli starts fn server with    /Users/Me/.fn/iofs/  --> mounted into /iofs/ in the fnserver   (this directory has to be on the host as d4m only lets you mount volumes from the host OS into a container, not from the VM that docker is running on) \r\n* Fn server  starts a container , creates a socket dir /iofs/container1/-> /Users/Me/.fn/iofs/container1/  and it asks docker to mount /Users/Me/.fn/iofs/container1/  into /iofs on the actual function container. - fn server start waiting for container to open a listening socket in its iofs directory \r\n* Container starts, opens a socket, starts listening for connections  on /iofs/xyz.sock \r\n* fn server notices this file exists (using inotify) - starts sending messages to container. \r\n\r\nwith Docker4Mac we hit some problems with what could and couldn't be shared with docker (e.g. user Home is sharable, /tmp/ on the host is not)  - I wonder if we're hitting something similar here  (or if windows file names are themselves causing a problem) . \r\n\r\n\r\nI'm just trying to find a windows 10 pro env I can test on , while I'm doing that there are some environment variables that you can set on the fn server that might help out: \r\n\r\nFN_IOFS_DOCKER_PATH  - is the host path e.g. that the iofs shared dir exists on- this needs to be a directory  that is shared with docker (e.g. d:\\docker)  -  I wonder if setting this to a directory you created (e.g. \"d:/path/to/iofs/ ) will work \r\n\r\nFN_IOFS_PATH - this is the path that the above path is mounted into the fnserver container \r\n\r\n\r\nIt's a guess but I'm curious if the following would work: \r\n\r\n```\r\nmkdir d:\\fndata\r\n\r\ndocker run --rm -i --name fnserver -v d:/fndata/:/iofs -e FN_IOFS_DOCKER_PATH=d:/fndata \\\r\n   -e FN_IOFS_PATH=/iofs  -v /var/run/docker.sock:/var/run/docker.sock  -p 8080:8080 \\\r\n   --entrypoint ./fnserver fnproject/fnserver\r\n\r\n```\r\n\r\n\r\n\r\n\r\n Hmm odd, /tmp/iofs is the default so something isn\u2019t right here  Hmm actually /tmp/iofs is the container mount  inside the function container (So it should be trying to mount c:/fndata/xyzzy/ ->/tmp/iofs in the function) .   I think we mount this with some flags and  I wonder if windows docker for windows doesn\u2019t support them , going to look in detail in a bit (and try it once this 15GB Windows image has downloaded!)  I\u2019m not sure what d4w does but also suspect inotify wont work, we can work around that with polling though  Ok - confirmed a few things are going on here: \r\n\r\n* We need to make sure directories exist prior to mounting on windows (d4w won't create a source  dir as part of a bind mount as  for linux) \r\n* unix sockets _do_not_ work when mounted via host volumes on d4m - there is some magic for /var/run/docker.sock which does not translate over the standard (cifs) host volume shares \r\n* paths needed to be treated carefully  - all forward slashes etc. \r\n\r\n\r\nFor unix sockets we end up in a similar situation as we had for mac except we could create them on xyhve shared volume mounts but can\u2019t on windows-  \r\n\r\nThere is a gnarly solution which is insecure : \r\n\r\n* fn cli ensures that a docker volume \"fniofs\" exists,\r\n*  starts fn with this mounted with some flags \r\n* fn starts containers with this mounted and tells them where to put their unix sockets. \r\n\r\nthe downside here is that each function can see each other functions sockets - v bad but it would work I think. \r\n\r\nDocker doesn't support mounting paths of volumes, and unless I'm mistaken this is the only way to get a pure-blood linux dir that supports unix sockets and  can be shared between containers in d4w\r\n yep, agreed, going to do a bit more research but that's where it'll be if I can't solve another way   after looking at the docker namespace mapping stuff, it seems not very fun when dealing with volumes like we have to for uds, not sure we're going to get an easy win there but it may be possible anyway (check uid of process being run, use it to create uds volume and map it to container, but the volume fiddling may not even work with this)\r\n\r\nre: local dev experience and testing, i'd rather require users to make the fn user (1000) to be able to run locally with these settings turned on than to force the usage of sudo to run the tests (for which, we just need to update CONTRIBUTING.md and such). though, this still seems less than ideal, should try to make it as easy as possible (otherwise, slippery slope). we could make looser perms on the uds directory so that any user can write a file inside of it, and inside the container then the fn user would be able to make a file in there (we could make the perms configurable, too) no problem, I guess we'd have to make fdks make the uds file with the same loose perms so that the host being a different user could read the file for the uds read. with the file perms under control though, i think we can pretty much map the uid of the user running fn into the container as 1000 instead of needing the fn user on the host, I guess the biggest issue is the uds permissions. \r\n\r\ni tried to run the docker cli integration tests (after removing my docker user) and learned that they don't really care about making this easy for users to run, either, seemingly, so no ideas from doing that.\r\n\r\nI guess tmpfs is being attempted?  Due to unnecessary http traffic caused by docker internally, with\r\nthis PR a new image pull layer is introduced. This allows us to\r\nserialize same image docker pulls using a simple active transfer\r\nwith list of listeners model.\r\n\r\nThe timeout behavior is slightly different when multiple listeners\r\nare waiting. The timeout from first listener is emitted to all\r\nlisteners. However since the docker-pull timeout is globally\r\nconfigured, overall timeout behavior is essentially the same.\r\n\r\n  \"likely a transient error and may be corrected by retrying\" does not really mean we can retry all these gRPC cases. We already handle this. We can *only* retry in these cases:\r\n\r\n1) TryExec() runner closed case.\r\n2) TryExec() Engage() failure case\r\n3) TryExec() Send ClientMsg_Try case of gRPC code is codes.Unavailable\r\n4) If Runner tells LB that it can be retried.\r\n\r\nAll other cases, we cannot retry. We cannot intercept Recv() since Send() might have pushed data already to the container.\r\n\r\nWe already handle 4 cases above. Can we have an internal discussion how this issue exhibited itself in platform? In other words, if Recv() gRPC tells us \"codes.Unavailable\" and that this *may* be retried, in our case, except for 4 cases above, we might have already pushed the data to the container and it is too late... @reclaro Thanks for your patience with this. \r\n\r\nInstead of adding inspect function into receiveFromRunner() function, is it better to add error wrapping code in top level error handler on service side? Because there's a few more errors that this PR doesn't catch eg. ErrorRunnerClosed, io.EOF, io.ErrShortWrite, ErrorPureRunnerNoEOF, grpc errs from Engage() and Send_tryMsg, json.Marshall() errors, etc. etc.\r\n\r\nTop level handler can translate these to 500 and choose to log them or not.\r\n\r\nAlternatively, maybe try to handle them in TryExec() function itself?\r\n  I've slightly modified the code to address the review feedback. I've also split SetEvictable() into enable/disable, which is more readable/simpler and in this state I think existing tests are sufficient\r\nto cover it. (Except for creating the token acquire+evict race condition, which is difficult to reproduce.)\r\n\r\nFor locking, despite having only 2 go-routines, there were some race conditions without locks particularly cases of leaks, double deletes, etc. I also noticed even with locks there's a correctness issue in IsEvicted() check in parent go-routine. Looking closer, since we no longer evict during initialization, I was able to clean up more code. Now, evictor related code is almost 100% isolated inside child go-routine and no locks are needed. (Except now parent waits for child go-routine to exit before calling container.Close(), which in practice should be no-op since cookie.Close() aka docker-remove-container takes forever.)\r\n  This change adds a call to a function to send the RunnerMsg_ResultStart\r\nmessage during the enqueueCallResponse function.\r\nThe RunnerMsg_ResultStart contains any headers set by the function and\r\nthe status code.\r\nThis fixes the case where we don't send custom headers if a function\r\ndoesn't return a body.\r\n\r\nFixes #1413\r\n  **Description**\r\nWhen Fn is configured in LB configuration there is a bug related to custom HTTP Header not returned in case the function doesn't return a body.\r\nThe problem here is in the writeResp method in the agent.go, precisely the problem is due to the io.Copy:\r\nhttps://github.com/fnproject/fn/blob/73778de0ae919268d2fa293001ea6546269d7c82/api/agent/agent.go#L746\r\n\r\nthe code for io.Copy doesn't call the <dst>.Write if the source is empty:\r\nhttps://golang.org/src/io/io.go?s=14042:14087#L403\r\nIn our case the dst is a http.ResponseWriter and if we don't call the write we skip the send of the \"RunnerMsg_ResultStart\" which is where we include the custom Headers defined by the function:\r\nhttps://github.com/fnproject/fn/blob/73778de0ae919268d2fa293001ea6546269d7c82/api/agent/pure_runner.go#L441\r\n\r\nAs a result of that we won't see custom headers sent back to the caller if the function return an empty body or doesn't return a body at all.\r\n  I have a fix ready to be submitted soon. The version I pushed now move the send of the RunnerMsg_ResultStart when we call WriteHeaders.\r\nIn this commit we call the WriteHeaders from Write as well as it is supposed to be. Please note that when we send the RunnerMsg_ResultStart message now we use enqueueMsgStrict which, in the event of errors, cause the callHandler to shutdown. WriteHeader interface doesn't return an error so shutting down the callHandler is a way to signal the error and avoid to ignore it. In the code we have in master if we see any errors during the send of RunnerMsg_ResultStart during the Write call, the Write return that error now that is not the case anymore. What do you think about this change?  gonna close since logs are gone, let us know if we can help getting logs hooked up!  #1442   We'd like to ingest: https://github.com/grpc/grpc-go/pull/2307\r\n  During gRPC communication, previously we assumed that\r\nSend(Try) message failure in TryExec(), can always\r\nbe retried. However, this is not robust as we cannot assume\r\nno data was written to wire. With this change, before we\r\ncan conclude that the call can be retried, we also check\r\nUnavailable error code.\r\n Hmm, I'll dig around the grpc code to verify their claim, but in the spec the litmus test seems strict. (See the description in FailedPrecondition section in https://godoc.org/google.golang.org/grpc/codes#Code) @kmjohansen @rdallman Based on offline discussion, here's the updated change with smaller scope.  Runner Status Call is extended to support the network readiness state. This is configured via runner option that provide the runner a file path to check for existence. @kmjohansen The reason for performing both network-list and listen events is for speed. If we miss the network addition in network-list, I'm expecting an quick docker event update to flip the state.  ListContainers call which is asynchronously spawned\r\nduring docker driver start needs to have a reasonable\r\ntimeout and should be retried if timeout expires.\r\n\r\n  We have various functions in cookie.go to configure the container/host config. That would be a place to possibly add this. (eg. add new function such as **cookie.configureDevices()**).\r\n\r\nI'm guessing this requires the container to run in privileged mode, which we don't in current Fn.\r\n\r\nIt is also possible to create custom driver. It's not difficult to implement such a driver and spin up Fn server with it. (https://github.com/fnproject/fn/blob/master/test/fn-system-tests/system_test.go#L441)\r\n I meant to say, an implementer can write their own driver for this purpose. I'm not sure if we want to add device mapping and/or privileged mode into Fn.  Thanks for the PR. Is it possible to make the new metric or tags optional? The concern here is that additional 3 tags will increase the cardinality of the metric. In a federated prometheus environment this might end up with too much cardinality.  Thanks for spotting the issue. I think the problem lies deeper and truncation/clock math is wrong in the original code. I suggest instead of trying to correct the result above, we should record the deltas in runner and lb properly and send deltas (based on monotonic clock) instead of wall-clock readings which are subject to clock skew/adjustments. In other words:\r\n\r\n*) in gRPC proto for CallFinished, add the following two new fields:\r\nint64 schedulerDuration\r\nint64 executionDuration\r\n\r\n*) in pure_runner, use Submit/BeforeCall/AfterCall functions to perform the math\r\nto populate the above two durations. eg. start := time.Now(), delta := time.Now().Sub(start)\r\n\r\n*) in runner_client.::recordFinishStats, directly use the new gRPC fields, instead of performing delta math on Created/Started/Completed.\r\n\r\n*) in lb_agent:recordCallLatency, use the correct math to calculate the delta. StartedAt/CreatedAt are formatted strings (wall clocks), and math based on these will not be accurate. This means you'll have to record x:= time.Now() in Submit(), then do a time.Now().Sub(x) in recordCallLatency().\r\n  > \"https://fqdn:9999/root-path\" \r\n\r\nthanks @vzDevelopment for looking into this - I believe the issue from the OP is because they are using a non-root path, and `FN_API_URL` only works with the `scheme://host:port` part of the url. can see that we're stripping it from the error message:\r\n\r\n`No route for fqdn:9999/version`\r\n\r\nwhere the user was expecting:\r\n\r\n`https://fqdn:9999/root-path/version`\r\n\r\nthis is probably something we can support pretty easily, though I'm not 100% sure.   Hi! There\u2019s no IP address of a function. The only endpoint you have is the Fn server IP address.\r\n\r\nWould you mind to elaborate when and when you\u2019d like to get the original request?\r\n\r\nI suppose you\u2019d like to get the request inside of function. I assume you use an FDK, in order to get the request you need to use the context (the way it works depends on an FDK and programming language).\r\n Hi! So, in this case I\u2019d recommend to add a requirement to you application - force a caller to tell who is he, i.e. force them to set a header `X-Whoami` or `X-Caller-Id`. There are plenty of way to make it work. \r\n\r\nFDKs provide you whatever is sent by a caller of a function. Meaning if the info is not there - it wasn\u2019t sent by a caller.  That is unfortunate truth.\nHowever, at this moment we enforce developers to take care of an entry\npoint to an FDK handler (i,e., main function).\n\nWhat if we can delay customer\u2019s code initialization before the first call?\nThere are couple ways to make it happen, number of those depends on the\nprogramming language.\n\nFor instance, in Go, we can ask people to build a plug-in that does have 3\nmethods: pre-call, call, post-call (the last one might not be necessary).\nPre-call is like pragmaonce macros - do this once before handling the first\ncall, but after UDS server is started.\n\nIn Python we can ask people to do the same: give us 2 methods: in pre-call\ndo all imports or do Py3.7 lazy imports (or whatever that could be).\n\nIn Java, as you mentioned, ask people to put static init into a pre-call,\netc.\n\nSo, the benifit of this is we are the ones who control the entrypoint\n(basically, a UDS server provisioning) and let developers follow our\nrequirements.\n\nThe idea is pretty new and may have problems that I\u2019m not aware of, but may\nbecome a new FDK contract, at least worth discussing.\n\n\nOn Sat, Dec 1, 2018 at 00:26 Gerardo Viedma <notifications@github.com>\nwrote:\n\n> To give more context, the change proposed here is not about addressing any\n> particular FDK's internal initialization taking too long.\n>\n> The way the major FDKs are currently implemented does not provide any\n> guarantees that end-user code won't run prior to FDK initialization, thus\n> causing a timeout. For example, a static initialization block in a Java\n> function, or a custom import inside a Python function will currently take\n> place prior to FDK initialization and can cause a timeout if the total time\n> is over five seconds. Optimizing a particular FDK's initialization,\n> although valuable, does not solve the problem of customer imports or static\n> block declarations defined outside the FDK's control.\n>\n> Other than providing more time for initialization of customer code, the\n> only way to fully mitigate this would require us to rewrite all of our FDKs\n> to use the appropriate language constructs that can guarantee that FDK\n> initialization completes prior to running or loading any external customer\n> code, if available in that language. In the meantime, any FDK is liable to\n> run into a container initialization timeouts purely as a result of customer\n> code/initialization running on it and outside of the control of the FDK in\n> question.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/fnproject/fn/pull/1334#issuecomment-443358312>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AC5L68_LOn2Tei5Gvera9H5q8F_kfl5cks5u0bB6gaJpZM4Y78bd>\n> .\n>\n  This complements the API latency metrics available\r\non LB agent. In this case, we would like to measure\r\ncalls that have finished with the following status:\r\n     \"completed\"\r\n     \"canceled\"\r\n     \"timeouts\"\r\n     \"errors\"\r\n     \"server_busy\"\r\nand while measuring this latency, we subtract the\r\namount of time actual function execution took. This\r\nis not precise, but an approximation mostly suitable\r\nfor trending.\r\n\r\nGoing forward, we could also subtract UDS wait time and/or\r\ndocker pull latency from this latency as an enhancement\r\nto this PR.\r\n  @rdallman feel free to remove unused ghost code from common.  1) call.Start should always call handler.Start, which\r\ncan decide to delete from MQ if async itself.\r\n2) call.End errors are ignored, updated iface to\r\nclarify\r\n  FDK must respond with 200/502/504 to http requests. Any other status is invalid and container\r\nmust be terminated if that occurs. HTTP timeouts are also considered a shutdown reason\r\nfor the container.\r\n\r\nWith this PR, we trust http client to use the context timeout and therefore avoid spawning\r\na go-routine. This simplifies the flow and also avoids case of call.stderr.Close() executing before swapBack.\r\n\r\n  This is a know problem and it's the limitation of docker-syslog driver. We can open a bug with them.      Moving the timeout management of various docker operations\r\n    to agent. This allows for finer control over what operation\r\n    should use. For instance, for pause/unpause our tolerance\r\n    is very low to avoid resource issues. For docker remove,\r\n    the consequences of failure will lead to potential agent\r\n    failure and therefore we wait up to 10 minute.\r\n    For cookie create/prepare (which includes docker-pull)\r\n    we cap this at 10 minutes by default.\r\n    \r\n    With new UDS/FDK contract, health check is now obsoleted\r\n    as container advertise health using UDS availibility.\r\n This is a prep-work for https://github.com/fnproject/fn/pull/1288 yea, makes sense to move these to caller with these changes, couple notes I think I should add another timeout here, docker-pull vs UDS/start. Blanket timeout for all of it seems too broad, and leaves too much time for UDS/start phase which will eat cpu/mem outside of call.Start/End.  this is a dupe of https://github.com/fnproject/fn/issues/803 - thanks for filing, feel free to add to discussion there, it's something we've/we're considering solutions to  Container initialization phase consumes resource tracker\r\nresources (token), during lengthy operations.\r\nIn order for agent stability/liveness, this phase has\r\nto be evictable/cancelable and time bounded.\r\n\r\nWith this change, introducing two new system wide environment settings\r\nto bound the time spent in container initialization phase loosely separated\r\nas docker-pull and UDS-initialize. If during initialization, the caller is\r\ndisconnected or serviced by another hot container, then initializing\r\nhot container becomes eligible for eviction. This is an alternative PR to original proposed https://github.com/fnproject/fn/pull/1279.  @rdallman Yeah, removed the extra ctx, we actually only need a done channel there. Nanny is indeed the heart and the most complex piece there. It monitors two phases: initialization versus shutdown-wait. Shutdown-wait is the simple case, it just collapses shutWg + ctx into ctx to make it easier for rest of the code.\r\n\r\nInitialization phase is complex and it's a small state machine. It's split into before/during docker-pull and after docker-pull phases, where HotPullTimeout and HotStartTimeout is applied accordingly. During init phase, caller disconnect/serviced event makes the container evictable. Once initialized is set, then this phase moves on to shutdown-wait state.\r\n\r\ncancel() calls are a bit unsavory. But compared to previous code where we had it in 2 places, we now have it in 3 places. I could split this and perhaps introduce more specific channels (eg. runHotReq exit, waiter wait exit, etc.) but I'm not sure if it'll look simpler.  Thanks, this is great. I'm generally on board with the direction here. I see a few concerns at the moment:\r\n\r\n* certain transitive dependencies seem to have been removed by mod, a quick glance I find 2 (valid) transitive deps: `golang.org/x/text` `github.com/petar/GoLLRB`. even if the following point is possible, this is a little concerning just for the status of `go mod` but I'm optimistic that it's just part of the migration or something we can fix?\r\n* is it possible to swap out the `Gopkg.*` files for the `go.sum` without any update of the dependencies here? whereby running `go mod tidy` or `go mod vendor` or `go mod verify` would not cause any `vendor` files to change (pardon my unfamiliarity with the tool, I believe I'm mostly talking about `verify` or `vendor` though, where the `go.sum` file would ensure the `vendor/` has all matching deps in the same manner as `dep ensure` did)?  it would make this PR really easy to green light if this is possible. ie it's not clear whether this patch moves to `go mod` or moves to `go mod` and uses `go mod` to update the dependencies (perhaps this could just be clarified). Any delta of deps would be nice as it's not easy to see from the diff, if leaving `vendor/` alone isn't possible.\r\n* will packages that import `fn` but still use `dep` handle this okay? I'm optimistic, I just honestly do not know. I know we have at least 2. > got rid of the vendor directory\r\n\r\nwe learned this lesson a long time ago, checking in the vendor directory was worth it to prevent users from having dependency issues when getting started (maybe dampened now to new devs), as well as not having dependency issues among the active team, as well as bringing down CI times. please add it back :)  Previously evictor did not perform an eviction\r\nif total cpu/mem of evictable containers was less\r\nthan requested cpu/mem. With this change, we\r\ntry to perform evictions based on actual needed cpu & mem\r\nreported by resource tracker. i'm gonna move this into the resource thing as soon as I'm free :)  ![that-s-right-death-to-smoochy-39352604-608-352](https://user-images.githubusercontent.com/2935111/47467604-203cc380-d7ac-11e8-81b9-083f63223d41.gif)\r\n\r\nthis is the end of the line for format. what was previously 'http-stream' format is now the only format. this completes the prophecy. the cli can get updated after this to drop the field, as well. Hopefully a bulleted list will clarify what happened here in order to verify it, if not, sorry, I tried. To the details:\r\n\r\n__NOTE:__ https://github.com/fnproject/fdk-go/pull/39 is a prerequisite for this PR (if you don't believe in committing branch revision shas to the Gopkg.lock file here, like me), please review that if it remains unmerged at time of reading this, if there's any changes there they'll need to be picked up here.\r\n\r\n* removed `fn.format` field from API (and swagger)\r\n* added migration and removed `fn.format` field from db\r\n* removed all `protocol` packages, formats and associated references\r\n* removed cold slots from agent (and default format)\r\n* fix up fn-test-utils image for our tests, to fdk w/ only http-stream\r\n* updates fdk-go dep for fn-test-utils image (reminder: we need to update to master w/ the PR linked above for fdk-go merged)\r\n* removed all tests for other formats in server tests, changed agent tests to http-stream only\r\n* removed 'hello' image we were maintaining here - it was 'default', the fdk-go has an example too\r\n* removed references to 'cold' things. it's feeling tropical in here now.\r\n* updated system-tests to fail when they fail (hint: must be in main goroutine), and to shut up unless they fail (really noisy in circleci)\r\n* remove json/other content type detection on invoke/httptrigger endpoint output (yay)\r\n* removed cloudevent detection on invoke/trigger - this is on fdks now\r\n* remove headers: `Fn_call_id` and `Fn_deadline`, we have `Fn-Call-Id` and `Fn-Deadline` now\r\n* remove FN_FORMAT, FN_APP_NAME, FN_PATH env vars (path was from route, we could add FN_TRIGGER_ID to headers maybe? they have req url tho). add FN_APP_ID env var.\r\n* turns off the stdout/stderr blocking between calls (if freezer is on), because it's\r\nimpossible to debug without that (without syslog), now that stdout and stderr\r\ngo to the same place (either to host stderr or nowhere) and isn't used for\r\nfunction output this shouldn't be a big fuss really. this helps debugging. a lot.\r\nand in prod these are going to /dev/null anyway.\r\n* fix agent call creation to insert FN_LISTENER for any calls created (fix status thing)\r\n* fix NPE when giving a non-http.ResponseWriter to call as the writer (oops) - see `writeResp`\r\n* remove stdin hookup in agent to docker, we don't need this anymore\r\n* fixes bug where the watcher would leak if a container exited before entering the slot dealer goroutine (this does not change behavior like #1279 there's no overlap with that except in the diff, this just fixes a leak but the behavior remains unchanged in the 'happy' path, no new timeouts, etc) - moved the `shutdownContainer` context in `runHot` up a little to enclose `inotifyWait`\r\n\r\n__questions/requests for you, o benevolent reviewer:__\r\n\r\n* should we remove fn-test-utils and fn-status-checker Gopkg.lock files? they\u2019re redundant. or we should move to a different repo maybe. will have to update here after fdk-go changes land, anyway.\r\n* we can probably remove a lot of the funky pipe business, but I chose not to do that here. it's some amount of gutting we can do later, it doesn't effect this really (maybe some perf bump, idk).\r\n* please check that I didn\u2019t miss any tests when migrating, there were lots of dupes for each format and now there\u2019s just 1 of each. I double checked, but I miss things sometimes.\r\n* no @mantree I can't split it up into multiple PRs :)  > It looks like old non-stream functions fail with a 500 on invoke - should this to be something else or something more informative?\r\n\r\nlooking into this. gonna update dep* too with fdk master... thanks for reviewing. > deletage\r\n\r\nthe internet doesn't think this is a word. I'm curious now :) yea, adding back FN_FORMAT and trying to fix up the error now (feel free to leave blocked until then) see https://github.com/fnproject/fn/pull/1281/commits/c425c1db2cbde82ad73d5763de6d7c3c897643ba and https://github.com/fnproject/fn/pull/1281/commits/0a703e7a66a01953d9b6ba5212b4371debe928dd to add an informative error for the explosive fdks and FN_FORMAT env var to http-stream during transition for fdks. I did not add a test for the latter, I could have another go at updating the test utils image but I'm about 99% positive it works and shouldn't be critical anyway and I smell food which is much more critical... updated deps too... anyway, CI seems happy... if that addresses everything, don't wait for me... ![sickcloseazurevase-size_restricted](https://user-images.githubusercontent.com/2935111/47583305-e4b90b00-d90b-11e8-8a8d-6c6046070554.gif)\r\n thanks all  Hi @chryswoods, yea, this is expected. Agree, this would be a useful feature - of course, we expect most fn deployments to add some kind of auth on top of the API to attenuate permissions on endpoints like getting apps (using extensions, ala https://github.com/fnproject/ext-auth - I think this won't build atm, but the code gives a good idea). We have discussed allowing users to upload encryption keys, and we're discussing how to integrate with KMS (Key Management Service) now too, which seems related - am not sure there's any public links to this discussion at this time (mega :((( ). It does seem like uploading encryption keys to fn on an app (and not showing on GET) and encrypting config / decrypting to hand off to function would satisfy your use case. If you have any thoughts on what you would like, feedback would be great! thanks  related #1314   well, this was part of the design, and this behavior is documented, and we are using the fdks to resolve this to appear the same to users. I'm just getting through email I apologize for my brevity, but this is intentional as far as I understand from the issue description... compatibility is the only reason. we can remove once fdks are ready probably (this may well be the case already, I haven't looked in detail though)  why would a user do this at runtime? this seems to defeat a lot of the benefits of building docker images, which is kinda the idea here, where this wouldn't be an issue at all? that's fine about go modules... but why not do this in the Dockerfile? A large benefit of the docker registry ecosystem is immutable images under versioned tags, this just seems to fart in the face of that... I can't discern any benefits, this just pushes users to do their own versioning of artifacts to download at runtime and makes users end up solving the same problem registry images already solve. if it's really such a pain in the ass to version functions, we should fix that (please elaborate if so) instead of trying to enable use cases that push lots of extra work onto users that we don't necessarily want to recommend... Good point, we should consider other use cases as well. I do not know offhand, re-opening though.  @denismakogon Execution time is not changed in this PR, it is *call.Timeout* (amount of time in a container). I agree that this may need to be increased for async functions as longer runtimes are desired. But we can address that in a future PR as @zootalures commented.  - Link to issue this resolves\r\n\r\nRemoves old out of date docs and feature docs.\r\n\r\n- What I did\r\n\r\nDeleted the files from my branch.\r\n\r\n- How I did it\r\n\r\nFrom command line.\r\n\r\n- How to verify it\r\n\r\nls\r\n\r\n- One line description for the changelog\r\n\r\nOld docs to be deleted. Docs no longer relevant or outdated.\r\n\r\n- One moving picture involving robots (not mandatory but encouraged)\r\n\r\n![Robot Smash](https://media.giphy.com/media/fxIk0cODMTZrchdLzm/giphy.gif)\r\nBernard smashes old files. Thanks Reed. I'm on it. I'll post a comment with links once I have the files or parts of the files moved. File and content have been added to the new repo:\r\n\r\n* Pagination: <https://github.com/fnproject/docs/blob/master/fn/develop/pagination.md>\r\n* Log Stores: <https://github.com/fnproject/docs/blob/master/fn/operate/log-stores.md>\r\n  Closing this for time-being. Tests are showing dubious results.  This allows to time limit slow/malicious clients when\r\nreading HTTP headers. In GetBody() buffering, same timeout\r\ncan be used to time limit to give consistent I/O wait\r\nlimits for the service in addition to per handler\r\nimposed limits we already have.\r\n  With this change, fn-agent prefers docker-syslog driver\r\nfor logging stdout/stderr from containers. The advantage\r\nof this is to offload it to docker itself instead of\r\nstreaming stderr along with stdout, which gets multiplexed\r\nthrough single connection via docker-API.\r\n\r\nThe change will need support from FDKs in order to log\r\ncorrect call-id and supress '\\n' that splits syslog lines.\r\n\r\n Before:\r\n\r\n```\r\nAug 27 21:27:01 fnserver 2 2018-08-27T21:27:01Z fn - - - - call_id=01CNYMGSZ1NGA000RZJ0000003 func_name=/fn-http-func app_name=fn-http-func \r\n2018/08/27 21:27:01 Received format http\r\nAug 27 21:27:01 fnserver 2 2018-08-27T21:27:01Z fn - - - - call_id=01CNYMGSZ1NGA000RZJ0000003 func_name=/fn-http-func app_name=fn-http-func \r\n2018/08/27 21:27:01 Received request main.AppRequest{SleepTime:0, ResponseCode:200, ResponseContentType:\"\", JasonContentType:\"\", EchoContent\r\n:\"hello\", IsDebug:true, IsCrash:false, ReadFile:\"\", ReadFileSize:0, CreateFile:\"\", CreateFileSize:0, AllocateMemory:0, LeakMemory:0, Respons\r\neSize:0, InvalidResponse:false}\r\nAug 27 21:27:01 fnserver 2 2018-08-27T21:27:01Z fn - - - - call_id=01CNYMGSZ1NGA000RZJ0000003 func_name=/fn-http-func app_name=fn-http-func \r\n2018/08/27 21:27:01 Received headers map[Fn_call_id:[01CNYMGSZ1NGA000RZJ0000003] Fn_method:[POST] Fn_request_url:[http://localhost:8080/r/fn\r\n-http-func/fn-http-func] Content-Type:[application/json] User-Agent:[curl/7.61.0] Content-Length:[79] Accept:[*/*] Fn_deadline:[2018-08-27T2\r\n1:27:11.857Z]]\r\nAug 27 21:27:01 fnserver 2 2018-08-27T21:27:01Z fn - - - - call_id=01CNYMGSZ1NGA000RZJ0000003 func_name=/fn-http-func app_name=fn-http-func \r\n2018/08/27 21:27:01 Received config map[PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin HOSTNAME:05b75bd86a2f FN_MEMORY:12\r\n8 FN_TMPSIZE:0 FN_FORMAT:http HOME:/root FN_TYPE:sync FN_APP_NAME:fn-http-func FN_PATH:/fn-http-func]\r\n```\r\n\r\nAfter:\r\n```\r\nAug 28 00:46:19 fnserver func_name=/fn-http-func,app_name=fn-http-func,e97dd9aff479[17]: 2018/08/28 00:46:19 Received format http\r\nAug 28 00:46:19 fnserver func_name=/fn-http-func,app_name=fn-http-func,e97dd9aff479[17]: 2018/08/28 00:46:19 Received request main.AppRequest{SleepTime:0, ResponseCode:200, ResponseContentType:\"\", JasonContentType:\"\", EchoContent:\"hello\", IsDebug:true, IsCrash:false, ReadFile:\"\", ReadFileSize:0, CreateFile:\"\", CreateFileSize:0, AllocateMemory:0, LeakMemory:0, ResponseSize:0, InvalidResponse:false}\r\nAug 28 00:46:19 fnserver func_name=/fn-http-func,app_name=fn-http-func,e97dd9aff479[17]: 2018/08/28 00:46:19 Received headers map[Fn_request_url:[http://localhost:8080/r/fn-http-func/fn-http-func] User-Agent:[curl/7.61.0] Content-Length:[79] Fn_call_id:[01CNYZXQMYNGA000RZJ0000003] Fn_deadline:[2018-08-28T00:46:29.806Z] Fn_method:[POST] Accept:[*/*] Content-Type:[application/json]]\r\nAug 28 00:46:19 fnserver func_name=/fn-http-func,app_name=fn-http-func,e97dd9aff479[17]: 2018/08/28 00:46:19 Received config map[PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin FN_TMPSIZE:0 FN_FORMAT:http HOME:/root HOSTNAME:f4931fa91618 FN_APP_NAME:fn-http-func FN_PATH:/fn-http-func FN_MEMORY:128 FN_TYPE:sync]\r\nAug 28 00:46:19 fnserver func_name=/fn-http-func,app_name=fn-http-func,e97dd9aff479[17]: HTTP/1.1 200 OK\r\nAug 28 00:46:19 fnserver func_name=/fn-http-func,app_name=fn-http-func,e97dd9aff479[17]: Content-Length: 624\r\nAug 28 00:46:19 fnserver func_name=/fn-http-func,app_name=fn-http-func,e97dd9aff479[17]: \r\nAug 28 00:46:19 fnserver func_name=/fn-http-func,app_name=fn-http-func,e97dd9aff479[17]: {\"request\":{\"responseCode\":200,\"echoContent\":\"hello\",\"isDebug\":true},\"header\":{\"Accept\":[\"*/*\"],\"Content-Length\":[\"79\"],\"Content-Type\":[\"application/json\"],\"Fn_call_id\":[\"01CNYZXQMYNGA000RZJ0000003\"],\"Fn_deadline\":[\"2018-08-28T00:46:29.806Z\"],\"Fn_method\":[\"POST\"],\"Fn_request_url\":[\"http://localhost:8080/r/fn-http-func/fn-http-func\"],\"User-Agent\":[\"curl/7.61.0\"]},\"config\":{\"FN_APP_NAME\":\"fn-http-func\",\"FN_FORMAT\":\"http\",\"FN_MEMORY\":\"128\",\"FN_PATH\":\"/fn-http-func\",\"FN_TMPSIZE\":\"0\",\"FN_TYPE\":\"sync\",\"HOME\":\"/root\",\"HOSTNAME\":\"f4931fa91618\",\"PATH\":\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"},\"data\":{}}\r\n```\r\n @rdallman @zootalures @kmjohansen  Before I spend more time on this PR, I'd like to ask an early review of this approach. This PR is a POC for now.\r\n\r\nIn summary, docker-syslog works. However it seems to log both stdout/stderr. As we discussed, FDK will still need to handle call_id addition to the logging and perhaps it should handle supressing '\\n' from output.\r\n\r\nstdout/stderr merging may be a showstopper for this. The above before/after is from an http function, and you can see that http output is also logged. However, going forward, if we get rid of stdio and switch to socket.io, this might be the behavior we actually want.\r\n\r\nDo we still want to proceed with this? @rdallman @kmjohansen This is a bit more cleaned up now. @rdallman @kmjohansen minor changes. (removed container id and switched to RFC2454 and updated docs.)  My main thought in this area is we don't want to support \"structured\" cloud events, nor any format that involves marshalling the request body.\r\n\r\nI'm thinking the call delivery model should be much closer to a proxy, using metadata (either from http headers, or preconfigured options with regard to event consumption) to route the request. The less the platform has to do with the request the better.\r\n\r\n### support binary by using a cloud event in a request over a socket\r\n\r\nSeems like the way to go, if we're going to cause a wide-ranging change let's do it to move to http-server model, which has lots of nice benefits.  Had a chat with @kmjohansen on this, in summary, we think:\r\n\r\n1) we can't run prune images since it purges indiscriminately. In case of restart, we risk docker-pull flood.\r\n2) we can perhaps use list-images (like before) and keep track of them in LRU. (Except for DockerLoadFile images) (list-images with all=false probably addresses the issue pointed out by @rdallman)\r\n3) when we queue a image remove job, we might need to order operations or block/wait requests/jobs if requests for that same image are between 'docker-pull' and 'docker-create' to avoid errors.\r\n4) LRU should asynchronously run if a threshold is reached in total image size usage.\r\n\r\n And of course, by default this should be disabled since we do not know how users are running docker ecosystem (dind, shared, swarm, etc.) One minor note: we probably want to run list-images after loading the images in DockerLoadFile, and LRU should record the list of images that are loaded by driver.loadDockerImages() and always skip removing those. In other words, images loaded by DockerLoadFile param should not be evicted. Since these are being pre-loaded, it is likely that they can't be pulled. thanks for keeping this up to date, I'm sorry that it has lingered. I'll make a point of reviewing this later today or tomorrow @ericfode  What is api/datastore/sql/sqlite_test_dir ? I think it's committed by accident. closing this, we'll start fresh with a new PR.  \r\n  Clone of the trigger work to inject invoke urls into the annotations\r\non a fn when it is returned from the server.\r\n I think we had this chat when it came to triggers. I think it came down to the fact it's not really a piece of entity metadata, as in the end user can not edited it, and it could conceivably change out side of their control.\r\n\r\nNot sure if I'm remembering that right, but it was something like that  Think i've come back and over taken you in #1168 now.   A version of Fn invoke that works exactly like the trigger endpoint point. I think when we come to do all the cloud events stuff we need to have a big of a discussion about how far we're going to go with it and what the actual impact is going to of different versions of it all. I don't think the bits and pieces we have are unworkable, just that they hav'nt been planned.\r\n\r\nIn terms of refactoring what we have here, we can always do /invoke/fn_id/cloudevent, like what is specified in #1138, and just build a totally separate code path for cloudevents. Why is the resource in models only have Memory? @skinowski that and timeout are going to be the only configurables, i think shapes are going to come into this area.  Just this afternoons effort to start from the front so far.\r\n\r\nI've copied up the event from the other PR, but I do think that there is a strong case for a library here.\r\n\r\nOther than that I'm basically copying what has been done for http triggers and just trying to get the most boring stuff done. I think smallest Delta possible! And really should be noting down these further steps somewhere... This have been over taken by events, represented in #1168   I like this and mentioned it in the past, but to do this, I think we'd need to amend the protocols to handle an early return of data to client while holding the container/token (and making it sure that time/cpu is accounted.) We can perhaps look at it after cloud events (which I think simplifies the flow) and see if it can be handled easily. I apologize, I misunderstood this issue, I was talking about a post handler that gets executed at every invocation, where users can execute code without impacting request latency.\r\n\r\nBut an exit handler is problematic for us, like @zootalures said we shouldn't gracefully wait for user code to clean up.\r\n I'd like to understand more about the original problem however. When hot functions terminate, such backends should receive FIN/RST, so the backend should have the opportunity to notice and clean up these connections upon termination.\r\n\r\nI wonder, if @abhirockzz is actually referring to idle connections on live (but idle) hot containers. In other words, hot containers that haven't exceeded their idle timeout, but not handling a request and holding on to such connections.  Creates a test that aims to assert that the Equals and Clone functions\r\nfor the App struct actually work.\r\n\r\nThe bulk of the code is spent creating a gopter generator for the App\r\nStruct. See information of generative or property based testing for\r\nexplainations on that topic, but basically it's an object that is\r\ncapable of creating a stream of unique instances of the given struct.\r\n\r\nWith the generator we then make three assertions:\r\n 1) App's are always equal to themselves.\r\n 2) A .Clone() of an App is Equal to the original App.\r\n 3) A .Clone() of an App that has a field modified is not equal to the\r\n orignal.\r\n\r\nThe third property is the worse for implementation, as it does not\r\ngenerate the field to modify, it simply loops all fields for each generated\r\nApp, and checks Equals always breaks.\r\n\r\nBreak testing shows that this would have caught earlier bugs in Equals\r\ndue to field addition. It will add to the work to add further fields,\r\ngenerators have to be manually specified for each field, but that\r\nseems a worthy cost.\r\n I think this could largely be done with test/quick, but gopter is far more able (has shrinking, more exstensible) and I wanted to get used to it.\r\n\r\nThis is trying to assert some core properties of the code, which I think examples would miss. I don't think it can be done without a lot of reflection, and although the gopter stuff looks heavy when I tried without it I just ended up with a half baked pants version of the map that gets fed into the structs gen.\r\n\r\nI'm quite interested in the conversation around this approach as well. Once the generators are written they can be reused and I'd look to becoming more property driven in the future. testing/quick is pretty limited, it doesn't really have generators, so doesn't support shrinking, which is pretty key for PBT imo. Although that said gopter doesn't shrink struct generators, so that's not a huge win here.\r\n\r\nI get the reservations, but when thinking about this I couldn't think of another way of ensuring that an added struct field was also added to Equals/Clone, without relying on a human to remember something. With this it will prompt them pretty quickly to sort it out. @rdallman @zootalures someone want to give this the green light then?  #1138 should be able to rebase on this with relative ease (since the lines are identical)\r\n\r\nattempting to simplify some stuff out of #1138 here still on the TODO is bubble up the env vars to the server package and just use agent config fields... live to die another day today thanks. flip a coin who gets to rebase #1138 ...  > However it isn't the best solution to the issue.\r\n\r\nopen to ideas here if you have suggestions, setting headers on the function are useful for separating the function from having to do this. it's also an option to return the headers directly from your function in the response, these will get propagated back out to the http response. if you're using an fdk this is easier to do, otherwise the details for setting response headers depend on the format (details are here: https://github.com/fnproject/fn/blob/master/docs/developers/function-format.md)\r\n\r\nmarking this as resolved, happy to discuss further here though. I see these are in our API docs relatively clearly explained as is (though happy to bolster if you've got suggestions)  i'll try to spend a few more hours on this this weekend, sorry this took so long... caught up on my email and in the clear now, realize my review is vague, i'm musing about feasible reductions (and have not yet tried to run / fixup tests with this, maybe just press on).  > renaming agent config, removing max-req-size\r\n\r\nyeah, good idea, i'll try to post a patch with just these today, easy enough to extract those two out.  ok #1144 and #1145 are up... i think we can probably stage the changes that rip http.request out of call out too without any of the i/o changes, which adds context.Context to the agent methods and updates the tests and such, that should reduce the noise a good bit more from here after another rebase... i'll give it a couple hours and see if it's worth it  in function logs there will be an error like:\r\n\r\n```\r\nmsg=\"./my.sh: line 1: can't create file: Read-only file system\\n\"\r\n```\r\n\r\nif you'd like to 'fix' this temporarily, you may write to `/tmp` or disable this feature https://github.com/fnproject/fn/blob/master/docs/operating/options.md. we are smoke testing this and appreciate upvotes here if you run into issues so that we can track this, or any additional sentiments -- an upvote indicates you would like to write to anywhere in the container filesystem by default (i.e. as a user, your 'expectation') and/or this was challenging to work around (please provide details).  we're walking a bit of a tight rope with OSS and service anyway, this restriction likely shouldn't last in OSS but we were curious the effects on users and this was the easiest way to generate data rather than sitting around talking hypotheticals one issue we have atm is that we aren't very upfront about this restriction, so it's more likely users run into it. there's something to be said for expectations, but we were mostly curious about cases where it's not possible or very challenging to work around this and if that's a practical reality or only hypothetical. there's a decent opportunity here to generate data on whether it should be enabled or disabled out of the box, which is the crux of the issue (or the intended one), though I certainly wish the original post for this issue looked more like https://github.com/fnproject/fn/issues/1113#issuecomment-403107554 to reference here.\r\n\r\nif users are hitting this regularly _and_ it's hard to work around, we have an interesting conversation around disabling it by default in OSS. we need some guide on 'battle hardened' config outside the scope of this configurable option existing & motivations therein, at least this wasn't the intent of that issue and maybe that should be clarified(?). there's a multiple-issue-spanning issue around consistent experience to be had between out-of-the-box installs vs. configured installs. I see 3 tiers: out-of-the-box install behavior, on-prem configured behavior and our service behavior, there's a whole spectrum to explore between complete freedom with OSS where everything works and there's no limits to mimicking the service exactly, we need some unity on that as we're not consistent at the moment (this is, at the moment, and perhaps should remain that way if the community doesn't give much feedback here) -- but maybe this is better done elsewhere since it's not #1113 directly. \r\n\r\nfeel free to edit the OP or close and [maybe] re-create. as the title suggests, it would be valuable feedback to know how many users run into the read only issue when running the OSS fn out of the box as well as providing them an outlet to provide feedback on this, and if we get that then we can analyze what to do from there for the out-of-the-box experience.  at present, we allow a user to set `cpu`, `memory`, and `tmpfs_size` on a given function (tba 'network'). this allows variable amounts for any of those given parameters where they are independent of one another. quite simply, this issue proposes to base the settings for any other system resources that exist currently or in the future off of memory alone. first, illustrated with an example (these are not in any way prescriptive):\r\n\r\n* 128MB RAM, 500mCPU, 256MB tmpfs, 100Mb/s network\r\n* 256MB RAM, 1000mCPU, 512MB tmpfs, 200Mb/s network\r\n* ... up to some N cap of RAM, say 2GB or something.\r\n\r\nwhere a user would only set and/or see the memory setting, and all of the other settings would get applied under the hood for that function (not visible to the user via API). part of the work to do this / make this capable has gone in https://github.com/fnproject/fn/pull/1065 with the current API intact, this aims to round this out a little more. \r\n\r\nlambda's copyright around this is as follows, if this helps to clarify:\r\n\r\n> You only specify the amount of memory you want to allocate for your Lambda function. AWS Lambda allocates CPU power proportional to the memory by using the same ratio as a general purpose Amazon EC2 instance type, such as an M3 type. For example, if you allocate 256 MB memory, your Lambda function will receive twice the CPU share than if you allocated only 128 MB. You can update the configuration and request additional memory in 64 MB increments from 128MB to 3008 MB.\r\n\r\nbenefits:\r\n\r\n* the user api would be very simple, only exposing memory. this has been one particular concern where in a setting with certain shape 'tiers' (similar to above), if a user sets one setting, does this mean we should adjust the other settings to more closely fit a valid shape based on a certain parameter (i.e. do we need to do minimum/maximum calculation to fit) or do we error, ignore certain fields, etc etc. this is much more straightforward than what is possible now if a service provider wants to provide an equivalent API to the OSS fn API, where the service provider would need middleware to provide some of the above outlined logic.\r\n* configuring these settings for a service provider could be as simple as setting 'memory_interval', such as 128MB shown above, a 'max_memory' where the interval would cap out at, a 'factor' for all of or each setting and the 'interval' for cpu, tmpfs, network, etc. these could be done as simply as having environment variables, or in another way, but is not particularly challenging to plumb. it would also be possible to have some kind of table config for shapes, or even an admin API to hook this up. this particular point will have to get sorted out should this feature go through.\r\n* a service provider can magically change the settings behind the scenes without any notice through the API. for example, if new VM shapes come in that allow splitting up a VM into the same memory sized chunks with double the CPU or network bandwidth, et voila: there's no documentation to update this amount in the API settings or go update across all user functions, they'll just get the extra juice. or when we decide to give users real disks instead of tmpfs to write things to, they won't have to futz with another setting for disk to go next to tmpfs size, we can just move them onto disks / deprecate tmpfs / whatever.\r\n* aligns with what competitors are doing and provides a familiar, understandable user experience\r\n\r\ncons:\r\n\r\n* lack of flexibility for functions shaping, most functions will not uniformly use 128MB of RAM _and_ .5mCPU _and_ 100Mb/s network, they'll likely be bound on one of these and could in theory lower the needs for the things they are not bound on, and in theory a service provider could more efficiently pack things that are more bound by those other things onto those machines. while this sounds nice, it requires a lot of vertical integration across the product and to date only Google functions seems to have a flexible billing model based off of memory and cpu usage, opposed to microsoft and lambda which bill by gigabytes of memory used over function duration. maybe the Google billing model is worth discussion as this does have implications across the product and may be flexible enough for our needs as well as other models.\r\n* users are unaware of how much of the other stuff they're getting (potentially), like CPU, disk, . this is notably also in the benefit section for different reasons. \r\n cc @shaunsmith @skinowski   > It seems off that we\u2019re doing an apt-get install during fn build here, I think the base requirements should be bundled into the respective containers we provide\r\n\r\nthis seems to be the case now   LGTM, but minor concern regarding adding too many buckets.  Similar to FN_MEMORY, we pass FN_TMPSIZE to function config.\r\n\r\n @kmjohansen For time being, it's not configurable. Hardcoded to /tmp.  I understand that this approach here is limited, but this is consistent with FN_MEMORY, FN_CPU. These are passed in as part of call configuration structure, for example, for json:\r\n\r\nhttps://github.com/fnproject/fn/blob/master/api/agent/protocol/json.go#L27\r\n\r\nTMPFSSIZE is part of Route API and it's a single entity. When volumes are implemented, we'd need to extend/supplement this. Right now, TMPFSSIZE is either unlimited (0), or set to a specific limit.\r\n\r\nI'm ok with holding off on this until we decide on a better strategy as well.\r\n\r\n  LGTM, but are we sure removed api tests are already covered in the remaining tests in fn?  Crux of the problem here is that lb & pure runner system needs to be documented.\r\nThe settings above are not required, but recommended to ensure the services are safely configured.\r\nPerhaps we can remove them, but even without them, you'd still need to set FN_DB_URL, FN_API_URL.\r\nHistorically system_test.sh was copied from api_test.sh. We basically have these two shell scripts that are entry points for both api/system tests, but that can be done in TestMain().\r\n I'll clean this up...  @rdallman Thanks for catching this.  When/if this happens, we can remove GetBody hacks in agent.call (see lb_agent.go and auth.go) which is currently an unsavory hack via call.RequestBody(). This also have implications in gRPC between LB and runners. We need to be careful if we are going to send body in gRPC model as we can hit max msg sizes of gRPC. It would probably better if runner client/server stripped the body off of model and pass it along using DataFrames like we do now.\r\n\r\nJust spelling these out to make sure implementer covers these...  \r\nI think the changes need a bit clarification as who adds the id and when. Because as is, server.NewFromEnv() seems to add a handler regardless of type (lb, runner, pure-runner, api).\r\nIMHO, two points:\r\n\r\n1) the rid generator (which seems to be intended for LB only) should not try to fetch id from\r\nuntrusted client http headers. It should always generate the id.\r\n\r\n2) The rid generator option should not be part of server.NewFromEnv() by default because\r\nit needs to be optional. (see: system tests, which only adds it to LB, which I think is what we want.)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  Other than idle_timeout, hot-functions have a potential\r\nof staying alive unbounded amount of time. In certain routes,\r\nit may be desirable to limit total request count.\r\n\r\nSetting max_requests to 1 also simulates a cold-function behavior\r\n(but with superior formats: json, cloudevents, http) since\r\nonly one execution will be performed in a given container.\r\nThis change is also a preliminary step for decommissioning cold-format\r\nsince max_requests parameter can now meet cold requirements.\r\n\r\nIn busy deployments, max_requests can be valuable workaround\r\nfor resource leaks in problematic routes.\r\n\r\nIn future, max_time can also be added to limit the total\r\nexecution time. Alternatively, we could:\r\n\r\n*) add max_requests (and also a max_exectime) to limit all containers in a agent cfg.\r\n\r\nThis would allow a service to safely upper bound both without adding per-route settings.\r\n\r\nThen we lose the cold-like execution in a route. (Does anyone really need cold-like execution?) or\r\nsuch settings on specific routes but not others?\r\n To be clear, MaxRequests=1 does not allow default format in hot-containers. It just allows execute-once support in json/cloudevents/http formats.\r\n Most similar systems have both of these.. I think we need both and I can add time-based max-exectime to this PR as well... (after we decide where these would go...) By \"similar system\" I meant: http keepalives, uwsgi, fcgi, etc. Closing this. I still like the idea of bounded execution with maximum time & maximum number of requests, etc. But the PR is old and we can rework this later if it comes up as high priority.  \r\nRunner could poll docker (eg. docker-info(*)) if runner is idle for too long or simply respond OK based on any recent docker interaction (last docker-operation was OK or not). (Or just panic.) But this needs to be done by cherry-picking these operations in docker driver in runner. (eg. docker pull failures may or may not mean runner health failure.)\r\n\r\n(*) docker-info doesn't mean much though. But shows docker up/running.\r\n\r\n\r\n\r\n So, in Status message, I'm planning to include some memory/slot/cpu info from agent's point of view. (not system memory/cpu utilization). Intended for LB to use the data as heuristics. Memory is particularly tricky as runner could be low (or out of) memory, but can have a lot of idle hot slots to handle many requests.   Let's hold off on this one... Until config/operational config decision is finalized. @shaunsmith was asking about documentation. wrote that up (at last) https://github.com/fnproject/fn/issues/1106 i'm not sure it was well circulated that it was planned in triggers changes, feel free to add [0.2] to title or 'waiting' tag depending on scope  With this PR, runner client translates too busy errors\r\nfrom gRPC session and runner itself into Fn error type.\r\nPlacers now ignore this error message to reduce unnecessary\r\nlogging. @kojustin I think they need to become metrics. A counter for number of 'too busy' runner responses, etc.   \r\nIntroduce two new env variables to expose tmpfs size and location to applications. For example:\r\n\r\nFN_TMPFSSIZE=128\r\nFN_TMPFS=/tmp\r\n\r\nin MB. Correction, I've meant FN_TMPSIZE, FN_TMP actually, where:\r\n\r\nFN_TMPSIZE is in MB, and if unlimited, is 0.\r\nFN_TMP will be '/tmp' most of the time, but allows us to move it somewhere if ever needed. (Might not need this one.)\r\n Also, similar to FN_MEMORY, FN_TMPSIZE will not be actual /tmp size available (but what's configured for that route/function) since between calls in hot containers, /tmp will persist until hot container is dead. Their provided value in env (as config) is a bit dubious, so maybe we can punt on them for time being.  *) removes git-tag/git-push from circle CI. Here a separate manual tag/PR is required to trigger CircleCI\r\nto release dind and fn images.\r\n*) optimizations provided by changed-since-last.sh script is reverted for time-being. Closing this (it was an experiment), as we'll likely not use this approach...  calls are removed from API now  Decommission or move these test images to fnproject docker hub or use existing test images.\r\n\r\nSee:\r\n\r\n```\r\n./test/fn-api-tests/formats_test.go:    rt.Image = \"denismakogon/test-hot-json-go:0.0.1\"\r\n./test/fn-api-tests/exec_test.go:       rt.Image = \"denismakogon/os.environ\"\r\n```  The docker images:\r\n\r\nfuncy/timeout\r\nfuncy/log\r\n\r\nwhich are in test/fn-api-tests can be decommissioned. We can either move these to the new fnproject dockerhub\r\nrepository, or try to use existing images that are already present.  When TmpFsSize is not set in a route, docker fails to create a /tmp\r\nmount that is writable. Forcing docker to explicitly to this if\r\nread-only root directory is enabled (default). @denismakogon Routes have TmpFsSize config param to adjust /tmp size limit. If unset, /tmp is unlimited, but in reality tied to available system memory.  Interesting, we even have a test case for this:\r\n\r\nhttps://github.com/fnproject/fn/blob/master/api/agent/agent_test.go#L635\r\n\r\nwhich OS does this fail on? Oh, I see the issue... Fix is coming shortly... (Meanwhile, as a workaround, you can specify TmpFsSize=x for your routes, where x is size in MB.) #1024 addresses this.  Timeout setting in routes now means \"maximum amount\r\nof time a function can run in a container\".\r\n\r\nTotal wait time for a given http request is now expected\r\nto be handled by the client. As long as the client waits,\r\nthe LB, runner or agents will search for resources to\r\nschedule it. @rdallman a bit cleaner with latest commit I think...  Ignoring cold-deadline issue for now as cold is slated to be decommissioned.  *) read-only Root Fs Support\r\n*) removed CPUShares from docker API. This was unused.\r\n*) docker.Prepare() refactoring\r\n*) added docker.configureTmpFs() for size limited tmpfs on /tmp\r\n*) tmpfs size support in routes and resource tracker\r\n*) fix fn-test-utils to handle sparse files better in create file Annotations sounds good. Then operators could choose to put this as app or route based setting. @rdallman FYI, @zootalures has some reservations on using annotations for this. Leaving this PR as is, I think per route config is OK and gives enough flexibility to operators. I'd say we leave it disabled by default. This is the least disruptive for open-source users, cli, etc.  fn run no longer exists  Wrapping metrics should be optional/explicit there IMHO. Maybe we could expose that wrapper instead? Because if a user synthesizes a datastore using api/datastore/datastore.New(), then pass that datastore to WithDatastore(), it'll be wrapped again. We can (should) enforce metrics/validation. I'm only (slightly) concerned about user errors where \"a user synthesizes a datastore using api/datastore/datastore.New(), then passes that datastore to WithDatastore()\".  Not sure if this is a big concern..\r\n\r\n\r\n\r\n  Ah, this is because the call failed very early (and considered retriable), it's not removed from the queue. We may need to distinguish specific cases such as above and handle them if these errors are not transient errors. Errors that we know for sure that will reoccur on every fn server node even if retried on a every node of that cluster.  fn-api-tests are decomissioned, closing.  *) In LB and runner gRPC communication, removed ACK sending\r\nfrom pure-runners. Now, upon TryCall, pure-runners can quickly call\r\nAgent Submit(). This is good since at this stage pure-runner\r\nalready has all relevant data to initiate the call.\r\n*) Removed pure-runner capacity tracking code. This did\r\nnot play well with internal agent resource tracker. 'Too-busy' responses\r\nfrom Agent Submit() can now be retried.\r\n*) Agent is set to non-blocking mode in pure-runner, this allows\r\nfor a faster 'Too-busy' response from Agent Submit() if the request\r\ngets blocked on CPU & Memory resources.\r\n*) LB immediately streams http body to runners. This is optimistic\r\ncommon case. But streaming is interrupted if NACK is received.\r\n*) For retriable requests, request body IO is handled by GetBody function,\r\nwhich is set by LB. This allows for reading http Body safety multiple times\r\nin case of retries.\r\n*) Idempotenty/retry is similar to previous code. After initial success\r\nin Engament, after attempting a TryCall, unless we receive NACK,\r\nwe cannot retry that call.\r\n*) ch and naive places now wraps each TryExec with a cancellable\r\ncontext to clean up gRPC contexts quicker. @hhexo Yes, runner failure is assumed/considered rare. If runner has failed, another expectation/assumption is that engagement will also likely to fail which should prevent excessive loss of function calls.\r\n\r\nEven with presence of Ack, failures could occur and functions can fail in the same way. Ack merely attempts to narrow this window, where new code has a somewhat large window for these losses to occur, but in practice I think the difference is not worth to delay execution for common case. With latest commits, I've removed ACK/NACK layer all together. Finish messages have success flag and details field to embed this information. We were and still are abusing the 'details' string in there (sometimes it's a call ID, sometimes it is an error), which should be properly expanded in gRPC proto files, but I'm hesitating modifications in there. We can follow up with another PR to fine tune those.\r\n\r\nErrors passed in Finish messages are now API errors encoded with \"errorCode:string\" in Details section. Only an API Error of 503, means a request can be retried. This is consistent with current and previous Agent behavior with/without pure-runner/LB.\r\n\r\nThere are various bug fixes in this PR, which are:\r\n1) Closed Runner errors should be retriable. There may be runners that are not Closed,\r\nwhich may take this request.\r\n2) HTTP Meta Message StatusCodes are now being honored with WriteHeader.\r\n3) Pure-runner Data messages can now handle large responses, which exceed\r\ngRPC default of 4MB.\r\n4) Short write errors are now detected/logged (from LB to http client.)\r\nIf short write is detected, LB will ignore subsequent data messages from pure-runner.\r\n  1) fnserver dind requires privileged mode\r\n2) mysql should be in sync with test.sh/api_test.sh mysql version to avoid errors such as\r\n    msg=\"couldn't ping db\" error=\"this authentication plugin is not supported\" url=\"root:root@tcp(db:3306)/funcs\r\n\r\nTODO: fix/investigate why fnserver fails on latest mysql. @denismakogon could you help me test this with chained fn test case? (#974 ) I think the above may fix your issue. @denismakogon ping...  I've got a to-do item to add a new env var for this. Where the env var will be a list of custom networks and Fn agent will by default round robin containers on these networks. I may have missed couple details here, but in essence I meant:\r\n\r\n```\r\nexport SOME_ENV=\"net1 net2 net3 net4\"\r\n./fnserver\r\n```\r\n\r\nwill cause fn agent to run the functions in net1/2/3/4 round robin (or any other suitable policy.)\r\n\r\nDoes this fix this issue?\r\n Hmm, ok, the use-case I'm thinking about is due to 1023 container limit on each docker bridge. For this reason, we allow a user to create multiple networks and the agent can round robin (or fill first, then move to next) these networks. In this model (docker bridges), I don't think a container/function can be attached to more than one. So, if one network is mandatory (and you will not spawn more than 1023 functions at a time), then you simply specify:\r\n\r\n```\r\nexport SOME_ENV=\"mgmt_network\"\r\n./fnserver\r\n```\r\n #982 fixes this. #984 doc update  No worries, I may re-send some of this as a new PR and re-run/clean them up until they are reliable. (And preferably in agent_test.go if I can.) related #987 (adding nbio resource mgr tests back)  I'm concerned about adding any latency to Prepare/Run. We can make a call on if we should make these logs lossy or not (config opt?), but I think the connect process can start very early in the processing. (We can hoist that to a per hotLauncher() or some conn pool orthogonal to these later if we want, but runHot() seems OK for now.) And we already ignore partial writes/errors in syslog Write. If freezer enabled (it normally should be), then the connection is not used until exec() since we block IO until exec(). So, for common case, we could initiate a background early connect, and in exec() either block the IO (if not lossy) or do non-blocking IO (lose everything until eventually connect succeeds) without delaying processing...  If not lossy, we can perhaps flag syslog Write() failures as error... Just thinking out loud here. :-) I'm OK with moving on with the current code, and if Prepare/Run is impacted we can revisit.  @hibooboo2 CLA bot didn't run here? seems weird (@srpurani works here, so nbd, but still weird) nvm... late to the party, that dude. with no beer!  Here's the thing. We have at least 3 written on Go different projects where we use marshalling/unmarshalling of the protocol's frame:\r\n - CLI\r\n - Fn\r\n - FDK-go\r\n\r\nIn order to keep them consistent, we might need to put protocols into a sub-package (like `fnext`) or sub-project (it's up to us decide hopefully).\r\n rewriting to say same-ish thing, this is a dupe of https://github.com/fnproject/cli/issues/156 btw. \r\n\r\nfn server and CLI (sender) play a different role than the fdk (receiver), for one, i don't think those need to be co-located. importing fn into cli seems like it won't go well, this will be hard to maintain. after we have cloud events i don't think there's really a lot of complications around all our protocol stuff (#957). right now it's really bad since we have 4 protocols basically. i foresee us maybe importing some kind of package like `github.com/fnproject/cloudevent` (or maybe official one some day) but that won't handle the STDIN/STDOUT, it will just have struct definitions, we can pretty easily marshal / unmarshal that struct to/from stdin/stdout. anyway i think the issue is mostly to do #785 (get rid of all formats but cloud event), then all we're left with is the cli and the server are both constructing docker images and there's some duplicate code there. maybe one day we figure out how to extract that, but i'm not sure the tradeoffs are worth it anyway (managing 3rd party dep is no fun). Sorry, you've posted just a minute before i've posted PR for FDK https://github.com/fnproject/fdk-go/pull/24 =/  fn.db and fn.mq are the default options for Fn DB and Fn MQ.\r\n\r\nDatabase state changes each time you call a function.\r\n\r\nSo, you better run Fn on top of the kubernets to use MySQL for DB and Redis for MQ. So, answering your question. If you want to keep you apps/route definitions - you better kelp Fn files or use MySQL and Redis instead.  some yays and some nays. thanks for the edits, there was some discussion on https://github.com/fnproject/fn/pull/957 over the fdk formats and this seems like there's some different ideas here, let's try to get some more opinions on this one, the right direction is unclear.  you'll need to set the wider `HTTP_PROXY` and `HTTPS_PROXY` environment variables, which `fn run|build|deploy` will pick up and send as `--build-cmd` to docker. hope this helps this seems like it partly has to do with the different environments in the `root` user and your `user`, you may want to add your user to the docker group to get this working with your user. the official instructions are https://docs.docker.com/install/linux/linux-postinstall/ if you are on a linux system. additionally, you'll want some NO_PROXY variables. for example, mine are:\r\n\r\n```sh\r\n$ echo $NO_PROXY\r\nlocalhost,127.0.0.0,127.0.0.1,127.0.1.1,local.home,github.com,10.0.2.2,*pool.ntp.org,0.0.0.0\r\n```\r\n\r\n* these aren't guaranteed to work with your proxy, YMMV\r\n\r\non top of that, your HTTPS_PROXY may or may not support HTTPS. at least, the one I'm handcuffed to does not allow https and I have `HTTPS_PROXY=http://my.proxy.com:80` (and it works).\r\n\r\nmaybe one of those will get us over the hump :)  Fn does not support python 2.7 at all (and would not). I recommend to make your function work with python 3.6 and use FDK-python to get proper integration. If like I can guide you through on both: py3 migration and fn integration. First of all, I recommend to go through development docs: https://github.com/fnproject/fn/blob/master/docs/developers in order to get familiar with Fn and how it works along with best practices how to develop function, etc.  ## problem\r\n\r\nAssume you have Fn running over HTTPs with ngrok: `https://0a1a3f0a.ngrok.io`\r\nWhen trying to get Fn API URL using the following code:\r\n```go\r\n\tfctx := fdk.Context(ctx)\r\n\tu, _ := url.Parse(fctx.RequestURL)\r\n\tfnAPIURL := fctx.RequestURL[:len(fctx.RequestURL)-len(u.EscapedPath())]\r\n\tlog.Println(\"Fn API URL: \", fnAPIURL)\r\n```\r\nURL schema turns from HTTPs to HTTP\r\n\r\n## steps to reproduce\r\n\r\n1. Create Go function and add code mentioned above.\r\n2. Call a function using Fn endpoint with HTTPs.\r\n3. Check call logs\r\n  Here be the doc. This tries to make a lot of the API changes we need to make in one fell swoop. Perhaps this is a bad idea, we can likely stage things though to where it's edible, it's nice to have a cohesive plan (if this is such... there was an attempt). There are a number of open questions at the top of the swagger2.yaml file, if you have opinions that is a great place to start after reviewing the doc. additionally, large questions remain around the log/call API, and this is a good chance to make any changes there. This doc also doesn't handle explicitly creating a separate function registry API, we can cross that bridge when we get to it, and just have a uniform function API for now. The doc itself has all the content needed for context, won't add much more here.\r\n\r\nFeedback is more than welcome from anyone (from nits to redesigning entire components), if you would like to work on any specific pieces then let's chat about it. we should maybe break this up into smaller issues to work on, once we're in general agreement, and have more involved discussions over details on those?\r\n\r\nI forgot to validate my swagger file, but I don't think it really holds up the discussion, i was gonna link it to comb through a rendered version here but sorry... i'll try to fix this tomorrow, i'm at the point where i have to add printlns to the validator now, boo. it probably still needs some further massaging, can add along w/ any feedback here. \r\n\r\nrelevant issues (possibly closing): #947 #858 #885 #870 #824 #819 #817 #785 #763 #714 #574 #595 #500 #446 #281 #155 #137 \r\n re: @zootalures thanks, very useful feedback.\r\n\r\n> Would this change benefit from some black-box /narrative use cases that walked through the specific new user features that it enabled? \r\n\r\nyes, good idea, i think we can write up something that briefly summarizes this. mostly, we should focus on end user documentation i hope instead of focusing on the context of the delta as the former will be more valuable long term.\r\n\r\n> Also on the function registry stuff - would be good to have some lucidity by example on the good stuff that this enables (i.e. sharing functions between platforms? function hub?)\r\n\r\npretty much, function registry kind of a non-goal here, i can't honestly say i thought very deeply about how the exact interface should look nor if we're perfectly set up for this even with what we have, but it's something that should be near term possible if we can land some of the stuff proposed here, possibly with some minor tweaks.\r\n\r\n> For queue triggers, can you sketch out how this could/might work with a Kafka/Kinesis queue - how do I authenticate, how to I connect etc?\r\n\r\nadded to doc, it's kinda hand wavy especially wrt auth because i'm not sure it's something we should dictate, but e.g. you would start up your queue processor with a token or permission that allows it to invoke triggers for a given app/namespace/function, the rest we're not dictating anything other than a trigger existing for that trigger type + name and a cloud event containing that info. \r\n\r\n> For namespaces - is the intention to enable real multi-tenancy here How will access control work in that case/ how do I integrate/mix this with an existing access control system.\r\n\r\nwe could try to sketch out an example, yeah the goal is opaquely another level of compartmentalization which vaguely maps onto something that could be used to do multi tenancy. we're more giving people a hammer here than telling them how to hang their pictures. obviously you get some sugar in that all our queries and such internally use namespaces so users wouldn't have to go rewrite all the queries to add their ideas around tenancy via extensions (hopefully?). do we just need to make a note that this could be used for multi-tenancy (i.e. the intent is not clear)?\r\n\r\n> You're specifying components here - trigger manager seems a bit fluffy - could you clarify (e.g. for a kafka queue above) how does this scale up ?\r\n\r\nadded some bits. components are not necessarily separate processes is maybe what's not clear. we would effectively have this in some capacity, we're just giving it a name badge and abstracting it a bit (see commit for details).\r\n\r\n> looking forward it seems odd to decouple the function and trigger resources in the API but then still leave them coupled in func.yaml - if a function is truely an independent thing (just a registered image and some config) could these be separated all the way up the stack?\r\n\r\nwe could do something completely different in the CLI, am open to ideas. decided to roll with trying to re-use func.yaml and make it flexible just to have less commands and files for end users to have to manage. it also makes sense to me to force something like an `app.yaml` to do all your trigger-function mappings in, and leave the `func.yaml` just to have function configuration. or $other_better_ideas\r\n\r\n> Are functions immutable?\r\n\r\neh i mean we're fighting with docker hub on that, i don't think we can say that easily and i'm not sure it's something worth gating on fixing here to e.g. have image checksums in func/trigger definitions. the intent is to enforce function (and image) versioning i think, but it's not necessarily immutability. is this something worth pursuing at this point? this has long been an issue of 'hey i updated my image under 0.0.42 but the server is still running the old 0.0.42', is there an easy win here other than telling users to do versioning? (e.g. we could auto bump every PUT to a function and not allow this kind of behavior at all for a function, but they could pull the rug on the image still)\r\n\r\nthanks again, hopefully that clarifies some stuff.  thanks for opening this. \r\n\r\nit would be nice to avoid having to carry around a flag in each call object if we can manage it (linking this to previous, related issues for $reasons https://github.com/fnproject/fn/issues/726). since we're moving to cloud events, the spec there (i'm risky linking to master, it gets updated often) outlines a base64 example https://github.com/cloudevents/spec/blob/master/json-format.md#32-examples (further: https://github.com/cloudevents/spec/blob/master/json-format.md#23-mapping-object-typed-attributes ) which does not contain a bool in the event and just uses a `contentType` that implies the `data` section is binary (for which I guess the end function would have to determine this?)\r\n\r\nadditionally, they define an http transport spec https://github.com/cloudevents/spec/blob/master/http-transport-binding.md which allows putting all json fields from from the cloud event into headers and letting the data section remain binary (no encoding). while it would not be fun to have to support both of these options, and i'm not perfectly keen on this, it's no less an option for us to use that format to do binary interaction with the fn server as well as the container. and we may have to support that format for fn server, anyway.  ## problem\r\nAccording to our [operation docs](https://github.com/fnproject/fn/blob/master/docs/operating/private_registries.md) and [docker registry auth dock](https://docs.docker.com/engine/reference/commandline/login/#privileged-user-requirement) the only way to make docker client be authorized is to create a config file within the special path (known as `DOCKER_CONFIG`), no matter would that be a pointer to the keychain or explicit user/password definition.\r\n\r\nSo, there is no explanation/doc how to set up the vanilla/upstream Fn how to enable the authorization for the private registries without hacking into the operating system of the Fn docker image (i.e. mounting the volume with docker config or rebuilding the Fn from source with config included).\r\n\r\nThe question appeared on [public slack](https://fnproject.slack.com/archives/C6FL02Q02/p1524639509000229): how to set up the Fn to talk to the registry on GCP.\r\n\r\n## possible way(s) to solve\r\n\r\nThe simplest short-term solution is to write a doc that explains how to \"make-it-work\" on k8ts cluster with an auth-protected registry (i.e. how to create a volume with the config file, how to build Fn from source with docker config).\r\n\r\n## alternative\r\n\r\nwe work towards context management and splitting function from triggers, can't we allow each function to define the registry auth as well just to move away from a need to work with volumes or rebuilding the Fn image.\r\n  @reclaro there's ./images/fn-test-utils already, so I think you can just use that if that's easier. There's some examples on how to use it in runner_tests.go. Makefile already builds/prepares fn-test-utils, so it'll be faster and you don't need to do anything to build/pull it. See:\r\n\r\nhttps://github.com/fnproject/fn/tree/master/images/fn-test-utils\r\n  seems like build is broked `FAIL\tgithub.com/fnproject/fn/api/agent/protocol` in CI, didn't see the actual error but must be something. \r\n\r\nLGTM w/ some tidying. mostly glossing over the fn-generates-the-cloud-event stuff since that's gonna get taken out to pasture. would be nice to clean up the printlns that are commented/not and the trace names need a quick sed, the rest are probably mostly me trying to drink enough coffee before noon. i think we can punt on implementing the HTTP binary spec, it's WIP anyway, we can wait for it to finalize. but i do think we should use the recommended header\r\n\r\nedit: spec knowledge updated > Ehh, not sure why this build is failing:\r\n\r\nrebase on master? #949 locked mysql to mysql 5.x (:latest is now 8) this LGTM potentially if we are answering https://github.com/fnproject/fn/pull/948#discussion_r182856958 -- we should use the standard header to ship in cloud events, not our own, if this was defined in the spec. that's my interpretation of it, could be off base.\r\n\r\nedit: specifically, this line:\r\n\r\n> The receiver of the event can distinguish between the two modes by inspecting the Content-Type header value. If the value is prefixed with the CloudEvents media type application/cloudevents, indicating the use of a known event format, the receiver uses structured mode, otherwise it defaults to binary mode. > All that stuff looks so much like all the crap we've been dealing with using different formats. The part I find strange though is that if you have to set all the headers anyways, why not just pass the event in the JSON event format? \r\n\r\nI'd guess so that you don't have to eat base64 decode time + byte bloat. I agree, it smells exactly like the last year of us fighting all the headers and such, not sure how best to give them the last year of dealing with that as contextual feedback before 1.0 lands. For us, it might mean we would need to handle both structured and binary in front end + container i/o + all fdks presumably -- yikes (i guess this is mitigated to front end if we translate everything to structured there, but it would mean base64 or similar). I'm assuming they'll add a protobuf transport spec, eventually, as well, so we will soon enough likely get into this, but I guess we can do all the translation to structured json format from the ingestion point and only worry about that format for functions (granted, base64 thing is still a nit). anyway... yea, would be nice to contribute to the discussion since this has ailed us.   ## problem\r\nAt this moment there are only a few available parameters we can use to filter calls:\r\n - app\r\n - path\r\n - timestamp (from-, to-time)\r\n\r\nI can see that there's a need to get more filtering options like:\r\n - status\r\n - error (complete match or partial)\r\n\r\nThere might me methods available by underlying call store (sql, s3), however, may not be available.\r\n\r\n## solution\r\nTBD  yep, we are not implementing async for hybrid for the immediate future (and this may go away altogether in its current capacity, but tbd). sorry that we didn't clearly document this. we're working to make a good sync experience at the moment. thanks for trying this out!  the second one is a GET request it looks from the response: 'loaded route' is from GET if you want to create against the url that contains the route name, you may use `PUT` instead of `POST` for `POST` you would need to add a field for `\"path\":\"hello-async\"` and post against `/v2/apps/myapp/routes`\r\n\r\ngoing to close, re-open if this is broken (we have tests, pretty sure we're ok on this one). thanks for giving this a whirl yep, try using PUT, e.g.:\r\n\r\n```\r\ncurl -H \"Content-Type: application/json\" -X PUT -d '{\r\n\"route\": {\r\n\"image\":\"xxx/hello-go:0.0.24\",\r\n\"memory\": 100,\r\n\"cpus\": \"0.2\",\r\n\"type\": \"async\"\r\n}\r\n}' http://xxx.xxx.xxx.xxx:8080/v1/apps/myapp/routes/hello-async\r\n``` will do! would you mind pasting a link to the examples you were following? want to make sure we are fixing the right ones, they're a bit spread out atm. thanks!  @gviedma or @hhexo merge ok? (Tolga is locked out of GH and don't wanna stick him with rebase)  build is broken on master from docker 18.04 to do releases (branch builds still work)\r\n\r\n```\r\n#!/bin/bash -eo pipefail\r\nif [[ \"${CIRCLE_BRANCH}\" == \"master\" && -z \"${CIRCLE_PR_REPONAME}\" ]]; then\r\n  docker login -u $DOCKER_USER -p $DOCKER_PASS\r\n  git config --global user.email \"ci@fnproject.com\"\r\n  git config --global user.name \"CI\"\r\n  git branch --set-upstream-to=origin/${CIRCLE_BRANCH} ${CIRCLE_BRANCH}\r\n  if [[ -n \"$DIND_NEEDED\" ]]; then\r\n    make release-dind\r\n  fi\r\n  if [[ -n \"$FN_NEEDED\" ]]; then\r\n    make release-fnserver\r\n  fi\r\nfi\r\n\r\nWARNING! Using --password via the CLI is insecure. Use --password-stdin.\r\nWARNING! Your password will be stored unencrypted in /home/circleci/.docker/config.json.\r\nConfigure a credential helper to remove this warning. See\r\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\r\n\r\nAre you sure you want to proceed? [y/N] User refused unencrypted credentials storage.\r\nExited with code 1\r\n```\r\n\r\nthis might be quick and dirty fix. we should probably upgrade to an encrypted password i guess.  #841 #989 #1005 addresses this.  Yes, you can, there are two ways to do so. You can write your own dockerfile or you can specify another build image in func.yaml (see `build_image`) @c094728 you can get the call ID in HTTP response headers if you calling the sync function, look for `Fn_call_id`, if you're using an async function you'd get the response in the following format:\r\n```json\r\n{\"call_id\":\"....\"}\r\n``` @c094728 `default` format means that whatever goes to STDOUT you'll get in the response body. However, `default` format is not a resource efficient, starts a container per request. I recommend sticking with JSON or HTTP format. There has to an example how to make your function written in Node work with those formats. Despite that, i strongly recommend to use Node FDK - https://github.com/fnproject/fdk-node for any node function. that's right because you can't use STDOUT for writing your logs, only STDERR, whatever you'd write to the STOUT while using JSON/HTTP protocol will break them apart.\r\n If your function is sync - 120 seconds is the max time you can get from Fn.\r\n\r\n> Can functions return a response and continue to run asynchronously?\r\n\r\nNo, once the function returns the response it freezes until next event.\r\n\r\n> Does the timeout kill the running function?\r\n\r\nIt doesn't kill but pauses the container, so your function freezes.\r\n that is not guaranteed, it is not recommended to start background or threaded process without any proper synchronisation just before sending the response.\r\n\r\nYour function will freeze only in case if you've sent the response, not before that. If your function times out - it dies.\r\n if you change your function to be async it will run in detached mode, you would not get the response from that, however, the timeout will increase significantly up to 3600 seconds. At this particular moment, no. Only when you function complete it\u2019s execution. As long as you do correct IO pipe binding and reading from exec your program will remain safe and would not break protocol framing.  > If I pause for a while and reload the page, another instance shows up in docker ps\r\n\r\nThis is how hot format works in Fn, function dies as soon as it will reach out the idle timeout (one of the key concepts of the serverless - never pay for idle).\r\n\r\n> I had to stringify the results for the hello world example or it just displays\r\n\r\nYou should do that by yourself because FDK-node doesn't know how to serialize your object.\r\n If you want to extend the idle timeout take a look at `fn routs update -h`. However, AFAIK, you can't extend the idle timeout to more than 1 hour.\r\n\r\nThe way we did the hot function Fn will keep spinning up the functions within a single machine as long as there is a workload and functions got delayed for 200ms. So, if you submitted a lot of requests you would likely get more then 1 container. Basically, as Fn user, you wouldn't know about the number of containers that are up and processing your functions. And there is no way to change the behaviour.\r\n\r\nBut, there are two ways you can go: resource efficient, and resource-inefficient way. Hot functions are resource-efficient compute units (if you gonna execute 10K requests you'd likely get less then 1K containers, but it depends), but cold functions will create a new container each time you submit the request (if you gonna execute 10K requests you will get 10K containers).\r\n So, here's what Fn does: you call the function, Fn starts the container, your function processes the request, sends the response, Fn pauses the container for the time of the idle timeout (which is defaulted to 30 seconds), once idle timeout appeared - container dies.\r\n\r\nWhy are containers not going away? Because the function you've created from the `fn init` uses hot format by default, not the cold one.\r\n\r\n> They won't show up forever in the paused state will they?\r\n\r\nNo, once the idle timeout happens, it's gone. > How do I change it to be a cold function?\r\nset the format to `default` (use `fn routes update` cmd).\r\n\r\nFn will reuse the same container unless the request got delayed, if that delayed it will start a new container.\r\n Can you elaborate what you mean by saying \"if I pause a while and reload\"?  thanks!  closes #482\r\n\r\nthe basic motivation is that logs and calls will be stored with a very high\r\nwrite rate, while apps and routes will be relatively infrequently updated; it\r\nfollows that we should likely split up their storage location, to back them\r\nwith appropriate storage facilities. s3 is a good candidate for ingesting\r\nhigher write rate data than a sql database, and will make it easier to manage\r\nthat data set. can read #482 for more detailed justification.\r\n\r\nsummary:\r\n\r\n* calls api moved from datastore to logstore\r\n* logstore used in front-end to serve calls endpoints\r\n* agent now throws calls into logstore instead of datastore\r\n* s3 implementation of calls api for logstore\r\n* s3 logs key changed (nobody using / nbd?)\r\n* removed UpdateCall api (not in use)\r\n* moved call tests from datastore to logstore tests\r\n* mock logstore now tested (prev. sqlite3 only)\r\n* logstore tests run against every datastore (mysql, pg; prev. only sqlite3)\r\n* simplify NewMock in tests\r\n\r\ncommentary:\r\n\r\nbrunt of the work is implementing the listing of calls in GetCalls for the s3\r\nlogstore implementation. the GetCalls API requires returning items in the\r\nnewest to oldest order, and the s3 api lists items in lexicographic order.\r\nAn easy thing to do here seemed to be to reverse the\r\nencoding of our id format to return a lexicographically descending order,\r\nsince ids are time based, reasonably encoded to be lexicographically\r\nsortable, and de-duped (unlike created_at). This seems to work pretty well,\r\nit's not perfect around the boundaries of to_time and from_time and a tiny\r\namount of results may be omitted, but to me this doesn't seem like a deal\r\nbreaker to get 6999 results instead of 7000 when trying to get calls between\r\n3:00pm and 4:00pm Monday 3 weeks ago. Of course, without to_time and\r\nfrom_time, there are no issues in listing results. We could use created at and\r\nencode it, but it would be an additional marker for point lookup (GetCall)\r\nsince we would have to search for a created_at stamp, search for ids around\r\nthat until we find the matching one, just to do a point lookup. So, the\r\ntradeoff here seems worth it. There is additional optimization around to_time\r\nto seek over newer results (since we have descending order).\r\n\r\nThe other complication in GetCalls is returning a list of calls for a given\r\npath. Since the keys to do point lookups are only app_id + call_id, and we\r\nneed listing across an app as well, this leads us to the 'marker' collection\r\nwhich is sorted by app_id + path + call_id, to allow quick listing by path.\r\nAll in all, it should be pretty straightforward to follow the implementation\r\nand I tried to be lavish with the comments, please let me know if anything\r\nneeds further clarification in the code.\r\n\r\nThe implementation itself has some glaring inefficiencies, but they're\r\nrelatively minute: json encoding is kinda lazy, but workable; s3 doesn't offer\r\nbatch retrieval, so we point look up each call one by one in get call; not\r\nre-using buffers -- but the seeking around the keys should all be relatively\r\nfast, not too worried about performance really and this isn't a hot path for\r\nreads (need to make a cut point and turn this in!).\r\n\r\nInterestingly, in testing, minio performs significantly worse than pg for\r\nstoring both logs and calls (or just logs, I tested that too). minio seems to\r\nhave really high cpu consumption, but in any event, we won't be using minio,\r\nwe'll be using a cloud object store that implements the s3 api. Anyway, mostly\r\na knock on using minio for high performance, not really anything to do with\r\nthis, just thought it was interesting.\r\n\r\nI think it's safe to remove UpdateCall, admittedly this made implementing the\r\ns3 api a lot easier. This operation may also be something we never need, it\r\nwas unused at present and was only in the cards for a previous hybrid\r\nimplementation, which we've now abandoned. If we need, we can always resurrect\r\nfrom git.\r\n\r\nAlso not worried about changing the log key, we need to put a prefix on this\r\nthing anyway, but I don't think anybody is using this anyway. in any event, it\r\nsimply means old logs won't show up through the API, but aside from nobody\r\nusing this yet, that doesn't seem a big deal breaker really -- new logs will\r\nappear fine.\r\n\r\nfuture:\r\n\r\nTODO make logstore implementation optional for datastore, check in front-end\r\nat runtime and offer a nil logstore that errors appropriately\r\n\r\nTODO low hanging fruit optimizations of json encoding, re-using buffers for\r\ndownload, get multiple calls at a time, id reverse encoding could be optimized\r\nlike normal encoding to not be n^2\r\n\r\nTODO api for range removal of logs and calls > I think s3 keys have max of 1024 bytes length. Just calling it out here... I think we are OK, if looking at sql.go, 256 bytes of app_id/path even with base64 overhead..\r\n\r\ngood catch, i'll document this next to it. i think we're ok too, but wasn't aware of that limitation. updated, thanks @skinowski ! > One question, since we moved to from SQL to S3 for logs, what about migrations for further changes to s3 models (i assume they would happen soon enough)?\r\n\r\nno good story here, json is quite a bit more flexible than sql schemas at least in this regard. thanks!  so I think we can close this one now with uds stuff  Since cloud events is slated to replace all this, should we stop investing in json?  This PR modifies the `agent.DataAccess` interface to provide full access to original `http.Request` when resolving apps and routes:\r\n```\r\nGetApp(ctx context.Context, appName string) (*models.App, error)\r\nGetRoute(ctx context.Context, appName string, routePath string) (*models.Route, error)\r\n```\r\n\r\nThis change is required in multi-tenant scenarios where it is not sufficient to know the app and route names to resolve the respective models. By providing access to the underlying `http.Request`, apps/routes can be disambiguated based on the contents of the HTTP request, including HTTP headers, Host or URL path.  Sometimes extensions need access to the full app and route models belonging to a request. We don't want to have to resolve these multiple times via the agent.DataAccess interface, since that could result in inconsistencies due to cache evictions etc. Instead, this PR adds the app and route models to the http.Request context at the place where they are resolved.  Call status assigning criteria\r\n=====================\r\n\r\n## Problem\r\nAt this moment, only if container crushes Fn marks the call as failed (status: `error`). So, developers have zero control over the call status.\r\nShouldn\u2019t protocol be capable of managing the call status based on the function\u2019s response?\r\nThe call status at this moment means that Fn was capable to ship the request and get any response from the function, so, the call status implies to request shipping process between the Fn and the function, but not the actual function call status.\r\n\r\n## Example\r\nFor instance, if functions return HTTP 500 (this will change eventually, I suppose) a call would be marked as successful, but from the caller point of view, it doesn\u2019t it.\r\n  closing as 'expectations too lofty' with the +2    We are missing a mechanism for extensions to perform cleanup/shutdown operations as part of the server coordinated shutdown. The server should go through all plugins and shut them down prior to shutting itself down. In the meantime, it should not accept new requests. I propose extending the Extension interface with a new method _Shutdown_ as follows:\r\n\r\n```\r\ntype Extension interface {\r\n\tName() string\r\n\tSetup(s ExtServer) error\r\n        // orderly shutdown of plugins\r\n        Shutdown(s ExtServer) error\r\n}\r\n```  gonna merge this since your github has been compromised :)\r\n\r\nif i regret this, i only have myself to blame!  closing this one, feel free to re-open    their api spec for events looks to implement [\"Cloud Events\"](https://github.com/cloudevents/spec/blob/master/spec.md) and their triggers are similar to openwhisk. thinking that's the direction we should go, same concepts as openwhisk but slightly different implementation (they have runtimes, some other stuff around triggers is weird). > Triggers replace our current routes model. Each trigger associates itself with a single function. Support http out of the box, new types of triggers can be added with extensions.\r\n\r\nit seems common to have a mapping of this where a trigger can invoke multiple functions (openwhisk, kubeless, at least). triggers seem to be simply this mapping in most interpretations, not specifying some type of 'trigger' that they are, where the definition of 'trigger' being used would be more of a 'stream' that invokes 'triggers' which simply map to functions (this allows multiple different triggers to invoke different combinations of functions). obviously, we can call things whatever we want, but we need to define terms and such. openwhisk docs on triggers are https://console.bluemix.net/docs/openwhisk/openwhisk_triggers_rules.html#openwhisk_triggers and this model seems useful. these are _not_ the actual thing that invokes triggers (e.g. an http router), as implied.\r\n\r\ncan we skip version for 1.0? let's get a reasonable data model first.\r\n\r\nmoving routes API to the router? (which we can embed)\r\n\r\nconcept of app or grouping of functions/triggers makes sense, but still seems kind of hazy. proposed has triggers that have app, to bundle together functions at the trigger level (and implies functions don't exist on app?). at this point, app is basically a trigger specific grouping and kind of goes away in fn. not sure what we want, clarifying. > What do you mean this goes away in Fn?\r\n\r\nsimple question is: are apps a grouping of triggers, or a grouping of functions? or both?* @treeder thanks for the update. However, i'd like to change what you've proposed here.\r\nI'm totally good with a function model (and its version), but i do see triggers as standalone objects (users should be capable to list triggers through the Fn API), so the `Trigger` model that you've posted does seem to be a trigger-to-function mapping (association between a function and the trigger). Moreover, one function can have more than one trigger at the same time.\r\n\r\nAlso, isn't annotations are for the metadata? Why should the trigger have an annotation and trigger-config at the same time? If we're talking about routes thing, so that should go to the annotation mapping.\r\n\r\n@rdallman answering your question, an application (in the context of its current definition) is a group of functions (if each function has a trigger then we'd consider the application as a set of trigger-to-function mappings because of the functions without a trigger is useless).\r\n i'm finding the wording of triggers confusing, as we're using it (sorry, my bad). we have triggers that are themselves a mapping to a function to invoke (with an event, presumably). we're also using triggers to define a 'trigger' (http/timer/et al) that invokes a 'trigger' (our mapping to a function). maybe this is pedantic, or maybe i'm misunderstanding, could we define a vocabulary here that doesn't have homonym issues? my brain hurts. i also went to public school. sorry. one thing, i don't think we should have to tie triggers to trigger types. to me, i think that this is part of the [event](https://github.com/cloudevents/spec/blob/master/spec.md) and when e.g. an http router invokes a trigger, in the event it puts 'event-type: my-http-router'. this makes triggers more flexible, at a minimum so much as a user won't have to define multiple identical triggers for each uh, event source (or trigger type, as you say).  ## Use-Case\r\n\r\nIn order to support multitenancy, operators should be able to define independent pools of compute resources available to functions in the platform. By associating a function with a particular _load balancing group_, its invocations are guaranteed to execute on the compute resources assigned to that specific group. A pluggable _node pool manager_ abstraction can provide a mechanism to scale compute resources dynamically, based on capacity requirements advertised by the load-balancing layer. Together with load balancer groups, it allows independent capacity and scaling policies for different sets of users or tenants to be implemented.\r\n\r\n## Implementation\r\n\r\nThis adds two implementations of the Fn Agent: one, a \"pure runner\" that runs only what it is asked to and which responds to GRPC; secondly, an implementation that delegates to an external set of Runners to actually place function invocations. The runner is intended to receive its workload through a push-only mechanism.\r\n\r\nUnlike the current FNLB implementation, calls are queued on the \"LB\" side as late as possible; the idea being that a runner should accept a call if it has the capacity to handle the request immediately to hand. In the long-run, the objective is that this LB implementation will replace the existing FNLB.\r\n\r\n(Note: that in itself does not preclude the runner also taking on an async workload.)\r\n\r\nThe lb_agent introduces some new abstractions: in particular, the NodePool, which plays an analogous role to the DBStore in FNLB; the Runner, which handles the go/no-go and interaction between the LB and the pure_runner; and the Placer, which encapsulates the placement logic.\r\n\r\nAdditionally, the lb_agent keeps track of the capacity requirements necessary to satisfy the outstanding requests it has. These can, in principle, be used to drive runner scaling decisions. (There is ongoing work in this area.)  *) fn-test-utils covers multi-log case, with sleep in between.\r\n*) added trailer data to fn-test-utils (going to be useful for large response tests)\r\n*) added logging to panic/error cases in fn-test-utils. Fixes: #796  Another reason why I really want to remove the cold-impl... Hot has hostWriter in stderr, but cold doesn't.. The test case only tests cold... (meaning old one...) Raising it to 3 secs triggered it now, but only for hot, cold passed. Arrghh. I'll merge this and we can work on the runner test instead of api tests. Nevermind, it's off/on, seems random... I'll take a closer look tomorrow at this...  Cold requests/containers now become execute-once\r\nhot containers. There's no visible change to users\r\nand/or operators. @rdallman  plumbed up the slot/orig contexts now. It looks a bit messy in there though. Friendly ping/reminder. :-)  Seems like 3 second sleep makes it easier to trigger this.. New tests in #801 with 1 sec sleep pass. Note: #801 does not fix the issue.  Dashboards could also be referenced from the tutorials. We might want to keep them here and update them in fn repo since they are tied to stats. And I want to have much fancier dashboards going forward. But either way is fine.  we should likely document community supported versions of the fdk in docs somewhere, while we're here? cc @michael-w-williams - thanks for the great work on this. I think I was aiming a little lower, with a link to https://github.com/Daniel15/fdk-dotnet somewhere around [here](https://github.com/fnproject/docs/blob/master/fn/develop/fdks.md#officially-supported-fdks) saying 'community supported FDK' or some such, to make these kinds of things easier to find for users. open question what to do about CLI runtime, I think tutorial is perhaps optional for non officially supported fdks -- though, it would be great, and a blog + tutorial would be over the moon sweet, thanks!  @rdallman we can merge this, I'll rework the I/O limit changes on top of this. I need to work/massage those changes anyway. hhmm, why? did you mean we missed that? But resp writer thing in call/runner gets all protocols no? It's a good one too. :-)  *) Limit response http body or json response size to FN_MAX_RESPONSE_SIZE (default unlimited)\r\n*) If limits are exceeded 502 is returned with 'body too large' in the error message Fixes #773   IMHO, we should decouple hot/cold from formats. They should be orthogonal.\r\n\r\nCan we get away with x/y/z formats using always hot where if users really want cold, then they specify some flag or max_requests = 1 per container? Somewhat related with this subject... But regarding today's implementation where we have cold/hot container distinction, I have this POC to force both hot/cold types into a hot container (but run-once for cold case). Does this look a bit naive or would we consider doing something like this below? If yes, then we can remove a lot of code. Forcing cold to execute as hot incurs somewhat more processing and perhaps slightly slower, but I doubt 'cold' cares about this latency.\r\n\r\nhttps://github.com/skinowski/fn/commit/34980732ea9c1185888d48f7c340dd707ed55f69\r\n  :clap:  merged this (since I really needed it)  @prologic BoltDB tries to open ./data/fn.mq file under your current directory. (eg. /home/prologic) So I suspect it's unable to read this file, could be a file/dir permission issue. Also what is your os/platform? @xolve yes this has been released, hopefully it fixes this. thanks for the detailed bug report, we will try to test with docker machine, the boltdb error there isn't very helpful and we should try to nail that one down.   Decommission /stats related code. This could be a bit early and requires latest fn-ui, but /stats is no longer used in UI.  So, with this, we are always buffering. (no streaming mode), which is fine in my opinion. Only to-do here is to set a system wide limit and if resp exceeds, cut off response, get rid of buffered data (clean pipes), then return an error (eg. data too large), right?  Simulate partial output or invalid json/html in fn-test-utils.  1) oom test\r\n2) invalid http resp code test\r\n3) check for error string contents in various error cases  The version determination code seems functional, which os/platform are you on?\r\n\r\nIf you manually execute the following, do you see any output?\r\n\r\n```\r\ncurl --silent https://api.github.com/repos/fnproject/cli/releases/latest\r\n```\r\n\r\n  Why not reject the requests if they exceed these limits? The execution is misleading to users. We execute with clamped limits. We should not execute at all and return 400 with proper error message.\r\n\r\nAlso, the clamped values completely bypass resource manager. Say max mem configured is 2GB, and we execute a function req with 4GB. With this PR, resource mgr thinks it is running a 4GB job where really container is running with 2GB... does storage option \"size\" produce error when running on an unsupported combo: eg. ext4 + overlay ? I know we know this, but still noting it here, Volume definitions in DockerFile, will bypass the file system limit. I'm specifically thinking about \"local\" anon volumes (which get removed) when container is removed. but let me check... @rdallman @hhexo Just double checked the volume issue, Volume definitions in DockerFile do not cause mounts at run time.  @hhexo if we assume heterogeneous runners, then we can probably just refuse the call at submit . But if we decide on executing these request with clamped values, then please also pass in clamped cpu & mem values to a.resources.GetResourceToken() to the resource mgr (agent.go), which should keep things in sync. If a user is asking a specific cpu & mem & fs_size, clamping these down may cause errors/issues during the execution and could be confusing to troubleshoot. (eg. agent.runHot() logs actual requested cpu & mem. How would a user or operator find out to see if a request was clamped down?)\r\n\r\nOn the other hand, the resource manager behaves much differently. If a call comes in that requests for cpu or mem that is higher than total cpu or mem on the server, we reject the call immediately as \"a request that can never be executed\" And all other requests with cpu & mem requirements has to wait until these resources are available or they do get a 503. If we can't honor user contract for cpu & mem requested, we don't execute them.\r\n\r\nOur approach could be OK here, but I'm just curious why we aren't just refusing these calls that are over limits. It's also much simpler than surgically injecting clamping code in various parts of the code.\r\n  1) limit kernel memory which was previously unlimited, using\r\n   same limits as user memory for a unified approach.\r\n2) disable swap memory for containers\r\n @rdallman  According to kernel docs, kernel usage is reported under user accounting (but only when kernel limits are enabled), so this means, setting both to the same limit is supposed to clamp *all* usage to 128MB following your example.  Also, I'm seeing 502 from fn server for responses like this. Somewhere we must be replacing 500 with 502.\r\n\r\nOK, I was looking at a different code path, sorry... (docker.go replaces bad exit code with 502.) I'm working on fn-test-utils to do stuff like this.. PR coming soon. For now, you can trigger malformed http via fn-test-utils request:\r\n\r\n```\r\n{\r\n        \"responseCode\": -1,\r\n        \"echoContent\": \"hello\",\r\n        \"isDebug\": true\r\n}\r\n``` I've got a #755 PR that has an invalid http case for this change.  Closes #662.\r\n\r\n_This change will require FDKs which handle the `json` function format to be updated._\r\n\r\nThis change moves some Fn-specific fields around in the JSON protocol structure, thus improving the handling of Fn-specific fields that would otherwise end up in FN-prefixed headers. The rationale for this is in #662.\r\n\r\nFn-specific stuff (Call ID, request url, etc) that used to be stored in the headers of the `models.Call` is now instead added by the protocol dispatchers at the right time, so that the model reflects what the user has originally provided. The HTTP protocol dispatcher still creates Fn-prefixed headers, because that's the only way it can pass information to the function, but the JSON protocol can provide the information directly in JSON fields. I have just noticed that the `default` format is now missing call ID etc, because it's not going through the dispatchers and it was relying on the Fn-specific headers being set in the model. I'll fix that. As for the others, there's no change in HTTP and the advertised changes in JSON:\r\n\r\n```\r\nHTTP\r\n====\r\n\r\nBEFORE:\r\n\r\nRequest foo: 1\r\nReq: POST hello\r\nHeaders:\r\nkey:'Content-Type'  val:[application/x-www-form-urlencoded]\r\nkey:'Fn_call_id'  val:[01C53ZD26Q47WG600000000000]\r\nkey:'Content-Length'  val:[4]\r\nkey:'Accept'  val:[*/*]\r\nkey:'Fn_request_url'  val:[http://localhost:8080/r/myapp/fndump]\r\nkey:'User-Agent'  val:[curl/7.54.0]\r\nkey:'Fn_deadline'  val:[2018-01-30T16:47:04.711Z]\r\nkey:'Fn_method'  val:[POST]\r\nEnv:\r\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r\nHOSTNAME=ac7d5a564da1\r\nFN_PATH=/fndump\r\nFN_FORMAT=http\r\nFN_APP_NAME=myapp\r\nFN_MEMORY=128\r\nFN_TYPE=sync\r\nHOME=/root\r\nBody:\r\nblah\r\n\r\nAFTER:\r\n\r\nRequest foo: 1\r\nReq: POST hello\r\nHeaders:\r\nkey:'Fn_call_id'  val:[01C53ZNTC0E7WG600000000000]\r\nkey:'Fn_deadline'  val:[2018-01-30T16:51:51.600Z]\r\nkey:'Fn_method'  val:[POST]\r\nkey:'Content-Type'  val:[application/x-www-form-urlencoded]\r\nkey:'User-Agent'  val:[curl/7.54.0]\r\nkey:'Content-Length'  val:[4]\r\nkey:'Accept'  val:[*/*]\r\nkey:'Fn_request_url'  val:[http://localhost:8080/r/myapp/fndump]\r\nEnv:\r\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r\nHOSTNAME=ddomizio-Mac\r\nFN_APP_NAME=myapp\r\nFN_PATH=/fndump\r\nFN_MEMORY=128\r\nFN_FORMAT=http\r\nFN_TYPE=sync\r\nHOME=/root\r\nBody:\r\nblah\r\n\r\n\r\nJSON\r\n====\r\n\r\nBEFORE:\r\n\r\n{\r\n\"call_id\":\"01C53ZF8XJ47WGA00000000000\"\r\n,\"content_type\":\"application/x-www-form-urlencoded\"\r\n,\"body\":\"blah\"\r\n,\"protocol\":{\"type\":\"sync\"\r\n,\"request_url\":\"http://localhost:8080/r/myapp/fndump\"\r\n,\"headers\":{\"Accept\":[\"*/*\"],\"Content-Length\":[\"4\"],\"Content-Type\":[\"application/x-www-form-urlencoded\"],\"Fn_call_id\":[\"01C53ZF8XJ47WGA00000000000\"],\"Fn_deadline\":[\"2018-01-30T16:48:17.122Z\"],\"Fn_method\":[\"POST\"],\"Fn_request_url\":[\"http://localhost:8080/r/myapp/fndump\"],\"User-Agent\":[\"curl/7.54.0\"]}\r\n}\r\n}\r\n\r\nAFTER:\r\n\r\n{\r\n\"call_id\":\"01C53ZQ9DTE7WGA00000000000\"\r\n,\"content_type\":\"application/x-www-form-urlencoded\"\r\n,\"type\":\"sync\"\r\n,\"deadline\":\"2018-01-30T16:52:39.786Z\"\r\n,\"body\":\"blah\"\r\n,\"protocol\":{\"type\":\"http\"\r\n,\"method\":\"POST\"\r\n,\"request_url\":\"http://localhost:8080/r/myapp/fndump\"\r\n,\"headers\":{\"Accept\":[\"*/*\"],\"Content-Length\":[\"4\"],\"Content-Type\":[\"application/x-www-form-urlencoded\"],\"User-Agent\":[\"curl/7.54.0\"]}\r\n}\r\n}\r\n``` I fixed the `default` protocol too, but there is a change there: the deadline used to be in `FN_HEADER_Fn_deadline`, whereas now it is in the `FN_DEADLINE` env var:\r\n\r\n```\r\nDEFAULT\r\n=======\r\n\r\nBEFORE:\r\n\r\nEnv: foo\r\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r\nHOSTNAME=ac7d5a564da1\r\nFN_TYPE=sync\r\nFN_HEADER_Fn_deadline=2018-01-30T16:45:14.619Z\r\nFN_HEADER_Accept=*/*\r\nFN_PATH=/fndump\r\nFN_APP_NAME=myapp\r\nFN_MEMORY=128\r\nFN_CALL_ID=01C53Z9PPB47WG200000000000\r\nFN_METHOD=POST\r\nFN_HEADER_User-Agent=curl/7.54.0\r\nFN_HEADER_Content-Length=4\r\nFN_HEADER_Content-Type=application/x-www-form-urlencoded\r\nFN_FORMAT=default\r\nFN_REQUEST_URL=http://localhost:8080/r/myapp/fndump\r\nHOME=/root\r\nBody\r\nblah\r\n\r\nAFTER:\r\n\r\nEnv: foo\r\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r\nHOSTNAME=ddomizio-Mac\r\nFN_PATH=/fndump\r\nFN_DEADLINE=2018-01-30T17:28:21.772Z\r\nFN_HEADER_Content-Length=4\r\nFN_FORMAT=default\r\nFN_APP_NAME=myapp\r\nFN_MEMORY=128\r\nFN_TYPE=sync\r\nFN_METHOD=POST\r\nFN_REQUEST_URL=http://localhost:8080/r/myapp/fndump\r\nFN_CALL_ID=01C541RN6WE7WG200000000000\r\nFN_HEADER_User-Agent=curl/7.54.0\r\nFN_HEADER_Accept=*/*\r\nFN_HEADER_Content-Type=application/x-www-form-urlencoded\r\nHOME=/root\r\nBody\r\nblah\r\n```  At the moment, the function timeout is used to determine when a function should be stopped if it overruns. My understanding is that the semantics work this way:\r\n\r\n- For sync, the clock starts ticking when we receive the request\r\n- For async, the clock starts ticking when we dequeue the call to run\r\n\r\nThe clock is therefore ticking when all the \"start\" operations are performed: find a slot (which can take a long time if the container image has to be downloaded and started) and update the database to set the call as \"running\".\r\n\r\nThe function developer has no control on how long Fn takes to do these operations. Therefore, they have to allow some \"wriggle room\" in their function timeout. Will an additional second be enough? Two? Five?\r\n\r\nIf the function developer hasn't allowed for enough wriggle room, the function user will occasionally see those nasty 503 \"server too busy\" errors which can currently happen because the deadline is exceeded before Fn has even managed to find a slot to run the function.\r\n\r\nI personally think the clock should start ticking at least after a slot is found, i.e. the container is started. This way the meaning of the function timeout set by the developer is clear: my _code_ runs for at most X seconds, regardless of how long Fn takes. Another idea is to perhaps make this second timeout as a system wide config, eg. x minutes, where\r\nwe can queue, wait for docker pull, etc. up to x minutes, but still give the function the timeout\r\nspecified in the route config. maybe we can come up with a scheme like;\r\n\r\nx = timeout for route (configured by users)\r\ny = fn server system side queue/pull timeout (eg. 1 min)\r\nz = fnlb timeout (eg. x + y + 10 secs)\r\nr = fnlb max retries (eg. 3)\r\n\r\n1) fnlb with a retry max setting (r) (eg. try 3 times) which means try next fn server in the ring.\r\n2) fnlb with a sentinel max timeout (z) per request, to catch dead/hung conns.\r\n3) each fn server with system wide timeout (y) for queue/pull: eg. 1 minute\r\n4) customers always get the \"timeout\" (x) they configured inside their containers\r\n\r\nWith this, it would mean fnlb can retry and spend up to (z * r) minutes, but passively based on fn server responses. Only if fn responds with 503 (or tcp connect failure), then fnlb can retry next, otherwise we risk not being idempotent. And going forward, we can try to make fn server smarter and fail it faster with 503 to let fnlb try next quicker.\r\n\r\nFor async, we can dequeue and use perhaps the same y timeout for queue/pull. And if it times out, we\r\nretry (or not commit to allow other fn nodes to pick) Or perhaps, we dequeue, then submit it through frontdoor as sync to decrease error rates and let fnlb work it's retry logic on the fleet.\r\n\r\nfnlb can auto configure z and/or r based on /version if we add these in /version output if keeping fnlb and fn server settings is a problem. I'd like to move forward with this with the following proposal:\r\n\r\n1) redefine existing timeout as 'approximate amount of time a function gets in a container'\r\n2) introduce a per-route schedulerTimeout as the amount of time scheduler (LB or agent) can spend\r\nto wait for resources to place/retry a call.\r\n\r\nschedulerTimeout if not specified by the customer can default to either:\r\n\r\na) %50 of timeout\r\nb) minimum of (10 secs, timeout)\r\n\r\nwhere we'd cap max schedulerTimeout based on a system wide setting (eg. 300 secs) if an env var is configured.\r\n\r\nIn this model, customers will get somewhat predictable timeout in their functions. And they should\r\nexpect front-door http client total wait time of \"schedulerTimeout + timeout\". cc @mantree  cc @kmjohansen  After offline discussions today, we are proposing the following:\r\n\r\nRetain & keep existing per-route setting 'timeout' as is, however it's definition changes to \"maximum amount of time a function may execute in a container\".\r\n\r\nTotal request wait time is expected to be implicitly handled by http-client. We will let http-client\r\nwait as long as it can tolerate(*).\r\n\r\nIn other words, we bound the execution time inside the container using the existing 'timeout'\r\nparameter, but let the http-client wait for scheduling delays plus execution. Scheduling can be\r\ndelayed due to LB retries, docker-pull, docker-start, runner/agent slot wait, waiting for cpu & memory,\r\netc.\r\n\r\n(*) Maximum time for the client to wait will/should be imposed by LB or other API gateway\r\nproduction service settings. (eg. LB http.server imposed timeouts.) PR active: #1021  Closing this due to #1021   @zootalures There's no change in hot container semantics. The port discussed in this PR (please correct me on this) is not a port that the clients actually talk to, but a (aka internal) port that fn server itself talks to.  #771 related if running with dind.  ping @rushins , closing this, please re-open if you see any more issues.  we have since removed logs from containerd's responsibility list (https://github.com/fnproject/fn/pull/768), I've seen cpu usage of dockerd/containerd drop substantially since then. \r\n\r\nstats are still likely responsible for some cpu usage, we should debug it; the way we have things set up, polling stats every 1s won't be very useful for e.g. a function that takes 10ms to run, only 1/100 calls has docker metrics on it. if we grabbed stats more frequently (100/100 times), it would only increase cpu usage. seems weird that reading proc files takes so much cpu, anyway (looked around docker and nothing stuck out here). api to get container stats / logs seems weird, too, but could be useful, maybe we just allow hooking up to our metrics system?\r\n\r\nsome notes for debugging dockerd cpu usage, have had success doing the following to get pprof logs, they aren't perfectly detailed but the gaps aren't so hard to fill in:\r\n\r\n* run dockerd with `-D` for debug mode\r\n* `$ socat -d -d TCP-LISTEN:8000,fork,bind=0.0.0.0 UNIX:/var/run/docker.sock`\r\n* run rigorous tests and concurrently do next step:\r\n* `$ go tool pprof -raw http://0.0.0.0:8000/debug/pprof/profile`\r\n* after ^ - `$ go tool pprof -http 0.0.0.0:5000 /usr/bin/dockerd /home/reed/pprof/pprof.dockerd.samples.cpu.003.pb.gz`\r\n* browse to :5000 and view. Flame graphs also an option with profile file in hand (https://github.com/uber/go-torch)  Closing this as many relevant changes went in since this proposal.  Related #771   Can we just add the MTU setup to the preentry script in `images/dind/preentry.sh` instead?\r\n\r\nI'm not sure how the base dind works either, probably @treeder knows more. LGTM, though I'd defer to @treeder for final approval.  This PR adds a test to verify we can ~easily call 50 simple hot~ run trivial hot functions in parallel.\r\n I moved the test to the server tests, and changed it to be just a \"minimal concurrency\" test - more concerned with functionality than performance now. We'll still have to have a performance test somewhere at some point.\r\n\r\nEven on a ridiculously underpowered machine / container, we should be able to run 4 hot functions in parallel within a timeout of 30 seconds.  Question: what are the exact semantics of the \"deadline\" (which is stored as `execDeadline` in the call struct)?\r\n\r\nIs it supposed to be \"timeout seconds from the moment the call is _created_\" or \"timeout seconds from the moment the call is _started_\"? Because at the moment it is neither of those... it's \"timeout seconds from the moment when some code in GetCall runs\".\r\n\r\nIf the semantics were defined in one of the two ways above, the deadline could be derived from existing data and would not need an `execDeadline` field in the call struct at all. This would simplify things a lot. Hm... but the deadline is only in the context because it was put there by taking it from `execDeadline` which is the field I'd like to refactor out.\r\n\r\nIf there is a significant instant of time (\"when whoever picks it up goes to run it\") then I think it should be reflected in the model. For example, `models.Call` could have a `ProcessedAt` field in addition to `CreatedAt` and friends. This would not only make life easier with deadline but it could give us some interesting data: ProcessedAt - CreatedAt gives us the time the async call waited in the queue.\r\n\r\nWhat do you think? > impose execDeadline in the context deadline itself, so it may move but still needs to be in the same context that it is now to enclose submit. \r\n> to be clear, if we simply pass started_at to the function to compute it's own timeout based on started_at.Add(call_timeout) then this will be different than the actual context timeout that we are imposing on the call.\r\n\r\nIMHO then the solution is to deliberately set the context timeout imposed by us to StartedAt + Timeout, and we remove the discrepancy.\r\n\r\nThat would involve setting the context deadline in the private `submit()` just after `call.Start()`, and it makes sense to me because it feels like we shouldn't be setting a deadline if we haven't even started the call.\r\nOr am I missing something? Is the time taken by Fn operations (mostly getting a slot, but also the database write to set the call as started) supposed to be counted in the function deadline? Maybe that's why we get all those 503s, we take longer than the function timeout to find a slot.\r\n\r\n(this is a bit deceiving to a developer: if I set my function timeout to 1 second, I mean that I want my code to run for at most 1 second, I don't mean that the time taken by Fn to start up my container - which I have no control of - plus run my code is 1 second) Since I'm veering off the original purpose of this ticket, I have opened https://github.com/fnproject/fn/issues/723 to discuss the deadline semantics.  @denismakogon do you think we need to really remove hello?\r\nAfter the above work done, we are only left with hello (in api-tests only) and fn-test-utils.\r\nGiven that hello image is actually small (5-6MB), I'd say we keep it. The work\r\nneeded to remove it is now not worth it IMHO.  > Not sure what we can do with mysql image, which is 408Mb, mysql docker community has done zero to build on alpine by this time.\r\n\r\ni might piddle around with this, it shouldn't be too bad to get all the deps into alpine but sometimes it is.  > i might piddle around with this, it shouldn't be too bad to get all the deps into alpine but sometimes it is.\r\n\r\nfound https://github.com/docker-library/mysql/issues/179 -- we can try to poke the right people internally to get this supported, it appears to work now but need to have release track to follow.   > Unfortunately, compiling takes a lot of time.\r\n\r\ngo install before running 3x? then builds once  * we pull a lot of images\r\n* it's not immediately clear what's slow because we use shell scripts for the tests and CI only reports the whole script as a stage (i.e. break these up to debug)\r\n* master builds some images, maybe that is slow too?\r\n* see what else may take a while and speed it up!  we pass go vet in every CI build now. just turn off `-v`  aside from fixing the buffer usage, would be great to know 2 things before approving:\r\n\r\n* this code works with the old swagger clients, for sure (pick one, cli even)\r\n* the `plaintext` path is executed with the newly generated swagger clients. if not, can we fix our swagger doc to make this possible?\r\n\r\nin addition to that, an api test that covers both the `Accept: application/json` and `Accept: text/plain` and makes sure that the output is what we expect would be great (also wrt priorities if both are given) thanks. please fix https://github.com/fnproject/fn/pull/615#discussion_r158585026 -- for plaintext, the code should read:\r\n\r\n```go\r\nio.Copy(c.ResponseWriter, logReader)\r\n```\r\n\r\nwith no buffer in between\r\n\r\nedit: you may also need to set the content type explicitly since go detection may detect something else from the log, and we do not want to use the gin `String` method, as we don't want to turn this into a string it's a wasteful [large] allocation.   closes #367 \r\n\r\nthis finishes the time stamp saga for apps & routes, with created_at and updated_at on each one. should be pretty straight forward, there's some minor changes to tests / route init logic.\r\n\r\nthere are tests to ensure that these things are getting set.  Meh, i'll fix those `reflect.DeepEquals` calls breaking the tests. the new tests pass at least > One thing is missing here is the swagger doc.\r\n\r\nblanked on this, thanks, will do updates:\r\n\r\n* added `y.Equals(x)` methods for `App`, `Route`, `Headers`, `Config` & uses them (looks nice imo)\r\n* kills reflect usage (yay)\r\n* adds swagger\r\n* updated w/ master\r\n\r\n@denismakogon   >  *) each hot queue now has a hot launcher to monitor and launch hot containers\r\n\r\ninitial thinking is that this should be on-demand driven vs. polling (haven't gotten to details yet) fwiw we had a structure similar to this (one thread managing each pool of hot containers per route, doling them out) originally and there were a couple pieces that were hard to manage. the main one being that when calls are coming in we tend towards trying to ask for a lot of slots, but generally after they start launching the backlog clears pretty quickly and we don't want to launch anymore (and, mainly, we want to cancel threads asking for slots). this reduces it a good bit by making one thread per route, but I'm not sure it's closed if we have a very mixed workload of routes. \r\n\r\nwe have a mix of a lot of channels going on now to get a slot out: `trigger, output, signaller, closer` and i'm a bit concerned this will be hard to evolve over time. i'm optimistic we can reduce most of the channels to just the slot channel, even if there's a thread sandwiched in the middle launching hot containers to hand out slots to that channel. \r\n\r\ni'll drink some egg nog and give this another go later with some bourbon in the system.   i see. meh, `GetDatastore` is fine. i'm just anal and everything else is exported on `*Server`, but for what reason i'm less sure of since we provide options for configuring it and it probably shouldn't change after configuration and as long as we provide access to those things (through a method or an exported field), then sure whatever.  anyway, approved.. i can make vanity patches with some tools for however we want to munge stuff. i'm leaning towards lower casing the other things like datastore is now (can do that separate)  makes sense to me. seems like we need to add dep for `fdk-go` in glide for the build to work with this. i went back and forth on suggesting that, it seems nice to know which version of `fdk-go` was used to build the `tester` image when/if we experience breakage (makes some assumptions about not changing files on disk, since users build the image and not CI atm) > (or preferably build get deps on build)\r\n\r\n+1   i don't think it's a client side / fdk issue. just for async after we copy in the entire request into a buffer we need to add the content length header and then make sure those headers are plumbed back out properly (possibly 2 things to fix).  related to https://github.com/fnproject/fn/pull/370 -- which strips FN_HEADER (as noted, one issue)  yes, please  from #593 (but not that issue, as described) @denismakogon   yep. slated https://github.com/fnproject/fn/issues/155, we're re-working some of the messaging stuff at the moment. thanks for raising, gonna close as dupe since cancelling encompasses this and a few other things.   beware `/stats` api is in flux and possibly / probably going away as it does no cross cluster aggregation and is relatively useless in a cluster setting, we're shipping these metrics to prom as well and that's the likely best future proof in-road to see metrics. there are some docs here to get grafana / prometheus configured https://github.com/fnproject/fn/tree/master/examples/grafana  do we want to put all hybrid related docs in a separate file? i feel like this will only create confusion for most users that don't want to run hybrid. thanks, we need to doc hybrid stuff (@hhexo has begun, I believe, there is `docs/developers/hybrid.md` to append to possibly) i foresee 'what's this?' -> 'oh ignore that you don't need it' in slack x10  this looks like a different error related to tracing ? can you rename issue correctly please and re-open? are you fixing or no? I can't repro based on the given parameter, fwiw, mine loops. i remember this being a tracing race, need to track it down in initialization  the name of this issue seems misleading. this issue seems to raise that we aren't deleting logs (#473 notes this, because we don't have a cleaner), not the logs aren't going anywhere? it seems like the issue is that the logs went somewhere and stayed there. i'll edit, but feel free to re-edit if this is wrong. in any case it seems like this is a double issue with #483 so kinda leaning towards closing (re-open if i misinterpreted) I see one potential issue is that re-creation of new app/route gets logs for old app/route, so we should figure out a way to mark those logs as deleted because relying on the cleaner won't fix this one. i think deletion in minio will be very expensive with a lot of logs, since we're shoving all in one bucket. maybe we should consider making per-app and per-route buckets (managability of this is more challenging) since I imagine bucket deletion is a quick operation.  there's kind of no way we can do this atomically, sadly (the case for app/route ids, meh). will think about it. also i don't think nested buckets are a thing (route bucket inside of app bucket inside of one-much-larger bucket) i mean right now they are all in one big bucket and searchable by app + call id, so you could prefix search and find all under an app, there's not really an addressability issue and what we have works fine except in this delete-then-recreate case. the app bucket gives us no sugar other than, it will be fast to delete a bucket, but there's still a hole regardless.\r\n\r\nultimately, our schema in minio does not matter whatsoever, there is no way we can atomically delete everything in the sql database for an app or route and also delete everything in minio for that app or route. it's just not really possible to do this in one transaction. we can basically pick whether we want to delete all the stuff in sql first or all the stuff in minio first, we can't do both, and we can always end up in a state where one exists and the other doesn't even though we wanted to delete both. so, what we need to do, is either change the way we're addressing the resources in minio with something that won't be there on re-creation (app and route alone are not sufficient) or find a way to atomically mark these as deleted such that whatever apis we have can know that we cannot return resources that may be found in minio because they've been marked as deleted. \r\n\r\nanyway, moving to app bucket doesn't fix anything. i can't think of anything atm that will close this hole that doesn't completely suck (checking db for every log request).   [most](https://github.com/moby/moby) [projects](https://github.com/kubernetes/kubernetes) [understand](https://github.com/prometheus/prometheus) [darkness](https://github.com/mholt/caddy)\r\n\r\nwe've had this discussion before, and dep doesn't really seem like it makes any substantial changes to vendoring at large in Go vs. glide, it's just one is going to be core [in Feb]. it's like anything, there are trade offs, and it sure seems like devs having in sync dependencies, having faster CI builds, and not relying on ad hoc VCS mirrors outweighs the extra 2s of github latency to click on 'changes' and having to visually ignore `/vendor` files at the end of PRs for most large OSS projects. go is still lacking is just the reality of the whole thing. if go ever gets serious about making deps better it seems like a good time to re-evaluate, but dep is basically just glide by another name. \r\n\r\nmoving to dep will be nice for when things change over in feb.   forgot that was there, +1 to using DBStore (apologies for misleading in #563)  awesome. should ask flow team to run their benchmarks again and see if things improve w/ this  this is intentionally capped to 100 in the code. use pagination api or, please provide an action item here as this is not directly a bug itself without some opinion on how it 'should' work and the tradeoff implications of changing how it works reason to have pagination is simply reduce load on db (specifically, long running read queries can tie up the transaction engine & `select *` without limit on not-cached data is not very nice to db caches and subsequent queries; likely many more similar concrete reasons). 100 is a magic number. 1000 could be ok, maybe. 10000 seems like too many. but in any case, users have to implement paging no matter the amount we pick as the per page max, so it doesn't seem like it matters a whole lot as long as we have something reasonable.  \r\n\r\nhere's our docs: https://github.com/fnproject/fn/blob/master/docs/definitions.md#pagination -- our docs are a mess, i'm not sure there's really anywhere we could put them where a user would be expected to run into them, but the swagger API is up to date with the parameters (half of which were used in the example given). \r\n\r\n> I want to know how can I get 3K calls all-in-one response or how can I get the number of successful or errored calls within the certain timeframe?  At this particular moment as a user I have to do reverse iteration among calls because on API request I get only N last calls.\r\n\r\npaging answers this. swagger has docs for this. filter by time is possible. the filtering by status is not hooked up at the moment. the pagination api seems pretty clear on this.  yea, the cli probably needs to return it. the cli maybe should take an arg like `-n 3000` and then could internally do the pagination to get 3000 calls, without the client having to interact with it, or possibly `-all`, though we want to discourage that really (limit to 24h or something). in general I would hope that people use client libraries to interact with `fn` and not the CLI for doing heavy lifting (for tasks like this). I can't think of a good reason for a dev to sit there with the cli and inspect each page and only ask for another page if some expectation isn't met, and the shell scripting required to hook up paging is probably a lot less frightening in a user's favorite language rather than a user's favorite shell scripting language. swagger clients should all have a parameter for `cursor` to any endpoint that lists things? if this isn't the case, then we need to regenerate our swagger clients or something is terribly wrong with swagger? the API spec has the parameters listed under `GET /apps` at least http://petstore.swagger.io/?url=https://raw.githubusercontent.com/fnproject/fn/master/docs/swagger.yml#/Apps/get_apps -- as linked https://github.com/fnproject/fn/blob/master/docs/definitions.md#pagination it's pretty easy to map onto client bindings, e.g.:\r\n\r\n```go\r\nvar params apiapps.GetAppsParams\r\nvar apps []apiapps.App\r\n\r\nfor {\r\n  resp, err := client.Apps.GetApps(&params)\r\n  if err != nil {\r\n    return err\r\n  }\r\n  apps = append(apps, resp.Apps)\r\n\r\n  if resp.NextCursor == \"\" {\r\n    break\r\n  }\r\n  params.Cursor = resp.NextCursor\r\n}\r\n```\r\n\r\nso pagination with client libraries is possible? you're just saying you don't want to do this and have the CLI return everything (exactly what we implemented paging to avoid)?\r\n\r\nforcing users into paging is a pretty common practice, and the code is pretty straightforward. sure, it's convenient for users to be able to grep and count across all calls with a bash incantation, but it's not a whole lot to ask them to use paging to do this, either (sure, our cli needs to expose cursor so they can). \r\n\r\nyea, cli is useful for one off inspection. as for having a decent paging api to use to regularly inspect entire lists of things, i'm not sure of a clean api to do this and don't think forcing users into writing a for loop with client bindings to be the end of the world i guess.  > can we start with providing a simpler way for the CLI to grab all results?\r\n\r\nkind of exactly what we're trying to avoid by having pagination. cli should maybe do last hour by default and easy to change? don't want to default to all, and want to make sure there is _some_ bound that has to be specified (even if the wise cracks put it at midnight, Jan 1 1970). but anyway, there was discussion https://github.com/fnproject/cli/issues/50 / move to CLI issue probably.  with the CLI*  is splitting ports strictly required in the mysql router? I don't think this poses a concern for us at the moment at all. all our db drivers right now are just `sqlx` with very minimal db-specific code, not that we need to adhere to this, but honestly we don't need any of the fancy features of pg or mysql for our workload which is super simple and it would be nice if our db drivers reflected that. specifically, if we do #482 we will have a very very low write rate and splitting writes to another instance doesn't offer us much benefit at all (read-heavy workload). \r\n\r\nimo all we need is some kind of redundancy (many ways to do this now) from mysql, just for fault tolerance. once we get into prod we'll have a better idea of what adjustments we need to make for our workload. this seems like we can add it without requiring any code changes really (just ops changes).   just for context Vish working on some AI/ML stuff on top of Fn was running into issues due to the 100ms sleep so @skinowski volunteered to re-look at strategy. Maybe he can describe what he ran into in this issue or IRL.\r\n  from:\r\n```\r\n\u201ctimeout value is too large or small. 0 < timeout < max. async max: 3600 sync max: 120\u201d\r\n```\r\nto something like:\r\n```\r\nTimeout value is out of range. Sync should be between 0 and 120, async should be between 0 and 3600.\r\n```  Shaun asked me to make the Tutorials links point to the tutorials repo. So in doing that, I updated the main docs and example landing pages at the same time.\r\n- README.md: Added a link to the tutorials repo. Renamed the old tutorials series to \"Getting Started Series\". Not attached to that name if someone has something better.\r\n- docs/README.md: Sorted topics alphabetically. Removed redundant links. Used an emoji to pin key topics to top of section. Used a star, could use a pushpin instead or something else.\r\n- examples/README.md: Added links to other major doc/learning categories.\r\n- examples/tutorial/README.md: Renamed this to \"Getting Started Series\".  Only linked to initial supported languages (Dropped Ruby, Rust and PHP).\r\n- All: Added a \"Learn More\" section to all but the quickstart to link to doc related topics.\r\n\r\nLet me know what you think.\r\n\r\nMike W. Added a change to docs/readme.md. No icons and categories added. Feel free to update as needed.\r\n\r\nMike W. hey @michael-w-williams can you rebase this PR? there were changes which created some conflicts... I did the rebase. But there is still a conflict.  Need to keep Open, Packaging, Setting up. Delete API, Object, FAQ github makes it easy. you gonna resolve the conflict? I can if you want I will give it a shot. ok. Conflict resolved. will review today thx  Hey @adoublebarrel please ensure your GitHub membership to the Oracle org is public and that the email address matches the one you're committing with. That should clear this check. Thanks!  should have a doc written up tomorrow of API design, would be great to split up work and get your thoughts (kafka & api implementation & testing & auth) @msgodf -- disabling async we do need, thanks! @msgodf @skinowski I've started a doc here https://github.com/fnproject/fn/blob/hybrid-api/docs/developers/hybrid.md based on discussion today (in the flesh), feedback appreciated. But overall, pretty lightweight. mostly, we need to do some kafka reading. sync is really easy.  > I don't know the answers, but I feel that not worrying about partitions at this stage makes the implementation simpler, and it can also be iteratively improved when we do have the data to determine the efficiency answer. :)\r\n\r\nI wish this were possible, kafka does not seem to have any 'easy' way to provide MPMC semantics without thinking about partitioning. We need to have someway to have 1 process chewing on a partition, we can't just let every request ask a queue for the head (this has pros and cons, not having to worry about timeouts sounds... delightful). Initial thinking was that API nodes would have their own partition and be part of a consumer group, and this seems like the naive approach that would likely work but has at least one deficiency in that we lose distribution information for RHS processing. The thinking is that, there are likely a small set of API nodes and a large set of runner nodes, and we want a runner node to process some subset of calls so that we can re-use hot containers, image caching (the same reasons we have fnlb for sync). Can think about other ways to accomplish this.\r\n\r\nThe complication of the k8s / round-robin load balancer in the middle is something that didn't come to mind (thanks for pointing it out). It's kind of unfortunate that we have to proxy runner nodes over to the LHS to talk to kafka, in a 'normal' (non-hybrid) deployment runners (full `fn` servers) getting their own partition seems like it would work just fine (maybe optimal, even). It seems brittle to rely on having a 'sticky' (vs. round robin, et al) load balancer in between RHS and LHS so that kafka clients will work, but it seems like it would maybe close this hole? since this API is hanging off on the side we _could_ open a long lived connection between an API node and a runner node so that 1 API node could serve a runner's partition to it. this is kind of smelly, need to marinate on this a bit.\r\n\r\nNot completely bent on having a partition per runner, the main sticking point is the distribution, but even if we have a partition per API node we have an issue of routing a `msg.Commit()` (increment partition offset) to an API node where the consumer for that partition is available. :(\r\n\r\n> Partitions are (essentially) static - which is to say there's an async process for expanding the number of partitions a topic has, but that expansion can take seconds. \r\n\r\nThis sounds edible, we expect that the set of runners is scaling up and down but relatively infrequently (likely 10s of minutes). Not sure how well consumer groups will adapt to this, possibly a bad idea. API nodes will be less elastic and may make a better candidate. \r\n\r\n> Shoud the /runner/... endpoints be api-versioned too, i.e. /runner/v1/...?\r\n\r\n`/v1/runner` makes sense, API nodes serve all `/v1/` endpoints so it's uniform. good catch, thanks. >  The other question revolves around async work that turns up with a deadline. If that is fast approaching then the Call's \"priority\" for placement should rise, I presume.\r\n\r\nI am game to not have an idea of a deadline, as I may have interpreted this. I am somewhat concerned about the fact that we effectively need to implement real-timestamp-based priority queueing, but optimistic that we can use kafka's offsets as timestamps, to achieve delayed messages (I'm not sure this is the same as deadline? i.e. run this call at this time in the future X?), and even then I don't think we can possibly make any guarantees about the immediacy of running that; it'll be in line with anything else that came in and was scheduled to run before that time X. As far as priorities, our redis implementation has these but only uses p0. I would like to avoid adding explicit [p0,p1,p2] priorities to start (and forever, if we're being honest) since I think it's going to be quite a bit of work just to get one priority in. \r\n\r\n> There is no easy way to manage work stealing in that scenario\r\n\r\nyep, agree. as proposed it is very optimistic that the node that enqueued it was routed to because it has enough room to run it once that is eventually dequeued, which may be very far in the future. \r\n\r\nfiguring out how to map a message that a runner has received from an API node to a request to delete that message to the same API node is still kind of what I'm stuck on. Even if all API nodes stay healthy, it seems like we're really fighting the kafka client semantics here. Apparently, they have an http gateway that you can stick in front of kafka to make it so consumers / producers can be less precise about exact positioning of messages wrt partitions, maybe this is the route we need to go down but damn, turtles. for reference: https://github.com/confluentinc/kafka-rest > I think we need some form of work stealing, even though when you steal work you are \"cold\" and you have to pull images and start up containers. The question is how significant that is on async functions that the user has started with the expectation that \"at some point they will complete\". Maybe they don't care about the 100ms of container start, but they do about the few seconds of image pulling. Hm.\r\n\r\nfor async we aren't really bounding the queued time so I think users care much much less about the docker overhead. we can definitely use this to our advantage. however, I think that on our side of the house we do/should care about this overhead. as you pointed out, one issue is the disk space of caching all images. on a similar note, if we can leverage hot functions for async and shove them through a few nodes faster than, say, eating the startup time and pull time of the image across all machines, then we can also reduce the queued time not only for each route, but across all routes. queues getting backed up for async is probably going to be one of the most common customer complaints (we can wait to hit this bridge, probably, too). I agree we definitely need _some_ kind of work stealing so that we can scale, I do think we need to keep sharding / distribution in mind. perhaps the better answer for now, though, is to punt, so we can move forward, with kafka specifically we have other implementation blockers atm.\r\n\r\n> the runners pull (poll?) \r\n\r\nyea, poll is the intent. will clarify in doc.\r\n\r\n> and maybe if there are few requests needing this routing it becomes feasible to have the API nodes do additional work to redirect the request undoing the interference of the intermediate LBs.\r\n\r\nthis is an interesting idea. yea, we could have a little proxy among api nodes. the possibly-really-hokey but imo really-totally-okay is that the response from `/dequeue` returns the public IP address of the API node from which that message was consumed to use in `/finish`, the API nodes are going to be exposed to the internet anyway (granted, ideally by way of an LB). as currently proposed, we also need to route runner nodes to the same API node repeatedly in `/dequeue`, as in theory only one API node has a consumer open for each runner's partition (we could round robin through API nodes until we land in the right spot, but it seems wasteful). similarly, `/enqueue` needs to route to some API node that has a producer thread open on behalf of a runner's partition, this doesn't have to be the same API node as the consumer, however (doesn't buy us a lot). If we partition with RHS keying, I already smell the 2 API nodes need to not be able to have a producer / consumer open concurrently [I think?], which is pretty unappealing.  > I guess we can start implementing the endpoints using the current MQ solution.\r\n\r\nyep. I see 2 concrete and separable tasks that come out of this:\r\n\r\n1) implement a data access interface layer for the agent that encapsulates the functionality we need, with one implementation that uses the `models.Datastore` and `models.MessageQueue` directly, and the other that uses a yet created runner API client (could omit this until after 2), need to shuffle code around first). the methods on this interface [can/should] map pretty easily to the API spec, `Enqueue`, `Dequeue`, `Start` and `End` (the latter 2 exist, though maybe should be moved around a little to be next to the other 2). Enqueue seems like we could omit as things are now, but it might be worth pushing down into agent. \r\n2) implement the server API as outlined in the doc above (and if going above and beyond, get the go client bindings over with; we don't _need_ to use swagger here imo, we don't really want users using these apis directly). \r\n\r\nI'll take one if y'all want to take the other, you pick ;)  >  This actually may supersede part of what @msgodf is doing, at that point the flag to switch mode becomes a decider for which struct is created.\r\n\r\nthis sounds right, the flag will determine how to configure the agent. I guess agent's responsibility mostly is managing the pool of calls and the interfacing with the mq/db is pretty minimal was the thinking, so we can just shove something into the agent to use to access data when needed vs needing to change the agent at large (the surface area is really just GetCall/Submit). certainly, there are other ways to skin the cat.\r\n\r\nwhat you pushed looks pretty good to me. once we have the runner API client thing, `agent.New`'s signature can maybe look something more like the `agent.GetCall` where there's 2 ways to construct a data layer for the `Agent` and the `Server` can configure the correct one based on flags. but what you have looks good to me. this should slot in with Mark's stuff pretty easily, we can probably slide that in first then fix agent configuration ? > That's fine, but I was asking myself what will be responsible for handling the dequeue/start/finish API calls in the API-only node. The Agent doesn't surface the interface to do so, so will the Server go straight to the data?\r\n\r\nthis is what I was thinking. I should have a final draft today to PR, need the bit to shut things off to test it (or the agent beats me to dequeue ;) -- can see how it looks and go from there. Mark was discussing not starting an agent in the API nodes at all, which seems wise. \r\n\r\n> Also, currently we don't have an \"update call\" method in the datastore, ... so I'll add an implementation of that too, ...\r\n\r\nthanks. i'll stub this out for now in start/finish. do you want to PR your agent changes or coordinating with merging @msgodf stuff ? sweet. yea, I wouldn't mind merging stuff into master and branching off of that, I don't think any of this is really all that intrusive wrt base functionality but we need to move code around and would be nice to stay up to date with master changes. thoughts? -> PR hybrid-api to master? I don't think order of landing hybrid-impl or hybrid-api to master matters, can rebase similarities out and there's not much new code overlap (if any). i pushed a commit to `hybrid-api` with my changes and opened up a separate https://github.com/fnproject/fn/pull/581 (which is hybrid-api) which is merge-able to master. PTAL. \r\n\r\nTODOs I see atm:\r\n\r\n* [x] ensure possibility to start a `*server.Server` / binary without specifying MQ/DB/LOG (it would be nice if `server.New` reflected this, and each of those things were `ServerOpts`)\r\n* [x] probably don't start an agent at all in API nodes? (`agent.New` could drop DB/MQ/LOG and use opts)\r\n* [x] discuss whether API nodes should be able to enqueue async tasks (I think no, if anything just to reduce the surface area and complexity stuff, also keeps all call creation in runners (id gen, caching of apps/routes). just shut down all `/r/` on API nodes is really straightforward)\r\n* [x] create client bindings for the runner nodes to call runner API, wrap a new DataAccessLayer around this\r\n* [ ] examine possibility of letting call update be an idempotent set and having a separate conditional 'update status' ? at least, it seems like we can maneuver around a full call CAS with just the semantics we need. enqueue is insert, start is conditional status switch & add started_at, finish could be idempotent set. \r\n* other stuff?\r\n\r\nafter we get an MVP working with  redis mq we should prob get back to investigating kafka (we don't wanna make a redis operator and do that whole dance), seems like we're pretty close.\r\n\r\ni'll try to get client stuff done meow just tacked on a client to #581, it's kind of off on the side for now too so sliding it in (will work on DataAccessLayer / integration tests with it tomorrow unless someone beats me to it) I've managed to get sync tasks running in split mode (yay) in https://github.com/fnproject/fn/tree/hybrid-datarappa branch (based on `hybrid-mergy` branch), this does a lot of shuffling around of the server config stuff mostly and fixes some of the client wiring bugs. at least, most of the plumbing is done now [I think]. for now, reverted the protocol back to the same semantics we have on master, we can fix this later.\r\n\r\ni've run out of time for today, but async isn't working just yet, will merge into `hybrid-mergy` or `master` if we merge #581 once I fiddle with async a little on monday. but anyway notifying because it knocks out a bunch of those todos and moves stuff around a fair amount. I don't think #581 breaks anything on `master` so I left it without this for now in hopes of merging that. \r\n\r\nto run split mode tasks on `hybrid-datarappa` (with a sync task set up):\r\n\r\n```sh\r\nFN_NODE_TYPE=api FN_LOG_LEVEL=debug ./fn &\r\nFN_NODE_TYPE=runner FN_PORT=8081 FN_RUNNER_URL=http://localhost:8080 ./fn &\r\ncurl -d '{\"name\":\"yodawg\"}' -v localhost:8081/r/hot-app/hello\r\necho \"ta da\"\r\n``` > The FN_RUNNER_URL new env var in hybrid-datarappa\r\n\r\nagreed, it's weird but the logical `FN_API_URL` is taken [by the cli, so not exactly]. toyed with `FN_RUNNER_API_URL`, `FN_URL`, `FN_HYBRID_URL`, happy to change it.\r\n\r\nmerged into master, thanks for reviewing. it should be easier to PR and review stuff against master now. i'll get async working today with the old messaging protocol.\r\n\r\nmeaty pieces left: \r\n\r\n* kafka\r\n* auth\r\n* operationalizing\r\n* adding cache to wrap the `DataAccessLayer`'s GetRoute and GetApp methods, currently un-plumbed for runner nodes since it wraps the `Datastore` atm [which a \"runner\" does not use]\r\n\r\n(the checkboxes on the parent comment are not a good approximation of the work required to get this in, I'm changing them to a list so this doesn't look 'done' in github's UI as everything outlined was pretty basic) opened https://github.com/fnproject/fn/pull/585 w/ today's work, I think it's ready. we can likely add /api/server tests of full sync/async tasks in this mode with 2 `server.Server` active & communicating on top of that work. the other thing to do is moving the cache from the datastore to the dataaccess layer, which shouldn't be too bad and at some point probably we should doc the api & behavior (maybe wait until auth/kafka?). have at it or I will get to it tomorrow. \r\n\r\nauth & kafka will be hair balls & require some research/planning, we should divide and conquer. i'm not sure it's worth doing extensive [load] testing / operationalizing until these are finished.  sounds like a good plan. I'm not sure of the verbiage we want to use user facing, personally I find work/control plane not immediately very intuitive. I am also skeptical of being in small classes with other kids that didn't behave well as a child, however. \r\n\r\nwdyt about re-using `FN_API_URL` to represent the `/v1` endpoints and allowing `FN_WORK_API_URL` to make `/r/` requests against runners (if provided, which overrides `FN_API_URL` for `/r/` only)? I'd toss `FN_RUNNER_API_URL` around for usage in the CLI, but I guess we already use that one in the runner itself. I think 'runner' is more intuitive than 'work'. maybe `FN_GATEWAY_URL` (it will likely be a load balancer) ?  Great idea @Lawouach .. cc @michael-w-williams to own this page with help from others. Underlying platform definitely a factor but we'll put together some best practices under the operating section.  i am on a mac, might be the difference....\r\n\r\n```\r\ndocker run --name=prometheus -d -p 9090:9090 \\\r\n  --mount type=bind,source=`pwd`/prometheus.yml,target=/etc/prometheus/prometheus.yml \\\r\n  --add-host=\"localhost:`route | grep default | awk '{print $2}'`\" prom/prometheus\r\nusage: route [-dnqtv] command [[modifiers] args]\r\ninvalid argument \"localhost:\" for \"--add-host\" flag: invalid IP address in add-host: \"\"\r\nSee 'docker run --help'.\r\n```  Let me know what you think. If you like the basic format I will use it as a template for the other hello worlds. Not sure I should show all the variations you can use to call the endpoint. +1 to let generator create the code.\r\n\r\nalso you can pass in json by creating a payload.json file and doing `cat payload.json | fn run` which is a nice and elegant demonstration of stdlin and Fn. I made most of the requested changes. Also added FN_REGISTRY section as somehow I left that out. Changed deployment example to local. \r\n\r\nSo as I see it, these hello tutorials are focused on getting from nothing to a running function as fast as possible. This is a pattern we are using now on other cloud services. For that reason, I didn't add content for fn test or hot v cold functions. If you feel strongly that one of those topics needs to be in here, let me know and we can discuss it further. Thanks.  nice. looks good.  i believe this is fixed as we're now shutting down containers if they exceed the timeout. re-open if i'm misinterpreting  thanks @Hanfrey .. CC @michael-w-williams  I will take a look today. Reproduced the error on my system. Happening during the build phase. I getting the same message:\r\n\r\n```\r\n$ fn build\r\nBuilding image hello-php:0.0.1\r\nSending build context to Docker daemon  4.096kB\r\nStep 1/5 : FROM funcy/php:dev as build-stage\r\n ---> 7a88b478f08d\r\nStep 2/5 : WORKDIR /function\r\n ---> Using cache\r\n ---> 081ad227977e\r\nStep 3/5 : FROM\r\nFROM requires either one or three arguments\r\nERROR: error running docker build: exit status 1\r\n```\r\nChecked DockerHub and the entry for the image is there along with the dev tag. Dockerfile images exist in github too. No help from Ms Google, so will check with the team on this one.  Doesn't everything else prefix with FN? This ones hidden and already causing confusion.\r\n\r\nOther ones that'll need FN_ :\r\n\r\n```\r\n| DB_URL | The database URL to use in URL format. See [Databases](databases/README.md) for more information. | sqlite3:///app/data/fn.db |\r\n| MQ_URL | The message queue to use in URL format. See [Message Queues](mqs/README.md) for more information. | bolt:///app/data/worker_mq.db |\r\n| API_URL | The primary Fn API URL to that this instance will talk to. In a production environment, this would be your load balancer URL. | N/A |\r\n| API_CORS | A comma seperated list of domains to enable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) for | None |\r\n| PORT | Sets the port to run on | 8080 |\r\n| LOG_LEVEL | Set to DEBUG to enable debugging | INFO |\r\n| DOCKER_HOST | Docker remote API URL | /var/run/docker.sock:/var/run/docker.sock |\r\n```\r\n\r\nCan we vote and if passed change these before people get used to the way they are now?\r\n\r\nRelated tickets that also discussed/implemented FN_ prefix:\r\n\r\nhttps://github.com/fnproject/fn/issues/329\r\nhttps://github.com/fnproject/fn/pull/299\r\nhttps://github.com/fnproject/fn/pull/5\r\n\r\n  ```\r\nname: Vista\r\n```\r\n\r\nreturned `ERROR: deploy error on /Users/chad/workspace/vista/services/alert/func.yaml: Invalid app name`\r\n\r\nI had to guess it was the capital. Probably better to detect the reason for the error and return that rather than trying to support capital letters.\r\n  including hybrid arch. might be diff ticket. @derekschultz right thanks for clarifying... that list looks good. FYI @denismakogon has a docker compose file that brings all/most of that up as well. could maybe put together somewhere under an operator section. \r\n\r\nRe: prom I believe that'll be an extension per @nigeldeakin's work so we can leave that out for now and include different stats implementations later. Or maybe use prom as \"example\".\r\n  This PR fixes an intermittent race condition which sometimes caused the following  panic at startup:\r\n```\r\npanic: interface conversion: opentracing.SpanContext is opentracing.noopSpanContext, not zipkintracer.SpanContext\r\ngoroutine 74 [running]:\r\ngithub.com/fnproject/fn/vendor/github.com/openzipkin/zipkin-go-opentracing.(*tracerImpl).startSpanWithOptions()\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/openzipkin/zipkin-go-opentracing/tracer.go:309  \r\ngithub.com/fnproject/fn/vendor/github.com/openzipkin/zipkin-go-opentracing.(*tracerImpl).StartSpan()\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/openzipkin/zipkin-go-opentracing/tracer.go:268  \r\ngithub.com/fnproject/fn/api/server.FnTracer.StartSpan()\r\n\t/go/src/github.com/fnproject/fn/api/server/fntracer.go:23  \r\ngithub.com/fnproject/fn/api/server.(*FnTracer).StartSpan()\r\n\t<autogenerated>:1  \r\ngithub.com/fnproject/fn/vendor/github.com/opentracing/opentracing-go.startSpanFromContextWithTracer()\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/opentracing/opentracing-go/gocontext.go:52  \r\ngithub.com/fnproject/fn/vendor/github.com/opentracing/opentracing-go.StartSpanFromContext()\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/opentracing/opentracing-go/gocontext.go:44  \r\ngithub.com/fnproject/fn/api/agent/drivers/docker.(*dockerWrap).CreateContainer()\r\n\t/go/src/github.com/fnproject/fn/api/agent/drivers/docker/docker_client.go:213 \r\ngithub.com/fnproject/fn/api/agent/drivers/docker.(*DockerDriver).Prepare\r\n\t/go/src/github.com/fnproject/fn/api/agent/drivers/docker/docker.go:136  \r\ngithub.com/fnproject/fn/api/agent.(*agent).prepCold()\r\n\t/go/src/github.com/fnproject/fn/api/agent/agent.go:560  \r\ngithub.com/fnproject/fn/api/agent.(*agent).launch.func1()\r\n\t/go/src/github.com/fnproject/fn/api/agent/agent.go:529 \r\ncreated by github.com/fnproject/fn/api/agent.(*agent).launch\r\n\t/go/src/github.com/fnproject/fn/api/agent/agent.go:528  \r\n```\r\n\r\nThis appears to be caused by an attempt to set a Span created using the default Tracer to be configured as the parent of a Span created using the Zipkin Tracer. It seems likely that this was because the parent span was created before the Zipkin Tracer was configured.\r\n\r\nTo fix this, this PR changes the `New` function in `api/server/server.go` to set the global tracer before creating the agent and server.  Had a brief discussion with @hhexo about this: essentially he was pointing out that there are some operations performed before this function is called, and that since the global tracer is global we can't prevent these performing tracing, even though they don't appear to do currently. The code in question is in server.go:\r\n\r\n```\r\nfunc NewFromEnv(ctx context.Context, opts ...ServerOption) *Server {\r\n\tds, err := datastore.New(viper.GetString(EnvDBURL))\r\n\tif err != nil {\r\n\t\tlogrus.WithError(err).Fatalln(\"Error initializing datastore.\")\r\n\t}\r\n\r\n\tmq, err := mqs.New(viper.GetString(EnvMQURL))\r\n\tif err != nil {\r\n\t\tlogrus.WithError(err).Fatal(\"Error initializing message queue.\")\r\n\t}\r\n\r\n\tvar logDB models.LogStore = ds\r\n\tif ldb := viper.GetString(EnvLOGDBURL); ldb != \"\" && ldb != viper.GetString(EnvDBURL) {\r\n\t\tlogDB, err = logs.New(viper.GetString(EnvLOGDBURL))\r\n\t\tif err != nil {\r\n\t\t\tlogrus.WithError(err).Fatal(\"Error initializing logs store.\")\r\n\t\t}\r\n\t}\r\n\r\n\treturn New(ctx, ds, mq, logDB, opts...)\r\n}\r\n```\r\nSo before tracing is initialised we initialise the datastore, queue and logging.\r\n\r\nHowever the change in this PR certainly doesn't make things any worse, and should in practice fix the panics I observed (which occurred in threads started by the agent).\r\n  This PR is intended to provide a fix to https://github.com/fnproject/fn/issues/464\r\n\r\nThat bug reports that in some (unknown) circumstances, the Prometheus go client is complaining that the Fn server is attempting to record a metric which has a different number of labels than it did when it was first sent. \r\n\r\nI haven't been able to reproduce this. The only way I can think of that might cause this error is that spans of a particular name are sometimes created with a parent span which has fn_appname and fn_path set, and are sometimes created without a parent span. However I haven't found how this might happen. \r\n\r\nWhatever the cause, this PR is intended to prevent something like this causing \"inconsistent cardinaliity errors\". When a metric is first created (e.g. the first time a span with a particular name is ended), we now record the label names that are specified. Then, when subsequent spans with the same name are ended, a new block of code ensures that an identical set of label names are used. If a subsequent span contains a label key which was not specified initially then it is ignored. And if a label key was specified initially, but is found to be missing from a subsequent span, then a value of \"\" is used.\r\n\r\nThis means that the labels used for a given span are determined by those that are \"set\" via baggage items (either directly or inherited) on the very first span to complete. This is potentially non-deterministic, but the only way to avoid this would be to hardcode the label names used for every span name. That sound undesirable as currently most span names simply inherit their parent labels and don't have to contain any special code.\r\n  See analysis and proposed \"fix\" in https://github.com/fnproject/fn/pull/465  @derekschultz is this [related to] what you're working on?  thanks @topiaruss -- we'll look for it ASAP and clear this check!\r\n  This change causes all completed tracing spans to be made available as Prometheus metrics, with each span name corresponding to a separate Prometheus metric. Where a span is associated with a particular function call, the path and application name are added to the metric as labels. \r\n\r\nThe top-level span that is is associated with a particular function call is agent_submit. I've added a couple of lines of code to save the path and application name in the span as a BaggageItem. This only needs to be done here, as all child spans will \"inherit\" this value.\r\n\r\nThe work to extract the span name and duration out of a completed span, and send it to Prometheus, is done in a new custom Zipkin collector. This is the only place which can access duration data. This is also the place that extracts the path and appname from the span and set appropriate labels on the Prometheus metric. However the collector cannot access the BaggageItem of the span: it can only access the tags. \r\n\r\nTo work around this limitation, I have implemented a custom Span implementation (and a custom Trace implementation to create it), which intercepts the call to Span.Finish, extracts the path and appname from the BaggageItems, and saves it in the Span using tags. This makes this information available to the collector. (Note that I have to go via BaggageItems here: we can't simply set the path and appname as tags since the Span implementation can't access Tags, though they can set them). I think the result is reasonably clean.\r\n\r\nI have created a second example Grafana dashboard to demonstrate some of these new metrics.\r\n\r\n![grafanadashboard2](https://user-images.githubusercontent.com/6053562/31834147-f035e310-b5c4-11e7-8451-acd61a80902a.png)\r\n The CI build is failing in go-fmt.sh\r\n```\r\n#!/bin/bash -eo pipefail\r\n./go-fmt.sh\r\n\r\n./api/server/server.go\r\nExited with code 1\r\n```\r\n\r\nAny ideas? Now fails with the following: will investigate.\r\n```\r\n    --- PASS: TestRoutes/list-and-find-route (0.04s)\r\nFAIL\r\nFAIL\tgithub.com/fnproject/fn/test/fn-api-tests\t38.694s\r\n?   \tgithub.com/fnproject/fn/test/fn-api-tests/fn/formats/json/go\t[no test files]\r\n?   \tgithub.com/fnproject/fn/test/fn-api-tests/fn/log\t[no test files]\r\n?   \tgithub.com/fnproject/fn/test/fn-api-tests/fn/multi-log\t[no test files]\r\n?   \tgithub.com/fnproject/fn/test/fn-api-tests/fn/timeout\t[no test files]\r\nExited with code 1\r\n``` I've committed and pushed all the updates so far, partly to trigger another CI run (I don't have permissions to re-trigger the tests). I ran the tests locally and they passed.\r\n\r\nNot yet looked at the [first comment](https://github.com/fnproject/fn/pull/447#pullrequestreview-70969887) about setting the baggage items.  The CI tests passed this time (nothing to do with my changes). Latest commits:\r\n* Added `fn_appname` and `fn_path` labels to the `serve_http` span. In the end this turned out to be very simple.\r\n* Updated the Grafana dashboard to allow rate and duration graphs to be displayed for any number of spans, with the user using a pair of dropdowns to choose which spans they are interested in.  Here's a screenshot\r\n![grafanadashboard2](https://user-images.githubusercontent.com/6053562/32001694-6d5838e0-b992-11e7-8099-63b80213d341.png)\r\n Here's a close-up of the graph for the `serve_http` span:\r\n![grafana - fn tracing spans - mozilla firefox 25102017 124821](https://user-images.githubusercontent.com/6053562/32001821-d5707bae-b992-11e7-867a-d40ea73fedb0.png)\r\nThis span sometimes has an app and path associated with it, in which case there will be a separate line for each app/path. Spans which have no app and path, are shown with a line identified in the legend as `fn_path (fn_appname)`. It would be nice to be able to define a different legend value for this case, but it doesn't seem to be possible.  Made the change Shaun requested. I think we are ready to merge. Ok. Addressed almost all of Denis' comments. Sorry I didn't get to this sooner. Death by meetings for me this week. Made the additional requested fixes.  hi @lagartoflojo thanks for the PR and feedback! We're definitely aware and working on modernizing the process into a digital signature.   Moving the implementation code for stats and Prometheus metrics out of \"core\" sounds good, though of course this will require core to provide the required extension points (e.g. at server start when the Prom client needs to be initialised, or when a task is enqueued,dequeued, run and completed). Let me know if I can help.\r\n\r\nAlso, we want to give users a simple out-of-the-box experience for starting fn with, say, the stats/metrics extension. How will users specify what extensions they want? By means of parameters to `fn start` which automatically build a suitable docker image? What about tracing? Calls to the OpenTracing API should probably remain part of the core, but the OpenTracing client implementation (i.e. Zipkin), and the configuration of the trace collectors (the Http one already being used, and the new custom collector to send spans to Prometheus) should probably be add-ons.\r\n\r\n  This page: \r\nhttps://github.com/fnproject/fn/blob/master/docs/operating/production.md\r\n\r\nContains a diagram which has several references to \"Iron-f(x)\" \r\n\r\n![architecture](https://user-images.githubusercontent.com/6053562/31345831-e3a6cbdc-ad0e-11e7-9a2e-bf2dcd8d9403.png)\r\n  this one is relatively challenging to support at the fn level because it's hard for us to guarantee finality (at least, easily) and scale. there's lots of implications for how to schedule from an fn node back through whatever we'd use to schedule these to other nodes and correlate those (we can get into locality and all this too, eventually; opening the pandora's scheduler box is not wise), and for funsies since functions can themselves call functions, we can end up in a chain that never ends (this just highlights the complexities).\r\n\r\nflow is a better/existing idea for this kind of thing, as it handles a lot of this client side and exists today. unfortunately, it's a bit more restrictive on current implementations language (no .net), and is considered somewhat experimental, none-the-less it does work in not too scaled up capacities and the API is open and can be implemented with relative ease.  ehhh, just realized it was already merged... movin fast. throw in some changes?  - [ ] Tutorial series links (Mike updating)\r\n- [ ] UI docs (Mike updating / see comments below)\r\n- [ ] K8s docs (Derek updating)\r\n- [ ] Swarm docs (update or delete)\r\n- [ ] ..\r\n- [ ] ..\r\n- [ ] .. @michael-w-williams \r\n```\r\ndocker run --rm -it --link functions:api -p 4000:4000 -e \"API_URL=http://api:8080\" fnproject/ui\r\n```  This issue also affects Prometheus metrics. This isn't about the `stats.Queued()` call. The problem is that neither the `stats` structure, nor the data held in the Prometheus client, know anything about functions/routes until they have been called. \r\n\r\nTo fix this issue we need a new function that is called, once for every route in the database,  when the server is started and subsequently whenever a new route is created. This function would update `stats` and the Prometheus client with initial metrics for that route, with queued, running, completed and failed all set to zero. Writing that function is straightforward, but where would we call it from? I'm looking for some existing code which is executed at startup which reads all the routes from the database. This issue isn't about \"queued calls\". It's whether the Prometheus scraper should receive metrics about routes that exist but which haven't been called (or queued). \r\n\r\nIt sounds (from discussion here and elsewhere) that the current behaviour is considered OK: Prometheus should only receive information about things that happened since the server was started. So I can close this issue. Thanks for the feedback.\r\n\r\nAs for calling stats.Queued() from agent.GetCall: why is that better than calling it just once as now, when the call is enqueued? Currently when a call is enqueued the Prometheus client is notified so it can increase its counter. The Prometheus server can then scrape the value of this counter (by calling /metrics) any time it likes. Or is the suggestion that we change this from a counter to a gauge whose value is maintained within the Fn server itself? In any case that change is not related to this issue.\r\n  i'll finish this one this week    @denismakogon btw, for python, try this: https://pypi.python.org/pypi/ijson\r\n    @zootalures so no problems with Java at 128?  \ud83d\ude2e  Good to know. \r\n\r\n@rdallman I like ideas 2 and 3 over 1. But maybe 3 is best if Java has no issues and I don't think Ruby really needs much either, unless you start loading in a bunch of libs. Firing up `irb` gives me about 6.5MB. \r\n\r\n```\r\nPID    COMMAND      %CPU TIME     #TH   #WQ  #PORT MEM    PURG   CMPRS  PGRP  PPID  STATE    BOOSTS          %CPU_ME\r\n74369  ruby         0.0  00:00.11 2     0    14    6468K  0B     0B     74369 58142 sleeping *0[1]           0.00000\r\n```\r\n +1 to both 2 and 3. Definitely think OOM error message can be more explicit for users. But per @zootalures note might not need to increase default for Java. (maybe Clojure though given @markxnelson's original question while building the clojure lang support.  config set should probably just overwrite, if they want multiples, maybe user just sets multiple at the same time with commas.   i know they can be derived but would be fast calc based on created/started/completed. and would be pretty useful.\r\n\r\n  So this is all in memory, single server for now?\r\n  I think @rdallman fixed this last week.   sure @denismakogon ? did you test? i think the casing is still inconsistent for async but I haven't tested #370 fixes but haven't gotten around to updating it for some time  fn init, run, deploy, call\r\n  I have a function that failed halfway through, my browser got half the response then it crapped out. Then an error json halfway through:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n--\r\n\u00a0 | <html>\r\n\u00a0 | <head>\r\n\u00a0 | <meta charset=\"UTF-8\">\r\n\u00a0 | <title>My page</title>\r\n\u00a0 | </head>\r\n\u00a0 | <body>\r\n\u00a0 | <h1>My page</h1>\r\n\u00a0 | <p>This is my app. It may not be the best app, but it&#39;s my app.&lt;br/&gt;&lt;br/&gt;And it&#39;s multilingual!</p>\r\n\u00a0 | <div>\r\n\u00a0 | <div><a href=\"{\"error\":{\"message\":\"container exit code 1\"}}\r\n```\r\n\r\nIt should have 50X'd back to the user rather than return anything at all. \r\n\r\n```\r\nERRO[2712] api error                                     action=\"server.handleRunnerRequest)-fm\" app=helloapp code=502 error=\"container exit code 1\"\r\n```\r\n\r\nAlso, there's no call_id in that log line to pull up the container logs. \r\n\r\n This should return:\r\n\r\n- [ ] 500 internal server error\r\n- [ ] error JSON only\r\n I think a sane max response size should be in here too, so we don't let anyone blow out memory. 1MB? 10MB?  If more is required, they can use streaming mode.   Makes sense, but should this just be an option?  Seems like something we'd want baked in (limiting request size), and probably limiting response size per #326. \r\n  We need to decide whether the name should be officially FN, fn, Fn, fN, or.... well I can't think of any other options.\r\n\r\nMaybe I'll leave a comment for each option and people can upvote. FN Fn fn fN something else.....?  f(n)?\r\n My argument is that Fn, when written in copy, blogs, articles, etc, feels a little strange as lowercase. It's a proper noun, like Docker, or Kubernetes. Both their CLI's are lowercase of course (docker, kubectl) but you wouldn't write about them in all lowercase.\r\n\r\nthoughts?  Looks related to this: https://github.com/fnproject/fn/issues/256\r\n We could maybe simplify things a bit and avoid the issues described above be enforcing some rules, such as:\r\n\r\n1.  wildcards can only be used in the last segment of a path\r\n1. you cannot define any routes that conflict with the wildcard (ie: no path can contain the same prefix)\r\n\r\nSo in @zootalures 's conflict in main description:\r\n\r\n```\r\na) /path/to/fn\r\nb) /path/to/fn/*\r\n```\r\n\r\nWhichever is added second would be rejected. If b is the route the user added, it would match on anything that starts with `/path/to/fn`. \r\n\r\nIn @rdallman 's conflicting examples:\r\n\r\n```\r\na -> /app/path/to/*\r\nb -> /app/path/to/john - REJECTED\r\nc -> /app/path/to/bobby - REJECTED\r\nd -> /app/foo\r\n```\r\n\r\nIf you added the wildcard after b or c, it would also be rejected. \r\n @zootalures please add Oracle as a public association to your Github account to pass this CLA check... thanks. oh this is old. well still needs to be done though.  Kind of thinking we should just wildcard enable it by default, seems like almost all modern apps do this now. \r\n\r\nAnd perhaps have a way for user to restrict it if they like, but default is open. \r\n\r\nSome info on Lambda's handling of it: https://stackoverflow.com/questions/31911898/configure-cors-response-headers-on-aws-lambda\r\n Thanks for the bug report, that should work as outlined: users should be able to set headers on the response from a function. There are some tests that verify this is possible and I have some confidence that works at the fn level - it smells like this issue is at the fdk or function level. can dig into this to debug, some questions that may help though: the code above is using an fdk to do this? an http trigger? which version of the fdk is being used? @johndevs excellent, thanks. I think we can document this issue in our docs and then close it?  Continuing discussion from here: https://github.com/fnproject/cli/pull/23\r\n\r\n@rdallman @carimura \r\n i'll give this some thought today but initial reactions:\r\n\r\n- I agree Name is confusing. is it a generic string? is it a directory? is it an image? \r\n\r\n- I agree we should follow convention as closely as possible\r\n\r\n- I don't think a Docker ID should be required inside the func.yaml but I can see a case where it can be. I'm open to an argument on this. I like the CLI's that allow a developer to push to multiple diff environments easily.\r\n\r\n- I think FN_REGISTRY should be FN_REGISTRY_USER.\r\n\r\n It's `FN_REGISTRY` because besides Docker Hub, you need the full qualified image name, eg: `index.docker.io/thechad/myimage`. \r\n\r\nThis is the fully qualified image name spec: `hostname[:port]/username/reponame[:tag]`\r\n\r\nFN_REGISTRY is this part: `hostname[:port]/username/`\r\n\r\nWe handle the name and tag automatically. \r\n\r\nAnd BTW, after you set this (which really isn't that difficult), the experience is pretty nice (ie: you don't have to think about Docker or registries anymore). \r\n  like what is a func.yaml file and why is it created?\r\n\r\nAlso the Fn ascii, this seems like a good place for that!\r\n\r\n  +1 on the `FN_` namespacing. \r\n\r\nNot sure about prefixing or not in headers, but at the very least, should be consistent. \r\n  a way to send x% of load to a new version of a function... or x% to func A and x% to func B, or version A/B, etc.\r\n\r\nlike a launchdarkly for funcs built into the platform\r\n\r\nMight be extension material and not core, but would be super awesome for production users. i\u2019m speculating need based on a preso from jeffconf I think. but I also know that launchdarkly is doing very well meaning there\u2019s a need for this type of stuff in app development.  \r\n`fn routes update myapp draw timeout 60`\r\n\r\ni'm explicitly setting the timeout of a known route, I shouldn't need the yaml file values to do this...  this would solve our Vista issue @zootalures   Kubernetes using: https://www.katacoda.com/\r\n\r\nLooks like we could do something similar. \r\n  yep, though I imagine it's encapsulated in various issues, it may serve as a fair warning to leave the placeholder since it's obvious here for somebody getting acclimated with the project. closing makes sense too.  Looks good to me overall, too much to review everything, but the main parts look good. If tests are passing, let's just go with it and we'll find and fix bugs quickly. \r\n  Requires/based off #263 \r\n  Continuing this conversation: https://github.com/fnproject/fn/pull/213#issuecomment-322430681\r\n\r\nI don't really have an objection to one way or the other, but we should at least be consistent. If we use `FN_FORMAT`, we should prefix the rest with `FN_`. And vice versa. \r\n  For any function with a `func.yaml` specifying `memory`, creating a route with `fn routes create myapp /myroute` will not set the `memory` configuration on the route from the `memory` key in `func.yml`.\r\n\r\ne.g.\r\n\r\n```bash\r\n$ cat func.yaml\r\nname: willprice/fn-memory-limits\r\nversion: 0.0.1\r\nruntime: go\r\nentrypoint: ./func\r\npath: /fn-memory-limits\r\nmemory: 512\r\n\r\n$ fn apps create myapp\r\n\r\n$ fn routes create myapp /t\r\n\r\n$ fn routes inspect myapp /t\r\n{\r\n\t\"format\": \"default\",\r\n\t\"idle_timeout\": 30,\r\n\t\"image\": \"willprice/fn-memory-limits:0.0.1\",\r\n\t\"memory\": 128,\r\n\t\"path\": \"/t\",\r\n\t\"timeout\": 30,\r\n\t\"type\": \"sync\"\r\n}\r\n``` There's some useful functions for debugging this stuff at https://gitlab-odx.oracle.com/will_p/fn-memory-functions (Oracle network only) It's possible these changes might fix it: https://github.com/fnproject/cli/pull/15 cc @denismakogon \r\n\r\n That's true. Recent commit fixes all this mismatches. Will try to repro tomorrow with newest `fn` cli.  ```\r\n$ mkdir func\r\n$ cd func\r\n$ touch func.go\r\n$ fn init\r\nFound go, assuming go runtime.\r\nfunc.yaml created\r\n$ ls\r\nfunc.go   func.yaml\r\n$ fn build\r\nError: image name must have an owner and name, eg: username/myfunc. Be sure to set FN_REGISTRY env var or pass in --registry.\r\n$ cat func.yaml\r\nname: func\r\nversion: 0.0.1\r\nruntime: go\r\nentrypoint: ./func\r\n```\r\n\r\nWe should probably set it to something like `example/func` so one can at least build and test locally. You need to set FN_REGISTRY env var so it knows what registry to prefix to the name. If using Docker Hub, just the username is required. `export FN_REGISTRY=dockerhubusername`\r\n That's the point. Is not restrictive, not documented and causing bad UX. There's CLI related issue for this I've filed few days ago. So it's worth forcing users to use --registry or set env car wherever it's critical. We could allow no username/registry for `fn build` and `fn run` I suppose. Even `fn deploy --local`. \r\n @denismakogon not sure what you mean, the func.yaml in the issue description is totally fine, it's the way it should be. \r\n route update also requires registry, but implicitly, because it uses `ImageName` method, that pulls registry env var and such thing happens across CLI code. @willprice did you try setting FN_REGISTRY?\r\n  Invoking a function with a GET request with a body fails to pass the body on to the container, i.e. it is invoked with no input on STDIN (for cold functions, haven't tried hot functions); I understand that this is not adherent to the HTTP spec, although most servers permit this usage; is this a conscious decision? If not I suggest that functions should be able to support GET requests with bodies in case users need to invoke (badly) written functions that expect GET requests with a body. Agree with Reed. Since HTTP spec is not super clear of how data should be represented in GET, we can agree to accept data in request body during GET requests.  Initially started working on changing the RunnerListener and merging TaskListener from #247 , but  turned into something else. This drops the various different structs that were the same thing -- Task, Config, FnCall -- and the translation methods to convert between them. Now it's just a single Task struct. \r\n\r\nNote: I think `Task` should be renamed to `Call` to be consistent. We're calling everything a function call, not a task. \r\n I recommend to add Call Log structure to the list as well, since each task will have log entry in any way. @denismakogon Since log is returned in separate API, I think it makes sense to keep them separate. Kind of have to deal with logs separately for the most part. \r\n\r\n  What we have in git should never be different than what `glide install` does, and if it is, we're doing it wrong.  And since when did `glide install` not provide reproducible builds?  `glide update` sure, but install?\r\n  You sure you have it set?   Oh, I see what you're saying. Should just error out sooner.  Try cli version 0.3.72.\r\n  So, create any kind of hot function with malformed name for container and try to run it.\r\nFN server logs:\r\n```\r\nINFO[0167] Pulling image                                 image=\"denismakogon/tweet-dispatch:0.0.1\" registry=\"https://registry.hub.docker.com\" stack=Prepare username=denismakogon\r\nERRO[0170] Failed to pull image                          error=\"API error (404): {\\\"message\\\":\\\"manifest for denismakogon/tweet-dispatch:0.0.1 not found\\\"}\\n\" image=\"denismakogon/tweet-dispatch:0.0.1\" registry=\"https://registry.hub.docker.com\" stack=Prepare username=denismakogon\r\nERRO[0170] hot function failure detected                 app=where-is-it error=\"Failed to pull image 'denismakogon/tweet-dispatch:0.0.1': API error (404): {\\\"message\\\":\\\"manifest for denismakogon/tweet-dispatch:0.0.1 not found\\\"}\\n\" format=http hot_id=01BRMCCZKV07WG400000000000 idle_timeout=2m0s image=\"denismakogon/tweet-dispatch:0.0.1\" memory=256 route=/tweet-dispatch\r\n```\r\nbut connection still open between client (curl) and fn server.  See this one first: https://github.com/fnproject/fn/pull/252 Is this required after #252? Reopen if still needed.   Moved to https://github.com/fnproject/cli That was merged after it was moved, we'll have redo that PR on the cli repo.   @hhexo looks good, but cli is moving to this repo now: https://github.com/fnproject/cli\r\n\r\nCould you redo this PR over there?\r\n @hhexo you should have write now.   So, I've seen such thing yesterday, in my particular case hot + async doesn't work. Thing that you've faced with looks like hot is broken for  sync and Fn creates new container each new request (works as cold, isn't it weird?). I'd say this needs further investigation.\r\n@rdallman @treeder @rdallman there's what i have:\r\n- [hot function](https://github.com/denismakogon/voteapp/blob/master/votetaskhot/func.go)\r\n- [it's initial configuration](https://github.com/denismakogon/voteapp/blob/master/votetaskhot/func.yaml)\r\n- it's sync\r\n```\r\nfn routes i votes /vote-hot\r\n{\r\n\t\"format\": \"http\",\r\n\t\"idle_timeout\": 30,\r\n\t\"image\": \"denismakogon/votetask-hot:0.0.14\",\r\n\t\"memory\": 128,\r\n\t\"path\": \"/vote-hot\",\r\n\t\"timeout\": 60,\r\n\t\"type\": \"sync\"\r\n}\r\n\r\n```\r\nWhen submitting POST request to FN server to run this func logs shows following lines:\r\n```\r\ntime=\"2017-08-24T10:35:39+03:00\" level=debug msg=\"Finding route on datastore\" action=\"server.handleRunnerRequest)-fm\" app=votes call_id=01BR9JP0FG07WG200000000000 path=\"/vote-hot\" route=\"/vote-hot\" \r\ntime=\"2017-08-24T10:35:39+03:00\" level=debug msg=\"Got route from datastore\" action=\"server.handleRunnerRequest)-fm\" app=votes call_id=01BR9JP0FG07WG200000000000 image=\"denismakogon/votetask-hot:0.0.14\" path=\"/vote-hot\" route=\"/vote-hot\" \r\ntime=\"2017-08-24T10:35:39+03:00\" level=debug msg=\"Starting container execution\" container=task-1503560139250467341-01BR9JP0FG07WG200000000000 \r\ntime=\"2017-08-24T10:35:39+03:00\" level=info msg=\"{\"pg_db\": \"votes\", \"vote_id\": \"12e2b68e07ed02d\", \"pg_host\": \"172.17.0.4\", \"vote\": \"cats\", \"pg_port\": \"5432\", \"pg_user\": \"postgres\", \"pg_pswd\": \"postgres\"}\r\n\" action=\"server.handleRunnerRequest)-fm\" app=votes app_name=votes call_id=01BR9JP0FG07WG200000000000 image=\"denismakogon/votetask-hot:0.0.14\" path=\"/vote-hot\" route=\"/vote-hot\" user_log=true \r\n```\r\nWhich is totally OK, but hot func container is not suspended at the end of idle timeout and fn server shows following error:\r\n```\r\ntime=\"2017-08-24T10:37:39+03:00\" level=error msg=\"error streaming docker stats for task\" call_id=01BR9JP0FG07WG200000000000 container=task-1503560139250467341-01BR9JP0FG07WG200000000000 error=\"net/http: request canceled (Client.Timeout exceeded while reading body)\" \r\n```\r\nSo, here's my assumption, [example](https://github.com/fnproject/fn/blob/master/examples/tutorial/hotfunctions/http/func.go) that we have for hot function (that works for sure) sends to STDOUT HTTP 500 if no data supplied. And then function container gets suspended at the end of idle timeout. But my func sends nothing to STDOUT if no data supplied via STDIN and that makes hot path break apart.\r\n\r\nDocker says that container still up and running:\r\n```\r\ndocker ps -a\r\nCONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS              PORTS                    NAMES\r\nf42e274a9540        denismakogon/votetask-hot:0.0.14   \"./func\"                 8 minutes ago       Up 8 minutes                                 task-1503560139250467341-01BR9JP0FG07WG200000000000\r\n```\r\n\r\nIt appears that hot path fails if container send responses to stdout **ONLY** when user sends a request. And does not fail if container sends HTTP 500 (see [example](https://github.com/fnproject/fn/blob/master/examples/tutorial/hotfunctions/http/func.go)) when nothing being sent to STDIN.\r\n\r\n\r\ncc @jan-g  On Thu, Aug 24, 2017 at 5:57 PM Reed Allman <notifications@github.com>\nwrote:\n\n> again, time=\"2017-08-24T10:37:39+03:00\" level=error msg=\"error streaming\n> docker stats for task\" call_id=01BR9JP0FG07WG200000000000\n> container=task-1503560139250467341-01BR9JP0FG07WG200000000000\n> error=\"net/http: request canceled (Client.Timeout exceeded while reading\n> body)\" is basically expected upon task completion (shut down the stats\n> stream, forcefully), there's no reason to reference this. it was worthwhile\n> to have when figuring out why tasks didn't have stats but now it's causing\n> all sorts of made up bugs so maybe it's not worth it to log anymore.\n>\n> But my func sends nothing to STDOUT if no data supplied via STDIN and that\n> makes hot path break apart.\n>\n> yes, exactly. if the container doesn't actually write anything out it\n> blocks forever. we just need a context based io.Copy to catch this I\n> think, but in general users will have to at least write headers back\n> otherwise we have no clue that the task finished and will just wait for\n> output until the timeout (not sure how to get around this).\n>\n\nThis actually is not true, user should not supply anything to let fn know\nthat task is finished, http request in STDOUT means that task is finished.\nI tend to agree about io.Copy needs a idle timeout based context.\n\nTimeout actually never happens, got container that runs already for 5-6\nhours where timeout is 30s and idle timeout is 30s.\n\nthe STDIN with empty body should be taken care of by consuming headers and\n> having 0 Content-Length.\n>\n\nThis should be changed IMO. Or at least should be protocol-bound thing only.\n\nDo i have to respond with the result them immediately with an HTTP 500?!\n>\n> I don't think immediacy is necessary. will at least have to give headers\n> at some point (before timeout). the dispatch code is definitely not perfect\n> atm, it's getting it's hair and make up done at the moment though.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/fnproject/fn/issues/248#issuecomment-324660302>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AC5L6_iGiUdTVbfS0M9hQITRdOtbX9Q6ks5sbY87gaJpZM4O_3Xr>\n> .\n>\n @jan-g yeah, can confirm, even on sample app we have, hot path does not work, it just populates containers on each new request and they never hit idle timeout.\r\n  I would prefer we don't import it by default (at least for now), user/operator can add it as they can any other middleware/extension by copying main.go and adding it. \r\n Does that make sense @zootalures ?  Rather than change our main.go here, allow the user/operator to enable the completer by adding it as an extension (ie: fn-service can add this). We can document how to add the following in the completer README if they want to enable it:\r\n\r\n```\r\ncompleter.SetupFromEnv(ctx,funcServer)\r\n```\r\n\r\nThe TaskListener stuff can stay, but I'm not sure how that's different than the RunnerListener?\r\n I think we need to merge TaskListener and RunnerListener, I believe they are intended for the same purpose. `RunnerListener.BeforeDispatch` (bad method name) is just called too early. If we keep TaskListener, then let's remove RunnerListener and add `AfterTaskCompletes`. Or keep RunnerListener, but move where it's called to where `FireBeforeTaskStart` as in this PR. And change the names to `RunnerListener.BeforeRun` and `RunnerListener.AfterRun` or something. \r\n\r\nI can take a stab at merging these if you'd like. \r\n  Update to 0.3.68 and see if it fixes this.   You must not have latest cli, that DOCKERHUB_USERNAME should no longer exist: https://github.com/fnproject/fn/commit/d3f349804eef7f2acdd1455d7d2adea914c6c525#diff-c06e759c3897ff9443e56c7d1367e6ddL91\r\n  Assume you have route:\r\n```\r\n{\r\n    \"config\": {\r\n        \"TEST\": \"A\",\r\n        \"test\": \"b\"\r\n    },\r\n    \"format\": \"default\",\r\n    \"idle_timeout\": 30,\r\n    \"image\": \"denismakogon/os.environ\",\r\n    \"memory\": 128,\r\n    \"path\": \"/os.environ\",\r\n    \"timeout\": 30,\r\n    \"type\": \"sync\"\r\n}\r\n```\r\nSo, at function site developer expect to have env variables from config:\r\n```\r\nTEST=A\r\ntest=b\r\n```\r\nBut it appears that on func site only env variable available (in this particular case - `TEST=b`).\r\nThis [line](https://github.com/fnproject/fn/blob/master/api/server/runner.go#L31) breaks config by upper casing all config keys.\r\n @treeder @hibooboo2 @carimura I think @rdallman 's suggestion makes sense, just use exactly what user enters.   At server side each header from route renamed to `HEADER_{header-original-name}`, but at `fn run` we just set them as is so they are not available at function site. @rdallman i thought there's reason why we did so. And, correct me if i'm wrong, that was done to prevent collisions, no?     No, we should fix the link. Fixed.   +1, makes sense. So is this for BYOD (bring your own dockerfile)?  Or is this for an image that exists already somewhere?\r\n  Can we just keep it as seconds always? Which is how it was originally I believe. No units. \r\n\r\n In CLI no matter via args or func.yaml both timeouts are being accepted as type `time.Duration` so if you pass int value `120` it means that you setting timeout to `120 nanoseconds`, that's why when you setting timeout through CLI args it asks you for units: `ns`, `s`, `m`, `h`.\r\n\r\nSo, i think the problem is not in overriding values in func.yaml but rather than not fail if no units specified, i.e. implicit duration casting.\r\n@treeder @carimura  It's supposed to be seconds, always been that way. \r\n In CLI args it's never been that way. It might be a bit different from func.yaml, I think this both should be consistent and in order to simplify code func.yaml should enforce users to specify units for time properties just as CLI args. I'm not saying that's not the case, but whoever implemented it, did it wrong. It was always supposed to be in seconds:\r\n\r\n* https://github.com/fnproject/fn/blob/master/docs/swagger.yml#L522-L531\r\n* https://github.com/fnproject/fn/blob/605806ed6eb789e62442ddbe0eaad3dd033d9ab1/docs/function-file.md\r\n\r\nSo let's implement #227 to fix this. \r\n @treeder #207 addresses certain part of this problem. But it's still unclear to me after which operation func.yaml gets modified.  API impact:\r\n  We need to drop default value for type because it brought this type of bugs.\r\n  Starting this patch users should specify route type through CLI or func.yml\r\n\r\nCloses: #222 \r\n Yeah, it happens to all fields, defaults overriding all route attributes. @rdallman  @rdallman fixed, now route attributes remain the same (if not explicitly changed via request body) while patching route. There's one https://github.com/fnproject/fn/blob/master/test/fn-api-tests/routes_test.go#L54 but i think it needs to updated/extended. Will fix that. @rdallman @hibooboo2 @treeder  @hibooboo2 thanks for review. Yeah, Reed should do final review and merge. Thanks Reed. Merging.  Wasn't fixed. \r\n Closing in favor of: https://github.com/fnproject/cli/issues/32\r\n  It appears that when you trying to update route config through HTTP PATCH all route attributes change corresponding to defaults.  How about `fn bump --major` and `fn bump --minor` ?\r\n Fixed here: https://github.com/fnproject/cli/pull/8  This one has always bugged me, definitely agree we need a better solution for different users. Perhaps we just store the function name (container name without the username), then the Docker registry [host[username]] is retrieved from elsewhere -- an env var, some kind of separate context like you suggest, a separate private file that doesn't get checked in, etc. \r\n\r\nThen it's `fn init myfunc` and everything should work as is locally, until you push/deploy, which will require setting your docker hub username at a minimum. \r\n So after slack discussion, a simple solution for this is to allow an env var and cli flag for this.  User must use one of these so will require doc updates. \r\n\r\n### ENV VAR\r\n\r\n`FN_REGISTRY`\r\neg: `export FN_REGISTRY=registry.hub.docker.com/username`\r\n\r\n### CLI Flag\r\n\r\nThis will be on `fn deploy`.\r\neg: `fn deploy --registry registry.hub.docker.com/username`\r\n\r\nA follow up could be to have some config files that can store configs and contexts (eg: `local`, `staging`, but the env var and flag will still be available regardless. \r\n  I tend to agree with Reed. This messages appearing because of OS rights for `/var/run/docker.sock:/var/run/docker.sock`. `fn start` really expects to docker to be configured to listen on file socket rather than remote IP.\r\n\r\nFor instance `fn start` doesn't work for me because my Docker instance runs on a remote host. So, it'll be better to make it more friendly to other cases except implemented one.\r\n\r\n   Just opened this one per discussion https://proddev-odx.slack.com/conversation/C6FA7FS90/p1502478950983533  @delabassee can you please push your branch to upstream and then create PR from that branch, our CI does not allow to run checks against forks. We need CI to be green to merge this PR. @delabassee sure, that's what I'm asking for. @delabassee can you please rebase your change and do force push? Thanks!  Inside of the transaction (while updating app), we are querying for the app, so we know that it exists, so 0 rows affected means that we're trying to update app with exact the same data as stored in backend.\r\n\r\nCloses: #212   @rdallman why did you change the name to `FN_FORMAT`?  Can we change it back given that none of the others are prefixed with `FN_`?\r\n  It's still there, confirmed.  Sounds like stuff that should go in func.yaml. Good idea though. \r\n func.yaml is definitely meant to be checked in as it defines the function and what it requires to run. Hence why you don't put secrets in it. But I like the idea of describing the config/secrets that it requires in the func.yaml like you suggest here. \r\n\r\n  Guys, we need async, this isn't just for APIs. How would you propose to handle tons of events from something like IOT devices or some streaming service, like kinesis -> lambda. How do you efficiently scale that out without queues to act as buffers? You either need resources that can handle any amount of traffic at once so we have a massive number of machines sitting idle, or you use queues (that's what they are for). \r\n The comments above from @oracloud and @rdallman talk about \"lopping off async\", so it sounds like it's part of the discussion unless I read it wrong. But since I guess that's not part of this discussion and we are keeping it, then yes, agree that it should mostly follow the same path other than the queue in the middle for async. Anywho...\r\n\r\nAll in all, very much in favor of the the proposed changes, it's quite a mess right now. \r\n\r\nOne suggestion: in your proposed layers, I feel like the agent might be doing too much. ie: why does a sync request need an agent?  A sync request can just go right through the system and either run or 503. \r\n\r\n## Sync:\r\n\r\n1. Request comes in, hits http layer\r\n1. Http layer calls GetSlot(...)\r\n1. If slot available, run it (call Slot.Exec()). If not, 503\r\n\r\n## Async:\r\n\r\n1. Request comes in, hits http layer. \r\n1. Straight onto MQ (through agent layer to abstract it, sure).\r\n\r\nSometime in the not too distant future:\r\n\r\n1. Every X time, agent checks `YoAnySlotsAvailable()` (maybe reserve slot for a second to check MQ?)\r\n1. If yes, get task from MQ, run it (call Slot.Exec()). If not, do nothing.\r\n\r\nThis is obviously very high level and missing the little details like who/what deletes messages from the queue, but I think this should be the general idea. Everything below slot.Exec() can be the exact same path with some slightly different implementations of particular methods. For instance, a `task.AfterComplete()` method could be called on the task and async would delete the MQ message, while sync would do nothing. \r\n  While using HTTP protocol hot function receives only `HTTP/1.1 GET /` with user data as request body.\r\n\r\nAs user i want my function to react on different HTTP requests, here's an example:\r\n\r\nFollowing request:\r\n`curl -X POST localhost:8080/r/app/route -d '{\"name\":\"john\"}'`\r\n\r\nshould be converted to:\r\n```\r\nPOST / HTTP/1.1\r\nHost: localhost:8080\r\nContent-Length: 15\r\nContent-Type: application/x-www-form-urlencoded\r\nUser-Agent: curl/7.51.0\r\n\r\n{\"name\":\"john\"}\r\n\r\n```\r\n\r\nSo, hot function should receive exact the same request as it was submitted to FN server.\r\n @rdallman \r\n\r\nAlso, there's a thought about defining HTTP path for hot function, by default it equals to `/`, what we'd define HTTP based on what is being mentioned in FN route call, here's an example:\r\n\r\n- if user sends a request to `localhost:8080/r/app/route` his function will receive request with HTTP path `/`\r\n- if user sends a request to `localhost:8080/r/app/route/users?is_admin=true&id=0` then hot function will receive request with HTTP path `/users?is_admin=true&id=0`\r\n\r\nSo, the pattern in: `r/{app}/{route}{function_route}` where `{function_route}` is in-function routing rule.\r\n\r\nHaving this enhancement developers will be capable to implement in-function routing while using HTTP-over-STDIN wrappers (like regular HTTP server, but uses STDIN instead of TCP socket).\r\n As an addition to body of this ticket. Server reads body only in case of HTTP POST request, but ignores PUT, PATCH, DELETE, GET with data ([GET with side-effects](http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.9)). @rdallman based on what's said above and taking into account #208, having an ability to send requests with different paths we can give developers a chance to implement regular HTTP servers that work as functions instead of investigating what kind of request that was at function's side.  At this moment each hot function accepts requests through http-over-stdin protocol.\r\nThis means that each function should implement http-over-stdin parser (it's native for go only AFAIK).\r\nIn order to simplify developer experience and choice of http frameworks (to build http servers) we might consider to support HTTP-over-TCP protocol.\r\n\r\nHow it's different?\r\n------------------\r\nFor HTTP protocol each time user submits a request its body being used to form HTTP request that would be dumped to STDIN\r\n\r\nFor HTTP-over-TCP each request would be written to a TCP socket, function (basically http server) will recognise it as regular HTTP request accepted through network\r\n\r\nImpacts to COE orchestration?\r\n-------------------------------\r\nEach container must expose port (random) internally in order to establish TCP connection between FN server and function.\r\n\r\n  Closes: #197\r\nCloses: #196\r\nCloses: #227\r\nCloses: #226 \r\n @mhaji you might try it out, `fn run` now accepts `--memory` and passes it down to `docker run`.\r\nHere's how it works:\r\nif you'd run plain `fn run`, it will look for func.yaml and will pick `memory` from there, if you'd run `fn run username/fnimage[:tag]` then you might pass `--memory` but by default it's 128Mb.\r\n\r\nI assume you'd ask about cases when func.yaml doesn't have memory, so in this case you'd need to regenerate func.yaml with newer CLI, you'll have something similar to:\r\n```\r\nroute:\r\n  config: {}\r\n  format: default\r\n  headers: {}\r\n  idletimeout: 30\r\n  image: denismakogon/hotfnpy-cold:0.0.10\r\n  memory: 128\r\n  path: /hotfnpy-hot\r\n  timeout: 30\r\n  type: sync\r\nname: denismakogon/hotfnpy-cold\r\nversion: 0.0.10\r\nruntime: python3\r\n```\r\n @mhaji according to how that command was implemented, if you're not specifying an image, memory will be picked up from func.yaml. The same thing relates to route config, headers, timeout(somehow). @mhaji @oracloud can you please review? @rdallman @carimura can you try it out and do, possibly, a review?\r\n @treeder @mhaji @oracloud @rdallman Regarding @mhaji 's comment, the flag should always override the func.yaml, so `fn run --memory 512` should override what's in the func.yaml. @denismakogon  @treeder @mhaji done, please check. LGTM, but @rdallman should take a quick gander since it was his suggestion to do this in #197 . \r\n @treeder Ok, i agree that user impact should be minimum, that's why recent changes reverting impact and func.yaml remains the same (see changes). Had to add new struct type - flat func file that looks like original func file but it's used to setup func file right after marshaling/unmarshaling from/to file. There might be another way to do this, if so - let me know.\r\n func.yaml create using `fn init` looks like:\r\n```\r\nname: funcy/go\r\nversion: 0.0.1\r\nruntime: go\r\nmemory: 128\r\nformat: default\r\ntimeout: 30\r\npath: /go\r\n```   removing backslash that causes HTTP 301 Redirect\r\n\r\n[GIN-debug] redirecting request 301: /v1/apps/testapp/calls/ --> /v1/apps/testapp/calls  We suggest people use their own Dockerfile if they want to do something special like change the base image (if there's a Dockerfile in the directory, it will use that rather than use our generated one). Is that enough to resolve the issue you're trying to solve here?\r\n  @oracloud your turn.  What's it doing differently?  To get latest urfave/cli. \r\n  @rdallman I see no problem in creating specific images, we already do that just take a look at number of images at https://hub.docker.com/r/funcy/ most of those images are test images, so it's not kinda big problem we don't want to deal with. We just need more test cases to define.\r\nIf you have such then just start listing them here.  Ahh, was just trying to figure out how to deal with this, urfave/cli doesn't handle this very nicely or consistently (I think they've changed it various times). Even on current master, they say an error should propogate up to the top, but it [doesn't](https://github.com/fnproject/fn/blob/master/cli/main.go#L134).\r\n\r\nAnd you can find a bunch of related issues here: https://github.com/urfave/cli/search?q=exit+code&type=Issues&utf8=%E2%9C%93 Now that I say that, just tried it on master (the version we're using is from Nov. 2016), and it seems to actually propogate the error to the top: \r\n\r\nThis code:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"errors\"\r\n\t\"fmt\"\r\n\t\"os\"\r\n\r\n\t\"github.com/urfave/cli\"\r\n)\r\n\r\nfunc main() {\r\n\tapp := cli.NewApp()\r\n\tapp.Name = \"boom\"\r\n\tapp.Usage = \"make an explosive entrance\"\r\n\tapp.Action = func(c *cli.Context) error {\r\n\t\tfmt.Println(\"boom! I say!\")\r\n\t\treturn errors.New(\"this is an error yo\")\r\n\t}\r\n\r\n\terr := app.Run(os.Args)\r\n\tif err != nil {\r\n\t\tfmt.Println(\"ERROR:\", err)\r\n                os.Exit(1)\r\n\t}\r\n}\r\n```\r\n\r\nUsing version we have locked in:\r\n\r\n```sh\r\n\u276f ./test.sh\r\n+ go build\r\n+ ./clierr\r\nboom! I say!\r\nthis is an error yo\r\n```\r\n\r\nError is NOT propogated up. \r\n\r\nOn urfave/cli master:\r\n\r\n```sh\r\n\u276f ./test.sh\r\n+ go build\r\n+ ./clierr\r\nboom! I say!\r\nERROR: this is an error yo\r\n```\r\n\r\nError is propogated properly. The latest version is probably what we expect and I believe solves the problem this PR is trying to fix. \r\n PR to get latest urfave/cli: https://github.com/fnproject/fn/pull/190  Improves UX by displaying call ID when using following command:\r\nfor async\r\n```\r\nfn call app /fn\r\nCall ID: 01BPKQ52F907WGJ00000000000\r\n```\r\nfor sync\r\n```\r\nfn call app /fn\r\nCall ID: 01BPKQ2NV707WGG00000000000\r\n<function response body>\r\n```\r\n\r\ncc @mhaji @mhaji yeah, adding check for API errors to bring them back again. It'll be:\r\n```\r\nfn call i-dont-exist /neither-do-i\r\nError: App not found\r\n``` @oracloud i'd say call ID should be displayed while using CLI for sync calls because we already doing this for async calls and using current CLI (especially `fn call`) does not give you any chance to get call ID which is quite necessary for further problem investigations (it may be simple without it if you have 5-10 calls at max, but when you have 1k+ calls it becomes problematic). So, displaying call ID wherever it is necessary is good value-add.\r\n\r\n@mhaji this is not necessary, because we don't know how to react to status codes, so JSON decoding actually helps a lot here, because if everything OK (HTTP 200, 202, 201, etc.) we'd have structure filled with non-empty `callID`, if everything else (HTTP 400, 404, 500, etc.) structure will have `error` filled what comes in `{\"error\":{\"message\": \"blah\"}}`. So, no need to double-check status codes.\r\n CLI flag looks better option, check latest changes. @mhaji we can do opposite thing, be verbose by default and mute when flag specified. Ok will change, but still not convinced regarding stderr, why stdout is bad for this? @mhaji @oracloud done, check latest changes. Not to add more to an already lengthy discussion, but I think we should treat sync and async differently. The **only** important information you can get from an async call is the `call_id` and you would probably always want to get that back. For sync, you don't really need or want the `call_id` and has very little value since you get the actual result instead. It's similar to `docker run` with and without `-d` flag. eg:\r\n\r\n```sh\r\n\u276f docker run --rm treeder/hello\r\nHello World!\r\n\u276f docker run --rm -d treeder/hello\r\nb5b69a3d50bbb7f063d5516e5a17133c9940f55dd806a67b8d606cd2f756b769\r\n```\r\n\r\nI think we should do something like that. `fn call` should also behave identical to `fn run`, which also doesn't add any extra output other than the output of the container. \r\n @mhaji you should see the logs in the output.  I take that back, you see the logs on `fn run`. Good point.  @treeder done. Now it has the same behaviour as `docker run` as you've mentioned above. Well I'm not sure my comment applies anymore, per @mhaji 's comment. How do you see the logs of a sync function? What if it printed the call id only if there's an error?  Shows the call id and the error message, then user can pull up the logs with `fn logs`. \r\n \r\n @treeder In order to see sync call logs we need to get call ID to use `fn calls get <app> <call-id>` to get them.\r\n\r\n**What if it printed the call id only if there's an error?**\r\nFor both sync/async if error (there are couple types of errors that may appear) we might not get call ID, at least this is how API server acts.\r\n\r\nSo, i'd say that example that you've brought (`docker run`) is pretty good example because semantically fn CLI is very similar to docker commands, so if docker CLI is good in terms of UX then following the same steps would also give us certain benefit IMHO.\r\n  @denismakogon still doesn't help us debug sync calls on a remote server. Fine if it's all local, but debugging remote requires the call_id like you said.  @treeder what kind of debugging problems you are referring to? @mhaji i think Travis is out for couple days or so. This patch already writes call ID to stderr, now we need to agree would call ID be muted by default or not. write to STDERR - [done](https://github.com/fnproject/fn/pull/184/files#diff-5f0b97f2b16a98a72c0b937724ea7cd9R76).\r\n\r\nwith other stuff i'm fine with what we have here. @oracloud sure.   @mhaji if you are using async execution then you'll get your call ID as part of response. But if you're using sync then you'll get one in HTTP response headers `FN_CALL_ID` (assuming you'll use any kind of http clients but not fn CLI for calling funcs).\r\n\r\nIn order to get call objects you might try following command:\r\n```\r\nfn calls list --help\r\nNAME:\r\n   fn calls list - list all calls for specific app / route route is optional\r\n\r\nUSAGE:\r\n   fn calls list <app> [route]\r\n``` @mhaji check this one https://github.com/fnproject/fn/pull/184  Similar to #16 and #15 we need at least Python 3 wrapper exist.\r\n\r\nI've made some code already https://github.com/denismakogon/hotfn-py\r\nNeed further testing.\r\n Got certain weird behaviour. Got two functions: [hot](https://github.com/denismakogon/hotfn-py/tree/master/samples/hot) and [cold](https://github.com/denismakogon/hotfn-py/tree/master/samples/cold).\r\n\r\nHot function running fine using following commands:\r\n\r\n`HOT=True go run ../http_requests.go | python3 app.py` for hot\r\n\r\n`fn build && HOT=True go run ../http_requests.go | fn run` for hot\r\n\r\nAll seems to be Ok, but when trying to deploy function and run hot function - it stuck\r\nWhen extending timeout up to 300 seconds error appears in logs:\r\n```\r\ntime=\"2017-08-07T13:11:24+03:00\" level=debug msg=\"Finding route on datastore\" action=\"server.handleRunnerRequest)-fm\" app=testapp call_id=01BPY2TZTZ07WGC00000000000 path=\"/hotfnpy-cold\" route=\"/hotfnpy-cold\" \r\ntime=\"2017-08-07T13:11:24+03:00\" level=debug msg=\"Got route from datastore\" action=\"server.handleRunnerRequest)-fm\" app=testapp call_id=01BPY2TZTZ07WGC00000000000 image=\"denismakogon/hotfnpy-cold:0.0.1\" path=\"/hotfnpy-cold\" route=\"/hotfnpy-cold\" \r\ntime=\"2017-08-07T13:11:24+03:00\" level=debug msg=\"Starting container execution\" action=\"server.handleRunnerRequest)-fm\" app=testapp call_id=01BPY2TZTZ07WGC00000000000 container=task-1502100684642063447-01BPY2TZTZ07WGC00000000000 image=\"denismakogon/hotfnpy-cold:0.0.1\" route=\"/hotfnpy-cold\" \r\ntime=\"2017-08-07T13:13:24+03:00\" level=error msg=\"error streaming docker stats for task\" action=\"server.handleRunnerRequest)-fm\" app=testapp call_id=01BPY2TZTZ07WGC00000000000 container=task-1502100684642063447-01BPY2TZTZ07WGC00000000000 error=\"net/http: request canceled (Client.Timeout exceeded while reading body)\" image=\"denismakogon/hotfnpy-cold:0.0.1\" route=\"/hotfnpy-cold\" \r\ntime=\"2017-08-07T13:14:55+03:00\" level=error msg=\"error removing container\" container=task-1502100684642063447-01BPY2TZTZ07WGC00000000000 error=\"context canceled\" \r\n```\r\n@rdallman @treeder \r\n\r\nNot sure what causes problems here yet. @rdallman  So, i tried debugging a lot and it's not easy, here's why:\r\n\r\n- if `error streaming docker stats for task` appears then no call or log object created\r\n\r\n- it might happen that function writes to STDERR multiple times and function fails with some unexpected/unhandled error log is not going to be created\r\n\r\n- we might consider to use `docker logs <ID>` instead of what we have in func logger\r\n\r\n- create call object before execution and update later, this will require to introduce few more statuses except those we already have (at least we'd know where we stuck).\r\n Ok, to be clear here's what happens:\r\ntask times out no matter how big timeout is, function does not write any logs.\r\n\r\nTest function https://github.com/denismakogon/hotfn-py/tree/master/samples/hot\r\n\r\n`fn build && HOT=True go run ../http_requests.go | fn run` works\r\n`HOT=True go run ../http_requests.go | docker run --rm -i denismakogon/hotfnpy-hot` works\r\n @rdallman \r\n\r\n> did the task produce any logs?\r\n\r\nNope, code inside function [will write stdin to stderr](https://github.com/denismakogon/hotfn-py/blob/master/samples/hot/app.py#L38) in first place before parsing.\r\n\r\n> you can comment out the line to remove the container and run it locally again and then check docker logs\r\n\r\nAlready tried, nothing.\r\n\r\n>  is the HOT env var being correctly passed into the function?\r\n\r\n`HOT` env variable is not for function rather than for [script](https://github.com/denismakogon/hotfn-py/blob/master/samples/http_requests.go) that generates 1 or more HTTP requests and writes them to STDOUT that is piped to STDIN to curl, fn CLI or whatever.\r\n\r\n> does the task run at all\r\n\r\nTask gets started and then gets cancelled by timeout or if timeout upped to 300s following logs observed:\r\n```\r\ntime=\"2017-08-07T13:11:24+03:00\" level=debug msg=\"Finding route on datastore\" action=\"server.handleRunnerRequest)-fm\" app=testapp call_id=01BPY2TZTZ07WGC00000000000 path=\"/hotfnpy-cold\" route=\"/hotfnpy-cold\" \r\ntime=\"2017-08-07T13:11:24+03:00\" level=debug msg=\"Got route from datastore\" action=\"server.handleRunnerRequest)-fm\" app=testapp call_id=01BPY2TZTZ07WGC00000000000 image=\"denismakogon/hotfnpy-cold:0.0.1\" path=\"/hotfnpy-cold\" route=\"/hotfnpy-cold\" \r\ntime=\"2017-08-07T13:11:24+03:00\" level=debug msg=\"Starting container execution\" action=\"server.handleRunnerRequest)-fm\" app=testapp call_id=01BPY2TZTZ07WGC00000000000 container=task-1502100684642063447-01BPY2TZTZ07WGC00000000000 image=\"denismakogon/hotfnpy-cold:0.0.1\" route=\"/hotfnpy-cold\" \r\ntime=\"2017-08-07T13:13:24+03:00\" level=error msg=\"error streaming docker stats for task\" action=\"server.handleRunnerRequest)-fm\" app=testapp call_id=01BPY2TZTZ07WGC00000000000 container=task-1502100684642063447-01BPY2TZTZ07WGC00000000000 error=\"net/http: request canceled (Client.Timeout exceeded while reading body)\" image=\"denismakogon/hotfnpy-cold:0.0.1\" route=\"/hotfnpy-cold\" \r\ntime=\"2017-08-07T13:14:55+03:00\" level=error msg=\"error removing container\" container=task-1502100684642063447-01BPY2TZTZ07WGC00000000000 error=\"context canceled\" \r\n```\r\n\r\nHere's what i have.   Version check happens at start and every time attempting to add new node via API\r\n\r\nImplements #153  @rdallman waiting your feedback, thanks.  Also adds Go boilerplate for fn init, if you pass in the --runtime go flag. eg: `fn init --runtime go treeder/hello-go`\r\n\r\ncloses #144 \r\n  looks like an error to me, fatal logs will exit so don't see what's wrong here. also see a SIGINT next time you could just fix it if it's really this easy ;)  related to this https://github.com/iron-io/functions/issues/77   it would be really nice if we had a function that layered flags over the func file, if it's not present, instead of having to add a flag to ignore the func file altogether, but at least this gives the capability so we can merge it imo.  made some comments on https://github.com/fnproject/fn/pull/167 (oops). moving over  some of this can be quickly cleaned up but ultimately we have a much larger issue fixing async. we need to rethink whole thing basically. for one, all tasks share 1 queue, so it won't scale at all. for two, since we only use one queue we either have to try to reserve for the task timeout + some interval to give enough time to delete the message after the task times out or we need 2 levels of queues so that we can delete one when we pick up a task and one when the task gets actually run (so that we can ensure at least once execution), which will require reworking the queue system we use. this means probably reworking how we run async tasks and possibly adding more semantics onto the message queue backends. async tasks will likely need a way to ack that they've got a job to ensure they have exclusive access and then we need a way for them to be able to delete after the task has actually run. hoping to have a doc up next week w/ redesign of backend. we need to change how tasks get started altogether, due to timeout issues for sync and async (way that runner is written atm). will post doc once ready  this changes the behavior of hot containers:\r\n\r\n1) we are no longer populating a hot container with all of the env vars from the\r\nfirst request to start up that hot container. this will only populate the\r\ncontainer with any vars that are defined on the app or route.\r\n2) when env vars are changed on the route or app, we will now start up a new\r\nhot container that contains those changes.\r\n3) fixes a bug where we could have a collision if the image and path name\r\ncreated one, e.g. `/yo/foo` & `oze/yo:latest` collides with `/yo/fo` and\r\n`ooze/yo:latest` (if all other fields are held constant), since we're\r\nname spacing with app name in theory it would happen to the same user (though\r\nwe were relying on a comma delimiter there, not great). now we use NULL bytes\r\nwhich should be hard to get in through a json api ;) i added a sha1 to keep\r\nthe size of the (soon to be very large) map down, i don't expect collisions\r\nbut, well, it's a hash function.\r\n\r\na small note that we could add a few things to the hot container that will not\r\nchange on a request basis, such as `app_name`, `format` and `route` but it's a\r\nbit pedantic. ultimately, it's confusing imo that we have a different set of\r\nvars in the env and in the request itself for hot, which is unavoidable unless\r\nwe choose to omit setting env vars entirely, but it seems to be what the\r\npeople want (lmk, people, if otherwise).\r\n\r\ncloses #92  cold is unchanged (obviously). here's a hot example now:\r\n\r\n```\r\n\u2717: API_URL=http://localhost:8084 fn apps config set myapp MYKEY MYVALUE\r\nmyapp updated MYKEY with MYVALUE\r\n\u2717: curl -d '{\"yodawg\"}' localhost:8084/r/myapp/hotyodawg\r\nOS PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r\nOS HOSTNAME=91fb9ad606c4\r\nOS MYKEY=MYVALUE\r\nOS HOME=/root\r\nHello {\"yodawg\"}\r\nENV: Fn_format []string{\"http\"}\r\nENV: Format []string{\"http\"}\r\nENV: Header_content_length []string{\"10\"}\r\nENV: Header_content_type []string{\"application/x-www-form-urlencoded\"}\r\nENV: Header_user_agent []string{\"curl/7.52.1\"}\r\nENV: Request_url []string{\"http//localhost:8084/r/myapp/hotyodawg\"}\r\nENV: App_name []string{\"myapp\"}\r\nENV: Route []string{\"/hotyodawg\"}\r\nENV: Task-Id []string{\"01BP326ETD07WG600000000000\"}\r\nENV: Mykey []string{\"MYVALUE\"}\r\nENV: Call_id []string{\"01BP326ETD07WG600000000000\"}\r\nENV: Content-Length []string{\"10\"}\r\nENV: Header_accept []string{\"*/*\"}\r\nENV: Method []string{\"POST\"}\r\n\r\n\r\n\u2717: API_URL=http://localhost:8084 fn apps config set myapp MYBOO MYVALUE\r\nmyapp updated MYBOO with MYVALUE\r\n\u2717: curl -d '{\"yodawg\"}' localhost:8084/r/myapp/hotyodawg\r\nOS PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r\nOS HOSTNAME=91fb9ad606c4\r\nOS MYKEY=MYVALUE\r\nOS MYBOO=MYVALUE\r\nOS HOME=/root\r\nHello {\"yodawg\"}\r\nENV: Header_accept []string{\"*/*\"}\r\nENV: Myboo []string{\"MYVALUE\"}\r\nENV: Request_url []string{\"http//localhost:8084/r/myapp/hotyodawg\"}\r\nENV: App_name []string{\"myapp\"}\r\nENV: Content-Length []string{\"10\"}\r\nENV: Route []string{\"/hotyodawg\"}\r\nENV: Call_id []string{\"01BP3274RQ07WGA00000000000\"}\r\nENV: Fn_format []string{\"http\"}\r\nENV: Format []string{\"http\"}\r\nENV: Header_content_type []string{\"application/x-www-form-urlencoded\"}\r\nENV: Header_user_agent []string{\"curl/7.52.1\"}\r\nENV: Mykey []string{\"MYVALUE\"}\r\nENV: Header_content_length []string{\"10\"}\r\nENV: Method []string{\"POST\"}\r\nENV: Task-Id []string{\"01BP3274RQ07WGA00000000000\"}\r\n``` @treeder (i'll rope others from gl here) feedback / review please good news, we have no tests for hot functions at all that i can find :) no, i don't think my patch related to fixing a certain behavior is a great time to ask me to go add an entire test harness.\r\n\r\nif our tests were somewhat sane, i'd be happy to add one. turns out they are not. i'm more concerned with other tasks at the moment. if you want to be difficult, feel free to close this patch as I have no intention of doing that work here.\r\n\r\np.s. i don't think having test images is a great way to test, really. we should be able to mock just about everything, but the code at the moment does not make this easy, it is a weeks long task.\r\n\r\nedit: specifically, the issue is as it relates to mocking 'worker.go' and having a mock-able runner, hot executor (where we can check env vars, input, and output), and api layer (even bigger doozy than 'worker.go') @rdallman thanks, can you open separate ticket for writing test for this particular case, i might take it.\r\n\r\nAnyways, LGTM.  we should limit the timeout, specifically on sync requests (so that the LB won't time out), to something. for sync, maybe 2 minutes is reasonable? idk. for async, we can probably allow arbitrary length Sync should probably max at 60 seconds to match ELB?\r\n\r\nAsync, should probably set an arbitrary limit for now to try to enforce best practices. Can always increase. Can't decrease.  > maybe we should enforce these limits from fn-service and leave the OSS version flexible (i feel sweaty just thinking about the plumbing already).\r\n\r\n+1, let operator configure. But how about defaults of 60/60 like you said. \r\n  In gitlab by @carimura on Jul 26, 2017, 17:49\n\nideas discussed:\n\n- http://keepachangelog.com/en/1.0.0/\n- include change in release notes files w/ each PR\n- others and by soon, i meant many months later. assigning to meself and MMW   In gitlab by @hibooboo2 on Jul 25, 2017, 09:59\n\nCurrently we have these endpoints:\n\n```\nv1 := engine.Group(\"/v1\")\n\tv1.Use(s.middlewareWrapperFunc(ctx))\n\t{\n\t\tv1.GET(\"/apps\", s.handleAppList)\n\t\tv1.POST(\"/apps\", s.handleAppCreate)\n\n\t\tv1.GET(\"/apps/:app\", s.handleAppGet)\n\t\tv1.PATCH(\"/apps/:app\", s.handleAppUpdate)\n\t\tv1.DELETE(\"/apps/:app\", s.handleAppDelete)\n\n\t\tv1.GET(\"/routes\", s.handleRouteList)\n\n\t\tv1.GET(\"/calls/:call\", s.handleCallGet)\n\t\tv1.GET(\"/calls/:call/log\", s.handleCallLogGet)\n\t\tv1.DELETE(\"/calls/:call/log\", s.handleCallLogDelete)\n\n\t\tapps := v1.Group(\"/apps/:app\")\n\t\t{\n\t\t\tapps.GET(\"/routes\", s.handleRouteList)\n\t\t\tapps.POST(\"/routes\", s.handleRouteCreateOrUpdate)\n\t\t\tapps.GET(\"/routes/*route\", s.handleRouteGet)\n\t\t\tapps.PATCH(\"/routes/*route\", s.handleRouteCreateOrUpdate)\n\t\t\tapps.PUT(\"/routes/*route\", s.handleRouteCreateOrUpdate)\n\t\t\tapps.DELETE(\"/routes/*route\", s.handleRouteDelete)\n\t\t\tapps.GET(\"/calls/*route\", s.handleCallList)\n\t\t}\n\t}\n```\n\n\nIn order to simplify our Implementation of auth and make the api more uniform I suggest that it be this:\n\n```\nv1 := engine.Group(\"/v1\")\n\tv1.Use(s.middlewareWrapperFunc(ctx))\n\t{\n\t\tv1.GET(\"/apps\", s.handleAppList)\n\t\tv1.POST(\"/apps\", s.handleAppCreate)\n\n\t\tv1.GET(\"/apps/:app\", s.handleAppGet)\n\t\tv1.PATCH(\"/apps/:app\", s.handleAppUpdate)\n\t\tv1.DELETE(\"/apps/:app\", s.handleAppDelete)\n\n\t\t// remove this v1.GET(\"/routes\", s.handleRouteList)\n\n\t\tapps := v1.Group(\"/apps/:app\")\n\t\t{\n\t\t\tapps.GET(\"/routes\", s.handleRouteList)\n\t\t\tapps.POST(\"/routes\", s.handleRouteCreateOrUpdate)\n\t\t\tapps.GET(\"/routes/*route\", s.handleRouteGet)\n\t\t\tapps.PATCH(\"/routes/*route\", s.handleRouteCreateOrUpdate)\n\t\t\tapps.PUT(\"/routes/*route\", s.handleRouteCreateOrUpdate)\n\t\t\tapps.DELETE(\"/routes/*route\", s.handleRouteDelete)\n\t\t\tapps.GET(\"/calls/*route\", s.handleCallList)\n\t\t\tapps.GET(\"/calls/:call\", s.handleCallGet)\n\t\t\tapps.GET(\"/calls/:call/log\", s.handleCallLogGet)\n\t\t\tapps.DELETE(\"/calls/:call/log\", s.handleCallLogDelete)\n\t\t}\n\t}\n```\n\nThis will make things much easier to manage as well as make no sql really required on most calls to do auth for the commands.\nThis will also prevent snowflakes for auth in the future as almost all commands are on things that are at the core owned by an app. In gitlab by @hibooboo2 on Jul 25, 2017, 10:01\n\nchanged the description In gitlab by @hibooboo2 on Jul 25, 2017, 10:02\n\nmarked this issue as related to functions-service#1 In gitlab by @hibooboo2 on Jul 25, 2017, 10:02\n\nmarked this issue as related to functions-service#2 In gitlab by @hibooboo2 on Jul 25, 2017, 10:02\n\nremoved the relation with functions-service#2 In gitlab by @rdallman on Jul 25, 2017, 10:31\n\nnot elaborated on initially, but the big benefit here is that we don't have to, e.g. for `\"/calls/:call` look up the resource, see what app that call falls under, and then check that the token provided is authenticated for that resource. if we put all the urls under `/apps/:app` then we can authenticate without having to look up the resource being authenticated against. obviously, as an attack vector, spamming calls that may exist that you don't have access to is taxing on the db, too (can still spam missing ones). the main benefit is code clarity, we don't have to plumb auth down into each handler, we can do it in front of each handler, uniformly, and it will fall out. In gitlab by @hibooboo2 on Jul 25, 2017, 10:32\n\nYou are right @rdallman I did not specify that enough / word that well. Thank you. In gitlab by @hibooboo2 on Jul 25, 2017, 11:29\n\n@treeder You good with this. Was going to start on it. In gitlab by @treeder on Jul 25, 2017, 11:29\n\n+1, makes sense. In gitlab by @hibooboo2 on Jul 25, 2017, 11:32\n\nK\n:) In gitlab by @hibooboo2 on Jul 26, 2017, 09:42\n\nmentioned in merge request !130  In gitlab by @carimura on Jul 23, 2017, 14:17\n\nHere is log from two runs in a row of the same function.. notice how it went from version 0.0.121 to 0.0.72. VERY strange. This shouldn't happen.\n\n```\nfn-api-deployment-2577755329-gtqdn fn-api time=\"2017-07-23T21:06:31Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BNRMBQNW07WJJ00000000000 image=\"carimura/hello:0.0.121\" name=\"run.exec_time\" route=\"/hello\" type=time value=342.417621ms\nfn-api-deployment-2577755329-pnnl1 fn-api time=\"2017-07-23T21:06:34Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BNRMBVF307WJT00000000000 image=\"carimura/hello:0.0.72\" name=run.myapp.requests route=\"/hello\" type=count value=1\n``` In gitlab by @carimura on Jul 23, 2017, 14:17\n\nmentioned in issue #115 In gitlab by @hibooboo2 on Jul 24, 2017, 10:30\n\nmarked this issue as related to #146 In gitlab by @hibooboo2 on Jul 24, 2017, 10:31\n\nremoved the relation with #146 this has been resolved in c3630eaa418d16916f889d1a81ee0f00c4fa8f44 right ? @carimura reopen if you still see this.   In gitlab by @jan_grant on Jul 21, 2017, 05:20\n\nNot sure if this is a function of go's CLI parsing library, but\n\n    fn build --gibberish\n\nprints a usage message then exits 0. Most unix utilities exit non-zero if they can't parse their arguments.\n\n(This is kind of a \"wash your dog first\" low priority.) In gitlab by @will_p on Jul 21, 2017, 05:39\n\nThis is a bug in the urfave/cli library, an issue has been raised with them: https://github.com/urfave/cli/issues/610 Yep, looks like flag errors are propogated up now too. \r\n\r\nOld:\r\n\r\n```sh\r\n\u276f fn build --gibberish\r\nIncorrect Usage: flag provided but not defined: -gibberish\r\n\r\nNAME:\r\n   fn build - build function version\r\n\r\nUSAGE:\r\n   fn build [command options] [arguments...]\r\n\r\nOPTIONS:\r\n   -v          verbose mode\r\n   --no-cache  Don't use docker cache\r\n```\r\n\r\nNew:\r\n\r\n```sh\r\n\u276f ./fn build --gibberish\r\nIncorrect Usage: flag provided but not defined: -gibberish\r\n\r\nNAME:\r\n   fn build - build function version\r\n\r\nUSAGE:\r\n   fn build [command options] [arguments...]\r\n\r\nOPTIONS:\r\n   -v          verbose mode\r\n   --no-cache  Don't use docker cache\r\n\r\nError occurred: flag provided but not defined: -gibberish, exiting...\r\n```  In gitlab by @treeder on Jul 19, 2017, 10:37\n\nAdd pagination to all list endpoints (apps, routes, calls, etc). In gitlab by @denismakogon on Jul 25, 2017, 14:21\n\nBased on https://tools.ietf.org/html/rfc5988 as part of API response we should return a link to next and previois data sets (similar to what Facebook does with its GraphQL):\n```\n{\n    \"apps\": {\n        ...\n    }\n    \"next: \"...\",\n    \"priv\": \"...\",\n}\n```\nDo we plan to support the same pattern?\n\nAFAIK, pagination in ReST API supposed to be based on some kind of ordering/sorting objects to let them be queried by chunks.\nSo, my questions are:\n*  what would be the ordering/sorting field for apps\n*  what would be the ordering/sorting field for routes\n\nIt's obvious that for calls and logs we have timestamps (`completed_at`). In gitlab by @treeder on Jul 25, 2017, 14:48\n\nI'm not sure about having the links (seems kind of wasteful?), but I think we should use cursors instead of page numbers. \n\nLike Twitter: https://dev.twitter.com/overview/api/cursoring and Google Datastore: https://cloud.google.com/datastore/docs/concepts/queries#datastore-limit-go or https://cloud.google.com/datastore/docs/reference/rest/v1/projects/runQuery . \n\nSo each query will return the results plus `next_cursor` and user passes in that `next_cursor` value to the next request to continue the results. In gitlab by @treeder on Jul 25, 2017, 14:48\n\nFor ordering, I'd say alphabetical for apps and routes, calls and logs by date descending.  In gitlab by @carimura on Jul 19, 2017, 08:23\n\nIf CLI args take precedence, then they should work w/o having the lower priority values present.\n\n```\n\u276f fn routes u -i carimura/resize128:0.0.1 myapp /resize128\nerror updating route: could not find function file\n``` In gitlab by @denismakogon on Jul 25, 2017, 14:00\n\nmentioned in commit 38cd8b783ca6e3f709cfd45926346b42d1243458 In gitlab by @denismakogon on Jul 25, 2017, 14:01\n\nmentioned in merge request !129  In gitlab by @rdallman on Jul 18, 2017, 13:12\n\nLike Tom Brady's children? ![9XHl18c](/uploads/a7377537f0094f516a60c58fc6b6439f/9XHl18c.gif)\n\nWe've discussed this many times but there doesn't seem to be a card for it (I looked). It seems like it would be possible to default to 'hot' regardless of format. Bear with me, but poke holes if there are blatant issues. This takes care of 2 'issues', one being having to use the http format (yes, even with easy to use wrappers) and the other is internally having to treat hot and cold differently (in our server code). Defaulting to 'hot' will still basically entail the user having their code a certain way (ideally, using our wrapper), but we don't really have to treat the two that much differently.\n\nUltimately, we _can_ run every container as 'hot', it's just that if not coded as such the container will so happen to exit (i.e. if they don't have a for loop / our wrapper). what this means is that as long as we don't queue up work against any container, expecting it to run more things, then that's ok and the container can exit (how it is now), it's just not optimal -- but if the code isn't there to do it, then whatever, not much we can do. It would be possible for us to use docker exec to change the env vars between executions with the `default` format, and it would be possible to frame STDIN with EOFs, are there other concerns here for `default` format?\n\nWould this give us a lot of sugar? I think this would give us two things really:\n\n* not having to make the distinction whether a function is 'hot' or 'cold' on the server. that is, not having to change the configuration for a route at all (where 'http' => 'hot'). if the code happens to loop, great. if not, nobody cares but things are a little slower. this would make it so if the user just updates their code they don't have to change 'format' on their route.\n* formats are less important as a distinction for hot/cold. as long as we say we frame 'default' with EOF then we can use it for 'hot'. obviously with wrappers this isn't such a big deal, but it's a little bit 'magic' to have to set your format to 'http' even though your code isn't explicitly doing http parsing (the wrapper hides it) and it's possible right now even to have a \"cold\" function that talks the 'http' format (just exit instead of looping, we can't prevent this). this also means in the server code we can hit the same execution path for any function invocation (instead of switching on format \"type\").\n\npossible cons:\n\n* it will be hard to tell whether a function is 'hot' or 'cold' based on format alone, which the argument could be made is already the case with 'http' anyway, since the user can just exit (obviously, the question is, why would they? but ignore that, it's only important that it's _possible_ is the point). \n* we're not _really_ defaulting to 'hot' since the code has to be a certain way, maybe that could be confusing\n\nrelated: https://gitlab-odx.oracle.com/odx/functions/issues/71 In gitlab by @rdallman on Jul 18, 2017, 13:13\n\ncc @ssmith @treeder +others In gitlab by @ssmith on Jul 18, 2017, 13:29\n\n@rdallman I can't say I completely understand what you wrote but are you saying that hot/cold and http/non-http are orthogonal and that hot/code is simply a matter of whether a container exits after it processes input?  \n\nDevelopers can write code that expects a http request text or raw text and in some languages (e.g., Java) the shim can figure out what the function expects.  In Go, not so much.  So we'll need a way to specify the function format rather than whether it is hot or not. In gitlab by @rdallman on Jul 18, 2017, 13:36\n\nAt the moment using 'http' is the way to qualify a function as 'hot' (thus, not orthogonal). But yes, in practice, being hot is simply a matter of whether a container exits after it processes input.\n\nI think that this is confusing (conflating format & heat) is likely something worth shoring up for everyone's sake. The shim in go [which doesn't exist atm] can make assumptions based on the format, as well, the issue is just that we have to get that shim in there (the same is true for Java, in that they have to at least include the 'fdk' in their jar or w/e java is calling things nowadays).  In gitlab by @mhaji on Jul 18, 2017, 09:35\n\ncc: @ssmith @treeder \n\nCurrently, the supported runtimes are hardcoded into the fn cli. There is some support for adding another runtime, but this involves supplying your own Dockerfile and goes against the goal of abstracting Docker as much as possible (I believe this is a goal).\n\nI'm creating this issue to discuss possibilities for how support for a runtime can be plugged in to fn rather than be built in. The issue now is that changes to a runtime means rolling out a new version of the cli. In gitlab by @ssmith on Jul 18, 2017, 11:26\n\nAbstracting Docker from runtime developers is not the goal.  It is a goal with regards to Fn users.\r\n\r\nBased on @treeder's comment about packaging using Docker, the boiler plate generation could be packaged as an image that is registered with the Fn CLI.  I can envision a standard set of runtimes and their associate images  specified in a .fn config file like:\r\n\r\n`java\r\n  build: fnproject/java:dev\r\n  run: fnproject/java:run\r\n  init: fnproject/java:init\r\n`\r\n\r\nUsers could edit this file directly or Fn cli could add commands for registering runtimes.\r\n\r\nThis would let me type `fn init runtime=java shaunsmith/foo` which would run the `java:init` image passing in all necessary input values, mount the current working directory for output, and generate whatever boilerplate files that the image wanted into the current working directory.\r\n\r\nThe `init` image would have to implement a defined contract to accept input.\r\n\r\nEssentially, since the Fn Server don't really care what's in the deployed container the Fn CLI shouldn't care what boilerplate is generated or how it's generated.  In gitlab by @mhaji on Jul 18, 2017, 09:10\n\ncc: @ssmith @treeder\n\nCurrently, the fn CLI supports the ability to allow a extending a language/runtime such that when `fn init` is executed, some boilerplate is generated to get the user started quickly. \n\nThe issue at the moment is, the boilerplate that is generated is tied to a particular version of the fn CLI.\n\nWe need a mechanism for each runtime's boilerplate to be maintained independently of the fn CLI. Some options:\n\n1. Embed the boilerplate in a Docker image, perhaps the one that's used for building and lay it on the host filesystem.\n2. Host the boilerplate/templates in a separate git repo. Serverless framework do something like this. In gitlab by @mhaji on Jul 24, 2017, 01:37\n\n[Comment](https://gitlab-odx.oracle.com/odx/functions/issues/128#note_9335) by @ssmith relevant to this ticket. In gitlab by @treeder on Jul 24, 2017, 13:37\n\nmarked this issue as related to #128  In gitlab by @carimura on Jul 18, 2017, 08:58\n\nChad Arimura\n08:55\nnot fn deploy's increment\n\t\nTravis Reeder\n08:56\nhmm\n\t\nChad Arimura\n08:56\ni'm doing an fn update, not fn deploy.\n\t\nTravis Reeder\n08:56\ncould you make it use the fn version?\n08:56\njust run fn bump if you just want to change the version\n\t\nChad Arimura\n08:56\nwell, maybe, but is that what we want to force on our users?\n08:56\nthey might have their own versioning system\n\t\nTravis Reeder\n08:57\nnot sure, I think having users use semver is generally a good thing\n08:58\nyou could delete the func.yaml then do the route update\n08:58\nor just specify the flags in the ci\n08:58\ncli\n08:58\nto override the func.yaml\n\t\nChad Arimura\n08:58\nok so there are options.... maybe we need a docs page that explains versioning and the options In gitlab by @carimura on Jul 18, 2017, 08:59\n\ntalk about how we support http://semver.org/  In gitlab by @denismakogon on Jul 18, 2017, 08:41\n\nIf route was called at least once call object would appear and it wouldn't become available once route is gone (deleted by owner).\n\nIn order to clean up all routes - implicitly delete all fn calls while deleting a route. In gitlab by @denismakogon on Jul 18, 2017, 08:44\n\nmentioned in issue #125  In gitlab by @carimura on Jul 17, 2017, 17:57\n\ndoes it make sense to have `fn run` get function configs? `fn run` is super nice for local development, but all funcs will almost inevitably use config secrets (ie db creds, etc.) which makes `run` unusable unless you write a script to set local env variables every time.... the alternative is to keep doing `fn deploy; fn call` but sorta defeats entire purpose. Would be great to just map the funcs config into the ENV beforehand? That said we'd also need the app config as well.....\n\nideally local development would have it's own set of dev creds for everything that the user controls, and prod is different, obviously. In gitlab by @carimura on Jul 22, 2017, 15:21\n\nI also understand I can pass in with -e, but it's just so much less elegant:\r\n\r\n`cat payload.json | fn run`\r\n\r\nvs\r\n\r\n`cat payload.json | fn run -e HOSTNAME=$HOSTNAME -e PUBNUB_SUBSCRIBE_KEY=$PUBNUB_SUBSCRIBE_KEY -e PUBNUB_PUBLISH_KEY=$PUBNUB_PUBLISH_KEY -e FUNC_SERVER_URL=$FUNC_SERVER_URL -e ANOTHER=$ANOTHER` Might need some sort of local env file it could read for testing, or allow local setting that are stored on users machine somewhere. We don't want to pass in all vars from the local environment though, because those won't be on the production server obviously, should be fairly explicit what goes in. \r\n I like that idea!  I'm going to dig into this more today.   In gitlab by @carimura on Jul 17, 2017, 17:43  In gitlab by @rdallman on Jul 17, 2017, 14:13\n\n@denismakogon alluded to this in #111 \n\nthis is the case i keep running into:\n\n```\nfn-api-deployment-2750180546-h378w fn-api time=\"2017-07-17T21:09:03Z\" level=error msg=\"App not found\" action=\"server.handleRunnerRequest)-fm\" app=yodawg call_id=01BN9642M407WTE00000000000 error=\"Error 1040: Too many connections\" route=\"/hello\"\n```\n\nwhich we should handle in the function that fronts the api (return 5xx instead). we also need to probably figure out how to make this stop across all the various backends, we would prefer for them to wait and then possibly get hit with a timeout instead of just failing. In gitlab by @rdallman on Jul 17, 2017, 15:28\n\nmentioned in merge request !109 In gitlab by @rdallman on Jul 17, 2017, 15:36\r\n\r\nrelated #96 In gitlab by @denismakogon on Jul 18, 2017, 06:26\n\nMore erros at #123 In gitlab by @rdallman on Jul 18, 2017, 11:20\n\nmentioned in issue #123  In gitlab by @carimura on Jul 16, 2017, 21:04\r\n\r\n1. run my license plate pipeline\r\n2. watch plates come up with yellow boxes around plates\r\n3. change draw func to draw red box instead of yellow\r\n4. run again, still yellow\r\n5. kubectl scale down to 0, then back up to 30\r\n6. run again, now red\r\n\r\nalso here's some interesting output:\r\n\r\n```\r\n~/workspace/hello\r\n\u276f curl http://localhost:8080/r/myapp/hello\r\nHello Thomas\r\n\r\n~/workspace/hello\r\n\u276f curl http://localhost:8080/r/myapp/hello\r\nHi!\r\n\r\n~/workspace/hello\r\n\u276f curl http://localhost:8080/r/myapp/hello\r\nHello Thomas Demo\r\n\r\n~/workspace/hello\r\n\u276f curl http://localhost:8080/r/myapp/hello\r\nHi!\r\n\r\n~/workspace/hello\r\n\u276f curl http://localhost:8080/r/myapp/hello\r\nHello Thomas\r\n```\r\n\r\n\r\nand the logs for those certainly indicate that I should be getting the same version (0.0.2) .. wonkiness:\r\n\r\n```\r\nfn-api-deployment-2577755329-8shth fn-api time=\"2017-07-17T20:13:10Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92XRTF07WGY00000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.requests route=\"/hello\" type=count value=1\r\nfn-api-deployment-2577755329-8shth fn-api time=\"2017-07-17T20:13:10Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92XRTF07WGY00000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.waittime route=\"/hello\" type=time value=0s\r\nfn-api-deployment-2577755329-8shth fn-api time=\"2017-07-17T20:13:11Z\" level=info msg=\"container status\" action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92XRTF07WGY00000000000 container_error= container_finished=2017-07-17 20:13:11.159124686 +0000 UTC container_running=false container_status=exited exit_code=0 image=\"carimura/hello:0.0.2\" route=\"/hello\"\r\nfn-api-deployment-2577755329-8shth fn-api time=\"2017-07-17T20:13:11Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92XRTF07WGY00000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.succeeded route=\"/hello\" type=count value=1\r\nfn-api-deployment-2577755329-8shth fn-api time=\"2017-07-17T20:13:11Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92XRTF07WGY00000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.time route=\"/hello\" type=time value=359.019267ms\r\nfn-api-deployment-2577755329-8shth fn-api time=\"2017-07-17T20:13:11Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92XRTF07WGY00000000000 image=\"carimura/hello:0.0.2\" name=\"run.exec_time\" route=\"/hello\" type=time value=359.019267ms\r\nfn-api-deployment-2577755329-12x1d fn-api time=\"2017-07-17T20:13:12Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92XT5V07WH200000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.requests route=\"/hello\" type=count value=1\r\nfn-api-deployment-2577755329-12x1d fn-api time=\"2017-07-17T20:13:12Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92XT5V07WH200000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.waittime route=\"/hello\" type=time value=0s\r\nfn-api-deployment-2577755329-12x1d fn-api time=\"2017-07-17T20:13:13Z\" level=info msg=\"container status\" action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92XT5V07WH200000000000 container_error= container_finished=2017-07-17 20:13:13.142631114 +0000 UTC container_running=false container_status=exited exit_code=0 image=\"carimura/hello:0.0.2\" route=\"/hello\"\r\nfn-api-deployment-2577755329-12x1d fn-api time=\"2017-07-17T20:13:13Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92XT5V07WH200000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.succeeded route=\"/hello\" type=count value=1\r\nfn-api-deployment-2577755329-12x1d fn-api time=\"2017-07-17T20:13:13Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92XT5V07WH200000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.time route=\"/hello\" type=time value=1.31405758s\r\nfn-api-deployment-2577755329-12x1d fn-api time=\"2017-07-17T20:13:13Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92XT5V07WH200000000000 image=\"carimura/hello:0.0.2\" name=\"run.exec_time\" route=\"/hello\" type=time value=1.31405758s\r\nfn-api-deployment-2577755329-tbcb3 fn-api time=\"2017-07-17T20:13:32Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YDH807WGY00000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.requests route=\"/hello\" type=count value=1\r\nfn-api-deployment-2577755329-tbcb3 fn-api time=\"2017-07-17T20:13:32Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YDH807WGY00000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.waittime route=\"/hello\" type=time value=0s\r\nfn-api-deployment-2577755329-tbcb3 fn-api time=\"2017-07-17T20:13:33Z\" level=info msg=\"container status\" action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YDH807WGY00000000000 container_error= container_finished=2017-07-17 20:13:33.542690037 +0000 UTC container_running=false container_status=exited exit_code=0 image=\"carimura/hello:0.0.2\" route=\"/hello\"\r\nfn-api-deployment-2577755329-tbcb3 fn-api time=\"2017-07-17T20:13:33Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YDH807WGY00000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.succeeded route=\"/hello\" type=count value=1\r\nfn-api-deployment-2577755329-tbcb3 fn-api time=\"2017-07-17T20:13:33Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YDH807WGY00000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.time route=\"/hello\" type=time value=383.260975ms\r\nfn-api-deployment-2577755329-tbcb3 fn-api time=\"2017-07-17T20:13:33Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YDH807WGY00000000000 image=\"carimura/hello:0.0.2\" name=\"run.exec_time\" route=\"/hello\" type=time value=383.260975ms\r\nfn-api-deployment-2577755329-12x1d fn-api time=\"2017-07-17T20:13:35Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YGNR07WH400000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.requests route=\"/hello\" type=count value=1\r\nfn-api-deployment-2577755329-12x1d fn-api time=\"2017-07-17T20:13:35Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YGNR07WH400000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.waittime route=\"/hello\" type=time value=0s\r\nfn-api-deployment-2577755329-12x1d fn-api time=\"2017-07-17T20:13:36Z\" level=info msg=\"container status\" action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YGNR07WH400000000000 container_error= container_finished=2017-07-17 20:13:36.178229742 +0000 UTC container_running=false container_status=exited exit_code=0 image=\"carimura/hello:0.0.2\" route=\"/hello\"\r\nfn-api-deployment-2577755329-12x1d fn-api time=\"2017-07-17T20:13:36Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YGNR07WH400000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.succeeded route=\"/hello\" type=count value=1\r\nfn-api-deployment-2577755329-12x1d fn-api time=\"2017-07-17T20:13:36Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YGNR07WH400000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.time route=\"/hello\" type=time value=1.31657387s\r\nfn-api-deployment-2577755329-12x1d fn-api time=\"2017-07-17T20:13:36Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YGNR07WH400000000000 image=\"carimura/hello:0.0.2\" name=\"run.exec_time\" route=\"/hello\" type=time value=1.31657387s\r\nfn-api-deployment-2577755329-8shth fn-api time=\"2017-07-17T20:13:38Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YKZT07WH000000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.requests route=\"/hello\" type=count value=1\r\nfn-api-deployment-2577755329-8shth fn-api time=\"2017-07-17T20:13:38Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YKZT07WH000000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.waittime route=\"/hello\" type=time value=0s\r\nfn-api-deployment-2577755329-8shth fn-api time=\"2017-07-17T20:13:39Z\" level=info msg=\"container status\" action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YKZT07WH000000000000 container_error= container_finished=2017-07-17 20:13:38.966769682 +0000 UTC container_running=false container_status=exited exit_code=0 image=\"carimura/hello:0.0.2\" route=\"/hello\"\r\nfn-api-deployment-2577755329-8shth fn-api time=\"2017-07-17T20:13:39Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YKZT07WH000000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.succeeded route=\"/hello\" type=count value=1\r\nfn-api-deployment-2577755329-8shth fn-api time=\"2017-07-17T20:13:39Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YKZT07WH000000000000 image=\"carimura/hello:0.0.2\" name=run.myapp.time route=\"/hello\" type=time value=369.45599ms\r\nfn-api-deployment-2577755329-8shth fn-api time=\"2017-07-17T20:13:39Z\" level=info action=\"server.handleRunnerRequest)-fm\" app=myapp call_id=01BN92YKZT07WH000000000000 image=\"carimura/hello:0.0.2\" name=\"run.exec_time\" route=\"/hello\" type=time value=369.45599ms\r\n``` In gitlab by @carimura on Jul 16, 2017, 21:05\n\nchanged the description In gitlab by @carimura on Jul 16, 2017, 21:05\n\nchanged the description In gitlab by @carimura on Jul 17, 2017, 12:05\n\nmaybe title is misleading basically I'm observing old code running after fn deploy. it's spotty. can't tell if it's some pods not getting updated, etc. In gitlab by @carimura on Jul 17, 2017, 13:14\n\nchanged the description In gitlab by @carimura on Jul 19, 2017, 20:25\n\n@treeder @rdallman @denismakogon this one is urgent... it's using old images and it stops my ability to demo / work on the demo. You can see my logs are pulling two different versions of the same function:\n\n```\nfn-api-deployment-2577755329-dp2pg fn-api time=\"2017-07-20T03:13:05Z\" level=info msg=\"libdc1394 error: Failed to initialize libdc1394\nfn-api-deployment-2577755329-dp2pg fn-api \" app_name=myapp call_id=01BNEZQX7107WJE00000000000 image=\"carimura/detect-plates:0.0.32\" path= runner=async user_log=true\nfn-api-deployment-2577755329-dp2pg fn-api time=\"2017-07-20T03:13:05Z\" level=info msg=\"5 :  [1,\"Sent\",\"15005203859441916\"]\nfn-api-deployment-2577755329-dp2pg fn-api \" app_name=myapp call_id=01BNEZQX7107WJE00000000000 image=\"carimura/detect-plates:0.0.32\" path= runner=async user_log=true\nfn-api-deployment-2577755329-w29rd fn-api time=\"2017-07-20T03:13:05Z\" level=info msg=\"\nfn-api-deployment-2577755329-w29rd fn-api \" app_name=myapp call_id=01BNEZQWR607WJ000000000000 image=\"carimura/detect-plates:prod-29576c963a56856e4892b5ef1b566f515c3c8fe9\" path= runner=async user_log=true\nfn-api-deployment-2577755329-w29rd fn-api time=\"2017-07-20T03:13:05Z\" level=info msg=\"\nfn-api-deployment-2577755329-w29rd fn-api \" app_name=myapp call_id=01BNEZQWR607WJ000000000000 image=\"carimura/detect-plates:prod-29576c963a56856e4892b5ef1b566f515c3c8fe9\" path= runner=async user_log=true\nfn-api-deployment-2577755329-w29rd fn-api time=\"2017-07-20T03:13:06Z\" level=info msg=\" FOUND PLATE ------> {RequestedTopN:10 BestPlate:27Z592 TopNPlates:[{Characters:27Z592 OverallConfidence:87.007126 MatchesTemplate:false} {Characters:Z7Z592 OverallConfidence:86.66267 MatchesTemplate:false} {Characters:Z27Z592 OverallConfidence:85.34955 MatchesTemplate:false} {Characters:ZZ7Z592 OverallConfidence:85.00509 MatchesTemplate:false} {Characters:227Z592 OverallConfidence:83.92249 MatchesTemplate:false} {Characters:E27Z592 OverallConfidence:83.78511 MatchesTemplate:false} {Characters:2Z7Z592 OverallConfidence:83.57803 MatchesTemplate:false} {Characters:EZ7Z592 OverallConfidence:83.44064 MatchesTemplate:false} {Characters:7Z592 OverallConfidence:82.13487 MatchesTemplate:false} {Characters:87Z592 OverallConfidence:79.175835 MatchesTemplate:false}] ProcessingTimeMs:628.9003 PlatePoints:[{X:101 Y:373} {X:174 Y:374} {X:173 Y:413} {X:101 Y:412}] PlateIndex:0 RegionConfidence:0 Region:}6 :  [1,\"Sent\",\"15005203860705855\"]\n``` In gitlab by @carimura on Jul 19, 2017, 20:25\n\ni even killed the whole k8s cluster and brought it back up, still same issue.... can't deploy cause uses old version. In gitlab by @treeder on Jul 19, 2017, 20:30\n\nCan you paste all the commands you're using here?\n\nAre you bumping the version? are you deploying after you bump the version?  etc. In gitlab by @carimura on Jul 19, 2017, 20:33\n\nyes. it happens when i use fn deploy and bump the version, or wercker and it uses git commits. Take a look at those logs above. Can you explain a case where the same function would run two different versions  right after one another? In gitlab by @treeder on Jul 19, 2017, 20:34\n\nAggh, think I see why. There's a route cache that appears to never expire (Seif added this). So probably works fine on single server, doesn't sync up across multiple servers. \n\nGive me a few, I'll either remove it or change it to an expiring cache (like 30 seconds or something). In gitlab by @carimura on Jul 19, 2017, 20:36\r\n\r\nok great. i'm not crazy.\r\n\r\n```\r\n~/workspace/hello 15s\r\n\u276f curl http://localhost:8080/r/myapp/hello\r\nHello Yodel and Chad\r\n\r\n~/workspace/hello\r\n\u276f curl http://localhost:8080/r/myapp/hello\r\nHello Yodel and Chad\r\n\r\n~/workspace/hello\r\n\u276f curl http://localhost:8080/r/myapp/hello\r\nHello Yodel and Chad\r\n\r\n~/workspace/hello\r\n\u276f curl http://localhost:8080/r/myapp/hello\r\nHello Yodel and Chad\r\n\r\n~/workspace/hello\r\n\u276f curl http://localhost:8080/r/myapp/hello\r\nHello Yodel and Chad\r\n\r\n~/workspace/hello\r\n\u276f curl http://localhost:8080/r/myapp/hello\r\nHello Chad\r\n\r\n~/workspace/hello\r\n\u276f curl http://localhost:8080/r/myapp/hello\r\nHello Yodel\r\n\r\n~/workspace/hello\r\n\u276f curl http://localhost:8080/r/myapp/hello\r\nHello Chad\r\n``` In gitlab by @treeder on Jul 19, 2017, 22:11\n\nmentioned in commit 2d7672e1404cbc5136d8ea0f16b727ab9e75e9dd In gitlab by @derekschultz on Jul 20, 2017, 08:44\n\nclosed via commit 0879fce4ce3332cbfe4bed43f2d4a1f81096fc45 In gitlab by @derekschultz on Jul 20, 2017, 08:44\n\nclosed via merge request !116 In gitlab by @derekschultz on Jul 20, 2017, 09:19\n\nmentioned in commit 0879fce4ce3332cbfe4bed43f2d4a1f81096fc45 In gitlab by @carimura on Jul 22, 2017, 10:08\n\nOk I found this in a different place now... if you delete a route, and then do another fn init, it restarts the versioning back at 1, but the old code still sits on the servers so it pulls old code.\n\nRe-opening ticket. I think an fn deploy should always invalidate the old image.... is this possible? In gitlab by @carimura on Jul 22, 2017, 10:08\n\nreopened In gitlab by @treeder on Jul 23, 2017, 13:55\n\nAnother way to do this is to check Docker Hub (or whatever registry) and start the version after the most recent one, then they don't overwrite their functions in the registry either. Here's one way to check:\n\n```sh\ncurl -L -s 'https://registry.hub.docker.com/v2/repositories/treeder/hello-go/tags?page_size=10'\\ | jq '.\"results\"[][\"name\"]'\n``` In gitlab by @carimura on Jul 23, 2017, 14:17\r\n\r\nfyi I'll keep this one open, but it's not critical because the \"delete your func file\" might not be common...  In gitlab by @carimura on Jul 14, 2017, 14:59\n\n```\r\nGET /foo?first=joe&last=user&...\r\n\r\n=>\r\n\r\nFN_Q_first=joe\r\nFN_Q_last=user\r\n\r\nor whatever\r\n``` In gitlab by @carimura on Jul 14, 2017, 14:59\n\nchanged the description In gitlab by @denismakogon on Jul 17, 2017, 11:19\n\nIsn't this something that can be done using standard capabilities of PL? In gitlab by @carimura on Jul 17, 2017, 12:48\n\nPL? In gitlab by @denismakogon on Jul 17, 2017, 12:51\n\nprogramming langs In gitlab by @carimura on Jul 17, 2017, 13:00\n\n(less acronyms please thanks!)\n\nYes it can but takes some boilerplate effort. Would be nice to make it automated given how common the use case is. In gitlab by @carimura on Jul 17, 2017, 17:45\n\nadded ~221 label In gitlab by @denismakogon on Jul 25, 2017, 09:30\n\nmentioned in commit efa75dfbb72ba160c17fc6ec27e972828e86da33 In gitlab by @denismakogon on Jul 25, 2017, 09:32\n\nmentioned in merge request !128 In gitlab by @rdallman on Jul 25, 2017, 10:08\n\nclosed via commit efa75dfbb72ba160c17fc6ec27e972828e86da33 In gitlab by @rdallman on Jul 25, 2017, 10:08\n\nclosed via commit 5ea70791a5af75100610f1fa3ccd2ba27958588c In gitlab by @rdallman on Jul 25, 2017, 10:24\n\nmentioned in commit 5ea70791a5af75100610f1fa3ccd2ba27958588c In gitlab by @carimura on Jul 26, 2017, 17:27\n\nwhy was this closed? In gitlab by @carimura on Jul 26, 2017, 17:27\n\nreopened it's ok. i agree that it's really easy to parse & access in every language through just parsing the request, it's in every standard library and it's no more work to do that accessing through env, which also relies on the standard library so it's really not coming out ahead. i don't really care about crap like this to be honest, i don't think how we have it detracts from the ux at all.   Created by @carimura on Jul 13, 2017, 18:10 and imported from GitLab issues. In gitlab by @treeder on Jul 14, 2017, 09:24\n\nVery early thoughts:\n\n* Define steps in json/yaml (see below)\n* Support in cli and local testing to do things like: `cat payload.json | fn run x | fn run y | fn run z`\n* Deploy with `fn deploy worklow/steps`, give the workflow itself a path in the API, eg: /myworkflow. \n\nExample step format:\n\n```yaml\nsteps:\n    - route: /fnx\n      # other step related stuff here, eg:\n      # fanout/fanin, etc - not sure how that would work quite yet\n    - route: /fny\n    - route: /fnz\n``` In gitlab by @ocliffe on Jul 17, 2017, 03:05\n\nI'd like to understand the sort of problems this would be solving a bit more before diving into the details . \r\n\r\nWould these be static data-flow pipelines or more like a workflow? \r\n\r\nFor workflow I guess the main concern is operability - if we have a single container for each step and you want to be able to re-use steps between processes I think the issue you have is the proliferation of many many glue steps that do a small amount of work to present work between the outputs and inputs of \"imported\" steps.   In the current model having to operate a new function for each microstep seems excessive (You could easily end up having to manage 10s of functions all of which \"belong\" to the workflow) .  \r\n\r\nThis is the sort of thinking that led us to putting the pipeline operation code into a single re-entrant function that triggers out to other functions in cloudthreads. \r\n\r\nFor Pipeline - I like the idea of being able to create Spark/DataFlow type pipelines  - e.g. map reduce. I like  Apache Beam's (google data flow lite) type model here - especially the way that you can dynamically build pipelines in code rather than having to pre-define them externally.  \r\n\r\nOne of the reasons we've shied away from doing this in the past is that Spark &  DataFlow do a lot of magic around scheduling to get good compute density  and minimise data transfer - It feels like these are slightly at odds with the general problem of scheduling FaaS workloads so my fear is that you end up building a crappy less-performant clone of spark in the FaaS. \r\n\r\nEither way having some primitives to natively dispatch data within functions would (i guess) give you a good efficiency bump over doing the same thing via (e.g.) an external queue. In gitlab by @treeder on Jul 17, 2017, 08:06\n\nI'm thinking more along the lines of AWS Step Functions: https://aws.amazon.com/step-functions/ where each function is distinct like it is now and doesn't really have to care about other steps. Then we take care of plumbing/\"glue steps\" in between. In gitlab by @ocliffe on Jul 17, 2017, 10:06\n\nGot it,  I guess if you think that this is valuable (I'm a bit sceptical as to whether or not step functions is really that useful)  then that makes sense. \n\nAMZ have semi-standardized the steps language here: https://states-language.net/ In gitlab by @carimura on Jul 17, 2017, 12:45\n\nStep Functions is their gen2 workflow service (after SWF) and definitely gaining in popularity. I think we can adopt a similar approach but make it even easier for developers to adopt. thinking out loud, object types:\r\n\r\n- apps\r\n- routes\r\n- functions (actually this brings up a different issue since routes == functions...)\r\n- *flows*\r\n\r\nflows can take a yaml input like above, or CLI command like: `fn flows create my_workflow`\r\n\r\nflow types:\r\n\r\n- sequential\r\n- branch (choice)\r\n- parallel (fan in/out)\r\n\r\n\r\n  In gitlab by @rdallman on Jul 13, 2017, 11:48\r\n\r\n* [ ] re-route requests that error to a different backend. this may require buffering bodies which isn't great, we need to take care that an attacker couldn't easily OOM us; but it shouldn't add much response latency [in normal path]. for now, probably only re-route guys that didn't run.\r\n* [ ] enable SSL / h2. this is just simple plumbing since go does this out of the box.\r\n* [x] investigate adding k8's backend [in addition to db's]\r\n* [ ] integrate with a real stats backend (statsd/prom), get charts from that\r\n* [ ] ping/version endpoints\r\n\r\ni guess it would also be nice to list the [not missing] features somewhere, too. anyone is welcome to add, I think we may be able to finagle out of trying to integrate with vulcand/traefik and have something we can control that is pretty light (thanks to Go, mostly) In gitlab by @rdallman on Jul 13, 2017, 11:55\n\nchanged the description yea, still using   In gitlab by @treeder on Jul 13, 2017, 08:49 In gitlab by @treeder on Jul 13, 2017, 18:15\r\n related: #98   In gitlab by @carimura on Jul 7, 2017, 15:01\n\nHere's a big stream of shit from a single pod when running a bunch of functions.. not sure if they are keeping the function from running or not but definitely lots of errors we probably shouldn't see.\r\n\r\nno idea if related/same/different from #100\r\n\r\nBoth need fixed before demo time.\r\n\r\n```\r\nfn-api-deployment-3575538018-07h34 fn-api \" app_name=myapp call_id=01BMFD50AM07WGC00000000000 image=\"carimura/detect-plates:0.0.27\" path= runner=async user_log=true\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=info msg=\"&{0xc420143640 {0 0} false <nil> 0x5f6260 0x5f61f0}\r\nfn-api-deployment-3575538018-07h34 fn-api \" app_name=myapp call_id=01BMFD50AM07WGC00000000000 image=\"carimura/detect-plates:0.0.27\" path= runner=async user_log=true\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=warning msg=\"docker temporary error, retrying\" error=\"context deadline exceeded\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=warning msg=\"docker temporary error, retrying\" error=\"context deadline exceeded\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=warning msg=\"docker temporary error, retrying\" error=\"context deadline exceeded\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=warning msg=\"docker temporary error, retrying\" error=\"context deadline exceeded\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=warning msg=\"docker temporary error, retrying\" error=\"context deadline exceeded\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=warning msg=\"docker temporary error, retrying\" error=\"context deadline exceeded\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=warning msg=\"docker temporary error, retrying\" error=\"context deadline exceeded\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=warning msg=\"docker temporary error, retrying\" error=\"context deadline exceeded\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=warning msg=\"retrying on docker errors timed out, restart docker or rotate this instance?\" error=\"context deadline exceeded\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=warning msg=\"retrying on docker errors timed out, restart docker or rotate this instance?\" error=\"context deadline exceeded\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=warning msg=\"retrying on docker errors timed out, restart docker or rotate this instance?\" error=\"context deadline exceeded\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=warning msg=\"retrying on docker errors timed out, restart docker or rotate this instance?\" error=\"context deadline exceeded\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=warning msg=\"retrying on docker errors timed out, restart docker or rotate this instance?\" error=\"context deadline exceeded\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=warning msg=\"retrying on docker errors timed out, restart docker or rotate this instance?\" error=\"context deadline exceeded\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=warning msg=\"retrying on docker errors timed out, restart docker or rotate this instance?\" error=\"context deadline exceeded\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:09Z\" level=warning msg=\"retrying on docker errors timed out, restart docker or rotate this instance?\" error=\"context deadline exceeded\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:10Z\" level=error msg=\"filtering error\" error=\"Container not running: task-1499460698715347626-01BMFD50AH07WGJ00000000000\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:10Z\" level=info msg=\"container status\" call_id=01BMFD50AH07WGJ00000000000 container_error= container_finished=2017-07-07 20:52:06.947585811 +0000 UTC container_running=false container_status=exited exit_code=0 runner=async\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:10Z\" level=info call_id=01BMFD50AH07WGJ00000000000 name=run.myapp.error runner=async type=count value=1\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:10Z\" level=info call_id=01BMFD50AH07WGJ00000000000 name=run.myapp.time runner=async type=time value=30.770862067s\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:10Z\" level=info call_id=01BMFD50AH07WGJ00000000000 name=\"run.exec_time\" runner=async type=time value=30.770862067s\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:11Z\" level=error msg=\"filtering error\" error=\"Container not running: task-1499460698717981072-01BMFD50AH07WGM00000000000\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:11Z\" level=info msg=\"container status\" call_id=01BMFD50AH07WGM00000000000 container_error= container_finished=2017-07-07 20:52:03.069977046 +0000 UTC container_running=false container_status=exited exit_code=0 runner=async\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:11Z\" level=info call_id=01BMFD50AH07WGM00000000000 name=run.myapp.error runner=async type=count value=1\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:11Z\" level=info call_id=01BMFD50AH07WGM00000000000 name=run.myapp.time runner=async type=time value=31.997186318s\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:11Z\" level=info call_id=01BMFD50AH07WGM00000000000 name=\"run.exec_time\" runner=async type=time value=31.997186318s\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:12Z\" level=error msg=\"filtering error\" error=\"Container not running: task-1499460698730231455-01BMFD50AJ07WGT00000000000\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:12Z\" level=info msg=\"container status\" call_id=01BMFD50AJ07WGT00000000000 container_error= container_finished=2017-07-07 20:52:09.361658248 +0000 UTC container_running=false container_status=exited exit_code=0 runner=async\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:12Z\" level=info call_id=01BMFD50AJ07WGT00000000000 name=run.myapp.error runner=async type=count value=1\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:12Z\" level=info call_id=01BMFD50AJ07WGT00000000000 name=run.myapp.time runner=async type=time value=32.977962949s\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:12Z\" level=info call_id=01BMFD50AJ07WGT00000000000 name=\"run.exec_time\" runner=async type=time value=32.977962949s\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:13Z\" level=error msg=\"filtering error\" error=\"Container not running: task-1499460698733098379-01BMFD50AM07WGC00000000000\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:13Z\" level=info msg=\"container status\" call_id=01BMFD50AM07WGC00000000000 container_error= container_finished=2017-07-07 20:52:09.666793584 +0000 UTC container_running=false container_status=exited exit_code=0 runner=async\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:13Z\" level=info call_id=01BMFD50AM07WGC00000000000 name=run.myapp.error runner=async type=count value=1\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:13Z\" level=info call_id=01BMFD50AM07WGC00000000000 name=run.myapp.time runner=async type=time value=33.191496296s\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:13Z\" level=info call_id=01BMFD50AM07WGC00000000000 name=\"run.exec_time\" runner=async type=time value=33.191496296s\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:13Z\" level=error msg=\"Cannot run task\" call_id=01BMFD50AG07WGE00000000000 error=\"context deadline exceeded\" runner=async\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:13Z\" level=error msg=\"filtering error\" error=\"Container not running: task-1499460698720606604-01BMFD50AG07WGR00000000000\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:13Z\" level=info msg=\"container status\" call_id=01BMFD50AG07WGR00000000000 container_error= container_finished=2017-07-07 20:52:06.982616226 +0000 UTC container_running=false container_status=exited exit_code=0 runner=async\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:13Z\" level=info call_id=01BMFD50AG07WGR00000000000 name=run.myapp.error runner=async type=count value=1\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:13Z\" level=info call_id=01BMFD50AG07WGR00000000000 name=run.myapp.time runner=async type=time value=33.568649102s\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:13Z\" level=info call_id=01BMFD50AG07WGR00000000000 name=\"run.exec_time\" runner=async type=time value=33.568649102s\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:15Z\" level=error msg=\"filtering error\" error=\"Container not running: task-1499460698744457866-01BMFD50AN07WGJ00000000000\"\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:15Z\" level=info msg=\"container status\" call_id=01BMFD50AN07WGJ00000000000 container_error= container_finished=2017-07-07 20:52:09.429711797 +0000 UTC container_running=false container_status=exited exit_code=0 runner=async\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:15Z\" level=info call_id=01BMFD50AN07WGJ00000000000 name=run.myapp.error runner=async type=count value=1\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:15Z\" level=info call_id=01BMFD50AN07WGJ00000000000 name=run.myapp.time runner=async type=time value=35.230164923s\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:15Z\" level=info call_id=01BMFD50AN07WGJ00000000000 name=\"run.exec_time\" runner=async type=time value=35.230164923s\r\nfn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:17Z\" level=error msg=\"Cannot run task\" call_id=01BMFD50AK07WG800000000000 error=\"context deadline exceeded\" runner=async\r\n``` In gitlab by @carimura on Jul 7, 2017, 15:02\n\nchanged the description In gitlab by @denismakogon on Jul 10, 2017, 08:42\n\n@carimura this might be related to #93 In gitlab by @treeder on Jul 10, 2017, 09:46\n\nassigned to @denismakogon In gitlab by @treeder on Jul 10, 2017, 09:46\n\nchanged milestone to %4 In gitlab by @rdallman on Jul 10, 2017, 10:07\n\ni don't think this effects anything, it's making sure to remove the container which has exited cleanly (deletion of the container is regardless of whether it's terminated cleanly or not). we could spend time filtering this error to so appease whomever but it's kind of a waste of time. if you find any tasks that actually error out when they aren't supposed to and can trace them to this kind of error in the logs, then we actually have something to look into. In gitlab by @rdallman on Jul 10, 2017, 10:07\n\nclosed In gitlab by @rdallman on Jul 10, 2017, 10:11\n\n> `fn-api-deployment-3575538018-07h34 fn-api time=\"2017-07-07T20:52:10Z\" level=info call_id=01BMFD50AH07WGJ00000000000 name=run.myapp.time runner=async type=time value=30.770862067s`\n\nit seems that these tasks are timing out is all. In gitlab by @rdallman on Jul 10, 2017, 10:28\n\nmentioned in issue #100 In gitlab by @treeder on Jul 10, 2017, 11:35\n\nI'm going to clean up there errors. If that's the case, they shouldn't be `warning` or `error` level, probably DEBUG if anything. In gitlab by @treeder on Jul 10, 2017, 11:35\n\nreopened In gitlab by @rdallman on Jul 10, 2017, 11:38\n\nwell it's nice to see in prod when it happens, the root cause (error), so i'd say DEBUG is hiding too much... these calls get retried a lot and seeing root error is useful, as the errors get masked at higher levels before getting plumbed up and logged. In gitlab by @treeder on Jul 10, 2017, 11:40\n\nThis will be a common occurrence. The task status should be set to `timeout` or something so we and user can see that a task didn't complete properly, but spewing out common things to the logs doesn't really help much does it? In gitlab by @treeder on Jul 10, 2017, 11:44\n\nThis looks like it's trying to ignore errors with `service endpoint with name`, so I'm not sure why we're logging the error with warning or why it's a filtering error?\n\n```go\n// some 500s are totally cool\nfunc filter(err error) error {\n\t// \"API error (500): {\\\"message\\\":\\\"service endpoint with name task-57d722ecdecb9e7be16aff17 already exists\\\"}\\n\" -> ok since container exists\n\tswitch {\n\tdefault:\n\t\treturn err\n\tcase err == nil:\n\t\treturn err\n\tcase strings.Contains(err.Error(), \"service endpoint with name\"):\n\t}\n\tlogrus.WithError(err).Warn(\"filtering error\")\n\treturn nil\n}\n```\n\nAnyone know what this one is all about? In gitlab by @treeder on Jul 10, 2017, 11:46\n\nActually, looks like it's from this one: \n\n```go\nfunc filterNotRunning(err error) error {\n\tif err == nil {\n\t\treturn nil\n\t}\n\n\t_, containerNotRunning := err.(*docker.ContainerNotRunning)\n\tdockerErr, ok := err.(*docker.Error)\n\tif containerNotRunning || (ok && dockerErr.Status == 304) {\n\t\tlogrus.WithError(err).Error(\"filtering error\")\n\t\treturn nil\n\t}\n\n\treturn err\n}\n``` In gitlab by @treeder on Jul 10, 2017, 11:48\n\nAlso, need call_id to be passed down into the docker drivers so we can match up log lines, maybe they aren't pulling the logger out of the context. In gitlab by @rdallman on Jul 10, 2017, 11:48\n\nmost of that stuff was months of (me, personally) tracking down esoteric errors and making them behave properly... just leave please In gitlab by @treeder on Jul 10, 2017, 11:52\n\nWe can't have `error` level logs for non-errors otherwise we'll get pagerduty's all night for no reason. \n\nI'm guessing it's the following: \n\n* container times out so stops running\n* StopContainer is called again and it's not longer running therefore throwing the error above In gitlab by @rdallman on Jul 10, 2017, 11:57\n\ni think that's completely unfounded but okay (and i can go into how to set things up to avoid that but you're smart so i don't think i need to). DEBUG is too low, that's why they're WARN level in many places, since they're going to get retried. the ones from this \"issue\" are yes, container is no longer running and we are trying to stop + remove the container. if we used the runner package from ole uncle iron i've already scratched your itch on this error once (it's pretty pedantic, but whatever) -- if you want to see how, you may see how there, it clutters up the code but hey, that petty little log line won't keep anybody that it wasn't already keeping up at night any longer. In gitlab by @rdallman on Jul 10, 2017, 12:07\n\nthe context deadline exceeded is nice to see, as you can get into situations where perhaps something exits before it really should, and this is the fault of bad programming of plumbing the contexts down (it has happened), which is easy to parse from log timestamps. we attempt to only print the error as log status after retrying it sufficiently. as far as these being 'useless' in general to not log, seeing the rate of context deadline exceeded is generally a great way to see that docker is fucked up or dead, and masking these will basically hide the only way we're getting that feedback (through errors in talking to docker..) In gitlab by @treeder on Jul 10, 2017, 14:26\n\nmentioned in merge request !102 In gitlab by @treeder on Jul 10, 2017, 14:34\n\nRemember we're not the only ones that will use this. If we can barely decipher what's going on, imagine what other people will think?  If they see errors coming out all over the place as Chad is seeing, we're going to see a lot of GitHub issues and we'll have to clean this up anyways. If we really want these to stay in the logs, let's make them more understandable (what's a filtering error?) and only use error and warn if it's something that someone should be looking into. Not just leave them and tell people to filter them out in papertrail. \n\nAnd if the context timeouts are useful to know that Docker isn't working, is there a better way to know that? Someone could queue up a zillion buggy tasks that all timeout, but that doesn't mean docker is bad. Perhaps keep some sort of structure that watches for anomalies which I assume is what you're getting at? And then prints an `error` or `warning` when things seem off. \n\nAnd regarding the \"ole uncle iron\" runner, is there another runner I'm not aware of? In gitlab by @rdallman on Jul 10, 2017, 14:45\n\ni looked and, the code to mask that error is now in evil iron's repo, since [open source] runner was mostly gutted. yay. i remember how it was done, and i also know the current runner has 2 code paths for running stuff and diverged a long time ago, so not sure it's remotely similar any longer.\n\nwhile you make valid points, they preclude changing the error lines to debug lines. of course it would be nicer to have better error handling, but seeing how we don't have that, i'm not inclined to want to mask logs until we do [if ever]. In gitlab by @treeder on Jul 10, 2017, 14:59\n\nSorry, I'm a bit confused. At first we're saying this doesn't affect anything, which I assume means it doesn't matter, then we're saying it's OK to leave these as `error` and `warning`. From those logs I see above, if it generally doesn't matter, I'm pretty sure we can't leave them as is. Do you not agree? \n\nAlso, not only does it look like the world is ending, but none of it really makes any sense other than the `context deadline exceeded` and even then only if you know Go. But when you match that on the same line with `msg=\"docker temporary error, retrying\"` it makes even less sense. Is that a docker error? No, it's a timeout that we explicitly put in place. \n\nAnother question: why does it retry so many times? Wonder how long that goes on for? In gitlab by @rdallman on Jul 10, 2017, 15:11\n\nat this level we don't know the source of the context cancellation. is it our retry that caps time to docker calls to 2 minutes? is it that the task is out of time? we don't know. if it's the former, we need to just try to call docker again and see if it goes through this time (thanks to networks, a request could take arbitrarily long, cancelling and retrying is a relatively sane policy and many times works in this context). if it's the latter, sure. obviously, this isn't so straight forward.\n\nit's true that the runner had a lot of parameters that were coded against ironworker, which has different sized task constraints (on the order of minutes, not seconds). and in that context, timing out on docker retries was actually a pretty good indication that docker was indeed borked. since contexts are being plumbed down into here now from elsewhere, perhaps this is no longer the case and we can change the few words of the error message that I am so sorry is ruining our lives (all my fault, yet again) to say something that is less confusing... by all means, do words better than I can. logs tend to be for the developers and ops people to assess, users won't see these. given that, and given that the programmers actually understand what the code here is doing (retrying calls against docker until they succeed, or bailing on pertinent error), this ends up being useful information to have, as opposed to every error from docker trickling out.\n\ni would say the runner code is relatively 'battle tested' but if this is ending worlds then perhaps somebody can do better than I did. good luck and have fun. In gitlab by @rdallman on Jul 10, 2017, 15:13\n\nit goes on for 10 minutes. yes, it can take 6 minutes to start a 7GB image that some customer may actually try to run. yes, sometimes even the call to start can timeout and we need to retry that. In gitlab by @denismakogon on Jul 11, 2017, 01:06\n\n@rdallman i think it's up to user to define timeouts, if he has 10Gb image then he _must_ define appropriate timeout and docker retry operation should only relay on that. Because now we have inconsistent timeouts, asumme user sets 1m timeout for function, but each docker retry runs for 10m, so this means that docker retry wouldn't fail in 1m and sync/async execution will take up 10 mins to finish somehow. In gitlab by @denismakogon on Jul 11, 2017, 08:08\n\nmentioned in merge request !100 In gitlab by @treeder on Jul 11, 2017, 08:53\n\nWhat if we split the pull and run so the user's timeout doesn't apply to non running time? The user timeout should really only apply to their code running, not pulling images. In gitlab by @denismakogon on Jul 11, 2017, 09:26\n\n@treeder what if server would pull image while creating a route and make actual execution independent from docker registry?\ncc @rdallman In gitlab by @denismakogon on Jul 11, 2017, 09:35\n\nthe timeout defined by user takes its place just right before talking to COE driver, that's why first time we run function it takes additional time to pull an image from registry and start it for the first time before docker cache.\n\nSo, we can we can move code that pulls an image into route creation so we can run 10mins timeout without seeing  those context deadlines because some functions were using parent timed context that comes from worker and being passed down to docker API, but other API methods defining their own timed contexts with 10mins each. In gitlab by @treeder on Jul 11, 2017, 09:42\n\n>  @treeder what if server would pull image while creating a route and make actual execution independent from docker registry?\ncc @rdallman \n\nThat assumes we only have one server. \n\nI think before we call `run` on the driver, it should do a local check for the image (driver should support this check), if not found, pull it and wait. Once image exists, then call run with the user defined timeout. In gitlab by @treeder on Jul 11, 2017, 09:51\n\nAnd @rdallman , I'm not saying any of this is bad or wrong, I'm just trying to see if we can clean it up and/or make it more clear what's going on. In gitlab by @rdallman on Jul 11, 2017, 11:52\n\nfor sync it doesn't make much sense, they set timeout to 2 minutes and request took 8 minutes (because it pulled docker for most of that time). after actually wrestling with it and not just pontificating in some internet thread, the policy we have is relatively well tuned (specifically, the magic numbers). the retry policy is pretty straightforward and easy to grasp, itself. it seems to me to close out this thread all that really needs to be done is to not log that the context deadline exceeded when it is from an enclosing function (again, did this at the last gig once already). In gitlab by @denismakogon on Jul 12, 2017, 09:34\n\nSo, the problem is still there. Each method that involves Docker API possibly can cause context deadline and nothing. Such error causes task to fail with `error` status instead of `timeout`. So, in order to solve this issue we need to wrap somehow to turn context deadlines into corresponding task failures based on errors.\n\nAnother thing, we need to similify the way we execute functions in terms of COE communication.\nHere's what i suggest:\n\n1. Move image inspect/pull/ensure into route creation - this will reduce time we spend on creating and running container.\n2. Inspect image when trying to execute function - we wouldn't spend up to 10 mins to pull huge images.\n\nAny other solutions seems to be plumb on plumb for plumb.\n@rdallman @treeder @hibooboo2 what you think about that? In gitlab by @denismakogon on Jul 12, 2017, 09:42\n\nmentioned in issue #93 In gitlab by @hibooboo2 on Jul 13, 2017, 08:19\n\n@denismakogon Doing pull / inspect on route creation would mean that we are inspecting / pulling on to a box that might never run the code.. Kind of hard to do that. Unless we have lb designed to route creation traffic deterministically. as well. so that the first invocation of the function will in fact to to the box that pulled it. @rdallman  What do you think? In gitlab by @rdallman on Jul 13, 2017, 17:05\n\nyea creating routes pulling image won't scale at all, that's not really the behavior we want. i think we need to filter context errors to users better, sure. idk i think there are much bigger fish to fry than pruning the logs... i think there are a lot of _real_ errors to get from them at the moment. In gitlab by @rdallman on Jul 13, 2017, 17:25\n\nmentioned in issue #111 In gitlab by @denismakogon on Jul 18, 2017, 11:04\n\nNo longer seeing this type of errors in logs (env configuration: 1 smart LB, 3 fn nodes; Requests: 10K requests running in groups of 1K in parallel, more errors from DB layer #129 ). Can someone confirm?\n@rdallman @carimura In gitlab by @rdallman on Jul 25, 2017, 15:18\n\nthese are no longer user visible, so closing this. in some capacity these will always happen (docker dies) and more granular tickets will be useful if they're fixable in some capacity. In gitlab by @rdallman on Jul 25, 2017, 15:18\n\nclosed  In gitlab by @treeder on Jul 7, 2017, 14:41\n\nCurrently it's all in the `fn` README, but should have a page discussing it a bit more. \n\n* App level, route level\n* set via API or func.yaml\n* keep secrets in API only (not in func.yaml)  In gitlab by @denismakogon on Jul 7, 2017, 11:42\n\nThis shown up while discovering #97 and #96 \n```\n./fn apps list\nunexpected error: [GET /apps][500] GetApps default  &{Error:0xc420416220}\n``` In gitlab by @rdallman on Jul 25, 2017, 15:20\n\nmentioned in issue #105  In gitlab by @denismakogon on Jul 6, 2017, 11:49\n\nSo, here's the thing. Assume we have route with next fn:\n```\nfn routes inspect testapp /longverylongnameforsomereason\n{\n\t\"format\": \"default\",\n\t\"idle_timeout\": 30,\n\t\"image\": \"funcy/log:0.0.1\",\n\t\"memory\": 128,\n\t\"path\": \"/longverylongnameforsomereason\",\n\t\"timeout\": 30,\n\t\"type\": \"sync\"\n}\n```\n\nWhen FN server started and Docker is available everything works fine. But when Docker becomes inaccessible from FN server sync executions are not capable to fail when its timeout exceeded. FN server falls into long retry (infinite) poll for connecting to Docker\n```\ntime=\"2017-07-06T21:36:12+03:00\" level=debug msg=\"Finding route on datastore\" action=\"server.handleRunnerRequest)-fm\" app=testapp call_id=01BMCK09QY07WG200000000000 path=\"/longverylongnameforsomereason\" route=\"/longverylongnameforsomereason\" \ntime=\"2017-07-06T21:36:12+03:00\" level=debug msg=\"Got routes from datastore\" action=\"server.handleRunnerRequest)-fm\" app=testapp call_id=01BMCK09QY07WG200000000000 route=\"/longverylongnameforsomereason\" routes=1 \ntime=\"2017-07-06T21:36:12+03:00\" level=info action=\"server.handleRunnerRequest)-fm\" app=testapp call_id=01BMCK09QY07WG200000000000 image=\"funcy/log:0.0.1\" name=run.testapp.requests route=\"/longverylongnameforsomereason\" type=count value=1 \ntime=\"2017-07-06T21:36:12+03:00\" level=info action=\"server.handleRunnerRequest)-fm\" app=testapp call_id=01BMCK09QY07WG200000000000 image=\"funcy/log:0.0.1\" name=run.testapp.waittime route=\"/longverylongnameforsomereason\" type=time value=0s \ntime=\"2017-07-06T21:36:22+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: i/o timeout\" \ntime=\"2017-07-06T21:36:32+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: i/o timeout\" \ntime=\"2017-07-06T21:36:42+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: i/o timeout\" \ntime=\"2017-07-06T21:36:52+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: i/o timeout\" \ntime=\"2017-07-06T21:37:02+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: i/o timeout\" \ntime=\"2017-07-06T21:37:13+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: i/o timeout\" \ntime=\"2017-07-06T21:37:24+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: i/o timeout\" \ntime=\"2017-07-06T21:37:35+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: i/o timeout\" \ntime=\"2017-07-06T21:37:43+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:37:52+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:38:05+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: i/o timeout\" \ntime=\"2017-07-06T21:38:13+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: no route to host\" \ntime=\"2017-07-06T21:38:21+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:38:29+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:38:43+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: i/o timeout\" \ntime=\"2017-07-06T21:38:51+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: no route to host\" \ntime=\"2017-07-06T21:38:59+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:39:07+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:39:20+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: i/o timeout\" \ntime=\"2017-07-06T21:39:29+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: no route to host\" \ntime=\"2017-07-06T21:39:37+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:39:45+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:39:58+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: i/o timeout\" \ntime=\"2017-07-06T21:40:06+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: no route to host\" \ntime=\"2017-07-06T21:40:15+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:40:23+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:40:36+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: i/o timeout\" \ntime=\"2017-07-06T21:40:44+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: no route to host\" \ntime=\"2017-07-06T21:40:53+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:41:01+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:41:14+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: i/o timeout\" \ntime=\"2017-07-06T21:41:22+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: no route to host\" \ntime=\"2017-07-06T21:41:30+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:41:39+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:41:52+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: i/o timeout\" \ntime=\"2017-07-06T21:42:00+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: no route to host\" \ntime=\"2017-07-06T21:42:08+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:42:16+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:42:30+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: i/o timeout\" \ntime=\"2017-07-06T21:42:38+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: no route to host\" \ntime=\"2017-07-06T21:42:46+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \ntime=\"2017-07-06T21:42:54+03:00\" level=warning msg=\"docker temporary error, retrying\" error=\"Get http://docker.local:2375/images/funcy/log:0.0.1/json: dial tcp 192.168.0.102:2375: connect: host is down\" \n```\n\nSteps to reproduce:\n1. Start Fn server with Docker reachable.\n2. Create sync route.\n3. Tear down Docker.\n4. Run function. In gitlab by @rdallman on Jul 6, 2017, 11:51\n\ni believe that it retries for something like 30 minutes, due to how ironworker works, but mostly just make sure contexts are plumbed correctly down into the docker client we use, it supports cancellation well. good find. In gitlab by @hibooboo2 on Jul 6, 2017, 11:51\n\nI can see that being a huge problem In gitlab by @denismakogon on Jul 7, 2017, 11:33\n\nmentioned in issue #96 In gitlab by @denismakogon on Jul 10, 2017, 08:42\n\nmentioned in issue #101 In gitlab by @denismakogon on Jul 10, 2017, 08:54\n\n@rdallman i think problem is hidden in this code https://gitlab-odx.oracle.com/odx/functions/blob/master/api/runner/drivers/docker/docker.go#L394 `cancel` is actually called right after `run` method, but timeout-bound context cancel method should be used in another way (similar to https://gitlab-odx.oracle.com/odx/functions/blob/master/api/runner/worker.go#L294-333), isn't it? In gitlab by @treeder on Jul 10, 2017, 09:45\n\nassigned to @denismakogon In gitlab by @denismakogon on Jul 11, 2017, 08:08\n\nmentioned in merge request !100 In gitlab by @denismakogon on Jul 12, 2017, 09:42\n\nSo, i did further investigation and was able to figure out two things.\n\n1. When Docker becomes unreachable docker client returns `io.EOF`\n2. Task execution flow that we have now may cause requests hang for 3-4 x 10 mins if server has unstable connection with Docker.\n\nSo, making `retry` func try to catch `io.EOF` is not the case, we need consistent timed contexts to make UX better.\n\nAnother questions:\n\n1. Why should user wait for container to disapear, can't this be done in async way?\n2. Why can't we make image inspeting/pulling during route creation which, again, will make UX better and will reduce overall possible execution time way more shorter.\n\nSimilar question at #101 \n\n@rdallman @treeder @hibooboo2 In gitlab by @rdallman on Jul 12, 2017, 14:45\n\n@denismakogon the docker client sets a timeout for every request it's making already. In gitlab by @treeder on Jul 13, 2017, 08:17\n\nchanged milestone to %4  In gitlab by @denismakogon on Jul 6, 2017, 08:57  In gitlab by @mhaji on Jul 3, 2017, 06:13\n\nBased on [this](https://gitlab-odx.oracle.com/odx/jfaas/issues/49) discussion, there's a usecase for supporting multiple build options under one runtime. For example, we'd like to have a single `java` runtime, but to support multiple build strategies, e.g. maven, gradle etc. At the moment, I see this as a little bit tricky without splitting out the `LangHelper` abstraction into two other interfaces that are each used for one thing; `InitHelper` when performing `fn init` and `BuildHelper` when performing `fn build`. This will mean that the init helper can be shared for all Java runtimes, however, we can have different build helpers depending on what we have in our working directory.\n\nI've had a quick sketch of how this would look in code:\n\n```golang\ntype LangHelper interface {\n\tGetRuntimeInitHelper() RuntimeInitHelper\n\tGetRuntimeBuildHelper() (RuntimeBuildHelper, error)\n}\n\ntype RuntimeInitHelper interface {\n\tEntrypoint() string\n\tCmd() string\n\tHasBoilerplate() bool\n\tGenerateBoilerplate() error\n}\n\ntype RuntimeBuildHelper interface {\n\tBuildFromImage() string\n\tRunFromImage() string\n\tIsMultiStage() bool\n\tDockerfileBuildCmds() []string\n\tDockerfileCopyCmds() []string\n\tHasPreBuild() bool\n\tPreBuild() error\n\tAfterBuild() error\n}\n\n...\ntype JavaLangHelper struct{...}\n\nfunc (lh *JavaLangHelper) GetRuntimeBuildHelper() (RuntimeBuildHelper, error) {\n\t// try to detect if maven or gradle and return the right buildhelper\n}\n\n```\n\nI think the good thing about this change is, it should not have a much of an impact on the other runtimes as they can continue to have one concrete type which implicitly implements both the init and build helpers. Saying that, this is just a proposal, please suggest alternatives, I don't feel very strongly about doing it just this way. \n\nIf this is a sane proposal, I'm happy to implement it when it comes to adding the gradle build to the java runtime. Currently there is MR for adding maven, see !36. I think it's worth discussing the proposal first. In gitlab by @mhaji on Jul 11, 2017, 09:23\n\nmentioned in merge request !36  In gitlab by @rdallman on Jun 29, 2017, 15:54\r\n\r\n* [x] empty  call log is 404 and not an empty string (pedantic?)\r\n\r\n* [x] hot functions don't get a call log :/ need to re-plumb `flog` so each task can attach to it basically In gitlab by @rdallman on Jun 29, 2017, 15:54\n\nkinda workin on In gitlab by @rdallman on Jun 29, 2017, 15:54\n\nchanged the description In gitlab by @rdallman on Jun 29, 2017, 16:03\n\nmentioned in merge request !74 In gitlab by @denismakogon on Jun 30, 2017, 04:17\n\nchanged the description In gitlab by @denismakogon on Jun 30, 2017, 04:18\n\nIf there's no log entry than yes, it must be 404. Because there's difference in writing nothing but empty string and writing nothig. In gitlab by @rdallman on Jun 30, 2017, 11:09\n\nright, want to delineate the 2 In gitlab by @rdallman on Jun 30, 2017, 11:10\n\nchanged the description In gitlab by @rdallman on Jun 30, 2017, 16:45\n\nchanged the description In gitlab by @rdallman on Jun 30, 2017, 16:45\n\nmarked the task **hot functions don't get a call log :/ need to re-plumb `flog` so each task can attach to it basically** as completed not yet\r\n\r\n> empty call log is 404 and not an empty string (pedantic?)\r\n\r\nstill needs to be done, need to store empty string in logs  In gitlab by @mhaji on Jun 27, 2017, 10:12\n\nCurrently the fn CLI references an old version of the `functions` API server. It would be great if the Docker image version referenced in the code matched the version of the `fn` cli that is being used to start it.  In gitlab by @mhaji on Jun 27, 2017, 07:43\n\nCurrently, if I'm running `fn run` or `fn build` a temporary Dockerfile is created in the working directory. If the execution is interrupted, this file is not cleaned up. This can have unexpected behaviour as subsequent `fn run|build` commands will not generate a new temporary file Dockerfile and will continue to use the old one.\n\nSuggestion is to register a sig handler/shutdown hook to clean this file up.\n\nMight look at sending a PR for this if I can get to it, but I thought I would create the issue first. In gitlab by @mhaji on Jun 27, 2017, 09:43\n\nadded ~89 label In gitlab by @jan_grant on Jul 18, 2017, 08:15\r\n\r\n#112 is roughly the idea. Although that's based off the java-maven-runtime branch, the patch could be cherry-picked on its own. The cli used to be a sub-project in the `fn` repo, that's why this issue is not in `cli`... it is a very old issue. :)\r\n\r\nGood to know it's fixed.  In gitlab by @treeder on Jun 20, 2017, 14:59\n\nRun millions of functions and track timings, error rates, etc. In gitlab by @denismakogon on Jul 6, 2017, 06:28\n\nThis can be done using integration tests API, except need to implement timing and better error tracing. In gitlab by @rdallman on Jul 6, 2017, 11:20\r\n\r\nfnlb-test-harness pkg runs primes funcs and the tutorial could easily be scripted to start a few fn nodes, lb, link them up and start making requests but there's some nice sugar in there already In gitlab by @rdallman on Jul 13, 2017, 12:09\n\nstep 1: make a cli tool that boots a k8s cluster with N nodes behind an LB, creates a simple sync function F, runs X number of F and then chart throughput, errors and average/max/p99 latency.  In gitlab by @carimura on Jun 15, 2017, 10:59  In gitlab by @carimura on Jun 15, 2017, 07:53\n\nOrganize examples by language but also add a readme to examples page and list out techs as well (ie slack, twitter, etc.) -- really need a better way to organize examples overall for new user experience... maybe this is functionhub  In gitlab by @carimura on Jun 12, 2017, 13:51\n\nI modified a function, ran the sequence (some chained functions), did not get expected output, realized I didn't deploy it. But this is not obvious at all. Func.yaml has v22, Docker images shows v22, servers route shows v22, but I changed the file...\n\nsuggestions?  In gitlab by @treeder on May 30, 2017, 06:29\n\nThen function doesn't need to set that header, which is probably the main one that someone would need to send.  In gitlab by @denismakogon on May 29, 2017, 11:49\n\nSupport function supplied by URL.\r\n\r\nDocker supports image importing through URL, the same can be done at fn layer.\r\n\r\nCLI:\r\n`fn routes create <app> <route> --container-url`\r\nwhere `container-url` is a storage URL where image (provided by docker CLI [2]) is stored.\r\n\r\n[1] https://docs.docker.com/engine/reference/commandline/import/\r\n\r\n[2] https://docs.docker.com/engine/reference/commandline/save/ In gitlab by @denismakogon on May 29, 2017, 11:50\n\nchanged the description  https://serverless.com/framework/docs/providers/\r\n  In gitlab by @treeder on May 24, 2017, 15:32\n\nThe Node Lambda stuff was updated to follow the new workflow, but not Python or Java. Those should be converted to the new style which is essentially just this:\n\n```\nfn init --runtime lambda-node <DOCKER_HUB_USERNAME>/lambda-node\n```\n\nThen they'd follow the regular workflow from that point on. \n\nAlso, need to test and ensure the `fn import` command works still. In gitlab by @treeder on Jul 19, 2017, 14:03\n\nassigned to @treeder In gitlab by @treeder on Jul 19, 2017, 14:03\n\nThink I already did some of this recently, so I'll finish it up...  In gitlab by @treeder on May 23, 2017, 10:19 In gitlab by @hibooboo2 on Jul 13, 2017, 09:55\n\nIs this just writing documentation or do we actually have the feature? In gitlab by @treeder on Jul 13, 2017, 10:21\n\nBelieve this is all supported, just not docs on how to do it. In gitlab by @hibooboo2 on Jul 13, 2017, 10:22\n\nK guess would require someone figuring out how to do it and docing it. In gitlab by @treeder on Jul 13, 2017, 14:26\n\nTake a look at this branch, looks like it never got merged: https://github.com/iron-io/functions/pull/547 . this was for logging into a registry. \n\nAnd this: https://github.com/iron-io/functions/issues/506\n\nAnd this: https://github.com/iron-io/functions/pull/576  In gitlab by @treeder on May 22, 2017, 16:48\n\nThis may just be examples/docs, but would be interesting to use Functions in Middleware. For instance, an auth check could call an auth function.  In gitlab by @derekschultz on May 19, 2017, 12:03\n\nAs a function developer, it would help to be able to easily rollback a function to a previous version or specified version, so that I don't have to manually edit the func.yaml and redeploy.\n\n`fn rollback <function name>`\n\nPerhaps also:\n`fn rollback <function name> --version <x.y.z>`  In gitlab by @denismakogon on May 17, 2017, 17:31\n\nFor now we can create pipeline through webhooks (i.e. do HTTP call to another webhook from function). But the problem is that each time function called request goes through control plane (few hops expected), better to have an ability to let function to talk through internal Docker network (maybe define specific network for N functions?), that would allow to reduce networking load. In gitlab by @denismakogon on May 17, 2017, 17:31\n\nchanged title from **Functions pipe{- -}line** to **Functions pipeline**  In gitlab by @treeder on May 17, 2017, 16:27\n\nhttp://docs.brew.sh/Acceptable-Formulae.html\n\n`brew install fn` In gitlab by @rdallman on May 17, 2017, 16:31\n\nhere's the one i made for ironcli a while ago https://github.com/Homebrew/homebrew-core/pull/27/files -- should be almost the same In gitlab by @rdallman on May 17, 2017, 16:32\n\nwe need a public repo before we can really do this (or we can make it for the iron repo one but idk) In gitlab by @treeder on May 18, 2017, 10:10\n\nYes, need to wait for it to be public. Created formula below. This works except I think it violates the binary rule, apparently homebrew wants people to build on the user's machine (no idea why?), but will try to get it through anyways. If not, I'll change it to the way Reed has it for [ironcli](https://github.com/Homebrew/homebrew-core/pull/27/files). \r\n\r\nTODO: Once public, this code will go into `/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/fn.rb` and pushed to a fork, then pull request into `homebrew-core`. \r\n\r\n```ruby\r\nclass Fn < Formula\r\n  desc \"The CLI tool for the fn project.\"\r\n  homepage \"https://github.com/fnproject/fn\"\r\n  version \"0.3.55\"\r\n  url \"https://github.com/fnproject/cli/archive/#{version}.tar.gz\"\r\n  sha256 \"cdcfdf791be60a5fdd578f912833020f4ee9389655f32d52a6bc9747f4bf7b8f\"\r\n\r\n  def install\r\n    base_url=\"https://github.com/fnproject/cli/releases/download/#{version}\"\r\n    system(\"curl -sSL -o fn #{base_url}/fn_mac\")\r\n    puts `ls -al`\r\n    bin.install \"fn\"\r\n  end\r\n\r\n  def post_install\r\n    puts `fn --version`\r\n  end\r\n\r\n  test do\r\n    puts `#{bin}/fn --version`\r\n  end\r\nend\r\n``` dep's formula: https://github.com/Homebrew/homebrew-core/blob/master/Formula/dep.rb\r\n\r\nHaving a dependency on \"go\" is pretty wasteful, hopefully they'll let us just install the bin. \r\n oooh, think I figured out how to do it right. \r\n\r\nhttps://github.com/Homebrew/brew/blob/master/docs/Bottles.md\r\n Submitted PR https://github.com/Homebrew/homebrew-core/pull/17192  In gitlab by @treeder on May 11, 2017, 17:25\n\n- CPU\n- memory In gitlab by @rdallman on May 17, 2017, 16:52\n\nnot sure how to integrate exactly. we could just write lines out to their stderr but if they're doing e.g json logs in their stderr logs and we write in a logfmt line then it is kind of weird. should we make format somehow configurable or for MVP we can just write in logfmt lines ? In gitlab by @treeder on May 17, 2017, 16:56\n\nI was sort of thinking along the lines of showing it via API calls, similar to logs. Can check usage per function call and perhaps later, we can aggregate and see avg/min/max, etc. \n\nThis is longer term though, not needed right away. In gitlab by @rdallman on May 17, 2017, 17:07\n\nyea, so same as worker basically. like it, was nice. so we can just upload all stats at the end then. the current stats implementation polls every second, maybe we should lower that granularity to 100ms since functions won't run for very long. In gitlab by @treeder on May 18, 2017, 13:10\n\nremoved milestone  In gitlab by @treeder on May 11, 2017, 17:11\n\n- both default and hot function support In gitlab by @treeder on May 11, 2017, 17:24\n\nchanged milestone to %4 In gitlab by @treeder on May 15, 2017, 15:53\n\nchanged milestone to %5 In gitlab by @treeder on May 18, 2017, 13:08\n\nchanged milestone to %1 In gitlab by @hibooboo2 on May 19, 2017, 14:54\n\nassigned to @hibooboo2 In gitlab by @hibooboo2 on May 19, 2017, 15:02\n\nGoing to tackle this want to clarify what the lib should add / do as a general case.\nThis what I think it should handle looking for feedback to see if I am track before I start.\n\n\n* Normal function\n     * Read from stdin until it is done being read.\n     * Allow you to read from stdin to json assuming you are recieving json..\n     * Same but for yaml toml etc....\n     * Read As if it is just text\n     * Get headers using env vars easily... \n\n* Hot functions\n     * Read from stdin on loop using the http format defined in functions.\n     * Put that info into a usable format that is passed into a function call that runs on loop and on return puts the response to stdout.\n     * Easily handle methods and status codes? In gitlab by @treeder on May 21, 2017, 15:28\n\nMain thing here is to define what the interface for users will be. See Lambda for example in Java (http://docs.aws.amazon.com/toolkit-for-eclipse/v1/user-guide/lambda-tutorial.html) and node (http://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-handler.html). In gitlab by @treeder on May 22, 2017, 11:23\n\nHow about something along the lines of:\n\n```go\ntype Handler interface {\n      Handle(ctx context.Context, input func.Input, func.Output)\n}\n\ntype Input interface {\n     Read(p []byte) (n int, err error) // implements io.Reader\n     Header(name string) string // should we call them headers?\n}\n\ntype Output interface {\n     Write(p []byte) (n int, err error) // implements io.Writer\n     // TODO: some way to set content-type, etc\n}\n``` In gitlab by @rdallman on May 22, 2017, 13:23\n\n@treeder looks nice. still need to define the actual code the user puts in i.e. main so what you're saying is:\r\n\r\n```go\r\nimport (\r\n  \"odx/gofn\"\r\n  \"strings\"\r\n  \"io\"\r\n)\r\n\r\nfunc main() {\r\n   var m myThing\r\n   gofn.Handle(m.Handle)\r\n   // maybe gofn.Handle(gofn.HandleFunc(handler)) ?\r\n}\r\n\r\ntype myThing struct{}\r\n\r\n// implements fngo.Handler\r\nfunc (m *myThing) Handle(ctx context.Context, in input fngo.Input, out fngo.Output) {\r\n  io.Copy(out, strings.NewReader(\"yodawg\"))\r\n}\r\n```\r\n\r\nas for other langs, it would be nice if they were all kind of consistent and this is a pretty go-specific implementation (due to use of interfaces). if every language has closures then maybe we can pull off something with some uniformity like:\r\n\r\n```go\r\nfunc main() {\r\n  gofn.Handle(yodawg)\r\n}\r\n\r\nfunc yodawg(ctx fngo.Context) {\r\n  // yes I realize your example works in this case, but note the function header\r\n  io.Copy(ctx.Output, ctx.Input)\r\n}\r\n```\r\n\r\nor:\r\n\r\n```go\r\nfunc main() {\r\n  gofn.Handle(yodawg)\r\n}\r\n\r\nfunc yodawg() {\r\n  io.Copy(os.Stdout, os.Stdin)\r\n}\r\n```\r\n\r\ni.e. everything is either shoved into the `fngo.Context` or into the \"normal\" function path using stdin and stdout and then `gofn.Handle` would basically be: \r\n\r\n\r\n```go\r\nfunc Handle(f func()) {\r\n   for {\r\n      // readIn will read a standard or normal function input from stdin and output body and vars (you get the idea)\r\n      in, vars, isHot := readIn(os.Stdin)\r\n      io.Copy(os.Stdin, in)\r\n      setEnvVars(vars)\r\n      f()\r\n      if !isHot {\r\n        break\r\n      }\r\n   }\r\n}\r\n```\r\n\r\neh? my thinking is mostly like in ruby / python / java / etc etc we can make a similar \"fn.Context\" which has a \"familiar\" fn.Context.Input and fn.Context.Output and fn.Context.Vars or we just shove things back into how they are in a \"not hot\" function. just a brain dump from me, not too opinionated either way. thoughts ? In gitlab by @hibooboo2 on May 22, 2017, 13:29\n\nIMO the wrappers do not need to be uniform across languages as each language has different patterns and idioms and will need a custom wrapper... So making them similar would be good but Do not think they need to all be the same... Up to you guys though... @treeder What do you think? In gitlab by @treeder on May 22, 2017, 14:06\n\nI tend to agree with you you @hibooboo2 , should be what a user would expect based on the language. \n\n@rdallman I was thinking there wouldn't be a main, you just define the function. Then on `fn run` it would wrap it and build it. Similar to other languages on Lambda. In gitlab by @rdallman on May 22, 2017, 14:14\n\nfor go specifically the code won't build (locally, not using fn wrapper stuff) without a main() in package main and if they don't use package main then we would have to create a package main and import their package and then call their handler or change their package to package main on the fly so, seems kind of crufty, and not too hard to make them write main() and then it all falls out pretty intuitively. for javascript, lambda specifically, they can just eval shit, so it's a little different (just write your function and then unicorns). i can imagine other languages being similarly weird to Go but as you say, maybe some langs we don't have to, but we don't have the benefit of throwing functions at vms like lambda does since we're using docker so we at least have to generate or force them to write code that actually executes the code they want -- i guess it's pretty obvious i lean towards the former. In gitlab by @treeder on May 23, 2017, 09:53\n\nWe might want both things now that I think about it. I nice library that can be used if you want more control. But the default, simple way would just be a handler that gets wrapped with a main() and all the goodies. \n\nFission does it an interesting way using plugins: https://github.com/fission/fission/tree/master/examples/go In gitlab by @rdallman on May 23, 2017, 10:50\n\nfission appears to use `package main` in their example, I guess I don't really see the benefit of being able to omit 3 LOC. woo fuckin hoo In gitlab by @treeder on May 30, 2017, 14:55\n\nadded ~6 label In gitlab by @carimura on May 31, 2017, 08:36\n\nremoved ~6 label In gitlab by @treeder on Jun 13, 2017, 10:12\n\nchanged milestone to %4  In gitlab by @treeder on May 11, 2017, 17:11\r\n\r\n* [ ] our common syntax\r\n* [ ] support for lambda syntax too (probably move our current lambda support into the FDK)\r\n* [ ] both default and hot JSON functions\r\n\r\nFor Lambda, could use mostly the same code, but create a `handleLambda` function to handle AWS specific syntax. Then we don't have two Node libs hanging around. \r\n  need rebase  @hibooboo2 needs rebase, but LGTM", "text_all_count": 65235, "text_word_token": ["Image", "pull", "and", "container", "uds", "initialization", "duration", "be", "out", "of", "Fn", "Service", "control", "therefore", "should", "not", "be", "include", "in", "scheduler", "latency", "which", "tracks", "service", "health", "NUMBER", "The", "remaining", "time", "be", "container", "create", "setup", "and", "any", "delay", "during", "slot", "queue", "wait", "NUMBER", "However", "notice", "that", "this", "simplistic", "subtraction", "will", "not", "work", "as", "I", "intended", "since", "the", "container", "might", "not", "necessarily", "serve", "the", "request", "that", "triggered", "it", "NUMBER", "I", "m", "going", "to", "close", "this", "PR", "since", "converting", "the", "request", "vs", "container", "processing", "to", "NUMBER", "NUMBER", "will", "alleviate", "these", "issue", "and", "will", "make", "such", "accounting", "very", "trivial", "NUMBER", "What", "I", "did", "add", "helper", "function", "to", "generate", "log", "scale", "and", "linear", "histogram", "buckets", "for", "metrics", "Catches", "and", "generates", "function", "error", "for", "two", "new", "cases", "NUMBER", "The", "first", "occur", "due", "to", "a", "function", "FDK", "error", "NUMBER", "If", "the", "function", "close", "the", "read", "end", "of", "the", "pipe", "that", "the", "hostagent", "uses", "to", "write", "data", "before", "the", "hostagent", "has", "finished", "write", "the", "data", "generate", "an", "error", "NUMBER", "This", "ensures", "that", "any", "premature", "close", "of", "the", "input", "stream", "be", "detected", "and", "handle", "by", "the", "hostagent", "NUMBER", "Second", "catch", "any", "cases", "where", "the", "function", "attempts", "to", "respond", "before", "reading", "all", "of", "the", "input", "data", "from", "the", "stream", "NUMBER", "This", "be", "safe", "because", "we", "already", "enforce", "a", "maximum", "upper", "bound", "on", "the", "request", "body", "so", "a", "function", "or", "fdk", "will", "not", "have", "to", "read", "for", "an", "unbounded", "amount", "of", "time", "to", "consume", "the", "outstanding", "data", "NUMBER", "Since", "the", "container", "contract", "enforces", "HTTP", "like", "semantics", "and", "HTTP", "expects", "the", "server", "side", "to", "wait", "for", "the", "response", "body", "to", "arrive", "before", "responding", "this", "be", "not", "unreasonable", "NUMBER", "If", "the", "function", "or", "fdk", "attempts", "to", "write", "before", "the", "end", "of", "the", "input", "stream", "has", "be", "processed", "by", "the", "hostagent", "return", "a", "different", "function", "error", "indicating", "that", "a", "premature", "write", "has", "be", "detected", "NUMBER", "LINK", "Added", "fn", "appid", "and", "fnid", "needed", "for", "internal", "tracing", "and", "correct", "span", "name", "in", "lb_agent", "NUMBER", "go", "to", "avoid", "duplicate", "span", "conflict", "with", "span", "in", "agent", "NUMBER", "go", "LINK", "_agent", "NUMBER", "go", "L", "NUMBER", "LINK", "L", "NUMBER", "It", "s", "gonna", "look", "like", "this", "Screen", "Shot", "NUMBER", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "NUMBER", "AM", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "f", "NUMBER", "NUMBER", "cc", "NUMBER", "e", "NUMBER", "NUMBER", "b", "NUMBER", "NUMBER", "c", "NUMBER", "d", "NUMBER", "e", "NUMBER", "png", "Changing", "duplicate", "span", "name", "Hold", "off", "on", "merge", "need", "to", "add", "a", "couple", "other", "things", "to", "span", "attribs", "Link", "to", "issue", "this", "resolve", "close", "LINK", "What", "I", "did", "How", "I", "did", "it", "Added", "ocgrpc", "wrappers", "to", "dialopts", "for", "grpc", "runner", "client", "and", "static", "pool", "server", "How", "to", "verify", "it", "Run", "a", "Jaeger", "instance", "set", "the", "collector", "URL", "and", "view", "traces", "One", "line", "description", "for", "the", "changelog", "Add", "ocgrpc", "wrapper", "for", "runnner", "static_pool", "One", "moving", "picture", "involving", "robots", "not", "mandatory", "but", "encourage", "Diagnosing", "the", "build", "failure", "gofmt", "this", "file", "was", "push", "to", "deprecate", "refs", "we", "don", "t", "really", "need", "anymore", "NUMBER", "we", "start", "use", "the", "vX", "NUMBER", "Y", "NUMBER", "Z", "to", "make", "mod", "happy", "and", "that", "s", "widely", "tracked", "in", "VCS", "now", "whereas", "I", "doubt", "the", "naked", "version", "be", "tracked", "anywhere", "without", "something", "analogous", "exist", "we", "ve", "be", "on", "mod", "for", "some", "time", "now", "NUMBER", "fnproject", "function", "was", "deprecate", "and", "I", "was", "only", "able", "to", "find", "a", "couple", "of", "stale", "references", "some", "merely", "comments", "NUMBER", "I", "suspect", "we", "can", "safely", "remove", "this", "NUMBER", "reduced", "git", "pushes", "from", "NUMBER", "to", "NUMBER", "woo", "reduced", "docker", "pushes", "from", "NUMBER", "to", "NUMBER", "yay", "inside", "of", "TryExec", "we", "were", "write", "directly", "to", "the", "response", "writer", "inside", "of", "a", "goroutine", "but", "TryExec", "can", "timeout", "and", "then", "get", "call", "again", "to", "a", "different", "runner", "or", "even", "have", "the", "front", "end", "write", "headers", "while", "TryExec", "be", "write", "headers", "NUMBER", "one", "way", "to", "make", "this", "safe", "be", "to", "make", "a", "new", "response", "writer", "for", "TryExec", "to", "write", "the", "response", "into", "and", "only", "after", "the", "goroutine", "handle", "the", "response", "has", "returned", "from", "the", "TryExec", "goroutine", "we", "can", "copy", "the", "response", "back", "up", "as", "the", "caller", "will", "not", "call", "TryExec", "again", "until", "it", "has", "returned", "this", "be", "seemingly", "part", "of", "the", "placer", "contract", "NUMBER", "unfortunately", "we", "re", "already", "buffering", "the", "response", "writer", "in", "the", "front", "end", "too", "it", "s", "possible", "we", "can", "get", "rid", "of", "that", "but", "it", "may", "need", "further", "test", "NUMBER", "this", "add", "an", "optimization", "when", "copying", "the", "request", "body", "from", "the", "LB", "to", "a", "runner", "since", "we", "re", "use", "request", "NUMBER", "GetBody", "and", "returning", "a", "reader", "we", "be", "familiar", "with", "that", "happens", "to", "just", "wrap", "a", "buffer", "s", "bytes", "which", "we", "just", "need", "multiple", "readers", "on", "but", "the", "data", "doesn", "t", "change", "NUMBER", "anyway", "this", "whole", "interaction", "be", "unfortunate", "but", "kind", "of", "necessary", "due", "to", "needing", "to", "maneuver", "into", "a", "protobuf", "it", "seems", "like", "a", "worth", "it", "and", "somewhat", "ok", "abstraction", "wise", "optimization", "NUMBER", "additionally", "this", "gets", "rid", "of", "passing", "the", "client", "response", "headers", "down", "into", "the", "agent", "for", "detached", "function", "NUMBER", "we", "don", "t", "need", "these", "since", "detached", "function", "be", "not", "responding", "with", "the", "function", "response", "to", "the", "client", "only", "a", "NUMBER", "this", "was", "leading", "to", "races", "around", "write", "the", "headers", "in", "retries", "too", "but", "this", "be", "just", "for", "posterity", "correctness", "now", "NUMBER", "update", "the", "makefile", "system", "test", "script", "so", "that", "I", "could", "run", "these", "faster", "to", "repro", "pretty", "handy", "should", "add", "to", "other", "stuff", "too", "NUMBER", "close", "NUMBER", "even", "have", "the", "front", "end", "write", "headers", "while", "TryExec", "be", "write", "headers", "NUMBER", "Is", "this", "change", "address", "this", "issue", "as", "well", "Reading", "the", "code", "seems", "to", "me", "that", "this", "case", "having", "the", "front", "end", "write", "headers", "be", "still", "possible", "I", "should", "have", "be", "more", "clear", "here", "NUMBER", "TryExec", "and", "the", "front", "end", "will", "not", "compete", "for", "write", "headers", "anymore", "as", "the", "client", "headers", "well", "buffered", "client", "headers", "or", "the", "front", "end", "response", "writer", "however", "we", "want", "to", "look", "at", "it", "be", "no", "longer", "write", "to", "from", "a", "goroutine", "in", "TryExec", "whose", "lifetime", "may", "exceed", "TryExec", "s", "lifetime", "NUMBER", "the", "front", "end", "will", "only", "write", "headers", "after", "TryExec", "has", "returned", "now", "that", "we", "re", "write", "headers", "to", "the", "front", "end", "s", "response", "writer", "inside", "of", "TryExec", "and", "not", "in", "a", "goroutine", "this", "operation", "be", "safe", "as", "long", "as", "the", "contract", "there", "holds", "namely", "that", "TryExec", "be", "waited", "on", "by", "its", "calling", "routine", "or", "at", "least", "when", "submit", "returns", "there", "be", "no", "outstanding", "TryExec", "s", "lingering", "in", "other", "goroutines", "NUMBER", "The", "change", "to", "the", "sentToRunner", "function", "be", "about", "the", "optimisation", "for", "copying", "RequestBody", "right", "I", "can", "move", "this", "no", "problem", "NUMBER", "try", "to", "slip", "in", "some", "cleanup", "where", "I", "can", "The", "change", "to", "the", "sentToRunner", "function", "be", "about", "the", "optimisation", "for", "copying", "RequestBody", "right", "this", "be", "remove", "from", "this", "PR", "we", "weren", "t", "stripping", "transport", "headers", "from", "function", "response", "before", "copying", "to", "the", "client", "response", "NUMBER", "this", "means", "e", "NUMBER", "g", "NUMBER", "a", "function", "could", "send", "a", "Connection", "close", "when", "fn", "wants", "to", "use", "a", "keep", "alive", "NUMBER", "this", "also", "moved", "this", "to", "common", "since", "we", "re", "doing", "it", "in", "NUMBER", "places", "NUMBER", "I", "know", "that", "it", "s", "not", "the", "ideal", "ideal", "big", "O", "performance", "and", "we", "can", "pedant", "about", "it", "but", "we", "re", "talking", "about", "NUMBER", "things", "here", "NUMBER", "I", "m", "open", "to", "ideas", "about", "what", "this", "should", "look", "like", "I", "ripped", "it", "out", "of", "the", "stdlib", "and", "it", "seems", "okay", "NUMBER", "change", "the", "trigger", "stuff", "to", "use", "this", "too", "as", "it", "was", "copied", "NUMBER", "add", "test", "to", "cover", "all", "NUMBER", "of", "these", "spots", "NUMBER", "the", "only", "behavior", "change", "for", "exist", "behavior", "be", "no", "longer", "stripping", "authorization", "header", "when", "passing", "headers", "from", "the", "client", "request", "into", "the", "function", "NUMBER", "authorization", "seems", "like", "a", "useful", "header", "for", "users", "that", "want", "to", "use", "auth", "in", "their", "function", "I", "think", "if", "we", "need", "to", "use", "this", "one", "in", "the", "backend", "we", "should", "more", "carefully", "strip", "out", "the", "parts", "we", "use", "before", "passing", "them", "on", "instead", "of", "relying", "on", "the", "agent", "to", "strip", "the", "header", "to", "not", "leak", "anything", "into", "a", "function", "NUMBER", "close", "NUMBER", "RUN", "TestBasicConcurrentDetachedExecution", "fatal", "error", "concurrent", "map", "read", "and", "map", "write", "goroutine", "NUMBER", "run", "runtime", "NUMBER", "row", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "usr", "local", "go", "src", "runtime", "panic", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "fp", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "b", "NUMBER", "sp", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "pc", "NUMBER", "x", "NUMBER", "e", "NUMBER", "runtime", "NUMBER", "mapaccess", "NUMBER", "_faststr", "NUMBER", "xef", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "ea", "NUMBER", "NUMBER", "xff", "NUMBER", "dd", "NUMBER", "NUMBER", "xe", "NUMBER", "x", "NUMBER", "usr", "local", "go", "src", "runtime", "map_faststr", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "fp", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "sp", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "b", "NUMBER", "pc", "NUMBER", "x", "NUMBER", "e", "NUMBER", "f", "NUMBER", "net", "textproto", "NUMBER", "MIMEHeader", "NUMBER", "Get", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "ea", "NUMBER", "NUMBER", "xff", "NUMBER", "dd", "NUMBER", "NUMBER", "xe", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "usr", "local", "go", "src", "net", "textproto", "header", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "d", "fp", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "sp", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "pc", "NUMBER", "x", "NUMBER", "a", "NUMBER", "add", "net", "http", "NUMBER", "Header", "NUMBER", "Get", "NUMBER", "usr", "local", "go", "src", "net", "http", "header", "NUMBER", "go", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "NUMBER", "logCallFinish", "NUMBER", "x", "NUMBER", "be", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "aa", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "ea", "NUMBER", "NUMBER", "xc", "NUMBER", "ca", "home", "circleci", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "runner_client", "NUMBER", "go", "NUMBER", "NUMBER", "xa", "NUMBER", "fp", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "e", "NUMBER", "sp", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "pc", "NUMBER", "xbcb", "NUMBER", "e", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "NUMBER", "receiveFromRunner", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "be", "NUMBER", "NUMBER", "x", "NUMBER", "ba", "NUMBER", "NUMBER", "xc", "NUMBER", "fb", "NUMBER", "NUMBER", "xff", "NUMBER", "c", "NUMBER", "NUMBER", "xe", "NUMBER", "x", "NUMBER", "ae", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "home", "circleci", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "runner_client", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "e", "fp", "NUMBER", "xc", "NUMBER", "ff", "NUMBER", "sp", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "e", "NUMBER", "pc", "NUMBER", "xbcafde", "runtime", "NUMBER", "goexit", "usr", "local", "go", "src", "runtime", "asm_amd", "NUMBER", "s", "NUMBER", "NUMBER", "x", "NUMBER", "fp", "NUMBER", "xc", "NUMBER", "ffa", "NUMBER", "sp", "NUMBER", "xc", "NUMBER", "ff", "NUMBER", "pc", "NUMBER", "x", "NUMBER", "c", "NUMBER", "created", "by", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "NUMBER", "gRPCRunner", "NUMBER", "TryExec", "home", "circleci", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "runner_client", "NUMBER", "go", "NUMBER", "NUMBER", "xbbd", "LINK", "while", "it", "lasts", "I", "can", "t", "figure", "out", "if", "it", "s", "a", "race", "in", "test", "or", "a", "race", "in", "the", "code", "NUMBER", "it", "looks", "awfully", "suspicious", "since", "it", "s", "detached", "and", "we", "write", "the", "headers", "early", "on", "that", "one", "but", "the", "race", "appears", "in", "the", "lb", "which", "seems", "funky", "NUMBER", "thanks", "for", "details", "NUMBER", "yeah", "I", "buy", "that", "NUMBER", "be", "having", "trouble", "reproducing", "locally", "NUMBER", "fix", "doesn", "t", "seem", "straightforward", "for", "detached", "we", "probably", "shouldn", "t", "be", "handing", "over", "the", "same", "response", "writer", "that", "we", "re", "use", "to", "write", "back", "a", "response", "to", "the", "client", "since", "we", "want", "to", "discard", "the", "response", "basically", "for", "the", "sync", "writer", "submit", "should", "return", "before", "it", "s", "use", "NUMBER", "i", "ve", "get", "a", "possible", "fix", "work", "on", "it", "at", "least", "NUMBER", "i", "need", "to", "read", "the", "detached", "stuff", "again", "to", "be", "sure", "NUMBER", "thanks", "I", "follow", "and", "agree", "about", "the", "logger", "NUMBER", "from", "what", "I", "can", "tell", "this", "means", "that", "TryExec", "itself", "needs", "to", "be", "handed", "a", "response", "writer", "that", "be", "safe", "for", "write", "body", "and", "headers", "to", "at", "least", "the", "issue", "itself", "do", "not", "seem", "to", "be", "from", "within", "TryExec", "or", "receiveFromRunner", "as", "they", "appear", "safe", "on", "their", "own", "but", "not", "safe", "when", "TryExec", "be", "call", "multiple", "times", "with", "the", "same", "RunnerCall", "edit", "have", "trouble", "with", "words", "at", "least", "I", "m", "finding", "it", "hard", "to", "spot", "how", "to", "do", "this", "in", "receiveFromRunner", "alone", "as", "that", "routine", "itself", "be", "write", "or", "reading", "the", "headers", "at", "various", "spots", "logger", "include", "NUMBER", "in", "any", "case", "it", "seems", "that", "the", "issue", "itself", "be", "deeper", "than", "the", "logger", "as", "there", "be", "other", "spots", "that", "the", "header", "map", "could", "be", "read", "write", "this", "one", "just", "cropped", "up", "in", "the", "logger", "NUMBER", "agree", "about", "not", "doing", "concurrent", "safe", "respwriter", "yea", "NUMBER", "that", "option", "sounds", "the", "best", "to", "me", "I", "was", "trying", "to", "figure", "out", "where", "to", "do", "this", "NUMBER", "TryExec", "seems", "just", "fine", "NUMBER", "PlaceCall", "kind", "of", "stinks", "because", "every", "placer", "has", "to", "do", "it", "TryRunner", "be", "another", "possibility", "NUMBER", "TryExec", "be", "implement", "by", "any", "runner", "whereas", "every", "placer", "calls", "TryRunner", "NUMBER", "not", "sure", "i", "follow", "about", "moving", "w", "o", "copying", "with", "the", "way", "the", "runnercall", "be", "do", "atm", "if", "you", "want", "to", "have", "it", "at", "explain", "at", "least", "it", "sounds", "nicer", "than", "copying", "if", "we", "can", "figure", "out", "a", "way", "to", "avoid", "it", "NUMBER", "no", "worries", "NUMBER", "the", "copy", "isn", "t", "too", "bad", "I", "guess", "the", "sad", "part", "be", "we", "re", "copying", "in", "two", "places", "but", "we", "can", "probably", "change", "that", "too", "NUMBER", "close", "NUMBER", "without", "this", "be", "vm", "NUMBER", "swappiness", "be", "not", "turned", "off", "then", "it", "allows", "container", "to", "use", "unlimited", "up", "to", "host", "max", "anonymous", "swap", "space", "on", "the", "host", "NUMBER", "this", "behavior", "be", "not", "what", "we", "want", "particularly", "for", "get", "test", "to", "pass", "on", "everybody", "s", "dev", "environment", "but", "we", "don", "t", "really", "want", "this", "behavior", "in", "any", "case", "NUMBER", "see", "LINK", "dockerclient", "pull", "NUMBER", "for", "why", "fsouza", "needed", "to", "be", "update", "this", "will", "affect", "LINK", "as", "well", "it", "be", "easy", "to", "update", "just", "change", "pid", "limit", "to", "a", "pointer", "so", "I", "m", "not", "sure", "order", "matters", "NUMBER", "pretty", "small", "and", "straightforward", "change", "though", "thanks", "Hey", "Daniel", "NUMBER", "I", "be", "going", "to", "try", "to", "get", "the", "auth", "and", "dns", "middleware", "examples", "work", "again", "this", "next", "week", "I", "suspect", "this", "be", "just", "a", "few", "minor", "compile", "bug", "but", "may", "use", "the", "opportunity", "to", "clean", "up", "extensions", "stuff", "in", "general", "NUMBER", "we", "do", "have", "support", "for", "an", "auth", "token", "in", "the", "cli", "I", "think", "by", "happenstance", "as", "far", "as", "support", "it", "out", "of", "the", "box", "in", "fn", "I", "suppose", "we", "could", "support", "it", "by", "allowing", "a", "token", "to", "be", "configured", "on", "server", "startup", "but", "I", "think", "our", "hope", "in", "general", "be", "that", "if", "this", "be", "desired", "it", "s", "easy", "enough", "to", "build", "and", "use", "fn", "with", "auth", "extensions", "have", "not", "thought", "out", "specifically", "support", "auth", "out", "of", "the", "box", "and", "intersection", "with", "any", "additional", "middleware", "authentication", "specifically", "schemes", "that", "be", "not", "basic", "auth", "and", "how", "to", "configure", "this", "to", "override", "basic", "abstraction", "etc", "NUMBER", "hey", "Daniel", "NUMBER", "first", "step", "of", "update", "LINK", "pending", "review", "I", "think", "I", "m", "going", "to", "rework", "the", "example", "s", "main", "to", "set", "up", "the", "datastore", "itself", "grab", "the", "db", "out", "of", "there", "and", "use", "it", "rather", "than", "all", "the", "additional", "plumbing", "to", "get", "the", "datastore", "out", "NUMBER", "sorry", "for", "delay", "here", "wedged", "get", "reviews", "for", "a", "bit", "now", "NUMBER", "dgutson", "LINK", "issuecomment", "NUMBER", "be", "the", "plan", "it", "s", "going", "to", "take", "some", "time", "to", "add", "some", "methods", "to", "fn", "and", "then", "make", "the", "change", "in", "the", "ext", "auth", "repo", "to", "use", "them", "NUMBER", "if", "you", "have", "an", "exist", "auth", "solution", "you", "need", "to", "integrate", "with", "ext", "auth", "be", "a", "decent", "template", "as", "be", "and", "the", "change", "I", "m", "make", "won", "t", "help", "much", "just", "remove", "all", "the", "db", "usage", "and", "change", "it", "to", "client", "calls", "to", "your", "auth", "service", "caching", "NUMBER", "there", "s", "a", "more", "pressing", "issue", "of", "actually", "update", "the", "runtime", "images", "which", "probably", "precedes", "this", "task", "NUMBER", "none", "of", "them", "have", "automatic", "update", "in", "CI", "on", "a", "cron", "schedule", "regularly", "and", "few", "on", "a", "master", "gets", "update", "schedule", "too", "NUMBER", "all", "that", "this", "says", "be", "that", "we", "don", "t", "run", "apk", "upgrade", "which", "be", "easy", "to", "fix", "NUMBER", "I", "don", "t", "disagree", "about", "doing", "this", "but", "we", "should", "automate", "it", "NUMBER", "I", "could", "just", "as", "easily", "every", "monday", "send", "an", "email", "that", "says", "we", "haven", "t", "update", "the", "package", "in", "the", "runtime", "images", "the", "info", "we", "re", "get", "here", "isn", "t", "very", "valuable", "at", "least", "from", "what", "I", "can", "tell", "and", "could", "be", "automate", "away", "NUMBER", "though", "it", "s", "fine", "for", "us", "to", "run", "snyk", "at", "present", "we", "don", "t", "even", "have", "the", "runtime", "images", "set", "up", "to", "update", "think", "that", "task", "precedes", "this", "or", "this", "be", "just", "annoying", "and", "not", "telling", "us", "anything", "we", "don", "t", "already", "know", "NUMBER", "moving", "dockerfiles", "to", "fdks", "be", "fine", "NUMBER", "please", "make", "sure", "there", "be", "a", "script", "for", "update", "them", "fnproject", "dockers", "has", "a", "script", "NUMBER", "we", "need", "to", "get", "a", "docker", "hub", "bot", "and", "set", "up", "CI", "to", "do", "this", "chore", "too", "ideally", "it", "s", "manual", "atm", "NUMBER", "and", "further", "as", "stated", "need", "to", "set", "up", "cron", "since", "the", "FDKs", "be", "update", "infrequently", "but", "can", "do", "that", "after", "get", "CI", "bot", "set", "up", "NUMBER", "can", "we", "cover", "all", "FDKs", "before", "merge", "any", "one", "of", "them", "I", "be", "very", "much", "trying", "to", "protect", "against", "the", "situation", "where", "we", "update", "a", "couple", "of", "them", "with", "all", "this", "fancy", "build", "stuff", "but", "leave", "the", "others", "to", "rot", "also", "not", "to", "have", "intermediate", "patches", "that", "we", "aren", "t", "sure", "about", "with", "repos", "in", "different", "state", "to", "track", "NUMBER", "it", "would", "be", "nice", "to", "be", "consistent", "across", "everything", "for", "the", "build", "stuff", "as", "well", "as", "this", "NUMBER", "reviewing", "be", "ok", "first", "to", "figure", "out", "the", "shape", "of", "all", "this", "stuff", "NUMBER", "since", "we", "ve", "accomplished", "NUMBER", "now", "and", "the", "logs", "API", "be", "gone", "there", "be", "no", "default", "logging", "story", "for", "function", "for", "users", "that", "run", "fn", "start", "NUMBER", "this", "be", "kinda", "bad", "NUMBER", "there", "be", "NUMBER", "ways", "to", "get", "logs", "now", "neither", "of", "which", "be", "defaulted", "to", "add", "a", "syslog", "url", "to", "an", "app", "set", "FN_LOG_LEVEL", "debug", "fn", "start", "log", "level", "debug", "one", "solution", "be", "that", "we", "could", "provide", "additional", "configuration", "to", "turn", "off", "the", "logs", "and", "allow", "setting", "the", "container", "log", "level", "possibly", "defaulting", "to", "out", "of", "the", "box", "use", "info", "level", "but", "allow", "disabling", "this", "setting", "to", "debug", "level", "NUMBER", "then", "users", "could", "see", "the", "logs", "from", "the", "fn", "start", "docker", "container", "or", "from", "their", "terminal", "in", "attached", "mode", "NUMBER", "these", "be", "not", "great", "but", "a", "definite", "improvement", "over", "nothing", "NUMBER", "and", "having", "them", "available", "via", "docker", "logs", "allows", "run", "easy", "grep", "commands", "against", "call", "ids", "etc", "NUMBER", "fn", "start", "itself", "be", "a", "dind", "container", "so", "we", "could", "do", "interesting", "things", "like", "leaving", "logs", "laying", "around", "in", "there", "somewhere", "NUMBER", "other", "ideas", "be", "welcome", "here", "NUMBER", "currently", "the", "lb", "read", "cache", "only", "covers", "apps", "NUMBER", "however", "the", "API", "itself", "can", "be", "and", "be", "use", "for", "fns", "app", "ids", "and", "triggers", "as", "well", "NUMBER", "without", "use", "the", "read", "cache", "this", "means", "that", "we", "were", "hitting", "the", "datastore", "every", "invoke", "request", "to", "get", "the", "function", "and", "the", "app", "id", "which", "resulted", "in", "add", "latency", "due", "to", "contention", "and", "costs", "there", "NUMBER", "get", "about", "a", "NUMBER", "NUMBER", "throughput", "bump", "by", "doing", "this", "and", "it", "seems", "like", "a", "pretty", "obvious", "thing", "to", "do", "my", "load", "test", "has", "function", "that", "run", "in", "about", "NUMBER", "ms", "themselves", "in", "a", "not", "under", "duress", "fn", "environment", "make", "the", "NUMBER", "s", "window", "coverage", "a", "considerable", "reduction", "in", "db", "calls", "like", "NUMBER", "k", "less", "in", "test", "since", "i", "m", "run", "NUMBER", "k", "in", "about", "NUMBER", "s", "now", "it", "s", "about", "NUMBER", "db", "calls", "instead", "of", "NUMBER", "k", "note", "that", "this", "do", "affect", "the", "service", "upstream", "as", "the", "service", "uses", "this", "as", "well", "NUMBER", "this", "means", "that", "function", "will", "have", "an", "additional", "worst", "case", "NUMBER", "second", "update", "latency", "from", "the", "sync", "update", "NUMBER", "from", "what", "I", "can", "tell", "it", "s", "use", "bolt", "so", "it", "s", "decent", "savings", "at", "least", "with", "sqlite", "NUMBER", "it", "s", "about", "NUMBER", "for", "my", "load", "test", "if", "this", "be", "undesirable", "it", "be", "one", "update", "in", "service", "code", "to", "stop", "wrapping", "the", "read", "access", "store", "with", "the", "cache", "it", "s", "explicitly", "doing", "this", "atm", "NUMBER", "this", "also", "makes", "an", "update", "to", "the", "configuration", "dance", "so", "that", "the", "read", "access", "actually", "shoots", "out", "metrics", "and", "hits", "validator", "which", "be", "pass", "through", "for", "get", "stuff", "and", "uses", "the", "extensions", "which", "helps", "for", "debugging", "things", "like", "this", "NUMBER", "from", "what", "I", "can", "tell", "there", "be", "no", "other", "behavior", "change", "here", "since", "we", "were", "previously", "doing", "the", "wrap", "for", "any", "datastore", "just", "later", "down", "the", "line", "than", "from", "the", "config", "option", "this", "be", "just", "add", "the", "same", "treatment", "to", "the", "read", "store", "pretty", "much", "NUMBER", "here", "s", "my", "hokey", "load", "test", "for", "the", "curious", "well", "a", "sample", "of", "them", "have", "run", "this", "a", "lot", "now", "NUMBER", "note", "that", "i", "m", "far", "from", "scientifically", "precise", "but", "still", "pretty", "good", "confidence", "anyway", "this", "patch", "n", "NUMBER", "p", "NUMBER", "duration", "NUMBER", "s", "tps", "NUMBER", "max", "NUMBER", "ms", "min", "NUMBER", "\u00b5s", "mean", "NUMBER", "ms", "median", "NUMBER", "ms", "std", "NUMBER", "ms", "n", "NUMBER", "p", "NUMBER", "duration", "NUMBER", "s", "tps", "NUMBER", "max", "NUMBER", "ms", "min", "NUMBER", "\u00b5s", "mean", "NUMBER", "ms", "median", "NUMBER", "ms", "std", "NUMBER", "ms", "master", "n", "NUMBER", "p", "NUMBER", "duration", "NUMBER", "s", "tps", "NUMBER", "max", "NUMBER", "ms", "min", "NUMBER", "\u00b5s", "mean", "NUMBER", "ms", "median", "NUMBER", "ms", "std", "NUMBER", "ms", "n", "NUMBER", "p", "NUMBER", "duration", "NUMBER", "s", "tps", "NUMBER", "max", "NUMBER", "ms", "min", "NUMBER", "\u00b5s", "mean", "NUMBER", "ms", "median", "NUMBER", "ms", "std", "NUMBER", "ms", "sauce", "LINK", "I", "haven", "t", "do", "any", "benchmarking", "but", "it", "would", "be", "good", "to", "have", "a", "way", "to", "disable", "caching", "or", "maybe", "the", "solution", "be", "to", "implement", "a", "DataAccess", "without", "caching", "what", "do", "you", "think", "I", "ve", "linked", "to", "how", "to", "do", "this", "in", "slack", "by", "default", "the", "data", "access", "be", "not", "wrapped", "with", "the", "cache", "when", "provide", "a", "ReadDataAccess", "layer", "via", "server", "NUMBER", "WithReadDataAccess", "and", "we", "re", "manually", "wrapping", "with", "the", "cache", "in", "the", "service", "lb", "code", "before", "passing", "in", "the", "option", "which", "we", "could", "delete", "that", "line", "if", "we", "re", "not", "interested", "in", "NUMBER", "agree", "that", "it", "would", "be", "useful", "to", "benchmark", "as", "noted", "with", "sqlite", "NUMBER", "even", "the", "gains", "be", "pretty", "nice", "NUMBER", "i", "guess", "the", "state", "of", "things", "be", "that", "it", "s", "already", "explicitly", "be", "use", "for", "apps", "unwittingly", "or", "not", "since", "we", "have", "some", "load", "test", "stuff", "now", "it", "may", "be", "interesting", "to", "see", "if", "there", "s", "any", "perf", "bump", "when", "add", "in", "the", "use", "of", "it", "for", "function", "that", "ought", "to", "give", "a", "good", "idea", "NUMBER", "be", "gonna", "merge", "since", "all", "concerns", "be", "address", "andrea", "out", "ROW", "happy", "to", "follow", "up", "thanks", "all", "NUMBER", "hoping", "to", "get", "another", "NUMBER", "x", "or", "so", "out", "of", "the", "agent", "before", "digging", "into", "lb_agent", "pure_runner", "denismakogon", "seems", "like", "it", "s", "a", "node", "fdk", "issue", "if", "they", "can", "t", "repro", "with", "java", "no", "need", "to", "try", "other", "fdks", "NUMBER", "any", "info", "on", "fdk", "version", "just", "double", "checking", "that", "was", "update", "as", "well", "NUMBER", "I", "think", "we", "can", "try", "to", "repro", "from", "this", "info", "and", "debug", "thanks", "NUMBER", "it", "looks", "like", "the", "container", "be", "exiting", "and", "be", "remove", "for", "whatever", "reason", "it", "could", "be", "a", "race", "in", "fn", "but", "it", "would", "probably", "also", "happen", "with", "other", "fdks", "if", "that", "was", "the", "case", "NUMBER", "have", "not", "seen", "the", "unknown", "container", "bug", "yet", "NUMBER", "hopefully", "we", "can", "repro", "we", "might", "need", "to", "get", "more", "logs", "about", "what", "s", "going", "on", "NUMBER", "i", "can", "t", "reproduce", "locally", "with", "go", "fwiw", "invoke", "NUMBER", "wait", "NUMBER", "s", "NUMBER", "invoke", "NUMBER", "both", "work", "thanks", "for", "all", "the", "info", "here", "I", "googled", "and", "docker", "exit", "code", "NUMBER", "seems", "to", "have", "something", "to", "do", "with", "the", "OOM", "killer", "NUMBER", "I", "update", "func", "NUMBER", "yaml", "to", "memory", "NUMBER", "My", "fnserver", "has", "NUMBER", "GB", "Ram", "and", "there", "be", "nothing", "in", "dmesg", "NUMBER", "this", "be", "an", "interesting", "wrinkle", "NUMBER", "it", "s", "also", "interesting", "that", "it", "s", "happening", "on", "NUMBER", "and", "not", "NUMBER", "the", "traces", "shouldn", "t", "be", "propagated", "into", "the", "container", "even", "when", "they", "re", "turned", "on", "so", "i", "d", "be", "surprised", "if", "it", "was", "that", "though", "it", "would", "make", "sense", "as", "those", "headers", "could", "be", "pretty", "large", "I", "ve", "test", "this", "and", "confirmed", "that", "I", "m", "not", "get", "the", "headers", "NUMBER", "I", "m", "not", "sure", "what", "else", "would", "be", "effected", "there", "NUMBER", "be", "we", "work", "off", "the", "theory", "that", "this", "be", "relate", "to", "the", "function", "hitting", "oom", "from", "the", "node", "fdk", "I", "see", "earlier", "that", "memory", "was", "raise", "but", "it", "s", "not", "clear", "to", "me", "from", "the", "comments", "whether", "this", "fix", "anything", "or", "not", "I", "m", "not", "sure", "that", "traces", "will", "prove", "very", "useful", "for", "this", "case", "i", "don", "t", "think", "we", "need", "to", "get", "into", "that", "here", "NUMBER", "the", "logs", "be", "pretty", "useful", "especially", "with", "fn", "start", "log", "level", "debug", "usually", "I", "be", "yet", "to", "try", "to", "repro", "with", "nodejs", "I", "can", "give", "this", "a", "whirl", "also", "however", "my", "machine", "notably", "doesn", "t", "throw", "off", "NUMBER", "when", "it", "should", "the", "test", "on", "master", "fail", "for", "me", "locally", "so", "I", "be", "not", "expecting", "much", "if", "that", "s", "what", "s", "going", "on", "here", "which", "may", "may", "not", "be", "useful", "to", "figure", "out", "NUMBER", "i", "get", "a", "repro", "with", "the", "node", "fdk", "from", "the", "cli", "hello", "world", "function", "and", "fn", "NUMBER", "just", "now", "after", "doing", "the", "wait", "thing", "INFO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "starting", "call", "action", "server", "NUMBER", "Server", "NUMBER", "handleFnInvokeCall", "fm", "app_id", "NUMBER", "D", "NUMBER", "GHXY", "NUMBER", "RZJ", "NUMBER", "call_id", "NUMBER", "D", "NUMBER", "AQYSD", "NUMBER", "RZJ", "NUMBER", "C", "container_id", "NUMBER", "D", "NUMBER", "AQXVT", "NUMBER", "RZJ", "NUMBER", "A", "fn_id", "NUMBER", "D", "NUMBER", "GS", "NUMBER", "RZJ", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "docker", "unpause", "app_id", "NUMBER", "D", "NUMBER", "GHXY", "NUMBER", "RZJ", "NUMBER", "call_id", "NUMBER", "D", "NUMBER", "AQXVT", "NUMBER", "RZJ", "NUMBER", "A", "container_id", "NUMBER", "D", "NUMBER", "AQXVT", "NUMBER", "RZJ", "NUMBER", "A", "cpus", "fn_id", "NUMBER", "D", "NUMBER", "GS", "NUMBER", "RZJ", "NUMBER", "idle_timeout", "NUMBER", "image", "rdallman", "hello", "NUMBER", "memory", "NUMBER", "stack", "Unfreeze", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "api", "error", "action", "server", "NUMBER", "Server", "NUMBER", "handleFnInvokeCall", "fm", "code", "NUMBER", "error", "error", "receiving", "function", "response", "fn_id", "NUMBER", "D", "NUMBER", "GS", "NUMBER", "RZJ", "NUMBER", "INFO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "hot", "function", "terminating", "app_id", "NUMBER", "D", "NUMBER", "GHXY", "NUMBER", "RZJ", "NUMBER", "container_id", "NUMBER", "D", "NUMBER", "AQXVT", "NUMBER", "RZJ", "NUMBER", "A", "cpus", "error", "Post", "LINK", "read", "unix", "tmp", "iofs", "lsnr", "NUMBER", "sock", "NUMBER", "tmp", "read", "connection", "reset", "by", "peer", "fn_id", "NUMBER", "D", "NUMBER", "GS", "NUMBER", "RZJ", "NUMBER", "idle_timeout", "NUMBER", "image", "rdallman", "hello", "NUMBER", "memory", "NUMBER", "well", "good", "news", "to", "confirm", "at", "least", "NUMBER", "need", "to", "get", "some", "node", "logs", "I", "think", "can", "turn", "on", "debug", "mode", "on", "fdk", "I", "think", "NUMBER", "usually", "this", "error", "be", "from", "the", "container", "exiting", "which", "looks", "like", "what", "s", "going", "on", "here", "we", "just", "need", "to", "figure", "out", "why", "the", "node", "fdk", "be", "exiting", "I", "get", "container", "stats", "out", "of", "here", "and", "only", "see", "about", "NUMBER", "NUMBER", "MB", "of", "usage", "after", "NUMBER", "invocation", "I", "wish", "we", "made", "this", "easier", "to", "do", "NUMBER", "alas", "NUMBER", "my", "docker", "kill", "event", "looks", "like", "this", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "container", "kill", "d", "NUMBER", "e", "NUMBER", "e", "NUMBER", "ac", "NUMBER", "d", "NUMBER", "bc", "NUMBER", "c", "NUMBER", "b", "NUMBER", "b", "NUMBER", "da", "NUMBER", "d", "NUMBER", "fca", "NUMBER", "e", "NUMBER", "c", "image", "rdallman", "hello", "NUMBER", "name", "NUMBER", "D", "NUMBER", "ARJVTG", "NUMBER", "RZJ", "NUMBER", "signal", "NUMBER", "be", "when", "the", "function", "invocation", "fail", "NUMBER", "if", "I", "invoke", "quickly", "this", "also", "doesn", "t", "happen", "ie", "I", "can", "run", "the", "function", "in", "the", "same", "container", "multiple", "times", "in", "a", "row", "until", "I", "wait", "NUMBER", "now", "that", "I", "think", "about", "it", "I", "think", "change", "idle", "to", "NUMBER", "minutes", "be", "what", "did", "the", "trick", "NUMBER", "we", "re", "expecting", "to", "re", "use", "the", "connection", "but", "the", "fdk", "server", "has", "close", "it", "NUMBER", "the", "node", "fdk", "needs", "to", "respect", "the", "idle", "timeout", "NUMBER", "edit", "fix", "definitions", "of", "client", "server", "tuempeltaucher", "denismakogon", "I", "believe", "I", "have", "posted", "a", "fix", "for", "this", "LINK", "node", "pull", "NUMBER", "see", "PR", "for", "github", "links", "to", "issue", "seems", "like", "node", "made", "a", "baddie", "NUMBER", "I", "confirmed", "this", "be", "fix", "with", "NUMBER", "of", "the", "node", "fdk", "NUMBER", "thanks", "everyone", "was", "NUMBER", "now", "NUMBER", "the", "service", "validates", "the", "same", "value", "via", "a", "different", "method", "for", "each", "of", "these", "already", "NUMBER", "sql", "uses", "varchar", "NUMBER", "so", "we", "re", "good", "NUMBER", "can", "t", "think", "of", "any", "other", "ways", "this", "might", "break", "so", "going", "for", "it", "NUMBER", "close", "NUMBER", "thanks", "denismakogon", "was", "get", "checksum", "mismatches", "this", "fix", "i", "still", "don", "t", "really", "understand", "mod", "there", "s", "all", "kinds", "of", "crap", "in", "here", "we", "don", "t", "have", "any", "trace", "of", "in", "vendor", "but", "it", "build", "so", "i", "update", "go", "to", "NUMBER", "in", "circleci", "assuming", "that", "this", "was", "the", "root", "cause", "of", "my", "mismatch", "to", "begin", "with", "so", "that", "we", "can", "build", "the", "thing", "after", "merge", "this", "thing", "NUMBER", "riconnon", "the", "makefile", "ought", "to", "be", "doing", "this", "Hey", "fadams", "a", "quick", "look", "at", "your", "kube", "config", "and", "I", "m", "guessing", "that", "the", "runner", "node", "s", "be", "miss", "a", "couple", "of", "env", "vars", "it", "needs", "to", "run", "function", "NUMBER", "fn", "start", "be", "a", "decent", "display", "of", "them", "here", "LINK", "L", "NUMBER", "though", "you", "shouldn", "t", "need", "to", "mount", "through", "to", "a", "host", "volume", "just", "specify", "FN_IOFS_DOCKER_PATH", "and", "FN_IOFS_PATH", "might", "do", "the", "trick", "NUMBER", "we", "should", "add", "those", "to", "the", "image", "or", "make", "some", "defaults", "but", "alas", "hope", "that", "helps", "I", "can", "try", "to", "look", "into", "this", "in", "more", "detail", "soon", "if", "you", "can", "paste", "lb", "and", "runner", "logs", "here", "it", "could", "also", "help", "or", "slack", "may", "be", "faster", "NUMBER", "it", "may", "help", "to", "run", "FN_LOG_LEVEL", "debug", "while", "this", "be", "an", "issue", "as", "well", "to", "at", "least", "figure", "out", "how", "far", "a", "request", "might", "be", "get", "NUMBER", "the", "lb", "will", "have", "a", "log", "entry", "for", "the", "internal", "server", "error", "that", "was", "returned", "to", "you", "at", "least", "that", "would", "be", "the", "place", "to", "look", "NUMBER", "I", "ve", "left", "the", "comments", "splayed", "out", "in", "case", "someone", "prefers", "that", "for", "larger", "PRs", "I", "will", "clean", "up", "later", "NUMBER", "details", "the", "goal", "here", "was", "to", "do", "raw", "removals", "without", "doing", "any", "shuffling", "NUMBER", "there", "be", "some", "shuffling", "opportunities", "no", "doubt", "but", "this", "shaves", "a", "lot", "of", "things", "off", "to", "hopefully", "make", "that", "easier", "should", "we", "get", "the", "time", "NUMBER", "most", "of", "the", "change", "be", "just", "to", "the", "test", "really", "as", "the", "mq", "log", "stuff", "was", "all", "over", "the", "place", "and", "this", "just", "remove", "it", "NUMBER", "on", "logs", "and", "calls", "the", "service", "can", "t", "support", "the", "logs", "api", "so", "this", "remove", "it", "NUMBER", "there", "was", "basically", "no", "discussion", "when", "it", "was", "brought", "up", "to", "discuss", "log", "removal", "specifically", "and", "with", "these", "change", "we", "will", "end", "up", "in", "the", "stone", "age", "so", "to", "speak", "where", "users", "can", "get", "logs", "from", "fn", "either", "by", "starting", "it", "in", "debug", "mode", "or", "by", "hooking", "up", "a", "syslog", "url", "to", "their", "apps", "NUMBER", "wrt", "the", "service", "that", "be", "about", "parity", "at", "time", "of", "write", "though", "this", "be", "change", "soon", "NUMBER", "we", "ve", "be", "recommending", "syslog", "mostly", "for", "some", "time", "anyway", "since", "it", "was", "impossible", "to", "debug", "uds", "bug", "with", "the", "logs", "API", "anyway", "and", "that", "s", "the", "source", "of", "seemingly", "all", "of", "our", "support", "request", "now", "let", "s", "not", "talk", "about", "it", "here", "NUMBER", "i", "m", "ears", "and", "mouth", "on", "make", "a", "better", "get", "start", "experience", "for", "logs", "in", "particular", "however", "this", "remove", "quite", "a", "bit", "of", "cruft", "which", "may", "make", "it", "easier", "to", "pave", "forward", "on", "that", "NUMBER", "I", "think", "in", "particular", "some", "kind", "of", "extension", "that", "hands", "the", "logs", "off", "to", "a", "function", "that", "users", "can", "configure", "to", "do", "whatever", "may", "be", "useful", "and", "we", "can", "probably", "use", "some", "of", "the", "s", "NUMBER", "stuff", "delete", "here", "to", "make", "an", "example", "of", "that", "NUMBER", "the", "calls", "api", "was", "also", "not", "easily", "support", "by", "a", "service", "and", "so", "this", "remove", "it", "NUMBER", "we", "have", "extensions", "for", "this", "one", "unlike", "the", "logs", "so", "there", "s", "slightly", "less", "damage", "NUMBER", "there", "be", "some", "update", "to", "add", "things", "like", "call", "ids", "into", "the", "logs", "that", "will", "further", "dampen", "the", "blow", "here", "NUMBER", "without", "async", "this", "was", "not", "exactly", "necessary", "either", "NUMBER", "both", "of", "these", "have", "a", "migration", "and", "be", "remove", "from", "the", "datastore", "tables", "the", "service", "code", "never", "use", "this", "stuff", "so", "there", "s", "nothing", "to", "do", "there", "NUMBER", "on", "hybrid", "data", "access", "there", "be", "one", "use", "that", "be", "not", "part", "of", "the", "v", "NUMBER", "normal", "APIs", "for", "things", "like", "get", "app", "fn", "and", "that", "be", "the", "GetTriggerBySource", "method", "NUMBER", "this", "prevents", "full", "scale", "removal", "of", "the", "whole", "thing", "without", "some", "rewiring", "NUMBER", "the", "hybrid", "client", "be", "basically", "a", "wrapper", "around", "the", "v", "NUMBER", "API", "now", "with", "the", "previously", "noted", "exception", "NUMBER", "the", "service", "code", "uses", "this", "interface", "agent", "NUMBER", "DataAccess", "as", "well", "in", "the", "lb", "NUMBER", "there", "be", "no", "longer", "any", "uses", "of", "this", "interface", "in", "the", "agent", "which", "not", "only", "speeds", "up", "function", "calls", "by", "default", "NUMBER", "ish", "for", "me", "locally", "but", "will", "make", "the", "agent", "easier", "to", "munge", "around", "too", "NUMBER", "again", "tried", "to", "keep", "shuffling", "to", "a", "minimum", "here", "to", "make", "this", "easier", "to", "follow", "NUMBER", "it", "would", "be", "nice", "to", "get", "rid", "of", "this", "interface", "wholesale", "soon", "enough", "NUMBER", "FN_NODE_TYPE", "runner", "has", "gone", "away", "in", "theory", "completely", "unuse", "since", "we", "have", "pure", "runner", "on", "hard", "interface", "breakages", "agent", "NUMBER", "New", "has", "change", "and", "agent", "NUMBER", "NewLBAgent", "has", "change", "simply", "to", "remove", "the", "first", "arg", "a", "data", "access", "thing", "from", "the", "hybrid", "stuff", "NUMBER", "afaik", "there", "be", "no", "other", "hard", "breakages", "for", "still", "to", "be", "use", "interfaces", "NUMBER", "these", "be", "easy", "to", "update", "only", "update", "the", "factory", "method", "call", "for", "each", "NUMBER", "CallHandler", "has", "also", "died", "this", "be", "easy", "to", "remove", "too", "NUMBER", "on", "API", "change", "we", "need", "to", "update", "SDKs", "I", "have", "the", "CLI", "update", "ready", "I", "ve", "left", "NUMBER", "stubs", "for", "dead", "APIs", "during", "the", "transition", "period", "NUMBER", "the", "swagger", "has", "be", "update", "NUMBER", "there", "may", "be", "docs", "to", "update", "as", "well", "this", "can", "be", "do", "pretty", "quickly", "starting", "the", "process", "here", "and", "don", "t", "think", "it", "s", "blocking", "NUMBER", "on", "async", "mostly", "this", "be", "raw", "removal", "and", "like", "the", "log", "thing", "we", "can", "probably", "make", "some", "examples", "of", "use", "a", "queue", "to", "fire", "function", "off", "with", "this", "code", "but", "it", "s", "dead", "code", "atm", "NUMBER", "there", "be", "some", "change", "to", "the", "resource", "manager", "that", "be", "worth", "eye", "balling", "to", "double", "check", "this", "be", "mostly", "just", "removal", "of", "the", "async", "watermark", "and", "the", "special", "method", "for", "async", "to", "wait", "on", "resources", "to", "free", "up", "NUMBER", "user", "facing", "breakage", "issue", "if", "this", "eats", "into", "any", "current", "user", "s", "use", "case", "i", "m", "reluctant", "to", "think", "we", "shouldn", "t", "proceed", "here", "as", "this", "be", "really", "a", "lot", "of", "cruft", "removal", "we", "need", "to", "do", "here", "to", "align", "things", "but", "we", "should", "figure", "out", "a", "path", "forward", "and", "fill", "in", "any", "holes", "for", "things", "like", "extensions", "NUMBER", "considering", "the", "pain", "involved", "in", "make", "this", "change", "it", "d", "be", "nice", "to", "rip", "the", "band", "aid", "off", "and", "work", "quickly", "to", "fill", "in", "the", "holes", "with", "this", "landed", "even", "if", "users", "need", "to", "skip", "a", "few", "version", "and", "freeze", "on", "a", "current", "version", "of", "fn", "before", "this", "NUMBER", "TBD", "please", "pipe", "up", "if", "this", "will", "shatter", "anyone", "s", "world", "would", "like", "to", "keep", "the", "users", "happy", "NUMBER", "logs", "API", "must", "go", "away", "but", "calls", "should", "remain", "until", "better", "option", "NUMBER", "can", "we", "add", "the", "prometheus", "metrics", "of", "interest", "to", "the", "particular", "case", "noted", "earlier", "any", "info", "here", "I", "m", "guessing", "call", "start", "end", "and", "status", "anything", "else", "be", "not", "sure", "if", "we", "re", "already", "logging", "metrics", "for", "those", "as", "it", "be", "NUMBER", "also", "we", "have", "extensions", "for", "calls", "so", "if", "a", "user", "wants", "to", "send", "the", "call", "as", "a", "json", "blob", "somewhere", "or", "anything", "else", "metrics", "too", "when", "it", "starts", "or", "ends", "they", "can", "do", "that", "with", "the", "code", "that", "exists", "with", "this", "patch", "NUMBER", "I", "maintain", "it", "s", "a", "good", "idea", "to", "move", "forward", "here", "to", "tidy", "up", "the", "API", "to", "be", "consistent", "with", "the", "service", "for", "tooling", "and", "ux", "purposes", "but", "let", "s", "talk", "about", "how", "to", "fill", "these", "gaps", "NUMBER", "One", "question", "if", "we", "no", "longer", "have", "async", "calls", "for", "now", "of", "course", "should", "we", "also", "get", "rid", "of", "MQ", "dependencies", "thanks", "i", "ll", "add", "this", "NUMBER", "probably", "aws", "bindings", "will", "go", "away", "too", "NUMBER", "denismakogon", "sure", "no", "problem", "thanks", "denismakogon", "thanks", "It", "sounds", "like", "LINK", "L", "NUMBER", "will", "be", "sufficient", "for", "them", "NUMBER", "It", "s", "also", "possible", "to", "get", "this", "from", "prometheus", "which", "be", "doing", "aggregations", "already", "NUMBER", "any", "way", "we", "can", "help", "them", "move", "over", "to", "unblock", "here", "they", "can", "freeze", "fn", "version", "too", "if", "they", "need", "a", "little", "time", "NUMBER", "use", "the", "call", "extensions", "stuff", "it", "should", "be", "relatively", "easy", "for", "a", "user", "to", "connect", "to", "their", "syslog", "url", "and", "post", "a", "log", "with", "the", "call", "to", "it", "NUMBER", "we", "had", "code", "to", "connect", "to", "syslog", "not", "so", "long", "ago", "it", "was", "maybe", "NUMBER", "LOC", "dial", "form", "body", "copy", "NUMBER", "we", "could", "have", "an", "example", "extension", "showing", "that", "but", "it", "s", "probably", "not", "a", "part", "of", "core", "NUMBER", "with", "the", "way", "things", "be", "at", "present", "without", "async", "the", "calls", "api", "had", "relatively", "low", "utility", "to", "begin", "with", "as", "the", "client", "will", "get", "the", "info", "back", "about", "error", "or", "success", "in", "the", "response", "NUMBER", "with", "async", "this", "api", "was", "more", "needed", "to", "show", "error", "for", "calls", "that", "fail", "but", "extension", "based", "would", "be", "okay", "too", "NUMBER", "the", "problem", "with", "support", "webhooks", "on", "function", "invokes", "in", "core", "API", "would", "be", "that", "we", "would", "need", "to", "support", "it", "in", "the", "service", "and", "support", "webhook", "request", "from", "the", "runner", "nodes", "presents", "networking", "issue", "as", "well", "as", "scalability", "considerations", "it", "s", "better", "to", "leave", "as", "extension", "I", "guess", "NUMBER", "the", "docker", "logs", "driver", "ends", "up", "make", "this", "easier", "to", "do", "for", "logs", "than", "webhooks", "but", "in", "any", "case", "we", "re", "talking", "about", "new", "features", "now", "NUMBER", "will", "plan", "to", "merge", "this", "monday", "and", "dance", "around", "with", "CLI", "SDKs", "other", "deps", "unless", "any", "objections", "come", "in", "over", "the", "weekend", "NUMBER", "thanks", "all", "doing", "it", "live", "NUMBER", "yep", "discussed", "this", "the", "other", "day", "NUMBER", "a", "possible", "path", "forward", "here", "be", "allowing", "upper", "case", "chars", "in", "the", "name", "and", "in", "deploy", "create", "the", "image", "name", "from", "the", "function", "name", "after", "lower", "casing", "it", "NUMBER", "the", "only", "nitty", "bug", "I", "can", "think", "of", "be", "if", "a", "user", "has", "a", "function", "named", "bar", "and", "a", "function", "named", "Bar", "then", "when", "they", "go", "to", "deploy", "a", "function", "as", "user", "foo", "they", "ll", "end", "up", "with", "foo", "bar", "for", "either", "one", "and", "if", "the", "func", "NUMBER", "yaml", "be", "at", "different", "version", "then", "it", "can", "inadvertently", "make", "the", "version", "hop", "around", "in", "a", "not", "contiguous", "fashion", "while", "point", "to", "the", "same", "base", "image", "which", "wouldn", "t", "be", "a", "great", "ux", "NUMBER", "kind", "of", "a", "have", "to", "assume", "the", "user", "be", "dumb", "thing", "but", "anyway", "throw", "it", "out", "there", "NUMBER", "I", "m", "not", "sure", "it", "s", "a", "deal", "breaker", "either", "this", "be", "basically", "already", "the", "case", "for", "directories", "that", "be", "named", "in", "the", "aforementioned", "fashion", "which", "translates", "to", "the", "name", "NUMBER", "we", "re", "looking", "into", "increasing", "the", "default", "of", "this", "value", "it", "may", "be", "possible", "to", "just", "bump", "it", "up", "but", "run", "some", "checks", "first", "NUMBER", "yep", "we", "use", "to", "use", "the", "same", "models", "for", "everything", "fn_go", "be", "generate", "as", "it", "be", "fn", "were", "a", "long", "time", "ago", "but", "have", "be", "manually", "update", "since", "NUMBER", "it", "would", "be", "possible", "to", "go", "back", "to", "that", "but", "i", "m", "not", "sure", "how", "much", "undoing", "might", "have", "to", "get", "do", "to", "do", "that", "in", "fn", "server", "in", "particular", "NUMBER", "I", "forgot", "if", "there", "was", "a", "reason", "that", "happened", "or", "not", "API", "update", "have", "be", "painful", "regardless", "but", "I", "have", "a", "feeling", "it", "was", "from", "that", "NUMBER", "say", "we", "use", "fn_go", "models", "in", "fn", "we", "have", "to", "update", "them", "at", "fn_go", "and", "vendor", "them", "in", "fn", "before", "use", "them", "in", "order", "to", "make", "an", "API", "update", "NUMBER", "that", "s", "just", "a", "vague", "recollection", "though", "NUMBER", "I", "think", "that", "moving", "most", "of", "the", "validations", "to", "be", "all", "server", "side", "well", "remove", "the", "cli", "validations", "will", "make", "things", "a", "bit", "smoother", "here", "too", "NUMBER", "thanks", "for", "digging", "into", "this", "NUMBER", "I", "think", "I", "understand", "the", "crux", "of", "the", "issue", "here", "though", "perhaps", "not", "primarily", "that", "currently", "we", "re", "calling", "Close", "here", "LINK", "L", "NUMBER", "on", "the", "concrete", "implementation", "of", "the", "container", "task", "so", "we", "need", "something", "to", "expose", "a", "way", "for", "drivers", "to", "add", "things", "to", "the", "container", "close", "method", "NUMBER", "this", "do", "seem", "like", "a", "general", "flaw", "in", "interface", "design", "namely", "that", "we", "ve", "created", "an", "interface", "to", "hand", "over", "that", "will", "have", "most", "of", "its", "methods", "call", "by", "another", "package", "yet", "we", "still", "require", "calling", "one", "of", "them", "from", "the", "caller", "Close", "NUMBER", "I", "did", "some", "marinating", "and", "had", "a", "thought", "that", "maybe", "we", "should", "move", "this", "onto", "the", "cookie", "NUMBER", "If", "we", "made", "part", "of", "the", "contract", "for", "close", "here", "LINK", "L", "NUMBER", "to", "be", "responsible", "for", "closing", "the", "container", "task", "we", "get", "part", "of", "the", "way", "there", "NUMBER", "we", "d", "also", "need", "to", "make", "CreateCookie", "responsible", "for", "calling", "close", "on", "the", "container", "if", "it", "fail", "to", "return", "a", "cookie", "otherwise", "we", "leak", "resources", "NUMBER", "the", "thinking", "be", "that", "we", "need", "to", "be", "able", "to", "decorate", "the", "driver", "and", "container", "and", "have", "a", "clear", "contract", "there", "handing", "off", "all", "container", "responsibilities", "to", "the", "driver", "via", "the", "cookie", "NUMBER", "any", "thoughts", "here", "be", "it", "sufficient", "for", "this", "use", "case", "BeforeCall", "and", "AfterCall", "seem", "out", "of", "place", "be", "on", "the", "driver", "itself", "as", "the", "driver", "be", "simply", "about", "container", "execution", "not", "call", "execution", "but", "I", "can", "t", "think", "of", "alternative", "ways", "to", "access", "the", "underlying", "container", "before", "and", "after", "each", "call", "on", "a", "container", "NUMBER", "what", "be", "the", "need", "for", "the", "WrapXxxCall", "methods", "since", "the", "agent", "package", "be", "calling", "cookie", "NUMBER", "BeforeCall", "AfterCall", "it", "should", "be", "possible", "to", "simply", "implement", "the", "BeforeCall", "AfterCall", "methods", "on", "the", "cookie", "without", "the", "need", "for", "wrap", "by", "having", "the", "decorated", "driver", "return", "the", "decorated", "cookie", "with", "the", "BeforeCall", "AfterCall", "methods", "implement", "This", "be", "a", "track", "ticket", "to", "cover", "all", "the", "things", "we", "should", "do", "to", "make", "Fn", "work", "nice", "for", "windows", "developers", "NUMBER", "Goal", "If", "you", "have", "docker", "NUMBER", "windows", "set", "up", "it", "s", "as", "easy", "to", "run", "fn", "on", "windows", "as", "it", "be", "on", "a", "mac", "NUMBER", "Current", "state", "of", "affairs", "Fn", "start", "broken", "fn", "NUMBER", "exe", "start", "docker", "Error", "response", "from", "daemon", "Mount", "denied", "The", "source", "path", "C", "Users", "Owen", "Cliffe", "NUMBER", "fn", "iofs", "doesn", "t", "exist", "and", "be", "not", "know", "to", "Docker", "NUMBER", "See", "docker", "run", "help", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Error", "processed", "finished", "with", "error", "exit", "status", "NUMBER", "Invalid", "Mode", "tmp", "iofs", "LINK", "Mount", "denied", "LINK", "fn", "start", "gives", "two", "mount", "warnings", "in", "Windows", "NUMBER", "LINK", "Fn", "cli", "be", "not", "sign", "have", "to", "run", "in", "developer", "mode", "LINK", "Fn", "cli", "colors", "don", "t", "work", "on", "windows", "LINK", "Thanks", "for", "raising", "this", "FWIW", "what", "be", "happening", "here", "be", "that", "Fn", "server", "be", "creating", "a", "directory", "to", "share", "unix", "sockets", "between", "it", "and", "Fn", "container", "because", "fn", "be", "itself", "run", "in", "docker", "on", "the", "desktop", "it", "needs", "to", "share", "that", "directory", "with", "the", "docker", "host", "NUMBER", "e", "NUMBER", "g", "NUMBER", "on", "OSX", "Fn", "cli", "starts", "fn", "server", "with", "Users", "Me", "NUMBER", "fn", "iofs", "mounted", "into", "iofs", "in", "the", "fnserver", "this", "directory", "has", "to", "be", "on", "the", "host", "as", "d", "NUMBER", "m", "only", "lets", "you", "mount", "volumes", "from", "the", "host", "OS", "into", "a", "container", "not", "from", "the", "VM", "that", "docker", "be", "run", "on", "Fn", "server", "starts", "a", "container", "creates", "a", "socket", "dir", "iofs", "container", "NUMBER", "Users", "Me", "NUMBER", "fn", "iofs", "container", "NUMBER", "and", "it", "asks", "docker", "to", "mount", "Users", "Me", "NUMBER", "fn", "iofs", "container", "NUMBER", "into", "iofs", "on", "the", "actual", "function", "container", "NUMBER", "fn", "server", "start", "waiting", "for", "container", "to", "open", "a", "listening", "socket", "in", "its", "iofs", "directory", "Container", "starts", "opens", "a", "socket", "starts", "listening", "for", "connections", "on", "iofs", "xyz", "NUMBER", "sock", "fn", "server", "notices", "this", "file", "exists", "use", "inotify", "starts", "sending", "message", "to", "container", "NUMBER", "with", "Docker", "NUMBER", "Mac", "we", "hit", "some", "problem", "with", "what", "could", "and", "couldn", "t", "be", "shared", "with", "docker", "e", "NUMBER", "g", "NUMBER", "user", "Home", "be", "sharable", "tmp", "on", "the", "host", "be", "not", "I", "wonder", "if", "we", "re", "hitting", "something", "similar", "here", "or", "if", "windows", "file", "names", "be", "themselves", "cause", "a", "problem", "NUMBER", "I", "m", "just", "trying", "to", "find", "a", "windows", "NUMBER", "pro", "env", "I", "can", "test", "on", "while", "I", "m", "doing", "that", "there", "be", "some", "environment", "variables", "that", "you", "can", "set", "on", "the", "fn", "server", "that", "might", "help", "out", "FN_IOFS_DOCKER_PATH", "be", "the", "host", "path", "e", "NUMBER", "g", "NUMBER", "that", "the", "iofs", "shared", "dir", "exists", "on", "this", "needs", "to", "be", "a", "directory", "that", "be", "shared", "with", "docker", "e", "NUMBER", "g", "NUMBER", "d", "docker", "I", "wonder", "if", "setting", "this", "to", "a", "directory", "you", "created", "e", "NUMBER", "g", "NUMBER", "d", "path", "to", "iofs", "will", "work", "FN_IOFS_PATH", "this", "be", "the", "path", "that", "the", "above", "path", "be", "mounted", "into", "the", "fnserver", "container", "It", "s", "a", "guess", "but", "I", "m", "curious", "if", "the", "following", "would", "work", "mkdir", "d", "fndata", "docker", "run", "rm", "i", "name", "fnserver", "v", "d", "fndata", "iofs", "e", "FN_IOFS_DOCKER_PATH", "d", "fndata", "e", "FN_IOFS_PATH", "iofs", "v", "var", "run", "docker", "NUMBER", "sock", "var", "run", "docker", "NUMBER", "sock", "p", "NUMBER", "NUMBER", "entrypoint", "NUMBER", "fnserver", "fnproject", "fnserver", "Hmm", "odd", "tmp", "iofs", "be", "the", "default", "so", "something", "isn", "t", "right", "here", "Hmm", "actually", "tmp", "iofs", "be", "the", "container", "mount", "inside", "the", "function", "container", "So", "it", "should", "be", "trying", "to", "mount", "c", "fndata", "xyzzy", "tmp", "iofs", "in", "the", "function", "NUMBER", "I", "think", "we", "mount", "this", "with", "some", "flags", "and", "I", "wonder", "if", "windows", "docker", "for", "windows", "doesn", "t", "support", "them", "going", "to", "look", "in", "detail", "in", "a", "bit", "and", "try", "it", "once", "this", "NUMBER", "GB", "Windows", "image", "has", "downloaded", "I", "m", "not", "sure", "what", "d", "NUMBER", "w", "do", "but", "also", "suspect", "inotify", "wont", "work", "we", "can", "work", "around", "that", "with", "polling", "though", "Ok", "confirmed", "a", "few", "things", "be", "going", "on", "here", "We", "need", "to", "make", "sure", "directories", "exist", "prior", "to", "mounting", "on", "windows", "d", "NUMBER", "w", "won", "t", "create", "a", "source", "dir", "as", "part", "of", "a", "bind", "mount", "as", "for", "linux", "unix", "sockets", "_do_not_", "work", "when", "mounted", "via", "host", "volumes", "on", "d", "NUMBER", "m", "there", "be", "some", "magic", "for", "var", "run", "docker", "NUMBER", "sock", "which", "do", "not", "translate", "over", "the", "standard", "cifs", "host", "volume", "shares", "paths", "needed", "to", "be", "treated", "carefully", "all", "forward", "slashes", "etc", "NUMBER", "For", "unix", "sockets", "we", "end", "up", "in", "a", "similar", "situation", "as", "we", "had", "for", "mac", "except", "we", "could", "create", "them", "on", "xyhve", "shared", "volume", "mounts", "but", "can", "t", "on", "windows", "There", "be", "a", "gnarly", "solution", "which", "be", "insecure", "fn", "cli", "ensures", "that", "a", "docker", "volume", "fniofs", "exists", "starts", "fn", "with", "this", "mounted", "with", "some", "flags", "fn", "starts", "container", "with", "this", "mounted", "and", "tells", "them", "where", "to", "put", "their", "unix", "sockets", "NUMBER", "the", "downside", "here", "be", "that", "each", "function", "can", "see", "each", "other", "function", "sockets", "v", "bad", "but", "it", "would", "work", "I", "think", "NUMBER", "Docker", "doesn", "t", "support", "mounting", "paths", "of", "volumes", "and", "unless", "I", "m", "mistaken", "this", "be", "the", "only", "way", "to", "get", "a", "pure", "blood", "linux", "dir", "that", "support", "unix", "sockets", "and", "can", "be", "shared", "between", "container", "in", "d", "NUMBER", "w", "yep", "agreed", "going", "to", "do", "a", "bit", "more", "research", "but", "that", "s", "where", "it", "ll", "be", "if", "I", "can", "t", "solve", "another", "way", "after", "looking", "at", "the", "docker", "namespace", "mapping", "stuff", "it", "seems", "not", "very", "fun", "when", "dealing", "with", "volumes", "like", "we", "have", "to", "for", "uds", "not", "sure", "we", "re", "going", "to", "get", "an", "easy", "win", "there", "but", "it", "may", "be", "possible", "anyway", "check", "uid", "of", "process", "be", "run", "use", "it", "to", "create", "uds", "volume", "and", "map", "it", "to", "container", "but", "the", "volume", "fiddling", "may", "not", "even", "work", "with", "this", "re", "local", "dev", "experience", "and", "test", "i", "d", "rather", "require", "users", "to", "make", "the", "fn", "user", "NUMBER", "to", "be", "able", "to", "run", "locally", "with", "these", "settings", "turned", "on", "than", "to", "force", "the", "usage", "of", "sudo", "to", "run", "the", "test", "for", "which", "we", "just", "need", "to", "update", "CONTRIBUTING", "NUMBER", "md", "and", "such", "NUMBER", "though", "this", "still", "seems", "less", "than", "ideal", "should", "try", "to", "make", "it", "as", "easy", "as", "possible", "otherwise", "slippery", "slope", "NUMBER", "we", "could", "make", "looser", "perms", "on", "the", "uds", "directory", "so", "that", "any", "user", "can", "write", "a", "file", "inside", "of", "it", "and", "inside", "the", "container", "then", "the", "fn", "user", "would", "be", "able", "to", "make", "a", "file", "in", "there", "we", "could", "make", "the", "perms", "configurable", "too", "no", "problem", "I", "guess", "we", "d", "have", "to", "make", "fdks", "make", "the", "uds", "file", "with", "the", "same", "loose", "perms", "so", "that", "the", "host", "be", "a", "different", "user", "could", "read", "the", "file", "for", "the", "uds", "read", "NUMBER", "with", "the", "file", "perms", "under", "control", "though", "i", "think", "we", "can", "pretty", "much", "map", "the", "uid", "of", "the", "user", "run", "fn", "into", "the", "container", "as", "NUMBER", "instead", "of", "needing", "the", "fn", "user", "on", "the", "host", "I", "guess", "the", "biggest", "issue", "be", "the", "uds", "permissions", "NUMBER", "i", "tried", "to", "run", "the", "docker", "cli", "integration", "test", "after", "remove", "my", "docker", "user", "and", "learned", "that", "they", "don", "t", "really", "care", "about", "make", "this", "easy", "for", "users", "to", "run", "either", "seemingly", "so", "no", "ideas", "from", "doing", "that", "NUMBER", "I", "guess", "tmpfs", "be", "be", "attempted", "Due", "to", "unnecessary", "http", "traffic", "cause", "by", "docker", "internally", "with", "this", "PR", "a", "new", "image", "pull", "layer", "be", "introduce", "NUMBER", "This", "allows", "us", "to", "serialize", "same", "image", "docker", "pulls", "use", "a", "simple", "active", "transfer", "with", "list", "of", "listeners", "model", "NUMBER", "The", "timeout", "behavior", "be", "slightly", "different", "when", "multiple", "listeners", "be", "waiting", "NUMBER", "The", "timeout", "from", "first", "listener", "be", "emitted", "to", "all", "listeners", "NUMBER", "However", "since", "the", "docker", "pull", "timeout", "be", "globally", "configured", "overall", "timeout", "behavior", "be", "essentially", "the", "same", "NUMBER", "likely", "a", "transient", "error", "and", "may", "be", "correct", "by", "retrying", "do", "not", "really", "mean", "we", "can", "retry", "all", "these", "gRPC", "cases", "NUMBER", "We", "already", "handle", "this", "NUMBER", "We", "can", "only", "retry", "in", "these", "cases", "NUMBER", "TryExec", "runner", "close", "case", "NUMBER", "NUMBER", "TryExec", "Engage", "failure", "case", "NUMBER", "TryExec", "Send", "ClientMsg_Try", "case", "of", "gRPC", "code", "be", "code", "NUMBER", "Unavailable", "NUMBER", "If", "Runner", "tells", "LB", "that", "it", "can", "be", "retried", "NUMBER", "All", "other", "cases", "we", "cannot", "retry", "NUMBER", "We", "cannot", "intercept", "Recv", "since", "Send", "might", "have", "push", "data", "already", "to", "the", "container", "NUMBER", "We", "already", "handle", "NUMBER", "cases", "above", "NUMBER", "Can", "we", "have", "an", "internal", "discussion", "how", "this", "issue", "exhibited", "itself", "in", "platform", "In", "other", "words", "if", "Recv", "gRPC", "tells", "us", "code", "NUMBER", "Unavailable", "and", "that", "this", "may", "be", "retried", "in", "our", "case", "except", "for", "NUMBER", "cases", "above", "we", "might", "have", "already", "push", "the", "data", "to", "the", "container", "and", "it", "be", "too", "late", "NUMBER", "reclaro", "Thanks", "for", "your", "patience", "with", "this", "NUMBER", "Instead", "of", "add", "inspect", "function", "into", "receiveFromRunner", "function", "be", "it", "better", "to", "add", "error", "wrapping", "code", "in", "top", "level", "error", "handler", "on", "service", "side", "Because", "there", "s", "a", "few", "more", "error", "that", "this", "PR", "doesn", "t", "catch", "eg", "NUMBER", "ErrorRunnerClosed", "io", "NUMBER", "EOF", "io", "NUMBER", "ErrShortWrite", "ErrorPureRunnerNoEOF", "grpc", "errs", "from", "Engage", "and", "Send_tryMsg", "json", "NUMBER", "Marshall", "error", "etc", "NUMBER", "etc", "NUMBER", "Top", "level", "handler", "can", "translate", "these", "to", "NUMBER", "and", "choose", "to", "log", "them", "or", "not", "NUMBER", "Alternatively", "maybe", "try", "to", "handle", "them", "in", "TryExec", "function", "itself", "I", "ve", "slightly", "modify", "the", "code", "to", "address", "the", "review", "feedback", "NUMBER", "I", "ve", "also", "split", "SetEvictable", "into", "enable", "disable", "which", "be", "more", "readable", "simpler", "and", "in", "this", "state", "I", "think", "exist", "test", "be", "sufficient", "to", "cover", "it", "NUMBER", "Except", "for", "creating", "the", "token", "acquire", "evict", "race", "condition", "which", "be", "difficult", "to", "reproduce", "NUMBER", "For", "locking", "despite", "having", "only", "NUMBER", "go", "routines", "there", "were", "some", "race", "conditions", "without", "locks", "particularly", "cases", "of", "leaks", "double", "deletes", "etc", "NUMBER", "I", "also", "notice", "even", "with", "locks", "there", "s", "a", "correctness", "issue", "in", "IsEvicted", "check", "in", "parent", "go", "routine", "NUMBER", "Looking", "closer", "since", "we", "no", "longer", "evict", "during", "initialization", "I", "was", "able", "to", "clean", "up", "more", "code", "NUMBER", "Now", "evictor", "relate", "code", "be", "almost", "NUMBER", "isolated", "inside", "child", "go", "routine", "and", "no", "locks", "be", "needed", "NUMBER", "Except", "now", "parent", "waits", "for", "child", "go", "routine", "to", "exit", "before", "calling", "container", "NUMBER", "Close", "which", "in", "practice", "should", "be", "no", "op", "since", "cookie", "NUMBER", "Close", "aka", "docker", "remove", "container", "takes", "forever", "NUMBER", "This", "change", "add", "a", "call", "to", "a", "function", "to", "send", "the", "RunnerMsg_ResultStart", "message", "during", "the", "enqueueCallResponse", "function", "NUMBER", "The", "RunnerMsg_ResultStart", "contains", "any", "headers", "set", "by", "the", "function", "and", "the", "status", "code", "NUMBER", "This", "fix", "the", "case", "where", "we", "don", "t", "send", "custom", "headers", "if", "a", "function", "doesn", "t", "return", "a", "body", "NUMBER", "Fixes", "NUMBER", "Description", "When", "Fn", "be", "configured", "in", "LB", "configuration", "there", "be", "a", "bug", "relate", "to", "custom", "HTTP", "Header", "not", "returned", "in", "case", "the", "function", "doesn", "t", "return", "a", "body", "NUMBER", "The", "problem", "here", "be", "in", "the", "writeResp", "method", "in", "the", "agent", "NUMBER", "go", "precisely", "the", "problem", "be", "due", "to", "the", "io", "NUMBER", "Copy", "LINK", "L", "NUMBER", "the", "code", "for", "io", "NUMBER", "Copy", "doesn", "t", "call", "the", "TAG", "NUMBER", "Write", "if", "the", "source", "be", "empty", "LINK", "NUMBER", "NUMBER", "L", "NUMBER", "In", "our", "case", "the", "dst", "be", "a", "http", "NUMBER", "ResponseWriter", "and", "if", "we", "don", "t", "call", "the", "write", "we", "skip", "the", "send", "of", "the", "RunnerMsg_ResultStart", "which", "be", "where", "we", "include", "the", "custom", "Headers", "defined", "by", "the", "function", "LINK", "_runner", "NUMBER", "go", "L", "NUMBER", "As", "a", "result", "of", "that", "we", "won", "t", "see", "custom", "headers", "sent", "back", "to", "the", "caller", "if", "the", "function", "return", "an", "empty", "body", "or", "doesn", "t", "return", "a", "body", "at", "all", "NUMBER", "I", "have", "a", "fix", "ready", "to", "be", "submitted", "soon", "NUMBER", "The", "version", "I", "push", "now", "move", "the", "send", "of", "the", "RunnerMsg_ResultStart", "when", "we", "call", "WriteHeaders", "NUMBER", "In", "this", "commit", "we", "call", "the", "WriteHeaders", "from", "Write", "as", "well", "as", "it", "be", "supposed", "to", "be", "NUMBER", "Please", "note", "that", "when", "we", "send", "the", "RunnerMsg_ResultStart", "message", "now", "we", "use", "enqueueMsgStrict", "which", "in", "the", "event", "of", "error", "cause", "the", "callHandler", "to", "shutdown", "NUMBER", "WriteHeader", "interface", "doesn", "t", "return", "an", "error", "so", "shutting", "down", "the", "callHandler", "be", "a", "way", "to", "signal", "the", "error", "and", "avoid", "to", "ignore", "it", "NUMBER", "In", "the", "code", "we", "have", "in", "master", "if", "we", "see", "any", "error", "during", "the", "send", "of", "RunnerMsg_ResultStart", "during", "the", "Write", "call", "the", "Write", "return", "that", "error", "now", "that", "be", "not", "the", "case", "anymore", "NUMBER", "What", "do", "you", "think", "about", "this", "change", "gonna", "close", "since", "logs", "be", "gone", "let", "us", "know", "if", "we", "can", "help", "get", "logs", "hooked", "up", "NUMBER", "We", "d", "like", "to", "ingest", "LINK", "go", "pull", "NUMBER", "During", "gRPC", "communication", "previously", "we", "assumed", "that", "Send", "Try", "message", "failure", "in", "TryExec", "can", "always", "be", "retried", "NUMBER", "However", "this", "be", "not", "robust", "as", "we", "cannot", "assume", "no", "data", "was", "write", "to", "wire", "NUMBER", "With", "this", "change", "before", "we", "can", "conclude", "that", "the", "call", "can", "be", "retried", "we", "also", "check", "Unavailable", "error", "code", "NUMBER", "Hmm", "I", "ll", "dig", "around", "the", "grpc", "code", "to", "verify", "their", "claim", "but", "in", "the", "spec", "the", "litmus", "test", "seems", "strict", "NUMBER", "See", "the", "description", "in", "FailedPrecondition", "section", "in", "LINK", "Code", "kmjohansen", "rdallman", "Based", "on", "offline", "discussion", "here", "s", "the", "update", "change", "with", "smaller", "scope", "NUMBER", "Runner", "Status", "Call", "be", "extend", "to", "support", "the", "network", "readiness", "state", "NUMBER", "This", "be", "configured", "via", "runner", "option", "that", "provide", "the", "runner", "a", "file", "path", "to", "check", "for", "existence", "NUMBER", "kmjohansen", "The", "reason", "for", "performing", "both", "network", "list", "and", "listen", "events", "be", "for", "speed", "NUMBER", "If", "we", "miss", "the", "network", "addition", "in", "network", "list", "I", "m", "expecting", "an", "quick", "docker", "event", "update", "to", "flip", "the", "state", "NUMBER", "ListContainers", "call", "which", "be", "asynchronously", "spawned", "during", "docker", "driver", "start", "needs", "to", "have", "a", "reasonable", "timeout", "and", "should", "be", "retried", "if", "timeout", "expires", "NUMBER", "We", "have", "various", "function", "in", "cookie", "NUMBER", "go", "to", "configure", "the", "container", "host", "config", "NUMBER", "That", "would", "be", "a", "place", "to", "possibly", "add", "this", "NUMBER", "eg", "NUMBER", "add", "new", "function", "such", "as", "cookie", "NUMBER", "configureDevices", "NUMBER", "I", "m", "guessing", "this", "requires", "the", "container", "to", "run", "in", "privileged", "mode", "which", "we", "don", "t", "in", "current", "Fn", "NUMBER", "It", "be", "also", "possible", "to", "create", "custom", "driver", "NUMBER", "It", "s", "not", "difficult", "to", "implement", "such", "a", "driver", "and", "spin", "up", "Fn", "server", "with", "it", "NUMBER", "LINK", "system", "test", "system_test", "NUMBER", "go", "L", "NUMBER", "I", "meant", "to", "say", "an", "implementer", "can", "write", "their", "own", "driver", "for", "this", "purpose", "NUMBER", "I", "m", "not", "sure", "if", "we", "want", "to", "add", "device", "mapping", "and", "or", "privileged", "mode", "into", "Fn", "NUMBER", "Thanks", "for", "the", "PR", "NUMBER", "Is", "it", "possible", "to", "make", "the", "new", "metric", "or", "tags", "optional", "The", "concern", "here", "be", "that", "additional", "NUMBER", "tags", "will", "increase", "the", "cardinality", "of", "the", "metric", "NUMBER", "In", "a", "federated", "prometheus", "environment", "this", "might", "end", "up", "with", "too", "much", "cardinality", "NUMBER", "Thanks", "for", "spotting", "the", "issue", "NUMBER", "I", "think", "the", "problem", "lies", "deeper", "and", "truncation", "clock", "math", "be", "wrong", "in", "the", "original", "code", "NUMBER", "I", "suggest", "instead", "of", "trying", "to", "correct", "the", "result", "above", "we", "should", "record", "the", "deltas", "in", "runner", "and", "lb", "properly", "and", "send", "deltas", "based", "on", "monotonic", "clock", "instead", "of", "wall", "clock", "readings", "which", "be", "subject", "to", "clock", "skew", "adjustments", "NUMBER", "In", "other", "words", "in", "gRPC", "proto", "for", "CallFinished", "add", "the", "following", "two", "new", "field", "int", "NUMBER", "schedulerDuration", "int", "NUMBER", "executionDuration", "in", "pure_runner", "use", "Submit", "BeforeCall", "AfterCall", "function", "to", "perform", "the", "math", "to", "populate", "the", "above", "two", "durations", "NUMBER", "eg", "NUMBER", "start", "time", "NUMBER", "Now", "delta", "time", "NUMBER", "Now", "NUMBER", "Sub", "start", "in", "runner_client", "NUMBER", "recordFinishStats", "directly", "use", "the", "new", "gRPC", "field", "instead", "of", "performing", "delta", "math", "on", "Created", "Started", "Completed", "NUMBER", "in", "lb_agent", "recordCallLatency", "use", "the", "correct", "math", "to", "calculate", "the", "delta", "NUMBER", "StartedAt", "CreatedAt", "be", "formatted", "strings", "wall", "clocks", "and", "math", "based", "on", "these", "will", "not", "be", "accurate", "NUMBER", "This", "means", "you", "ll", "have", "to", "record", "x", "time", "NUMBER", "Now", "in", "Submit", "then", "do", "a", "time", "NUMBER", "Now", "NUMBER", "Sub", "x", "in", "recordCallLatency", "NUMBER", "LINK", "path", "thanks", "vzDevelopment", "for", "looking", "into", "this", "I", "believe", "the", "issue", "from", "the", "OP", "be", "because", "they", "be", "use", "a", "non", "root", "path", "and", "FN_API_URL", "only", "works", "with", "the", "scheme", "host", "port", "part", "of", "the", "url", "NUMBER", "can", "see", "that", "we", "re", "stripping", "it", "from", "the", "error", "message", "No", "route", "for", "fqdn", "NUMBER", "version", "where", "the", "user", "was", "expecting", "LINK", "path", "version", "this", "be", "probably", "something", "we", "can", "support", "pretty", "easily", "though", "I", "m", "not", "NUMBER", "sure", "NUMBER", "Hi", "There", "s", "no", "IP", "address", "of", "a", "function", "NUMBER", "The", "only", "endpoint", "you", "have", "be", "the", "Fn", "server", "IP", "address", "NUMBER", "Would", "you", "mind", "to", "elaborate", "when", "and", "when", "you", "d", "like", "to", "get", "the", "original", "request", "I", "suppose", "you", "d", "like", "to", "get", "the", "request", "inside", "of", "function", "NUMBER", "I", "assume", "you", "use", "an", "FDK", "in", "order", "to", "get", "the", "request", "you", "need", "to", "use", "the", "context", "the", "way", "it", "works", "depends", "on", "an", "FDK", "and", "programming", "language", "NUMBER", "Hi", "So", "in", "this", "case", "I", "d", "recommend", "to", "add", "a", "requirement", "to", "you", "application", "force", "a", "caller", "to", "tell", "who", "be", "he", "i", "NUMBER", "e", "NUMBER", "force", "them", "to", "set", "a", "header", "X", "Whoami", "or", "X", "Caller", "Id", "NUMBER", "There", "be", "plenty", "of", "way", "to", "make", "it", "work", "NUMBER", "FDKs", "provide", "you", "whatever", "be", "sent", "by", "a", "caller", "of", "a", "function", "NUMBER", "Meaning", "if", "the", "info", "be", "not", "there", "it", "wasn", "t", "sent", "by", "a", "caller", "NUMBER", "That", "be", "unfortunate", "truth", "NUMBER", "However", "at", "this", "moment", "we", "enforce", "developers", "to", "take", "care", "of", "an", "entry", "point", "to", "an", "FDK", "handler", "i", "e", "NUMBER", "main", "function", "NUMBER", "What", "if", "we", "can", "delay", "customer", "s", "code", "initialization", "before", "the", "first", "call", "There", "be", "couple", "ways", "to", "make", "it", "happen", "number", "of", "those", "depends", "on", "the", "programming", "language", "NUMBER", "For", "instance", "in", "Go", "we", "can", "ask", "people", "to", "build", "a", "plug", "in", "that", "do", "have", "NUMBER", "methods", "pre", "call", "call", "post", "call", "the", "last", "one", "might", "not", "be", "necessary", "NUMBER", "Pre", "call", "be", "like", "pragmaonce", "macros", "do", "this", "once", "before", "handle", "the", "first", "call", "but", "after", "UDS", "server", "be", "start", "NUMBER", "In", "Python", "we", "can", "ask", "people", "to", "do", "the", "same", "give", "us", "NUMBER", "methods", "in", "pre", "call", "do", "all", "imports", "or", "do", "Py", "NUMBER", "lazy", "imports", "or", "whatever", "that", "could", "be", "NUMBER", "In", "Java", "as", "you", "mention", "ask", "people", "to", "put", "static", "init", "into", "a", "pre", "call", "etc", "NUMBER", "So", "the", "benifit", "of", "this", "be", "we", "be", "the", "ones", "who", "control", "the", "entrypoint", "basically", "a", "UDS", "server", "provisioning", "and", "let", "developers", "follow", "our", "requirements", "NUMBER", "The", "idea", "be", "pretty", "new", "and", "may", "have", "problem", "that", "I", "m", "not", "aware", "of", "but", "may", "become", "a", "new", "FDK", "contract", "at", "least", "worth", "discussing", "NUMBER", "On", "Sat", "Dec", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "Gerardo", "Viedma", "TAG", "write", "To", "give", "more", "context", "the", "change", "propose", "here", "be", "not", "about", "addressing", "any", "particular", "FDK", "s", "internal", "initialization", "taking", "too", "long", "NUMBER", "The", "way", "the", "major", "FDKs", "be", "currently", "implement", "do", "not", "provide", "any", "guarantees", "that", "end", "user", "code", "won", "t", "run", "prior", "to", "FDK", "initialization", "thus", "cause", "a", "timeout", "NUMBER", "For", "example", "a", "static", "initialization", "block", "in", "a", "Java", "function", "or", "a", "custom", "import", "inside", "a", "Python", "function", "will", "currently", "take", "place", "prior", "to", "FDK", "initialization", "and", "can", "cause", "a", "timeout", "if", "the", "total", "time", "be", "over", "five", "seconds", "NUMBER", "Optimizing", "a", "particular", "FDK", "s", "initialization", "although", "valuable", "do", "not", "solve", "the", "problem", "of", "customer", "imports", "or", "static", "block", "declarations", "defined", "outside", "the", "FDK", "s", "control", "NUMBER", "Other", "than", "provide", "more", "time", "for", "initialization", "of", "customer", "code", "the", "only", "way", "to", "fully", "mitigate", "this", "would", "require", "us", "to", "rewrite", "all", "of", "our", "FDKs", "to", "use", "the", "appropriate", "language", "constructs", "that", "can", "guarantee", "that", "FDK", "initialization", "completes", "prior", "to", "run", "or", "loading", "any", "external", "customer", "code", "if", "available", "in", "that", "language", "NUMBER", "In", "the", "meantime", "any", "FDK", "be", "liable", "to", "run", "into", "a", "container", "initialization", "timeouts", "purely", "as", "a", "result", "of", "customer", "code", "initialization", "run", "on", "it", "and", "outside", "of", "the", "control", "of", "the", "FDK", "in", "question", "NUMBER", "You", "be", "receiving", "this", "because", "you", "be", "subscribed", "to", "this", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "This", "complements", "the", "API", "latency", "metrics", "available", "on", "LB", "agent", "NUMBER", "In", "this", "case", "we", "would", "like", "to", "measure", "calls", "that", "have", "finished", "with", "the", "following", "status", "completed", "canceled", "timeouts", "error", "server_busy", "and", "while", "measuring", "this", "latency", "we", "subtract", "the", "amount", "of", "time", "actual", "function", "execution", "took", "NUMBER", "This", "be", "not", "precise", "but", "an", "approximation", "mostly", "suitable", "for", "trending", "NUMBER", "Going", "forward", "we", "could", "also", "subtract", "UDS", "wait", "time", "and", "or", "docker", "pull", "latency", "from", "this", "latency", "as", "an", "enhancement", "to", "this", "PR", "NUMBER", "rdallman", "feel", "free", "to", "remove", "unuse", "ghost", "code", "from", "common", "NUMBER", "NUMBER", "call", "NUMBER", "Start", "should", "always", "call", "handler", "NUMBER", "Start", "which", "can", "decide", "to", "delete", "from", "MQ", "if", "async", "itself", "NUMBER", "NUMBER", "call", "NUMBER", "End", "error", "be", "ignored", "update", "iface", "to", "clarify", "FDK", "must", "respond", "with", "NUMBER", "NUMBER", "NUMBER", "to", "http", "request", "NUMBER", "Any", "other", "status", "be", "invalid", "and", "container", "must", "be", "terminated", "if", "that", "occur", "NUMBER", "HTTP", "timeouts", "be", "also", "considered", "a", "shutdown", "reason", "for", "the", "container", "NUMBER", "With", "this", "PR", "we", "trust", "http", "client", "to", "use", "the", "context", "timeout", "and", "therefore", "avoid", "spawning", "a", "go", "routine", "NUMBER", "This", "simplifies", "the", "flow", "and", "also", "avoids", "case", "of", "call", "NUMBER", "derr", "NUMBER", "Close", "executing", "before", "swapBack", "NUMBER", "This", "be", "a", "know", "problem", "and", "it", "s", "the", "limitation", "of", "docker", "syslog", "driver", "NUMBER", "We", "can", "open", "a", "bug", "with", "them", "NUMBER", "Moving", "the", "timeout", "management", "of", "various", "docker", "operations", "to", "agent", "NUMBER", "This", "allows", "for", "finer", "control", "over", "what", "operation", "should", "use", "NUMBER", "For", "instance", "for", "pause", "unpause", "our", "tolerance", "be", "very", "low", "to", "avoid", "resource", "issue", "NUMBER", "For", "docker", "remove", "the", "consequences", "of", "failure", "will", "lead", "to", "potential", "agent", "failure", "and", "therefore", "we", "wait", "up", "to", "NUMBER", "minute", "NUMBER", "For", "cookie", "create", "prepare", "which", "include", "docker", "pull", "we", "cap", "this", "at", "NUMBER", "minutes", "by", "default", "NUMBER", "With", "new", "UDS", "FDK", "contract", "health", "check", "be", "now", "obsoleted", "as", "container", "advertise", "health", "use", "UDS", "availibility", "NUMBER", "This", "be", "a", "prep", "work", "for", "LINK", "yea", "makes", "sense", "to", "move", "these", "to", "caller", "with", "these", "change", "couple", "note", "I", "think", "I", "should", "add", "another", "timeout", "here", "docker", "pull", "vs", "UDS", "start", "NUMBER", "Blanket", "timeout", "for", "all", "of", "it", "seems", "too", "broad", "and", "leaves", "too", "much", "time", "for", "UDS", "start", "phase", "which", "will", "eat", "cpu", "mem", "outside", "of", "call", "NUMBER", "Start", "End", "NUMBER", "this", "be", "a", "dupe", "of", "LINK", "thanks", "for", "file", "feel", "free", "to", "add", "to", "discussion", "there", "it", "s", "something", "we", "ve", "we", "re", "considering", "solutions", "to", "Container", "initialization", "phase", "consumes", "resource", "tracker", "resources", "token", "during", "lengthy", "operations", "NUMBER", "In", "order", "for", "agent", "stability", "liveness", "this", "phase", "has", "to", "be", "evictable", "cancelable", "and", "time", "bounded", "NUMBER", "With", "this", "change", "introduce", "two", "new", "system", "wide", "environment", "settings", "to", "bound", "the", "time", "spent", "in", "container", "initialization", "phase", "loosely", "separated", "as", "docker", "pull", "and", "UDS", "initialize", "NUMBER", "If", "during", "initialization", "the", "caller", "be", "disconnected", "or", "serviced", "by", "another", "hot", "container", "then", "initializing", "hot", "container", "becomes", "eligible", "for", "eviction", "NUMBER", "This", "be", "an", "alternative", "PR", "to", "original", "propose", "LINK", "rdallman", "Yeah", "remove", "the", "extra", "ctx", "we", "actually", "only", "need", "a", "do", "channel", "there", "NUMBER", "Nanny", "be", "indeed", "the", "heart", "and", "the", "most", "complex", "piece", "there", "NUMBER", "It", "monitors", "two", "phases", "initialization", "versus", "shutdown", "wait", "NUMBER", "Shutdown", "wait", "be", "the", "simple", "case", "it", "just", "collapses", "shutWg", "ctx", "into", "ctx", "to", "make", "it", "easier", "for", "rest", "of", "the", "code", "NUMBER", "Initialization", "phase", "be", "complex", "and", "it", "s", "a", "small", "state", "machine", "NUMBER", "It", "s", "split", "into", "before", "during", "docker", "pull", "and", "after", "docker", "pull", "phases", "where", "HotPullTimeout", "and", "HotStartTimeout", "be", "applied", "accordingly", "NUMBER", "During", "init", "phase", "caller", "disconnect", "serviced", "event", "makes", "the", "container", "evictable", "NUMBER", "Once", "initialized", "be", "set", "then", "this", "phase", "moves", "on", "to", "shutdown", "wait", "state", "NUMBER", "cancel", "calls", "be", "a", "bit", "unsavory", "NUMBER", "But", "compared", "to", "previous", "code", "where", "we", "had", "it", "in", "NUMBER", "places", "we", "now", "have", "it", "in", "NUMBER", "places", "NUMBER", "I", "could", "split", "this", "and", "perhaps", "introduce", "more", "specific", "channels", "eg", "NUMBER", "runHotReq", "exit", "waiter", "wait", "exit", "etc", "NUMBER", "but", "I", "m", "not", "sure", "if", "it", "ll", "look", "simpler", "NUMBER", "Thanks", "this", "be", "great", "NUMBER", "I", "m", "generally", "on", "board", "with", "the", "direction", "here", "NUMBER", "I", "see", "a", "few", "concerns", "at", "the", "moment", "certain", "transitive", "dependencies", "seem", "to", "have", "be", "remove", "by", "mod", "a", "quick", "glance", "I", "find", "NUMBER", "valid", "transitive", "deps", "golang", "NUMBER", "org", "x", "text", "github", "NUMBER", "com", "petar", "GoLLRB", "NUMBER", "even", "if", "the", "following", "point", "be", "possible", "this", "be", "a", "little", "concerning", "just", "for", "the", "status", "of", "go", "mod", "but", "I", "m", "optimistic", "that", "it", "s", "just", "part", "of", "the", "migration", "or", "something", "we", "can", "fix", "be", "it", "possible", "to", "swap", "out", "the", "Gopkg", "NUMBER", "file", "for", "the", "go", "NUMBER", "sum", "without", "any", "update", "of", "the", "dependencies", "here", "whereby", "run", "go", "mod", "tidy", "or", "go", "mod", "vendor", "or", "go", "mod", "verify", "would", "not", "cause", "any", "vendor", "file", "to", "change", "pardon", "my", "unfamiliarity", "with", "the", "tool", "I", "believe", "I", "m", "mostly", "talking", "about", "verify", "or", "vendor", "though", "where", "the", "go", "NUMBER", "sum", "file", "would", "ensure", "the", "vendor", "has", "all", "matching", "deps", "in", "the", "same", "manner", "as", "dep", "ensure", "did", "it", "would", "make", "this", "PR", "really", "easy", "to", "green", "light", "if", "this", "be", "possible", "NUMBER", "ie", "it", "s", "not", "clear", "whether", "this", "patch", "moves", "to", "go", "mod", "or", "moves", "to", "go", "mod", "and", "uses", "go", "mod", "to", "update", "the", "dependencies", "perhaps", "this", "could", "just", "be", "clarified", "NUMBER", "Any", "delta", "of", "deps", "would", "be", "nice", "as", "it", "s", "not", "easy", "to", "see", "from", "the", "diff", "if", "leaving", "vendor", "alone", "isn", "t", "possible", "NUMBER", "will", "package", "that", "import", "fn", "but", "still", "use", "dep", "handle", "this", "okay", "I", "m", "optimistic", "I", "just", "honestly", "do", "not", "know", "NUMBER", "I", "know", "we", "have", "at", "least", "NUMBER", "get", "rid", "of", "the", "vendor", "directory", "we", "learned", "this", "lesson", "a", "long", "time", "ago", "checking", "in", "the", "vendor", "directory", "was", "worth", "it", "to", "prevent", "users", "from", "having", "dependency", "issue", "when", "get", "start", "maybe", "dampened", "now", "to", "new", "devs", "as", "well", "as", "not", "having", "dependency", "issue", "among", "the", "active", "team", "as", "well", "as", "bringing", "down", "CI", "times", "NUMBER", "please", "add", "it", "back", "Previously", "evictor", "did", "not", "perform", "an", "eviction", "if", "total", "cpu", "mem", "of", "evictable", "container", "was", "less", "than", "request", "cpu", "mem", "NUMBER", "With", "this", "change", "we", "try", "to", "perform", "evictions", "based", "on", "actual", "needed", "cpu", "mem", "report", "by", "resource", "tracker", "NUMBER", "i", "m", "gonna", "move", "this", "into", "the", "resource", "thing", "as", "soon", "as", "I", "m", "free", "that", "s", "right", "death", "to", "smoochy", "NUMBER", "NUMBER", "NUMBER", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "cc", "NUMBER", "d", "NUMBER", "ac", "NUMBER", "e", "NUMBER", "NUMBER", "b", "NUMBER", "NUMBER", "f", "NUMBER", "d", "NUMBER", "gif", "this", "be", "the", "end", "of", "the", "line", "for", "format", "NUMBER", "what", "was", "previously", "http", "stream", "format", "be", "now", "the", "only", "format", "NUMBER", "this", "completes", "the", "prophecy", "NUMBER", "the", "cli", "can", "get", "update", "after", "this", "to", "drop", "the", "field", "as", "well", "NUMBER", "Hopefully", "a", "bulleted", "list", "will", "clarify", "what", "happened", "here", "in", "order", "to", "verify", "it", "if", "not", "sorry", "I", "tried", "NUMBER", "To", "the", "details", "__NOTE", "__", "LINK", "go", "pull", "NUMBER", "be", "a", "prerequisite", "for", "this", "PR", "if", "you", "don", "t", "believe", "in", "committing", "branch", "revision", "shas", "to", "the", "Gopkg", "NUMBER", "lock", "file", "here", "like", "me", "please", "review", "that", "if", "it", "remains", "unmerged", "at", "time", "of", "reading", "this", "if", "there", "s", "any", "change", "there", "they", "ll", "need", "to", "be", "pick", "up", "here", "NUMBER", "remove", "fn", "NUMBER", "format", "field", "from", "API", "and", "swagger", "add", "migration", "and", "remove", "fn", "NUMBER", "format", "field", "from", "db", "remove", "all", "protocol", "package", "formats", "and", "associated", "references", "remove", "cold", "slots", "from", "agent", "and", "default", "format", "fix", "up", "fn", "test", "utils", "image", "for", "our", "test", "to", "fdk", "w", "only", "http", "stream", "update", "fdk", "go", "dep", "for", "fn", "test", "utils", "image", "reminder", "we", "need", "to", "update", "to", "master", "w", "the", "PR", "linked", "above", "for", "fdk", "go", "merge", "remove", "all", "test", "for", "other", "formats", "in", "server", "test", "change", "agent", "test", "to", "http", "stream", "only", "remove", "hello", "image", "we", "were", "maintaining", "here", "it", "was", "default", "the", "fdk", "go", "has", "an", "example", "too", "remove", "references", "to", "cold", "things", "NUMBER", "it", "s", "feeling", "tropical", "in", "here", "now", "NUMBER", "update", "system", "test", "to", "fail", "when", "they", "fail", "hint", "must", "be", "in", "main", "goroutine", "and", "to", "shut", "up", "unless", "they", "fail", "really", "noisy", "in", "circleci", "remove", "json", "other", "content", "type", "detection", "on", "invoke", "httptrigger", "endpoint", "output", "yay", "remove", "cloudevent", "detection", "on", "invoke", "trigger", "this", "be", "on", "fdks", "now", "remove", "headers", "Fn_call_id", "and", "Fn_deadline", "we", "have", "Fn", "Call", "Id", "and", "Fn", "Deadline", "now", "remove", "FN_FORMAT", "FN_APP_NAME", "FN_PATH", "env", "vars", "path", "was", "from", "route", "we", "could", "add", "FN_TRIGGER_ID", "to", "headers", "maybe", "they", "have", "req", "url", "tho", "NUMBER", "add", "FN_APP_ID", "env", "var", "NUMBER", "turns", "off", "the", "stdout", "stderr", "blocking", "between", "calls", "if", "freezer", "be", "on", "because", "it", "s", "impossible", "to", "debug", "without", "that", "without", "syslog", "now", "that", "stdout", "and", "stderr", "go", "to", "the", "same", "place", "either", "to", "host", "stderr", "or", "nowhere", "and", "isn", "t", "use", "for", "function", "output", "this", "shouldn", "t", "be", "a", "big", "fuss", "really", "NUMBER", "this", "helps", "debugging", "NUMBER", "a", "lot", "NUMBER", "and", "in", "prod", "these", "be", "going", "to", "dev", "null", "anyway", "NUMBER", "fix", "agent", "call", "creation", "to", "insert", "FN_LISTENER", "for", "any", "calls", "created", "fix", "status", "thing", "fix", "NPE", "when", "giving", "a", "non", "http", "NUMBER", "ResponseWriter", "to", "call", "as", "the", "writer", "oops", "see", "writeResp", "remove", "stdin", "hookup", "in", "agent", "to", "docker", "we", "don", "t", "need", "this", "anymore", "fix", "bug", "where", "the", "watcher", "would", "leak", "if", "a", "container", "exited", "before", "entering", "the", "slot", "dealer", "goroutine", "this", "do", "not", "change", "behavior", "like", "NUMBER", "there", "s", "no", "overlap", "with", "that", "except", "in", "the", "diff", "this", "just", "fix", "a", "leak", "but", "the", "behavior", "remains", "unchanged", "in", "the", "happy", "path", "no", "new", "timeouts", "etc", "moved", "the", "shutdownContainer", "context", "in", "runHot", "up", "a", "little", "to", "enclose", "inotifyWait", "__questions", "request", "for", "you", "o", "benevolent", "reviewer", "__", "should", "we", "remove", "fn", "test", "utils", "and", "fn", "status", "checker", "Gopkg", "NUMBER", "lock", "file", "they", "re", "redundant", "NUMBER", "or", "we", "should", "move", "to", "a", "different", "repo", "maybe", "NUMBER", "will", "have", "to", "update", "here", "after", "fdk", "go", "change", "land", "anyway", "NUMBER", "we", "can", "probably", "remove", "a", "lot", "of", "the", "funky", "pipe", "business", "but", "I", "chose", "not", "to", "do", "that", "here", "NUMBER", "it", "s", "some", "amount", "of", "gutting", "we", "can", "do", "later", "it", "doesn", "t", "effect", "this", "really", "maybe", "some", "perf", "bump", "idk", "NUMBER", "please", "check", "that", "I", "didn", "t", "miss", "any", "test", "when", "migrating", "there", "were", "lots", "of", "dupes", "for", "each", "format", "and", "now", "there", "s", "just", "NUMBER", "of", "each", "NUMBER", "I", "double", "checked", "but", "I", "miss", "things", "sometimes", "NUMBER", "no", "mantree", "I", "can", "t", "split", "it", "up", "into", "multiple", "PRs", "It", "looks", "like", "old", "non", "stream", "function", "fail", "with", "a", "NUMBER", "on", "invoke", "should", "this", "to", "be", "something", "else", "or", "something", "more", "informative", "looking", "into", "this", "NUMBER", "gonna", "update", "dep", "too", "with", "fdk", "master", "NUMBER", "thanks", "for", "reviewing", "NUMBER", "deletage", "the", "internet", "doesn", "t", "think", "this", "be", "a", "word", "NUMBER", "I", "m", "curious", "now", "yea", "add", "back", "FN_FORMAT", "and", "trying", "to", "fix", "up", "the", "error", "now", "feel", "free", "to", "leave", "blocked", "until", "then", "see", "LINK", "and", "LINK", "to", "add", "an", "informative", "error", "for", "the", "explosive", "fdks", "and", "FN_FORMAT", "env", "var", "to", "http", "stream", "during", "transition", "for", "fdks", "NUMBER", "I", "did", "not", "add", "a", "test", "for", "the", "latter", "I", "could", "have", "another", "go", "at", "update", "the", "test", "utils", "image", "but", "I", "m", "about", "NUMBER", "positive", "it", "works", "and", "shouldn", "t", "be", "critical", "anyway", "and", "I", "smell", "food", "which", "be", "much", "more", "critical", "NUMBER", "update", "deps", "too", "NUMBER", "anyway", "CI", "seems", "happy", "NUMBER", "if", "that", "address", "everything", "don", "t", "wait", "for", "me", "NUMBER", "sickcloseazurevase", "size_restricted", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "e", "NUMBER", "b", "NUMBER", "b", "NUMBER", "d", "NUMBER", "b", "NUMBER", "e", "NUMBER", "NUMBER", "a", "NUMBER", "d", "NUMBER", "c", "NUMBER", "gif", "thanks", "all", "Hi", "chryswoods", "yea", "this", "be", "expected", "NUMBER", "Agree", "this", "would", "be", "a", "useful", "feature", "of", "course", "we", "expect", "most", "fn", "deployments", "to", "add", "some", "kind", "of", "auth", "on", "top", "of", "the", "API", "to", "attenuate", "permissions", "on", "endpoints", "like", "get", "apps", "use", "extensions", "ala", "LINK", "auth", "I", "think", "this", "won", "t", "build", "atm", "but", "the", "code", "gives", "a", "good", "idea", "NUMBER", "We", "have", "discussed", "allowing", "users", "to", "upload", "encryption", "keys", "and", "we", "re", "discussing", "how", "to", "integrate", "with", "KMS", "Key", "Management", "Service", "now", "too", "which", "seems", "relate", "be", "not", "sure", "there", "s", "any", "public", "links", "to", "this", "discussion", "at", "this", "time", "mega", "NUMBER", "It", "do", "seem", "like", "uploading", "encryption", "keys", "to", "fn", "on", "an", "app", "and", "not", "showing", "on", "GET", "and", "encrypting", "config", "decrypting", "to", "hand", "off", "to", "function", "would", "satisfy", "your", "use", "case", "NUMBER", "If", "you", "have", "any", "thoughts", "on", "what", "you", "would", "like", "feedback", "would", "be", "great", "thanks", "relate", "NUMBER", "well", "this", "was", "part", "of", "the", "design", "and", "this", "behavior", "be", "documented", "and", "we", "be", "use", "the", "fdks", "to", "resolve", "this", "to", "appear", "the", "same", "to", "users", "NUMBER", "I", "m", "just", "get", "through", "email", "I", "apologize", "for", "my", "brevity", "but", "this", "be", "intentional", "as", "far", "as", "I", "understand", "from", "the", "issue", "description", "NUMBER", "compatibility", "be", "the", "only", "reason", "NUMBER", "we", "can", "remove", "once", "fdks", "be", "ready", "probably", "this", "may", "well", "be", "the", "case", "already", "I", "haven", "t", "looked", "in", "detail", "though", "why", "would", "a", "user", "do", "this", "at", "runtime", "this", "seems", "to", "defeat", "a", "lot", "of", "the", "benefits", "of", "build", "docker", "images", "which", "be", "kinda", "the", "idea", "here", "where", "this", "wouldn", "t", "be", "an", "issue", "at", "all", "that", "s", "fine", "about", "go", "modules", "NUMBER", "but", "why", "not", "do", "this", "in", "the", "Dockerfile", "A", "large", "benefit", "of", "the", "docker", "registry", "ecosystem", "be", "immutable", "images", "under", "version", "tags", "this", "just", "seems", "to", "fart", "in", "the", "face", "of", "that", "NUMBER", "I", "can", "t", "discern", "any", "benefits", "this", "just", "pushes", "users", "to", "do", "their", "own", "version", "of", "artifacts", "to", "download", "at", "runtime", "and", "makes", "users", "end", "up", "solving", "the", "same", "problem", "registry", "images", "already", "solve", "NUMBER", "if", "it", "s", "really", "such", "a", "pain", "in", "the", "ass", "to", "version", "function", "we", "should", "fix", "that", "please", "elaborate", "if", "so", "instead", "of", "trying", "to", "enable", "use", "cases", "that", "push", "lots", "of", "extra", "work", "onto", "users", "that", "we", "don", "t", "necessarily", "want", "to", "recommend", "NUMBER", "Good", "point", "we", "should", "consider", "other", "use", "cases", "as", "well", "NUMBER", "I", "do", "not", "know", "offhand", "re", "open", "though", "NUMBER", "denismakogon", "Execution", "time", "be", "not", "change", "in", "this", "PR", "it", "be", "call", "NUMBER", "Timeout", "amount", "of", "time", "in", "a", "container", "NUMBER", "I", "agree", "that", "this", "may", "need", "to", "be", "increase", "for", "async", "function", "as", "longer", "runtimes", "be", "desired", "NUMBER", "But", "we", "can", "address", "that", "in", "a", "future", "PR", "as", "zootalures", "commented", "NUMBER", "Link", "to", "issue", "this", "resolve", "Removes", "old", "out", "of", "date", "docs", "and", "feature", "docs", "NUMBER", "What", "I", "did", "Deleted", "the", "file", "from", "my", "branch", "NUMBER", "How", "I", "did", "it", "From", "command", "line", "NUMBER", "How", "to", "verify", "it", "ls", "One", "line", "description", "for", "the", "changelog", "Old", "docs", "to", "be", "delete", "NUMBER", "Docs", "no", "longer", "relevant", "or", "outdate", "NUMBER", "One", "moving", "picture", "involving", "robots", "not", "mandatory", "but", "encourage", "Robot", "Smash", "LINK", "Bernard", "smashes", "old", "file", "NUMBER", "Thanks", "Reed", "NUMBER", "I", "m", "on", "it", "NUMBER", "I", "ll", "post", "a", "comment", "with", "links", "once", "I", "have", "the", "file", "or", "parts", "of", "the", "file", "moved", "NUMBER", "File", "and", "content", "have", "be", "add", "to", "the", "new", "repo", "Pagination", "TAG", "Log", "Stores", "TAG", "Closing", "this", "for", "time", "be", "NUMBER", "Tests", "be", "showing", "dubious", "results", "NUMBER", "This", "allows", "to", "time", "limit", "slow", "malicious", "clients", "when", "reading", "HTTP", "headers", "NUMBER", "In", "GetBody", "buffering", "same", "timeout", "can", "be", "use", "to", "time", "limit", "to", "give", "consistent", "I", "O", "wait", "limits", "for", "the", "service", "in", "addition", "to", "per", "handler", "imposed", "limits", "we", "already", "have", "NUMBER", "With", "this", "change", "fn", "agent", "prefers", "docker", "syslog", "driver", "for", "logging", "stdout", "stderr", "from", "container", "NUMBER", "The", "advantage", "of", "this", "be", "to", "offload", "it", "to", "docker", "itself", "instead", "of", "streaming", "stderr", "along", "with", "stdout", "which", "gets", "multiplexed", "through", "single", "connection", "via", "docker", "API", "NUMBER", "The", "change", "will", "need", "support", "from", "FDKs", "in", "order", "to", "log", "correct", "call", "id", "and", "supress", "n", "that", "splits", "syslog", "lines", "NUMBER", "Before", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fnserver", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "fn", "call_id", "NUMBER", "CNYMGSZ", "NUMBER", "NGA", "NUMBER", "RZJ", "NUMBER", "func_name", "fn", "http", "func", "app_name", "fn", "http", "func", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Received", "format", "http", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fnserver", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "fn", "call_id", "NUMBER", "CNYMGSZ", "NUMBER", "NGA", "NUMBER", "RZJ", "NUMBER", "func_name", "fn", "http", "func", "app_name", "fn", "http", "func", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Received", "request", "main", "NUMBER", "AppRequest", "SleepTime", "NUMBER", "ResponseCode", "NUMBER", "ResponseContentType", "JasonContentType", "EchoContent", "hello", "IsDebug", "true", "IsCrash", "false", "ReadFile", "ReadFileSize", "NUMBER", "CreateFile", "CreateFileSize", "NUMBER", "AllocateMemory", "NUMBER", "LeakMemory", "NUMBER", "Respons", "eSize", "NUMBER", "InvalidResponse", "false", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fnserver", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "fn", "call_id", "NUMBER", "CNYMGSZ", "NUMBER", "NGA", "NUMBER", "RZJ", "NUMBER", "func_name", "fn", "http", "func", "app_name", "fn", "http", "func", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Received", "headers", "map", "Fn_call_id", "NUMBER", "CNYMGSZ", "NUMBER", "NGA", "NUMBER", "RZJ", "NUMBER", "Fn_method", "POST", "Fn_request_url", "LINK", "http", "func", "fn", "http", "func", "Content", "Type", "application", "json", "User", "Agent", "curl", "NUMBER", "Content", "Length", "NUMBER", "Accept", "Fn_deadline", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Z", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fnserver", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "fn", "call_id", "NUMBER", "CNYMGSZ", "NUMBER", "NGA", "NUMBER", "RZJ", "NUMBER", "func_name", "fn", "http", "func", "app_name", "fn", "http", "func", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Received", "config", "map", "PATH", "usr", "local", "sbin", "usr", "local", "bin", "usr", "sbin", "usr", "bin", "sbin", "bin", "HOSTNAME", "NUMBER", "b", "NUMBER", "bd", "NUMBER", "a", "NUMBER", "f", "FN_MEMORY", "NUMBER", "NUMBER", "FN_TMPSIZE", "NUMBER", "FN_FORMAT", "http", "HOME", "root", "FN_TYPE", "sync", "FN_APP_NAME", "fn", "http", "func", "FN_PATH", "fn", "http", "func", "After", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fnserver", "func_name", "fn", "http", "func", "app_name", "fn", "http", "func", "e", "NUMBER", "dd", "NUMBER", "aff", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Received", "format", "http", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fnserver", "func_name", "fn", "http", "func", "app_name", "fn", "http", "func", "e", "NUMBER", "dd", "NUMBER", "aff", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Received", "request", "main", "NUMBER", "AppRequest", "SleepTime", "NUMBER", "ResponseCode", "NUMBER", "ResponseContentType", "JasonContentType", "EchoContent", "hello", "IsDebug", "true", "IsCrash", "false", "ReadFile", "ReadFileSize", "NUMBER", "CreateFile", "CreateFileSize", "NUMBER", "AllocateMemory", "NUMBER", "LeakMemory", "NUMBER", "ResponseSize", "NUMBER", "InvalidResponse", "false", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fnserver", "func_name", "fn", "http", "func", "app_name", "fn", "http", "func", "e", "NUMBER", "dd", "NUMBER", "aff", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Received", "headers", "map", "Fn_request_url", "LINK", "http", "func", "fn", "http", "func", "User", "Agent", "curl", "NUMBER", "Content", "Length", "NUMBER", "Fn_call_id", "NUMBER", "CNYZXQMYNGA", "NUMBER", "RZJ", "NUMBER", "Fn_deadline", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Fn_method", "POST", "Accept", "Content", "Type", "application", "json", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fnserver", "func_name", "fn", "http", "func", "app_name", "fn", "http", "func", "e", "NUMBER", "dd", "NUMBER", "aff", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Received", "config", "map", "PATH", "usr", "local", "sbin", "usr", "local", "bin", "usr", "sbin", "usr", "bin", "sbin", "bin", "FN_TMPSIZE", "NUMBER", "FN_FORMAT", "http", "HOME", "root", "HOSTNAME", "f", "NUMBER", "fa", "NUMBER", "FN_APP_NAME", "fn", "http", "func", "FN_PATH", "fn", "http", "func", "FN_MEMORY", "NUMBER", "FN_TYPE", "sync", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fnserver", "func_name", "fn", "http", "func", "app_name", "fn", "http", "func", "e", "NUMBER", "dd", "NUMBER", "aff", "NUMBER", "NUMBER", "HTTP", "NUMBER", "NUMBER", "OK", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fnserver", "func_name", "fn", "http", "func", "app_name", "fn", "http", "func", "e", "NUMBER", "dd", "NUMBER", "aff", "NUMBER", "NUMBER", "Content", "Length", "NUMBER", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fnserver", "func_name", "fn", "http", "func", "app_name", "fn", "http", "func", "e", "NUMBER", "dd", "NUMBER", "aff", "NUMBER", "NUMBER", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fnserver", "func_name", "fn", "http", "func", "app_name", "fn", "http", "func", "e", "NUMBER", "dd", "NUMBER", "aff", "NUMBER", "NUMBER", "request", "responseCode", "NUMBER", "echoContent", "hello", "isDebug", "true", "header", "Accept", "Content", "Length", "NUMBER", "Content", "Type", "application", "json", "Fn_call_id", "NUMBER", "CNYZXQMYNGA", "NUMBER", "RZJ", "NUMBER", "Fn_deadline", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Fn_method", "POST", "Fn_request_url", "LINK", "http", "func", "fn", "http", "func", "User", "Agent", "curl", "NUMBER", "config", "FN_APP_NAME", "fn", "http", "func", "FN_FORMAT", "http", "FN_MEMORY", "NUMBER", "FN_PATH", "fn", "http", "func", "FN_TMPSIZE", "NUMBER", "FN_TYPE", "sync", "HOME", "root", "HOSTNAME", "f", "NUMBER", "fa", "NUMBER", "PATH", "usr", "local", "sbin", "usr", "local", "bin", "usr", "sbin", "usr", "bin", "sbin", "bin", "data", "rdallman", "zootalures", "kmjohansen", "Before", "I", "spend", "more", "time", "on", "this", "PR", "I", "d", "like", "to", "ask", "an", "early", "review", "of", "this", "approach", "NUMBER", "This", "PR", "be", "a", "POC", "for", "now", "NUMBER", "In", "summary", "docker", "syslog", "works", "NUMBER", "However", "it", "seems", "to", "log", "both", "stdout", "stderr", "NUMBER", "As", "we", "discussed", "FDK", "will", "still", "need", "to", "handle", "call_id", "addition", "to", "the", "logging", "and", "perhaps", "it", "should", "handle", "supressing", "n", "from", "output", "NUMBER", "stdout", "stderr", "merge", "may", "be", "a", "showstopper", "for", "this", "NUMBER", "The", "above", "before", "after", "be", "from", "an", "http", "function", "and", "you", "can", "see", "that", "http", "output", "be", "also", "logged", "NUMBER", "However", "going", "forward", "if", "we", "get", "rid", "of", "stdio", "and", "switch", "to", "socket", "NUMBER", "io", "this", "might", "be", "the", "behavior", "we", "actually", "want", "NUMBER", "Do", "we", "still", "want", "to", "proceed", "with", "this", "rdallman", "kmjohansen", "This", "be", "a", "bit", "more", "cleaned", "up", "now", "NUMBER", "rdallman", "kmjohansen", "minor", "change", "NUMBER", "remove", "container", "id", "and", "switched", "to", "RFC", "NUMBER", "and", "update", "docs", "NUMBER", "My", "main", "thought", "in", "this", "area", "be", "we", "don", "t", "want", "to", "support", "structured", "cloud", "events", "nor", "any", "format", "that", "involves", "marshalling", "the", "request", "body", "NUMBER", "I", "m", "thinking", "the", "call", "delivery", "model", "should", "be", "much", "closer", "to", "a", "proxy", "use", "metadata", "either", "from", "http", "headers", "or", "preconfigured", "options", "with", "regard", "to", "event", "consumption", "to", "route", "the", "request", "NUMBER", "The", "less", "the", "platform", "has", "to", "do", "with", "the", "request", "the", "better", "NUMBER", "support", "binary", "by", "use", "a", "cloud", "event", "in", "a", "request", "over", "a", "socket", "Seems", "like", "the", "way", "to", "go", "if", "we", "re", "going", "to", "cause", "a", "wide", "ranging", "change", "let", "s", "do", "it", "to", "move", "to", "http", "server", "model", "which", "has", "lots", "of", "nice", "benefits", "NUMBER", "Had", "a", "chat", "with", "kmjohansen", "on", "this", "in", "summary", "we", "think", "NUMBER", "we", "can", "t", "run", "prune", "images", "since", "it", "purges", "indiscriminately", "NUMBER", "In", "case", "of", "restart", "we", "risk", "docker", "pull", "flood", "NUMBER", "NUMBER", "we", "can", "perhaps", "use", "list", "images", "like", "before", "and", "keep", "track", "of", "them", "in", "LRU", "NUMBER", "Except", "for", "DockerLoadFile", "images", "list", "images", "with", "all", "false", "probably", "address", "the", "issue", "point", "out", "by", "rdallman", "NUMBER", "when", "we", "queue", "a", "image", "remove", "job", "we", "might", "need", "to", "order", "operations", "or", "block", "wait", "request", "jobs", "if", "request", "for", "that", "same", "image", "be", "between", "docker", "pull", "and", "docker", "create", "to", "avoid", "error", "NUMBER", "NUMBER", "LRU", "should", "asynchronously", "run", "if", "a", "threshold", "be", "reached", "in", "total", "image", "size", "usage", "NUMBER", "And", "of", "course", "by", "default", "this", "should", "be", "disabled", "since", "we", "do", "not", "know", "how", "users", "be", "run", "docker", "ecosystem", "dind", "shared", "swarm", "etc", "NUMBER", "One", "minor", "note", "we", "probably", "want", "to", "run", "list", "images", "after", "loading", "the", "images", "in", "DockerLoadFile", "and", "LRU", "should", "record", "the", "list", "of", "images", "that", "be", "loaded", "by", "driver", "NUMBER", "loadDockerImages", "and", "always", "skip", "remove", "those", "NUMBER", "In", "other", "words", "images", "loaded", "by", "DockerLoadFile", "param", "should", "not", "be", "evicted", "NUMBER", "Since", "these", "be", "be", "pre", "loaded", "it", "be", "likely", "that", "they", "can", "t", "be", "pull", "NUMBER", "thanks", "for", "keep", "this", "up", "to", "date", "I", "m", "sorry", "that", "it", "has", "lingered", "NUMBER", "I", "ll", "make", "a", "point", "of", "reviewing", "this", "later", "today", "or", "tomorrow", "ericfode", "What", "be", "api", "datastore", "sql", "sqlite_test_dir", "I", "think", "it", "s", "commit", "by", "accident", "NUMBER", "closing", "this", "we", "ll", "start", "fresh", "with", "a", "new", "PR", "NUMBER", "Clone", "of", "the", "trigger", "work", "to", "inject", "invoke", "urls", "into", "the", "annotations", "on", "a", "fn", "when", "it", "be", "returned", "from", "the", "server", "NUMBER", "I", "think", "we", "had", "this", "chat", "when", "it", "came", "to", "triggers", "NUMBER", "I", "think", "it", "came", "down", "to", "the", "fact", "it", "s", "not", "really", "a", "piece", "of", "entity", "metadata", "as", "in", "the", "end", "user", "can", "not", "edit", "it", "and", "it", "could", "conceivably", "change", "out", "side", "of", "their", "control", "NUMBER", "Not", "sure", "if", "I", "m", "remembering", "that", "right", "but", "it", "was", "something", "like", "that", "Think", "i", "ve", "come", "back", "and", "over", "taken", "you", "in", "NUMBER", "now", "NUMBER", "A", "version", "of", "Fn", "invoke", "that", "works", "exactly", "like", "the", "trigger", "endpoint", "point", "NUMBER", "I", "think", "when", "we", "come", "to", "do", "all", "the", "cloud", "events", "stuff", "we", "need", "to", "have", "a", "big", "of", "a", "discussion", "about", "how", "far", "we", "re", "going", "to", "go", "with", "it", "and", "what", "the", "actual", "impact", "be", "going", "to", "of", "different", "version", "of", "it", "all", "NUMBER", "I", "don", "t", "think", "the", "bits", "and", "pieces", "we", "have", "be", "unworkable", "just", "that", "they", "hav", "nt", "be", "planned", "NUMBER", "In", "terms", "of", "refactoring", "what", "we", "have", "here", "we", "can", "always", "do", "invoke", "fn_id", "cloudevent", "like", "what", "be", "specified", "in", "NUMBER", "and", "just", "build", "a", "totally", "separate", "code", "path", "for", "cloudevents", "NUMBER", "Why", "be", "the", "resource", "in", "models", "only", "have", "Memory", "skinowski", "that", "and", "timeout", "be", "going", "to", "be", "the", "only", "configurables", "i", "think", "shapes", "be", "going", "to", "come", "into", "this", "area", "NUMBER", "Just", "this", "afternoons", "effort", "to", "start", "from", "the", "front", "so", "far", "NUMBER", "I", "ve", "copied", "up", "the", "event", "from", "the", "other", "PR", "but", "I", "do", "think", "that", "there", "be", "a", "strong", "case", "for", "a", "library", "here", "NUMBER", "Other", "than", "that", "I", "m", "basically", "copying", "what", "has", "be", "do", "for", "http", "triggers", "and", "just", "trying", "to", "get", "the", "most", "boring", "stuff", "do", "NUMBER", "I", "think", "smallest", "Delta", "possible", "And", "really", "should", "be", "noting", "down", "these", "further", "steps", "somewhere", "NUMBER", "This", "have", "be", "over", "taken", "by", "events", "represented", "in", "NUMBER", "I", "like", "this", "and", "mention", "it", "in", "the", "past", "but", "to", "do", "this", "I", "think", "we", "d", "need", "to", "amend", "the", "protocols", "to", "handle", "an", "early", "return", "of", "data", "to", "client", "while", "holding", "the", "container", "token", "and", "make", "it", "sure", "that", "time", "cpu", "be", "accounted", "NUMBER", "We", "can", "perhaps", "look", "at", "it", "after", "cloud", "events", "which", "I", "think", "simplifies", "the", "flow", "and", "see", "if", "it", "can", "be", "handle", "easily", "NUMBER", "I", "apologize", "I", "misunderstood", "this", "issue", "I", "was", "talking", "about", "a", "post", "handler", "that", "gets", "executed", "at", "every", "invocation", "where", "users", "can", "execute", "code", "without", "impacting", "request", "latency", "NUMBER", "But", "an", "exit", "handler", "be", "problematic", "for", "us", "like", "zootalures", "said", "we", "shouldn", "t", "gracefully", "wait", "for", "user", "code", "to", "clean", "up", "NUMBER", "I", "d", "like", "to", "understand", "more", "about", "the", "original", "problem", "however", "NUMBER", "When", "hot", "function", "terminate", "such", "backends", "should", "receive", "FIN", "RST", "so", "the", "backend", "should", "have", "the", "opportunity", "to", "notice", "and", "clean", "up", "these", "connections", "upon", "termination", "NUMBER", "I", "wonder", "if", "abhirockzz", "be", "actually", "referring", "to", "idle", "connections", "on", "live", "but", "idle", "hot", "container", "NUMBER", "In", "other", "words", "hot", "container", "that", "haven", "t", "exceeded", "their", "idle", "timeout", "but", "not", "handle", "a", "request", "and", "holding", "on", "to", "such", "connections", "NUMBER", "Creates", "a", "test", "that", "aims", "to", "assert", "that", "the", "Equals", "and", "Clone", "function", "for", "the", "App", "struct", "actually", "work", "NUMBER", "The", "bulk", "of", "the", "code", "be", "spent", "creating", "a", "gopter", "generator", "for", "the", "App", "Struct", "NUMBER", "See", "information", "of", "generative", "or", "property", "based", "test", "for", "explainations", "on", "that", "topic", "but", "basically", "it", "s", "an", "object", "that", "be", "capable", "of", "creating", "a", "stream", "of", "unique", "instances", "of", "the", "given", "struct", "NUMBER", "With", "the", "generator", "we", "then", "make", "three", "assertions", "NUMBER", "App", "s", "be", "always", "equal", "to", "themselves", "NUMBER", "NUMBER", "A", "NUMBER", "Clone", "of", "an", "App", "be", "Equal", "to", "the", "original", "App", "NUMBER", "NUMBER", "A", "NUMBER", "Clone", "of", "an", "App", "that", "has", "a", "field", "modify", "be", "not", "equal", "to", "the", "orignal", "NUMBER", "The", "third", "property", "be", "the", "worse", "for", "implementation", "as", "it", "do", "not", "generate", "the", "field", "to", "modify", "it", "simply", "loops", "all", "field", "for", "each", "generate", "App", "and", "checks", "Equals", "always", "breaks", "NUMBER", "Break", "test", "shows", "that", "this", "would", "have", "caught", "earlier", "bug", "in", "Equals", "due", "to", "field", "addition", "NUMBER", "It", "will", "add", "to", "the", "work", "to", "add", "further", "field", "generators", "have", "to", "be", "manually", "specified", "for", "each", "field", "but", "that", "seems", "a", "worthy", "cost", "NUMBER", "I", "think", "this", "could", "largely", "be", "do", "with", "test", "quick", "but", "gopter", "be", "far", "more", "able", "has", "shrinking", "more", "exstensible", "and", "I", "wanted", "to", "get", "use", "to", "it", "NUMBER", "This", "be", "trying", "to", "assert", "some", "core", "properties", "of", "the", "code", "which", "I", "think", "examples", "would", "miss", "NUMBER", "I", "don", "t", "think", "it", "can", "be", "do", "without", "a", "lot", "of", "reflection", "and", "although", "the", "gopter", "stuff", "looks", "heavy", "when", "I", "tried", "without", "it", "I", "just", "ended", "up", "with", "a", "half", "baked", "pants", "version", "of", "the", "map", "that", "gets", "fed", "into", "the", "structs", "gen", "NUMBER", "I", "m", "quite", "interested", "in", "the", "conversation", "around", "this", "approach", "as", "well", "NUMBER", "Once", "the", "generators", "be", "write", "they", "can", "be", "reused", "and", "I", "d", "look", "to", "becoming", "more", "property", "driven", "in", "the", "future", "NUMBER", "test", "quick", "be", "pretty", "limited", "it", "doesn", "t", "really", "have", "generators", "so", "doesn", "t", "support", "shrinking", "which", "be", "pretty", "key", "for", "PBT", "imo", "NUMBER", "Although", "that", "said", "gopter", "doesn", "t", "shrink", "struct", "generators", "so", "that", "s", "not", "a", "huge", "win", "here", "NUMBER", "I", "get", "the", "reservations", "but", "when", "thinking", "about", "this", "I", "couldn", "t", "think", "of", "another", "way", "of", "ensuring", "that", "an", "add", "struct", "field", "was", "also", "add", "to", "Equals", "Clone", "without", "relying", "on", "a", "human", "to", "remember", "something", "NUMBER", "With", "this", "it", "will", "prompt", "them", "pretty", "quickly", "to", "sort", "it", "out", "NUMBER", "rdallman", "zootalures", "someone", "want", "to", "give", "this", "the", "green", "light", "then", "NUMBER", "should", "be", "able", "to", "rebase", "on", "this", "with", "relative", "ease", "since", "the", "lines", "be", "identical", "attempting", "to", "simplify", "some", "stuff", "out", "of", "NUMBER", "here", "still", "on", "the", "TODO", "be", "bubble", "up", "the", "env", "vars", "to", "the", "server", "package", "and", "just", "use", "agent", "config", "field", "NUMBER", "live", "to", "die", "another", "day", "today", "thanks", "NUMBER", "flip", "a", "coin", "who", "gets", "to", "rebase", "NUMBER", "NUMBER", "However", "it", "isn", "t", "the", "best", "solution", "to", "the", "issue", "NUMBER", "open", "to", "ideas", "here", "if", "you", "have", "suggestions", "setting", "headers", "on", "the", "function", "be", "useful", "for", "separating", "the", "function", "from", "having", "to", "do", "this", "NUMBER", "it", "s", "also", "an", "option", "to", "return", "the", "headers", "directly", "from", "your", "function", "in", "the", "response", "these", "will", "get", "propagated", "back", "out", "to", "the", "http", "response", "NUMBER", "if", "you", "re", "use", "an", "fdk", "this", "be", "easier", "to", "do", "otherwise", "the", "details", "for", "setting", "response", "headers", "depend", "on", "the", "format", "details", "be", "here", "LINK", "format", "NUMBER", "md", "marking", "this", "as", "resolve", "happy", "to", "discuss", "further", "here", "though", "NUMBER", "I", "see", "these", "be", "in", "our", "API", "docs", "relatively", "clearly", "explained", "as", "be", "though", "happy", "to", "bolster", "if", "you", "ve", "get", "suggestions", "i", "ll", "try", "to", "spend", "a", "few", "more", "hours", "on", "this", "this", "weekend", "sorry", "this", "took", "so", "long", "NUMBER", "caught", "up", "on", "my", "email", "and", "in", "the", "clear", "now", "realize", "my", "review", "be", "vague", "i", "m", "musing", "about", "feasible", "reductions", "and", "have", "not", "yet", "tried", "to", "run", "fixup", "test", "with", "this", "maybe", "just", "press", "on", "NUMBER", "renaming", "agent", "config", "remove", "max", "req", "size", "yeah", "good", "idea", "i", "ll", "try", "to", "post", "a", "patch", "with", "just", "these", "today", "easy", "enough", "to", "extract", "those", "two", "out", "NUMBER", "ok", "NUMBER", "and", "NUMBER", "be", "up", "NUMBER", "i", "think", "we", "can", "probably", "stage", "the", "change", "that", "rip", "http", "NUMBER", "request", "out", "of", "call", "out", "too", "without", "any", "of", "the", "i", "o", "change", "which", "add", "context", "NUMBER", "Context", "to", "the", "agent", "methods", "and", "update", "the", "test", "and", "such", "that", "should", "reduce", "the", "noise", "a", "good", "bit", "more", "from", "here", "after", "another", "rebase", "NUMBER", "i", "ll", "give", "it", "a", "couple", "hours", "and", "see", "if", "it", "s", "worth", "it", "in", "function", "logs", "there", "will", "be", "an", "error", "like", "msg", "NUMBER", "my", "NUMBER", "sh", "line", "NUMBER", "can", "t", "create", "file", "Read", "only", "file", "system", "n", "if", "you", "d", "like", "to", "fix", "this", "temporarily", "you", "may", "write", "to", "tmp", "or", "disable", "this", "feature", "LINK", "we", "be", "smoke", "test", "this", "and", "appreciate", "upvotes", "here", "if", "you", "run", "into", "issue", "so", "that", "we", "can", "track", "this", "or", "any", "additional", "sentiments", "an", "upvote", "indicates", "you", "would", "like", "to", "write", "to", "anywhere", "in", "the", "container", "filesystem", "by", "default", "i", "NUMBER", "e", "NUMBER", "as", "a", "user", "your", "expectation", "and", "or", "this", "was", "challenging", "to", "work", "around", "please", "provide", "details", "NUMBER", "we", "re", "walking", "a", "bit", "of", "a", "tight", "rope", "with", "OSS", "and", "service", "anyway", "this", "restriction", "likely", "shouldn", "t", "last", "in", "OSS", "but", "we", "were", "curious", "the", "effect", "on", "users", "and", "this", "was", "the", "easiest", "way", "to", "generate", "data", "rather", "than", "sitting", "around", "talking", "hypotheticals", "one", "issue", "we", "have", "atm", "be", "that", "we", "aren", "t", "very", "upfront", "about", "this", "restriction", "so", "it", "s", "more", "likely", "users", "run", "into", "it", "NUMBER", "there", "s", "something", "to", "be", "said", "for", "expectations", "but", "we", "were", "mostly", "curious", "about", "cases", "where", "it", "s", "not", "possible", "or", "very", "challenging", "to", "work", "around", "this", "and", "if", "that", "s", "a", "practical", "reality", "or", "only", "hypothetical", "NUMBER", "there", "s", "a", "decent", "opportunity", "here", "to", "generate", "data", "on", "whether", "it", "should", "be", "enable", "or", "disabled", "out", "of", "the", "box", "which", "be", "the", "crux", "of", "the", "issue", "or", "the", "intended", "one", "though", "I", "certainly", "wish", "the", "original", "post", "for", "this", "issue", "looked", "more", "like", "LINK", "issuecomment", "NUMBER", "to", "reference", "here", "NUMBER", "if", "users", "be", "hitting", "this", "regularly", "_and_", "it", "s", "hard", "to", "work", "around", "we", "have", "an", "interesting", "conversation", "around", "disabling", "it", "by", "default", "in", "OSS", "NUMBER", "we", "need", "some", "guide", "on", "battle", "hardened", "config", "outside", "the", "scope", "of", "this", "configurable", "option", "exist", "motivations", "therein", "at", "least", "this", "wasn", "t", "the", "intent", "of", "that", "issue", "and", "maybe", "that", "should", "be", "clarified", "NUMBER", "there", "s", "a", "multiple", "issue", "spanning", "issue", "around", "consistent", "experience", "to", "be", "had", "between", "out", "of", "the", "box", "installs", "vs", "NUMBER", "configured", "installs", "NUMBER", "I", "see", "NUMBER", "tiers", "out", "of", "the", "box", "install", "behavior", "on", "prem", "configured", "behavior", "and", "our", "service", "behavior", "there", "s", "a", "whole", "spectrum", "to", "explore", "between", "complete", "freedom", "with", "OSS", "where", "everything", "works", "and", "there", "s", "no", "limits", "to", "mimicking", "the", "service", "exactly", "we", "need", "some", "unity", "on", "that", "as", "we", "re", "not", "consistent", "at", "the", "moment", "this", "be", "at", "the", "moment", "and", "perhaps", "should", "remain", "that", "way", "if", "the", "community", "doesn", "t", "give", "much", "feedback", "here", "but", "maybe", "this", "be", "better", "do", "elsewhere", "since", "it", "s", "not", "NUMBER", "directly", "NUMBER", "feel", "free", "to", "edit", "the", "OP", "or", "close", "and", "maybe", "re", "create", "NUMBER", "as", "the", "title", "suggests", "it", "would", "be", "valuable", "feedback", "to", "know", "how", "many", "users", "run", "into", "the", "read", "only", "issue", "when", "run", "the", "OSS", "fn", "out", "of", "the", "box", "as", "well", "as", "provide", "them", "an", "outlet", "to", "provide", "feedback", "on", "this", "and", "if", "we", "get", "that", "then", "we", "can", "analyze", "what", "to", "do", "from", "there", "for", "the", "out", "of", "the", "box", "experience", "NUMBER", "at", "present", "we", "allow", "a", "user", "to", "set", "cpu", "memory", "and", "tmpfs_size", "on", "a", "given", "function", "tba", "network", "NUMBER", "this", "allows", "variable", "amounts", "for", "any", "of", "those", "given", "parameters", "where", "they", "be", "independent", "of", "one", "another", "NUMBER", "quite", "simply", "this", "issue", "proposes", "to", "base", "the", "settings", "for", "any", "other", "system", "resources", "that", "exist", "currently", "or", "in", "the", "future", "off", "of", "memory", "alone", "NUMBER", "first", "illustrated", "with", "an", "example", "these", "be", "not", "in", "any", "way", "prescriptive", "NUMBER", "MB", "RAM", "NUMBER", "mCPU", "NUMBER", "MB", "tmpfs", "NUMBER", "Mb", "s", "network", "NUMBER", "MB", "RAM", "NUMBER", "mCPU", "NUMBER", "MB", "tmpfs", "NUMBER", "Mb", "s", "network", "NUMBER", "up", "to", "some", "N", "cap", "of", "RAM", "say", "NUMBER", "GB", "or", "something", "NUMBER", "where", "a", "user", "would", "only", "set", "and", "or", "see", "the", "memory", "setting", "and", "all", "of", "the", "other", "settings", "would", "get", "applied", "under", "the", "hood", "for", "that", "function", "not", "visible", "to", "the", "user", "via", "API", "NUMBER", "part", "of", "the", "work", "to", "do", "this", "make", "this", "capable", "has", "gone", "in", "LINK", "with", "the", "current", "API", "intact", "this", "aims", "to", "round", "this", "out", "a", "little", "more", "NUMBER", "lambda", "s", "copyright", "around", "this", "be", "as", "follows", "if", "this", "helps", "to", "clarify", "You", "only", "specify", "the", "amount", "of", "memory", "you", "want", "to", "allocate", "for", "your", "Lambda", "function", "NUMBER", "AWS", "Lambda", "allocates", "CPU", "power", "proportional", "to", "the", "memory", "by", "use", "the", "same", "ratio", "as", "a", "general", "purpose", "Amazon", "EC", "NUMBER", "instance", "type", "such", "as", "an", "M", "NUMBER", "type", "NUMBER", "For", "example", "if", "you", "allocate", "NUMBER", "MB", "memory", "your", "Lambda", "function", "will", "receive", "twice", "the", "CPU", "share", "than", "if", "you", "allocated", "only", "NUMBER", "MB", "NUMBER", "You", "can", "update", "the", "configuration", "and", "request", "additional", "memory", "in", "NUMBER", "MB", "increments", "from", "NUMBER", "MB", "to", "NUMBER", "MB", "NUMBER", "benefits", "the", "user", "api", "would", "be", "very", "simple", "only", "exposing", "memory", "NUMBER", "this", "has", "be", "one", "particular", "concern", "where", "in", "a", "setting", "with", "certain", "shape", "tiers", "similar", "to", "above", "if", "a", "user", "sets", "one", "setting", "do", "this", "mean", "we", "should", "adjust", "the", "other", "settings", "to", "more", "closely", "fit", "a", "valid", "shape", "based", "on", "a", "certain", "parameter", "i", "NUMBER", "e", "NUMBER", "do", "we", "need", "to", "do", "minimum", "maximum", "calculation", "to", "fit", "or", "do", "we", "error", "ignore", "certain", "field", "etc", "etc", "NUMBER", "this", "be", "much", "more", "straightforward", "than", "what", "be", "possible", "now", "if", "a", "service", "provider", "wants", "to", "provide", "an", "equivalent", "API", "to", "the", "OSS", "fn", "API", "where", "the", "service", "provider", "would", "need", "middleware", "to", "provide", "some", "of", "the", "above", "outlined", "logic", "NUMBER", "configuring", "these", "settings", "for", "a", "service", "provider", "could", "be", "as", "simple", "as", "setting", "memory_interval", "such", "as", "NUMBER", "MB", "shown", "above", "a", "max_memory", "where", "the", "interval", "would", "cap", "out", "at", "a", "factor", "for", "all", "of", "or", "each", "setting", "and", "the", "interval", "for", "cpu", "tmpfs", "network", "etc", "NUMBER", "these", "could", "be", "do", "as", "simply", "as", "having", "environment", "variables", "or", "in", "another", "way", "but", "be", "not", "particularly", "challenging", "to", "plumb", "NUMBER", "it", "would", "also", "be", "possible", "to", "have", "some", "kind", "of", "table", "config", "for", "shapes", "or", "even", "an", "admin", "API", "to", "hook", "this", "up", "NUMBER", "this", "particular", "point", "will", "have", "to", "get", "sorted", "out", "should", "this", "feature", "go", "through", "NUMBER", "a", "service", "provider", "can", "magically", "change", "the", "settings", "behind", "the", "scenes", "without", "any", "notice", "through", "the", "API", "NUMBER", "for", "example", "if", "new", "VM", "shapes", "come", "in", "that", "allow", "splitting", "up", "a", "VM", "into", "the", "same", "memory", "sized", "chunks", "with", "double", "the", "CPU", "or", "network", "bandwidth", "et", "voila", "there", "s", "no", "documentation", "to", "update", "this", "amount", "in", "the", "API", "settings", "or", "go", "update", "across", "all", "user", "function", "they", "ll", "just", "get", "the", "extra", "juice", "NUMBER", "or", "when", "we", "decide", "to", "give", "users", "real", "disks", "instead", "of", "tmpfs", "to", "write", "things", "to", "they", "won", "t", "have", "to", "futz", "with", "another", "setting", "for", "disk", "to", "go", "next", "to", "tmpfs", "size", "we", "can", "just", "move", "them", "onto", "disks", "deprecate", "tmpfs", "whatever", "NUMBER", "aligns", "with", "what", "competitors", "be", "doing", "and", "provides", "a", "familiar", "understandable", "user", "experience", "cons", "lack", "of", "flexibility", "for", "function", "shaping", "most", "function", "will", "not", "uniformly", "use", "NUMBER", "MB", "of", "RAM", "_and_", "NUMBER", "mCPU", "_and_", "NUMBER", "Mb", "s", "network", "they", "ll", "likely", "be", "bound", "on", "one", "of", "these", "and", "could", "in", "theory", "lower", "the", "needs", "for", "the", "things", "they", "be", "not", "bound", "on", "and", "in", "theory", "a", "service", "provider", "could", "more", "efficiently", "pack", "things", "that", "be", "more", "bound", "by", "those", "other", "things", "onto", "those", "machines", "NUMBER", "while", "this", "sounds", "nice", "it", "requires", "a", "lot", "of", "vertical", "integration", "across", "the", "product", "and", "to", "date", "only", "Google", "function", "seems", "to", "have", "a", "flexible", "billing", "model", "based", "off", "of", "memory", "and", "cpu", "usage", "oppose", "to", "microsoft", "and", "lambda", "which", "bill", "by", "gigabytes", "of", "memory", "use", "over", "function", "duration", "NUMBER", "maybe", "the", "Google", "billing", "model", "be", "worth", "discussion", "as", "this", "do", "have", "implications", "across", "the", "product", "and", "may", "be", "flexible", "enough", "for", "our", "needs", "as", "well", "as", "other", "models", "NUMBER", "users", "be", "unaware", "of", "how", "much", "of", "the", "other", "stuff", "they", "re", "get", "potentially", "like", "CPU", "disk", "NUMBER", "this", "be", "notably", "also", "in", "the", "benefit", "section", "for", "different", "reasons", "NUMBER", "cc", "shaunsmith", "skinowski", "It", "seems", "off", "that", "we", "re", "doing", "an", "apt", "get", "install", "during", "fn", "build", "here", "I", "think", "the", "base", "requirements", "should", "be", "bundled", "into", "the", "respective", "container", "we", "provide", "this", "seems", "to", "be", "the", "case", "now", "LGTM", "but", "minor", "concern", "regard", "add", "too", "many", "buckets", "NUMBER", "Similar", "to", "FN_MEMORY", "we", "pass", "FN_TMPSIZE", "to", "function", "config", "NUMBER", "kmjohansen", "For", "time", "be", "it", "s", "not", "configurable", "NUMBER", "Hardcoded", "to", "tmp", "NUMBER", "I", "understand", "that", "this", "approach", "here", "be", "limited", "but", "this", "be", "consistent", "with", "FN_MEMORY", "FN_CPU", "NUMBER", "These", "be", "pass", "in", "as", "part", "of", "call", "configuration", "structure", "for", "example", "for", "json", "LINK", "L", "NUMBER", "TMPFSSIZE", "be", "part", "of", "Route", "API", "and", "it", "s", "a", "single", "entity", "NUMBER", "When", "volumes", "be", "implement", "we", "d", "need", "to", "extend", "supplement", "this", "NUMBER", "Right", "now", "TMPFSSIZE", "be", "either", "unlimited", "NUMBER", "or", "set", "to", "a", "specific", "limit", "NUMBER", "I", "m", "ok", "with", "holding", "off", "on", "this", "until", "we", "decide", "on", "a", "better", "strategy", "as", "well", "NUMBER", "LGTM", "but", "be", "we", "sure", "remove", "api", "test", "be", "already", "covered", "in", "the", "remaining", "test", "in", "fn", "Crux", "of", "the", "problem", "here", "be", "that", "lb", "pure", "runner", "system", "needs", "to", "be", "documented", "NUMBER", "The", "settings", "above", "be", "not", "required", "but", "recommended", "to", "ensure", "the", "services", "be", "safely", "configured", "NUMBER", "Perhaps", "we", "can", "remove", "them", "but", "even", "without", "them", "you", "d", "still", "need", "to", "set", "FN_DB_URL", "FN_API_URL", "NUMBER", "Historically", "system_test", "NUMBER", "sh", "was", "copied", "from", "api_test", "NUMBER", "sh", "NUMBER", "We", "basically", "have", "these", "two", "shell", "scripts", "that", "be", "entry", "points", "for", "both", "api", "system", "test", "but", "that", "can", "be", "do", "in", "TestMain", "NUMBER", "I", "ll", "clean", "this", "up", "NUMBER", "rdallman", "Thanks", "for", "catching", "this", "NUMBER", "When", "if", "this", "happens", "we", "can", "remove", "GetBody", "hacks", "in", "agent", "NUMBER", "call", "see", "lb_agent", "NUMBER", "go", "and", "auth", "NUMBER", "go", "which", "be", "currently", "an", "unsavory", "hack", "via", "call", "NUMBER", "RequestBody", "NUMBER", "This", "also", "have", "implications", "in", "gRPC", "between", "LB", "and", "runners", "NUMBER", "We", "need", "to", "be", "careful", "if", "we", "be", "going", "to", "send", "body", "in", "gRPC", "model", "as", "we", "can", "hit", "max", "msg", "sizes", "of", "gRPC", "NUMBER", "It", "would", "probably", "better", "if", "runner", "client", "server", "stripped", "the", "body", "off", "of", "model", "and", "pass", "it", "along", "use", "DataFrames", "like", "we", "do", "now", "NUMBER", "Just", "spelling", "these", "out", "to", "make", "sure", "implementer", "covers", "these", "NUMBER", "I", "think", "the", "change", "need", "a", "bit", "clarification", "as", "who", "add", "the", "id", "and", "when", "NUMBER", "Because", "as", "be", "server", "NUMBER", "NewFromEnv", "seems", "to", "add", "a", "handler", "regardless", "of", "type", "lb", "runner", "pure", "runner", "api", "NUMBER", "IMHO", "two", "points", "NUMBER", "the", "rid", "generator", "which", "seems", "to", "be", "intended", "for", "LB", "only", "should", "not", "try", "to", "fetch", "id", "from", "untrusted", "client", "http", "headers", "NUMBER", "It", "should", "always", "generate", "the", "id", "NUMBER", "NUMBER", "The", "rid", "generator", "option", "should", "not", "be", "part", "of", "server", "NUMBER", "NewFromEnv", "by", "default", "because", "it", "needs", "to", "be", "optional", "NUMBER", "see", "system", "test", "which", "only", "add", "it", "to", "LB", "which", "I", "think", "be", "what", "we", "want", "NUMBER", "Other", "than", "idle_timeout", "hot", "function", "have", "a", "potential", "of", "staying", "alive", "unbounded", "amount", "of", "time", "NUMBER", "In", "certain", "routes", "it", "may", "be", "desirable", "to", "limit", "total", "request", "count", "NUMBER", "Setting", "max_requests", "to", "NUMBER", "also", "simulates", "a", "cold", "function", "behavior", "but", "with", "superior", "formats", "json", "cloudevents", "http", "since", "only", "one", "execution", "will", "be", "performed", "in", "a", "given", "container", "NUMBER", "This", "change", "be", "also", "a", "preliminary", "step", "for", "decommissioning", "cold", "format", "since", "max_requests", "parameter", "can", "now", "meet", "cold", "requirements", "NUMBER", "In", "busy", "deployments", "max_requests", "can", "be", "valuable", "workaround", "for", "resource", "leaks", "in", "problematic", "routes", "NUMBER", "In", "future", "max_time", "can", "also", "be", "add", "to", "limit", "the", "total", "execution", "time", "NUMBER", "Alternatively", "we", "could", "add", "max_requests", "and", "also", "a", "max_exectime", "to", "limit", "all", "container", "in", "a", "agent", "cfg", "NUMBER", "This", "would", "allow", "a", "service", "to", "safely", "upper", "bound", "both", "without", "add", "per", "route", "settings", "NUMBER", "Then", "we", "lose", "the", "cold", "like", "execution", "in", "a", "route", "NUMBER", "Does", "anyone", "really", "need", "cold", "like", "execution", "or", "such", "settings", "on", "specific", "routes", "but", "not", "others", "To", "be", "clear", "MaxRequests", "NUMBER", "do", "not", "allow", "default", "format", "in", "hot", "container", "NUMBER", "It", "just", "allows", "execute", "once", "support", "in", "json", "cloudevents", "http", "formats", "NUMBER", "Most", "similar", "systems", "have", "both", "of", "these", "NUMBER", "I", "think", "we", "need", "both", "and", "I", "can", "add", "time", "based", "max", "exectime", "to", "this", "PR", "as", "well", "NUMBER", "after", "we", "decide", "where", "these", "would", "go", "NUMBER", "By", "similar", "system", "I", "meant", "http", "keepalives", "uwsgi", "fcgi", "etc", "NUMBER", "Closing", "this", "NUMBER", "I", "still", "like", "the", "idea", "of", "bounded", "execution", "with", "maximum", "time", "maximum", "number", "of", "request", "etc", "NUMBER", "But", "the", "PR", "be", "old", "and", "we", "can", "rework", "this", "later", "if", "it", "comes", "up", "as", "high", "priority", "NUMBER", "Runner", "could", "poll", "docker", "eg", "NUMBER", "docker", "info", "if", "runner", "be", "idle", "for", "too", "long", "or", "simply", "respond", "OK", "based", "on", "any", "recent", "docker", "interaction", "last", "docker", "operation", "was", "OK", "or", "not", "NUMBER", "Or", "just", "panic", "NUMBER", "But", "this", "needs", "to", "be", "do", "by", "cherry", "picking", "these", "operations", "in", "docker", "driver", "in", "runner", "NUMBER", "eg", "NUMBER", "docker", "pull", "failures", "may", "or", "may", "not", "mean", "runner", "health", "failure", "NUMBER", "docker", "info", "doesn", "t", "mean", "much", "though", "NUMBER", "But", "shows", "docker", "up", "run", "NUMBER", "So", "in", "Status", "message", "I", "m", "planning", "to", "include", "some", "memory", "slot", "cpu", "info", "from", "agent", "s", "point", "of", "view", "NUMBER", "not", "system", "memory", "cpu", "utilization", "NUMBER", "Intended", "for", "LB", "to", "use", "the", "data", "as", "heuristics", "NUMBER", "Memory", "be", "particularly", "tricky", "as", "runner", "could", "be", "low", "or", "out", "of", "memory", "but", "can", "have", "a", "lot", "of", "idle", "hot", "slots", "to", "handle", "many", "request", "NUMBER", "Let", "s", "hold", "off", "on", "this", "one", "NUMBER", "Until", "config", "operational", "config", "decision", "be", "finalized", "NUMBER", "shaunsmith", "was", "ask", "about", "documentation", "NUMBER", "write", "that", "up", "at", "last", "LINK", "i", "m", "not", "sure", "it", "was", "well", "circulated", "that", "it", "was", "planned", "in", "triggers", "change", "feel", "free", "to", "add", "NUMBER", "to", "title", "or", "waiting", "tag", "depending", "on", "scope", "With", "this", "PR", "runner", "client", "translates", "too", "busy", "error", "from", "gRPC", "session", "and", "runner", "itself", "into", "Fn", "error", "type", "NUMBER", "Placers", "now", "ignore", "this", "error", "message", "to", "reduce", "unnecessary", "logging", "NUMBER", "kojustin", "I", "think", "they", "need", "to", "become", "metrics", "NUMBER", "A", "counter", "for", "number", "of", "too", "busy", "runner", "responses", "etc", "NUMBER", "Introduce", "two", "new", "env", "variables", "to", "expose", "tmpfs", "size", "and", "location", "to", "applications", "NUMBER", "For", "example", "FN_TMPFSSIZE", "NUMBER", "FN_TMPFS", "tmp", "in", "MB", "NUMBER", "Correction", "I", "ve", "meant", "FN_TMPSIZE", "FN_TMP", "actually", "where", "FN_TMPSIZE", "be", "in", "MB", "and", "if", "unlimited", "be", "NUMBER", "FN_TMP", "will", "be", "tmp", "most", "of", "the", "time", "but", "allows", "us", "to", "move", "it", "somewhere", "if", "ever", "needed", "NUMBER", "Might", "not", "need", "this", "one", "NUMBER", "Also", "similar", "to", "FN_MEMORY", "FN_TMPSIZE", "will", "not", "be", "actual", "tmp", "size", "available", "but", "what", "s", "configured", "for", "that", "route", "function", "since", "between", "calls", "in", "hot", "container", "tmp", "will", "persist", "until", "hot", "container", "be", "dead", "NUMBER", "Their", "provide", "value", "in", "env", "as", "config", "be", "a", "bit", "dubious", "so", "maybe", "we", "can", "punt", "on", "them", "for", "time", "be", "NUMBER", "remove", "git", "tag", "git", "push", "from", "circle", "CI", "NUMBER", "Here", "a", "separate", "manual", "tag", "PR", "be", "required", "to", "trigger", "CircleCI", "to", "release", "dind", "and", "fn", "images", "NUMBER", "optimizations", "provide", "by", "change", "since", "last", "NUMBER", "sh", "script", "be", "revert", "for", "time", "be", "NUMBER", "Closing", "this", "it", "was", "an", "experiment", "as", "we", "ll", "likely", "not", "use", "this", "approach", "NUMBER", "calls", "be", "remove", "from", "API", "now", "Decommission", "or", "move", "these", "test", "images", "to", "fnproject", "docker", "hub", "or", "use", "exist", "test", "images", "NUMBER", "See", "NUMBER", "test", "fn", "api", "test", "formats_test", "NUMBER", "go", "rt", "NUMBER", "Image", "denismakogon", "test", "hot", "json", "go", "NUMBER", "NUMBER", "test", "fn", "api", "test", "exec_test", "NUMBER", "go", "rt", "NUMBER", "Image", "denismakogon", "os", "NUMBER", "environ", "The", "docker", "images", "funcy", "timeout", "funcy", "log", "which", "be", "in", "test", "fn", "api", "test", "can", "be", "decommissioned", "NUMBER", "We", "can", "either", "move", "these", "to", "the", "new", "fnproject", "dockerhub", "repository", "or", "try", "to", "use", "exist", "images", "that", "be", "already", "present", "NUMBER", "When", "TmpFsSize", "be", "not", "set", "in", "a", "route", "docker", "fail", "to", "create", "a", "tmp", "mount", "that", "be", "writable", "NUMBER", "Forcing", "docker", "to", "explicitly", "to", "this", "if", "read", "only", "root", "directory", "be", "enable", "default", "NUMBER", "denismakogon", "Routes", "have", "TmpFsSize", "config", "param", "to", "adjust", "tmp", "size", "limit", "NUMBER", "If", "unset", "tmp", "be", "unlimited", "but", "in", "reality", "tied", "to", "available", "system", "memory", "NUMBER", "Interesting", "we", "even", "have", "a", "test", "case", "for", "this", "LINK", "_test", "NUMBER", "go", "L", "NUMBER", "which", "OS", "do", "this", "fail", "on", "Oh", "I", "see", "the", "issue", "NUMBER", "Fix", "be", "come", "shortly", "NUMBER", "Meanwhile", "as", "a", "workaround", "you", "can", "specify", "TmpFsSize", "x", "for", "your", "routes", "where", "x", "be", "size", "in", "MB", "NUMBER", "NUMBER", "address", "this", "NUMBER", "Timeout", "setting", "in", "routes", "now", "means", "maximum", "amount", "of", "time", "a", "function", "can", "run", "in", "a", "container", "NUMBER", "Total", "wait", "time", "for", "a", "given", "http", "request", "be", "now", "expected", "to", "be", "handle", "by", "the", "client", "NUMBER", "As", "long", "as", "the", "client", "waits", "the", "LB", "runner", "or", "agents", "will", "search", "for", "resources", "to", "schedule", "it", "NUMBER", "rdallman", "a", "bit", "cleaner", "with", "latest", "commit", "I", "think", "NUMBER", "Ignoring", "cold", "deadline", "issue", "for", "now", "as", "cold", "be", "slated", "to", "be", "decommissioned", "NUMBER", "read", "only", "Root", "Fs", "Support", "remove", "CPUShares", "from", "docker", "API", "NUMBER", "This", "was", "unuse", "NUMBER", "docker", "NUMBER", "Prepare", "refactoring", "add", "docker", "NUMBER", "configureTmpFs", "for", "size", "limited", "tmpfs", "on", "tmp", "tmpfs", "size", "support", "in", "routes", "and", "resource", "tracker", "fix", "fn", "test", "utils", "to", "handle", "sparse", "file", "better", "in", "create", "file", "Annotations", "sounds", "good", "NUMBER", "Then", "operators", "could", "choose", "to", "put", "this", "as", "app", "or", "route", "based", "setting", "NUMBER", "rdallman", "FYI", "zootalures", "has", "some", "reservations", "on", "use", "annotations", "for", "this", "NUMBER", "Leaving", "this", "PR", "as", "be", "I", "think", "per", "route", "config", "be", "OK", "and", "gives", "enough", "flexibility", "to", "operators", "NUMBER", "I", "d", "say", "we", "leave", "it", "disabled", "by", "default", "NUMBER", "This", "be", "the", "least", "disruptive", "for", "open", "source", "users", "cli", "etc", "NUMBER", "fn", "run", "no", "longer", "exists", "Wrapping", "metrics", "should", "be", "optional", "explicit", "there", "IMHO", "NUMBER", "Maybe", "we", "could", "expose", "that", "wrapper", "instead", "Because", "if", "a", "user", "synthesizes", "a", "datastore", "use", "api", "datastore", "datastore", "NUMBER", "New", "then", "pass", "that", "datastore", "to", "WithDatastore", "it", "ll", "be", "wrapped", "again", "NUMBER", "We", "can", "should", "enforce", "metrics", "validation", "NUMBER", "I", "m", "only", "slightly", "concerned", "about", "user", "error", "where", "a", "user", "synthesizes", "a", "datastore", "use", "api", "datastore", "datastore", "NUMBER", "New", "then", "pass", "that", "datastore", "to", "WithDatastore", "NUMBER", "Not", "sure", "if", "this", "be", "a", "big", "concern", "NUMBER", "Ah", "this", "be", "because", "the", "call", "fail", "very", "early", "and", "considered", "retriable", "it", "s", "not", "remove", "from", "the", "queue", "NUMBER", "We", "may", "need", "to", "distinguish", "specific", "cases", "such", "as", "above", "and", "handle", "them", "if", "these", "error", "be", "not", "transient", "error", "NUMBER", "Errors", "that", "we", "know", "for", "sure", "that", "will", "reoccur", "on", "every", "fn", "server", "node", "even", "if", "retried", "on", "a", "every", "node", "of", "that", "cluster", "NUMBER", "fn", "api", "test", "be", "decomissioned", "closing", "NUMBER", "In", "LB", "and", "runner", "gRPC", "communication", "remove", "ACK", "sending", "from", "pure", "runners", "NUMBER", "Now", "upon", "TryCall", "pure", "runners", "can", "quickly", "call", "Agent", "Submit", "NUMBER", "This", "be", "good", "since", "at", "this", "stage", "pure", "runner", "already", "has", "all", "relevant", "data", "to", "initiate", "the", "call", "NUMBER", "Removed", "pure", "runner", "capacity", "track", "code", "NUMBER", "This", "did", "not", "play", "well", "with", "internal", "agent", "resource", "tracker", "NUMBER", "Too", "busy", "responses", "from", "Agent", "Submit", "can", "now", "be", "retried", "NUMBER", "Agent", "be", "set", "to", "non", "blocking", "mode", "in", "pure", "runner", "this", "allows", "for", "a", "faster", "Too", "busy", "response", "from", "Agent", "Submit", "if", "the", "request", "gets", "blocked", "on", "CPU", "Memory", "resources", "NUMBER", "LB", "immediately", "streams", "http", "body", "to", "runners", "NUMBER", "This", "be", "optimistic", "common", "case", "NUMBER", "But", "streaming", "be", "interrupted", "if", "NACK", "be", "received", "NUMBER", "For", "retriable", "request", "request", "body", "IO", "be", "handle", "by", "GetBody", "function", "which", "be", "set", "by", "LB", "NUMBER", "This", "allows", "for", "reading", "http", "Body", "safety", "multiple", "times", "in", "case", "of", "retries", "NUMBER", "Idempotenty", "retry", "be", "similar", "to", "previous", "code", "NUMBER", "After", "initial", "success", "in", "Engament", "after", "attempting", "a", "TryCall", "unless", "we", "receive", "NACK", "we", "cannot", "retry", "that", "call", "NUMBER", "ch", "and", "naive", "places", "now", "wraps", "each", "TryExec", "with", "a", "cancellable", "context", "to", "clean", "up", "gRPC", "contexts", "quicker", "NUMBER", "hhexo", "Yes", "runner", "failure", "be", "assumed", "considered", "rare", "NUMBER", "If", "runner", "has", "fail", "another", "expectation", "assumption", "be", "that", "engagement", "will", "also", "likely", "to", "fail", "which", "should", "prevent", "excessive", "loss", "of", "function", "calls", "NUMBER", "Even", "with", "presence", "of", "Ack", "failures", "could", "occur", "and", "function", "can", "fail", "in", "the", "same", "way", "NUMBER", "Ack", "merely", "attempts", "to", "narrow", "this", "window", "where", "new", "code", "has", "a", "somewhat", "large", "window", "for", "these", "losses", "to", "occur", "but", "in", "practice", "I", "think", "the", "difference", "be", "not", "worth", "to", "delay", "execution", "for", "common", "case", "NUMBER", "With", "latest", "commit", "I", "ve", "remove", "ACK", "NACK", "layer", "all", "together", "NUMBER", "Finish", "message", "have", "success", "flag", "and", "details", "field", "to", "embed", "this", "information", "NUMBER", "We", "were", "and", "still", "be", "abusing", "the", "details", "string", "in", "there", "sometimes", "it", "s", "a", "call", "ID", "sometimes", "it", "be", "an", "error", "which", "should", "be", "properly", "expanded", "in", "gRPC", "proto", "file", "but", "I", "m", "hesitating", "modifications", "in", "there", "NUMBER", "We", "can", "follow", "up", "with", "another", "PR", "to", "fine", "tune", "those", "NUMBER", "Errors", "pass", "in", "Finish", "message", "be", "now", "API", "error", "encoded", "with", "errorCode", "string", "in", "Details", "section", "NUMBER", "Only", "an", "API", "Error", "of", "NUMBER", "means", "a", "request", "can", "be", "retried", "NUMBER", "This", "be", "consistent", "with", "current", "and", "previous", "Agent", "behavior", "with", "without", "pure", "runner", "LB", "NUMBER", "There", "be", "various", "bug", "fix", "in", "this", "PR", "which", "be", "NUMBER", "Closed", "Runner", "error", "should", "be", "retriable", "NUMBER", "There", "may", "be", "runners", "that", "be", "not", "Closed", "which", "may", "take", "this", "request", "NUMBER", "NUMBER", "HTTP", "Meta", "Message", "StatusCodes", "be", "now", "be", "honored", "with", "WriteHeader", "NUMBER", "NUMBER", "Pure", "runner", "Data", "message", "can", "now", "handle", "large", "responses", "which", "exceed", "gRPC", "default", "of", "NUMBER", "MB", "NUMBER", "NUMBER", "Short", "write", "error", "be", "now", "detected", "logged", "from", "LB", "to", "http", "client", "NUMBER", "If", "short", "write", "be", "detected", "LB", "will", "ignore", "subsequent", "data", "message", "from", "pure", "runner", "NUMBER", "NUMBER", "fnserver", "dind", "requires", "privileged", "mode", "NUMBER", "mysql", "should", "be", "in", "sync", "with", "test", "NUMBER", "sh", "api_test", "NUMBER", "sh", "mysql", "version", "to", "avoid", "error", "such", "as", "msg", "couldn", "t", "ping", "db", "error", "this", "authentication", "plugin", "be", "not", "support", "url", "root", "root", "tcp", "db", "NUMBER", "funcs", "TODO", "fix", "investigate", "why", "fnserver", "fail", "on", "latest", "mysql", "NUMBER", "denismakogon", "could", "you", "help", "me", "test", "this", "with", "chained", "fn", "test", "case", "NUMBER", "I", "think", "the", "above", "may", "fix", "your", "issue", "NUMBER", "denismakogon", "ping", "NUMBER", "I", "ve", "get", "a", "to", "do", "item", "to", "add", "a", "new", "env", "var", "for", "this", "NUMBER", "Where", "the", "env", "var", "will", "be", "a", "list", "of", "custom", "networks", "and", "Fn", "agent", "will", "by", "default", "round", "robin", "container", "on", "these", "networks", "NUMBER", "I", "may", "have", "miss", "couple", "details", "here", "but", "in", "essence", "I", "meant", "export", "SOME_ENV", "net", "NUMBER", "net", "NUMBER", "net", "NUMBER", "net", "NUMBER", "NUMBER", "fnserver", "will", "cause", "fn", "agent", "to", "run", "the", "function", "in", "net", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "round", "robin", "or", "any", "other", "suitable", "policy", "NUMBER", "Does", "this", "fix", "this", "issue", "Hmm", "ok", "the", "use", "case", "I", "m", "thinking", "about", "be", "due", "to", "NUMBER", "container", "limit", "on", "each", "docker", "bridge", "NUMBER", "For", "this", "reason", "we", "allow", "a", "user", "to", "create", "multiple", "networks", "and", "the", "agent", "can", "round", "robin", "or", "fill", "first", "then", "move", "to", "next", "these", "networks", "NUMBER", "In", "this", "model", "docker", "bridges", "I", "don", "t", "think", "a", "container", "function", "can", "be", "attached", "to", "more", "than", "one", "NUMBER", "So", "if", "one", "network", "be", "mandatory", "and", "you", "will", "not", "spawn", "more", "than", "NUMBER", "function", "at", "a", "time", "then", "you", "simply", "specify", "export", "SOME_ENV", "mgmt_network", "NUMBER", "fnserver", "NUMBER", "fix", "this", "NUMBER", "NUMBER", "doc", "update", "No", "worries", "I", "may", "re", "send", "some", "of", "this", "as", "a", "new", "PR", "and", "re", "run", "clean", "them", "up", "until", "they", "be", "reliable", "NUMBER", "And", "preferably", "in", "agent_test", "NUMBER", "go", "if", "I", "can", "NUMBER", "relate", "NUMBER", "add", "nbio", "resource", "mgr", "test", "back", "I", "m", "concerned", "about", "add", "any", "latency", "to", "Prepare", "Run", "NUMBER", "We", "can", "make", "a", "call", "on", "if", "we", "should", "make", "these", "logs", "lossy", "or", "not", "config", "opt", "but", "I", "think", "the", "connect", "process", "can", "start", "very", "early", "in", "the", "processing", "NUMBER", "We", "can", "hoist", "that", "to", "a", "per", "hotLauncher", "or", "some", "conn", "pool", "orthogonal", "to", "these", "later", "if", "we", "want", "but", "runHot", "seems", "OK", "for", "now", "NUMBER", "And", "we", "already", "ignore", "partial", "writes", "error", "in", "syslog", "Write", "NUMBER", "If", "freezer", "enable", "it", "normally", "should", "be", "then", "the", "connection", "be", "not", "use", "until", "exec", "since", "we", "block", "IO", "until", "exec", "NUMBER", "So", "for", "common", "case", "we", "could", "initiate", "a", "background", "early", "connect", "and", "in", "exec", "either", "block", "the", "IO", "if", "not", "lossy", "or", "do", "non", "blocking", "IO", "lose", "everything", "until", "eventually", "connect", "succeeds", "without", "delaying", "processing", "NUMBER", "If", "not", "lossy", "we", "can", "perhaps", "flag", "syslog", "Write", "failures", "as", "error", "NUMBER", "Just", "thinking", "out", "loud", "here", "NUMBER", "I", "m", "OK", "with", "moving", "on", "with", "the", "current", "code", "and", "if", "Prepare", "Run", "be", "impacted", "we", "can", "revisit", "NUMBER", "hibooboo", "NUMBER", "CLA", "bot", "didn", "t", "run", "here", "seems", "weird", "srpurani", "works", "here", "so", "nbd", "but", "still", "weird", "nvm", "NUMBER", "late", "to", "the", "party", "that", "dude", "NUMBER", "with", "no", "beer", "Here", "s", "the", "thing", "NUMBER", "We", "have", "at", "least", "NUMBER", "write", "on", "Go", "different", "projects", "where", "we", "use", "marshalling", "unmarshalling", "of", "the", "protocol", "s", "frame", "CLI", "Fn", "FDK", "go", "In", "order", "to", "keep", "them", "consistent", "we", "might", "need", "to", "put", "protocols", "into", "a", "sub", "package", "like", "fnext", "or", "sub", "project", "it", "s", "up", "to", "us", "decide", "hopefully", "NUMBER", "rewriting", "to", "say", "same", "ish", "thing", "this", "be", "a", "dupe", "of", "LINK", "btw", "NUMBER", "fn", "server", "and", "CLI", "sender", "play", "a", "different", "role", "than", "the", "fdk", "receiver", "for", "one", "i", "don", "t", "think", "those", "need", "to", "be", "co", "located", "NUMBER", "importing", "fn", "into", "cli", "seems", "like", "it", "won", "t", "go", "well", "this", "will", "be", "hard", "to", "maintain", "NUMBER", "after", "we", "have", "cloud", "events", "i", "don", "t", "think", "there", "s", "really", "a", "lot", "of", "complications", "around", "all", "our", "protocol", "stuff", "NUMBER", "NUMBER", "right", "now", "it", "s", "really", "bad", "since", "we", "have", "NUMBER", "protocols", "basically", "NUMBER", "i", "foresee", "us", "maybe", "importing", "some", "kind", "of", "package", "like", "github", "NUMBER", "com", "fnproject", "cloudevent", "or", "maybe", "official", "one", "some", "day", "but", "that", "won", "t", "handle", "the", "STDIN", "STDOUT", "it", "will", "just", "have", "struct", "definitions", "we", "can", "pretty", "easily", "marshal", "unmarshal", "that", "struct", "to", "from", "stdin", "stdout", "NUMBER", "anyway", "i", "think", "the", "issue", "be", "mostly", "to", "do", "NUMBER", "get", "rid", "of", "all", "formats", "but", "cloud", "event", "then", "all", "we", "re", "left", "with", "be", "the", "cli", "and", "the", "server", "be", "both", "constructing", "docker", "images", "and", "there", "s", "some", "duplicate", "code", "there", "NUMBER", "maybe", "one", "day", "we", "figure", "out", "how", "to", "extract", "that", "but", "i", "m", "not", "sure", "the", "tradeoffs", "be", "worth", "it", "anyway", "managing", "NUMBER", "party", "dep", "be", "no", "fun", "NUMBER", "Sorry", "you", "ve", "posted", "just", "a", "minute", "before", "i", "ve", "posted", "PR", "for", "FDK", "LINK", "go", "pull", "NUMBER", "fn", "NUMBER", "db", "and", "fn", "NUMBER", "mq", "be", "the", "default", "options", "for", "Fn", "DB", "and", "Fn", "MQ", "NUMBER", "Database", "state", "change", "each", "time", "you", "call", "a", "function", "NUMBER", "So", "you", "better", "run", "Fn", "on", "top", "of", "the", "kubernets", "to", "use", "MySQL", "for", "DB", "and", "Redis", "for", "MQ", "NUMBER", "So", "answering", "your", "question", "NUMBER", "If", "you", "want", "to", "keep", "you", "apps", "route", "definitions", "you", "better", "kelp", "Fn", "file", "or", "use", "MySQL", "and", "Redis", "instead", "NUMBER", "some", "yays", "and", "some", "nays", "NUMBER", "thanks", "for", "the", "edits", "there", "was", "some", "discussion", "on", "LINK", "over", "the", "fdk", "formats", "and", "this", "seems", "like", "there", "s", "some", "different", "ideas", "here", "let", "s", "try", "to", "get", "some", "more", "opinions", "on", "this", "one", "the", "right", "direction", "be", "unclear", "NUMBER", "you", "ll", "need", "to", "set", "the", "wider", "HTTP_PROXY", "and", "HTTPS_PROXY", "environment", "variables", "which", "fn", "run", "build", "deploy", "will", "pick", "up", "and", "send", "as", "build", "cmd", "to", "docker", "NUMBER", "hope", "this", "helps", "this", "seems", "like", "it", "partly", "has", "to", "do", "with", "the", "different", "environments", "in", "the", "root", "user", "and", "your", "user", "you", "may", "want", "to", "add", "your", "user", "to", "the", "docker", "group", "to", "get", "this", "work", "with", "your", "user", "NUMBER", "the", "official", "instructions", "be", "LINK", "postinstall", "if", "you", "be", "on", "a", "linux", "system", "NUMBER", "additionally", "you", "ll", "want", "some", "NO_PROXY", "variables", "NUMBER", "for", "example", "mine", "be", "sh", "echo", "NO_PROXY", "localhost", "NUMBER", "NUMBER", "NUMBER", "local", "NUMBER", "home", "github", "NUMBER", "com", "NUMBER", "pool", "NUMBER", "ntp", "NUMBER", "org", "NUMBER", "these", "aren", "t", "guaranteed", "to", "work", "with", "your", "proxy", "YMMV", "on", "top", "of", "that", "your", "HTTPS_PROXY", "may", "or", "may", "not", "support", "HTTPS", "NUMBER", "at", "least", "the", "one", "I", "m", "handcuffed", "to", "do", "not", "allow", "https", "and", "I", "have", "HTTPS_PROXY", "LINK", "and", "it", "works", "NUMBER", "maybe", "one", "of", "those", "will", "get", "us", "over", "the", "hump", "Fn", "do", "not", "support", "python", "NUMBER", "at", "all", "and", "would", "not", "NUMBER", "I", "recommend", "to", "make", "your", "function", "work", "with", "python", "NUMBER", "and", "use", "FDK", "python", "to", "get", "proper", "integration", "NUMBER", "If", "like", "I", "can", "guide", "you", "through", "on", "both", "py", "NUMBER", "migration", "and", "fn", "integration", "NUMBER", "First", "of", "all", "I", "recommend", "to", "go", "through", "development", "docs", "LINK", "in", "order", "to", "get", "familiar", "with", "Fn", "and", "how", "it", "works", "along", "with", "best", "practices", "how", "to", "develop", "function", "etc", "NUMBER", "problem", "Assume", "you", "have", "Fn", "run", "over", "HTTPs", "with", "ngrok", "LINK", "When", "trying", "to", "get", "Fn", "API", "URL", "use", "the", "following", "code", "go", "fctx", "fdk", "NUMBER", "Context", "ctx", "u", "_", "url", "NUMBER", "Parse", "fctx", "NUMBER", "RequestURL", "fnAPIURL", "fctx", "NUMBER", "RequestURL", "len", "fctx", "NUMBER", "RequestURL", "len", "u", "NUMBER", "EscapedPath", "log", "NUMBER", "Println", "Fn", "API", "URL", "fnAPIURL", "URL", "schema", "turns", "from", "HTTPs", "to", "HTTP", "steps", "to", "reproduce", "NUMBER", "Create", "Go", "function", "and", "add", "code", "mention", "above", "NUMBER", "NUMBER", "Call", "a", "function", "use", "Fn", "endpoint", "with", "HTTPs", "NUMBER", "NUMBER", "Check", "call", "logs", "Here", "be", "the", "doc", "NUMBER", "This", "try", "to", "make", "a", "lot", "of", "the", "API", "change", "we", "need", "to", "make", "in", "one", "fell", "swoop", "NUMBER", "Perhaps", "this", "be", "a", "bad", "idea", "we", "can", "likely", "stage", "things", "though", "to", "where", "it", "s", "edible", "it", "s", "nice", "to", "have", "a", "cohesive", "plan", "if", "this", "be", "such", "NUMBER", "there", "was", "an", "attempt", "NUMBER", "There", "be", "a", "number", "of", "open", "question", "at", "the", "top", "of", "the", "swagger", "NUMBER", "yaml", "file", "if", "you", "have", "opinions", "that", "be", "a", "great", "place", "to", "start", "after", "reviewing", "the", "doc", "NUMBER", "additionally", "large", "question", "remain", "around", "the", "log", "call", "API", "and", "this", "be", "a", "good", "chance", "to", "make", "any", "change", "there", "NUMBER", "This", "doc", "also", "doesn", "t", "handle", "explicitly", "creating", "a", "separate", "function", "registry", "API", "we", "can", "cross", "that", "bridge", "when", "we", "get", "to", "it", "and", "just", "have", "a", "uniform", "function", "API", "for", "now", "NUMBER", "The", "doc", "itself", "has", "all", "the", "content", "needed", "for", "context", "won", "t", "add", "much", "more", "here", "NUMBER", "Feedback", "be", "more", "than", "welcome", "from", "anyone", "from", "nits", "to", "redesigning", "entire", "components", "if", "you", "would", "like", "to", "work", "on", "any", "specific", "pieces", "then", "let", "s", "chat", "about", "it", "NUMBER", "we", "should", "maybe", "break", "this", "up", "into", "smaller", "issue", "to", "work", "on", "once", "we", "re", "in", "general", "agreement", "and", "have", "more", "involved", "discussions", "over", "details", "on", "those", "I", "forgot", "to", "validate", "my", "swagger", "file", "but", "I", "don", "t", "think", "it", "really", "holds", "up", "the", "discussion", "i", "was", "gonna", "link", "it", "to", "comb", "through", "a", "rendered", "version", "here", "but", "sorry", "NUMBER", "i", "ll", "try", "to", "fix", "this", "tomorrow", "i", "m", "at", "the", "point", "where", "i", "have", "to", "add", "printlns", "to", "the", "validator", "now", "boo", "NUMBER", "it", "probably", "still", "needs", "some", "further", "massaging", "can", "add", "along", "w", "any", "feedback", "here", "NUMBER", "relevant", "issue", "possibly", "closing", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "re", "zootalures", "thanks", "very", "useful", "feedback", "NUMBER", "Would", "this", "change", "benefit", "from", "some", "black", "box", "narrative", "use", "cases", "that", "walked", "through", "the", "specific", "new", "user", "features", "that", "it", "enable", "yes", "good", "idea", "i", "think", "we", "can", "write", "up", "something", "that", "briefly", "summarizes", "this", "NUMBER", "mostly", "we", "should", "focus", "on", "end", "user", "documentation", "i", "hope", "instead", "of", "focusing", "on", "the", "context", "of", "the", "delta", "as", "the", "former", "will", "be", "more", "valuable", "long", "term", "NUMBER", "Also", "on", "the", "function", "registry", "stuff", "would", "be", "good", "to", "have", "some", "lucidity", "by", "example", "on", "the", "good", "stuff", "that", "this", "enable", "i", "NUMBER", "e", "NUMBER", "sharing", "function", "between", "platforms", "function", "hub", "pretty", "much", "function", "registry", "kind", "of", "a", "non", "goal", "here", "i", "can", "t", "honestly", "say", "i", "thought", "very", "deeply", "about", "how", "the", "exact", "interface", "should", "look", "nor", "if", "we", "re", "perfectly", "set", "up", "for", "this", "even", "with", "what", "we", "have", "but", "it", "s", "something", "that", "should", "be", "near", "term", "possible", "if", "we", "can", "land", "some", "of", "the", "stuff", "propose", "here", "possibly", "with", "some", "minor", "tweak", "NUMBER", "For", "queue", "triggers", "can", "you", "sketch", "out", "how", "this", "could", "might", "work", "with", "a", "Kafka", "Kinesis", "queue", "how", "do", "I", "authenticate", "how", "to", "I", "connect", "etc", "add", "to", "doc", "it", "s", "kinda", "hand", "wavy", "especially", "wrt", "auth", "because", "i", "m", "not", "sure", "it", "s", "something", "we", "should", "dictate", "but", "e", "NUMBER", "g", "NUMBER", "you", "would", "start", "up", "your", "queue", "processor", "with", "a", "token", "or", "permission", "that", "allows", "it", "to", "invoke", "triggers", "for", "a", "given", "app", "namespace", "function", "the", "rest", "we", "re", "not", "dictating", "anything", "other", "than", "a", "trigger", "exist", "for", "that", "trigger", "type", "name", "and", "a", "cloud", "event", "containing", "that", "info", "NUMBER", "For", "namespaces", "be", "the", "intention", "to", "enable", "real", "multi", "tenancy", "here", "How", "will", "access", "control", "work", "in", "that", "case", "how", "do", "I", "integrate", "mix", "this", "with", "an", "exist", "access", "control", "system", "NUMBER", "we", "could", "try", "to", "sketch", "out", "an", "example", "yeah", "the", "goal", "be", "opaquely", "another", "level", "of", "compartmentalization", "which", "vaguely", "maps", "onto", "something", "that", "could", "be", "use", "to", "do", "multi", "tenancy", "NUMBER", "we", "re", "more", "giving", "people", "a", "hammer", "here", "than", "telling", "them", "how", "to", "hang", "their", "pictures", "NUMBER", "obviously", "you", "get", "some", "sugar", "in", "that", "all", "our", "queries", "and", "such", "internally", "use", "namespaces", "so", "users", "wouldn", "t", "have", "to", "go", "rewrite", "all", "the", "queries", "to", "add", "their", "ideas", "around", "tenancy", "via", "extensions", "hopefully", "NUMBER", "do", "we", "just", "need", "to", "make", "a", "note", "that", "this", "could", "be", "use", "for", "multi", "tenancy", "i", "NUMBER", "e", "NUMBER", "the", "intent", "be", "not", "clear", "You", "re", "specify", "components", "here", "trigger", "manager", "seems", "a", "bit", "fluffy", "could", "you", "clarify", "e", "NUMBER", "g", "NUMBER", "for", "a", "kafka", "queue", "above", "how", "do", "this", "scale", "up", "add", "some", "bits", "NUMBER", "components", "be", "not", "necessarily", "separate", "processes", "be", "maybe", "what", "s", "not", "clear", "NUMBER", "we", "would", "effectively", "have", "this", "in", "some", "capacity", "we", "re", "just", "giving", "it", "a", "name", "badge", "and", "abstracting", "it", "a", "bit", "see", "commit", "for", "details", "NUMBER", "looking", "forward", "it", "seems", "odd", "to", "decouple", "the", "function", "and", "trigger", "resources", "in", "the", "API", "but", "then", "still", "leave", "them", "coupled", "in", "func", "NUMBER", "yaml", "if", "a", "function", "be", "truely", "an", "independent", "thing", "just", "a", "registered", "image", "and", "some", "config", "could", "these", "be", "separated", "all", "the", "way", "up", "the", "stack", "we", "could", "do", "something", "completely", "different", "in", "the", "CLI", "be", "open", "to", "ideas", "NUMBER", "decided", "to", "roll", "with", "trying", "to", "re", "use", "func", "NUMBER", "yaml", "and", "make", "it", "flexible", "just", "to", "have", "less", "commands", "and", "file", "for", "end", "users", "to", "have", "to", "manage", "NUMBER", "it", "also", "makes", "sense", "to", "me", "to", "force", "something", "like", "an", "app", "NUMBER", "yaml", "to", "do", "all", "your", "trigger", "function", "mappings", "in", "and", "leave", "the", "func", "NUMBER", "yaml", "just", "to", "have", "function", "configuration", "NUMBER", "or", "other_better_ideas", "Are", "function", "immutable", "eh", "i", "mean", "we", "re", "fighting", "with", "docker", "hub", "on", "that", "i", "don", "t", "think", "we", "can", "say", "that", "easily", "and", "i", "m", "not", "sure", "it", "s", "something", "worth", "gating", "on", "fix", "here", "to", "e", "NUMBER", "g", "NUMBER", "have", "image", "checksums", "in", "func", "trigger", "definitions", "NUMBER", "the", "intent", "be", "to", "enforce", "function", "and", "image", "version", "i", "think", "but", "it", "s", "not", "necessarily", "immutability", "NUMBER", "be", "this", "something", "worth", "pursuing", "at", "this", "point", "this", "has", "long", "be", "an", "issue", "of", "hey", "i", "update", "my", "image", "under", "NUMBER", "but", "the", "server", "be", "still", "run", "the", "old", "NUMBER", "be", "there", "an", "easy", "win", "here", "other", "than", "telling", "users", "to", "do", "version", "e", "NUMBER", "g", "NUMBER", "we", "could", "auto", "bump", "every", "PUT", "to", "a", "function", "and", "not", "allow", "this", "kind", "of", "behavior", "at", "all", "for", "a", "function", "but", "they", "could", "pull", "the", "rug", "on", "the", "image", "still", "thanks", "again", "hopefully", "that", "clarifies", "some", "stuff", "NUMBER", "thanks", "for", "open", "this", "NUMBER", "it", "would", "be", "nice", "to", "avoid", "having", "to", "carry", "around", "a", "flag", "in", "each", "call", "object", "if", "we", "can", "manage", "it", "link", "this", "to", "previous", "relate", "issue", "for", "reasons", "LINK", "NUMBER", "since", "we", "re", "moving", "to", "cloud", "events", "the", "spec", "there", "i", "m", "risky", "link", "to", "master", "it", "gets", "update", "often", "outlines", "a", "base", "NUMBER", "example", "LINK", "format", "NUMBER", "md", "NUMBER", "examples", "further", "LINK", "format", "NUMBER", "md", "NUMBER", "mapping", "object", "typed", "attributes", "which", "do", "not", "contain", "a", "bool", "in", "the", "event", "and", "just", "uses", "a", "contentType", "that", "implies", "the", "data", "section", "be", "binary", "for", "which", "I", "guess", "the", "end", "function", "would", "have", "to", "determine", "this", "additionally", "they", "define", "an", "http", "transport", "spec", "LINK", "transport", "binding", "NUMBER", "md", "which", "allows", "putting", "all", "json", "field", "from", "from", "the", "cloud", "event", "into", "headers", "and", "letting", "the", "data", "section", "remain", "binary", "no", "encoding", "NUMBER", "while", "it", "would", "not", "be", "fun", "to", "have", "to", "support", "both", "of", "these", "options", "and", "i", "m", "not", "perfectly", "keen", "on", "this", "it", "s", "no", "less", "an", "option", "for", "us", "to", "use", "that", "format", "to", "do", "binary", "interaction", "with", "the", "fn", "server", "as", "well", "as", "the", "container", "NUMBER", "and", "we", "may", "have", "to", "support", "that", "format", "for", "fn", "server", "anyway", "NUMBER", "problem", "According", "to", "our", "operation", "docs", "LINK", "_registries", "NUMBER", "md", "and", "docker", "registry", "auth", "dock", "LINK", "privileged", "user", "requirement", "the", "only", "way", "to", "make", "docker", "client", "be", "authorized", "be", "to", "create", "a", "config", "file", "within", "the", "special", "path", "know", "as", "DOCKER_CONFIG", "no", "matter", "would", "that", "be", "a", "pointer", "to", "the", "keychain", "or", "explicit", "user", "password", "definition", "NUMBER", "So", "there", "be", "no", "explanation", "doc", "how", "to", "set", "up", "the", "vanilla", "upstream", "Fn", "how", "to", "enable", "the", "authorization", "for", "the", "private", "registries", "without", "hacking", "into", "the", "operate", "system", "of", "the", "Fn", "docker", "image", "i", "NUMBER", "e", "NUMBER", "mounting", "the", "volume", "with", "docker", "config", "or", "rebuilding", "the", "Fn", "from", "source", "with", "config", "include", "NUMBER", "The", "question", "appeared", "on", "public", "slack", "LINK", "how", "to", "set", "up", "the", "Fn", "to", "talk", "to", "the", "registry", "on", "GCP", "NUMBER", "possible", "way", "s", "to", "solve", "The", "simplest", "short", "term", "solution", "be", "to", "write", "a", "doc", "that", "explains", "how", "to", "make", "it", "work", "on", "k", "NUMBER", "ts", "cluster", "with", "an", "auth", "protected", "registry", "i", "NUMBER", "e", "NUMBER", "how", "to", "create", "a", "volume", "with", "the", "config", "file", "how", "to", "build", "Fn", "from", "source", "with", "docker", "config", "NUMBER", "alternative", "we", "work", "towards", "context", "management", "and", "splitting", "function", "from", "triggers", "can", "t", "we", "allow", "each", "function", "to", "define", "the", "registry", "auth", "as", "well", "just", "to", "move", "away", "from", "a", "need", "to", "work", "with", "volumes", "or", "rebuilding", "the", "Fn", "image", "NUMBER", "reclaro", "there", "s", "NUMBER", "images", "fn", "test", "utils", "already", "so", "I", "think", "you", "can", "just", "use", "that", "if", "that", "s", "easier", "NUMBER", "There", "s", "some", "examples", "on", "how", "to", "use", "it", "in", "runner_tests", "NUMBER", "go", "NUMBER", "Makefile", "already", "build", "prepares", "fn", "test", "utils", "so", "it", "ll", "be", "faster", "and", "you", "don", "t", "need", "to", "do", "anything", "to", "build", "pull", "it", "NUMBER", "See", "LINK", "test", "utils", "seems", "like", "build", "be", "broked", "FAIL", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "protocol", "in", "CI", "didn", "t", "see", "the", "actual", "error", "but", "must", "be", "something", "NUMBER", "LGTM", "w", "some", "tidying", "NUMBER", "mostly", "glossing", "over", "the", "fn", "generates", "the", "cloud", "event", "stuff", "since", "that", "s", "gonna", "get", "taken", "out", "to", "pasture", "NUMBER", "would", "be", "nice", "to", "clean", "up", "the", "printlns", "that", "be", "commented", "not", "and", "the", "trace", "names", "need", "a", "quick", "sed", "the", "rest", "be", "probably", "mostly", "me", "trying", "to", "drink", "enough", "coffee", "before", "noon", "NUMBER", "i", "think", "we", "can", "punt", "on", "implement", "the", "HTTP", "binary", "spec", "it", "s", "WIP", "anyway", "we", "can", "wait", "for", "it", "to", "finalize", "NUMBER", "but", "i", "do", "think", "we", "should", "use", "the", "recommended", "header", "edit", "spec", "knowledge", "update", "Ehh", "not", "sure", "why", "this", "build", "be", "fail", "rebase", "on", "master", "NUMBER", "locked", "mysql", "to", "mysql", "NUMBER", "x", "latest", "be", "now", "NUMBER", "this", "LGTM", "potentially", "if", "we", "be", "answering", "LINK", "discussion_r", "NUMBER", "we", "should", "use", "the", "standard", "header", "to", "ship", "in", "cloud", "events", "not", "our", "own", "if", "this", "was", "defined", "in", "the", "spec", "NUMBER", "that", "s", "my", "interpretation", "of", "it", "could", "be", "off", "base", "NUMBER", "edit", "specifically", "this", "line", "The", "receiver", "of", "the", "event", "can", "distinguish", "between", "the", "two", "modes", "by", "inspecting", "the", "Content", "Type", "header", "value", "NUMBER", "If", "the", "value", "be", "prefixed", "with", "the", "CloudEvents", "media", "type", "application", "cloudevents", "indicating", "the", "use", "of", "a", "know", "event", "format", "the", "receiver", "uses", "structured", "mode", "otherwise", "it", "defaults", "to", "binary", "mode", "NUMBER", "All", "that", "stuff", "looks", "so", "much", "like", "all", "the", "crap", "we", "ve", "be", "dealing", "with", "use", "different", "formats", "NUMBER", "The", "part", "I", "find", "strange", "though", "be", "that", "if", "you", "have", "to", "set", "all", "the", "headers", "anyways", "why", "not", "just", "pass", "the", "event", "in", "the", "JSON", "event", "format", "I", "d", "guess", "so", "that", "you", "don", "t", "have", "to", "eat", "base", "NUMBER", "decode", "time", "byte", "bloat", "NUMBER", "I", "agree", "it", "smells", "exactly", "like", "the", "last", "year", "of", "us", "fighting", "all", "the", "headers", "and", "such", "not", "sure", "how", "best", "to", "give", "them", "the", "last", "year", "of", "dealing", "with", "that", "as", "contextual", "feedback", "before", "NUMBER", "lands", "NUMBER", "For", "us", "it", "might", "mean", "we", "would", "need", "to", "handle", "both", "structured", "and", "binary", "in", "front", "end", "container", "i", "o", "all", "fdks", "presumably", "yikes", "i", "guess", "this", "be", "mitigated", "to", "front", "end", "if", "we", "translate", "everything", "to", "structured", "there", "but", "it", "would", "mean", "base", "NUMBER", "or", "similar", "NUMBER", "I", "m", "assuming", "they", "ll", "add", "a", "protobuf", "transport", "spec", "eventually", "as", "well", "so", "we", "will", "soon", "enough", "likely", "get", "into", "this", "but", "I", "guess", "we", "can", "do", "all", "the", "translation", "to", "structured", "json", "format", "from", "the", "ingestion", "point", "and", "only", "worry", "about", "that", "format", "for", "function", "granted", "base", "NUMBER", "thing", "be", "still", "a", "nit", "NUMBER", "anyway", "NUMBER", "yea", "would", "be", "nice", "to", "contribute", "to", "the", "discussion", "since", "this", "has", "ailed", "us", "NUMBER", "problem", "At", "this", "moment", "there", "be", "only", "a", "few", "available", "parameters", "we", "can", "use", "to", "filter", "calls", "app", "path", "timestamp", "from", "to", "time", "I", "can", "see", "that", "there", "s", "a", "need", "to", "get", "more", "filtering", "options", "like", "status", "error", "complete", "match", "or", "partial", "There", "might", "me", "methods", "available", "by", "underlying", "call", "store", "sql", "s", "NUMBER", "however", "may", "not", "be", "available", "NUMBER", "solution", "TBD", "yep", "we", "be", "not", "implement", "async", "for", "hybrid", "for", "the", "immediate", "future", "and", "this", "may", "go", "away", "altogether", "in", "its", "current", "capacity", "but", "tbd", "NUMBER", "sorry", "that", "we", "didn", "t", "clearly", "document", "this", "NUMBER", "we", "re", "work", "to", "make", "a", "good", "sync", "experience", "at", "the", "moment", "NUMBER", "thanks", "for", "trying", "this", "out", "the", "second", "one", "be", "a", "GET", "request", "it", "looks", "from", "the", "response", "loaded", "route", "be", "from", "GET", "if", "you", "want", "to", "create", "against", "the", "url", "that", "contains", "the", "route", "name", "you", "may", "use", "PUT", "instead", "of", "POST", "for", "POST", "you", "would", "need", "to", "add", "a", "field", "for", "path", "hello", "async", "and", "post", "against", "v", "NUMBER", "apps", "myapp", "routes", "going", "to", "close", "re", "open", "if", "this", "be", "broken", "we", "have", "test", "pretty", "sure", "we", "re", "ok", "on", "this", "one", "NUMBER", "thanks", "for", "giving", "this", "a", "whirl", "yep", "try", "use", "PUT", "e", "NUMBER", "g", "NUMBER", "curl", "H", "Content", "Type", "application", "json", "X", "PUT", "d", "route", "image", "xxx", "hello", "go", "NUMBER", "memory", "NUMBER", "cpus", "NUMBER", "type", "async", "LINK", "async", "will", "do", "would", "you", "mind", "pasting", "a", "link", "to", "the", "examples", "you", "were", "following", "want", "to", "make", "sure", "we", "be", "fix", "the", "right", "ones", "they", "re", "a", "bit", "spread", "out", "atm", "NUMBER", "thanks", "gviedma", "or", "hhexo", "merge", "ok", "Tolga", "be", "locked", "out", "of", "GH", "and", "don", "t", "wanna", "stick", "him", "with", "rebase", "build", "be", "broken", "on", "master", "from", "docker", "NUMBER", "to", "do", "release", "branch", "build", "still", "work", "bin", "bash", "eo", "pipefail", "if", "CIRCLE_BRANCH", "master", "z", "CIRCLE_PR_REPONAME", "then", "docker", "login", "u", "DOCKER_USER", "p", "DOCKER_PASS", "git", "config", "global", "user", "NUMBER", "email", "ci", "fnproject", "NUMBER", "com", "git", "config", "global", "user", "NUMBER", "name", "CI", "git", "branch", "set", "upstream", "to", "origin", "CIRCLE_BRANCH", "CIRCLE_BRANCH", "if", "n", "DIND_NEEDED", "then", "make", "release", "dind", "fi", "if", "n", "FN_NEEDED", "then", "make", "release", "fnserver", "fi", "fi", "WARNING", "Using", "password", "via", "the", "CLI", "be", "insecure", "NUMBER", "Use", "password", "stdin", "NUMBER", "WARNING", "Your", "password", "will", "be", "stored", "unencrypted", "in", "home", "circleci", "NUMBER", "docker", "config", "NUMBER", "json", "NUMBER", "Configure", "a", "credential", "helper", "to", "remove", "this", "warning", "NUMBER", "See", "LINK", "credentials", "store", "Are", "you", "sure", "you", "want", "to", "proceed", "y", "N", "User", "refused", "unencrypted", "credentials", "storage", "NUMBER", "Exited", "with", "code", "NUMBER", "this", "might", "be", "quick", "and", "dirty", "fix", "NUMBER", "we", "should", "probably", "upgrade", "to", "an", "encrypted", "password", "i", "guess", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "address", "this", "NUMBER", "Yes", "you", "can", "there", "be", "two", "ways", "to", "do", "so", "NUMBER", "You", "can", "write", "your", "own", "dockerfile", "or", "you", "can", "specify", "another", "build", "image", "in", "func", "NUMBER", "yaml", "see", "build_image", "c", "NUMBER", "you", "can", "get", "the", "call", "ID", "in", "HTTP", "response", "headers", "if", "you", "calling", "the", "sync", "function", "look", "for", "Fn_call_id", "if", "you", "re", "use", "an", "async", "function", "you", "d", "get", "the", "response", "in", "the", "following", "format", "json", "call_id", "NUMBER", "c", "NUMBER", "default", "format", "means", "that", "whatever", "goes", "to", "STDOUT", "you", "ll", "get", "in", "the", "response", "body", "NUMBER", "However", "default", "format", "be", "not", "a", "resource", "efficient", "starts", "a", "container", "per", "request", "NUMBER", "I", "recommend", "sticking", "with", "JSON", "or", "HTTP", "format", "NUMBER", "There", "has", "to", "an", "example", "how", "to", "make", "your", "function", "write", "in", "Node", "work", "with", "those", "formats", "NUMBER", "Despite", "that", "i", "strongly", "recommend", "to", "use", "Node", "FDK", "LINK", "node", "for", "any", "node", "function", "NUMBER", "that", "s", "right", "because", "you", "can", "t", "use", "STDOUT", "for", "write", "your", "logs", "only", "STDERR", "whatever", "you", "d", "write", "to", "the", "STOUT", "while", "use", "JSON", "HTTP", "protocol", "will", "break", "them", "apart", "NUMBER", "If", "your", "function", "be", "sync", "NUMBER", "seconds", "be", "the", "max", "time", "you", "can", "get", "from", "Fn", "NUMBER", "Can", "function", "return", "a", "response", "and", "continue", "to", "run", "asynchronously", "No", "once", "the", "function", "returns", "the", "response", "it", "freezes", "until", "next", "event", "NUMBER", "Does", "the", "timeout", "kill", "the", "run", "function", "It", "doesn", "t", "kill", "but", "pauses", "the", "container", "so", "your", "function", "freezes", "NUMBER", "that", "be", "not", "guaranteed", "it", "be", "not", "recommended", "to", "start", "background", "or", "threaded", "process", "without", "any", "proper", "synchronisation", "just", "before", "sending", "the", "response", "NUMBER", "Your", "function", "will", "freeze", "only", "in", "case", "if", "you", "ve", "sent", "the", "response", "not", "before", "that", "NUMBER", "If", "your", "function", "times", "out", "it", "dies", "NUMBER", "if", "you", "change", "your", "function", "to", "be", "async", "it", "will", "run", "in", "detached", "mode", "you", "would", "not", "get", "the", "response", "from", "that", "however", "the", "timeout", "will", "increase", "significantly", "up", "to", "NUMBER", "seconds", "NUMBER", "At", "this", "particular", "moment", "no", "NUMBER", "Only", "when", "you", "function", "complete", "it", "s", "execution", "NUMBER", "As", "long", "as", "you", "do", "correct", "IO", "pipe", "binding", "and", "reading", "from", "exec", "your", "program", "will", "remain", "safe", "and", "would", "not", "break", "protocol", "framing", "NUMBER", "If", "I", "pause", "for", "a", "while", "and", "reload", "the", "page", "another", "instance", "shows", "up", "in", "docker", "ps", "This", "be", "how", "hot", "format", "works", "in", "Fn", "function", "dies", "as", "soon", "as", "it", "will", "reach", "out", "the", "idle", "timeout", "one", "of", "the", "key", "concepts", "of", "the", "serverless", "never", "pay", "for", "idle", "NUMBER", "I", "had", "to", "stringify", "the", "results", "for", "the", "hello", "world", "example", "or", "it", "just", "displays", "You", "should", "do", "that", "by", "yourself", "because", "FDK", "node", "doesn", "t", "know", "how", "to", "serialize", "your", "object", "NUMBER", "If", "you", "want", "to", "extend", "the", "idle", "timeout", "take", "a", "look", "at", "fn", "routs", "update", "h", "NUMBER", "However", "AFAIK", "you", "can", "t", "extend", "the", "idle", "timeout", "to", "more", "than", "NUMBER", "hour", "NUMBER", "The", "way", "we", "did", "the", "hot", "function", "Fn", "will", "keep", "spinning", "up", "the", "function", "within", "a", "single", "machine", "as", "long", "as", "there", "be", "a", "workload", "and", "function", "get", "delayed", "for", "NUMBER", "ms", "NUMBER", "So", "if", "you", "submitted", "a", "lot", "of", "request", "you", "would", "likely", "get", "more", "then", "NUMBER", "container", "NUMBER", "Basically", "as", "Fn", "user", "you", "wouldn", "t", "know", "about", "the", "number", "of", "container", "that", "be", "up", "and", "processing", "your", "function", "NUMBER", "And", "there", "be", "no", "way", "to", "change", "the", "behaviour", "NUMBER", "But", "there", "be", "two", "ways", "you", "can", "go", "resource", "efficient", "and", "resource", "inefficient", "way", "NUMBER", "Hot", "function", "be", "resource", "efficient", "compute", "units", "if", "you", "gonna", "execute", "NUMBER", "K", "request", "you", "d", "likely", "get", "less", "then", "NUMBER", "K", "container", "but", "it", "depends", "but", "cold", "function", "will", "create", "a", "new", "container", "each", "time", "you", "submit", "the", "request", "if", "you", "gonna", "execute", "NUMBER", "K", "request", "you", "will", "get", "NUMBER", "K", "container", "NUMBER", "So", "here", "s", "what", "Fn", "do", "you", "call", "the", "function", "Fn", "starts", "the", "container", "your", "function", "processes", "the", "request", "sends", "the", "response", "Fn", "pauses", "the", "container", "for", "the", "time", "of", "the", "idle", "timeout", "which", "be", "defaulted", "to", "NUMBER", "seconds", "once", "idle", "timeout", "appeared", "container", "dies", "NUMBER", "Why", "be", "container", "not", "going", "away", "Because", "the", "function", "you", "ve", "created", "from", "the", "fn", "init", "uses", "hot", "format", "by", "default", "not", "the", "cold", "one", "NUMBER", "They", "won", "t", "show", "up", "forever", "in", "the", "paused", "state", "will", "they", "No", "once", "the", "idle", "timeout", "happens", "it", "s", "gone", "NUMBER", "How", "do", "I", "change", "it", "to", "be", "a", "cold", "function", "set", "the", "format", "to", "default", "use", "fn", "routes", "update", "cmd", "NUMBER", "Fn", "will", "reuse", "the", "same", "container", "unless", "the", "request", "get", "delayed", "if", "that", "delayed", "it", "will", "start", "a", "new", "container", "NUMBER", "Can", "you", "elaborate", "what", "you", "mean", "by", "saying", "if", "I", "pause", "a", "while", "and", "reload", "thanks", "close", "NUMBER", "the", "basic", "motivation", "be", "that", "logs", "and", "calls", "will", "be", "stored", "with", "a", "very", "high", "write", "rate", "while", "apps", "and", "routes", "will", "be", "relatively", "infrequently", "update", "it", "follows", "that", "we", "should", "likely", "split", "up", "their", "storage", "location", "to", "back", "them", "with", "appropriate", "storage", "facilities", "NUMBER", "s", "NUMBER", "be", "a", "good", "candidate", "for", "ingesting", "higher", "write", "rate", "data", "than", "a", "sql", "database", "and", "will", "make", "it", "easier", "to", "manage", "that", "data", "set", "NUMBER", "can", "read", "NUMBER", "for", "more", "detailed", "justification", "NUMBER", "summary", "calls", "api", "moved", "from", "datastore", "to", "logstore", "logstore", "use", "in", "front", "end", "to", "serve", "calls", "endpoints", "agent", "now", "throw", "calls", "into", "logstore", "instead", "of", "datastore", "s", "NUMBER", "implementation", "of", "calls", "api", "for", "logstore", "s", "NUMBER", "logs", "key", "change", "nobody", "use", "nbd", "remove", "UpdateCall", "api", "not", "in", "use", "moved", "call", "test", "from", "datastore", "to", "logstore", "test", "mock", "logstore", "now", "test", "prev", "NUMBER", "sqlite", "NUMBER", "only", "logstore", "test", "run", "against", "every", "datastore", "mysql", "pg", "prev", "NUMBER", "only", "sqlite", "NUMBER", "simplify", "NewMock", "in", "test", "commentary", "brunt", "of", "the", "work", "be", "implement", "the", "listing", "of", "calls", "in", "GetCalls", "for", "the", "s", "NUMBER", "logstore", "implementation", "NUMBER", "the", "GetCalls", "API", "requires", "returning", "items", "in", "the", "newest", "to", "oldest", "order", "and", "the", "s", "NUMBER", "api", "lists", "items", "in", "lexicographic", "order", "NUMBER", "An", "easy", "thing", "to", "do", "here", "seem", "to", "be", "to", "reverse", "the", "encoding", "of", "our", "id", "format", "to", "return", "a", "lexicographically", "descending", "order", "since", "ids", "be", "time", "based", "reasonably", "encoded", "to", "be", "lexicographically", "sortable", "and", "de", "duped", "unlike", "created_at", "NUMBER", "This", "seems", "to", "work", "pretty", "well", "it", "s", "not", "perfect", "around", "the", "boundaries", "of", "to_time", "and", "from_time", "and", "a", "tiny", "amount", "of", "results", "may", "be", "omitted", "but", "to", "me", "this", "doesn", "t", "seem", "like", "a", "deal", "breaker", "to", "get", "NUMBER", "results", "instead", "of", "NUMBER", "when", "trying", "to", "get", "calls", "between", "NUMBER", "NUMBER", "pm", "and", "NUMBER", "NUMBER", "pm", "Monday", "NUMBER", "weeks", "ago", "NUMBER", "Of", "course", "without", "to_time", "and", "from_time", "there", "be", "no", "issue", "in", "listing", "results", "NUMBER", "We", "could", "use", "created", "at", "and", "encode", "it", "but", "it", "would", "be", "an", "additional", "marker", "for", "point", "lookup", "GetCall", "since", "we", "would", "have", "to", "search", "for", "a", "created_at", "stamp", "search", "for", "ids", "around", "that", "until", "we", "find", "the", "matching", "one", "just", "to", "do", "a", "point", "lookup", "NUMBER", "So", "the", "tradeoff", "here", "seems", "worth", "it", "NUMBER", "There", "be", "additional", "optimization", "around", "to_time", "to", "seek", "over", "newer", "results", "since", "we", "have", "descending", "order", "NUMBER", "The", "other", "complication", "in", "GetCalls", "be", "returning", "a", "list", "of", "calls", "for", "a", "given", "path", "NUMBER", "Since", "the", "keys", "to", "do", "point", "lookups", "be", "only", "app_id", "call_id", "and", "we", "need", "listing", "across", "an", "app", "as", "well", "this", "leads", "us", "to", "the", "marker", "collection", "which", "be", "sorted", "by", "app_id", "path", "call_id", "to", "allow", "quick", "listing", "by", "path", "NUMBER", "All", "in", "all", "it", "should", "be", "pretty", "straightforward", "to", "follow", "the", "implementation", "and", "I", "tried", "to", "be", "lavish", "with", "the", "comments", "please", "let", "me", "know", "if", "anything", "needs", "further", "clarification", "in", "the", "code", "NUMBER", "The", "implementation", "itself", "has", "some", "glaring", "inefficiencies", "but", "they", "re", "relatively", "minute", "json", "encoding", "be", "kinda", "lazy", "but", "workable", "s", "NUMBER", "doesn", "t", "offer", "batch", "retrieval", "so", "we", "point", "look", "up", "each", "call", "one", "by", "one", "in", "get", "call", "not", "re", "use", "buffers", "but", "the", "seeking", "around", "the", "keys", "should", "all", "be", "relatively", "fast", "not", "too", "worried", "about", "performance", "really", "and", "this", "isn", "t", "a", "hot", "path", "for", "reads", "need", "to", "make", "a", "cut", "point", "and", "turn", "this", "in", "NUMBER", "Interestingly", "in", "test", "minio", "performs", "significantly", "worse", "than", "pg", "for", "storing", "both", "logs", "and", "calls", "or", "just", "logs", "I", "test", "that", "too", "NUMBER", "minio", "seems", "to", "have", "really", "high", "cpu", "consumption", "but", "in", "any", "event", "we", "won", "t", "be", "use", "minio", "we", "ll", "be", "use", "a", "cloud", "object", "store", "that", "implement", "the", "s", "NUMBER", "api", "NUMBER", "Anyway", "mostly", "a", "knock", "on", "use", "minio", "for", "high", "performance", "not", "really", "anything", "to", "do", "with", "this", "just", "thought", "it", "was", "interesting", "NUMBER", "I", "think", "it", "s", "safe", "to", "remove", "UpdateCall", "admittedly", "this", "made", "implement", "the", "s", "NUMBER", "api", "a", "lot", "easier", "NUMBER", "This", "operation", "may", "also", "be", "something", "we", "never", "need", "it", "was", "unuse", "at", "present", "and", "was", "only", "in", "the", "cards", "for", "a", "previous", "hybrid", "implementation", "which", "we", "ve", "now", "abandoned", "NUMBER", "If", "we", "need", "we", "can", "always", "resurrect", "from", "git", "NUMBER", "Also", "not", "worried", "about", "change", "the", "log", "key", "we", "need", "to", "put", "a", "prefix", "on", "this", "thing", "anyway", "but", "I", "don", "t", "think", "anybody", "be", "use", "this", "anyway", "NUMBER", "in", "any", "event", "it", "simply", "means", "old", "logs", "won", "t", "show", "up", "through", "the", "API", "but", "aside", "from", "nobody", "use", "this", "yet", "that", "doesn", "t", "seem", "a", "big", "deal", "breaker", "really", "new", "logs", "will", "appear", "fine", "NUMBER", "future", "TODO", "make", "logstore", "implementation", "optional", "for", "datastore", "check", "in", "front", "end", "at", "runtime", "and", "offer", "a", "nil", "logstore", "that", "error", "appropriately", "TODO", "low", "hanging", "fruit", "optimizations", "of", "json", "encoding", "re", "use", "buffers", "for", "download", "get", "multiple", "calls", "at", "a", "time", "id", "reverse", "encoding", "could", "be", "optimized", "like", "normal", "encoding", "to", "not", "be", "n", "NUMBER", "TODO", "api", "for", "range", "removal", "of", "logs", "and", "calls", "I", "think", "s", "NUMBER", "keys", "have", "max", "of", "NUMBER", "bytes", "length", "NUMBER", "Just", "calling", "it", "out", "here", "NUMBER", "I", "think", "we", "be", "OK", "if", "looking", "at", "sql", "NUMBER", "go", "NUMBER", "bytes", "of", "app_id", "path", "even", "with", "base", "NUMBER", "overhead", "NUMBER", "good", "catch", "i", "ll", "document", "this", "next", "to", "it", "NUMBER", "i", "think", "we", "re", "ok", "too", "but", "wasn", "t", "aware", "of", "that", "limitation", "NUMBER", "update", "thanks", "skinowski", "One", "question", "since", "we", "moved", "to", "from", "SQL", "to", "S", "NUMBER", "for", "logs", "what", "about", "migrations", "for", "further", "change", "to", "s", "NUMBER", "models", "i", "assume", "they", "would", "happen", "soon", "enough", "no", "good", "story", "here", "json", "be", "quite", "a", "bit", "more", "flexible", "than", "sql", "schemas", "at", "least", "in", "this", "regard", "NUMBER", "thanks", "so", "I", "think", "we", "can", "close", "this", "one", "now", "with", "uds", "stuff", "Since", "cloud", "events", "be", "slated", "to", "replace", "all", "this", "should", "we", "stop", "investing", "in", "json", "This", "PR", "modifies", "the", "agent", "NUMBER", "DataAccess", "interface", "to", "provide", "full", "access", "to", "original", "http", "NUMBER", "Request", "when", "resolving", "apps", "and", "routes", "GetApp", "ctx", "context", "NUMBER", "Context", "appName", "string", "models", "NUMBER", "App", "error", "GetRoute", "ctx", "context", "NUMBER", "Context", "appName", "string", "routePath", "string", "models", "NUMBER", "Route", "error", "This", "change", "be", "required", "in", "multi", "tenant", "scenarios", "where", "it", "be", "not", "sufficient", "to", "know", "the", "app", "and", "route", "names", "to", "resolve", "the", "respective", "models", "NUMBER", "By", "provide", "access", "to", "the", "underlying", "http", "NUMBER", "Request", "apps", "routes", "can", "be", "disambiguated", "based", "on", "the", "contents", "of", "the", "HTTP", "request", "including", "HTTP", "headers", "Host", "or", "URL", "path", "NUMBER", "Sometimes", "extensions", "need", "access", "to", "the", "full", "app", "and", "route", "models", "belonging", "to", "a", "request", "NUMBER", "We", "don", "t", "want", "to", "have", "to", "resolve", "these", "multiple", "times", "via", "the", "agent", "NUMBER", "DataAccess", "interface", "since", "that", "could", "result", "in", "inconsistencies", "due", "to", "cache", "evictions", "etc", "NUMBER", "Instead", "this", "PR", "add", "the", "app", "and", "route", "models", "to", "the", "http", "NUMBER", "Request", "context", "at", "the", "place", "where", "they", "be", "resolve", "NUMBER", "Call", "status", "assigning", "criteria", "Problem", "At", "this", "moment", "only", "if", "container", "crushes", "Fn", "marks", "the", "call", "as", "fail", "status", "error", "NUMBER", "So", "developers", "have", "zero", "control", "over", "the", "call", "status", "NUMBER", "Shouldn", "t", "protocol", "be", "capable", "of", "managing", "the", "call", "status", "based", "on", "the", "function", "s", "response", "The", "call", "status", "at", "this", "moment", "means", "that", "Fn", "was", "capable", "to", "ship", "the", "request", "and", "get", "any", "response", "from", "the", "function", "so", "the", "call", "status", "implies", "to", "request", "shipping", "process", "between", "the", "Fn", "and", "the", "function", "but", "not", "the", "actual", "function", "call", "status", "NUMBER", "Example", "For", "instance", "if", "function", "return", "HTTP", "NUMBER", "this", "will", "change", "eventually", "I", "suppose", "a", "call", "would", "be", "marked", "as", "successful", "but", "from", "the", "caller", "point", "of", "view", "it", "doesn", "t", "it", "NUMBER", "closing", "as", "expectations", "too", "lofty", "with", "the", "NUMBER", "We", "be", "miss", "a", "mechanism", "for", "extensions", "to", "perform", "cleanup", "shutdown", "operations", "as", "part", "of", "the", "server", "coordinated", "shutdown", "NUMBER", "The", "server", "should", "go", "through", "all", "plugins", "and", "shut", "them", "down", "prior", "to", "shutting", "itself", "down", "NUMBER", "In", "the", "meantime", "it", "should", "not", "accept", "new", "request", "NUMBER", "I", "propose", "extending", "the", "Extension", "interface", "with", "a", "new", "method", "_Shutdown_", "as", "follows", "type", "Extension", "interface", "Name", "string", "Setup", "s", "ExtServer", "error", "orderly", "shutdown", "of", "plugins", "Shutdown", "s", "ExtServer", "error", "gonna", "merge", "this", "since", "your", "github", "has", "be", "compromised", "if", "i", "regret", "this", "i", "only", "have", "myself", "to", "blame", "closing", "this", "one", "feel", "free", "to", "re", "open", "their", "api", "spec", "for", "events", "looks", "to", "implement", "Cloud", "Events", "LINK", "and", "their", "triggers", "be", "similar", "to", "openwhisk", "NUMBER", "thinking", "that", "s", "the", "direction", "we", "should", "go", "same", "concepts", "as", "openwhisk", "but", "slightly", "different", "implementation", "they", "have", "runtimes", "some", "other", "stuff", "around", "triggers", "be", "weird", "NUMBER", "Triggers", "replace", "our", "current", "routes", "model", "NUMBER", "Each", "trigger", "associates", "itself", "with", "a", "single", "function", "NUMBER", "Support", "http", "out", "of", "the", "box", "new", "types", "of", "triggers", "can", "be", "add", "with", "extensions", "NUMBER", "it", "seems", "common", "to", "have", "a", "mapping", "of", "this", "where", "a", "trigger", "can", "invoke", "multiple", "function", "openwhisk", "kubeless", "at", "least", "NUMBER", "triggers", "seem", "to", "be", "simply", "this", "mapping", "in", "most", "interpretations", "not", "specify", "some", "type", "of", "trigger", "that", "they", "be", "where", "the", "definition", "of", "trigger", "be", "use", "would", "be", "more", "of", "a", "stream", "that", "invokes", "triggers", "which", "simply", "map", "to", "function", "this", "allows", "multiple", "different", "triggers", "to", "invoke", "different", "combinations", "of", "function", "NUMBER", "obviously", "we", "can", "call", "things", "whatever", "we", "want", "but", "we", "need", "to", "define", "terms", "and", "such", "NUMBER", "openwhisk", "docs", "on", "triggers", "be", "LINK", "_triggers_rules", "NUMBER", "html", "openwhisk_triggers", "and", "this", "model", "seems", "useful", "NUMBER", "these", "be", "_not_", "the", "actual", "thing", "that", "invokes", "triggers", "e", "NUMBER", "g", "NUMBER", "an", "http", "router", "as", "implied", "NUMBER", "can", "we", "skip", "version", "for", "NUMBER", "let", "s", "get", "a", "reasonable", "data", "model", "first", "NUMBER", "moving", "routes", "API", "to", "the", "router", "which", "we", "can", "embed", "concept", "of", "app", "or", "grouping", "of", "function", "triggers", "makes", "sense", "but", "still", "seems", "kind", "of", "hazy", "NUMBER", "propose", "has", "triggers", "that", "have", "app", "to", "bundle", "together", "function", "at", "the", "trigger", "level", "and", "implies", "function", "don", "t", "exist", "on", "app", "NUMBER", "at", "this", "point", "app", "be", "basically", "a", "trigger", "specific", "grouping", "and", "kind", "of", "goes", "away", "in", "fn", "NUMBER", "not", "sure", "what", "we", "want", "clarifying", "NUMBER", "What", "do", "you", "mean", "this", "goes", "away", "in", "Fn", "simple", "question", "be", "be", "apps", "a", "grouping", "of", "triggers", "or", "a", "grouping", "of", "function", "or", "both", "treeder", "thanks", "for", "the", "update", "NUMBER", "However", "i", "d", "like", "to", "change", "what", "you", "ve", "propose", "here", "NUMBER", "I", "m", "totally", "good", "with", "a", "function", "model", "and", "its", "version", "but", "i", "do", "see", "triggers", "as", "standalone", "objects", "users", "should", "be", "capable", "to", "list", "triggers", "through", "the", "Fn", "API", "so", "the", "Trigger", "model", "that", "you", "ve", "posted", "do", "seem", "to", "be", "a", "trigger", "to", "function", "mapping", "association", "between", "a", "function", "and", "the", "trigger", "NUMBER", "Moreover", "one", "function", "can", "have", "more", "than", "one", "trigger", "at", "the", "same", "time", "NUMBER", "Also", "isn", "t", "annotations", "be", "for", "the", "metadata", "Why", "should", "the", "trigger", "have", "an", "annotation", "and", "trigger", "config", "at", "the", "same", "time", "If", "we", "re", "talking", "about", "routes", "thing", "so", "that", "should", "go", "to", "the", "annotation", "mapping", "NUMBER", "rdallman", "answering", "your", "question", "an", "application", "in", "the", "context", "of", "its", "current", "definition", "be", "a", "group", "of", "function", "if", "each", "function", "has", "a", "trigger", "then", "we", "d", "consider", "the", "application", "as", "a", "set", "of", "trigger", "to", "function", "mappings", "because", "of", "the", "function", "without", "a", "trigger", "be", "useless", "NUMBER", "i", "m", "finding", "the", "word", "of", "triggers", "confusing", "as", "we", "re", "use", "it", "sorry", "my", "bad", "NUMBER", "we", "have", "triggers", "that", "be", "themselves", "a", "mapping", "to", "a", "function", "to", "invoke", "with", "an", "event", "presumably", "NUMBER", "we", "re", "also", "use", "triggers", "to", "define", "a", "trigger", "http", "timer", "et", "al", "that", "invokes", "a", "trigger", "our", "mapping", "to", "a", "function", "NUMBER", "maybe", "this", "be", "pedantic", "or", "maybe", "i", "m", "misunderstanding", "could", "we", "define", "a", "vocabulary", "here", "that", "doesn", "t", "have", "homonym", "issue", "my", "brain", "hurts", "NUMBER", "i", "also", "went", "to", "public", "school", "NUMBER", "sorry", "NUMBER", "one", "thing", "i", "don", "t", "think", "we", "should", "have", "to", "tie", "triggers", "to", "trigger", "types", "NUMBER", "to", "me", "i", "think", "that", "this", "be", "part", "of", "the", "event", "LINK", "and", "when", "e", "NUMBER", "g", "NUMBER", "an", "http", "router", "invokes", "a", "trigger", "in", "the", "event", "it", "puts", "event", "type", "my", "http", "router", "NUMBER", "this", "makes", "triggers", "more", "flexible", "at", "a", "minimum", "so", "much", "as", "a", "user", "won", "t", "have", "to", "define", "multiple", "identical", "triggers", "for", "each", "uh", "event", "source", "or", "trigger", "type", "as", "you", "say", "NUMBER", "Use", "Case", "In", "order", "to", "support", "multitenancy", "operators", "should", "be", "able", "to", "define", "independent", "pools", "of", "compute", "resources", "available", "to", "function", "in", "the", "platform", "NUMBER", "By", "associating", "a", "function", "with", "a", "particular", "_load", "balancing", "group_", "its", "invocations", "be", "guaranteed", "to", "execute", "on", "the", "compute", "resources", "assigned", "to", "that", "specific", "group", "NUMBER", "A", "pluggable", "_node", "pool", "manager_", "abstraction", "can", "provide", "a", "mechanism", "to", "scale", "compute", "resources", "dynamically", "based", "on", "capacity", "requirements", "advertised", "by", "the", "load", "balancing", "layer", "NUMBER", "Together", "with", "load", "balancer", "group", "it", "allows", "independent", "capacity", "and", "scaling", "policies", "for", "different", "sets", "of", "users", "or", "tenants", "to", "be", "implement", "NUMBER", "Implementation", "This", "add", "two", "implementations", "of", "the", "Fn", "Agent", "one", "a", "pure", "runner", "that", "runs", "only", "what", "it", "be", "asked", "to", "and", "which", "responds", "to", "GRPC", "secondly", "an", "implementation", "that", "delegates", "to", "an", "external", "set", "of", "Runners", "to", "actually", "place", "function", "invocations", "NUMBER", "The", "runner", "be", "intended", "to", "receive", "its", "workload", "through", "a", "push", "only", "mechanism", "NUMBER", "Unlike", "the", "current", "FNLB", "implementation", "calls", "be", "queued", "on", "the", "LB", "side", "as", "late", "as", "possible", "the", "idea", "be", "that", "a", "runner", "should", "accept", "a", "call", "if", "it", "has", "the", "capacity", "to", "handle", "the", "request", "immediately", "to", "hand", "NUMBER", "In", "the", "long", "run", "the", "objective", "be", "that", "this", "LB", "implementation", "will", "replace", "the", "exist", "FNLB", "NUMBER", "Note", "that", "in", "itself", "do", "not", "preclude", "the", "runner", "also", "taking", "on", "an", "async", "workload", "NUMBER", "The", "lb_agent", "introduces", "some", "new", "abstractions", "in", "particular", "the", "NodePool", "which", "plays", "an", "analogous", "role", "to", "the", "DBStore", "in", "FNLB", "the", "Runner", "which", "handles", "the", "go", "no", "go", "and", "interaction", "between", "the", "LB", "and", "the", "pure_runner", "and", "the", "Placer", "which", "encapsulates", "the", "placement", "logic", "NUMBER", "Additionally", "the", "lb_agent", "keep", "track", "of", "the", "capacity", "requirements", "necessary", "to", "satisfy", "the", "outstanding", "request", "it", "has", "NUMBER", "These", "can", "in", "principle", "be", "use", "to", "drive", "runner", "scaling", "decisions", "NUMBER", "There", "be", "ongoing", "work", "in", "this", "area", "NUMBER", "fn", "test", "utils", "covers", "multi", "log", "case", "with", "sleep", "in", "between", "NUMBER", "add", "trailer", "data", "to", "fn", "test", "utils", "going", "to", "be", "useful", "for", "large", "response", "test", "add", "logging", "to", "panic", "error", "cases", "in", "fn", "test", "utils", "NUMBER", "Fixes", "NUMBER", "Another", "reason", "why", "I", "really", "want", "to", "remove", "the", "cold", "impl", "NUMBER", "Hot", "has", "hostWriter", "in", "stderr", "but", "cold", "doesn", "t", "NUMBER", "The", "test", "case", "only", "test", "cold", "NUMBER", "meaning", "old", "one", "NUMBER", "Raising", "it", "to", "NUMBER", "secs", "triggered", "it", "now", "but", "only", "for", "hot", "cold", "pass", "NUMBER", "Arrghh", "NUMBER", "I", "ll", "merge", "this", "and", "we", "can", "work", "on", "the", "runner", "test", "instead", "of", "api", "test", "NUMBER", "Nevermind", "it", "s", "off", "on", "seems", "random", "NUMBER", "I", "ll", "take", "a", "closer", "look", "tomorrow", "at", "this", "NUMBER", "Cold", "request", "container", "now", "become", "execute", "once", "hot", "container", "NUMBER", "There", "s", "no", "visible", "change", "to", "users", "and", "or", "operators", "NUMBER", "rdallman", "plumbed", "up", "the", "slot", "orig", "contexts", "now", "NUMBER", "It", "looks", "a", "bit", "messy", "in", "there", "though", "NUMBER", "Friendly", "ping", "reminder", "NUMBER", "Seems", "like", "NUMBER", "second", "sleep", "makes", "it", "easier", "to", "trigger", "this", "NUMBER", "New", "test", "in", "NUMBER", "with", "NUMBER", "sec", "sleep", "pass", "NUMBER", "Note", "NUMBER", "do", "not", "fix", "the", "issue", "NUMBER", "Dashboards", "could", "also", "be", "referenced", "from", "the", "tutorials", "NUMBER", "We", "might", "want", "to", "keep", "them", "here", "and", "update", "them", "in", "fn", "repo", "since", "they", "be", "tied", "to", "stats", "NUMBER", "And", "I", "want", "to", "have", "much", "fancier", "dashboards", "going", "forward", "NUMBER", "But", "either", "way", "be", "fine", "NUMBER", "we", "should", "likely", "document", "community", "support", "version", "of", "the", "fdk", "in", "docs", "somewhere", "while", "we", "re", "here", "cc", "michael", "w", "williams", "thanks", "for", "the", "great", "work", "on", "this", "NUMBER", "I", "think", "I", "was", "aiming", "a", "little", "lower", "with", "a", "link", "to", "LINK", "dotnet", "somewhere", "around", "here", "LINK", "officially", "support", "fdks", "saying", "community", "support", "FDK", "or", "some", "such", "to", "make", "these", "kinds", "of", "things", "easier", "to", "find", "for", "users", "NUMBER", "open", "question", "what", "to", "do", "about", "CLI", "runtime", "I", "think", "tutorial", "be", "perhaps", "optional", "for", "non", "officially", "support", "fdks", "though", "it", "would", "be", "great", "and", "a", "blog", "tutorial", "would", "be", "over", "the", "moon", "sweet", "thanks", "rdallman", "we", "can", "merge", "this", "I", "ll", "rework", "the", "I", "O", "limit", "change", "on", "top", "of", "this", "NUMBER", "I", "need", "to", "work", "massage", "those", "change", "anyway", "NUMBER", "hhmm", "why", "did", "you", "mean", "we", "miss", "that", "But", "resp", "writer", "thing", "in", "call", "runner", "gets", "all", "protocols", "no", "It", "s", "a", "good", "one", "too", "NUMBER", "Limit", "response", "http", "body", "or", "json", "response", "size", "to", "FN_MAX_RESPONSE_SIZE", "default", "unlimited", "If", "limits", "be", "exceeded", "NUMBER", "be", "returned", "with", "body", "too", "large", "in", "the", "error", "message", "Fixes", "NUMBER", "IMHO", "we", "should", "decouple", "hot", "cold", "from", "formats", "NUMBER", "They", "should", "be", "orthogonal", "NUMBER", "Can", "we", "get", "away", "with", "x", "y", "z", "formats", "use", "always", "hot", "where", "if", "users", "really", "want", "cold", "then", "they", "specify", "some", "flag", "or", "max_requests", "NUMBER", "per", "container", "Somewhat", "relate", "with", "this", "subject", "NUMBER", "But", "regard", "today", "s", "implementation", "where", "we", "have", "cold", "hot", "container", "distinction", "I", "have", "this", "POC", "to", "force", "both", "hot", "cold", "types", "into", "a", "hot", "container", "but", "run", "once", "for", "cold", "case", "NUMBER", "Does", "this", "look", "a", "bit", "naive", "or", "would", "we", "consider", "doing", "something", "like", "this", "below", "If", "yes", "then", "we", "can", "remove", "a", "lot", "of", "code", "NUMBER", "Forcing", "cold", "to", "execute", "as", "hot", "incurs", "somewhat", "more", "processing", "and", "perhaps", "slightly", "slower", "but", "I", "doubt", "cold", "cares", "about", "this", "latency", "NUMBER", "LINK", "clap", "merge", "this", "since", "I", "really", "needed", "it", "prologic", "BoltDB", "try", "to", "open", "NUMBER", "data", "fn", "NUMBER", "mq", "file", "under", "your", "current", "directory", "NUMBER", "eg", "NUMBER", "home", "prologic", "So", "I", "suspect", "it", "s", "unable", "to", "read", "this", "file", "could", "be", "a", "file", "dir", "permission", "issue", "NUMBER", "Also", "what", "be", "your", "os", "platform", "xolve", "yes", "this", "has", "be", "release", "hopefully", "it", "fix", "this", "NUMBER", "thanks", "for", "the", "detailed", "bug", "report", "we", "will", "try", "to", "test", "with", "docker", "machine", "the", "boltdb", "error", "there", "isn", "t", "very", "helpful", "and", "we", "should", "try", "to", "nail", "that", "one", "down", "NUMBER", "Decommission", "stats", "relate", "code", "NUMBER", "This", "could", "be", "a", "bit", "early", "and", "requires", "latest", "fn", "ui", "but", "stats", "be", "no", "longer", "use", "in", "UI", "NUMBER", "So", "with", "this", "we", "be", "always", "buffering", "NUMBER", "no", "streaming", "mode", "which", "be", "fine", "in", "my", "opinion", "NUMBER", "Only", "to", "do", "here", "be", "to", "set", "a", "system", "wide", "limit", "and", "if", "resp", "exceeds", "cut", "off", "response", "get", "rid", "of", "buffered", "data", "clean", "pipes", "then", "return", "an", "error", "eg", "NUMBER", "data", "too", "large", "right", "Simulate", "partial", "output", "or", "invalid", "json", "html", "in", "fn", "test", "utils", "NUMBER", "NUMBER", "oom", "test", "NUMBER", "invalid", "http", "resp", "code", "test", "NUMBER", "check", "for", "error", "string", "contents", "in", "various", "error", "cases", "The", "version", "determination", "code", "seems", "functional", "which", "os", "platform", "be", "you", "on", "If", "you", "manually", "execute", "the", "following", "do", "you", "see", "any", "output", "curl", "silent", "LINK", "Why", "not", "reject", "the", "request", "if", "they", "exceed", "these", "limits", "The", "execution", "be", "misleading", "to", "users", "NUMBER", "We", "execute", "with", "clamped", "limits", "NUMBER", "We", "should", "not", "execute", "at", "all", "and", "return", "NUMBER", "with", "proper", "error", "message", "NUMBER", "Also", "the", "clamped", "values", "completely", "bypass", "resource", "manager", "NUMBER", "Say", "max", "mem", "configured", "be", "NUMBER", "GB", "and", "we", "execute", "a", "function", "req", "with", "NUMBER", "GB", "NUMBER", "With", "this", "PR", "resource", "mgr", "thinks", "it", "be", "run", "a", "NUMBER", "GB", "job", "where", "really", "container", "be", "run", "with", "NUMBER", "GB", "NUMBER", "do", "storage", "option", "size", "produce", "error", "when", "run", "on", "an", "unsupported", "combo", "eg", "NUMBER", "ext", "NUMBER", "overlay", "I", "know", "we", "know", "this", "but", "still", "noting", "it", "here", "Volume", "definitions", "in", "DockerFile", "will", "bypass", "the", "file", "system", "limit", "NUMBER", "I", "m", "specifically", "thinking", "about", "local", "anon", "volumes", "which", "get", "remove", "when", "container", "be", "remove", "NUMBER", "but", "let", "me", "check", "NUMBER", "rdallman", "hhexo", "Just", "double", "checked", "the", "volume", "issue", "Volume", "definitions", "in", "DockerFile", "do", "not", "cause", "mounts", "at", "run", "time", "NUMBER", "hhexo", "if", "we", "assume", "heterogeneous", "runners", "then", "we", "can", "probably", "just", "refuse", "the", "call", "at", "submit", "NUMBER", "But", "if", "we", "decide", "on", "executing", "these", "request", "with", "clamped", "values", "then", "please", "also", "pass", "in", "clamped", "cpu", "mem", "values", "to", "a", "NUMBER", "resources", "NUMBER", "GetResourceToken", "to", "the", "resource", "mgr", "agent", "NUMBER", "go", "which", "should", "keep", "things", "in", "sync", "NUMBER", "If", "a", "user", "be", "ask", "a", "specific", "cpu", "mem", "fs_size", "clamping", "these", "down", "may", "cause", "error", "issue", "during", "the", "execution", "and", "could", "be", "confusing", "to", "troubleshoot", "NUMBER", "eg", "NUMBER", "agent", "NUMBER", "runHot", "logs", "actual", "request", "cpu", "mem", "NUMBER", "How", "would", "a", "user", "or", "operator", "find", "out", "to", "see", "if", "a", "request", "was", "clamped", "down", "On", "the", "other", "hand", "the", "resource", "manager", "behaves", "much", "differently", "NUMBER", "If", "a", "call", "comes", "in", "that", "request", "for", "cpu", "or", "mem", "that", "be", "higher", "than", "total", "cpu", "or", "mem", "on", "the", "server", "we", "reject", "the", "call", "immediately", "as", "a", "request", "that", "can", "never", "be", "executed", "And", "all", "other", "request", "with", "cpu", "mem", "requirements", "has", "to", "wait", "until", "these", "resources", "be", "available", "or", "they", "do", "get", "a", "NUMBER", "If", "we", "can", "t", "honor", "user", "contract", "for", "cpu", "mem", "request", "we", "don", "t", "execute", "them", "NUMBER", "Our", "approach", "could", "be", "OK", "here", "but", "I", "m", "just", "curious", "why", "we", "aren", "t", "just", "refusing", "these", "calls", "that", "be", "over", "limits", "NUMBER", "It", "s", "also", "much", "simpler", "than", "surgically", "injecting", "clamping", "code", "in", "various", "parts", "of", "the", "code", "NUMBER", "NUMBER", "limit", "kernel", "memory", "which", "was", "previously", "unlimited", "use", "same", "limits", "as", "user", "memory", "for", "a", "unified", "approach", "NUMBER", "NUMBER", "disable", "swap", "memory", "for", "container", "rdallman", "According", "to", "kernel", "docs", "kernel", "usage", "be", "report", "under", "user", "accounting", "but", "only", "when", "kernel", "limits", "be", "enable", "so", "this", "means", "setting", "both", "to", "the", "same", "limit", "be", "supposed", "to", "clamp", "all", "usage", "to", "NUMBER", "MB", "following", "your", "example", "NUMBER", "Also", "I", "m", "seeing", "NUMBER", "from", "fn", "server", "for", "responses", "like", "this", "NUMBER", "Somewhere", "we", "must", "be", "replacing", "NUMBER", "with", "NUMBER", "OK", "I", "was", "looking", "at", "a", "different", "code", "path", "sorry", "NUMBER", "docker", "NUMBER", "go", "replaces", "bad", "exit", "code", "with", "NUMBER", "I", "m", "work", "on", "fn", "test", "utils", "to", "do", "stuff", "like", "this", "NUMBER", "PR", "come", "soon", "NUMBER", "For", "now", "you", "can", "trigger", "malformed", "http", "via", "fn", "test", "utils", "request", "responseCode", "NUMBER", "echoContent", "hello", "isDebug", "true", "I", "ve", "get", "a", "NUMBER", "PR", "that", "has", "an", "invalid", "http", "case", "for", "this", "change", "NUMBER", "Closes", "NUMBER", "_This", "change", "will", "require", "FDKs", "which", "handle", "the", "json", "function", "format", "to", "be", "update", "NUMBER", "_", "This", "change", "moves", "some", "Fn", "specific", "field", "around", "in", "the", "JSON", "protocol", "structure", "thus", "improving", "the", "handle", "of", "Fn", "specific", "field", "that", "would", "otherwise", "end", "up", "in", "FN", "prefixed", "headers", "NUMBER", "The", "rationale", "for", "this", "be", "in", "NUMBER", "Fn", "specific", "stuff", "Call", "ID", "request", "url", "etc", "that", "use", "to", "be", "stored", "in", "the", "headers", "of", "the", "models", "NUMBER", "Call", "be", "now", "instead", "add", "by", "the", "protocol", "dispatchers", "at", "the", "right", "time", "so", "that", "the", "model", "reflects", "what", "the", "user", "has", "originally", "provide", "NUMBER", "The", "HTTP", "protocol", "dispatcher", "still", "creates", "Fn", "prefixed", "headers", "because", "that", "s", "the", "only", "way", "it", "can", "pass", "information", "to", "the", "function", "but", "the", "JSON", "protocol", "can", "provide", "the", "information", "directly", "in", "JSON", "field", "NUMBER", "I", "have", "just", "notice", "that", "the", "default", "format", "be", "now", "miss", "call", "ID", "etc", "because", "it", "s", "not", "going", "through", "the", "dispatchers", "and", "it", "was", "relying", "on", "the", "Fn", "specific", "headers", "be", "set", "in", "the", "model", "NUMBER", "I", "ll", "fix", "that", "NUMBER", "As", "for", "the", "others", "there", "s", "no", "change", "in", "HTTP", "and", "the", "advertised", "change", "in", "JSON", "HTTP", "BEFORE", "Request", "foo", "NUMBER", "Req", "POST", "hello", "Headers", "key", "Content", "Type", "val", "application", "x", "www", "form", "urlencoded", "key", "Fn_call_id", "val", "NUMBER", "C", "NUMBER", "ZD", "NUMBER", "Q", "NUMBER", "WG", "NUMBER", "key", "Content", "Length", "val", "NUMBER", "key", "Accept", "val", "key", "Fn_request_url", "val", "LINK", "key", "User", "Agent", "val", "curl", "NUMBER", "key", "Fn_deadline", "val", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "key", "Fn_method", "val", "POST", "Env", "PATH", "usr", "local", "sbin", "usr", "local", "bin", "usr", "sbin", "usr", "bin", "sbin", "bin", "HOSTNAME", "ac", "NUMBER", "d", "NUMBER", "a", "NUMBER", "da", "NUMBER", "FN_PATH", "fndump", "FN_FORMAT", "http", "FN_APP_NAME", "myapp", "FN_MEMORY", "NUMBER", "FN_TYPE", "sync", "HOME", "root", "Body", "blah", "AFTER", "Request", "foo", "NUMBER", "Req", "POST", "hello", "Headers", "key", "Fn_call_id", "val", "NUMBER", "C", "NUMBER", "ZNTC", "NUMBER", "E", "NUMBER", "WG", "NUMBER", "key", "Fn_deadline", "val", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "key", "Fn_method", "val", "POST", "key", "Content", "Type", "val", "application", "x", "www", "form", "urlencoded", "key", "User", "Agent", "val", "curl", "NUMBER", "key", "Content", "Length", "val", "NUMBER", "key", "Accept", "val", "key", "Fn_request_url", "val", "LINK", "Env", "PATH", "usr", "local", "sbin", "usr", "local", "bin", "usr", "sbin", "usr", "bin", "sbin", "bin", "HOSTNAME", "ddomizio", "Mac", "FN_APP_NAME", "myapp", "FN_PATH", "fndump", "FN_MEMORY", "NUMBER", "FN_FORMAT", "http", "FN_TYPE", "sync", "HOME", "root", "Body", "blah", "JSON", "BEFORE", "call_id", "NUMBER", "C", "NUMBER", "ZF", "NUMBER", "XJ", "NUMBER", "WGA", "NUMBER", "content_type", "application", "x", "www", "form", "urlencoded", "body", "blah", "protocol", "type", "sync", "request_url", "LINK", "headers", "Accept", "Content", "Length", "NUMBER", "Content", "Type", "application", "x", "www", "form", "urlencoded", "Fn_call_id", "NUMBER", "C", "NUMBER", "ZF", "NUMBER", "XJ", "NUMBER", "WGA", "NUMBER", "Fn_deadline", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Fn_method", "POST", "Fn_request_url", "LINK", "User", "Agent", "curl", "NUMBER", "AFTER", "call_id", "NUMBER", "C", "NUMBER", "ZQ", "NUMBER", "DTE", "NUMBER", "WGA", "NUMBER", "content_type", "application", "x", "www", "form", "urlencoded", "type", "sync", "deadline", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "body", "blah", "protocol", "type", "http", "method", "POST", "request_url", "LINK", "headers", "Accept", "Content", "Length", "NUMBER", "Content", "Type", "application", "x", "www", "form", "urlencoded", "User", "Agent", "curl", "NUMBER", "I", "fix", "the", "default", "protocol", "too", "but", "there", "be", "a", "change", "there", "the", "deadline", "use", "to", "be", "in", "FN_HEADER_Fn_deadline", "whereas", "now", "it", "be", "in", "the", "FN_DEADLINE", "env", "var", "DEFAULT", "BEFORE", "Env", "foo", "PATH", "usr", "local", "sbin", "usr", "local", "bin", "usr", "sbin", "usr", "bin", "sbin", "bin", "HOSTNAME", "ac", "NUMBER", "d", "NUMBER", "a", "NUMBER", "da", "NUMBER", "FN_TYPE", "sync", "FN_HEADER_Fn_deadline", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "FN_HEADER_Accept", "FN_PATH", "fndump", "FN_APP_NAME", "myapp", "FN_MEMORY", "NUMBER", "FN_CALL_ID", "NUMBER", "C", "NUMBER", "Z", "NUMBER", "PPB", "NUMBER", "WG", "NUMBER", "FN_METHOD", "POST", "FN_HEADER_User", "Agent", "curl", "NUMBER", "FN_HEADER_Content", "Length", "NUMBER", "FN_HEADER_Content", "Type", "application", "x", "www", "form", "urlencoded", "FN_FORMAT", "default", "FN_REQUEST_URL", "LINK", "HOME", "root", "Body", "blah", "AFTER", "Env", "foo", "PATH", "usr", "local", "sbin", "usr", "local", "bin", "usr", "sbin", "usr", "bin", "sbin", "bin", "HOSTNAME", "ddomizio", "Mac", "FN_PATH", "fndump", "FN_DEADLINE", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "FN_HEADER_Content", "Length", "NUMBER", "FN_FORMAT", "default", "FN_APP_NAME", "myapp", "FN_MEMORY", "NUMBER", "FN_TYPE", "sync", "FN_METHOD", "POST", "FN_REQUEST_URL", "LINK", "FN_CALL_ID", "NUMBER", "C", "NUMBER", "RN", "NUMBER", "WE", "NUMBER", "WG", "NUMBER", "FN_HEADER_User", "Agent", "curl", "NUMBER", "FN_HEADER_Accept", "FN_HEADER_Content", "Type", "application", "x", "www", "form", "urlencoded", "HOME", "root", "Body", "blah", "At", "the", "moment", "the", "function", "timeout", "be", "use", "to", "determine", "when", "a", "function", "should", "be", "stopped", "if", "it", "overruns", "NUMBER", "My", "understanding", "be", "that", "the", "semantics", "work", "this", "way", "For", "sync", "the", "clock", "starts", "ticking", "when", "we", "receive", "the", "request", "For", "async", "the", "clock", "starts", "ticking", "when", "we", "dequeue", "the", "call", "to", "run", "The", "clock", "be", "therefore", "ticking", "when", "all", "the", "start", "operations", "be", "performed", "find", "a", "slot", "which", "can", "take", "a", "long", "time", "if", "the", "container", "image", "has", "to", "be", "downloaded", "and", "start", "and", "update", "the", "database", "to", "set", "the", "call", "as", "run", "NUMBER", "The", "function", "developer", "has", "no", "control", "on", "how", "long", "Fn", "takes", "to", "do", "these", "operations", "NUMBER", "Therefore", "they", "have", "to", "allow", "some", "wriggle", "room", "in", "their", "function", "timeout", "NUMBER", "Will", "an", "additional", "second", "be", "enough", "Two", "Five", "If", "the", "function", "developer", "hasn", "t", "allow", "for", "enough", "wriggle", "room", "the", "function", "user", "will", "occasionally", "see", "those", "nasty", "NUMBER", "server", "too", "busy", "error", "which", "can", "currently", "happen", "because", "the", "deadline", "be", "exceeded", "before", "Fn", "has", "even", "managed", "to", "find", "a", "slot", "to", "run", "the", "function", "NUMBER", "I", "personally", "think", "the", "clock", "should", "start", "ticking", "at", "least", "after", "a", "slot", "be", "find", "i", "NUMBER", "e", "NUMBER", "the", "container", "be", "start", "NUMBER", "This", "way", "the", "meaning", "of", "the", "function", "timeout", "set", "by", "the", "developer", "be", "clear", "my", "_code_", "runs", "for", "at", "most", "X", "seconds", "regardless", "of", "how", "long", "Fn", "takes", "NUMBER", "Another", "idea", "be", "to", "perhaps", "make", "this", "second", "timeout", "as", "a", "system", "wide", "config", "eg", "NUMBER", "x", "minutes", "where", "we", "can", "queue", "wait", "for", "docker", "pull", "etc", "NUMBER", "up", "to", "x", "minutes", "but", "still", "give", "the", "function", "the", "timeout", "specified", "in", "the", "route", "config", "NUMBER", "maybe", "we", "can", "come", "up", "with", "a", "scheme", "like", "x", "timeout", "for", "route", "configured", "by", "users", "y", "fn", "server", "system", "side", "queue", "pull", "timeout", "eg", "NUMBER", "NUMBER", "min", "z", "fnlb", "timeout", "eg", "NUMBER", "x", "y", "NUMBER", "secs", "r", "fnlb", "max", "retries", "eg", "NUMBER", "NUMBER", "NUMBER", "fnlb", "with", "a", "retry", "max", "setting", "r", "eg", "NUMBER", "try", "NUMBER", "times", "which", "means", "try", "next", "fn", "server", "in", "the", "ring", "NUMBER", "NUMBER", "fnlb", "with", "a", "sentinel", "max", "timeout", "z", "per", "request", "to", "catch", "dead", "hung", "conns", "NUMBER", "NUMBER", "each", "fn", "server", "with", "system", "wide", "timeout", "y", "for", "queue", "pull", "eg", "NUMBER", "NUMBER", "minute", "NUMBER", "customers", "always", "get", "the", "timeout", "x", "they", "configured", "inside", "their", "container", "With", "this", "it", "would", "mean", "fnlb", "can", "retry", "and", "spend", "up", "to", "z", "r", "minutes", "but", "passively", "based", "on", "fn", "server", "responses", "NUMBER", "Only", "if", "fn", "responds", "with", "NUMBER", "or", "tcp", "connect", "failure", "then", "fnlb", "can", "retry", "next", "otherwise", "we", "risk", "not", "be", "idempotent", "NUMBER", "And", "going", "forward", "we", "can", "try", "to", "make", "fn", "server", "smarter", "and", "fail", "it", "faster", "with", "NUMBER", "to", "let", "fnlb", "try", "next", "quicker", "NUMBER", "For", "async", "we", "can", "dequeue", "and", "use", "perhaps", "the", "same", "y", "timeout", "for", "queue", "pull", "NUMBER", "And", "if", "it", "times", "out", "we", "retry", "or", "not", "commit", "to", "allow", "other", "fn", "nodes", "to", "pick", "Or", "perhaps", "we", "dequeue", "then", "submit", "it", "through", "frontdoor", "as", "sync", "to", "decrease", "error", "rates", "and", "let", "fnlb", "work", "it", "s", "retry", "logic", "on", "the", "fleet", "NUMBER", "fnlb", "can", "auto", "configure", "z", "and", "or", "r", "based", "on", "version", "if", "we", "add", "these", "in", "version", "output", "if", "keep", "fnlb", "and", "fn", "server", "settings", "be", "a", "problem", "NUMBER", "I", "d", "like", "to", "move", "forward", "with", "this", "with", "the", "following", "proposal", "NUMBER", "redefine", "exist", "timeout", "as", "approximate", "amount", "of", "time", "a", "function", "gets", "in", "a", "container", "NUMBER", "introduce", "a", "per", "route", "schedulerTimeout", "as", "the", "amount", "of", "time", "scheduler", "LB", "or", "agent", "can", "spend", "to", "wait", "for", "resources", "to", "place", "retry", "a", "call", "NUMBER", "schedulerTimeout", "if", "not", "specified", "by", "the", "customer", "can", "default", "to", "either", "a", "NUMBER", "of", "timeout", "b", "minimum", "of", "NUMBER", "secs", "timeout", "where", "we", "d", "cap", "max", "schedulerTimeout", "based", "on", "a", "system", "wide", "setting", "eg", "NUMBER", "NUMBER", "secs", "if", "an", "env", "var", "be", "configured", "NUMBER", "In", "this", "model", "customers", "will", "get", "somewhat", "predictable", "timeout", "in", "their", "function", "NUMBER", "And", "they", "should", "expect", "front", "door", "http", "client", "total", "wait", "time", "of", "schedulerTimeout", "timeout", "NUMBER", "cc", "mantree", "cc", "kmjohansen", "After", "offline", "discussions", "today", "we", "be", "proposing", "the", "following", "Retain", "keep", "exist", "per", "route", "setting", "timeout", "as", "be", "however", "it", "s", "definition", "change", "to", "maximum", "amount", "of", "time", "a", "function", "may", "execute", "in", "a", "container", "NUMBER", "Total", "request", "wait", "time", "be", "expected", "to", "be", "implicitly", "handle", "by", "http", "client", "NUMBER", "We", "will", "let", "http", "client", "wait", "as", "long", "as", "it", "can", "tolerate", "NUMBER", "In", "other", "words", "we", "bound", "the", "execution", "time", "inside", "the", "container", "use", "the", "exist", "timeout", "parameter", "but", "let", "the", "http", "client", "wait", "for", "scheduling", "delays", "plus", "execution", "NUMBER", "Scheduling", "can", "be", "delayed", "due", "to", "LB", "retries", "docker", "pull", "docker", "start", "runner", "agent", "slot", "wait", "waiting", "for", "cpu", "memory", "etc", "NUMBER", "Maximum", "time", "for", "the", "client", "to", "wait", "will", "should", "be", "imposed", "by", "LB", "or", "other", "API", "gateway", "production", "service", "settings", "NUMBER", "eg", "NUMBER", "LB", "http", "NUMBER", "server", "imposed", "timeouts", "NUMBER", "PR", "active", "NUMBER", "Closing", "this", "due", "to", "NUMBER", "zootalures", "There", "s", "no", "change", "in", "hot", "container", "semantics", "NUMBER", "The", "port", "discussed", "in", "this", "PR", "please", "correct", "me", "on", "this", "be", "not", "a", "port", "that", "the", "clients", "actually", "talk", "to", "but", "a", "aka", "internal", "port", "that", "fn", "server", "itself", "talks", "to", "NUMBER", "NUMBER", "relate", "if", "run", "with", "dind", "NUMBER", "ping", "rushins", "closing", "this", "please", "re", "open", "if", "you", "see", "any", "more", "issue", "NUMBER", "we", "have", "since", "remove", "logs", "from", "containerd", "s", "responsibility", "list", "LINK", "I", "ve", "seen", "cpu", "usage", "of", "dockerd", "containerd", "drop", "substantially", "since", "then", "NUMBER", "stats", "be", "still", "likely", "responsible", "for", "some", "cpu", "usage", "we", "should", "debug", "it", "the", "way", "we", "have", "things", "set", "up", "polling", "stats", "every", "NUMBER", "s", "won", "t", "be", "very", "useful", "for", "e", "NUMBER", "g", "NUMBER", "a", "function", "that", "takes", "NUMBER", "ms", "to", "run", "only", "NUMBER", "NUMBER", "calls", "has", "docker", "metrics", "on", "it", "NUMBER", "if", "we", "grabbed", "stats", "more", "frequently", "NUMBER", "NUMBER", "times", "it", "would", "only", "increase", "cpu", "usage", "NUMBER", "seems", "weird", "that", "reading", "proc", "file", "takes", "so", "much", "cpu", "anyway", "looked", "around", "docker", "and", "nothing", "stuck", "out", "here", "NUMBER", "api", "to", "get", "container", "stats", "logs", "seems", "weird", "too", "but", "could", "be", "useful", "maybe", "we", "just", "allow", "hooking", "up", "to", "our", "metrics", "system", "some", "note", "for", "debugging", "dockerd", "cpu", "usage", "have", "had", "success", "doing", "the", "following", "to", "get", "pprof", "logs", "they", "aren", "t", "perfectly", "detailed", "but", "the", "gaps", "aren", "t", "so", "hard", "to", "fill", "in", "run", "dockerd", "with", "D", "for", "debug", "mode", "socat", "d", "d", "TCP", "LISTEN", "NUMBER", "fork", "bind", "NUMBER", "UNIX", "var", "run", "docker", "NUMBER", "sock", "run", "rigorous", "test", "and", "concurrently", "do", "next", "step", "go", "tool", "pprof", "raw", "LINK", "after", "go", "tool", "pprof", "http", "NUMBER", "NUMBER", "usr", "bin", "dockerd", "home", "reed", "pprof", "pprof", "NUMBER", "dockerd", "NUMBER", "samples", "NUMBER", "cpu", "NUMBER", "pb", "NUMBER", "gz", "browse", "to", "NUMBER", "and", "view", "NUMBER", "Flame", "graphs", "also", "an", "option", "with", "profile", "file", "in", "hand", "LINK", "torch", "Closing", "this", "as", "many", "relevant", "change", "went", "in", "since", "this", "proposal", "NUMBER", "Related", "NUMBER", "Can", "we", "just", "add", "the", "MTU", "setup", "to", "the", "preentry", "script", "in", "images", "dind", "preentry", "NUMBER", "sh", "instead", "I", "m", "not", "sure", "how", "the", "base", "dind", "works", "either", "probably", "treeder", "knows", "more", "NUMBER", "LGTM", "though", "I", "d", "defer", "to", "treeder", "for", "final", "approval", "NUMBER", "This", "PR", "add", "a", "test", "to", "verify", "we", "can", "easily", "call", "NUMBER", "simple", "hot", "run", "trivial", "hot", "function", "in", "parallel", "NUMBER", "I", "moved", "the", "test", "to", "the", "server", "test", "and", "change", "it", "to", "be", "just", "a", "minimal", "concurrency", "test", "more", "concerned", "with", "functionality", "than", "performance", "now", "NUMBER", "We", "ll", "still", "have", "to", "have", "a", "performance", "test", "somewhere", "at", "some", "point", "NUMBER", "Even", "on", "a", "ridiculously", "underpowered", "machine", "container", "we", "should", "be", "able", "to", "run", "NUMBER", "hot", "function", "in", "parallel", "within", "a", "timeout", "of", "NUMBER", "seconds", "NUMBER", "Question", "what", "be", "the", "exact", "semantics", "of", "the", "deadline", "which", "be", "stored", "as", "execDeadline", "in", "the", "call", "struct", "Is", "it", "supposed", "to", "be", "timeout", "seconds", "from", "the", "moment", "the", "call", "be", "_created_", "or", "timeout", "seconds", "from", "the", "moment", "the", "call", "be", "_started_", "Because", "at", "the", "moment", "it", "be", "neither", "of", "those", "NUMBER", "it", "s", "timeout", "seconds", "from", "the", "moment", "when", "some", "code", "in", "GetCall", "runs", "NUMBER", "If", "the", "semantics", "were", "defined", "in", "one", "of", "the", "two", "ways", "above", "the", "deadline", "could", "be", "derived", "from", "exist", "data", "and", "would", "not", "need", "an", "execDeadline", "field", "in", "the", "call", "struct", "at", "all", "NUMBER", "This", "would", "simplify", "things", "a", "lot", "NUMBER", "Hm", "NUMBER", "but", "the", "deadline", "be", "only", "in", "the", "context", "because", "it", "was", "put", "there", "by", "taking", "it", "from", "execDeadline", "which", "be", "the", "field", "I", "d", "like", "to", "refactor", "out", "NUMBER", "If", "there", "be", "a", "significant", "instant", "of", "time", "when", "whoever", "pick", "it", "up", "goes", "to", "run", "it", "then", "I", "think", "it", "should", "be", "reflected", "in", "the", "model", "NUMBER", "For", "example", "models", "NUMBER", "Call", "could", "have", "a", "ProcessedAt", "field", "in", "addition", "to", "CreatedAt", "and", "friends", "NUMBER", "This", "would", "not", "only", "make", "life", "easier", "with", "deadline", "but", "it", "could", "give", "us", "some", "interesting", "data", "ProcessedAt", "CreatedAt", "gives", "us", "the", "time", "the", "async", "call", "waited", "in", "the", "queue", "NUMBER", "What", "do", "you", "think", "impose", "execDeadline", "in", "the", "context", "deadline", "itself", "so", "it", "may", "move", "but", "still", "needs", "to", "be", "in", "the", "same", "context", "that", "it", "be", "now", "to", "enclose", "submit", "NUMBER", "to", "be", "clear", "if", "we", "simply", "pass", "started_at", "to", "the", "function", "to", "compute", "it", "s", "own", "timeout", "based", "on", "started_at", "NUMBER", "Add", "call_timeout", "then", "this", "will", "be", "different", "than", "the", "actual", "context", "timeout", "that", "we", "be", "imposing", "on", "the", "call", "NUMBER", "IMHO", "then", "the", "solution", "be", "to", "deliberately", "set", "the", "context", "timeout", "imposed", "by", "us", "to", "StartedAt", "Timeout", "and", "we", "remove", "the", "discrepancy", "NUMBER", "That", "would", "involve", "setting", "the", "context", "deadline", "in", "the", "private", "submit", "just", "after", "call", "NUMBER", "Start", "and", "it", "makes", "sense", "to", "me", "because", "it", "feels", "like", "we", "shouldn", "t", "be", "setting", "a", "deadline", "if", "we", "haven", "t", "even", "start", "the", "call", "NUMBER", "Or", "be", "I", "miss", "something", "Is", "the", "time", "taken", "by", "Fn", "operations", "mostly", "get", "a", "slot", "but", "also", "the", "database", "write", "to", "set", "the", "call", "as", "start", "supposed", "to", "be", "counted", "in", "the", "function", "deadline", "Maybe", "that", "s", "why", "we", "get", "all", "those", "NUMBER", "s", "we", "take", "longer", "than", "the", "function", "timeout", "to", "find", "a", "slot", "NUMBER", "this", "be", "a", "bit", "deceiving", "to", "a", "developer", "if", "I", "set", "my", "function", "timeout", "to", "NUMBER", "second", "I", "mean", "that", "I", "want", "my", "code", "to", "run", "for", "at", "most", "NUMBER", "second", "I", "don", "t", "mean", "that", "the", "time", "taken", "by", "Fn", "to", "start", "up", "my", "container", "which", "I", "have", "no", "control", "of", "plus", "run", "my", "code", "be", "NUMBER", "second", "Since", "I", "m", "veering", "off", "the", "original", "purpose", "of", "this", "ticket", "I", "have", "opened", "LINK", "to", "discuss", "the", "deadline", "semantics", "NUMBER", "denismakogon", "do", "you", "think", "we", "need", "to", "really", "remove", "hello", "After", "the", "above", "work", "do", "we", "be", "only", "left", "with", "hello", "in", "api", "test", "only", "and", "fn", "test", "utils", "NUMBER", "Given", "that", "hello", "image", "be", "actually", "small", "NUMBER", "NUMBER", "MB", "I", "d", "say", "we", "keep", "it", "NUMBER", "The", "work", "needed", "to", "remove", "it", "be", "now", "not", "worth", "it", "IMHO", "NUMBER", "Not", "sure", "what", "we", "can", "do", "with", "mysql", "image", "which", "be", "NUMBER", "Mb", "mysql", "docker", "community", "has", "do", "zero", "to", "build", "on", "alpine", "by", "this", "time", "NUMBER", "i", "might", "piddle", "around", "with", "this", "it", "shouldn", "t", "be", "too", "bad", "to", "get", "all", "the", "deps", "into", "alpine", "but", "sometimes", "it", "be", "NUMBER", "i", "might", "piddle", "around", "with", "this", "it", "shouldn", "t", "be", "too", "bad", "to", "get", "all", "the", "deps", "into", "alpine", "but", "sometimes", "it", "be", "NUMBER", "find", "LINK", "library", "mysql", "issue", "NUMBER", "we", "can", "try", "to", "poke", "the", "right", "people", "internally", "to", "get", "this", "support", "it", "appears", "to", "work", "now", "but", "need", "to", "have", "release", "track", "to", "follow", "NUMBER", "Unfortunately", "compile", "takes", "a", "lot", "of", "time", "NUMBER", "go", "install", "before", "run", "NUMBER", "x", "then", "build", "once", "we", "pull", "a", "lot", "of", "images", "it", "s", "not", "immediately", "clear", "what", "s", "slow", "because", "we", "use", "shell", "scripts", "for", "the", "test", "and", "CI", "only", "report", "the", "whole", "script", "as", "a", "stage", "i", "NUMBER", "e", "NUMBER", "break", "these", "up", "to", "debug", "master", "build", "some", "images", "maybe", "that", "be", "slow", "too", "see", "what", "else", "may", "take", "a", "while", "and", "speed", "it", "up", "we", "pass", "go", "vet", "in", "every", "CI", "build", "now", "NUMBER", "just", "turn", "off", "v", "aside", "from", "fix", "the", "buffer", "usage", "would", "be", "great", "to", "know", "NUMBER", "things", "before", "approving", "this", "code", "works", "with", "the", "old", "swagger", "clients", "for", "sure", "pick", "one", "cli", "even", "the", "plaintext", "path", "be", "executed", "with", "the", "newly", "generate", "swagger", "clients", "NUMBER", "if", "not", "can", "we", "fix", "our", "swagger", "doc", "to", "make", "this", "possible", "in", "addition", "to", "that", "an", "api", "test", "that", "covers", "both", "the", "Accept", "application", "json", "and", "Accept", "text", "plain", "and", "makes", "sure", "that", "the", "output", "be", "what", "we", "expect", "would", "be", "great", "also", "wrt", "priorities", "if", "both", "be", "given", "thanks", "NUMBER", "please", "fix", "LINK", "discussion_r", "NUMBER", "for", "plaintext", "the", "code", "should", "read", "go", "io", "NUMBER", "Copy", "c", "NUMBER", "ResponseWriter", "logReader", "with", "no", "buffer", "in", "between", "edit", "you", "may", "also", "need", "to", "set", "the", "content", "type", "explicitly", "since", "go", "detection", "may", "detect", "something", "else", "from", "the", "log", "and", "we", "do", "not", "want", "to", "use", "the", "gin", "String", "method", "as", "we", "don", "t", "want", "to", "turn", "this", "into", "a", "string", "it", "s", "a", "wasteful", "large", "allocation", "NUMBER", "close", "NUMBER", "this", "finishes", "the", "time", "stamp", "saga", "for", "apps", "routes", "with", "created_at", "and", "updated_at", "on", "each", "one", "NUMBER", "should", "be", "pretty", "straight", "forward", "there", "s", "some", "minor", "change", "to", "test", "route", "init", "logic", "NUMBER", "there", "be", "test", "to", "ensure", "that", "these", "things", "be", "get", "set", "NUMBER", "Meh", "i", "ll", "fix", "those", "reflect", "NUMBER", "DeepEquals", "calls", "breaking", "the", "test", "NUMBER", "the", "new", "test", "pass", "at", "least", "One", "thing", "be", "miss", "here", "be", "the", "swagger", "doc", "NUMBER", "blanked", "on", "this", "thanks", "will", "do", "update", "add", "y", "NUMBER", "Equals", "x", "methods", "for", "App", "Route", "Headers", "Config", "uses", "them", "looks", "nice", "imo", "kills", "reflect", "usage", "yay", "add", "swagger", "update", "w", "master", "denismakogon", "each", "hot", "queue", "now", "has", "a", "hot", "launcher", "to", "monitor", "and", "launch", "hot", "container", "initial", "thinking", "be", "that", "this", "should", "be", "on", "demand", "driven", "vs", "NUMBER", "polling", "haven", "t", "gotten", "to", "details", "yet", "fwiw", "we", "had", "a", "structure", "similar", "to", "this", "one", "thread", "managing", "each", "pool", "of", "hot", "container", "per", "route", "doling", "them", "out", "originally", "and", "there", "were", "a", "couple", "pieces", "that", "were", "hard", "to", "manage", "NUMBER", "the", "main", "one", "be", "that", "when", "calls", "be", "come", "in", "we", "tend", "towards", "trying", "to", "ask", "for", "a", "lot", "of", "slots", "but", "generally", "after", "they", "start", "launching", "the", "backlog", "clears", "pretty", "quickly", "and", "we", "don", "t", "want", "to", "launch", "anymore", "and", "mainly", "we", "want", "to", "cancel", "threads", "ask", "for", "slots", "NUMBER", "this", "reduces", "it", "a", "good", "bit", "by", "make", "one", "thread", "per", "route", "but", "I", "m", "not", "sure", "it", "s", "close", "if", "we", "have", "a", "very", "mix", "workload", "of", "routes", "NUMBER", "we", "have", "a", "mix", "of", "a", "lot", "of", "channels", "going", "on", "now", "to", "get", "a", "slot", "out", "trigger", "output", "signaller", "closer", "and", "i", "m", "a", "bit", "concerned", "this", "will", "be", "hard", "to", "evolve", "over", "time", "NUMBER", "i", "m", "optimistic", "we", "can", "reduce", "most", "of", "the", "channels", "to", "just", "the", "slot", "channel", "even", "if", "there", "s", "a", "thread", "sandwiched", "in", "the", "middle", "launching", "hot", "container", "to", "hand", "out", "slots", "to", "that", "channel", "NUMBER", "i", "ll", "drink", "some", "egg", "nog", "and", "give", "this", "another", "go", "later", "with", "some", "bourbon", "in", "the", "system", "NUMBER", "i", "see", "NUMBER", "meh", "GetDatastore", "be", "fine", "NUMBER", "i", "m", "just", "anal", "and", "everything", "else", "be", "export", "on", "Server", "but", "for", "what", "reason", "i", "m", "less", "sure", "of", "since", "we", "provide", "options", "for", "configuring", "it", "and", "it", "probably", "shouldn", "t", "change", "after", "configuration", "and", "as", "long", "as", "we", "provide", "access", "to", "those", "things", "through", "a", "method", "or", "an", "export", "field", "then", "sure", "whatever", "NUMBER", "anyway", "approved", "NUMBER", "i", "can", "make", "vanity", "patches", "with", "some", "tool", "for", "however", "we", "want", "to", "munge", "stuff", "NUMBER", "i", "m", "leaning", "towards", "lower", "casing", "the", "other", "things", "like", "datastore", "be", "now", "can", "do", "that", "separate", "makes", "sense", "to", "me", "NUMBER", "seems", "like", "we", "need", "to", "add", "dep", "for", "fdk", "go", "in", "glide", "for", "the", "build", "to", "work", "with", "this", "NUMBER", "i", "went", "back", "and", "forth", "on", "suggesting", "that", "it", "seems", "nice", "to", "know", "which", "version", "of", "fdk", "go", "was", "use", "to", "build", "the", "tester", "image", "when", "if", "we", "experience", "breakage", "makes", "some", "assumptions", "about", "not", "change", "file", "on", "disk", "since", "users", "build", "the", "image", "and", "not", "CI", "atm", "or", "preferably", "build", "get", "deps", "on", "build", "NUMBER", "i", "don", "t", "think", "it", "s", "a", "client", "side", "fdk", "issue", "NUMBER", "just", "for", "async", "after", "we", "copy", "in", "the", "entire", "request", "into", "a", "buffer", "we", "need", "to", "add", "the", "content", "length", "header", "and", "then", "make", "sure", "those", "headers", "be", "plumbed", "back", "out", "properly", "possibly", "NUMBER", "things", "to", "fix", "NUMBER", "relate", "to", "LINK", "which", "strips", "FN_HEADER", "as", "noted", "one", "issue", "yes", "please", "from", "NUMBER", "but", "not", "that", "issue", "as", "describe", "denismakogon", "yep", "NUMBER", "slated", "LINK", "we", "re", "re", "work", "some", "of", "the", "messaging", "stuff", "at", "the", "moment", "NUMBER", "thanks", "for", "raising", "gonna", "close", "as", "dupe", "since", "cancelling", "encompasses", "this", "and", "a", "few", "other", "things", "NUMBER", "beware", "stats", "api", "be", "in", "flux", "and", "possibly", "probably", "going", "away", "as", "it", "do", "no", "cross", "cluster", "aggregation", "and", "be", "relatively", "useless", "in", "a", "cluster", "setting", "we", "re", "shipping", "these", "metrics", "to", "prom", "as", "well", "and", "that", "s", "the", "likely", "best", "future", "proof", "in", "road", "to", "see", "metrics", "NUMBER", "there", "be", "some", "docs", "here", "to", "get", "grafana", "prometheus", "configured", "LINK", "do", "we", "want", "to", "put", "all", "hybrid", "relate", "docs", "in", "a", "separate", "file", "i", "feel", "like", "this", "will", "only", "create", "confusion", "for", "most", "users", "that", "don", "t", "want", "to", "run", "hybrid", "NUMBER", "thanks", "we", "need", "to", "doc", "hybrid", "stuff", "hhexo", "has", "begun", "I", "believe", "there", "be", "docs", "developers", "hybrid", "NUMBER", "md", "to", "append", "to", "possibly", "i", "foresee", "what", "s", "this", "oh", "ignore", "that", "you", "don", "t", "need", "it", "in", "slack", "x", "NUMBER", "this", "looks", "like", "a", "different", "error", "relate", "to", "tracing", "can", "you", "rename", "issue", "correctly", "please", "and", "re", "open", "be", "you", "fix", "or", "no", "I", "can", "t", "repro", "based", "on", "the", "given", "parameter", "fwiw", "mine", "loops", "NUMBER", "i", "remember", "this", "be", "a", "tracing", "race", "need", "to", "track", "it", "down", "in", "initialization", "the", "name", "of", "this", "issue", "seems", "misleading", "NUMBER", "this", "issue", "seems", "to", "raise", "that", "we", "aren", "t", "deleting", "logs", "NUMBER", "note", "this", "because", "we", "don", "t", "have", "a", "cleaner", "not", "the", "logs", "aren", "t", "going", "anywhere", "it", "seems", "like", "the", "issue", "be", "that", "the", "logs", "went", "somewhere", "and", "stayed", "there", "NUMBER", "i", "ll", "edit", "but", "feel", "free", "to", "re", "edit", "if", "this", "be", "wrong", "NUMBER", "in", "any", "case", "it", "seems", "like", "this", "be", "a", "double", "issue", "with", "NUMBER", "so", "kinda", "leaning", "towards", "closing", "re", "open", "if", "i", "misinterpreted", "I", "see", "one", "potential", "issue", "be", "that", "re", "creation", "of", "new", "app", "route", "gets", "logs", "for", "old", "app", "route", "so", "we", "should", "figure", "out", "a", "way", "to", "mark", "those", "logs", "as", "delete", "because", "relying", "on", "the", "cleaner", "won", "t", "fix", "this", "one", "NUMBER", "i", "think", "deletion", "in", "minio", "will", "be", "very", "expensive", "with", "a", "lot", "of", "logs", "since", "we", "re", "shoving", "all", "in", "one", "bucket", "NUMBER", "maybe", "we", "should", "consider", "make", "per", "app", "and", "per", "route", "buckets", "managability", "of", "this", "be", "more", "challenging", "since", "I", "imagine", "bucket", "deletion", "be", "a", "quick", "operation", "NUMBER", "there", "s", "kind", "of", "no", "way", "we", "can", "do", "this", "atomically", "sadly", "the", "case", "for", "app", "route", "ids", "meh", "NUMBER", "will", "think", "about", "it", "NUMBER", "also", "i", "don", "t", "think", "nested", "buckets", "be", "a", "thing", "route", "bucket", "inside", "of", "app", "bucket", "inside", "of", "one", "much", "larger", "bucket", "i", "mean", "right", "now", "they", "be", "all", "in", "one", "big", "bucket", "and", "searchable", "by", "app", "call", "id", "so", "you", "could", "prefix", "search", "and", "find", "all", "under", "an", "app", "there", "s", "not", "really", "an", "addressability", "issue", "and", "what", "we", "have", "works", "fine", "except", "in", "this", "delete", "then", "recreate", "case", "NUMBER", "the", "app", "bucket", "gives", "us", "no", "sugar", "other", "than", "it", "will", "be", "fast", "to", "delete", "a", "bucket", "but", "there", "s", "still", "a", "hole", "regardless", "NUMBER", "ultimately", "our", "schema", "in", "minio", "do", "not", "matter", "whatsoever", "there", "be", "no", "way", "we", "can", "atomically", "delete", "everything", "in", "the", "sql", "database", "for", "an", "app", "or", "route", "and", "also", "delete", "everything", "in", "minio", "for", "that", "app", "or", "route", "NUMBER", "it", "s", "just", "not", "really", "possible", "to", "do", "this", "in", "one", "transaction", "NUMBER", "we", "can", "basically", "pick", "whether", "we", "want", "to", "delete", "all", "the", "stuff", "in", "sql", "first", "or", "all", "the", "stuff", "in", "minio", "first", "we", "can", "t", "do", "both", "and", "we", "can", "always", "end", "up", "in", "a", "state", "where", "one", "exists", "and", "the", "other", "doesn", "t", "even", "though", "we", "wanted", "to", "delete", "both", "NUMBER", "so", "what", "we", "need", "to", "do", "be", "either", "change", "the", "way", "we", "re", "addressing", "the", "resources", "in", "minio", "with", "something", "that", "won", "t", "be", "there", "on", "re", "creation", "app", "and", "route", "alone", "be", "not", "sufficient", "or", "find", "a", "way", "to", "atomically", "mark", "these", "as", "delete", "such", "that", "whatever", "apis", "we", "have", "can", "know", "that", "we", "cannot", "return", "resources", "that", "may", "be", "find", "in", "minio", "because", "they", "ve", "be", "marked", "as", "delete", "NUMBER", "anyway", "moving", "to", "app", "bucket", "doesn", "t", "fix", "anything", "NUMBER", "i", "can", "t", "think", "of", "anything", "atm", "that", "will", "close", "this", "hole", "that", "doesn", "t", "completely", "suck", "checking", "db", "for", "every", "log", "request", "NUMBER", "most", "LINK", "projects", "LINK", "understand", "LINK", "darkness", "LINK", "we", "ve", "had", "this", "discussion", "before", "and", "dep", "doesn", "t", "really", "seem", "like", "it", "makes", "any", "substantial", "change", "to", "vendoring", "at", "large", "in", "Go", "vs", "NUMBER", "glide", "it", "s", "just", "one", "be", "going", "to", "be", "core", "in", "Feb", "NUMBER", "it", "s", "like", "anything", "there", "be", "trade", "offs", "and", "it", "sure", "seems", "like", "devs", "having", "in", "sync", "dependencies", "having", "faster", "CI", "build", "and", "not", "relying", "on", "ad", "hoc", "VCS", "mirrors", "outweighs", "the", "extra", "NUMBER", "s", "of", "github", "latency", "to", "click", "on", "change", "and", "having", "to", "visually", "ignore", "vendor", "file", "at", "the", "end", "of", "PRs", "for", "most", "large", "OSS", "projects", "NUMBER", "go", "be", "still", "lacking", "be", "just", "the", "reality", "of", "the", "whole", "thing", "NUMBER", "if", "go", "ever", "gets", "serious", "about", "make", "deps", "better", "it", "seems", "like", "a", "good", "time", "to", "re", "evaluate", "but", "dep", "be", "basically", "just", "glide", "by", "another", "name", "NUMBER", "moving", "to", "dep", "will", "be", "nice", "for", "when", "things", "change", "over", "in", "feb", "NUMBER", "forgot", "that", "was", "there", "NUMBER", "to", "use", "DBStore", "apologies", "for", "misleading", "in", "NUMBER", "awesome", "NUMBER", "should", "ask", "flow", "team", "to", "run", "their", "benchmarks", "again", "and", "see", "if", "things", "improve", "w", "this", "this", "be", "intentionally", "capped", "to", "NUMBER", "in", "the", "code", "NUMBER", "use", "pagination", "api", "or", "please", "provide", "an", "action", "item", "here", "as", "this", "be", "not", "directly", "a", "bug", "itself", "without", "some", "opinion", "on", "how", "it", "should", "work", "and", "the", "tradeoff", "implications", "of", "change", "how", "it", "works", "reason", "to", "have", "pagination", "be", "simply", "reduce", "load", "on", "db", "specifically", "long", "run", "read", "queries", "can", "tie", "up", "the", "transaction", "engine", "select", "without", "limit", "on", "not", "cached", "data", "be", "not", "very", "nice", "to", "db", "caches", "and", "subsequent", "queries", "likely", "many", "more", "similar", "concrete", "reasons", "NUMBER", "NUMBER", "be", "a", "magic", "number", "NUMBER", "NUMBER", "could", "be", "ok", "maybe", "NUMBER", "NUMBER", "seems", "like", "too", "many", "NUMBER", "but", "in", "any", "case", "users", "have", "to", "implement", "paging", "no", "matter", "the", "amount", "we", "pick", "as", "the", "per", "page", "max", "so", "it", "doesn", "t", "seem", "like", "it", "matters", "a", "whole", "lot", "as", "long", "as", "we", "have", "something", "reasonable", "NUMBER", "here", "s", "our", "docs", "LINK", "pagination", "our", "docs", "be", "a", "mess", "i", "m", "not", "sure", "there", "s", "really", "anywhere", "we", "could", "put", "them", "where", "a", "user", "would", "be", "expected", "to", "run", "into", "them", "but", "the", "swagger", "API", "be", "up", "to", "date", "with", "the", "parameters", "half", "of", "which", "were", "use", "in", "the", "example", "given", "NUMBER", "I", "want", "to", "know", "how", "can", "I", "get", "NUMBER", "K", "calls", "all", "in", "one", "response", "or", "how", "can", "I", "get", "the", "number", "of", "successful", "or", "error", "calls", "within", "the", "certain", "timeframe", "At", "this", "particular", "moment", "as", "a", "user", "I", "have", "to", "do", "reverse", "iteration", "among", "calls", "because", "on", "API", "request", "I", "get", "only", "N", "last", "calls", "NUMBER", "paging", "answers", "this", "NUMBER", "swagger", "has", "docs", "for", "this", "NUMBER", "filter", "by", "time", "be", "possible", "NUMBER", "the", "filtering", "by", "status", "be", "not", "hooked", "up", "at", "the", "moment", "NUMBER", "the", "pagination", "api", "seems", "pretty", "clear", "on", "this", "NUMBER", "yea", "the", "cli", "probably", "needs", "to", "return", "it", "NUMBER", "the", "cli", "maybe", "should", "take", "an", "arg", "like", "n", "NUMBER", "and", "then", "could", "internally", "do", "the", "pagination", "to", "get", "NUMBER", "calls", "without", "the", "client", "having", "to", "interact", "with", "it", "or", "possibly", "all", "though", "we", "want", "to", "discourage", "that", "really", "limit", "to", "NUMBER", "h", "or", "something", "NUMBER", "in", "general", "I", "would", "hope", "that", "people", "use", "client", "libraries", "to", "interact", "with", "fn", "and", "not", "the", "CLI", "for", "doing", "heavy", "lifting", "for", "tasks", "like", "this", "NUMBER", "I", "can", "t", "think", "of", "a", "good", "reason", "for", "a", "dev", "to", "sit", "there", "with", "the", "cli", "and", "inspect", "each", "page", "and", "only", "ask", "for", "another", "page", "if", "some", "expectation", "isn", "t", "met", "and", "the", "shell", "scripting", "required", "to", "hook", "up", "paging", "be", "probably", "a", "lot", "less", "frightening", "in", "a", "user", "s", "favorite", "language", "rather", "than", "a", "user", "s", "favorite", "shell", "scripting", "language", "NUMBER", "swagger", "clients", "should", "all", "have", "a", "parameter", "for", "cursor", "to", "any", "endpoint", "that", "lists", "things", "if", "this", "isn", "t", "the", "case", "then", "we", "need", "to", "regenerate", "our", "swagger", "clients", "or", "something", "be", "terribly", "wrong", "with", "swagger", "the", "API", "spec", "has", "the", "parameters", "listed", "under", "GET", "apps", "at", "least", "LINK", "LINK", "Apps", "get_apps", "as", "linked", "LINK", "pagination", "it", "s", "pretty", "easy", "to", "map", "onto", "client", "bindings", "e", "NUMBER", "g", "NUMBER", "go", "var", "params", "apiapps", "NUMBER", "GetAppsParams", "var", "apps", "apiapps", "NUMBER", "App", "for", "resp", "err", "client", "NUMBER", "Apps", "NUMBER", "GetApps", "params", "if", "err", "nil", "return", "err", "apps", "append", "apps", "resp", "NUMBER", "Apps", "if", "resp", "NUMBER", "NextCursor", "break", "params", "NUMBER", "Cursor", "resp", "NUMBER", "NextCursor", "so", "pagination", "with", "client", "libraries", "be", "possible", "you", "re", "just", "saying", "you", "don", "t", "want", "to", "do", "this", "and", "have", "the", "CLI", "return", "everything", "exactly", "what", "we", "implement", "paging", "to", "avoid", "forcing", "users", "into", "paging", "be", "a", "pretty", "common", "practice", "and", "the", "code", "be", "pretty", "straightforward", "NUMBER", "sure", "it", "s", "convenient", "for", "users", "to", "be", "able", "to", "grep", "and", "count", "across", "all", "calls", "with", "a", "bash", "incantation", "but", "it", "s", "not", "a", "whole", "lot", "to", "ask", "them", "to", "use", "paging", "to", "do", "this", "either", "sure", "our", "cli", "needs", "to", "expose", "cursor", "so", "they", "can", "NUMBER", "yea", "cli", "be", "useful", "for", "one", "off", "inspection", "NUMBER", "as", "for", "having", "a", "decent", "paging", "api", "to", "use", "to", "regularly", "inspect", "entire", "lists", "of", "things", "i", "m", "not", "sure", "of", "a", "clean", "api", "to", "do", "this", "and", "don", "t", "think", "forcing", "users", "into", "write", "a", "for", "loop", "with", "client", "bindings", "to", "be", "the", "end", "of", "the", "world", "i", "guess", "NUMBER", "can", "we", "start", "with", "provide", "a", "simpler", "way", "for", "the", "CLI", "to", "grab", "all", "results", "kind", "of", "exactly", "what", "we", "re", "trying", "to", "avoid", "by", "having", "pagination", "NUMBER", "cli", "should", "maybe", "do", "last", "hour", "by", "default", "and", "easy", "to", "change", "don", "t", "want", "to", "default", "to", "all", "and", "want", "to", "make", "sure", "there", "be", "_some_", "bound", "that", "has", "to", "be", "specified", "even", "if", "the", "wise", "cracks", "put", "it", "at", "midnight", "Jan", "NUMBER", "NUMBER", "NUMBER", "but", "anyway", "there", "was", "discussion", "LINK", "move", "to", "CLI", "issue", "probably", "NUMBER", "with", "the", "CLI", "be", "splitting", "ports", "strictly", "required", "in", "the", "mysql", "router", "I", "don", "t", "think", "this", "poses", "a", "concern", "for", "us", "at", "the", "moment", "at", "all", "NUMBER", "all", "our", "db", "drivers", "right", "now", "be", "just", "sqlx", "with", "very", "minimal", "db", "specific", "code", "not", "that", "we", "need", "to", "adhere", "to", "this", "but", "honestly", "we", "don", "t", "need", "any", "of", "the", "fancy", "features", "of", "pg", "or", "mysql", "for", "our", "workload", "which", "be", "super", "simple", "and", "it", "would", "be", "nice", "if", "our", "db", "drivers", "reflected", "that", "NUMBER", "specifically", "if", "we", "do", "NUMBER", "we", "will", "have", "a", "very", "very", "low", "write", "rate", "and", "splitting", "writes", "to", "another", "instance", "doesn", "t", "offer", "us", "much", "benefit", "at", "all", "read", "heavy", "workload", "NUMBER", "imo", "all", "we", "need", "be", "some", "kind", "of", "redundancy", "many", "ways", "to", "do", "this", "now", "from", "mysql", "just", "for", "fault", "tolerance", "NUMBER", "once", "we", "get", "into", "prod", "we", "ll", "have", "a", "better", "idea", "of", "what", "adjustments", "we", "need", "to", "make", "for", "our", "workload", "NUMBER", "this", "seems", "like", "we", "can", "add", "it", "without", "requiring", "any", "code", "change", "really", "just", "ops", "change", "NUMBER", "just", "for", "context", "Vish", "work", "on", "some", "AI", "ML", "stuff", "on", "top", "of", "Fn", "was", "run", "into", "issue", "due", "to", "the", "NUMBER", "ms", "sleep", "so", "skinowski", "volunteered", "to", "re", "look", "at", "strategy", "NUMBER", "Maybe", "he", "can", "describe", "what", "he", "run", "into", "in", "this", "issue", "or", "IRL", "NUMBER", "from", "timeout", "value", "be", "too", "large", "or", "small", "NUMBER", "NUMBER", "TAG", "I", "don", "t", "know", "the", "answers", "but", "I", "feel", "that", "not", "worrying", "about", "partitions", "at", "this", "stage", "makes", "the", "implementation", "simpler", "and", "it", "can", "also", "be", "iteratively", "improved", "when", "we", "do", "have", "the", "data", "to", "determine", "the", "efficiency", "answer", "NUMBER", "I", "wish", "this", "were", "possible", "kafka", "do", "not", "seem", "to", "have", "any", "easy", "way", "to", "provide", "MPMC", "semantics", "without", "thinking", "about", "partitioning", "NUMBER", "We", "need", "to", "have", "someway", "to", "have", "NUMBER", "process", "chewing", "on", "a", "partition", "we", "can", "t", "just", "let", "every", "request", "ask", "a", "queue", "for", "the", "head", "this", "has", "pros", "and", "cons", "not", "having", "to", "worry", "about", "timeouts", "sounds", "NUMBER", "delightful", "NUMBER", "Initial", "thinking", "was", "that", "API", "nodes", "would", "have", "their", "own", "partition", "and", "be", "part", "of", "a", "consumer", "group", "and", "this", "seems", "like", "the", "naive", "approach", "that", "would", "likely", "work", "but", "has", "at", "least", "one", "deficiency", "in", "that", "we", "lose", "distribution", "information", "for", "RHS", "processing", "NUMBER", "The", "thinking", "be", "that", "there", "be", "likely", "a", "small", "set", "of", "API", "nodes", "and", "a", "large", "set", "of", "runner", "nodes", "and", "we", "want", "a", "runner", "node", "to", "process", "some", "subset", "of", "calls", "so", "that", "we", "can", "re", "use", "hot", "container", "image", "caching", "the", "same", "reasons", "we", "have", "fnlb", "for", "sync", "NUMBER", "Can", "think", "about", "other", "ways", "to", "accomplish", "this", "NUMBER", "The", "complication", "of", "the", "k", "NUMBER", "s", "round", "robin", "load", "balancer", "in", "the", "middle", "be", "something", "that", "didn", "t", "come", "to", "mind", "thanks", "for", "point", "it", "out", "NUMBER", "It", "s", "kind", "of", "unfortunate", "that", "we", "have", "to", "proxy", "runner", "nodes", "over", "to", "the", "LHS", "to", "talk", "to", "kafka", "in", "a", "normal", "non", "hybrid", "deployment", "runners", "full", "fn", "servers", "get", "their", "own", "partition", "seems", "like", "it", "would", "work", "just", "fine", "maybe", "optimal", "even", "NUMBER", "It", "seems", "brittle", "to", "rely", "on", "having", "a", "sticky", "vs", "NUMBER", "round", "robin", "et", "al", "load", "balancer", "in", "between", "RHS", "and", "LHS", "so", "that", "kafka", "clients", "will", "work", "but", "it", "seems", "like", "it", "would", "maybe", "close", "this", "hole", "since", "this", "API", "be", "hanging", "off", "on", "the", "side", "we", "_could_", "open", "a", "long", "lived", "connection", "between", "an", "API", "node", "and", "a", "runner", "node", "so", "that", "NUMBER", "API", "node", "could", "serve", "a", "runner", "s", "partition", "to", "it", "NUMBER", "this", "be", "kind", "of", "smelly", "need", "to", "marinate", "on", "this", "a", "bit", "NUMBER", "Not", "completely", "bent", "on", "having", "a", "partition", "per", "runner", "the", "main", "sticking", "point", "be", "the", "distribution", "but", "even", "if", "we", "have", "a", "partition", "per", "API", "node", "we", "have", "an", "issue", "of", "routing", "a", "msg", "NUMBER", "Commit", "increment", "partition", "offset", "to", "an", "API", "node", "where", "the", "consumer", "for", "that", "partition", "be", "available", "NUMBER", "Partitions", "be", "essentially", "static", "which", "be", "to", "say", "there", "s", "an", "async", "process", "for", "expanding", "the", "number", "of", "partitions", "a", "topic", "has", "but", "that", "expansion", "can", "take", "seconds", "NUMBER", "This", "sounds", "edible", "we", "expect", "that", "the", "set", "of", "runners", "be", "scaling", "up", "and", "down", "but", "relatively", "infrequently", "likely", "NUMBER", "s", "of", "minutes", "NUMBER", "Not", "sure", "how", "well", "consumer", "group", "will", "adapt", "to", "this", "possibly", "a", "bad", "idea", "NUMBER", "API", "nodes", "will", "be", "less", "elastic", "and", "may", "make", "a", "better", "candidate", "NUMBER", "Shoud", "the", "runner", "NUMBER", "endpoints", "be", "api", "version", "too", "i", "NUMBER", "e", "NUMBER", "runner", "v", "NUMBER", "NUMBER", "v", "NUMBER", "runner", "makes", "sense", "API", "nodes", "serve", "all", "v", "NUMBER", "endpoints", "so", "it", "s", "uniform", "NUMBER", "good", "catch", "thanks", "NUMBER", "The", "other", "question", "revolves", "around", "async", "work", "that", "turns", "up", "with", "a", "deadline", "NUMBER", "If", "that", "be", "fast", "approaching", "then", "the", "Call", "s", "priority", "for", "placement", "should", "rise", "I", "presume", "NUMBER", "I", "be", "game", "to", "not", "have", "an", "idea", "of", "a", "deadline", "as", "I", "may", "have", "interpreted", "this", "NUMBER", "I", "be", "somewhat", "concerned", "about", "the", "fact", "that", "we", "effectively", "need", "to", "implement", "real", "timestamp", "based", "priority", "queueing", "but", "optimistic", "that", "we", "can", "use", "kafka", "s", "offsets", "as", "timestamps", "to", "achieve", "delayed", "message", "I", "m", "not", "sure", "this", "be", "the", "same", "as", "deadline", "i", "NUMBER", "e", "NUMBER", "run", "this", "call", "at", "this", "time", "in", "the", "future", "X", "and", "even", "then", "I", "don", "t", "think", "we", "can", "possibly", "make", "any", "guarantees", "about", "the", "immediacy", "of", "run", "that", "it", "ll", "be", "in", "line", "with", "anything", "else", "that", "came", "in", "and", "was", "scheduled", "to", "run", "before", "that", "time", "X", "NUMBER", "As", "far", "as", "priorities", "our", "redis", "implementation", "has", "these", "but", "only", "uses", "p", "NUMBER", "I", "would", "like", "to", "avoid", "add", "explicit", "p", "NUMBER", "p", "NUMBER", "p", "NUMBER", "priorities", "to", "start", "and", "forever", "if", "we", "re", "be", "honest", "since", "I", "think", "it", "s", "going", "to", "be", "quite", "a", "bit", "of", "work", "just", "to", "get", "one", "priority", "in", "NUMBER", "There", "be", "no", "easy", "way", "to", "manage", "work", "stealing", "in", "that", "scenario", "yep", "agree", "NUMBER", "as", "propose", "it", "be", "very", "optimistic", "that", "the", "node", "that", "enqueued", "it", "was", "routed", "to", "because", "it", "has", "enough", "room", "to", "run", "it", "once", "that", "be", "eventually", "dequeued", "which", "may", "be", "very", "far", "in", "the", "future", "NUMBER", "figuring", "out", "how", "to", "map", "a", "message", "that", "a", "runner", "has", "received", "from", "an", "API", "node", "to", "a", "request", "to", "delete", "that", "message", "to", "the", "same", "API", "node", "be", "still", "kind", "of", "what", "I", "m", "stuck", "on", "NUMBER", "Even", "if", "all", "API", "nodes", "stay", "healthy", "it", "seems", "like", "we", "re", "really", "fighting", "the", "kafka", "client", "semantics", "here", "NUMBER", "Apparently", "they", "have", "an", "http", "gateway", "that", "you", "can", "stick", "in", "front", "of", "kafka", "to", "make", "it", "so", "consumers", "producers", "can", "be", "less", "precise", "about", "exact", "positioning", "of", "message", "wrt", "partitions", "maybe", "this", "be", "the", "route", "we", "need", "to", "go", "down", "but", "damn", "turtles", "NUMBER", "for", "reference", "LINK", "rest", "I", "think", "we", "need", "some", "form", "of", "work", "stealing", "even", "though", "when", "you", "steal", "work", "you", "be", "cold", "and", "you", "have", "to", "pull", "images", "and", "start", "up", "container", "NUMBER", "The", "question", "be", "how", "significant", "that", "be", "on", "async", "function", "that", "the", "user", "has", "start", "with", "the", "expectation", "that", "at", "some", "point", "they", "will", "complete", "NUMBER", "Maybe", "they", "don", "t", "care", "about", "the", "NUMBER", "ms", "of", "container", "start", "but", "they", "do", "about", "the", "few", "seconds", "of", "image", "pulling", "NUMBER", "Hm", "NUMBER", "for", "async", "we", "aren", "t", "really", "bounding", "the", "queued", "time", "so", "I", "think", "users", "care", "much", "much", "less", "about", "the", "docker", "overhead", "NUMBER", "we", "can", "definitely", "use", "this", "to", "our", "advantage", "NUMBER", "however", "I", "think", "that", "on", "our", "side", "of", "the", "house", "we", "do", "should", "care", "about", "this", "overhead", "NUMBER", "as", "you", "point", "out", "one", "issue", "be", "the", "disk", "space", "of", "caching", "all", "images", "NUMBER", "on", "a", "similar", "note", "if", "we", "can", "leverage", "hot", "function", "for", "async", "and", "shove", "them", "through", "a", "few", "nodes", "faster", "than", "say", "eating", "the", "startup", "time", "and", "pull", "time", "of", "the", "image", "across", "all", "machines", "then", "we", "can", "also", "reduce", "the", "queued", "time", "not", "only", "for", "each", "route", "but", "across", "all", "routes", "NUMBER", "queues", "get", "backed", "up", "for", "async", "be", "probably", "going", "to", "be", "one", "of", "the", "most", "common", "customer", "complaints", "we", "can", "wait", "to", "hit", "this", "bridge", "probably", "too", "NUMBER", "I", "agree", "we", "definitely", "need", "_some_", "kind", "of", "work", "stealing", "so", "that", "we", "can", "scale", "I", "do", "think", "we", "need", "to", "keep", "sharding", "distribution", "in", "mind", "NUMBER", "perhaps", "the", "better", "answer", "for", "now", "though", "be", "to", "punt", "so", "we", "can", "move", "forward", "with", "kafka", "specifically", "we", "have", "other", "implementation", "blockers", "atm", "NUMBER", "the", "runners", "pull", "poll", "yea", "poll", "be", "the", "intent", "NUMBER", "will", "clarify", "in", "doc", "NUMBER", "and", "maybe", "if", "there", "be", "few", "request", "needing", "this", "routing", "it", "becomes", "feasible", "to", "have", "the", "API", "nodes", "do", "additional", "work", "to", "redirect", "the", "request", "undoing", "the", "interference", "of", "the", "intermediate", "LBs", "NUMBER", "this", "be", "an", "interesting", "idea", "NUMBER", "yea", "we", "could", "have", "a", "little", "proxy", "among", "api", "nodes", "NUMBER", "the", "possibly", "really", "hokey", "but", "imo", "really", "totally", "okay", "be", "that", "the", "response", "from", "dequeue", "returns", "the", "public", "IP", "address", "of", "the", "API", "node", "from", "which", "that", "message", "was", "consumed", "to", "use", "in", "finish", "the", "API", "nodes", "be", "going", "to", "be", "expose", "to", "the", "internet", "anyway", "granted", "ideally", "by", "way", "of", "an", "LB", "NUMBER", "as", "currently", "propose", "we", "also", "need", "to", "route", "runner", "nodes", "to", "the", "same", "API", "node", "repeatedly", "in", "dequeue", "as", "in", "theory", "only", "one", "API", "node", "has", "a", "consumer", "open", "for", "each", "runner", "s", "partition", "we", "could", "round", "robin", "through", "API", "nodes", "until", "we", "land", "in", "the", "right", "spot", "but", "it", "seems", "wasteful", "NUMBER", "similarly", "enqueue", "needs", "to", "route", "to", "some", "API", "node", "that", "has", "a", "producer", "thread", "open", "on", "behalf", "of", "a", "runner", "s", "partition", "this", "doesn", "t", "have", "to", "be", "the", "same", "API", "node", "as", "the", "consumer", "however", "doesn", "t", "buy", "us", "a", "lot", "NUMBER", "If", "we", "partition", "with", "RHS", "keying", "I", "already", "smell", "the", "NUMBER", "API", "nodes", "need", "to", "not", "be", "able", "to", "have", "a", "producer", "consumer", "open", "concurrently", "I", "think", "which", "be", "pretty", "unappealing", "NUMBER", "I", "guess", "we", "can", "start", "implement", "the", "endpoints", "use", "the", "current", "MQ", "solution", "NUMBER", "yep", "NUMBER", "I", "see", "NUMBER", "concrete", "and", "separable", "tasks", "that", "come", "out", "of", "this", "NUMBER", "implement", "a", "data", "access", "interface", "layer", "for", "the", "agent", "that", "encapsulates", "the", "functionality", "we", "need", "with", "one", "implementation", "that", "uses", "the", "models", "NUMBER", "Datastore", "and", "models", "NUMBER", "MessageQueue", "directly", "and", "the", "other", "that", "uses", "a", "yet", "created", "runner", "API", "client", "could", "omit", "this", "until", "after", "NUMBER", "need", "to", "shuffle", "code", "around", "first", "NUMBER", "the", "methods", "on", "this", "interface", "can", "should", "map", "pretty", "easily", "to", "the", "API", "spec", "Enqueue", "Dequeue", "Start", "and", "End", "the", "latter", "NUMBER", "exist", "though", "maybe", "should", "be", "moved", "around", "a", "little", "to", "be", "next", "to", "the", "other", "NUMBER", "NUMBER", "Enqueue", "seems", "like", "we", "could", "omit", "as", "things", "be", "now", "but", "it", "might", "be", "worth", "push", "down", "into", "agent", "NUMBER", "NUMBER", "implement", "the", "server", "API", "as", "outlined", "in", "the", "doc", "above", "and", "if", "going", "above", "and", "beyond", "get", "the", "go", "client", "bindings", "over", "with", "we", "don", "t", "_need_", "to", "use", "swagger", "here", "imo", "we", "don", "t", "really", "want", "users", "use", "these", "apis", "directly", "NUMBER", "I", "ll", "take", "one", "if", "y", "all", "want", "to", "take", "the", "other", "you", "pick", "This", "actually", "may", "supersede", "part", "of", "what", "msgodf", "be", "doing", "at", "that", "point", "the", "flag", "to", "switch", "mode", "becomes", "a", "decider", "for", "which", "struct", "be", "created", "NUMBER", "this", "sounds", "right", "the", "flag", "will", "determine", "how", "to", "configure", "the", "agent", "NUMBER", "I", "guess", "agent", "s", "responsibility", "mostly", "be", "managing", "the", "pool", "of", "calls", "and", "the", "interfacing", "with", "the", "mq", "db", "be", "pretty", "minimal", "was", "the", "thinking", "so", "we", "can", "just", "shove", "something", "into", "the", "agent", "to", "use", "to", "access", "data", "when", "needed", "vs", "needing", "to", "change", "the", "agent", "at", "large", "the", "surface", "area", "be", "really", "just", "GetCall", "Submit", "NUMBER", "certainly", "there", "be", "other", "ways", "to", "skin", "the", "cat", "NUMBER", "what", "you", "push", "looks", "pretty", "good", "to", "me", "NUMBER", "once", "we", "have", "the", "runner", "API", "client", "thing", "agent", "NUMBER", "New", "s", "signature", "can", "maybe", "look", "something", "more", "like", "the", "agent", "NUMBER", "GetCall", "where", "there", "s", "NUMBER", "ways", "to", "construct", "a", "data", "layer", "for", "the", "Agent", "and", "the", "Server", "can", "configure", "the", "correct", "one", "based", "on", "flags", "NUMBER", "but", "what", "you", "have", "looks", "good", "to", "me", "NUMBER", "this", "should", "slot", "in", "with", "Mark", "s", "stuff", "pretty", "easily", "we", "can", "probably", "slide", "that", "in", "first", "then", "fix", "agent", "configuration", "That", "s", "fine", "but", "I", "was", "ask", "myself", "what", "will", "be", "responsible", "for", "handle", "the", "dequeue", "start", "finish", "API", "calls", "in", "the", "API", "only", "node", "NUMBER", "The", "Agent", "doesn", "t", "surface", "the", "interface", "to", "do", "so", "so", "will", "the", "Server", "go", "straight", "to", "the", "data", "this", "be", "what", "I", "was", "thinking", "NUMBER", "I", "should", "have", "a", "final", "draft", "today", "to", "PR", "need", "the", "bit", "to", "shut", "things", "off", "to", "test", "it", "or", "the", "agent", "beats", "me", "to", "dequeue", "can", "see", "how", "it", "looks", "and", "go", "from", "there", "NUMBER", "Mark", "was", "discussing", "not", "starting", "an", "agent", "in", "the", "API", "nodes", "at", "all", "which", "seems", "wise", "NUMBER", "Also", "currently", "we", "don", "t", "have", "an", "update", "call", "method", "in", "the", "datastore", "NUMBER", "so", "I", "ll", "add", "an", "implementation", "of", "that", "too", "NUMBER", "thanks", "NUMBER", "i", "ll", "stub", "this", "out", "for", "now", "in", "start", "finish", "NUMBER", "do", "you", "want", "to", "PR", "your", "agent", "change", "or", "coordinating", "with", "merge", "msgodf", "stuff", "sweet", "NUMBER", "yea", "I", "wouldn", "t", "mind", "merge", "stuff", "into", "master", "and", "branch", "off", "of", "that", "I", "don", "t", "think", "any", "of", "this", "be", "really", "all", "that", "intrusive", "wrt", "base", "functionality", "but", "we", "need", "to", "move", "code", "around", "and", "would", "be", "nice", "to", "stay", "up", "to", "date", "with", "master", "change", "NUMBER", "thoughts", "PR", "hybrid", "api", "to", "master", "I", "don", "t", "think", "order", "of", "landing", "hybrid", "impl", "or", "hybrid", "api", "to", "master", "matters", "can", "rebase", "similarities", "out", "and", "there", "s", "not", "much", "new", "code", "overlap", "if", "any", "NUMBER", "i", "push", "a", "commit", "to", "hybrid", "api", "with", "my", "change", "and", "opened", "up", "a", "separate", "LINK", "which", "be", "hybrid", "api", "which", "be", "merge", "able", "to", "master", "NUMBER", "PTAL", "NUMBER", "TODOs", "I", "see", "atm", "x", "ensure", "possibility", "to", "start", "a", "server", "NUMBER", "Server", "binary", "without", "specify", "MQ", "DB", "LOG", "it", "would", "be", "nice", "if", "server", "NUMBER", "New", "reflected", "this", "and", "each", "of", "those", "things", "were", "ServerOpts", "x", "probably", "don", "t", "start", "an", "agent", "at", "all", "in", "API", "nodes", "agent", "NUMBER", "New", "could", "drop", "DB", "MQ", "LOG", "and", "use", "opts", "x", "discuss", "whether", "API", "nodes", "should", "be", "able", "to", "enqueue", "async", "tasks", "I", "think", "no", "if", "anything", "just", "to", "reduce", "the", "surface", "area", "and", "complexity", "stuff", "also", "keep", "all", "call", "creation", "in", "runners", "id", "gen", "caching", "of", "apps", "routes", "NUMBER", "just", "shut", "down", "all", "r", "on", "API", "nodes", "be", "really", "straightforward", "x", "create", "client", "bindings", "for", "the", "runner", "nodes", "to", "call", "runner", "API", "wrap", "a", "new", "DataAccessLayer", "around", "this", "examine", "possibility", "of", "letting", "call", "update", "be", "an", "idempotent", "set", "and", "having", "a", "separate", "conditional", "update", "status", "at", "least", "it", "seems", "like", "we", "can", "maneuver", "around", "a", "full", "call", "CAS", "with", "just", "the", "semantics", "we", "need", "NUMBER", "enqueue", "be", "insert", "start", "be", "conditional", "status", "switch", "add", "started_at", "finish", "could", "be", "idempotent", "set", "NUMBER", "other", "stuff", "after", "we", "get", "an", "MVP", "work", "with", "redis", "mq", "we", "should", "prob", "get", "back", "to", "investigating", "kafka", "we", "don", "t", "wanna", "make", "a", "redis", "operator", "and", "do", "that", "whole", "dance", "seems", "like", "we", "re", "pretty", "close", "NUMBER", "i", "ll", "try", "to", "get", "client", "stuff", "do", "meow", "just", "tacked", "on", "a", "client", "to", "NUMBER", "it", "s", "kind", "of", "off", "on", "the", "side", "for", "now", "too", "so", "sliding", "it", "in", "will", "work", "on", "DataAccessLayer", "integration", "test", "with", "it", "tomorrow", "unless", "someone", "beats", "me", "to", "it", "I", "ve", "managed", "to", "get", "sync", "tasks", "run", "in", "split", "mode", "yay", "in", "LINK", "datarappa", "branch", "based", "on", "hybrid", "mergy", "branch", "this", "do", "a", "lot", "of", "shuffling", "around", "of", "the", "server", "config", "stuff", "mostly", "and", "fix", "some", "of", "the", "client", "wiring", "bug", "NUMBER", "at", "least", "most", "of", "the", "plumbing", "be", "do", "now", "I", "think", "NUMBER", "for", "now", "revert", "the", "protocol", "back", "to", "the", "same", "semantics", "we", "have", "on", "master", "we", "can", "fix", "this", "later", "NUMBER", "i", "ve", "run", "out", "of", "time", "for", "today", "but", "async", "isn", "t", "work", "just", "yet", "will", "merge", "into", "hybrid", "mergy", "or", "master", "if", "we", "merge", "NUMBER", "once", "I", "fiddle", "with", "async", "a", "little", "on", "monday", "NUMBER", "but", "anyway", "notifying", "because", "it", "knocks", "out", "a", "bunch", "of", "those", "todos", "and", "moves", "stuff", "around", "a", "fair", "amount", "NUMBER", "I", "don", "t", "think", "NUMBER", "breaks", "anything", "on", "master", "so", "I", "left", "it", "without", "this", "for", "now", "in", "hopes", "of", "merge", "that", "NUMBER", "to", "run", "split", "mode", "tasks", "on", "hybrid", "datarappa", "with", "a", "sync", "task", "set", "up", "sh", "FN_NODE_TYPE", "api", "FN_LOG_LEVEL", "debug", "NUMBER", "fn", "FN_NODE_TYPE", "runner", "FN_PORT", "NUMBER", "FN_RUNNER_URL", "LINK", "NUMBER", "fn", "curl", "d", "name", "yodawg", "v", "localhost", "NUMBER", "r", "hot", "app", "hello", "echo", "ta", "da", "The", "FN_RUNNER_URL", "new", "env", "var", "in", "hybrid", "datarappa", "agreed", "it", "s", "weird", "but", "the", "logical", "FN_API_URL", "be", "taken", "by", "the", "cli", "so", "not", "exactly", "NUMBER", "toyed", "with", "FN_RUNNER_API_URL", "FN_URL", "FN_HYBRID_URL", "happy", "to", "change", "it", "NUMBER", "merge", "into", "master", "thanks", "for", "reviewing", "NUMBER", "it", "should", "be", "easier", "to", "PR", "and", "review", "stuff", "against", "master", "now", "NUMBER", "i", "ll", "get", "async", "work", "today", "with", "the", "old", "messaging", "protocol", "NUMBER", "meaty", "pieces", "left", "kafka", "auth", "operationalizing", "add", "cache", "to", "wrap", "the", "DataAccessLayer", "s", "GetRoute", "and", "GetApp", "methods", "currently", "un", "plumbed", "for", "runner", "nodes", "since", "it", "wraps", "the", "Datastore", "atm", "which", "a", "runner", "do", "not", "use", "the", "checkboxes", "on", "the", "parent", "comment", "be", "not", "a", "good", "approximation", "of", "the", "work", "required", "to", "get", "this", "in", "I", "m", "change", "them", "to", "a", "list", "so", "this", "doesn", "t", "look", "do", "in", "github", "s", "UI", "as", "everything", "outlined", "was", "pretty", "basic", "opened", "LINK", "w", "today", "s", "work", "I", "think", "it", "s", "ready", "NUMBER", "we", "can", "likely", "add", "api", "server", "test", "of", "full", "sync", "async", "tasks", "in", "this", "mode", "with", "NUMBER", "server", "NUMBER", "Server", "active", "communicating", "on", "top", "of", "that", "work", "NUMBER", "the", "other", "thing", "to", "do", "be", "moving", "the", "cache", "from", "the", "datastore", "to", "the", "dataaccess", "layer", "which", "shouldn", "t", "be", "too", "bad", "and", "at", "some", "point", "probably", "we", "should", "doc", "the", "api", "behavior", "maybe", "wait", "until", "auth", "kafka", "NUMBER", "have", "at", "it", "or", "I", "will", "get", "to", "it", "tomorrow", "NUMBER", "auth", "kafka", "will", "be", "hair", "balls", "require", "some", "research", "planning", "we", "should", "divide", "and", "conquer", "NUMBER", "i", "m", "not", "sure", "it", "s", "worth", "doing", "extensive", "load", "test", "operationalizing", "until", "these", "be", "finished", "NUMBER", "sounds", "like", "a", "good", "plan", "NUMBER", "I", "m", "not", "sure", "of", "the", "verbiage", "we", "want", "to", "use", "user", "facing", "personally", "I", "find", "work", "control", "plane", "not", "immediately", "very", "intuitive", "NUMBER", "I", "be", "also", "skeptical", "of", "be", "in", "small", "classes", "with", "other", "kids", "that", "didn", "t", "behave", "well", "as", "a", "child", "however", "NUMBER", "wdyt", "about", "re", "use", "FN_API_URL", "to", "represent", "the", "v", "NUMBER", "endpoints", "and", "allowing", "FN_WORK_API_URL", "to", "make", "r", "request", "against", "runners", "if", "provide", "which", "overrides", "FN_API_URL", "for", "r", "only", "I", "d", "toss", "FN_RUNNER_API_URL", "around", "for", "usage", "in", "the", "CLI", "but", "I", "guess", "we", "already", "use", "that", "one", "in", "the", "runner", "itself", "NUMBER", "I", "think", "runner", "be", "more", "intuitive", "than", "work", "NUMBER", "maybe", "FN_GATEWAY_URL", "it", "will", "likely", "be", "a", "load", "balancer", "Great", "idea", "Lawouach", "NUMBER", "cc", "michael", "w", "williams", "to", "own", "this", "page", "with", "help", "from", "others", "NUMBER", "Underlying", "platform", "definitely", "a", "factor", "but", "we", "ll", "put", "together", "some", "best", "practices", "under", "the", "operate", "section", "NUMBER", "i", "be", "on", "a", "mac", "might", "be", "the", "difference", "NUMBER", "docker", "run", "name", "prometheus", "d", "p", "NUMBER", "NUMBER", "mount", "type", "bind", "source", "pwd", "prometheus", "NUMBER", "yml", "target", "etc", "prometheus", "prometheus", "NUMBER", "yml", "add", "host", "localhost", "route", "grep", "default", "awk", "print", "NUMBER", "prom", "prometheus", "usage", "route", "dnqtv", "command", "modifiers", "args", "invalid", "argument", "localhost", "for", "add", "host", "flag", "invalid", "IP", "address", "in", "add", "host", "See", "docker", "run", "help", "NUMBER", "Let", "me", "know", "what", "you", "think", "NUMBER", "If", "you", "like", "the", "basic", "format", "I", "will", "use", "it", "as", "a", "template", "for", "the", "other", "hello", "worlds", "NUMBER", "Not", "sure", "I", "should", "show", "all", "the", "variations", "you", "can", "use", "to", "call", "the", "endpoint", "NUMBER", "NUMBER", "to", "let", "generator", "create", "the", "code", "NUMBER", "also", "you", "can", "pass", "in", "json", "by", "creating", "a", "payload", "NUMBER", "json", "file", "and", "doing", "cat", "payload", "NUMBER", "json", "fn", "run", "which", "be", "a", "nice", "and", "elegant", "demonstration", "of", "stdlin", "and", "Fn", "NUMBER", "I", "made", "most", "of", "the", "request", "change", "NUMBER", "Also", "add", "FN_REGISTRY", "section", "as", "somehow", "I", "left", "that", "out", "NUMBER", "Changed", "deployment", "example", "to", "local", "NUMBER", "So", "as", "I", "see", "it", "these", "hello", "tutorials", "be", "focused", "on", "get", "from", "nothing", "to", "a", "run", "function", "as", "fast", "as", "possible", "NUMBER", "This", "be", "a", "pattern", "we", "be", "use", "now", "on", "other", "cloud", "services", "NUMBER", "For", "that", "reason", "I", "didn", "t", "add", "content", "for", "fn", "test", "or", "hot", "v", "cold", "function", "NUMBER", "If", "you", "feel", "strongly", "that", "one", "of", "those", "topics", "needs", "to", "be", "in", "here", "let", "me", "know", "and", "we", "can", "discuss", "it", "further", "NUMBER", "Thanks", "NUMBER", "nice", "NUMBER", "looks", "good", "NUMBER", "i", "believe", "this", "be", "fix", "as", "we", "re", "now", "shutting", "down", "container", "if", "they", "exceed", "the", "timeout", "NUMBER", "re", "open", "if", "i", "m", "misinterpreting", "thanks", "Hanfrey", "NUMBER", "CC", "michael", "w", "williams", "I", "will", "take", "a", "look", "today", "NUMBER", "Reproduced", "the", "error", "on", "my", "system", "NUMBER", "Happening", "during", "the", "build", "phase", "NUMBER", "I", "get", "the", "same", "message", "fn", "build", "Building", "image", "hello", "php", "NUMBER", "Sending", "build", "context", "to", "Docker", "daemon", "NUMBER", "kB", "Step", "NUMBER", "NUMBER", "FROM", "funcy", "php", "dev", "as", "build", "stage", "NUMBER", "a", "NUMBER", "b", "NUMBER", "f", "NUMBER", "d", "Step", "NUMBER", "NUMBER", "WORKDIR", "function", "Using", "cache", "NUMBER", "ad", "NUMBER", "e", "Step", "NUMBER", "NUMBER", "FROM", "FROM", "requires", "either", "one", "or", "three", "argument", "ERROR", "error", "run", "docker", "build", "exit", "status", "NUMBER", "Checked", "DockerHub", "and", "the", "entry", "for", "the", "image", "be", "there", "along", "with", "the", "dev", "tag", "NUMBER", "Dockerfile", "images", "exist", "in", "github", "too", "NUMBER", "No", "help", "from", "Ms", "Google", "so", "will", "check", "with", "the", "team", "on", "this", "one", "NUMBER", "Doesn", "t", "everything", "else", "prefix", "with", "FN", "This", "ones", "hidden", "and", "already", "cause", "confusion", "NUMBER", "Other", "ones", "that", "ll", "need", "FN_", "DB_URL", "The", "database", "URL", "to", "use", "in", "URL", "format", "NUMBER", "See", "Databases", "databases", "README", "NUMBER", "md", "for", "more", "information", "NUMBER", "sqlite", "NUMBER", "app", "data", "fn", "NUMBER", "db", "MQ_URL", "The", "message", "queue", "to", "use", "in", "URL", "format", "NUMBER", "See", "Message", "Queues", "mqs", "README", "NUMBER", "md", "for", "more", "information", "NUMBER", "bolt", "app", "data", "worker_mq", "NUMBER", "db", "API_URL", "The", "primary", "Fn", "API", "URL", "to", "that", "this", "instance", "will", "talk", "to", "NUMBER", "In", "a", "production", "environment", "this", "would", "be", "your", "load", "balancer", "URL", "NUMBER", "N", "A", "API_CORS", "A", "comma", "seperated", "list", "of", "domains", "to", "enable", "CORS", "LINK", "US", "docs", "Web", "HTTP", "CORS", "for", "None", "PORT", "Sets", "the", "port", "to", "run", "on", "NUMBER", "LOG_LEVEL", "Set", "to", "DEBUG", "to", "enable", "debugging", "INFO", "DOCKER_HOST", "Docker", "remote", "API", "URL", "var", "run", "docker", "NUMBER", "sock", "var", "run", "docker", "NUMBER", "sock", "Can", "we", "vote", "and", "if", "pass", "change", "these", "before", "people", "get", "use", "to", "the", "way", "they", "be", "now", "Related", "tickets", "that", "also", "discussed", "implement", "FN_", "prefix", "LINK", "LINK", "LINK", "name", "Vista", "returned", "ERROR", "deploy", "error", "on", "Users", "chad", "workspace", "vista", "services", "alert", "func", "NUMBER", "yaml", "Invalid", "app", "name", "I", "had", "to", "guess", "it", "was", "the", "capital", "NUMBER", "Probably", "better", "to", "detect", "the", "reason", "for", "the", "error", "and", "return", "that", "rather", "than", "trying", "to", "support", "capital", "letters", "NUMBER", "including", "hybrid", "arch", "NUMBER", "might", "be", "diff", "ticket", "NUMBER", "derekschultz", "right", "thanks", "for", "clarifying", "NUMBER", "that", "list", "looks", "good", "NUMBER", "FYI", "denismakogon", "has", "a", "docker", "compose", "file", "that", "brings", "all", "most", "of", "that", "up", "as", "well", "NUMBER", "could", "maybe", "put", "together", "somewhere", "under", "an", "operator", "section", "NUMBER", "Re", "prom", "I", "believe", "that", "ll", "be", "an", "extension", "per", "nigeldeakin", "s", "work", "so", "we", "can", "leave", "that", "out", "for", "now", "and", "include", "different", "stats", "implementations", "later", "NUMBER", "Or", "maybe", "use", "prom", "as", "example", "NUMBER", "This", "PR", "fix", "an", "intermittent", "race", "condition", "which", "sometimes", "cause", "the", "following", "panic", "at", "startup", "panic", "interface", "conversion", "opentracing", "NUMBER", "SpanContext", "be", "opentracing", "NUMBER", "noopSpanContext", "not", "zipkintracer", "NUMBER", "SpanContext", "goroutine", "NUMBER", "run", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "openzipkin", "zipkin", "go", "opentracing", "NUMBER", "tracerImpl", "NUMBER", "artSpanWithOptions", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "openzipkin", "zipkin", "go", "opentracing", "tracer", "NUMBER", "go", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "openzipkin", "zipkin", "go", "opentracing", "NUMBER", "tracerImpl", "NUMBER", "StartSpan", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "openzipkin", "zipkin", "go", "opentracing", "tracer", "NUMBER", "go", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "FnTracer", "NUMBER", "StartSpan", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "fntracer", "NUMBER", "go", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "FnTracer", "NUMBER", "StartSpan", "TAG", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "opentracing", "opentracing", "go", "NUMBER", "artSpanFromContextWithTracer", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "opentracing", "opentracing", "go", "gocontext", "NUMBER", "go", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "opentracing", "opentracing", "go", "NUMBER", "StartSpanFromContext", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "opentracing", "opentracing", "go", "gocontext", "NUMBER", "go", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "drivers", "docker", "NUMBER", "dockerWrap", "NUMBER", "CreateContainer", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "drivers", "docker", "docker_client", "NUMBER", "go", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "drivers", "docker", "NUMBER", "DockerDriver", "NUMBER", "Prepare", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "drivers", "docker", "docker", "NUMBER", "go", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "NUMBER", "agent", "NUMBER", "prepCold", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "agent", "NUMBER", "go", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "NUMBER", "agent", "NUMBER", "launch", "NUMBER", "func", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "agent", "NUMBER", "go", "NUMBER", "created", "by", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "NUMBER", "agent", "NUMBER", "launch", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "agent", "NUMBER", "go", "NUMBER", "This", "appears", "to", "be", "cause", "by", "an", "attempt", "to", "set", "a", "Span", "created", "use", "the", "default", "Tracer", "to", "be", "configured", "as", "the", "parent", "of", "a", "Span", "created", "use", "the", "Zipkin", "Tracer", "NUMBER", "It", "seems", "likely", "that", "this", "was", "because", "the", "parent", "span", "was", "created", "before", "the", "Zipkin", "Tracer", "was", "configured", "NUMBER", "To", "fix", "this", "this", "PR", "change", "the", "New", "function", "in", "api", "server", "server", "NUMBER", "go", "to", "set", "the", "global", "tracer", "before", "creating", "the", "agent", "and", "server", "NUMBER", "Had", "a", "brief", "discussion", "with", "hhexo", "about", "this", "essentially", "he", "was", "point", "out", "that", "there", "be", "some", "operations", "performed", "before", "this", "function", "be", "call", "and", "that", "since", "the", "global", "tracer", "be", "global", "we", "can", "t", "prevent", "these", "performing", "tracing", "even", "though", "they", "don", "t", "appear", "to", "do", "currently", "NUMBER", "The", "code", "in", "question", "be", "in", "server", "NUMBER", "go", "func", "NewFromEnv", "ctx", "context", "NUMBER", "Context", "opts", "NUMBER", "ServerOption", "Server", "ds", "err", "datastore", "NUMBER", "New", "viper", "NUMBER", "GetString", "EnvDBURL", "if", "err", "nil", "logrus", "NUMBER", "WithError", "err", "NUMBER", "Fatalln", "Error", "initializing", "datastore", "NUMBER", "mq", "err", "mqs", "NUMBER", "New", "viper", "NUMBER", "GetString", "EnvMQURL", "if", "err", "nil", "logrus", "NUMBER", "WithError", "err", "NUMBER", "Fatal", "Error", "initializing", "message", "queue", "NUMBER", "var", "logDB", "models", "NUMBER", "LogStore", "ds", "if", "ldb", "viper", "NUMBER", "GetString", "EnvLOGDBURL", "ldb", "ldb", "viper", "NUMBER", "GetString", "EnvDBURL", "logDB", "err", "logs", "NUMBER", "New", "viper", "NUMBER", "GetString", "EnvLOGDBURL", "if", "err", "nil", "logrus", "NUMBER", "WithError", "err", "NUMBER", "Fatal", "Error", "initializing", "logs", "store", "NUMBER", "return", "New", "ctx", "ds", "mq", "logDB", "opts", "NUMBER", "So", "before", "tracing", "be", "initialised", "we", "initialise", "the", "datastore", "queue", "and", "logging", "NUMBER", "However", "the", "change", "in", "this", "PR", "certainly", "doesn", "t", "make", "things", "any", "worse", "and", "should", "in", "practice", "fix", "the", "panics", "I", "observed", "which", "occur", "in", "threads", "start", "by", "the", "agent", "NUMBER", "This", "PR", "be", "intended", "to", "provide", "a", "fix", "to", "LINK", "That", "bug", "report", "that", "in", "some", "unknown", "circumstances", "the", "Prometheus", "go", "client", "be", "complaining", "that", "the", "Fn", "server", "be", "attempting", "to", "record", "a", "metric", "which", "has", "a", "different", "number", "of", "labels", "than", "it", "did", "when", "it", "was", "first", "sent", "NUMBER", "I", "haven", "t", "be", "able", "to", "reproduce", "this", "NUMBER", "The", "only", "way", "I", "can", "think", "of", "that", "might", "cause", "this", "error", "be", "that", "spans", "of", "a", "particular", "name", "be", "sometimes", "created", "with", "a", "parent", "span", "which", "has", "fn_appname", "and", "fn_path", "set", "and", "be", "sometimes", "created", "without", "a", "parent", "span", "NUMBER", "However", "I", "haven", "t", "find", "how", "this", "might", "happen", "NUMBER", "Whatever", "the", "cause", "this", "PR", "be", "intended", "to", "prevent", "something", "like", "this", "cause", "inconsistent", "cardinaliity", "error", "NUMBER", "When", "a", "metric", "be", "first", "created", "e", "NUMBER", "g", "NUMBER", "the", "first", "time", "a", "span", "with", "a", "particular", "name", "be", "ended", "we", "now", "record", "the", "label", "names", "that", "be", "specified", "NUMBER", "Then", "when", "subsequent", "spans", "with", "the", "same", "name", "be", "ended", "a", "new", "block", "of", "code", "ensures", "that", "an", "identical", "set", "of", "label", "names", "be", "use", "NUMBER", "If", "a", "subsequent", "span", "contains", "a", "label", "key", "which", "was", "not", "specified", "initially", "then", "it", "be", "ignored", "NUMBER", "And", "if", "a", "label", "key", "was", "specified", "initially", "but", "be", "find", "to", "be", "miss", "from", "a", "subsequent", "span", "then", "a", "value", "of", "be", "use", "NUMBER", "This", "means", "that", "the", "labels", "use", "for", "a", "given", "span", "be", "determined", "by", "those", "that", "be", "set", "via", "baggage", "items", "either", "directly", "or", "inherited", "on", "the", "very", "first", "span", "to", "complete", "NUMBER", "This", "be", "potentially", "non", "deterministic", "but", "the", "only", "way", "to", "avoid", "this", "would", "be", "to", "hardcode", "the", "label", "names", "use", "for", "every", "span", "name", "NUMBER", "That", "sound", "undesirable", "as", "currently", "most", "span", "names", "simply", "inherit", "their", "parent", "labels", "and", "don", "t", "have", "to", "contain", "any", "special", "code", "NUMBER", "See", "analysis", "and", "propose", "fix", "in", "LINK", "derekschultz", "be", "this", "relate", "to", "what", "you", "re", "work", "on", "thanks", "topiaruss", "we", "ll", "look", "for", "it", "ASAP", "and", "clear", "this", "check", "This", "change", "causes", "all", "completed", "tracing", "spans", "to", "be", "made", "available", "as", "Prometheus", "metrics", "with", "each", "span", "name", "corresponding", "to", "a", "separate", "Prometheus", "metric", "NUMBER", "Where", "a", "span", "be", "associated", "with", "a", "particular", "function", "call", "the", "path", "and", "application", "name", "be", "add", "to", "the", "metric", "as", "labels", "NUMBER", "The", "top", "level", "span", "that", "be", "be", "associated", "with", "a", "particular", "function", "call", "be", "agent_submit", "NUMBER", "I", "ve", "add", "a", "couple", "of", "lines", "of", "code", "to", "save", "the", "path", "and", "application", "name", "in", "the", "span", "as", "a", "BaggageItem", "NUMBER", "This", "only", "needs", "to", "be", "do", "here", "as", "all", "child", "spans", "will", "inherit", "this", "value", "NUMBER", "The", "work", "to", "extract", "the", "span", "name", "and", "duration", "out", "of", "a", "completed", "span", "and", "send", "it", "to", "Prometheus", "be", "do", "in", "a", "new", "custom", "Zipkin", "collector", "NUMBER", "This", "be", "the", "only", "place", "which", "can", "access", "duration", "data", "NUMBER", "This", "be", "also", "the", "place", "that", "extracts", "the", "path", "and", "appname", "from", "the", "span", "and", "set", "appropriate", "labels", "on", "the", "Prometheus", "metric", "NUMBER", "However", "the", "collector", "cannot", "access", "the", "BaggageItem", "of", "the", "span", "it", "can", "only", "access", "the", "tags", "NUMBER", "To", "work", "around", "this", "limitation", "I", "have", "implement", "a", "custom", "Span", "implementation", "and", "a", "custom", "Trace", "implementation", "to", "create", "it", "which", "intercepts", "the", "call", "to", "Span", "NUMBER", "Finish", "extracts", "the", "path", "and", "appname", "from", "the", "BaggageItems", "and", "saves", "it", "in", "the", "Span", "use", "tags", "NUMBER", "This", "makes", "this", "information", "available", "to", "the", "collector", "NUMBER", "Note", "that", "I", "have", "to", "go", "via", "BaggageItems", "here", "we", "can", "t", "simply", "set", "the", "path", "and", "appname", "as", "tags", "since", "the", "Span", "implementation", "can", "t", "access", "Tags", "though", "they", "can", "set", "them", "NUMBER", "I", "think", "the", "result", "be", "reasonably", "clean", "NUMBER", "I", "have", "created", "a", "second", "example", "Grafana", "dashboard", "to", "demonstrate", "some", "of", "these", "new", "metrics", "NUMBER", "grafanadashboard", "NUMBER", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "f", "NUMBER", "e", "NUMBER", "b", "NUMBER", "c", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "acd", "NUMBER", "a", "NUMBER", "a", "NUMBER", "png", "The", "CI", "build", "be", "fail", "in", "go", "fmt", "NUMBER", "sh", "bin", "bash", "eo", "pipefail", "NUMBER", "go", "fmt", "NUMBER", "sh", "NUMBER", "api", "server", "server", "NUMBER", "go", "Exited", "with", "code", "NUMBER", "Any", "ideas", "Now", "fail", "with", "the", "following", "will", "investigate", "NUMBER", "PASS", "TestRoutes", "list", "and", "find", "route", "NUMBER", "s", "FAIL", "FAIL", "github", "NUMBER", "com", "fnproject", "fn", "test", "fn", "api", "test", "NUMBER", "s", "github", "NUMBER", "com", "fnproject", "fn", "test", "fn", "api", "test", "fn", "formats", "json", "go", "no", "test", "file", "github", "NUMBER", "com", "fnproject", "fn", "test", "fn", "api", "test", "fn", "log", "no", "test", "file", "github", "NUMBER", "com", "fnproject", "fn", "test", "fn", "api", "test", "fn", "multi", "log", "no", "test", "file", "github", "NUMBER", "com", "fnproject", "fn", "test", "fn", "api", "test", "fn", "timeout", "no", "test", "file", "Exited", "with", "code", "NUMBER", "I", "ve", "commit", "and", "push", "all", "the", "update", "so", "far", "partly", "to", "trigger", "another", "CI", "run", "I", "don", "t", "have", "permissions", "to", "re", "trigger", "the", "test", "NUMBER", "I", "run", "the", "test", "locally", "and", "they", "pass", "NUMBER", "Not", "yet", "looked", "at", "the", "first", "comment", "LINK", "pullrequestreview", "NUMBER", "about", "setting", "the", "baggage", "items", "NUMBER", "The", "CI", "test", "pass", "this", "time", "nothing", "to", "do", "with", "my", "change", "NUMBER", "Latest", "commit", "Added", "fn_appname", "and", "fn_path", "labels", "to", "the", "serve_http", "span", "NUMBER", "In", "the", "end", "this", "turned", "out", "to", "be", "very", "simple", "NUMBER", "Updated", "the", "Grafana", "dashboard", "to", "allow", "rate", "and", "duration", "graphs", "to", "be", "display", "for", "any", "number", "of", "spans", "with", "the", "user", "use", "a", "pair", "of", "dropdowns", "to", "choose", "which", "spans", "they", "be", "interested", "in", "NUMBER", "Here", "s", "a", "screenshot", "grafanadashboard", "NUMBER", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "d", "NUMBER", "e", "NUMBER", "b", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "b", "NUMBER", "d", "NUMBER", "png", "Here", "s", "a", "close", "up", "of", "the", "graph", "for", "the", "serve_http", "span", "grafana", "fn", "tracing", "spans", "mozilla", "firefox", "NUMBER", "NUMBER", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "d", "NUMBER", "bae", "b", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "a", "d", "NUMBER", "ea", "NUMBER", "fedb", "NUMBER", "png", "This", "span", "sometimes", "has", "an", "app", "and", "path", "associated", "with", "it", "in", "which", "case", "there", "will", "be", "a", "separate", "line", "for", "each", "app", "path", "NUMBER", "Spans", "which", "have", "no", "app", "and", "path", "be", "shown", "with", "a", "line", "identified", "in", "the", "legend", "as", "fn_path", "fn_appname", "NUMBER", "It", "would", "be", "nice", "to", "be", "able", "to", "define", "a", "different", "legend", "value", "for", "this", "case", "but", "it", "doesn", "t", "seem", "to", "be", "possible", "NUMBER", "Made", "the", "change", "Shaun", "request", "NUMBER", "I", "think", "we", "be", "ready", "to", "merge", "NUMBER", "Ok", "NUMBER", "Addressed", "almost", "all", "of", "Denis", "comments", "NUMBER", "Sorry", "I", "didn", "t", "get", "to", "this", "sooner", "NUMBER", "Death", "by", "meetings", "for", "me", "this", "week", "NUMBER", "Made", "the", "additional", "request", "fix", "NUMBER", "hi", "lagartoflojo", "thanks", "for", "the", "PR", "and", "feedback", "We", "re", "definitely", "aware", "and", "work", "on", "modernizing", "the", "process", "into", "a", "digital", "signature", "NUMBER", "Moving", "the", "implementation", "code", "for", "stats", "and", "Prometheus", "metrics", "out", "of", "core", "sounds", "good", "though", "of", "course", "this", "will", "require", "core", "to", "provide", "the", "required", "extension", "points", "e", "NUMBER", "g", "NUMBER", "at", "server", "start", "when", "the", "Prom", "client", "needs", "to", "be", "initialised", "or", "when", "a", "task", "be", "enqueued", "dequeued", "run", "and", "completed", "NUMBER", "Let", "me", "know", "if", "I", "can", "help", "NUMBER", "Also", "we", "want", "to", "give", "users", "a", "simple", "out", "of", "the", "box", "experience", "for", "starting", "fn", "with", "say", "the", "stats", "metrics", "extension", "NUMBER", "How", "will", "users", "specify", "what", "extensions", "they", "want", "By", "means", "of", "parameters", "to", "fn", "start", "which", "automatically", "build", "a", "suitable", "docker", "image", "What", "about", "tracing", "Calls", "to", "the", "OpenTracing", "API", "should", "probably", "remain", "part", "of", "the", "core", "but", "the", "OpenTracing", "client", "implementation", "i", "NUMBER", "e", "NUMBER", "Zipkin", "and", "the", "configuration", "of", "the", "trace", "collectors", "the", "Http", "one", "already", "be", "use", "and", "the", "new", "custom", "collector", "to", "send", "spans", "to", "Prometheus", "should", "probably", "be", "add", "ons", "NUMBER", "This", "page", "LINK", "Contains", "a", "diagram", "which", "has", "several", "references", "to", "Iron", "f", "x", "architecture", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "e", "NUMBER", "a", "NUMBER", "cbdc", "ad", "NUMBER", "e", "NUMBER", "e", "NUMBER", "NUMBER", "a", "NUMBER", "e", "bf", "NUMBER", "dcd", "NUMBER", "d", "NUMBER", "png", "this", "one", "be", "relatively", "challenging", "to", "support", "at", "the", "fn", "level", "because", "it", "s", "hard", "for", "us", "to", "guarantee", "finality", "at", "least", "easily", "and", "scale", "NUMBER", "there", "s", "lots", "of", "implications", "for", "how", "to", "schedule", "from", "an", "fn", "node", "back", "through", "whatever", "we", "d", "use", "to", "schedule", "these", "to", "other", "nodes", "and", "correlate", "those", "we", "can", "get", "into", "locality", "and", "all", "this", "too", "eventually", "open", "the", "pandora", "s", "scheduler", "box", "be", "not", "wise", "and", "for", "funsies", "since", "function", "can", "themselves", "call", "function", "we", "can", "end", "up", "in", "a", "chain", "that", "never", "ends", "this", "just", "highlights", "the", "complexities", "NUMBER", "flow", "be", "a", "better", "exist", "idea", "for", "this", "kind", "of", "thing", "as", "it", "handles", "a", "lot", "of", "this", "client", "side", "and", "exists", "today", "NUMBER", "unfortunately", "it", "s", "a", "bit", "more", "restrictive", "on", "current", "implementations", "language", "no", "NUMBER", "net", "and", "be", "considered", "somewhat", "experimental", "none", "the", "less", "it", "do", "work", "in", "not", "too", "scaled", "up", "capacities", "and", "the", "API", "be", "open", "and", "can", "be", "implement", "with", "relative", "ease", "NUMBER", "ehhh", "just", "realized", "it", "was", "already", "merge", "NUMBER", "movin", "fast", "NUMBER", "throw", "in", "some", "change", "Tutorial", "series", "links", "Mike", "update", "UI", "docs", "Mike", "update", "see", "comments", "below", "K", "NUMBER", "s", "docs", "Derek", "update", "Swarm", "docs", "update", "or", "delete", "NUMBER", "NUMBER", "NUMBER", "michael", "w", "williams", "docker", "run", "rm", "it", "link", "function", "api", "p", "NUMBER", "NUMBER", "e", "API_URL", "LINK", "fnproject", "ui", "This", "issue", "also", "affects", "Prometheus", "metrics", "NUMBER", "This", "isn", "t", "about", "the", "stats", "NUMBER", "Queued", "call", "NUMBER", "The", "problem", "be", "that", "neither", "the", "stats", "structure", "nor", "the", "data", "held", "in", "the", "Prometheus", "client", "know", "anything", "about", "function", "routes", "until", "they", "have", "be", "call", "NUMBER", "To", "fix", "this", "issue", "we", "need", "a", "new", "function", "that", "be", "call", "once", "for", "every", "route", "in", "the", "database", "when", "the", "server", "be", "start", "and", "subsequently", "whenever", "a", "new", "route", "be", "created", "NUMBER", "This", "function", "would", "update", "stats", "and", "the", "Prometheus", "client", "with", "initial", "metrics", "for", "that", "route", "with", "queued", "run", "completed", "and", "fail", "all", "set", "to", "zero", "NUMBER", "Writing", "that", "function", "be", "straightforward", "but", "where", "would", "we", "call", "it", "from", "I", "m", "looking", "for", "some", "exist", "code", "which", "be", "executed", "at", "startup", "which", "reads", "all", "the", "routes", "from", "the", "database", "NUMBER", "This", "issue", "isn", "t", "about", "queued", "calls", "NUMBER", "It", "s", "whether", "the", "Prometheus", "scraper", "should", "receive", "metrics", "about", "routes", "that", "exist", "but", "which", "haven", "t", "be", "call", "or", "queued", "NUMBER", "It", "sounds", "from", "discussion", "here", "and", "elsewhere", "that", "the", "current", "behaviour", "be", "considered", "OK", "Prometheus", "should", "only", "receive", "information", "about", "things", "that", "happened", "since", "the", "server", "was", "start", "NUMBER", "So", "I", "can", "close", "this", "issue", "NUMBER", "Thanks", "for", "the", "feedback", "NUMBER", "As", "for", "calling", "stats", "NUMBER", "Queued", "from", "agent", "NUMBER", "GetCall", "why", "be", "that", "better", "than", "calling", "it", "just", "once", "as", "now", "when", "the", "call", "be", "enqueued", "Currently", "when", "a", "call", "be", "enqueued", "the", "Prometheus", "client", "be", "notified", "so", "it", "can", "increase", "its", "counter", "NUMBER", "The", "Prometheus", "server", "can", "then", "scrape", "the", "value", "of", "this", "counter", "by", "calling", "metrics", "any", "time", "it", "likes", "NUMBER", "Or", "be", "the", "suggestion", "that", "we", "change", "this", "from", "a", "counter", "to", "a", "gauge", "whose", "value", "be", "maintained", "within", "the", "Fn", "server", "itself", "In", "any", "case", "that", "change", "be", "not", "relate", "to", "this", "issue", "NUMBER", "i", "ll", "finish", "this", "one", "this", "week", "denismakogon", "btw", "for", "python", "try", "this", "LINK", "zootalures", "so", "no", "problem", "with", "Java", "at", "NUMBER", "Good", "to", "know", "NUMBER", "rdallman", "I", "like", "ideas", "NUMBER", "and", "NUMBER", "over", "NUMBER", "But", "maybe", "NUMBER", "be", "best", "if", "Java", "has", "no", "issue", "and", "I", "don", "t", "think", "Ruby", "really", "needs", "much", "either", "unless", "you", "start", "loading", "in", "a", "bunch", "of", "libs", "NUMBER", "Firing", "up", "irb", "gives", "me", "about", "NUMBER", "MB", "NUMBER", "PID", "COMMAND", "CPU", "TIME", "TH", "WQ", "PORT", "MEM", "PURG", "CMPRS", "PGRP", "PPID", "STATE", "BOOSTS", "CPU_ME", "NUMBER", "ruby", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "K", "NUMBER", "B", "NUMBER", "B", "NUMBER", "NUMBER", "sleeping", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "to", "both", "NUMBER", "and", "NUMBER", "Definitely", "think", "OOM", "error", "message", "can", "be", "more", "explicit", "for", "users", "NUMBER", "But", "per", "zootalures", "note", "might", "not", "need", "to", "increase", "default", "for", "Java", "NUMBER", "maybe", "Clojure", "though", "given", "markxnelson", "s", "original", "question", "while", "build", "the", "clojure", "lang", "support", "NUMBER", "config", "set", "should", "probably", "just", "overwrite", "if", "they", "want", "multiples", "maybe", "user", "just", "sets", "multiple", "at", "the", "same", "time", "with", "commas", "NUMBER", "i", "know", "they", "can", "be", "derived", "but", "would", "be", "fast", "calc", "based", "on", "created", "start", "completed", "NUMBER", "and", "would", "be", "pretty", "useful", "NUMBER", "So", "this", "be", "all", "in", "memory", "single", "server", "for", "now", "I", "think", "rdallman", "fix", "this", "last", "week", "NUMBER", "sure", "denismakogon", "did", "you", "test", "i", "think", "the", "casing", "be", "still", "inconsistent", "for", "async", "but", "I", "haven", "t", "test", "NUMBER", "fix", "but", "haven", "t", "gotten", "around", "to", "update", "it", "for", "some", "time", "fn", "init", "run", "deploy", "call", "I", "have", "a", "function", "that", "fail", "halfway", "through", "my", "browser", "get", "half", "the", "response", "then", "it", "crapped", "out", "NUMBER", "Then", "an", "error", "json", "halfway", "through", "html", "TAG", "TAG", "TAG", "TAG", "TAG", "My", "page", "TAG", "TAG", "TAG", "TAG", "My", "page", "TAG", "TAG", "This", "be", "my", "app", "NUMBER", "It", "may", "not", "be", "the", "best", "app", "but", "it", "NUMBER", "s", "my", "app", "NUMBER", "lt", "br", "gt", "lt", "br", "gt", "And", "it", "NUMBER", "s", "multilingual", "TAG", "TAG", "TAG", "TAG", "app", "path", "to", "b", "app", "path", "to", "john", "REJECTED", "c", "app", "path", "to", "bobby", "REJECTED", "d", "app", "foo", "If", "you", "add", "the", "wildcard", "after", "b", "or", "c", "it", "would", "also", "be", "rejected", "NUMBER", "zootalures", "please", "add", "Oracle", "as", "a", "public", "association", "to", "your", "Github", "account", "to", "pass", "this", "CLA", "check", "NUMBER", "thanks", "NUMBER", "oh", "this", "be", "old", "NUMBER", "well", "still", "needs", "to", "be", "do", "though", "NUMBER", "Kind", "of", "thinking", "we", "should", "just", "wildcard", "enable", "it", "by", "default", "seems", "like", "almost", "all", "modern", "apps", "do", "this", "now", "NUMBER", "And", "perhaps", "have", "a", "way", "for", "user", "to", "restrict", "it", "if", "they", "like", "but", "default", "be", "open", "NUMBER", "Some", "info", "on", "Lambda", "s", "handle", "of", "it", "LINK", "cors", "response", "headers", "on", "aws", "lambda", "Thanks", "for", "the", "bug", "report", "that", "should", "work", "as", "outlined", "users", "should", "be", "able", "to", "set", "headers", "on", "the", "response", "from", "a", "function", "NUMBER", "There", "be", "some", "test", "that", "verify", "this", "be", "possible", "and", "I", "have", "some", "confidence", "that", "works", "at", "the", "fn", "level", "it", "smells", "like", "this", "issue", "be", "at", "the", "fdk", "or", "function", "level", "NUMBER", "can", "dig", "into", "this", "to", "debug", "some", "question", "that", "may", "help", "though", "the", "code", "above", "be", "use", "an", "fdk", "to", "do", "this", "an", "http", "trigger", "which", "version", "of", "the", "fdk", "be", "be", "use", "johndevs", "excellent", "thanks", "NUMBER", "I", "think", "we", "can", "document", "this", "issue", "in", "our", "docs", "and", "then", "close", "it", "Continuing", "discussion", "from", "here", "LINK", "rdallman", "carimura", "i", "ll", "give", "this", "some", "thought", "today", "but", "initial", "reactions", "I", "agree", "Name", "be", "confusing", "NUMBER", "be", "it", "a", "generic", "string", "be", "it", "a", "directory", "be", "it", "an", "image", "I", "agree", "we", "should", "follow", "convention", "as", "closely", "as", "possible", "I", "don", "t", "think", "a", "Docker", "ID", "should", "be", "required", "inside", "the", "func", "NUMBER", "yaml", "but", "I", "can", "see", "a", "case", "where", "it", "can", "be", "NUMBER", "I", "m", "open", "to", "an", "argument", "on", "this", "NUMBER", "I", "like", "the", "CLI", "s", "that", "allow", "a", "developer", "to", "push", "to", "multiple", "diff", "environments", "easily", "NUMBER", "I", "think", "FN_REGISTRY", "should", "be", "FN_REGISTRY_USER", "NUMBER", "It", "s", "FN_REGISTRY", "because", "besides", "Docker", "Hub", "you", "need", "the", "full", "qualified", "image", "name", "eg", "index", "NUMBER", "docker", "NUMBER", "io", "thechad", "myimage", "NUMBER", "This", "be", "the", "fully", "qualified", "image", "name", "spec", "hostname", "port", "username", "reponame", "tag", "FN_REGISTRY", "be", "this", "part", "hostname", "port", "username", "We", "handle", "the", "name", "and", "tag", "automatically", "NUMBER", "And", "BTW", "after", "you", "set", "this", "which", "really", "isn", "t", "that", "difficult", "the", "experience", "be", "pretty", "nice", "ie", "you", "don", "t", "have", "to", "think", "about", "Docker", "or", "registries", "anymore", "NUMBER", "like", "what", "be", "a", "func", "NUMBER", "yaml", "file", "and", "why", "be", "it", "created", "Also", "the", "Fn", "ascii", "this", "seems", "like", "a", "good", "place", "for", "that", "NUMBER", "on", "the", "FN_", "namespacing", "NUMBER", "Not", "sure", "about", "prefixing", "or", "not", "in", "headers", "but", "at", "the", "very", "least", "should", "be", "consistent", "NUMBER", "a", "way", "to", "send", "x", "of", "load", "to", "a", "new", "version", "of", "a", "function", "NUMBER", "or", "x", "to", "func", "A", "and", "x", "to", "func", "B", "or", "version", "A", "B", "etc", "NUMBER", "like", "a", "launchdarkly", "for", "funcs", "build", "into", "the", "platform", "Might", "be", "extension", "material", "and", "not", "core", "but", "would", "be", "super", "awesome", "for", "production", "users", "NUMBER", "i", "m", "speculating", "need", "based", "on", "a", "preso", "from", "jeffconf", "I", "think", "NUMBER", "but", "I", "also", "know", "that", "launchdarkly", "be", "doing", "very", "well", "meaning", "there", "s", "a", "need", "for", "this", "type", "of", "stuff", "in", "app", "development", "NUMBER", "fn", "routes", "update", "myapp", "draw", "timeout", "NUMBER", "i", "m", "explicitly", "setting", "the", "timeout", "of", "a", "know", "route", "I", "shouldn", "t", "need", "the", "yaml", "file", "values", "to", "do", "this", "NUMBER", "this", "would", "solve", "our", "Vista", "issue", "zootalures", "Kubernetes", "use", "LINK", "Looks", "like", "we", "could", "do", "something", "similar", "NUMBER", "yep", "though", "I", "imagine", "it", "s", "encapsulated", "in", "various", "issue", "it", "may", "serve", "as", "a", "fair", "warning", "to", "leave", "the", "placeholder", "since", "it", "s", "obvious", "here", "for", "somebody", "get", "acclimated", "with", "the", "project", "NUMBER", "closing", "makes", "sense", "too", "NUMBER", "Looks", "good", "to", "me", "overall", "too", "much", "to", "review", "everything", "but", "the", "main", "parts", "look", "good", "NUMBER", "If", "test", "be", "passing", "let", "s", "just", "go", "with", "it", "and", "we", "ll", "find", "and", "fix", "bug", "quickly", "NUMBER", "Requires", "based", "off", "NUMBER", "Continuing", "this", "conversation", "LINK", "issuecomment", "NUMBER", "I", "don", "t", "really", "have", "an", "objection", "to", "one", "way", "or", "the", "other", "but", "we", "should", "at", "least", "be", "consistent", "NUMBER", "If", "we", "use", "FN_FORMAT", "we", "should", "prefix", "the", "rest", "with", "FN_", "NUMBER", "And", "vice", "versa", "NUMBER", "For", "any", "function", "with", "a", "func", "NUMBER", "yaml", "specify", "memory", "creating", "a", "route", "with", "fn", "routes", "create", "myapp", "myroute", "will", "not", "set", "the", "memory", "configuration", "on", "the", "route", "from", "the", "memory", "key", "in", "func", "NUMBER", "yml", "NUMBER", "e", "NUMBER", "g", "NUMBER", "bash", "cat", "func", "NUMBER", "yaml", "name", "willprice", "fn", "memory", "limits", "version", "NUMBER", "runtime", "go", "entrypoint", "NUMBER", "func", "path", "fn", "memory", "limits", "memory", "NUMBER", "fn", "apps", "create", "myapp", "fn", "routes", "create", "myapp", "t", "fn", "routes", "inspect", "myapp", "t", "format", "default", "idle_timeout", "NUMBER", "image", "willprice", "fn", "memory", "limits", "NUMBER", "memory", "NUMBER", "path", "t", "timeout", "NUMBER", "type", "sync", "There", "s", "some", "useful", "function", "for", "debugging", "this", "stuff", "at", "LINK", "odx", "NUMBER", "oracle", "NUMBER", "com", "will_p", "fn", "memory", "function", "Oracle", "network", "only", "It", "s", "possible", "these", "change", "might", "fix", "it", "LINK", "cc", "denismakogon", "That", "s", "true", "NUMBER", "Recent", "commit", "fix", "all", "this", "mismatches", "NUMBER", "Will", "try", "to", "repro", "tomorrow", "with", "newest", "fn", "cli", "NUMBER", "mkdir", "func", "cd", "func", "touch", "func", "NUMBER", "go", "fn", "init", "Found", "go", "assuming", "go", "runtime", "NUMBER", "func", "NUMBER", "yaml", "created", "ls", "func", "NUMBER", "go", "func", "NUMBER", "yaml", "fn", "build", "Error", "image", "name", "must", "have", "an", "owner", "and", "name", "eg", "username", "myfunc", "NUMBER", "Be", "sure", "to", "set", "FN_REGISTRY", "env", "var", "or", "pass", "in", "registry", "NUMBER", "cat", "func", "NUMBER", "yaml", "name", "func", "version", "NUMBER", "runtime", "go", "entrypoint", "NUMBER", "func", "We", "should", "probably", "set", "it", "to", "something", "like", "example", "func", "so", "one", "can", "at", "least", "build", "and", "test", "locally", "NUMBER", "You", "need", "to", "set", "FN_REGISTRY", "env", "var", "so", "it", "knows", "what", "registry", "to", "prefix", "to", "the", "name", "NUMBER", "If", "use", "Docker", "Hub", "just", "the", "username", "be", "required", "NUMBER", "export", "FN_REGISTRY", "dockerhubusername", "That", "s", "the", "point", "NUMBER", "Is", "not", "restrictive", "not", "documented", "and", "cause", "bad", "UX", "NUMBER", "There", "s", "CLI", "relate", "issue", "for", "this", "I", "ve", "file", "few", "days", "ago", "NUMBER", "So", "it", "s", "worth", "forcing", "users", "to", "use", "registry", "or", "set", "env", "car", "wherever", "it", "s", "critical", "NUMBER", "We", "could", "allow", "no", "username", "registry", "for", "fn", "build", "and", "fn", "run", "I", "suppose", "NUMBER", "Even", "fn", "deploy", "local", "NUMBER", "denismakogon", "not", "sure", "what", "you", "mean", "the", "func", "NUMBER", "yaml", "in", "the", "issue", "description", "be", "totally", "fine", "it", "s", "the", "way", "it", "should", "be", "NUMBER", "route", "update", "also", "requires", "registry", "but", "implicitly", "because", "it", "uses", "ImageName", "method", "that", "pulls", "registry", "env", "var", "and", "such", "thing", "happens", "across", "CLI", "code", "NUMBER", "willprice", "did", "you", "try", "setting", "FN_REGISTRY", "Invoking", "a", "function", "with", "a", "GET", "request", "with", "a", "body", "fail", "to", "pass", "the", "body", "on", "to", "the", "container", "i", "NUMBER", "e", "NUMBER", "it", "be", "invoked", "with", "no", "input", "on", "STDIN", "for", "cold", "function", "haven", "t", "tried", "hot", "function", "I", "understand", "that", "this", "be", "not", "adherent", "to", "the", "HTTP", "spec", "although", "most", "servers", "permit", "this", "usage", "be", "this", "a", "conscious", "decision", "If", "not", "I", "suggest", "that", "function", "should", "be", "able", "to", "support", "GET", "request", "with", "bodies", "in", "case", "users", "need", "to", "invoke", "badly", "write", "function", "that", "expect", "GET", "request", "with", "a", "body", "NUMBER", "Agree", "with", "Reed", "NUMBER", "Since", "HTTP", "spec", "be", "not", "super", "clear", "of", "how", "data", "should", "be", "represented", "in", "GET", "we", "can", "agree", "to", "accept", "data", "in", "request", "body", "during", "GET", "request", "NUMBER", "Initially", "start", "work", "on", "change", "the", "RunnerListener", "and", "merge", "TaskListener", "from", "NUMBER", "but", "turned", "into", "something", "else", "NUMBER", "This", "drops", "the", "various", "different", "structs", "that", "were", "the", "same", "thing", "Task", "Config", "FnCall", "and", "the", "translation", "methods", "to", "convert", "between", "them", "NUMBER", "Now", "it", "s", "just", "a", "single", "Task", "struct", "NUMBER", "Note", "I", "think", "Task", "should", "be", "renamed", "to", "Call", "to", "be", "consistent", "NUMBER", "We", "re", "calling", "everything", "a", "function", "call", "not", "a", "task", "NUMBER", "I", "recommend", "to", "add", "Call", "Log", "structure", "to", "the", "list", "as", "well", "since", "each", "task", "will", "have", "log", "entry", "in", "any", "way", "NUMBER", "denismakogon", "Since", "log", "be", "returned", "in", "separate", "API", "I", "think", "it", "makes", "sense", "to", "keep", "them", "separate", "NUMBER", "Kind", "of", "have", "to", "deal", "with", "logs", "separately", "for", "the", "most", "part", "NUMBER", "What", "we", "have", "in", "git", "should", "never", "be", "different", "than", "what", "glide", "install", "do", "and", "if", "it", "be", "we", "re", "doing", "it", "wrong", "NUMBER", "And", "since", "when", "did", "glide", "install", "not", "provide", "reproducible", "build", "glide", "update", "sure", "but", "install", "You", "sure", "you", "have", "it", "set", "Oh", "I", "see", "what", "you", "re", "saying", "NUMBER", "Should", "just", "error", "out", "sooner", "NUMBER", "Try", "cli", "version", "NUMBER", "So", "create", "any", "kind", "of", "hot", "function", "with", "malformed", "name", "for", "container", "and", "try", "to", "run", "it", "NUMBER", "FN", "server", "logs", "INFO", "NUMBER", "Pulling", "image", "image", "denismakogon", "tweet", "dispatch", "NUMBER", "registry", "LINK", "stack", "Prepare", "username", "denismakogon", "ERRO", "NUMBER", "Failed", "to", "pull", "image", "error", "API", "error", "NUMBER", "message", "manifest", "for", "denismakogon", "tweet", "dispatch", "NUMBER", "not", "find", "n", "image", "denismakogon", "tweet", "dispatch", "NUMBER", "registry", "LINK", "stack", "Prepare", "username", "denismakogon", "ERRO", "NUMBER", "hot", "function", "failure", "detected", "app", "where", "be", "it", "error", "Failed", "to", "pull", "image", "denismakogon", "tweet", "dispatch", "NUMBER", "API", "error", "NUMBER", "message", "manifest", "for", "denismakogon", "tweet", "dispatch", "NUMBER", "not", "find", "n", "format", "http", "hot_id", "NUMBER", "BRMCCZKV", "NUMBER", "WG", "NUMBER", "idle_timeout", "NUMBER", "m", "NUMBER", "s", "image", "denismakogon", "tweet", "dispatch", "NUMBER", "memory", "NUMBER", "route", "tweet", "dispatch", "but", "connection", "still", "open", "between", "client", "curl", "and", "fn", "server", "NUMBER", "See", "this", "one", "first", "LINK", "Is", "this", "required", "after", "NUMBER", "Reopen", "if", "still", "needed", "NUMBER", "Moved", "to", "LINK", "That", "was", "merge", "after", "it", "was", "moved", "we", "ll", "have", "redo", "that", "PR", "on", "the", "cli", "repo", "NUMBER", "hhexo", "looks", "good", "but", "cli", "be", "moving", "to", "this", "repo", "now", "LINK", "Could", "you", "redo", "this", "PR", "over", "there", "hhexo", "you", "should", "have", "write", "now", "NUMBER", "So", "I", "ve", "seen", "such", "thing", "yesterday", "in", "my", "particular", "case", "hot", "async", "doesn", "t", "work", "NUMBER", "Thing", "that", "you", "ve", "faced", "with", "looks", "like", "hot", "be", "broken", "for", "sync", "and", "Fn", "creates", "new", "container", "each", "new", "request", "works", "as", "cold", "isn", "t", "it", "weird", "NUMBER", "I", "d", "say", "this", "needs", "further", "investigation", "NUMBER", "rdallman", "treeder", "rdallman", "there", "s", "what", "i", "have", "hot", "function", "LINK", "it", "s", "initial", "configuration", "LINK", "it", "s", "sync", "fn", "routes", "i", "votes", "vote", "hot", "format", "http", "idle_timeout", "NUMBER", "image", "denismakogon", "votetask", "hot", "NUMBER", "memory", "NUMBER", "path", "vote", "hot", "timeout", "NUMBER", "type", "sync", "When", "submit", "POST", "request", "to", "FN", "server", "to", "run", "this", "func", "logs", "shows", "following", "lines", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Finding", "route", "on", "datastore", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "votes", "call_id", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "path", "vote", "hot", "route", "vote", "hot", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Got", "route", "from", "datastore", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "votes", "call_id", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "image", "denismakogon", "votetask", "hot", "NUMBER", "path", "vote", "hot", "route", "vote", "hot", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Starting", "container", "execution", "container", "task", "NUMBER", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "msg", "pg_db", "votes", "vote_id", "NUMBER", "e", "NUMBER", "b", "NUMBER", "e", "NUMBER", "ed", "NUMBER", "d", "pg_host", "NUMBER", "vote", "cats", "pg_port", "NUMBER", "pg_user", "postgres", "pg_pswd", "postgres", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "votes", "app_name", "votes", "call_id", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "image", "denismakogon", "votetask", "hot", "NUMBER", "path", "vote", "hot", "route", "vote", "hot", "user_log", "true", "Which", "be", "totally", "OK", "but", "hot", "func", "container", "be", "not", "suspended", "at", "the", "end", "of", "idle", "timeout", "and", "fn", "server", "shows", "following", "error", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "error", "msg", "error", "streaming", "docker", "stats", "for", "task", "call_id", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "container", "task", "NUMBER", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "error", "net", "http", "request", "canceled", "Client", "NUMBER", "Timeout", "exceeded", "while", "reading", "body", "So", "here", "s", "my", "assumption", "example", "LINK", "that", "we", "have", "for", "hot", "function", "that", "works", "for", "sure", "sends", "to", "STDOUT", "HTTP", "NUMBER", "if", "no", "data", "supplied", "NUMBER", "And", "then", "function", "container", "gets", "suspended", "at", "the", "end", "of", "idle", "timeout", "NUMBER", "But", "my", "func", "sends", "nothing", "to", "STDOUT", "if", "no", "data", "supplied", "via", "STDIN", "and", "that", "makes", "hot", "path", "break", "apart", "NUMBER", "Docker", "says", "that", "container", "still", "up", "and", "run", "docker", "ps", "a", "CONTAINER", "ID", "IMAGE", "COMMAND", "CREATED", "STATUS", "PORTS", "NAMES", "f", "NUMBER", "e", "NUMBER", "a", "NUMBER", "denismakogon", "votetask", "hot", "NUMBER", "NUMBER", "func", "NUMBER", "minutes", "ago", "Up", "NUMBER", "minutes", "task", "NUMBER", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "It", "appears", "that", "hot", "path", "fail", "if", "container", "send", "responses", "to", "stdout", "ONLY", "when", "user", "sends", "a", "request", "NUMBER", "And", "do", "not", "fail", "if", "container", "sends", "HTTP", "NUMBER", "see", "example", "LINK", "when", "nothing", "be", "sent", "to", "STDIN", "NUMBER", "cc", "jan", "g", "On", "Thu", "Aug", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Reed", "Allman", "TAG", "write", "again", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "error", "msg", "error", "streaming", "docker", "stats", "for", "task", "call_id", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "container", "task", "NUMBER", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "error", "net", "http", "request", "canceled", "Client", "NUMBER", "Timeout", "exceeded", "while", "reading", "body", "be", "basically", "expected", "upon", "task", "completion", "shut", "down", "the", "stats", "stream", "forcefully", "there", "s", "no", "reason", "to", "reference", "this", "NUMBER", "it", "was", "worthwhile", "to", "have", "when", "figuring", "out", "why", "tasks", "didn", "t", "have", "stats", "but", "now", "it", "s", "cause", "all", "sorts", "of", "made", "up", "bug", "so", "maybe", "it", "s", "not", "worth", "it", "to", "log", "anymore", "NUMBER", "But", "my", "func", "sends", "nothing", "to", "STDOUT", "if", "no", "data", "supplied", "via", "STDIN", "and", "that", "makes", "hot", "path", "break", "apart", "NUMBER", "yes", "exactly", "NUMBER", "if", "the", "container", "doesn", "t", "actually", "write", "anything", "out", "it", "blocks", "forever", "NUMBER", "we", "just", "need", "a", "context", "based", "io", "NUMBER", "Copy", "to", "catch", "this", "I", "think", "but", "in", "general", "users", "will", "have", "to", "at", "least", "write", "headers", "back", "otherwise", "we", "have", "no", "clue", "that", "the", "task", "finished", "and", "will", "just", "wait", "for", "output", "until", "the", "timeout", "not", "sure", "how", "to", "get", "around", "this", "NUMBER", "This", "actually", "be", "not", "true", "user", "should", "not", "supply", "anything", "to", "let", "fn", "know", "that", "task", "be", "finished", "http", "request", "in", "STDOUT", "means", "that", "task", "be", "finished", "NUMBER", "I", "tend", "to", "agree", "about", "io", "NUMBER", "Copy", "needs", "a", "idle", "timeout", "based", "context", "NUMBER", "Timeout", "actually", "never", "happens", "get", "container", "that", "runs", "already", "for", "NUMBER", "NUMBER", "hours", "where", "timeout", "be", "NUMBER", "s", "and", "idle", "timeout", "be", "NUMBER", "s", "NUMBER", "the", "STDIN", "with", "empty", "body", "should", "be", "taken", "care", "of", "by", "consuming", "headers", "and", "having", "NUMBER", "Content", "Length", "NUMBER", "This", "should", "be", "change", "IMO", "NUMBER", "Or", "at", "least", "should", "be", "protocol", "bound", "thing", "only", "NUMBER", "Do", "i", "have", "to", "respond", "with", "the", "result", "them", "immediately", "with", "an", "HTTP", "NUMBER", "I", "don", "t", "think", "immediacy", "be", "necessary", "NUMBER", "will", "at", "least", "have", "to", "give", "headers", "at", "some", "point", "before", "timeout", "NUMBER", "the", "dispatch", "code", "be", "definitely", "not", "perfect", "atm", "it", "s", "get", "it", "s", "hair", "and", "make", "up", "do", "at", "the", "moment", "though", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "jan", "g", "yeah", "can", "confirm", "even", "on", "sample", "app", "we", "have", "hot", "path", "do", "not", "work", "it", "just", "populates", "container", "on", "each", "new", "request", "and", "they", "never", "hit", "idle", "timeout", "NUMBER", "I", "would", "prefer", "we", "don", "t", "import", "it", "by", "default", "at", "least", "for", "now", "user", "operator", "can", "add", "it", "as", "they", "can", "any", "other", "middleware", "extension", "by", "copying", "main", "NUMBER", "go", "and", "add", "it", "NUMBER", "Does", "that", "make", "sense", "zootalures", "Rather", "than", "change", "our", "main", "NUMBER", "go", "here", "allow", "the", "user", "operator", "to", "enable", "the", "completer", "by", "add", "it", "as", "an", "extension", "ie", "fn", "service", "can", "add", "this", "NUMBER", "We", "can", "document", "how", "to", "add", "the", "following", "in", "the", "completer", "README", "if", "they", "want", "to", "enable", "it", "completer", "NUMBER", "SetupFromEnv", "ctx", "funcServer", "The", "TaskListener", "stuff", "can", "stay", "but", "I", "m", "not", "sure", "how", "that", "s", "different", "than", "the", "RunnerListener", "I", "think", "we", "need", "to", "merge", "TaskListener", "and", "RunnerListener", "I", "believe", "they", "be", "intended", "for", "the", "same", "purpose", "NUMBER", "RunnerListener", "NUMBER", "BeforeDispatch", "bad", "method", "name", "be", "just", "call", "too", "early", "NUMBER", "If", "we", "keep", "TaskListener", "then", "let", "s", "remove", "RunnerListener", "and", "add", "AfterTaskCompletes", "NUMBER", "Or", "keep", "RunnerListener", "but", "move", "where", "it", "s", "call", "to", "where", "FireBeforeTaskStart", "as", "in", "this", "PR", "NUMBER", "And", "change", "the", "names", "to", "RunnerListener", "NUMBER", "BeforeRun", "and", "RunnerListener", "NUMBER", "AfterRun", "or", "something", "NUMBER", "I", "can", "take", "a", "stab", "at", "merge", "these", "if", "you", "d", "like", "NUMBER", "Update", "to", "NUMBER", "and", "see", "if", "it", "fix", "this", "NUMBER", "You", "must", "not", "have", "latest", "cli", "that", "DOCKERHUB_USERNAME", "should", "no", "longer", "exist", "LINK", "diff", "c", "NUMBER", "e", "NUMBER", "c", "NUMBER", "ff", "NUMBER", "e", "NUMBER", "c", "NUMBER", "d", "NUMBER", "e", "NUMBER", "ddL", "NUMBER", "Assume", "you", "have", "route", "config", "TEST", "A", "test", "b", "format", "default", "idle_timeout", "NUMBER", "image", "denismakogon", "os", "NUMBER", "environ", "memory", "NUMBER", "path", "os", "NUMBER", "environ", "timeout", "NUMBER", "type", "sync", "So", "at", "function", "site", "developer", "expect", "to", "have", "env", "variables", "from", "config", "TEST", "A", "test", "b", "But", "it", "appears", "that", "on", "func", "site", "only", "env", "variable", "available", "in", "this", "particular", "case", "TEST", "b", "NUMBER", "This", "line", "LINK", "L", "NUMBER", "breaks", "config", "by", "upper", "casing", "all", "config", "keys", "NUMBER", "treeder", "hibooboo", "NUMBER", "carimura", "I", "think", "rdallman", "s", "suggestion", "makes", "sense", "just", "use", "exactly", "what", "user", "enters", "NUMBER", "At", "server", "side", "each", "header", "from", "route", "renamed", "to", "HEADER_", "header", "original", "name", "but", "at", "fn", "run", "we", "just", "set", "them", "as", "be", "so", "they", "be", "not", "available", "at", "function", "site", "NUMBER", "rdallman", "i", "thought", "there", "s", "reason", "why", "we", "did", "so", "NUMBER", "And", "correct", "me", "if", "i", "m", "wrong", "that", "was", "do", "to", "prevent", "collisions", "no", "No", "we", "should", "fix", "the", "link", "NUMBER", "Fixed", "NUMBER", "NUMBER", "makes", "sense", "NUMBER", "So", "be", "this", "for", "BYOD", "bring", "your", "own", "dockerfile", "Or", "be", "this", "for", "an", "image", "that", "exists", "already", "somewhere", "Can", "we", "just", "keep", "it", "as", "seconds", "always", "Which", "be", "how", "it", "was", "originally", "I", "believe", "NUMBER", "No", "units", "NUMBER", "In", "CLI", "no", "matter", "via", "args", "or", "func", "NUMBER", "yaml", "both", "timeouts", "be", "be", "accepted", "as", "type", "time", "NUMBER", "Duration", "so", "if", "you", "pass", "int", "value", "NUMBER", "it", "means", "that", "you", "setting", "timeout", "to", "NUMBER", "nanoseconds", "that", "s", "why", "when", "you", "setting", "timeout", "through", "CLI", "args", "it", "asks", "you", "for", "units", "ns", "s", "m", "h", "NUMBER", "So", "i", "think", "the", "problem", "be", "not", "in", "overriding", "values", "in", "func", "NUMBER", "yaml", "but", "rather", "than", "not", "fail", "if", "no", "units", "specified", "i", "NUMBER", "e", "NUMBER", "implicit", "duration", "casting", "NUMBER", "treeder", "carimura", "It", "s", "supposed", "to", "be", "seconds", "always", "be", "that", "way", "NUMBER", "In", "CLI", "args", "it", "s", "never", "be", "that", "way", "NUMBER", "It", "might", "be", "a", "bit", "different", "from", "func", "NUMBER", "yaml", "I", "think", "this", "both", "should", "be", "consistent", "and", "in", "order", "to", "simplify", "code", "func", "NUMBER", "yaml", "should", "enforce", "users", "to", "specify", "units", "for", "time", "properties", "just", "as", "CLI", "args", "NUMBER", "I", "m", "not", "saying", "that", "s", "not", "the", "case", "but", "whoever", "implement", "it", "did", "it", "wrong", "NUMBER", "It", "was", "always", "supposed", "to", "be", "in", "seconds", "LINK", "L", "NUMBER", "L", "NUMBER", "LINK", "file", "NUMBER", "md", "So", "let", "s", "implement", "NUMBER", "to", "fix", "this", "NUMBER", "treeder", "NUMBER", "address", "certain", "part", "of", "this", "problem", "NUMBER", "But", "it", "s", "still", "unclear", "to", "me", "after", "which", "operation", "func", "NUMBER", "yaml", "gets", "modify", "NUMBER", "API", "impact", "We", "need", "to", "drop", "default", "value", "for", "type", "because", "it", "brought", "this", "type", "of", "bug", "NUMBER", "Starting", "this", "patch", "users", "should", "specify", "route", "type", "through", "CLI", "or", "func", "NUMBER", "yml", "Closes", "NUMBER", "Yeah", "it", "happens", "to", "all", "field", "defaults", "overriding", "all", "route", "attributes", "NUMBER", "rdallman", "rdallman", "fix", "now", "route", "attributes", "remain", "the", "same", "if", "not", "explicitly", "change", "via", "request", "body", "while", "patching", "route", "NUMBER", "There", "s", "one", "LINK", "api", "test", "routes_test", "NUMBER", "go", "L", "NUMBER", "but", "i", "think", "it", "needs", "to", "update", "extend", "NUMBER", "Will", "fix", "that", "NUMBER", "rdallman", "hibooboo", "NUMBER", "treeder", "hibooboo", "NUMBER", "thanks", "for", "review", "NUMBER", "Yeah", "Reed", "should", "do", "final", "review", "and", "merge", "NUMBER", "Thanks", "Reed", "NUMBER", "Merging", "NUMBER", "Wasn", "t", "fix", "NUMBER", "Closing", "in", "favor", "of", "LINK", "It", "appears", "that", "when", "you", "trying", "to", "update", "route", "config", "through", "HTTP", "PATCH", "all", "route", "attributes", "change", "corresponding", "to", "defaults", "NUMBER", "How", "about", "fn", "bump", "major", "and", "fn", "bump", "minor", "Fixed", "here", "LINK", "This", "one", "has", "always", "bugged", "me", "definitely", "agree", "we", "need", "a", "better", "solution", "for", "different", "users", "NUMBER", "Perhaps", "we", "just", "store", "the", "function", "name", "container", "name", "without", "the", "username", "then", "the", "Docker", "registry", "host", "username", "be", "retrieved", "from", "elsewhere", "an", "env", "var", "some", "kind", "of", "separate", "context", "like", "you", "suggest", "a", "separate", "private", "file", "that", "doesn", "t", "get", "checked", "in", "etc", "NUMBER", "Then", "it", "s", "fn", "init", "myfunc", "and", "everything", "should", "work", "as", "be", "locally", "until", "you", "push", "deploy", "which", "will", "require", "setting", "your", "docker", "hub", "username", "at", "a", "minimum", "NUMBER", "So", "after", "slack", "discussion", "a", "simple", "solution", "for", "this", "be", "to", "allow", "an", "env", "var", "and", "cli", "flag", "for", "this", "NUMBER", "User", "must", "use", "one", "of", "these", "so", "will", "require", "doc", "update", "NUMBER", "ENV", "VAR", "FN_REGISTRY", "eg", "export", "FN_REGISTRY", "registry", "NUMBER", "hub", "NUMBER", "docker", "NUMBER", "com", "username", "CLI", "Flag", "This", "will", "be", "on", "fn", "deploy", "NUMBER", "eg", "fn", "deploy", "registry", "registry", "NUMBER", "hub", "NUMBER", "docker", "NUMBER", "com", "username", "A", "follow", "up", "could", "be", "to", "have", "some", "config", "file", "that", "can", "store", "configs", "and", "contexts", "eg", "local", "staging", "but", "the", "env", "var", "and", "flag", "will", "still", "be", "available", "regardless", "NUMBER", "I", "tend", "to", "agree", "with", "Reed", "NUMBER", "This", "message", "appearing", "because", "of", "OS", "rights", "for", "var", "run", "docker", "NUMBER", "sock", "var", "run", "docker", "NUMBER", "sock", "NUMBER", "fn", "start", "really", "expects", "to", "docker", "to", "be", "configured", "to", "listen", "on", "file", "socket", "rather", "than", "remote", "IP", "NUMBER", "For", "instance", "fn", "start", "doesn", "t", "work", "for", "me", "because", "my", "Docker", "instance", "runs", "on", "a", "remote", "host", "NUMBER", "So", "it", "ll", "be", "better", "to", "make", "it", "more", "friendly", "to", "other", "cases", "except", "implement", "one", "NUMBER", "Just", "opened", "this", "one", "per", "discussion", "LINK", "odx", "NUMBER", "slack", "NUMBER", "com", "conversation", "C", "NUMBER", "FA", "NUMBER", "FS", "NUMBER", "p", "NUMBER", "delabassee", "can", "you", "please", "push", "your", "branch", "to", "upstream", "and", "then", "create", "PR", "from", "that", "branch", "our", "CI", "do", "not", "allow", "to", "run", "checks", "against", "forks", "NUMBER", "We", "need", "CI", "to", "be", "green", "to", "merge", "this", "PR", "NUMBER", "delabassee", "sure", "that", "s", "what", "I", "m", "ask", "for", "NUMBER", "delabassee", "can", "you", "please", "rebase", "your", "change", "and", "do", "force", "push", "Thanks", "Inside", "of", "the", "transaction", "while", "update", "app", "we", "be", "querying", "for", "the", "app", "so", "we", "know", "that", "it", "exists", "so", "NUMBER", "rows", "affected", "means", "that", "we", "re", "trying", "to", "update", "app", "with", "exact", "the", "same", "data", "as", "stored", "in", "backend", "NUMBER", "Closes", "NUMBER", "rdallman", "why", "did", "you", "change", "the", "name", "to", "FN_FORMAT", "Can", "we", "change", "it", "back", "given", "that", "none", "of", "the", "others", "be", "prefixed", "with", "FN_", "It", "s", "still", "there", "confirmed", "NUMBER", "Sounds", "like", "stuff", "that", "should", "go", "in", "func", "NUMBER", "yaml", "NUMBER", "Good", "idea", "though", "NUMBER", "func", "NUMBER", "yaml", "be", "definitely", "meant", "to", "be", "checked", "in", "as", "it", "defines", "the", "function", "and", "what", "it", "requires", "to", "run", "NUMBER", "Hence", "why", "you", "don", "t", "put", "secrets", "in", "it", "NUMBER", "But", "I", "like", "the", "idea", "of", "describing", "the", "config", "secrets", "that", "it", "requires", "in", "the", "func", "NUMBER", "yaml", "like", "you", "suggest", "here", "NUMBER", "Guys", "we", "need", "async", "this", "isn", "t", "just", "for", "APIs", "NUMBER", "How", "would", "you", "propose", "to", "handle", "tons", "of", "events", "from", "something", "like", "IOT", "devices", "or", "some", "streaming", "service", "like", "kinesis", "lambda", "NUMBER", "How", "do", "you", "efficiently", "scale", "that", "out", "without", "queues", "to", "act", "as", "buffers", "You", "either", "need", "resources", "that", "can", "handle", "any", "amount", "of", "traffic", "at", "once", "so", "we", "have", "a", "massive", "number", "of", "machines", "sitting", "idle", "or", "you", "use", "queues", "that", "s", "what", "they", "be", "for", "NUMBER", "The", "comments", "above", "from", "oracloud", "and", "rdallman", "talk", "about", "lopping", "off", "async", "so", "it", "sounds", "like", "it", "s", "part", "of", "the", "discussion", "unless", "I", "read", "it", "wrong", "NUMBER", "But", "since", "I", "guess", "that", "s", "not", "part", "of", "this", "discussion", "and", "we", "be", "keep", "it", "then", "yes", "agree", "that", "it", "should", "mostly", "follow", "the", "same", "path", "other", "than", "the", "queue", "in", "the", "middle", "for", "async", "NUMBER", "Anywho", "NUMBER", "All", "in", "all", "very", "much", "in", "favor", "of", "the", "the", "propose", "change", "it", "s", "quite", "a", "mess", "right", "now", "NUMBER", "One", "suggestion", "in", "your", "propose", "layers", "I", "feel", "like", "the", "agent", "might", "be", "doing", "too", "much", "NUMBER", "ie", "why", "do", "a", "sync", "request", "need", "an", "agent", "A", "sync", "request", "can", "just", "go", "right", "through", "the", "system", "and", "either", "run", "or", "NUMBER", "Sync", "NUMBER", "Request", "comes", "in", "hits", "http", "layer", "NUMBER", "Http", "layer", "calls", "GetSlot", "NUMBER", "NUMBER", "If", "slot", "available", "run", "it", "call", "Slot", "NUMBER", "Exec", "NUMBER", "If", "not", "NUMBER", "Async", "NUMBER", "Request", "comes", "in", "hits", "http", "layer", "NUMBER", "NUMBER", "Straight", "onto", "MQ", "through", "agent", "layer", "to", "abstract", "it", "sure", "NUMBER", "Sometime", "in", "the", "not", "too", "distant", "future", "NUMBER", "Every", "X", "time", "agent", "checks", "YoAnySlotsAvailable", "maybe", "reserve", "slot", "for", "a", "second", "to", "check", "MQ", "NUMBER", "If", "yes", "get", "task", "from", "MQ", "run", "it", "call", "Slot", "NUMBER", "Exec", "NUMBER", "If", "not", "do", "nothing", "NUMBER", "This", "be", "obviously", "very", "high", "level", "and", "miss", "the", "little", "details", "like", "who", "what", "deletes", "message", "from", "the", "queue", "but", "I", "think", "this", "should", "be", "the", "general", "idea", "NUMBER", "Everything", "below", "slot", "NUMBER", "Exec", "can", "be", "the", "exact", "same", "path", "with", "some", "slightly", "different", "implementations", "of", "particular", "methods", "NUMBER", "For", "instance", "a", "task", "NUMBER", "AfterComplete", "method", "could", "be", "call", "on", "the", "task", "and", "async", "would", "delete", "the", "MQ", "message", "while", "sync", "would", "do", "nothing", "NUMBER", "While", "use", "HTTP", "protocol", "hot", "function", "receives", "only", "HTTP", "NUMBER", "GET", "with", "user", "data", "as", "request", "body", "NUMBER", "As", "user", "i", "want", "my", "function", "to", "react", "on", "different", "HTTP", "request", "here", "s", "an", "example", "Following", "request", "curl", "X", "POST", "localhost", "NUMBER", "r", "app", "route", "d", "name", "john", "should", "be", "converted", "to", "POST", "HTTP", "NUMBER", "Host", "localhost", "NUMBER", "Content", "Length", "NUMBER", "Content", "Type", "application", "x", "www", "form", "urlencoded", "User", "Agent", "curl", "NUMBER", "name", "john", "So", "hot", "function", "should", "receive", "exact", "the", "same", "request", "as", "it", "was", "submitted", "to", "FN", "server", "NUMBER", "rdallman", "Also", "there", "s", "a", "thought", "about", "defining", "HTTP", "path", "for", "hot", "function", "by", "default", "it", "equals", "to", "what", "we", "d", "define", "HTTP", "based", "on", "what", "be", "be", "mention", "in", "FN", "route", "call", "here", "s", "an", "example", "if", "user", "sends", "a", "request", "to", "localhost", "NUMBER", "r", "app", "route", "his", "function", "will", "receive", "request", "with", "HTTP", "path", "if", "user", "sends", "a", "request", "to", "localhost", "NUMBER", "r", "app", "route", "users", "is_admin", "true", "id", "NUMBER", "then", "hot", "function", "will", "receive", "request", "with", "HTTP", "path", "users", "is_admin", "true", "id", "NUMBER", "So", "the", "pattern", "in", "r", "app", "route", "function_route", "where", "function_route", "be", "in", "function", "routing", "rule", "NUMBER", "Having", "this", "enhancement", "developers", "will", "be", "capable", "to", "implement", "in", "function", "routing", "while", "use", "HTTP", "over", "STDIN", "wrappers", "like", "regular", "HTTP", "server", "but", "uses", "STDIN", "instead", "of", "TCP", "socket", "NUMBER", "As", "an", "addition", "to", "body", "of", "this", "ticket", "NUMBER", "Server", "reads", "body", "only", "in", "case", "of", "HTTP", "POST", "request", "but", "ignores", "PUT", "PATCH", "DELETE", "GET", "with", "data", "GET", "with", "side", "effect", "LINK", "sec", "NUMBER", "html", "sec", "NUMBER", "NUMBER", "rdallman", "based", "on", "what", "s", "said", "above", "and", "taking", "into", "account", "NUMBER", "having", "an", "ability", "to", "send", "request", "with", "different", "paths", "we", "can", "give", "developers", "a", "chance", "to", "implement", "regular", "HTTP", "servers", "that", "work", "as", "function", "instead", "of", "investigating", "what", "kind", "of", "request", "that", "was", "at", "function", "s", "side", "NUMBER", "At", "this", "moment", "each", "hot", "function", "accepts", "request", "through", "http", "over", "stdin", "protocol", "NUMBER", "This", "means", "that", "each", "function", "should", "implement", "http", "over", "stdin", "parser", "it", "s", "native", "for", "go", "only", "AFAIK", "NUMBER", "In", "order", "to", "simplify", "developer", "experience", "and", "choice", "of", "http", "frameworks", "to", "build", "http", "servers", "we", "might", "consider", "to", "support", "HTTP", "over", "TCP", "protocol", "NUMBER", "How", "it", "s", "different", "For", "HTTP", "protocol", "each", "time", "user", "submits", "a", "request", "its", "body", "be", "use", "to", "form", "HTTP", "request", "that", "would", "be", "dumped", "to", "STDIN", "For", "HTTP", "over", "TCP", "each", "request", "would", "be", "write", "to", "a", "TCP", "socket", "function", "basically", "http", "server", "will", "recognise", "it", "as", "regular", "HTTP", "request", "accepted", "through", "network", "Impacts", "to", "COE", "orchestration", "Each", "container", "must", "expose", "port", "random", "internally", "in", "order", "to", "establish", "TCP", "connection", "between", "FN", "server", "and", "function", "NUMBER", "Closes", "NUMBER", "Closes", "NUMBER", "Closes", "NUMBER", "Closes", "NUMBER", "mhaji", "you", "might", "try", "it", "out", "fn", "run", "now", "accepts", "memory", "and", "pass", "it", "down", "to", "docker", "run", "NUMBER", "Here", "s", "how", "it", "works", "if", "you", "d", "run", "plain", "fn", "run", "it", "will", "look", "for", "func", "NUMBER", "yaml", "and", "will", "pick", "memory", "from", "there", "if", "you", "d", "run", "fn", "run", "username", "fnimage", "tag", "then", "you", "might", "pass", "memory", "but", "by", "default", "it", "s", "NUMBER", "Mb", "NUMBER", "I", "assume", "you", "d", "ask", "about", "cases", "when", "func", "NUMBER", "yaml", "doesn", "t", "have", "memory", "so", "in", "this", "case", "you", "d", "need", "to", "regenerate", "func", "NUMBER", "yaml", "with", "newer", "CLI", "you", "ll", "have", "something", "similar", "to", "route", "config", "format", "default", "headers", "idletimeout", "NUMBER", "image", "denismakogon", "hotfnpy", "cold", "NUMBER", "memory", "NUMBER", "path", "hotfnpy", "hot", "timeout", "NUMBER", "type", "sync", "name", "denismakogon", "hotfnpy", "cold", "version", "NUMBER", "runtime", "python", "NUMBER", "mhaji", "according", "to", "how", "that", "command", "was", "implement", "if", "you", "re", "not", "specify", "an", "image", "memory", "will", "be", "pick", "up", "from", "func", "NUMBER", "yaml", "NUMBER", "The", "same", "thing", "relate", "to", "route", "config", "headers", "timeout", "somehow", "NUMBER", "mhaji", "oracloud", "can", "you", "please", "review", "rdallman", "carimura", "can", "you", "try", "it", "out", "and", "do", "possibly", "a", "review", "treeder", "mhaji", "oracloud", "rdallman", "Regarding", "mhaji", "s", "comment", "the", "flag", "should", "always", "override", "the", "func", "NUMBER", "yaml", "so", "fn", "run", "memory", "NUMBER", "should", "override", "what", "s", "in", "the", "func", "NUMBER", "yaml", "NUMBER", "denismakogon", "treeder", "mhaji", "do", "please", "check", "NUMBER", "LGTM", "but", "rdallman", "should", "take", "a", "quick", "gander", "since", "it", "was", "his", "suggestion", "to", "do", "this", "in", "NUMBER", "NUMBER", "treeder", "Ok", "i", "agree", "that", "user", "impact", "should", "be", "minimum", "that", "s", "why", "recent", "change", "revert", "impact", "and", "func", "NUMBER", "yaml", "remains", "the", "same", "see", "change", "NUMBER", "Had", "to", "add", "new", "struct", "type", "flat", "func", "file", "that", "looks", "like", "original", "func", "file", "but", "it", "s", "use", "to", "setup", "func", "file", "right", "after", "marshaling", "unmarshaling", "from", "to", "file", "NUMBER", "There", "might", "be", "another", "way", "to", "do", "this", "if", "so", "let", "me", "know", "NUMBER", "func", "NUMBER", "yaml", "create", "use", "fn", "init", "looks", "like", "name", "funcy", "go", "version", "NUMBER", "runtime", "go", "memory", "NUMBER", "format", "default", "timeout", "NUMBER", "path", "go", "remove", "backslash", "that", "causes", "HTTP", "NUMBER", "Redirect", "GIN", "debug", "redirecting", "request", "NUMBER", "v", "NUMBER", "apps", "testapp", "calls", "v", "NUMBER", "apps", "testapp", "calls", "We", "suggest", "people", "use", "their", "own", "Dockerfile", "if", "they", "want", "to", "do", "something", "special", "like", "change", "the", "base", "image", "if", "there", "s", "a", "Dockerfile", "in", "the", "directory", "it", "will", "use", "that", "rather", "than", "use", "our", "generate", "one", "NUMBER", "Is", "that", "enough", "to", "resolve", "the", "issue", "you", "re", "trying", "to", "solve", "here", "oracloud", "your", "turn", "NUMBER", "What", "s", "it", "doing", "differently", "To", "get", "latest", "urfave", "cli", "NUMBER", "rdallman", "I", "see", "no", "problem", "in", "creating", "specific", "images", "we", "already", "do", "that", "just", "take", "a", "look", "at", "number", "of", "images", "at", "LINK", "most", "of", "those", "images", "be", "test", "images", "so", "it", "s", "not", "kinda", "big", "problem", "we", "don", "t", "want", "to", "deal", "with", "NUMBER", "We", "just", "need", "more", "test", "cases", "to", "define", "NUMBER", "If", "you", "have", "such", "then", "just", "start", "listing", "them", "here", "NUMBER", "Ahh", "was", "just", "trying", "to", "figure", "out", "how", "to", "deal", "with", "this", "urfave", "cli", "doesn", "t", "handle", "this", "very", "nicely", "or", "consistently", "I", "think", "they", "ve", "change", "it", "various", "times", "NUMBER", "Even", "on", "current", "master", "they", "say", "an", "error", "should", "propogate", "up", "to", "the", "top", "but", "it", "doesn", "t", "LINK", "L", "NUMBER", "NUMBER", "And", "you", "can", "find", "a", "bunch", "of", "relate", "issue", "here", "LINK", "exit", "code", "type", "Issues", "utf", "NUMBER", "E", "NUMBER", "NUMBER", "C", "NUMBER", "Now", "that", "I", "say", "that", "just", "tried", "it", "on", "master", "the", "version", "we", "re", "use", "be", "from", "Nov", "NUMBER", "NUMBER", "and", "it", "seems", "to", "actually", "propogate", "the", "error", "to", "the", "top", "This", "code", "go", "package", "main", "import", "error", "fmt", "os", "github", "NUMBER", "com", "urfave", "cli", "func", "main", "app", "cli", "NUMBER", "NewApp", "app", "NUMBER", "Name", "boom", "app", "NUMBER", "Usage", "make", "an", "explosive", "entrance", "app", "NUMBER", "Action", "func", "c", "cli", "NUMBER", "Context", "error", "fmt", "NUMBER", "Println", "boom", "I", "say", "return", "error", "NUMBER", "New", "this", "be", "an", "error", "yo", "err", "app", "NUMBER", "Run", "os", "NUMBER", "Args", "if", "err", "nil", "fmt", "NUMBER", "Println", "ERROR", "err", "os", "NUMBER", "Exit", "NUMBER", "Using", "version", "we", "have", "locked", "in", "sh", "NUMBER", "test", "NUMBER", "sh", "go", "build", "NUMBER", "clierr", "boom", "I", "say", "this", "be", "an", "error", "yo", "Error", "be", "NOT", "propogated", "up", "NUMBER", "On", "urfave", "cli", "master", "sh", "NUMBER", "test", "NUMBER", "sh", "go", "build", "NUMBER", "clierr", "boom", "I", "say", "ERROR", "this", "be", "an", "error", "yo", "Error", "be", "propogated", "properly", "NUMBER", "The", "latest", "version", "be", "probably", "what", "we", "expect", "and", "I", "believe", "solves", "the", "problem", "this", "PR", "be", "trying", "to", "fix", "NUMBER", "PR", "to", "get", "latest", "urfave", "cli", "LINK", "Improves", "UX", "by", "display", "call", "ID", "when", "use", "following", "command", "for", "async", "fn", "call", "app", "fn", "Call", "ID", "NUMBER", "BPKQ", "NUMBER", "F", "NUMBER", "WGJ", "NUMBER", "for", "sync", "fn", "call", "app", "fn", "Call", "ID", "NUMBER", "BPKQ", "NUMBER", "NV", "NUMBER", "WGG", "NUMBER", "TAG", "cc", "mhaji", "mhaji", "yeah", "add", "check", "for", "API", "error", "to", "bring", "them", "back", "again", "NUMBER", "It", "ll", "be", "fn", "call", "i", "dont", "exist", "neither", "do", "i", "Error", "App", "not", "find", "oracloud", "i", "d", "say", "call", "ID", "should", "be", "display", "while", "use", "CLI", "for", "sync", "calls", "because", "we", "already", "doing", "this", "for", "async", "calls", "and", "use", "current", "CLI", "especially", "fn", "call", "do", "not", "give", "you", "any", "chance", "to", "get", "call", "ID", "which", "be", "quite", "necessary", "for", "further", "problem", "investigations", "it", "may", "be", "simple", "without", "it", "if", "you", "have", "NUMBER", "NUMBER", "calls", "at", "max", "but", "when", "you", "have", "NUMBER", "k", "calls", "it", "becomes", "problematic", "NUMBER", "So", "display", "call", "ID", "wherever", "it", "be", "necessary", "be", "good", "value", "add", "NUMBER", "mhaji", "this", "be", "not", "necessary", "because", "we", "don", "t", "know", "how", "to", "react", "to", "status", "code", "so", "JSON", "decoding", "actually", "helps", "a", "lot", "here", "because", "if", "everything", "OK", "HTTP", "NUMBER", "NUMBER", "NUMBER", "etc", "NUMBER", "we", "d", "have", "structure", "filled", "with", "non", "empty", "callID", "if", "everything", "else", "HTTP", "NUMBER", "NUMBER", "NUMBER", "etc", "NUMBER", "structure", "will", "have", "error", "filled", "what", "comes", "in", "error", "message", "blah", "NUMBER", "So", "no", "need", "to", "double", "check", "status", "code", "NUMBER", "CLI", "flag", "looks", "better", "option", "check", "latest", "change", "NUMBER", "mhaji", "we", "can", "do", "opposite", "thing", "be", "verbose", "by", "default", "and", "mute", "when", "flag", "specified", "NUMBER", "Ok", "will", "change", "but", "still", "not", "convinced", "regard", "stderr", "why", "stdout", "be", "bad", "for", "this", "mhaji", "oracloud", "do", "check", "latest", "change", "NUMBER", "Not", "to", "add", "more", "to", "an", "already", "lengthy", "discussion", "but", "I", "think", "we", "should", "treat", "sync", "and", "async", "differently", "NUMBER", "The", "only", "important", "information", "you", "can", "get", "from", "an", "async", "call", "be", "the", "call_id", "and", "you", "would", "probably", "always", "want", "to", "get", "that", "back", "NUMBER", "For", "sync", "you", "don", "t", "really", "need", "or", "want", "the", "call_id", "and", "has", "very", "little", "value", "since", "you", "get", "the", "actual", "result", "instead", "NUMBER", "It", "s", "similar", "to", "docker", "run", "with", "and", "without", "d", "flag", "NUMBER", "eg", "sh", "docker", "run", "rm", "treeder", "hello", "Hello", "World", "docker", "run", "rm", "d", "treeder", "hello", "b", "NUMBER", "b", "NUMBER", "a", "NUMBER", "d", "NUMBER", "bbb", "NUMBER", "f", "NUMBER", "d", "NUMBER", "e", "NUMBER", "a", "NUMBER", "c", "NUMBER", "f", "NUMBER", "dd", "NUMBER", "a", "NUMBER", "b", "NUMBER", "d", "NUMBER", "cd", "NUMBER", "f", "NUMBER", "b", "NUMBER", "I", "think", "we", "should", "do", "something", "like", "that", "NUMBER", "fn", "call", "should", "also", "behave", "identical", "to", "fn", "run", "which", "also", "doesn", "t", "add", "any", "extra", "output", "other", "than", "the", "output", "of", "the", "container", "NUMBER", "mhaji", "you", "should", "see", "the", "logs", "in", "the", "output", "NUMBER", "I", "take", "that", "back", "you", "see", "the", "logs", "on", "fn", "run", "NUMBER", "Good", "point", "NUMBER", "treeder", "do", "NUMBER", "Now", "it", "has", "the", "same", "behaviour", "as", "docker", "run", "as", "you", "ve", "mention", "above", "NUMBER", "Well", "I", "m", "not", "sure", "my", "comment", "applies", "anymore", "per", "mhaji", "s", "comment", "NUMBER", "How", "do", "you", "see", "the", "logs", "of", "a", "sync", "function", "What", "if", "it", "printed", "the", "call", "id", "only", "if", "there", "s", "an", "error", "Shows", "the", "call", "id", "and", "the", "error", "message", "then", "user", "can", "pull", "up", "the", "logs", "with", "fn", "logs", "NUMBER", "treeder", "In", "order", "to", "see", "sync", "call", "logs", "we", "need", "to", "get", "call", "ID", "to", "use", "fn", "calls", "get", "TAG", "TAG", "to", "get", "them", "NUMBER", "What", "if", "it", "printed", "the", "call", "id", "only", "if", "there", "s", "an", "error", "For", "both", "sync", "async", "if", "error", "there", "be", "couple", "types", "of", "error", "that", "may", "appear", "we", "might", "not", "get", "call", "ID", "at", "least", "this", "be", "how", "API", "server", "acts", "NUMBER", "So", "i", "d", "say", "that", "example", "that", "you", "ve", "brought", "docker", "run", "be", "pretty", "good", "example", "because", "semantically", "fn", "CLI", "be", "very", "similar", "to", "docker", "commands", "so", "if", "docker", "CLI", "be", "good", "in", "terms", "of", "UX", "then", "following", "the", "same", "steps", "would", "also", "give", "us", "certain", "benefit", "IMHO", "NUMBER", "denismakogon", "still", "doesn", "t", "help", "us", "debug", "sync", "calls", "on", "a", "remote", "server", "NUMBER", "Fine", "if", "it", "s", "all", "local", "but", "debugging", "remote", "requires", "the", "call_id", "like", "you", "said", "NUMBER", "treeder", "what", "kind", "of", "debugging", "problem", "you", "be", "referring", "to", "mhaji", "i", "think", "Travis", "be", "out", "for", "couple", "days", "or", "so", "NUMBER", "This", "patch", "already", "writes", "call", "ID", "to", "stderr", "now", "we", "need", "to", "agree", "would", "call", "ID", "be", "muted", "by", "default", "or", "not", "NUMBER", "write", "to", "STDERR", "do", "LINK", "diff", "NUMBER", "f", "NUMBER", "b", "NUMBER", "f", "NUMBER", "b", "NUMBER", "a", "NUMBER", "a", "NUMBER", "c", "NUMBER", "b", "NUMBER", "ea", "NUMBER", "cd", "NUMBER", "R", "NUMBER", "NUMBER", "with", "other", "stuff", "i", "m", "fine", "with", "what", "we", "have", "here", "NUMBER", "oracloud", "sure", "NUMBER", "mhaji", "if", "you", "be", "use", "async", "execution", "then", "you", "ll", "get", "your", "call", "ID", "as", "part", "of", "response", "NUMBER", "But", "if", "you", "re", "use", "sync", "then", "you", "ll", "get", "one", "in", "HTTP", "response", "headers", "FN_CALL_ID", "assuming", "you", "ll", "use", "any", "kind", "of", "http", "clients", "but", "not", "fn", "CLI", "for", "calling", "funcs", "NUMBER", "In", "order", "to", "get", "call", "objects", "you", "might", "try", "following", "command", "fn", "calls", "list", "help", "NAME", "fn", "calls", "list", "list", "all", "calls", "for", "specific", "app", "route", "route", "be", "optional", "USAGE", "fn", "calls", "list", "TAG", "route", "mhaji", "check", "this", "one", "LINK", "Similar", "to", "NUMBER", "and", "NUMBER", "we", "need", "at", "least", "Python", "NUMBER", "wrapper", "exist", "NUMBER", "I", "ve", "made", "some", "code", "already", "LINK", "py", "Need", "further", "test", "NUMBER", "Got", "certain", "weird", "behaviour", "NUMBER", "Got", "two", "function", "hot", "LINK", "py", "tree", "master", "samples", "hot", "and", "cold", "LINK", "py", "tree", "master", "samples", "cold", "NUMBER", "Hot", "function", "run", "fine", "use", "following", "commands", "HOT", "True", "go", "run", "NUMBER", "http_requests", "NUMBER", "go", "python", "NUMBER", "app", "NUMBER", "py", "for", "hot", "fn", "build", "HOT", "True", "go", "run", "NUMBER", "http_requests", "NUMBER", "go", "fn", "run", "for", "hot", "All", "seems", "to", "be", "Ok", "but", "when", "trying", "to", "deploy", "function", "and", "run", "hot", "function", "it", "stuck", "When", "extending", "timeout", "up", "to", "NUMBER", "seconds", "error", "appears", "in", "logs", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Finding", "route", "on", "datastore", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "testapp", "call_id", "NUMBER", "BPY", "NUMBER", "TZTZ", "NUMBER", "WGC", "NUMBER", "path", "hotfnpy", "cold", "route", "hotfnpy", "cold", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Got", "route", "from", "datastore", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "testapp", "call_id", "NUMBER", "BPY", "NUMBER", "TZTZ", "NUMBER", "WGC", "NUMBER", "image", "denismakogon", "hotfnpy", "cold", "NUMBER", "path", "hotfnpy", "cold", "route", "hotfnpy", "cold", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Starting", "container", "execution", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "testapp", "call_id", "NUMBER", "BPY", "NUMBER", "TZTZ", "NUMBER", "WGC", "NUMBER", "container", "task", "NUMBER", "NUMBER", "BPY", "NUMBER", "TZTZ", "NUMBER", "WGC", "NUMBER", "image", "denismakogon", "hotfnpy", "cold", "NUMBER", "route", "hotfnpy", "cold", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "error", "msg", "error", "streaming", "docker", "stats", "for", "task", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "testapp", "call_id", "NUMBER", "BPY", "NUMBER", "TZTZ", "NUMBER", "WGC", "NUMBER", "container", "task", "NUMBER", "NUMBER", "BPY", "NUMBER", "TZTZ", "NUMBER", "WGC", "NUMBER", "error", "net", "http", "request", "canceled", "Client", "NUMBER", "Timeout", "exceeded", "while", "reading", "body", "image", "denismakogon", "hotfnpy", "cold", "NUMBER", "route", "hotfnpy", "cold", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "error", "msg", "error", "remove", "container", "container", "task", "NUMBER", "NUMBER", "BPY", "NUMBER", "TZTZ", "NUMBER", "WGC", "NUMBER", "error", "context", "canceled", "rdallman", "treeder", "Not", "sure", "what", "causes", "problem", "here", "yet", "NUMBER", "rdallman", "So", "i", "tried", "debugging", "a", "lot", "and", "it", "s", "not", "easy", "here", "s", "why", "if", "error", "streaming", "docker", "stats", "for", "task", "appears", "then", "no", "call", "or", "log", "object", "created", "it", "might", "happen", "that", "function", "writes", "to", "STDERR", "multiple", "times", "and", "function", "fail", "with", "some", "unexpect", "unhandle", "error", "log", "be", "not", "going", "to", "be", "created", "we", "might", "consider", "to", "use", "docker", "logs", "TAG", "instead", "of", "what", "we", "have", "in", "func", "logger", "create", "call", "object", "before", "execution", "and", "update", "later", "this", "will", "require", "to", "introduce", "few", "more", "statuses", "except", "those", "we", "already", "have", "at", "least", "we", "d", "know", "where", "we", "stuck", "NUMBER", "Ok", "to", "be", "clear", "here", "s", "what", "happens", "task", "times", "out", "no", "matter", "how", "big", "timeout", "be", "function", "do", "not", "write", "any", "logs", "NUMBER", "Test", "function", "LINK", "py", "tree", "master", "samples", "hot", "fn", "build", "HOT", "True", "go", "run", "NUMBER", "http_requests", "NUMBER", "go", "fn", "run", "works", "HOT", "True", "go", "run", "NUMBER", "http_requests", "NUMBER", "go", "docker", "run", "rm", "i", "denismakogon", "hotfnpy", "hot", "works", "rdallman", "did", "the", "task", "produce", "any", "logs", "Nope", "code", "inside", "function", "will", "write", "stdin", "to", "stderr", "LINK", "py", "blob", "master", "samples", "hot", "app", "NUMBER", "py", "L", "NUMBER", "in", "first", "place", "before", "parsing", "NUMBER", "you", "can", "comment", "out", "the", "line", "to", "remove", "the", "container", "and", "run", "it", "locally", "again", "and", "then", "check", "docker", "logs", "Already", "tried", "nothing", "NUMBER", "be", "the", "HOT", "env", "var", "be", "correctly", "pass", "into", "the", "function", "HOT", "env", "variable", "be", "not", "for", "function", "rather", "than", "for", "script", "LINK", "py", "blob", "master", "samples", "http_requests", "NUMBER", "go", "that", "generates", "NUMBER", "or", "more", "HTTP", "request", "and", "writes", "them", "to", "STDOUT", "that", "be", "piped", "to", "STDIN", "to", "curl", "fn", "CLI", "or", "whatever", "NUMBER", "do", "the", "task", "run", "at", "all", "Task", "gets", "start", "and", "then", "gets", "cancelled", "by", "timeout", "or", "if", "timeout", "upped", "to", "NUMBER", "s", "following", "logs", "observed", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Finding", "route", "on", "datastore", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "testapp", "call_id", "NUMBER", "BPY", "NUMBER", "TZTZ", "NUMBER", "WGC", "NUMBER", "path", "hotfnpy", "cold", "route", "hotfnpy", "cold", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Got", "route", "from", "datastore", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "testapp", "call_id", "NUMBER", "BPY", "NUMBER", "TZTZ", "NUMBER", "WGC", "NUMBER", "image", "denismakogon", "hotfnpy", "cold", "NUMBER", "path", "hotfnpy", "cold", "route", "hotfnpy", "cold", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Starting", "container", "execution", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "testapp", "call_id", "NUMBER", "BPY", "NUMBER", "TZTZ", "NUMBER", "WGC", "NUMBER", "container", "task", "NUMBER", "NUMBER", "BPY", "NUMBER", "TZTZ", "NUMBER", "WGC", "NUMBER", "image", "denismakogon", "hotfnpy", "cold", "NUMBER", "route", "hotfnpy", "cold", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "error", "msg", "error", "streaming", "docker", "stats", "for", "task", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "testapp", "call_id", "NUMBER", "BPY", "NUMBER", "TZTZ", "NUMBER", "WGC", "NUMBER", "container", "task", "NUMBER", "NUMBER", "BPY", "NUMBER", "TZTZ", "NUMBER", "WGC", "NUMBER", "error", "net", "http", "request", "canceled", "Client", "NUMBER", "Timeout", "exceeded", "while", "reading", "body", "image", "denismakogon", "hotfnpy", "cold", "NUMBER", "route", "hotfnpy", "cold", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "error", "msg", "error", "remove", "container", "container", "task", "NUMBER", "NUMBER", "BPY", "NUMBER", "TZTZ", "NUMBER", "WGC", "NUMBER", "error", "context", "canceled", "Here", "s", "what", "i", "have", "NUMBER", "Version", "check", "happens", "at", "start", "and", "every", "time", "attempting", "to", "add", "new", "node", "via", "API", "Implements", "NUMBER", "rdallman", "waiting", "your", "feedback", "thanks", "NUMBER", "Also", "add", "Go", "boilerplate", "for", "fn", "init", "if", "you", "pass", "in", "the", "runtime", "go", "flag", "NUMBER", "eg", "fn", "init", "runtime", "go", "treeder", "hello", "go", "close", "NUMBER", "looks", "like", "an", "error", "to", "me", "fatal", "logs", "will", "exit", "so", "don", "t", "see", "what", "s", "wrong", "here", "NUMBER", "also", "see", "a", "SIGINT", "next", "time", "you", "could", "just", "fix", "it", "if", "it", "s", "really", "this", "easy", "relate", "to", "this", "LINK", "io", "function", "issue", "NUMBER", "it", "would", "be", "really", "nice", "if", "we", "had", "a", "function", "that", "layered", "flags", "over", "the", "func", "file", "if", "it", "s", "not", "present", "instead", "of", "having", "to", "add", "a", "flag", "to", "ignore", "the", "func", "file", "altogether", "but", "at", "least", "this", "gives", "the", "capability", "so", "we", "can", "merge", "it", "imo", "NUMBER", "made", "some", "comments", "on", "LINK", "oops", "NUMBER", "moving", "over", "some", "of", "this", "can", "be", "quickly", "cleaned", "up", "but", "ultimately", "we", "have", "a", "much", "larger", "issue", "fix", "async", "NUMBER", "we", "need", "to", "rethink", "whole", "thing", "basically", "NUMBER", "for", "one", "all", "tasks", "share", "NUMBER", "queue", "so", "it", "won", "t", "scale", "at", "all", "NUMBER", "for", "two", "since", "we", "only", "use", "one", "queue", "we", "either", "have", "to", "try", "to", "reserve", "for", "the", "task", "timeout", "some", "interval", "to", "give", "enough", "time", "to", "delete", "the", "message", "after", "the", "task", "times", "out", "or", "we", "need", "NUMBER", "levels", "of", "queues", "so", "that", "we", "can", "delete", "one", "when", "we", "pick", "up", "a", "task", "and", "one", "when", "the", "task", "gets", "actually", "run", "so", "that", "we", "can", "ensure", "at", "least", "once", "execution", "which", "will", "require", "reworking", "the", "queue", "system", "we", "use", "NUMBER", "this", "means", "probably", "reworking", "how", "we", "run", "async", "tasks", "and", "possibly", "add", "more", "semantics", "onto", "the", "message", "queue", "backends", "NUMBER", "async", "tasks", "will", "likely", "need", "a", "way", "to", "ack", "that", "they", "ve", "get", "a", "job", "to", "ensure", "they", "have", "exclusive", "access", "and", "then", "we", "need", "a", "way", "for", "them", "to", "be", "able", "to", "delete", "after", "the", "task", "has", "actually", "run", "NUMBER", "hoping", "to", "have", "a", "doc", "up", "next", "week", "w", "redesign", "of", "backend", "NUMBER", "we", "need", "to", "change", "how", "tasks", "get", "start", "altogether", "due", "to", "timeout", "issue", "for", "sync", "and", "async", "way", "that", "runner", "be", "write", "atm", "NUMBER", "will", "post", "doc", "once", "ready", "this", "change", "the", "behavior", "of", "hot", "container", "NUMBER", "we", "be", "no", "longer", "populating", "a", "hot", "container", "with", "all", "of", "the", "env", "vars", "from", "the", "first", "request", "to", "start", "up", "that", "hot", "container", "NUMBER", "this", "will", "only", "populate", "the", "container", "with", "any", "vars", "that", "be", "defined", "on", "the", "app", "or", "route", "NUMBER", "NUMBER", "when", "env", "vars", "be", "change", "on", "the", "route", "or", "app", "we", "will", "now", "start", "up", "a", "new", "hot", "container", "that", "contains", "those", "change", "NUMBER", "NUMBER", "fix", "a", "bug", "where", "we", "could", "have", "a", "collision", "if", "the", "image", "and", "path", "name", "created", "one", "e", "NUMBER", "g", "NUMBER", "yo", "foo", "oze", "yo", "latest", "collides", "with", "yo", "fo", "and", "ooze", "yo", "latest", "if", "all", "other", "field", "be", "held", "constant", "since", "we", "re", "name", "space", "with", "app", "name", "in", "theory", "it", "would", "happen", "to", "the", "same", "user", "though", "we", "were", "relying", "on", "a", "comma", "delimiter", "there", "not", "great", "NUMBER", "now", "we", "use", "NULL", "bytes", "which", "should", "be", "hard", "to", "get", "in", "through", "a", "json", "api", "i", "add", "a", "sha", "NUMBER", "to", "keep", "the", "size", "of", "the", "soon", "to", "be", "very", "large", "map", "down", "i", "don", "t", "expect", "collisions", "but", "well", "it", "s", "a", "hash", "function", "NUMBER", "a", "small", "note", "that", "we", "could", "add", "a", "few", "things", "to", "the", "hot", "container", "that", "will", "not", "change", "on", "a", "request", "basis", "such", "as", "app_name", "format", "and", "route", "but", "it", "s", "a", "bit", "pedantic", "NUMBER", "ultimately", "it", "s", "confusing", "imo", "that", "we", "have", "a", "different", "set", "of", "vars", "in", "the", "env", "and", "in", "the", "request", "itself", "for", "hot", "which", "be", "unavoidable", "unless", "we", "choose", "to", "omit", "setting", "env", "vars", "entirely", "but", "it", "seems", "to", "be", "what", "the", "people", "want", "lmk", "people", "if", "otherwise", "NUMBER", "close", "NUMBER", "cold", "be", "unchanged", "obviously", "NUMBER", "here", "s", "a", "hot", "example", "now", "API_URL", "LINK", "fn", "apps", "config", "set", "myapp", "MYKEY", "MYVALUE", "myapp", "update", "MYKEY", "with", "MYVALUE", "curl", "d", "yodawg", "localhost", "NUMBER", "r", "myapp", "hotyodawg", "OS", "PATH", "usr", "local", "sbin", "usr", "local", "bin", "usr", "sbin", "usr", "bin", "sbin", "bin", "OS", "HOSTNAME", "NUMBER", "fb", "NUMBER", "ad", "NUMBER", "c", "NUMBER", "OS", "MYKEY", "MYVALUE", "OS", "HOME", "root", "Hello", "yodawg", "ENV", "Fn_format", "string", "http", "ENV", "Format", "string", "http", "ENV", "Header_content_length", "string", "NUMBER", "ENV", "Header_content_type", "string", "application", "x", "www", "form", "urlencoded", "ENV", "Header_user_agent", "string", "curl", "NUMBER", "ENV", "Request_url", "string", "http", "localhost", "NUMBER", "r", "myapp", "hotyodawg", "ENV", "App_name", "string", "myapp", "ENV", "Route", "string", "hotyodawg", "ENV", "Task", "Id", "string", "NUMBER", "BP", "NUMBER", "ETD", "NUMBER", "WG", "NUMBER", "ENV", "Mykey", "string", "MYVALUE", "ENV", "Call_id", "string", "NUMBER", "BP", "NUMBER", "ETD", "NUMBER", "WG", "NUMBER", "ENV", "Content", "Length", "string", "NUMBER", "ENV", "Header_accept", "string", "ENV", "Method", "string", "POST", "API_URL", "LINK", "fn", "apps", "config", "set", "myapp", "MYBOO", "MYVALUE", "myapp", "update", "MYBOO", "with", "MYVALUE", "curl", "d", "yodawg", "localhost", "NUMBER", "r", "myapp", "hotyodawg", "OS", "PATH", "usr", "local", "sbin", "usr", "local", "bin", "usr", "sbin", "usr", "bin", "sbin", "bin", "OS", "HOSTNAME", "NUMBER", "fb", "NUMBER", "ad", "NUMBER", "c", "NUMBER", "OS", "MYKEY", "MYVALUE", "OS", "MYBOO", "MYVALUE", "OS", "HOME", "root", "Hello", "yodawg", "ENV", "Header_accept", "string", "ENV", "Myboo", "string", "MYVALUE", "ENV", "Request_url", "string", "http", "localhost", "NUMBER", "r", "myapp", "hotyodawg", "ENV", "App_name", "string", "myapp", "ENV", "Content", "Length", "string", "NUMBER", "ENV", "Route", "string", "hotyodawg", "ENV", "Call_id", "string", "NUMBER", "BP", "NUMBER", "RQ", "NUMBER", "WGA", "NUMBER", "ENV", "Fn_format", "string", "http", "ENV", "Format", "string", "http", "ENV", "Header_content_type", "string", "application", "x", "www", "form", "urlencoded", "ENV", "Header_user_agent", "string", "curl", "NUMBER", "ENV", "Mykey", "string", "MYVALUE", "ENV", "Header_content_length", "string", "NUMBER", "ENV", "Method", "string", "POST", "ENV", "Task", "Id", "string", "NUMBER", "BP", "NUMBER", "RQ", "NUMBER", "WGA", "NUMBER", "treeder", "i", "ll", "rope", "others", "from", "gl", "here", "feedback", "review", "please", "good", "news", "we", "have", "no", "test", "for", "hot", "function", "at", "all", "that", "i", "can", "find", "no", "i", "don", "t", "think", "my", "patch", "relate", "to", "fix", "a", "certain", "behavior", "be", "a", "great", "time", "to", "ask", "me", "to", "go", "add", "an", "entire", "test", "harness", "NUMBER", "if", "our", "test", "were", "somewhat", "sane", "i", "d", "be", "happy", "to", "add", "one", "NUMBER", "turns", "out", "they", "be", "not", "NUMBER", "i", "m", "more", "concerned", "with", "other", "tasks", "at", "the", "moment", "NUMBER", "if", "you", "want", "to", "be", "difficult", "feel", "free", "to", "close", "this", "patch", "as", "I", "have", "no", "intention", "of", "doing", "that", "work", "here", "NUMBER", "p", "NUMBER", "s", "NUMBER", "i", "don", "t", "think", "having", "test", "images", "be", "a", "great", "way", "to", "test", "really", "NUMBER", "we", "should", "be", "able", "to", "mock", "just", "about", "everything", "but", "the", "code", "at", "the", "moment", "do", "not", "make", "this", "easy", "it", "be", "a", "weeks", "long", "task", "NUMBER", "edit", "specifically", "the", "issue", "be", "as", "it", "relate", "to", "mocking", "worker", "NUMBER", "go", "and", "having", "a", "mock", "able", "runner", "hot", "executor", "where", "we", "can", "check", "env", "vars", "input", "and", "output", "and", "api", "layer", "even", "bigger", "doozy", "than", "worker", "NUMBER", "go", "rdallman", "thanks", "can", "you", "open", "separate", "ticket", "for", "write", "test", "for", "this", "particular", "case", "i", "might", "take", "it", "NUMBER", "Anyways", "LGTM", "NUMBER", "we", "should", "limit", "the", "timeout", "specifically", "on", "sync", "request", "so", "that", "the", "LB", "won", "t", "time", "out", "to", "something", "NUMBER", "for", "sync", "maybe", "NUMBER", "minutes", "be", "reasonable", "idk", "NUMBER", "for", "async", "we", "can", "probably", "allow", "arbitrary", "length", "Sync", "should", "probably", "max", "at", "NUMBER", "seconds", "to", "match", "ELB", "Async", "should", "probably", "set", "an", "arbitrary", "limit", "for", "now", "to", "try", "to", "enforce", "best", "practices", "NUMBER", "Can", "always", "increase", "NUMBER", "Can", "t", "decrease", "NUMBER", "maybe", "we", "should", "enforce", "these", "limits", "from", "fn", "service", "and", "leave", "the", "OSS", "version", "flexible", "i", "feel", "sweaty", "just", "thinking", "about", "the", "plumbing", "already", "NUMBER", "NUMBER", "let", "operator", "configure", "NUMBER", "But", "how", "about", "defaults", "of", "NUMBER", "NUMBER", "like", "you", "said", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ideas", "discussed", "LINK", "include", "change", "in", "release", "note", "file", "w", "each", "PR", "others", "and", "by", "soon", "i", "meant", "many", "months", "later", "NUMBER", "assigning", "to", "meself", "and", "MMW", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Currently", "we", "have", "these", "endpoints", "v", "NUMBER", "engine", "NUMBER", "Group", "v", "NUMBER", "v", "NUMBER", "Use", "s", "NUMBER", "middlewareWrapperFunc", "ctx", "v", "NUMBER", "GET", "apps", "s", "NUMBER", "handleAppList", "v", "NUMBER", "POST", "apps", "s", "NUMBER", "handleAppCreate", "v", "NUMBER", "GET", "apps", "app", "s", "NUMBER", "handleAppGet", "v", "NUMBER", "PATCH", "apps", "app", "s", "NUMBER", "handleAppUpdate", "v", "NUMBER", "DELETE", "apps", "app", "s", "NUMBER", "handleAppDelete", "v", "NUMBER", "GET", "routes", "s", "NUMBER", "handleRouteList", "v", "NUMBER", "GET", "calls", "call", "s", "NUMBER", "handleCallGet", "v", "NUMBER", "GET", "calls", "call", "log", "s", "NUMBER", "handleCallLogGet", "v", "NUMBER", "DELETE", "calls", "call", "log", "s", "NUMBER", "handleCallLogDelete", "apps", "v", "NUMBER", "Group", "apps", "app", "apps", "NUMBER", "GET", "routes", "s", "NUMBER", "handleRouteList", "apps", "NUMBER", "POST", "routes", "s", "NUMBER", "handleRouteCreateOrUpdate", "apps", "NUMBER", "GET", "routes", "route", "s", "NUMBER", "handleRouteGet", "apps", "NUMBER", "PATCH", "routes", "route", "s", "NUMBER", "handleRouteCreateOrUpdate", "apps", "NUMBER", "PUT", "routes", "route", "s", "NUMBER", "handleRouteCreateOrUpdate", "apps", "NUMBER", "DELETE", "routes", "route", "s", "NUMBER", "handleRouteDelete", "apps", "NUMBER", "GET", "calls", "route", "s", "NUMBER", "handleCallList", "In", "order", "to", "simplify", "our", "Implementation", "of", "auth", "and", "make", "the", "api", "more", "uniform", "I", "suggest", "that", "it", "be", "this", "v", "NUMBER", "engine", "NUMBER", "Group", "v", "NUMBER", "v", "NUMBER", "Use", "s", "NUMBER", "middlewareWrapperFunc", "ctx", "v", "NUMBER", "GET", "apps", "s", "NUMBER", "handleAppList", "v", "NUMBER", "POST", "apps", "s", "NUMBER", "handleAppCreate", "v", "NUMBER", "GET", "apps", "app", "s", "NUMBER", "handleAppGet", "v", "NUMBER", "PATCH", "apps", "app", "s", "NUMBER", "handleAppUpdate", "v", "NUMBER", "DELETE", "apps", "app", "s", "NUMBER", "handleAppDelete", "remove", "this", "v", "NUMBER", "GET", "routes", "s", "NUMBER", "handleRouteList", "apps", "v", "NUMBER", "Group", "apps", "app", "apps", "NUMBER", "GET", "routes", "s", "NUMBER", "handleRouteList", "apps", "NUMBER", "POST", "routes", "s", "NUMBER", "handleRouteCreateOrUpdate", "apps", "NUMBER", "GET", "routes", "route", "s", "NUMBER", "handleRouteGet", "apps", "NUMBER", "PATCH", "routes", "route", "s", "NUMBER", "handleRouteCreateOrUpdate", "apps", "NUMBER", "PUT", "routes", "route", "s", "NUMBER", "handleRouteCreateOrUpdate", "apps", "NUMBER", "DELETE", "routes", "route", "s", "NUMBER", "handleRouteDelete", "apps", "NUMBER", "GET", "calls", "route", "s", "NUMBER", "handleCallList", "apps", "NUMBER", "GET", "calls", "call", "s", "NUMBER", "handleCallGet", "apps", "NUMBER", "GET", "calls", "call", "log", "s", "NUMBER", "handleCallLogGet", "apps", "NUMBER", "DELETE", "calls", "call", "log", "s", "NUMBER", "handleCallLogDelete", "This", "will", "make", "things", "much", "easier", "to", "manage", "as", "well", "as", "make", "no", "sql", "really", "required", "on", "most", "calls", "to", "do", "auth", "for", "the", "commands", "NUMBER", "This", "will", "also", "prevent", "snowflakes", "for", "auth", "in", "the", "future", "as", "almost", "all", "commands", "be", "on", "things", "that", "be", "at", "the", "core", "owned", "by", "an", "app", "NUMBER", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "the", "description", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "marked", "this", "issue", "as", "relate", "to", "function", "service", "NUMBER", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "marked", "this", "issue", "as", "relate", "to", "function", "service", "NUMBER", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "remove", "the", "relation", "with", "function", "service", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "not", "elaborated", "on", "initially", "but", "the", "big", "benefit", "here", "be", "that", "we", "don", "t", "have", "to", "e", "NUMBER", "g", "NUMBER", "for", "calls", "call", "look", "up", "the", "resource", "see", "what", "app", "that", "call", "falls", "under", "and", "then", "check", "that", "the", "token", "provide", "be", "authenticated", "for", "that", "resource", "NUMBER", "if", "we", "put", "all", "the", "urls", "under", "apps", "app", "then", "we", "can", "authenticate", "without", "having", "to", "look", "up", "the", "resource", "be", "authenticated", "against", "NUMBER", "obviously", "as", "an", "attack", "vector", "spamming", "calls", "that", "may", "exist", "that", "you", "don", "t", "have", "access", "to", "be", "taxing", "on", "the", "db", "too", "can", "still", "spam", "miss", "ones", "NUMBER", "the", "main", "benefit", "be", "code", "clarity", "we", "don", "t", "have", "to", "plumb", "auth", "down", "into", "each", "handler", "we", "can", "do", "it", "in", "front", "of", "each", "handler", "uniformly", "and", "it", "will", "fall", "out", "NUMBER", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "You", "be", "right", "rdallman", "I", "did", "not", "specify", "that", "enough", "word", "that", "well", "NUMBER", "Thank", "you", "NUMBER", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "treeder", "You", "good", "with", "this", "NUMBER", "Was", "going", "to", "start", "on", "it", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "makes", "sense", "NUMBER", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "K", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "merge", "request", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Here", "be", "log", "from", "two", "runs", "in", "a", "row", "of", "the", "same", "function", "NUMBER", "notice", "how", "it", "went", "from", "version", "NUMBER", "to", "NUMBER", "VERY", "strange", "NUMBER", "This", "shouldn", "t", "happen", "NUMBER", "fn", "api", "deployment", "NUMBER", "gtqdn", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BNRMBQNW", "NUMBER", "WJJ", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "exec_time", "route", "hello", "type", "time", "value", "NUMBER", "ms", "fn", "api", "deployment", "NUMBER", "pnnl", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BNRMBVF", "NUMBER", "WJT", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "request", "route", "hello", "type", "count", "value", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "issue", "NUMBER", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "marked", "this", "issue", "as", "relate", "to", "NUMBER", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "remove", "the", "relation", "with", "NUMBER", "this", "has", "be", "resolve", "in", "c", "NUMBER", "eaa", "NUMBER", "d", "NUMBER", "f", "NUMBER", "d", "NUMBER", "a", "NUMBER", "ee", "NUMBER", "f", "NUMBER", "c", "NUMBER", "fa", "NUMBER", "f", "NUMBER", "right", "carimura", "reopen", "if", "you", "still", "see", "this", "NUMBER", "In", "gitlab", "by", "jan_grant", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Not", "sure", "if", "this", "be", "a", "function", "of", "go", "s", "CLI", "parsing", "library", "but", "fn", "build", "gibberish", "prints", "a", "usage", "message", "then", "exits", "NUMBER", "Most", "unix", "utilities", "exit", "non", "zero", "if", "they", "can", "t", "parse", "their", "argument", "NUMBER", "This", "be", "kind", "of", "a", "wash", "your", "dog", "first", "low", "priority", "NUMBER", "In", "gitlab", "by", "will_p", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "This", "be", "a", "bug", "in", "the", "urfave", "cli", "library", "an", "issue", "has", "be", "raise", "with", "them", "LINK", "Yep", "looks", "like", "flag", "error", "be", "propogated", "up", "now", "too", "NUMBER", "Old", "sh", "fn", "build", "gibberish", "Incorrect", "Usage", "flag", "provide", "but", "not", "defined", "gibberish", "NAME", "fn", "build", "build", "function", "version", "USAGE", "fn", "build", "command", "options", "argument", "NUMBER", "OPTIONS", "v", "verbose", "mode", "no", "cache", "Don", "t", "use", "docker", "cache", "New", "sh", "NUMBER", "fn", "build", "gibberish", "Incorrect", "Usage", "flag", "provide", "but", "not", "defined", "gibberish", "NAME", "fn", "build", "build", "function", "version", "USAGE", "fn", "build", "command", "options", "argument", "NUMBER", "OPTIONS", "v", "verbose", "mode", "no", "cache", "Don", "t", "use", "docker", "cache", "Error", "occur", "flag", "provide", "but", "not", "defined", "gibberish", "exiting", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Add", "pagination", "to", "all", "list", "endpoints", "apps", "routes", "calls", "etc", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Based", "on", "LINK", "as", "part", "of", "API", "response", "we", "should", "return", "a", "link", "to", "next", "and", "previois", "data", "sets", "similar", "to", "what", "Facebook", "do", "with", "its", "GraphQL", "apps", "NUMBER", "next", "NUMBER", "priv", "NUMBER", "Do", "we", "plan", "to", "support", "the", "same", "pattern", "AFAIK", "pagination", "in", "ReST", "API", "supposed", "to", "be", "based", "on", "some", "kind", "of", "ordering", "sorting", "objects", "to", "let", "them", "be", "queried", "by", "chunks", "NUMBER", "So", "my", "question", "be", "what", "would", "be", "the", "ordering", "sorting", "field", "for", "apps", "what", "would", "be", "the", "ordering", "sorting", "field", "for", "routes", "It", "s", "obvious", "that", "for", "calls", "and", "logs", "we", "have", "timestamps", "completed_at", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "I", "m", "not", "sure", "about", "having", "the", "links", "seems", "kind", "of", "wasteful", "but", "I", "think", "we", "should", "use", "cursors", "instead", "of", "page", "numbers", "NUMBER", "Like", "Twitter", "LINK", "and", "Google", "Datastore", "LINK", "datastore", "limit", "go", "or", "LINK", "NUMBER", "So", "each", "query", "will", "return", "the", "results", "plus", "next_cursor", "and", "user", "pass", "in", "that", "next_cursor", "value", "to", "the", "next", "request", "to", "continue", "the", "results", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "For", "ordering", "I", "d", "say", "alphabetical", "for", "apps", "and", "routes", "calls", "and", "logs", "by", "date", "descending", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "If", "CLI", "args", "take", "precedence", "then", "they", "should", "work", "w", "o", "having", "the", "lower", "priority", "values", "present", "NUMBER", "fn", "routes", "u", "i", "carimura", "resize", "NUMBER", "NUMBER", "myapp", "resize", "NUMBER", "error", "update", "route", "could", "not", "find", "function", "file", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "commit", "NUMBER", "cd", "NUMBER", "b", "NUMBER", "ca", "NUMBER", "e", "NUMBER", "f", "NUMBER", "cfd", "NUMBER", "b", "NUMBER", "d", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "merge", "request", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Like", "Tom", "Brady", "s", "children", "NUMBER", "XHl", "NUMBER", "c", "uploads", "a", "NUMBER", "f", "NUMBER", "f", "NUMBER", "a", "NUMBER", "c", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "f", "NUMBER", "XHl", "NUMBER", "c", "NUMBER", "gif", "We", "ve", "discussed", "this", "many", "times", "but", "there", "doesn", "t", "seem", "to", "be", "a", "card", "for", "it", "I", "looked", "NUMBER", "It", "seems", "like", "it", "would", "be", "possible", "to", "default", "to", "hot", "regardless", "of", "format", "NUMBER", "Bear", "with", "me", "but", "poke", "holes", "if", "there", "be", "blatant", "issue", "NUMBER", "This", "takes", "care", "of", "NUMBER", "issue", "one", "be", "having", "to", "use", "the", "http", "format", "yes", "even", "with", "easy", "to", "use", "wrappers", "and", "the", "other", "be", "internally", "having", "to", "treat", "hot", "and", "cold", "differently", "in", "our", "server", "code", "NUMBER", "Defaulting", "to", "hot", "will", "still", "basically", "entail", "the", "user", "having", "their", "code", "a", "certain", "way", "ideally", "use", "our", "wrapper", "but", "we", "don", "t", "really", "have", "to", "treat", "the", "two", "that", "much", "differently", "NUMBER", "Ultimately", "we", "_can_", "run", "every", "container", "as", "hot", "it", "s", "just", "that", "if", "not", "code", "as", "such", "the", "container", "will", "so", "happen", "to", "exit", "i", "NUMBER", "e", "NUMBER", "if", "they", "don", "t", "have", "a", "for", "loop", "our", "wrapper", "NUMBER", "what", "this", "means", "be", "that", "as", "long", "as", "we", "don", "t", "queue", "up", "work", "against", "any", "container", "expecting", "it", "to", "run", "more", "things", "then", "that", "s", "ok", "and", "the", "container", "can", "exit", "how", "it", "be", "now", "it", "s", "just", "not", "optimal", "but", "if", "the", "code", "isn", "t", "there", "to", "do", "it", "then", "whatever", "not", "much", "we", "can", "do", "NUMBER", "It", "would", "be", "possible", "for", "us", "to", "use", "docker", "exec", "to", "change", "the", "env", "vars", "between", "executions", "with", "the", "default", "format", "and", "it", "would", "be", "possible", "to", "frame", "STDIN", "with", "EOFs", "be", "there", "other", "concerns", "here", "for", "default", "format", "Would", "this", "give", "us", "a", "lot", "of", "sugar", "I", "think", "this", "would", "give", "us", "two", "things", "really", "not", "having", "to", "make", "the", "distinction", "whether", "a", "function", "be", "hot", "or", "cold", "on", "the", "server", "NUMBER", "that", "be", "not", "having", "to", "change", "the", "configuration", "for", "a", "route", "at", "all", "where", "http", "hot", "NUMBER", "if", "the", "code", "happens", "to", "loop", "great", "NUMBER", "if", "not", "nobody", "cares", "but", "things", "be", "a", "little", "slower", "NUMBER", "this", "would", "make", "it", "so", "if", "the", "user", "just", "update", "their", "code", "they", "don", "t", "have", "to", "change", "format", "on", "their", "route", "NUMBER", "formats", "be", "less", "important", "as", "a", "distinction", "for", "hot", "cold", "NUMBER", "as", "long", "as", "we", "say", "we", "frame", "default", "with", "EOF", "then", "we", "can", "use", "it", "for", "hot", "NUMBER", "obviously", "with", "wrappers", "this", "isn", "t", "such", "a", "big", "deal", "but", "it", "s", "a", "little", "bit", "magic", "to", "have", "to", "set", "your", "format", "to", "http", "even", "though", "your", "code", "isn", "t", "explicitly", "doing", "http", "parsing", "the", "wrapper", "hides", "it", "and", "it", "s", "possible", "right", "now", "even", "to", "have", "a", "cold", "function", "that", "talks", "the", "http", "format", "just", "exit", "instead", "of", "looping", "we", "can", "t", "prevent", "this", "NUMBER", "this", "also", "means", "in", "the", "server", "code", "we", "can", "hit", "the", "same", "execution", "path", "for", "any", "function", "invocation", "instead", "of", "switching", "on", "format", "type", "NUMBER", "possible", "cons", "it", "will", "be", "hard", "to", "tell", "whether", "a", "function", "be", "hot", "or", "cold", "based", "on", "format", "alone", "which", "the", "argument", "could", "be", "made", "be", "already", "the", "case", "with", "http", "anyway", "since", "the", "user", "can", "just", "exit", "obviously", "the", "question", "be", "why", "would", "they", "but", "ignore", "that", "it", "s", "only", "important", "that", "it", "s", "_possible_", "be", "the", "point", "NUMBER", "we", "re", "not", "_really_", "defaulting", "to", "hot", "since", "the", "code", "has", "to", "be", "a", "certain", "way", "maybe", "that", "could", "be", "confusing", "relate", "LINK", "odx", "NUMBER", "oracle", "NUMBER", "com", "odx", "function", "issue", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "cc", "ssmith", "treeder", "others", "In", "gitlab", "by", "ssmith", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rdallman", "I", "can", "t", "say", "I", "completely", "understand", "what", "you", "write", "but", "be", "you", "saying", "that", "hot", "cold", "and", "http", "non", "http", "be", "orthogonal", "and", "that", "hot", "code", "be", "simply", "a", "matter", "of", "whether", "a", "container", "exits", "after", "it", "processes", "input", "Developers", "can", "write", "code", "that", "expects", "a", "http", "request", "text", "or", "raw", "text", "and", "in", "some", "languages", "e", "NUMBER", "g", "NUMBER", "Java", "the", "shim", "can", "figure", "out", "what", "the", "function", "expects", "NUMBER", "In", "Go", "not", "so", "much", "NUMBER", "So", "we", "ll", "need", "a", "way", "to", "specify", "the", "function", "format", "rather", "than", "whether", "it", "be", "hot", "or", "not", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "At", "the", "moment", "use", "http", "be", "the", "way", "to", "qualify", "a", "function", "as", "hot", "thus", "not", "orthogonal", "NUMBER", "But", "yes", "in", "practice", "be", "hot", "be", "simply", "a", "matter", "of", "whether", "a", "container", "exits", "after", "it", "processes", "input", "NUMBER", "I", "think", "that", "this", "be", "confusing", "conflating", "format", "heat", "be", "likely", "something", "worth", "shoring", "up", "for", "everyone", "s", "sake", "NUMBER", "The", "shim", "in", "go", "which", "doesn", "t", "exist", "atm", "can", "make", "assumptions", "based", "on", "the", "format", "as", "well", "the", "issue", "be", "just", "that", "we", "have", "to", "get", "that", "shim", "in", "there", "the", "same", "be", "true", "for", "Java", "in", "that", "they", "have", "to", "at", "least", "include", "the", "fdk", "in", "their", "jar", "or", "w", "e", "java", "be", "calling", "things", "nowadays", "NUMBER", "In", "gitlab", "by", "mhaji", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "cc", "ssmith", "treeder", "Currently", "the", "support", "runtimes", "be", "hardcoded", "into", "the", "fn", "cli", "NUMBER", "There", "be", "some", "support", "for", "add", "another", "runtime", "but", "this", "involves", "supplying", "your", "own", "Dockerfile", "and", "goes", "against", "the", "goal", "of", "abstracting", "Docker", "as", "much", "as", "possible", "I", "believe", "this", "be", "a", "goal", "NUMBER", "I", "m", "creating", "this", "issue", "to", "discuss", "possibilities", "for", "how", "support", "for", "a", "runtime", "can", "be", "plugged", "in", "to", "fn", "rather", "than", "be", "build", "in", "NUMBER", "The", "issue", "now", "be", "that", "change", "to", "a", "runtime", "means", "rolling", "out", "a", "new", "version", "of", "the", "cli", "NUMBER", "In", "gitlab", "by", "ssmith", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Abstracting", "Docker", "from", "runtime", "developers", "be", "not", "the", "goal", "NUMBER", "It", "be", "a", "goal", "with", "regards", "to", "Fn", "users", "NUMBER", "Based", "on", "treeder", "s", "comment", "about", "packaging", "use", "Docker", "the", "boiler", "plate", "generation", "could", "be", "packaged", "as", "an", "image", "that", "be", "registered", "with", "the", "Fn", "CLI", "NUMBER", "I", "can", "envision", "a", "standard", "set", "of", "runtimes", "and", "their", "associate", "images", "specified", "in", "a", "NUMBER", "fn", "config", "file", "like", "java", "build", "fnproject", "java", "dev", "run", "fnproject", "java", "run", "init", "fnproject", "java", "init", "Users", "could", "edit", "this", "file", "directly", "or", "Fn", "cli", "could", "add", "commands", "for", "registering", "runtimes", "NUMBER", "This", "would", "let", "me", "type", "fn", "init", "runtime", "java", "shaunsmith", "foo", "which", "would", "run", "the", "java", "init", "image", "passing", "in", "all", "necessary", "input", "values", "mount", "the", "current", "work", "directory", "for", "output", "and", "generate", "whatever", "boilerplate", "file", "that", "the", "image", "wanted", "into", "the", "current", "work", "directory", "NUMBER", "The", "init", "image", "would", "have", "to", "implement", "a", "defined", "contract", "to", "accept", "input", "NUMBER", "Essentially", "since", "the", "Fn", "Server", "don", "t", "really", "care", "what", "s", "in", "the", "deployed", "container", "the", "Fn", "CLI", "shouldn", "t", "care", "what", "boilerplate", "be", "generate", "or", "how", "it", "s", "generate", "NUMBER", "In", "gitlab", "by", "mhaji", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "cc", "ssmith", "treeder", "Currently", "the", "fn", "CLI", "support", "the", "ability", "to", "allow", "a", "extending", "a", "language", "runtime", "such", "that", "when", "fn", "init", "be", "executed", "some", "boilerplate", "be", "generate", "to", "get", "the", "user", "start", "quickly", "NUMBER", "The", "issue", "at", "the", "moment", "be", "the", "boilerplate", "that", "be", "generate", "be", "tied", "to", "a", "particular", "version", "of", "the", "fn", "CLI", "NUMBER", "We", "need", "a", "mechanism", "for", "each", "runtime", "s", "boilerplate", "to", "be", "maintained", "independently", "of", "the", "fn", "CLI", "NUMBER", "Some", "options", "NUMBER", "Embed", "the", "boilerplate", "in", "a", "Docker", "image", "perhaps", "the", "one", "that", "s", "use", "for", "build", "and", "lay", "it", "on", "the", "host", "filesystem", "NUMBER", "NUMBER", "Host", "the", "boilerplate", "template", "in", "a", "separate", "git", "repo", "NUMBER", "Serverless", "framework", "do", "something", "like", "this", "NUMBER", "In", "gitlab", "by", "mhaji", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Comment", "LINK", "odx", "NUMBER", "oracle", "NUMBER", "com", "odx", "function", "issue", "NUMBER", "note_", "NUMBER", "by", "ssmith", "relevant", "to", "this", "ticket", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "marked", "this", "issue", "as", "relate", "to", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Chad", "Arimura", "NUMBER", "NUMBER", "not", "fn", "deploy", "s", "increment", "Travis", "Reeder", "NUMBER", "NUMBER", "hmm", "Chad", "Arimura", "NUMBER", "NUMBER", "i", "m", "doing", "an", "fn", "update", "not", "fn", "deploy", "NUMBER", "Travis", "Reeder", "NUMBER", "NUMBER", "could", "you", "make", "it", "use", "the", "fn", "version", "NUMBER", "NUMBER", "just", "run", "fn", "bump", "if", "you", "just", "want", "to", "change", "the", "version", "Chad", "Arimura", "NUMBER", "NUMBER", "well", "maybe", "but", "be", "that", "what", "we", "want", "to", "force", "on", "our", "users", "NUMBER", "NUMBER", "they", "might", "have", "their", "own", "version", "system", "Travis", "Reeder", "NUMBER", "NUMBER", "not", "sure", "I", "think", "having", "users", "use", "semver", "be", "generally", "a", "good", "thing", "NUMBER", "NUMBER", "you", "could", "delete", "the", "func", "NUMBER", "yaml", "then", "do", "the", "route", "update", "NUMBER", "NUMBER", "or", "just", "specify", "the", "flags", "in", "the", "ci", "NUMBER", "NUMBER", "cli", "NUMBER", "NUMBER", "to", "override", "the", "func", "NUMBER", "yaml", "Chad", "Arimura", "NUMBER", "NUMBER", "ok", "so", "there", "be", "options", "NUMBER", "maybe", "we", "need", "a", "docs", "page", "that", "explains", "version", "and", "the", "options", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "talk", "about", "how", "we", "support", "LINK", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "If", "route", "was", "call", "at", "least", "once", "call", "object", "would", "appear", "and", "it", "wouldn", "t", "become", "available", "once", "route", "be", "gone", "delete", "by", "owner", "NUMBER", "In", "order", "to", "clean", "up", "all", "routes", "implicitly", "delete", "all", "fn", "calls", "while", "deleting", "a", "route", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "issue", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "do", "it", "make", "sense", "to", "have", "fn", "run", "get", "function", "configs", "fn", "run", "be", "super", "nice", "for", "local", "development", "but", "all", "funcs", "will", "almost", "inevitably", "use", "config", "secrets", "ie", "db", "creds", "etc", "NUMBER", "which", "makes", "run", "unusable", "unless", "you", "write", "a", "script", "to", "set", "local", "env", "variables", "every", "time", "NUMBER", "the", "alternative", "be", "to", "keep", "doing", "fn", "deploy", "fn", "call", "but", "sorta", "defeats", "entire", "purpose", "NUMBER", "Would", "be", "great", "to", "just", "map", "the", "funcs", "config", "into", "the", "ENV", "beforehand", "That", "said", "we", "d", "also", "need", "the", "app", "config", "as", "well", "NUMBER", "ideally", "local", "development", "would", "have", "it", "s", "own", "set", "of", "dev", "creds", "for", "everything", "that", "the", "user", "controls", "and", "prod", "be", "different", "obviously", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "I", "also", "understand", "I", "can", "pass", "in", "with", "e", "but", "it", "s", "just", "so", "much", "less", "elegant", "cat", "payload", "NUMBER", "json", "fn", "run", "vs", "cat", "payload", "NUMBER", "json", "fn", "run", "e", "HOSTNAME", "HOSTNAME", "e", "PUBNUB_SUBSCRIBE_KEY", "PUBNUB_SUBSCRIBE_KEY", "e", "PUBNUB_PUBLISH_KEY", "PUBNUB_PUBLISH_KEY", "e", "FUNC_SERVER_URL", "FUNC_SERVER_URL", "e", "ANOTHER", "ANOTHER", "Might", "need", "some", "sort", "of", "local", "env", "file", "it", "could", "read", "for", "test", "or", "allow", "local", "setting", "that", "be", "stored", "on", "users", "machine", "somewhere", "NUMBER", "We", "don", "t", "want", "to", "pass", "in", "all", "vars", "from", "the", "local", "environment", "though", "because", "those", "won", "t", "be", "on", "the", "production", "server", "obviously", "should", "be", "fairly", "explicit", "what", "goes", "in", "NUMBER", "I", "like", "that", "idea", "I", "m", "going", "to", "dig", "into", "this", "more", "today", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "denismakogon", "alluded", "to", "this", "in", "NUMBER", "this", "be", "the", "case", "i", "keep", "run", "into", "fn", "api", "deployment", "NUMBER", "h", "NUMBER", "w", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "App", "not", "find", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "yodawg", "call_id", "NUMBER", "BN", "NUMBER", "M", "NUMBER", "WTE", "NUMBER", "error", "Error", "NUMBER", "Too", "many", "connections", "route", "hello", "which", "we", "should", "handle", "in", "the", "function", "that", "fronts", "the", "api", "return", "NUMBER", "xx", "instead", "NUMBER", "we", "also", "need", "to", "probably", "figure", "out", "how", "to", "make", "this", "stop", "across", "all", "the", "various", "backends", "we", "would", "prefer", "for", "them", "to", "wait", "and", "then", "possibly", "get", "hit", "with", "a", "timeout", "instead", "of", "just", "fail", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "merge", "request", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "relate", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "More", "erros", "at", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "issue", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "run", "my", "license", "plate", "pipeline", "NUMBER", "watch", "plates", "come", "up", "with", "yellow", "boxes", "around", "plates", "NUMBER", "change", "draw", "func", "to", "draw", "red", "box", "instead", "of", "yellow", "NUMBER", "run", "again", "still", "yellow", "NUMBER", "kubectl", "scale", "down", "to", "NUMBER", "then", "back", "up", "to", "NUMBER", "NUMBER", "run", "again", "now", "red", "also", "here", "s", "some", "interesting", "output", "workspace", "hello", "curl", "LINK", "Hello", "Thomas", "workspace", "hello", "curl", "LINK", "Hi", "workspace", "hello", "curl", "LINK", "Hello", "Thomas", "Demo", "workspace", "hello", "curl", "LINK", "Hi", "workspace", "hello", "curl", "LINK", "Hello", "Thomas", "and", "the", "logs", "for", "those", "certainly", "indicate", "that", "I", "should", "be", "get", "the", "same", "version", "NUMBER", "NUMBER", "wonkiness", "fn", "api", "deployment", "NUMBER", "NUMBER", "shth", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "XRTF", "NUMBER", "WGY", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "request", "route", "hello", "type", "count", "value", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "shth", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "XRTF", "NUMBER", "WGY", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "waittime", "route", "hello", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "shth", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "container", "status", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "XRTF", "NUMBER", "WGY", "NUMBER", "container_error", "container_finished", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "UTC", "container_running", "false", "container_status", "exited", "exit_code", "NUMBER", "image", "carimura", "hello", "NUMBER", "route", "hello", "fn", "api", "deployment", "NUMBER", "NUMBER", "shth", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "XRTF", "NUMBER", "WGY", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "succeeded", "route", "hello", "type", "count", "value", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "shth", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "XRTF", "NUMBER", "WGY", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "time", "route", "hello", "type", "time", "value", "NUMBER", "ms", "fn", "api", "deployment", "NUMBER", "NUMBER", "shth", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "XRTF", "NUMBER", "WGY", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "exec_time", "route", "hello", "type", "time", "value", "NUMBER", "ms", "fn", "api", "deployment", "NUMBER", "NUMBER", "x", "NUMBER", "d", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "XT", "NUMBER", "V", "NUMBER", "WH", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "request", "route", "hello", "type", "count", "value", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "x", "NUMBER", "d", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "XT", "NUMBER", "V", "NUMBER", "WH", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "waittime", "route", "hello", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "x", "NUMBER", "d", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "container", "status", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "XT", "NUMBER", "V", "NUMBER", "WH", "NUMBER", "container_error", "container_finished", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "UTC", "container_running", "false", "container_status", "exited", "exit_code", "NUMBER", "image", "carimura", "hello", "NUMBER", "route", "hello", "fn", "api", "deployment", "NUMBER", "NUMBER", "x", "NUMBER", "d", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "XT", "NUMBER", "V", "NUMBER", "WH", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "succeeded", "route", "hello", "type", "count", "value", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "x", "NUMBER", "d", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "XT", "NUMBER", "V", "NUMBER", "WH", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "time", "route", "hello", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "x", "NUMBER", "d", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "XT", "NUMBER", "V", "NUMBER", "WH", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "exec_time", "route", "hello", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "tbcb", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YDH", "NUMBER", "WGY", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "request", "route", "hello", "type", "count", "value", "NUMBER", "fn", "api", "deployment", "NUMBER", "tbcb", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YDH", "NUMBER", "WGY", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "waittime", "route", "hello", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "tbcb", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "container", "status", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YDH", "NUMBER", "WGY", "NUMBER", "container_error", "container_finished", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "UTC", "container_running", "false", "container_status", "exited", "exit_code", "NUMBER", "image", "carimura", "hello", "NUMBER", "route", "hello", "fn", "api", "deployment", "NUMBER", "tbcb", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YDH", "NUMBER", "WGY", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "succeeded", "route", "hello", "type", "count", "value", "NUMBER", "fn", "api", "deployment", "NUMBER", "tbcb", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YDH", "NUMBER", "WGY", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "time", "route", "hello", "type", "time", "value", "NUMBER", "ms", "fn", "api", "deployment", "NUMBER", "tbcb", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YDH", "NUMBER", "WGY", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "exec_time", "route", "hello", "type", "time", "value", "NUMBER", "ms", "fn", "api", "deployment", "NUMBER", "NUMBER", "x", "NUMBER", "d", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YGNR", "NUMBER", "WH", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "request", "route", "hello", "type", "count", "value", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "x", "NUMBER", "d", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YGNR", "NUMBER", "WH", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "waittime", "route", "hello", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "x", "NUMBER", "d", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "container", "status", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YGNR", "NUMBER", "WH", "NUMBER", "container_error", "container_finished", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "UTC", "container_running", "false", "container_status", "exited", "exit_code", "NUMBER", "image", "carimura", "hello", "NUMBER", "route", "hello", "fn", "api", "deployment", "NUMBER", "NUMBER", "x", "NUMBER", "d", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YGNR", "NUMBER", "WH", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "succeeded", "route", "hello", "type", "count", "value", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "x", "NUMBER", "d", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YGNR", "NUMBER", "WH", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "time", "route", "hello", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "x", "NUMBER", "d", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YGNR", "NUMBER", "WH", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "exec_time", "route", "hello", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "shth", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YKZT", "NUMBER", "WH", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "request", "route", "hello", "type", "count", "value", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "shth", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YKZT", "NUMBER", "WH", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "waittime", "route", "hello", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "shth", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "container", "status", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YKZT", "NUMBER", "WH", "NUMBER", "container_error", "container_finished", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "UTC", "container_running", "false", "container_status", "exited", "exit_code", "NUMBER", "image", "carimura", "hello", "NUMBER", "route", "hello", "fn", "api", "deployment", "NUMBER", "NUMBER", "shth", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YKZT", "NUMBER", "WH", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "succeeded", "route", "hello", "type", "count", "value", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "shth", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YKZT", "NUMBER", "WH", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "time", "route", "hello", "type", "time", "value", "NUMBER", "ms", "fn", "api", "deployment", "NUMBER", "NUMBER", "shth", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "myapp", "call_id", "NUMBER", "BN", "NUMBER", "YKZT", "NUMBER", "WH", "NUMBER", "image", "carimura", "hello", "NUMBER", "name", "run", "NUMBER", "exec_time", "route", "hello", "type", "time", "value", "NUMBER", "ms", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "the", "description", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "the", "description", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "maybe", "title", "be", "misleading", "basically", "I", "m", "observing", "old", "code", "run", "after", "fn", "deploy", "NUMBER", "it", "s", "spotty", "NUMBER", "can", "t", "tell", "if", "it", "s", "some", "pods", "not", "get", "update", "etc", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "the", "description", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "treeder", "rdallman", "denismakogon", "this", "one", "be", "urgent", "NUMBER", "it", "s", "use", "old", "images", "and", "it", "stops", "my", "ability", "to", "demo", "work", "on", "the", "demo", "NUMBER", "You", "can", "see", "my", "logs", "be", "pulling", "two", "different", "version", "of", "the", "same", "function", "fn", "api", "deployment", "NUMBER", "dp", "NUMBER", "pg", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "libdc", "NUMBER", "error", "Failed", "to", "initialize", "libdc", "NUMBER", "fn", "api", "deployment", "NUMBER", "dp", "NUMBER", "pg", "fn", "api", "app_name", "myapp", "call_id", "NUMBER", "BNEZQX", "NUMBER", "WJE", "NUMBER", "image", "carimura", "detect", "plates", "NUMBER", "path", "runner", "async", "user_log", "true", "fn", "api", "deployment", "NUMBER", "dp", "NUMBER", "pg", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "NUMBER", "NUMBER", "Sent", "NUMBER", "fn", "api", "deployment", "NUMBER", "dp", "NUMBER", "pg", "fn", "api", "app_name", "myapp", "call_id", "NUMBER", "BNEZQX", "NUMBER", "WJE", "NUMBER", "image", "carimura", "detect", "plates", "NUMBER", "path", "runner", "async", "user_log", "true", "fn", "api", "deployment", "NUMBER", "w", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "fn", "api", "deployment", "NUMBER", "w", "NUMBER", "fn", "api", "app_name", "myapp", "call_id", "NUMBER", "BNEZQWR", "NUMBER", "WJ", "NUMBER", "image", "carimura", "detect", "plates", "prod", "NUMBER", "c", "NUMBER", "a", "NUMBER", "e", "NUMBER", "b", "NUMBER", "ef", "NUMBER", "b", "NUMBER", "f", "NUMBER", "c", "NUMBER", "c", "NUMBER", "fe", "NUMBER", "path", "runner", "async", "user_log", "true", "fn", "api", "deployment", "NUMBER", "w", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "fn", "api", "deployment", "NUMBER", "w", "NUMBER", "fn", "api", "app_name", "myapp", "call_id", "NUMBER", "BNEZQWR", "NUMBER", "WJ", "NUMBER", "image", "carimura", "detect", "plates", "prod", "NUMBER", "c", "NUMBER", "a", "NUMBER", "e", "NUMBER", "b", "NUMBER", "ef", "NUMBER", "b", "NUMBER", "f", "NUMBER", "c", "NUMBER", "c", "NUMBER", "fe", "NUMBER", "path", "runner", "async", "user_log", "true", "fn", "api", "deployment", "NUMBER", "w", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "FOUND", "PLATE", "RequestedTopN", "NUMBER", "BestPlate", "NUMBER", "Z", "NUMBER", "TopNPlates", "Characters", "NUMBER", "Z", "NUMBER", "OverallConfidence", "NUMBER", "MatchesTemplate", "false", "Characters", "Z", "NUMBER", "Z", "NUMBER", "OverallConfidence", "NUMBER", "MatchesTemplate", "false", "Characters", "Z", "NUMBER", "Z", "NUMBER", "OverallConfidence", "NUMBER", "MatchesTemplate", "false", "Characters", "ZZ", "NUMBER", "Z", "NUMBER", "OverallConfidence", "NUMBER", "MatchesTemplate", "false", "Characters", "NUMBER", "Z", "NUMBER", "OverallConfidence", "NUMBER", "MatchesTemplate", "false", "Characters", "E", "NUMBER", "Z", "NUMBER", "OverallConfidence", "NUMBER", "MatchesTemplate", "false", "Characters", "NUMBER", "Z", "NUMBER", "Z", "NUMBER", "OverallConfidence", "NUMBER", "MatchesTemplate", "false", "Characters", "EZ", "NUMBER", "Z", "NUMBER", "OverallConfidence", "NUMBER", "MatchesTemplate", "false", "Characters", "NUMBER", "Z", "NUMBER", "OverallConfidence", "NUMBER", "MatchesTemplate", "false", "Characters", "NUMBER", "Z", "NUMBER", "OverallConfidence", "NUMBER", "MatchesTemplate", "false", "ProcessingTimeMs", "NUMBER", "PlatePoints", "X", "NUMBER", "Y", "NUMBER", "X", "NUMBER", "Y", "NUMBER", "X", "NUMBER", "Y", "NUMBER", "X", "NUMBER", "Y", "NUMBER", "PlateIndex", "NUMBER", "RegionConfidence", "NUMBER", "Region", "NUMBER", "NUMBER", "Sent", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "i", "even", "killed", "the", "whole", "k", "NUMBER", "s", "cluster", "and", "brought", "it", "back", "up", "still", "same", "issue", "NUMBER", "can", "t", "deploy", "cause", "uses", "old", "version", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Can", "you", "paste", "all", "the", "commands", "you", "re", "use", "here", "Are", "you", "bumping", "the", "version", "be", "you", "deploying", "after", "you", "bump", "the", "version", "etc", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "yes", "NUMBER", "it", "happens", "when", "i", "use", "fn", "deploy", "and", "bump", "the", "version", "or", "wercker", "and", "it", "uses", "git", "commit", "NUMBER", "Take", "a", "look", "at", "those", "logs", "above", "NUMBER", "Can", "you", "explain", "a", "case", "where", "the", "same", "function", "would", "run", "two", "different", "version", "right", "after", "one", "another", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Aggh", "think", "I", "see", "why", "NUMBER", "There", "s", "a", "route", "cache", "that", "appears", "to", "never", "expire", "Seif", "add", "this", "NUMBER", "So", "probably", "works", "fine", "on", "single", "server", "doesn", "t", "sync", "up", "across", "multiple", "servers", "NUMBER", "Give", "me", "a", "few", "I", "ll", "either", "remove", "it", "or", "change", "it", "to", "an", "expiring", "cache", "like", "NUMBER", "seconds", "or", "something", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ok", "great", "NUMBER", "i", "m", "not", "crazy", "NUMBER", "workspace", "hello", "NUMBER", "s", "curl", "LINK", "Hello", "Yodel", "and", "Chad", "workspace", "hello", "curl", "LINK", "Hello", "Yodel", "and", "Chad", "workspace", "hello", "curl", "LINK", "Hello", "Yodel", "and", "Chad", "workspace", "hello", "curl", "LINK", "Hello", "Yodel", "and", "Chad", "workspace", "hello", "curl", "LINK", "Hello", "Yodel", "and", "Chad", "workspace", "hello", "curl", "LINK", "Hello", "Chad", "workspace", "hello", "curl", "LINK", "Hello", "Yodel", "workspace", "hello", "curl", "LINK", "Hello", "Chad", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "commit", "NUMBER", "d", "NUMBER", "e", "NUMBER", "cbc", "NUMBER", "d", "NUMBER", "ea", "NUMBER", "f", "NUMBER", "b", "NUMBER", "ab", "NUMBER", "e", "NUMBER", "e", "NUMBER", "dd", "In", "gitlab", "by", "derekschultz", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "via", "commit", "NUMBER", "fce", "NUMBER", "ce", "NUMBER", "cbfe", "NUMBER", "bed", "NUMBER", "f", "NUMBER", "d", "NUMBER", "a", "NUMBER", "f", "NUMBER", "fc", "NUMBER", "In", "gitlab", "by", "derekschultz", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "via", "merge", "request", "NUMBER", "In", "gitlab", "by", "derekschultz", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "commit", "NUMBER", "fce", "NUMBER", "ce", "NUMBER", "cbfe", "NUMBER", "bed", "NUMBER", "f", "NUMBER", "d", "NUMBER", "a", "NUMBER", "f", "NUMBER", "fc", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Ok", "I", "find", "this", "in", "a", "different", "place", "now", "NUMBER", "if", "you", "delete", "a", "route", "and", "then", "do", "another", "fn", "init", "it", "restarts", "the", "version", "back", "at", "NUMBER", "but", "the", "old", "code", "still", "sits", "on", "the", "servers", "so", "it", "pulls", "old", "code", "NUMBER", "Re", "open", "ticket", "NUMBER", "I", "think", "an", "fn", "deploy", "should", "always", "invalidate", "the", "old", "image", "NUMBER", "be", "this", "possible", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "reopened", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Another", "way", "to", "do", "this", "be", "to", "check", "Docker", "Hub", "or", "whatever", "registry", "and", "start", "the", "version", "after", "the", "most", "recent", "one", "then", "they", "don", "t", "overwrite", "their", "function", "in", "the", "registry", "either", "NUMBER", "Here", "s", "one", "way", "to", "check", "sh", "curl", "L", "s", "LINK", "go", "tags", "page_size", "NUMBER", "jq", "NUMBER", "results", "name", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fyi", "I", "ll", "keep", "this", "one", "open", "but", "it", "s", "not", "critical", "because", "the", "delete", "your", "func", "file", "might", "not", "be", "common", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GET", "foo", "first", "joe", "last", "user", "NUMBER", "FN_Q_first", "joe", "FN_Q_last", "user", "or", "whatever", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "the", "description", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Isn", "t", "this", "something", "that", "can", "be", "do", "use", "standard", "capabilities", "of", "PL", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PL", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "programming", "langs", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "less", "acronyms", "please", "thanks", "Yes", "it", "can", "but", "takes", "some", "boilerplate", "effort", "NUMBER", "Would", "be", "nice", "to", "make", "it", "automate", "given", "how", "common", "the", "use", "case", "be", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "add", "NUMBER", "label", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "commit", "efa", "NUMBER", "dfbb", "NUMBER", "ba", "NUMBER", "c", "NUMBER", "fc", "NUMBER", "ec", "NUMBER", "e", "NUMBER", "e", "NUMBER", "da", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "merge", "request", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "via", "commit", "efa", "NUMBER", "dfbb", "NUMBER", "ba", "NUMBER", "c", "NUMBER", "fc", "NUMBER", "ec", "NUMBER", "e", "NUMBER", "e", "NUMBER", "da", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "via", "commit", "NUMBER", "ea", "NUMBER", "a", "NUMBER", "af", "NUMBER", "f", "NUMBER", "fa", "NUMBER", "ccd", "NUMBER", "ba", "NUMBER", "c", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "commit", "NUMBER", "ea", "NUMBER", "a", "NUMBER", "af", "NUMBER", "f", "NUMBER", "fa", "NUMBER", "ccd", "NUMBER", "ba", "NUMBER", "c", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "why", "was", "this", "close", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "reopened", "it", "s", "ok", "NUMBER", "i", "agree", "that", "it", "s", "really", "easy", "to", "parse", "access", "in", "every", "language", "through", "just", "parsing", "the", "request", "it", "s", "in", "every", "standard", "library", "and", "it", "s", "no", "more", "work", "to", "do", "that", "accessing", "through", "env", "which", "also", "relies", "on", "the", "standard", "library", "so", "it", "s", "really", "not", "come", "out", "ahead", "NUMBER", "i", "don", "t", "really", "care", "about", "crap", "like", "this", "to", "be", "honest", "i", "don", "t", "think", "how", "we", "have", "it", "detracts", "from", "the", "ux", "at", "all", "NUMBER", "Created", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "and", "imported", "from", "GitLab", "issue", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Very", "early", "thoughts", "Define", "steps", "in", "json", "yaml", "see", "below", "Support", "in", "cli", "and", "local", "test", "to", "do", "things", "like", "cat", "payload", "NUMBER", "json", "fn", "run", "x", "fn", "run", "y", "fn", "run", "z", "Deploy", "with", "fn", "deploy", "worklow", "steps", "give", "the", "workflow", "itself", "a", "path", "in", "the", "API", "eg", "myworkflow", "NUMBER", "Example", "step", "format", "yaml", "steps", "route", "fnx", "other", "step", "relate", "stuff", "here", "eg", "fanout", "fanin", "etc", "not", "sure", "how", "that", "would", "work", "quite", "yet", "route", "fny", "route", "fnz", "In", "gitlab", "by", "ocliffe", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "I", "d", "like", "to", "understand", "the", "sort", "of", "problem", "this", "would", "be", "solving", "a", "bit", "more", "before", "diving", "into", "the", "details", "NUMBER", "Would", "these", "be", "static", "data", "flow", "pipelines", "or", "more", "like", "a", "workflow", "For", "workflow", "I", "guess", "the", "main", "concern", "be", "operability", "if", "we", "have", "a", "single", "container", "for", "each", "step", "and", "you", "want", "to", "be", "able", "to", "re", "use", "steps", "between", "processes", "I", "think", "the", "issue", "you", "have", "be", "the", "proliferation", "of", "many", "many", "glue", "steps", "that", "do", "a", "small", "amount", "of", "work", "to", "present", "work", "between", "the", "outputs", "and", "inputs", "of", "imported", "steps", "NUMBER", "In", "the", "current", "model", "having", "to", "operate", "a", "new", "function", "for", "each", "microstep", "seems", "excessive", "You", "could", "easily", "end", "up", "having", "to", "manage", "NUMBER", "s", "of", "function", "all", "of", "which", "belong", "to", "the", "workflow", "NUMBER", "This", "be", "the", "sort", "of", "thinking", "that", "led", "us", "to", "putting", "the", "pipeline", "operation", "code", "into", "a", "single", "re", "entrant", "function", "that", "triggers", "out", "to", "other", "function", "in", "cloudthreads", "NUMBER", "For", "Pipeline", "I", "like", "the", "idea", "of", "be", "able", "to", "create", "Spark", "DataFlow", "type", "pipelines", "e", "NUMBER", "g", "NUMBER", "map", "reduce", "NUMBER", "I", "like", "Apache", "Beam", "s", "google", "data", "flow", "lite", "type", "model", "here", "especially", "the", "way", "that", "you", "can", "dynamically", "build", "pipelines", "in", "code", "rather", "than", "having", "to", "pre", "define", "them", "externally", "NUMBER", "One", "of", "the", "reasons", "we", "ve", "shied", "away", "from", "doing", "this", "in", "the", "past", "be", "that", "Spark", "DataFlow", "do", "a", "lot", "of", "magic", "around", "scheduling", "to", "get", "good", "compute", "density", "and", "minimise", "data", "transfer", "It", "feels", "like", "these", "be", "slightly", "at", "odds", "with", "the", "general", "problem", "of", "scheduling", "FaaS", "workloads", "so", "my", "fear", "be", "that", "you", "end", "up", "build", "a", "crappy", "less", "performant", "clone", "of", "spark", "in", "the", "FaaS", "NUMBER", "Either", "way", "having", "some", "primitives", "to", "natively", "dispatch", "data", "within", "function", "would", "i", "guess", "give", "you", "a", "good", "efficiency", "bump", "over", "doing", "the", "same", "thing", "via", "e", "NUMBER", "g", "NUMBER", "an", "external", "queue", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "I", "m", "thinking", "more", "along", "the", "lines", "of", "AWS", "Step", "Functions", "LINK", "function", "where", "each", "function", "be", "distinct", "like", "it", "be", "now", "and", "doesn", "t", "really", "have", "to", "care", "about", "other", "steps", "NUMBER", "Then", "we", "take", "care", "of", "plumbing", "glue", "steps", "in", "between", "NUMBER", "In", "gitlab", "by", "ocliffe", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Got", "it", "I", "guess", "if", "you", "think", "that", "this", "be", "valuable", "I", "m", "a", "bit", "sceptical", "as", "to", "whether", "or", "not", "step", "function", "be", "really", "that", "useful", "then", "that", "makes", "sense", "NUMBER", "AMZ", "have", "semi", "standardized", "the", "steps", "language", "here", "LINK", "language", "NUMBER", "net", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Step", "Functions", "be", "their", "gen", "NUMBER", "workflow", "service", "after", "SWF", "and", "definitely", "gaining", "in", "popularity", "NUMBER", "I", "think", "we", "can", "adopt", "a", "similar", "approach", "but", "make", "it", "even", "easier", "for", "developers", "to", "adopt", "NUMBER", "thinking", "out", "loud", "object", "types", "apps", "routes", "function", "actually", "this", "brings", "up", "a", "different", "issue", "since", "routes", "function", "NUMBER", "flows", "flows", "can", "take", "a", "yaml", "input", "like", "above", "or", "CLI", "command", "like", "fn", "flows", "create", "my_workflow", "flow", "types", "sequential", "branch", "choice", "parallel", "fan", "in", "out", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "re", "route", "request", "that", "error", "to", "a", "different", "backend", "NUMBER", "this", "may", "require", "buffering", "bodies", "which", "isn", "t", "great", "we", "need", "to", "take", "care", "that", "an", "attacker", "couldn", "t", "easily", "OOM", "us", "but", "it", "shouldn", "t", "add", "much", "response", "latency", "in", "normal", "path", "NUMBER", "for", "now", "probably", "only", "re", "route", "guys", "that", "didn", "t", "run", "NUMBER", "enable", "SSL", "h", "NUMBER", "this", "be", "just", "simple", "plumbing", "since", "go", "do", "this", "out", "of", "the", "box", "NUMBER", "x", "investigate", "add", "k", "NUMBER", "s", "backend", "in", "addition", "to", "db", "s", "integrate", "with", "a", "real", "stats", "backend", "statsd", "prom", "get", "charts", "from", "that", "ping", "version", "endpoints", "i", "guess", "it", "would", "also", "be", "nice", "to", "list", "the", "not", "miss", "features", "somewhere", "too", "NUMBER", "anyone", "be", "welcome", "to", "add", "I", "think", "we", "may", "be", "able", "to", "finagle", "out", "of", "trying", "to", "integrate", "with", "vulcand", "traefik", "and", "have", "something", "we", "can", "control", "that", "be", "pretty", "light", "thanks", "to", "Go", "mostly", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "the", "description", "yea", "still", "use", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "relate", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Here", "s", "a", "big", "stream", "of", "shit", "from", "a", "single", "pod", "when", "run", "a", "bunch", "of", "function", "NUMBER", "not", "sure", "if", "they", "be", "keep", "the", "function", "from", "run", "or", "not", "but", "definitely", "lots", "of", "error", "we", "probably", "shouldn", "t", "see", "NUMBER", "no", "idea", "if", "relate", "same", "different", "from", "NUMBER", "Both", "need", "fix", "before", "demo", "time", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "app_name", "myapp", "call_id", "NUMBER", "BMFD", "NUMBER", "AM", "NUMBER", "WGC", "NUMBER", "image", "carimura", "detect", "plates", "NUMBER", "path", "runner", "async", "user_log", "true", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "NUMBER", "xc", "NUMBER", "NUMBER", "NUMBER", "false", "TAG", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "f", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "app_name", "myapp", "call_id", "NUMBER", "BMFD", "NUMBER", "AM", "NUMBER", "WGC", "NUMBER", "image", "carimura", "detect", "plates", "NUMBER", "path", "runner", "async", "user_log", "true", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "context", "deadline", "exceeded", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "context", "deadline", "exceeded", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "context", "deadline", "exceeded", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "context", "deadline", "exceeded", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "context", "deadline", "exceeded", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "context", "deadline", "exceeded", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "context", "deadline", "exceeded", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "context", "deadline", "exceeded", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "retrying", "on", "docker", "error", "timed", "out", "restart", "docker", "or", "rotate", "this", "instance", "error", "context", "deadline", "exceeded", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "retrying", "on", "docker", "error", "timed", "out", "restart", "docker", "or", "rotate", "this", "instance", "error", "context", "deadline", "exceeded", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "retrying", "on", "docker", "error", "timed", "out", "restart", "docker", "or", "rotate", "this", "instance", "error", "context", "deadline", "exceeded", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "retrying", "on", "docker", "error", "timed", "out", "restart", "docker", "or", "rotate", "this", "instance", "error", "context", "deadline", "exceeded", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "retrying", "on", "docker", "error", "timed", "out", "restart", "docker", "or", "rotate", "this", "instance", "error", "context", "deadline", "exceeded", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "retrying", "on", "docker", "error", "timed", "out", "restart", "docker", "or", "rotate", "this", "instance", "error", "context", "deadline", "exceeded", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "retrying", "on", "docker", "error", "timed", "out", "restart", "docker", "or", "rotate", "this", "instance", "error", "context", "deadline", "exceeded", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "retrying", "on", "docker", "error", "timed", "out", "restart", "docker", "or", "rotate", "this", "instance", "error", "context", "deadline", "exceeded", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "filtering", "error", "error", "Container", "not", "run", "task", "NUMBER", "NUMBER", "BMFD", "NUMBER", "AH", "NUMBER", "WGJ", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "container", "status", "call_id", "NUMBER", "BMFD", "NUMBER", "AH", "NUMBER", "WGJ", "NUMBER", "container_error", "container_finished", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "UTC", "container_running", "false", "container_status", "exited", "exit_code", "NUMBER", "runner", "async", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AH", "NUMBER", "WGJ", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "error", "runner", "async", "type", "count", "value", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AH", "NUMBER", "WGJ", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "time", "runner", "async", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AH", "NUMBER", "WGJ", "NUMBER", "name", "run", "NUMBER", "exec_time", "runner", "async", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "filtering", "error", "error", "Container", "not", "run", "task", "NUMBER", "NUMBER", "BMFD", "NUMBER", "AH", "NUMBER", "WGM", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "container", "status", "call_id", "NUMBER", "BMFD", "NUMBER", "AH", "NUMBER", "WGM", "NUMBER", "container_error", "container_finished", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "UTC", "container_running", "false", "container_status", "exited", "exit_code", "NUMBER", "runner", "async", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AH", "NUMBER", "WGM", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "error", "runner", "async", "type", "count", "value", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AH", "NUMBER", "WGM", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "time", "runner", "async", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AH", "NUMBER", "WGM", "NUMBER", "name", "run", "NUMBER", "exec_time", "runner", "async", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "filtering", "error", "error", "Container", "not", "run", "task", "NUMBER", "NUMBER", "BMFD", "NUMBER", "AJ", "NUMBER", "WGT", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "container", "status", "call_id", "NUMBER", "BMFD", "NUMBER", "AJ", "NUMBER", "WGT", "NUMBER", "container_error", "container_finished", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "UTC", "container_running", "false", "container_status", "exited", "exit_code", "NUMBER", "runner", "async", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AJ", "NUMBER", "WGT", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "error", "runner", "async", "type", "count", "value", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AJ", "NUMBER", "WGT", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "time", "runner", "async", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AJ", "NUMBER", "WGT", "NUMBER", "name", "run", "NUMBER", "exec_time", "runner", "async", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "filtering", "error", "error", "Container", "not", "run", "task", "NUMBER", "NUMBER", "BMFD", "NUMBER", "AM", "NUMBER", "WGC", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "container", "status", "call_id", "NUMBER", "BMFD", "NUMBER", "AM", "NUMBER", "WGC", "NUMBER", "container_error", "container_finished", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "UTC", "container_running", "false", "container_status", "exited", "exit_code", "NUMBER", "runner", "async", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AM", "NUMBER", "WGC", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "error", "runner", "async", "type", "count", "value", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AM", "NUMBER", "WGC", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "time", "runner", "async", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AM", "NUMBER", "WGC", "NUMBER", "name", "run", "NUMBER", "exec_time", "runner", "async", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "Cannot", "run", "task", "call_id", "NUMBER", "BMFD", "NUMBER", "AG", "NUMBER", "WGE", "NUMBER", "error", "context", "deadline", "exceeded", "runner", "async", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "filtering", "error", "error", "Container", "not", "run", "task", "NUMBER", "NUMBER", "BMFD", "NUMBER", "AG", "NUMBER", "WGR", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "container", "status", "call_id", "NUMBER", "BMFD", "NUMBER", "AG", "NUMBER", "WGR", "NUMBER", "container_error", "container_finished", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "UTC", "container_running", "false", "container_status", "exited", "exit_code", "NUMBER", "runner", "async", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AG", "NUMBER", "WGR", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "error", "runner", "async", "type", "count", "value", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AG", "NUMBER", "WGR", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "time", "runner", "async", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AG", "NUMBER", "WGR", "NUMBER", "name", "run", "NUMBER", "exec_time", "runner", "async", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "filtering", "error", "error", "Container", "not", "run", "task", "NUMBER", "NUMBER", "BMFD", "NUMBER", "AN", "NUMBER", "WGJ", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "container", "status", "call_id", "NUMBER", "BMFD", "NUMBER", "AN", "NUMBER", "WGJ", "NUMBER", "container_error", "container_finished", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "UTC", "container_running", "false", "container_status", "exited", "exit_code", "NUMBER", "runner", "async", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AN", "NUMBER", "WGJ", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "error", "runner", "async", "type", "count", "value", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AN", "NUMBER", "WGJ", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "time", "runner", "async", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AN", "NUMBER", "WGJ", "NUMBER", "name", "run", "NUMBER", "exec_time", "runner", "async", "type", "time", "value", "NUMBER", "s", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "Cannot", "run", "task", "call_id", "NUMBER", "BMFD", "NUMBER", "AK", "NUMBER", "WG", "NUMBER", "error", "context", "deadline", "exceeded", "runner", "async", "In", "gitlab", "by", "carimura", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "the", "description", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "carimura", "this", "might", "be", "relate", "to", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "assigned", "to", "denismakogon", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "milestone", "to", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "i", "don", "t", "think", "this", "effect", "anything", "it", "s", "make", "sure", "to", "remove", "the", "container", "which", "has", "exited", "cleanly", "deletion", "of", "the", "container", "be", "regardless", "of", "whether", "it", "s", "terminated", "cleanly", "or", "not", "NUMBER", "we", "could", "spend", "time", "filtering", "this", "error", "to", "so", "appease", "whomever", "but", "it", "s", "kind", "of", "a", "waste", "of", "time", "NUMBER", "if", "you", "find", "any", "tasks", "that", "actually", "error", "out", "when", "they", "aren", "t", "supposed", "to", "and", "can", "trace", "them", "to", "this", "kind", "of", "error", "in", "the", "logs", "then", "we", "actually", "have", "something", "to", "look", "into", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fn", "api", "deployment", "NUMBER", "NUMBER", "h", "NUMBER", "fn", "api", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "call_id", "NUMBER", "BMFD", "NUMBER", "AH", "NUMBER", "WGJ", "NUMBER", "name", "run", "NUMBER", "myapp", "NUMBER", "time", "runner", "async", "type", "time", "value", "NUMBER", "s", "it", "seems", "that", "these", "tasks", "be", "timing", "out", "be", "all", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "issue", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "I", "m", "going", "to", "clean", "up", "there", "error", "NUMBER", "If", "that", "s", "the", "case", "they", "shouldn", "t", "be", "warning", "or", "error", "level", "probably", "DEBUG", "if", "anything", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "reopened", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "well", "it", "s", "nice", "to", "see", "in", "prod", "when", "it", "happens", "the", "root", "cause", "error", "so", "i", "d", "say", "DEBUG", "be", "hiding", "too", "much", "NUMBER", "these", "calls", "get", "retried", "a", "lot", "and", "seeing", "root", "error", "be", "useful", "as", "the", "error", "get", "masked", "at", "higher", "levels", "before", "get", "plumbed", "up", "and", "logged", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "This", "will", "be", "a", "common", "occurrence", "NUMBER", "The", "task", "status", "should", "be", "set", "to", "timeout", "or", "something", "so", "we", "and", "user", "can", "see", "that", "a", "task", "didn", "t", "complete", "properly", "but", "spewing", "out", "common", "things", "to", "the", "logs", "doesn", "t", "really", "help", "much", "do", "it", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "This", "looks", "like", "it", "s", "trying", "to", "ignore", "error", "with", "service", "endpoint", "with", "name", "so", "I", "m", "not", "sure", "why", "we", "re", "logging", "the", "error", "with", "warning", "or", "why", "it", "s", "a", "filtering", "error", "go", "some", "NUMBER", "s", "be", "totally", "cool", "func", "filter", "err", "error", "error", "API", "error", "NUMBER", "message", "service", "endpoint", "with", "name", "task", "NUMBER", "d", "NUMBER", "ecdecb", "NUMBER", "e", "NUMBER", "be", "NUMBER", "aff", "NUMBER", "already", "exists", "n", "ok", "since", "container", "exists", "switch", "default", "return", "err", "case", "err", "nil", "return", "err", "case", "strings", "NUMBER", "Contains", "err", "NUMBER", "Error", "service", "endpoint", "with", "name", "logrus", "NUMBER", "WithError", "err", "NUMBER", "Warn", "filtering", "error", "return", "nil", "Anyone", "know", "what", "this", "one", "be", "all", "about", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Actually", "looks", "like", "it", "s", "from", "this", "one", "go", "func", "filterNotRunning", "err", "error", "error", "if", "err", "nil", "return", "nil", "_", "containerNotRunning", "err", "NUMBER", "docker", "NUMBER", "ContainerNotRunning", "dockerErr", "ok", "err", "NUMBER", "docker", "NUMBER", "Error", "if", "containerNotRunning", "ok", "dockerErr", "NUMBER", "Status", "NUMBER", "logrus", "NUMBER", "WithError", "err", "NUMBER", "Error", "filtering", "error", "return", "nil", "return", "err", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Also", "need", "call_id", "to", "be", "pass", "down", "into", "the", "docker", "drivers", "so", "we", "can", "match", "up", "log", "lines", "maybe", "they", "aren", "t", "pulling", "the", "logger", "out", "of", "the", "context", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "most", "of", "that", "stuff", "was", "months", "of", "me", "personally", "track", "down", "esoteric", "error", "and", "make", "them", "behave", "properly", "NUMBER", "just", "leave", "please", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "We", "can", "t", "have", "error", "level", "logs", "for", "non", "error", "otherwise", "we", "ll", "get", "pagerduty", "s", "all", "night", "for", "no", "reason", "NUMBER", "I", "m", "guessing", "it", "s", "the", "following", "container", "times", "out", "so", "stops", "run", "StopContainer", "be", "call", "again", "and", "it", "s", "not", "longer", "run", "therefore", "throw", "the", "error", "above", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "i", "think", "that", "s", "completely", "unfounded", "but", "okay", "and", "i", "can", "go", "into", "how", "to", "set", "things", "up", "to", "avoid", "that", "but", "you", "re", "smart", "so", "i", "don", "t", "think", "i", "need", "to", "NUMBER", "DEBUG", "be", "too", "low", "that", "s", "why", "they", "re", "WARN", "level", "in", "many", "places", "since", "they", "re", "going", "to", "get", "retried", "NUMBER", "the", "ones", "from", "this", "issue", "be", "yes", "container", "be", "no", "longer", "run", "and", "we", "be", "trying", "to", "stop", "remove", "the", "container", "NUMBER", "if", "we", "use", "the", "runner", "package", "from", "ole", "uncle", "iron", "i", "ve", "already", "scratched", "your", "itch", "on", "this", "error", "once", "it", "s", "pretty", "pedantic", "but", "whatever", "if", "you", "want", "to", "see", "how", "you", "may", "see", "how", "there", "it", "clutters", "up", "the", "code", "but", "hey", "that", "petty", "little", "log", "line", "won", "t", "keep", "anybody", "that", "it", "wasn", "t", "already", "keep", "up", "at", "night", "any", "longer", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "the", "context", "deadline", "exceeded", "be", "nice", "to", "see", "as", "you", "can", "get", "into", "situations", "where", "perhaps", "something", "exits", "before", "it", "really", "should", "and", "this", "be", "the", "fault", "of", "bad", "programming", "of", "plumbing", "the", "contexts", "down", "it", "has", "happened", "which", "be", "easy", "to", "parse", "from", "log", "timestamps", "NUMBER", "we", "attempt", "to", "only", "print", "the", "error", "as", "log", "status", "after", "retrying", "it", "sufficiently", "NUMBER", "as", "far", "as", "these", "be", "useless", "in", "general", "to", "not", "log", "seeing", "the", "rate", "of", "context", "deadline", "exceeded", "be", "generally", "a", "great", "way", "to", "see", "that", "docker", "be", "fucked", "up", "or", "dead", "and", "masking", "these", "will", "basically", "hide", "the", "only", "way", "we", "re", "get", "that", "feedback", "through", "error", "in", "talking", "to", "docker", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "merge", "request", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Remember", "we", "re", "not", "the", "only", "ones", "that", "will", "use", "this", "NUMBER", "If", "we", "can", "barely", "decipher", "what", "s", "going", "on", "imagine", "what", "other", "people", "will", "think", "If", "they", "see", "error", "come", "out", "all", "over", "the", "place", "as", "Chad", "be", "seeing", "we", "re", "going", "to", "see", "a", "lot", "of", "GitHub", "issue", "and", "we", "ll", "have", "to", "clean", "this", "up", "anyways", "NUMBER", "If", "we", "really", "want", "these", "to", "stay", "in", "the", "logs", "let", "s", "make", "them", "more", "understandable", "what", "s", "a", "filtering", "error", "and", "only", "use", "error", "and", "warn", "if", "it", "s", "something", "that", "someone", "should", "be", "looking", "into", "NUMBER", "Not", "just", "leave", "them", "and", "tell", "people", "to", "filter", "them", "out", "in", "papertrail", "NUMBER", "And", "if", "the", "context", "timeouts", "be", "useful", "to", "know", "that", "Docker", "isn", "t", "work", "be", "there", "a", "better", "way", "to", "know", "that", "Someone", "could", "queue", "up", "a", "zillion", "buggy", "tasks", "that", "all", "timeout", "but", "that", "doesn", "t", "mean", "docker", "be", "bad", "NUMBER", "Perhaps", "keep", "some", "sort", "of", "structure", "that", "watches", "for", "anomalies", "which", "I", "assume", "be", "what", "you", "re", "get", "at", "And", "then", "prints", "an", "error", "or", "warning", "when", "things", "seem", "off", "NUMBER", "And", "regard", "the", "ole", "uncle", "iron", "runner", "be", "there", "another", "runner", "I", "m", "not", "aware", "of", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "i", "looked", "and", "the", "code", "to", "mask", "that", "error", "be", "now", "in", "evil", "iron", "s", "repo", "since", "open", "source", "runner", "was", "mostly", "gutted", "NUMBER", "yay", "NUMBER", "i", "remember", "how", "it", "was", "do", "and", "i", "also", "know", "the", "current", "runner", "has", "NUMBER", "code", "paths", "for", "run", "stuff", "and", "diverged", "a", "long", "time", "ago", "so", "not", "sure", "it", "s", "remotely", "similar", "any", "longer", "NUMBER", "while", "you", "make", "valid", "points", "they", "preclude", "change", "the", "error", "lines", "to", "debug", "lines", "NUMBER", "of", "course", "it", "would", "be", "nicer", "to", "have", "better", "error", "handle", "but", "seeing", "how", "we", "don", "t", "have", "that", "i", "m", "not", "inclined", "to", "want", "to", "mask", "logs", "until", "we", "do", "if", "ever", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Sorry", "I", "m", "a", "bit", "confused", "NUMBER", "At", "first", "we", "re", "saying", "this", "doesn", "t", "affect", "anything", "which", "I", "assume", "means", "it", "doesn", "t", "matter", "then", "we", "re", "saying", "it", "s", "OK", "to", "leave", "these", "as", "error", "and", "warning", "NUMBER", "From", "those", "logs", "I", "see", "above", "if", "it", "generally", "doesn", "t", "matter", "I", "m", "pretty", "sure", "we", "can", "t", "leave", "them", "as", "be", "NUMBER", "Do", "you", "not", "agree", "Also", "not", "only", "do", "it", "look", "like", "the", "world", "be", "ending", "but", "none", "of", "it", "really", "makes", "any", "sense", "other", "than", "the", "context", "deadline", "exceeded", "and", "even", "then", "only", "if", "you", "know", "Go", "NUMBER", "But", "when", "you", "match", "that", "on", "the", "same", "line", "with", "msg", "docker", "temporary", "error", "retrying", "it", "makes", "even", "less", "sense", "NUMBER", "Is", "that", "a", "docker", "error", "No", "it", "s", "a", "timeout", "that", "we", "explicitly", "put", "in", "place", "NUMBER", "Another", "question", "why", "do", "it", "retry", "so", "many", "times", "Wonder", "how", "long", "that", "goes", "on", "for", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "at", "this", "level", "we", "don", "t", "know", "the", "source", "of", "the", "context", "cancellation", "NUMBER", "be", "it", "our", "retry", "that", "caps", "time", "to", "docker", "calls", "to", "NUMBER", "minutes", "be", "it", "that", "the", "task", "be", "out", "of", "time", "we", "don", "t", "know", "NUMBER", "if", "it", "s", "the", "former", "we", "need", "to", "just", "try", "to", "call", "docker", "again", "and", "see", "if", "it", "goes", "through", "this", "time", "thanks", "to", "networks", "a", "request", "could", "take", "arbitrarily", "long", "cancelling", "and", "retrying", "be", "a", "relatively", "sane", "policy", "and", "many", "times", "works", "in", "this", "context", "NUMBER", "if", "it", "s", "the", "latter", "sure", "NUMBER", "obviously", "this", "isn", "t", "so", "straight", "forward", "NUMBER", "it", "s", "true", "that", "the", "runner", "had", "a", "lot", "of", "parameters", "that", "were", "code", "against", "ironworker", "which", "has", "different", "sized", "task", "constraints", "on", "the", "order", "of", "minutes", "not", "seconds", "NUMBER", "and", "in", "that", "context", "timing", "out", "on", "docker", "retries", "was", "actually", "a", "pretty", "good", "indication", "that", "docker", "was", "indeed", "borked", "NUMBER", "since", "contexts", "be", "be", "plumbed", "down", "into", "here", "now", "from", "elsewhere", "perhaps", "this", "be", "no", "longer", "the", "case", "and", "we", "can", "change", "the", "few", "words", "of", "the", "error", "message", "that", "I", "be", "so", "sorry", "be", "ruining", "our", "lives", "all", "my", "fault", "yet", "again", "to", "say", "something", "that", "be", "less", "confusing", "NUMBER", "by", "all", "means", "do", "words", "better", "than", "I", "can", "NUMBER", "logs", "tend", "to", "be", "for", "the", "developers", "and", "ops", "people", "to", "assess", "users", "won", "t", "see", "these", "NUMBER", "given", "that", "and", "given", "that", "the", "programmers", "actually", "understand", "what", "the", "code", "here", "be", "doing", "retrying", "calls", "against", "docker", "until", "they", "succeed", "or", "bailing", "on", "pertinent", "error", "this", "ends", "up", "be", "useful", "information", "to", "have", "as", "oppose", "to", "every", "error", "from", "docker", "trickling", "out", "NUMBER", "i", "would", "say", "the", "runner", "code", "be", "relatively", "battle", "test", "but", "if", "this", "be", "ending", "worlds", "then", "perhaps", "somebody", "can", "do", "better", "than", "I", "did", "NUMBER", "good", "luck", "and", "have", "fun", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "it", "goes", "on", "for", "NUMBER", "minutes", "NUMBER", "yes", "it", "can", "take", "NUMBER", "minutes", "to", "start", "a", "NUMBER", "GB", "image", "that", "some", "customer", "may", "actually", "try", "to", "run", "NUMBER", "yes", "sometimes", "even", "the", "call", "to", "start", "can", "timeout", "and", "we", "need", "to", "retry", "that", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rdallman", "i", "think", "it", "s", "up", "to", "user", "to", "define", "timeouts", "if", "he", "has", "NUMBER", "Gb", "image", "then", "he", "_must_", "define", "appropriate", "timeout", "and", "docker", "retry", "operation", "should", "only", "relay", "on", "that", "NUMBER", "Because", "now", "we", "have", "inconsistent", "timeouts", "asumme", "user", "sets", "NUMBER", "m", "timeout", "for", "function", "but", "each", "docker", "retry", "runs", "for", "NUMBER", "m", "so", "this", "means", "that", "docker", "retry", "wouldn", "t", "fail", "in", "NUMBER", "m", "and", "sync", "async", "execution", "will", "take", "up", "NUMBER", "mins", "to", "finish", "somehow", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "merge", "request", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "What", "if", "we", "split", "the", "pull", "and", "run", "so", "the", "user", "s", "timeout", "doesn", "t", "apply", "to", "non", "run", "time", "The", "user", "timeout", "should", "really", "only", "apply", "to", "their", "code", "run", "not", "pulling", "images", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "treeder", "what", "if", "server", "would", "pull", "image", "while", "creating", "a", "route", "and", "make", "actual", "execution", "independent", "from", "docker", "registry", "cc", "rdallman", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "the", "timeout", "defined", "by", "user", "takes", "its", "place", "just", "right", "before", "talking", "to", "COE", "driver", "that", "s", "why", "first", "time", "we", "run", "function", "it", "takes", "additional", "time", "to", "pull", "an", "image", "from", "registry", "and", "start", "it", "for", "the", "first", "time", "before", "docker", "cache", "NUMBER", "So", "we", "can", "we", "can", "move", "code", "that", "pulls", "an", "image", "into", "route", "creation", "so", "we", "can", "run", "NUMBER", "mins", "timeout", "without", "seeing", "those", "context", "deadlines", "because", "some", "function", "were", "use", "parent", "timed", "context", "that", "comes", "from", "worker", "and", "be", "pass", "down", "to", "docker", "API", "but", "other", "API", "methods", "defining", "their", "own", "timed", "contexts", "with", "NUMBER", "mins", "each", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "treeder", "what", "if", "server", "would", "pull", "image", "while", "creating", "a", "route", "and", "make", "actual", "execution", "independent", "from", "docker", "registry", "cc", "rdallman", "That", "assumes", "we", "only", "have", "one", "server", "NUMBER", "I", "think", "before", "we", "call", "run", "on", "the", "driver", "it", "should", "do", "a", "local", "check", "for", "the", "image", "driver", "should", "support", "this", "check", "if", "not", "find", "pull", "it", "and", "wait", "NUMBER", "Once", "image", "exists", "then", "call", "run", "with", "the", "user", "defined", "timeout", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "And", "rdallman", "I", "m", "not", "saying", "any", "of", "this", "be", "bad", "or", "wrong", "I", "m", "just", "trying", "to", "see", "if", "we", "can", "clean", "it", "up", "and", "or", "make", "it", "more", "clear", "what", "s", "going", "on", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "for", "sync", "it", "doesn", "t", "make", "much", "sense", "they", "set", "timeout", "to", "NUMBER", "minutes", "and", "request", "took", "NUMBER", "minutes", "because", "it", "pull", "docker", "for", "most", "of", "that", "time", "NUMBER", "after", "actually", "wrestling", "with", "it", "and", "not", "just", "pontificating", "in", "some", "internet", "thread", "the", "policy", "we", "have", "be", "relatively", "well", "tuned", "specifically", "the", "magic", "numbers", "NUMBER", "the", "retry", "policy", "be", "pretty", "straightforward", "and", "easy", "to", "grasp", "itself", "NUMBER", "it", "seems", "to", "me", "to", "close", "out", "this", "thread", "all", "that", "really", "needs", "to", "be", "do", "be", "to", "not", "log", "that", "the", "context", "deadline", "exceeded", "when", "it", "be", "from", "an", "enclosing", "function", "again", "did", "this", "at", "the", "last", "gig", "once", "already", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "So", "the", "problem", "be", "still", "there", "NUMBER", "Each", "method", "that", "involves", "Docker", "API", "possibly", "can", "cause", "context", "deadline", "and", "nothing", "NUMBER", "Such", "error", "causes", "task", "to", "fail", "with", "error", "status", "instead", "of", "timeout", "NUMBER", "So", "in", "order", "to", "solve", "this", "issue", "we", "need", "to", "wrap", "somehow", "to", "turn", "context", "deadlines", "into", "corresponding", "task", "failures", "based", "on", "error", "NUMBER", "Another", "thing", "we", "need", "to", "similify", "the", "way", "we", "execute", "function", "in", "terms", "of", "COE", "communication", "NUMBER", "Here", "s", "what", "i", "suggest", "NUMBER", "Move", "image", "inspect", "pull", "ensure", "into", "route", "creation", "this", "will", "reduce", "time", "we", "spend", "on", "creating", "and", "run", "container", "NUMBER", "NUMBER", "Inspect", "image", "when", "trying", "to", "execute", "function", "we", "wouldn", "t", "spend", "up", "to", "NUMBER", "mins", "to", "pull", "huge", "images", "NUMBER", "Any", "other", "solutions", "seems", "to", "be", "plumb", "on", "plumb", "for", "plumb", "NUMBER", "rdallman", "treeder", "hibooboo", "NUMBER", "what", "you", "think", "about", "that", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "issue", "NUMBER", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "denismakogon", "Doing", "pull", "inspect", "on", "route", "creation", "would", "mean", "that", "we", "be", "inspecting", "pulling", "on", "to", "a", "box", "that", "might", "never", "run", "the", "code", "NUMBER", "Kind", "of", "hard", "to", "do", "that", "NUMBER", "Unless", "we", "have", "lb", "designed", "to", "route", "creation", "traffic", "deterministically", "NUMBER", "as", "well", "NUMBER", "so", "that", "the", "first", "invocation", "of", "the", "function", "will", "in", "fact", "to", "to", "the", "box", "that", "pull", "it", "NUMBER", "rdallman", "What", "do", "you", "think", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "yea", "creating", "routes", "pulling", "image", "won", "t", "scale", "at", "all", "that", "s", "not", "really", "the", "behavior", "we", "want", "NUMBER", "i", "think", "we", "need", "to", "filter", "context", "error", "to", "users", "better", "sure", "NUMBER", "idk", "i", "think", "there", "be", "much", "bigger", "fish", "to", "fry", "than", "pruning", "the", "logs", "NUMBER", "i", "think", "there", "be", "a", "lot", "of", "_real_", "error", "to", "get", "from", "them", "at", "the", "moment", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "issue", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "No", "longer", "seeing", "this", "type", "of", "error", "in", "logs", "env", "configuration", "NUMBER", "smart", "LB", "NUMBER", "fn", "nodes", "Requests", "NUMBER", "K", "request", "run", "in", "group", "of", "NUMBER", "K", "in", "parallel", "more", "error", "from", "DB", "layer", "NUMBER", "NUMBER", "Can", "someone", "confirm", "rdallman", "carimura", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "these", "be", "no", "longer", "user", "visible", "so", "closing", "this", "NUMBER", "in", "some", "capacity", "these", "will", "always", "happen", "docker", "dies", "and", "more", "granular", "tickets", "will", "be", "useful", "if", "they", "re", "fixable", "in", "some", "capacity", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Currently", "it", "s", "all", "in", "the", "fn", "README", "but", "should", "have", "a", "page", "discussing", "it", "a", "bit", "more", "NUMBER", "App", "level", "route", "level", "set", "via", "API", "or", "func", "NUMBER", "yaml", "keep", "secrets", "in", "API", "only", "not", "in", "func", "NUMBER", "yaml", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "This", "shown", "up", "while", "discovering", "NUMBER", "and", "NUMBER", "NUMBER", "fn", "apps", "list", "unexpect", "error", "GET", "apps", "NUMBER", "GetApps", "default", "Error", "NUMBER", "xc", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "issue", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "So", "here", "s", "the", "thing", "NUMBER", "Assume", "we", "have", "route", "with", "next", "fn", "fn", "routes", "inspect", "testapp", "longverylongnameforsomereason", "format", "default", "idle_timeout", "NUMBER", "image", "funcy", "log", "NUMBER", "memory", "NUMBER", "path", "longverylongnameforsomereason", "timeout", "NUMBER", "type", "sync", "When", "FN", "server", "start", "and", "Docker", "be", "available", "everything", "works", "fine", "NUMBER", "But", "when", "Docker", "becomes", "inaccessible", "from", "FN", "server", "sync", "executions", "be", "not", "capable", "to", "fail", "when", "its", "timeout", "exceeded", "NUMBER", "FN", "server", "falls", "into", "long", "retry", "infinite", "poll", "for", "connecting", "to", "Docker", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Finding", "route", "on", "datastore", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "testapp", "call_id", "NUMBER", "BMCK", "NUMBER", "QY", "NUMBER", "WG", "NUMBER", "path", "longverylongnameforsomereason", "route", "longverylongnameforsomereason", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Got", "routes", "from", "datastore", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "testapp", "call_id", "NUMBER", "BMCK", "NUMBER", "QY", "NUMBER", "WG", "NUMBER", "route", "longverylongnameforsomereason", "routes", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "testapp", "call_id", "NUMBER", "BMCK", "NUMBER", "QY", "NUMBER", "WG", "NUMBER", "image", "funcy", "log", "NUMBER", "name", "run", "NUMBER", "testapp", "NUMBER", "request", "route", "longverylongnameforsomereason", "type", "count", "value", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "testapp", "call_id", "NUMBER", "BMCK", "NUMBER", "QY", "NUMBER", "WG", "NUMBER", "image", "funcy", "log", "NUMBER", "name", "run", "NUMBER", "testapp", "NUMBER", "waittime", "route", "longverylongnameforsomereason", "type", "time", "value", "NUMBER", "s", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "i", "o", "timeout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "i", "o", "timeout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "i", "o", "timeout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "i", "o", "timeout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "i", "o", "timeout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "i", "o", "timeout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "i", "o", "timeout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "i", "o", "timeout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "i", "o", "timeout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "no", "route", "to", "host", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "i", "o", "timeout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "no", "route", "to", "host", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "i", "o", "timeout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "no", "route", "to", "host", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "i", "o", "timeout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "no", "route", "to", "host", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "i", "o", "timeout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "no", "route", "to", "host", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "i", "o", "timeout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "no", "route", "to", "host", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "i", "o", "timeout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "no", "route", "to", "host", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "i", "o", "timeout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "no", "route", "to", "host", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "host", "be", "down", "Steps", "to", "reproduce", "NUMBER", "Start", "Fn", "server", "with", "Docker", "reachable", "NUMBER", "NUMBER", "Create", "sync", "route", "NUMBER", "NUMBER", "Tear", "down", "Docker", "NUMBER", "NUMBER", "Run", "function", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "i", "believe", "that", "it", "retries", "for", "something", "like", "NUMBER", "minutes", "due", "to", "how", "ironworker", "works", "but", "mostly", "just", "make", "sure", "contexts", "be", "plumbed", "correctly", "down", "into", "the", "docker", "client", "we", "use", "it", "support", "cancellation", "well", "NUMBER", "good", "find", "NUMBER", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "I", "can", "see", "that", "be", "a", "huge", "problem", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "issue", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "issue", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rdallman", "i", "think", "problem", "be", "hidden", "in", "this", "code", "LINK", "odx", "NUMBER", "oracle", "NUMBER", "com", "odx", "function", "blob", "master", "api", "runner", "drivers", "docker", "docker", "NUMBER", "go", "L", "NUMBER", "cancel", "be", "actually", "call", "right", "after", "run", "method", "but", "timeout", "bound", "context", "cancel", "method", "should", "be", "use", "in", "another", "way", "similar", "to", "LINK", "odx", "NUMBER", "oracle", "NUMBER", "com", "odx", "function", "blob", "master", "api", "runner", "worker", "NUMBER", "go", "L", "NUMBER", "NUMBER", "isn", "t", "it", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "assigned", "to", "denismakogon", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "merge", "request", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "So", "i", "did", "further", "investigation", "and", "was", "able", "to", "figure", "out", "two", "things", "NUMBER", "NUMBER", "When", "Docker", "becomes", "unreachable", "docker", "client", "returns", "io", "NUMBER", "EOF", "NUMBER", "Task", "execution", "flow", "that", "we", "have", "now", "may", "cause", "request", "hang", "for", "NUMBER", "NUMBER", "x", "NUMBER", "mins", "if", "server", "has", "unstable", "connection", "with", "Docker", "NUMBER", "So", "make", "retry", "func", "try", "to", "catch", "io", "NUMBER", "EOF", "be", "not", "the", "case", "we", "need", "consistent", "timed", "contexts", "to", "make", "UX", "better", "NUMBER", "Another", "question", "NUMBER", "Why", "should", "user", "wait", "for", "container", "to", "disapear", "can", "t", "this", "be", "do", "in", "async", "way", "NUMBER", "Why", "can", "t", "we", "make", "image", "inspeting", "pulling", "during", "route", "creation", "which", "again", "will", "make", "UX", "better", "and", "will", "reduce", "overall", "possible", "execution", "time", "way", "more", "shorter", "NUMBER", "Similar", "question", "at", "NUMBER", "rdallman", "treeder", "hibooboo", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "denismakogon", "the", "docker", "client", "sets", "a", "timeout", "for", "every", "request", "it", "s", "make", "already", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "milestone", "to", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "In", "gitlab", "by", "mhaji", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Based", "on", "this", "LINK", "odx", "NUMBER", "oracle", "NUMBER", "com", "odx", "jfaas", "issue", "NUMBER", "discussion", "there", "s", "a", "usecase", "for", "support", "multiple", "build", "options", "under", "one", "runtime", "NUMBER", "For", "example", "we", "d", "like", "to", "have", "a", "single", "java", "runtime", "but", "to", "support", "multiple", "build", "strategies", "e", "NUMBER", "g", "NUMBER", "maven", "gradle", "etc", "NUMBER", "At", "the", "moment", "I", "see", "this", "as", "a", "little", "bit", "tricky", "without", "splitting", "out", "the", "LangHelper", "abstraction", "into", "two", "other", "interfaces", "that", "be", "each", "use", "for", "one", "thing", "InitHelper", "when", "performing", "fn", "init", "and", "BuildHelper", "when", "performing", "fn", "build", "NUMBER", "This", "will", "mean", "that", "the", "init", "helper", "can", "be", "shared", "for", "all", "Java", "runtimes", "however", "we", "can", "have", "different", "build", "helpers", "depending", "on", "what", "we", "have", "in", "our", "work", "directory", "NUMBER", "I", "ve", "had", "a", "quick", "sketch", "of", "how", "this", "would", "look", "in", "code", "golang", "type", "LangHelper", "interface", "GetRuntimeInitHelper", "RuntimeInitHelper", "GetRuntimeBuildHelper", "RuntimeBuildHelper", "error", "type", "RuntimeInitHelper", "interface", "Entrypoint", "string", "Cmd", "string", "HasBoilerplate", "bool", "GenerateBoilerplate", "error", "type", "RuntimeBuildHelper", "interface", "BuildFromImage", "string", "RunFromImage", "string", "IsMultiStage", "bool", "DockerfileBuildCmds", "string", "DockerfileCopyCmds", "string", "HasPreBuild", "bool", "PreBuild", "error", "AfterBuild", "error", "NUMBER", "type", "JavaLangHelper", "struct", "NUMBER", "func", "lh", "JavaLangHelper", "GetRuntimeBuildHelper", "RuntimeBuildHelper", "error", "try", "to", "detect", "if", "maven", "or", "gradle", "and", "return", "the", "right", "buildhelper", "I", "think", "the", "good", "thing", "about", "this", "change", "be", "it", "should", "not", "have", "a", "much", "of", "an", "impact", "on", "the", "other", "runtimes", "as", "they", "can", "continue", "to", "have", "one", "concrete", "type", "which", "implicitly", "implement", "both", "the", "init", "and", "build", "helpers", "NUMBER", "Saying", "that", "this", "be", "just", "a", "proposal", "please", "suggest", "alternatives", "I", "don", "t", "feel", "very", "strongly", "about", "doing", "it", "just", "this", "way", "NUMBER", "If", "this", "be", "a", "sane", "proposal", "I", "m", "happy", "to", "implement", "it", "when", "it", "comes", "to", "add", "the", "gradle", "build", "to", "the", "java", "runtime", "NUMBER", "Currently", "there", "be", "MR", "for", "add", "maven", "see", "NUMBER", "I", "think", "it", "s", "worth", "discussing", "the", "proposal", "first", "NUMBER", "In", "gitlab", "by", "mhaji", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "merge", "request", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "x", "empty", "call", "log", "be", "NUMBER", "and", "not", "an", "empty", "string", "pedantic", "x", "hot", "function", "don", "t", "get", "a", "call", "log", "need", "to", "re", "plumb", "flog", "so", "each", "task", "can", "attach", "to", "it", "basically", "In", "gitlab", "by", "rdallman", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "kinda", "workin", "on", "In", "gitlab", "by", "rdallman", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "the", "description", "In", "gitlab", "by", "rdallman", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mention", "in", "merge", "request", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "the", "description", "In", "gitlab", "by", "denismakogon", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "If", "there", "s", "no", "log", "entry", "than", "yes", "it", "must", "be", "NUMBER", "Because", "there", "s", "difference", "in", "write", "nothing", "but", "empty", "string", "and", "write", "nothig", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "right", "want", "to", "delineate", "the", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "the", "description", "In", "gitlab", "by", "rdallman", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "the", "description", "In", "gitlab", "by", "rdallman", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "marked", "the", "task", "hot", "function", "don", "t", "get", "a", "call", "log", "need", "to", "re", "plumb", "flog", "so", "each", "task", "can", "attach", "to", "it", "basically", "as", "completed", "not", "yet", "empty", "call", "log", "be", "NUMBER", "and", "not", "an", "empty", "string", "pedantic", "still", "needs", "to", "be", "do", "need", "to", "store", "empty", "string", "in", "logs", "In", "gitlab", "by", "mhaji", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Currently", "the", "fn", "CLI", "references", "an", "old", "version", "of", "the", "function", "API", "server", "NUMBER", "It", "would", "be", "great", "if", "the", "Docker", "image", "version", "referenced", "in", "the", "code", "matched", "the", "version", "of", "the", "fn", "cli", "that", "be", "be", "use", "to", "start", "it", "NUMBER", "In", "gitlab", "by", "mhaji", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Currently", "if", "I", "m", "run", "fn", "run", "or", "fn", "build", "a", "temporary", "Dockerfile", "be", "created", "in", "the", "work", "directory", "NUMBER", "If", "the", "execution", "be", "interrupted", "this", "file", "be", "not", "cleaned", "up", "NUMBER", "This", "can", "have", "unexpect", "behaviour", "as", "subsequent", "fn", "run", "build", "commands", "will", "not", "generate", "a", "new", "temporary", "file", "Dockerfile", "and", "will", "continue", "to", "use", "the", "old", "one", "NUMBER", "Suggestion", "be", "to", "register", "a", "sig", "handler", "shutdown", "hook", "to", "clean", "this", "file", "up", "NUMBER", "Might", "look", "at", "sending", "a", "PR", "for", "this", "if", "I", "can", "get", "to", "it", "but", "I", "thought", "I", "would", "create", "the", "issue", "first", "NUMBER", "In", "gitlab", "by", "mhaji", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "add", "NUMBER", "label", "In", "gitlab", "by", "jan_grant", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "be", "roughly", "the", "idea", "NUMBER", "Although", "that", "s", "based", "off", "the", "java", "maven", "runtime", "branch", "the", "patch", "could", "be", "cherry", "pick", "on", "its", "own", "NUMBER", "The", "cli", "use", "to", "be", "a", "sub", "project", "in", "the", "fn", "repo", "that", "s", "why", "this", "issue", "be", "not", "in", "cli", "NUMBER", "it", "be", "a", "very", "old", "issue", "NUMBER", "Good", "to", "know", "it", "s", "fix", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Run", "millions", "of", "function", "and", "track", "timings", "error", "rates", "etc", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "This", "can", "be", "do", "use", "integration", "test", "API", "except", "need", "to", "implement", "timing", "and", "better", "error", "tracing", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fnlb", "test", "harness", "pkg", "runs", "primes", "funcs", "and", "the", "tutorial", "could", "easily", "be", "scripted", "to", "start", "a", "few", "fn", "nodes", "lb", "link", "them", "up", "and", "start", "make", "request", "but", "there", "s", "some", "nice", "sugar", "in", "there", "already", "In", "gitlab", "by", "rdallman", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "step", "NUMBER", "make", "a", "cli", "tool", "that", "boots", "a", "k", "NUMBER", "s", "cluster", "with", "N", "nodes", "behind", "an", "LB", "creates", "a", "simple", "sync", "function", "F", "runs", "X", "number", "of", "F", "and", "then", "chart", "throughput", "error", "and", "average", "max", "p", "NUMBER", "latency", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "In", "gitlab", "by", "carimura", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Organize", "examples", "by", "language", "but", "also", "add", "a", "readme", "to", "examples", "page", "and", "list", "out", "techs", "as", "well", "ie", "slack", "twitter", "etc", "NUMBER", "really", "need", "a", "better", "way", "to", "organize", "examples", "overall", "for", "new", "user", "experience", "NUMBER", "maybe", "this", "be", "functionhub", "In", "gitlab", "by", "carimura", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "I", "modify", "a", "function", "run", "the", "sequence", "some", "chained", "function", "did", "not", "get", "expected", "output", "realized", "I", "didn", "t", "deploy", "it", "NUMBER", "But", "this", "be", "not", "obvious", "at", "all", "NUMBER", "Func", "NUMBER", "yaml", "has", "v", "NUMBER", "Docker", "images", "shows", "v", "NUMBER", "servers", "route", "shows", "v", "NUMBER", "but", "I", "change", "the", "file", "NUMBER", "suggestions", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Then", "function", "doesn", "t", "need", "to", "set", "that", "header", "which", "be", "probably", "the", "main", "one", "that", "someone", "would", "need", "to", "send", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Support", "function", "supplied", "by", "URL", "NUMBER", "Docker", "support", "image", "importing", "through", "URL", "the", "same", "can", "be", "do", "at", "fn", "layer", "NUMBER", "CLI", "fn", "routes", "create", "TAG", "TAG", "container", "url", "where", "container", "url", "be", "a", "storage", "URL", "where", "image", "provide", "by", "docker", "CLI", "NUMBER", "be", "stored", "NUMBER", "NUMBER", "LINK", "NUMBER", "LINK", "In", "gitlab", "by", "denismakogon", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "the", "description", "LINK", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "The", "Node", "Lambda", "stuff", "was", "update", "to", "follow", "the", "new", "workflow", "but", "not", "Python", "or", "Java", "NUMBER", "Those", "should", "be", "converted", "to", "the", "new", "style", "which", "be", "essentially", "just", "this", "fn", "init", "runtime", "lambda", "node", "TAG", "lambda", "node", "Then", "they", "d", "follow", "the", "regular", "workflow", "from", "that", "point", "on", "NUMBER", "Also", "need", "to", "test", "and", "ensure", "the", "fn", "import", "command", "works", "still", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "assigned", "to", "treeder", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Think", "I", "already", "did", "some", "of", "this", "recently", "so", "I", "ll", "finish", "it", "up", "NUMBER", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Is", "this", "just", "write", "documentation", "or", "do", "we", "actually", "have", "the", "feature", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Believe", "this", "be", "all", "support", "just", "not", "docs", "on", "how", "to", "do", "it", "NUMBER", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "K", "guess", "would", "require", "someone", "figuring", "out", "how", "to", "do", "it", "and", "docing", "it", "NUMBER", "In", "gitlab", "by", "treeder", "on", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Take", "a", "look", "at", "this", "branch", "looks", "like", "it", "never", "get", "merge", "LINK", "io", "function", "pull", "NUMBER", "NUMBER", "this", "was", "for", "logging", "into", "a", "registry", "NUMBER", "And", "this", "LINK", "io", "function", "issue", "NUMBER", "And", "this", "LINK", "io", "function", "pull", "NUMBER", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "This", "may", "just", "be", "examples", "docs", "but", "would", "be", "interesting", "to", "use", "Functions", "in", "Middleware", "NUMBER", "For", "instance", "an", "auth", "check", "could", "call", "an", "auth", "function", "NUMBER", "In", "gitlab", "by", "derekschultz", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "As", "a", "function", "developer", "it", "would", "help", "to", "be", "able", "to", "easily", "rollback", "a", "function", "to", "a", "previous", "version", "or", "specified", "version", "so", "that", "I", "don", "t", "have", "to", "manually", "edit", "the", "func", "NUMBER", "yaml", "and", "redeploy", "NUMBER", "fn", "rollback", "TAG", "Perhaps", "also", "fn", "rollback", "TAG", "version", "TAG", "In", "gitlab", "by", "denismakogon", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "For", "now", "we", "can", "create", "pipeline", "through", "webhooks", "i", "NUMBER", "e", "NUMBER", "do", "HTTP", "call", "to", "another", "webhook", "from", "function", "NUMBER", "But", "the", "problem", "be", "that", "each", "time", "function", "call", "request", "goes", "through", "control", "plane", "few", "hops", "expected", "better", "to", "have", "an", "ability", "to", "let", "function", "to", "talk", "through", "internal", "Docker", "network", "maybe", "define", "specific", "network", "for", "N", "function", "that", "would", "allow", "to", "reduce", "networking", "load", "NUMBER", "In", "gitlab", "by", "denismakogon", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "title", "from", "Functions", "pipe", "line", "to", "Functions", "pipeline", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "LINK", "Formulae", "NUMBER", "html", "brew", "install", "fn", "In", "gitlab", "by", "rdallman", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "here", "s", "the", "one", "i", "made", "for", "ironcli", "a", "while", "ago", "LINK", "core", "pull", "NUMBER", "file", "should", "be", "almost", "the", "same", "In", "gitlab", "by", "rdallman", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "we", "need", "a", "public", "repo", "before", "we", "can", "really", "do", "this", "or", "we", "can", "make", "it", "for", "the", "iron", "repo", "one", "but", "idk", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Yes", "need", "to", "wait", "for", "it", "to", "be", "public", "NUMBER", "Created", "formula", "below", "NUMBER", "This", "works", "except", "I", "think", "it", "violates", "the", "binary", "rule", "apparently", "homebrew", "wants", "people", "to", "build", "on", "the", "user", "s", "machine", "no", "idea", "why", "but", "will", "try", "to", "get", "it", "through", "anyways", "NUMBER", "If", "not", "I", "ll", "change", "it", "to", "the", "way", "Reed", "has", "it", "for", "ironcli", "LINK", "core", "pull", "NUMBER", "file", "NUMBER", "TODO", "Once", "public", "this", "code", "will", "go", "into", "usr", "local", "Homebrew", "Library", "Taps", "homebrew", "homebrew", "core", "Formula", "fn", "NUMBER", "rb", "and", "push", "to", "a", "fork", "then", "pull", "request", "into", "homebrew", "core", "NUMBER", "ruby", "class", "Fn", "Formula", "desc", "The", "CLI", "tool", "for", "the", "fn", "project", "NUMBER", "homepage", "LINK", "version", "NUMBER", "url", "LINK", "version", "NUMBER", "tar", "NUMBER", "gz", "sha", "NUMBER", "cdcfdf", "NUMBER", "be", "NUMBER", "a", "NUMBER", "fdd", "NUMBER", "f", "NUMBER", "f", "NUMBER", "ee", "NUMBER", "f", "NUMBER", "d", "NUMBER", "a", "NUMBER", "bc", "NUMBER", "f", "NUMBER", "bf", "NUMBER", "b", "NUMBER", "f", "def", "install", "base_url", "LINK", "version", "system", "curl", "sSL", "o", "fn", "base_url", "fn_mac", "puts", "ls", "al", "bin", "NUMBER", "install", "fn", "end", "def", "post_install", "puts", "fn", "version", "end", "test", "do", "puts", "bin", "fn", "version", "end", "end", "dep", "s", "formula", "LINK", "core", "blob", "master", "Formula", "dep", "NUMBER", "rb", "Having", "a", "dependency", "on", "go", "be", "pretty", "wasteful", "hopefully", "they", "ll", "let", "us", "just", "install", "the", "bin", "NUMBER", "oooh", "think", "I", "figured", "out", "how", "to", "do", "it", "right", "NUMBER", "LINK", "Submitted", "PR", "LINK", "core", "pull", "NUMBER", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "CPU", "memory", "In", "gitlab", "by", "rdallman", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "not", "sure", "how", "to", "integrate", "exactly", "NUMBER", "we", "could", "just", "write", "lines", "out", "to", "their", "stderr", "but", "if", "they", "re", "doing", "e", "NUMBER", "g", "json", "logs", "in", "their", "stderr", "logs", "and", "we", "write", "in", "a", "logfmt", "line", "then", "it", "be", "kind", "of", "weird", "NUMBER", "should", "we", "make", "format", "somehow", "configurable", "or", "for", "MVP", "we", "can", "just", "write", "in", "logfmt", "lines", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "I", "was", "sort", "of", "thinking", "along", "the", "lines", "of", "showing", "it", "via", "API", "calls", "similar", "to", "logs", "NUMBER", "Can", "check", "usage", "per", "function", "call", "and", "perhaps", "later", "we", "can", "aggregate", "and", "see", "avg", "min", "max", "etc", "NUMBER", "This", "be", "longer", "term", "though", "not", "needed", "right", "away", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "yea", "so", "same", "as", "worker", "basically", "NUMBER", "like", "it", "was", "nice", "NUMBER", "so", "we", "can", "just", "upload", "all", "stats", "at", "the", "end", "then", "NUMBER", "the", "current", "stats", "implementation", "polls", "every", "second", "maybe", "we", "should", "lower", "that", "granularity", "to", "NUMBER", "ms", "since", "function", "won", "t", "run", "for", "very", "long", "NUMBER", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "remove", "milestone", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "both", "default", "and", "hot", "function", "support", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "milestone", "to", "NUMBER", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "milestone", "to", "NUMBER", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "milestone", "to", "NUMBER", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "assigned", "to", "hibooboo", "NUMBER", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Going", "to", "tackle", "this", "want", "to", "clarify", "what", "the", "lib", "should", "add", "do", "as", "a", "general", "case", "NUMBER", "This", "what", "I", "think", "it", "should", "handle", "looking", "for", "feedback", "to", "see", "if", "I", "be", "track", "before", "I", "start", "NUMBER", "Normal", "function", "Read", "from", "stdin", "until", "it", "be", "do", "be", "read", "NUMBER", "Allow", "you", "to", "read", "from", "stdin", "to", "json", "assuming", "you", "be", "recieving", "json", "NUMBER", "Same", "but", "for", "yaml", "toml", "etc", "NUMBER", "Read", "As", "if", "it", "be", "just", "text", "Get", "headers", "use", "env", "vars", "easily", "NUMBER", "Hot", "function", "Read", "from", "stdin", "on", "loop", "use", "the", "http", "format", "defined", "in", "function", "NUMBER", "Put", "that", "info", "into", "a", "usable", "format", "that", "be", "pass", "into", "a", "function", "call", "that", "runs", "on", "loop", "and", "on", "return", "puts", "the", "response", "to", "stdout", "NUMBER", "Easily", "handle", "methods", "and", "status", "code", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Main", "thing", "here", "be", "to", "define", "what", "the", "interface", "for", "users", "will", "be", "NUMBER", "See", "Lambda", "for", "example", "in", "Java", "LINK", "for", "eclipse", "v", "NUMBER", "user", "guide", "lambda", "tutorial", "NUMBER", "html", "and", "node", "LINK", "prog", "model", "handler", "NUMBER", "html", "NUMBER", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "How", "about", "something", "along", "the", "lines", "of", "go", "type", "Handler", "interface", "Handle", "ctx", "context", "NUMBER", "Context", "input", "func", "NUMBER", "Input", "func", "NUMBER", "Output", "type", "Input", "interface", "Read", "p", "byte", "n", "int", "err", "error", "implement", "io", "NUMBER", "Reader", "Header", "name", "string", "string", "should", "we", "call", "them", "headers", "type", "Output", "interface", "Write", "p", "byte", "n", "int", "err", "error", "implement", "io", "NUMBER", "Writer", "TODO", "some", "way", "to", "set", "content", "type", "etc", "In", "gitlab", "by", "rdallman", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "treeder", "looks", "nice", "NUMBER", "still", "need", "to", "define", "the", "actual", "code", "the", "user", "puts", "in", "i", "NUMBER", "e", "NUMBER", "main", "so", "what", "you", "re", "saying", "be", "go", "import", "odx", "gofn", "strings", "io", "func", "main", "var", "m", "myThing", "gofn", "NUMBER", "Handle", "m", "NUMBER", "Handle", "maybe", "gofn", "NUMBER", "Handle", "gofn", "NUMBER", "HandleFunc", "handler", "type", "myThing", "struct", "implement", "fngo", "NUMBER", "Handler", "func", "m", "myThing", "Handle", "ctx", "context", "NUMBER", "Context", "in", "input", "fngo", "NUMBER", "Input", "out", "fngo", "NUMBER", "Output", "io", "NUMBER", "Copy", "out", "strings", "NUMBER", "NewReader", "yodawg", "as", "for", "other", "langs", "it", "would", "be", "nice", "if", "they", "were", "all", "kind", "of", "consistent", "and", "this", "be", "a", "pretty", "go", "specific", "implementation", "due", "to", "use", "of", "interfaces", "NUMBER", "if", "every", "language", "has", "closures", "then", "maybe", "we", "can", "pull", "off", "something", "with", "some", "uniformity", "like", "go", "func", "main", "gofn", "NUMBER", "Handle", "yodawg", "func", "yodawg", "ctx", "fngo", "NUMBER", "Context", "yes", "I", "realize", "your", "example", "works", "in", "this", "case", "but", "note", "the", "function", "header", "io", "NUMBER", "Copy", "ctx", "NUMBER", "Output", "ctx", "NUMBER", "Input", "or", "go", "func", "main", "gofn", "NUMBER", "Handle", "yodawg", "func", "yodawg", "io", "NUMBER", "Copy", "os", "NUMBER", "Stdout", "os", "NUMBER", "Stdin", "i", "NUMBER", "e", "NUMBER", "everything", "be", "either", "shoved", "into", "the", "fngo", "NUMBER", "Context", "or", "into", "the", "normal", "function", "path", "use", "stdin", "and", "stdout", "and", "then", "gofn", "NUMBER", "Handle", "would", "basically", "be", "go", "func", "Handle", "f", "func", "for", "readIn", "will", "read", "a", "standard", "or", "normal", "function", "input", "from", "stdin", "and", "output", "body", "and", "vars", "you", "get", "the", "idea", "in", "vars", "isHot", "readIn", "os", "NUMBER", "Stdin", "io", "NUMBER", "Copy", "os", "NUMBER", "Stdin", "in", "setEnvVars", "vars", "f", "if", "isHot", "break", "eh", "my", "thinking", "be", "mostly", "like", "in", "ruby", "python", "java", "etc", "etc", "we", "can", "make", "a", "similar", "fn", "NUMBER", "Context", "which", "has", "a", "familiar", "fn", "NUMBER", "Context", "NUMBER", "Input", "and", "fn", "NUMBER", "Context", "NUMBER", "Output", "and", "fn", "NUMBER", "Context", "NUMBER", "Vars", "or", "we", "just", "shove", "things", "back", "into", "how", "they", "be", "in", "a", "not", "hot", "function", "NUMBER", "just", "a", "brain", "dump", "from", "me", "not", "too", "opinionated", "either", "way", "NUMBER", "thoughts", "In", "gitlab", "by", "hibooboo", "NUMBER", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "IMO", "the", "wrappers", "do", "not", "need", "to", "be", "uniform", "across", "languages", "as", "each", "language", "has", "different", "patterns", "and", "idioms", "and", "will", "need", "a", "custom", "wrapper", "NUMBER", "So", "make", "them", "similar", "would", "be", "good", "but", "Do", "not", "think", "they", "need", "to", "all", "be", "the", "same", "NUMBER", "Up", "to", "you", "guys", "though", "NUMBER", "treeder", "What", "do", "you", "think", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "I", "tend", "to", "agree", "with", "you", "you", "hibooboo", "NUMBER", "should", "be", "what", "a", "user", "would", "expect", "based", "on", "the", "language", "NUMBER", "rdallman", "I", "was", "thinking", "there", "wouldn", "t", "be", "a", "main", "you", "just", "define", "the", "function", "NUMBER", "Then", "on", "fn", "run", "it", "would", "wrap", "it", "and", "build", "it", "NUMBER", "Similar", "to", "other", "languages", "on", "Lambda", "NUMBER", "In", "gitlab", "by", "rdallman", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "for", "go", "specifically", "the", "code", "won", "t", "build", "locally", "not", "use", "fn", "wrapper", "stuff", "without", "a", "main", "in", "package", "main", "and", "if", "they", "don", "t", "use", "package", "main", "then", "we", "would", "have", "to", "create", "a", "package", "main", "and", "import", "their", "package", "and", "then", "call", "their", "handler", "or", "change", "their", "package", "to", "package", "main", "on", "the", "fly", "so", "seems", "kind", "of", "crufty", "and", "not", "too", "hard", "to", "make", "them", "write", "main", "and", "then", "it", "all", "falls", "out", "pretty", "intuitively", "NUMBER", "for", "javascript", "lambda", "specifically", "they", "can", "just", "eval", "shit", "so", "it", "s", "a", "little", "different", "just", "write", "your", "function", "and", "then", "unicorns", "NUMBER", "i", "can", "imagine", "other", "languages", "be", "similarly", "weird", "to", "Go", "but", "as", "you", "say", "maybe", "some", "langs", "we", "don", "t", "have", "to", "but", "we", "don", "t", "have", "the", "benefit", "of", "throw", "function", "at", "vms", "like", "lambda", "do", "since", "we", "re", "use", "docker", "so", "we", "at", "least", "have", "to", "generate", "or", "force", "them", "to", "write", "code", "that", "actually", "executes", "the", "code", "they", "want", "i", "guess", "it", "s", "pretty", "obvious", "i", "lean", "towards", "the", "former", "NUMBER", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "We", "might", "want", "both", "things", "now", "that", "I", "think", "about", "it", "NUMBER", "I", "nice", "library", "that", "can", "be", "use", "if", "you", "want", "more", "control", "NUMBER", "But", "the", "default", "simple", "way", "would", "just", "be", "a", "handler", "that", "gets", "wrapped", "with", "a", "main", "and", "all", "the", "goodies", "NUMBER", "Fission", "do", "it", "an", "interesting", "way", "use", "plugins", "LINK", "In", "gitlab", "by", "rdallman", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fission", "appears", "to", "use", "package", "main", "in", "their", "example", "I", "guess", "I", "don", "t", "really", "see", "the", "benefit", "of", "be", "able", "to", "omit", "NUMBER", "LOC", "NUMBER", "woo", "fuckin", "hoo", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "add", "NUMBER", "label", "In", "gitlab", "by", "carimura", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "remove", "NUMBER", "label", "In", "gitlab", "by", "treeder", "on", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "change", "milestone", "to", "NUMBER", "In", "gitlab", "by", "treeder", "on", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "our", "common", "syntax", "support", "for", "lambda", "syntax", "too", "probably", "move", "our", "current", "lambda", "support", "into", "the", "FDK", "both", "default", "and", "hot", "JSON", "function", "For", "Lambda", "could", "use", "mostly", "the", "same", "code", "but", "create", "a", "handleLambda", "function", "to", "handle", "AWS", "specific", "syntax", "NUMBER", "Then", "we", "don", "t", "have", "two", "Node", "libs", "hanging", "around", "NUMBER", "need", "rebase", "hibooboo", "NUMBER", "needs", "rebase", "but", "LGTM"], "text_count": [0, 24648, 5978, 2636, 1119, 819, 1258, 9, 227, 3330, 3016, 6907, 3584, 2599, 2658, 905, 0, 0, 0, 0, 7542, 2101, 1187, 834, 1280, 1203, 0, 0, 0, 0, 12444, 7857, 4837, 258, 2168, 830, 0, 0, 0, 0, 16475, 76, 6687, 6322, 4300, 0, 0, 0, 0, 0, 4480, 1849, 2205, 1253, 2028, 781, 1867, 0, 0, 0, 12469, 924, 9934, 899, 0, 0, 0, 0, 0, 0, 8967, 1255, 6376, 2628, 980, 0, 0, 0, 0, 0, 15883, 7974, 1277, 5934, 780, 623, 0, 0, 0, 0, 822, 5432, 558, 0, 0, 0, 0, 0, 0, 0, 15730, 3404, 8791, 3679, 0, 0, 0, 0, 0, 0, 24550, 49595, 603, 1693, 616, 902, 0, 0, 0, 0, 66381, 334, 49713, 708, 10934, 14731]}, {"repo": "fn", "type": "nonelite", "title": "", "number of text": 1435, "text": "  What's left in this metric with the uds and pull times removed?  Just the container start time?  Wonder if it makes sense to public two metrics here: the total time as we do now, and the time without uds and pull?  Apologies if we're already doing this and I've just overlooked it.  @shreyagarge Could you please perhaps move these to api/common/stats_utils.go?  Looks good, working in my testing.  @mattstep branch builder namespace still kicking after 2 days looks like it's good to merge  ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [Rtvik Sriram Bharadwaj](https://github.com/bharadwr)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [Rtvik Sriram Bharadwaj](https://github.com/bharadwr)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [Rtvik Sriram Bharadwaj](https://github.com/bharadwr)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! ## CLA Bot\n\nAll committers have signed the CLA.  \ud83e\udd1e   The description of the change is clear and seems a cool thing to have but then reading the implementation I am having some troubles.\r\n Some questions:\r\n> even have the front end writing headers while TryExec is writing headers.\r\nIs this change addresses this issue as well? Reading the code seems to me that this case (having the front end writing headers) is still possible\r\n\r\nThe change to the sentToRunner function is about the optimisation for copying RequestBody, right? If so shall it go into a different change? I am not a great fan of merging more changes in a single PR and it confuses me in reviewing as I have to change context, probably it is just me being an old man  so if you don't want to change that's fine. thanks!  thanks!  oh, this looks legit. While LB is finishing off reading from Runner (the goroutine above), the runner_invoke.go code might be already writing headers. I noticed that most of these headers (syncResponseWriter or DetachedResponseWriter) are **shallow** copies of the original gin resp headers map. I don't think the issue is specific to detached mode. In both modes, a shallow copy of header is being made and while the headers are being set, the logger in above stack trace may be reading them. The logger merely needs status code from runner. There's no reason for it to concurrently read the entire response header map. resp writer that is safe is probably a good option. Otherwise, we'd need to:\r\n1) make sure in receiveFromRunner header.Set() (case *pb.RunnerMsg_ResultStart:) is not executed after TryExec() returns\r\n2) logger can read a local variable for the fn-http-status instead of concurrent access. We can perhaps think of other options. IMHO, concurrent/safe resp writer itself is a red flag. runner_client could perhaps create headers/buffer and then move these and relinquish ownership when done. We can avoid unnecessary IO copy this way too. w/o copy is going to require iface changes to bunch of places since this is abstracted by resp writer iface. :-(  For short term, I think we can surgically fixup receiveFromRunner and TryExec(). Unfortunately we had to revert the change to fix this issue as the solution proposed broke detach mode.  I merged #1477 already. So you need to rebase on master and change the value to a pointer  in `api/agent/drivers/docker/cookie.go`. (Just noticed I never approved this PR, sorry)  **Description**\r\nI'm trying to work out how to secure Fn when hosting it 'standalone' (without Kubernetes), given the [ext-auth middleware](https://github.com/fnproject/ext-auth/) is broken.\r\n\r\nEven if I stick Fn behind an Nginx reverse proxy that performs authentication for all the administrative actions (deploying functions, etc), someone on the server itself could still directly hit the IP address for the Fn Docker container, bypassing the Nginx reverse proxy. It would be nice to support basic auth or a Bearer auth token out-of-the-box, similar to what OpenFaaS does: https://docs.openfaas.com/reference/authentication/. Then I could at least use this auth token in the Nginx configuration. Thanks @rdallman! I did have a very brief look at trying to work out how to fix it, but didn't get too far, and you'll likely be able to do a better job. These are the compilation errors I hit when building `ext-auth` (https://github.com/fnproject/ext-auth/issues/4):\r\n```\r\n../../fnproject/ext-auth/app_listener.go:27:23: l.simple.ds.GetDatabase undefined (type models.Datastore has no field or method GetDatabase)\r\n../../fnproject/ext-auth/app_listener.go:56:23: l.simple.ds.GetDatabase undefined (type models.Datastore has no field or method GetDatabase)\r\n../../fnproject/ext-auth/app_listener.go:78:20: l.simple.ds.GetDatabase undefined (type models.Datastore has no field or method GetDatabase)\r\n../../fnproject/ext-auth/app_listener.go:89:8: filter.NameIn undefined (type *models.AppFilter has no field or method NameIn)\r\n../../fnproject/ext-auth/middleware.go:80:27: m.simple.ds.GetApp undefined (type models.Datastore has no field or method GetApp)\r\n../../fnproject/ext-auth/simple.go:91:12: s.ds.GetDatabase undefined (type models.Datastore has no field or method GetDatabase)\r\n../../fnproject/ext-auth/simple.go:107:12: s.ds.GetDatabase undefined (type models.Datastore has no field or method GetDatabase)\r\n../../fnproject/ext-auth/simple.go:126:12: s.ds.GetDatabase undefined (type models.Datastore has no field or method GetDatabase)\r\n../../fnproject/ext-auth/simple.go:146:13: s.ds.GetDatabase undefined (type models.Datastore has no field or method GetDatabase)\r\n```\r\n\r\n#1060 removed the `GetDatabase` method from `models.Datastore`, and I wasn't quite sure what to replace it with. Perhaps the solution is for `ext-auth` to have its own database object (instead of reusing `fn`'s one), but given I don't actually know Golang and don't have time to properly learn it, I stopped looking into it \ud83d\ude05 \r\n\r\nI suspect when Fn hits 1.0, the API/ABI will be less susceptible to breaking changes like this.\r\n\r\nThe other functionality that'd be useful is the ability to disable creating new users (https://github.com/fnproject/ext-auth/issues/3) and allow multiple users for one app (https://github.com/fnproject/ext-auth/issues/2). @rdallman - Any luck with the middleware? Any way to help here? I am going with standalone fn option, @Daniel15 , have you made any progress to authenticate fn? i am thinking of going by iptables access, only few apps are given access to hit fn server.  <!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **fn** can be found at the following locations:\r\n\r\n- Slack - https://fnproject.slack.com #general channel\r\n- Post a question on StackOverflow, using the \u2018fn' tag: https://stackoverflow.com/questions/tagged/fn\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nAs a official FDK maintainers we committed ourselves to deliver best tooling for doing serverless with Fn.\r\n\r\nOne of the first things we need to fix is the security of docker base images for the particular runtimes like Go, Java, Node, Python and Ruby.\r\n\r\nUnfortunately, we have obvious problems with our base images because certain packages must be updated ASAP.\r\n\r\n**Steps to reproduce the issue:**\r\n\r\n```bash\r\nsnyk test --docker <fn-runtime-image> --json | docker run --rm -i denismakogon/snyk-filter:0.0.6\r\n```\r\nreplace with any of the following images:\r\n- `fnproject/node:dev`\r\n- `fnproject/python:3.7.1` or `fnproject/python:3.7.1-dev`\r\n- `fnproject/go:dev`\r\n\r\n**Describe the results you received:**\r\nI'll post here some results of testing our base images here:\r\n- nodejs dev\r\n```\r\n-----------------------------------------\r\nFinal packages to update:\r\nnode==8.15.1\r\nbusybox==1.26.2-r9\r\nmusl==1.1.16-r14\r\n-----------------------------------------\r\n```\r\n- python 3.7.1 dev\r\n```\r\n-----------------------------------------\r\nFinal packages to update:\r\nglibc/libc-bin==2.24-11+deb9u4\r\nglibc/libc6==2.24-11+deb9u4\r\nglibc/multiarch-support==2.24-11+deb9u4\r\nopenssl/libssl1.1==1.1.0j-1~deb9u1\r\nopenssl==1.1.0j-1~deb9u1\r\nperl/perl-base==5.24.1-3+deb9u5\r\nsystemd/libsystemd0==232-25+deb9u7\r\nsystemd/libudev1==232-25+deb9u7\r\napt/libapt-pkg5.0==1.4.9\r\napt==1.4.9\r\n-----------------------------------------\r\n```\r\nand so on...\r\n\r\n**Describe the results you expected:**\r\nWell, hard to say, but I'd like to see no issues with packages in base images.\r\n\r\n**Action items**\r\n\r\n- [ ] Ask FDK maintainers to start working on base image fixes\r\n- [ ] Turn security check into CI job to prevent issues in future\r\n\r\n Thanks for starting this. +1 on the CI job. thanks for the feedback, however, i don't feel like there's a way to automate fixes for package security issues, because not all problems can be solved only by doing `apt-get update`, from what I know you'd need to add security package index and basically wait for an update to show up, but again, there art two types of fixes: the one that comes with an upgrade and the one that comes with patch and the patch here is way too complex because you'd need to build packages by yourself.\r\n\r\nthe tool I've made shows only fixable issues via upgrade, which is kinda can be gated easily by the CI. First, I'd like to move FDK base images out of dockers repo to FDK repos. Then we can gate the Dockerfiles at every commit with the tool I've made.\r\n First bits of work requiring reviews:\r\n- [ ] https://github.com/fnproject/fdk-python/pull/77\r\n- [ ] https://github.com/fnproject/fdk-node/pull/25\r\n Right, at first I'd like to have a complete PR for one of the FDKs (i started with Python) and then just populate the work across the others.\r\n Okay, now both Python and Node FDKs use Anchore to run security checks, which is totally cool because it's free and built-in into Circle CI via orbs.\r\nThe only thing that is still unclear being described here: https://github.com/anchore/anchore-engine/issues/174  I'm really looking forward to better local logging for development, as setting up a syslog server just for local development seems a bit too complicated. Acessing the logs via docker logs would be super nice!  discussion with other colleagues here, the only concern is that the backend database could be something which already uses some in-memory solution so the gain for this change could be not big and there is no way to disable it. In our case we use boltDB which uses a \r\n> memory-mapped data file \r\n(https://godoc.org/github.com/boltdb/bolt see Caveats paragraph)\r\n\r\nI haven't done any benchmarking but it would be good to have a way to disable caching or maybe the solution is to implement a DataAccess without caching, what do you think?  Today I updated to the latest version (docker fnproject/fnserver).\r\n\r\nEverything is working fine when I'm invoking the function every few seconds, but if I wait roughly 10 seconds I'm getting an error for the first request.\r\n\r\n$ fn invoke helloworld helloworld && date\r\n{\"message\":\"Hello World\"}\r\nFri Apr 12 12:52:16\r\n\r\n$ fn invoke helloworld helloworld && date\r\nError invoking function. status: 502 message: error receiving function response\r\nFri Apr 12 12:52:25\r\n\r\n**Logs:**\r\nhttps://pastebin.com/pEefeNAs\r\n\r\n**Another example:**\r\n\r\n$ fn invoke helloworld helloworld && date\r\n{\"message\":\"Hello World\"}\r\nFri Apr 12 14:58:39 CEST 2019\r\n\r\n$ fn invoke helloworld helloworld && date\r\n{\"message\":\"Hello World\"}\r\nFri Apr 12 14:58:40 CEST 2019\r\n\r\n$ fn invoke helloworld helloworld && date\r\n{\"message\":\"Hello World\"}\r\nFri Apr 12 14:58:40 CEST 2019\r\n\r\n$ fn invoke helloworld helloworld && date\r\n{\"message\":\"Hello World\"}\r\nFri Apr 12 14:58:43 CEST 2019\r\n\r\n$ fn invoke helloworld helloworld && date\r\nError invoking function. status: 502 message: error receiving function response\r\nFri Apr 12 14:59:05 CEST 2019\r\n\r\n$ fn invoke helloworld helloworld && date\r\n{\"message\":\"Hello World\"}\r\nFri Apr 12 14:59:08 CEST 2019\r\n\r\n$ fn invoke helloworld helloworld && date\r\n{\"message\":\"Hello World\"}\r\n\r\n**func.js:**\r\nconst fdk=require('@fnproject/fdk');\r\n\r\nfdk.handle(function(input){\r\n  let name = 'World';\r\n  if (input.name) {\r\n    name = input.name;\r\n  }\r\n  console.log(\"ljadslfjlsadkfjklsdj\");\r\n  return {'message': 'Hello ' + name}\r\n})\r\n\r\n$ fn version\r\nClient version is latest version: 0.5.74\r\nServer version:  0.3.693\r\n\r\n I've experienced exactly the same issue here. thanks for the reports. we're looking into this asap. Hi! Can you please check if it happens only with node.js functions?\r\n\r\nAlso would like to know what\u2019s your setup is. We're using the unmodified docker fnserver image in a nomad cluster. But that is nothing fancy and it has been working in production for months.\r\n\r\nI can not reproduce this with a java based function. Just to make sure, can you please try go, Python as well? Hi, again. Unfortunately I can reproduce as well. But that doesn\u2019t mean we quit solving this problem, so, what we need:\r\n1. Docker version.\r\n2. NodeJS runtime version.\r\n3. Execution logs (please try setting up syslog for your applications, see `fn create app -h`).\r\n4. Ideally, We/I would like to see traces from OpenTracing during a function\u2019s execution.\r\n There are no logs. I installed a syslog server since you removed fn get logs...but that didn't work very well either.\r\n\r\nI execed into the running fnserver docker image:\r\n\r\n/app # docker version\r\nClient:\r\n Version:       17.12.0-ce\r\n API version:   1.35\r\n Go version:    go1.9.2\r\n Git commit:    c97c6d6\r\n Built: Wed Dec 27 20:05:38 2017\r\n OS/Arch:       linux/amd64\r\n\r\nServer:\r\n Engine:\r\n  Version:      17.12.0-ce\r\n  API version:  1.35 (minimum version 1.12)\r\n  Go version:   go1.9.2\r\n  Git commit:   c97c6d6\r\n  Built:        Wed Dec 27 20:12:29 2017\r\n  OS/Arch:      linux/amd64\r\n  Experimental: false\r\n\r\nI switched debug level on.\r\n\r\nHere is the log from fnserver:\r\nhttps://pastebin.com/raw/9BVWFsGz\r\n\r\nAnd here is the output of docker events:\r\nhttps://pastebin.com/raw/xZqq12py\r\n\r\nI googled and docker exit code 137 seems to have something to do with the OOM killer. I updated func.yaml to memory:1024. My fnserver has 12 GB Ram (and there is nothing in dmesg).\r\n\r\nI had @fnproject/fdk 0.0.11 and now tried 0.0.13.\r\n\r\nHow can I produce traces?\r\n\r\n According to your logs\r\n\r\n> https://pastebin.com/raw/9BVWFsGz\r\n\r\n\r\n\r\n> How can I produce traces?\r\n\r\nSince Fn supports OpenTracking through jaeger binding you can collect traces by setting up the following env configuration options: https://github.com/jaegertracing/jaeger-client-go#environment-variables\r\n\r\nMore about jaeger you may find here: https://www.jaegertracing.io/docs/1.6/\r\n $ fn invoke helloworld helloworld && date\r\n{\"message\":\"Hello World\"}\r\nMon Apr 15 10:30:28 CEST 2019\r\n\r\nhttps://pastebin.com/EVWi9Nvv\r\n\r\n\r\n$ fn invoke helloworld helloworld && date\r\nError invoking function. status: 502 message: error receiving function response\r\nMon Apr 15 10:30:37 CEST 2019\r\n\r\nhttps://pastebin.com/9zqbYkMh\r\n\r\nDo you need anything else? Hm, nothing unusual there which means that issue is in FDK itself (in its underlying http server, probably), need to investigate it. But it did not happen with an old version of fnserver.\r\n\r\nI do not understand why you can not reproduce it. It does happen on my local dev maschine too (ubuntu 18.04).\r\n\r\nI'm going to test it with a clean ubuntu vm. Ok...I can reproduce it on a vanilla ubuntu 18.04...not that hard...\r\n\r\n1. Install Ubuntu 18.04 \r\n2. apt-get install docker.io\r\n3. curl -LSs https://raw.githubusercontent.com/fnproject/cli/master/install | sh\r\n4. docker login (docker hub account)\r\n5. docker run --privileged -p 8080:8080 fnproject/fnserver\r\n\r\nnew console:\r\n1. docker ps (look for the container id)\r\n2. docker exec -it $container_id /bin/sh\r\n3. docker login\r\n\r\nnew console:\r\n1. cd helloworld (app from above)\r\n2. FN_REGISTRY=$username fn deploy\r\n\r\nUpdating function helloworld using image $username/helloworld:0.0.15...\r\nroot@fnserver-test:~/helloworld# fn invoke helloworld helloworld\r\n{\"message\":\"Hello World\"}\r\nroot@fnserver-test:~/helloworld# fn invoke helloworld helloworld\r\n{\"message\":\"Hello World\"}\r\nroot@fnserver-test:~/helloworld# fn invoke helloworld helloworld\r\nError invoking function. status: 502 message: error receiving function response\r\n\r\nI can give you a ssh access on this server. You can send me your public key. > docker run --privileged -p 8080:8080 fnproject/fnserver\r\n\r\nis that the exact way you run Fn server?\r\n root@fnserver-test:~# history | grep docker\r\n    2  apt-get install docker\r\n    5  docker run --privileged -p 8080:8080 fnproject/fnserver\r\n    6  apt install docker.io\r\n    7  docker run --privileged -p 8080:8080 fnproject/fnserver\r\n Okay, i see what's going on. You've done an upgrade but probably didn't notice that the whole Fn changed a lot (hopefully, all changes documented).\r\n\r\n> docker run --privileged -p 8080:8080 fnproject/fnserver\r\n\r\nShort story: with the following command you get a dead Fn server that basically doesn't work.\r\n\r\nfrom operation docs https://github.com/fnproject/docs/blob/master/fn/operate/options.md :\r\n```\r\ndocker run --privileged \\\r\n  --rm \\\r\n  --name fns \\\r\n  -it \\\r\n  -v $PWD/data:/app/data \\\r\n  -v $PWD/data/iofs:/iofs \\\r\n  -e \"FN_IOFS_DOCKER_PATH=$PWD/data/iofs\" \\\r\n  -e \"FN_IOFS_PATH=/iofs\" \\\r\n  -p 80:8080 \\\r\n  fnproject/fnserver\r\n```\r\nthat's the bare minimum command to run Fn server as a container.\r\n that's why for a single instance of the Fn we strongly recommend to use `fn start`. Ok, but that did not change anything.\r\n\r\nI reinstalled Ubuntu 18.04, just to be sure.\r\n\r\n1. Install Ubuntu 18.04\r\n2. apt-get install docker.io\r\n3. curl -LSs https://raw.githubusercontent.com/fnproject/cli/master/install | sh\r\n4. docker login (docker hub account)\r\n5. fn start\r\n\r\nroot@fnserver-test:~/helloworld# FN_REGISTRY=$username fn deploy\r\nroot@fnserver-test:~/helloworld# fn invoke helloworld helloworld\r\n{\"message\":\"Hello World\"}\r\nroot@fnserver-test:~/helloworld# fn invoke helloworld helloworld\r\n{\"message\":\"Hello World\"}\r\nroot@fnserver-test:~/helloworld# fn invoke helloworld helloworld\r\nError invoking function. status: 502 message: error receiving function response\r\n\r\nBut the log changed:\r\nhttps://pastebin.com/70zfHzir\r\n Here is the helloworld app:\r\n\r\nhttps://wetransfer.com/downloads/9ee7eebf4404f54c6270a687023b0b4c20190415101913/b511fa07eb5d22f748a20c3c6598f39720190415101913/e8f5e3\r\n Can you make sure that SElinux is disabled on your host? Still, can't reproduce on local Fn, ubuntu VM, k8s Fn deployment:\r\n```\r\nfn invoke node helloworld && date\r\n{\"message\":\"Hello World\"}\r\nMon Apr 15 13:30:42 EEST 2019\r\n$ fn invoke node helloworld && date\r\n{\"message\":\"Hello World\"}\r\nMon Apr 15 13:30:51 EEST 2019\r\n$ fn invoke node helloworld && date\r\n{\"message\":\"Hello World\"}\r\nMon Apr 15 13:30:54 EEST 2019\r\n$ fn invoke node helloworld && date\r\n{\"message\":\"Hello World\"}\r\nMon Apr 15 13:30:56 EEST 2019\r\n$ fn invoke node helloworld && date\r\n{\"message\":\"Hello World\"}\r\nMon Apr 15 13:30:57 EEST 2019\r\n$ fn invoke node helloworld && date\r\n{\"message\":\"Hello World\"}\r\nMon Apr 15 13:30:58 EEST 2019\r\n$ fn invoke node helloworld && date\r\n{\"message\":\"Hello World\"}\r\nMon Apr 15 13:30:59 EEST 2019\r\n$ fn invoke node helloworld && date\r\n{\"message\":\"Hello World\"}\r\nMon Apr 15 13:31:00 EEST 2019\r\n$ fn invoke node helloworld && date\r\n{\"message\":\"Hello World\"}\r\nMon Apr 15 13:31:10 EEST 2019\r\n\r\n``` What version do you have?\r\n\r\nI narrowed it down to version 0.3.690.\r\n\r\nv0.3.689:\r\nroot@fnserver-test:~/helloworld# sh test.sh \r\n{\"message\":\"Hello World\"}\r\n{\"message\":\"Hello World\"}\r\n\r\nv0.3.690\r\nroot@fnserver-test:~/helloworld# sh test.sh \r\n{\"message\":\"Hello World\"}\r\nError invoking function. status: 502 message: error receiving function response\r\n\r\ntest.sh:\r\n#!/bin/sh\r\nfn invoke helloworld helloworld && \r\nsleep 5 && \r\nfn invoke helloworld helloworld\r\n Okay, now I see the error appears, true, since 0.3.89 node functions are not running flawlessly. Weird that only node functions affected.\r\nThe only changes were introduced to  UDS management were a part of https://github.com/fnproject/fn/commit/ae36053258724e7c2322e3ada5aea0147613ea63\r\n@rdallman would be good to get some help here.\r\n  @rdallman it's good to go. Big green \"Merge\" button waiting for you.\r\n  While we're on the topic, we should probably build with go mod enabled in CI\r\na la https://github.com/fnproject/fn/commit/354223e3a8a3ff34caae0c8b48a8a65072e9a256  Hello all. I've been enjoying trying out Fn and things seem to be working pretty well for me running a simple server with `fn start` and even running my own server using docker run, so I'm good to go on simple use-cases. I've come a bit unstuck however trying to get Fn running on Kubernetes.\r\n\r\nI'm aware that this is a distributed configuration involving several different fnproject/fnserver Node Types and have read up on that topology here https://medium.com/fnproject/distributed-fn-beyond-fn-start-2ee0baf6fb77 and here https://github.com/fnproject/docs/blob/master/fn/operate/production.md\r\n\r\nI'm aware of the Fn helm chart https://github.com/fnproject/fn-helm and I'm using that as my starting point but to try and get my head around things a little my goal was to try and get things running using a simple NodePort service type to run on my local machine.\r\n\r\nI'm running a very simple local docker registry using the registry:2 image on localhost:5000 and my setup is working fine with OpenFaaS, which I set up as a control to try and rule out any silly issues with my basic set-up.\r\n\r\nI'll try to give some detail of exactly where I'm at as follows:\r\n\r\nI created a deployment fn.yaml using the helm chart as a template e.g.\r\n```\r\ngit clone https://github.com/fnproject/fn-helm.git\r\nhelm dep build fn-helm/fn\r\nhelm template --name fn --namespace fn fn-helm/fn > fn.yaml\r\n```\r\nto keep things tidy I created a fn namespace on my K8s cluster\r\n```\r\nkubectl create namespace fn\r\n```\r\nNext I edited the fn.yaml to include the fn namespace and add the NodePort stuff. The relevant parts are below, apart from adding the fn namespace I haven't changed the fn-mysql, fn-redis, fn-fn-flow or fn-fn-ui parts - I'm just focussing on the core function CRUD and invocation parts ATM so the ke parts are:\r\n```\r\n---\r\n# Source: fn/templates/fn-runner-node-service.yaml\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: fn-fn-runner\r\n  namespace: \"fn\"\r\n  labels:\r\n    app: fn-fn\r\n    chart: fn-0.1.0\r\n    heritage: Tiller\r\n    release: fn\r\nspec:\r\n  type: ClusterIP\r\n  ports:\r\n    - name: grpc\r\n      port: 9191\r\n      targetPort: 9191\r\n  selector:\r\n    app: fn-fn\r\n    role: runner\r\n\r\n---\r\n# Source: fn/templates/fn-service.yaml\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: fn-fn\r\n  namespace: \"fn\"\r\n  labels:\r\n    app: fn-fn\r\n    chart: fn-0.1.0\r\n    heritage: Tiller\r\n    release: fn\r\nspec:\r\n#  type: ClusterIP\r\n  type: NodePort\r\n  ports:\r\n  - name: api\r\n    port: 80\r\n    targetPort: 80\r\n    nodePort: 30080\r\n  - name: runner-lb\r\n    port: 90\r\n    targetPort: 90\r\n    nodePort: 30090\r\n  selector:\r\n    app: fn-fn\r\n    role: fn-service\r\n\r\n---\r\n---\r\n# Source: fn/templates/fn-deployment.yaml\r\napiVersion: apps/v1beta1\r\nkind: Deployment\r\nmetadata:\r\n  name: fn-fn\r\n  namespace: \"fn\"\r\n  labels:\r\n    app: fn-fn\r\n    chart: fn-0.1.0\r\n    heritage: Tiller\r\n    release: fn\r\nspec:\r\n  replicas: 1\r\n  template:\r\n    metadata:\r\n       labels:\r\n         app: fn-fn\r\n         chart: fn-0.1.0\r\n         heritage: Tiller\r\n         release: fn\r\n         role: fn-service\r\n    spec:\r\n      containers:\r\n        - name: api\r\n          image: fnproject/fnserver:latest\r\n          imagePullPolicy: Always\r\n          resources:\r\n            limits:\r\n              cpu: 300m\r\n              memory: 2Gi\r\n            requests:\r\n              cpu: 150m\r\n              memory: 512Mi\r\n            \r\n          securityContext:\r\n            privileged: true\r\n          ports:\r\n          - containerPort: 80\r\n          readinessProbe:\r\n            httpGet:\r\n              path: /v2/apps\r\n              port: 80\r\n            initialDelaySeconds: 3\r\n            periodSeconds: 3\r\n          env:\r\n          - name: FN_DB_PASSWD\r\n            valueFrom:\r\n              secretKeyRef:\r\n                name: fn-mysql\r\n                key: mysql-password\r\n          - name: FN_DB_HOST\r\n            value: fn-mysql\r\n          - name: FN_MQ_HOST\r\n            value: fn-redis\r\n          - name: FN_PORT\r\n            value: \"80\"\r\n          - name: FN_NODE_TYPE\r\n            value: \"api\"\r\n          - name: FN_PUBLIC_LB_URL\r\n#            value: http://fn.lb.fn.internal:90\r\n            value: http://10.192.0.2:30090\r\n          - name: FN_DB_URL\r\n            value: \"mysql://fnapp:$(FN_DB_PASSWD)@tcp($(FN_DB_HOST):3306)/fndb\"\r\n          - name: FN_LOG_LEVEL\r\n            value: \"INFO\"\r\n          - name: FN_MQ_URL\r\n            value: \"redis://$(FN_MQ_HOST):6379/\"\r\n        - name: runner-lb\r\n          image: fnproject/fnserver:latest\r\n          imagePullPolicy: Always\r\n          resources:\r\n            limits:\r\n              cpu: 300m\r\n              memory: 2Gi\r\n            requests:\r\n              cpu: 150m\r\n              memory: 512Mi\r\n            \r\n          securityContext:\r\n            privileged: true\r\n          ports:\r\n          - containerPort: 90\r\n          env:\r\n          - name: FN_NODE_TYPE\r\n            value: \"lb\"\r\n          - name: FN_GRPC_PORT\r\n            value: \"9191\"\r\n          - name: FN_PORT\r\n            value: \"90\"\r\n          - name: FN_RUNNER_API_URL\r\n            value: http://fn-fn.fn.svc.cluster.local:80\r\n          - name: FN_RUNNER_ADDRESSES\r\n            value: fn-fn-runner.fn.svc.cluster.local:9191\r\n          - name: FN_LOG_LEVEL\r\n            value: \"INFO\"\r\n\r\n---\r\n# Source: fn/templates/fn-runner-node-deployment.yaml\r\napiVersion: apps/v1beta1\r\nkind: Deployment\r\nmetadata:\r\n  name: fn-fn-runner\r\n  namespace: \"fn\"\r\n  labels:\r\n    app: fn-fn\r\n    chart: fn-0.1.0\r\n    heritage: Tiller\r\n    release: fn\r\nspec:\r\n  replicas: 3\r\n  template:\r\n    metadata:\r\n       labels:\r\n         app: fn-fn\r\n         chart: fn-0.1.0\r\n         heritage: Tiller\r\n         release: fn\r\n         role: runner\r\n    spec:\r\n      containers:\r\n        - name: runner\r\n          image: fnproject/fnserver:latest\r\n          imagePullPolicy: Always\r\n          resources:\r\n            limits:\r\n              cpu: 500m\r\n              memory: 5Gi\r\n            requests:\r\n              cpu: 250m\r\n              memory: 1Gi\r\n            \r\n          securityContext:\r\n            privileged: true\r\n          ports:\r\n          - containerPort: 9191\r\n          env:\r\n          - name: FN_NODE_TYPE\r\n            value: \"pure-runner\"\r\n          - name: FN_GRPC_PORT\r\n            value: \"9191\"\r\n          - name: FN_LOG_LEVEL\r\n            value: \"INFO\"\r\n---\r\n```\r\nThe relevent bits really are that in the fn-service I changed the type to NodePort and added nodePort: 30080 to api and nodePort: 30090 to runner-lb. The other change is that under fn-deployment I changed the FN_PUBLIC_LB_URL value from http://fn.lb.fn.internal:90 to http://10.192.0.2:30090\r\n\r\nWhen I deploy this with\r\n```\r\nkubectl apply -f ./fn.yaml\r\n```\r\nI see a successful deployment in the Kubernetes dashboard.\r\nI have set up my context to point to the required API URL and registry:\r\n```\r\nfn list contexts\r\nCURRENT\tNAME\tPROVIDER\tAPI URL\t\t\tREGISTRY\r\n*\tdefault\tdefault\t\thttp://10.192.0.2:30080\tlocalhost:5000\r\n```\r\nand fn version is happy, correctly returning the server version:\r\n```\r\nfn version\r\nClient version is latest version: 0.5.69\r\nServer version:  0.3.687\r\n```\r\nAs far as I can see it looks like my API is running fine and I seem to be able to correctly run the CRUD operations, my issue is with the fn invoke, which is clearly rather important :-)\r\n\r\nI've tested using http://fnproject.io/tutorials/Introduction/ as follows:\r\n```\r\nfn init --runtime go --trigger http gofn\r\nCreating function at: /gofn\r\nFunction boilerplate generated.\r\nfunc.yaml created.\r\n```\r\n```\r\nfn create app goapp\r\nSuccessfully created app:  goapp\r\n```\r\n```\r\nfn --verbose deploy --app goapp\r\nDeploying gofn to app: goapp\r\nBumped to version 0.0.2\r\nBuilding image localhost:5000/gofn:0.0.2 \r\nFN_REGISTRY:  localhost:5000\r\nCurrent Context:  default\r\nSending build context to Docker daemon   5.12kB\r\nStep 1/10 : FROM fnproject/go:dev as build-stage\r\ndev: Pulling from fnproject/go\r\ncd784148e348: Pull complete \r\n7e273b0dfc44: Pull complete \r\n952c3806fd1a: Pull complete \r\ndaee55ea059d: Pull complete \r\n18dd7cffb4bd: Pull complete \r\n02ef0ff2b601: Pull complete \r\nDigest: sha256:fad7d110064e144fe9de90c2199146d83e6f9fdd6d6129bba1e7c7b67b81f8a3\r\nStatus: Downloaded newer image for fnproject/go:dev\r\n ---> 96c8fb94a8e1\r\nStep 2/10 : WORKDIR /function\r\n ---> Running in 10d0f4cbf78c\r\nRemoving intermediate container 10d0f4cbf78c\r\n ---> d6fe38e1aa4a\r\nStep 3/10 : RUN go get -u github.com/golang/dep/cmd/dep\r\n ---> Running in 04d806267d73\r\nRemoving intermediate container 04d806267d73\r\n ---> a6b205de47e7\r\nStep 4/10 : ADD . /go/src/func/\r\n ---> 48fd62a784e7\r\nStep 5/10 : RUN cd /go/src/func/ && dep ensure\r\n ---> Running in 7e224f97c846\r\nRemoving intermediate container 7e224f97c846\r\n ---> 5c285fadec58\r\nStep 6/10 : RUN cd /go/src/func/ && go build -o func\r\n ---> Running in 32ff032d1cdd\r\nRemoving intermediate container 32ff032d1cdd\r\n ---> 294a608d7833\r\nStep 7/10 : FROM fnproject/go\r\nlatest: Pulling from fnproject/go\r\nba7f5deea89d: Pull complete \r\na243235fe902: Pull complete \r\nDigest: sha256:d30b00a023590955fc450d109bf57a649f69f7403fec164912dc85ade4749dc8\r\nStatus: Downloaded newer image for fnproject/go:latest\r\n ---> d9de4156fe50\r\nStep 8/10 : WORKDIR /function\r\n ---> Running in eac3b7cc6be0\r\nRemoving intermediate container eac3b7cc6be0\r\n ---> 31f13b455c60\r\nStep 9/10 : COPY --from=build-stage /go/src/func/func /function/\r\n ---> 945549427c78\r\nStep 10/10 : ENTRYPOINT [\"./func\"]\r\n ---> Running in 43bf9010a9bf\r\nRemoving intermediate container 43bf9010a9bf\r\n ---> 24969be1ac7a\r\nSuccessfully built 24969be1ac7a\r\nSuccessfully tagged localhost:5000/gofn:0.0.2\r\n\r\nParts:  [localhost:5000 gofn:0.0.2]\r\nPushing localhost:5000/gofn:0.0.2 to docker registry...The push refers to repository [localhost:5000/gofn]\r\n27e712241c73: Pushed \r\n6009b4785a95: Pushed \r\ndb794edf2401: Pushed \r\n0b32a561a108: Pushed \r\n0.0.2: digest: sha256:d438a665d0d227142d5066994a67a8a48c14b8689e742a3b319080a3deb15418 size: 1157\r\nUpdating function gofn using image localhost:5000/gofn:0.0.2...\r\nSuccessfully created function: gofn with localhost:5000/gofn:0.0.2\r\nSuccessfully created trigger: gofn\r\nTrigger Endpoint: http://10.192.0.2:30090/t/goapp/gofn\r\n```\r\nAs far as I can see this all looks good so far and the Trigger Endpoint port is what I think I'm expecting it to be given how I set up the fn-service NodePort\r\n\r\nand if I check my local registry by browsing to\r\n```\r\nhttp://localhost:5000/v2/_catalog\r\n```\r\nI can see gofn.\r\n\r\nhowever.........\r\n\r\nIf I now do\r\n```\r\nfn invoke goapp gofn\r\n```\r\nThe call hangs for a while, before eventually returning with:\r\n```\r\nError invoking function. status: 500 message: internal server error\r\n```\r\nFollowing the instructions in https://medium.com/fnproject/distributed-fn-beyond-fn-start-2ee0baf6fb77 I tried:\r\n```\r\nfn inspect fn goapp gofn\r\n```\r\nwhich returns:\r\n```\r\n{\r\n\t\"annotations\": {\r\n\t\t\"fnproject.io/fn/invokeEndpoint\": \"http://10.192.0.2:30090/invoke/01D7M8KVR41BT061G0A0000002\"\r\n\t},\r\n\t\"app_id\": \"01D7M8GH271BT061G0A0000001\",\r\n\t\"created_at\": \"2019-04-04T13:29:07.588Z\",\r\n\t\"id\": \"01D7M8KVR41BT061G0A0000002\",\r\n\t\"idle_timeout\": 30,\r\n\t\"image\": \"localhost:5000/gofn:0.0.2\",\r\n\t\"memory\": 128,\r\n\t\"name\": \"gofn\",\r\n\t\"timeout\": 30,\r\n\t\"updated_at\": \"2019-04-04T13:29:07.588Z\"\r\n}\r\n```\r\nagain the IP/port of the invokeEndpoint are what I think I was expecting.\r\n\r\nIf I do\r\n```\r\ncurl http://10.192.0.2:30090\r\n```\r\nI see\r\n```\r\n{\"goto\":\"https://github.com/fnproject/fn\",\"hello\":\"world!\"}\r\n```\r\nBut I think that's the welcome from the base endpoint not the function 'cause the function has \"Hello World\" with capitals\r\n```\r\ncurl http://10.192.0.2:30090/invoke/01D7M8KVR41BT061G0A0000002\r\n```\r\nyields\r\n```\r\n{\"message\":\"Method not allowed: GET /invoke/01D7M8KVR41BT061G0A0000002\"}\r\n```\r\nand\r\n```\r\ncurl http://10.192.0.2:30090/t/goapp/gofn\r\n```\r\nwhich is the trigger endpoint hangs for a bit and returns\r\n```\r\n{\"message\":\"internal server error\"}\r\n```\r\n\r\nI'd really appreciate any thoughts on this, I appreciate that using NodePort isn't the recommended approach but as far as I can see it *should\" be possible to make it work OK and much of what I'm seeing looks like I'm expecting (apart from the invoke not working of course :-D). As I mentioned previously I got OpenFaaS working on the same set up so I think the underlying  infrastructure is basically sound.\r\n\r\nMTIA\r\n Hi!\r\n\r\n> curl http://10.192.0.2:30090/invoke/01D7M8KVR41BT061G0A0000002\r\n\r\nInvoke API allows only HTTP POST.\r\n\r\n> curl http://10.192.0.2:30090/t/goapp/gofn\r\n> which is the trigger endpoint hangs for a bit and returns\r\n> {\"message\":\"internal server error\"}\r\n\r\nMeaning that you have problems with communication between Fn API and Fn LB nodes. You'd need to investigate what's going in LB logs, i.e., why it gives 502 back.\r\n\r\nAnyways, the recommended approach is to use an ingress controller or LoadBalancer, but not NodePort.\r\n Hi, but that curl was only one aspect of the issue and doesn't explain why the basic\r\n```\r\nfn invoke goapp gofn\r\n```\r\nfails. I actually only tried the curl direct against the invoke endpoint to see what happens and as I also mentioned I tried a curl against the trigger endpoint too via\r\n```\r\ncurl http://10.192.0.2:30090/t/goapp/gofn\r\n```\r\nThat is the endpoint mentioned in the \r\n```\r\nfn --verbose deploy --app goapp\r\n```\r\nIf I follow the \"Invoke with Curl\" from the tutorial http://fnproject.io/tutorials/Introduction/ replacing `http://localhost:8080` with my host and port e.g. \r\n```\r\ncurl -H \"Content-Type: application/json\" http://10.192.0.2:30090/t/goapp/gofn-trigger\r\n```\r\nI see it hang and eventually return\r\n```\r\n{\"message\":\"internal server error\"}\r\n```\r\nSo the fact that I used GET on the invoke API for one case above is a bit of a red herring. Indeed if I do\r\n```\r\ncurl -X POST http://10.192.0.2:30090/invoke/01D7M8KVR41BT061G0A0000\r\n002\r\n```\r\nI see\r\n```\r\n{\"message\":\"internal server error\"}\r\n```\r\n\r\nI appreciate that \" the recommended approach is to use an ingress controller or LoadBalancer, but not NodePort.\" and I mentioned that I was aware of that in my original post, but the point is that it *should* be able to make it work and the point of trying it is to see how it all hangs together so I was really looking for some advice in what I might be doing wrong in terms of the config because I *thought* that the main piece of config I needed was to set the FN_PUBLIC_LB_URL and I think that's looking OK.\r\n\r\nRe \"Meaning that you have problems with communication between Fn API and Fn LB nodes\" I pretty much realised that, but the crux of my question was actually \"why\", which is why I was asking. I'm not entirely sure where to look - I was hoping my original post had enough detail for some insight.\r\n\r\nRe \"You'd need to investigate what's going in LB logs, i.e., why it gives 502 back.\" could you give some suggestions on which might be the most useful logs to look at and where they might be located - so far a basic stand alone Fn server has \"just worked\", so I've got limited experience digging around the Fn logs. Looking at the *fn-fn-runner-*\" logs under Pods in the K8s dashboard doesn't yield too much and looks kind of what I see when I stand ap a Fn server stand alone that is the Pod logs end up with\r\n```\r\n...\r\n...\r\n 2019-04-04T13:19:08.400288639Z time=\"2019-04-04T13:19:08Z\" level=info msg=\"available memory\" cgroup_limit=5368709120 head_room=536870912 total_memory=11276562432\r\n2019-04-04T13:19:08.400321904Z time=\"2019-04-04T13:19:08Z\" level=info msg=\"ram reservations\" avail_memory=4831838208 ram_async_hw_mark=3865470566\r\n2019-04-04T13:19:08.400856554Z time=\"2019-04-04T13:19:08Z\" level=info msg=\"available cpu\" avail_cpu=500 total_cpu=4000\r\n2019-04-04T13:19:08.40104528Z time=\"2019-04-04T13:19:08Z\" level=info msg=\"cpu reservations\" cpu=500 cpu_async_hw_mark=400\r\n2019-04-04T13:19:08.4010813Z time=\"2019-04-04T13:19:08Z\" level=warning msg=\"Severaly Limited CPU: cpu < 1000m (1 CPU)\"\r\n2019-04-04T13:19:08.401087193Z time=\"2019-04-04T13:19:08Z\" level=warning msg=\"Running pure runner in insecure mode!\"\r\n2019-04-04T13:19:08.401157101Z time=\"2019-04-04T13:19:08Z\" level=info msg=\"Pure Runner listening on :9191\"\r\n2019-04-04T13:19:08.40152587Z \r\n2019-04-04T13:19:08.401537152Z         ______\r\n2019-04-04T13:19:08.401539982Z        / ____/___\r\n2019-04-04T13:19:08.401542221Z       / /_  / __ \\\r\n2019-04-04T13:19:08.401544498Z      / __/ / / / /\r\n2019-04-04T13:19:08.401546715Z     /_/   /_/ /_/\r\n2019-04-04T13:19:08.401548988Z         v0.3.687\r\n2019-04-04T13:19:08.401551252Z \r\n2019-04-04T13:19:08.401597867Z time=\"2019-04-04T13:19:08Z\" level=info msg=\"Fn serving on `:8080`\" type=pure-runner \r\n```\r\n\r\nOne thing I'm wondering about though, looking at the Kubernetes config I can't see any volume mounts referring to the Docker socket so am I correct in thinking that the Fn server containers are running in Docker in Docker mode? All the fnproject/fnserver containers have `privileged: true` in their securityContext which also makes me wonder if DinD is being used. I ask because another thing I'm wondering about is whether my issue is down to something not seeing the container registry - would there be some log message somewhere if the fnproject/fnserver containers couldn't see the registry and weren't able to pull the function container?\r\n\r\nThanks.\r\n\r\n\r\n > Looking at the fn-fn-runner-\" logs\r\n\r\nThat's not where you should look for, `lb` node is the one which accepts invocations, you'd need to look there. You need to trace what's going on in `lb` container logs in order to see why the node gives you `internal server error`.\r\n\r\n> One thing I'm wondering about though, looking at the Kubernetes config I can't see any volume mounts referring to the Docker socket so am I correct in thinking that the Fn server containers are running in Docker in Docker mode?\r\n\r\ntrue\r\n\r\n @rdallman issue is not related to IOFS because with ingress controller or LoadBalancer service type deployment works as expected with no problems.\r\n\r\nI feel like that\u2019s something related to networking (caused by NodePort). In the logs for runner-lb I'm seeing the following after the failed invoke\r\n```\r\n 2019-04-04T17:26:39.433659239Z time=\"2019-04-04T17:26:39Z\" level=info msg=\"Fn serving on `:90`\" type=lb\r\n2019-04-04T17:38:37.435994403Z time=\"2019-04-04T17:38:37Z\" level=error msg=\"error from API server, retrying\" error=\"Get http://fn-fn.fn.svc.cluster.local:80/v2/fns/01D7MPM07K1BT044G0A0000002: dial tcp: lookup fn-fn.fn.svc.cluster.local: Try again\"\r\n2019-04-04T17:38:42.541672752Z time=\"2019-04-04T17:38:42Z\" level=error msg=\"error from API server, retrying\" error=\"Get http://fn-fn.fn.svc.cluster.local:80/v2/fns/01D7MPM07K1BT044G0A0000002: dial tcp: lookup fn-fn.fn.svc.cluster.local: Try again\"\r\n2019-04-04T17:38:47.659563141Z time=\"2019-04-04T17:38:47Z\" level=error msg=\"error from API server, retrying\" error=\"Get http://fn-fn.fn.svc.cluster.local:80/v2/fns/01D7MPM07K1BT044G0A0000002: dial tcp: lookup fn-fn.fn.svc.cluster.local: Try again\"\r\n2019-04-04T17:38:53.039800675Z time=\"2019-04-04T17:38:53Z\" level=error msg=\"error from API server, retrying\" error=\"Get http://fn-fn.fn.svc.cluster.local:80/v2/fns/01D7MPM07K1BT044G0A0000002: dial tcp: lookup fn-fn.fn.svc.cluster.local: Try again\"\r\n2019-04-04T17:38:58.227511648Z time=\"2019-04-04T17:38:58Z\" level=error msg=\"error from API server, retrying\" error=\"Get http://fn-fn.fn.svc.cluster.local:80/v2/fns/01D7MPM07K1BT044G0A0000002: dial tcp: lookup fn-fn.fn.svc.cluster.local: Try again\"\r\n2019-04-04T17:39:04.534988301Z time=\"2019-04-04T17:39:04Z\" level=error msg=\"error from API server, retrying\" error=\"Get http://fn-fn.fn.svc.cluster.local:80/v2/fns/01D7MPM07K1BT044G0A0000002: dial tcp: lookup fn-fn.fn.svc.cluster.local: Try again\"\r\n2019-04-04T17:39:04.535546123Z time=\"2019-04-04T17:39:04Z\" level=error msg=\"internal server error\" action=\"server.handleFnInvokeCall)-fm\" error=\"Get http://fn-fn.fn.svc.cluster.local:80/v2/fns/01D7MPM07K1BT044G0A0000002: dial tcp: lookup fn-fn.fn.svc.cluster.local: Try again\" fn_id=01D7MPM07K1BT044G0A0000002 stack=\"goroutine 257 [running]:\\nruntime/debug.Stack(0xc420082300, 0x1299360, 0xc4204a7c80)\\n\\t/usr/local/go/src/runtime/debug/stack.go:24 +0xa7\\ngithub.com/fnproject/fn/api/server.HandleErrorResponse(0x12a4540, 0xc42055c6c0, 0x7fdc730be618, 0xc4200e02c0, 0x1299360, 0xc4204a7c80)\\n\\t/go/src/github.com/fnproject/fn/api/server/error_response.go:57 +0x57f\\ngithub.com/fnproject/fn/api/server.handleErrorResponse(0xc4200e02c0, 0x1299360, 0xc4204a7c80)\\n\\t/go/src/github.com/fnproject/fn/api/server/error_response.go:25 +0xa9\\ngithub.com/fnproject/fn/api/server.(*Server).handleFnInvokeCall(0xc4200b7d40, 0xc4200e02c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/runner_fninvoke.go:53 +0x1da\\ngithub.com/fnproject/fn/api/server.(*Server).(github.com/fnproject/fn/api/server.handleFnInvokeCall)-fm(0xc4200e02c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/server.go:1161 +0x34\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e02c0)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/api/server.(*Server).runMiddleware(0xc4200b7d40, 0xc4200e02c0, 0x0, 0x0, 0x0)\\n\\t/go/src/github.com/fnproject/fn/api/server/middleware.go:42 +0x29f\\ngithub.com/fnproject/fn/api/server.(*Server).rootMiddlewareWrapper.func1(0xc4200e02c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/middleware.go:32 +0x58\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e02c0)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/api/server.panicWrap(0xc4200e02c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:190 +0x51\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e02c0)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/api/server.panicWrap(0xc4200e02c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:190 +0x51\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e02c0)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/api/server.apiMetricsWrap.func1.1(0xc4200e02c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:154 +0x2f8\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e02c0)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/api/server.traceWrap(0xc4200e02c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:97 +0x507\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e02c0)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/api/server.loggerWrap(0xc4200e02c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:212 +0x1ea\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e02c0)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Engine).handleHTTPRequest(0xc4200b7c20, 0xc4200e02c0)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/gin.go:361 +0x586\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Engine).ServeHTTP(0xc4200b7c20, 0x12a3ec0, 0xc42025a050, 0xc420146100)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/gin.go:326 +0x153\\ngithub.com/fnproject/fn/vendor/go.opencensus.io/plugin/ochttp.(*Handler).ServeHTTP(0xc420204050, 0x12a3ec0, 0xc42025a050, 0xc420268000)\\n\\t/go/src/github.com/fnproject/fn/vendor/go.opencensus.io/plugin/ochttp/server.go:86 +0x1c8\\nnet/http.serverHandler.ServeHTTP(0xc4201e6f70, 0x12a2b40, 0xc4204ac0e0, 0xc420268000)\\n\\t/usr/local/go/src/net/http/server.go:2697 +0xbc\\nnet/http.(*conn).serve(0xc4200ca0a0, 0x12a4480, 0xc4201f08c0)\\n\\t/usr/local/go/src/net/http/server.go:1830 +0x651\\ncreated by net/http.(*Server).Serve\\n\\t/usr/local/go/src/net/http/server.go:2798 +0x27b\\n\" \r\n```\r\nThat fn-fn.fn.svc.cluster.local looks interesting.\r\n\r\nIn my fn.yaml I had to replace the FN_PUBLIC_LB_URL from value: http://fn.lb.fn.internal:90 to value: http://10.192.0.2:30090\r\n\r\nI'm thinking then that I probably need to replace the FN_RUNNER_API_URL from value: http://fn-fn.fn.svc.cluster.local:80 to value: http://10.192.0.2:30080 - which is the API URL pointed to by the fn CLI though not sure why it's not seeing the internal address?\r\n\r\nI've also experienced issues elsewhere where I've needed a closing period/dot after .local addressess e.g. I'm wondering to try value: fn-fn.fn.svc.cluster.local. too to see if that makes a difference\r\n\r\nI'll try tweaking those, but please keep the thoughts coming as there might well be more than one thing causing my woes (I've still got a nagging feeling that the DinD might be having an issue seeing my slightly quick and dirty local container registry)\r\n\r\nThanks for all the replies so far On the IOFS things I definitely needed them when I tried firing up fnserver directly via docker run e.g. like this:\r\n```\r\ndocker run --rm -i \\\r\n    --name fnserver \\\r\n    -v /var/run/docker.sock:/var/run/docker.sock \\\r\n    -p 8080:8080 \\\r\n    -v ${PWD}/data:/app/data \\\r\n    -v ${PWD}/iofs:/iofs \\\r\n    -e FN_IOFS_DOCKER_PATH=${PWD}/iofs \\\r\n    -e FN_IOFS_PATH=/iofs \\\r\n    --entrypoint=./fnserver \\\r\n    fnproject/fnserver\r\n```\r\nwhich information, as it happens, I got from a previous conversation with @rdallman \r\n\r\nWhich also reminds me about the reservations I had about running fnserver privileged, which seems to be the case too for the current Kubernetes config. It cerainly seems possible to run fnserver by bind mounting the parent's docker socket and it then not having to be run privileged - though it's a question orthogonal to the main thrust of this thread. > On the IOFS things I definitely needed them when I tried firing up fnserver directly via docker run\r\n\r\nYou need IOFS configuration only in case of local Fn, but the one you use on k8s.\r\n\r\nLocal Fn needs a docker link via socket mount, but in k8s we use DIND mode where you don\u2019t need to configure IOSF because it works by default, but doesn\u2019t work in local Fn without proper configuration.\r\n Hello, I seem to have made some progress, bur I could still do with some insight.\r\n\r\nI've managed to \"nursemaid\" my setup so that `fn invoke goapp gofn` runs and returns what I expect.\r\n\r\nTo do this, in addition to the changes I mentioned in my original post around modifying the fn-service yaml to add the node ports and fn-deployment yaml to change FN_PUBLIC_LB_URL to `value: http://10.192.0.2:30090` for api I **also** had to change the runner-lb FN_RUNNER_API_URL to `value: http://10.192.0.2:30080` (that's the one I wondered about a couple of replies back) and in addition to that I had to change FN_RUNNER_ADDRESSES from `value: fn-fn-runner.fn.svc.cluster.local:9191` to `value: fn-fn-runner.fn.svc.cluster.local.:9191` that is to say I had to add a trailing period after the `.local` part.\r\n\r\nAs it happens I've come across the issue of needing the trailing period elsewhere with my setup, but I'm not clear why, I've previously come across a comment that a trailing period signifies an \"absolute address\" but it's unclear why I need it with my K8s deployment when, I'm guessing, that you guys don't need it. As I say I've seen this elsewhere but I'm relatively inexperienced with Kubernetes and couldn't say whether it's my system being overly pedantic or other systems being overly lax in how those addresses are parsed or whether it's something else entirely - I'd definitely appreciate any insights from those more experienced with K8s quirks.\r\n\r\nOnce I got all the addressing sorted in my yaml I finally hit the issue that I was half expecting to hit, which was a problem seeing my local Docker registry. As it happens the error message relating to that was pretty self-explanatory:\r\n```\r\nfn invoke goapp gofn\r\nError invoking function. status: 502 message: Failed to pull image 'localhost:5000/gofn:0.0.3': Get http://localhost:5000/v2/: dial tcp 127.0.0.1:5000: getsockopt: connection refused\r\n```\r\nas a **really** hacky workaround I execed into the runner and proxied to my host via\r\n```\r\ndocker run --name registry-proxy -d -e LISTEN=':5000' -e TALK=\\\"\\$(/sbin/ip route|awk '/default/ { print \\$3 }'):5000\\\" -p 5000:5000 tecnativa/tcp-proxy\r\n```\r\nobviously that'll have to change, but it did mean that I eventually got\r\n```\r\nfn invoke goapp gofn\r\n{\"message\":\"Hello World\"}\r\n```\r\n\r\nUltimately I'm going to be running a much nicer (and more secure) local container registry, but in the mean time do you have any thoughts on how I might be able to configure so the DinD docker can see my registry? The reason I was using localhost for the registry was because the 127.0.0.0/8 network is in insecure registries by default but clearly inside the fnproject/fnserver runner container 127.0.0.1 refers to its own localhost. I see in https://github.com/fnproject/docs/blob/master/fn/operate/private_registries.md there is an example of a private registry on localhost, which is similar to my setup and all of the CRUD and image building works fine but I can't see how that would work with DinD? Again I'd appreciate any thoughts.\r\n  This rather makes me sad. I've always been on the side of keeping calls and logs in OSS, at least until good-experience alternatives are in place. After some reading and considerations, I\u2019d remove logs API but will keep calls API until better alternative. We\u2019ve seen people using calls API to connect it with prometheus.\r\n\r\nSo, that\u2019s said, logs must go in favor of syslog, but calls should remain until better option.\r\n > can we add the prometheus metrics of interest to the particular case noted earlier? any info here\r\n\r\n@rdallman can we please wait for 1 more day, I\u2019ll try to reach our users I\u2019ve been talking about. I\u2019ll figure out their use cases and will go back to you. @rdallman as promised, I'll try to translate you what I've got from a customer:\r\n```\r\nIn fact, we need CRD (call detail record) - which functions failed, which ones were successful. We got used to collecting them (calls) in ELK* and then doing aggregation for the statistics, i.e., % of successful VS % of failed. But we'll be ok with removing calls API as long as you'd provide an alternative (middleware/plugin) that will allow us to do the same but with no Fn API polling on our side.\r\n\r\n```\r\n*  - no technical details on how they do that, but I asked how to provide some details\r\n\r\n > It's also possible to get this from prometheus\r\n\r\nthe one thing that bothers me that `syslog` feature is accessible through the API but when calls API will go away which alternative we'd offer to users (not operators). which there was an option to let Fn an endpoint where to post calls objects (or whatever).\r\n > using the call extensions stuff, it should be relatively easy for a user to connect to their syslog url and post a log with the call to it\r\n\r\nthat's fine, would be nice to provide an example with, I guess.  **Description**\r\nfnserver currently does not allow upper case letters in app and fn names. While this isn't really a problem for developers, it isn't the friendliest visually and isn't easy to read for folks who aren't developers. As an example, our use case of fn is an open system where anyone calls anything. This requires us to have search, listing and filtering functionality with good readability so users of our system know how to look for things and find it easy to grok what they find once the run a search.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Try creating a function with an upper case letter\r\n\r\n**Describe the results you received:**\r\nThe fn cli fails\r\n\r\n**Describe the results you expected:**\r\nI'd expect fnserver to allow for the set of characters normal functions allow for.\r\n I think the underlying reason for this is because docker image names cannot contain upper-case characters.\r\n\r\nI wonder if a possible work around for this is to make it case insensitive i.e. convert anything the users send to lower case behind the scenes Indeed, image name/tag is what concerns all of us.  **Description**\r\n\r\nWe have a need to create app and fn names that are longer than the current 30 character limit. The associated database fields are `varchar(256)`, yet looking through the code, we see a const declaration of 30 characters for each and these cannot be overridden:\r\n\r\nhttps://github.com/fnproject/fn/blob/master/api/models/error.go#L10\r\n\r\nI would like to propose that we make 30 characters the default, but make them configurable at runtime.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Try to create a function or app with more than 30 characters\r\n\r\n**Describe the results you received:**\r\nWe get an error saying that neither field can't be over 30 characters\r\n\r\n**Describe the results you expected:**\r\nWe expect to be able to set an app and/or function name that is greater than 30 characters without failing\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `fn version` (CLI command):**\r\n\r\ncurl to fnserver directly:\r\n```\r\n$ curl http://localhost:8080/v2/apps -XPOST -d \"{\\\"name\\\":\\\"thisislongerthanthirtycharactersthisislongerthanthirtycharactersthisislongerthanthirtycharactersthisislongerthanthirtycharactersthisislongerthanthirtycharacters\\\"}\"\r\n{\"message\":\"App name must be 30 characters or less\"}\r\n```\r\n\r\n**Additional environment details (OSX, Linux, flags, etc.):**\r\nOSX That would be terrific!\n\nOn Tue, Apr 2, 2019 at 15:16 Reed Allman <notifications@github.com> wrote:\n\n> we're looking into increasing the default of this value, it may be\n> possible to just bump it up but running some checks first.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/fnproject/fn/issues/1452#issuecomment-479155691>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ABF2yNiJ3g2z72UzQtYWadpmGsTpceAYks5vc6yKgaJpZM4cWl2K>\n> .\n>\n-- \nGregg Altschul\nm: 917-975-3201\n  Extracting the name validation functionality from the models' validators means we can use them else where. In particular this means we can use them to validate user input in the CLI without duplicating the logic c.f. fnproject/cli#474\r\n\r\n### Link to issue this resolves\r\nThis is a prerequisite for my changes in fnproject/cli#474\r\n\r\n### What I did\r\nThe full explaination can be found [here](https://github.com/fnproject/cli/issues/474#issuecomment-478509980). In particular this commit seperates the name validation from `models.App`, `models.Fn`, and `models.Trigger` `Validate` functions so that they can be called independently. \r\n\r\n### How to verify it\r\n```\r\ncd $GOPATH/src/github.com/fnproject/fn/api/models/\r\ngo test\r\n```\r\n\r\n```\r\nfn := models.Fn{Name: name}\r\nfn.ValidateName()\r\nfn.Validate()\r\n```\r\n\r\n```\r\napp := models.App{Name: name}\r\napp.ValidateName()\r\napp.Validate()\r\n```\r\n\r\n```\r\ntrigger := models.Trigger{Name: name}\r\ntrigger.ValidateName()\r\ntrigger.Validate()\r\n```\r\n\r\n### One line description for the changelog\r\n\r\n> Extract name validation from model validators\r\n\r\n### One moving picture involving robots (not mandatory but encouraged)\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n<script> \r\n$(document).ready(\r\n    setInterval(\r\n        function() {\r\n            $(\"img\").animate({\r\n                    left: '100px'\r\n                },\r\n                500,\r\n                function() {\r\n                    $(this).animate({\r\n                        left: 0\r\n                    }, 500);\r\n                }\r\n            )\r\n        },\r\n        100\r\n    )\r\n);\r\n</script> \r\n</head>\r\n<body>\r\n\r\n<img style=\"position:absolute\" src=\"https://i.gifer.com/XmuP.gif\" /></div>\r\n\r\n</body>\r\n</html>\r\n``` ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [Vince Zarola](https://github.com/vzDevelopment)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! ## CLA Bot\n\nAll committers have signed the CLA. I have added unit tests and fixed the issue of the missing fn name check in `Fn.ValidateName()` >  happy to chat on slack or here about the plan, it would be nice to lock down a plan for validating as there are a few bugs/PRs open for this now.\r\n\r\nHumm these are fair points and I can't think of any decent solutions for it. The only options I can think of are:\r\n\r\n* To have a shared libraries repo which everything used. However, this still has most of the issues you've pointed out above - it'd get huge, you'd have to recompile everything that used them, version mismatches etc.\r\n\r\n* To have an API endpoint on the server which we could use for validation - this is how I'd get around the issue with websites - I'd have functions on the server side that can do the validation and then use ajax on the client side to make use of them. I don't like the idea of requiring a server to be able to call `fn init` though. I also fear this will pollute the functions API.\r\n\r\nWhich leaves me with what you suggested and that's keeping the validation server side and passing it through to the client.\r\n\r\nIn which case I'm going to leave things as they are. You've sorted the immediate issue with `-trigger` being appended to the function names. Something else I was wondering - I've never used Swagger, but I noticed the fn_go models had some validation that looked auto generated using it. Is there a way we could centralise it using Swagger and then have the validation in the Fn server and the client use the Swagger generated models?  Sometimes, CallListener doesn't quite cut it. There are some use cases where\r\nwe'll want to have access to invocation extensions metadata - and possibly,\r\ninteract with the container creation process.\r\n\r\nTake two: add the ability to wrap Close, plus an extensible BeforeCall/AfterCall.\r\n\r\nThese can be used by a custom driver to add listeners to a ContainerTask - this also offers a way to get per-call behaviour into a Before/After pair, plus an avenue (from the custom driver modifying the Cookie's definition before returning it) to intercept container creation.\r\n\r\nI'm not 100% convinced this is neater than an explicit extension inferface, but I offer it in contrast. FWIW, the code here can be used to do the same kind of mount-mangling and population I had in mind for the original.\r\n Up for a review of the basic shape. If this should instead be in fnext, lemme know.\r\n\r\nCan wrap a couple of tests around this once there's some agreement on where it should live. FYI, this can't replace the call overrider since that runs (and it needs to run) much earlier than the proposed callbacks here. So the gist is this: the WrapBeforeCall and WrapAfterCall were there to add lifecycle interception just either side of the invocation running - where they have access to that request's call extensions.\r\n\r\nIt's true, the cookie could be the carrier for these.\r\n\r\nThe reason that the original version - with an explicit interface for plugins that behave like this - came about was that it seemed to me to be cleaner to expose an interface that simply had the requisite lifecycle extension points on it, rather than requiring hooks on Task or Cookie. The last in particular seems like an odd place to put things; Task is arguably a better fit in terms of what it represents. What v1 bundled together was the set of behaviours (a pre-creation hook, a post-deletion one, and per-call before and after). The main issue with the interceptor extension was that - since it typically requires per-container state (even if that's just a random id) - the ContainerTask winds up being a part of its method signatures.\r\n\r\nHaving this behaviour associated with a Task makes some sense, perhaps, in as much as if you're doing something before and after container creation that's closely related to things you do either side of a call, \"Task\" seems to be the decriptor of that: you're mutating the container/environment that a call executes in.\r\n\r\nIt's not clear to me what the cookie really represents, rather than a packaged up frozen request to a driver to make a container. As per conversation with Reed last night -\r\n\r\nWrapClose, WrapBeforeCall and WrapAfterCall in place. They're still on ContainerTask (for the moment) - it'd be nice to have the Before/After on a call, but with hot containers we need to intercept to wrap for each call to a container. (Agent might be the other place to put this behaviour, but for the moment it's on the CT as that's got the context available for the required decorations to be able to do their thing).\r\n\r\nDropped the Set/GetCallID stuff.  Docker on WSL2 might make Windows fixes unnecessary, as the experience should be closer to Docker on Linux: https://engineering.docker.com/2019/06/docker-hearts-wsl-2/  **Description**\r\nUnable to execute any functions :(\r\n\r\n**Steps to reproduce the issue:**\r\n1. Downloaded latest version of fn.exe CLI\r\n2. Ran `fn start`\r\n3. Created new function as per quickstart guide (tried both Node.js and Python)\r\n4. Tried executing function using `fn invoke`\r\n\r\n**Describe the results you received:**\r\n```\r\n\u03bb fn invoke helloapp hellopy\r\nError invoking function. status: 500 message: internal server error\r\n```\r\n\r\nError:\r\n```\r\ntime=\"2019-03-30T15:49:51Z\" level=info msg=\"Fn serving on `:8080`\" type=full\r\ntime=\"2019-03-30T15:50:19Z\" level=error msg=\"Could not create container\" app_id=01D77KZNGHNG8G00GZJ0000001 cpus= error=\"API error (500): invalid mode: /tmp/iofs\" fn_id=01D77MHK5YNG8G00GZJ0000003 id=01D77MPSYDNG8G00GZJ0000002 idle_timeout=30 image=\"hellopy:0.0.2\" memory=256 stack=CreateContainer\r\ntime=\"2019-03-30T15:50:19Z\" level=error msg=\"internal server error\" action=\"server.handleFnInvokeCall)-fm\" error=\"API error (500): invalid mode: /tmp/iofs\" fn_id=01D77MHK5YNG8G00GZJ0000003 stack=\"goroutine 127 [running]:\r\nruntime/debug.Stack(0xc42047fce0, 0x1297ca0, 0xc4204ab960)\r\n\t/usr/local/go/src/runtime/debug/stack.go:24 +0xa7\r\ngithub.com/fnproject/fn/api/server.HandleErrorResponse(0x12a3fc0, 0xc4201a96e0, 0x7f5dad00e7c0, 0xc4200e82c0, 0x1297ca0, 0xc4204ab960)\r\n\t/go/src/github.com/fnproject/fn/api/server/error_response.go:57 +0x57f\r\ngithub.com/fnproject/fn/api/server.handleErrorResponse(0xc4200e82c0, 0x1297ca0, 0xc4204ab960)\r\n\t/go/src/github.com/fnproject/fn/api/server/error_response.go:25 +0xa9\r\ngithub.com/fnproject/fn/api/server.(*Server).handleFnInvokeCall(0xc42040eb40, 0xc4200e82c0)\r\n\t/go/src/github.com/fnproject/fn/api/server/runner_fninvoke.go:53 +0x1da\r\ngithub.com/fnproject/fn/api/server.(*Server).(github.com/fnproject/fn/api/server.handleFnInvokeCall)-fm(0xc4200e82c0)\r\n\t/go/src/github.com/fnproject/fn/api/server/server.go:1198 +0x34\r\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e82c0)\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\r\ngithub.com/fnproject/fn/api/server.(*Server).runMiddleware(0xc42040eb40, 0xc4200e82c0, 0x0, 0x0, 0x0)\r\n\t/go/src/github.com/fnproject/fn/api/server/middleware.go:42 +0x29f\r\ngithub.com/fnproject/fn/api/server.(*Server).rootMiddlewareWrapper.func1(0xc4200e82c0)\r\n\t/go/src/github.com/fnproject/fn/api/server/middleware.go:32 +0x58\r\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e82c0)\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\r\ngithub.com/fnproject/fn/api/server.panicWrap(0xc4200e82c0)\r\n\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:190 +0x51\r\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e82c0)\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\r\ngithub.com/fnproject/fn/api/server.panicWrap(0xc4200e82c0)\r\n\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:190 +0x51\r\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e82c0)\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\r\ngithub.com/fnproject/fn/api/server.apiMetricsWrap.func1.1(0xc4200e82c0)\r\n\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:154 +0x2f8\r\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e82c0)\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\r\ngithub.com/fnproject/fn/api/server.traceWrap(0xc4200e82c0)\r\n\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:97 +0x507\r\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e82c0)\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\r\ngithub.com/fnproject/fn/api/server.loggerWrap(0xc4200e82c0)\r\n\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:212 +0x1ea\r\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e82c0)\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\r\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Engine).handleHTTPRequest(0xc42040ea20, 0xc4200e82c0)\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/gin.go:361 +0x586\r\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Engine).ServeHTTP(0xc42040ea20, 0x12a3940, 0xc420495630, 0xc42042ed00)\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/gin.go:326 +0x153\r\ngithub.com/fnproject/fn/vendor/go.opencensus.io/plugin/ochttp.(*Handler).ServeHTTP(0xc4200adf40, 0x12a3940, 0xc420495630, 0xc420152c00)\r\n\t/go/src/github.com/fnproject/fn/vendor/go.opencensus.io/plugin/ochttp/server.go:86 +0x1c8\r\nnet/http.serverHandler.ServeHTTP(0xc42040ab60, 0x12a25c0, 0xc420242460, 0xc420152c00)\r\n\t/usr/local/go/src/net/http/server.go:2697 +0xbc\r\nnet/http.(*conn).serve(0xc4200d20a0, 0x12a3f00, 0xc420503240)\r\n\t/usr/local/go/src/net/http/server.go:1830 +0x651\r\ncreated by net/http.(*Server).Serve\r\n\t/usr/local/go/src/net/http/server.go:2798 +0x27b\r\n\"\r\n```\r\n\r\n**Describe the results you expected:**\r\nWanted it to work :(\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\nHappens 100% of the time\r\n\r\n**Output of `fn version` (CLI command):**\r\n\r\n```\r\nClient version is latest version: 0.5.65\r\nServer version:  0.3.682\r\n```\r\n\r\n**Additional environment details (OSX, Linux, flags, etc.):**\r\nWindows 10, 1809 Hi, thanks for reporting. But here\u2019s the thing, you have problems creating containers. That\u2019s what you have in your logs.\r\n\r\nMake sure you can do that and Fn has reliable connection with Docker.\r\n\r\nAlso, FYI, we don\u2019t have any guarantees that Fn works on Windows. So, you may face with problems.\r\n > But here\u2019s the thing, you have problems creating containers.\r\n\r\nThe Fdk server itself is a container though, and that's running fine?\r\n```\r\n\u03bb docker ps\r\nCONTAINER ID        IMAGE                COMMAND             CREATED             STATUS              PORTS\r\n                NAMES\r\ndf875f5e35fd        fnproject/fnserver   \"./fnserver\"        10 minutes ago      Up 10 minutes       2375/tcp, 0.0.0.0:8080->8080/tcp   fnserver\r\n```\r\n\r\nI don't have issues with other Docker containers.\r\n\r\n> FYI, we don\u2019t have any guarantees that Fn works on Windows. So, you may face with problems.\r\n\r\nOK. I can try to use a VM instead. I assume a local `fn` client can connect to a remote server? Thanks for the detailed comment @zootalures! I tried the command you mentioned (except replacing `d:` with `c:` since I have no D: drive):\r\n```\r\n\u03bb docker run --rm -i --name fnserver -v c:/fndata/:/iofs -e FN_IOFS_DOCKER_PATH=c:/fndata -e FN_IOFS_PATH=/iofs  -v /var/run/docker.sock:/var/run/docker.sock  -p 8080:8080 --entrypoint ./fnserver fnproject/fnserver\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"Registering container driver 'docker'\"\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"Registering log provider 's3'\"\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"Registering data store provider 'sql'\"\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"Registering log provider 'sql'\"\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"Registering sql helper 'mysql'\"\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"Registering sql helper 'postgres'\"\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"Registering sql helper 'sqlite'\"\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"Setting log level to\" fields.level=info\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"Connecting to DB\" url=\"sqlite3:///app/data/fn.db\"\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"datastore dialed\" datastore=sqlite3 max_idle_connections=256 url=\"sqlite3:///app/data/fn.db\"\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"agent starting cfg={MinDockerVersion:17.10.0-ce ContainerLabelTag: DockerNetworks: DockerLoadFile: FreezeIdle:50ms HotPoll:200ms HotLauncherTimeout:1h0m0s HotPullTimeout:10m0s HotStartTimeout:5s AsyncChewPoll:1m0s DetachedHeadRoom:6m0s MaxResponseSize:0 MaxHdrResponseSize:0 MaxLogSize:1048576 MaxTotalCPU:0 MaxTotalMemory:0 MaxFsSize:0 PreForkPoolSize:0 PreForkImage:busybox PreForkCmd:tail -f /dev/null PreForkUseOnce:0 PreForkNetworks: EnableNBResourceTracker:false MaxTmpFsInodes:0 DisableReadOnlyRootFs:false DisableDebugUserLogs:false IOFSEnableTmpfs:false IOFSAgentPath:/iofs IOFSMountRoot:c:/fndata IOFSOpts: ImageCleanMaxSize:0 ImageCleanExemptTags: ImageEnableVolume:false}\"\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"no docker auths from config files found (this is fine)\" error=\"open /root/.dockercfg: no such file or directory\"\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"available memory\" cgroup_limit=9223372036854771712 head_room=268435456 total_memory=1377939456\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"ram reservations\" avail_memory=1109504000 ram_async_hw_mark=887603200\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"available cpu\" avail_cpu=2000 total_cpu=2000\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"cpu reservations\" cpu=2000 cpu_async_hw_mark=1600\r\n\r\n        ______\r\n       / ____/___\r\n      / /_  / __ \\\r\n     / __/ / / / /\r\n    /_/   /_/ /_/\r\n        v0.3.682\r\n\r\ntime=\"2019-03-30T16:33:01Z\" level=info msg=\"Fn serving on `:8080`\" type=full\r\n```\r\n\r\nThen when I do `fn invoke helloapp hellopy`, it still mentions `/tmp/iofs`:\r\n```\r\ntime=\"2019-03-30T16:33:51Z\" level=error msg=\"Could not create container\" app_id=01D77Q5XT2NG8G00GZJ0000001 cpus= error=\"API error (500): invalid mode: /tmp/iofs\" fn_id=01D77Q6AN1NG8G00GZJ0000002 id=01D77Q6GZ3NG8G00GZJ0000004 idle_timeout=30 image=\"hellopy:0.0.3\" memory=256 stack=CreateContainer\r\n```\r\n\r\nIs that supposed to mention `/iofs` instead?\r\n\r\nIf I swap the entry point from `./fnserver` to `env`, it does indeed show the environment variable:\r\n```\r\n\u03bb docker run --rm -i --name fnserver -v c:/fndata/:/iofs -e FN_IOFS_DOCKER_PATH=c:/fndata -e FN_IOFS_PATH=/iofs  -v /var/run/docker.sock:/var/run/docker.sock  -p 8080:8080 --entrypoint env fnproject/fnserver\r\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r\nHOSTNAME=1242416e8d7c\r\nFN_IOFS_DOCKER_PATH=c:/fndata\r\nFN_IOFS_PATH=/iofs\r\nDOCKER_CHANNEL=stable\r\nDOCKER_VERSION=17.12.0-ce\r\nDIND_COMMIT=3b5fac462d21ca164b3778647420016315289034\r\nHOME=/root\r\n``` Thank you so much for the investigation, @zootalures!\r\n\r\n> the downside here is that each function can see each other functions sockets - v bad but it would work I think.\r\n\r\nI don't think anyone would actually use Docker for Windows in production, so maybe a warning on startup would suffice? (eg. \"Due to Windows limitations, Fn is running in an INSECURE mode that is only for development purposes!\") Any work around for this? Hitting the same problem on windows 10 with docker desktop as well. I got it to work by installing fn inside WSL 2 and running them from there,  Runs the function container as user (id:1000, gid:1000) in docker. This requires corresponding changes in base runtime images (add user/group) that are used by the fdks.\r\n\r\nIt also drops all the security capabilities (by using `CapDrop=all`).\r\n\r\nNote that there is an opt-out environment variable `FN_DISABLE_DOCKER_SECURITY` which can be set to true to disable this features. We could also chown the iofs directory to GID 1000 and make it 770, for running the tests locally one would need to be member of GID 1000, I'm gonna try if that works...\r\n\r\nYes, I'm attempting tmpfs too, not straightforward.  was there a reason not to use https://github.com/fnproject/fn/blob/master/api/common/singleflight/singleflight.go to cover this? it's hiding out in common, but I'm not sure if it was analyzed and ruled out - would get rid of most of this code, from what I can tell to just do `singleflight.Do(imageKey(call), func() { dockerPull() })` inline where it was and the timeout behavior would be the same, as well.  In the top error handler we log the stacktrace if we get back a non-API errors. Under that category we will have gRPC errors as well, there is no point to log a stacktrace for a gRPC errors where those could happen on the server side or due to some temporary network blips.\r\nIn this change we skip the stack trace log in presence of gRPC errors, plus we change some log level from Error down to Info for some retryable errors.\r\n\r\n In the last commit I added the concept of retryable error. The new interface contains an APIErrorWrapper that allows to define a specific root error which gets logged for debugging and a more general error which is returned back to the caller. Before this change we were setting the Retry-After header in case we get a ErrCallTimeoutServerBusy, now we intercept in the agent.Submit the error returned and if it is an ErrCallTimeoutServerBusy we transform it inot a retryable error.  > Before this change we were setting the Retry-After header in case we get a ErrCallTimeoutServerBusy, now we intercept in the agent.Submit the error returned and if it is an ErrCallTimeoutServerBusy we transform it inot a retryable error.\r\n\r\nwhen we declare ErrCallTimeoutServerBusy can we just declare it as a Retryable error? then we don't have to worry about catching it anywhere else. that seems to be the intention for it, at least, do you think it makes sense? I'll add and fix existing tests once we have an agreement that Retryable error is a good idea. In this version the gRPC error is not a retryable error anymore as we don't know if the function run for a while on the runner so we don't return a response with the Retry-After header but we return a 500 error, it is up to the caller to decide to try again the same call.\r\nThere is a simplified version of the Retryable error,  if we don't have an agreement on the retryable error thing it is probably worth just fixing the gRPC issue where the fix will be just transform the generic error in an APIError. \r\nLet me know what do you think, system_tests are still failing but I haven't looked at them yet. I changed my mind, as we agree that this gRPC error won't be a retryable error i am going to change this PR so as it manages just the better management of the gRPC error and remove all the Retryable idea here. If we want to implement the Retryable errors that can be done on a separate PR. @skinowski I think the top level handler already deal with the errors, so I tackle the problem you posted with your last comment removing those general errors in favor of models.API errors. In that case it is possible, if required, to manage them properly in  error_response.go. I modified most of the errors you mentioned but not the io.EOF as I think it is managed as special case and I don't want to touch it. What do you think of this new version? This is a super simplified version where in the top error handler we just verify if we have any gRPC error back and if so we don't log the stacktrace with the error.\r\n\r\nas @skinowski pointed out in some other discussion, is the stacktrace helpful at all at that level?  Experiments in load testing revealed that eviction of\r\ncontainers that are starting is detrimental since this\r\nincreases churn and acts as a feedback mechanism\r\nincreasing docker API rates. Starting and deleting\r\ncontainers are one of the most expensive docker API\r\ncalls and traffic arriving on a busy/loaded server\r\ncan trigger flood of container create actions that\r\nget canceled with evictions. Previous code tried to prevent\r\nthis by tracking the presence of the original request that\r\ncaused the container start, but based on the load test\r\ndata this does not seem good enough to avoid flurry\r\nof evictions. In other words, in a busy system, likelihood\r\nof the original request getting quickly serviced by another\r\ncontainer is not that rare.\r\n\r\nWith this change, we restrict evict-ability of containers\r\nto Idle and Paused states exclusively. This increases the\r\nlikelihood of back pressure (503) since it allows starting\r\ncontainers to initialize.\r\n\r\nA race condition that occasionally causes a busy\r\ncontainer eviction is also fixed. The fix proposed\r\nhere is that we unblock the listener as if busy-container\r\nreally got evicted, but in the busy container we simply\r\nrefresh the eviction token and get rid of the evicted\r\nold token. Unblocked listener checkLaunch rechecks\r\nand attempts another launch after this.\r\n\r\nIn future, based on empirical data, we may consider\r\nintroducing evictions for slow docker pulls.\r\n\r\nIf the above changes still result in aggressive evictions,\r\na possible next step can be to restrict evictions to only\r\npaused containers.\r\n  @reclaro Thanks for making these changes, LGTM.  @reclaro thanks for figuring the details out here. It seems like it's possible that we're not implementing the http.ResponseWriter contract appropriately, either. from https://golang.org/pkg/net/http/#ResponseWriter \r\n\r\n```\r\n        // Header returns the header map that will be sent by\r\n        // WriteHeader. The Header map also is the mechanism with which\r\n        // Handlers can set HTTP trailers.\r\n        //\r\n        // Changing the header map after a call to WriteHeader (or\r\n        // Write) has no effect unless the modified headers are\r\n        // trailers.\r\n```\r\n\r\nthis would seem to say that `WriteHeader` should write the headers (generally with http there's a buffer here so that the headers and early body bits are written in one go instead of 2, we probably want similar behavior, but I haven't thought about details with 2 RPC messages there it may be trickier), instead of currently our behavior is that headers are not set until Write time. From https://github.com/fnproject/fn/blob/73778de0ae919268d2fa293001ea6546269d7c82/api/agent/agent.go#L746 we are appropriately calling WriteHeader before that, and Write itself should call WriteHeader as well if it has not been called yet either, I am not sure we're doing this either.  When invoking my Python function, sometimes I get the logging output with `fn get logs app func last`, but many times I don't. I *always* see the logged output from my function in the fnserver debug logging output, so that tells me the function itself is behaving properly.\r\n\r\nSteps:\r\n1. Invoke a Python function.\r\n2. Check the logs: `fn get logs app func last`\r\n3. Repeat\r\n\r\nFN version:\r\nClient version: 0.5.45 is not latest: 0.5.51\r\nServer version:  0.3.661\r\n\r\nPlatform: OSX\r\nDarwin 17.7.0 Darwin Kernel Version 17.7.0: Thu Dec 20 21:47:19 PST 2018; root:xnu-4570.71.22~1/RELEASE_X86_64 x86_64\r\n\r\nDocker version:\r\nClient: Docker Engine - Community\r\n Version:           18.09.2\r\n API version:       1.39\r\n Go version:        go1.10.8\r\n Git commit:        6247962\r\n Built:             Sun Feb 10 04:12:39 2019\r\n OS/Arch:           darwin/amd64\r\n Experimental:      false\r\nServer: Docker Engine - Community\r\n Engine:\r\n  Version:          18.09.2\r\n  API version:      1.39 (minimum version 1.12)\r\n  Go version:       go1.10.6\r\n  Git commit:       6247962\r\n  Built:            Sun Feb 10 04:13:06 2019\r\n  OS/Arch:          linux/amd64\r\n  Experimental:     true\r\n\r\n\r\n Here are some more findings:\r\n\r\nWhen I invoke a function and see the expected logging output with `fn get logs app func last`, I see the following in fnserver debug log:\r\n\r\n```\r\ntime=\"2019-02-14T19:34:00Z\" level=info msg=\"starting call\" action=\"server.handleFnInvokeCall)-fm\" app_id=01D39Y96VVNG8G00GZJ0000001 container_id=01D3PR0PWFNG8G00GZJ000000A fn_id=01D39Y96XBNG8G00GZJ0000002 id=01D3PR0PWENG8G00GZJ0000009\r\ntime=\"2019-02-14T19:34:00Z\" level=debug msg=\"Log to stdout\\n\" action=\"server.handleFnInvokeCall)-fm\" app_id=01D39Y96VVNG8G00GZJ0000001 call_id=01D3PR0PWENG8G00GZJ0000009 fn_id=01D39Y96XBNG8G00GZJ0000002 id=01D3PR0PWENG8G00GZJ0000009 image=\"iad.ocir.io/renesysinternetintelligence/hello:latest\" user_log=true\r\ntime=\"2019-02-14T19:34:00Z\" level=debug msg=\"Log to stderr\\n\" action=\"server.handleFnInvokeCall)-fm\" app_id=01D39Y96VVNG8G00GZJ0000001 call_id=01D3PR0PWENG8G00GZJ0000009 fn_id=01D39Y96XBNG8G00GZJ0000002 id=01D3PR0PWENG8G00GZJ0000009 image=\"iad.ocir.io/renesysinternetintelligence/hello:latest\" user_log=true\r\ntime=\"2019-02-14T19:34:00Z\" level=debug msg=\"2019-02-14 19:34:00,322 - root - INFO -  [14/Feb/2019:19:34:00 +0000] \\\"POST /call HTTP/1.1\\\" 200 188 \\\"-\\\" \\\"Go-http-client/1.1\\\"\\n\" action=\"server.handleFnInvokeCall)-fm\" app_id=01D39Y96VVNG8G00GZJ0000001 call_id=01D3PR0PWENG8G00GZJ0000009 fn_id=01D39Y96XBNG8G00GZJ0000002 id=01D3PR0PWENG8G00GZJ0000009 image=\"iad.ocir.io/renesysinternetintelligence/hello:latest\" user_log=true\r\ntime=\"2019-02-14T19:34:00Z\" level=debug msg=\"Got resp from UDS socket\" action=\"server.handleFnInvokeCall)-fm\" app_id=01D39Y96VVNG8G00GZJ0000001 fn_id=01D39Y96XBNG8G00GZJ0000002 id=01D3PR0PWENG8G00GZJ0000009 resp=\"&{200 OK 200 HTTP/1.1 1 1 map[Content-Type:[application/json] Content-Length:[25] Date:[Thu, 14 Feb 2019 19:34:00 GMT] Server:[Python/3.6 aiohttp/3.4.4] Fn-Http-Status:[200]] 0xc42018e240 25 [] false false map[] 0xc420429900 <nil>}\"\r\ntime=\"2019-02-14T19:34:00Z\" level=debug msg=\"docker pause\" app_id=01D39Y96VVNG8G00GZJ0000001 call_id=01D3PR0PWFNG8G00GZJ000000A cpus= fn_id=01D39Y96XBNG8G00GZJ0000002 id=01D3PR0PWFNG8G00GZJ000000A idle_timeout=30 image=\"iad.ocir.io/renesysinternetintelligence/hello:latest\" memory=256 stack=Freeze\r\n```\r\n\r\nWhen I don't see the logged output, I see the following in the fnserver debug log:\r\n\r\n```\r\ntime=\"2019-02-14T19:35:22Z\" level=info msg=\"starting call\" action=\"server.handleFnInvokeCall)-fm\" app_id=01D39Y96VVNG8G00GZJ0000001 container_id=01D3PR2V3BNG8G00GZJ000000D fn_id=01D39Y96XBNG8G00GZJ0000002 id=01D3PR387KNG8G00GZJ000000F\r\ntime=\"2019-02-14T19:35:22Z\" level=debug msg=\"docker unpause\" app_id=01D39Y96VVNG8G00GZJ0000001 call_id=01D3PR2V3BNG8G00GZJ000000D cpus= fn_id=01D39Y96XBNG8G00GZJ0000002 id=01D3PR2V3BNG8G00GZJ000000D idle_timeout=30 image=\"iad.ocir.io/renesysinternetintelligence/hello:latest\" memory=256 stack=Unfreeze\r\ntime=\"2019-02-14T19:35:22Z\" level=debug msg=\"Got resp from UDS socket\" action=\"server.handleFnInvokeCall)-fm\" app_id=01D39Y96VVNG8G00GZJ0000001 fn_id=01D39Y96XBNG8G00GZJ0000002 id=01D3PR387KNG8G00GZJ000000F resp=\"&{200 OK 200 HTTP/1.1 1 1 map[Fn-Http-Status:[200] Content-Type:[application/json] Content-Length:[25] Date:[Thu, 14 Feb 2019 19:35:22 GMT] Server:[Python/3.6 aiohttp/3.4.4]] 0xc420352e40 25 [] false false map[] 0xc420429300 <nil>}\"\r\ntime=\"2019-02-14T19:35:22Z\" level=debug msg=\"Log to stdout\\n\" app_id=01D39Y96VVNG8G00GZJ0000001 container_id=01D3PR2V3BNG8G00GZJ000000D fn_id=01D39Y96XBNG8G00GZJ0000002 image=\"iad.ocir.io/renesysinternetintelligence/hello:latest\" tag=stderr\r\ntime=\"2019-02-14T19:35:22Z\" level=debug msg=\"Log to stderr\\n\" app_id=01D39Y96VVNG8G00GZJ0000001 container_id=01D3PR2V3BNG8G00GZJ000000D fn_id=01D39Y96XBNG8G00GZJ0000002 image=\"iad.ocir.io/renesysinternetintelligence/hello:latest\" tag=stderr\r\ntime=\"2019-02-14T19:35:22Z\" level=debug msg=\"2019-02-14 19:35:22,115 - root - INFO -  [14/Feb/2019:19:35:22 +0000] \\\"POST /call HTTP/1.1\\\" 200 188 \\\"-\\\" \\\"Go-http-client/1.1\\\"\\n\" app_id=01D39Y96VVNG8G00GZJ0000001 container_id=01D3PR2V3BNG8G00GZJ000000D fn_id=01D39Y96XBNG8G00GZJ0000002 image=\"iad.ocir.io/renesysinternetintelligence/hello:latest\" tag=stderr\r\ntime=\"2019-02-14T19:35:22Z\" level=debug msg=\"docker pause\" app_id=01D39Y96VVNG8G00GZJ0000001 call_id=01D3PR2V3BNG8G00GZJ000000D cpus= fn_id=01D39Y96XBNG8G00GZJ0000002 id=01D3PR2V3BNG8G00GZJ000000D idle_timeout=30 image=\"iad.ocir.io/renesysinternetintelligence/hello:latest\" memory=256 stack=Freeze\r\n```\r\n\r\nI notice two things here:\r\n1. When the logging works, the fnserver debug output attaches `user_log=true` to the function log messages, and they are recorded *before* the message \"Got resp from UDS socket\" \r\n2. When the logging does not work, the fnserver debug output attaches `tag=stderr` to the function log messages, and they appear *after* the message \"Got resp from UDS socket\"  Thanks for filing an issue. One thing I'd like to note, if you do logging inside of a Python function you'd need to flush your messages ASAP, i.e., `print(\"blah\", flush=True, file=sys.stderr)`.\r\n Yes, the function flushes the messages. @paulfelix logs API itself is scheduled for deprecation, we recommend using debug logs as you are now or using a syslog url https://github.com/fnproject/docs/blob/master/fn/operate/logging.md#remote-syslog-for-functions - sorry for the hitch, been meaning to get around to this removal I tried to use the syslog url approach with no luck. Is there a way to set that up on OSX?\r\n\r\nI'm also not convinced that the problem goes away if one uses the syslog url, which I'm guessing is further down the pipeline. Thus, log messages might get lost either way.  @carimura mentioned missing logs using papertrail. we're using the docker logging drivers, I'd expect this to work on OSX, configuration is no different. it's certainly possible that syslog can miss logs, though I think there's quite a lower probability provided a stable connection, we're attaching to the container and not swapping out each task as we are with the current logging API stuff, which I suspect is likely responsible for some of the missing logs on that end (at least, I'd surmise that the source of the problem for missing logs with either one is different than the other).  This is what I did when I tested all the FDK's hello worlds  obviously needs more config etc.  the system tests don't test the new behavior, but at least some rpc's are going to get executed (there's some concurrency stuff too so they're not just lollipop tests)  Ugh, sorry.  Based on offline follow-up: I didn't realize we were caching the incoming request at a higher level in the lb.  In that case, I don't see a problem with the existing implementation of `isTooBusy()`.  However, my interpretation is that we can get these connection errors in multiple situations so it may make sense to more crisply define when we can and can't retry one of these requests in response to getting our connection closed.  maybe out of band but why is the agent starting before the networks are created? is agent startup so slow that we have to do it concurrently (and, uh, how? thing can start super fast, worried about funny biz, if any)? it would save us quite a bit of code, anyway  there are 2 layers of retries going on here fwiw, since we want to retry any error for this one it's a little different than just temporary errors like we do in the docker client, anyway it sticks out as something to think about but I think this is absolutely fine, can't think of any issues or way to merge the two cleanly really  Recently Nvidia shared libraries enabling GPU intensive computations in Docker enabled environments. That's a great improvement for all mathematicians and data scientists. Let's imagine Fn cluster enabling users access to quite expensive GPU. \r\n\r\nWhat Nvida made is based mainly on device mapping. It's described here:  (1) https://www.nvidia.com/object/docker-container.html, and (2) https://github.com/NVIDIA/nvidia-docker/wiki/GPU-isolation-(version-1.0) And here what people did before: https://hub.docker.com/r/iahmedkaseb/cuda-digits/ \r\n Device mapping makes it possible to access host level devices from container.  Let's imagine that you do not have good random generator in the container, but you have available the perfect one at host. To plug host device to the container do the following:\r\n\r\n```\r\ndocker run -it --device /dev/random:/dev/HOST_RANDOM:r ubuntu bash -c \"ls -l /dev | grep HOST_RANDOM\" \r\ncrw-rw---- 1 root root   1, 8 Jan 16 17:14 HOST_RANDOM_DEVICE\r\n```\r\n\r\nAs you see there a new device. Non existing without \"--device /dev/random:/dev/HOST_RANDOM:r\". Now you can read from this new random generator.\r\n\r\n```\r\ndocker run -it --device /dev/random:/dev/HOST_RANDOM_DEVICE:r ubuntu bash -c \"cat /dev/HOST_RANDOM_DEVICE | head -1; exit\" \r\n```\r\n\r\nIt's the simplest demonstration. For random, which is read only, you may start multiple instances and read at the same time. \r\n\r\nFormer trick for Nvidia GPU was based on devices mapping, what is described here: https://hub.docker.com/r/iahmedkaseb/cuda-digits/, and here: https://github.com/NVIDIA/nvidia-docker/wiki/GPU-isolation-(version-1.0). it was done like this: \r\n\r\n```\r\ndocker run -it -p <port>:8080 --device /dev/nvidiactl:/dev/nvidiactl --device /dev/nvidia-uvm:/dev/nvidia-uvm --device /dev/nvidia0:/dev/nvidia0 -v <host_dir>:<container_dir> iahmedkaseb/cuda-digits\r\n```\r\n\r\nNew way of doing this is little different, and based on \"runtime\". Described here: https://github.com/NVIDIA/nvidia-docker/wiki/Usage. \r\n\r\nDevice mapping has a wider context of a lot of arguments related to docker run. It's about a lot of mission critical arguments related to memory consumption, cgroups privileges, etc. Details are here: https://docs.docker.com/engine/reference/run/ According to Docker API device mapping (and all run related things) should be specified by HostConfig structure. Inside of this there is Devices collection holding number of Device structures. API: https://docs.docker.com/engine/api/v1.24/ tells that:\r\n\r\n```\r\nDevices - A list of devices to add to the container specified as a JSON object in the form { \"PathOnHost\": \"/dev/deviceName\", \"PathInContainer\": \"/dev/deviceName\", \"CgroupPermissions\": \"mrw\"}\r\n```\r\n\r\nI've tried to dig into Fn code, probably locating the place where container is started (docker_client.go:410), however it looks that whole HostConfig contructure is just empty. \r\n\r\n```\r\nfunc (d *dockerWrap) StartContainerWithContext(id string, hostConfig *docker.HostConfig, ctx context.Context) (err error) {\r\n\tctx, closer := makeTracker(ctx, \"docker_start_container\")\r\n\tdefer closer()\r\n\r\n\tctx, _ = common.LoggerWithFields(ctx, logrus.Fields{\"docker_cmd\": \"StartContainer\"})\r\n\terr = d.retry(ctx, func() error {\r\n\t\terr = d.docker.StartContainerWithContext(id, hostConfig, ctx)\r\n\t\tif _, ok := err.(*docker.NoSuchContainer); ok {\r\n\t\t\t// for some reason create will sometimes return successfully then say no such container here. wtf. so just retry like normal\r\n\t\t\treturn temp(err)\r\n\t\t}\r\n\t\treturn err\r\n\t})\r\n\treturn err\r\n}\r\n```\r\n\r\nIt looks the above is invoked from docker.go, where HostConfig is null.\r\n\r\n```\r\nfunc (drv *DockerDriver) startTask(ctx context.Context, container string) error {\r\n\tlog := common.Logger(ctx)\r\n\tlog.WithFields(logrus.Fields{\"container\": container}).Debug(\"Starting container execution\")\r\n\terr := drv.docker.StartContainerWithContext(container, nil, ctx)\r\n\tif err != nil {\r\n\t\tdockerErr, ok := err.(*docker.Error)\r\n\t\t_, containerAlreadyRunning := err.(*docker.ContainerAlreadyRunning)\r\n\t\tif containerAlreadyRunning || (ok && dockerErr.Status == 304) {\r\n\t\t\t// 304=container already started -- so we can ignore error\r\n\t\t} else {\r\n\t\t\treturn err\r\n\t\t}\r\n\t}\r\n\treturn err\r\n}\r\n```\r\n\r\nAdding device mapping on this stage is quite important for me, as I'm trying to demonstrate Fn as layer making it possible to provide remote access to quite expensive GPU platform. I'm more that interesting in implementing this even by myself, however after first try it seems not to work properly. It was my naive definition of Devices holding one Device mapping.\r\n\r\n```\r\nhostConfig= &docker.HostConfig{\r\n        Devices:[]docker.Device{\r\n            docker.Device {\r\n                PathOnHost:\"/dev/video0\",\r\n                PathInContainer:\"/dev/video0\",\r\n                CgroupPermissions:\"rwm\",\r\n            },\r\n        },\r\n    }\r\n```\r\n\r\nI've added above to (docker_client.go:410):\r\n\r\n```\r\nfunc (d *dockerWrap) StartContainerWithContext(id string, hostConfig *docker.HostConfig, ctx context.Context) (err error) {\r\n\tctx, closer := makeTracker(ctx, \"docker_start_container\")\r\n\tdefer closer()\r\n\r\n        hostConfig= &docker.HostConfig{\r\n              Devices:[]docker.Device{\r\n                  docker.Device {\r\n                      PathOnHost:\"/dev/video0\",\r\n                      PathInContainer:\"/dev/video0\",\r\n                      CgroupPermissions:\"rwm\",\r\n                  },\r\n              },\r\n          }\r\n\r\n\tctx, _ = common.LoggerWithFields(ctx, logrus.Fields{\"docker_cmd\": \"StartContainer\"})\r\n\terr = d.retry(ctx, func() error {\r\n\t\terr = d.docker.StartContainerWithContext(id, hostConfig, ctx)\r\n\t\tif _, ok := err.(*docker.NoSuchContainer); ok {\r\n\t\t\t// for some reason create will sometimes return successfully then say no such container here. wtf. so just retry like normal\r\n\t\t\treturn temp(err)\r\n\t\t}\r\n\t\treturn err\r\n\t})\r\n\treturn err\r\n}\r\n```\r\n\r\nI understand it's a wider issue around HostConfig, however on this stage I'm more than interested in having just device mapping. Let me know if above code is correct. Unfortunately Go is a a quite new environment for me.  That seems to be the right place for the device mapping.\r\nSo, in order to make device mapping quite flexible, I recommend making it configurable and there are couple options:\r\n1. Env var (`FN_DOCKER_DEVICE_MAPPINGS` for instance) with the structure:\r\n`$PathOnHost:$PathInContainer:$CgroupPermissions,...`\r\nso if I'd like to add the GPU device mapping for Fn I'd need to set the following env var:\r\n`/dev/video0:/dev/video0:rwm`\r\nif I need to add more device mapping I'd need to set the following env var:\r\n`/dev/video0:/dev/video0:rwm,/dev/random:/dev/HOST_RANDOM:r`\r\n\r\n2. via device mapping config file that is defined as env var (`FN_DOCKER_DEVICE_MAPPING_CONFIG`).\r\nso, the config file would be a JSON file with config mappings:\r\n```json\r\n[\r\n    {\r\n        \"PathOnHost\": \"...\",\r\n        \"PathOnDevice\": \"....\",\r\n        \"CgroupPermissions\": \"...\"\r\n    },\r\n]\r\n```\r\nthis is actually more flexible and it's simple to process as if you'd try to marshal a JSON from a file:\r\n```go\r\ndmc_file, err := os.Open(os.Getenv(`FN_DOCKER_DEVICE_MAPPING_CONFIG`))\r\n// process error\r\nvar dms []docker.Device\r\nerr = json.NewDecoder(dmc_file).Decode(&dms)\r\n// process error\r\n\r\nhostConfig= &docker.HostConfig{\r\n    Devices: &dms,\r\n}\r\n\r\n```\r\n\r\n------\r\n\r\nPersonally I prefer 2nd option, because if people need to add more options to each device mapping they would have no reason to modify Fn's code and go straight away editing device mapping config.\r\n\r\n@rdallman @skinowski thoughts?\r\n It's perfect. Will try it tomorrow. \r\n 2nd option will work, i wasn't sure whether `docker.Device` structure is tagged properly, but it is:\r\nhttps://github.com/fsouza/go-dockerclient/blob/07f79529d302a194a67d21f98bdd8f4725d24c4a/container.go#L705 Hi, I'm trying to use the code posted by you \r\n\r\n```\r\ndmc_file, err := os.Open(os.Getenv(`FN_DOCKER_DEVICE_MAPPING_CONFIG`))\r\n// process error\r\nvar dms []docker.Device\r\nerr = json.NewDecoder(dmc_file).Decode(&dms)\r\n// process error\r\n\r\nhostConfig= &docker.HostConfig{\r\n    Devices: &dms,\r\n}\r\n```\r\n\r\nAnd getting the complier error on line\r\n```\r\nhostConfig= &docker.HostConfig{\r\n    Devices: &dms,\r\n}\r\n```\r\nError:\r\n```\r\n\"cannot use &dms (type *[]docker.Device) as type []docker.Device in field value\"\r\n```\r\nI'm quite new in Go and suspect that is some pointer trick here, \r\nCould you help?\r\n ```go\r\nhostConfig= &docker.HostConfig{\r\n    Devices: dms,\r\n}\r\n```\r\n Thanks it is compiling, sadly do not work on my machine \r\n\r\nI do the following test:\r\n1. Print HostConfig (in docker_client.go) to verify that env was loaded\r\n```\r\nfmt.Println(\"HostConfig, %v\", hostConfig)\r\n```\r\nResoult:\r\n```\r\nHostConfig, %v &{[] [] [] []  [] map[] [] [] [] [] [] []      { 0} [{/dev/video0 /dev/video0 rw}] [] { map[]} []   0 0 0 0 0 0    0 0 0 0 0 [] [] [] [] [] []  0 0 0 map[] false false false false false map[] map[] 0 0 0 0 [] false }\r\n```\r\n2. I have a long running Fn python based function that \r\n - Sleep time.sleep(50)\r\n - and ls on /dev\r\n\r\n3. During execution i try to get the running docker image (docker ps -a) and inspect that (docker inspect <CONTAINRE_ID>)\r\nI'm checking and unfortunately  \"Devices\": null\r\n```\r\n\"HostConfig\": { \r\n...\r\n            \"Devices\": null,\r\n...\r\n}\r\n```\r\nwhile when running \r\n```\r\ndocker run -it --device=/dev/video0 darknet /bin/bash\r\n\r\ndocker inspect 1a1ffdc0daa1\r\n```\r\ngives\r\n```\r\n\"HostConfig\": { \r\n...\r\n\"Devices\": [\r\n                {\r\n                    \"PathOnHost\": \"/dev/video0\",\r\n                    \"PathInContainer\": \"/dev/video0\",\r\n                    \"CgroupPermissions\": \"rwm\"\r\n                }\r\n            ],\r\n...\r\n} Maybe you miss something in configuration?\r\n @skinowski I don't think that this is a reason for starting another driver, because device mapping is a part of docker API, so, this feature might end up being a part of docker driver.\r\n According to Docker  nvidia gpu guides there\u2019s no need to run a container in priveleged mode I\u2019m order to allow gpu device mapping.\r\n\r\nBut I\u2019m general I get what you\u2019re saying. @niktaken can you make sure that GPU device mapping fits into non-privileged container execution?\r\n  * Added to UpdateState  so as a container changes status to starts and done it notes that a given app/function/image tuple is hot or not in open census\r\n* Changed UpdateState to take in the entire call for increased flexibility\r\n\r\n- Link to issue this resolves\r\n[1365](https://github.com/fnproject/fn/issues/1365)\r\n\r\n- What I did\r\n* Added to UpdateState  so as a container changes status to starts and done it notes that a given app/function/image tuple is hot or not in open census\r\n* Changed UpdateState to take in the entire call for increased flexibility\r\n\r\n- How I did it\r\nIn `agent.go`  I switched UpdatedState to take in `call` instead of `call.slots` so it can be more powerful.\r\nIn `stats.go` I added a `hotFunctionMeasure` and tags for it\r\nin `state_trackers.go` I added the functionality such that when a container starts it increases the hot function measure by one for a given appId/FunctionId/Image and when that container closes it decreases the hot function measure by one\r\n\r\n- How to verify it\r\nCall a function on FN, then, while during it's timeout period, call \r\n`curl localhost:8080/metrics  | grep -a5 -b10 Function` and you should see a line that looks like \r\n`fn_Hot_Functions{app_id=\"01CVRYP3EWNG8G00GZJ0000001\",function_id=\"01D0JFCNH8NG8G00GZJ000000Z\",image_name=\"imagename:0.0.1} 1` After the function times out (which is 30 seconds by defualt) and is not longer hot make that call again and you should see something like `fn_Hot_Functions{app_id=\"01CVRYP3EWNG8G00GZJ0000001\",function_id=\"01D0JFCNH8NG8G00GZJ000000Z\",image_name=\"imagename:0.0.1} 1`` \r\n\r\n- One line description for the changelog\r\nAdded change that exposes what functions are currently hot to metrics\r\n\r\n- One moving picture involving robots (not mandatory but encouraged)\r\n ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [Sam Strauch](https://github.com/SamTS)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! Sure, I can make the logging optional if performance is a large concern. Made changes to the commit based on feedback.\r\nNow uses env FN_FUNCTION_STATE_METRICS to turn on metrics\r\nMetrics now are unique per container state, eg: `container_paused_function` @SamTS I've checked this out and ran it with `FN_CONTAINER_STATE_METRICS=true ./fnserver` and in the metrics field I'm not seeing any tags on the metrics I was expecting, eg:\r\n\r\nfrom `$ curl -sSL localhost:8080/metrics`:\r\n\r\n```\r\n# TYPE fn_container_paused_total untyped                                                          \r\nfn_container_paused_total 1    \r\n```\r\n\r\nis my testing methodology off? any ideas here?\r\n\r\np.s. if you want to rebase and push up that would be great, thanks! @SamTS bad news I think. when I start this with the option off, I see:\r\n\r\n```\r\n\u2717: curl -sSL localhost:8080/metrics | grep \"paused\"\r\n# HELP fn_container_paused_total containers in state container_paused_total\r\n# TYPE fn_container_paused_total untyped\r\nfn_container_paused_total{app_id=\"\",function_id=\"\",image_name=\"\"} 1.0\r\n```\r\n\r\nthough, I'm glad to see updating opencensus fixed this, I think we need to move the configuration setting to be around the views not registering certain tags rather than the metrics? that is, we can throw metrics with any tags at the views, but unless the view registers those tags then they won't appear in prometheus. at present, we're registering all the tags but not offering them from the metrics, meaning the tags will be the zero value (not what we want). is this plausible?  @SamTS I did not get to this today, sorry, I will fiddle with how to configure the tags tomorrow and post whatever the results are here... async brain processing hasn't given me too many ideas since Monday :(  sounds good! let me know how it goes. @SamTS this is what I'm thinking https://github.com/fnproject/fn/compare/SamTS-hotmetrics?expand=1 -- this allows anybody building fn to build with whatever tags they want, and on the backend we can wire in whatever tags we want, just letting the main file add which tags they want to expose -- without additional configuration for various tags across the backend. I'd like to cohesive plan for advertising and bunching what those tags are eventually for people to use, but this at least is a start and is in line with what I'm thinking - I think this is the way the metrics/views are supposed to be split really: add whatever tags you want to metrics, turn on with views. \r\n\r\nlet me know what you make of that, it will meet requirements by just having them on in OSS by default, but won't bug our version of fn where we don't want to turn these tags on [yet]. I can PR this with your commit here or to your fork, let me know which you'd prefer. we do need to get the CLA signed to merge any commits though, let me know if you have signed it and it's just our bot acting up (it happens) and we'll get that taken care of. @rdallman The one bit I am concerned about is under the current construction \r\n`fn_container_{container_status}_duration_seconds_bucket`  populates by the cross product of latency and each app/fn/image tuple. If you're good with it, I'm fine, but it's something I noticed that could make the information in that section more unclear. @SamTS yea, I think they will be useful for the latency buckets as well - if i'm understanding correctly, I see them there. it's relatively easy to filter out tags in grafana to get eg the duration across all functions, I forget how prometheus handles the tags in queries (ie if the query is expensive or not to ignore tags), I guess that brings up a good point that we may want the metrics raw separately from the fully tagged versions, just to quickly query the former, if that's an issue (honestly idk, I guess I should figure that out). \r\n\r\ncool, i can PR this and tag another for review if that works for you? any luck with CLA bot https://github.com/fnproject/fn/pull/1373#issuecomment-453208872 ? let me know if I can help, would be nice to close this out, sorry it's dragged on so long Yeah that works great, CLA should be in progress, sent off the form so however long that takes. @rdallman FYI @SamTS 's OCA is now approved! ## CLA Bot\n\nAll committers have signed the CLA. @SamTS sorry for delay again here, I've opened https://github.com/fnproject/fn/pull/1438 to close this out I hope closed via #1438 - thanks!  The lb_agent logs an error if the difference between exec and call\r\nlatency is >=0, this change increase the value to reduce some potential\r\nfalse positive.\r\n\r\nresolve #1371\r\n @skinowski 2 possibilities are listed https://github.com/fnproject/fn/issues/1371 @reclaro closing since #1374 is merged - we can try this again if it isn't fixed by that, thanks!  FN_API_URL=\"https://fqdn:9999/root-path\" fn version\r\n\r\nClient version: 0.5.29 is not latest: 0.5.33\r\nServer version:  ?\r\n\r\nserver's logfile:\r\n\r\nDec  4 14:15:40 cl-dc1-nodeXXX fabio: 2018/12/04 14:15:40 [WARN] No route for fqdn:9999/version\r\n\r\nIt seems that fn ignores the path from FN_API_URL.\r\n\r\nI tried a custom context:\r\n\r\n$ fn list context\r\nCURRENT\tNAME\tPROVIDER\tAPI URL\t\t\t\t\t\tREGISTRY\r\n\tdefault\tdefault\t\thttp://localhost:8080\t\t\t\t\r\n*\tnms\tdefault\t\thttps://fqdn:9999/root-path\t\r\n\r\nDoes not change anything. I have the same issue with client 0.5.40 on OSX.  Hi, I am unable to replicate this. Would it be possible to try again with the latest version and let me know if it's working for you now? I'm assuming it has been fixed.\r\n\r\nIn order to try and replicate this I ensured nothing was running on the default `localhost:8080` (just to ensure fn wasn't ignoring the environment variable completely), started an fnserver on port 8081, and then setup a local reverse proxy that forwarded `/fn/` to `http://localhost:8081/`.\r\n\r\n```\r\nvzarola-Mac:myapp2 vzarola$ echo $FN_API_URL\r\nhttp://127.0.0.1:8888/fn/\r\n\r\nvzarola-Mac:myapp2 vzarola$ fn list app\r\nNAME\tID\r\nmyApp\t01D7KMK6SZNG8G00GZJ0000001\r\nmyapp2\t01D7J3TSJ8NG8G00GZJ0000004\r\n\r\nvzarola-Mac:myapp2 vzarola$ fn version\r\nClient version is latest version: 0.5.69\r\nServer version:  ?\r\n```\r\n\r\nAfter terminating the reverse proxy I got:\r\n```\r\nvzarola-Mac:myapp2 vzarola$ fn list app\r\n\r\nFn: Get http://127.0.0.1:8888/fn/v2/apps: dial tcp 127.0.0.1:8888: connect: connection refused\r\n\r\nSee 'fn <command> --help' for more information. Client version: 0.5.69\r\n``` Ah I see the issue is isolated to the `fn version` command. I misunderstood and thought none of the commands were working e.g. `fn list app`.\r\n\r\nI think the cause for this is [this line](https://github.com/fnproject/fn_go/blob/4d7d200044b7cdbbcd5558260473d3f6fa4dd57a/provider/defaultprovider/default_provider.go#L68). It needs changing to use `op.FnApiUrl.Path` like [this line](https://github.com/fnproject/fn_go/blob/4d7d200044b7cdbbcd5558260473d3f6fa4dd57a/provider/oracle/oracle_provider.go#L135).\r\n\r\nBefore change:\r\n```\r\nvzarola-Mac:testing vzarola$ echo $FN_API_URL\r\nhttp://127.0.0.1:8888/fn/\r\nvzarola-Mac:testing vzarola$ fn version\r\nClient version is latest version: 0.5.69\r\nServer version:  ?\r\n\r\n# Proxy Logs\r\nCONNECT   Apr 04 20:35:16 [85721]: Request (file descriptor 10): GET /version HTTP/1.1\r\n```\r\n\r\nAfter change:\r\n```\r\nvzarola-Mac:testing vzarola$ echo $FN_API_URL\r\nhttp://127.0.0.1:8888/fn/\r\nvzarola-Mac:testing vzarola$ fn version\r\nClient version is latest version: 0.5.69\r\nServer version:  0.3.687\r\n\r\n## proxy logs\r\nCONNECT   Apr 04 20:33:58 [85721]: Request (file descriptor 10): GET /fn/version HTTP/1.1\r\n```\r\n\r\nI'll create a PR  How can I get the IP address of a function caller? Is there any way of getting the original HTTP request?\r\n Assuming this is for HTTP triggers does it suffice for the the trigger handler to add X-Forwarded-For at the gateway? I'm using the Java FDK, but I guess this is a generic issue for all the FDKs to be able to resolve the details of the incoming request.\r\n\r\nThe use-case I'm trying to implement is to implement an analytics end-point as a FN function where some details of the caller are stored. The IP address is one of those details. \r\n\r\nFor the caller IP use-case the ``X-Forwarded-For`` header is fine, but the optimal implementation from my point-of-view would be that the (Java) FDK would provide a injected type ``RequestEvent`` (or similar) that would contain the details of the original request. For other FDK's a similar thing can probably be done as well. \r\n\r\n\r\n\r\n\r\n @denismakogon Sure, I can manually do it but then I have to trust what the clients are sending to the function. That is not really an option.\r\n\r\nWhat I am after is something I can currently can do with AWS API Gateway (https://aws.amazon.com/premiumsupport/knowledge-center/custom-headers-api-gateway-lambda/) allowing access to the original request and mapping it onto JSON. \r\n\r\nFor example via the API gateway I can do something like this:\r\n```\r\n#if($context.identity.sourceIp == \"123.45.55.43\")\r\n  {\r\n    \"source_ip\": \"$context.identity.sourceIp\"\r\n  }\r\n#else\r\n  $broken\r\n#end\r\n```\r\nThis allows me to implement IP filtering, logging, etc.  Addresses https://github.com/fnproject/fn/issues/1333 by raising the default container start timeout to 30 seconds. To give more context, the change proposed here is not about addressing any particular FDK's internal initialization taking too long.\r\n\r\nThe way the major FDKs are currently implemented does not provide any guarantees that end-user code won't run prior to FDK initialization, thus causing a timeout. For example, a static initialization block in a Java function, or a custom import inside a Python function will currently take place prior to FDK initialization and can cause a timeout if the total time is over five seconds. Optimizing a particular FDK's initialization, although valuable, does not solve the problem of customer imports or static block declarations defined outside the FDK's control.\r\n\r\nOther than providing more time for initialization of customer code, the only way to fully mitigate this would require us to rewrite all of our FDKs to use the appropriate language constructs that can guarantee that FDK initialization completes prior to running or loading any external customer code, if available in that language. In the meantime, any FDK is liable to run into a container initialization timeouts purely as a result of customer code/initialization running on it and outside of the control of the FDK in question. Should close this PR? Python FDK issue is being fixed. I'm not opposed to modifying this in future, but we should only do so based on metrics/observations. Increasing this too high, eg. 30 secs, is risky and needs careful evaluation/testing to ensure there's no scheduler impact. I'd also prefer that we not implement a solution that increases the timeout unless it's absolutely necessary.  We're fixing the specific problem in the FDK.  I'd vote to close this out. Happy to close it for now since we are addressing this issue at the FDK level.  Naming nit: using `UserExecutionTime` sounds a bit like we're collecting user, sys, and idle times.  I was going to suggest `ContainerExecutionTime`, but I realize that doesn't differentiate between the FDK / user cases, so maybe this is fine as is.  If you have other ideas for a name that doesn't share the potential for confusion with tracking time spent other cpu states, though, I'm certainly open to revision. @skinowski did call.CompletedAt-call.StartedAt diverge from meaning actual user execution time?  @rdallman This is actually completedAt-StartedAt coming from runners but this is recorded as UserExecutionTime on LB side. On LB side, StartedAt timestamp has a different meaning. StartedAt is \"placer started searching\". We probably could shuffle things and make these right on LB, but since now handlers/callbacks are executed *before* placer algorithm kicks in, it is difficult to change with dependencies. Another approach is set call.StartedAt on LB side again after the call is executed using 'StartedAt' from runners, but either way it's a hack. oh boy. thanks for explanation. it seems to have lost its meaning in that case (and without storing them, why not I guess) - where it wouldn't be set until execution began on the runner. I guess if that were the case most of this wouldn't have been necessary though (new interface methods, methods on call, etc)\r\n\r\n> Another approach is set call.StartedAt on LB side again after the call is executed using 'StartedAt' from runners, but either way it's a hack.\r\n\r\nthis makes sense to me and is the intended usage anyway (as it's documented on the field itself), with the exception that LB probably shouldn't set it to begin with and should read it from the runner's call object (intuitively, maybe the runner call object should really replace the lb call object?). i guess ideally the LB just uses CreatedAt as there isn't a meaningful amount of time between the call object getting created in the lb and starting to place things? idk  * for pure runner this turns it off for real this time.\r\n* this also just makes the agent container type send stdout to stderr, since\r\nwe're not using stdout for function output anymore this is pretty\r\nstraightforward hopefully.\r\n* I added a panic and some type checking printlns to ensure this is true for\r\npure_runner, both stdout and stderr are off, also added a unit test from agent\r\nto ensure this behavior from its container type, which pure_runner utilizes\r\n(no integration test though)\r\n will fix up ci... can't run all tests locally these days woo figured out why the ghost writer was a thing - need to swap out underlying writers handed off to the docker driver's stderr io.Writer - d'oh - so we keep them I guess.  Closing this for now.  > FDK must respond with 200/502/504 to http requests. Any other status is invalid and container\r\nmust be terminated if that occurs. HTTP timeouts are also considered a shutdown reason\r\nfor the container.\r\n\r\nthis seems unforgiving at best. do we want to leave a nozzle to shut down containers like this? now that timeout doesn't cause i/o issues and just causes resource utilization issues is this required? can think of policies like letting fn respond with 504 but wait for container to actually return http code before being ready for slot again (this has obvious issues to handle, highlighting that alternative policies exist) - eg letting users shut down containers causes container churn and can cause issues and if we don't have a great way of informing users they failed the contract this is confusing I guess, we can do things like rewrite < 300 to 200 and >= 300 to 502 and be more forgiving at least (i see users getting confused about FN_HTTP_STATUS and this code and think it's a user story to sort out)  <!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **fn** can be found at the following locations:\r\n\r\n- Slack - https://fnproject.slack.com #general channel\r\n- Post a question on StackOverflow, using the \u2018fn' tag: https://stackoverflow.com/questions/tagged/fn\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nAssume you've configured an application with a syslog (Papertrail, Logstash, etc.) but for some reason it got broke.\r\nIt appears that broken syslog blocks the execution of a function.\r\n\r\n**Steps to reproduce the issue:**\r\n1. create an app and a function\r\n2. setup Papertrail account, get the logging URL\r\n    2.1. `fn update app testapp --syslog-url=\"tcp+tls://logs7.papertrailapp.com:43074` (you can actuall use this one because this one was revoked).\r\n3. Revoke papertrail account.\r\n4. Call a function, see Fn logs.\r\n\r\n**Describe the results you received:**\r\nA sequence of the following erros in Fn logs:\r\n```\r\ntime=\"2018-11-09T18:48:51Z\" level=warning msg=\"docker temporary error, retrying\" app_id=01CQR004HQNG8G00GZJ0000001 cpus= docker_cmd=StartContainer error=\"API error (500): failed to initialize logging driver: dial tcp 169.46.82.186:40277: connect: connection refused\" fn_id=01CV7DSCTMNG8G00GZJ0000001 id=01CVWWVD2PNG8G00GZJ0000009 idle_timeout=30 image=\"denismakogon/word-generator:0.0.14\" memory=256\r\n```\r\nleads to:\r\n```\r\nime=\"2018-11-09T18:49:16Z\" level=error msg=\"internal server error\" action=\"server.handleFnInvokeCall)-fm\" error=\"API error (500): failed to initialize logging driver: dial tcp 169.46.82.186:40277: connect: connection refused\" fnID=01CV7DSCTMNG8G00GZJ0000001\r\n```\r\n\r\n\r\n**Describe the results you expected:**\r\nI actually not sure what i was expecting to get since i missed the whole thing about revoking/updating my app with a new papertrail instance.\r\nBut i assume that broken syslog might not be a problem for the invocation, no?\r\n\r\n thanks, this is interesting and seems like a behavior we should try to document and allow users to get a useful error message on at least. an argument could likely be made either way probably that if logs can't connect users may or may want functions to run regardless, but yea, I'd imagine most people would rather have their functions run and not get logs than not run. \r\n\r\nseems like a good policy would be retry connect a few times (bound this) and then maybe try to start the container without the logging driver attached eventually? we'd need to make sure this error is user visible somehow probably, which is tricky without logs, so that users can see that their logging driver didn't connect when they ask why they aren't getting logs - metrics would be a good place for that, maybe, but we don't have a good story there, either. any thoughts/ideas? That's the thing, I'm not sure that what would be the right way.\r\nMaybe test a connectivity when a user attempts to update his app with a new syslog URL? \r\n\r\nIt does seem to be kind of unexpected for users to block an invocation when the syslog is broken/unreachable. I'd rather not get logs but give my function a shot.\r\n\r\nI tend to agree, this situation is like Uroboros: you can't get logs because log service is down, you can't tell people that their log service is down, because we have only 1 transport for logs - a user's log service. @skinowski I think that's the best we can do in a short term. it's also an option to go back to doing these ourselves and get behavior we want (and call ids), but then we have the networking problem (ie container must have outbound access that can reach log service) we've at least improved this error https://github.com/fnproject/fn/pull/1402 - closing?   > I think I should add another timeout here, docker-pull vs UDS/start. Blanket timeout for all of it seems too broad, and leaves too much time for UDS/start phase which will eat cpu/mem outside of call.Start/End.\r\n\r\nthat seems fine. original uds proposal had 15s or something, yea, they're on the clock for the uds thing.  <!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **fn** can be found at the following locations:\r\n\r\n- Slack - https://fnproject.slack.com #general channel\r\n- Post a question on StackOverflow, using the \u2018fn' tag: https://stackoverflow.com/questions/tagged/fn\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\n<!--\r\nUpdating the `timeout` parameter works fine but removing `timeout` from `func.yaml` does not take effect\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n1. `fn init --runtime go --name test` and `fn -v deploy --app testapp --local`\r\n2. `fn inspect fn testapp test` shows `timeout` value as 30 - this is fine \r\n3. update `timeout` in func.yaml (to 60) and re-deploy the app. `fn inspect fn testapp test` shows `timeout` value as 60 - so far so good\r\n4. remove the `timeout` from `func.yaml` and re-deploy the app\r\n\r\n**Describe the results you received:**\r\n\r\n`fn inspect fn testapp test` still shows `timeout` value as 60\r\n\r\n**Describe the results you expected:**\r\n\r\n`fn inspect fn testapp test` should show `timeout` value as 30 (default value)\r\n\r\n**Output of `fn version` (CLI command):**\r\n\r\n```\r\nClient version: 0.5.23 is not latest: 0.5.26\r\n```\r\n\r\n**Additional environment details (OSX, Linux, flags, etc.):**\r\nLinux Hi, your assumption is quite incorrect. Because when you delete the timeout from the `func.yaml` and calling `fn deploy` you're basically saying to Fn to update my function with no timeout changes, that's why the timeout will remain as it was from the last update.\r\nSo, IMHO, it's not a bug but expected behaviour.\r\n  thanks for explanation, that helps clarify i mostly solved the puzzle, woo. gives me some intuition that the nanny is much more straightforward if it's solely responsible for setting the container to evictable state if initialization is ongoing when the initiating thread returns? i do see how it's a convenient place to run a state machine since it's there, there are just 2 of them basically, one of them actually doing the things (cookie.Prepare, cookie.Run, etc), another watching for those things to happen in a separate place - given the cookie apis aren't async, nanny just seems maybe more complicated than it needs to be - like i said earlier though, it may lead to context jungle, anyway trust your judgment, it's just an idea.  - Link to issue this resolves\r\nSo many\r\n\r\n- What I did\r\nUsed Go Mod\r\n\r\n- How I did it\r\nQuickly\r\n\r\n- How to verify it\r\ngo mod download; go mod vendor -v\r\n\r\n- One line description for the changelog\r\nBurned go dep. In a fire.\r\n\r\n- One moving picture involving robots (not mandatory but encouraged)\r\n![packing up those mods](https://techcrunch.com/wp-content/uploads/2018/02/gif.gif?w=1390&crop=1)\r\nPacking up those mods. Current status on each question.\r\n> certain transitive dependencies seem to have been removed by mod, a quick glance I find 2 (valid) transitive deps: golang.org/x/text github.com/petar/GoLLRB. even if the following point is possible, this is a little concerning just for the status of go mod but I'm optimistic that it's just part of the migration or something we can fix?\r\n\r\nI can explicitly include that. The indication I got from the docs is that it will prune modules that are not reachable. So I'm not sure what happened there. \r\n\r\n> is it possible to swap out the Gopkg.* files for the go.sum without any update of the dependencies here? whereby running go mod tidy or go mod vendor or go mod verify would not cause any vendor files to change (pardon my unfamiliarity with the tool, I believe I'm mostly talking about verify or vendor though, where the go.sum file would ensure the vendor/ has all matching deps in the same manner as dep ensure did)? it would make this PR really easy to green light if this is possible. ie it's not clear whether this patch moves to go mod or moves to go mod and uses go mod to update the dependencies (perhaps this could just be clarified). Any delta of deps would be nice as it's not easy to see from the diff, if leaving vendor/ alone isn't possible.\r\n\r\nIt uses the Gopkg.* files to generate it's initial list of dependencies. You have to do some replace commands to get everything to work. `go mod vendor` causes it to use the go.mod versions to populate the vendor directly, no updates are caused as long as you run your go commands with the `-mod=vendor`. If you do not include this flag it will implicitly to minor version updates.\r\n\r\n> will packages that import fn but still use dep handle this okay? I'm optimistic, I just honestly do not know. I know we have at least 2.\r\n\r\nMy understanding is that it should still work... But I am still experimenting. No claims yet. Haha ok :) I was ambivalent about it. Im glad you have a opinion about it.\n\nOn Mon, Oct 29, 2018, 1:22 PM Reed Allman <notifications@github.com> wrote:\n\n> got rid of the vendor directory\n>\n> we learned this lesson a long time ago, checking in the vendor directory\n> was worth it to prevent users from having dependency issues when getting\n> started (maybe dampened now to new devs), as well as not having dependency\n> issues among the active team, as well as bringing down CI times. please add\n> it back :)\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/fnproject/fn/pull/1284#issuecomment-434064747>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AADGnlwceRjZTcXHbA8jzAJ_T2PTGciKks5up2OWgaJpZM4X8lo0>\n> .\n>\n diff of \r\n`go list ./...` in the vendor directory\r\n```\r\n1a2,3\r\n> github.com/fnproject/fn/vendor/github.com/Azure/go-ansiterm\r\n> github.com/fnproject/fn/vendor/github.com/Microsoft/go-winio\r\n12a15\r\n> github.com/fnproject/fn/vendor/github.com/aws/aws-sdk-go/aws/csm\r\n18a22,23\r\n> github.com/fnproject/fn/vendor/github.com/aws/aws-sdk-go/internal/s3err\r\n> github.com/fnproject/fn/vendor/github.com/aws/aws-sdk-go/internal/sdkio\r\n19a25\r\n> github.com/fnproject/fn/vendor/github.com/aws/aws-sdk-go/internal/sdkuri\r\n21a28,29\r\n> github.com/fnproject/fn/vendor/github.com/aws/aws-sdk-go/private/protocol/eventstream\r\n> github.com/fnproject/fn/vendor/github.com/aws/aws-sdk-go/private/protocol/eventstream/eventstreamapi\r\n61d68\r\n< github.com/fnproject/fn/vendor/github.com/fnproject/fdk-go\r\n108d114\r\n< github.com/fnproject/fn/vendor/github.com/petar/GoLLRB/llrb\r\n152,159d157\r\n< github.com/fnproject/fn/vendor/golang.org/x/text/collate\r\n< github.com/fnproject/fn/vendor/golang.org/x/text/collate/build\r\n< github.com/fnproject/fn/vendor/golang.org/x/text/internal/colltab\r\n< github.com/fnproject/fn/vendor/golang.org/x/text/internal/gen\r\n< github.com/fnproject/fn/vendor/golang.org/x/text/internal/tag\r\n< github.com/fnproject/fn/vendor/golang.org/x/text/internal/triegen\r\n< github.com/fnproject/fn/vendor/golang.org/x/text/internal/ucd\r\n< github.com/fnproject/fn/vendor/golang.org/x/text/language\r\n163d160\r\n< github.com/fnproject/fn/vendor/golang.org/x/text/unicode/cldr\r\n165d161\r\n< github.com/fnproject/fn/vendor/golang.org/x/text/unicode/rangetable\r\n167a164\r\n> github.com/fnproject/fn/vendor/google.golang.org/appengine/cloudsql\r\n``` > github.com/fnproject/fn/vendor/github.com/Azure/go-ansiterm\r\n> github.com/fnproject/fn/vendor/github.com/Microsoft/go-winio\r\n\r\nthese were previously excluded (as they're only needed to build on WIN), am not sure if they fit compliance offhand or if there is a way for go mod to ignore these once again.\r\n\r\n> github.com/fnproject/fn/vendor/github.com/petar/GoLLRB/llrb\r\n\r\nthis one is curiously gone, and btree needs it, and we vendor btree. can you investigate? there may be others I missed, too.\r\n\r\nI think everything else is okay, the text package just looks shuffled. a diff of the Gopkg.lock list and the go.sum list may be more useful (few shell commands of wizardry?), I had to do some digging around with the provided diff anyway. Redid it but locking to the revisions that were in the gopkg.lock Regarding\r\n> This PR introduces a go module at the root of the repository and then also new modules for images/fn-test-utils and images/hello and images/fn-status-checker. Do these sub-directories need to be their own modules? Can they just be sub-packages of the one top-level module?\r\n\r\nThey can be, I was experimenting and forgot to delete those. > github.com/fnproject/fn/vendor/github.com/Azure/go-ansiterm\r\n> github.com/fnproject/fn/vendor/github.com/Microsoft/go-winio\r\n> \r\n> these were previously excluded (as they're only needed to build on WIN), am not sure if they fit compliance offhand or if there is a way for go mod to ignore these once again.\r\n\r\nI added exclude statements for both of these.\r\n\r\n> \r\n> github.com/fnproject/fn/vendor/github.com/petar/GoLLRB/llrb\r\n> \r\n> this one is curiously gone, and btree needs it, and we vendor btree. can you investigate? there may be \r\nothers I missed, too.\r\n\r\nSo it looks like btree replaces that package\r\nhttps://github.com/google/btree/blob/master/btree.go#L43\r\nSo we don't need it anymore. Also packages with capital letters are the worst.\r\n\r\n> \r\n> I think everything else is okay, the text package just looks shuffled. a diff of the Gopkg.lock list and the go.sum list may be more useful (few shell commands of wizardry?), I had to do some digging around with the provided diff anyway. > I added exclude statements for both of these.\r\n\r\nthe files are still checked into `vendor/` - possible to remove them or mod bug? I'd do a clear out of `vendor/` and grab them again with the latest mod file, I think with that this LGTM.\r\n\r\nping @zootalures for 2nd eyes Will do\n\nOn Thu, Nov 1, 2018, 3:46 PM Reed Allman <notifications@github.com> wrote:\n\n> I'd do a clear out of vendor/ and grab them again with the latest mod\n> file, I think with that this LGTM.\n>\n> ping @zootalures <https://github.com/zootalures> for 2nd eyes\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/fnproject/fn/pull/1284#issuecomment-435212474>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AADGnkAe6k6N0QG2q35nKSNf2SokPNP-ks5uq3nBgaJpZM4X8lo0>\n> .\n>\n It looks like you can't exclude a package that is needed for any builds with go mod like you can with go dep. And we don't want to check the Microsoft code into our repo (for the windows build) so my current proposal is to just add the paths in the vendor directory that hold these deps to the .gitignore. Thoughts @rpallman, other folks with thoughts?\r\n\r\na second option is creating a package called null (or something like it) and use the replace directive to replace the packages with an empty one. Created a noop module and replaced.  > It looks like you can exclude a package that is needed for any builds with go mod like you can with go dep. \r\n\r\nassuming this meant to say 'can't'  - that's ok. I am unfamiliar with the compliance process and I imagine that if we do check them in, they will simply need to be vetted. if that's easy, that may be the right thing to do instead of making the dependency process our own special incantation to work around go mod deficiencies we were previously accustomed to having - I do appreciate the effort. do you mind looking into that or do we think this is the best path forward? as far as I'm aware, we're not in a huge rush either here (please correct me if this isn't the case) I found a less hacky answer. I just made a folder in this repo called noop with an empty module and replaced the offending modules with it. > I found a less hacky answer. I just made a folder in this repo called noop with an empty module and replaced the offending modules with it.\r\n\r\nok. any details? this sounds like rewriting some import paths or mod files on some of our dependencies? Nothing quite that drastic :)\r\nI added this \r\n```\r\nreplace (\r\n        github.com/Azure/go-ansiterm => ./noop\r\n        github.com/Microsoft/go-winio => ./noop\r\n)\r\n```\r\nto our mod file. cool, that seems easy to follow and not need any maintenance when we update \ud83d\udc4d  Anything else we need to do @rdallman @zootalures  LGTM here.\r\n\r\n> My understanding is that it should still work... But I am still experimenting. No claims yet.\r\n\r\nany claims re: how our packages that import this one will hold up? as long as that is smooth sailing, I'm ready to pull the trigger anyway If you are using mod it's smooth sailing, it looks like it works for dep too. As a test I have tried a new project with go dep, and added a dependency to this branch of fn. Everything seemed to work.  Seems good. I considered whether the \"needed capacity\" in the resource tokens could get out of date / stale, but in the worst case we just evict one more container because \"at some point the capacity was needed\", and I think that's acceptable.  Code Looks good and full of wholesome deletage  - have tried and tested it a bit and I see no errors  It looks like old non-stream functions fail with a 500 on invoke - should  this to be something else or something more informative? \r\n\r\n```\r\ntime=\"2018-10-25T16:41:09Z\" level=error msg=\"internal server error\" action=\"server.handleFnInvokeCall)-fm\" error=\"context canceled\" fnID=01CTP1KQ29NG8G00GZJ0000002 stack=\"goroutine 100 [running]:\\nruntime/debug.Stack(0xc4200ad900, 0x1213a20, 0xc42009c1c0)\\n\\t/usr/local/go/src/runtime/debug/stack.go:24 +0xa7\\ngithub.com/fnproject/fn/api/server.HandleErrorResponse(0x121f960, 0xc420441950, 0x7f042ee997d8, 0xc4200e82c0, 0x1213a20, 0xc42009c1c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/error_response.go:52 +0x4b2\\ngithub.com/fnproject/fn/api/server.handleErrorResponse(0xc4200e82c0, 0x1213a20, 0xc42009c1c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/error_response.go:24 +0xa9\\ngithub.com/fnproject/fn/api/server.(*Server).handleFnInvokeCall(0xc42027f8c0, 0xc4200e82c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/runner_fninvoke.go:45 +0x1da\\ngithub.com/fnproject/fn/api/server.(*Server).(github.com/fnproject/fn/api/server.handleFnInvokeCall)-fm(0xc4200e82c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/server.go:1169 +0x34\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e82c0)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/api/server.(*Server).runMiddleware(0xc42027f8c0, 0xc4200e82c0, 0x0, 0x0, 0x0)\\n\\t/go/src/github.com/fnproject/fn/api/server/middleware.go:42 +0x29f\\ngithub.com/fnproject/fn/api/server.(*Server).rootMiddlewareWrapper.func1(0xc4200e82c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/middleware.go:32 +0x58\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e82c0)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/api/server.apiMetricsWrap.func1.1(0xc4200e82c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:153 +0x2f7\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e82c0)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/api/server.panicWrap(0xc4200e82c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:186 +0x51\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e82c0)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/api/server.traceWrap(0xc4200e82c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:96 +0x507\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e82c0)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/api/server.loggerWrap(0xc4200e82c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:208 +0x1ea\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e82c0)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Engine).handleHTTPRequest(0xc42027f7a0, 0xc4200e82c0)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/gin.go:361 +0x586\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Engine).ServeHTTP(0xc42027f7a0, 0x121f2e0, 0xc4200ad860, 0xc420209f00)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/gin.go:326 +0x153\\ngithub.com/fnproject/fn/vendor/go.opencensus.io/plugin/ochttp.(*Handler).ServeHTTP(0xc4201d3c40, 0x121f2e0, 0xc4200ad860, 0xc420153700)\\n\\t/go/src/github.com/fnproject/fn/vendor/go.opencensus.io/plugin/ochttp/server.go:82 +0x1c8\\nnet/http.serverHandler.ServeHTTP(0xc420405e10, 0x121dfa0, 0xc420478380, 0xc420153700)\\n\\t/usr/local/go/src/net/http/server.go:2694 +0xbc\\nnet/http.(*conn).serve(0xc420224000, 0x121f8a0, 0xc4200ae3c0)\\n\\t/usr/local/go/src/net/http/server.go:1830 +0x651\\ncreated by net/http.(*Server).Serve\\n\\t/usr/local/go/src/net/http/server.go:2795 +0x27b\\n\"\r\ntime=\"2018-10-25T16:52:00Z\" level=info msg=\"hot function terminated\" app_id=01CT5ZVBCZNG8G00GZJ000000N cpus= error=\"container exit code 126\" fn_id=01CTP26YZPNG8G00GZJ0000006 id=01CTP27KBWNG8G00GZJ0000009 idle_timeout=30 image=\"foo:0.0.2\" memory=128\r\ntime=\"2018-10-25T16:52:00Z\" level=error msg=\"internal server error\" action=\"server.handleFnInvokeCall)-fm\" error=\"context canceled\" fnID=01CTP26YZPNG8G00GZJ0000006 stack=\"goroutine 2131 [running]:\\nruntime/debug.Stack(0xc420334370, 0x1213a20, 0xc42009c1c0)\\n\\t/usr/local/go/src/runtime/debug/stack.go:24 +0xa7\\ngithub.com/fnproject/fn/api/server.HandleErrorResponse(0x121f960, 0xc4204fadb0, 0x7f042ee997d8, 0xc4200e8370, 0x1213a20, 0xc42009c1c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/error_response.go:52 +0x4b2\\ngithub.com/fnproject/fn/api/server.handleErrorResponse(0xc4200e8370, 0x1213a20, 0xc42009c1c0)\\n\\t/go/src/github.com/fnproject/fn/api/server/error_response.go:24 +0xa9\\ngithub.com/fnproject/fn/api/server.(*Server).handleFnInvokeCall(0xc42027f8c0, 0xc4200e8370)\\n\\t/go/src/github.com/fnproject/fn/api/server/runner_fninvoke.go:45 +0x1da\\ngithub.com/fnproject/fn/api/server.(*Server).(github.com/fnproject/fn/api/server.handleFnInvokeCall)-fm(0xc4200e8370)\\n\\t/go/src/github.com/fnproject/fn/api/server/server.go:1169 +0x34\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e8370)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/api/server.(*Server).runMiddleware(0xc42027f8c0, 0xc4200e8370, 0x0, 0x0, 0x0)\\n\\t/go/src/github.com/fnproject/fn/api/server/middleware.go:42 +0x29f\\ngithub.com/fnproject/fn/api/server.(*Server).rootMiddlewareWrapper.func1(0xc4200e8370)\\n\\t/go/src/github.com/fnproject/fn/api/server/middleware.go:32 +0x58\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e8370)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/api/server.apiMetricsWrap.func1.1(0xc4200e8370)\\n\\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:153 +0x2f7\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e8370)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/api/server.panicWrap(0xc4200e8370)\\n\\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:186 +0x51\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e8370)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/api/server.traceWrap(0xc4200e8370)\\n\\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:96 +0x507\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e8370)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/api/server.loggerWrap(0xc4200e8370)\\n\\t/go/src/github.com/fnproject/fn/api/server/gin_middlewares.go:208 +0x1ea\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4200e8370)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:108 +0x43\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Engine).handleHTTPRequest(0xc42027f7a0, 0xc4200e8370)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/gin.go:361 +0x586\\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Engine).ServeHTTP(0xc42027f7a0, 0x121f2e0, 0xc4203342d0, 0xc420153600)\\n\\t/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/gin.go:326 +0x153\\ngithub.com/fnproject/fn/vendor/go.opencensus.io/plugin/ochttp.(*Handler).ServeHTTP(0xc4201d3c40, 0x121f2e0, 0xc4203342d0, 0xc420153400)\\n\\t/go/src/github.com/fnproject/fn/vendor/go.opencensus.io/plugin/ochttp/server.go:82 +0x1c8\\nnet/http.serverHandler.ServeHTTP(0xc420405e10, 0x121dfa0, 0xc42043b420, 0xc420153400)\\n\\t/usr/local/go/src/net/http/server.go:2694 +0xbc\\nnet/http.(*conn).serve(0xc420224000, 0x121f8a0, 0xc4201d3240)\\n\\t/usr/local/go/src/net/http/server.go:1830 +0x651\\ncreated by net/http.(*Server).Serve\\n\\t/usr/local/go/src/net/http/server.go:2795 +0x27b\\n\"\r\n\r\n```\r\n\r\n```\r\nPOST /invoke/01CTP26YZPNG8G00GZJ0000006 HTTP/1.1\r\nHost: localhost:8080\r\nUser-Agent: Go-http-client/1.1\r\nContent-Length: 0\r\nContent-Type: text/plain\r\nAccept-Encoding: gzip\r\n\r\n\r\nHTTP/1.1 500 Internal Server Error\r\nContent-Length: 36\r\nContent-Type: application/json; charset=utf-8\r\nDate: Thu, 25 Oct 2018 16:52:00 GMT\r\n\r\n{\"message\":\"internal server error\"}\r\n\r\nError:\r\n\r\nFn: Error calling function: status 500\r\n```\r\n Vista demo was updated, all http-stream format funcs, once CLI tests will be fixed (those ones that @zootalures referring to) we can merge this. It breaks all java based FDKs so, err no  Unblocking but can you re-add FN_FORMAT for a bit to make java happy  Ok, that may work. Here is the ClI set I was testing against: \r\nhttps://github.com/fnproject/cli/pull/472\r\n > >  deletage\r\n>\r\n> the internet doesn't think this is a word. I'm curious now :)\r\n\r\nIt's medieval french - the state of some software having benefited from the removal of some of its code. \r\n\r\n\"Mon dieu, regarde le deletage de ce pull-request\"   I've been building an Fn application with functions that have to hold authentication info to connect to a central object store. I passed the login secrets to the Fn functions using \"fn config app APP {name_of_secret} {value_of_secret}\", and then retrieved them in the function from environment variables. This all worked great :-)\r\n\r\nHowever, while I was exploring the Fn-related API of the app I saw that the config variables are given in plain text to anyone who can connect to the Fn server, via http://{server_url}/v2/apps. Example output is;\r\n\r\n{\"items\":[{\"id\":\"XXXXXX\",\"name\":\"XXXXX\",\"config\":{\"SECRET\":\"XXXXXX\"},\"created_at\":\"2018-08-16T10:52:01.187Z\",\"updated_at\":\"2018-08-16T19:13:04.270Z\"} etc. etc. \r\n\r\nYou can also get the config data using the app's ID, e.g. via http://{server_url}/v2/apps/{APP_ID}\r\n\r\nIs this expected behaviour? It surprised me that the config data of a function would be so publicly visible, as this leaks useful information for bad actors. \r\n\r\nIf this is expected, then what is recommended way to store secrets in functions (e.g. passwords for object stores or databases)? I'd rather not embed them in the containers themselves as then I'd have to use a private container registry and worry about the containers leaking. Using \"fn config app\" works really well, as it is easy to change after deployment, thereby supporting easy automated password/key rotation.\r\n\r\n(this is also the case for the V1 API - I updated everything to V2 to see if it was already fixed, and have scoured docs and issues to see if this has been discussed before and whether I am handling secrets incorrectly) Thanks @rdallman - really useful reply. My user-authentication is built on top of OCI object store and the secret is the private key needed to read and write to that store. I agree that the best solution would be encrypting my config and then uploading the decryption key to the functions. Looking at ext-auth (an apologies in advance as my go is basic) it looks like the extension adds in support for holding a secret that is copied from an environment variable (SIMPLE_SECRET) which is copied into the function during \"fn deploy\". The presence of this secret is checked for in \"Setup\" (lines 39+40 in simple.go), but nothing is then done with it?\r\n\r\nThe \"Setup\" function then continues to initialise a database with rows to hold usernames and passwords (line 90, s.ds.GetDataBase()). How does the function authenticate with this database? Where is the secret held that allows the function calling GetDataBase() to prove that it has read/write access to this database?\r\n\r\n(and to follow up on this, where are the environment variables stored for a function? Are they stored with the config, stored inside the container, or is there another location in the Fn server that holds the variables and supplies them when the function is called?) Regarding using something like an S3-compatible store, worth saying that you still can create presigned URLs that you may feed to your function, therefore, there's no need in auth (unless your usecase is way more complex). Way more complex I'm afraid :-(\r\n\r\nFunctions can create new buckets, adjust permissions and provide an interface that sits over the object store as part of an \"access, authorization and accounting infrastructure\" for running HPC applications on demand as Fn functions. The presentation here gives an overview of what I am building... (https://drive.google.com/file/d/1VB6I-Eu04uszcTojPeOLpZGlsIEdK0yS/view). I have the identity and accounting service working so that I can log in from Jupyter notebooks and perform accounting for data uploads / simulation compute, but then noticed what I thought was secret wasn't...\r\n\r\nA presigned URL is a solution, but I then need something that can feed that URL to the function. As the presigned URL is not known by and must not be accessible to the user calling the function, then it would have to be secretly provided by another service, or the function would have to pull it from another service (which then brings me back to needing the function to possess a secret that lets it authenticate itself with that \"signed URL\" providing service).\r\n\r\nIn its simplest form, I have functions that modify the state of shared data. They need privileged access to that shared data so that they can modify its state. Thus they need a secret that only they know that provides them with that privileged access.  Currently, this is a little unclear and there is a problem with user\r\nfns returning error responses which we can not differentiate from our\r\nservice errors.\r\n\r\nThis changes breaks the status selection logic out and adds some tests that spell out\r\nhow we want this fiddly bit to work. The offering here is: user fn\r\nstatus returned, if set, but modify 5xx to 502. If no response code\r\nfrom user fn, use one the service has deemed appropriate. Default to\r\n200 if neither of them have commented.\r\n Seems good to me. @rdallman I think you should take a glance at this change, you to @zootalures.\r\n\r\nThis seems like the right way to go, but is one of those changes that modifies mental models. I think I\u2019d rather trigger status codes didn\u2019t propagate if the function was in error. I see this as nesting of \u201cwhat did the service say?\u201d takes precedence over \u201cwhat did the FDK say\u201d takes precedence over \u201cwhat did the user code say\u201d\r\n\r\nTo a certain extent I\u2019m also wondering if propagating any headers (possibly including partial ones that the function set when it was still on the happy path) is right .\r\n\r\ne.g.: \r\n```\r\nvoid function(HttpContext hctx){\r\n\r\n     hctx.setHeader(\"my-happy-header\",\"value\"); \r\n     hctx.setStatusCode(204); \r\n    // .... \r\n    throw new RuntimeException(\"crap, it broke\") \r\n   \r\n}\r\n```\r\n\r\nI think my expectation here is that a) the trigger looks like it failed to the user, b) I don't see 'my-happy-header')  - we could make this an FDK responsibility of course but maybe it's better for the trigger gateway to be strict?  FYI: #1337  #1337  has superseded these ideas.  <!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **fn** can be found at the following locations:\r\n\r\n- Slack - https://fnproject.slack.com #general channel\r\n- Post a question on StackOverflow, using the \u2018fn' tag: https://stackoverflow.com/questions/tagged/fn\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nSo, here's the thing. When a developer uses Trigger API to call a function he gets the following headers:\r\n```go\r\nmap[\r\n    Content-Type:[application/json] \r\n    Fn-Call-Id:[01CSHDGH16NG8G00GZJ0000013] \r\n    Fn-Deadline:[2018-10-11T11:17:45Z] \r\n    Fn-Http-H-Accept:[*/*] \r\n    Fn-Http-H-Content-Length:[17] \r\n    Fn_call_id:[01CSHDGH16NG8G00GZJ0000013] \r\n    Fn_deadline:[2018-10-11T11:17:45Z] \r\n    Accept-Encoding:[gzip] \r\n    Fn-Http-Request-Url:[http://localhost:8080/t/testapp/azure]\r\n    Fn-Http-Method:[POST] User-Agent:[Go-http-client/1.1] \r\n    Fn-Intent:[httprequest] Fn-Http-H-User-Agent:[curl/7.54.0]\r\n] \r\n```\r\n\r\nbut for Invoke API headers are:\r\n```go\r\nmap[\r\n    Content-Type:[application/json]\r\n    Fn-Call-Id:[01CSHEY1VZNG8G00GZJ0000020]\r\n    Fn_call_id:[01CSHEY1VZNG8G00GZJ0000020]\r\n    Accept:[*/*]\r\n    Accept-Encoding:[gzip]\r\n    User-Agent:[curl/7.54.0]\r\n    Fn-Deadline:[2018-10-11T11:42:34Z]\r\n    Fn_deadline:[2018-10-11T11:42:34Z]\r\n]\r\n```\r\nAs you may see, a number of headers is not consistent (not talking about format-specific headers, but in general). One of the key differences is the content length, in Invoke headers it doesn not exist for some reason. \r\n\r\n**Steps to reproduce the issue:**\r\n1. Deploy hello-world application with any of FDKs.\r\n2. Add a piece of code that logs incoming headers.\r\n3. See logs.\r\n\r\n**Describe the results you received:**\r\n\r\nWith an outgoing heades:\r\n```\r\n> POST /t/testapp/azure HTTP/1.1\r\n> Host: localhost:8080\r\n> User-Agent: curl/7.54.0\r\n> Accept: */*\r\n> Content-Type: application/json\r\n> Content-Length: 17\r\n```\r\n\r\nthe incoming headers are not consistent within the existing API methods.\r\n\r\n**Describe the results you expected:**\r\n\r\nWell, i expect to have them consistent, no matter if that is prefixed with `Fn-Http-H-` or not.\r\n\r\n**Output of `fn version` (CLI command):**\r\n\r\n```\r\nClient version is latest version: 0.5.15\r\nServer version:  0.3.591\r\n```\r\n Content-Length header must be there because basically I cannot proxy the request to another service without actually inspecting the size of the data and manually injecing that. Content length is optional and laregely unnecessary when you use the HTTP1.1 chunked encoding you won\u2019t get it a lot of the time anyway  Closing this as I don't believe it is a bug - \r\n\r\nIf you need to proxy requests you should use chunked encoding on the downstream system. If you need the content length then you need to buffer the input.  What's the point of having 2 times the call ID, i.e. `Fn-Call-Id`and `Fn_call_id`?\r\n\r\neg. \r\n```\r\nHTTP/1.1 200 OK\r\nConnection: keep-alive\r\nContent-Length: 2\r\nContent-Type: application/json\r\nDate: Tue, 16 Oct 2018 16:36:26 GMT\r\nFn-Call-Id: 01CSYVRKZDNG8G00GZJ000007R\r\nFn_call_id: 01CSYVRKZDNG8G00GZJ000007R\r\n```  <!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **fn** can be found at the following locations:\r\n\r\n- Slack - https://fnproject.slack.com #general channel\r\n- Post a question on StackOverflow, using the \u2018fn' tag: https://stackoverflow.com/questions/tagged/fn\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nHere's the idea: imagine that function needs certain *.so (or binary executable) file during its runtime.\r\nThe only place where a function can write the data is: `/tmp`.\r\nIn case of Go plugins, they have to be stored as a files somewhere be loaded through the its file path.\r\n\r\nIn my case i cannot load the `*.so` file from because tmpfs mounted with `noexec` by default.\r\nServer logs:\r\n```\r\nOct 08 20:36:29 linuxkit-025000000001 app_id=01CQR004HQNG8G00GZJ0000001,fn_id=01CS33AR73NG8G00GZJ00000:  2018/10/08 17:36:29 temp file /tmp/63edccae-9421-45d6-ac1c-4df4752de7dd-157150367.so created \r\nOct 08 20:36:30 linuxkit-025000000001 app_id=01CQR004HQNG8G00GZJ0000001,fn_id=01CS33AR73NG8G00GZJ00000:  2018/10/08 17:36:30 /tmp/63edccae-9421-45d6-ac1c-4df4752de7dd-157150367.so access rights: -rwxr-xr-x \r\nOct 08 20:36:30 linuxkit-025000000001 app_id=01CQR004HQNG8G00GZJ0000001,fn_id=01CS33AR73NG8G00GZJ00000:  2018/10/08 17:36:30 plugin.Open(\"/tmp/63edccae-9421-45d6-ac1c-4df4752de7dd-157150367.so\"): /tmp/63edccae-9421-45d6-ac1c-4df4752de7dd-157150367.so: failed to map segment from shared object \r\n```\r\n\r\n\r\n**Steps to reproduce the issue:**\r\n\r\nI wrote a function (https://github.com/denismakogon/awesome-fn/tree/master/go-plugin-func) that downloads pre-compiled Go plugin and attempts to invoke a method out of that. Function's code works fine (see [test script](https://github.com/denismakogon/awesome-fn/blob/master/go-plugin-func/test.sh)).\r\n\r\n1. Deploy a function\r\n2. Trigger a function: \r\n`curl -v -X POST http://localhost:8080/t/testapp/go-plugin-func-trigger -d @payload.json`\r\n3. See the result.\r\n\r\n**Describe the results you received:**\r\n```\r\n*   Trying ::1...\r\n* TCP_NODELAY set\r\n* Connected to localhost (::1) port 8080 (#0)\r\n> POST /t/testapp/go-plugin-func-trigger HTTP/1.1\r\n> Host: localhost:8080\r\n> User-Agent: curl/7.54.0\r\n> Accept: */*\r\n> Content-Length: 116\r\n> Content-Type: application/x-www-form-urlencoded\r\n> \r\n* upload completely sent off: 116 out of 116 bytes\r\n< HTTP/1.1 500 Internal Server Error\r\n< Content-Type: text/plain; charset=utf-8\r\n< Fn-Call-Id: 01CSACE64QNG8G00GZJ0000005\r\n< Date: Mon, 08 Oct 2018 17:43:48 GMT\r\n< Content-Length: 167\r\n< \r\n* Connection #0 to host localhost left intact\r\nplugin.Open(\"/tmp/76899499-bed2-4858-bb73-5fac85d1e98a-279465297.so\"): /tmp/76899499-bed2-4858-bb73-5fac85d1e98a-279465297.so: failed to map segment from shared objectDeniss-MBP-2:go-plugin-func \r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\nHas to be 200 OK with some dummy text.\r\n\r\n\r\n**Output of `fn version` (CLI command):**\r\n\r\n```\r\nClient version is latest version: 0.5.15\r\nServer version:  0.3.591\r\n```\r\n\r\n**Notes**\r\n\r\nIf i get it right, the fix itself is not complex, but [docker doesn't support yet](https://github.com/moby/moby/pull/36720) `exec` for tmpfs.\r\n\r\n The idea is to have a general-purpose function that is capable to run custom code that is defined at the runtime.\r\n\r\nAt the very beginning I started with a python prototype where as a developer I can create and call a function at the runtime by executing deserialized callable objects (in python there\u2019s a protocol called Pickle that does marshaling/unmarshaling no matter what kind of object that is, i.e., even if an object based on CPython).\r\n\r\nNow I decided to do the same thing but with Go, the only way that I am aware of is Go plugins. So, my idea was to let function download *.so file and call the particular entity that complies to the particular interface.\r\n\r\nSuch feature allows developers to create the general-purpose function that can run whatever the developer what\u2019s without actually creating/bumping/publishing a new container. Well, as a developer I don\u2019t  see a problem in our versioning, but in versioning UX as well as testing. While you do an application development there is no way to do function testing at the appropriate level especially when we\u2019re talking about chaining, so, every developer ends up cleaning his own docker registry too often because of numerous tags being populated. As a developer I\u2019d like to get GIT-like experience while developing an application, i.e., I don\u2019t want use a bunch of CLI flags, I want CLI only do a function build if code changes and I want make it happen by default. There are a lot of use cases where work is stored in the writable space, and that writable space needs to be marked executable, a quintessential example is https://github.com/jnr and most of these pieces won't exist during container creation but will be done during runtime Personally I see no reason actually mounting tmpfs with no `exec` option. And there\u2019s no technical reasons not making Fn do that, volume isolations is not a concern here.\r\n\r\nMaybe my use case looks weird, but it does exist. Imagine that a user wants to bring his own container as a function (with hot wrapper or just in the default manner) and that container runs a process that for some reason needs an `/tmp` mounted with `exec` option (or just needs to run some execs with a binary that is in /tmp).\r\n\r\nWith `noexec` we\u2019re basically saying you can\u2019t do that. An the obvious question is \u201cwhy?\u201d.\r\n\r\nWhat\u2019s the technical clarification for not mounting tmpfs with `exec` option?\r\n I hope Docker 19.03 release will support TMPFS options and we would be able to enable `exec` mode for tmpfs, as well as other options if necessary.  This change implements a mechanism to send an ack back to the caller as soon as the function starts the execution, more details are reported in #1266\r\n\r\n One of the best things we have with an async model is the timeout. In `acksync` I'm not seeing anything related to an execution time, except the placement timeout. So, my point is: ok `async` approach wasn't scalable enough, I get that, however, there has to be a way to extend an execution timeout up to an async timeout constraint (AFAIR 1 hour).\r\n\r\nMoreover, I don't think that sending whatever a process spits out to the `/dev/null` is a good way, I'm okay not having a chance to check call status, but as a developer, I can accept only `fire-and-forget-but-get-logs-in-syslog-at-least`. Is that something that's going to happen? @denismakogon yeah agree about timeouts but think we should come back to that in a different context/PR, when we look at async itself there are a lot of other considerations to take into account there  @zootalures i see, if `async` is still going to happen, that's fine. The only thing that bothers me with ths PR is an invocation method name, can it be `detached` instead of `acksync`? @denismakogon I like detached, you know how hard is naming stuff ;-) @JadeRedworth  @reclaro  - looks OK in principal - feels like the value of Fn-Invoke-Type should be hard-validated somewhere - and also it worries me that `async` could get in there and do something unexpected (the removal of older async was mostly implemented by hard coding the `type` field of calls, which this undoes)  @zootalures good point about the risk to get the old async sneaking in ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* CI (The email used in the commit is not linked to your GitHub account. As a result we cannot verify that you have signed the CLA. If you have signed already, please let us know in our [community Slack](https://fnproject.slack.com/join/shared_invite/MjIwNzc5MTE4ODg3LTE1MDE0NTUyNTktYThmYmRjZDUwOQ). Thanks!)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! ## CLA Bot\n\nAll committers have signed the CLA.  thanks... WW gifs are a hoot  Revert to older launch strategy where each request makes\r\nan individual decision on container launch as opposed to\r\nhot launcher nanny go-routine per slot queue.\r\n\r\nThe evictor is also improved with this PR, which simplifies\r\nthis decision logic and allows us to be more aggressive\r\nin launch decisions.\r\n\r\nThe new strategy is as follows:\r\n\r\n1) Each request checks slot queue first to acquire\r\n    a free slot.\r\n\r\n2) Main loop of checkLaunch() monitors two main sets of events\r\n    at a time, for example:\r\n\r\n    A) free slots + new container launch\r\n    B) free slots + resource wait\r\n    C) if resource wait times out based on HotPoll interval + wait for evictions\r\n\r\n    and it switches between these sets depending on\r\n    the state of the main loop. Resource tracker no longer\r\n    returns CapacityFull and it no longer has non-blocking mode.\r\n    \r\n3) In case of evictions, the request that caused the evictions waits\r\n    for the evictions to complete. During this wait, if another slot becomes\r\n    available, the request is allowed to grab it.\r\n\r\nNOTE: for cold, non-blocking mode is no longer supported.\r\n I'll take another look at this for a bit. I apologize for this super complex PR. Logically, we could potentially split evictor changes from this. Maybe as a subsequent PR on top of this. But I prefer not merging that to the old launcher. I'll spend another day on this and see how things go.  thanks... I wonder if we should just have `WithServer(*http.Server) Option` ? i've grown to hate this functional config thing, i imagine there are quite a few timeouts and things we need to set and this might get tedious. read/write timeout still need setting, too, for example I am wonder if we should document that this setting is available somewhere. \r\n I moved things around. There's a http.Server{} config for each service/listener. This sounds nice for admin/web listeners, but for gRPC service only Addr/TLSConfig are used from http.Server{} which is a bit hacky.  @skinowski I'm generally okay with this approach modulo a few nits.  At a higher level, if we want to enable people to drop daemons into containers, it's not clear whether we can expose an _actual_ syslog connection on their behalf.  In that scenario, I would have expected the application to have closed stdin, stdout, stderr along the lines of a `daemon(3)` syscall: https://www.freebsd.org/cgi/man.cgi?query=daemon&sektion=3&apropos=0&manpath=FreeBSD+11.2-RELEASE+and+Ports\r\n\r\nIn terms of stdout/stderr merging: it's probably not ideal, but a lot of other system utilities seem to default to this behavior on linux distros that use systemd.  It's standard/default setting is to merge both stdout and stderr and then spew that to journald: https://www.freedesktop.org/software/systemd/man/systemd.exec.html#StandardError= > perhaps it should handle supressing '\\n' from output.\r\n\r\nthis means just to aggregate lines until the fdk sees `\\n` before sending, right? this could be okay to ignore, even if it looks weird in papertrail, et al. we gotta keep fdk contract minimal (despite all efforts to the contrary), and users can learn to log lines. as long as it's not doing anything weird. \r\n\r\nthe stdout thing seems ok too, it's not that big of a deal and makes sense w/ socket io - as long as we still get stdout, and tests seem to pass. \r\n\r\nalso think we should remove the other syslog code and not feature flag this, it's in git we can find it.\r\n\r\nfor future context: the real reason we're doing this is because we're attenuating network permissions to fn's container, while the container running dockerd that fn talks to has the network permissions necessary to send to syslog from a user's container.   there are very few TODOs, but some. mostly, there are concrete suggestions for\r\nthem. to date, this plan exists in old docs in closed down issues that are now\r\nstale, so this is a new plan with a smaller delta that we can follow, with an\r\nattempt to approximate the actual work involved at the bottom.\r\n\r\nthis is trying to have the simplest possible cloud event format, without us\r\nmodifying the things into oblivion (only http trigger does this as proposed)\r\n\r\nit seems kinda reasonable if we are willing to commit, so maybe we should\r\nmostly talk about the commitment part, technically speaking there's not a lot\r\nto these things. i have little success in extracating these kinds of things\r\ninto an english document, so we'll see how this goes...\r\n adding streaming presents issues at a few levels, one being limits and the other being gluing the lb/runner/etc, the current lb_agent won't take well to streaming since we need to buffer for retries, it opens a big can of worms. we've tried to support streaming in the past, out of the box even, but ended up having to buffer for various reasons -- that was before grpc lb_agent even, which makes things slightly more complex. i'm not sure that going to cloud events precludes us from having something streamable, their http transport in unstructured mode is streamable, and if we switch to a port on the container we could in theory stream it all the way down and back out too. that being said, for e.g. invoke w/ debug we'd need a structured return, and we could support structured or unstructured for the http trigger endpoint maybe, it's almost like it'd be a 'cloudevent http trigger' endpoint for unstructured, where on invoke we could do similar just not an open ended http request like it is now -- invoke would immediately be a structured or unstructured cloud event (but idk about with `debug` mode added)  - Link to issue this resolves\r\n\r\n- What I did\r\nAdded a control loop to clean up images, as well as an LRU to keep track of them.\r\n\r\n- How I did it\r\n ~~Added an LRU, on eviction from the lru a message is passed on a channel to a goroutine that takes care of cleaning up the image.~~\r\n* Added a slice that keeps track of the images that the docker agent tells it about. On each image, there is a count of how often it has been used and when it was last used.  \r\n* Every 5 minutes a clean up worker asks the image cache for any evictable images in order of \"most evictable-ness. (this is defined as timeSinceLastUse/numberOfUses, and not locked).\r\n* If the deletion is a success the image is removed from the cache. \r\n* When a cookie is created for an execution the image is \"locked\" in the image cache until the cookie is cleaned up ~~**STILL PENDING HOW TO CLEAN THIS UP**~~\r\n * When an image is used for a container the numberOfUses is incremented.\r\n\r\n- How to verify it\r\nRun 100 functions with different 1GB images, if they all worked the evictor did it's job.\r\n\r\n- One line description for the changelog\r\nClean up after old functions when there is no more space.\r\n\r\n- One moving picture involving robots (not mandatory but encouraged)\r\n![robot](https://media.giphy.com/media/FHEjBpiqMwSuA/giphy.gif)\r\n ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [Eric Fode](https://github.com/ericfode)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! ## CLA Bot\n\nAll committers have signed the CLA. we do need something like this, thanks for digging into this. if I can be of use, the last time I've seen something along these lines get used there were 2 issues that I'm not sure are tackled here (and maybe they are, I'm just throwing this out there):\r\n\r\n1) listing images means that images that are based on other images will cause images that get used more frequently to get removed because the image they depend on is not getting used often and gets LRU'd (and transitively, the one that _does_ get used, as well). it may be possible to work around this, but iirc requires us to keep our own LRU list of the images rather than relying on docker's (stored and loaded on boot, too, perhaps) -- perhaps this has changed and images have some new useful fields in this dept (it's been ~2 years)\r\n2) force removal can cause issues when not serialized with any calls to create containers (using some kind of semaphore), causing container creation to fail. this may also have changed, and is relatively easy to test for, but was the reason we ended up opting to just rotate servers completely after a set number of hours instead of fiddling with the cache bits (a not-great answer that had other causes, too, it would certainly be nice to think we could run servers for prolonged periods, software should work like this) Chatted with @kmjohansen, he pointed out that I could prune at startup (to catch the case where someone had restarted their runner) and only add images to the LRU that are actually requested by the user. \r\n\r\nFor comments from @rdallman  \r\n1. Good catch \"list all\" was the wrong operation and we can get around it with the above strategy. \r\n2. Removed force remove, just add the image back to the LRU if there is an issue deleting it. \r\n\r\nNow there needs to be something to keep this from looping too much in the case the entire LRU is in use... Quick q (am in a field so can\u2019t review properly) but does this avoid deleting the pre-loaded image(s) used for status checks and netNs pre forking  @ericfode I talked with @skinowski who convinced me that I've given you bad advice about pruning at startup.  It has the potential to make start take a long time just from the prune operation itself, and it also has the side effect of potentially generating a pull storm for all containers that launch right after restart.\r\n\r\nIt might be better to just populate the LRU on boot by doing a list, and then only add from the images that are actually requested by customer code. Another part of the discussion that @skinowski and I had revolved around how to handle insertion and removal of items from the LRU, and what to do if we receive a request to execute a function while we're trying to delete its image.\r\n\r\nFrom work on previous systems, I've found it easier to only insert items into this type of cache when they're actually eligible for eviction.  So, in that sense, it may be worth deferring cache insertion until after we've evicted the hot functions using image.\r\n\r\nIt may also be beneficial to flag an item as being in the process of being deleted, so that if a new request arrives for this image, and we've already sent it down to the evictor, we can block (or fail?) the inbound request until the delete completes.  Similarly,  functions in the LRU that aren't yet being deleted can be removed from the list if a new request for them arrives.\r\n\r\nSince the delete process is fairly expensive, it may make sense to only trigger this periodically, and only re-try failed deletes on a subsequent invocation. What about using this https://docs.docker.com/engine/reference/commandline/system_prune/ >What about using this https://docs.docker.com/engine/reference/commandline/system_prune/\r\n\r\nIIUC, system prune is going to do more than you really want, since it may also remove networks and other objects that aren't currently in use. > What is api/datastore/sql/sqlite_test_dir ? I think it's committed by accident.\r\n\r\nYou were correct. It is now deleted.   replace, maybe, but remove? gonna close... under discussion & no context is provided here  sorry haven't got time to do this in detail -  I think this can go in as it stands \r\n\r\nOnly question that came to mind was that If every function always has an endpoint shouldn't  this be an attribute on the resource rather than an annotation?  yeah - for triggers it's optional and dependent on the trigger type - my argument is that for functions it's for everywhere. \r\n\r\nThat said the cost of adding a new field to fn is relatively high now so....  signing off with a PR per usual. this one works with invoke, minimally. tested with plaintext and json:\r\n\r\n```\r\n\u2717: curl -d '{\"eventID\":\"1234\",\"data\":\"yo\"}' -H \"Content-Type: application/cloudevents+json\" -v localhost:8080/invoke/01CMCSXPS9180043RZJ0000003                                                                                         \r\n* Uses proxy env variable no_proxy == 'localhost,127.0.0.0,127.0.0.1,127.0.1.1,local.home,github.com,10.0.2.2,*pool.ntp.org,0.0.0.0'\r\n*   Trying ::1...                                                      \r\n* TCP_NODELAY set                                                                                                                                                                                                                                                                  \r\n* Connected to localhost (::1) port 8080 (#0)                                                                                                                                                                                                                                 \r\n> POST /invoke/01CMCSXPS9180043RZJ0000003 HTTP/1.1                                                                                                                                                                                                                            \r\n> Host: localhost:8080                                                                                                                                                                                                                                                          \r\n> User-Agent: curl/7.60.0                                                                                                                                                                                                                                                \r\n> Accept: */*                                                              \r\n> Content-Type: application/cloudevents+json                              \r\n> Content-Length: 30                                                        \r\n>                                                                                         \r\n* upload completely sent off: 30 out of 30 bytes                                                     \r\n< HTTP/1.1 200 OK                                \r\n< Content-Length: 256                       \r\n< Fn_call_id: 01CMCTVB96180043RZJ0000005               \r\n< Xxx-Fxlb-Wait: 353.41607ms                       \r\n< Date: Wed, 08 Aug 2018 13:15:37 GMT          \r\n< Content-Type: text/plain; charset=utf-8                                        \r\n<                                                                                       \r\n{\"cloudEventsVersion\":\"\",\"eventID\":\"1234\",\"source\":\"\",\"eventType\":\"\",\"eventTypeVersion\":\"\",\"eventTime\":\"2018-08-08T13:15:37.481783016Z\",\"schemaURL\":\"\",\"contentType\":\"\",\"extensions\":{\"protocol\":{\"status_code\":200}},\"data\":\"{\\\"message\\\":\\\"Hello World\\\"}\\n\"}\r\n```\r\n\r\nwe need to add tests but I think this can close out the prior PRs maybe. we really need to write a doc on the API and add tests though... i'm still convinced we should flesh this out more than just rushing it along, but anyway, this POC works and is pretty simple.  my commits are out of order by time (my vm is always lagging :/ ) but the CI passes mostly this covers #1168 without adding all the additional event model/logic that we don't really need at this point, it just uses the protocol one  think i get the basic idea here, do the same thing as triggers api but without the trigger configuration bits. that line of reasoning is sensible i think for interfacing with the agent to get something working (i.e. not having to add FromEvent, where things get hairier), in the interest of looking forward is it a lot of work for us to restrict the domain of the http API to only accept cloud events? is the cloudevent library unworkable hence resurrecting the event logic from earlier https://github.com/fnproject/fn/pull/1165 ?\r\n\r\n(will fiddle with this today) i guess part of this exercise was to scope out exactly what that might look like exactly, we're just now trying to skip doing that to have something working is what it seems like.  > Why is the resource in models only have Memory?\r\n\r\ngood catch, yea we need to iron that out  i've started a library https://github.com/fnproject/cloudevent which has basic support for transforming an http.Request into a cloudevent by the spec's 0.1 standard. I'd like to use it, as well, for not only this but cli and fdk-go too -- we can modify to needs relatively easily. I believe that the copied over code from 1138 was also copied over from said library and tweaked slightly. \r\n\r\nwill take a further look today one thing i'm not sure about is whether we are going to have to update the lb_agent/pure_runner models to accommodate arbitrary cloud events (as #1138 does) -- eventually we likely want to move to #1138 style but for the intermediary state idk how much we can get away with. i'd be OK with merging something that works for a 'standard' agent before getting to that point too, it would unblock some work potentially and keep the deltas smaller.  opened https://github.com/fnproject/fn/pull/1167 to merge into here, if you will. additionally in the steps to write down somewhere, it seems a pretty sane/reasonable goal to get this working with json events first and then get binary working if it ends up making things easier (for example, it may mean we can punt on changing the Submit signature, I think...).\r\n\r\nit builds anyway in the server package now, but have not attempted to do much testing yet. I gotta make din din! chat tomorrow I made https://github.com/fnproject/cloudevent/pull/3 (PTAL) to fill in for the validate stuff going away, that could be useful, though all of those fields we don't really _need_ in order to run a function, it would be nice to have the cli send them in so users don't have to futz with them and then require them against the API in general.  Provide the ability to plugin custom code which should get (automatically) invoked just before a hot function terminates.\r\n\r\nOne of the use cases is to be able to close remote connections (e.g. database, API handles etc.) which should ideally not be killed after every invocation of the function in order to make use of hot functions. Rather than abandoning them (e.g. leaving it to the DB server to kill hanging connections after certain timeout) it would be ideal if the developer can provide the logic and hand-it-over to Fn to call it\r\n\r\nI am assuming this would be a FDK specific feature this sounds like a good thing to have, the interplay between the server and container may be challenging given the current protocol as there's multiple conditions where a container may be terminated (idle_timeout, eviction when resources are full, docker crashes, maybe more in future). \r\n\r\nin my mind, a user could theoretically hook this up as follows (go):\r\n\r\n```go\r\nfunc main() {\r\n    fdk.Handle(myHandler)\r\n    myExitHandler()\r\n}\r\n```\r\n\r\nthe above would require no additional interface for the FDK to implement, it's just simply a user-defined function they add to the call stack after the handle loop exits. \r\n\r\nevery FDK at the moment is structured this way and in theory we could do this if we handled OS signals inside of `fdk.Handle` and bailed without adding anything onto the byte protocol itself. the above would not work currently because we aren't handling signals and exiting `fdk.Handle` in the FDK, we're terminating the entire container via docker (i.e. the fdk/code doesn't handle the shutdown). it would also be possible to add an additional protocol method onto our FDK contract to bail on `fdk.Handle`, or maybe something else, the OS signal thing seems a lot cleaner and potentially easier to hook up server side. it would be possible to add an additional method onto the FDK to make this explicit, I just fear bloat there and would like the FDK to be as minimal as possible, if anything, for ease of maintenance but also to make it look easy to use. wdyt of this proposal @abhirockzz ?\r\n\r\n I'm against having this as a design principle : \r\n\r\nRight now we make no promises about what happens to your function after a call is completed - including offering any sort of graceful shutdown - this simplifies the lifecycle and allows Fn to more effectively use resources on a shared resource pool.\r\n\r\nIf we added this hook we'd either have to make best efforts to handle it (making function shutdown more complex and reducing our ability to quickly free resources for new functions) - or sometimes not honour it (which is confusing for users as they were expecting it to work) .  In the case where somebody is billing for a function that also becomes more complex here. \r\n\r\nWhen we shut down your function I think  fn /docker should cause all existing TCP connections to be reset  - Most DB servers can be configured to correctly honour that and release resources. \r\n that's true, and it complicates the freeze significantly (thaw, run the thing), along with billing.  I think my mental model here is: Functions are \"conceptually stateless\" things that should also engage with similarly conceptually stateless services - \r\n\r\nIn practice hot functions may keep some transient state between calls and this is beneficial for performance (HTTP connections, JDBC connections) , but the contract for that state is that it should not materially impact subsequent interactions (can't tell the difference functionally between the first and second interaction) and that the state should be discardable without action. \r\n\r\nDoing connection-state based things like JDBC connections is possible so long as it works but I think the onus is on the user to make sure that the downstream services are tolerant to disconnects and discards, not fn. \r\n I would like to understand what is our recommendation to folks that want to use functions to talk to (less scalable) traditional backends like databases, message queues. How should folks deal with connections? What is the best place to open/close them? > I wonder, if @abhirockzz is actually referring to idle connections on live (but idle) hot containers. In other words, hot containers that haven't exceeded their idle timeout, but not handling a request and holding on to such connections.\r\n\r\n@skinowski no that's not the case. The use case is related to hot containers and the point of impact is just before they terminate.\r\n\r\n> When we shut down your function I think fn /docker should cause all existing TCP connections to be reset - Most DB servers can be configured to correctly honour that and release resources.\r\n\r\n@zootalures The problem is generic in nature - DB was just an example. It is not about stateful or stateless either (although the DB specific example is a stateful one). \r\n\r\n`System.getRuntime().addShutdownHook()` does not work - I understand why since @rdallman confirmed \r\n\r\n> in the FDK, we're terminating the entire container via docker (i.e. the fdk/code doesn't handle the shutdown)\r\n\r\nThere should be some way for the user to plugin this logic before the container exits - at the bare minimum, it should handle SIGTERM. \r\n\r\nI see that there is a [listener concept](https://github.com/fnproject/fdk-java/blob/854cfb49b3e47f67873756b62d941e20a648b508/api/src/main/java/com/fnproject/fn/api/InvocationListener.java) in the Java FDK (per invocation based)  Listeners allow you to inject code around the event lifecycle  but not the container lifecycle.  There should be some way to gracefully shutdown the fn-container after Its life cycle is over.\r\nSome of the scenarios \r\n1. cleaning up open DB-connections\r\n2. storing fn states to some persistent storage, so that once fn is invoked again, It can read from that persistent store\r\n\r\n  I\u2019m closing this as won\u2019t fix for now, per discussion above there isn\u2019t a way we can guarantee that these hooks will happen so if you rely on  them for things like DB disconnections would cause problems when that didn\u2019t happen   a bit pedantic, any chance of doing this without the added dependency (aside from more to manage, it's more cognitive burden for every dev that has to futz with these tests to learn a 3rd party API and this one isn't widely known amongst gophers)? \r\n\r\n`reflect` isn't my fav thing in the world but it is in stdlib, this is just for testing, and have used https://golang.org/pkg/reflect/#DeepEqual in the past to test stuff like this and it works OK.  I think a few people have raised using PBT for contracts in the past, there are a few places I think it could help out, (e.g data store and tests maybe where you have a couple of dimensions of variation on a couple of properties it can simplify/strengthen valid extent testing) \r\n\r\nI think I\u2019m pro if we can reuse the generators there against if not. \r\n\r\nCan you double check that the licensing of this and any subdeps are sound  gopter is under MIT and there are no additional transitive dependencies.\r\n\r\nOne thing though, is we should pin the gopter version in Gopkg.toml I guess to avoid the version changing and causing unexpected failures in tests. @rdallman @zootalures \r\nSeems like you two disagreed regarding the use of gopter.\r\n\r\nI think that we can re-use the generators in other test areas as long as we check that the relevant parts are exported. i have PTSD from bad experiences maintaining non-standard go tests in the past over a long period of time (https://github.com/smartystreets/goconvey, to be exact, so not this), it was not easy to ramp up new people and they would just go write their own new test suite they could understand -- a problem we have, already, as well. it would be great to use `testing/quick` if possible since it's stdlib, though I'll admit it's somewhat 'obscure' for most go devs in any case -- if gopter has additional features we're using I can understand (are we? motivation? alternatives?) -- that's just my preference, I won't block this and agree about the general usefulness of PBT, also thanks for adding it.  Thanks for doing this. :+1:   I'm setting up CORS for an Fn function, however from reading the [docs](https://github.com/fnproject/fn/blob/1258baeb7f2760727d504b0448f9b507b1bdbc07/docs/operating/options.md) it appears I need to set the environment variable `FN_API_CORS_ORIGINS` to set the `Acccess-Control-Allow-Origin` header.\r\n\r\nSince I'm using docker in docker, I'm struggling with where I should specify the variable. The docs say to add variables using `docker run -e VAR_NAME=VALUE` however I deploy the functions for Fn to manage it, I don't need to ever use `docker run`.\r\n\r\nI've tried to add the following to my Dockerfile with no success even though the variable is available to when I log it in my function:\r\n\r\n`ENV FN_API_CORS_ORIGINS=*`\r\n\r\nSo where would I specify the variable? I managed to find a workaround adding the following to my `func.yaml` file:\r\n\r\n```\r\nheaders:\r\n  Access-Control-Allow-Origin:\r\n  - https://localhost:3000\r\n```\r\n\r\nHowever it isn't the best solution to the issue.  Thanks - really appreciate it  - I think i bit of a bit more than my time allowed here \r\n I know this is WIP, but glanced through it and there are too many seemingly not 1-1 related changes stacked: renaming agent config, removing max-req-size, adding events & documents, reworking IO in various parts, modifying error.go, etc. I wonder if we can merge the IO changes in advance also. By accepting and incurring an extra buffer/copy, we can perhaps merge the IO changes (pure-runner, runner-client, etc.) and get them tested/merged before invoke/events changes make it. as promised, have been futzing with the pure runner to get system tests to pass. this patch does a lot of changes there that I guess I was trying to avoid, I haven't quite made up my mind if we can get away with it or not i'm still trying to get the system tests to pass. i'll try to press on tomorrow I rebased this so we can see the remaining diff...\r\nobviously it's still huge and we may or may not go with it as is @zootalures @riconnon @mantree let's close this? it's here and we want to pull some of this over in some capacity but since we have a slightly different first pass in now... ? feel free to re-open  > an upvote indicates you would like to write to anywhere in the container filesystem, as one might expect from a 'bring your own container' functions model.\r\n\r\ntalk about a push poll  I think that the ability to wire an *arbitrary* container to run as a fn-function is a strong value proposition of the fn project. Essentially in this way you can web-enable an encapslulated legacy system and use it through HTTP without touching it. So I am upvoting. Bumped into this yesterday prepping a demo*. It wasn't a massive deal (although the absence of a writable /run caught me out) - I could work around it; I can see the upsides of the change, but there are certainly cases where this'll cause surprise.\r\n\r\nDare I suggest this defaults to on but be tunable to \"off\"? (This introduces more moving parts, but in different circumstances I think I'd often appreciate having my function's fs inviolable.)\r\n\r\n* the function container launched an internal service process that needed to read configuration from the fs - I was injecting that config via the app, and expected to be able to write it out. This doesn't talk about the benefits of protecting the root file system -  I see this change as a massive benefit to users in terms of security, stability and performance . \r\n\r\nIt's good practice from a security perspective - at no point are any of the binaries or source files of your function writable directly, this protects against a large class of security vulnerabilities and is best practice in docker. \r\n\r\nIt improves the stability of systems running Fn  - Before this change a single function could DOS the whole host it runs on by filling up the overlay top-layer file system.  Whilst there are some ways of preventing functions from consuming too much space without removing write, (e.g. provisioning the top-layer in its own loopback FS,, using XFS Fs quotas) - both of these come with significant downsides either in performance and stability or they place additional restrictions on the type of machine that Fn runs  (moving away from \"it runs on any docker machine\" as it does now). \r\n\r\nPerformance is considerably easier to control and the impacts  of one container on another are easier to manage using this approach than sticking with Overlay - in Overlay - writing one byte to a 1GB file on the image causes 1GB of copy up , which in the case where we've had to up the top-layer into its own file system to prevent a single container from consuming a shared overlay FS, would be a cross-filesystem operation. \r\n\r\nI am absolutely in favour of \"the simplest experience possible\" and i totally agree that this is not clearly documented  - but I also think we are doing the best for our users here.  - People want functions that work all the time as well as a simple experience.  The option to disable it is documented here:\r\nhttps://github.com/fnproject/fn/blob/master/docs/operating/options.md Just found this issue as a naive Fn user. Everything was working when I was using \"fn run\" locally and writing to the root filesystem, and then it all broke when I \"fn deploy\" deployed and called my function via http://path/to/function. The workaround is easy (write to /tmp). It is the fact that the behaviour is different when running via \"fn run\" and then running the function after \"fn deploy\". \r\n\r\nI agree that most of the filesystem should be read-only. You need to be more upfront about this restriction, more consistent between functions run in different environment (\"fn run\" versus \"fn deploy\") and have more documentation steering users to develop functions that write to \"/tmp\" (or designate another area that should be read/write).  The documentation on how to fix this / disable it doesnt exist anymore? \r\n\r\nCan anyone explain the fix to disable this?   `FN_DISABLE_READONLY_ROOTFS=true` when configuring `fn`  +1\r\n\r\nNote that Google Functions may bill for both GB and GHz but the user only selects GBs.  The relationship between GBs and GHz is fixed.  IMHO this is simply pricing obfuscation.  My thinking here is that CPU ought to  somewhat configurabile/pluggable  - either at the LB ingress point (i.e. one policy for all functions) or at the agent itself (policy based on specific host configuration - you get what we got, based on the host, maximise usage of specific hosts) \r\n\r\n/tmp (we keep saying tmpfs but actualy I don't see a necessity that this is actually a memory-backed tmpfs, could be e.g. a loopback on disk)  probably ought to be uniform  (even if it's proportional to RAM ) across the system but also configurable as it represents a much harder constraint on the function implementation rather  than CPU  - when I target a particular platform I want to know how much /tmp I'm going to get. \r\n\r\n\r\n  Here is the screen capture of running the python tutorial. fn --version works, and the Ubuntu guest in VirtualBox is able to browse to http://deb.debian.org, but it redirects the url to https.\r\n\r\n-----\r\nscott@scott-VirtualBox:~$ cd pythonfn\r\nscott@scott-VirtualBox:~/pythonfn$ fn --verbose run\r\nBuilding image pythonfn:0.0.1 \r\nSending build context to Docker daemon  7.168kB\r\nStep 1/8 : FROM python:3.6-slim-stretch\r\n ---> b31cb11e68a1\r\nStep 2/8 : WORKDIR /function\r\n ---> Using cache\r\n ---> bcc9d59a78c3\r\nStep 3/8 : RUN apt-get update && apt-get install --no-install-recommends -qy build-essential gcc\r\n ---> Running in 346c6a4b01a3\r\nErr:1 http://deb.debian.org/debian stretch InRelease\r\n  Temporary failure resolving 'deb.debian.org'\r\nErr:2 http://security.debian.org/debian-security stretch/updates InRelease\r\n  Temporary failure resolving 'security.debian.org'\r\nErr:3 http://deb.debian.org/debian stretch-updates InRelease\r\n  Temporary failure resolving 'deb.debian.org'\r\nReading package lists...\r\nW: Failed to fetch http://deb.debian.org/debian/dists/stretch/InRelease  Temporary failure resolving 'deb.debian.org'\r\nW: Failed to fetch http://security.debian.org/debian-security/dists/stretch/updates/InRelease  Temporary failure resolving 'security.debian.org'\r\nW: Failed to fetch http://deb.debian.org/debian/dists/stretch-updates/InRelease  Temporary failure resolving 'deb.debian.org'\r\nW: Some index files failed to download. They have been ignored, or old ones used instead.\r\nReading package lists...\r\nBuilding dependency tree...\r\nReading state information...\r\nE: Unable to locate package build-essential\r\nE: Unable to locate package gcc\r\nThe command '/bin/sh -c apt-get update && apt-get install --no-install-recommends -qy build-essential gcc' returned a non-zero code: 100 Hi and welcome. First of all, it\u2019s not Ubuntu, it\u2019s Debian. Despite that,\nisn\u2019t it all about temporary problems apt repo problems?\n\nAsking this, because I can\u2019t reproduce given problem within EU region.\n\nOn Thu, Jun 28, 2018 at 20:19 Scott Zimmerman <notifications@github.com>\nwrote:\n\n> Here is the screen capture of running the python tutorial. fn --version\n> works, and the Ubuntu guest in VirtualBox is able to browse to\n> http://deb.debian.org, but it redirects the url to https.\n> ------------------------------\n>\n> scott@scott-VirtualBox:$ cd pythonfn\n> scott@scott-VirtualBox:/pythonfn$ fn --verbose run\n> Building image pythonfn:0.0.1\n> Sending build context to Docker daemon 7.168kB\n> Step 1/8 : FROM python:3.6-slim-stretch\n> ---> b31cb11e68a1\n> Step 2/8 : WORKDIR /function\n> ---> Using cache\n> ---> bcc9d59a78c3\n> Step 3/8 : RUN apt-get update && apt-get install --no-install-recommends\n> -qy build-essential gcc\n> ---> Running in 346c6a4b01a3\n> Err:1 http://deb.debian.org/debian stretch InRelease\n> Temporary failure resolving 'deb.debian.org'\n> Err:2 http://security.debian.org/debian-security stretch/updates InRelease\n> Temporary failure resolving 'security.debian.org'\n> Err:3 http://deb.debian.org/debian stretch-updates InRelease\n> Temporary failure resolving 'deb.debian.org'\n> Reading package lists...\n> W: Failed to fetch http://deb.debian.org/debian/dists/stretch/InRelease\n> Temporary failure resolving 'deb.debian.org'\n> W: Failed to fetch\n> http://security.debian.org/debian-security/dists/stretch/updates/InRelease\n> Temporary failure resolving 'security.debian.org'\n> W: Failed to fetch\n> http://deb.debian.org/debian/dists/stretch-updates/InRelease Temporary\n> failure resolving 'deb.debian.org'\n> W: Some index files failed to download. They have been ignored, or old\n> ones used instead.\n> Reading package lists...\n> Building dependency tree...\n> Reading state information...\n> E: Unable to locate package build-essential\n> E: Unable to locate package gcc\n> The command '/bin/sh -c apt-get update && apt-get install\n> --no-install-recommends -qy build-essential gcc' returned a non-zero code:\n> 100\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/fnproject/fn/issues/1100>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AC5L6w-fU0CswNd2XFKbh-tO4O8Nt2oyks5uBR4hgaJpZM4U72lQ>\n> .\n>\n I meant my guest os is Ubuntu where I'm running fn. I had the same error yesterday, is there a way to know what is causing the temporary outage? Is there a way I can point the demo to use the EU repo?\r\nAfter installing fn, what components is the demo trying to download?\r\nThanks How to debug this? You may try trace route to apt repos from inside docker\ncontainer manually.\n\nHowever, you may try assigning custom docker image in func.yml\n(build_image: ....) that does have all necessary packages (gcc, etc.)\ninstalled.\n\nOn Thu, Jun 28, 2018 at 21:24 Scott Zimmerman <notifications@github.com>\nwrote:\n\n> I meant my guest os is Ubuntu where I'm running fn. I had the same error\n> yesterday, is there a way to know what is causing the temporary outage? Is\n> there a way I can point the demo to use the EU repo?\n> After installing fn, what components is the demo trying to download?\n> Thanks\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/fnproject/fn/issues/1100#issuecomment-401145576>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AC5L6_r9M71qMSvzKEJjh5xm_sdvnkdhks5uBS1tgaJpZM4U72lQ>\n> .\n>\n It seems off that we\u2019re doing an apt-get install during fn build here, I think the base requirements should be bundled into the respective containers we provide   This is a small tweak to the placer latency stats. If we have a cluster of values\r\naround the 1-2s mark, then having a single relatively broad bucket that captures\r\nthe (1s, 10s] range will obscure that. In particular, typical Prometheus quartile\r\nestimates may be distorted by this bucket size.\r\n\r\nWe should probably do something better here - either let the end-user inject their distributions, or perhaps generate a log-linear spread across likely values with far more intervals. Agreed; advice from statisticians wrt bucket counts versus from the prom guys is in conflict. All we can tell from quantiles is \"the nth percentile lies in this bucket\", though. We probably need a better scheme to let us tune these across the board.  I'm not convinced that encoding this in environment variables is the best way to express this information.  I'd like to avoid breaking applications if we decide to support volume attachments or more than a single fixed writable location.  What's the contract for environment variables generally?  Also, how were you planning to express a /tmp with no writable space, and a /tmp with unlimited space?  Fundamentally, it's not actually unlimited so any well formed application is going to have to look at the available space anyway. My major concerns here are two-fold.  The first is the vast proliferation of environment variables.  It seems like it might be easier to encode configuration information into a runtime neutral format that any FDK can parse and return to the application.  The second is the set of issues around providing static definitions for resources that are dynamically available.  If, for example, we provided an interface that allowed the caller to get both the max and available transient storage in a single call, that would pacify me.  The concern here is that any caller that depends upon the environment variable when the availability of the resource is dynamic is broken by definition. @kmjohansen These are actually properly/formally formatted in json/cloud-events protocol as function-config. (They only have to be env variables in cold-functions, which has no structured protocol. Because of this, I keep calling these env variables and I've accidentally caused some confusion.) FDKs actually parse these and offer them as config data.\r\n\r\nI also agree with dynamic nature of the resource. But these are to be treated as \"function configuration\" not as a way to dynamically determine how much memory or /tmp space a function has at a given time. In other words, these tell the function which \"shape\" it is currently running on. We expose FN_CPU, FN_MEMORY along with configuration set in that route, which is also merged with the application configuration. In other words, we communicate almost all configuration params in a route to the function:\r\n\r\nhttps://github.com/fnproject/fn/blob/master/api/agent/call.go#L142 Based on ongoing discussion:\r\n\r\nhttps://github.com/fnproject/fn/issues/1106\r\n\r\nwe might eventually hide these: cpu/tmpsize from users. But in case we don't, I'd like to keep the triplet: cpu/mem/tmpfs consistent & merged in & exposed.  What I did:\r\n\r\n### multiple reasons to remove the api tests:\r\n\r\n* awkward dependency with fn_go meant generating bindings on a branched fn to\r\nvendor those to test new stuff. this is at a minimum not at all intuitive,\r\nworth it, nor a fun way to spend the finite amount of time we have to live.\r\n* api tests only tested a subset of functionality that the server/ api tests\r\nalready test, and we risk having tests where one tests some thing and the\r\nother doesn't. let's not. we have too many test suites as it is, and these\r\npretty much only test that we updated the fn_go bindings, which is actually a\r\nhassle as noted above and the cli will pretty quickly figure out anyway.\r\n* fn_go relies on openapi, which relies on mgo, which is deprecated and we'd\r\nlike to remove as a dependency. openapi is a _huge_ dep built in a NIH\r\nfashion, that cannot simply remove the mgo dep as users may be using it.\r\nwe've now stolen their date time and otherwise killed usage of it in fn core,\r\nfor fn_go it still exists but that's less of a problem.\r\n\r\n### created common.DateTime\r\n\r\nsame thing as strfmt.DateTime but sans mgo, and sans json. json uses TextMarshaler, which the strfmt.DateTime implements as well and is more efficient than their json marshaler. strfmt is a good case of NIH gone wrong, keeping this as ammo. this gets rid of our openapi dep.\r\n\r\n### update the deps\r\n\r\nremovals:\r\n\r\n* easyjson\r\n* mgo\r\n* go-openapi\r\n* mapstructure\r\n* fn_go\r\n* purell\r\n* go-validator\r\n\r\nalso, had to lock docker. we shouldn't use docker on master anyway, they\r\nstrongly advise against that. had no luck with latest version rev, so i locked\r\nit to what we were using before. until next time.\r\n\r\nthe rest is just playing dep roulette, those end up removing a ton tho\r\n\r\n i cross checked, in varying capacities everything is covered i believe. summary: \r\n\r\n* much of it is app/route POST/PUT/GET testing alone and 200/404 cases - better coverage in server/\r\n* call/log api testing (runner_test.go has a ton of coverage)\r\n* hot json testing (but no other formats - well covered also, and every format)\r\n* annotations have similar behavioral tests in annotations_test.go, simply not through api. app api has some coverage for setting them. thanks Thanks, looks good - We still have a gap in verifying that the server strongly complies with both its swagger spec and general API contract behaviour but I think this wasn't the right hammer for it .   this will very quickly get out of hand if we allow it, i realize we don't have principles written down anywhere but to date one of them has been that binaries 'just work' without having to do any configuration. currently a user must set FN_MAX_REQUEST_SIZE, FN_MAX_RESPONSE_SIZE -- neither of these should be required to run. \r\n\r\ntest case:\r\n\r\n```\r\ncd tests/fn-system-tests/\r\ngo test -v\r\n```\r\n\r\nthis breaks with: \r\n\r\n```\r\n error=\"lb-agent requires MaxRequestSize limit\"\r\n```\r\n\r\nthis means you have to run a script since `go test` won't 'just work' -- this isn't great for dev experience, and parsing through our Makefile isn't very fun and shouldn't be necessary (`go test` should just work in whatever directory you're in that has them, we can add additional configuration to e.g. run tests on various backends but they should all work in their respective dirs). \r\n\r\nthis started here: https://github.com/fnproject/fn/pull/998 >  Perhaps we can remove them, but even without them, you'd still need to set FN_DB_URL, FN_API_URL.\r\n\r\ndb defaults to sqlite, api url can have our standard 8080 default that sure, may not work, but might work on a local system just fine (agree about docs). this is just a slippery slope to be on, better to remedy before there's 25 required env vars  https://github.com/fnproject/fn/pull/1058/files#r194913723\r\n\r\nmaybe i missed some context, but in general think this is the right thing to do  Listener extensions implementing the _CallListener_ interface have access to the _models.Call_ object but not the original request. This is problematic for listeners that need to consume the request body as part of their processing. We already expose URL and Headers in _models.Call_, so exposing the body would provide the missing access. think we're past this? re-open if wanted yeah, no longer needed, thanks.  It is very useful to associate a request ID to each incoming request,\r\nthis change allows to provide a function to do that via Server Option.\r\nThe change comes with a default function which will inspect the incoming\r\nrequest to see if there is a header with a request ID, if it's there it\r\nuses that value as request ID if it is not there it will generate a new\r\nrequest ID. The request ID is put in the request context along with a\r\ncommon logger which always logs the request-id this seems like the right idea to me. needs to add the same middleware component to the lb, am not sure where that is at the moment. overall LGTM, some minor janitorial comments. thanks for adding this here :) @treeder and @skinowski thank you both for the great reviews. With reference to @skinowski final comment I think we can change the signature for the RIDGenerator function which could accept a HTTP.Request as param instead of a string, doing that we delegate to the RIDProvider decide if the RID will be looked up in the headers, somewhere else or just generate a new ID from scratch. What do you think?  not sure that this will fall out as expected with the 'default' format specifically, the main issue being that when a currently 'default' image starts it can exit before the `runHot` thread would have a chance to receive a slot for it and attach to its pipes (if it ignores `stdin`) - meaning the call doesn't have any output when the container did have output - currently default is the way it is due to this (poorly documented, sorry). i'm not sure that trying to figure out such a race is worth it. I know there have been a number of discussions around 'how do we get default format behavior if default format isn't baked into fn', though nothing is turning up there are a couple threads. (sorry this reply sucks, I will elaborate more tomorrow if I can).\r\n\r\nthe other discussion i saw the decision log around the knobs for a route specifically, haven't had time to digest this either sorry. i'm pretty firmly in the 'minimal number of knobs' category myself, but i think me and my flimsy backbone have already been defeated to a certain degree (all is not lost?) - a story around how do we have the knobs without the user seeing them seems like a productive discussion worth engaging in, everybody wins (that is my main concern with having them). I'm generally in favor of instituting a max-requests policy for containers.  Other security sensitive software enforces a finite lifetime on their processes to mitigate bugs, leaks, and other issues.  At least at a high-level, I think this idea makes sense.\r\n\r\nFrom a customer standpoint, however, it's going to be intrusive to have every Nth request generate a cold-container start, at least until we're able to optimize our cold start times.\r\n\r\nI'm not a huge fan of having lots of knobs either.  My preference would be to have the software auto-tune, or choose sane defaults.  However, there are cases where we can expect to have values that need to be overridden on a per-customer basis.  In that case, I'd rather we make that easy to observe but I'm flexible about the exact mechanism.  For this particular question, either agent or route configuration seems most sensible.  The argument in favor of agent is that as a security feature we won't be able to have hostile software change the parameter for us in the message payload.  The argument in favor of a per-route option presumes that it would be more important for us to modify this for some functions, in case the customer is severely impacted by our default.\r\n\r\nAs far as cold containers go, I suspect that it's really only useful to us internally as a testing tool to keep the `max-requests=1` behavior. > In busy deployments, max_requests can be a valuable workaround\r\nfor resource leaks in problematic routes.\r\n\r\nIndeed, however, there is at least one use cases when a function should be aware of how many times it can be called - \"self-called\" or \"self-triggered\" function, the idea here that the function can reschedule itself certain number of times before it dies (a function calls itself if requirement match after certain time passed).\r\n\r\nHere's the use case, trigger a function only when the bucket has the particular amount of objects. So, the function queries the store, if the requirement met - end or do whatever is necessary, if not - sleep and call itself one more time.\r\n\r\nSo, the feature you'd like to introduce should not actually affect the use case I've described, because it is still valid. However, the max number of requests could be used by a function to limit the number of times it can reschedule itself.\r\n\r\n i believe this was discussed somewhere, is there a reason to prefer a count of executions to cap container lifetime vs. a time based solution? for the 1 case, max executions makes sense, but for something like the 100 case, max executions seems like it could lead to the container being around for anywhere between a few seconds to hours (say, the function is called with 30 minutes between invocations and idle timeout is higher than that value). if we end up with a max number of executions settings, and a 'max active duration' to cap the lifetime of a container based on time, we would have 2 knobs to do very similar things and it gets hard to reason about if both are set, etc. may be worth discussing that before adding one or the other (or maybe not) I'm not sure that it's an either or situation.  I think having a time based expiration policy makes sense.  I consider the request-count based expiration policy to be complimentary.  It works best in a situation where an attacker needs multiple tries in order to guess the layout of memory, leak something in the right place to overwrite later, or just generally exhaust resources.  You're absolutely correct that this has the potential to impact busy customers, and it may be something that we want to disable or tune up.  I consider it to be good security policy, but we can argue about whether it makes sense to be a mandatory setting -- I certainly take your point about it exacerbating the impact of container start time.  This is potentially open-ended, but: there's scope in the \"Status\" return message for a runner to explicitly call out that it's in trouble. In particular, if the docker subsystem is having trouble the runner should definitely let the LB (or any other polling service) know that it's in difficulties.\r\n\r\nThere's space for this - for instance, the Status() call can explicitly return an error rather than a status. However, we require some detection in the runner for these kinds of conditions.\r\n\r\n(Alternatively, the runner could just panic if its docker driver - or any other pertinent subsystem - gets into trouble; this'll show up as a grpc error since it'll stop talking!) Was discussing something similar with @skinowski yesterday.  We presently don't have any mechanism to recover container state if dockerd fails, so if we lose our docker connection or the ability to talk to the daemon either a panic or failure report seems appropriate.\r\n\r\nThere may be other deployment specific components that need to surface status to the LB about whether the host is healthy.  I don't have any brilliant proposals for this beyond a host-status type of plugin that can return Status information to the LB. Would this be the appropriate place to report information like \"running low on memory\" and non-fatal conditions? Is there a place to report metrics from the runner back to the load-balancer right now? @skinowski Fixed this so I'm closing it out.  If we run into specific health items that we'd like to add to the status, we can file new issues to pull them in.  same question as in #1030 -- long term viability / desire of this as a feature was left murky We're going to remove user configuration this  and CPU configuration from the APIs in the trigger change -  as discussed previously it's unlikely that honoring these by guarantee (without adding substantial complexity to scheduling) will work in a scaled up system .  For both we'll set these by configuration in the server as a function of memory initially .  Sounds good. This PR was a consistency change to keep route configuration: cpu/mem/tmpfssize together. Since tmpfssize was merged in already, it should be in swagger. When we remove it, we can remove it along with cpu, etc.  Does it make sense to still keep track of these types of responses? Maybe keep a counter and dump it once a minute? yeah a metric would be best!  this feels like something leaking from the service into OSS and if I recall from internal briefings long term tmpfs isn't something we're planning to rely on. `disk` seems like a knob we want to expose for users to turn on each func, which perhaps is tmpfs at some point and a real disk at other times, but for compat reasons and for simplicity reasons we should probably try to hash out what we really want to support here as breaking things like env vars is challenging.  thanks for digging into this.\r\n\r\nto fix the master builds failing all we'd need to do is comment out the `deploy:` section of the CI config, right? this would get us a green check mark, I believe? I'm hesitant to gut / change a lot of the auto deploy process expecting to do it manually, would be nice to keep it the same but try to automate it in another way. At least, it's not clear this is the intent of this patch, but maybe so?\r\n\r\nmaster is the only protected branch we have, as far as I know. I believe we have a number of alternatives to maintain the automated release process albeit none seem to be as convenient as what we have. the easiest solution I can think of in my jet lagged state, is for our deploy CI section to create a 'release' branch automatically and bump the version and push it there (at which point, we need to figure out how to automate getting it into the tip of master, but at least the release process of docker images, etc. is happening and has the same code as master). it would be relatively easy to post PRs of release branch into master, there may be other/better ways and we may be able to securely automate that to keep the same bump version for every change that lands behavior - open to ideas around that or automating this in general.  I am enjoying working with Fn, especially using asynchronous functions. An issue is that there is no easy way to remove data created from old function calls. Currently I have to edit the log and output databases manually. It would be useful to have the ability to do this with Fn directly, e.g.\r\n\r\n`fn calls delete APP CALL_ID` or `fn logs delete APP CALL_ID`\r\n\r\nwould remove all data associated with the specified call ID in the specified application. This would prevent the server from filling up with old data from old calls. It would also allow me to build logic into my application that detects when a user has retrieved the output from a call, and so safely delete that data from the server. Hi @chryswoods thanks for the issue. Is this specifically to prevent disk full issues?\r\n\r\nI noticed we actually removed the API call at one point per issue #481 but there's some thought in there about if/when/how it might be added back in. Any thoughts? Yes, this is to prevent disk full issues. The use case is using Fn to run molecular dynamics simulations on demand as individual functions. Fn provides the serverless interface for simulations that are initiated, queried and then collected from Jupyter notebooks running in a k8s cluster. This allows the notebooks to use relatively low-powered cloud instances for the k8s cluster, with big fat nodes in the cloud or on-premise used on-demand to run simulations when they are invoked as a Fn function.\r\n\r\nThe simulations are long, and so async functions are needed. The Jupyter interface will capture the CALL_ID and then use this later to query when the simulation has finished, and to then get the ID of the  data cache in which the data is generated. The user will transfer the data from the data cache to storage connected to the notebook using this data ID. Once the data has been transferred, the system should delete everything related to the request. This is mainly to prevent disk-full issues, but also for data governance whereby commercial users would not want records of the simulation run to be retained on the system for any longer than was necessary to run the calculation.\r\n\r\nLooking at #481 I understand that you don't want users to be able to delete their logs for auditing reasons. The compromise of using a cleaner to remove everything completed that is older than 7 days is not an option as it could clean out the results of an async function before the user has a chance to collect the results. Perhaps a better idea would be for the user to be able to flag a call as deleted, but this only sets a \"deletable\" flag on the record? Then a cleaner periodically prunes the database to remove all \"deletable\" records that are older than a set time (e.g. 7 or 30 days)? Essentially, deleting really moves things to trash, and only the sysadmin or the cleaner script can remove things from the trash? thanks @chryswoods I think a configurable cleaner interval is what we were thinking about, to have a better out of the box xp around this, deleting all call and log records before some set time remedies one issue surfaced in #481. \r\n\r\nit may be easier in the short term to have `DELETE /calls?before=\"01/01/01 01:01:01.00\"` to delete records, our api at present doesn't lend well to this but we could add it as an admin-style endpoint, need to think on this one some more - open to ideas here. thanks for surfacing this. Thanks @rdallman - I will add the short term DELETE as you suggest. I can also short term add in a layer above Fn that marks records for later deletion for specific jobs when the user has moved files. I'm happy to feed back how this works for my use-case, so that you can see whether or not this would be useful in mainline.  #1081 fixes this  #1081 fixes this  worked fine, thanks! But still here would be bad UX in cases when the max size of the FS would not enough. A good example here would a function I've done (it downloads a video file from S3 store and function has no idea of how big video file can be unless there's particular check whether a function can fit a file), OpenCV can't read a video file from in-memory stream, it can only accept a file path (it's weird, indeed, but still one of the possible use cases).\r\n\r\nSo, i do understand that we can't let a funciton decide how big FS it wants (expect route configuration), but there has to be a way to let function know of how much memory to use it has, similar to RAM.\r\n\r\nThoughts?  ## Problem\r\nWhile `FN_DISABLE_READONLY_ROOTFS` left unset a function can't write to `/tmp` (or any other temporary directory defined by OS)\r\n\r\n## Steps to reproduce\r\n\r\n1. Create a function that attempts to create a temp file (no matter which programming language to use).\r\n2. Execute in any mode (sync/async).\r\n\r\nFunction used to test: https://github.com/denismakogon/videobox/blob/master/frame-splitter/processor.go#L39\r\n\r\nCode snippet:\r\n```go\r\n\ttempFile, err := ioutil.TempFile(os.TempDir(), fmt.Sprintf(\"%s%s\", prefix, filepath.Ext(video.Object)))\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n```\r\n\r\nLogs:\r\n```\r\nopen /tmp/402abe81-e604-46bf-992f-60cdea06d93f.mp4176888520: read-only file system\r\n{\"body\":\"open /tmp/402abe81-e604-46bf-992f-60cdea06d93f.mp4176888520: read-only file system\",\"content_type\":\"\",\"protocol\":{\"status_code\":500}}\r\n```\r\n\r\n## Expectations\r\n\r\nGuess, `/tmp` still should be available for RWX.\r\n Alpine 3.7  not a huge fan of the mutable `call.req` to swap context stuff in / out, there's the context on methods too and this seems brittle (the goal was to surface `call.Req.Context()` early and use/modify it as a standard `ctx` param) - if some better way comes to mind, would prefer it, but if not just ignore me and ship it.  > Is it feasible to to add an e2e test to witness the FS limit here?\r\n\r\nAh found it :)  I have some minor concerns about the impact of making this per-route configurable  - but understand that while this is necessarily tmpfs that this make sense.  \r\n seems like a good use case for annotations to configure ? Are there any corresponding changes that need to be made to the fn-api or cli to support this?  Relatedly: should we enable by default and instead use the environment to allow users to disable?  I am using nodejs on fn version\r\nClient version:  0.4.93\r\nServer version:  0.3.445\r\nWhen I run the command: echo -n '{\"name\":\"Bob\"}' | fn run\r\nThe result is: {\"message\":\"Hello World\"}\r\nwhen it should be: {\"message\":\"Hello Bob\"}\r\nThis worked in previous fn versions.\r\n\r\n I see what's going on. With latest changes to CLI we remove default hard-coded content type.\r\nIn order to make it work you need to use the following command:\r\n```\r\necho '{\"name\":\"Bob\"}' | fn run --content-type application/json\r\n{\"message\":\"Hello Bob\"}\r\n```\r\n\r\ncc @rikgibson @michael-w-williams  Thanks Denis. I will start making the changes in the tutorials.  When the server is configured using `WithDatastore` function fn doesn't use the validator/metric emitter from api/datastore/internal/datastoreutil.\r\n\r\nThis change makes validator and metrics emitter mandatory for custom datastore implementation by introducing new function `Wrap` to datastore, which is then called from `WithDatastore` function.\r\n\r\n/cc @rdallman @zootalures @adoublebarrel @jan-g  @skinowski makes sense -- on the other hand, this way we can say that FN guarantees the same set of metrics every time.\r\n\r\nI get your point, especially with having fnext/datastore which might need more detailed metrics anyway.\r\n\r\nDo we agree that every datastore should be wrapped with validator? I do have doubts making metrics and validation optional. Most of the times we need validation for an app/route, so the validation is required just to prevent from weird SQL queries, but have no clue when I woundn\u2019t need metrics.   Noticed unexpected async call rescheduling when agent fails to pull an image:\r\n```\r\nINFO[2018-05-12T18:07:17+03:00] Pulling image                                 app_id=01CDADXSG9R2M004RZJ0000001 cpus= format=json id=01CDAE8JF2R2M004RZJ000000C idle_timeout=10 image=\"/frame-splitter:0.0.19\" memory=1000 registry=\"https://registry.hub.docker.com\" route=/frame-splitter stack=Prepare username=\r\nERRO[2018-05-12T18:07:17+03:00] Failed to pull image                          app_id=01CDADXSG9R2M004RZJ0000001 cpus= error=\"API error (400): {\\\"message\\\":\\\"invalid reference format\\\"}\\n\" format=json id=01CDAE8JF2R2M004RZJ000000C idle_timeout=10 image=\"/frame-splitter:0.0.19\" memory=1000 registry=\"https://registry.hub.docker.com\" route=/frame-splitter stack=Prepare username=\r\nERRO[2018-05-12T18:07:17+03:00] error running async call                      error=\"Failed to pull image '/frame-splitter:0.0.19': invalid reference format\" id=01CDADZ5XMR2M004RZJ0000002\r\nDEBU[2018-05-12T18:08:15+03:00] Reserved                                      call_id=01CDADZ5XMR2M004RZJ0000002\r\nDEBU[2018-05-12T18:08:15+03:00] Hot function launcher stats                   app_id=01CDADXSG9R2M004RZJ0000001 currentStats=\"{[0 1 0 6] [0 0 0 0 0 6]}\" id=01CDADZ5XMR2M004RZJ0000002 isNeeded=true route=/frame-splitter\r\nINFO[2018-05-12T18:08:15+03:00] Hot function launcher starting hot container  app_id=01CDADXSG9R2M004RZJ0000001 currentStats=\"{[0 1 0 6] [0 1 0 0 0 6]}\" id=01CDADZ5XMR2M004RZJ0000002 isNeeded=true route=/frame-splitter\r\nINFO[2018-05-12T18:08:15+03:00] Pulling image                                 app_id=01CDADXSG9R2M004RZJ0000001 cpus= format=json id=01CDAEABE1R2M004RZJ000000D idle_timeout=10 image=\"/frame-splitter:0.0.19\" memory=1000 registry=\"https://registry.hub.docker.com\" route=/frame-splitter stack=Prepare username=\r\nERRO[2018-05-12T18:08:15+03:00] Failed to pull image                          app_id=01CDADXSG9R2M004RZJ0000001 cpus= error=\"API error (400): {\\\"message\\\":\\\"invalid reference format\\\"}\\n\" format=json id=01CDAEABE1R2M004RZJ000000D idle_timeout=10 image=\"/frame-splitter:0.0.19\" memory=1000 registry=\"https://registry.hub.docker.com\" route=/frame-splitter stack=Prepare username=\r\nERRO[2018-05-12T18:08:15+03:00] error running async call                      error=\"Failed to pull image '/frame-splitter:0.0.19': invalid reference format\" id=01CDADZ5XMR2M004RZJ0000002\r\nDEBU[2018-05-12T18:09:16+03:00] Reserved                                      call_id=01CDADZ5XMR2M004RZJ0000002\r\nDEBU[2018-05-12T18:09:16+03:00] Hot function launcher stats                   app_id=01CDADXSG9R2M004RZJ0000001 currentStats=\"{[0 1 0 7] [0 0 0 0 0 7]}\" id=01CDADZ5XMR2M004RZJ0000002 isNeeded=true route=/frame-splitter\r\nINFO[2018-05-12T18:09:16+03:00] Hot function launcher starting hot container  app_id=01CDADXSG9R2M004RZJ0000001 currentStats=\"{[0 1 0 7] [0 1 0 0 0 7]}\" id=01CDADZ5XMR2M004RZJ0000002 isNeeded=true route=/frame-splitter\r\nINFO[2018-05-12T18:09:16+03:00] Pulling image                                 app_id=01CDADXSG9R2M004RZJ0000001 cpus= format=json id=01CDAEC74YR2M004RZJ000000E idle_timeout=10 image=\"/frame-splitter:0.0.19\" memory=1000 registry=\"https://registry.hub.docker.com\" route=/frame-splitter stack=Prepare username=\r\nERRO[2018-05-12T18:09:16+03:00] Failed to pull image                          app_id=01CDADXSG9R2M004RZJ0000001 cpus= error=\"API error (400): {\\\"message\\\":\\\"invalid reference format\\\"}\\n\" format=json id=01CDAEC74YR2M004RZJ000000E idle_timeout=10 image=\"/frame-splitter:0.0.19\" memory=1000 registry=\"https://registry.hub.docker.com\" route=/frame-splitter stack=Prepare username=\r\nERRO[2018-05-12T18:09:16+03:00] error running async call                      error=\"Failed to pull image '/frame-splitter:0.0.19': invalid reference format\" id=01CDADZ5XMR2M004RZJ0000002\r\nDEBU[2018-05-12T18:10:17+03:00] Reserved                                      call_id=01CDADZ5XMR2M004RZJ0000002\r\nDEBU[2018-05-12T18:10:17+03:00] Hot function launcher stats                   app_id=01CDADXSG9R2M004RZJ0000001 currentStats=\"{[0 1 0 8] [0 0 0 0 0 8]}\" id=01CDADZ5XMR2M004RZJ0000002 isNeeded=true route=/frame-splitter\r\nINFO[2018-05-12T18:10:17+03:00] Hot function launcher starting hot container  app_id=01CDADXSG9R2M004RZJ0000001 currentStats=\"{[0 1 0 8] [0 1 0 0 0 8]}\" id=01CDADZ5XMR2M004RZJ0000002 isNeeded=true route=/frame-splitter\r\nINFO[2018-05-12T18:10:17+03:00] Pulling image                                 app_id=01CDADXSG9R2M004RZJ0000001 cpus= format=json id=01CDAEE2W3R2M004RZJ000000F idle_timeout=10 image=\"/frame-splitter:0.0.19\" memory=1000 registry=\"https://registry.hub.docker.com\" route=/frame-splitter stack=Prepare username=\r\nERRO[2018-05-12T18:10:17+03:00] Failed to pull image                          app_id=01CDADXSG9R2M004RZJ0000001 cpus= error=\"API error (400): {\\\"message\\\":\\\"invalid reference format\\\"}\\n\" format=json id=01CDAEE2W3R2M004RZJ000000F idle_timeout=10 image=\"/frame-splitter:0.0.19\" memory=1000 registry=\"https://registry.hub.docker.com\" route=/frame-splitter stack=Prepare username=\r\nERRO[2018-05-12T18:10:17+03:00] error running async call\r\n```\r\nAs you can see, runner tries to reschedule a call every minute but fails to pull an image. Image tag is actually broken, but that was done on purpose.\r\n\r\nheade commit: 999820d15b1600c3485f61e862e97a26efafe279 tried to restart Fn server, it doesn't go away. A bit more details on my setup: sqlite, bolt (not sure if the problem is in the mq backend) yeah, known issue https://github.com/fnproject/fn/blob/master/api/agent/agent.go#L40-L41 probably most recent complaints around async listed here https://github.com/fnproject/fn/blob/master/api/agent/agent.go#L25 for 8 months or so :)  I noticed the EnvAsHeader function was incorrect, and that the only test that really exercises it was also broken in a way that made it pass when it shouldn't.\r\n\r\nThe fixed test doesn't pass because the attempt to invoke the function fails with: `Failed to pull image 'denismakogon/os.environ': pull access denied for denismakogon/os.environ, repository does not exist or may require 'docker login'`\r\n\r\n@denismakogon, looks like that container isn't publicly readable -- could you make that image publicly accessible somewhere? @ostrain the images you referred to has gone, so i recommend to make a new one to cover this case.  I like this implementation, but I am still concerned about buffering the whole body of the http request on the LB side.\r\n\r\nThe LB is going to handle multiple requests - possibly for multiple tenants. If I send several malicious requests with gigabytes of body, and I have enough bandwidth to do so within the function timeout, I could OOM the LB, affecting not only my functions but also other people's. Granted, it has to be a lot of bandwidth (e.g. 64GB / 2 minutes = 500MB/sec), but still...\r\n\r\nThis buffering is used only for retries, and hopefully we get a NACK pretty quickly if we have to retry (after all, we just wait for the capacity check). Is it possible to use a ring buffer and hope that we receive the NACK before it wraps around (and error out with a \"server too busy\" if we have to retry but it has already wrapped around)?\r\n\r\nThis is the scenario I'm thinking about:\r\n- LB receives request\r\n- LB tries first runner, starts streaming and filling the ring buffer\r\n- LB receives NACK, stops streaming, ring buffer is half full\r\n- LB tries second runner, starts streaming the data in the buffer first\r\n- LB receives NACK before any more data is needed, stops streaming, ring buffer is still half full\r\n- LB tries third runner, starts streaming the data in the buffer first\r\n- Then it seems to work, so LB resumes reading the request body and streaming / buffering it\r\n- The buffer wraps around, we lose the first bit of the body\r\n- At this point, if the runner has worked then everything is fine, but if the LB receives a very late NACK then it must error out because it cannot retry anymore.\r\n\r\nI'm hoping that the vast majority of requests will satisfy these two conditions:\r\n- The body is small anyway and probably just fits into the maximum ring buffer size\r\n- If it doesn't, the NACK responses are fast enough that we don't need to buffer too much\r\nSince there is an upper bound to the ring buffer size, a malicious actor will OOM the LB only if they send millions of requests - at which point some higher level rate limiting will kick in anyway. @hhexo I like the idea of pre-allocating and re-using some fixed amount of storage.  That means the garbage collector should have less work to do if we re-use instead of free and reallocate.  IMO we should either buffer everything and be willing to retry, or just buffer the request header and only re-try if we get a nack after sending the first frame.  There are enough edge cases here that we may want to start simple first. I have another question... consider this scenario:\r\n\r\n- The LB receives a request\r\n- The LB tries a runner\r\n- The LB streams the body, and it never receives a NACK so it thinks the runner is ok...\r\n- ... but the runner was actually defective and it kept the connection open but never even ran the function\r\n- The LB times out the call after a while\r\n\r\nIn this scenario, the LB has no information on whether it can or cannot retry the call (we don't know if the function had actually started), and the only option is to fail when it times out.\r\nIf the protocol required an explicit ACK instead, the code that expects the ACK could time out earlier than the function timeout (this is analogous to the slot allocation timeout in single-node fn), therefore giving the possibility of a retry, because the LB knows that the runner has not started the function.\r\n\r\nRemoving the explicit ACK curtails our options somewhat. Is the scenario of a defective runner rare enough that we accept the possibility of letting some calls fail in this way? (We'd lose all function calls issued to the runner before some other mechanism detects the faulty runner)  I\u2019ll test this tomorrow for sure. Thanks. Sorry for taking that long. Worked fine.  ## Problem\r\nFn starts containers with no network binding considering that \"default\" network will be routed to the internet.\r\n\r\nSo, if someone will create a dedicated network Fn and will start Fn server(s) attached to that network agents/runners will still deploy containers to \"default\" network (implicitly of course).\r\n\r\n## how is it affects functions?\r\n\r\nIn each protocol frame function gets request URL (API endpoint or LB endpoint, no matter), so, if a function will be scheduled within another network it may case broken connection from functions to LB/API endpoint (call another function, for instance, etc.)\r\n\r\n## how to reproduce the issue\r\n\r\nThe simplest way - deploy Fn from docker-compose.yml and call some chained functions. You'll notice that function can't talk to Fn because it ended up on a different network.\r\n\r\nBut have no idea how to reproduce this problem on k8ts.\r\n\r\n## possible ways to solve?\r\n\r\nAt the cursory glance, pass DOCKER_NET/FN_NET to a runner to tell where to schedule functions.\r\nMaybe there's something else, but not sure. @skinowski thank you. So, tell me, with that feature you'd add, would Fn admin be capable to specify a network (list of those) to attach each function to that?\r\n\r\nJust trying to understand the networking we'd like to build in order to avoid unrouted requests between functions and Fn. Or, inject Fn API endpoint that function can talk to without falling into `Uknown host`. Deployment with docker-compose is very handy to discover this particular issue where ends in one network and function attached to default bridge defined in docker daemon config. Yes. As long as Fn will be able to attach functions to the same network it runs on then it's fine.\r\n\r\nI've been considering the next case: Fn should accept env var that represents a mandatory network (or a list of those) that container will be attached to and an env var that represents a list of optional networks where Fn will apply round robin.\r\nThe purpose is: each function should be attached to an MGMT network(s) and others are optional, so, a function at least will be able to talk to Fn which is not guaranteed by an optional network(s).  if we want them back, we can dig them out of git instead of some poor soul\r\nuncommenting them 10 years from now and spending 3 months on failing CI builds\r\ntrying to figure out how a test that breaks doesn't mean the code's broke.\r\n\r\nthese tests are notoriously flaky and hard to understand/fix, they also test\r\nvery specific agent behaviors all the way through the front end when it may be\r\neasier to test them in unit tests instead (should we so choose). at least,\r\nsince the behaviors tested aren't being changed very often, these are only\r\nserving to provide negative value in time wasted re-running the test suite\r\n[since them failing doesn't really indicate the code being wrong].\r\n\r\nthe `IOPipes` test is partially covered by `TestPipesAreClear` which hasn't\r\ncropped up as being as flaky, but it tests less behaviors. it is not easy tt o\r\nunderstand, either. while i think we learned a lot from these tests, they\r\nhaven't been a great citizen of our test suite at large, i figure if we need\r\nto change runner behavior in the future we can maybe make another go at it. the last 2-3 weeks this has been ~unbearable, gotta kick the bucket 2-3 times even for docs changes thanks @reclaro - agree, i think we need to pick a better spot to test stuff like this / possibly make the code easier to test cc @skinowski ^ we can discuss when you are back :D   users may specify a syslog url[s] on apps now and all functions under that app\r\nwill spew their logs out to it. the docs have more information around details\r\nthere, please review those (swagger and operating/logging.md), tried to\r\nimplement to spec in some parts and improve others, open to feedback on\r\nformat though, lots of liberty there.\r\n\r\ndesign decision wise, I am looking to the future and ignoring cold containers.\r\nthe overhead of the connections there will not be worth it, so this feature\r\nonly works for hot functions, since we're killing cold anyway (even if a user\r\ncan just straight up exit a hot container).\r\n\r\nsyslog connections will be opened against a container when it starts up, and\r\nthen the call id that is logged gets swapped out for each call that goes\r\nthrough the container, this cuts down on the cost of opening/closing\r\nconnections significantly. there are buffers to accumulate logs until we get a\r\n`\\n` to actually write a syslog line, and a buffer to save some bytes when\r\nwe're writing the syslog formatting as well. underneath writers re-use the\r\nline writer in certain scenarios (swapper). we could likely improve the ease\r\nof setting this up, but opening the syslog conns against a container seems\r\nworth it, and is a different path than the other func loggers that we create\r\nwhen we make a call object. the Close() stuff is a little tricky, not sure how\r\nto make it easier and have the ^ benefits, open to idears.\r\n\r\nthis does add another vector of 'limits' to consider for more strict service\r\noperators. one being how many syslog urls can a user add to an app (infinite,\r\natm) and the other being on the order of number of containers per host we\r\ncould run out of connections in certain scenarios. there may be some utility\r\nin having multiple syslog sinks to send to, it could help with debugging at\r\ntimes to send to another destination or if a user is a client w/ someone and\r\nboth want the function logs, e.g. (have used this for that in the past,\r\nspecifically).\r\n\r\nthis also doesn't work behind a proxy, which is something i'm open to fixing,\r\nbut afaict will require a 3rd party dependency (we can pretty much steal what\r\ndocker does). this is mostly of utility for those of us that work behind a\r\nproxy all the time, not really for end users.\r\n\r\nthere are some unit tests. integration tests for this don't sound very fun to\r\nmaintain. I did test against papertrail with each protocol and it works (and\r\neven times out if you're behind a proxy!).\r\n\r\ncloses #337 /me i dream of a day where i won't have to click ci rebuild over IOPipes (is this test providing value? i might just get rid of it, it doesn't seem worth it now, there's `TestPipesAreClear` to make sure we aren't leaving garbage in there, though IOPipes tests 2 other things).\r\n\r\nthis may also close #712 - we also have mr freeze now so it's kinda moot, the container won't do anything between calls really, it could still spew some logs on startup though. i'm not really sure we want to have a container logs api, the call logs api is already getting nailed up for target practice, just getting the logs out to syslog seems pretty good to me ? looks pretty good in papertrail (the format is kinda optimized for that -- it's what I know)\r\n\r\n<img width=\"933\" alt=\"screen shot 2018-05-02 at 5 53 52 pm\" src=\"https://user-images.githubusercontent.com/2935111/39555976-e2166132-4e31-11e8-9e5a-3fbe2a219e9d.png\">\r\n ![53s4vjs](https://user-images.githubusercontent.com/2935111/39844670-23be21e6-53a6-11e8-848d-a921e4826c2e.gif)\r\n\r\nbump @zootalures @jan-g @hhexo (i think DP is gonna use this? idk i'm out of the loop) thanks for reviewing.\r\n\r\n> Should we execute this dial in parallel for all syslog sinks \r\n\r\nyea, this could be a good idea. trying to keep it simple for a first pass, also suspect most users will use 1 or maybe 2-3 tops, so N is really small, but could be 1-2s for a tls conn half way around the world too I guess. \r\n\r\n> and also in background to avoid adding up to container start latency?\r\n\r\nslight concern about doing it in parallel to starting the container, as this could mean that the logger could miss some logs. In particular, for containers whose launches subsequently fail relatively quickly. I think it's best that we ensure we don't miss any logs (hard to explain/debug) and in practice w/ hot functions eating the latency should be mitigated mostly (though, that depends on how optimistically we launch).  so, it's possible to do all of that. i can't honestly say i agree that it's worth it, but we don't really have any data to point at now to say one way or another. we're going to be presumably adding a strategy to pre-emptively launch containers to get around start time in any case, for the high throughput installs. for this one, more worried about imposing some connect timeout policy than anything, as in the average case I expect this is an entire order of magnitude smaller than the docker start time, for udp even less (dns time, if any?). but, sticking with the theme of not imposing limits in OSS (it seems like a decent use case for annotations, to me, but there's no other plumbing). I think adding timeout addresses the real concern, when without a timeout even if we go optimize to the hilt, plumb a syslog conn pool manager that starts in one place and gets waited on in another, we still end up waiting longer than someone might like to get our stinkin logs out just b/c the dial takes forever (if blocking).\r\n\r\nthe idea of a bit to set lossy logs and unlossy logs seems like a really slippery slope i'd prefer to avoid, aside from being yet-another-knob-nobody-will-use. we should just pick a sane default I think. I see the support tickets already: \"hey my container says 'yo' on startup but on April 13th, 2021 at 11:01 GMT my container started but didn't print 'yo', I set non-lossy logs, is life still worth living?\". UDP will inherently be lossy, making the slope even more slippery. it seems hard to grok for users. i wish we had a larger community of prod users, we could poll for stuff like this.\r\n\r\ngetting logs out from the container on startup is key I think, if we have to pick one. we could hold up handing out a slot until the dial goes through, but we're still in the dial takes too long case potentially and it's relatively complex to plumb. ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* Reed Allman (The email used in the commit is not linked to your GitHub account. As a result we cannot verify that you have signed the CLA. If you have signed already, please let us know in our [community Slack](https://fnproject.slack.com/join/shared_invite/MjIwNzc5MTE4ODg3LTE1MDE0NTUyNTktYThmYmRjZDUwOQ). Thanks!)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! ## CLA Bot\n\nAll committers have signed the CLA. added a trace so we can track this, we'll probably need a latency distribution, am hoping to get back to that stuff next week and have some ideas for getting that out of traces  When we chain middlewares, the last middleware does not use the request passed by the preceding middleware. If the preceding middleware read httpRequest.Body and set a new io.ReadCloser to httpRequest.Body, the last middleware will not see this.\r\n\r\nThis change is useful when some middleware reads httpRequest.Body to\r\nperform some logic, and assigns a new ReadCloser to httpRequest.Body\r\n(as body can be read only once). One example is authentication middleware that needs to read the body to validate signature. ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [Srinidhi Chokkadi Puranik](https://github.com/srpurani)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community!  stale   I was wondering if I can safely delete the data directory if I'm not using a database.  They are checked into source control and seem to get modified randomly.  Do these get created when you start up fn server?\r\n\r\nAlso this link references function.db but It is named fn.db on my system.\r\nhttps://github.com/fnproject/fn/blob/master/docs/operating/databases/README.md#sqlite3-default\r\n going to close, this particular area covered by [operational docs](https://github.com/fnproject/fn/tree/master/docs/operating).  Some updates on triggers and FDK's. \r\n alright i'll address my own comments, thanks for updates  I am trying out fn using the guide on the main page and I am having trouble running it behind the proxy.  I've created the hello world function and I am able to start the fn server, but when I tried fn start, it gives an error, when running with --verbose, I get the following error;\r\n\r\n$ sudo fn --verbose run\r\nBuilding image hello:0.0.3 \r\nSending build context to Docker daemon  6.144kB\r\nStep 1/10 : FROM fnproject/go:dev as build-stage\r\n ---> fac877f7d14d\r\nStep 2/10 : WORKDIR /function\r\n ---> Using cache\r\n ---> 758de86f6b04\r\nStep 3/10 : RUN go get -u github.com/golang/dep/cmd/dep\r\n ---> Running in 7c13e58e9738\r\n# cd .; git clone https://github.com/golang/dep /go/src/github.com/golang/dep\r\nCloning into '/go/src/github.com/golang/dep'...\r\nfatal: unable to access 'https://github.com/golang/dep/': Could not resolve host: github.com\r\npackage github.com/golang/dep/cmd/dep: exit status 128\r\nThe command '/bin/sh -c go get -u github.com/golang/dep/cmd/dep' returned a non-zero code: 1\r\n\r\nError during build. Run with `--verbose` flag to see what went wrong. eg: `fn --verbose CMD`\r\nERROR: error running docker build: exit status 1\r\n\r\n\r\n\r\n\r\nI have proxy setup in .gitconfig for both regular user and root and I can verified that I can work with git successfully behind proxy, but I can't get the fn run function to work with various settings like export http_proxy or git config --global http.proxy (both http and https).\r\n\r\nAny ideas?\r\n\r\n\r\n @rdallman if I set HTTPS_PROXY, say export HTTPS_PROXY=https://myproxy.com:1080 then the error I get is:\r\nCloning into '/go/src/github.com/golang/dep'...\r\nfatal: unable to access 'https://github.com/golang/dep/': Could not resolve proxy: myproxy.com\r\npackage github.com/golang/dep/cmd/dep: exit status 128\r\nThe command '/bin/sh -c go get -u github.com/golang/dep/cmd/dep' returned a non-zero code: 1\r\n\r\nSo it does like it reads from HTTPS_PROXY, but cannot resolve the proxy address somehow?  I also have to add sudo -E to pass on the environment:\r\nsudo -E fn --verbose run\r\n\r\nDoes this have to do because I am running using sudo or there's a way to run it without sudo?  If I try without sudo, then I get this:\r\nERROR: could not check Docker version: exit status 1 @rdallman Yeah, none of the tricks worked, I've already added my user to the docker group and can succesfully run docker as a container and download them as non-root, we do use the http instead of https as well when setting https_proxy, but that didn't help either.\r\n\r\nI've manually typed git clone https://github.com/golang/dep /go/src/github.com/golang/dep and it work in both regular user and root as well as sudo.\r\n\r\nSo it appears to fail at\r\nRUN go get -u github.com/golang/dep/cmd/dep, if I ran just that command, it also works, and I can see the dep project getting downloaded to my GOPATH.\r\n\r\nIs there a way to edit this script somewhere locally on my machine to hack around it?  Where is this line coming from, is it built into the binary or some conf file I can edit?\r\n\r\nBtw, is there a reason why you put github.com under the $NO_PROXY list?   sorry, lost this one. it definitely seems like the build args aren't getting in there. if you haven't had any luck yet, the build args we copy over are https://github.com/fnproject/cli/blob/master/common.go#L164-L165 (notably, not the lower case ones). you shouldn't need to hack anything other than setting those variables properly to get past the cloning dep stage. \r\n\r\n> Btw, is there a reason why you put github.com under the $NO_PROXY list?\r\n\r\ni do not recall anymore, but we don't seem to be copying this over as a build arg and this 'works on my machine' out of the box, so this shouldn't affect anything.  closing for inactivity, hope this worked out. we have a number of users behind a proxy so it works with enough jigging with it. thanks for the issue  I tried to run lambda functions by document .but I couldn't find the right runtime. \r\nso I want to run the aws lambda functions without any change. what should i do.  by the way ,my functions with python 2.7 . I love the open source ,It's fascinating. but The code for my project is written in python 2.7. So, Can you give me some feasible suggestions? @denismakogon . thanks \u201dImport Lambda functions and run them anywhere\u201c  but  I import lambda function from my aws server, It's doesn't work .can you tell me why? @Littermonkey Would you mind to be more explicit please about what doesn't work?  it is show have not right runtime . when I import lambda function runtime there's a limit? Which runtime? Please provide more information, hard to guess what\u2019s going on without an actual problem details.\r\n\r\nNote that runtime means literally nothing to Fn server, it\u2019s only for CLI since Fn works with containers, not the programming language runtime. For Fn container is the runtime, which is one of the best features we did. Ok, I will tell you what the specific requirements are, and I need to get the lambda function code to run on any cloud service without making any changes. but the lambda function runtime is python2.7. \r\nnow ,How I to do ?  Import your function with Fn CLI and set runtime to `docker`.  Here\u2019s the doc how to do so https://github.com/fnproject/fn/blob/master/docs/lambda/import.md\r\nBefore `fn deploy` update `runtime` in `func.yml`:\r\n`runtime: docker` \"\"\"Bumped to version 0.0.3\r\nERROR: Dockerfile does not exist for 'docker' runtime\"\"\u201c\r\nwhen I fn deploy ,The above error occurred. Show me the content of your `func.yml`. Basically, you need to write a Dockerfile to package your code into a container. name: glb1223/test_hello\r\nversion: 0.0.3\r\nruntime: docker\r\ncmd: lambda_function.lambda_handler\r\npath: /test_hello\r\n~                                                                                                                       So, yes, you need to write dockerfile to package your function into a container. ok ,  so Does func.yml need to change?   What do you mean? Just write dockerfile, put that near func.yml and call deploy. Thank you very much , I have a try.  In  aws lambda function , need two parameters( context ,event) . but In fn server , What should I replace these two parameters?  Hi! Well, this is quite problematic question because of the of the complete difference between concepts of a function between Lambda and Fn. I guess, you are aware that Lambda has a wrapper that starts your function by dynamically loading your code to the runtime (that's why Lambda supported Node and Python as first programming languages to deliver).\r\n\r\nFn is totally different, the runtime for a function is not an actual programming language runtime but docker container, so Fn is not aware of your code, which signature it has and what it does. It means that you decide on the signature, but you are responsible for request data parsing from the protocol frame (in case of hot functions), that's why we made a bunch of FDKs for Node, Go, Python 3.6, Java, Ruby, Kotlin, etc.\r\n\r\nI may be wrong, because i didn't try lambda import, however, i have pretty strong opinion that you can't import lambda function without actually changing your code to make it work with Fn.\r\n\r\ncc @treeder  Well, let me ask if there is a better way to run lambda function. please give me some advice. Unfortunately, have no idea at this moment except changing the code of your function.  Change the function code , You mean is modified python 3 ? and use FKDs integrated into FN server? Yes, that\u2019s the simplest path to go. 6 weeks of inactivity on this one, re-open if you'd still like a hand! we're in slack too. thanks  does ngrok call fn with https? do we just need to check `X-Forwarded-For` for the original URL? I guess we will almost always front fn with an lb and want the original request url, we probably need to plumb that. but i don't think the bug is in http/https scheme solving. with cloud events the event uri is in there, maybe that's all we really need to do. gonna close but maybe we should open an issue for ^ ?  This is good. \r\n\r\nWould this change benefit from some black-box /narrative use cases that walked through the specific new user features that it enabled?   - I guess it\u2019s mostly covered but for other /future readers setting out how this solves specific problems might help understanding.  \r\n\r\nThis could be in an adjacent doc/section (\"use cases\" ) - this doc is the outcome, but would be good to see some working\r\n\r\nE.g. \"I have a kafka queue, I'm trying to do this , I do that...\"  \"I want to hook up a github webook ...\"\r\n\r\nAlso on the function registry stuff - would be good to have some lucidity by example on the good stuff that  this enables (i.e. sharing functions between platforms?  function hub?)\r\n\r\n--- \r\n\r\nFor queue triggers, can you sketch out how this could/might  work  with a Kafka/Kinesis queue - how do I authenticate, how to I connect etc? \r\n\r\nIn the implementation roughly how is the polling/pull likely to work (how do you hook up the last mile for the queue to the events). \r\n\r\nYou mention filters for queues - what would that mean for a queue that didn't support filtering  natively.  \r\n\r\n----\r\n\r\nFor queues is the content on the queue cloud events or are cloud events wrapped on the queue content  itself? \r\n\r\nFor namespaces - is the intention to enable real multi-tenancy here  How will access control work in that case/ how do I integrate/mix this with an existing access control system. \r\n\r\nYou're specifying components here - trigger manager seems a bit fluffy - could you clarify (e.g. for a kafka queue above) how does this scale up ? \r\n\r\nlooking forward it seems odd to decouple the function and trigger resources in the  API but then still leave them coupled in func.yaml - if a function is truely an independent thing  (just a registered image and some config)  could these be separated all the way up the stack?   \r\n\r\nAre functions immutable? \r\n\r\nIf they aren't and If I refer to a function in a different function registry - how and when do I reflect changes in that registry (i.e. same problem as docker images) \r\n\r\nI.e. if function becomse a remotable resource how does auth and state transfer work. \r\n\r\n\r\n am gonna start tinkering with https://github.com/fnproject/fn/pull/957/files#diff-a09b48bd44dbe9bb9ef1c216b3f146fbR445 -- need to tinker to see how this is gonna mash together, but initially would like to have exactly what our FDKs 'of the future' look like under the `cloudevents` format (binary and all), this exists now but the cloud event doesn't contain _all_ information inside of it (e.g. app id, timeout). after we settle on this and update FDKs, then I'd like to rip out the other (http, default, json) formats and switch to all cloud event, as it will drastically simplify the agent. I think this is relatively easily manageable, and can be done before changing triggers/functions APIs. This would break all existing functions inasmuch as they'd need to update the FDK, use an FDK or update to handle the new format -- maintaining the various formats has long been a thorn in our foot, this is more of a 'good riddance' hopefully.  meeting about prioritization of these wrt other things happening:\r\n\r\n* toss namespaces out for now\r\n* do API change of trigger/functions first\r\n* do cloud event changes later, FDK have 2 handlers (we can stage)\r\n\r\ni'll make changes to this doc wrt removing namespaces today hopefully. and then shift to working on scoping the API changes (vs. scoping the cloud event changes) ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* Reed Allman (The email used in the commit is not linked to your GitHub account. As a result we cannot verify that you have signed the CLA. If you have signed already, please let us know in our [community Slack](https://fnproject.slack.com/join/shared_invite/MjIwNzc5MTE4ODg3LTE1MDE0NTUyNTktYThmYmRjZDUwOQ). Thanks!)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! die cla bot i changed my github email immediate issue created by trying to throw out namespaces is that functions do not have a bucket to exist in, they are just all in one big bucket. for someone that wants to do authenticated listing of functions they will have to implement a custom datastore that takes their namespace variable into account when making db queries, we have this issue with apps now anyway (and will continue to). this seems to be the plan anyway. not expecting to hear anything here, just yelling into the void.  Why are we removing namespacing?\r\n Can someone explain here why we do not want to add name-spacing as it is a valuable tool that would add flexibility, utility and is something that would greatly benefit anyone that wants to add auth to fn for their own deployments. @hibooboo2 i wonder if my email change breaks the cla bot? yay edge cases :( It is looking to see that you signed your commit with an email that is your primary email I believe. I can make it check all emails that it can see on you. Not sure why it is saying you did not sign it. Do you want me to investigate it?\r\n kinda confused why it's not working today, worked yesterday (with email change in place). will see if i can finagle it. K let me know. @hibooboo2 I think the CLA bot is using the earliest commit's author to check their email for the CLA bot and not the last one, so for stuff like this even if I add commits on it won't help (and for this one, since it's a collab, it's kinda mean to rebase). not a big deal, I guess if it's easy to change it to the last one it may be worth it, I'm likely a rare case though. 2 points that came from recent slack discussions:\r\n\r\n* it may make sense to hang functions off of apps inside of a trigger to help users manage functions. the downsides being this hides functions inside of an app and if we end up with a function-hub-like thing then this is more challenging, we would presumably need another way to address functions. the upshot being, a user makes a function app and then creates functions and triggers in there. additionally, permissions can be attenuated better on that (and conversely, it's harder to share functions, have to re-create in each app). kind of a composability vs easy UX thing.\r\n\r\n* hanging calls / logs off of app or function or trigger. this was an open ended TODO in the swagger file which didn't generate too much discussion. calls and logs are kind of a wart and we really want a 'pure runner' like module that only execs and returns the output + logs [+ call metadata]. this was not easy to rip out last time I tried, with our agent variations - aside from that, we still haven't really come to a conclusion on what we want this api to look like for OSS while being an interface that a larger scale deployment could presumably implement without much issue. 3 points:\r\n\r\n* we could address resources by ID instead of name everywhere. we seem to have been using name for some time, this is a good place to change that if we want. github/docker allow using name, and then the underlying resource have ID, I think this is what we were going for but we hadn't fully gotten there yet. it is a bit tedious to implement the backend with the name stuff, it's really hairy (see app id), but it does look nice to have name in the UI and allows us to use PUT instead of POST for resources, as was proposed here. Thoughts on the three points:\r\n\r\n1) I think Function inside App makes a lot of sense, giving a top level abstraction to hang auth and general metadata off. I'm wondering if Triggers should have an App ID as well, so it's easy to traverse the domain from app directly to Trigger. It might make more sense to go that way for certain use cases. \r\n\r\nReluctant to say much on FnHub, not that familiar with the idea, but if a user takes makes use of another user's function it seems reasonable that an entry (function row) would need to exist in their domain, for calls and triggers to reference if nothing else. The FnHub, from this perspective, more providing somewhere to clone settings from, rather than a reusable execution environment.\r\n\r\n2) Uncertain what 'pure' means here, but I think the Log (stderr from container) should exist within a Call object, referenced on a separate route via the api.\r\n\r\n3) I think there's a mixing of API and Domain Model thinking here. The Domain Model, table design, should be completely linked via ID's imo. The API though can expose the entities via names, if that's deemed valuable. I'm not sure why that is particularly valuable here though. This is not an API users will be interacting with, all the usage comes via the CLI. The API can, therefore, be machine orientated, i.e. ID's used throughout the routes, supporting query params for name.\r\n\r\nIf there is a strong case for human-friendly urls then perhaps we could support both with different routes, or differentiate between ID and name usage, ensuring no one could create a name that looks like an ID and regexp to discover which one is in use. Maybe there's a use case I'm not yet familiar with here. I think 'Function Version' needs a solution. A 'call' has to reference both the exact code that executed it and the configuration it was executed with in order to be of any use. See the Docker Images table in my forks ERD for an idea in this area. Not entirely sure that is the way to go mind, might want something more generic. Surfacing swagger TODO's:\r\n\r\n#### TODO(?): pagination should only list resource names or the entire resource?\r\n\r\nPaged resources normally return the entire resource. \r\n\r\n#### TODO(?): triggers and functions OR trigs and funcs ?\r\n\r\nI think apps, fns, triggers. *Bikeshedding alert*\r\n\r\n#### TODO(?): version change? /v2 ?\r\n\r\nNo. My understanding is that /v1 has not been released, really we should go for 0.2 or something, saving one until we're confident.\r\n\r\n#### TODO(?): remove stats from call?\r\n\r\nThey seem useful, but need to be optional. I don't think calls should link to app_id, more to fn_id. They must reference an exact code version (docker coordinates, image sha, config) somehow.\r\n\r\n#### TODO(?): amend log api? if we have /app/logs we could tail logs on an app (or trig?) and have point lookup for call still\r\n\r\nI think log should live under call. Something like /apps/id/fns/id/calls/id/log\r\n\r\n#### TODO(?): annotations & config & event.extensions redundant to a degree? naming confusing? discuss.\r\n\r\nAnnotations and Config are different entities, imo. Annotations don't influence execution, they are labels. Config does influence the execution, being set as env vars. Not sure what event.extensions are, but they can't really be config (event data shouldn't cause a new function instance to be instantiated to execute it, for example).\r\n\r\n#### TODO(?): add /run API to swagger doc? (only covers API module atm)\r\n\r\nI think this can be removed in favour of triggering triggers.\r\n\r\n#### TODO(?): should trigger have an 'enabled' field to easily toggle on and off via API?\r\n\r\nYes, well, rather it should have a 'status' field. One value of which can be enabled.\r\n\r\n#### TODO: let's punt on adding a row for FuncVersions with snapshots of each func version? just a string field for now.\r\n\r\nI think this is such a crucial aspect, see above, and we should answer this at this stage.\r\n\r\n#### TODO: put body and response objects have different required fields, etc; make 2 objects?\r\n\r\nYes. The extra fields being system determined I guess. Is there an extension mechanism in swagger? https://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/\r\n\r\n#### TODO: change all params to $ref's\r\n\r\nDon't really know what the norm is in Swagger, but it looks sensible.\r\n\r\n#### TODO(orcl): 204 DELETE success\r\n\r\nSeems viable, although I personally don't like deletes at all and would prefer to use Status = Inactive. Actually deleting data makes auditing hard.\r\n\r\n#### TODO(orcl): 401 - should we define this to delineate w/ 404 even tho we don't have auth by default?\r\n\r\nThis is tricky, as a 401 indicates that a resource exists, and thereby can leak ids. Often I've simplified to not 401 and just use 404's for unauth'd as well. Potential *bikeshed*.\r\n > Thank you for your submission!\r\n\r\n*On hierarchy/setting up for a Fn-Hub sort of model* \r\n\r\nit's only a soft opinon but I guess my brain's preference for disentanglement is to keep a strictly hierarchical domain model for now \r\n\r\nUnderstand the argument and how this would support a FnHub  sort of thing but adding explicit indirection to the domain model  makes  a bunch of things hard that weren't before - notably working out when /how changes are propagaged, how deletions work and ar reported etc.\r\n\r\nIt's probably a bit pansy-assed but I'm all in favour of worring about sharing ownership of functions and triggers  some other time . \r\n\r\nMy mental model here largely stands at: \r\n* An app is a unit of deployment , control (permission wise) and configuration\r\n* A function is a unit of functinoality within an app, associated to it's causes by zero or more triggers. \r\n\r\n----\r\n\r\n*On calls/Logs:*\r\n\r\nMy intutition is that they \"belong\" only to functions  and not triggers (as In when I list calls/logs for a function I see everything irrespective of the trigger) - but perhaps the trigger identifier is encoded in or attached as metadata to both (as a \"cause\" or something - maybe something in the CloudEvents model ) \r\n\r\n\r\n```\r\nfn calls list myapp myfn \r\n\r\n|  time              |       trigger     |      status    | duration    |\r\n-------------------------------------------------------\r\n| 2012-01-01.: |    /httpRoute  |   OK           | 12ms         | \r\n| 2012-01-01.: |    <DEBUG>   |   OK           | 48ms         | \r\n| 2012-01-01.: |    queue2       |   FAILED     | 23ms         | \r\n```\r\n\r\nAnd for logs, something morally equivalent to a logger field for the same. \r\n\r\nBecause: \r\n* I  want to to be able to call a function independently of a defined trigger in the Fn model - \r\n       *  e.g.  via (e.g.) a debug call (over an authenticated API) as a feature later - this doesn't have an associated trigger (unless we create a synthetic one)  (e.g. I do an Fn Call on a function with no triggers) \r\n       * or via an external integration that is providing triggers for us but integrating directly into Fn  (i.e. we just do the callin - \r\n* Calls+ Logs (arguablly) could  persist beyond the lifecycle of triggers \r\n     * delete trigger, still want to see/account for stuff\r\n\r\nI don't care if I  can fetch  calls/logs per app  (at least not  in  CLI for instance) - If I'm exporting my logs to a logging service then I want my app Identifier encoded as a field in my logs. \r\n\r\nFWIW: Off the top of my head, my spidey sense says that the modal case will be people dealing with single apps, single functions, single triggers  and that  we have to make sure that the payoff in the UX is when that is the case, \r\n\r\n---- \r\n\r\n*On names/IDs* \r\n\r\nPretty sure we need  human readable/typable identifiers for functions and probably triggers  here  (unique in their context). If it's necessary for mechanical IDs then we should have them as well, not instead of. \r\n sorry, didn't make it to this today, thanks both for your input - i have no meetings tomorrow and short of divine meeting intervention (the opposite of what put all these meetings there?), i will get to this first thing @zootalures re names/ids, it's not so much that we don't need them, it's whether they belong in the api at the route level. Name as a query param on /fns would be how people find fns by name.\r\n\r\nMy suggestion being, people aren't going to be manually typing these urls or really sharing them. It'll all go via the cli, which can resolve sort such things out. > My suggestion being, people aren't going to be manually typing these urls or really sharing them. It'll all go via the cli, which can resolve sort such things out.\r\n\r\nthe main thing is that in a sense we're exposing 'webhooks' and naming these can be preferable for management, where most usage is not through the cli. this entails every resource in that chain being addressable by name instead of id (app and trigger, previously app and route). it's possible to have a mix, but it's nice to be uniform and not have to look up app names and such (as noted, a regex mix of id and name on resources is hairy). as a side note it's been nice ux wise in the cli and such to address things by name instead of having to copy and paste various ids, which is something we could fix up, but name in this case is going to have to be unique anyway. in any case, we can use ids in the backend while having the api use names, which is the plan here at least for now, definitely with an eye on function hub like thing for functions and for a decent out of the box experience for triggers without having to set up API gateway routes and such to get nice urls.  > TODO(?): pagination should only list resource names or the entire resource?\r\n> TODO(?): version change? /v2 ?\r\n> TODO(?): annotations & config & event.extensions redundant to a degree? naming confusing? discuss.\r\n\r\naddressed: https://github.com/fnproject/fn/pull/957/commits/299aa58400f49d6d21e5686781d2b3dd6f54d9af\r\n\r\n> I think apps, fns, triggers. Bikeshedding alert\r\n\r\nfns and triggers seems pretty cool to me. like fn using fn terminology, downside being when someone says `fn` we have to clarify whether it's a func or a server/service they're talking about - i still like it. this is an easy rename, I have most of this plumbed with `func` but would be easy to change (hopefully posting soon...)\r\n\r\n> TODO(?): remove stats from call?\r\n\r\nwe're sending to prometheus, we can stop storing them pretty easily and still have a handle on them. this is easy too, has come up.\r\n\r\n> TODO(?): amend log api? if we have /app/logs we could tail logs on an app (or trig?) and have point lookup for call still\r\n\r\nat present you can list calls on an app and filter by path, basically giving this functionality. assuming we have listing calls on an app with ability to filter by function or trigger, this allows listing across triggers/funcs which would be hindered by nesting them deeper in the url or we'd need to add an additional endpoint for this if we do end up wanting it.\r\n\r\n> I think 'Function Version' needs a solution. \r\n\r\nlet's spec this out, I agree we really should have something robust soon. we can figure out if we need to add it here or if we can add it in a month, but we can spec it out now to figure that out. Would you like to spec out the api bits for this on top of a function? Would be really great to be able to list all versions of a function, with the full configuration, and we could also use this to enforce docker image shas at runtime, too (we can have immutable versions, basically, if we want - this is discussed further up thread, as well). \r\n\r\n> TODO(?): add /run API to swagger doc? (only covers API module atm)\r\n\r\nit's not very clearly defined, but this is basically the `/r/app/route` endpoint we have now, which is not in the swagger. this one we can kinda punt on anyone, bigger fish...\r\n\r\n> it's only a soft opinon but I guess my brain's preference for disentanglement is to keep a strictly hierarchical domain model for now\r\n\r\nyea, we can pretty easily add a rooted `/funcs` and move them up if we want or add a registry api separately using function ids to query into app functions later, that's true. having functions rooted seems a little odd, yea, this made more sense when it was `/ns/:ns/funcs/:func` instead of rooted `/funcs`. think we should roll with moving functions into apps, seems to be agreement on that, some functions seem useful across apps (i.e. outside of an app context), e.g. an image resize func is generally useful outside the context of an app, again this kinda made more sense with namespaces I think. anyway, on with app functions.\r\n\r\n> My intutition is that they \"belong\" only to functions and not triggers\r\n\r\nkinda discussed today IRL, textifying. the original intent of the proposal here (which is mutable) was that a trigger is the way to invoke a function and thus triggers have executions with additional configurations that may not make sense solely in the context of a function. our thinking was something like a docker image is to a docker container as a function is to a trigger; i.e. a trigger is an execution of a function, and the analogy kinda makes sense in that docker images don't have logs, containers do, in the same sense that a function doesn't have logs, a trigger does.\r\n\r\nthe oddity here is that it doesn't seem like trigger provides very much value other than being able to add additional configuration, and a case could likely be made to get rid of the trigger and just invoke functions directly - kinda get that. if we don't ever plan to let a trigger invoke multiple functions, it makes sense, but if we add the trigger construct here we can leverage it to do that, in addition to being able to configure 3rd party functions without having to copy them (maybe other stuff?).\r\n\r\ndirectly to the point about calls/logs - littered various places, if we leave them on app we can add filters for function or trigger, etc and they exist on an app (i.e. if you nuke a function there's still a log on the app for it)\r\n\r\n> Pretty sure we need human readable/typable identifiers for functions and probably triggers here (unique in their context). If it's necessary for mechanical IDs then we should have them as well, not instead of.\r\n\r\n+1 - the app id/name thing has been a pain, was thinking about carving it out, hybrid was the big bugaboo there and any other middleware (auth). if we say, don't allow renaming or deleting then we take care of some 'issues' there. i'm not sure what to do about this situation, there's not enough zoloft to fix this one.\r\n\r\n\r\n-------\r\n\r\nthink we're converging on a few things (like app functions), thanks for the feedback here. closing to continue on #1038 free of these load times and context. will review this for anything we may have missed and swoop it up  For example, image or audio processing.\r\n\r\nOnce content-type can be defined as part of a function ([CLI #248](https://github.com/fnproject/cli/issues/248)) and communicated correctly, it becomes possible to send a binary payload to a function.  To support this however, changes would be needed in the various FDKs and the Fn Server itself.  Given the JSON nature of the protocol between server and function container, binary data as it stands can't be transmitted and thus needs to be encoded in some way, probably Base64. This then necessitates the need for an extension flag to the JSON protocol to say what the encoding of the request payload is - support for this would need to be added to the various FDKs first, and once those are rolled out the corresponding change to the Fn Server can be made.\r\n\r\n### Fn Server\r\nFor Fn Server to decide whether or not to set a \"isBase64Encoded\" flag in the JSON protocol, the server needs to know whether the payload needs to be encoded or not. The simplest way is to check the Content-Type header in the incoming request, but the question is whether this can be relied upon to be accurate - for instance nothing stops someone specifying \"text/plain\" as a Content-Type but actually sending some \"application/octet-stream\" data across, potentially leaving the server trying to json-encode binary data which may be problematic.\r\n\r\n### FDKs\r\nThe supported FDKs need to be extended to respect the \"isBase64Encoded\" flag, and if detected simply decode the payload before passing the request to the function handler.  These should be completed and delivered first so that binary-ready functions/FDKs are already in place before the server is updated. Why can't the function get the binary data (image or a video files) from external object store in the short term? re-reading this issue, my comment didn't indicate that this is possible today using the `http` format and my comment was more guided towards going forward, but I think our answer right now is OK, most FDKs support `http` format today. This really came into being on the assumption that http was going away, and wasn't supported everywhere either (e.g. Python FDK I think).  opened #971 to resolve for the interim.\r\n\r\nbut we can have a more illustrious convo around what docker auth should look like here. have some 'food for thought' questions below\r\n\r\nIt\u2019s a UX / product question really, do we want users to log in to an app so they don\u2019t reuse login creds? how do we, or do we store these? should we leave it to where operators have to configure fn for a registry so that operators can trust the images they\u2019re running are from only particular registries? etc.\r\n\r\nkind of makes sense to put on namespace, maybe. i'm kind of one foot in the boat that operators should have to set up registry creds beforehand though (as it is now), apart from absolving us of all risks of having to store registry credentials for any registry as an operator, it would also mean operators could likely restrict the domain of images that operate on their cluster (though i suppose this could be done in a number of ways).  +1 on being able to configure the registry at the app and/or function level.  i think #971 and #1015 close this one, thanks  System tests for hot call functions in json and http format This is a WIP change at the moment, the tests are failing as I don't have pushed the two new images used in system tests. @reclaro still WIP here ? @rdallman I am not working  on it right now I might have some time in the future no ETA at the moment, is that ok for you? no worries - up to you, can leave it open if it's still wip CLosing as we deleted the system tests.   This adds CloudEvent format as I/O format. \r\n\r\nThis now has support for ingestion of CloudEvents as input via HTTP as well as the function I/O format. \r\n This now has support for ingestion of CloudEvents as input via HTTP as well as the function I/O format. \r\n\r\nhttps://github.com/fnproject/fn/pull/948/files#diff-de83fddaf72c41c13bca0608c403ba97\r\n Ehh, not sure why this build is failing:\r\n\r\n```\r\n-- FAIL: TestDatastore/apps#03 (10.01s)\r\n    \tsql_test.go:78: this authentication plugin is not supported\r\n    --- FAIL: TestDatastore/routes#03 (10.02s)\r\n    \tsql_test.go:78: this authentication plugin is not supported\r\n\ttest.go:29: \r\n\t\ttime=\"2018-04-20T18:44:24Z\" level=error msg=\"couldn't ping db\" error=\"this authentication plugin is not supported\" url=\"root:root@tcp(localhost:3306)/funcs\"\r\n\t\ttime=\"2018-04-20T18:44:34Z\" level=error msg=\"couldn't ping db\" error=\"this authentication plugin is not supported\" url=\"root:root@tcp(localhost:3306)/funcs\"\r\n\t\t\r\n\tsql_test.go:78: this authentication plugin is not supported\r\n```\r\n\r\nJust did a rebuild... All that stuff looks so much like all the crap we've been dealing with using different formats. The part I find strange though is that if you have to set all the headers anyways, why not just pass the event in the JSON event format?  Anyways, I'll change the content-type to: `Content-Type: application/cloudevents+json; charset=UTF-8`, good find. \r\n  close for #1055 ?   Followed example [Running load-balanced fn against a pool of runners](https://github.com/fnproject/fn/blob/master/docs/operating/runner_pools.md) and created 2 runners, api, and lb servers.\r\n\r\nWhen executing an async function call the lb exits with the following error:\r\ntime=\"2018-04-17T19:27:49Z\" level=fatal msg=\"Enqueue not implemented. Panicking.\"\r\n\r\nSynchronous call succeeds:\r\ntime=\"2018-04-17T19:27:35Z\" level=info msg=\"Call finished successfully: 01CBAH75F4NG8G01RZJ0000001\"\r\n\r\nPlease advise  Trying to use the curl to update a function doesn't work.\r\n\r\nThe following command fails:\r\ncurl -H \"Content-Type: application/json\" -X POST -d '{\r\n    \"route\": {\r\n        \"memory\": 100,\r\n        \"cpus\": \"0.2\",\r\n        \"type\": \"async\"\r\n    }\r\n}' http://xxx.xxx.xxx.xxx:8080/v1/apps/myapp/routes/hello-async\r\n\r\nwith the following error:\r\n{\"error\":{\"message\":\"Path not found: /v1/apps/myapp/routes/hello-async\"}}\r\n\r\nWhen I put the same link in the browser it returns the following:\r\n{\"message\":\"Successfully loaded route\",\"route\":{\"app_id\":\"01CAREB13JNG8G00GZJ0000001\",\"path\":\"/hello-async\",\"image\":\"xxx/hello-go:0.0.24\",\"memory\":100,\"cpus\":\"200m\",\"type\":\"async\",\"format\":\"default\",\"timeout\":30,\"idle_timeout\":30,\"created_at\":\"2018-04-10T18:52:53.254Z\",\"updated_at\":\"2018-04-10T18:52:53.254Z\"}}\r\n\r\nPlease advise.\r\n Just to make it clear, I am trying to update the existing function.\r\n\r\nThe first command is from the example provided at fn/docs/operating/routes.md. The second command shows the path actually exists.\r\n\r\nIf I understood you correctly, the suggestion is to run the following command:\r\ncurl -H \"Content-Type: application/json\" -X POST -d '{\r\n    \"route\": {\r\n\t\"path\":\"/hello-async\",\r\n\t\"memory\": 100,\r\n        \"cpus\": \"0.2\",\r\n        \"type\": \"async\"\r\n    }\r\n}' http://xxx.xxx.xxx.xxx:8080/v1/apps/myapp/routes\r\n\r\nIt returns the following error:\r\n{\"error\":{\"message\":\"Missing route Image\"}}\r\n\r\nAnd if I do add the image and run the following command:\r\ncurl -H \"Content-Type: application/json\" -X POST -d '{\r\n    \"route\": {\r\n\t\"path\":\"/hello-async\",\r\n\t\"image\":\"xxx/hello-go:0.0.24\",\r\n\t\"memory\": 100,\r\n        \"cpus\": \"0.2\",\r\n        \"type\": \"async\"\r\n    }\r\n}' http://xxx.xxx.xxx.xxx:8080/v1/apps/myapp/routes\r\n\r\nit returns the following error:\r\n{\"error\":{\"message\":\"Route already exists\"}}\r\n\r\nMaybe you could provide an example that updates the existing function.\r\n\r\n\r\n No error returned, but the function was not updated.  My bad, it actually worked. I had to change the path from /v1/apps/myapp/routes to v1/apps/myapp/routes/hello-async. \r\n\r\nJust for others, here is the example that actually worked:\r\ncurl -H \"Content-Type: application/json\" -X PUT -d '{\r\n    \"route\": {\r\n\t\"path\":\"/hello-async\",\r\n\t\"image\":\"xxx/hello-go:0.0.24\",\r\n\t\"memory\": 300,\r\n        \"cpus\": \"0.2\",\r\n        \"type\": \"async\"\r\n    }\r\n} 'http://xxx.xxx.xxx.xxx:8080/v1/apps/myapp/routes/hello-async\r\n\r\nPerhaps someone could change the examples from POST to PUT.\r\n\r\nThanks again! Here is the link: \r\nUpdating function\r\nhttps://github.com/fnproject/fn/blob/master/docs/operating/routes.md#updating-function  *) Naive is now a naive RR algorithm.\r\n*) Both now checks for ctx/timeout in each attempt. @skinowski still want this merged ya? 3 weeks without an objection, I wish everything I wanted in life went like that  Should it be \"y | docker login ...\" though?  The current pure-runner capacity reservation mechanism is faulty and will not work properly. Fix the following problems:\r\n\r\n-   CapacityManager in pure runner needs to be removed. This uses a simple accounting (add/subtract memory) for each request, but this will fail because:\r\n\r\n1.  agent.go internal resource tracker is not in sync with CapacityManager. Current code tries to read internal resource tracker readings in an attempt to keep things in sync, but this is very fragile and hard to maintain. There is already couple of bugs in there, as CapacityManager does not honor config settings as resourceTracker does.\r\n2. hot containers already spawned are not being taken into account. This means, the system can fail in all sorts of ways and can emit 'too busy' if pure runner spawned a ton of hot containers already resident, but still thinks it's got capacity. In other words, hot containers already waiting for requests are not and cannot be tracked by pure runner.\r\n\r\n- handleTryCall - reservation call already synthesizes a Call object. It might as well schedule to run it. There's no need to delay running the Call. Therefore agent.Submit() can be performed immediately instead of waiting for more data. This will cut down latency since if a container spawn needs to be initiated, it needs to be triggered ASAP.\r\n\r\n- modify FN agent to quick fail if there's no cpu & memory capacity. This will work well with handleTryCall and we can safely remove the pure runner CapacityManager. An in-progress work for this is pending approval: #841 \r\n\r\n- pure runner can register a listener to it's wrapped Agent to receive notifications on call.Start(). Upon call.Start() it can send ACK to the LB.\r\n\r\n- include CPU in the pure-runner code. We can use zero for now, but we must not omit this for future, therefore a place holder for it is prudent.\r\n cc @rdallman @kmjohansen   I'm trying to run with puppeteer node.js module to retrieve a web page using headless chrome\r\nIt fails to execute with\r\n Error: Failed to launch chrome! spawn /function/node_modules/puppeteer/.local-chromium/linux-543305/chrome-linux/chrome ENOENT\r\n\r\nHere is my code. \r\nvar fdk=require('@fnproject/fdk');\r\nconst puppeteer = require('puppeteer');\r\n\r\nfdk.handle(function(inp){\r\n  try{\r\n  const makeRequest = async () => {\r\n  const browser = await puppeteer.launch();\r\n   const page = await browser.newPage();\r\n   await page.goto('https://example.com');\r\n   var bodyHTML = await page.evaluate(() => document.body.innerHTML);\r\n   await browser.close();\r\n   return bodyHTML;\r\n}\r\n\r\n  makeRequest().then((result) => {\r\n   return result;\r\n\t})\r\n} catch(e){\r\n\treturn e + ' ' + inp;\r\n\t}\r\n}\r\n)\r\n\r\n Could you share your func.yaml and build process? \r\n\r\nAre you running npm inside fn build  or on your host?  \r\n\r\nif you running npm install prior to fn build then  fn will use node_modules from your build dir -  (e.g. on mac) you may end up with inconsistent binary deps in your node_modules\r\n\r\nIf you can try removing node_modules and running fn build again (this will run npm install on linux inside the container) \r\n\r\n I deleted the node_modules and ran fn build followed by  fn run.   It got the same error\r\nHere is my func.yaml\r\n\r\nname: crawl\r\nversion: 0.0.48\r\nruntime: node\r\nentrypoint: node func.js\r\nformat: json\r\n I've had a look and I think I see the problem: \r\n\r\nWhen I tested this npm did install the correct chromium version, however our node base image is based on alpine and the binaries that npm is pulling are not alpine compatible.\r\n\r\nThere are a couple of options here:\r\n\r\n* Build your own docker image based on (e.g.) a debian node image \r\n* build an alpine image including the binary-compat chromium from alpine (i guess puppeteer lets you specify the chromium binary)  (i googled and found this as an example: https://github.com/rastasheep/alpine-node-chromium) \r\n\r\nIn both cases you will need to put a custom Dockerfile into your function dir (fn will use this in place of the defaults) \r\n\r\nfor reference the default docker file that fn uses for node looks like this: \r\n```\r\nFROM fnproject/node:dev as build-stage\r\nWORKDIR /function\r\nADD package-lock.json /function/\r\nADD package.json /function/\r\nRUN npm install\r\nFROM fnproject/node\r\nWORKDIR /function\r\nADD . /function/\r\nCOPY --from=build-stage /function/node_modules/ /function/node_modules/\r\nENTRYPOINT [\"node\", \"func.js\"]\r\n```\r\n\r\nhope this helps! What is is your base image fnproject/node:dev ?  Can I just use your Dockerfile above and replace base image with something like node:8 ?   I've been on something else but now back trying to get this to work.  I tried using a base image of node:8 or node:9 but it still gets the same error.   Dockerfile looks like this.  Is there something else I need?\r\nFROM  node:9.11.1 as build-stage\r\nWORKDIR /function\r\nADD package-lock.json /function/\r\nADD package.json /function/\r\nRUN npm install\r\nFROM fnproject/node\r\nWORKDIR /function\r\nADD . /function/\r\nCOPY --from=build-stage /function/node_modules/ /function/node_modules/\r\nENTRYPOINT [\"node\", \"func.js\"] I was able to get headless chrome to start with the Dockerfile below.   I'm getting other errors  running it though and am struggling to debug it.  It runs in node outside of FN function.  Where do the console.log messages go?  I'm not seeing anything logged.\r\n\r\n\r\nFROM node:9 as build-stage\r\nWORKDIR /function\r\nADD package-lock.json /function/\r\nADD package.json /function/\r\n \r\n#RUN npm install --save puppeteer@0.11.0\r\n#RUN npm install --save puppeteer@1.3.0\r\nRUN npm install\r\n\r\n\r\nFROM node:9\r\nRUN apt-get update && \\\r\napt-get install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \\\r\nlibexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 \\\r\nlibpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 \\\r\nlibxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 \\\r\nca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget\r\n\r\n\r\nWORKDIR /function\r\nADD . /function/\r\nCOPY --from=build-stage /function/node_modules/ /function/node_modules/\r\nENTRYPOINT [\"node\", \"func.js\"] Anything going to stderr should be stored in fn logs \r\n\r\n(fn logs get <appname> last)  fn log is needing a call-id.  I don't see a call-id on the fn console.  I see in ID but using that doesn't return anything.  where is the actual log file?\r\n\r\n  It shows this when I send a request\r\n\r\ntime=\"2018-04-23T16:07:07Z\" level=info msg=\"Hot function launcher starting hot container\" action=\"server.handleFunctionCall)-fm\" app=crawl app_id=01CBRSDD6XNG8G00GZJ0000001 currentStats=\"{[0 1 0 3] [0 1 0 0 0 3]}\" id=01CBSKDV8DNG8G00GZJ0000001 isNeeded=true route=/crawl\r\ntime=\"2018-04-23T16:07:10Z\" level=info msg=\"starting call\" action=\"server.handleFunctionCall)-fm\" app=crawl app_id=01CBRSDD6XNG8G00GZJ0000001 container_id=01CBSM4F9ANG8G00GZJ0000008 id=01CBSM4F99NG8G00GZJ0000007 route=/crawl\r\ntime=\"2018-04-23T16:07:11Z\" level=error msg=\"api error\" action=\"server.handleFunctionCall)-fm\" app=crawl code=502 error=\"invalid json response from function err: invalid character 'r' looking for beginning of value\" id=01CBSM4F99NG8G00GZJ0000007 route=/crawl\r\ntime=\"2018-04-23T16:07:11Z\" level=info msg=\"hot function terminating\" app_id=01CBRSDD6XNG8G00GZJ0000001 cpus= error=\"invalid json response from function err: invalid character 'r' looking for beginning of value\" format=json id=01CBSM4F9ANG8G00GZJ0000008 idle_timeout=30 image=\"crawl:0.0.60\" memory=128 route=/crawl\r\ntime=\"2018-04-23T16:07:11Z\" level=info msg=\"hot function terminated\" app_id=01CBRSDD6XNG8G00GZJ0000001 cpus= error=\"context canceled\" format=json id=01CBSM4F9ANG8G00GZJ0000008 idle_timeout=30 image=\"crawl:0.0.60\" memory=128 route=/crawl\r\n Thanks,  I can see it the header but it returns nothing when I use it\r\nfn logs get crawl 01CBSQVK7NNG8G00GZJ0000005\r\n\r\nI change my func.yaml to have format:default instead of format:json and now I get everything that I print using console.log() in the response body.   Is that how it's supposed to work? The problem I'm having is that when I set format back to JSON, It returns an error\r\n\"invalid json response from function err: invalid character 'c' looking for beginning of value\"\r\nI'm trying to figure out where the error is coming from but I'm not seeing anything logged.\r\nwhen I use the fn_call_id from the response header and enter\r\nfn logs get crawl  01CBSTXYEGNG8G00GZJ0000009\r\n(where crawl is the name of my function)  It prints nothing.  Shouldn't it print everything that was written to stdout for that request? I got it to work after doing some more debugging.   \r\nI needed to tell puppeteer to wait for network idle\r\n   await page.goto(url, {waitUntil: ['domcontentloaded','networkidle0']});\r\nAnd I changed all my console.log to be console.error so they get logged   The main problem I had, after getting the image working was that the statements console.log(...) or console.info(...) will break the json response.   Any logging needs to be console.error() for it to go to the log file. Question about timeouts.  My node.js process may need to run for longer than 2 minutes and that is the maximum timeout your settings allow.   Can functions return a response and continue to run asyncrounously?   Does the timeout kill the running function? freezes?  So when the next request comes in my function picks up where it left off and now there are two running? If I change it to async, can I create a function method that will return status if you pass in the call_id ?\r\n I tried it with async.  I can't seem to view any logs until it completes.   Is there a way to view the stderr pipe while it's running?   docker logs command give me \"configured logging driver does not support reading\" Regarding stdout, if I need to exec shell child_process I need to make sure nothing gets written to stdout and everything is piped to stderr?  I opened this other issue.  Can anyone explain?\r\nhttps://github.com/fnproject/fdk-node/issues/12\r\n think this is resolved? thanks, re-open if needed  I'm running the sample function project setup\r\nfn init --runtime node myproject\r\nI retrieve the url at http://localhost:8080/r/myproject/myproject\r\nIf I pause for a while and reload the page, another instance shows up in docker ps.\r\nThese keep growing every time I pause for a while and reload\r\nNote:\r\nI had to stringify the results for the hello world example or it just displays [Object]\r\nThe init should have created it using stringify automatically.\r\nreturn JSON.stringify(response);\r\n\r\nRunning Oracle Linux 7.4 running in virtualbox on windows 10 Thank you.  So where is the idle timeout defined?   I have 10 instances of the same container showing up in docker, all in Paused state and they have been there for over an hour.  And it still creates more if I reload the browser. I'm still not understanding.   I understand that a cold function will start a new container for each request.  But why are they not going away after being called,  The seem to go to paused status and remain there.  If manually I run docker unpause then the container goes away.   They won't show up forever in paused state will they? I thought cold function was the default.  How do I change it to be a cold function?  If I defined a hot function then why is it not reusing the same container for each request and instead loading a new instance.  (if there is a delay between requests)?  And they seem to never go away. Thanks.  Sorry for all the questions but I'm new to fn.   It's strange that a property name of \"format\" is used to determine whether it's a hot or cold function.   So format of \"default\" is cold and format of json is hot.  That's confusing.   I tried it with default and now I see no instances in docker and they get loaded each time I refresh the browser so it's slower.   That makes sense.   But when I change it back to json,  now I can load in quick succession and it re-uses the same container that stays loaded.   However if I pause a while and reload, it loads a new instance into docker but the old one is still there.  Why wouldn't it continue to use the same instance since it seems to still be loaded and paused?  What happens to the old one?  Does it never get used again?  If not then why doesn't it get removed?  If I reload the browser in quick succession I only see the one instance of docker.  But if I pause for about 30 seconds and then reload, the browser loads slowly and now I see another instance in docker.  Also I am seeing these messages on the fn console\r\ntime=\"2018-04-04T18:00:27Z\" level=error msg=\"error removing container\" container=01CA8WZEXMNG8G00GZJ000000M error=\"API error (500): {\\\"message\\\":\\\"Could not kill running container b48fb22f76e7f30623835889baccdc06bc9d937eee8da319af078309f0d75d63, cannot remove - Container b48fb22f76e7f30623835889baccdc06bc9d937eee8da319af078309f0d75d63 is paused. Unpause the container before stopping or killing\\\"}\\n\"\r\n8 route=/crawl\r\ntime=\"2018-04-04T18:06:47Z\" level=warning msg=\"docker temporary error, retrying\" app_id=01CA6SCZ9X0000000000000001 cpus= docker_cmd=RemoveContainer error=\"API error (500): {\\\"message\\\":\\\"Could not kill running container b6a18b91bb3eb956f7761c6cf56eb14fa819f291f15f6f4f0457428fd65bde34, cannot remove - Container b6a18b91bb3eb956f7761c6cf56eb14fa819f291f15f6f4f0457428fd65bde34 is paused. Unpause the container before stopping or killing\\\"}\\n\" format=json id=01CA8XBZ7KNG8G00GZJ0000008 idle_timeout=30 image=\"crawl:0.0.15\" memory=128 route=/crawl\r\n Sounds like a docker bug. What version of docker are you using? I've seen this in older versions which refused to remove a paused container. docker version\r\nClient:\r\n Version:      17.06.2-ol\r\n API version:  1.30\r\n Go version:   go1.8.3\r\n Git commit:   d02b7ab\r\n Built:        Fri Oct  6 00:02:23 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.06.2-ol\r\n API version:  1.30 (minimum version 1.12)\r\n Go version:   go1.8.3\r\n Git commit:   d02b7ab\r\n Built:        Fri Oct  6 00:03:48 2017\r\n OS/Arch:      linux/amd64\r\n ah, another OL docker version that doesn't handle this.. Hmm, you can either upgrade docker, or\r\nas a workaround for now, define this:\r\n\r\n```\r\nexport FN_FREEZE_IDLE_MSECS=-1\r\n```\r\n\r\n The FN_FREEZE_IDLE_MSECS=-1  setting did not seem to have any affect.  I still cannot kill a paused container.   Upgrade to what?   I'm on Oracle Linux 7.4 running in virtualbox on windows and I thought 17.06.2-ol was the latest version of docker for that. Ok, It worked if I put that parameter in a file and start it with\r\nfn start --env-file  ./fn-env\r\nIt doesn't seem to use the System environment variable that is there\r\ndeclare -x FN_FREEZE_IDLE_MSECS=\"-1\" I installed 17.10.0-ce version of docker and it seems to be working correctly now.  The container gets removed after about 30 seconds so I see either one or no instances running at any time\r\nI really appreciate your help Np, could you also post what os version you are using? eg /etc/redhat-release? Is this oracle linux 7.4? Oh, saw your post now. Ok, closing this...  There are alternative formulations of this, for instance see\r\n\thttps://www.reddit.com/r/golang/comments/5zctpf/unsafe_conversion_between_strings_and_byte_slices/\r\n\r\nThe problem manifested in the returned values from unsafeBytes occasionally\r\nbeing broken. It's possible that by keeping a reference to the `a` parameter\r\nalive, the original code would still work - however, this definitely seems like\r\na fix.\r\n\r\n(A cast to `[]byte(a)` looks increasingly attractive, for all that it'll\r\nperform small allocations and copies.)  Almost done with this, will continue tomorrow... I think s3 keys have max of 1024 bytes length. Just calling it out here... I think we are OK, if looking at sql.go, 256 bytes of app_id/path even with base64 overhead..  Pulled this out of a conversation in slack:\r\n\r\n> How hard is it for us to move off of stdin/stdout in fn? I'm referring to amending our fdks to support listen/accept tcp model instead of stdin/stdout. IMHO, a busy service should not run on stdout/stdin. which strategically ties us to 1 request at a time. Also docker muxes/demuxes stdio, which is a head-of-line blocking + bottleneck there. With tcp listen/accept model, we can potentially run more than 1 req at a time on a container. But we'd have to limit customer contract.. How feasible is this? Similar to discussions on dropping cold format, can we do another leap and do this as well?\r\n\r\n> Most high level recent languages have built-in (or easy to add) web server/ sock server. So, it becomes bring your own web server.\r\n\r\n> This would open up the possibility of k8s managing function containers as well\r\n\r\n> much more usable code compared to stdin/out... take that function code and make it a server... run as vm, etc.\r\n\r\n> With /dev/tcp support the bash fdk grows by about a dozen lines to support this :-) Open question from @carimura : \r\n\r\n> how would BYOD get its input? and are we considering others running a service (not just OCI service)? IMHO, I think we should take #785 even further. Let's say we agreed on json, we should also move off of stdin/stdout and switch to listen/accept tcp socket (or web server) instead. A few reasons:\r\n\r\n1) stdin/stdout in docker is processed by dockerd/containerd and has mux/demux applied to it. It has head-of-line blocking and processing bottleneck.\r\n2) stdin/stdout does not scale. (Unless we pipeline json requests through docker mux/demux.)\r\n3) serving json as a web server in a container/function is more usable code. (you can use a web server anywhere.)\r\n\r\nwhich becomes BYOW, bring your own web server (or tcp server.)\r\n\r\nWe can support it in fdks, or ask customers to implement a web server. Here's a ruby version:\r\n\r\nhttps://github.com/fnproject/fn/blob/5f9518e400a7d4190ca8a64aa1b988154f86abba/examples/appfunc/rfunc/func.rb\r\n\r\nSome related work before: https://github.com/fnproject/fn/pull/713 , but I'm not sure how to go about the transition. System wide option? Per route option? Or agree on this overlay/communication and hard switch? etc. > which becomes BYOW, bring your own web server (or tcp server.)\r\n\r\nfdk could make an opinion on this in each lang, as well, and then it's not necessarily BYOW, just import the fdk (same as now). > System wide option? Per route option? Or agree on this overlay/communication and hard switch? etc.\r\n\r\ni guess if we reduce all formats to this, then a lot of code dies, but to ship it maybe just an additional format for now? \"jsoncats\" format? there's a lot of decisions around dropping all the formats/cold/etc. we could keep separately and wait to rip the band aid off The problem with all of this and BYOW is that you're bringing your own web server and your function is no longer a lightweight function. And at that point, why even bother using a FaaS at all?\r\n @treeder agreed, this is what Azure does with [their runtime](https://medium.com/@juanpdantur/azure-functions-on-a-docker-container-7e76872c40cf). The only two benefit I can see here, no FDKs, native concurrency, but it makes serverless useless in general, so there are obvious limits when serverless function turns into the lightweight web server.\r\n Also if we start supporting concurrent requests, in the most naive implementation this would require the function developer to have to worry about synchronization, which in my mind was one of the key simplications that serverless less brings to the programming model. I'm not following the argument why this is against serverless/faas. Google/AWS seems to provide a handler for example, they are doing exactly the same thing by providing a handler over likely a web (tcp/grpc) server of their own. We'd be providing best of both worlds: concurrency **and** if you don't want to use fdk (which would use a web server), then customers can implement a web server on their own. Both support for BYOD with additional requirements, but this is a model that actually scales.\r\n\r\nA web server may have more applications, eg. move a vm or actual server into faas or vice-versa, and has more mobility compared to stdin/stdout. In comparison, how many enterprise workloads have we seen using stdin/stdout?\r\n\r\nI recall very recently in Fn slack someone wanted to move their python app, but was thrown off by one request at a time restriction. Not surprisingly this was an app already handling concurrency, with DB connection pool, etc. He said;\r\n\r\n\"@tolga, thanks for that description. I think if we ended up adopting Fn at our studio we would need to implement our own way of doing the concurrent server approach. Not everything can spin up to a ready state in sub-second time, and it seems like too much overhead to be spinning them up on concurrent access. We would end up having to increase the idle timeout alot to keep all these instances warm so they can keep servicing load.\"\r\n\r\nand \r\n\r\n\"Is it better to have 1000 instances running with 1000 database connections?\"\r\n\r\n\r\n\r\n  to @gviedma 's point I think the hardest thing is going to be controlling concurrency and resources around changing to having a concurrent request per container model. in the new model we change from something where it's a __function__ gets X amount of resources, for cpu, ram, disk, etc. and if we move to having concurrent requests in a container at a time it's much harder to grasp resource utilization from a user perspective and nigh impossible for us to give the previous per function resource semantics, and the semantics would be something like a __container__ gets X amount of resources, for cpu, ram, disk, etc. and there's then likely some separate api to set concurrency on a container itself. we could default this to 1 and get the exact semantics we have now, where we wait for a response, and then look at adding an option to let this tick up to some N at a users wishes, to handle the case @skinowski brings up from a user the other day. this is maybe a good trade off, we've had similar conversations around this before and it could be treated as a kind of 'power user' feature where we let users shoot themselves in the foot with it if they want, but out of the box we have the same behavior we have now. we could even keep the shutdown on timeout behavior like we have now to effectively disallow user requests that go over the timeout to muddle the state of the container for subsequent requests, and maybe that's a pill we can swallow until we figure out something better. Nothing in this suggestion makes the user *need* to handle concurrent requests. `max concurrency` is a thing most FaaS I've seen tend to support, and we could still default it to 1 if we don't want to spook people.\r\n\r\nRegarding this being somehow anti-serverless, I don't really get that.  Seems to still support the principles in the serverless manifesto. \"Why even bother using FaaS at all?\" - No infrastructure visible to the user, transparent scaling, not paying for idle, etc etc. @gviedma Synchronization is a good point. I agree with you that this adds complexity, but also note that we do provide CPU resource to these functions. So, we are basically telling operators/users that they can use multiple CPUs. In addition, functions if they are implicitly or explicitly forking threads already need synchronization in our eco-system. (eg. if you try to access previous request or stdin/stdout in a go routine for example, you can be executing parallel to another go routine handling next request.) There's also a few technical reasons in fn agent we'd want to do this... For example, in stdin/stdout model, what do you do if your request timed out? How do you ensure next request will go through stdin/stdout? Can you keep those pipes clean between requests? How do you handle a response that is too big? And still process next request? Today, in most of these cases, we have to kill the hot container since we cannot recover. Web/tcp servers/clients already have solved these problems. I agree with @treeder's earlier comment asking why even both to use FaaS if you require developers to take on so much responsibility and complexity.  I love the Fn experience over the typical Heroku-style cloud native app which requires you to use an embedded web container. The whole point of FaaS is the ability to deploy small simple chunks of functionality that don't require an embedded container--the platform is the \"container\".  So if the platform is lacks functionality that users need let's focus on those things.  If you don't like the FaaS model then you have lots of other deployment choices out there--many of which are also serverless, to @mjg123's point, but aren't FaaS. related: https://github.com/fnproject/fdk-node/issues/5\r\n\r\nAnother difficult issue due to stdout/stderr contract. Here's another one:\r\n\r\nhttps://github.com/fnproject/fdk-ruby/pull/6\r\n\r\nSeems to me, stdin/stdout processing is not that simple and puts burden on fdk or client code.\r\nCompare the above code with a web handler approach below. It's much more elegant:\r\n\r\nhttps://github.com/fnproject/fn/pull/713/files#diff-dc67ed88c33a996a8f423acaa5172ff0 And you constantly have to worry about function code itself or the libraries that it pulls in could write something to stdout and corrupt the output. This will kill the hot container. Compare this to processing on a per request socket. It's more robust and we can probably get rid of significant amount of Fdk code that we have support. nodejs, ruby fdks are overly complex due to custom parsing. Modern web handler approach, where most of these languages have already built in http/tcp service support, can take that down to a few lines of code. See my example post above (Travis's ruby example.)\r\n  Protocol version helps to identify whether the FDK can handle request or not. Closing as wontfix for now - Cloud events format will be inherently versioned.   Right - so Have I understood this correctly: \r\n\r\n* the request scope contains some information (e.g. tenant ID in header or domain etc) that is not part part of the model\r\n* A datastore (presumably extended) needs to consume this in order to load the correct models\r\n* In single-tenant Fn this is not necessary \r\n\r\nIf that is the case I think pushing the http request down to the datastore leaks out a couple of abstractions that might be better-kept tight. \r\n\r\nAn alternative solution would be:\r\n\r\nIn the system using a multi-tenant solution, inject an middleware that extracts the exact information required by the datastore into the context object  (see https://github.com/fnproject/ext-dns/blob/master/dns.go) \r\n\r\nand then consume that from ctx.Value in the datastore \r\n\r\n\r\n @zootalures suggestion would work and prevents us from having to pass on the _http.Request_ inside `GetApp` and `GetRoute`. The downside is relying on special values in the context to be written and read by different layers, making it potentially more difficult to reason about the correctness of the code. Since the middleware extensions mechanism meets the multi-tenancy requirements without requiring changes to the abstraction unnecessary for the single tenancy case, I am closing this PR. *sigh* /arg #819   We should be able to extend the RunnerCall interface (and the underlying agent.call) without significant cost, rather than using a different mechanism to pass the information.\r\n\r\nSee #879 for an alternative implementation. What do you think? Closed in favor of #880  While working on a demo app, I realized we don't have a nice way of dealing with errors from functions. \r\n\r\nOur [current function output format](https://github.com/fnproject/fn/blob/master/docs/developers/function-format.md#output) doesn't have any way to respond with an error, other than using the `protocol` section, but obviously, that's very protocol specific and not the best way to do it. \r\n\r\n```json\r\n{\r\n  \"body\": \"{\\\"some\\\":\\\"output\\\"}\",\r\n  \"content_type\": \"application/json\",\r\n  \"protocol\": {\r\n    \"status_code\": 200,\r\n    \"headers\": {\r\n      \"Other-Header\": [\"something\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nI propose we add some error response fields to our core output format to handle these nicely (very similar to [Lambda's format](https://docs.aws.amazon.com/apigateway/latest/developerguide/handle-errors-in-lambda-integration.html)):\r\n\r\n```\r\n{\r\n  \"error\": {\r\n    \"message\": \"an error occurred, blah, blah\",\r\n    \"type\": \"Exception\",\r\n    \"trace\": \"stack trace\"\r\n  }\r\n}\r\n```\r\n\r\n* message - required\r\n* type - optional\r\n* trace - optional\r\n\r\nThen the server can deal with these errors appropriately based on the protocol being used. eg: For the default HTTP route, this could return a `400` or `500` (?) with the error message in the body, optionally overridden via the protocol status code. \r\n\r\n## Protocol specific responses\r\n\r\nUser's can continue to set protocol specific responses, like they can right now, eg:\r\n\r\n```\r\n{\r\n  \"error\": {\r\n    \"message\": \"an error occurred, blah, blah\",\r\n    \"type\": \"Exception\",\r\n    \"trace\": \"stack trace\"\r\n  },\r\n  \"protocol\": {\r\n    \"status_code\": 401,\r\n    \"headers\": {\r\n      \"Other-Header\": [\"something\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## FDK's\r\n\r\nFDK's should all have a nice an easy way for a user to respond with an error for an invocation. \r\n\r\n* Node can do something like Lambda\r\n* Go should allow an `error` return\r\n* Java should allow a `throw Exception`\r\n* etc. \r\n\r\nHow can a developer override things for certain protocols in the FDK?  Perhaps with special Error objects that allow them to do that. For instance, Go might have an `HTTPProtocolError` that user can use like this:\r\n\r\n```go\r\nreturn &fdk.HTTPProtocolError{message: \"uh oh\", statusCode: 401}\r\n```\r\n I'm up for this one. However, i am bit disagreed with the FDK part. I would say that for Golang i would pick `panic` as the only valid case that will make FDK fill the error section of the response body, ordinary error (`error.Error`) doesn't mean much to us except that something went wrong, but doesn't mean something similar to exceptions in Python or Java , it should just lead to HTTP 500 and error body.\r\nFor FDK-go, i got used to write a wrapper:\r\n```go\r\nfunc withError(_ context.Context, in io.Reader, out io.Writer) {\r\n\terr := myHandler(in, out)\r\n\tif err != nil {\r\n\t\tfmt.Fprintln(os.Stderr, err.Error())\r\n\t\tfdk.WriteStatus(out, 500)\r\n\t\tout.Write([]byte(err.Error()))\r\n\t\treturn\r\n\t}\r\n}\r\n```\r\nit does great job and let the handler to return the error.\r\n\r\nFor any other languages like Java, Python i would agree that any throwable object (exception) should make the FDK write the error section of the JSON response body.\r\n I think you're missing the point, your example is HTTP specific, that's what this is trying to avoid. The FDK shouldn't have top level functions like `WriteStatus` or anything HTTP specific. And an error in Go is almost exactly the same intent as Exceptions in Java. Panic is for something unexpected, errors are not unexpected. \r\n Okay, if we want to step away from an HTTP stuff we would need to change the JSON response format as well along with what you're proposing because we still have the status code, headers. So those just have to go away, however, there's a place for trigger-specific response content that may be in the protocol section.\r\n @denismakogon that's what this issue is all about isn't it?  In runner, we [trying to identify](https://github.com/fnproject/fn/blob/master/api/server/runner.go#L121-L132) whether the function's response is a JSON object.\r\nUnfortunately, it works only for very specific JSON objects that starts with `{`, but the JSON objects could be very different, here's at least one valid case of the JSON object:\r\n```json\r\n[\r\n    {\r\n        \"a\":\"b\"\r\n    },\r\n    {\r\n        \"a\":\"b\"\r\n    }\r\n]\r\n```\r\n\r\nTo solve this, we need to change the way we do the detection, here's a link to the solution i propose: https://play.golang.org/p/K6bw6eeeu9l\r\n At some point we have to say that the user has to set the content type to what they want, it's not realistic for users to rely on us to have perfect content type detection. This existing is mostly an artifact of some code sliding in to default to json content type when this is not even generally the case, and certain user routes relying on this behavior. It was a mistake to let that behavior in to begin with.\r\n\r\nDoesn't seem like it's worth it to read an entire body into another byte slice simply so that we can check content type (as proposed), the stdlib detect only reads the first 500 bytes potentially but does no copying. If the opening bracket for a list does not conflict with any other content types, then we can consider adding that case. But a string or number are also valid json values and we can't detect that. It's worth reading the RFC since my words mean less than theirs: https://tools.ietf.org/html/rfc7231#section-3.1.1.5\r\n\r\nIn any event, strongly prefer encouraging users to set their content type, per the RFC reasoning.  Oh, one other question: do we need new extension point(s)? I\u2019m not really familiar with the mechanics of extensions, but I didn\u2019t see anything along those lines.  There's also the opposite problem, i.e. an extension failing and causing the system to shut down. This could be helped by what I've added in #834: using that mechanism extensions could register their own contexts (say, if they're running servers that can be cancelled) and the main thread will wait on those. Maybe we need more than that though. the canonical interface we have for this tends towards implementing `io.Closer` (in this example, `ExtServer.Close()`, and maybe `Extension.Close()` ?). easy enough to plumb down the top level object as only an io.Closer escape hatch if we want the privates in the trenches to initiate shutdown. Closing for now since we have a few workarounds.  For some types of errors, we might want to notify\r\nthe actual caller if the error is directly 1-1 tied\r\nto that request. If hotLauncher is triggered with\r\nsignaller, then here we send a back communication\r\nerror notification channel. This is passed to\r\ncheckLaunch to send back synchronous responses\r\nto the caller that initiated this hot container\r\nlaunch.\r\n\r\nThis is useful if we want to run the agent in\r\nquick fail mode, where instead of waiting for\r\nCPU/Mem to become available, we prefer to fail\r\nquick in order not to hold up the caller.\r\nTo support this, non-blocking resource tracker\r\noption/functions are now available.\r\n\r\nThe solution is not perfect as signaller channels\r\nmay be lost and it might take additional signal attempts\r\nfor that call (each costs 200msec) to get this response. clarification of behavior shown: the only case we want to immediately bail and not block is on resource tokens, right? not if create container gets hung up, docker pull, etc., right? yes, this is only for cpu & mem allocation, AKA do not wait on cpu & mem. thinking out loud: if we set the slot wait time to something pretty small, like 1ms, we would get most of the benefits here without a lot of plumbing, and without 1ms (could provide some back pressure) -- in addition it would cover cases like rogue scheduling onto a new server would quickly fail and hopefully get retried on a server with the image, with the bonus that the slot launcher on the new guy might launch a container for the next go round. i guess the hot launcher is kind of unpredictable since it's polling and will most likely (199/200 (ms) chance) sample for any given call when it's not queued (since it times out after 1ms). \r\n\r\npart of me thinks some kind of 2 phase 'just launch a hot container' [w/o a call] & 'run this call or timeout immediately' is in line with what we want, maybe this is the first piece of that, but it seems like we really want to either get a slot or bail which is higher up (little plumbing required). not sure, really. of course we don't have a 'just launch a hot container' button atm, but it wouldn't be so hard to add, and with our ejection it can manage scaling down itself. then the router can just run around and (with some idea of resource saturation itself, which will be required) tell 3 guys to launch a container and then try to round robin through them with a call until one can run it. thinking out loud (and prob in the wrong place) I think two approaches are complementary. Shrinking slot wait is a good way to pre-warm a fleet as long as the caller (LB) has smarts to coordinate it, but slot wait time includes a set of operations which any could trigger the timeout. On the other hand, cpu & mem isolated quick fail allows the caller to rule out capacity issues only.\r\n\r\nI think when this cpu & mem quick fail is enabled, 200 msec should be set to much faster pace. And probably not much performance impact due to reduced queuing.\r\n\r\n Wow, you can send golang channels through a channel... I learn something new every day. :)\r\n\r\nThis looks like it will help a lot, but I'm still a bit confused about all the moving parts and how they play with the container creation logic. As far as I understand the producer is monitoring the stats (queued, running etc) and makes a decision to start a new container based on those; that decision seems to take into account containers that are waiting for resources to be started.\r\n\r\n```\r\nstartWaiters := cur.containerStates[ContainerStateWait]\r\n...\r\n// we expect resource waiters to eventually transition\r\n// into starters.\r\neffectiveStarters := starters + startWaiters\r\n```\r\n(in `isNewContainerNeeded()`)\r\n\r\nIs there a possibility that while a container is waiting on the resource token channel it still figures in this calculation (because until it receives the capacity error it still looks in a `ContainerStateWait`), so another call could think that it can be queued / accepted because \"there's a container which will eventually start\"? Is such a race between calls possible? @hhexo Yes, so, at the time of this decision, there's cases where momentarily have excess idle containers, waiters, etc. which might cause agent to conclude that no new container is needed. But this should be remedied by polling from clients. For this operating mode, we should raise the polling to something faster eg. 20 msecs. In other words, isNewContainerNeeded() is allowed to make a mistake, but eventually correct it. related #853  Ping...\r\n\r\nI still think this is a valuable option. To be able to disable waiting on CPU/Memory. Isolating these resources provides a good way to run a function, and waiting knowing that you are waiting because\r\nthe agent will most likely be able to run this without exceeding cpu & memory capacity of that server.\r\n\r\nAllows a simple LB layer to probe/retry agents without any significant blocking on CPU & Memory. Added some comments (and a small bug fix in there...)  The Python tutorial didn't work as written.\r\n\r\nPlease consider these updates which I tested against a local (brew installed) version of fn installed on March 9 2018. Worth mentioning that func.py and sample.payload.json don't have any bearing on what \"fn init\" generates for you nowadays and it might make sense to get rid of this stuff.\r\n\r\nNote1: \"fn test\" doesn't work due to a separate issue. Hopefully that issue will be resolved such that the tutorial as written will start working.\r\n\r\nNote2: I have not signed the CLA and won't be able to do so until next week. ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [Carter Shanklin](https://github.com/cartershanklin)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community!  @skinowski We are disabling this flakey test  @skinowski New flappy test is tracked in #822, old flappy test is tracked in #796  While talking with @vshiva , the concept of functions being separate from routes came up and it got me thinking a bit. \r\n\r\nCurrently, a `route` is both a function definition and an HTTP route to that function. But what about when you don't want or need an HTTP route to the function?  \r\n\r\nA `function` needs the container image reference, format, memory, timeout, etc. It doesn't care about HTTP or what protocol is being used to call it, it's only dependency is a Docker registry. \r\n\r\nA `route` as it is right now needs things like: path, image name, some HTTP specific things like content-type. If we separate functions, then it would need a reference to a function which isn't simply a Docker image URL. \r\n\r\nWhat's the benefit?  Well as @vshiva pointed out, say you have a UI that lets you tie things together: \"when X happens, run this function with X's event data\". How that's hooked together behind the scenes doesn't really matter to the user, could be via a message queue, could be a webhook. \r\n\r\nThis got me thinking of the decades old \"function hub\" conversations (cc @carimura), but perhaps more of a \"function registry\". In it's simplest form, it would just be a way to CRUD a function object with the things above. Then when we create routes, we give it the function URL which is a reference into the registry. This could be a separate API in itself, but probably build it into Fn initially. \r\n > Currently, a route is both a function definition and an HTTP route to that function. But what about when you don't want or need an HTTP route to the function?\r\n\r\nThis statement implies to Triggers API. So, we have apps, functions, and we have API to define the triggers, say I want to create an HTTP trigger to my function. It really makes sense to start this type of the discussion. Also, we already have the type of the event in JSON protocol which is defaulted to `http`, so having the Triggers API really makes sense.\r\n\r\n> A route as it is right now needs things like: path, image name, some HTTP specific things like content-type\r\n\r\nSo, in future, i would like to turn the route to a function into a trigger type in terms of HTTP triggering. It would need to have a reference to the function and an HTTP path attribute, event the route config would no longer make sense because of the configuration really belongs to the function rather than to a route.\r\n\r\n The required config would belong to the function (ie: it defines it's own input), but the actual values should be somewhere else, defined by the user who's using the function. The app level config still makes sense, maybe the route level config does too. If it's using the example above where there's no route, then maybe config should be defined in the trigger?   yes I've been struggling a bit with our coupling of routes and functions. The market tends to think of things as functions and triggers ala the major providers as well as many of the other frameworks. Denis mentions this above.\r\n\r\nI'm 100% behind splitting the two apart.  > If it's using the example above where there's no route, then maybe config should be defined in the trigger?\r\n\r\nHow do you see the trigger config, what that would be for? So, the app config is a global thing for functions, function's config is unique things to itself. I do see a need to leave headers but strip out config because it has nothing to do with a route itself (this is what we have right now) but useful for the function.\r\n\r\nBut on the other side, assume i want to trigger a function with MQ event, i need to tell the Fn how to connect to the MQ, so trigger config may be useful. > But on the other side, assume i want to trigger a function with MQ event, i need to tell the Fn how to connect to the MQ, so trigger config may be useful.\r\n\r\nI think the intent of trigger config was to move the map[string]string of `route.Config` to `trigger.Config`, not the configuration of the trigger itself, but rather, the configuration passed to the function at execution time.\r\n\r\ntrigger configs, as interpreted otherwise, should probably not exist in fn but really we should have interfaces for various streams of events and each of those can configure itself. I have a proposal in the works on this, though it's been sidelined until migrations work [for me]. I do think we need to change the eventing model of fn to something more robust than simply http events and our own async bus. Loosely based on https://github.com/apache/incubator-openwhisk/blob/master/docs/feeds.md as openwhisk seems to have done a great job here for definitions for things like kafka, however, it does not seem to have a very good answer around the 'push-based' model which I think we need to support as well. I also don't think this necessary precludes splitting them entirely apart, as we have it now essentially each function's identity is a default route and 'it works' but we need additional ways to say call function X when I pull a message from a topic, too, without having to thread through the http frontend. Implementation details aside, separating a function from the invocation mechanism clearly makes sense.  I always assumed we would be adding additional mechanisms as we moved forward. +1 from me\r\nCouple of thoughts: \r\n\r\nI don't  think this should/needs to make any commitments about who owns the link between a function and its source - and I think eventually both \"source owns link to fn\" and \"fn owns link to source\" are likely and possible. \r\n\r\ne.g. \r\n* For local/simple HTTP gateway makes sense to orchestrate this from fn  - adding an HTTP trigger in func.yaml implies that Fn takes responsibility for hooking it up to it's (the current) HTTP gateway\r\n* for more complex (non FN) gateway makes sense to specify a fn ID/ref in the config\r\n* for (some other event broking stack) it's that plaforms stack to solve\r\n\r\nIn general, leaving this open means we can defer the choice as to whether Fn needs to do an integration without compromising the abilly for somebody else to do that as a client. \r\n\r\nWhere a function is not published, I suggest we look at an authenticated API call pattern to send events directly to functions (e.g. a model based on current raw JSON), ideally one that supports streaming and back pressure. \r\n\r\nSo, if you agree with above this makes sense in lots of ways for me: \r\n\r\n* We can keep the current \"simple\" HTTP gateway model (everything we have now works - good simple/first experience ) \r\n* making a function public is an explicit choice (no strange oddness around authed/unauthed access to the single HTTP endpoint) \r\n* Stream sources are left as something that can either be solved within (e.g. Async calls) or outside the platform (e.g. Kafka Connect adapter) \r\n @denismakogon  @treeder \r\n\r\n> So, in future, i would like to turn the route to a function into a trigger type in terms of HTTP triggering. It would need to have a reference to the function and an HTTP path attribute, event the route config would no longer make sense because of the configuration really belongs to the function rather than to a route.\r\n\r\nExtending that line of reasoning we will have this generic notion of a `Event` that is associated with / mapped to a function via a Trigger. ( https://github.com/cncf/wg-serverless/tree/master/whitepaper#event-source-to-function-association )\r\n\r\nSo far example.\r\n`Function` Foo  `Trigger` on  `HTTP Event` (GET, POST) at `/path`\r\n`Function` Foo `Trigger` on `Message Q / Topic Event` \r\n... so on and so forth.\r\n\r\nso we can end up with a whole class of events that could comply to https://github.com/cloudevents/spec/blob/master/spec.md\r\n\r\nKey aspect above would be to associate/map a function with multiple `Events`. I.e same function could be trigged by multiple event sources. \r\n\r\n@treeder \r\n> The required config would belong to the function (ie: it defines it's own input), but the actual values should be somewhere else, defined by the user who's using the function. The app level config still makes sense, maybe the route level config does too. If it's using the example above where there's no route, then maybe config should be defined in the trigger?\r\n\r\nThe required config can be captured in an association/mapping object. \r\n Freeing the Function to truly represent the Code. ( a container image for example) https://docs.aws.amazon.com/lambda/latest/dg/API_GetEventSourceMapping.html.\r\n\r\n  Thinking about it, can somebody provide me with a concrete/real use case where somebody would need to attach two triggers to the same function? \r\n\r\nI can't think of one.\r\n\r\n \n    \nExamples drawn from, say, CD might arguably be the same trigger with different parameters.\u00a0\nIf i have multiple sources for those events i may want to hand out credentials infividually (or manage loggong/audit for those separately).\n\n\n--\u00a0Excuse typos. Phone screens don't make great ketbroads.\u00a0\n\n-------- Original message --------\nFrom: Owen Cliffe <notifications@github.com> \nDate: 08/03/2018  8:33 a.m.  (GMT+00:00) \nTo: fnproject/fn <fn@noreply.github.com> \nCc: Subscribed <subscribed@noreply.github.com> \nSubject: Re: [fnproject/fn] [discussion] Splitting functions from routes\r&nbsp; (#817) \n\nThinking about it, can somebody provide me with a concrete/real use case where somebody would need to attach two triggers to the same function?\nI can't think of one.\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n  \n  \n\n\n\n\n{\"api_version\":\"1.0\",\"publisher\":{\"api_key\":\"05dde50f1d1a384dd78767c55493e4bb\",\"name\":\"GitHub\"},\"entity\":{\"external_key\":\"github/fnproject/fn\",\"title\":\"fnproject/fn\",\"subtitle\":\"GitHub repository\",\"main_image_url\":\"https://cloud.githubusercontent.com/assets/143418/17495839/a5054eac-5d88-11e6-95fc-7290892c7bb5.png\",\"avatar_image_url\":\"https://cloud.githubusercontent.com/assets/143418/15842166/7c72db34-2c0b-11e6-9aed-b52498112777.png\",\"action\":{\"name\":\"Open in GitHub\",\"url\":\"https://github.com/fnproject/fn\"}},\"updates\":{\"snippets\":[{\"icon\":\"PERSON\",\"message\":\"@zootalures in #817: Thinking about it, can somebody provide me with a concrete/real use case where somebody would need to attach two triggers to the same function? \\r\\n\\r\\nI can't think of one.\\r\\n\\r\\n\"}],\"action\":{\"name\":\"View Issue\",\"url\":\"https://github.com/fnproject/fn/issues/817#issuecomment-371416942\"}}} If I run a social network and have a function that resizes an image to a configurable size and outputs that image:\r\n\r\n* it's likely that there are multiple different types of images. say, profile photos, which may need smaller thumbnails drawn as well as user uploaded photos which may want to keep varying sizes of (for mobile, desktop, etc.)\r\n* it's likely that as a storage backend these images are not all going to be stored in the same spot to do post-processing from (though, this isn't impossible, it seems unwise at a certain scale..), but I would like to trigger the drawing of the various image sizes needed for each image after the user uploads it into my storage system (say some s3 store). this means when there is a new user and they upload their first photo, the system needs to create a bucket to put these photos and attach a trigger onto that bucket w/ the photo resize function.\r\n* it follows that: the same function can be used to do resizing across all of the various images (woo!), but I will need to attach it to each user's photo bucket(s) (and most likely wire up another function to store the post-processed images somewhere handy)\r\n\r\nI think that works as an example, but i'm only 1/2 a cup in today. Or any case where multiple teams reuse the same function but give it its input in a a different way? (ie one team uses Kafka while another just wants webhook)? >Thinking about it, can somebody provide me with a concrete/real use case where somebody would need to attach two triggers to the same function?\r\n\r\nUse cases akin to Biz logic re-use\r\nFor example, \r\nFunction that can generate invoice which can be invoked in an offline mode due to a event in a queue or a user clicking a button that says generate a invoice now. ( Which is a HTTP Trigger)\r\n\r\nThis gives us the notion of Functions as a collection of library which can be composed to do a specific business flow by higher level services/tools . Here's some more details on how this could work. \r\n\r\n## Objects\r\n\r\nThis breaks Route and Function apart. Routes depend on functions, but not the other way around. \r\n\r\n```go\r\ntype Function struct {\r\n        ID string\r\n\t// repo-host/Namespace/Name:Tag make up the fully qualified name\r\n\tNamespace string\r\n\tName      string `json:\"name\" db:\"name\"`\r\n\tMemory      uint64          `json:\"memory\" db:\"memory\"`\r\n\tCPUs        MilliCPUs       `json:\"cpus\" db:\"cpus\"` // hopefully this is just a hint?\r\n\tType        string          `json:\"type\" db:\"type\"`\r\n\tFormat      string          `json:\"format\" db:\"format\"`\r\n\tTimeout     int32           `json:\"timeout\" db:\"timeout\"`\r\n\tIdleTimeout int32           `json:\"idle_timeout\" db:\"idle_timeout\"` // ?\r\n\tCreatedAt   strfmt.DateTime `json:\"created_at,omitempty\" db:\"created_at\"`\r\n\tUpdatedAt   strfmt.DateTime `json:\"updated_at,omitempty\" db:\"updated_at\"`\r\n}\r\n\r\ntype FunctionVersion struct {\r\n        //  FunctionID reference to Function\r\n        FunctionID string\r\n        // Tag/Version is the version tag of a specific build\r\n        Tag/Version string \r\n        // The Docker image for this build.\r\n\tImage       string          `json:\"image\" db:\"image\"`\r\n        // QUESTION: Update the other params for each version or keep them all at the top level?\r\n\tCreatedAt   strfmt.DateTime `json:\"created_at,omitempty\" db:\"created_at\"`\r\n\tUpdatedAt   strfmt.DateTime `json:\"updated_at,omitempty\" db:\"updated_at\"`\r\n}\r\n\r\ntype Route struct {\r\n\t// The grouping of routes into an app is specific to this type of trigger\r\n\tAppName string `json:\"app_name\" db:\"app_name\"`\r\n\tPath    string `json:\"path\" db:\"path\"`\r\n\t// Function a fully qualified function name referencing a function in a repository, similar to a Docker image. eg: `funchub.fnproject.io/jimbo/somefunc:1.2.3`\r\n\tFunction string `json:\"function\" db:\"function\"`\r\n\t// Config is required by the function, but set in the trigger, ie: the caller.\r\n\tConfig Config `json:\"config,omitempty\" db:\"config\"`\r\n\t// Annotations trigger specific?\r\n\tAnnotations Annotations     `json:\"annotations,omitempty\" db:\"annotations\"`\r\n\tCreatedAt   strfmt.DateTime `json:\"created_at,omitempty\" db:\"created_at\"`\r\n\tUpdatedAt   strfmt.DateTime `json:\"updated_at,omitempty\" db:\"updated_at\"`\r\n\t// Trigger specific\r\n\tHeaders Headers `json:\"headers,omitempty\" db:\"headers\"`\r\n}\r\n```\r\n\r\n## Deploying\r\n\r\n`fn deploy` could work the same to a user, but we build, push, update the `function` object then the `route` object. One extra step.\r\n  is a 'route' a first class citizen or is it a 'trigger' that happens to be an 'http trigger' where we have something along the lines of 'annotations' to have trigger specific stuff (for http: headers, path)? this would be more easily extensible (2 birds), but I could see a case for routes being first class too I guess.\r\n\r\nno grouping of functions? both seem potentially useful (by app), there are likely subsets of functions that are related vs having a giant pool of functions and having to determine their relationships from triggers or keeping an excel sheet or something.\r\n\r\nshould function have id and version and be able to point lookup past versions at a certain id? otherwise, how to see history for a certain function? are we imposing a version format so that these could be guessed or otherwise listed?\r\n\r\n(thanks for spec, a great start) There doesn't seem to be a standard language yet for this stuff. AWS uses \"event sources\", Azure uses triggers, OpenWhisk uses triggers (although they call funcs `actions` so....)\r\n\r\nI vote for Triggers being first class.\r\n Am going to try to calcify some of the material from this thread into something cohesive to pick over. One thing that sticks out is management of the routing table itself being a part of fn, as well as fn owning the triggers & their configurations. I think it may be easier for fn server not to own these at all, only a set of functions (perhaps under an app/namespace/both), and let triggers do their own configuration where they simply push events to fn and fn exposes a minimal surface area to post events (an http endpoint and a grpc endpoint?) and get a response. we can expose from `fn start` an fn that embeds a gateway (which would be similar to fnlb in nature, but with a routes api, and that isn't directly a proxy but also translates current http event format to a [json] concrete event format), that has an api for the routing table in it -- this may sound confusing, I think it should be straightforward and may make more sense once fleshed out -- anyway, it would give similar behavior to what we have now for the OSS 'getting started' story to keep that easy, but be much more flexible to more complex installs. the critical steps here seem to be extracting function and event out, hope to have an api document as well as a design document to work off of. the basic idea being that a trigger is capable of doing its own event generation, transformation to an fn event and invocation against fn, where e.g. for http it translates url paths to a function id. pre-empting feedback of general idea ^ - open. \r\n\r\nimo we should wait to add versioning and namespacing and cloud events format as this is a pretty big shift in its own right. \r\n\r\nlow hanging fruit questions (some edited in):\r\n\r\n* are apps sets of functions?\r\n* are apps sets of routes?\r\n* spending some time traversing the nulb stuff to figure out requirements there, it seems that exposing a grpc endpoint to submit events is enough there? a protobuf spec of our 'event' format seems easy enough to maintain alongside json.\r\n* a func file should only define a function? in theory, multiple triggers or routes within a given trigger could point to a certain function. the 1:1 is less clear here.\r\n Thanks for bringing this up.\r\nFirst of all, I'd like to answer the following questions in the first place:\r\n\r\n> are apps sets of functions?\r\n\r\nThat does seem to be. However, the concept of applications we have implies to the shared configuration for a set of functions.\r\n\r\n> are apps sets of routes?\r\n\r\nI don't think so. The high-level resource is the application. Each application has a set of functions. Each function can have N unique triggers. Triggers by themselves are independent, however, to trigger a function user have to create an association between function and the trigger.\r\n\r\nBeen thinking about how the application could be useful. I really like the concept of the Azure logic apps. So, the application defines the pipeline of \"actions\" where a user just needs to say this \"trusted\" function is an entry point to the app, do some work, send the email, etc.\r\n\r\ncc @carimura azure logic app concept makes me think of the functions hub one more time but in the context of the \"trust\" (a certain committee with approval rights) functions.\r\n\r\nHowever, logic app concept fits better suites to the Flow, doesn't it?\r\nSo, would that mean that Fn should be a pretty low-level tool that can do functions with triggers without the concept of applications?\r\n\r\nTo sum up, Fn should do functions, triggers and function-to-trigger-binding.\r\n\r\n> a func file should only define a function?\r\n\r\nIt might have a trigger definition, but it's not required.\r\n\r\n> in theory, multiple triggers or routes within a given trigger could point to a certain function. the 1:1 is less clear here.\r\n\r\nSo, Fn should have an API endpoint that describes available triggers (http, kafka, grpc, mqtt, etc.) and there should be an API to build an association between the function and the trigger (user can create 2 grpc paths to call the function, user wants to call a function by pushing the message into 2 different topics and so on).\r\n\r\n thanks for replies. immediate one that sticks out is:\r\n\r\n> So, Fn should have an API endpoint that describes available triggers (http, kafka, grpc, mqtt, etc.) and there should be an API to build an association between the function and the trigger (user can create 2 grpc paths to call the function, user wants to call a function by pushing the message into 2 different topics and so on).\r\n\r\nintuitively it seems like a trigger is the one that glues some thing like a queue or a route to a function, not fn server itself. it's hard to think about making a generic binding that works for every trigger type that would be nice to work with, and it also doesn't seem like fn server necessarily cares about this association, if it simply consumes events and outputs them. the thinking is that each trigger has its own way of mapping its specific ingest points onto functions, and the api could be there; for http, this could be a url path, for instance (as it is now). to the user, if we by default have an embedded gateway that has this `url path -> function` mapping, we keep the behavior we have now, but the route mapping is pushed into the gateway, and not in fn server itself (as now). anyway, seems odd to have fn server store triggers and mappings, and the ux might get pretty bad trying to do it generically. thoughts? > I don't think so. The high-level resource is the application. Each application has a set of functions. Each function can have N unique triggers. Triggers by themselves are independent, however, to trigger a function user have to create an association between function and the trigger.\r\n\r\nyea, it's not clear to me. it seems convenient to have bundlings for both that aren't necessarily related at all. for example:\r\n\r\n```\r\nfunction apps:\r\nimage_resizers/jpg_resizer_func\r\nimage_resizers/png_resizer_func\r\n\r\nroute apps:\r\nface_recognition/spawn_jpg -> image_resizers/jpg_resizer_func\r\n\r\nlicense_plate_detect/spawn_png -> image_resizers/png_resizer_func\r\n\r\ncat_thumbnails/spawn_png -> image_resizers/png_resizer_func\r\n```\r\n\r\nat least, per previous comment, the trigger would be 'flexible' to implement its own namespacing schemes as such and it more becomes a matter of do we offer function bundling by app in the fn server api or do we just have a giant bucket of functions. \r\n\r\n* somewhat minimal example, however useful to think about grouping logs for debugging and cordoning off to see active functions, applying limits, etc. > intuitively it seems like a trigger is the one that glues some thing like a queue or a route to a function, not fn server itself. it's hard to think about making a generic binding that works for every trigger type that would be nice to work with, and it also doesn't seem like fn server necessarily cares about this association, if it simply consumes events and outputs them. the thinking is that each trigger has its own way of mapping its specific ingest points onto functions, and the api could be there; for http, this could be a url path, for instance (as it is now). to the user, if we by default have an embedded gateway that has this url path -> function mapping, we keep the behavior we have now, but the route mapping is pushed into the gateway, and not in fn server itself (as now). anyway, seems odd to have fn server store triggers and mappings, and the ux might get pretty bad trying to do it generically. thoughts?\r\n\r\nI guess, this is the exact question to ask. What would `fnserver` look like?\r\nHere are bits of API that Fn (platform) should have:\r\n - MGMT API for creating apps, functions, function-to-trigger bindings.\r\n - trigger interface\r\n\r\nTrigger interface bothers me most, it doesn't look good to have a single process that exposes GRCP interface, HTTP interface (maybe with GRPC since both using http, don't know), MQ interface.\r\n\r\nSo, it does seem like there would be an Fn MGMT API server and a bunch of trigger-specific processes, from which you can get the trigger URI to call a function, and, our favourite one, agent(s) process that accepts the event and do the work it does at this moment.\r\nFor the sake of the simplicity, we can utilize the concept of the \"full server\" as we do now, to have all-in-one box to keep the tutorial simple.\r\n\r\n\r\n > Trigger interface bothers me most, it doesn't look good to have a single process that exposes GRCP interface, HTTP interface (maybe with GRPC since both using http, don't know), MQ interface.\r\n\r\nthe hard line is when we want to start optimizing and do things like the remote slot thing, just having an 'invoke event' endpoint isn't sufficient in itself, we need to expose capacity information and possibly configure fn to behave a certain way.  for other kinds of triggers like the MQ trigger, I think we have some options; an MQ trigger could be baked into fn itself and invoke events directly against the agent instead of going through the exposed invoke path. we need to think about cases like implementing events off of an object store, is this trigger built into the object store and hitting our invoke endpoint remotely or is it queueing events against something and fn is polling that event queue?\r\n\r\nagree that as a platform we need 'MGMT API for creating apps, functions, function-to-trigger bindings.' and this not necessarily being in fn server. Additional food for thought, do we want to have triggers that allow a certain trigger to invoke 2 functions? this would make sense to have an API to manage, and muddles at least what I had thought a 'trigger' was defined as (a concrete thing that invokes functions, e.g. API gateway, kafka connector, etc). to steal openwhisk terms, what I think we have been calling a 'trigger' is a 'feed'. and a 'feed' invokes 'triggers'. and a 'trigger' may call multiple 'actions', where an 'action' is what we have been calling a 'function'. this flow is kind of complicated to grasp, but it is pretty robust once you get the hang of it. do people like that? I suppose we could start off with the bare minimum of simply having an 'invoke function' endpoint, and later we could add 'triggers' in that capacity. and start calling things like API gateway a feed or some such :) >  and start calling things like API gateway a feed or some such\r\n\r\nvessels? it adds extra corn to the 'docker' vernacular relevant changes in Kubeless 0.5.0: https://github.com/kubeless/kubeless/releases/tag/v0.5.0\r\n\r\nBreaking change: The command kubeless route has been replaced with kubeless trigger http. This will create a new Ingress rule to expose a function outside the cluster. You can now also specify a path to deploy your function. More info here\r\n\r\nBreaking change: Function Triggers have now their own Custom Resources. The same function can now be triggered from several event sources using a single Function deployment. That means that it is required to create a specific Custom Resource to trigger functions using Kafka messages or with a scheduled cron task. There are new commands available to do so, check kubeless trigger --help to discover these commands. Architecture details can be found here. OK, here's an updated proposal:\r\n\r\n## Functions\r\n\r\nFunctions are standalone entities that have only one dependency, a Docker image. They will have some URI to reference it, eg: `fnregistry.fnproject.io/NAMESPACE/FUNCTION:VERSION` \r\n\r\n### Models\r\n\r\n```go\r\ntype Function struct {\r\n        ID string\r\n\t// repo-host/Namespace/Name:Tag make up the fully qualified name\r\n\tNamespace string\r\n\tName      string `json:\"name\" db:\"name\"`\r\n\tMemory      uint64          `json:\"memory\" db:\"memory\"`\r\n\tCPUs        MilliCPUs       `json:\"cpus\" db:\"cpus\"` // hopefully this is just a hint?\r\n\tType        string          `json:\"type\" db:\"type\"`\r\n\tFormat      string          `json:\"format\" db:\"format\"`\r\n\tTimeout     int32           `json:\"timeout\" db:\"timeout\"`\r\n\tIdleTimeout int32           `json:\"idle_timeout\" db:\"idle_timeout\"` // ?\r\n\tCreatedAt   strfmt.DateTime `json:\"created_at,omitempty\" db:\"created_at\"`\r\n\tUpdatedAt   strfmt.DateTime `json:\"updated_at,omitempty\" db:\"updated_at\"`\r\n}\r\n\r\ntype FunctionVersion struct {\r\n        //  FunctionID reference to Function\r\n        FunctionID string\r\n        // Tag/Version is the version tag of a specific build\r\n        Tag/Version string \r\n        // The Docker image for this build.\r\n\tImage       string          `json:\"image\" db:\"image\"`\r\n        // QUESTION: Update the other params for each version or keep them all at the top level?\r\n\tCreatedAt   strfmt.DateTime `json:\"created_at,omitempty\" db:\"created_at\"`\r\n\tUpdatedAt   strfmt.DateTime `json:\"updated_at,omitempty\" db:\"updated_at\"`\r\n}\r\n```\r\n\r\n### CLI interactions\r\n\r\nWe continue to have a `func.yaml` for functions that defines the metadata for the models above. The these are the commands used for raw functions. \r\n\r\n```sh\r\nfn build\r\nfn run\r\nfn push # new command that bumps, builds, pushes image, updates function object and version\r\n```\r\n\r\n## Triggers\r\n\r\nTriggers replace our current routes model.  Each trigger associates itself with a single function. Support http out of the box, new types of triggers can be added with extensions. \r\n\r\n### Models\r\n\r\n```go\r\ntype Trigger struct {\r\n\t// The grouping of routes into an app is specific to this type of trigger\r\n\tAppID string `json:\"app_id\" db:\"app_id\"`\r\n\t// Function a fully qualified function name referencing a function in a repository. eg: `funchub.fnproject.io/jimbo/somefunc:1.2.3`\r\n\tFunction string `json:\"function\" db:\"function\"`\r\n\t// Config is required by the function, but set in the trigger, ie: the caller.\r\n\tConfig Config `json:\"config,omitempty\" db:\"config\"`\r\n\t// Annotations config for environment function will be running in?\r\n\tAnnotations Annotations     `json:\"annotations,omitempty\" db:\"annotations\"`\r\n\tCreatedAt   strfmt.DateTime `json:\"created_at,omitempty\" db:\"created_at\"`\r\n\tUpdatedAt   strfmt.DateTime `json:\"updated_at,omitempty\" db:\"updated_at\"`\r\n        // Type of trigger, eg: `http` (default), `timer/scheduler`, etc. \r\n        Type string \r\n\t// Trigger specific metadata\r\n\tTriggerConfig map[string]string `json:\"trigger_config,omitempty\" db:\"trigger_config\"`\r\n}\r\n```\r\n\r\n### Routes (the default trigger type)\r\n\r\nThis will have some extra items in TriggerConfig (just using Go here to be consistent, but it would be an arbitrary map). \r\n\r\n```go\r\nPath    string\r\nHeaders Headers\r\n```\r\n\r\n### CLI Interactions\r\n\r\nWe create a new `trigger.yaml` file that defines the trigger information for the models above. A directory can have a `trigger.yaml` and a `func.yaml` if you'd like to keep them together. \r\n\r\n```sh\r\nfn deploy # fn push + update trigger\r\nfn <verb> triggers # for dealing with triggers directly, similar to routes right now\r\n```\r\n\r\n## Apps\r\n\r\nSimilar to apps relationship to routes right now, but will be a collection of triggers instead, typically an http route, but can be any type of trigger.\r\n\r\n```\r\nApp ->* triggers -> functions\r\n```\r\n > at this point, app is basically a trigger specific grouping and kind of goes away in fn. not sure what we want, clarifying.\r\n\r\nWhat do you mean this goes away in Fn?\r\n\r\nAnd let's not blindly follow OpenWhisk, should avoid complexity all costs and their `rules` look essentially like `workflows` which should not be a core part of this. \r\n\r\nAlways KISS.\r\n > simple question is: are apps a grouping of triggers, or a grouping of functions?\r\n\r\nI'm proposing it's a grouping of triggers. And since triggers need a function to do anything, it's kind of both. A function can be used with multiple triggers. If we get into workflow down the road, a trigger could fire off a workflow instead of a function (similar to OpenWhisk rules/step functions), but I'd say we leave that out of 1.0.\r\n\r\nLet's think about a few common trigger types:\r\n\r\n1. http\r\n1. timer/scheduler\r\n1. a message queue (kafka, redis, etc)\r\n\r\nThose trigger types probably cover nearly all cases (or am I missing anything?). We'll assume events from infrastructure or other SaaS apps will be using one of these (1 or 3).\r\n\r\nWhen defining an application, it may consist entirely of http triggers (ie: an API). But you may need some periodic functions so you have a few scheduled functions. And you may listen for events from infrastructure so you have some `mq triggers` too. It's the triggers that define what the application does.\r\n Sorry, changed it to \"trigger types\", better? done #1060   One small thing (maybe with another PR later), it would be perhaps better if we can generate the test certs instead of checking them in..  One to-do (probably the conflict cause), is to rebase this on opencensus changes make relevant changes in spans/traces. IMHO, lb agent is too tightly coupled with the runner agent and this may slow us down in the long run.\r\n\r\nLB agent does not seem to have much common with runner agent as seen from remoteSlot, and various if-else blocks in agent.submit(), call.GetCall(), etc.\r\n\r\nContainer/Request states in runners do not really correspond to the same states in LB.\r\n\r\nFor example, is call.Start() is applicable in this case? Since getSlot is skipped, all of this lose meaning including a XXX-FXLB-WAIT header in responses (was this intentional?) or stats counters such as enqueued.\r\n\r\nremoteSlot is no longer really a slot, but a pointer back to lb agent, or exec() is not really exec but an LB forward. Timeouts, etc. are a bit more hard to follow. (They were already very confusing in current agent.)\r\n\r\nI wonder if this would be much easier to follow and maintain if we just code the lb agent flow separately without trying to reuse any runner agent code. I haven't dug in too much to this, but any chance this could be implemented as an extension?   I don't think this can work as an extension, because there is so much private stuff in the agent package that an extension can't possibly hope to access everything it needs (e.g. data in lowercase \"call\"). We even wanted to write the new stuff in a different package and it turned out to be too hard. In order to do this in anything other than the agent package, we'd need to open up a lot of the agent abstractions.\r\n\r\nThis is partly why we have reused and repurposed the existing abstractions to implement the LB Agent and the pure runner. The trick with remoteSlot is a bit odd, but the alternative is to rewrite a lot of the agent code (that we still need) in a different agent implementation, just arranged slightly differently. As far as I could see the Slot interface represents \"the object you can use to actually run and terminate this thing\" (because the interface only has exec() and Close() methods) and it has different implementations for hot and cold - so we thought of adding a \"remote\" implementation. > I don't think this can work as an extension,\r\n\r\nI agree in its current aims it will be rather painful to move _all_ of this into some abstraction. I've read through the patch and can think of some viable working product that uses current 'extensions', though these are free to modify to our needs of course. In no way is this meant to be entirely prescriptive, this is mostly a guess based on my current understanding of the machinations here & subsequent attempt to start the extension convo:\r\n\r\n* extend FNLB's proxy layer to create (also ingest?) a grpc request with a fully constructed call object to send to FN\r\n* extend FN to have a grpc endpoint that receives a full call, and throws it against agent.Submit (eliding pre-emptive slot logic, for now) and returns an object with the call execution info (started_at, status, etc) [and log (?)]. this can be added to server.Router ?\r\n* create a new 'grouper' passed to the LB that returns a different set of nodes based on the given key (as opposed to 'allgrouper' which ignores the key - the health crap thing needs to be moved somewhere more re-usable, but perhaps copying for now is ok). this seems mostly a lift and drop of the pool manager?\r\n* somewhere FNLB needs to construct a call from CP information, this seems the hardest plumbing issue of 'rev 1' (sans external slots) ? it seems the goal is to marry an API node and the LB, this seems achievable / sensible. we can probably hook fn up to import the LB and use it for (equiv) `/r/` routing and configure an API node & its routes alongside? if the LB simply needs to interface with some CP API (i've lost track) just ignore that last bit.\r\n* [done] make a 'nil' `agent.DataAccess` layer that does not upload call / log\r\n* [done] disable the async poller in agent\r\n\r\nare there fatal flaws with future work in skipping the slot plumbing out for now? the above seems a plenty large chunk of forward progress to achieve. Also general question of best way to marry an API node and an LB if I'm understanding correctly (?). Now, what did I miss? :) The slot plumbing is solving (well, currently failing to solve) the problem of being able to support the semantics of \"try to run this call, if you have capacity right now commit to it and do it, otherwise don't do anything and tell me you can't run it - do not queue\". These semantics are required by how the new multi-tenant multi-runner dataplane is supposed to work. At the moment however Submit is only able to perform the semantics of \"queue this call and run it when you can\", which is why the concept of slot reservation came to mind as a possible solution.\r\n\r\nSlot reservation may not be the right solution, but the problem is there. Another way to solve this could be to split Submit, basically changing the interface of the agent to change the \"GetCall -> Submit\" flow into \"GetCall -> AllocateResources -> Submit\", then we'd have more control on the behaviour of AllocateResources (the conditions in which we accept to queue the call, or fail fast - maybe we could have SlotAllocationOptions?). Or, as a narrower change, we could just add a flag to Submit to control whether to queue the call or fail fast.\r\n\r\nPersonally I perceive this problem as missing core functionality required to implement the semantics we need, and I would like to see this in the open source rather than some kind of private extension. > Or, as a narrower change, we could just add a flag to Submit\r\n\r\nActually, that probably doesn't work because we need to make the decision to accept/reject the call _before_ calling Submit (the last controllable step) on it. Ok...\r\n\r\nWe have given up trying to add functionality to the Agent in order to deal with slot reservation, capacity checking etc. A longer discussion is needed to figure out how to extend the abstractions of the slot allocation mechanism so that different slot allocations algorithms (e.g. \"queue until you get one\" vs \"don't queue and fail fast\") can be selected.\r\n\r\n_As a tactical decision_ we have moved the initial capacity check to a higher level, in the Pure Runner. This probably duplicates / reimplements some logic, but it gets us closer to where we want to be and probably removes a blocker for this PR. We can and will iterate on that.\r\n\r\nHaving removed the slot reservation mechanism, we can't use the little trick we used to use in LB Agent so the LB Agent is now reimplementing `Submit()` and `submit()` up to the point where a slot is assigned, then a `remoteSlot` is used. A side note, seems the api-tests and system-tests both try to use port 8080 which causes port collusion.\r\nIdeally tests should bind to dynamic unalloc ports (bind port 0), but to get things on-going/unblocking, you might just try to choose a different port.  a quick glance at this has me curious whether our turning off of the docker logs and using async attach is the race, and not a poorly built multi log image (though i look forward to removing this image, i can't imagine it's doing anything that crazy). to be clear: want to move forward with this, and thanks for doing it; just got me thinking about the root of the issue since when it happens it seems to skip the first line and it seems pursuant to a log race. i think the race exists but is more far-fetched for hot. if attach takes longer than start + hand out of slot, then we can miss logs. attach is done in parallel to that, so it could happen. previously, we streamed all logs up to attach time, which prevented this bug. it seems like we just need to add synchronous attachment to the container and add our own goroutine that we can manage so that we can properly manage the logs (it's very much worth turning off the json logs).  in any event, we can do that separately (can file another issue) yea, i think it's just racy, multi log test waffled back and forth   without re-plumbing the context for launch hot i see some nascient issues:\r\n\r\n* containers will go launch when convenient even after the request that spawned them is long gone on a loaded system, we can bail outta this way before (the hot launcher loop will be going)\r\n* running a bunch of calls and doing async removal is going to backlog docker for removals, this just means we end up queued in a different place than before, as long as we hold the resource token over docker removal we won't over provision the system at the same rate as now.\r\n\r\nit seems like a slightly better cut point may be to skip the slot queue? but i'm not sure of issues there (intuitively, seems ok). then we at least get the same execution path, we just lop off the launcher. Closing this for now, as the result ended up being equally complicated and also the main line has evolved significantly.\r\n\r\nOne of the biggest gains out of this was the side effect of making all cold tests go through hot to increase coverage, but this is also debatable with code littered with 'if-cold' branches.\r\n\r\nWe can re-attempt this going forward, but I'm closing this for now.  ```\r\n--- FAIL: TestMultiLog (6.15s)\r\n\texec_test.go:55: Sync execution call ID: 01C7C6BA67T7WG600000000000\r\n\texec_test.go:293: Log entry must contain `First line` string, but got: Second line\r\n```\r\n\r\nthis is in the api tests i think and is habitually a flaky test offender for one reason or another. aside from not testing tricky behaviors in the api tests at all, we should fix this situation. the api tests here simply can check that the log endpoint returns a log, that's all we need to do, and there are multiple tests for that.  Note: possibly related to new flaky test issue #822 I have confirmed this is still an issue after #809 \r\n```\r\n--- FAIL: TestRouteRunnerExecution (22.07s)\r\n\trunner_test.go:496: Test 14: GetLog read IO call_id:01C82PNVZP27WJM00000000000 cannot find: EndOfLogs in logs: 2018/03/08 11:41:57 BeginOfLogs\r\n\t\t2018/03/08 11:41:57 Received format http\r\n\t\t2018/03/08 11:41:57 Received request main.AppRequest{SleepTime:1000, ResponseCode:0, ResponseContentType:\"\", JasonContentType:\"\", EchoContent:\"\", IsDebug:true, IsCrash:false, ReadFile:\"\", ReadFileSize:0, CreateFile:\"\", CreateFileSize:0, AllocateMemory:0, LeakMemory:0, TrailerRepeat:0, InvalidResponse:false, PostSleepTime:0, PostOutGarbage:\"\", PostErrGarbage:\"\"}\r\n\t\t2018/03/08 11:41:57 Received headers map[User-Agent:[Go-http-client/1.1] Content-Length:[36] Fn_call_id:[01C82PNVZP27WJM00000000000] Fn_deadline:[2018-03-08T11:42:27.110Z] Fn_method:[GET] Fn_request_url:[http://127.0.0.1:8080/r/myapp/myhot]]\r\n\t\t2018/03/08 11:41:57 Received config map[PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ENABLE_FOOTER:yes FN_APP_NAME:myapp FN_PATH:/myhot FN_FORMAT:http HOME:/root HOSTNAME:default-006440c9-8a48-4d5d-8c6b-a894c238d654 FN_TYPE:sync ENABLE_HEADER:yes FN_MEMORY:64]\r\n``` https://github.com/fnproject/fn/pull/810 ought to close MultiLog, possibly that one too they look similar though that looks possibly related to not closing the log before uploading (a guess)   ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [sachin-pikle](https://github.com/sachin-pikle)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [sachin-pikle](https://github.com/sachin-pikle)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [sachin-pikle](https://github.com/sachin-pikle)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [sachin-pikle](https://github.com/sachin-pikle)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! ## CLA Bot\n\nAll committers have signed the CLA. Ok. Thank you for the review comments. The more I think about your comments and the way it should work is the prometheus yaml, and the dashboard json files \"belong\" in the fn project. They are an integral part of fn's monitoring story i.e. batteries included but replaceable (or extendable). Anyone be it compose or helm or tutorials or anyone else that needs an integrated set up of Fn + Prometheus + Grafana (with our 3 dashboards) should refer/point to these files instead of duplicating them.\r\n\r\nI will let Shaun chime in and then update the PRs accordingly.\r\n\r\nLonger term: Ideally fn start should have an additional option to start with ootb monitoring (prometheus + grafana + 3 default dashboards) enabled.  Closing this Pull Request. Will open a new one if needed.  Hi,\r\nWill you providing support for C# language support also? You can effectively package them as .NET core container and deploy them.\r\n\r\nThanks and regards\r\n it might be easy to support .Net core since it is opensource and run on all the platforms. including Linux and Mac. That would be a great language to add to the supported list. You can do that at this moment, no need to wait for the FDK. Just make sure your function packaged to the docker image and can accept requests through the STDIN and write response back to the STDOUT.\r\n Can I get a sample code or some blog links that will help us understand this hi @VenkateshSrini docs for functions formats are https://github.com/fnproject/fn/blob/master/docs/developers/function-format.md but you could get started just implementing default, it is easiest, just plaintext over STDIN/STDOUT. we have a few fdks, the go one is pretty concise https://github.com/fnproject/fdk-go if you'd like an example to work from to build json format. As mentioned, you simply need to Dockerize a dotnet core application. \r\n\r\nCreate a new directory on a machine with Docker and dotnet core sdk (this example uses v2.1, you may use dotnetcore sdk 2.0 so long as you make changes in the FROM instructions in the Docker file below):\r\n```\r\nmkdir test1\r\ncd test1\r\n```\r\n\r\nCreate a simple console app via the sdk cli tool:\r\n`dotnet console new`\r\n\r\nEdit the generated Program.cs to match file below:\r\n```\r\nusing System;\r\n\r\nnamespace test1 \r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            if (!Console.IsInputRedirected)\r\n            {\r\n                Console.WriteLine(\"Input stream not redirected\");\r\n                return;\r\n            }\r\n\r\n            string input = Console.In.ReadToEnd();\r\n\r\n            if (input?.Length == 0)\r\n            {\r\n                Console.WriteLine(\"Input is zero length or null.\");\r\n                return;\r\n            }\r\n\r\n            //echo what was passed in back to STDOUT (of course typically you would use Newtson json \r\n           // Nuget package to parse into a rich object model and execute some functionality)\r\n            Console.WriteLine(\"Passed to function: \" + input);\r\n\r\n       }\r\n    }\r\n}\r\n\r\n```\r\n\r\nCreate a  Dockerfile at the same directory level of the generated cs project file (clean with no built _bin_ or _obj_ directories):\r\n```\r\nFROM microsoft/dotnet:2.1-runtime-alpine AS base  #93mb\r\nWORKDIR /app\r\n\r\nFROM microsoft/dotnet:2.1-sdk AS build\r\nWORKDIR /src\r\nCOPY test1.csproj .\r\nRUN dotnet restore\r\nCOPY . .\r\nWORKDIR /src\r\nRUN dotnet build -c Release -o /app\r\n\r\nFROM build AS publish\r\nRUN dotnet publish -c Release -o /app\r\n\r\nFROM base AS final\r\nWORKDIR /app\r\nCOPY --from=publish /app .\r\nENTRYPOINT [\"dotnet\", \"test1.dll\"]\r\n```\r\n\r\nExecute a docker build, docker login, and push to your repository:\r\n```\r\ndocker login\r\ndocker build . -t yourrepository/yournewimagename\r\n```\r\n\r\nCreate a function and point to the new image your created (image:  yourrepository/yournewimagename:latest)\r\n I might be interested in building a C# FDK if I get some free time. Is there documentation on the contract that FDKs need to provide, or would looking at an existing one (like the Go one) and porting the same API across  be the best approach?  @Daniel15 hi! thanks for stepping up, here's the doc you've asked for https://github.com/fnproject/docs/blob/master/fn/develop/fn-format.md\r\n\r\nGenerally, you are right, try to see how other FDKs implemented. Also, you mind this article quite useful: https://medium.com/fnproject/useful-tips-for-a-new-fdk-development-78f931477c49\r\n I started working on this! Thanks for the links @denismakogon - Very useful! I'm using those docs plus using the Node.js FDK as a reference, since it seems to have the simplest implementation. I got a basic .NET Core FDK working! Docs are here: https://github.com/Daniel15/fdk-dotnet. Let me know if you have any questions.\r\n\r\nI'll see if I can work out how to add it as a template in the CLI... For now you need to manually create a C# project, the Dockerfile, and the func.yaml file. you can start with init image concept we have for such cases, see https://medium.com/fnproject/even-wider-language-support-in-fn-with-init-images-a7a1b3135a6e @denismakogon How are the build steps defined with init images? For example I tried the one in that Medium article (`fn init --init-image=mjg123/java-init`) and when you build it, it knows to run Maven. However, I do not see that in any of the generated files. Is that knowledge still hardcoded into the Fn CLI, as the generated `func.yaml` uses `runtime: java`? Well, build steps for java code is built-in into Fn CLI, true. However, Fn CLI also recognizes Dockerfiles. So, all you have to do is to write your own dockerfile and Fn will use that to build an image. Right, thanks. My instructions for fdk-dotnet involve manually creating a Dockerfile at the moment. I'll bundle all of that into an init image soon. Created an issue to track it: https://github.com/Daniel15/fdk-dotnet/issues/6 \r\n\r\nWe can likely close this issue now, given my work on the .NET FDK? > we should likely document community supported versions of the fdk in docs somewhere\r\n\r\nI was going to try write a C# tutorial for the site, once I package everything up into an init image. @Daniel15 we also have Medium blog, so, would be nice to have your (future) post available there as well, ask @carimura when you'll have something to post.\r\n\r\nMeanwhile, @rdallman are we ready to accept new FDKs under Fn umbrella?\r\n We have a fairly standard format for the tutorials now (see the Node.js or Python tutorials) see https://github.com/fnproject/tutorials. So you can create your own, or you can go the Medium route and have me create the tutorials. Just let me know. I like the first idea: we do have identical tutorials for various langs we support, so @Daniel15 can we ask you to write your own using one of the existing ones (pick one you like). Later we'd sort out how to turn it into a medium post.\r\n @rdallman That's sounds good to me. We just add the subheading to that page when the FDK is ready. Init image works great!\r\n```\r\nfn init --init-image daniel15/fn-dotnet-init\r\n```\r\n\r\nI'll try to submit a tutorial for the site soon. \ud83d\ude03  nice @Daniel15 !\r\n I think this can be closed now. C# tutorial is up: https://fnproject.io/tutorials/csharp/intro/  * stops defaulting to application/json. this was something awful, go stdlib has\r\na func to detect content type. sadly, it doesn't contain json, but we can do a\r\npretty good job by checking for an opening '{'... there are other fish in the\r\nsea, and now we handle them nicely instead of saying it's a json [when it's\r\nnot]. a test confirms this, there should be no breakage for any routes\r\nreturning a json blob that were relying on us defaulting to this format\r\n(granted that they start with a '{').\r\n* buffers output now to a buffer for all protocol types (default is no longer\r\nleft out in the cold). use a little response writer so that we can still let\r\nusers write headers from their functions. this is useful for content type\r\ndetection instead of having to do it in multiple places.\r\n* plumbs the little content type bit into fn-test-util just so we can test it,\r\nwe don't want to put this in the fdk since it's redundant.\r\n\r\nI am totally in favor of getting rid of content type from the top level json\r\nblurb. it's redundant, at best, and can have confusing behaviors if a user\r\nuses both the headers and the content_type field (we override with the latter,\r\nnow). it's client protocol specific to http to a certain degree, other\r\nprotocols may use this concept but have their own way to set it (like http\r\ndoes in headers..). I realize that it mostly exists because it's somewhat gross\r\nto have to index a list from the headers in certain languages more than\r\nothers, but with the ^ behavior, is it really worth it?\r\n\r\ncloses #782 @skinowski i know there's work to do the buffering in #786 -- I am happy to line up behind that, I do not know if this makes your life easier in 786 or not (sorry if so). Why wouldn't content-type be top level?  Doesn't matter what protocol it is, that's a must have.  > Why wouldn't content-type be top level? Doesn't matter what protocol it is, that's a must have.\r\n\r\neach protocol that has this concept seems likely to have their own concept of how to expose it. maybe it has a capital C and a capital L, maybe there's an underscore in between the two, maybe it's a dash, maybe it's an ascii shrug. grpc for example, only has `application/grpc`, so contentType is a little bit out of place (i realize it's the type of the body, and we'd need a grpc struct that fits our needs, which could have content type to describe the body, which for protobufs the way to say this idiomatically would be `contentType`) but the fact that it did not even work until this patch means that it's probably pretty safe to remove it, from output at least. the input one we could leave since it appears at least the ruby fdk is using it, but but symmetry... it is duplicated in headers on input, as well. What do you mean it didn't work?  It's fed into the function, that's all the \"work\" it has to do. \r\n > What do you mean it didn't work? It's fed into the function, that's all the \"work\" it has to do.\r\n\r\nit didn't work: https://github.com/fnproject/fn/issues/782 -- this patch also is the first to hook it up... it didn't work. Oh sorry, was thinking about the content_type for input (which did work). Although content_type is still required for output. Anyways. LGTM. @rdallman want to fix those conflicts then merge? thanks @skinowski - updated.  nobody caught this one:\r\n\r\n> (default is no longer left out in the cold)\r\n\r\nboo\r\n missed, as in missed a joke :(  @rdallman this is rebased/cleanup now, which is essentially your pipe/clamp changes.  NOTE: this would keep 'default' intact to maintain the easy-to-get-started-ness; this could turn into a discussion of that, but that's not really the intent; i.e. this is not intended to be a discussion of removing 'cold' format altogether nor changing the default format to hot.\r\n\r\nHTTP format is the original 'hot' format. JSON format, at present, provides similar functionality and is supported in every fdk (?) for framing hot requests.\r\n\r\nbenefits of HTTP over json:\r\n* it's possible to stream sync http requests directly into and out of the container from the http client. this reduces memory overhead and allows a user to do things like [potentially] hijack a request or stream chunked data in or out, without having to buffer the entire request in or out. json format has to ingest an entire request body (client) and response body (container) at present. though it would be possible to extend this for json #500 and http is no longer doing this #772 exactly.\r\n* it's possible we could want to take advantage of other http features and would have to add these to json explicitly whereas with http they are there (I offer no concrete example).\r\n\r\nreasons to standardize:\r\n* our vernacular for 'hot/cold' is translated into 'default/http/json' and this verbiage is confusing for users. if we picked one 'hot' format, we could call this `format: \"hot\"` instead of 'json', where 'hot' just happens to be json and users would implement this. this would clear up the vocabulary. we could have 'hot/cold' or 'hot/default' or something along these lines. for versioning this if we change the json protocol at some point, it's trivial to add 'hot2' or something along those lines.\r\n* not every fdk [can] support http format, which means we have an awkward mix of having to match routes with their abilities based on the code, which is somewhat true for hot/cold as it is, but with 2 hot formats exacerbates this.\r\n* bug/features of supporting both formats surface area is reduced by 50%.\r\n* performance disparity of json & http is now negligible, possibly some GC pressure benefits but in runs with 10k-100k there was no noticeable difference in throughput.\r\n\r\npotential downsides:\r\n* if we again come to a point where we want to support multiple formats for hot, we'll have to figure out how we want to expose this since 'hot/cold' would be pretty rigid as proposed ^.\r\n* any users that wrote functions against http directly would have to update to use an fdk or use json. the surface area of this at present may be minimal (it would be a good idea to do this early, for this reason). \r\n\r\nwork involved:\r\n* it's relatively easy to drop http format in fn server outright, we could leave routes that have http format as they are and error out their attempted execution that the format is no longer supported and the user needs to update the route.\r\n* if we want to change 'json' to 'hot' while dropping this, we could run a migration.\r\n* update docs / bloggos to remove 'http' references\r\n* update fdk's to remove 'http'\r\n\r\ndiscuss/vote please. Strong +1 in principal \r\n\r\n*  Don't want this until I have a way of sending binary with JSON (preferably without needing to copy twice in FDK, e.g. b64 ) , streaming less bothered by,  \r\n* Java doesn't do JSON yet  > Java doesn't do JSON yet\r\n\r\nthis is fairly easy to add or is http stuff pretty baked in?\r\n\r\n> Don't want this until I have a way of sending binary with JSON \r\n\r\nthanks, good point. i know part of this is the limitation of utf8 in go's json library (which could be worked around), but without doing some encoding this c/would become a client side issue, as well. Totally agree about the problem statement related to vernacular. \r\n\r\nWarning: the following two points could be totally out of scope of this issue. I just want to throw them out there.\r\n\r\n1. adding CloudEvents as a format. I know you mentioned this could be JSON format (or \"hot\" in your proposal) but want to consider as we think about design. This could imply versioning of formats.\r\n\r\n2. We need to consider what it means to make hot the default format and forcing usage of FDK's in some way. There's a user experience issue when the \"out of box\" experience adds a 300ms overhead from Docker.\r\n\r\n > adding CloudEvents as a format. I know you mentioned this could be JSON format (or \"hot\" in your proposal) but want to consider as we think about design. This could imply versioning of formats.\r\n\r\nis this a container format? otherwise it's not relevant to this discussion. could you provide links if so? that phrase is not easily googled. an event format is potentially completely orthogonal.\r\n\r\n> We need to consider what it means to make hot the default format and forcing usage of FDK's in some way. There's a user experience issue when the \"out of box\" experience adds a 300ms overhead from Docker.\r\n\r\nthis is not intended to turn into a discussion of the 'default' format, I'll clarify that this is also not proposing changing 'hot' to the default since it wasn't clear.\r\n https://openevents.io/ and https://github.com/cloudevents/spec. OK I'll let you guys decide on relevance  to this issue but the point is we'll need a way to explicitly support this soon. Duly note it and move on.\r\n\r\nAs for default, sure I'll defer to another discussion. thanks.\r\n thanks. it looks somewhat relevant inasmuch it'd be an additional hot format (i.e. not only an external event format, it aims to be both external and internal), but doesn't block the wart removal of http format. \r\n\r\nif we standardized on only using cloud events we'd have to follow their standard release exactly and also have a way to handle any major breakages they do (i.e. this function handles 'openevent 2.1 format' but not 'openevent 3' -- like oauth, fun fun); I suspect if we ingest them we'll have these issues, as well (but it likely won't be the only in-road to spawn events). it seems wise to have an additional format that we can explicitly not break that users could readily switch to that acts as our primary format until such time comes that they have eaten the event world (if/when). their cause is noble, it's also possible somebody else wins or we all decide to standardize on google's format (ala s3), so we should remain flexible imo (flexible-> maintain json format).  100% agree on having our own as well. and ya versioning will be needed since CE is literally at 0.1 at the end of this month. Json in java is trivial yes (and also ditches the cumbersome HTTP parser dep) While reviewing this, #799 and #785 , it got me thinking that maybe we could deprecate `default` format and just use the `json` format even in a cold function. Not quite as easy as regular default, but almost. Usually, we're just doing a `JSON.parse(STDIN)` for default functions anyways, so that would stay the same and you'd just have to grab the \"body\" field out of there (and I guess JSON.parse that too if you're expecting JSON). \r\n\r\nThen this would be essentially what #785 is trying to do: a cold function is just a hot function with a single object. Then you might ask why we didn't do this in the first place?  Because JSON format didn't exist. \r\n > it got me thinking that maybe we could deprecate default format and just use the json format even in a cold function.\r\n\r\nthe big win here would be getting rid of cold and its semantics, specifically that cold containers can produce unprovoked output that we must collect is hard to capture in our current abstraction for hot functions from an agent implementation perspective. this seems to be suggesting that we keep cold (and related semantics) but change the format of the input, which doesn't seem like a huge win? perhaps I'm misinterpreting if you could clarify please.\r\n\r\nif we had configuration for a 'hot function' and the maximum times it could execute per container, we could shut this down from an fn perspective (if they set `n=1` then it's effectively 'cold' in nature, 'json' in format). it's also possible for a user to exit their container immediately after producing the first 'hot' output (we could add this to fdk even) to retain the 'run once' semantics of cold without the pitfalls of i/o we have (though this may be slightly racy, I'm not sure if it's worth discussing that bit here); I have heard it discussed that this is desirable to certain users and they have their reasons I've since forgotten and won't make up for them :). \r\n\r\nIn general, FaaS platforms seem to have their i/o format that a user must cater their code to and it makes sense from that perspective to change to just 'json' and 'hot' existing (which would clear up the vernacular significantly), provided 1) that we can make json usable for all use cases (binary) and 2) that we can add future other formats as well, any of which would be 'hot'.\r\n\r\nit's a possible +1, some clarification on 'cold' dying required (I just knew this discussion would lead here, from parent) I'm leaning more and more towards dropping default/cold format completely. The better the FDK's get and with boilerplate generation, it's not much more convenient than just using an FDK. And would simplify internals obviously. We could have an optional flag to run `once` to sort of make it cold/isolated if people need/want that behavior. \r\n\r\nThis would mean:\r\n\r\n* stop supporting http (deprecate it for removal in a couple of minor versions)\r\n* stop supporting cold (deprecate it for removal in a couple of minor versions)\r\n* stop supporting default (deprecate it for removal in a couple of minor versions)\r\n* only support json format (new default)\r\n* can still add support for cloudevents and other formats in the future\r\n +1 \r\n\r\nIt's a bit essy messy but we can also provide tooling for people wanting to run shell later a \"shell FDK\" ?  - by providing a wrapper/binary  that takes the JSON  contract on the outside but invokes using the default contract  (or something like it) that a user could put  within the container. \r\n\r\nThis would also work for things like fcgi\r\n I'm +1 if we have a \"shell FDK\" as an adapter for default/cold functions.\r\n\r\nI'd also like to solve the problem of using an existing container image as a hot function.  For example, I'd like to take the Docker hello-world container image and make it into a hot function without having source or defining a new image manually.  One approach would be for the Fn server to automatically define a new image that extends a given binary image and replaces the entry point with our shell FDK to mediate the JSON protocol?  Or whatever other clever and efficient technique we can come up with. From a UX perspective, I still like the \"you can just pick up any existing container that can accept STDIN and run it as a cold function [using `format: default`].  If this story is simply changed to \"use `once: true`\" and the behind-the-scenes magic does the rest then +1. @rikgibson to  @treeder's comment  - I think @treeder is proposing dropping 'default' completely in favour of a single prevalent format (initially JSON, later JSON  or Cloud events) \r\n\r\n@shaunsmith  - That's in line with what I'm proposing   (i.e. an existing docker build can be made to work in a way that was possible with default before) - however  a user would have to create a new docker image do do this (including the \"wrapper\" binary in the top-level container) - \r\n\r\nI wonder if this can be done transparently in the CLI (or even within Fn??) \r\n\r\nAt build time: \r\n\r\ngiven <any docker image> : create a new Dockerfile (in CLI) i.e. : \r\n\r\n```\r\nFROM <original image> \r\nADD /fn/hotwrapper /\r\nENTRYPOINT /hotwrapper <OLD ENTRYPOINT> \r\n```\r\nor at runtime in fn :\r\n \r\nmount /hotwrapper into container somewhere,  read entrypoint of docker image (hardish) \r\n\r\nthen invoke the container with the new entrypoint `/path/to/hotwrapper <old entrypoint>` @zootalures yes I get that. My point is by dropping default as it is now, what does the experience become for picking up an arbitrary container and running it as a function, hot or otherwise? We've been telling people they can do \"X\" (where \"X\" is for example just simply run docker/hello-world) - we are (or are we?) now changing our position so either they can't do \"X\", or the setup by which they can do \"X\" is now more complicated and fussy?  If it can be done transparently within fn or CLI in response to a simple flag then that's fine, I'm simply trying to argue for keeping it clean and simple. @zootalures @rikgibson I'm not convinced we can't build a new image with the hotwrapper automatically in the Fn Server (or at least I hope we can).  `docker inspect hello-world` (for the Docker sample) dumps lots of info including:\r\n\r\n```\r\n \"Cmd\": [\r\n                \"/bin/sh\",\r\n                \"-c\",\r\n                \"#(nop) \",\r\n                \"CMD [\\\"/hello\\\"]\"\r\n```\r\n\r\nSo we can programatically determine what we need to wrap. > stop supporting http (deprecate it for removal in a couple of minor versions)\r\n> stop supporting cold (deprecate it for removal in a couple of minor versions)\r\n> stop supporting default (deprecate it for removal in a couple of minor versions)\r\n> only support json format (new default)\r\n> can still add support for cloudevents and other formats in the future\r\n\r\nAll of that gets a big +1 from me. Single event format would save a lot of confusion & simplify the FDKs, and `json` is the one that makes the most sense atm.\r\n\r\nI would expect a \"shell FDK\" to be the same kind as all the other FDKs and will argue against hard-coding anything into the service or cli for it, unless there's a demonstrated need for the `stdin->stdout` usecase (ie, is anyone using it who couldn't add a call to `jq` into their image?) we're tying ourself in knots for nothing. > We've been telling people they can do \"X\" (where \"X\" is for example just simply run docker/hello-world) - we are (or are we?) now changing our position so either they can't do \"X\", or the setup by which they can do \"X\" is now more complicated and fussy? If it can be done transparently within fn or CLI in response to a simple flag then that's fine, I'm simply trying to argue for keeping it clean and simple.\r\n\r\n@rikgibson that's a pretty contrived example, using the hello-world image, not really useful in any real world use case. While it's \"neat\", I think that's all it is.   @treeder OK, maybe that's an overly-simplistic case, but the point is more around a general case of wanting to use an existing container that provides some form of useful function. I'm fine with deprecating/removing the things being proposed, I'm only concerned about removing capabilities or increasing UX complexity. agree with @rikgibson can someone explain how BYOD gets its input (the UX) if json/hot becomes default? I seem to be missing this. > agree with @rikgibson can someone explain how BYOD gets its input (the UX) if json/hot becomes default? I seem to be missing this.\r\n\r\nInput is still stdin, the only difference is you have to parse the JSON input. If you bring your own container, hopefully you're still using our FDK's. \r\n\r\nAre you guys talking about using just random containers that don't know our input or output formats?  Is there any real world example where that would be useful?\r\n I'm confused... any BYOD use case, right? isn't that the whole value pitch of Fn? ie https://github.com/carimura/vista Sure, so containers that understands the input Fn is giving it and what to output. Changing to JSON is just a cleaner I/O format. And dealing with it can be as easy as:\r\n\r\n```ruby\r\nbody = JSON.parse(STDIN)['body']\r\n```\r\n\r\nvs now with default format:\r\n\r\n```ruby\r\nbody = STDIN.read\r\n```\r\n\r\n(yes, i did that in Ruby. \ud83d\ude38  . Because look how nice that is?)\r\n ok so I think I get it now... func.yaml would still have `runtime: Docker` and the customer would bring their own Dockerfile. Inside that func directory would be some code that they write which would import the FDK and parse the input just like any other function which would execute inside the Docker container as the func. I just needed to walk through that in my head.\r\n\r\nSo your question about random containers that don't have func code in it -- I can't think of any either at the moment... In that case, I'm +1 on all of this.\r\n @treeder your example covers reading JSON but not the requirement to loop and process all incoming messages--that's the hard part.  It's easy to write a function that reads/writes to stdin/stdout but adding on the message stream handling is not as trivial.  \r\n@carimura yes, if we provided a protocol adapter utility that was the entry point of the function container image that handled the JSON protocol and the message loop I think we're good.   The \"random container image\" can be handled my extending the image and adding the utility too (so far called `hotwrapper` and `shell FDK`). honestly that just re-confused me. take https://github.com/carimura/vista/tree/master/services/detect-plates for example. All the proposed changes are requiring me to do is move my func out of main and into a handler, exactly the way `fn init --runtime go` structures it. Then stdin is the io.Reader.\r\n\r\nRight? Sorry, there are two cases: 1) we have an FDK for your programming language and 2) we don't.  1 is easy enough as you pointed out.  2 is the issue for both unsupported languages and non-source artifacts you may want to package as a function.  Ironically: https://github.com/fnproject/fn/issues/791#issuecomment-376682805 > @treeder your example covers reading JSON but not the requirement to loop and process all incoming messages--that's the hard part. It's easy to write a function that reads/writes to stdin/stdout but adding on the message stream handling is not as trivial.\r\n\r\n@shaunsmith That would be the `run-once` version.  I think standardising on JSON with a `run-once` option makes a lot of sense.\r\n\r\nAnyone who is using functions in anger is going to have to standardise on a message format anyway.\r\n\r\nThere are JSON parsers available for most languages (even Bash ;-) ), so I don't think using JSON is going to prevent someone using a language for which there is no FDK. done too  a lot of the logging tests use async calls which was flaky with timings. there\r\nare a couple left that use async, that we need to test, but this reduces the\r\nprobability of the flaky tests flaking to 2/5 instead of 5/5.\r\n\r\nthe behaviors we are testing here we should not be testing through the api,\r\nfor this exact reason, we can test a ton of this in the agent itself and not\r\nhave to rely on timings. not taking that here, but this fixes circle ci\r\nflaking out for a few days.  ```\r\n$ fn start\r\ntime=\"2018-02-18T00:23:22Z\" level=info msg=\"Setting log level to\" level=info\r\ntime=\"2018-02-18T00:23:22Z\" level=info msg=\"started tracer\" url=\r\ntime=\"2018-02-18T00:23:22Z\" level=info msg=\"datastore dialed\" datastore=sqlite3 max_idle_connections=256\r\ntime=\"2018-02-18T00:23:22Z\" level=error msg=\"Could not open BoltDB file for MQ\" dir=/app/data error=\"invalid argument\" mq=bolt\r\ntime=\"2018-02-18T00:23:22Z\" level=fatal msg=\"Error during server opt initialization.\" error=\"invalid argument\"\r\n2018/02/18 00:23:22 error: processed finished with error exit status 1\r\n``` OMG. This is the same/similar issue to iron-io/functions#631 -- Are we just copying off each other and making the same assumptions?\r\n\r\nCan we *not* assume a local Docker engine running on localhost? Please :)\r\n\r\nI know what the problem is now; I'm running `fn start` with a remote Docker engine; so `/home/blah` will not exist :/ Also bind mounting volumes like this is really silly. In production you would actually use a named volume using the docker volumes sub-system and an appropritate volume driver. Very rarely (*never?*) have I bind mounted volumes for \"stateful\" services. @prologic fyi Fn forked IronFunctions almost a year ago. It's *much* further along, nearing GA in fact, but will have similar issues as a result of same ancestry.\r\n I guess it's not a \"blocker\" per se; but if you want folks to be able to try fn out quickly; fixing this is a good thing :) Also thanks for the history lesson; good to see code re-use (*even if a fork*). `fn start` is mostly just for quickstart/local development. Anything else and you should use `docker run ...` with whatever flags you want.  So what about quickstart on OS X?\nIs this well documented/tested?\n\n`fb start` doesn't work for me with\nOS X + docker-machine managed engine (virtualbox)\n @prologic can you be more explicit when saying that `fn start` doesn't work for you? Was my paste not clear?\n\n\nJames Mills / prologic\n\nE: prologic@shortcircuit.net.au\nW: prologic.shortcircuit.net.au\n\nOn Mon, Feb 19, 2018 at 8:53 AM, Denis Makogon <notifications@github.com>\nwrote:\n\n> @prologic <https://github.com/prologic> can you be more explicit when\n> saying that fn start doesn't work for you?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/fnproject/fn/issues/779#issuecomment-366623945>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ABOv-t2aa4AUvN-DWbW2XBaYJAa6MyeLks5tWTaHgaJpZM4SJhKe>\n> .\n>\n Okay. I can confirm that `fn start` works perfectly with Docker for Mac Version 17.12.0-ce-mac49 (21995). \r\n\r\nIf it seems that `fn start` is faulty for you. You can get customised Fn server by creating an env file (identical for Docker env file) and pass that to the `fn start`, check `fn start --help` for more details.\r\nYou can also try the following compose file https://gist.github.com/denismakogon/1188d8b2d44f51167ad5a73f98a6def7 (modified version of the one we have in-tree) > Okay. I can confirm that fn start works perfectly with Docker for Mac\nVersion 17.12.0-ce-mac49 (21995).\n\nSo I'm not using Docker for MAc; but docker-machine managed. Not sure if\nthere's any significant differences; but probably is.\nI think Docker for Mac does some host<->engine filesystem sharing magic.\n **Permissions issue.**\r\n\r\nWhen you run with `sudo` - it works in any directory. Without sudo, it fails.\r\n\r\nTry:\r\n\r\n`$ sudo fn start`\r\n\r\nI looked at the source code printing this error; I think the line above it has too restrictive or demanding permissions on the file. This should be loosened somehow.\r\n\r\ndb, err := bolt.Open(url.Path, **0655**, &bolt.Options{Timeout: 1 * time.Second})\r\nif err != nil {\r\nlog.WithError(err).Errorln(\"Could not open BoltDB file for MQ\")\r\nreturn nil, err\r\n}\r\n\r\nSo sudo raises the privileges level. Too bad this bolt.go file is in a different \"iron-io\" project. Has this been released? I am on Docker version `18.03.0-ce, build 0520e24` and I am using `docker-machine` command to manage docker daemon instead of Docker.app. I start docker as `docker-machine start`. It asks me to set environment variables via output of `docker-machine env` in current shell. If I don't  fn wouldn't find docker daemon and give this error:\r\n\r\n```\r\ndocker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.\r\nSee 'docker run --help'.\r\n2018/04/11 00:12:28 error: processed finished with error exit status 125\r\n```\r\n\r\nI set the following environment variables:\r\n```\r\nexport DOCKER_TLS_VERIFY=\"1\"\r\nexport DOCKER_HOST=\"tcp://192.168.99.100:2376\"\r\nexport DOCKER_CERT_PATH=\"/Users/user/.docker/machine/machines/default\"\r\nexport DOCKER_MACHINE_NAME=\"default\"\r\n```\r\n\r\nfn start gives me error:\r\n\r\n```\r\ntime=\"2018-04-11T01:57:03Z\" level=info msg=\"Setting log level to\" level=info\r\ntime=\"2018-04-11T01:57:03Z\" level=info msg=\"datastore dialed\" datastore=sqlite3 max_idle_connections=256\r\ntime=\"2018-04-11T01:57:03Z\" level=error msg=\"Could not open BoltDB file for MQ\" dir=/app/data error=\"invalid argument\" mq=bolt\r\ntime=\"2018-04-11T01:57:03Z\" level=fatal msg=\"Error during server opt initialization.\" error=\"invalid argument\"\r\n2018/04/11 01:57:03 error: processed finished with error exit status 1\r\n```\r\n\r\n  sweet, just did this too (easy rebase, did exact same thing). let's freeze this wart off  * http now buffers the entire request body from the container before copying\r\nit to the response writer (and sets content length). this is a level of sad i\r\ndon't feel comfortable talking about but it is what it is.\r\n* json protocol was buffering the entire body so there wasn't any reason for\r\nus to try to write this directly to the container stdin manually, we needed to\r\nadd a bufio.Writer around it anyway it was making too many write(fd) syscalls\r\nwith the way it was. this is just easier overall and has the same performance\r\nas http now in my tests, whereas previously this was 50% slower [than http].\r\n* add buffer pool for http & json to share/use. json doesn't create a new\r\nbuffer every stinkin request. we need to plumb down content length so that we\r\ncan properly size the buffer for json, have to add header size and everything\r\ntogether but it's probably faster than malloc(); punting on properly sizing.\r\n* json now sets content type to the length of the body from the returned json\r\nblurb from the container\r\n\r\nthis does not handle imposing a maximum size of the response returned from a\r\ncontainer, which we need to add, but this has been open for some time\r\n(specifically, on json). we can impose this by wrapping the pipes, but there's\r\nsome discussion to be had for json specifically we won't be able to just cut\r\noff the output stream and use that (http we can do this). anyway, filing a\r\nticket...\r\n\r\ncloses #326 :((((((( thanks. wrt the buffer pool... we have 2 in func_logger as it is and this one as well. it seems like it would be a useful thing to have a general purpose buffer pool that can dispense based on some expected size. for this one, it's not perfect since http is using it for container output and json for request input, but in a heterogeneous workload we can't expect that those 2 differ a whole lot (one of the func_logger ones is just for lines, which should be short generally).  something like that. opened #773 - default needs to be handled, as well. we could either return an error or return partial output and somehow try to indicate that their output was too long. not sure how worth it / challenging the partial output thing is (we're truncating logs, but stdout is a little different).  seems like extracting 'util' didn't buy too much sugar, just the ctx stuff (useful, we updated that a good bit)  will resolve the TODO in #728 thanks  For installing the fn :\r\n> curl -LSs https://raw.githubusercontent.com/fnproject/cli/master/install | sh\r\n\r\nthe `install` script does not work as expect due to version=`curl --silent https://api.github.com/repos/fnproject/cli/releases/latest  | grep tag_name | cut -f 2 -d : | cut -f 2 -d '\"'` turns out to be empty. I sucessfully used the `curl | sh` installer y'day (ubuntu 17.10). Need more info about where it isn't working. I did it on CentOS 7.4.\r\n\r\nNow it works as expect. Previously when I tried to open this link https://api.github.com/repos/fnproject/cli/releases/latest I got nothing in the web browser.  This change introduces configurable server-side mandated limits on CPU, memory and disk usage. It required a little bit of refactoring in the agent package.\r\n\r\nThis is the start of a broader work on managing resource usage on Fn nodes and preventing one function from causing disruption to other functions by overusing resources. It's a complex issue and this is just a part of it.\r\nThe goal is not just to defend from malicious agents, but also accidental mistakes (e.g. rogue loop writing terabytes to disk).\r\n\r\nFunctions already have CPU and memory limits set as part of their configuration, but this is more about introducing service-mandated limits - so, the actual limits to function resources will be the minimum between the service-mandated limits and the limits requested by the function developer. only did a quick pass, looks pretty good but will let you finish. one note is that the storage-size option for the docker fs driver is fs driver specific afaik and this appears to rely on the args for overlay[2], which is fine for prod that's what we'll use but I can see other users running into potential issues if they try to play with different fs drivers or if we do at some point for whatever reason -- not sure of the best policy, we could implement the various args based on what docker fs driver we get a handle on in fn, or we could just warn or shut down if it's not overlay, maybe something else?  > I know we know this, but still noting it here, Volume definitions in DockerFile, will bypass the file system limit.\r\n\r\nsince we aren't mounting host points at run time though these will not be mounted, right? @rdallman I have added a check that the docker storage driver supports filesystem quotas. Now if you try to set FN_MAX_FUNC_FILESYSTEM_SIZE on a system that doesn't support filesystem quotas you get a fatal error starting Fn.\r\n\r\nAlso the erroneous calculation of the minimum \"clamp\" is fixed.\r\n\r\n@skinowski With regards to actually refusing requests which want to have more disk space than the server-side maximum, I'm thinking we should refuse to even _deploy_ such functions in the first place (\"sorry, you can't gobble up all our disk space, be nice to your neighbours\"). But, how do we know on an API node that the runners have a size limit? We'd have to assume that they are all started with the same configuration... is it a fair assumption? Could Fn deployments have a heterogeneous set of runners? (there be dragons, I think!) think we have to check if the call is unable to be satisfied at runtime (submit) for now. figuring out how to schedule those into a heterogeneous cluster so that they won't fail is a whole thing we're not quite ready for related: #853  @hhexo Given #853 and #860 (which I've copied some of the impl from here), do you think we can close this? Yes, I think we can close this one.  this means a container could potentially use e.g. 128MB user space + 128MB kernel space? not clear how to rectify if that's the case?  this was being thrown into the fn server logs but it's relatively easy to get\r\nthis to crop up if a function user forgets that they left a `println` laying\r\naround that gets written to stdout, it garbles the http (or json, in its case)\r\noutput and they just see 'internal server error'. for certain clients i could\r\nsee that we really do want to keep this as 'internal server error' but for\r\nthings like e.g. docker image not authorized we're showing that in the\r\nresponse, so this seems apt.\r\n\r\njson likely needs the same treatment, will file a bug.\r\n\r\nas always, my error messages are rarely helpful enough, help me please :)\r\n\r\ncloses #355 https://github.com/fnproject/fn/issues/729 for jason, it's a good first issue for somebody capable of growing sufficient beard to want to dig into the internals (really, I do not have the beard for this one...) The only thing i miss here is the test that does the following: creates a function with json or http format but the function is capable to do only default protocol framing (dummy echo func would be more than enough here). Overall, looks good. yea, could use the hello image, can't use the test-utils image without being able to inject bad behavior into it. been marinating on exactly what scope this should cover in light of discussion, open to thoughts ok, i fixed up test and went ahead and fixed #729, thanks @skinowski for test image updates. should be ready to go... it does leak out the underlying error, in the prominent cases users keep hitting I do think it will help with specificity, even though extraneous cases are possible they still seem somewhat useful so that users can see where it went wrong. thanks!  Overall LGTM. One major concern, JSON format before this change was meant to be close nearly-compatible to CNCF OpenEvent structure, but with this change, we are about to make a step aside. @treeder made JSON proto as it is right now, so i'd like to know if we really want to make that type of changes.\r\n\r\nIf so, i recommend to do the following: make JSON protocol interface embeddable, so if we'd like to bring OpenEvent to Fn there would just one thing to adjust - actual data structure to serialize. Our json format won't match openevent, which is fine. Once the dust settles on that, we'll just have another format, like `openevent` (or I think it's changing to `cloudevent` now). \r\n LGTM LGTM. the amendments seem like only additions really at the top level with removal from the header bucket, so it won't hard break really.   Agree, the function should get the full timeout length to run. \r\n\r\nRegarding using a timestamp to say how long it has (continued from #662), can we be sure the clock inside the container is the same as the one on the host?  What if we get into freezing containers, that would probably make that explicit timestamp very wrong. \r\n We probably need two timeouts:\r\n\r\n1) how long a function gets to run\r\n2) the deadline to start executing a call\r\n\r\nif 2 is not set, we could default it to 1 minute for sync calls.\r\n\r\nFor async calls, perhaps same deadline could be used to specify how long a request can sit in MQ and we could default that to whatever retention is provided in the MQ service.\r\n\r\nWithout clearly defining these, we'll have to answer questions like:\r\n\r\n\"my timeout is 5 secs, why did it take 2 minutes to run my func?\"\r\n\r\nor (today's situation):\r\n\r\n\"my timeout is 5 secs, why did my func actually got 2 secs?\"\r\n there are multiple interpretations of 'timeout' likely that need to be taken into account. \r\n\r\none interpretation is that a request should take no longer than the timeout, this bounds the request to the timeout meaning clients can count on getting a response within the route's timeout. there's an argument to be made that client requests can impose these themselves, however, we're likely going to need to provide some bound on the prerequisites and the current timeout is somewhat convenient, short of having a separate field as suggested that imposes this. it would be nice to minimize knobs for users.\r\n\r\nthe other is that timeout is the time to run the task itself. from a metering perspective, we're likely going to want to bill this entire duration to take into account docker pull of images, container creation time, etc? it also means if a route has 30s timeout, and it takes 1m to pull the container (cold), a request will hang out for 90s, which someone else could interpret as odd.\r\n\r\neither way is flawed and requires additional user cycles. for timeout to enclose the entire call, not just time in docker container, a user will have to coordinate in their function to ensure they have ample time to run vs the latter where they know this is ~timeout, but prior to execution time either an arbitrary timeout needs to be imposed or a user specified timeout needs to be imposed for prerequisite work and the client request has no guaranteed bounds on response time from fn. so we need to pick who gets funny times, the client or the code. for cold specifically, this gets really funky, and imo it's really not all that challenging to adjust a timeout if a user gets too many 503 than their liking (1-2s is far from the default), though there is some argument to be made that the code should execute within some bounds (timeout) and perhaps ancillary stuff may not, it's hard to express this with one timeout for cold; for hot, a lot of this gets hidden in 1->N case (0->1 has same issue as cold) since we can do some slot magic.\r\n\r\n> If the function developer hasn't allowed for enough wriggle room, the function user will occasionally see those nasty 503 \"server too busy\" errors\r\n\r\nimo this isn't something we need to optimize for because we are never going to get rid of these (ever ever) and we're going to use the lb to route around the ones of this nature in practice.\r\n\r\n> can we be sure the clock inside the container is the same as the one on the host? What if we get into freezing containers, that would probably make that explicit timestamp very wrong.\r\n\r\nlet's cross that bridge once we have freezing containers?  Also, if say we had two timeouts; wait timeout and exec timeout as I suggested, we may have better retry policy it at lb level going forward...\r\n\r\nFor example, if wait timeout is set to say 60 secs and exec timeout of 5 secs, we could fail faster on fn servers and leave room for x number of retries at lb level... eg. \"wait_timeout=60 exec_timeout=5 retries=2\" could be a policy of 30 secs on each fn server.\r\n\r\n\r\n also wrt lb, for sync we're going to impose lb timeout limits on the request as well, which will provide cancellation if e.g. image pulling takes too long; not sure we can rely on this exactly so we should have additional measures. for async, we could inject the same timeout or do something else.  Sounds good to me. not opposed at all, just an additional point to consider is the 50% thing is mostly nice for async, with it going away async will get a lot more 'timeout' status if node(s) have many functions queued up. thinking about it, no obvious fix sticks out since slots aren't plumbed out (even if there's capacity, there's still docker pull to eat the clock...). maybe something comes to mind for someone else.   This enables a function `type` called `app`, which is intended for a function written as an app. \r\n\r\nIt also, enables a wildcard route at the root level, ie: `path: /*` (re: #313).\r\n\r\nThis does NOT help with concurrency (these types of functions could handle concurrent requests). cc @skinowski, re your slack comment today.  \r\n\r\nSimple ruby example func included and works. \r\n\r\n## Background\r\n\r\nAfter seeing some similar things out there, there have been many discussions how that could look within Fn. `fn deploy` is such a nice and simple way to deploy a function, why not a containerized app? A hot function is essentially the same as a long running app, just that it can only do one thing and can only be reached by one endpoint. The way Fn scales and deals with hot functions could easily apply to an application too. Getting a lot of traffic?  Add more containers and load balance between them. Sitting idle for X seconds? Kill it. \r\n\r\n## TODO\r\n\r\n* [ ] I was noticing sometimes that the first request to a new container would fail. \r\n* [ ] Automatically use format `port-http` if type is app (and only allow that combination). \r\n I'm excited about this. I was expecting \"port\" to be an orthogonal attribute though (eg. like cpu, memory).\r\nFor example, an async route that uses json, but binds to a port. If port is enabled, we spawn an non-interactive container and all container needs to do is to bind/listen/accept, but then route that connection through json or http depending on protocol chosen. (Eventually perhaps all of this could go over http2 under the hood to cut down num of connections plus we could do server push.)\r\n\r\n If we could use non-interactive containers, we might (a bit experimental it seems, but) be able to use:\r\n\r\nhttps://criu.org/Docker\r\n\r\nto checkpoint/start containers quickly. (They don't support interactive containers seems like.) If you want to run long-lived containers  there are lots of things you ultimately want to take into account of  - ultimately you end up implementing something like kubernetes don't you? \r\n\r\nI would prefer to see a better integration between fn as it now and k8s than a cheap version of k8s creeping into fn. \r\n\r\nWhat if I need to kill the node that the container has started on - do I have to start this up again? \r\nWr.t. this - In a distributed install behind a LB  with multiple fn servers where (no which host) would that port land?\r\nwould containers be able to talk to each other on these ports? \r\n\r\nI think solving wildcard at the gateway/ingress layer of fn (with everything else staying the same) looks better from a user perspective (i.e. solve the path-matching problem for current FN calls) is my preference.  @zootalures this is more along the lines of Azure Container Instances or Hyper.sh. \r\n\r\n> If you want to run long-lived containers there are lots of things you ultimately want to take into account of - ultimately you end up implementing something like kubernetes don't you?\r\n> I would prefer to see a better integration between fn as it now and k8s than a cheap version of k8s creeping into fn.\r\n\r\nI don't think Kubernetes is a great end user experience, definitely not as nice as `fn deploy` and you're done. And this is why things like Container Instances exist.\r\n\r\n> What if I need to kill the node that the container has started on - do I have to start this up again? Wr.t. this - In a distributed install behind a LB with multiple fn servers where (no which host) would that port land? would containers be able to talk to each other on these ports?\r\n\r\nEverything is exactly the same as hot functions, which is why this PR is pretty simple. App in use, keep it hot. App getting busy, scale it out. App not in use, kill it. \r\n\r\n> I think solving wildcard at the gateway/ingress layer of fn (with everything else staying the same) looks better from a user perspective (i.e. solve the path-matching problem for current FN calls) is my preference.\r\n\r\nThis does need to solved, but it's somewhat independent of this. Needs to be solved for functions too, not just for this. \r\n Going to close this for now, until we decide to move forward with something like this.  Is there some news? What did you decide regarding things like that?  Maybe first time, it does soft, but if pressed 5 times, it will hard kill anything running and shutdown. \r\n\r\nRight now, it just waits until it's done serving anything and no way to hard kill it. \r\n `pkill -9 fn` works :) -- that seems sane so long as init processes don't also do that and skirt our safe shutdown (I do not know off the top of my head) is this related #689 where docker receives signal and dies and fn tries to talk to in vain?  No, basically if you ctrl-c, then you have to wait for all the hot containers to die off before it quits. I just want a hard quit. The other option would be to just know that there are no requests coming in and just shutdown the hot containers, that would work too. \r\n  Hello \r\n\r\nI get this error when tried  \"fn start\"\r\ncan't create unix socket /var/run/docker.sock: device or resource busy.\r\n\r\ni am running Docker with minikube ...any idea what i suppose to do .\r\n\r\n I *think* you can ignore that. Can you paste the entire log output? @treeder I think in cli start, we should pass an arg to fn container to make it clear that the invocation wants to skip docker start inside dind. Then we can skip dockerd start inside dind and avoid this issue? we can probably just check the existence of `/var/run/docker.sock` and if it's there, not start one. not sure how that would handle docker stop/start of fn* -- an idea, no less if you stop dockerd, the sock still exists, so I don't think it'll work. #147 maybe? Fixed by https://github.com/fnproject/cli/pull/147 @rushins could you please confirm the issue is fixed? That message was a warning that needed to be ignored, so you should be able to proceed with your work regardless. Can you please confirm? @skinowski : do you want me try by downloading the latest code and try as i see that you have stated \"fixed by  fnproject/cli#147\". please confirm what to do, so that i will post my results after your confirmaton. @rushins grab the latest CLI from here: https://github.com/fnproject/cli/releases\r\n\r\nthen try again.\r\n\r\n(sorry brew not updated to latest yet if you're on a mac) i have alerady have the latest FN, but still i see this problm\n\nOn Fri, Feb 2, 2018 at 3:11 PM, Tolga Ceylan <notifications@github.com>\nwrote:\n\n> Closed #706 <https://github.com/fnproject/fn/issues/706>.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/fnproject/fn/issues/706#event-1456072888>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ALMlXw4PgSDMQ3JeT0laeBTRs_EjXJnCks5tQ5Y5gaJpZM4RldDa>\n> .\n>\n\n\n\n-- \nBest Regards,\nNS Rushi,\n\nThree things in life that makes you a great person.  1. Hardwork 2.\nSincerity 3. Success.\n  When fn system is stable (no new containers are spawned nor killed) running hot functions, containerd is observed to take some CPU. In this case, say for 200 containers working on a steady 20 req/sec load, we observe 200 shim processes, 1 containerd process (but with many threads).\r\n\r\nSeems like containerd is on the data processing path.\r\n\r\nwhy is containerd taking cpu? due to logs? stats? IO?\r\n\r\nIf we moved to port/network model instead of stdin/out/err, would this take containerd out of the data flow?\r\n This is stats related, if:\r\n\r\nhttps://github.com/fnproject/fn/blob/master/api/agent/drivers/docker/docker.go#L298\r\n\r\ncollectStats is disabled, containerd CPU usage goes away. Related:\r\n\r\nhttps://github.com/docker/for-linux/issues/190 As a side note, these stats (we currently use) are standard cgroup accounting metrics available in /sys/fs/cgroup, so worst case if this issue becomes a priority, we can pull these ourselves.  *) Remove go routine protocol Dispatch() to avoid unsafe\r\nconcurrent access to http.ResponseWriter headers map.\r\n*) Swap go routine Dispatch() with channel IO select\r\nto detect timeouts and also notify hot container to\r\nshutdown in case of context cancel/timeout.\r\n*) Close read/write pipe ends in hot container exit\r\nto purge lingering IO in pipes. Fixes the following:\r\n\r\n*) A hot container that timed out or somehow failed and can no longer respond. These cases can occur if timeouts occur in the middle of I/O. Once the protocol req/resp is broken, that container can no longer serialize any more requests nor responses. For instance, if hot container executes 'sleep 9000' and the client request times out, then it's possible to keep that hot-container alive with incoming traffic. Until sleep 9000 completes, the hot container will emit timeouts to all requests. **runner_test.go** simulates this with a sleep 60 secs, where the following request fails due to stuck hot container:\r\n\r\nhttps://github.com/fnproject/fn/blob/master/api/server/runner_test.go#L269\r\n\r\nHowever, this test case passes on master today since 5 secs is not long enough to freeze the pipes.\r\n\r\n*) Build failure from today:\r\n\r\n```\r\nfatal error: concurrent map writes\r\n\r\ngoroutine 1127 [running]:\r\nruntime.throw(0x11f22f2, 0x15)\r\n\t/usr/local/go/src/runtime/panic.go:605 +0x95 fp=0xc4206b3ca0 sp=0xc4206b3c80 pc=0x436f75\r\nruntime.mapassign_faststr(0x10e8b80, 0xc42058ab70, 0xc4204ac5f4, 0xc, 0x2)\r\n\t/usr/local/go/src/runtime/hashmap_fast.go:685 +0x4da fp=0xc4206b3d20 sp=0xc4206b3ca0 pc=0x41815a\r\nnet/textproto.MIMEHeader.Add(0xc42058ab70, 0xc4204ac5f4, 0xc, 0xc4204ac600, 0x10)\r\n\t/usr/local/go/src/net/textproto/header.go:15 +0xf0 fp=0xc4206b3d88 sp=0xc4206b3d20 pc=0x6b3150\r\nnet/http.Header.Add(0xc42058ab70, 0xc4204ac5f4, 0xc, 0xc4204ac600, 0x10)\r\n\t/usr/local/go/src/net/http/header.go:24 +0x53 fp=0xc4206b3dc0 sp=0xc4206b3d88 pc=0x715b73\r\ngithub.com/fnproject/fn/api/agent/protocol.(*JSONProtocol).Dispatch(0xc420608f60, 0x1aa1dc0, 0xc42063c9f0, 0x1aa5140, 0xc4203b5950, 0x2b15b8b71910, 0xc420303d90, 0xc42070568f, 0x0)\r\n\t/home/circleci/go/src/github.com/fnproject/fn/api/agent/protocol/json.go:172 +0x234 fp=0xc4206b3f38 sp=0xc4206b3dc0 pc=0xd4cf84\r\ngithub.com/fnproject/fn/api/agent.(*hotSlot).exec.func2(0xc420158ab0, 0xc4205cdda0, 0xc4205b9600, 0x1aa1dc0, 0xc42063c9f0)\r\n\t/home/circleci/go/src/github.com/fnproject/fn/api/agent/agent.go:525 +0xe6 fp=0xc4206b3fb8 sp=0xc4206b3f38 pc=0xd6dfb6\r\nruntime.goexit()\r\n\t/usr/local/go/src/runtime/asm_amd64.s:2337 +0x1 fp=0xc4206b3fc0 sp=0xc4206b3fb8 pc=0x467fc1\r\ncreated by github.com/fnproject/fn/api/agent.(*hotSlot).exec\r\n\t/home/circleci/go/src/github.com/fnproject/fn/api/agent/agent.go:521 +0x365\r\n```\r\n\r\nThis is caused by the go routine in hot exec protocol.Dispatch(). Related #497   Currently, dind entry works like this:\r\n\r\n```\r\ndockerd &\r\nsleep 3\r\n./fn\r\n```\r\n\r\nInstead of this, we need a management system that is lightweight yet that can establish these dependencies clearly and robustly. (eg. if dockerd dies also kill fn server, spawn fn server only after dockerd is started, etc.)\r\n\r\nAlso see sidecar pattern and/or other ways of restructuring this. Perhaps these should be two containers where fn server runs as a sidecar container. Or adopt an init process to manage it, eg. see: http://without-systemd.org/wiki/index.php/Init\r\n\r\nDuring testing, ran into a case of crashed dockerd/containerd and fn server continued running unable to service requests. there is some thinking that went into this:\r\n\r\nin the case that `fn` dies, the container will die. in the case that docker dies, `fn` has a chance to finish any outstanding tasks. `supervisord` and friends (init) were not great solutions to this (restarting `fn` or `dockerd`) as in most cases in prior experiences, when docker dies, there is no restarting docker to bring it back. when `fn` dies, as far as state tracking and stuff kind of all bets are off, there are some cases like panic where a quick restart almost makes sense but since we lost our pipes to the user containers it doesn't really do us a whole lot of good to restart in container vs the container restarting.  the best solution to date for this was when docker dies, stop running tasks on that server, let it finish all tasks it was running, and take it out of commission. in a previous life we started containers every task and that would simply fail (in a manner safe to retry elsewhere), with hot functions we no longer have this duty and perhaps we need a higher level process running around making sure docker is not dead and shutting down the incoming task stream when it is -- the experience here is that this is also finicky (checking docker ping) but if we relax it enough we should be able to at least have an improvement over never checking. anyway, point being, this has been easier to do operationally in the past.  Low priority, but another related issue is if docker dies during shutdown, fn server keeps retrying a non-existing docker socket and does not shut down. Consistently getting this:\r\n\r\nFN started via:\r\n\r\n```\r\ndocker run --rm --privileged -it -e NO_PROXY -e HTTP_PROXY -e FN_LOG_LEVEL=debug -e FN_ZIPKIN_URL= -e FN_DB_URL=sqlite3:///app/data/fn.db -v /home/tceylan/workdir/go/src/github.com/fnproject/fn/data:/app/data -p 8080:8080 fnproject/fnserver\r\n```\r\n\r\nCTRL-C results in dockerd dead, but fn running (further CTRL-C are ignored):\r\n\r\n```\r\n^CINFO[0290] Halting...                                   \r\nINFO[2018-01-18T02:55:21.354945110Z] Processing signal 'interrupt'                \r\nINFO[0290] server stopped                               \r\nINFO[0290] hot function terminated                       app=fn-http-func cpus=200m error=\"<nil>\" format=http id=01C43K26N847WPT00000000000 idle_timeout=20 image=\"tceylan/fn-http-func:0.0.14\" memory=128 route=/fn-http-func\r\nWARN[0290] docker temporary error, retrying              error=\"Delete http://unix.sock/containers/01C43K26N847WPT00000000000?force=1&v=1: dial unix /var/run/docker.sock: connect: no such file or directory\"\r\nWARN[0290] docker temporary error, retrying              error=\"Delete http://unix.sock/containers/01C43K26N847WPT00000000000?force=1&v=1: dial unix /var/run/docker.sock: connect: no such file or directory\"\r\nWARN[0290] docker temporary error, retrying              error=\"Delete http://unix.sock/containers/01C43K26N847WPT00000000000?force=1&v=1: dial unix /var/run/docker.sock: connect: no such file or directory\"\r\nWARN[0290] docker temporary error, retrying              error=\"Delete http://unix.sock/containers/01C43K26N847WPT00000000000?force=1&v=1: dial unix /var/run/docker.sock: connect: no such file or directory\"\r\n```\r\n\r\nwhere we are left with two processes (one defunct):\r\n\r\n```\r\nroot     12600 12585  2 18:50 ?        00:00:16 ./fnserver\r\nroot     12645 12600  2 18:50 ?        00:00:16 [dockerd] <defunct>\r\n```\r\n\r\nLooks like fn server (now the init process) should honor init responsibility and reap/wait for children as well.\r\n\r\nEventually (a few minutes?) it times out and shutdown succeeds:\r\n\r\n```\r\nWARN[0885] docker temporary error, retrying              error=\"Delete http://unix.sock/containers/01C43K26N847WPT00000000000?force=1&v=1: dial unix /var/run/docker.sock: connect: no such file or directory\"\r\nWARN[0888] docker temporary error, retrying              error=\"Delete http://unix.sock/containers/01C43K26N847WPT00000000000?force=1&v=1: dial unix /var/run/docker.sock: connect: no such file or directory\"\r\nWARN[0890] docker call timed out                         error=\"context deadline exceeded\"\r\nERRO[0890] error removing container                      container=01C43K26N847WPT00000000000 error=\"context deadline exceeded\"\r\n``` is the SIGINT being forward to dockerd? maybe we just need to prevent that? (not sure if solely configuration issue, i.e. using docker cli in terminal) otherwise ~looks like safe shutdown is behaving as intended it's just weird that docker dies [in this configuration]. \r\n I think in this case, since docker is run (as in Makefile) with interactive and with tty (-ti) so CTRL-C SIGINT delivered to both docker and fn server. We could prevent SIGINT to docker in the entry shell script. Is it time to close this? A few PRs went in, which remedies most of these issues:\r\n\r\n1) we've just added dockerd monitoring/pid to prometheus/opencensus. #837 \r\n2) track/consume SIGCHLD #771 \r\n3) prevent passing SIGINT to dockerd #771 \r\n\r\n(Also related CLI related dind by-pass: https://github.com/fnproject/cli/pull/147)\r\n +1  This should probably be pushed back into the base image, and/or\r\nupstream into dind's master.\r\n\r\nIn many k8s environments the host docker uses an overlay network\r\nwhich'll take bytes away from the effective MTU of outer\r\ncontainers; eg, vxlan needs 50 bytes, often leaving a 1450 MTU\r\non the container running dind and fn-api.\r\n\r\nIn such an arrangement, packets exceeding the smaller MTU may be\r\ninvisibly dropped as they travel across the dind's docker0\r\nbridge. This mostly surfaces as a failure of functions to be able\r\nto reliably talk to external services. (Note, the failure may be\r\nintermittent depending on the profile of the resulting TCP\r\ncommunication.)\r\n\r\nA robust fix for this is to intercept the startup of the dind\r\ndockerd and ensure that /etc/docker/daemon.json (currently\r\nabsent) contains the following setting:\r\n\r\n{\r\n  \"mtu\": 1450\r\n}\r\n\r\n(or whatever the MTU on the external interface may be). This\r\nshould be autosized so the container works in a variety of\r\ndeployments.\r\n\r\nThe problem does not arise when using an embedded\r\n/var/run/docker.sock - or when running with dind on a host that\r\ncan supply 1500-byte MTUs to containers on the 'host' docker. Done; that's cleaner, but it'll need the fnproject/dind image re-released, and the top-level Dockerfile updated to refer to it. Right, I've just rebuilt and re-run the same test on my desktop using that patch. Good to merge I think. @rdallman he updated based on your suggestion in #687 .\r\n  I think this should be part of perf run, only to be invoked in circle CI (eg. a specific Makefile target called from circle CI), since there we have some sense of what size the machine is. But part of regular test suite, is going to fail in small machines.  Currently a JSON event looks as follows: \r\n\r\n```\r\n{\r\n\"call_id\":\"01C3E63BQH47WG600000000000\"\r\n,\"content_type\":\"application/json\"\r\n,\"body\":\"\\\"Foo\\\"\"\r\n,\"protocol\":{\"type\":\"sync\"\r\n,\"request_url\":\"http://localhost:8080/r/foo/testfn\"\r\n,\"headers\":{\"Accept-Encoding\":[\"gzip\"],\"Content-Type\":[\"application/json\"],\"Fn_call_id\":[\"01C3E63BQH47WG600000000000\"],\"Fn_deadline\":[\"2018-01-09T19:25:07.489Z\"],\"Fn_method\":[\"POST\"],\"Fn_request_url\":[\"http://localhost:8080/r/foo/testfn\"],\"User-Agent\":[\"Go-http-client/1.1\"]}\r\n}\r\n}\r\n```\r\n\r\n(re-formatted: \r\n```\r\n{\r\n  \"call_id\":\"01C3E63BQH47WG600000000000\",\r\n   \"content_type\":\"application/json\",\r\n   \"body\":\"\\\"Foo\\\"\",\r\n   \"protocol\":{\r\n         \"type\":\"sync\",\r\n         \"request_url\":\"http://localhost:8080/r/foo/testfn\",\r\n          \"headers\":\r\n                     {\r\n                        \"Accept-Encoding\":[\"gzip\"],\r\n                        \"Content-Type\":[\"application/json\"],\r\n                        \"Fn_call_id\":[\"01C3E63BQH47WG600000000000\"],\r\n                        \"Fn_deadline\":[\"2018-01-09T19:25:07.489Z\"],\r\n                         Fn_method\":[\"POST\"],\r\n                        \"Fn_request_url\":[\"http://localhost:8080/r/foo/testfn\"],\r\n                        \"User-Agent\":[\"Go-http-client/1.1\"]\r\n                    }\r\n           }\r\n}\r\n```\r\n\r\nI think : \r\n* $.protocol.type should be 'http'  (and should maybe be renamed): This should indicate the sort of metdata you are getting in the protocol document (it's unrelated to the fn event type (sync/async)\r\n  I think the assumption is that 'protocol' is specific metadata related to the type of event that was received (e.g. an HTTP call). The assumption is that this may change/extend in future  in future (e.g. MQ event Kafka event etc)  \r\n* there should be no \"Fn_\" headers in the HTTP headers - these should be a faithful representation of the original input headers - this is  actually making it harder to identify the correct header set as I have to strip-off fn_ prefixed headers. \r\n* Relevant \"Fn_\" headers should be moved up to the top-level message or to the protocol doc. \r\n\r\ne.g.\r\n \r\n```json\r\n{\r\n  \"call_id\":\"01C3E63BQH47WG600000000000\",\r\n   \"content_type\":\"application/json\",\r\n   \"body\":\"....\",\r\n   \"type\": \"sync\", \r\n   \"deadline\": \"2018-01-09T19:25:07.489Z\",\r\n   \"protocol\":{\r\n         \"type\":\"http\",\r\n         \"request_url\":\"http://localhost:8080/r/foo/testfn\",\r\n          \"method\": \"GET\" ,\r\n          \"headers\":\r\n                     {\r\n                        \"Accept-Encoding\":[\"gzip\"],\r\n                        \"Content-Type\":[\"application/json\"],\r\n                        \"User-Agent\":[\"Go-http-client/1.1\"]\r\n                    }\r\n           }\r\n}\r\n```\r\n\r\n\r\n   It would be nice while doing this to move where we modify the headers on the request (where it adds the `Fn_` headers) into the http protocol handler, and not earlier. So everyone will have the unmodified original request to work with and they won't end up in these other protocols. \r\n Thikning about it (and changing my mind from previous (sorry @denismakogon ),  I think changing the json writer to use standard  Go JSON  marshalling for the JSON output  (or at least guaranteeing that each message is on exactly one line) would be better/easier inside the FDK.  \r\n\r\nThat would rely on upstream to guarantee that messages don't exceed memory, but I think that's implied for async anyway.  \r\n\r\nSome languages  (well node.js anyway) don't have a native json stream parser so that lets an FDK buffer the line before parsing it in one shot. \r\n  Python doesn't have built-in non-blocking JSON parser, so, it's not a problem at all.\r\n\r\nWhat if we just include the whole HTTP request into the payload? Just out of curiosity. > What if we just include the whole HTTP request into the payload? Just out of curiosity.\r\n\r\nDo you mean the Raw HTTP Frame as a JSON string? \r\n\r\nIf so, dunno but the current encapsulation seems pretty \"as expected\" so wouldn't change  it\r\n\r\nAssuming I've understood - isn't one of the reasons for having the JSON format to avoid complications in reading HTTP frames, so wouldn't that put you back where we started.  > \"timeout seconds from the moment the call is started\"? Because at the moment it is neither of those... it's \"timeout seconds from the moment when some code in GetCall runs\".\r\n\r\nit is intended to be [for sync] starting the clock as soon as we receive a request to run a function. for async, when whoever picks it up goes to run it. explicitly, it is before 'start', since start takes time. and for async, time since created is just not-quite-right, but for sync this is accurate.\r\n\r\nwrt where it comes from, it's easily taken from the context, as well (`ctx.Deadline()`) and provided through CallInfo. \r\n\r\nit's unfortunate that switching protocols will change headers' location, but I think I've beaten the dead horse to death again... > Hm... but the deadline is only in the context because it was put there by taking it from execDeadline which is the field I'd like to refactor out.\r\n\r\nI see, it's added to the headers in a separate location, so there's 2 things I guess. we do still want to impose `execDeadline` in the context deadline itself, so it may move but still needs to be in the same context that it is now to enclose `submit`. my understanding was we just want to pluck the location where it's set in headers out and expose `execDeadline` through `CallInfo` since polluting the header bucket in the picture-esque json format is unsightly.\r\n\r\n> ProcessedAt\r\n\r\nwe have `call.started_at` and `call.completed_at` which encompass this? we do want to obey the timeout on the call with anything required to build the call, but the deadline does not really change due to this. as it is, queued_time = started_at - created_at so I think this conceptually is the same thing.  to be clear, if we simply pass `started_at` to the function to compute it's own timeout based on `started_at.Add(call_timeout)` then this will be different than the actual context timeout that we are imposing on the call.  Does the function need that? Or could it just know that it has 60 seconds to do it's thing?  it needs a timestamp of when the party is over, because computing it locally will be different than the timeout we are imposing upon it from fn's side of things (from an implementation standpoint, this is really straightforward, and should not be a concern..)  \r\nfn-test-utils can (should) be able to simulate all of this functionality, therefore\r\nremove/cleanup references to these images and decommission them from fn repo. +1 for this, fnproject/error is relatively huge:\r\n```\r\nfnproject/error           latest              3a928b32cc60        3 months ago        55.6MB\r\n```\r\nalpine pg image is 35megs, lol, we definitely need to come up with the only one image for testing.\r\n\r\nAs side problem, unknown (really) number of images our tests are depending on pollutes local registry blazingly fast, so having 1 tagged image makes a lot more sense. Along with that, the number of functions we made for tests really makes fn repo looks like a dump of stuff we don't really want to store locally or at our own repositories.\r\n Yeah, agreed. But not sure that that image is the last one lest there. Quick search gave at least one more image to substitute: `fnproject/multi-log` that is used at API tests as well multi-log is gone... moved to fn-test-utils.   * use PG alpine\r\n * use Minio alpine\r\n * no official alpine distro for MySQL, uhhh :(\r\n * install swagger tool instead of docker image\r\n * use retry func to confirm that datastore is okay before running tests\r\n Reverting minio image:\r\n```\r\ndocker images | grep minio\r\nminio/minio                   latest              4110ee55fc11        4 weeks ago         27.3MB\r\nwebcenter/alpine-minio        latest              49c8f4547226        7 weeks ago         82.3MB\r\n``` Not sure what we can do with mysql image, which is 408Mb, mysql docker community has done zero to build on alpine by this time.\r\n\r\nPG alpine size made me happy, really:\r\n```\r\ndocker images | grep postgres\r\npostgres                      latest              ec61d13c8566        12 days ago         287MB\r\npostgres                      9.3-alpine          0350272b4017        2 weeks ago         35.5MB\r\n```\r\n\r\nSo, the time difference is not that huge at this moment, but a good thing to have along with #624. @rdallman i'll address all comments except swagger tool change. Regarding the MySQL alpine image, we might ask @mattlord for help. @rdallman I pushed the image to my own docker repo: `denismakogon/swagger-tool:0.0.1`. Dockerfile you can find in-tree.\r\nIt's not 2Mb size, but 30Mb. Still better than 0.5Gb.\r\n How about add it to fnproject/dockers ?  Or at least we need the Dockerfile and build scripts public.  Sure, can submit there. @treeder https://github.com/fnproject/dockers/pull/7 Kind of unrelated, but we should eventually be able to get rid of sleeper, hello and error images as fn-test-utils can perform same functionality. I tried removing these with one PR, but I quickly realized it's more work than I anticipated. Rebased. Nice, we're at `07:46`, which is good. Is there anything else that we can speed up? * we could play with caching the static library files between runs. 99.9% of the time they don't change, and `go install` takes about a minute, and should handle building new versions only when it needs to. \r\n* seems like reducing tests down to one image could save maybe 30s or so, per https://github.com/fnproject/fn/pull/629#issuecomment-354847459\r\n* we're building the release docker image on branches even though we don't use it for anything, we only need to do this on master. that's 2 minutes. \r\n\r\nseems like we could get under 5 minutes pretty easily. we're also installing new docker version every time, that's 1 minute. maybe we could cache that, too\r\n\r\nat least, we could have it in a `.deb` pack we could just `dpkg -i` it, that we could cache +1 on \"go install\", that should shave extensions/middleware building time as well.  Refactoring API tests to take less time\r\n    \r\n- sqlite: tests 15s, overall time: 1m\r\n- mysql: tests 15s, overall time: 59s\r\n\r\nAll time that CI takes: pulling images Let's see how much time CI will take to run them Unfortunately, compiling takes a lot of time.\r\n```\r\ntime go test -c -i\r\n\r\nreal\t1m18.562s\r\nuser\t2m37.974s\r\nsys\t0m21.343s\r\n```\r\n FYI, in #625 , I've fixed a typo. sqlite => sqlite3. Makefile/circleCI was calling api_test.sh with wrong arg for sqlite. That's not really critical, the API tests will just go for default value which is sqlite3. At this moment i think about what @rdallman mentioned. Build test binary once and then run it whenever you need API tests. Hey, @skinowski check the latest commit, it tries to accomplish what I was talking about: build binary during first API test run then other ones will reuse that binary later. Okay, there are some problems with CI at this moment, when trying to run `go test -i -a` CI fails with the following error:\r\n```\r\ngo install runtime/internal/sys: open /usr/local/go/pkg/linux_amd64/runtime/internal/sys.a: permission denied\r\n```\r\nsee latest [build log](https://circleci.com/gh/fnproject/fn/1701?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link).\r\nAny idea how can we overcome this? @rdallman @skinowski Got some ideas, will try to fix access rights to corresponding files and that should make it work, at least had the same problems with Gogland couple month ago. Changing ownership and rights helped. Dirty hack worked. One binary, 3 test suites.\r\n\r\nAPI tests with MySQL: 22 seconds\r\nAPI tests with PG: 17 seconds (pg becomes reachable faster than MySQL)\r\nAPI tests with sqlite3: 12 seconds\r\n\r\n sweet, says down to 7 minutes with go install. looks like this pulls in #630 - made a comment there to discuss, the rest looks good. update with #630 and we'll get this in  Recent addition of fn-test-utils image increased this significantly. Looking into it. #619 related Extensions and middleware compilations at the end of test.sh script is taking forever since 'go build' goes seem to perform incremental builds.  Identified the real culprit in this, looks like fn-test-utils container stays in a busy-loop spewing errors. See: \r\n\r\n[https://github.com/fnproject/fdk-go/pull/8](https://github.com/fnproject/fdk-go/pull/8)\r\n\r\nThis causes rest of the build to take forever.\r\n Also a poor man's attempt to speed up a few things in test.sh and release.sh:\r\n\r\n#620  Container leak workaround in runner_test.go:\r\n\r\nhttps://github.com/fnproject/fn/pull/622 `make docker-build`, we use vanilla go 1.9 alpine image and we do install there few more packages, so could someone tell if we can create our own version of go 1.9 alpine with all of that packages and just use that as the base image for build fnserver image? It takes a lot of time in CI. swagger image is damn huge for just one binary file, almost half a gig. Maybe we can just pull binary release from here https://github.com/go-swagger/go-swagger/releases and use that binary instead whole image? Middleware and extensions:  CI builds at least 2 different binaries for those to see if API is not broken. So, just specifically for testing, can\u2019t we go with 1 example that includes both middleware and extension? Datastore images: mysql, redis, postgres, minio are huge, we need to get smaller (alpine?) images for testing in CI. Played around with #625 an attempt to reduce shell script stuff into Makefile itself. Brings the build down to 14 min. down to 5 minutes now. awesome, thanks!\r\n\r\nsome more ideas:\r\n\r\nhttps://github.com/fnproject/fn/pull/629#issuecomment-354874302\r\nhttps://github.com/fnproject/fn/pull/629#issuecomment-354874667 4 minutes and change now.\r\n\r\nthe go install caching, if possible, should save about another minute off. would be sweet, but this is pretty bearable for now. we could leave this open I guess as ongoing but seems like we're in a pretty good spot   Here's a truncated report from go vet on our issues:\r\n```\r\napi/agent/agent.go:17:2: could not import github.com/fnproject/fn/fnext (can't find import: \"github.com/fnproject/fn/fnext\")\r\n\r\napi/agent/drivers/docker/docker_client.go:116:12: too many arguments\r\n\r\napi/agent/hybrid/client.go:29:27: DataAccess not declared by package agent\r\n\r\napi/datastore/mock_test.go:6:2: could not import github.com/fnproject/fn/api/datastore/internal/datastoretest (can't find import: \"github.com/fnproject/fn/api/datastore/internal/datastoretest\")\r\n\r\napi/datastore/internal/datastoretest/test.go:67:9: invalid operation: ds (variable of type github.com/fnproject/fn/api/models.Datastore) has no field or method UpdateCall\r\n\r\napi/datastore/internal/datastoreutil/metrics.go:89:9: invalid operation: m.ds (variable of type github.com/fnproject/fn/api/models.Datastore) has no field or method UpdateCall\r\n\r\napi/datastore/sql/sql_test.go:8:2: could not import github.com/fnproject/fn/api/datastore/internal/datastoretest (can't find import: \"github.com/fnproject/fn/api/datastore/internal/datastoretest\")\r\n\r\napi/datastore/sql/sql.go:518: can't check non-constant format in call to Sprintf\r\n\r\napi/logs/log_test.go:9:13: could not import github.com/fnproject/fn/api/logs/testing (can't find import: \"github.com/fnproject/fn/api/logs/testing\")\r\n\r\napi/logs/s3/s3_test.go:8:13: could not import github.com/fnproject/fn/api/logs/testing (can't find import: \"github.com/fnproject/fn/api/logs/testing\")\r\n\r\napi/server/app_listeners.go:7:2: could not import github.com/fnproject/fn/fnext (can't find import: \"github.com/fnproject/fn/fnext\")\r\n\r\nexamples/middleware/main.go:28:27: cannot use &(CustomMiddleware literal) (value of type *CustomMiddleware) as github.com/fnproject/fn/api/server.Middleware value in argument to funcServer.AddMiddleware\r\n\r\nfnlb/main.go:15:2: could not import github.com/coreos/go-semver/semver (can't find import: \"github.com/fnproject/fn/vendor/github.com/coreos/go-semver/semver\")\r\n\r\nfnlb/lb/allgrouper.go:14:2: could not import github.com/coreos/go-semver/semver (can't find import: \"github.com/fnproject/fn/vendor/github.com/coreos/go-semver/semver\")\r\n\r\nimages/fn-test-utils/fn-test-utils.go:10:6: could not import github.com/fnproject/fdk-go (can't find import: \"github.com/fnproject/fdk-go\")\r\n\r\ntest/fn-api-tests/utils.go:74:23: WithDBURL not declared by package server\r\n\r\ntest/fn-api-tests/fn/formats/json/go/func.go:34: can't check non-constant format in call to Fprintf\r\ntest/fn-api-tests/fn/formats/json/go/func.go:41: can't check non-constant format in call to Fprintf\r\ntest/fn-api-tests/fn/formats/json/go/func.go:52: can't check non-constant format in call to Fprintf\r\ntest/fn-api-tests/fn/formats/json/go/func.go:65: can't check non-constant format in call to Fprintf\r\n```\r\nI assume most of them needs to be fixed.\r\n\r\nHow to reproduce:\r\n```\r\ngo vet -v ./...\r\n```\r\n  Fn API changed.\r\nSwagger updated.\r\nCertain API tests were disabled to make CI happy. Okay, the swagger doc is updated. Will push new client(s) once swagger doc will be at the master. Answering your questions:\r\n1. This code works with old swagger clients (API tests are passing and Logs API tests are there).\r\n2. API works with the new client (patch for https://github.com/fnproject/cli/pull/128).\r\n\r\nRegarding API test, okay, that's possible. I see that a lot of code was rolled back in this PR, but why did/do we want to change the default response to plain/text instead of json like it was?  I get the reason that someone might want this, but I would find it strange that a particular endpoint returns plain text by default while the rest return JSON. \r\n So, there's at least one reason why we should not ship logs as JSON. It forces us to do buffering of the whole log object which can actually be pretty huge. The second reason is JSON that we ship at this moment is mostly useless because users would need just log entity, why do they need exactly the same call ID as they passed in the request (just remember we dropped app name from router response object). Without call ID current JSON response is nothing but a JSON with 1 item only. So, tell me what's the point of having a JSON response that forces us to buffer the log at the server and do JSON parsing at the client side, why not just ship log as text?\r\n\r\nRegarding amendments, at 1st iteration, i decided to implement gzip thing for making logs smaller, but @rdallman had concerns about the implementation, so we decided to stick with 1st part of the original issue - ship log as text, and as the follow-up - use gzip to shrink logs.\r\n Well, consistency for one. Every endpoint returns JSON by default except one. \r\n\r\nAnd two, there's a high probability we could add more fields. \r\n\r\nI like leaving it up to the user to pass in text/plain if they want to change to another format, but default should probably remain JSON. If it's too big of a log (which would take a lot and we probably shouldn't be storing it anyways), we could return an error and tell them to pass in text/plain to retrieve it. \r\n it seems fine to default to json, I guess users may expect this if they don't provide a content type. even with `jq` magic the logs are pretty hard to parse out (via eyeball) of json since the newline chars get escaped fwiw. at least in our clients we generate and in the cli we can send in `Accept: text/plain` and get back a plain text log, which should cover most usage (so we get the benefits). wrt fields, at a minimum we can maintain _some_ endpoint that just returns a plaintext log, whether it's the current one or not -- we have `.../call/:id` for additional call fields, for most stuff probably.  One thing is missing here is the swagger doc.  *) new inactivity time out for hot queue, we previously kept hot queues in memory forever.\r\n*) each hot queue now has a hot launcher to monitor and launch hot containers\r\n*) consumers now create a consumer channel with startDequeuer() that can be cancelled via context\r\n*) consumers now ping (signal) hot launcher every 200 msecs until they get a slot\r\n*) tests for slot queue & mgr @rdallman ping.  So, this slightly got less complicated since the removal of destroySlotQueue(), which no longer needs closer channel and isClosed bool. Dequeuing hotWait() waiters no longer need this notification/wake up from destroySlotQueue() since they now simply check a.shutdown themselves.\r\n   updates LGTM too. one bugaboo about returning ctx.DeadlineCanceled or something in waitHot on shutdown related to #274   This looks bigger than it is since there's a search and replace for `server.Database` -> `server.Database()`. \r\n\r\nMain gist is that it adds:\r\n\r\n```\r\n+\tBeforeAppGet(ctx context.Context, appName string) error\r\n+\tAfterAppGet(ctx context.Context, app *models.App) error\r\n+\tBeforeAppsList(ctx context.Context, filter *models.AppFilter) error\r\n+\tAfterAppsList(ctx context.Context, apps []*models.App) error\r\n```\r\n\r\nAnd some changes to support this. \r\n\r\nExample where these changes are required is: https://github.com/treeder/fn-ext-auth/tree/master/simple\r\n I was wondering where you were going with that, first off, you can't have the method and the var with the same name, so we can't just keep it as it was unless we call it something else. Which is fine, I don't care, call it Datastore2 if you want, but it's also not used anywhere that requires it to be exported, so....\r\n Maybe we can come back to that if it needs to be exported for something? Even then, it might make sense to have it as a function so extensions could swap it out via the interface, ie: SetDatastore(...). \r\n  New tester image that uses go-fdk for advanced test scenarios.\r\nRight now, this is an enhanced 'hello/sleeper' rolled into one\r\nthat echos the received headers/env to allow writing test cases. I'm not sure this is the way forward, but I need this image to test scenarios that we currently cannot test such as:\r\n\r\n*) hot requests\r\n*) to be able to test a new header (fn_deadline)\r\n\r\netc.\r\n\r\nSince it'll be directly used by fn test cases, I thought this should really be in fn repo under ./images. @rdallman ping. I might be missing something, but why does core need fdk-go dependency for this image? I think I can skip the go test in test.sh to avoid this dep. It would probably best for it to have it's own glide (or preferably dep) files and vendor dir (or preferably [get deps on build](https://github.com/fnproject/cli/blob/master/Dockerfile)) so we don't just go adding a bunch of dependencies to core that it doesn't use. Just like any other image or function, has it's own dependencies. \r\n ping @rdallman @treeder   Async hot request body does not seem to make it into the containers. In async hot case, some http headers are missing.\r\n\r\nCompare the following async and sync requests:\r\n\r\n`\r\nPOST /r/test/foofn HTTP/1.1\r\nHost: localhost:8080\r\nFn_app_name: test\r\nFn_call_id: 01C1AGQA7K47WJR00000000000\r\nFn_format: http\r\nFn_header_accept: */*\r\nFn_header_content_length: 8\r\nFn_header_content_type: application/x-www-form-urlencoded\r\nFn_header_user_agent: curl/7.54.0\r\nFn_memory: 128\r\nFn_method: POST\r\nFn_param_app: test\r\nFn_param_route: /foofn\r\nFn_path: /foofn\r\nFn_request_url: http://localhost:8080/r/test/foofn\r\nFn_type: async\r\n`\r\n\r\n`\r\nPOST /r/test/foofn HTTP/1.1\r\nHost: localhost:8080\r\nConnection: close\r\nAccept: */*\r\nConnection: close\r\nContent-Length: 8\r\nContent-Type: application/x-www-form-urlencoded\r\nFn_app_name: test\r\nFn_call_id: 01C1AJ3FMD47WMM00000000000\r\nFn_format: http\r\nFn_memory: 128\r\nFn_method: POST\r\nFn_param_app: test\r\nFn_param_route: /foofn\r\nFn_path: /foofn\r\nFn_request_url: http://localhost:8080/r/test/foofn\r\nFn_type: sync\r\n` (i.e content length is not passed to outer request, but moved to fn_header value - and body never seems to be sent)\r\nfn call (without content-length)  seems to result in body being sent without framing on the client side. That's something which still needs to be addressed. For the async path, every HTTP protocol header gets `fn_header_` prefix, this is up to FDKs to handle this case, not sure that FDK that you've used to develop function.\r\nNot sure about `fn call`.  At this moment there's no difference in what fn server writes to logs, would that be runner node or API node.\r\n```\r\nfn-api_1      | time=\"2017-12-14T17:04:25Z\" level=info msg=\"Serving Functions API on address `:8080`\"\r\nfn-api_1      | \r\nfn-api_1      |         ______\r\nfn-api_1      |        / ____/___\r\nfn-api_1      |       / /_  / __ \\\r\nfn-api_1      |      / __/ / / / /\r\nfn-api_1      |     /_/   /_/ /_/\r\nfn-api_1      |         v0.3.235\r\nfn-api_1      | \r\n\r\n```\r\n\r\n```\r\nfn-runner_1   | \r\nfn-runner_1   |         ______\r\nfn-runner_1   |        / ____/___\r\nfn-runner_1   |       / /_  / __ \\\r\nfn-runner_1   |      / __/ / / / /\r\nfn-runner_1   |     /_/   /_/ /_/\r\nfn-runner_1   |         v0.3.235\r\nfn-runner_1   | \r\nfn-runner_1   | time=\"2017-12-14T17:04:27Z\" level=info msg=\"Serving Functions API on address `:8080`\"\r\n\r\n```\r\nSo, should fn \"instance\" log its node type?  Problem fixed.  Will a public API be available to remove messages off of the internal message queue?  This may be important in situations where messages did not get processed in a timely manner and thus are stale messages.  When using asynchronous invocations the incoming request is placed on the \"internal\" messaging queue.  Is there a public API to view the messages currently sitting on the queue waiting to be processed? You might try `/stats` endpoint to see current functions being started, competed, failed. gonna close for #155 -- for viewing queues we're very likely not gonna be able to support a peek api (where peek is effectively a dequeue without dequeueing a message), these are notoriously tricky to support over different message queue semantics and we would like to keep things easily 'pluggable'. thanks for filing this.    The proposal doesn't look like a good place for documentation. Since all new env vars are part of Fn server configuration they should stick with other opts with the reference to hybrid spec. agree with @rdallman on this one... very few customers should be running in Hybrid mode and thus the options are confusing even me.\r\n\r\nIf we decide to keep them all together there should be a loud \"only required in hybrid mode\" note on those two options.\r\n\r\n Okay, i'll open issue for extending hybrid doc with all new options.  When FN_RUNNER_API_URL is not reachable runner crashes with panic\r\n```\r\nFN_LOG_LEVEL=ERROR FN_NODE_TYPE=runner FN_PORT=8082 FN_RUNNER_API_URL=http://localhost:8081 ./fnserver\r\nERRO[0000] error from API server, retrying               error=\"Get http://localhost:8081/v1/runner/async: dial tcp [::1]:8081: getsockopt: connection refused\"\r\n\r\n        ______\r\n       / ____/___\r\n      / /_  / __ \\\r\n     / __/ / / / /\r\n    /_/   /_/ /_/\r\n        v0.3.235\r\n\r\npanic: interface conversion: opentracing.SpanContext is opentracing.noopSpanContext, not zipkintracer.SpanContext\r\n\r\ngoroutine 54 [running]:\r\ngithub.com/fnproject/fn/vendor/github.com/openzipkin/zipkin-go-opentracing.(*tracerImpl).startSpanWithOptions(0xc4200de100, 0x4f93691, 0x15, 0xc4203d3900, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/vendor/github.com/openzipkin/zipkin-go-opentracing/tracer.go:309 +0xb36\r\ngithub.com/fnproject/fn/vendor/github.com/openzipkin/zipkin-go-opentracing.(*tracerImpl).StartSpan(0xc4200de100, 0x4f93691, 0x15, 0xc4203a2080, 0x1, 0x1, 0xc420496000, 0xc420509b90)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/vendor/github.com/openzipkin/zipkin-go-opentracing/tracer.go:268 +0xdd\r\ngithub.com/fnproject/fn/api/server.FnTracer.StartSpan(0x55c0900, 0xc4200de100, 0x4f93691, 0x15, 0xc4203a2080, 0x1, 0x1, 0xc4203a2080, 0x4e74900)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/api/server/fntracer.go:23 +0x73\r\ngithub.com/fnproject/fn/api/server.(*FnTracer).StartSpan(0xc4204f3340, 0x4f93691, 0x15, 0xc4203a2080, 0x1, 0x1, 0x0, 0x1)\r\n\t<autogenerated>:1 +0x82\r\ngithub.com/fnproject/fn/vendor/github.com/opentracing/opentracing-go.startSpanFromContextWithTracer(0x55c2980, 0xc420192cf0, 0x55bad00, 0xc4204f3340, 0x4f93691, 0x15, 0x0, 0x0, 0x0, 0x10, ...)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/vendor/github.com/opentracing/opentracing-go/gocontext.go:52 +0x12a\r\ngithub.com/fnproject/fn/vendor/github.com/opentracing/opentracing-go.StartSpanFromContext(0x55c2980, 0xc420192cf0, 0x4f93691, 0x15, 0x0, 0x0, 0x0, 0xc42007a840, 0x20002, 0xc420509d9c, ...)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/vendor/github.com/opentracing/opentracing-go/gocontext.go:44 +0x95\r\ngithub.com/fnproject/fn/api/agent/hybrid.(*client).once(0xc4203f2c20, 0x55c2980, 0xc420192cf0, 0x0, 0x0, 0x4d7bbe0, 0xc4203f2e20, 0x4f7c908, 0x3, 0xc420509ed8, ...)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/api/agent/hybrid/client.go:184 +0xdb\r\ngithub.com/fnproject/fn/api/agent/hybrid.(*client).do(0xc4203f2c20, 0x55c2980, 0xc420192cf0, 0x0, 0x0, 0x4d7bbe0, 0xc4203f2e20, 0x4f7c908, 0x3, 0xc420509ed8, ...)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/api/agent/hybrid/client.go:161 +0x219\r\ngithub.com/fnproject/fn/api/agent/hybrid.(*client).Dequeue(0xc4203f2c20, 0x55c2980, 0xc420192cf0, 0x0, 0x0, 0x0)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/api/agent/hybrid/client.go:83 +0x1a1\r\ngithub.com/fnproject/fn/api/agent.(*CachedDataAccess).Dequeue(0xc420192960, 0x55c2940, 0xc42018c240, 0x55c2940, 0xc42018c240, 0xc4204f3280)\r\n\t<autogenerated>:1 +0x50\r\ngithub.com/fnproject/fn/api/agent.(*agent).asyncChew.func1(0x55c28c0, 0xc4203c46c0, 0xc4203680c0, 0xc42018c1e0)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/api/agent/async.go:53 +0xaa\r\ncreated by github.com/fnproject/fn/api/agent.(*agent).asyncChew\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/api/agent/async.go:49 +0x7f\r\n```  Steps to reproduce:\r\n1. Deploy function.\r\n2. Call function.\r\n```\r\ncurl -v localhost:8080/r/testapp/test-fdk-python -d '{\"name\":\"john\"}'\r\n*   Trying ::1...\r\n* TCP_NODELAY set\r\n* Connected to localhost (::1) port 8080 (#0)\r\n> POST /r/testapp/test-fdk-python HTTP/1.1\r\n> Host: localhost:8080\r\n> User-Agent: curl/7.54.0\r\n> Accept: */*\r\n> Content-Length: 15\r\n> Content-Type: application/x-www-form-urlencoded\r\n> \r\n* upload completely sent off: 15 out of 15 bytes\r\n< HTTP/1.1 200 OK\r\n< Content-Length: 10\r\n< Content-Type: text/plain; charset=utf-8\r\n< Fn_call_id: 01C15DMDP3A7WG200000000000\r\n< Xxx-Fxlb-Wait: 609.713779ms\r\n< Date: Tue, 12 Dec 2017 13:26:22 GMT\r\n< \r\n* Connection #0 to host localhost left intact\r\n```\r\nRemember call ID: `01C15DMDP3A7WG200000000000`\r\n3. Delete an app\r\n4. Do the steps 1 and 2 again.\r\n5. List calls\r\n```\r\nfn calls list testapp\r\n\r\nID: 01C15EF78FA7WG600000000000\r\nApp: testapp\r\nRoute: /test-fdk-python\r\nCreated At: 2017-12-12T13:26:21.199Z\r\nStarted At: 2017-12-12T13:26:21.809Z\r\nCompleted At: 2017-12-12T13:26:21.836Z\r\nStatus: success\r\n```\r\n6. Go to minio UI\r\nYou'd see that logs are still there:\r\n<img width=\"1440\" alt=\"screen shot 2017-12-12 at 3 32 22 pm\" src=\"https://user-images.githubusercontent.com/3034091/33887237-ce490d20-df51-11e7-8fd4-7a47ae5fa990.png\">\r\n\r\n7. Try to get call log from step 3\r\n\r\n```\r\nfn logs get testapp 01C15DMDP3A7WG200000000000\r\n{'host': 'localhost:8080', 'accept': '*/*', 'fn_app_name': 'testapp', 'fn_call_id': '01C15DMDP3A7WG200000000000', 'fn_format': 'http', 'fn_memory': '128', 'fn_method': 'GET', 'fn_param_app': 'testapp', 'fn_param_route': '/test-fdk-python', 'fn_path': '/test-fdk-python', 'fn_request_url': 'http://localhost:8080/r/testapp/test-fdk-python', 'fn_type': 'sync', 'user-agent': 'curl/7.54.0'}\r\nenviron({'PATH': '/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'HOSTNAME': 'cb9060945294', 'FN_PATH': '/test-fdk-python', 'FN_MEMORY': '128', 'FN_TYPE': 'sync', 'FN_FORMAT': 'http', 'FN_APP_NAME': 'testapp', 'LANG': 'C.UTF-8', 'GPG_KEY': '0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D', 'PYTHON_VERSION': '3.6.2', 'PYTHON_PIP_VERSION': '9.0.1', 'HOME': '/root'})\r\n\r\n```\r\n\r\nSo, the log is still there. It happens because of the way we delete calls and logs. Fn stores call in SQL store when we attempt to delete an app, Fn attempts to delete routes, calls and logs within a single transaction without use of datastore API just [raw SQL](https://github.com/fnproject/fn/blob/master/api/datastore/sql/sql.go#L333). +1 for the per-app bucket @rdallman Can you explain why that is not the case to have one app bucket with log entries?\r\n\r\nAs far as I understand the source of the problem here, is that we don't have the cleaner for logs for certain reasons (no matter what they are at this moment). So, we want to make the simple plan for storing logs, I would say that best option here is to create an app bucket as the placeholder for logs. I think it would work for us at least for the one reason: at this moment we have only 1 API endpoint that retrieves logs from the log store.\r\nSo, tell me why deleting the whole app bucket would not work for Fn? Maybe I am missing something?  I realize some people might not like the idea of dropping the vendor dir, but if a dep tool works good, then we shouldn't have vendor in git. If nothing else, this shows that the dep tool is OK to use now. \r\n\r\nI just did the following:\r\n\r\n*`rm -rf vendor`\r\n*`dep init`\r\n* set the same constraints as we had in glide files in Gopkg.toml\r\n*`dep ensure`\r\n* fixed one change introduced here: https://github.com/docker/distribution/blame/8cedd7b3a49e719220c77584e42b7c7386fba811/registry/client/repository.go#L65 \r\n +1 to switch to dep tool as well as waiting until 1.10 pre-release (see https://github.com/golang/dep/wiki/Roadmap).  K8s support for the fnlb.\r\n\r\nThis adds a k8sGrouper (as proposed in fn#553). It pulls in the k8s.io/client-go requirement (at their recommended v4.0.0).\r\n\r\nEach fnlb, if run in a k8s container, can be configured to watch for the existence of pods matching a selector spec. The shared DB requirement disappears in this configuration (as the k8s master replaces it).\r\n\r\nThe management API still exists at the GET endpoint to list status.\r\n\r\nThere's a lot of similarity between allGrouper and k8sGrouper. Further refactoring can be done, but want to put a stake in the ground so that helm work can proceed; the refactor can wait until fnlb lives in its own repo. In k8s's case, add()/remove() are probably not applicable (and should return perm denied?). Rest of allGrouper logic seems identical, so we should be able to replace that 'db' DBStore with a custom k8s \"db\" layer that implements DBStore iface right? \n    \nThat's pretty much what i was thinking, yeah. Want a first stab that can go into the helm charts.\n\n\n--\u00a0Excuse typos. Phone screens don't make great ketbroads.\u00a0\n\n-------- Original message --------\nFrom: Tolga Ceylan <notifications@github.com> \nDate: 05/12/2017  6:32 p.m.  (GMT+00:00) \nTo: fnproject/fn <fn@noreply.github.com> \nCc: jan grant <jang@ioctl.org>, Author <author@noreply.github.com> \nSubject: Re: [fnproject/fn] Fnlb/k8s grouper (#563) \n\nIn k8s's case, add()/remove() are probably not applicable (and should return perm denied?). Rest of allGrouper logic seems identical, so we should be able to replace that 'db' DBStore with a custom k8s \"db\" layer that implements DBStore iface right?\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n  \n  \n\n\n\n\n{\"api_version\":\"1.0\",\"publisher\":{\"api_key\":\"05dde50f1d1a384dd78767c55493e4bb\",\"name\":\"GitHub\"},\"entity\":{\"external_key\":\"github/fnproject/fn\",\"title\":\"fnproject/fn\",\"subtitle\":\"GitHub repository\",\"main_image_url\":\"https://cloud.githubusercontent.com/assets/143418/17495839/a5054eac-5d88-11e6-95fc-7290892c7bb5.png\",\"avatar_image_url\":\"https://cloud.githubusercontent.com/assets/143418/15842166/7c72db34-2c0b-11e6-9aed-b52498112777.png\",\"action\":{\"name\":\"Open in GitHub\",\"url\":\"https://github.com/fnproject/fn\"}},\"updates\":{\"snippets\":[{\"icon\":\"PERSON\",\"message\":\"@skinowski in #563: In k8s's case, add()/remove() are probably not applicable (and should return perm denied?). Rest of allGrouper logic seems identical, so we should be able to replace that 'db' DBStore with a custom k8s \\\"db\\\" layer that implements DBStore iface right?\"}],\"action\":{\"name\":\"View Pull Request\",\"url\":\"https://github.com/fnproject/fn/pull/563#issuecomment-349397558\"}}}  *) moved slot management to its own file\r\n*) slots are now implemented with LIFO semantics, this is important since we do\r\n   not want to round robin hot containers. Idle hot containers should timeout properly.\r\n*) each slot queue now stores a few basic stats such as avg time a call spent in a given\r\n   state and number of running/launching containers, number of waiting calls in those states.\r\n*) first metrics in these basic stats are discarded to avoid initial docker pull/start spikes.\r\n*) agent now records/updates slot queue state and how much time a call stayed in that state.\r\n*) waitHotSlot() replaces the previous wait 100 msec logic where it sends a msg to hot slot go routine launchHot() and waits for a slot\r\n*) launchHot() is now a go routine for tracking containers in hot slots, it determines if a new containers is needed based on slot queue stats.\r\n  Running a simple test against the old logic and the impact of round robin on hot containers is visible. Once you spin up a bunch of hot containers, even a small load keeps all of them active since idle_timeout is not triggered. Seeing some suspicious 5xx, which I'll look into tomorrow, but overall latencies/numOfContainers looks good. I had to tweak a few things & fix some tracking bugs. @rdallman I think this is a bit in better shape now. I noticed that the 5xx issues were popping up due to 50% time check in call.Start() which I was violating. I preserved this threshold as 50%, but added it's counterpart and made them two variables where we spend up to 40% of timeout on wait/queue, and 50% in after Start().\r\n\r\nisWaitTolerable() is aggressive about launching containers. But this is dampened by a last-minute slot check and seems to work well with LIFO idle timeouts. I really tried to make isWaitTolerable() and waitHotSlot() as simple as I can since it's really hard to tune it. (feedback loop, various work loads, scenarios...)\r\n\r\nslot latency trackers throw away first measurements to improve docker pull/start initial delay.\r\n\r\nI tested this on a echo server test case and observed no differences between error rates between old/new logic, but new code tends to stabilize to a lower & constant number of containers to sustain that workload. Due to LIFO, this is significantly less than previous container count, which due to round robin kept alive in docker. There's some risk in the new code for different workloads, but LIFO idle timeout improvement is really big.\r\n\r\n Ran another test with gamma distribution of (0 to 9000 msec) sleep time on containers which worked OK. Hmm, I see a bug in getSlot()... I need to do one more pass. related to: #274   I have Fn cluster that ran about 2.5K calls:\r\n - node 1 \r\n```\r\n{\"Queue\":0,\"Running\":0,\"Complete\":516,\"Failed\":0,\"FunctionStatsMap\":{\"/test-fdk-python\":{\"Queue\":0,\"Running\":0,\"Complete\":516,\"Failed\":0}}}\r\n```\r\n - node 2 \r\n```\r\n{\"Queue\":0,\"Running\":0,\"Complete\":42,\"Failed\":0,\"FunctionStatsMap\":{\"/test-fdk-python\":{\"Queue\":0,\"Running\":0,\"Complete\":42,\"Failed\":0}}}\r\n```\r\n- node 3 \r\n```\r\n{\"Queue\":0,\"Running\":0,\"Complete\":1917,\"Failed\":0,\"FunctionStatsMap\":{\"/test-fdk-python\":{\"Queue\":0,\"Running\":0,\"Complete\":1917,\"Failed\":0}}}\r\n```\r\nBut when i'm trying to list all calls by setting number of objects per page equal to 3000, API returns only 100.\r\n```\r\nfn calls list ab-test --per-page 300 | grep Status | wc -l\r\n     100\r\n```\r\n I want to know how can I get 3K calls all-in-one response or how can I get the number of successful or errored calls within the certain timeframe? At this particular moment as a user I have to do reverse iteration among calls because on API request I get only N last calls. So, the pagination API is not really clear how to work with that, I'm sure that we have any doc explaining how pagination API works and specific reason why we limit the number of object to 100. Okay, this does look like bad UX with Fn CLI, it does not provide next cursor, that's why it's kinda hard to work with calls with CLI. Tend to agree, CLI at this moment is the best option, but client libraries are not good at this moment, because they were built with the swagger spec that makes them look like over-complexed HTTP-Fn-specific framework, where people doesn't see HTTP stuff, but more playing with models (client, apps, routes, etc.). Current pagination looks awesome if i would go and build my own http-fn library to talk to Fn because swagger clients don't care about pagination, swagger generator considers our pagination attributes as regular query parameters and doesn't let call some sort of `calls.next` API, so at CLI we have to do things like manual pagination, which is awful, but something that we supposed to be living with.\r\n\r\nTo the statement that people doesn't use CLI, i thought just as you that not true, but it appeared that CLI is very useful for things like calls and logs, of course in a context of function (or sequence of functions) testing.\r\n can we start with providing a simpler way for the CLI to grab all results? Maybe by returning next cursor as you say? I also work with the CLI quite a bit and needed a better way to get through sets of results. It was on my list of things to play around with and come up with some suggestions.\r\n\r\n ya I'm not saying default to all, just an easier way. I haven't played around with it enough but using the cursors was NOT intuitive unfortunately....   Use two distinct DB connection for read and write ops\r\n=======================================\r\nIn Fn deployment when it fn servers use MySQL as database where MySQL presented as group replication cluster with MySQL router sitting ontop there's possibility to use different connections for reading and writing to the DB.\r\n\r\nMySQL router\r\n--------------\r\n[MySQL router](https://dev.mysql.com/doc/mysql-router/2.1/en/) is a per-application query router that exposes two ports for reading and writing ops (default ports: 6446, 6447). \r\n\r\nPros\r\n----\r\nThe benefit of such feature is that we can spread our requests among two different connections (and their internal pools).\r\n\r\nCons\r\n-----\r\nThis is MySQL-specific feature. Would require certain workarounds for existing MySQL driver.\r\n IMO from a high level it doesn't hurt to have mysql-specific features built into the Fn mysql driver. Doesn't pollute existing core or other db drivers. So, port splitting is not necessary, the MySQL router on port 6446 accepts both read and write, but it's recommended to use 6447 port for reads only.\r\n\r\nI do agree that DB driver is simple and DB-feature-agnostic, but not sure if that is something we should be proud of. Indeed we're not doing something very heavy on reads or writes, data schemas are pretty flat, we don't have joins or whatever.\r\n\r\nNote for those who gonna deploy Fn with the MySQL group replication, it is recommended to deploy 1 router per Fn node. gonna close this, a more general purpose issue discussing mysql clustering strategies could link to this, not sure this is worth discussion in itself (and targeted as feature req)  *) this reduces 100 msec response time in first\r\ntime launched hot containers\r\n*) subsequent requests may trigger launch of\r\nmore hot containers, but this drawback is ok since\r\nthis means existing hot containers were not able\r\nto meet the demand. this ends up making a pretty big herd [against docker] for short lived tasks. the theory with the 100ms is that since we have to eat 300ms+ of docker startup time if we have to start a container, it's better to try to wait a little to find a free slot than to start a container (and, well, 100ms < 300ms), and if we do have to start a container then waiting 100ms isn't going to be more than 25% added at worst to latency. the policy [on master] ends up being problematic in the 0->1 case, but I have some ideas (use the `singleflight` mechanism we have, perhaps). anyway I think leaving the 100ms is advisable just to do a little herd dampening, but agree that it's a pretty naive policy to begin with.  iirc the issue was too many containers launching on startup? this likely in practice is the same wrt that.  I'll submit another PR later for this. I have some draft changes to improve this.  https://github.com/fnproject/fn/pull/571 (I fixed up the others that were nearby too.)  ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [Michael J Williams](https://github.com/michael-w-williams)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! LGTM, only one comment that maybe we should replace the heading/link \"client libraries\" with \"function developer kits\" in docs/README.md? ## CLA Bot\n\nAll committers have signed the CLA.  This really should of gone in as part of c5ec0cc41ecad26f443626e25f7248bc76e0c059 but better late than never. ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [Alexander Bransby-Sharples](https://github.com/adoublebarrel)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community!  There are 3 main parts that will work together to make hybrid work. \r\n\r\n1) Fn Server (API)\r\n2) Fn LB\r\n3) Fn Runners/Workers\r\n\r\nAt a high level, they interact like this:\r\n\r\nControl Plane | &nbsp; | Work Plane\r\n------------ | ---- | -------------\r\nFn Server | &larr; | Fn LB(s)\r\n&darr; | &uarr; | &darr; \r\nDatabase | &larr; | Fn Runner(s)\r\nMQ | &nbsp; | &darr; \r\nBlob Store | &nbsp; | ?Blob Store\r\n\r\nWhere everything in the Work Plane talks to the Fn Server to tell it what to do. \r\n\r\nAs a bare minimum starting point, we should have 3 containers that we can run like this:\r\n\r\nStart Control Plane:\r\n\r\n```sh\r\ndocker run ... fnproject/fnserver\r\n```\r\n\r\nStart Work Plane\r\n\r\n```sh\r\ndocker run ... fnproject/fnlb\r\ndocker run .... fnproject/fnrunner\r\n```\r\n\r\n## Fn Server\r\n\r\nThis probably doesn't really have to change much except:\r\n\r\n* flag to disable async processing\r\n* new API endpoints to support below\r\n\r\n## Fn LB\r\n\r\n* allow runners to register themselves (simple API on LB)\r\n\r\n## Runners\r\n\r\n* When fnrunner starts, it will:\r\n  * register itself with the fnlb (k8s does this for us, since we're using this)\r\n  * start asking the fnserver for async calls \r\n* For each call it gets, it will:\r\n  * execute call\r\n  * report status to fnserver\r\n  * send logs to fnserver (this could store logs in local blob store, but for first attempt, let's assume this isn't the case)\r\n >  allow runners to register themselves (how to do this with multiple LBs running?)\r\n\r\nit's backed by a db. just start lb with `DB_URL=...` same as server, supports mysql/pg. >  new API endpoints to support below\r\n\r\nI have a sketched out design doc for this api for fn server that I think will work & be simple, i can try to put it into something more palatable. was attempting to add reasonable MQ semantics at the same time, but it's possible we could/should punt this. Am i right in thinking: async will  go : \r\n\r\nOutside -> (0: push)  FnLB -> (1: push)  Server->  (2: push) MQ -> (3: (poss via API) pull) runner\r\n\r\nIf so then  direct MQ is a good start for 3 and then wrap in an API once that works I think  That sounds about right.  I don't think we'd want runner to directly access MQ though, would add another layer of authentication and what not that we'd have to think about. Runner should be pretty dumb for the most part and just get work (sync) or ask for work (async), run it, report results, that's basically all it should think about. And hopefully just talk to one thing. \r\n\r\nIn fact, we used to have a`/tasks` endpoint that already did this via the API, but I think it got removed in the recent gutting of core. \r\n runner will also have to post work, for async. async requests will come in through the same lb as sync (in front of 'runners'), presumably. agree about direct access, shouldn't be too bad to proxy through api nodes.  >  Fnlb ... ?? (i know there's more to this)\r\n\r\nI don't think so. the lb just needs to know about the set of nodes. in theory, in our k8s config somewhere, there is a hook we can call when we add a new 'runner' pod that calls the lb address to add itself, so the lb is mostly an operational task at this point. imo, we should just do authentication at the 'runner' level, not the lb level, to keep the lb from getting gummed up (in 2+ ways).  > ?Blob Store\r\n\r\nit would be nice initially to have all data storage on the LHS of this dia. then the runner is just sending all data to the LHS api and doesn't have to worry about straddling 2+ things for certain things. We're still not certain that logs on the RHS will be in demand from users.  I wonder if we could move async processing completely to RHS. Currently, control-plane is not really %100 control plane as it's in async processing path... We should be able to modify app/routes regardless of the load on the front door. (eg. MQ and call logs/status storage on RHS side versus mostly-read-only config DB on LHS.) @skinowski one of the main objectives of all this is to keep the database and what not on the LHS so we/users don't have to maintain multiple databases/mqs/obstores. \r\n I'm going to make a start on this, namely the part\r\n\r\n> flag to disable async processing\r\n\r\nFirst, running two instances of the fn server pointing at the same redis instance. \r\nThen I'll add a flag so that one of them only serves requests to invoke asynchronous functions on `/r` (so it puts the request on the queue), and the other serves both synchronous requests and pulls requests from the queue.\r\n Shoud the `/runner/...` endpoints be api-versioned too, i.e. `/runner/v1/...`? It's not clear to me how the partitions/topics are expected map to runners. Partitions are (essentially) static - which is to say there's an async process for expanding the number of partitions a topic has, but that expansion can take seconds. (Brokers also have a number of FDs open per partition they're handling.)\r\n\r\nAdditionally, the API nodes are the kafka consumers in this picture. If they're in the same consumer group then you may want as many partitions as API nodes (or some reasonably larger number) to balance load across API nodes.\r\n\r\nHowever, using the runner node (or something derived from it) as a partition key means that the work will land in some partition. There's no guarantee that a (k8s) load-balanced call from any particular runner will land on an API node whose consumer is handling the partition associated with that runner. (In the extreme case, if there are more API nodes than partitions, it's possible that an API node will be \"starved\" and have no work to deliver.)\r\n\r\nI think the expected model with kafka is also that topics are relatively static; the way the broker works, it doesn't sound like a topic per (app, route) combo is workable either.\r\n\r\n\r\nThinking about it, even if we don't care about rendezvous-style clustering of (app, route) to preferred runners, there's still a problem with API nodes all in the same consumer group - to wit, if there's just one async Call and it's landed in partition #0 then runners may fail to be tasked with that Call if their requests to /runner/dequeue are loadbalanced to an API node whose consumer isn't servicing that partition.\r\n\r\nThe alternative there is potentially that we use one CG per API node (so all async Calls are effectively broadcast to all API nodes) - since there's some DB work to do before handing the work off to the runner, there's less of a problem perhaps in just looping through Call records until we find the next one that's untaken. (One might wonder why we use a MQ in that instance.) However, given the semantics of Kafka's offset commit, the API node would have to serve up the *first* work item it found, unless we wanted to drastically complicate the process of de-queuing work at the API node. It's possible that a particular kafka Consumer knows which partitions are in the set that are currently bound to it. The ConsumerGroup rebalance is another \"eventual\" kind of operation, but one option is for API nodes to gossip amongst themselves so that they know where a partition is being served from, then internally proxy a request for (partition X) from one API node to the one that owns its partition.\r\n\r\n(Or even open/close consumer clients and pick the partition manually.) I am worried that there are layers between the runner nodes on the RHS, which have the information about what hot containers are running and therefore would prefer to dequeue a job that fits (because it would be efficient), and the MQ partitions on the LHS which could be partitioned with the same criteria for efficiency. Along the way, we don't just have the fn LB, there's likely to to be an OCI LB and a Kube service LB which could shuffle requests inefficiently because they don't know about the partitioning information. Basically, our final LB would have to undo the work that the OCI LB and the Kube LB have done.\r\n\r\nThe question is whether the partition-aware strategy that has to undo the OCI/Kube LBs distribution is really more efficient than a naive non-partition-aware pulling of jobs from any node, or whether the redirections at the last layer (where a request hits a pod which says \"no, I'm not the right one, go there instead\") add enough latency that statistically it's not worth the effort of doing it when the numbers are big. Also, when a user enqueues an async job, how much do they care about latency is another open question.\r\n\r\nI don't know the answers, but I feel that not worrying about partitions at this stage makes the implementation simpler, and it can also be iteratively improved when we do have the data to determine the efficiency answer. :) \n    \nThere are some other complications with effectively pre-assigning a task to a runner-oriented partition. There is no easy way to manage work stealing in that scenario -\u00a0 runnner A might be busy for a long time, runner B (which favours the same hot set) free; but there's not an easy way to land the work there.\n(If the intent is that the FNLB assigns an async task to a runner with the view that that work *will* be scheduled soon, then we'll need a way to ensure that capacity for it is reserved.)\nYou mentioned timeouts. The other question revolves around async work that turns up with a deadline. If that is fast approaching then the Call's \"priority\" for placement should rise, I presume.\nSimple queues (especially under the constraint that multiplying topics or partitions is expensive) don't feel like a great fit here.\n\n--\u00a0Excuse typos. Phone screens don't make great ketbroads.\u00a0\n\n-------- Original message --------\nFrom: Reed Allman <notifications@github.com> \nDate: 01/12/2017  6:17 p.m.  (GMT+00:00) \nTo: fnproject/fn <fn@noreply.github.com> \nCc: jan grant <jang@ioctl.org>, Comment <comment@noreply.github.com> \nSubject: Re: [fnproject/fn] Hybrid Mode MVP (#531) \n\n\nI don't know the answers, but I feel that not worrying about partitions at this stage makes the implementation simpler, and it can also be iteratively improved when we do have the data to determine the efficiency answer. :)\n\nI wish this were possible, kafka does not seem to have any 'easy' way to provide MPMC semantics without thinking about partitioning. We need to have someway to have 1 process chewing on a partition, we can't just let every request ask a queue for the head (this has pros and cons, not having to worry about timeouts sounds... delightful). Initial thinking was that API nodes would have their own partition and be part of a consumer group, and this seems like the naive approach that would likely work but has at least one deficiency in that we lose distribution information for RHS processing. The thinking is that, there are likely a small set of API nodes and a large set of runner nodes, and we want a runner node to process some subset of calls so that we can re-use hot containers, image caching (the same reasons we have fnlb for sync). Can think about other ways to accomplish this.\nThe complication of the k8s / round-robin load balancer in the middle is something that didn't come to mind (thanks for pointing it out). It's kind of unfortunate that we have to proxy runner nodes over to the LHS to talk to kafka, in a 'normal' (non-hybrid) deployment runners (full fn servers) getting their own partition seems like it would work just fine (maybe optimal, even). It seems brittle to rely on having a 'sticky' (vs. round robin, et al) load balancer in between RHS and LHS so that kafka clients will work, but it seems like it would maybe close this hole? since this API is hanging off on the side we could open a long lived connection between an API node and a runner node so that 1 API node could serve a runner's partition to it. this is kind of smelly, need to marinate on this a bit.\nNot completely bent on having a partition per runner, the main sticking point is the distribution, but even if we have a partition per API node we have an issue of routing a msg.Commit() (increment partition offset) to an API node where the consumer for that partition is available. :(\n\nPartitions are (essentially) static - which is to say there's an async process for expanding the number of partitions a topic has, but that expansion can take seconds.\n\nThis sounds edible, we expect that the set of runners is scaling up and down but relatively infrequently (likely 10s of minutes). Not sure how well consumer groups will adapt to this, possibly a bad idea. API nodes will be less elastic and may make a better candidate.\n\nShoud the /runner/... endpoints be api-versioned too, i.e. /runner/v1/...?\n\n/v1/runner makes sense, API nodes serve all /v1/ endpoints so it's uniform. good catch, thanks.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n  \n  \n\n\n\n\n{\"api_version\":\"1.0\",\"publisher\":{\"api_key\":\"05dde50f1d1a384dd78767c55493e4bb\",\"name\":\"GitHub\"},\"entity\":{\"external_key\":\"github/fnproject/fn\",\"title\":\"fnproject/fn\",\"subtitle\":\"GitHub repository\",\"main_image_url\":\"https://cloud.githubusercontent.com/assets/143418/17495839/a5054eac-5d88-11e6-95fc-7290892c7bb5.png\",\"avatar_image_url\":\"https://cloud.githubusercontent.com/assets/143418/15842166/7c72db34-2c0b-11e6-9aed-b52498112777.png\",\"action\":{\"name\":\"Open in GitHub\",\"url\":\"https://github.com/fnproject/fn\"}},\"updates\":{\"snippets\":[{\"icon\":\"PERSON\",\"message\":\"@rdallman in #531: \\u003e I don't know the answers, but I feel that not worrying about partitions at this stage makes the implementation simpler, and it can also be iteratively improved when we do have the data to determine the efficiency answer. :)\\r\\n\\r\\nI wish this were possible, kafka does not seem to have any 'easy' way to provide MPMC semantics without thinking about partitioning. We need to have someway to have 1 process chewing on a partition, we can't just let every request ask a queue for the head (this has pros and cons, not having to worry about timeouts sounds... delightful). Initial thinking was that API nodes would have their own partition and be part of a consumer group, and this seems like the naive approach that would likely work but has at least one deficiency in that we lose distribution information for RHS processing. The thinking is that, there are likely a small set of API nodes and a large set of runner nodes, and we want a runner node to process some subset of calls so that we can re-use hot containers, image caching (the same reasons we have fnlb for sync). Can think about other ways to accomplish this.\\r\\n\\r\\nThe complication of the k8s / round-robin load balancer in the middle is something that didn't come to mind (thanks for pointing it out). It's kind of unfortunate that we have to proxy runner nodes over to the LHS to talk to kafka, in a 'normal' (non-hybrid) deployment runners (full `fn` servers) getting their own partition seems like it would work just fine (maybe optimal, even). It seems brittle to rely on having a 'sticky' (vs. round robin, et al) load balancer in between RHS and LHS so that kafka clients will work, but it seems like it would maybe close this hole? since this API is hanging off on the side we _could_ open a long lived connection between an API node and a runner node so that 1 API node could serve a runner's partition to it. this is kind of smelly, need to marinate on this a bit.\\r\\n\\r\\nNot completely bent on having a partition per runner, the main sticking point is the distribution, but even if we have a partition per API node we have an issue of routing a `msg.Commit()` (increment partition offset) to an API node where the consumer for that partition is available. :(\\r\\n\\r\\n\\u003e Partitions are (essentially) static - which is to say there's an async process for expanding the number of partitions a topic has, but that expansion can take seconds. \\r\\n\\r\\nThis sounds edible, we expect that the set of runners is scaling up and down but relatively infrequently (likely 10s of minutes). Not sure how well consumer groups will adapt to this, possibly a bad idea. API nodes will be less elastic and may make a better candidate. \\r\\n\\r\\n\\u003e Shoud the /runner/... endpoints be api-versioned too, i.e. /runner/v1/...?\\r\\n\\r\\n`/v1/runner` makes sense, API nodes serve all `/v1/` endpoints so it's uniform. good catch, thanks.\"}],\"action\":{\"name\":\"View Issue\",\"url\":\"https://github.com/fnproject/fn/issues/531#issuecomment-348568462\"}}} \n    \nOn a different tack: if nobody picks up the runner to lb registration I'll do that on Monday (following the idea of a k8s Grouper; we already have a REST interface for manual poking into allGrouper).\n\n--\u00a0Excuse typos. Phone screens don't make great ketbroads.\u00a0\n\n-------- Original message --------\nFrom: Reed Allman <notifications@github.com> \nDate: 02/12/2017  1:33 a.m.  (GMT+00:00) \nTo: fnproject/fn <fn@noreply.github.com> \nCc: jan grant <jang@ioctl.org>, Comment <comment@noreply.github.com> \nSubject: Re: [fnproject/fn] Hybrid Mode MVP (#531) \n\n\nThe other question revolves around async work that turns up with a deadline. If that is fast approaching then the Call's \"priority\" for placement should rise, I presume.\n\nI am game to not have an idea of a deadline, as I may have interpreted this. I am somewhat concerned about the fact that we effectively need to implement real-timestamp-based priority queueing, but optimistic that we can use kafka's offsets as timestamps, to achieve delayed messages (I'm not sure this is the same as deadline? i.e. run this call at this time in the future X?), and even then I don't think we can possibly make any guarantees about the immediacy of running that; it'll be in line with anything else that came in and was scheduled to run before that time X. As far as priorities, our redis implementation has these but only uses p0. I would like to avoid adding explicit [p0,p1,p2] priorities to start (and forever, if we're being honest) since I think it's going to be quite a bit of work just to get one priority in.\n\nThere is no easy way to manage work stealing in that scenario\n\nyep, agree. as proposed it is very optimistic that the node that enqueued it was routed to because it has enough room to run it once that is eventually dequeued, which may be very far in the future.\nfiguring out how to map a message that a runner has received from an API node to a request to delete that message to the same API node is still kind of what I'm stuck on. Even if all API nodes stay healthy, it seems like we're really fighting the kafka client semantics here. Apparently, they have an http gateway that you can stick in front of kafka to make it so consumers / producers can be less precise about exact positioning of messages wrt partitions, maybe this is the route we need to go down but damn, turtles. for reference: https://github.com/confluentinc/kafka-rest\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n  \n  \n\n\n\n\n{\"api_version\":\"1.0\",\"publisher\":{\"api_key\":\"05dde50f1d1a384dd78767c55493e4bb\",\"name\":\"GitHub\"},\"entity\":{\"external_key\":\"github/fnproject/fn\",\"title\":\"fnproject/fn\",\"subtitle\":\"GitHub repository\",\"main_image_url\":\"https://cloud.githubusercontent.com/assets/143418/17495839/a5054eac-5d88-11e6-95fc-7290892c7bb5.png\",\"avatar_image_url\":\"https://cloud.githubusercontent.com/assets/143418/15842166/7c72db34-2c0b-11e6-9aed-b52498112777.png\",\"action\":{\"name\":\"Open in GitHub\",\"url\":\"https://github.com/fnproject/fn\"}},\"updates\":{\"snippets\":[{\"icon\":\"PERSON\",\"message\":\"@rdallman in #531: \\u003e  The other question revolves around async work that turns up with a deadline. If that is fast approaching then the Call's \\\"priority\\\" for placement should rise, I presume.\\r\\n\\r\\nI am game to not have an idea of a deadline, as I may have interpreted this. I am somewhat concerned about the fact that we effectively need to implement real-timestamp-based priority queueing, but optimistic that we can use kafka's offsets as timestamps, to achieve delayed messages (I'm not sure this is the same as deadline? i.e. run this call at this time in the future X?), and even then I don't think we can possibly make any guarantees about the immediacy of running that; it'll be in line with anything else that came in and was scheduled to run before that time X. As far as priorities, our redis implementation has these but only uses p0. I would like to avoid adding explicit [p0,p1,p2] priorities to start (and forever, if we're being honest) since I think it's going to be quite a bit of work just to get one priority in. \\r\\n\\r\\n\\u003e There is no easy way to manage work stealing in that scenario\\r\\n\\r\\nyep, agree. as proposed it is very optimistic that the node that enqueued it was routed to because it has enough room to run it once that is eventually dequeued, which may be very far in the future. \\r\\n\\r\\nfiguring out how to map a message that a runner has received from an API node to a request to delete that message to the same API node is still kind of what I'm stuck on. Even if all API nodes stay healthy, it seems like we're really fighting the kafka client semantics here. Apparently, they have an http gateway that you can stick in front of kafka to make it so consumers / producers can be less precise about exact positioning of messages wrt partitions, maybe this is the route we need to go down but damn, turtles. for reference: https://github.com/confluentinc/kafka-rest\"}],\"action\":{\"name\":\"View Issue\",\"url\":\"https://github.com/fnproject/fn/issues/531#issuecomment-348657162\"}}} > The thinking is that, there are likely a small set of API nodes and a large set of runner nodes, and we want a runner node to process some subset of calls so that we can re-use hot containers, image caching\r\n\r\nI'm still not 100% convinced about the partitioning of the RHS runners...\r\nIf we have a large number of runners but they are locked to the same partitions as API nodes (so statistically you have N api nodes and K * N workers), and if there's an imbalance of load on a set of functions (some with high load, some with low load), don't we risk that we have a pool of runners staying idle while others are overloaded like Jan said?\r\n\r\nI think we need some form of work stealing, even though when you steal work you are \"cold\" and you have to pull images and start up containers. The question is how significant that is on async functions that the user has started with the expectation that \"at some point they will complete\". Maybe they don't care about the 100ms of container start, but they do about the few seconds of image pulling. Hm.\r\n\r\nI'm wondering how statistics would work with work-stealing, maybe we get our desired effect anyway. If we have partitioned API nodes but naive runner nodes (which just pull the next job from whatever node the LBs happen to land the request on), then if a function is more loaded than others eventually all the runner nodes will cache its image just by virtue of statistics. The downside is that if all functions are loaded equally then all runner nodes will try to cache all images and that's a bit heavy.\r\n\r\n> figuring out how to map a message that a runner has received from an API node to a request to delete that message to the same API node is still kind of what I'm stuck on\r\n\r\nFrom what I can see in the proposed spec, the runners pull (poll?) the API nodes for jobs to run when they call `/dequeue`, and `/start` doesn't appear to need to land on the same partition (the DB is the arbiter for the semantics). Only `/finish` needs to be partition-aware, but once a runner is executing a job it can know which partition it came from (the information could be in headers or in a field of the payload of the `/dequeue` response), so it can embed the same information in the `/finish` call. This way only one out of four endpoints (probably less than a quarter of the requests) needs to be routed properly - and we still need a solution for this, but at least we get work-stealing... and maybe if there are few requests needing this routing it becomes feasible to have the API nodes do additional work to redirect the request undoing the interference of the intermediate LBs. Anyway, going back to the spirit of this ticket, which MQ we use (e.g. kafka) is more of an implementation detail and I guess the main focus is the API (to which we can later add protocol-specific information, like the kafka partition info).\r\n\r\nIn general terms, the API detailed in your document makes sense. I'll push the minor fixes about the runner endpoints being under `v1/` as well, and then coordinate with @msgodf - I guess we can start implementing the endpoints using the current MQ solution. Do we need @msgodf 's patch to have a flag that separates API and runner nodes? It does touch the agent, but maybe we don't need it to get started.\r\n\r\nThe data access interface (1.) sounds interesting. I'll start doing that in the `hybrid-api` branch. I'm also thinking that the runner nodes could _learn_ where it's more efficient to `/dequeue` jobs from... we don't even need complicated ML for this, it should be sufficient to have a simple weighted probability table that is updated based on whether we successfully get an efficiently runnable job. Reinforcement learning, if you like, but the simplest version of it.\r\nThis has also the advantage that we don't need to worry about nodes moving around or being re-partitioned (the tables will update on their own eventually). > implement a data access interface layer for the agent that encapsulates the functionality we need\r\n\r\nI've tried abstracting this at the data access layer, and I've managed a quick refactor (pushed a commit), but now I'm looking at it and I'm not convinced it's useful at that layer... so I've probably misinterpreted. From what I can see, I think the agent itself probably needs a refactor, like you say we \"need to shuffle code around first\".\r\n\r\nWhat I envisage is a `runnerAgent` and an `apiAgent` (and maybe a `fullAgent` for the current implementation?), implementing `Agent` which will have the new methods corresponding to the new endpoints. This actually may supersede part of what @msgodf is doing, at that point the flag to switch mode becomes a decider for which struct is created.\r\n\r\nAm I on the right track? I think fnlb shouldn't make a load based decision on async requests, it should just round robin them. The state of fn servers at the time of MQ queuing could be very stale.\r\n\r\nSince fnlb has the big picture, maybe it could be a proxy to the API servers. fn servers could poll API servers through fnlb, which could act as a switch board to route/intercept the responses to the proper fn server. Maybe this could help with /dequeue and /finish mapping issue (since probably fnlb will be in communication with all API servers.)\r\n\r\n >I guess agent's responsibility mostly is managing the pool of calls and the interfacing with the mq/db is pretty minimal\r\n> what you pushed looks pretty good to me\r\n\r\nThat's fine, but I was asking myself what will be responsible for handling the dequeue/start/finish API calls in the API-only node. The `Agent` doesn't surface the interface to do so, so will the `Server` go straight to the data? Even in that case we'll need some sort of \"NoOp agent\" for the API-only node... I suppose we'll cross that bridge when we get to it. Also, currently we don't have an \"update call\" method in the datastore, and we'll need it to update its status (from queued to running to end state), so I'll add an implementation of that too, as an atomic thing (it must basically do a CAS).\r\nWe might want an index on some fields too, to speed up queries.\r\n I'll coordinate with @msgodf. I've added the UpdateCall method and I'm writing tests at the moment, should push things soon to hybrid-api.\r\n\r\n[edit: pushed the UpdateCall stuff!] I've merged with @msgodf 's stuff in the hybrid-api branch. I could then merge all into hybrid-impl if you want. Shall we work on the same branch? It seems odd to have two. (quick note: \"When fnrunner starts, it will: - register itself with the fnlb\" is effectively done - the fnlb has the ability to discover runner nodes when running under k8s. In a non-k8s deployment, fnlb instances need to be launched with teh --nodes flag or the management interface poked.) Good stuff!\r\n\r\nThe FN_RUNNER_URL new env var in hybrid-datarappa... it doesn't point to a runner node, it points to an API node where we can invoke the /v1/runner endpoints. I can see the reason for the name but it may be a bit confusing.\r\nI have no suggestions though (we can't use FN_API_URL as that has another meaning).\r\n\r\nI'm happy to merge the hybrid-mergy branch down to master as it does not affect the default case. I have added caching to the hybrid client in #585 but I'm not sure we should \"move\" the caching from the datastore to there. The datastore cache is still going to be useful in the api node and the \"full\" standalone node, I guess there are things other than the Agent which use GetApp and GetRoute. Actually it turns out the datastore cache wasn't being used by anything else so I have now removed it. I propose we change the env var for the runner API to FN_RUNNER_API_URL ( https://github.com/fnproject/fn/pull/592 ).\r\n\r\nI'm toying with some helm chart changes to support a hybrid deployment, and setting `FN_RUNNER_URL` to `something-api` really looks odd.\r\n I've just realised a minor issue about hybrid mode that I don't think we've addressed yet.\r\n\r\nFor a developer using the cli, FN_API_URL will have to point to the API nodes LB address, not the runner nodes LB address. This is fine. However, `fn call` is a development operation that will have to reach the `/r/...` endpoints which require using the runners LB address. We'll need a solution for this. Hybrid deployment helm chart changes up for discussion in: https://github.com/fnproject/fn-helm/pull/9 Updated hybrid deployment PR to have two separate charts.\r\n\r\nI have a proposal to solve the problems with the split mode and `fn call`.\r\nWe could have an FN_CONTROL_API_URL and an FN_WORK_API_URL as environment variables that the cli uses, respectively for control plane URL (`/v1/...`) and work plane URL (`/r/...`). However, for backwards compatibility (and for standalone deployments) if FN_API_URL is provided then it will be used for both the control plane URL and the work plane URL.\r\nHow does that sound?  Heya,\r\n\r\nAny company/team wishing to heavily base their platform/services upon fn needs to have a clear view of the security of the project. \r\n\r\nWould it be possible to add a documentation page that covers topics such as:\r\n\r\n* general security perspective and take from the project\r\n* how best dealing about secrets (depending on the underlying platform?)\r\n* how are communication secured between the various components?\r\n* are there any audit playbook?\r\n\r\nThose are fairly quite open ended questions but I hope they reflect various aspects one would look into such a project before heavily investing in it.\r\n\r\nCheers,  Right. Looks like the expression ``route | grep default | awk '{print $2}`` doesn't work on MacOS. I've fixed this by using `--link` instead of ``add-host`. \r\n\r\nSee PR https://github.com/fnproject/fn/pull/523   I agree with both Travis and Chad's comments.  I also wonder if we should be focusing on the local development experience with these simple tutorials, or at least calling out the use of --local?  The setting of FN_REGISTRY is covered in the quickstart but may be overlooked.  Helping users get started I've seen it be a stumbling block.\r\n\r\nTypo: \"It will also demonstrates\".\r\n ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [Michael J Williams](https://github.com/michael-w-williams)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! ## CLA Bot\n\nAll committers have signed the CLA. Based on Travis' feedback, I dialed the config stuff back and linked to the function-file.md. Added some markdown to make the command match the formatting Shaun is using in the tutorials. Made some other minor fixes.  Fixed some conflicts. Made a few more fixes. See my feedback for the Java and Node examples which is generically applicable:\r\n- https://github.com/fnproject/fn/pull/698#pullrequestreview-91932335 \r\n- https://github.com/fnproject/fn/pull/697 @michael-w-williams is this PR still valid? Nope. This is replaced by the language tutorials in the tutorials repo. Closing.   What's your intention in renaming  `fn/examples/grafana` to `fn/examples/UPDATE-OR-DELETE/grafana`? I added this recently, and have a PR open to update it. \r\n No intention, thought it was old. I'll move it back. Although that looks like something that would be better in the docs, rather than examples. Examples are for example functions.  Moved it back @nigeldeakin \r\n  I'm seeing the following behaviour from fn. (The run is triggered by flow but the behaviour's the same for functions called directly by the user.)\r\n\r\nIn this case the function makes a bunch of API calls over a period of (over) two minutes, before finally emitting a small amount of data. After two minutes, fn responds with a 504 timeout. However, I'm still seeing indications that the container continues to run after that 504 is received.\r\n\r\nIn my opinion (which I invite discussion on) this is error-prone: in this case, fn should probably stop the container (since it doesn't know if the function's run away or not) strictly *before* returning a 504. It's much harder to write correct software as a set of functions if I can't tell whether a timed-out function is going to attempt to trigger more side-effects after fn has returned to me.\r\n\r\n\r\nExample log extract follows.\r\n\r\n\r\nFunction triggered (this log trace from flow service):\r\n\r\n```\r\ntime=\"2017-11-10T12:04:40Z\" level=info msg=\"Running Stage\" faas_url=\"http://fn-service.fn:8080/r\" function_id=t/flow-load-test-vista graph_id=6cd61dfb-2e88-47d6-9a9d-d441cca284c0 logger=executor_actor operation=thenCompose stage_id=2 \r\n```\r\n\r\nIt generates some POSTs to the flow api:\r\n\r\n```\r\n[GIN] 2017/11/10 - 12:04:40 | 200 |  5.912722207s |      10.99.57.0 | POST     /graph/6cd61dfb-2e88-47d6-9a9d-d441cca284c0/stage/1/thenCompose\r\n... about 20 lines elided ...\r\n[GIN] 2017/11/10 - 12:05:55 | 200 |  1.776090655s |      10.99.57.0 | POST     /graph/6cd61dfb-2e88-47d6-9a9d-d441cca284c0/stage/28/thenApply\r\n```\r\n\r\nThen Fn gives up on the stage ever returning anything (timeout at 2 minutes):\r\n\r\n```\r\ntime=\"2017-11-10T12:06:43Z\" level=info msg=\"Fn load balancer delay\" faas_url=\"http://fn-service.fn:8080/r\" fn_lb_delay=\"81.197\u00b5s\" function_id=t/flow-load-test-vista graph_id=6cd61dfb-2e88-47d6-9a9d-d441cca284c0 logger=executor_actor operation=thenCompose stage_id=2 \r\ntime=\"2017-11-10T12:06:43Z\" level=error msg=\"Got non-200 error from FaaS endpoint\" faas_url=\"http://fn-service.fn:8080/r\" function_id=t/flow-load-test-vista graph_id=6cd61dfb-2e88-47d6-9a9d-d441cca284c0 http_status=504 logger=executor_actor operation=thenCompose stage_id=2 \r\n```\r\n\r\nHowever the container is not yet cancelled and is still running, which is where this comes from half-a-dozen seconds later:\r\n\r\n```\r\n[GIN] 2017/11/10 - 12:06:49 | 400 |   14.671578ms |      10.99.57.0 | POST     /graph/6cd61dfb-2e88-47d6-9a9d-d441cca284c0/stage/29/thenCompose\r\n```\r\n there is a bug filed about swapping out the input/output pipes to avoid some of the possible confusion around these kinds of timeouts. for hot functions, ideally we leave the container up (not sure if this bug is filed in a hot or cold function context) and just swap out the output pipe to effectively shut that call down and free it up for another. in this case, it's true that the code in the container is likely still executing and not prepared to take more input, though fn will see it as available and attempt to shove more input into a container. for this reason, I think it's probably best we do something like https://github.com/fnproject/fn/issues/373 -- it's kind of hard for us to know whether a container is actually prepared to take input or not, there may also be some kind of trickery we could do with docker health checks https://github.com/fnproject/fn/pull/434 but this also seems like it would be something the client / us would have to inject into containers. anyway, it seems like if we shove deadline in that containers could effectively time out operations and cancel whatever it is they were doing to go take input for the next task. does #373 seem reasonable? would be concerned about container churn if we made all timed out hot tasks have to shut down the container (e.g. if user has 1s timeout and their db is fucked but they continue to send us 1000 rps...)\r\n\r\nin the cold context, this should kind of fall out except for the docker remove command can take an inordinate amount of time [which leads me to believe this issue is filed about hot, so not expanding].  \n    \nThe issue arose in a (very) loaded fn cluster: cf. Dario's comments about cpu saturation. In this instance it arose because a function had \"plenty\" of time to execute (2 min, usually runs in about 10s) but was hugely cpu-contended; under such a situation there's not a lot the function can do cooperatively to manage this. Could potentially rig up a signal internally with a view to aelf-destruction if the deadline were exceeded; that's still racy in many cases depending on the thread to whichthe signal is dispatched. I'll experiment along those lines.\n\n--\u00a0Excuse typos. Phone screens don't make great ketbroads.\u00a0\n\n-------- Original message --------\nFrom: Reed Allman <notifications@github.com> \nDate: 13/11/2017  6:18 p.m.  (GMT+00:00) \nTo: fnproject/fn <fn@noreply.github.com> \nCc: jan-g <jang@ioctl.org>, Author <author@noreply.github.com> \nSubject: Re: [fnproject/fn] Hot sync function: 504 from fn whilst the\r&nbsp; container still runs. (#497) \n\nthere is a bug filed about swapping out the input/output pipes to avoid some of the possible confusion around these kinds of timeouts. for hot functions, ideally we leave the container up (not sure if this bug is filed in a hot or cold function context) and just swap out the output pipe to effectively shut that call down and free it up for another. in this case, it's true that the code in the container is likely still executing and not prepared to take more input, though fn will see it as available and attempt to shove more input into a container. for this reason, I think it's probably best we do something like #373 -- it's kind of hard for us to know whether a container is actually prepared to take input or not, there may also be some kind of trickery we could do with docker health checks #434 but this also seems like it would be something the client / us would have to inject into containers. anyway, it seems like if we shove deadline in that containers could effectively time out operations and cancel whatever it is they were doing to go take input for the next task. does #373 seem reasonable? would be concerned about container churn if we made all timed out hot tasks have to shut down the container (e.g. if user has 1s timeout and their db is fucked but they continue to send us 1000 rps...)\nin the cold context, this should kind of fall out except for the docker remove command can take an inordinate amount of time [which leads me to believe this issue is filed about hot, so not expanding].\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n  \n  \n\n\n\n\n{\"api_version\":\"1.0\",\"publisher\":{\"api_key\":\"05dde50f1d1a384dd78767c55493e4bb\",\"name\":\"GitHub\"},\"entity\":{\"external_key\":\"github/fnproject/fn\",\"title\":\"fnproject/fn\",\"subtitle\":\"GitHub repository\",\"main_image_url\":\"https://cloud.githubusercontent.com/assets/143418/17495839/a5054eac-5d88-11e6-95fc-7290892c7bb5.png\",\"avatar_image_url\":\"https://cloud.githubusercontent.com/assets/143418/15842166/7c72db34-2c0b-11e6-9aed-b52498112777.png\",\"action\":{\"name\":\"Open in GitHub\",\"url\":\"https://github.com/fnproject/fn\"}},\"updates\":{\"snippets\":[{\"icon\":\"PERSON\",\"message\":\"@rdallman in #497: there is a bug filed about swapping out the input/output pipes to avoid some of the possible confusion around these kinds of timeouts. for hot functions, ideally we leave the container up (not sure if this bug is filed in a hot or cold function context) and just swap out the output pipe to effectively shut that call down and free it up for another. in this case, it's true that the code in the container is likely still executing and not prepared to take more input, though fn will see it as available and attempt to shove more input into a container. for this reason, I think it's probably best we do something like https://github.com/fnproject/fn/issues/373 -- it's kind of hard for us to know whether a container is actually prepared to take input or not, there may also be some kind of trickery we could do with docker health checks https://github.com/fnproject/fn/pull/434 but this also seems like it would be something the client / us would have to inject into containers. anyway, it seems like if we shove deadline in that containers could effectively time out operations and cancel whatever it is they were doing to go take input for the next task. does #373 seem reasonable? would be concerned about container churn if we made all timed out hot tasks have to shut down the container (e.g. if user has 1s timeout and their db is fucked but they continue to send us 1000 rps...)\\r\\n\\r\\nin the cold context, this should kind of fall out except for the docker remove command can take an inordinate amount of time [which leads me to believe this issue is filed about hot, so not expanding]. \"}],\"action\":{\"name\":\"View Issue\",\"url\":\"https://github.com/fnproject/fn/issues/497#issuecomment-344009200\"}}} thanks for context. perhaps in addition to memory we should check on cpu usage before allowing more calls to run on a given host to try to avoid these kind of contention issues, they are somewhat endemic and we've dealt with it in the past by simply reducing the number of concurrent tasks that could run on any host but `fn` is more dynamic than the product I'm speaking about. FYI: https://github.com/fnproject/fn/issues/509 @jan-g could you pls post a brief explanation of the setup as well? How many fn servers, fn-lb instances? Using 8 VM.DenseIO1.4 nodes with /var/lib/docker on nvme for the DaemonSet.\nEach node saw roughly the same proportion of \"slow-function\",\n\"fast-function\" and \"vista\" containers on it (the latter c. 300 per node).\nThe issue here is that we've c. 63GB per node and yet \"only\" 8 cores, so Fn\npacks these far too densely and they don't get much of a look-in.\n\nWe were really looking to capacity-test the Flow service; we just noticed\nthis en passant. We ended up replacing the Fn + functions part with a\ngolang \"mock\" based on GIN to get the capacity so that the Fn setup itself\ndidn't need scaling beyond belief to get numbers for a different part of\nthe system. However, in practice the \"vista\" test looks to put a reasonable\namount of - hopefully fairly realistic - stress on a system. (Note that the\n\"slow-function\" in that represents the image processing steps; it's\nreplaced by a sleep since we were interested in the Flow side rather than\nthe Fn side, but if that was also number-crunching then the situation would\nbe rather exacerbated.) Clearly \"your work demand exceeds your capacity\" is\nalways going to be a problem that needs addressing; but Fn could definitely\nbe a bit smarter about allocating capacity for small, CPU-intensive\nworkloads.\n\n\n\nOn Fri, Nov 17, 2017 at 1:34 AM, Tolga Ceylan <notifications@github.com>\nwrote:\n\n> @jan-g <https://github.com/jan-g> could you post a brief explanation of\n> the setup as well? How many fn servers, fn-lb instances?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/fnproject/fn/issues/497#issuecomment-345118413>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ADRYddTVieOFGUy6QxZourZfkgNNWi4aks5s3OKkgaJpZM4Qb1Py>\n> .\n>\n Should we close this? There were a few changes in since this was opened. Does #405 provide solution to this workload? I'll check this when I'm back in the office.\n\nOn Fri, Jan 12, 2018 at 9:31 PM, Tolga Ceylan <notifications@github.com>\nwrote:\n\n> Should we close this? There were a few changes in since this was opened.\n> Does #405 <https://github.com/fnproject/fn/issues/405> provide solution\n> to this workload?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/fnproject/fn/issues/497#issuecomment-357359722>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ADRYdQ0T_AWlXDx5M011N0Kp5yl7uLNeks5tJ88hgaJpZM4Qb1Py>\n> .\n>\n Possibly related: #690   Hi,\r\n\r\ni tried to execute your PHP code, but it does not work for me, the GO and node example just works fine. \r\n```\r\n\r\n# Initialize your function creating a func.yaml file\r\nfn init --name hello-php\r\n\r\n# Test your function. \r\n# This will run inside a container exactly how it will on the server. It will also install and vendor dependencies from Gemfile\r\nfn run\r\n\r\nBuilding image hanfrey/hello-php:0.0.1\r\nSending build context to Docker daemon   5.12kB\r\nStep 1/5 : FROM funcy/php:dev as build-stage\r\ndev: Pulling from funcy/php\r\n...\r\nDigest: sha256:cac7bfa17991a48267215e33344acb53fcdccd9c6a78172adcafb9df205c97b8\r\nStatus: Downloaded newer image for funcy/php:dev\r\n ---> 7a88b478f08d\r\nStep 2/5 : WORKDIR /function\r\n ---> 41cd7383b1be\r\nRemoving intermediate container 4b7b7f0a4f67\r\n\r\n****Step 3/5 : FROM\r\nFROM requires either one or three arguments**\r\nERROR: error running docker build: exit status 1**\r\n\r\n```\r\n\r\nNormally in the step should be the funcy/php image, no?\r\n\r\nMy func.yaml:\r\n\r\n```\r\nname: hello-php\r\nversion: 0.0.1\r\nruntime: php\r\nentrypoint: php func.php\r\n```\r\n\r\n\r\nfn version 0.4.16 .  also tried a 3.8 version This was a bug in the php runtime code in the cli - I've fixed this  as part of fnproject/cli#90  this should now work with the latest CLI >= 0.4.18  Extensions may need additional environment variables (in the same namespace). For example the metrics API extension requires something like `PROM_URL`. Should this be `FN_PROM_URL` or  `FN_EXT_METRICS_PROM_URL`?  DOCKER_HOST will need care as this is used by docker in env. But we can take this as FN_DOCKER_HOST and set DOCKER_HOST env ourselves in that fn server to isolate it. DOCKER_HOST makes sense to leave raw, and in any case it's easy enough for a user that wants to complicate things and run 2 docker daemons on the same host to set this variable at runtime or in a config instead of exporting env vars. the rest seem like what every other config with env vars project seems to do.   Cli issue it looks  yep, closing for https://github.com/fnproject/cli/issues/103   Needs to include flow, and clustering etc. \r\n Shouldn't hybrid arch support be a diff ticket? It was my understanding that the OSS Helm chart for Fn would allow the user to run anywhere, so a hybrid approach here would only add more complexity. Are we confusing internal (hybrid) needs with OSS needs?  yeah, let's make this \"Helm chart for fn repo\"\r\n\r\nNeeds some docs\r\n  Current plan: \r\n\r\n- [ ] helm chart with fn, flow, ui? flowui? prometheus?, can demo on naked k8s cluster \r\n- [ ] docs/tutorial in fn/docs? \r\n- [ ] blog post/outline  not sure about prometheus, but otherwise yeah that looks like a good plan. we can debate about prometheus, or add it if we have the time. @carimura cool, +1 on adding a docker compose example to operating docs. \r\n\r\nNote: I pushed my old helm chart to a branch for @zootalures to have a start point and he'll assist with the flow service. I'll swoop in next week after the break and we'll complete the helm chart, leaving out prometheus. Can close now that the chart is released - https://github.com/fnproject/fn-helm  thanks. initialization always ends up being kind of sad in my experience, just have to comment so that people don't shuffle things around and mysteriously break things down the road :) -- doing this first in server init is probably as good as it's gonna get since we're going to need a handle on the config, and in theory without agent running (pulling calls from MQ) or the http server running, nothing should really be going on before that anyway so this should do the trick.   This label cardinality thing is quite a pain! I wonder if another prometheus client may not take such an issue with this? maybe prometheus will end up not liking it though, anyway?\r\n\r\nFor the load balancer the plan is to send a span in to `fn` servers, as well, I wonder if this could be / would also trigger the cardinality issue. We do want to add some tags onto that span, and then have `fn` continue that span.\r\n\r\nFor what it's worth, I ran with this patch included for testing all yesterday without seeing this, so I'm not sure it's anything within `fn` alone but it could be lingering somewhere I don't normally hit.\r\n\r\nThanks for the patch, let's get this in to avoid the panics at least. \r\n\r\n  \r\nAs of about 0.3.163 or 0.3.164  APi calls are panicing with errors: \r\n\r\n\r\n```\r\ntime=\"2017-10-26T13:07:12Z\" level=info msg=\"starting call\" action=\"server.handleRunnerRequest)-fm\" app=travel container_id=01BXCCPBR867WG400000000000 id=01BXCCPBN367WG200000000000 route=/trip\r\npanic: inconsistent label cardinality\r\n\r\ngoroutine 158 [running]:\r\ngithub.com/fnproject/fn/vendor/github.com/prometheus/client_golang/prometheus.(*MetricVec).With(0xc420650000, 0xc4201d3020, 0xc42019afe0, 0xc420011980)\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/prometheus/client_golang/prometheus/vec.go:146 +0x76\r\ngithub.com/fnproject/fn/vendor/github.com/prometheus/client_golang/prometheus.(*HistogramVec).With(0xc4204fa598, 0xc4201d3020, 0x14, 0xc42019afe0)\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/prometheus/client_golang/prometheus/histogram.go:344 +0x38\r\ngithub.com/fnproject/fn/api/server.PrometheusCollector.Collect(0xc4204cb890, 0xc4203c3800, 0x3b9c6a843, 0x1a5c7a0)\r\n\t/go/src/github.com/fnproject/fn/api/server/prom_zip_collector.go:51 +0x94\r\ngithub.com/fnproject/fn/api/server.(*PrometheusCollector).Collect(0xc420542198, 0xc4203c3800, 0x3b9c6a843, 0x1a5c7a0)\r\n\t<autogenerated>:1 +0x46\r\ngithub.com/fnproject/fn/vendor/github.com/openzipkin/zipkin-go-opentracing.(*Recorder).RecordSpan(0xc42019c1e0, 0x23b3d946e6f61be3, 0x3e40767a31786250, 0x1ac25441f6f41e58, 0x1, 0xc4201491a0, 0xc420335190, 0x0, 0x1, 0x11a652d, ...)\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/openzipkin/zipkin-go-opentracing/zipkin-recorder.go:186 +0x6ee\r\ngithub.com/fnproject/fn/vendor/github.com/openzipkin/zipkin-go-opentracing.(*spanImpl).FinishWithOptions(0xc4203ed6c0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/openzipkin/zipkin-go-opentracing/span.go:241 +0xc8d\r\ngithub.com/fnproject/fn/vendor/github.com/openzipkin/zipkin-go-opentracing.(*spanImpl).Finish(0xc4203ed6c0)\r\n\t/go/src/github.com/fnproject/fn/vendor/github.com/openzipkin/zipkin-go-opentracing/span.go:175 +0x56\r\ngithub.com/fnproject/fn/api/server.FnSpan.Finish(0x1a1f1c0, 0xc4203ed6c0)\r\n\t/go/src/github.com/fnproject/fn/api/server/fntracer.go:40 +0x49\r\ngithub.com/fnproject/fn/api/server.(*FnSpan).Finish(0xc42049fa90)\r\n\t<autogenerated>:1 +0x45\r\ngithub.com/fnproject/fn/api/agent/drivers/docker.(*dockerWrap).InspectImage(0xc4203c6ee0, 0x1a1a300, 0xc4203351c0, 0xc42017c210, 0x22, 0xc4200f5600, 0x0, 0x0)\r\n\t/go/src/github.com/fnproject/fn/api/agent/drivers/docker/docker_client.go:257 +0x205\r\ngithub.com/fnproject/fn/api/agent/drivers/docker.(*DockerDriver).ensureImage(0xc4200545c0, 0x1a1a3c0, 0xc420149140, 0x1a1ec00, 0xc4200bca10, 0xc42017c180, 0x4)\r\n\t/go/src/github.com/fnproject/fn/api/agent/drivers/docker/docker.go:211 +0x29a\r\ngithub.com/fnproject/fn/api/agent/drivers/docker.(*DockerDriver).Prepare(0xc4200545c0, 0x1a1a3c0, 0xc420149140, 0x1a1ec00, 0xc4200bca10, 0x60020520e58, 0x18, 0x20, 0xc4204f3d80)\r\n\t/go/src/github.com/fnproject/fn/api/agent/drivers/docker/docker.go:131 +0xc85\r\ngithub.com/fnproject/fn/api/agent.(*agent).prepCold(0xc42024c0c0, 0x1a1a300, 0xc4203350c0, 0xc420324b40, 0xc42007ad70, 0x1a08100, 0xc42045a160, 0xc420324c60, 0xdb8f3c)\r\n\t/go/src/github.com/fnproject/fn/api/agent/agent.go:558 +0x223\r\ngithub.com/fnproject/fn/api/agent.(*agent).launch.func1(0xc42024c0c0, 0x1a1a300, 0xc4203350c0, 0xc420324b40, 0xc42007ad70, 0x1a08100, 0xc42045a160, 0xc420244d20)\r\n\t/go/src/github.com/fnproject/fn/api/agent/agent.go:527 +0x77\r\ncreated by github.com/fnproject/fn/api/agent.(*agent).launch\r\n\t/go/src/github.com/fnproject/fn/api/agent/agent.go:526 +0x159\r\n```  An example to show how to create an extension for using custom domains. \r\n\r\nEg 1: namespaced by user:\r\n\r\nappname.username.customdomain.com/path/to/function (points to same thing as => host/r/appname/path/to/function)\r\n\r\nEg 2: globally unique app names (like s3, heroku, google cloud functions, lambda with api gateway), \r\n\r\nappname-12345.customdomain.com \r\n\r\nIf you were running a service, you'd offer up domains like: appname-12345.my-fn-service.com\r\n @carimura Yes, it is somewhat related.\r\n\r\n1. I'm a bit confused by the title of this issue, specifically w/r/t namespacing via /etc/hosts. I must be missing some context from recent discussions.\r\n2. Related to above, I'm not working on namespacing. That's another issue (see GitLab service repo) separate from what I had been working on before Fn + OKE took up all of my time.\r\n3. I am working on the second bullet point, globally unique app names, i.e `myapp.fnservice.io`. This is coming together here: https://github.com/treeder/fn-ext-dns\r\n\r\n   CLA signed and emailed, per instructions ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* Russ Ferriday (The email used in the commit is not linked to your GitHub account. As a result we cannot verify that you have signed the CLA. If you have signed already, please let us know in our [community Slack](https://fnproject.slack.com/join/shared_invite/MjIwNzc5MTE4ODg3LTE1MDE0NTUyNTktYThmYmRjZDUwOQ). Thanks!)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! bump @carimura for cla bot (merge is blocked) this is merged into mainline via another patch, thanks! NP.\n\n\nRuss Ferriday\nCEO Topia Systems Ltd.\ntopiaruss@gmail.com\n+44 7429 518822\n\n\nOn Tue, Jan 2, 2018 at 4:41 PM, Reed Allman <notifications@github.com>\nwrote:\n\n> this is merged into mainline via another patch, thanks!\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/fnproject/fn/pull/448#issuecomment-354810321>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AALlWWmTp5cOwpfaCjc0z5fCH48fOhziks5tGlw6gaJpZM4QBMaQ>\n> .\n>\n  try running `go fmt api/server/server.go` -- recommend setting up on editor save hook (I use `goimports` myself) initial thoughts, this looks really great. will dig into the code today > partly to trigger another CI run (I don't have permissions to re-trigger the tests)\r\n\r\nI had this issue the other day and what fixed it was going to the circleci dashboard page and making sure i'm logged in, and then clicking into my projects and then to this repo. then in circleci I was logged in and had permission, where previously that had not been the case. was weird, anyway, might try doing that. now when I open circleci from this repo I appear logged in every time.  > Spans which have no app and path, are shown with a line identified in the legend as fn_path (fn_appname). \r\n\r\nnot really important but probably would expect to see simply an aggregation of all `serve_http` across all `app_name` and `path` (empty or otherwise) than simply an aggregation of all blanks. iirc grafana allows this syntax with a `*`, but I'm rusty.   I made the requested changes and added the Flow FAQ questions to the end. I tried to simplify the \"How do I Upgrade the FDK\" question and not sure if I helped or just mucked it up. I'm hoping to start on this today. Still clearing the deck from previous projects. Ok, I made almost all of the requested changes and committed them to the branch. (Hope that was the right way to do it.) Let me know if you have any more questions or comments. Instead of \"Our vision at Iron.io was a lot larger than a simple FaaS platform.\" I would say \"The Fn Project is an evolution of the IronFunctions project from Iron.io and our original vision for IronFunctions was a lot larger than a simple FaaS platform.\" ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [Michael J Williams](https://github.com/michael-w-williams)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! Is this PR just blocked by CLA?  @michael-w-williams looks like you should be covered now that your membership in oracle org is public? Can one of you guys merge it?  It still appears that I can't do that. Is there anything else that needs to be done? ## CLA Bot\n\nAll committers have signed the CLA. @michael-w-williams You should be good. Seems like its waiting on a \u2714\ufe0f  from @treeder    Thanks, we have to wait to get our CLA in place, will merge right after.  # Oracle CLA Bot\n\tThank you for your submission, we really appreciate it. Like many open source projects,\n\twe ask that you sign our [Contributor License Agreement](http://www.oracle.com/technetwork/community/oca-486395.html) before we can accept your contribution.\n\t\n- @lagartoflojo\n Hi, from the linked page:\r\n\r\n> Submitting the OCA procedure\r\n> 1.  Download the OCA from here: http://www.oracle.com/technetwork/oca-405177.pdf\r\n> 2.  Print it\r\n> 3.  Fill out and sign the form (do not forget to fill in the point 7 and provide your mailing address not only your e-mail address)\r\n> 4.  Scan the paper\r\n> 5.  Send a picture/PDF to oracle-ca_us [at] oracle [dot] com\r\n\r\nReally?? It's gonna take me longer to do this than it took me to create the PR...\r\nYou are welcome to open a new PR with the typo fixes. I'll close this.\r\nI'll consider following the CLA procedure if I ever contribute something more significant to the project.  This defines what should go in this repo and what shouldn't. Feedback welcome. \r\n\r\nI will be following up with examples of easy ways to add extensions and rebuild the server. \r\n @rdallman @derekschultz @denismakogon @carimura  @nigeldeakin spot on, would be great if you could pull the prom stuff out into it's own extension. And check out this PR for and the example linked from there for building extensions: https://github.com/fnproject/fn/pull/425\r\n > What about tracing? Calls to the OpenTracing API should probably remain part of the core, but the OpenTracing client implementation (i.e. Zipkin), and the configuration of the trace collectors (the Http one already being used, and the new custom collector to send spans to Prometheus) should probably be add-ons.\r\n\r\n+1 I agree we should standardize on the OpenTracing API for metrics logging in our code and then make it easy to plug in different backends to get that data out. \r\n\r\nI like this overall, as long as it's really easy to build with plugins (seems that way).   fixed.   It would be nice to provide middleware for user applications, in the form of another function, so that a user can add things like authentication for instance. \r\n\r\n* User adds route/function to app\r\n* User adds middleware to app (URL's to functions)\r\n* During execution, we call URL's before running the function\r\n* If response isn't 2XX, we respond early and don't run function. \r\n\r\n Related: https://github.com/fnproject/fn/issues/34\r\n Is this on the roadmap at all? It would be very useful! @Daniel15 At this moment, you can develop your own middleware along with the extensions to Fn. So, nothing stops you from doing what you want/need. Sure, I understand that I can write middleware for Fn in Go, but it would be nice to have a simple built-in way to use another function as middleware, so that I could write the middleware in any language I like. Thanks for the reply. I\u2019m not sure if that\u2019s something we\u2019d do in short term.\r\n\r\nMaybe you\u2019re willing to contribute? Would be nice to start with detailed feature description, use cases, etc.\r\n\r\nP.S.: The reason this feature is not available because Fn has changed significantly, at least I think so.\r\n  I made some minor changes to the main README.md. Mostly a little clean up. For the Tutorials page I made changes based on our discussion this morning. Made the old tutorials into a Guided Tour in 3 parts and added links for the OOW tutorials that I know about so far. \r\n\r\nPing me if you have any feedback. \r\n\r\nThanks,\r\n\r\nMike W.\r\n\r\nP.S., I'm kinda new to actually using Git like you are supposed to in a group. So if you have any tips or feedback, please let me know. Ok. I think I have made all the requested changes.\r\n\r\nMike W. Just saw Travis' comments. Let me fix those too.\r\n\r\nMike W. Ok. I think I have fixed all of travis' comments as well.  @michael-w-williams shall we close this one? You bet.  The /stats API call returns a map containing queued/running/completed/failed stats for each function, as well as global totals.\r\n\r\nHowever this does not include functions that have not yet been called. This is no what the user (or the UI tool) would expect. If a function has been created then /stats should return queued/running/completed/failed stats for it. Obviously the values would all be zero until the function was actually called. Required for https://github.com/fnproject/ui/issues/18 I believe this is because async calls go directly on the queue without hitting the database first. @rdallman can confirm. If that's the case, it would probably make sense to hit the database with \"queued\" state, or at least send a queued event to stats.   yea, related to #281 and #155 \r\n\r\njust moving the `stats.Queued()` call to `agent.GetCall` will probably do the trick (and then our Stats struct thing doesn't have to leak into the front end as much...) > To fix this issue we need a new function that is called, once for every route in the database, when the server is started and subsequently whenever a new route is created.\r\n\r\nsince we are planning to use an external aggregator service, i don't think we need to add too much machinery here (at the cost of slight precision loss around fn server failures, which I don't think matters so much).\r\n\r\nif we call stats.Queued() from agent.GetCall then in theory that data gets sent out or pulled from statsd / prometheus (respectively) within some polling interval, so I don't think it's worth checking the db really. also, since we're running distributed, on startup we can't really have every fn server add up every queued call in the db, otherwise if there are e.g. 100 queued calls and 3 fn servers restart, prom would pull that 300 are queued, and i don't think we can mix gauge and counter very easily.  > As for calling stats.Queued() from agent.GetCall: why is that better than calling it just once as now, when the call is enqueued? \r\n\r\nwell, just the positioning I think. `GetCall` is called before queueing the call to the MQ, so while it sits on the MQ, prometheus will have a counter incremented for it. whereas right now it's in `Submit`, so only after the call gets picked off the MQ (could be seconds, minutes, hours after it was actually queued) will the counter get incremented. there is some consideration for calls that may get pulled off the MQ multiple times (for reasons of failing previously/timeouts/etc), this is an issue in the current spot as well as in `GetCall` without certain care. I think originally this is how I interpreted this issue, though now I understand it's something else. in any event, this is also going on. closing, don't think we need to have zeroed stats for routes that have yet been invoked if i understand correctly  need to store in db + add to api, useful for auditing stuff.\r\n\r\nwe should probably implement db migrations baked in so that we can make changes like this without breaking people's dbs, too.  Was this implemented @rdallman ? It's not there yet.  on it Current status: waiting on corp digital sig account... stand by.  This feature adds new hot format: JSON.\r\nComparing to HTTP format, JSON takes request payload and adds certain fields that might appear useful for function and send sends it to function's STDIN.\r\n\r\nCloses: #259 \r\n TODO: adding more tests:\r\n - API test\r\n So, recent commit addresses few things:\r\n - writes JSONIO.body is bytes without unnecessary marshaling\r\n - unmarshals function output only in case writer from Dispatch is a response writer\r\n - writes whole function output (copies to a writer from Dispatch).\r\n\r\n@rdallman @treeder: question that is still open: in case of huge JSON, how should we write it to STDIN?\r\nMaybe we need to write in in chunks, but how big that chunk should be, should chunk size align to request size limits? Per discussion with @rdallman. We need to do following:\r\n\r\n- JSONIO is redundant here because it's nothing but http.Request (or it's small piece)\r\n- we should not buffer request body, but define custom encoder for http.Request so we can build encoded state right into STDIN avoiding any kinds of buffering (hopefully).\r\n @treeder https://pypi.python.org/pypi/ijson looks promising, but unmaintained (almost a year). would try that someday later, at this moment finishing hotfn-py. After playing a while with code i found that it actually doesn't work properly and here's why.\r\n@rdallman recommended to do following:\r\n```go\r\nio.WriteString(h.in, `\"body\":\"`)\r\nio.Copy(h.in, req.Body)\r\nio.WriteString(h.in, `\",`)\r\n```\r\nso, i ended up with following code:\r\n```go\r\nfunc (h *JSONProtocol) DumpJSON(w io.Writer, req *http.Request) error {\r\n\t_, err := io.WriteString(h.in, `{`)\r\n\tif err != nil {\r\n\t\t// this shouldn't happen\r\n\t\treturn err\r\n\t}\r\n\tif req.Body != nil {\r\n\t\t_, err := io.WriteString(h.in, `\"body\":\"`)\r\n\t\tif err != nil {\r\n\t\t\t// this shouldn't happen\r\n\t\t\treturn err\r\n\t\t}\r\n\t\t_, err = io.Copy(h.in, req.Body)\r\n\t\tif err != nil {\r\n\t\t\t// this shouldn't happen\r\n\t\t\treturn err\r\n\t\t}\r\n\t\t_, err = io.WriteString(h.in, `\",`)\r\n\t\tif err != nil {\r\n\t\t\t// this shouldn't happen\r\n\t\t\treturn err\r\n\t\t}\r\n\t\tdefer req.Body.Close()\r\n\t}\r\n\t_, err = io.WriteString(h.in, `\"headers:\"`)\r\n\tif err != nil {\r\n\t\t// this shouldn't happen\r\n\t\treturn err\r\n\t}\r\n\terr = json.NewEncoder(h.in).Encode(req.Header)\r\n\tif err != nil {\r\n\t\t// this shouldn't happen\r\n\t\treturn err\r\n\t}\r\n\t_, err = io.WriteString(h.in, `\"}`)\r\n\tif err != nil {\r\n\t\t// this shouldn't happen\r\n\t\treturn err\r\n\t}\r\n\treturn nil\r\n}\r\n```\r\nUnfortunately it does work only into two cases:\r\n - body is empty\r\n - body is plain text\r\n\r\nCases when this code doesn't work:\r\n - json\r\n - xml\r\n - html\r\n\r\nGood question here would be, why so? Okay, we agreed that JSON protocol is not kinda bidirectional, so we let user write JSON/XML/Text/HMTL in request body, by itself JSON proto dispatcher writes a JSON object of the following format:\r\n```json\r\n{\r\n    \"body\": \"...\",  string\r\n    \"headers\": \"...\"  http.Header\r\n}\r\n```\r\nas a response from function we allow to receive following format:\r\n```json\r\n{\r\n    \"body\": \"...\", string\r\n    \"headers\": \"...\", http.Header\r\n    \"status_code\": 200 int\r\n}\r\n```\r\nAssume user sends JSON object to a function:\r\n```json\r\n{\r\n    \"name\": \"Denis\"\r\n}\r\n```\r\nTaking into account the way we write request body STDIN, function will receive following data:\r\n```json\r\n{\"body\": \"{\"name\": \"Denis\"}\"}\r\n```\r\nthis is not a valid JSON and this makes function fail to decode JSON object from the JSON body, same thing happens to XML, HTML.\r\n\r\nIn order to fix following issues we need to turn request body to byte stream and send it as a string or byte stream representation (doesn't actually matter at this point). Then create JSON object (the one that would be sent later to a function) with string/byte representation of a request body.\r\n\r\nPros:\r\n - function will receive valid data that can be transformed back to JSON/XML/HTML/Text\r\n\r\nCons:\r\n - allocating 1 buffer per request body (we still can reset each buffer when it's no longer needed)\r\n\r\nLast statement returns us to the following question - should JSON dispatcher write request body into chunks?\r\nWe're almost set for this, using code from latest commit (7699a88cfe9494e3cbcbeef569d6a414625e0496) we can write chunked request body easily.\r\n\r\nThoughts? @treeder @carimura @hibooboo2 @rdallman  @zootalures that's the point of my long-read comment above. We __can't__ just copy request body to STDIN because it's bad idea. We need to make it work for everything, that's why we need to read body as byte array and then get it string representation that can work for any content type: JSON, XML, HTML.\r\n it seems fine to have a little pass thru copy function which can read 1 byte at a time and escape any chars necessary for json to encode it. json will only accept utf8, so we need to check that anyway, really. we don't need to care about html or xml encoding, because the body is a string, so as long as the string is parseable to a json string then it's fine. \r\n\r\nit's still not required to marshal the entire thing into a json, it just takes a little ingenuity... i'm happy to take this patch over if you do not want to work through the stuff required to do so.\r\n\r\non the other end, the hotpy stuff needs to use a streaming json parser, which has been linked, i'm sure others exist -- it's also really easy to write one yourself and can be fun for certain kinds of brains. once we do something, we're going to be stuck with 'bug as a feature' and this 'one write event' thing is exactly that kind of thing.  check this out: https://play.golang.org/p/bLZskdfB6T\r\n\r\neasy peasy @rdallman you've mentioned the alternative that i've been testing as an alternative to what i've made at this moment, that's why i left that code in place. Don't think that i'm arguing regarding single write event, i think we'll be able to find proper ways to read JSON, no matter if that would be a byte-by-byte read, as you said, protocol dictates structure, not frame. So, feel free to review this one again. ok. seems like everything still getting shoved in buffers here, not sure if you pushed. lmk when updated @rdallman there's only one buffer for request body everything else is not buffered and gets written just into STDIN. So, it's obvious why i did this for body - it needs to be encoded properly. Latest changes were pushed. the docs are still wrong, see https://github.com/fnproject/fn/pull/364#discussion_r143313043 (outdated but still wrong) if user returns json object but status code is 0 should we rewrite it to 200 probably? this will return a 0 atm :/ empty headers is fine, but status one is weird.  cool, seems much better now. want to test with the examples and your python library and make sure everything is good then we can merge? can optimize the buffer thing out in a bit, need to fiddle with it. @rdallman python JSON parser is not ready, that would be done later, so i excluded python's example from this PR and will push that later. works for me also in future we should probably parse out the response json ourselves since atm for output we are decoding into a [gigantic] buffer and then for logs re-encoding it, and for the http one we can just copy the raw body out of the json response (respString[x:y]) instead of allocating a gigantic string and copying it over. but since we don't care about that for now, moving on...  closes #24   some people hitting OOM just testing stuff. we could increase default to 256, which is still a little tight. there are multiple solutions I think we should consider:\r\n\r\n* increase default to 256MB\r\n* for runtimes that use lots of ram, `fn init` can add a higher default (JVM, ruby) to `func.yaml`\r\n* make OOM error message suggest increasing the route memory (some people are unaware this is an option when running into OOM) FWIW we haven't seen any significant problems with this in java yet - we're using the latest JVM hacks to elastically set the heap with the  container mem so  users should see an OOM exception in java before a docker OOM (in almost all cases) \r\n +1 for 2 and 3 - though I will look at the java-fdk and try to apply the same JVM options to grow heap and this may help with my particular issue.  @markxnelson  - yeah IIRC the default (no options)  heap for java is 1/4 container ram I think we set it to 1/2 which (for 128Mb anyway) gives just about enough ram for other pools. \r\n\r\nJava (8 - 9 will be difference) entrypoint is here: \r\nhttps://github.com/fnproject/fn-java-fdk/blob/master/runtime/Dockerfile\r\n```\r\nENTRYPOINT [ \"/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\", \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+UseCGroupMemoryLimitForHeap\", \"-XX:MaxRAMFraction=2\", \"-XX:+UseSerialGC\", \"-Xshare:on\", \"-cp\", \"/function/app/*:/function/runtime/*\", \"com.fnproject.fn.runtime.EntryPoint\" ]\r\n```  Consider this func.yaml\r\n```yaml\r\nname: alert-manager\r\nversion: 0.0.46\r\nruntime: java\r\ncmd: com.oracle.state.demo::handleRequest\r\ntimeout: 1000\r\npath: /alert-manager\r\nheaders:\r\n  Access-Control-Allow-Headers: ['Authorization, Origin, X-Requested-With, Content-Type, Accept']\r\n  Access-Control-Allow-Methods: ['POST, GET, OPTIONS']\r\n  Access-Control-Allow-Origin: ['*']\r\n  Content-type: ['text/json']\r\nidle_timeout: 180\r\n```\r\n\r\nIf I deploy this function several times in succession, I observe that when making an OPTIONS request to the service, the values of the response headers as specified above will be duplicated a number of times equal the number of deploys. closing #340 \r\n\r\nthanks for bug. i think we are intentionally adding headers if they exist in `config set` but could see this being an issue for deploys FWIW, here is an example of the problem\r\n```\r\nAccess-Control-Allow-Headers: Authorization, Origin, X-Requested-With, Content-Type, Accept, Authorization, Origin, X-Requested-With, Content-Type, Accept\r\nAccess-Control-Allow-Methods: POST, GET, OPTIONS, POST, GET, OPTIONS\r\nAccess-Control-Allow-Origin: *, *\r\nContent-Length: 2\r\nContent-Type: text/json\r\nFn_call_id: 01BTJS83ZY07WHR00000000000\r\nXxx-Fxlb-Wait: 48.57\u00c2\u00b5s\r\nDate: Thu, 21 Sep 2017 17:54:57 GMT\r\n``` So, we can change deploy routine to make it actually do (re)deploying - if app exists then drop it and create from scratch. On the other hand, we can make headers be more solid, i.e if header exists - skip it.\r\n\r\n@rdallman @edburns thoughts? > On the other hand, we can make headers be more solid, i.e if header exists - skip it.\r\n\r\nif they want to update the values, this logic would make them unable to do so without first deleting an entry. it's kind of hairy to skip over, would rather just override. this is a 1 line change `Header.Add` -> `Header.Set` if we all agree. later (when somebody asks in 8 months) we could add query parameter to make it additive like it is now.  kind of against this, we already have a load of timestamps and every lang has really really easy to use libs to do `call.StartedAt - call.CreatedAt` ... ui candy / tooling makes more sense, shouldn't bloat our api with every piece of info we think we want to see, just return base data to chew on  This change extends the JSON data returned by the /stats API call to return a map of per-function statistics, keyed by the function's path.\r\n\r\nBefore this change, an example JSON data was\r\n\r\n`{\"Queue\":0,\"Running\":0,\"Complete\":1}`\r\n\r\nAfter this change, an example JSON data is\r\n\r\n`{\"Queue\":0,\"Running\":0,\"Complete\":1,\"FunctionStatsMap\":{\"/hello-async-2\":{\"Queue\":0,\"Running\":0,\"Complete\":1}}` I see the tests failed with \r\n```\r\nERROR: Repository not found.\r\nfatal: Could not read from remote repository.\r\n```\r\nI don't know why... (this is my first PR on the fn project)\r\n @nigeldeakin push branch from your fork into a branch on this repo and PR that for CI to work cool, code looks pretty good, just needs `gofmt` ran on it mostly (and PR from in repo branch) Since we want per-project stats then it's more reasonable to put `/stats` under `/v1/apps`:\r\n`/v1/apps/{app}/stats` where you'd get following response:\r\n```\r\n{\r\n    \"some-random-app\": {\r\n        \"/path1\": {\"Queue\":0,\"Running\":0,\"Complete\":1}\r\n    }\r\n}\r\n```\r\n\r\nThoughts? @treeder I'm simply extending the existing /stats API, which is indeed in memory, single server. This is intended to be quick eye candy for 1st Oct, with as few moving parts as possible (as directed at my last team meeting). The long-term  solution will probably be based on broadcasting tracing info and using something like prometheus (or whatever ODX tools use) to accumulate stats across multiple servers.  @denismakogon Yes, that's a perfectly reasonable approach. The UI server would have to make one API call to list all the apps, then a separate API call for each app. That would be more elegant when I go on to list per-app stats. (We could go even further and associate the stats with the individual function. That would require the UI server to have to make a separate API call for each function.) @nigeldeakin https://github.com/fnproject/fn/blob/master/go-fmt.sh I've now created a new pull request: https://github.com/fnproject/fn/pull/342, using a feature branch on this repo rather than a fork. That seems to allow the CircleCI tests to run (they passed). I will now close this PR.  So, when sending a request without content length specified causes server to fail on request:\r\n\r\n```\r\nerror=\"runtime error: makeslice: len out of range\"\r\n```\r\n```\r\nruntime/debug.Stack(0x0, 0x0, 0x0)\r\n\t/usr/local/go/src/runtime/debug/stack.go:24 +0xbe\r\ngithub.com/fnproject/fn/api/server.HandleErrorResponse(0x58d84a0, 0xc420281680, 0x6e400e8, 0xc4201f8160, 0x58cbba0, 0x5355d50)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/api/server/error_response.go:37 +0x4bf\r\ngithub.com/fnproject/fn/api/server.handleErrorResponse(0xc4201f8160, 0x58cbba0, 0x5355d50)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/api/server/error_response.go:24 +0xae\r\ngithub.com/fnproject/fn/api/server.panicWrap.func1(0xc4201f8160)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/api/server/server.go:188 +0x8d\r\npanic(0x511c120, 0x5355d50)\r\n\t/usr/local/go/src/runtime/panic.go:491 +0x2a2\r\ngithub.com/fnproject/fn/api/server.(*Server).serve(0xc4200a4360, 0xc4201f8160, 0xc42008c0c8, 0xc, 0xc42008c0d4, 0x7)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/api/server/runner.go:66 +0x373\r\ngithub.com/fnproject/fn/api/server.(*Server).handleRequest(0xc4200a4360, 0xc4201f8160)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/api/server/runner.go:42 +0x236\r\ngithub.com/fnproject/fn/api/server.(*Server).handleRunnerRequest(0xc4200a4360, 0xc4201f8160)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/api/server/server.go:213 +0x35\r\ngithub.com/fnproject/fn/api/server.(*Server).(github.com/fnproject/fn/api/server.handleRunnerRequest)-fm(0xc4201f8160)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/api/server/server.go:298 +0x34\r\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4201f8160)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:111 +0x9c\r\ngithub.com/fnproject/fn/api/server.panicWrap(0xc4201f8160)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/api/server/server.go:192 +0x51\r\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4201f8160)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:111 +0x9c\r\ngithub.com/fnproject/fn/api/server.traceWrap(0xc4201f8160)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/api/server/server.go:114 +0x302\r\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4201f8160)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:111 +0x9c\r\ngithub.com/fnproject/fn/api/server.loggerWrap(0xc4201f8160)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/api/server/server.go:209 +0x169\r\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc4201f8160)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/context.go:111 +0x9c\r\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Engine).handleHTTPRequest(0xc4202a05a0, 0xc4201f8160)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/gin.go:336 +0x44a\r\ngithub.com/fnproject/fn/vendor/github.com/gin-gonic/gin.(*Engine).ServeHTTP(0xc4202a05a0, 0x58d7360, 0xc4206ac7e0, 0xc420304100)\r\n\t/Users/denismakogon/Documents/oracle/go/src/github.com/fnproject/fn/vendor/github.com/gin-gonic/gin/gin.go:303 +0xcd\r\nnet/http.serverHandler.ServeHTTP(0xc42045aea0, 0x58d7360, 0xc4206ac7e0, 0xc420304100)\r\n\t/usr/local/go/src/net/http/server.go:2619 +0x1e2\r\nnet/http.(*conn).serve(0xc420252280, 0x58d83e0, 0xc4202e6f00)\r\n\t/usr/local/go/src/net/http/server.go:1801 +0x125d\r\ncreated by net/http.(*Server).Serve\r\n\t/usr/local/go/src/net/http/server.go:2720 +0x734\r\n``` This happens on recent master. Maybe it's not merged yet? yea, fixed this last week. on tip your line server/runner.go +42 points to FireBeforeDispatch for me, so update your branch. i see that we need to sanitize content length though if it's negative (blech), will fix this too. gonna close though  1. When logging incoming request headers in async hot function content length defined as `Fn_header_content_length` instead of `Content-Length`. Moreover all HTTP 1.0 spec headers are prefixed with `FN_`:\r\n```\r\nFn_header_accept\r\nFn_header_content_type\r\nFn_header_content_length\r\n```\r\n2. App config included into headers\r\nApp info:\r\n```\r\n{\r\n\t\"config\": {\r\n\t\t\"pg_db\": \"emokognition\",\r\n\t\t\"pg_host\": \"10.0.2.15\",\r\n\t\t\"pg_port\": \"5432\",\r\n\t\t\"pg_pswd\": \"postgres\",\r\n\t\t\"pg_user\": \"postgres\"\r\n\t},\r\n\t\"name\": \"emokognition\"\r\n}\r\n```\r\nhttp headers logged inside hot func\r\n```\r\nPg_host: [10.0.2.15]\r\nPg_user\r\nPg_db: [emokognition]\r\nPg_port: [5432]\r\n```\r\n\r\nIf this meant to be expected behaviour it doesn't look like documented.\r\nWhen running same hot function but sync everything works okay. I asked for opinions multiple times in #299 on this (also you approved it ;)\r\n\r\nIt's a multi-faceted because in the environment they have `FN_HEADER_` which leads to async getting the same. async also doesn't add response headers. (there are TODO for both of these). \r\n\r\nanyway, seems like we have 2 votes to strip the prefix @rdallman Tend to agree, forgot about that, my bad. But as far as i understood #299 was talking about HTTP headers. But why does app config gets injected into function as renamed (`name_of_config_attribute_A` ---> `Name_of_config_attribute_a`) HTTP headers? we could add a separate map, but it seems pretty reasonable to me to strip `FN_HEADER_` and then we don't need to change the way we store / load anything, would have to be same data in 2 places basically (already in 2 places with `BaseEnv` and `EnvVars`, would be cool to reduce this one too). #299 discussion was trying to ameliorate the inconsistency between headers in env and http (i.e. this inclusive).\r\n\r\n> But why does app config gets injected into function as renamed (name_of_config_attribute_A ---> Name_of_config_attribute_a) HTTP headers?\r\n\r\nwhen you load anything into / out of `http.Header` it will be transmuted into this form. we could write our own http dumper that writes out some form we want but idk. at least, go handles this gracefully, see https://play.golang.org/p/RxaF4fGiaq -- but i could see other langs not being so graceful, i guess. maybe another thing to decide (we need to lock in for compat for formatting shit like this)\r\n Strong +1 for getting rid of `Fn_header_` prefix. Recently you've merged PR with Python 3.5 sample for hot function, so it uses lib i've made [hotfn-py](https://github.com/denismakogon/hotfn-py) that uses [Content-Length](https://github.com/denismakogon/hotfn-py/blob/master/hotfn/http/request.py#L74) to read data from request, but i found myself with failing async hot functions because request parser wasn't able to pull out request body because request doesn't contain regular HTTP headers.\r\n no longer the case, closing At first, it looked like it worked as expected, but it appeared that FDK does all messy work for cleaning up headers.  this still an issue? not that I can easily find. I think I'll do a full sweep of the docs in the next week, stand by. now it's part of the cli itself, `--help` on any command (https://github.com/fnproject/cli/blob/master/commands/deploy.go#L27), and more holistic experience in various getting started... so gonna close    as discussed, seems like this is a user preference. seems like we could make an option, e.g. `{\"stream\":true}` to have current behavior and then go back to piling everything into a buffer before sending it as it was. specifically, this is for output, we can still leave the input path as it is.\r\n\r\nsince call invocation is a bit of an odd ball endpoint, not sure that it would be great to add a `?stream=1` since this will get pushed down into user's routes, seems like it would be better to configure on the route and then every call would get this behavior.\r\n\r\nplumbing for this should probably be done inside of Dispatch, but it would be nice to leave the Dispatch interface to only have input & output, so not sure how to plumb this config val exactly -- maybe 2 different implementers of HTTPDispatch, one that buffers then copies (to ResponseWriter), another that has current behavior, then this kind of 'half-baked' reply isn't possible and there's only a race between the container exit or a full reply being written out (and we don't necessarily care who wins, so this is fine).  addition, there is a comment in server/runner.go about this, but we need to snoop the response writer and if bytes have been written then not poop our json into the response (just saw this in resp). yea, agree, that would be separate from #320 and it would be nice for that to be configurable, as well. plumbing++ Still see this, pretty ugly (and unusable) when a function errors halfway through. \r\n ![screen shot 2018-01-05 at 1 05 41 pm](https://user-images.githubusercontent.com/75826/34628465-514d166a-f219-11e7-85c4-6e74260e1e2a.png)\r\n that one specifically i think the fix is separate [from buffering], we need to watch to see if bytes have been written and not write the error if they have. even if we have buffering we need that. To be clear here, the problem is that a failed function returns a `200` status and a garbage response. If a function fails at any point, it should be a 500 and return a JSON error response. \r\n Aside from the 200/500 issue above, I'll probably end up a adding a configurable system wide setting (eg. buffer size of 1-10MB) along with stream of/on option per route.  we're going to want to do this in our service version of this thing, but\r\nadding this here so that it's usable by everyone. just an option, can add it\r\nto server configuration, but response is nicely formatted, etc.\r\n\r\ncloses #277 bump @treeder @denismakogon (easy one) I think the issue is that for open source I don't really think we should impose some arbitrary limit. for our service, yea, absolutely, but we can provide this option from the service code. i can add to ops doc for how to configure, but it's compile time configuration and this patch imposes no limit on request size to `fn` itself, it's relying on adding this to our service code.  @carimura, yeah that makes sense. +1 on Fn, even though I previously voted for fn. I agree @carimura fn should be cli and it should be Fn when talked about in blogs etc... just like Docker docker Go go etc...  For context: We have a demo that puts a REST (Jersey) Java Web container inside a function.\r\nOne issue we had was that you can't bind a whole sub-path to a function route  - for demo we had to bind every possible route to the same image (which worked but means path variables are not an option). \r\n\r\nI know there used to be path variable support but I don't see a way to bring it back without making the database layer substantially more complex. \r\n\r\nI had a thought for how do this with less database impact  outlined here.  \r\n\r\nAllow route paths of the form `/path/*` meaning  any route prefixed by `/path/` \r\n\r\nThis does an  IN query of order of the number of components in the path  see here (assuming path is indexed on route this should be fast) \r\n\r\nSo  `/app/path/to/fn` is searched as \r\n\r\n``` \r\nSELECT ... FROM routes where  app  WHERE app_name='app' AND  path IN ('/path/to/fn', '/*','/path/*','/path/to/*','/path/to/fn/*') ORDER BY LENGTH(path) DESC LIMIT 1\r\n```\r\n\r\n\r\nMain changes: \r\n* Add 'MatchRoute' to datastore : \"Give me the right route for this URL path\"  (vs GetRoute which is always based on the unique route) \r\n*  Allow Routes paths to contain a trailing '*' (not previously validated out, but now meaningful)  - that indicates  that the route will match any \r\n* This also removes the old Param code which (to my knowledge) did not work. \r\n\r\nMatchRoute picks the longest route that matches a subpath of the incoming route -  after caching routes are always resolved deterministically   but it's possible to define one route that takes precedence over others - figure that can be a user choice though. \r\n\r\nI'm not sure what the best option is for exact matches,  suppose you have route a) `/path/to/fn` and route b) `/path/to/fn/*`  - currently  a request `/path/to/fn` will match b) but a) seems more intuitive. \r\n\r\nI'm not sure about introducing the new syntax for routes. An alternative approach (with more change and a client change) - was having a 'wildcard' flag or similar on the function that that has the same effect of adding a '*' on to the path. \r\n\r\nAnyway would appreciate thoughts if anybody has any time - would be good for us but is not critical. \r\n It is related to #256 but less complex around the caching side  (caching works much the same as before, no need for explicit cache invalidation) I figure introducing a lot of incidental complexity to the Cache/Data layer  is a bad idea right now.  this is an interesting idea. the sql trick is clever and seems almost correct, functionality wise.\r\n\r\n> I'm not sure what the best option is for exact matches, suppose you have route a) /path/to/fn and route b) /path/to/fn/* - currently a request /path/to/fn will match b) but a) seems more intuitive\r\n\r\nseems like we need to solve this as well as potentially:\r\n\r\n```\r\n/app/path/to/f\r\n/app/path/to/*\r\n```\r\n\r\nis ^ deterministic even (i.e. lexicographically sorted or such)? in any case, not sure it's reliable -- single char route paths, to be clear. the previous case i'm not sure to handle if they actually have a wildcard route defined at `/path/to/fn/` that is separate from `/path/to/fn`, i would think intuitively they should be separate and a) should still match (not sure we have this defined atm, even). \r\n\r\nis it perhaps the case that we should return the first two matches and do further matching with our own logic? based on best fit, in our eyes, instead of simply relying on the longest path to be the best match? i'm not sure if there are any cases where the best match may be outside the top two matches, need to think on this more, but it doesn't seem like it would be the worst thing to eat (2 vs 1 -- i could see returning them all becoming problematic).\r\n\r\nbiggest concern i have as well is around caching [this], not necessarily that it needs to be done here but at least some ideas around adding it (nobody is doing any real volume against this service, for now). It seems like if we can coordinate with similar-to-this functionality, we may be able to have something. if we load all routes at the longest slash, we may be able to have effective caching but we risk blowing out the cache size. what i mean by this is for example:\r\n\r\nroutes:\r\n```\r\na -> /app/path/to/*\r\nb -> /app/path/to/john\r\nc -> /app/path/to/bobby\r\nd -> /app/foo\r\n```\r\n\r\nif a request for `/app/path/to/abby` comes in, we could load a) b) and c) into the cache, this particular route would match a). a subsequent request for `/app/path/to/john` comes in, we want to match b), but if we don't load b) [or c)] into the cache, we might naively match a) since it's in the cache and does match, even though it is not the ideal match. current behavior i believe would be that `/app/path/to/abby` is 1 cache entry and 1 db lookup and then `/app/path/to/john` is 1 cache entry and 1 db lookup (i.e. we aren't caching `/app/path/to/*`). I've read #256 and we would obviously need something like it (a tree-based cache lookup), but need to think about coordinating with the db, as well (relevant here). anyway, maybe this sparks some ideas.\r\n\r\nthanks for the pr\r\n\r\n\r\n ## CLA Bot\nThank you for your submission! It appears that the following authors have not signed our Contributor License Agreement:\n\n\n* [Owen Cliffe](https://github.com/zootalures)\n\n\nPlease do so now by visiting [http://www.oracle.com/technetwork/community/oca-486395.html](http://www.oracle.com/technetwork/community/oca-486395.html)\n\nOnce complete, let us know in our [community Slack](http://slack.fnproject.io) and we\u2019ll send you an Fn T-shirt.\n\nWe are working on modernizing the CLA process into a digital signature but it isn\u2019t quite ready yet.\n\nThank you for being a part of the Fn Community! ## CLA Bot\n\nAll committers have signed the CLA. should we move this to an issue that links to this? the code is out of date, I think there's still discussion / desire for this as a feature. closes #170   Here's what I had to do to get CORS working with my java function.  First the func.yaml.\r\n\r\n```yaml\r\nname: alert-manager\r\nversion: 0.0.28\r\nruntime: java\r\ncmd: com.oracle.state.demo::handleRequest\r\ntimeout: 1000\r\npath: /alert-manager\r\nheaders:\r\n  Access-Control-Allow-Origin:\r\n    - '*'\r\n  Access-Control-Allow-Methods:\r\n    - \"POST, GET, OPTIONS\"\r\n  Access-Control-Allow-Headers:\r\n    - \"Authorization, Origin, X-Requested-With, Content-Type, Accept\"\r\nidle_timeout: 180\r\n```\r\n\r\nThen the function:\r\n\r\n```java\r\n    public String handleRequest(com.fnproject.fn.api.InputEvent ie, byte [] bytes) throws Exception {\r\n        if (ie.getMethod().equals(\"OPTIONS\")) {\r\n            System.err.println(\"debug: edburns: Recevied OPTIONS request, returning empty json.\");\r\n            return \"{}\";\r\n        }\r\n\r\n        try {\r\n            ObjectMapper mapper = new ObjectMapper();\r\n            JsonNode root = mapper.readTree(bytes);\r\n            JsonNode matchRegex = root.get(\"matchRegex\");\r\n            if (null != matchRegex) {\r\n                System.err.println(\"putting matchRegex: \" + matchRegex.textValue());\r\n                alertCloudMap.put(\"matchRegex\", matchRegex.textValue());\r\n            }\r\n            else {\r\n                // lets delete it\r\n                System.err.println(\"deleting matchRegex\");\r\n                alertCloudMap.remove(\"matchRegex\");\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            System.err.println(\"Exception handlingRequest: \" + e);\r\n            throw e;\r\n        }\r\n        return \"{}\";\r\n    }\r\n```\r\n\r\nNote that I found that I needed to not use the built in JSON coercion as it would throw an exception on the empty JSON body in the case of the browser sending the OPTIONS request.   Ideally, I'd like to not have to send the CORS headers every time, just in the OPTIONS case, but this works for now.\r\n ideally you would want to echo back the whitelisted set of domains for CORS.  returning a * prevents you from using authorization in many browsers. \r\n\r\nFROM https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS \r\n\r\n> **Credentialed requests and wildcards**\r\n> \r\n> When responding to a credentialed request, the server must specify an origin in the value of the Access-Control-Allow-Origin header, instead of specifying the \"*\" wildcard.\r\n> \r\n> Because the request headers in the above example include a Cookie header, the request would fail if the value of the Access-Control-Allow-Origin header were \"*\". But it does not fail: Because the value of the Access-Control-Allow-Origin header is \"http://foo.example\" (an actual origin) rather than the \"*\" wildcard, the credential-cognizant content is returned to the invoking web content.\r\n> \r\n> Note that the Set-Cookie response header in the example above also sets a further cookie. In case of failure, an exception\u2014depending on the API used\u2014is raised.\r\n> \r\n\r\nis this something we could configure in the YAML for each function? would it just be an array of allowed options defaulting to *. Repoening this as the change above doesn't impact routes, only the API - I think we need to deal with this more elegantly for function calls  When I try to add headers to my func.yml file they are stripped automatically every time I do `fn deploy` - in fact, no method that I'm trying will add an Access-Control-Allow-Origin header to the response.  I've tried FN_API_CORS_ORIGINS, I've even tried setting the headers directly on the OutputEvent with Headers.fromMap() in the function call itself.  I simply can not get a function call to set a response header.  Trying on fn version 0.5.8.\r\n\r\nEdit:  just to add, I even see this in the startup output:\r\n\r\n```time=\"2018-10-05T19:24:47Z\" level=info msg=\"CORS enabled for domains: [*]\"```\r\n\r\nBut no header is ever set on any response.\r\n I've also tried everything @cfsilence tried, also not getting the access control headers through.\r\n\r\nMy expectation was that:\r\n```\r\n OutputEvent.fromBytes(response.bytes, status, contentType, Headers.fromMap([ \r\n     'Access-Control-Allow-Origin' : '*'\r\n     'x-foo' : 'bar' \r\n]))\r\n```\r\nwould do the trick, but somehow the headers get lost.\r\n\r\nHow are one supposed to use a) customer headers b) access control headers? @rdallman Tested with a  http trigger and the java fdk 1.0.72 Ah if your using triggers you need to set the HTTP headers slightly differently now pull in a HTTPContext as a parameter and set CORS  the headers there I think @zootalures was referring to `com.fnproject.fn.api.httpgateway.HTTPGatewayContext`. Documentation - https://github.com/fnproject/fdk-java/blob/master/docs/HTTPGatewayFunctions.md Yes, I can confirm updating the headers in HTTPGatewayContext works.  I'll add my two cents as I was following the previous thread:\r\n\r\n- I think `FN_REGISTRY` is fine, as in cases where using an image from your own private registry you'll need the FQDN, as @treeder stated. Although, I don't need we should require an FQDN (but I don't think that was the intent, either). I am probably reiterating what has already been said, but I see this working two ways:\r\n  1. `registry.mydomain.com/username/image`\r\n  1. `username/image` (defaults to Docker Hub)\r\n\r\nAnyway, I think as long as it's documented clearly, then it should be a non-issue for people to grok.\r\n\r\n- Secondly, regarding `--name`, I agree it's confusing. I'd vote for calling it `--image` instead, if indeed that's all it is. But thinking a bit about the UX, we'd have duplicated data where `FN_REGISTRY=bobloblaw/hello` and `image=bobloblaw/hello`. That doesn't seem very elegant. But, perhaps I'm missing a key piece of info here. maybe 'name' has a place, wrt a 'function', i suppose, but it really seems superfluous given the context of what we have already. a 'path' seems to identify a function adequately, and is how it is currently referenced. interestingly, a route currently is not identified by its name, and name maps to the image field. this seems strange. i think we should just keep 'path', and change 'name' to 'image', and drop 'name' (for provided reasons). this is specifically wrt the cli args.\r\n\r\nin addition, since we are expecting people to use `fn deploy` from inside of a place where the _code_ for a function lives, alongside a `func.yaml` file to upload to a registry and to `fn`, it seems reasonable to drop 'image' entirely from `func.yaml` and force `--image` to be supplied in `fn deploy`. this would also mean that `fn init` no longer takes `--image`. \r\n\r\ni don't think this necessarily implies getting rid of FN_REGISTRY, as i think it's just a client side convenience, but i think that it could be in addition to other potentially more 'sane' methods. what this possibly looks like:\r\n\r\n```\r\n$ fn deploy --image rdallman/hello:1.0.0\r\n$ fn deploy --image http://quay.io/rdallman/hello:1.0.0\r\n$ FN_REGISTRY=rdallman fn deploy --image hello\r\n$ FN_REGISTRY=http://quay.io/rdallman fn deploy --image hello\r\n```\r\n\r\nto go into detail, essentially if a 'fully qualified' image is presented, we can ignore `FN_REGISTRY`. the only case i think of where this is 'hairy' is for images like `ubuntu` that can be 'naked' (even though they are at some point `library/ubuntu`). imo, due to the hairiness, i think it would be ideal to just let all the registry business get done on the image level. i can think of cases where users may inadvertently overwrite the docker hub user for certain routes if we don't force them to explicitly supply it (i.e. `FN_REGISTRY`).\r\n\r\nbut to me the good argument here is this:\r\n\r\n* users are calling `fn deploy` in a directory where the code exists [usually].\r\n* because of ^, this can be mapped to _any_ image that user has [push] access to, as configured locally. thus, image is not required to know a priori in order to build a 'function', the matter of building to the 'correct' repo in docker hub is up to users to figure out amongst themselves.\r\n\r\nbasically, separating what is needed locally to _build_ a function, and where exactly that is stored. a corollary to this is removing `path` from `func.yaml` for the same reason, but let's not go there just yet.\r\n\r\non theme: 'A horse! a horse! my kingdom for a horse!' EDIT: FIXED, `fn init` grew an explicit `--name` flag.\r\n\r\nUse case here is that we have an integration test that stumbled over this. We basically run an `fn init` for the Java runtime, then a build and test the result against a local functions server. That seems to me like it'd mimic a fairly common behaviour.\r\n\r\nWhat happens at the moment is that we do: `fn init --runtime java app/test-3` (in this case) and we see the `app/` part elided from the resulting func.yaml:\r\n\r\n```\r\n...\r\nname: test-3\r\n...\r\n```\r\n\r\nAt that point, `fn build` complains because there's no username - which I supplied!\r\n\r\nI'd very much like this kind of thing to \"just work\" in a local environment. Suggestions appreciated.\r\n\r\n(Mine is: I'm okay with this as long as `fn init` doesn't throw away the username if I supply it; because currently if I edit the func.yaml and put the username back, `fn build` will work properly.\r\nTurns out `fn init ... --name app/test-3` works.) they're starting to notice ;) https://github.com/fnproject/fn/issues/438 Can we close this?  this still an issue? idk. seems like we're keeping `fn init` clean so in that case better to keep out... can close.  this adds `FN_` in front of env vars that we are injecting into calls, for\r\nnamespacing reasons. this will break code relying on the current variables but\r\nif we want to do this, the chance is now really. alternatively, we could\r\nmaintain both the old and new for a short period of time to ease the\r\nadjustment (speak now...). updated the docs, as well.\r\n\r\nthis also adds tests for the notoriously finicky configuration of the env vars\r\nand headers when setting up a call. this won't test the container / request\r\nfor the call is actually receiving them, but it's a decent start and will yell\r\nloudly enough upon formatting breakage.\r\n\r\nadded back FXLB_WAIT to a couple places so the lb can ride again\r\n\r\none thing for feedback:\r\n\r\nheaders are a bit confusing at the moment (not from this change, but that\r\nbehavior is kept here for now), we've a chance to fix them. currently, headers\r\nin the request __are not__ prefixed with `FN_HEADER_`, i.e. 'hot'+sync containers\r\nwill receive `Content-Length` in the http request headers, yet a 'cold'\r\ncontainer from the same request would receive `FN_HEADER_Content-Length` in\r\nits environment. This is additionally confusing because if this function were\r\nhot+async, it would receive `FN_HEADER_Content-Length` in the headers, where\r\njust changing it to sync goes back to `Content-Length`. If that was confusing,\r\nthen point made ;)\r\n\r\nI propose to remove the `FN_HEADER_` prefix for request headers in the\r\nenvironment, so that the request headers and env will match, as request\r\nheaders already are of this format (not prefixed). please lmk thoughts here\r\n\r\nWould be fine with going back to the 'plain' vars too, then this patch will\r\nmostly just be adding tests and changing `FN_FORMAT` to `FORMAT`. obviously,\r\nfrom the examples, it's a bit ingrained now. anyway, entirely up to y'all.\r\n\r\ncloses #267  @treeder @denismakogon @zootalures @mjg123 (+anybody else) would appreciate thoughts / review here > Looking at this reminded me that it might be useful (esp. for wrappers) for functions to know if they are running sync or a sync but can raise that later\r\n\r\n+1 -- i can do that here. `FN_TYPE=async` ?\r\n\r\n> Not sure about prefixing or not in headers, but at the very least, should be consistent.\r\n\r\natm it's not, need votes either way. i've cast mine in the parent comment. @zootalures @treeder ? one additional point of pedantry, is the casing and underscores/dashes is inconsistent between headers and env vars, since they have different idioms. i'm not sure if this really shakes anyone to the core but to me it at least looks uh, unclean. updated per comments Looks good!\r\n\r\nJust one one  small thing: \r\n\r\nfor Hot - If a client pushes in a clashing Fn_header the function still gets both values (which I think is ambiguous) - (see fn_route below).  (Should those be set with `req.Header.Set(..)` rather than `.Add(...)`?) \r\n\r\n\r\nHot: \r\n```\r\n$ curl --data  '{\"message\": \"hello\"}'  -HContent-type:application/json  -Huser-header:foo -H'Fn_ROUTE:fooo' http://localhost:8080/r/test/test\r\n\r\nRequest foo: 1\r\nReq: POST hello\r\nHeaders:\r\nkey:'Fn_method'  val:[POST]\r\nkey:'Fn_route'  val:[fooo /test]\r\nkey:'User-Agent'  val:[curl/7.54.0]\r\nkey:'Accept'  val:[*/*]\r\nkey:'Fn_call_id'  val:[01BSGBVYQG07WGM00000000000]\r\nkey:'Fn_request_url'  val:[http://localhost:8080/r/test/test]\r\nkey:'Content-Type'  val:[application/json]\r\nkey:'Fn_format'  val:[http]\r\nkey:'Fn_type'  val:[sync]\r\nkey:'Content-Length'  val:[20]\r\nkey:'Fn_app_name'  val:[test]\r\nkey:'Fn_memory'  val:[128]\r\nkey:'User-Header'  val:[foo]\r\nEnv:\r\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r\nHOSTNAME=OCLIFFE-mac\r\nFN_MEMORY=128\r\nFN_TYPE=sync\r\nFN_FORMAT=http\r\nFN_APP_NAME=test\r\nFN_ROUTE=/test\r\nHTTP_PROXY=http://emea-proxy.uk.oracle.com:80\r\nhttp_proxy=http://emea-proxy.uk.oracle.com:80\r\nHTTPS_PROXY=http://emea-proxy.uk.oracle.com:80\r\nhttps_proxy=http://emea-proxy.uk.oracle.com:80\r\nno_proxy=10.167.103.241, *.grungy.us, localhost, *.oraclecorp.com, idoru.docker.oraclecorp.com, hipchat.aka.lgl.grungy.us, *.aka.lgl.grungy.us, 127.0.0.1, localhost, 10.0.0.0/8, *.usdv1.oraclecloud.com, login.oracle.com, *.us.oracle.com, 192.168.0.0/16, 192.168.64.3, 10.167.103.241, oke.docker.oraclecorp.com\r\nHOME=/root\r\nBody:\r\n{\"message\": \"hello\"}%\r\n```\r\nand cold: \r\n\r\n``` url --data  '{\"message\": \"hello\"}'  -HContent-type:application/json  -Huser-header:foo http://localhost:8080/r/test/test\r\nEnv: foo\r\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r\nHOSTNAME=OCLIFFE-mac\r\nFN_MEMORY=128\r\nFN_HEADER_Content_Type=application/json\r\nFN_HEADER_Accept=*/*\r\nFN_FORMAT=default\r\nFN_ROUTE=/test\r\nFN_TYPE=sync\r\nFN_METHOD=POST\r\nFN_HEADER_User_Header=foo\r\nFN_HEADER_User_Agent=curl/7.54.0\r\nFN_CALL_ID=01BSGBXQN007WGR00000000000\r\nFN_APP_NAME=test\r\nFN_REQUEST_URL=http://localhost:8080/r/test/test\r\nFN_HEADER_Content_Length=20\r\nHTTP_PROXY=http://emea-proxy.uk.oracle.com:80\r\nhttp_proxy=http://emea-proxy.uk.oracle.com:80\r\nHTTPS_PROXY=http://emea-proxy.uk.oracle.com:80\r\nhttps_proxy=http://emea-proxy.uk.oracle.com:80\r\nno_proxy=10.167.103.241, *.grungy.us, localhost, *.oraclecorp.com, idoru.docker.oraclecorp.com, hipchat.aka.lgl.grungy.us, *.aka.lgl.grungy.us, 127.0.0.1, localhost, 10.0.0.0/8, *.usdv1.oraclecloud.com, login.oracle.com, *.us.oracle.com, 192.168.0.0/16, 192.168.64.3, 10.167.103.241, oke.docker.oraclecorp.com\r\nHOME=/root\r\nBody\r\n{\"message\": \"hello\"}\r\n```\r\n good find again :) for these specifically, it makes sense to not let the user override, changing to Set. thanks! updated, @zootalures see https://github.com/fnproject/fn/pull/299/commits/639adf70ebaf40cc95729a48592f0d44f3bc4f99 -- a slight addition that adding any of these 'forbidden' variables in the headers will be omitted in the `FN_HEADER_` list as well (don't want them leaking in and people relying on this behavior). \r\n\r\nthis all feels exceedingly hairy still. still taking thoughts on the `FN_HEADER_` debacle, but good to go again. thanks. gonna merge then, seems this is anticipated in fdk already (thanks)\r\n\r\nstill taking thoughts on `FN_HEADER_` being inconsistent ;)  Yeah this kind of thing is mandatory for FaaS to take a big chunk of the services-on-PaaS space. IMO the right way to approach it would be to allow tools like [spinnaker](http://spinnaker.io) to orchestrate function deployments. I'd like to see this working based on versioning of routes - something like: \r\n\r\nInitially \r\n* Each route has a version - assume all versions are mutually comparable (e.g. semver - 1.2.12\r\n* there is a virtual tag (e.g. LATEST) - for the route that is the default version \r\n\r\nThat would allow semantically addressable functions by version  for a given route : \r\n(e.g. with a header) by callers: \r\ne.g. sending  a `Version: [1.2.0,1.3.0)` header on a request says  \"select the latest version  greater or equal to 1.2.0 but less than 1.3.0\" \r\n\r\nWith the default version being \"LATEST\" or similar - just the highest version on the route. \r\n\r\nWhen canarying is enabled  - change the behaviour of LATEST to offer a dynamic choice between the last accepted version and the next available version -\r\n\r\nIf you want to auto-deploy with the canary  have the canary process mark a version as OK which allows it to become the new LATEST when that version is acceptable.   You have --ignore-fn-file flag. ```\r\nfn routes update --help\r\nNAME:\r\n   fn routes update - update a route in an `app`\r\n\r\nUSAGE:\r\n   fn routes update [command options] <app> </path>\r\n\r\nOPTIONS:\r\n   --image value, -i value   image name\r\n   --memory value, -m value  memory in MiB (default: 128)\r\n   --type value, -t value    route type - sync or async\r\n   --config value, -c value  route configuration\r\n   --headers value           route response headers\r\n   --format value, -f value  hot container IO format - default or http (default: \"default\")\r\n   --timeout value           route timeout (eg. 30) (default: 30)\r\n   --idle-timeout value      route idle timeout (eg. 30) (default: 30)\r\n   --ignore-fn-file          defines whether skip func file or not\r\n```\r\nClient version: 0.3.82 Closing this.  i could think of certain values that it would be really nice to have on a per request basis, instead of every route using the same parameters:\r\n\r\n* asynchronicity\r\n* timeout\r\n\r\nothers?\r\n\r\nneither of these would not effect the 'hot' container's parameters and sync/async are run the exact same now (in this case, it would just get queued up instead of run, but when it gets ran it will be the same). +1 on this : \r\n\r\nSomething like: \r\n```\r\nGET /r/app/path HTTP/1.1\r\nfn-type: sync |async \r\nfn-timeout: 10000\r\n```\r\n\r\nI guess there is a malicious  case where a caller  drops the timeout to a very low value and causes hot containers to cycle much faster than they would otherwise. \r\n  Very first steps towards interactive lessons/tutorials https://www.katacoda.com/denismakogon/scenarios/fn-intro https://github.com/denismakogon/katacoda-scenarios @treeder can you please create the Katacoda account then i'll push what i have to the `fnproject/katacoda-tutorials` repo  there are 2 levels to this, really, that could be taken care of in one fell swoop.\r\n\r\nlevel 1: the current reserve-delete semantics are such that there exists a point in time where a task could not be run to completion or stored in the db at all and at the same time there is no message on the mq to ensure that this task runs at least once.\r\n\r\nlevel 2: the way the queues are designed we are bottlenecked on 1 queue, which ultimately will not scale for larger deployments + redis will also not work for large deployments. we need at least 1 level of sharding, and likely we want each route to have its own queue so we can do things like process hot functions on that queue really fast. we are also currently storing an entire json serialized `*models.Call` in there which is huge and message queues don't tend to do well with large things. we could probably just store the id in the mq.\r\n\r\ni.e. not only is the way that we have the queues set up insufficient, but so are our semantics around using them in fn.\r\n\r\nlevel 1, we need to store a task in the db upon receiving it (with status=queued) and then re-work when we get to delete a message for good. ultimately, it would be nice to have ran once semantics, which we should be able to do by using the db and updating the status. i can think of various ways to design this, so omitting the details.\r\n\r\nlevel 2, maybe we need to play with kafka? unfortunately, it's not ideal for timestamp based job processing like it appears we want to offer (delay / timeout based). or ya know, build our own queue.\r\n\r\nanother issue with async is that if there's some kind of error like 'image not found' right now we try to run that call forever even though we may never be able to, need to clean stuff like this up too (add to `call.Start`) This still an issue? One more thing. With the current implementation, the async call reaches `success` status just in a matter of milliseconds, but the actual execution may still be in progress. So, calls API is consistent only for sync calls (can be a source of truth, you can get an actual execution status). For async functions,  calls API can state that request was accepted, but not completed.\r\n\r\nSide note. Call object can't be a proof of execution even if sync function really makes each call can be represented as function's execution state. So, i think we need to split current calls into at least two relative APIs:\r\n - execution requests API as proof of execution acceptance\r\n - execution state API as a source of function's lifecycle state\r\n\r\nthoughts? >  the async call reaches success status just in a matter of milliseconds, but the actual execution may still be in progress. \r\n\r\ndon't think this is an accurate deduction. async call only marked as success after it executes unless there's some new bug in there. i think the follow up there describes this, but this statement itself doesn't seem accurate.\r\n\r\n>   execution requests API as proof of execution acceptance\r\n    execution state API as a source of function's lifecycle state\r\n\r\nthese don't have to be mutually exclusive. honestly any API that tracks state changes on a call is going to get us into trouble, we should really be trying to avoid it. it may be perfectly okay to say 'execution may happen at least once' for async really, and be able to avoid this completely. as far as the calls API is concerned, it's not really a scalable API for implementers to have to maintain if they don't want to run serious infra (so maybe it's just bad API design), hopefully we can look at just plopping call information into logs (like 'call queued', 'call completed', w/ info of which host did each of these) which would satisfy the request here without having to worry about maintaining some insane API.  tl;dr agent is now runner, with a hopefully saner api. at least it removes more than it adds!\r\n\r\nthe general idea is get rid of all the various 'task' structs now, change our\r\nterminology to only be 'calls' now, push a lot of the http construction of a\r\ncall into the agent, allow calls to mutate their state around their execution\r\neasily and to simplify the number of code paths, channels and context timeouts\r\nin something [hopefully] easy to understand.\r\n\r\nthis introduces the idea of 'slots' which are either hot or cold and are\r\nseparate from reserving memory (memory is denominated in 'tokens' now).\r\na 'slot' is essentially a container that is ready for execution of a call, be\r\nit hot or cold (it just means different things based on hotness). taking a\r\nlook into Submit should make these relatively easy to grok.\r\n\r\nsorry, things were pretty broken especially wrt timings. I tried to keep good\r\nnotes (maybe too good), to highlight stuff so that we don't make the same\r\nmistakes again (history repeating itself blah blah quote). even now, there is\r\nlots of work to do :)\r\n\r\nI encourage just reading the agent.go code, Submit is really simple and\r\nthere's a description of how the whole thing works at the head of the file\r\n(after TODOs). call.go contains code for constructing calls, as well as Start\r\n/ End (small atm). I did some amount of code massaging to try to make things\r\nsimple / straightforward / fit reasonable mental model, but as always am open\r\nto critique (the more negative the better) as I'm just one guy and wth do i\r\nknow...\r\n\r\n-----------------------------------------------------------------------------\r\n\r\nbelow enumerates a number of changes as briefly as possible (heh..):\r\n\r\nmodels.Call all the things\r\n\r\nremoves models.Task as models.Call is now what it previously was.\r\nmodels.FnCall is now rid of in favor of models.Call, despite the datastore\r\nonly storing a few fields of it [for now]. we should probably store entire\r\ncalls in the db, since app & route configurations can change at any given\r\nmoment, it would be nice to see the parameters of each call (costs db space,\r\nobviously).\r\n\r\nthis removes the endpoints for getting & deleting messages, we were just\r\nlooping back to localhost to call the MQ (wtf? this was for iron integration i\r\nthink) and just calls the MQ.\r\n\r\nchanges the name of the FnLog to LogStore, confusing cause there's also a\r\n`FuncLogger` which uses the Logstore (punting). removes other `Fn` prefixed\r\nstructs (redundant naming convention).\r\n\r\nremoves some unused and/or weird structs (IDStatus, CompleteTime)\r\n\r\nupdates the swagger\r\n\r\nmakes the db methods consistent to use 'Call' nomenclature.\r\n\r\nremove runner nuisances:\r\n\r\n* push down registry stuff to docker driver\r\n* remove Environment / Stats stuff of yore\r\n* remove unused writers (now in FuncLogger)\r\n* remove 2 of the task types, old hot stuff, runner, etc\r\n\r\nfixes ram available calculation on startup to not always be 300GB (helps a lot\r\non a laptop!)\r\n\r\nformat for DOCKER_AUTH env now is not a list but a map (there are no docs,\r\nwould prefer to get rid of this altogether anyway). the ~/.docker/cfg expected\r\nformat is unchanged.\r\n\r\nremoves arbitrary task queue, if a machine is out of ram we can probably just\r\ntime out without queueing... (can open separate discussion) in any case the\r\nold one didn't really account well for hot tasks, it just lined everyone up in\r\nthe task queue if there wasn't a place to run hot and then timed them out\r\n[even if a slot became free].\r\n\r\nremoves HEADER_ prefixing on any headers in the request to a invoke a call.\r\n(this was inconsistent with cli for test anyway)\r\n\r\nremoves TASK_ID header sent in to hot only (this is a dupe of FN_CALL_ID,\r\nwhich has not been removed)\r\n\r\nnow user functions can reply directly to the client. this means that for\r\ncold containers if they write to stdout it will send a 200 + headers. for\r\nhot containers, the user can reply directly to the client from the container,\r\ni.e. with its preferred status code / headers (vs. always getting a 200).\r\nthe dispatch itself is a little http specific atm, i think we can add an\r\ninterchange format but the current version is easily extended to add json for\r\nnow, separate discussion. this eliminates a lot of the request/response\r\nrewriting and buffering we were doing (yey). now Dispatch ONLY does input and\r\noutput, vs. managing the call timeout and having access to a call's fields.\r\n\r\ncache is pushed down into agent now instead of in the front end, would like to\r\npush it down to the datastore actually but it's here for now anyway. cache\r\ndelete functions removed (b/c fn is distributed anyway?). added app caching,\r\nshould help with latency.\r\n\r\nin general, a lot of server/runner.go got pushed down into the agent. i think\r\nit will be useful in testing to be able to construct calls without having to\r\ninvoke http handlers + async also needs to construct calls without a handler.\r\n\r\nsafe shutdown actually works now for everything (leaked / didn't wait on\r\ncertain things before)\r\n\r\nnow we're waiting for hot slots to open up while we're attempting to get ram\r\nto launch a container if we didn't find any hot slots to run the call in\r\nimmediately. we can change this policy really easily now (no more channel\r\njungle; still some channels). also looking for somewhere else to go while the\r\ncontainer is launching now. slots now get sent _out_ of a container, vs.\r\na container receiving calls, which makes this kind of policy easier to\r\nimplement. this fixes a number of bugs around things like trying to execute\r\ncalls against containers that have not and may never start and trying to\r\nlaunch a bazillion containers when there are no free containers. the driver api\r\nunderwent some changes to make this possible (relatively minimal, added Wait).\r\nthe easiest way to think about this is that allocating ram has moved 'up'\r\ninstead of just wrapping launching containers, so that we can select on a\r\nchannel trying to find ram.\r\n\r\nnot dispatching hot calls to containers that died anymore either...\r\n\r\nthe timeout is now started at the beginning of Submit, rather than Dispatch or\r\nthe container itself having to manage the call timeout, which was an\r\ninaccurate way of doing things since finding a slot / allocating ram / pulling\r\nimage can all take a non-trivial (timeout amount, even!) amount of time. this\r\nmakes for much more reasonable response times from fn under load, there's\r\nstill a little TODO about handling cold+timeout container removal response\r\ntimes but it's much improved.\r\n\r\nif call.Start is called with < call.timeout/2 time left, then the call will\r\nnot be executed and return a timeout. we can discuss. this makes async play\r\n_a lot_ nicer, specifically. for large timeouts / 2 makes less sense.\r\n\r\nenv is no longer getting upper cased (admittedly, this can look a little weird\r\nnow). our whole route.Config/app.Config/env/headers stuff probably deserves a\r\nwhole discussion...\r\n\r\nsync output no longer has the call id in json if there's an error / timeout.\r\nwe could add this back to signify that it's _us_ writing these but this was\r\nout of place. FN_CALL_ID is still shipped out to get the id for sync calls,\r\nand async [server] output remains unchanged.\r\n\r\nasync logs are now an entire raw http request (so that a user can write a 400\r\nor something from their hot async container)\r\n\r\nasync hot now 'just works'\r\n\r\ncold sync calls can now reply to the client before container removal, which\r\nshaves a lot of latency off of those (still eat start). still need to figure\r\nout async removal if timeout or something.\r\n\r\n-----------------------------------------------------------------------------\r\n\r\ni've located a number of bugs that were generally inherited, and also added\r\na number of TODOs in the head of the agent.go file according to robustness we\r\nprobably need to add. this is at least at parity with the previous\r\nimplementation, to my knowledge (hopefully/likely a good bit ahead). I can\r\nmemorialize these to github quickly enough, not that anybody searches before\r\nadding bugs anyway (sigh). i did a good bit of load/touch testing with this to ensure\r\nthat it basically works as expected.\r\n\r\nthe big thing to work on next imo is async being a lot more robust,\r\nspecifically to survive fn server failures / network issues.\r\n\r\nthanks for review (gulp) closes #257 #209 #188 #158 #210 #156 (mostly) #146 #78 #127 #124 #117 #107 (can actually still happen, but won't block execution [the bug]) #244 #242 #218 #205 #189 #145  @denismakogon @treeder ptal, take your time, happy to explain / discuss / change anything. i think there are various discussions we could branch off of here into separate ones about various policies, too. i will start a couple and link them here. thanks for your patience! closes #271  thanks. hopefully most bugs listed in top of agent.go file now to start chewing on :)  i realize there's some impatience but this work will be overwritten by what's in the munger branch, i'd prefer not to try to rebase that over this if possible  I prefer FN_ as it gives you a bit of namespace separation from user config env vars.  ya matches expected local env vars FN_REGISTRY and FN_TOKEN. I'm fine with FN_ for those ones too. this will break code for our current users and requires a lot of updating docs, but it's what the people want!  Closing this, because it's not happening anymore.  Should be moved to` fnproject/cli` project space, but another issue already there https://github.com/fnproject/cli/issues/12. I'm not certain how this should be fixed: better doc or enforce users to set env var or CLI flag. @denismakogon How about some sort of context configuration like in kubernetes? Default the registry to docker hub and allow users to override this to a custom registry in a different context?\r\n\r\n@treeder I'm on holiday and haven't had the chance to try with FN_REGISTRY yet, when I'm back I'll take a look. Closed via https://github.com/fnproject/cli/pull/24  +1 from me.\r\n\r\nat present, GET can shove a body in via the `?payload` query parameter. i guess the thinking is that some http clients may not have an easy way to add a body to a GET request but idk really, i'd prefer to use the body instead of a weird one off query param, too, since it is possible for GET to have a body.  i realize there's some impatience but this work will be overwritten by what's in the `munger` branch, i'd prefer not to try to rebase that over this if possible  this is trivially incorrect since glide doesn't actually provide reproducible\r\nbuilds. the idea is to build with the deps that we have checked into git, so\r\nthat we actually know what code is executing so that we might debug it...\r\n\r\nall for multi stage build instead of what we had, but adding the glide step is\r\nwrong. i added a loud warning so as to discourage this behavior in the future.\r\n\r\nthis is really urgent imo. @treeder @hibooboo2 or @denismakogon  maybe if it worked. \r\n\r\ni'm blocked on this, i have no interest in discussing dependencies for the umpteenth time.  It seems easy to check the FN_REGISTRY before building the whole image and then error'ing out...\r\n\r\nie\r\n```\r\n\u276f fn deploy myapp\r\nbumping version for /Users/chad/workspace/hello/func.yaml\r\nBumped to version 0.0.2\r\nBuilding image hello:0.0.2\r\nSending build context to Docker daemon  4.096kB\r\nStep 1/8 : FROM funcy/go:dev as build-stage\r\n ---> 4cccab7fc828\r\nStep 2/8 : WORKDIR /function\r\n ---> Using cache\r\n ---> 4ad448d63f0c\r\nStep 3/8 : ADD . /go/src/func/\r\n ---> f782cff3c238\r\nStep 4/8 : RUN cd /go/src/func/ && go build -o func\r\n ---> Running in f0cad0bc8d1e\r\n ---> 2a9ea69dcfef\r\nRemoving intermediate container f0cad0bc8d1e\r\nStep 5/8 : FROM funcy/go\r\n ---> 573e8a7edc05\r\nStep 6/8 : WORKDIR /function\r\n ---> Using cache\r\n ---> 46ab8ac97bb2\r\nStep 7/8 : COPY --from=build-stage /go/src/func/func /function/\r\n ---> 284371622b1f\r\nStep 8/8 : ENTRYPOINT ./func\r\n ---> Running in 6c8a83ae8bd5\r\n ---> 598584558b5e\r\nRemoving intermediate container 6c8a83ae8bd5\r\nSuccessfully built 598584558b5e\r\nSuccessfully tagged hello:0.0.2\r\nerror: image name must have an owner and name, eg: username/myfunc. Be sure to set FN_REGISTRY env var or pass in --registry.\r\n```\r\n\r\n ya not a big deal. probably uncommon but as a standard practice we should check for these types of errors before building/tagging etc, where possible.\r\n  linking to #210 as this is taken care of now (though we may need to make the error show up nicely, rather than 500)   LGTM I've just noticed that the files in langs/ in https://github.com/fnproject/cli are out of date compared to the ones that were in the fn repo before the deletion was merged.\r\n\r\n(e.g. the changes in #238 are missing there)  Since I'm a Rust fan, in my spare time I'm contributing to the Rust build runtime for fn. :)\r\n\r\nThis change fixes the current build runtime (which is currently broken as funcy/rust:dev does not exist) and uses the official Rust image (which now exists on DockerHub), plus it generates boilerplate for a basic Cargo project. Sure, I'll move the PR. Um, I don't appear to have push access to https://github.com/fnproject/cli yet. I'll move the PR later. Now on https://github.com/fnproject/cli/pull/3  Running with a local docker container of fn, I'm seeing the number of (hot, so http-format) containers grow without bound; these don't ever appear to be cleaned up.\r\n\r\nPossibly relatedly, there's no evidence that any container is reused - rather, a new one is spawned for each request; my hunch is that it's this that's getting in the way of the cleanup. Are hot containers not being marked idle correctly?\r\n\r\n(Confirmed this with docker image 7958160dcb6f, from a couple of hours ago.) linking with #210 \r\n\r\nafaict _some_ hot functions are being re-used and time out properly (have seen this myself, soon we can affirm with in repo tests ;), but I can think of cases where this may not necessarily be the case.\r\n\r\nright now if there are no free hot containers we spawn a new one immediately, so this can cause an uptick during traffic spikes or... other... cases.\r\n\r\nopen ended cases I can think of:\r\n\r\n* is idle_timeout set to 0?\r\n* is the hot container set up to consume input / send output? if the input of the first never gets consumed then the container will hang in `io.Copy` forever (timeout be damned, this is a bug)\r\n\r\nthe latter is something we need to fix. not ruling out that it could be the case as it's kind of on the user atm (need to fix that, too). i know that in the former case we rewrite idle_timeout to 30s so this shouldn't be what's happening (thus, cleanup shouldn't be prevented due to lack of idle_timeout).\r\n\r\n@jan-g we could try to run with that docker image but it would be great if you could post your:\r\n\r\n* `func.yaml`\r\n* `Dockerfile` / code file(s)\r\n* api call(s) to get this behavior\r\n\r\nso that we could debug exactly what you are seeing. perhaps one of the above cases sticks out, there could be something else going on too though.\r\n\r\nwrt @denismakogon async doesn't plumb certain values needed for hot, this is known #205 -- not sure if related to @jan-g issue, sync/async context not provided. \n    \nWill supply links tomorrow (on the phone at the mo). I've a simple shell-based image that consumes http-framed input and puts out responses with a correct content-length; it's about as minimal a test case as i can manage.\n\"Fn call\" and/or curl both produce correct output; however the container never seems to he marked as idle.\nAlso seen this with hot functions on jfaas: the code path is more complex but the behaviour as far as an external observer is concerned looks identical.\n\n\n--\u00a0Excuse typos. Phone screens don't make great ketbroads.\u00a0\n\n-------- Original message --------\nFrom: Reed Allman <notifications@github.com> \nDate: 23/08/2017  3:44 p.m.  (GMT+00:00) \nTo: fnproject/fn <fn@noreply.github.com> \nCc: jan-g <jang@ioctl.org>, Mention <mention@noreply.github.com> \nSubject: Re: [fnproject/fn] Hot functions look like they aren't (a) being\r&nbsp; reused, (b) timing out (#248) \n\nlinking with #210\nafaict some hot functions are being re-used and time out properly (have seen this myself, soon we can affirm with in repo tests ;), but I can think of cases where this may not necessarily be the case.\nright now if there are no free hot containers we spawn a new one immediately, so this can cause an uptick during traffic spikes or... other... cases.\nopen ended cases I can think of:\n\nis idle_timeout set to 0?\nis the hot container set up to consume input / send output? if the input of the first never gets consumed then the container will hang in io.Copy forever (timeout be damned, this is a bug)\n\nthe latter is something we need to fix. not ruling out that it could be the case as it's kind of on the user atm (need to fix that, too). i know that in the former case we rewrite idle_timeout to 30s so this shouldn't be what's happening (thus, cleanup shouldn't be prevented due to lack of idle_timeout).\n@jan-g we could try to run with that docker image but it would be great if you could post your:\n\nfunc.yaml\nDockerfile / code file(s)\napi call(s) to get this behavior\n\nso that we could debug exactly what you are seeing. perhaps one of the above cases sticks out, there could be something else going on too though.\nwrt @denismakogon async doesn't plumb certain values needed for hot, this is known #205 -- not sure if related to @jan-g issue, sync/async context not provided.\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n  \n  \n\n\n\n\n{\"api_version\":\"1.0\",\"publisher\":{\"api_key\":\"05dde50f1d1a384dd78767c55493e4bb\",\"name\":\"GitHub\"},\"entity\":{\"external_key\":\"github/fnproject/fn\",\"title\":\"fnproject/fn\",\"subtitle\":\"GitHub repository\",\"main_image_url\":\"https://cloud.githubusercontent.com/assets/143418/17495839/a5054eac-5d88-11e6-95fc-7290892c7bb5.png\",\"avatar_image_url\":\"https://cloud.githubusercontent.com/assets/143418/15842166/7c72db34-2c0b-11e6-9aed-b52498112777.png\",\"action\":{\"name\":\"Open in GitHub\",\"url\":\"https://github.com/fnproject/fn\"}},\"updates\":{\"snippets\":[{\"icon\":\"PERSON\",\"message\":\"@rdallman in #248: linking with #210 \\r\\n\\r\\nafaict _some_ hot functions are being re-used and time out properly (have seen this myself, soon we can affirm with in repo tests ;), but I can think of cases where this may not necessarily be the case.\\r\\n\\r\\nright now if there are no free hot containers we spawn a new one immediately, so this can cause an uptick during traffic spikes or... other... cases.\\r\\n\\r\\nopen ended cases I can think of:\\r\\n\\r\\n* is idle_timeout set to 0?\\r\\n* is the hot container set up to consume input / send output? if the input of the first never gets consumed then the container will hang in `io.Copy` forever (timeout be damned, this is a bug)\\r\\n\\r\\nthe latter is something we need to fix. not ruling out that it could be the case as it's kind of on the user atm (need to fix that, too). i know that in the former case we rewrite idle_timeout to 30s so this shouldn't be what's happening (thus, cleanup shouldn't be prevented due to lack of idle_timeout).\\r\\n\\r\\n@jan-g we could try to run with that docker image but it would be great if you could post your:\\r\\n\\r\\n* `func.yaml`\\r\\n* `Dockerfile` / code file(s)\\r\\n* api call(s) to get this behavior\\r\\n\\r\\nso that we could debug exactly what you are seeing. perhaps one of the above cases sticks out, there could be something else going on too though.\\r\\n\\r\\nwrt @denismakogon async doesn't plumb certain values needed for hot, this is known #205 -- not sure if related to @jan-g issue, sync/async context not provided.\"}],\"action\":{\"name\":\"View Issue\",\"url\":\"https://github.com/fnproject/fn/issues/248#issuecomment-324357858\"}}} \n    \nThat's almost certainly it; both runtimes I'm looking at use a blocking read (the assumption being that fn would either supply data or shut down the function).\nIs there some supplied value (env var maybe) i should use to time these out? TBH the behaviour you describe is a bit surprising.\nThis also doesn't explain why my hot functions that *do* return output only appear to get called once. Do i have to respond with the result them immediately with an HTTP 500?!\n\n--\u00a0Excuse typos. Phone screens don't make great ketbroads.\u00a0\n\n-------- Original message --------\nFrom: Denis Makogon <notifications@github.com> \nDate: 24/08/2017  8:49 a.m.  (GMT+00:00) \nTo: fnproject/fn <fn@noreply.github.com> \nCc: jan-g <jang@ioctl.org>, Mention <mention@noreply.github.com> \nSubject: Re: [fnproject/fn] Hot functions look like they aren't (a) being\r&nbsp; reused, (b) timing out (#248) \n\n@rdallman there's what i have:\n\nhot function\nit's initial configuration\nit's sync\n\nfn routes i votes /vote-hot\n{\n\t\"format\": \"http\",\n\t\"idle_timeout\": 30,\n\t\"image\": \"denismakogon/votetask-hot:0.0.14\",\n\t\"memory\": 128,\n\t\"path\": \"/vote-hot\",\n\t\"timeout\": 60,\n\t\"type\": \"sync\"\n}\n\n\nWhen submitting POST request to FN server to run this func logs shows following lines:\ntime=\"2017-08-24T10:35:39+03:00\" level=debug msg=\"Finding route on datastore\" action=\"server.handleRunnerRequest)-fm\" app=votes call_id=01BR9JP0FG07WG200000000000 path=\"/vote-hot\" route=\"/vote-hot\" \ntime=\"2017-08-24T10:35:39+03:00\" level=debug msg=\"Got route from datastore\" action=\"server.handleRunnerRequest)-fm\" app=votes call_id=01BR9JP0FG07WG200000000000 image=\"denismakogon/votetask-hot:0.0.14\" path=\"/vote-hot\" route=\"/vote-hot\" \ntime=\"2017-08-24T10:35:39+03:00\" level=debug msg=\"Starting container execution\" container=task-1503560139250467341-01BR9JP0FG07WG200000000000 \ntime=\"2017-08-24T10:35:39+03:00\" level=info msg=\"{\"pg_db\": \"votes\", \"vote_id\": \"12e2b68e07ed02d\", \"pg_host\": \"172.17.0.4\", \"vote\": \"cats\", \"pg_port\": \"5432\", \"pg_user\": \"postgres\", \"pg_pswd\": \"postgres\"}\n\" action=\"server.handleRunnerRequest)-fm\" app=votes app_name=votes call_id=01BR9JP0FG07WG200000000000 image=\"denismakogon/votetask-hot:0.0.14\" path=\"/vote-hot\" route=\"/vote-hot\" user_log=true \n\nWhich is totally OK, but hot func container is not suspended at the end of idle timeout and fn server shows following error:\ntime=\"2017-08-24T10:37:39+03:00\" level=error msg=\"error streaming docker stats for task\" call_id=01BR9JP0FG07WG200000000000 container=task-1503560139250467341-01BR9JP0FG07WG200000000000 error=\"net/http: request canceled (Client.Timeout exceeded while reading body)\" \n\nSo, here's my assumption, example that we have for hot function (that works for sure) sends to STDOUT HTTP 500 if no data supplied. And then function container gets suspended at the end of idle timeout. But my func sends nothing to STDOUT if no data supplied via STDIN and that makes hot path break apart.\nDocker says that container still up and running:\ndocker ps -a\nCONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS              PORTS                    NAMES\nf42e274a9540        denismakogon/votetask-hot:0.0.14   \"./func\"                 8 minutes ago       Up 8 minutes                                 task-1503560139250467341-01BR9JP0FG07WG200000000000\n\nIt appears that hot path fails if container send responses to stdout ONLY when user sends a request. And does not fail if container sends HTTP 500 (see example) when nothing being sent to STDIN.\ncc @jan-g\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n  \n  \n\n\n\n\n{\"api_version\":\"1.0\",\"publisher\":{\"api_key\":\"05dde50f1d1a384dd78767c55493e4bb\",\"name\":\"GitHub\"},\"entity\":{\"external_key\":\"github/fnproject/fn\",\"title\":\"fnproject/fn\",\"subtitle\":\"GitHub repository\",\"main_image_url\":\"https://cloud.githubusercontent.com/assets/143418/17495839/a5054eac-5d88-11e6-95fc-7290892c7bb5.png\",\"avatar_image_url\":\"https://cloud.githubusercontent.com/assets/143418/15842166/7c72db34-2c0b-11e6-9aed-b52498112777.png\",\"action\":{\"name\":\"Open in GitHub\",\"url\":\"https://github.com/fnproject/fn\"}},\"updates\":{\"snippets\":[{\"icon\":\"PERSON\",\"message\":\"@denismakogon in #248: @rdallman there's what i have:\\r\\n- [hot function](https://github.com/denismakogon/voteapp/blob/master/votetaskhot/func.go)\\r\\n- [it's initial configuration](https://github.com/denismakogon/voteapp/blob/master/votetaskhot/func.yaml)\\r\\n- it's sync\\r\\n```\\r\\nfn routes i votes /vote-hot\\r\\n{\\r\\n\\t\\\"format\\\": \\\"http\\\",\\r\\n\\t\\\"idle_timeout\\\": 30,\\r\\n\\t\\\"image\\\": \\\"denismakogon/votetask-hot:0.0.14\\\",\\r\\n\\t\\\"memory\\\": 128,\\r\\n\\t\\\"path\\\": \\\"/vote-hot\\\",\\r\\n\\t\\\"timeout\\\": 60,\\r\\n\\t\\\"type\\\": \\\"sync\\\"\\r\\n}\\r\\n\\r\\n```\\r\\nWhen submitting POST request to FN server to run this func logs shows following lines:\\r\\n```\\r\\ntime=\\\"2017-08-24T10:35:39+03:00\\\" level=debug msg=\\\"Finding route on datastore\\\" action=\\\"server.handleRunnerRequest)-fm\\\" app=votes call_id=01BR9JP0FG07WG200000000000 path=\\\"/vote-hot\\\" route=\\\"/vote-hot\\\" \\r\\ntime=\\\"2017-08-24T10:35:39+03:00\\\" level=debug msg=\\\"Got route from datastore\\\" action=\\\"server.handleRunnerRequest)-fm\\\" app=votes call_id=01BR9JP0FG07WG200000000000 image=\\\"denismakogon/votetask-hot:0.0.14\\\" path=\\\"/vote-hot\\\" route=\\\"/vote-hot\\\" \\r\\ntime=\\\"2017-08-24T10:35:39+03:00\\\" level=debug msg=\\\"Starting container execution\\\" container=task-1503560139250467341-01BR9JP0FG07WG200000000000 \\r\\ntime=\\\"2017-08-24T10:35:39+03:00\\\" level=info msg=\\\"{\\\"pg_db\\\": \\\"votes\\\", \\\"vote_id\\\": \\\"12e2b68e07ed02d\\\", \\\"pg_host\\\": \\\"172.17.0.4\\\", \\\"vote\\\": \\\"cats\\\", \\\"pg_port\\\": \\\"5432\\\", \\\"pg_user\\\": \\\"postgres\\\", \\\"pg_pswd\\\": \\\"postgres\\\"}\\r\\n\\\" action=\\\"server.handleRunnerRequest)-fm\\\" app=votes app_name=votes call_id=01BR9JP0FG07WG200000000000 image=\\\"denismakogon/votetask-hot:0.0.14\\\" path=\\\"/vote-hot\\\" route=\\\"/vote-hot\\\" user_log=true \\r\\n```\\r\\nWhich is totally OK, but hot func container is not suspended at the end of idle timeout and fn server shows following error:\\r\\n```\\r\\ntime=\\\"2017-08-24T10:37:39+03:00\\\" level=error msg=\\\"error streaming docker stats for task\\\" call_id=01BR9JP0FG07WG200000000000 container=task-1503560139250467341-01BR9JP0FG07WG200000000000 error=\\\"net/http: request canceled (Client.Timeout exceeded while reading body)\\\" \\r\\n```\\r\\nSo, here's my assumption, [example](https://github.com/fnproject/fn/blob/master/examples/tutorial/hotfunctions/http/func.go) that we have for hot function (that works for sure) sends to STDOUT HTTP 500 if no data supplied. And then function container gets suspended at the end of idle timeout. But my func sends nothing to STDOUT if no data supplied via STDIN and that makes hot path break apart.\\r\\n\\r\\nDocker says that container still up and running:\\r\\n```\\r\\ndocker ps -a\\r\\nCONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS              PORTS                    NAMES\\r\\nf42e274a9540        denismakogon/votetask-hot:0.0.14   \\\"./func\\\"                 8 minutes ago       Up 8 minutes                                 task-1503560139250467341-01BR9JP0FG07WG200000000000\\r\\n```\\r\\n\\r\\nIt appears that hot path fails if container send responses to stdout **ONLY** when user sends a request. And does not fail if container sends HTTP 500 (see [example](https://github.com/fnproject/fn/blob/master/examples/tutorial/hotfunctions/http/func.go)) when nothing being sent to STDIN.\\r\\n\\r\\n\\r\\ncc @jan-g \"}],\"action\":{\"name\":\"View Issue\",\"url\":\"https://github.com/fnproject/fn/issues/248#issuecomment-324560514\"}}} again, ```time=\"2017-08-24T10:37:39+03:00\" level=error msg=\"error streaming docker stats for task\" call_id=01BR9JP0FG07WG200000000000 container=task-1503560139250467341-01BR9JP0FG07WG200000000000 error=\"net/http: request canceled (Client.Timeout exceeded while reading body)\" ``` is basically expected upon task completion (shut down the stats stream, forcefully), there's no reason to reference this. it was worthwhile to have when figuring out why tasks didn't have stats but now it's causing all sorts of made up bugs so maybe it's not worth it to log anymore.\r\n\r\n> But my func sends nothing to STDOUT if no data supplied via STDIN and that makes hot path break apart.\r\n\r\nyes, exactly. if the container doesn't actually write anything out it blocks forever. we just need a context based `io.Copy` to catch this I think, but in general users will have to at least write headers back otherwise we have no clue that the task finished and will just wait for output until the timeout (not sure how to get around this). the STDIN with empty body should be taken care of by consuming headers and having 0 `Content-Length`.\r\n\r\n>  Do i have to respond with the result them immediately with an HTTP 500?!\r\n\r\nI don't think immediacy is necessary. will at least have to give headers at some point (before timeout). the dispatch code is definitely not perfect atm, it's getting it's hair and make up done at the moment though. > This actually is not true, user should not supply anything to let fn know that task is finished, http request in STDOUT means that task is finished. I tend to agree about io.Copy needs a idle timeout based context. \r\n\r\nwhat is not true? we seem to agree that the user has to write an http request to STDOUT or we need to timeout.\r\n\r\n> Timeout actually never happens, got container that runs already for 5-6 hours where timeout is 30s and idle timeout is 30s.\r\n\r\nmaybe this is just a superfluous reply but yes, this is the current behavior, due to the lack of io.Copy w/ ctx, as noted. did I miss something?\r\n\r\n> This should be changed IMO. Or at least should be protocol-bound thing only.\r\n\r\nsure. it's the same for any other format though. if they don't write anything we can't know that it's done, or we timeout. \r\n\r\n> Do i have to respond with the result them immediately with an HTTP 500?!\r\n\r\nthis is an errant question in quoting the parent comment?\r\n\r\ni'm not sure i follow what exactly the issue that is being outlined now as it pertains to any of my previous acknowledgements of any bug(s). is there some misunderstanding here? some clear definition of what outside of the scope of the outlined current acknowledged bugs would be appreciated. as it stands I have:\r\n\r\n* if a task does not consume or send any input / output, the container will hang forever.\r\n* if a task writes a 500, the user will receive a 200.\r\n\r\nboth of these are being worked on. if there is something else to add to this, let me know. \n    \nOne more bullet point to add to that, which is the original problem :\n- when a task responds with an http response (status line, content-length and content) it is never reused or timed out.\n\n\n--\u00a0Excuse typos. Phone screens don't make great ketbroads.\u00a0\n\n-------- Original message --------\nFrom: Reed Allman <notifications@github.com> \nDate: 24/08/2017  11:13 p.m.  (GMT+00:00) \nTo: fnproject/fn <fn@noreply.github.com> \nCc: jan-g <jang@ioctl.org>, Mention <mention@noreply.github.com> \nSubject: Re: [fnproject/fn] Hot functions look like they aren't (a) being\r&nbsp; reused, (b) timing out (#248) \n\n\nThis actually is not true, user should not supply anything to let fn know that task is finished, http request in STDOUT means that task is finished. I tend to agree about io.Copy needs a idle timeout based context.\n\nwhat is not true? we seem to agree that the user has to write an http request to STDOUT or we need to timeout.\n\nTimeout actually never happens, got container that runs already for 5-6 hours where timeout is 30s and idle timeout is 30s.\n\nmaybe this is just a superfluous reply but yes, this is the current behavior, due to the lack of io.Copy, as noted. did I miss something?\n\nThis should be changed IMO. Or at least should be protocol-bound thing only.\n\nsure. it's the same for any other format though. if they don't write anything we can't know that it's done, or we timeout.\n\nDo i have to respond with the result them immediately with an HTTP 500?!\n\nhuh? no, just have to respond before the timeout. right now responding 500 results in a 200, which is confusing, which is acknowledged and being fixed. but i don't understand this issue of immediacy if someone could outline it for me.\ni'm not sure i follow what exactly the issue that is being outlined now as it pertains to any of my previous acknowledgements of any bug(s). is there some misunderstanding here? some clear definition of what outside of the scope of the outlined current acknowledged bugs would be appreciated. as it stands I have:\n\nif a task does not consume or send any input / output, the container will hang forever.\nif a task writes a 500, the user will receive a 200.\n\nboth of these are being worked on. if there is something useful to add, please do so, otherwise I don't think this warrants any further discussion and lack of replies would be appreciated to avoid further confusion.\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n  \n  \n\n\n\n\n{\"api_version\":\"1.0\",\"publisher\":{\"api_key\":\"05dde50f1d1a384dd78767c55493e4bb\",\"name\":\"GitHub\"},\"entity\":{\"external_key\":\"github/fnproject/fn\",\"title\":\"fnproject/fn\",\"subtitle\":\"GitHub repository\",\"main_image_url\":\"https://cloud.githubusercontent.com/assets/143418/17495839/a5054eac-5d88-11e6-95fc-7290892c7bb5.png\",\"avatar_image_url\":\"https://cloud.githubusercontent.com/assets/143418/15842166/7c72db34-2c0b-11e6-9aed-b52498112777.png\",\"action\":{\"name\":\"Open in GitHub\",\"url\":\"https://github.com/fnproject/fn\"}},\"updates\":{\"snippets\":[{\"icon\":\"PERSON\",\"message\":\"@rdallman in #248: \\u003e This actually is not true, user should not supply anything to let fn know that task is finished, http request in STDOUT means that task is finished. I tend to agree about io.Copy needs a idle timeout based context. \\r\\n\\r\\nwhat is not true? we seem to agree that the user has to write an http request to STDOUT or we need to timeout.\\r\\n\\r\\n\\u003e Timeout actually never happens, got container that runs already for 5-6 hours where timeout is 30s and idle timeout is 30s.\\r\\n\\r\\nmaybe this is just a superfluous reply but yes, this is the current behavior, due to the lack of io.Copy, as noted. did I miss something?\\r\\n\\r\\n\\u003e This should be changed IMO. Or at least should be protocol-bound thing only.\\r\\n\\r\\nsure. it's the same for any other format though. if they don't write anything we can't know that it's done, or we timeout. \\r\\n\\r\\n\\u003e Do i have to respond with the result them immediately with an HTTP 500?!\\r\\n\\r\\nhuh? no, just have to respond before the timeout. right now responding 500 results in a 200, which is confusing, which is acknowledged and being fixed. but i don't understand this issue of immediacy if someone could outline it for me.\\r\\n\\r\\ni'm not sure i follow what exactly the issue that is being outlined now as it pertains to any of my previous acknowledgements of any bug(s). is there some misunderstanding here? some clear definition of what outside of the scope of the outlined current acknowledged bugs would be appreciated. as it stands I have:\\r\\n\\r\\n* if a task does not consume or send any input / output, the container will hang forever.\\r\\n* if a task writes a 500, the user will receive a 200.\\r\\n\\r\\nboth of these are being worked on. if there is something useful to add, please do so, otherwise I don't think this warrants any further discussion and lack of replies would be appreciated to avoid further confusion.\"}],\"action\":{\"name\":\"View Issue\",\"url\":\"https://github.com/fnproject/fn/issues/248#issuecomment-324771899\"}}} weird one. thanks. i repro'd, must be from recent change. this seems like the normal path for hot is broken, not the edge cases we seemed to be digging into. map iteration being random does the trick. fixing... thanks for bug  This is the gist of how I want to filter out closure calls that don't originate from the completer, (and also auto-configure the completer endpoint on all calls to functions where the completer has been enabled) \r\n\r\nThe behaviour should be : \r\n\r\n* No FNPROJECT_THREADID header : not a closure call, invoke function normally, don't check token \r\n* Has FNPROJECT_THREADID header :  closure call, make sure that FNPROJECT_COMPLETER_TOKEN matches configured token, reject if it doesn't invoke function if it does. \r\n\r\nI was thinking to make the completer optional globally in fn  (depending on whether it's configured in the fn server env) - especially for local dev. \r\n\r\nI was also thinking about making the completer optional in function config and requiring config to be enabled  (although it might make more sense to turn it on all the time) \r\n\r\n\r\nAt the moment this is using a shared key between completer and fn but I might make this use some sort of rudimentary signature (possibly time-based) to reduce some of the risks of the headers becoming visible. \r\n\r\nI ended up adding a new listener around task start - the Runner listener would only have a partial view of the config  even after changing when it ran (no app config)  > I ended up adding a new listener around task start - the Runner listener would only have a partial view of the config even after changing when it ran (no app config)\r\n\r\nam game to modifying the old (Runner listener) or replacing it with the new. these are eerily similar. i don't think anybody is actually hooked in on the `BeforeDispatch` or `AfterDispatch` hooks at present so we can modify these to what we need.\r\n\r\nam good with having some kind of idea of 'core' integrations that we bake in always. structure wise, maybe we have a `hooks` package or something analogous. I am not sure if it's more desirable to have the completer code in the completer repo and then to just import it here (up to you). @treeder  What's the argument not to include this? - I'm not super fond of having to tell people to re-compile to make this work\r\n\r\n\r\n I guess for me there are two parts:   \r\n\r\n1) For setting the completer URL having this by default removes complexity of having to do this in  function config  for each function \r\n\r\n (perhaps this could be a fn-wide option to always inject a specified environment var into all functions?)   - this is contextual service discovery :  \"the completer\" for \"this fn\" \r\n\r\n2) For Auth I'd really like to get this (or something like this) in by default -  In principal we could skip this but it puts us in a precarious position generally \"why didn't you make this secure?\"  if say a user made fn publically available -\r\n\r\nThe completer operates by injecting code /executable content (especially in the case of java serialization) into the function, preventing this from arriving over the general ingress by default is my goal. \r\n\r\nI think RunnerListener should go/be replaced by this  - all it can do now is change the app name and path of an incoming request anyway. \r\n\r\n\r\n i think the general idea with hooks is that, yea, somebody wants to add their own specific hooks that nobody else needs and run their own functions and they can compile a separate binary and do that (as suggested).\r\n\r\nwith this yea it seems like we'll have this in every `fn` deployment is the idea and it so happens to be simple enough to pull in via the hook interfaces vs. having to plumb in to the runner code. it makes sense to me.\r\n\r\nimo, the code in `api/completer/` can probably go in the completer repo and we just import it, and we can have some kind of `hooks/default.go` file that imports these and add them to the server by default (or perhaps `hooks/completer` if that makes more sense). but, that's just what i'm thinking. open to idears. Will come back to this later  look at very bottom..... it's weird.\r\n\r\n```\r\n\u276f fn init\r\nError occurred: ERROR: Missing required arguments: <DOCKERHUB_USERNAME/FUNCTION_NAME>\r\n\r\nNAME:\r\n   fn init - create a local func.yaml file\r\n\r\nUSAGE:\r\n   fn init [command options] <DOCKERHUB_USERNAME/FUNCTION_NAME>\r\n\r\nDESCRIPTION:\r\n   Creates a func.yaml file in the current directory.\r\n\r\nOPTIONS:\r\n   --force                   overwrite existing func.yaml\r\n   --runtime value           choose an existing runtime - .js, .rb, .py, .rs, .java, .go, .php, .cs, .fs\r\n   --entrypoint value        entrypoint is the command to run to start this function - equivalent to Dockerfile ENTRYPOINT.\r\n   --version value           function version (default: \"0.0.1\")\r\n   --image value, -i value   image name\r\n   --memory value, -m value  memory in MiB (default: 128)\r\n   --type value, -t value    route type - sync or async\r\n   --config value, -c value  route configuration\r\n   --headers value           route response headers\r\n   --format value, -f value  hot container IO format - default or http (default: \"default\")\r\n   --timeout value           route timeout (eg. 30s) (default: 30s)\r\n   --idle-timeout value      route idle timeout (eg. 30s) (default: 30s)\r\n   --help, -h                show help\r\n\r\n, exiting...\r\n``` in fact the CLI output now for errors is worse. here's another one that is not written for humans:\r\n\r\n```\r\n\u276f fn routes l myapp\r\nError occurred: error: App not found, exiting...\r\n```\r\n\r\nThis should be: `Error occurred: App not found.` or something like that.\r\n\r\nor simply: `Error: App not found.`\r\n\r\nor even better IMO: `App not found` @treeder think it's fixed. will open other tickets if wonky output.\r\n\r\nThanks!  was updated recently to include FN_REGISTRY and `fn init` with no arguments... but this isn't working. get the following:\r\n\r\n```\r\n\u276f fn init\r\nError occurred: ERROR: Missing required arguments: <DOCKERHUB_USERNAME/FUNCTION_NAME>\r\n```\r\n\r\n @treeder I had the latest release from here: https://github.com/fnproject/cli/releases/tag/0.3.63\r\n\r\ncan we cut a new release with that code in? Currently the main README is broken... it's fixed on a *super* old version of the CLI (0.3.26, 37 versions back from latest release) and the `fn init` doesn't work even on the latest release (which is 0.3.63) @treeder just mentioned he's moving the CLI so standing by on this one...... Fixed.  maybe we should just avoid the `strings.ToUpper` call and leave the casing (users can provide upper case if they are anal retentive)  i think we should stop prefixing with `HEADER_` \r\n\r\n(thanks for bringing this up) collide with what? if the provided request header overrides a 'route' or 'app' configured env var I don't see a problem with that (precedence..)  was talking to @treeder about this and want to use the same code that we use in `fn` to run things, really. then if we add other drivers it will just fall out, too (and maybe hot would be easier and such) e.g. right now it would be `runner.Run(task)`\r\n\r\nhopefully this is easier soon-ish.  Should this be closed since we are removing cli from the repo?   and coincidentally func.yaml\r\n\r\nassuming user does not want language magic, they can just BYOD (bring your own docker), but the runtime isnt' an option yet... it needs to be blank, and I think even gets set to blank with fn init.\r\n\r\ninstead of:\r\n```\r\nname: hello\r\nversion: 0.0.1\r\nruntime: \"\"\r\npath: /hello\r\n```\r\n\r\nthis is much cleaner:\r\n```\r\nname: hello\r\nversion: 0.0.1\r\nruntime: docker\r\npath: /hello\r\n```\r\n\r\nAlso `fn init` will detect a Dockerfile as well (think it already does this)\r\n\r\n In my case it's my own Dockerfile. If the image already exists somewhere, you can just use Dockerfile with one line `FROM <that_image>` then runtime stays true (doesn't become an image name)\r\n\r\n When there is a Dockerfile,  the \"runtime\" will be enforced to \"docker\"; if \"docker\" runtime is set in func file and no Dockerfile an error.  I'v posted the initial code change for this in PR https://github.com/fnproject/cli/pull/11\r\n\r\nIf only image file specified on command line and no Dockerfile, it seems to me the existing behavior is proper so no change on that. \r\n code change committed https://github.com/fnproject/cli/commit/e93690630d7b6e70608ea13d7bb38fd3dd6bd7c4  1. rewrites ambiguous timeouts to nanoseconds... `timeout: 120` turns into `timeout: 120ns` after deploy. Probably not what I intended.. :)\r\n\r\n2. `timeout: 120s` turns into `timeout: 2m0s` after deploy. also sorta lame.\r\n\r\n works for me. at least don't rewrite it from one format to another.  yea, need to not call `SetDefaults` imo in update* ok. i don't see any of the tests using PATCH method, want to add a few (or did I miss them?) LGTM @rdallman Has to re review though. yay more tests. some nits. overall this seems an improvement. def need to remove the global. i would say that it seems really weird that we are checking which http method we're in the context of in 3 different places still (now?) and we might want to reduce that but not the end of the world. alright, let's do it.   when the Fn server can't be found, this is the response from the CLI.. it's ugly and tells me nothing.\r\n\r\n```\r\n\u276f fn apps l\r\nunexpected error: &{<nil>} (*models.Error) is not supported by the TextConsumer, can be resolved by supporting TextUnmarshaler interface\r\n``` #112 #105 dupe (swagger, maybe) fixed.  see following series of commands:\r\n\r\nstarts as async, then I do an fn routes config set, then it turns sync (even though the func.yaml is set to async)\r\n\r\n```\r\n~/workspace/vista/services/alert master* \u21e3\r\n\u276f fn routes i myapp alert\r\n{\r\n\t\"config\": {\r\n\t\t\"TWITTER_CONF_KEY\": \"Vwa33XdN7ShfHgE05EPXB117D\",\r\n\t\t\"TWITTER_CONF_SECRET\": \"dfgWNpJVi6uK81OMD79vYTSKfG1tKyE7UyM6ztiR2mwoKLQ7PF\",\r\n\t\t\"TWITTER_TOKEN_KEY\": \"883135165396008960-sIALgu508TRNbxyOqmfutYQpwivHM36\",\r\n\t\t\"TWITTER_TOKEN_SECRET\": \"R4cBgUvAJjIc7OCx4hSfEV3iZUIrDdUrAewYGSV1Dds4N\"\r\n\t},\r\n\t\"format\": \"default\",\r\n\t\"idle_timeout\": 30,\r\n\t\"image\": \"carimura/alert:0.0.14\",\r\n\t\"memory\": 128,\r\n\t\"path\": \"/alert\",\r\n\t\"timeout\": 30,\r\n\t\"type\": \"async\"\r\n}\r\n\r\n~/workspace/vista/services/alert master* \u21e3\r\n\u276f fn routes config set myapp /alert TWITTER_CONF_KEY Vwa33XdN7ShfHgE05EPXB117\r\nmyapp /alert updated TWITTER_CONF_KEY with Vwa33XdN7ShfHgE05EPXB117\r\n\r\n~/workspace/vista/services/alert master* \u21e3\r\n\u276f fn routes i myapp alert\r\n{\r\n\t\"config\": {\r\n\t\t\"TWITTER_CONF_KEY\": \"Vwa33XdN7ShfHgE05EPXB117\",\r\n\t\t\"TWITTER_CONF_SECRET\": \"dfgWNpJVi6uK81OMD79vYTSKfG1tKyE7UyM6ztiR2mwoKLQ7PF\",\r\n\t\t\"TWITTER_TOKEN_KEY\": \"883135165396008960-sIALgu508TRNbxyOqmfutYQpwivHM36\",\r\n\t\t\"TWITTER_TOKEN_SECRET\": \"R4cBgUvAJjIc7OCx4hSfEV3iZUIrDdUrAewYGSV1Dds4N\"\r\n\t},\r\n\t\"format\": \"default\",\r\n\t\"idle_timeout\": 30,\r\n\t\"image\": \"carimura/alert:0.0.14\",\r\n\t\"memory\": 128,\r\n\t\"path\": \"/alert\",\r\n\t\"timeout\": 30,\r\n\t\"type\": \"sync\"\r\n}\r\n\r\n~/workspace/vista/services/alert master* \u21e3\r\n\u276f cat func.yaml\r\nname: carimura/alert\r\nversion: 0.0.14\r\nruntime: \"\"\r\ntype: async\r\npath: /alert\r\n```  so that the CLI can take care of bumping major version rather than manual edit of func.yaml  Since func.yaml is checked in, one thing that confuses me is the way it handles the dockerid. For example, what if a developer wants to push the func to their own docker registry account, or a dev account? They would need to change the \"name\" in the func.yaml which then risks getting checked into VCS.\r\n\r\nI'm thinking there should be a way to separate the registry from the func.yaml, maybe like kubectl handles contexts? (kubectl config set-context .....)\r\n\r\n\r\n\r\n Here is the cheesiest possible way to fix this.\r\n\r\n    find . -name func.yaml -exec perl -pi.bak -e \"s/carimura/<yourdockerid>/g\" {} \\; -print This seems reasonable.  +1  ```\r\n\u276f fn start\r\nmount: permission denied (are you root?)\r\nCould not mount /sys/kernel/security.\r\nAppArmor detection and --privileged mode might break.\r\nmount: permission denied (are you root?)\r\n\r\ntime=\"2017-08-14T18:11:34Z\" level=info msg=\"datastore dialed\" datastore=sqlite3 max_idle_connections=256\r\n\r\n      ______\r\n     / ____/___\r\n    / /_  / __ \\\r\n   / __/ / / / /\r\n  /_/   /_/ /_/\r\n\r\ntime=\"2017-08-14T18:11:34Z\" level=info msg=\"Serving Functions API on address `:8080`\"\r\n```\r\n\r\nThings still work, but the two (duplicate) warnings are jarring... \r\n\r\n i don't really think we want to suppress these kind of errors or warnings because a lot of times, that's exactly why it didn't run. this is mac shit. if we could add requisite flags to make mac happy to `docker start` that would be okay (investigation appreciated). fortunately, nobody in prod or doing a 'real' test of 'fn' will be running on mac, just for 'getting started' for [a lot of (sigh)] devs.  As @rdallman pointed out, lots of devs kicking the tires on macs before this ever makes it into production so we need a solution somewhere that makes it happy on a Mac out of the box. Can't have the second command most tire kickers run throw 4 lines of errors. Requisite flags sound like a fine solution.  @carimura Can you clarify which docker you tested this with on mac? Using the current docker on mac (with xhyve), I don't get these errors. I'm curious if this was fixed or if you're running boot2docker or something like that. I see:\r\n\r\n    mattstep-mba:fn mattstep$ ~/go/bin/fn start\r\n    INFO[0000] datastore dialed                              datastore=sqlite3 max_idle_connections=256\r\n    INFO[0000] no docker auths from config files found (this is fine)  error=\"open /Users/mattstep/.dockercfg: no such file or directory\"\r\n    INFO[0000] available memory                              ram=2147483648\r\n    \r\n            ______\r\n           / ____/___\r\n          / /_  / __ \\\r\n         / __/ / / / /\r\n        /_/   /_/ /_/\r\n            v0.3.153\r\n    \r\n    INFO[0000] Serving Functions API on address `:8080`     \r\n hmm... @mattstep \r\n\r\n```\r\n/tmp\r\n\u276f docker --version\r\nDocker version 17.09.0-ce, build afdb6d4\r\n\r\n/tmp\r\n\u276f fn start\r\nmount: permission denied (are you root?)\r\nCould not mount /sys/kernel/security.\r\nAppArmor detection and --privileged mode might break.\r\nmount: permission denied (are you root?)\r\ntime=\"2017-10-13T05:45:02Z\" level=info msg=\"datastore dialed\" datastore=sqlite3 max_idle_connections=256\r\ntime=\"2017-10-13T05:45:02Z\" level=info msg=\"no docker auths from config files found (this is fine)\" error=\"open /root/.dockercfg: no such file or directory\"\r\ntime=\"2017-10-13T05:45:02Z\" level=info msg=\"available memory\" ram=1601916928\r\n\r\n        ______\r\n       / ____/___\r\n      / /_  / __ \\\r\n     / __/ / / / /\r\n    /_/   /_/ /_/\r\n        v0.3.153\r\n\r\ntime=\"2017-10-13T05:45:02Z\" level=info msg=\"Serving Functions API on address `:8080`\"\r\n``` docker-for-mac\r\n\r\nVersion 17.09.0-ce-mac34 (19605)\r\nChannel: edge\r\nc076099f52 @mattstep looks like you're running the binary directly, not the docker container.  @treeder That makes a difference. Alright, I can reproduce this now. because dind image is run without --privileged flag, so mounting /sys/kernel/security fails?\r\n\r\ncli start.go still refers to funcy/functions (should that be fnproject/functions?), which possibly has a script somewhere like below?\r\n\r\nhttps://github.com/moby/moby/blob/master/hack/dind No longer the issue on Mac with Fn CLI version 0.4.30:\r\n```\r\nfn start\r\ntime=\"2017-12-18T11:09:37Z\" level=info msg=\"started tracer\" url=\r\ntime=\"2017-12-18T11:09:37Z\" level=info msg=\"datastore dialed\" datastore=sqlite3 max_idle_connections=256\r\ntime=\"2017-12-18T11:09:37Z\" level=info msg=\"no docker auths from config files found (this is fine)\" error=\"open /root/.dockercfg: no such file or directory\"\r\ntime=\"2017-12-18T11:09:37Z\" level=info msg=\"available memory\" availMemory=10844198093 cgroupLimit=9223372036854771712 headRoom=1204910899 totalMemory=12049108992\r\ntime=\"2017-12-18T11:09:37Z\" level=info msg=\"sync and async reservations\" ramAsync=8675358475 ramAsyncHWMark=6940286780 ramSync=2168839618\r\ntime=\"2017-12-18T11:09:37Z\" level=info msg=\"Fn serving on `:8080`\" type=full\r\n\r\n        ______\r\n       / ____/___\r\n      / /_  / __ \\\r\n     / __/ / / / /\r\n    /_/   /_/ /_/\r\n        v0.3.243\r\n\r\n``` confirmed, those errors are gone. there are some new Docker ones (on mac) that I think someone pointed out:\r\n\r\n```\r\n\u276f fn start\r\ncan't create unix socket /var/run/docker.sock: device or resource busy\r\ntime=\"2017-12-18T16:35:50Z\" level=info msg=\"started tracer\" url=\r\ntime=\"2017-12-18T16:35:50Z\" level=info msg=\"datastore dialed\" datastore=sqlite3 max_idle_connections=256\r\ntime=\"2017-12-18T16:35:50Z\" level=info msg=\"no docker auths from config files found (this is fine)\" error=\"open /root/.dockercfg: no such file or directory\"\r\ntime=\"2017-12-18T16:35:50Z\" level=info msg=\"available memory\" availMemory=1509670912 cgroupLimit=9223372036854771712 headRoom=268435456 totalMemory=1778106368\r\ntime=\"2017-12-18T16:35:50Z\" level=info msg=\"sync and async reservations\" ramAsync=1207736730 ramAsyncHWMark=966189384 ramSync=301934182\r\n\r\n        ______\r\n       / ____/___\r\n      / /_  / __ \\\r\n     / __/ / / / /\r\n    /_/   /_/ /_/\r\n        v0.3.243\r\n\r\ntime=\"2017-12-18T16:35:50Z\" level=info msg=\"Fn serving on `:8080`\" type=full\r\n```\r\n\r\nSlightly jarring, albeit less than the original ones...  there are no more warnings, only info log lines, this issue is closed  mind working on this one @denismakogon ? docs need a lot of work...  deleting `/tasks` endpoints.  When the runtime is ['assumed' to java](https://github.com/fnproject/fn/blob/11b5c4ce673e1524731f064de6ec6300d5b2c49a/cli/init.go#L182-L188) (i.e. not explicitly set), the [pom.xml isn't created](https://github.com/fnproject/fn/blob/85ae711447b593b4c5be1247d2090b058fc64011/cli/langs/java.go#L38-L45) and hence [init fail](https://github.com/fnproject/fn/blob/85ae711447b593b4c5be1247d2090b058fc64011/cli/langs/java.go#L99-L101). @denismakogon can I just create a new branch on upstream and submit the PR from it? Looks good from our POV.  Thanks.  thanks!  Looks like was changed from `FORMAT` to `FN_FORMAT` in [9ccd48e](https://github.com/fnproject/fn/commit/9ccd48eb18fe40ba5e47aef6d210ee15c38e40e2) for server side functions.\r\n\r\nAlso, I can't seem to find this anywhere, but is there an explicit contract that states that `FN_FORMAT` will always be set even if it is `default`? Or is the expectation that `default` should be assumed if `FN_FORMAT` is not set? thanks! i wasn't trying to kill anybody's puppies, that's how i found it: https://github.com/fnproject/fn/commit/9ccd48eb18fe40ba5e47aef6d210ee15c38e40e2#diff-c68879dad563371d9aa7e11002087e18L376 From the perspective of a user of the fn platform, while we developed the Java fn experience we started out by noticing that the format was stored in the FN_FORMAT variable, then in PR #163 I noticed it was being changed to FORMAT as part of the change, so I commented on it and it was changed back to FN_FORMAT with 9ccd48e (which is just one of the commits within the PR).\r\n\r\nApologies if this has caused confusion. From a usage perspective I've always assumed the variable was intended to be FN_FORMAT, but that's only by empirical observation. Am I wrong?\r\n\r\n(we can change our Java runtime once we converge on a defined contract for the format environment variable, so personally I'm not too attached to either name)  super wonky. easy to repro.\r\n\r\n```\r\n~/workspace/vista/services prod\r\n\u276f fn apps create configbug\r\nSuccessfully created app:  configbug\r\n\r\n~/workspace/vista/services prod\r\n\u276f fn apps i configbug\r\n{\r\n\t\"name\": \"configbug\"\r\n}\r\n\r\n~/workspace/vista/services prod\r\n\u276f fn apps config set configbug TEST 123\r\nconfigbug updated TEST with 123\r\n\r\n~/workspace/vista/services prod\r\n\u276f fn apps config set configbug TEST 123\r\nerror updating app configuration: App not found\r\n\r\n~/workspace/vista/services prod\r\n\u276f fn apps config set configbug TEST 456\r\nconfigbug updated TEST with 456\r\n\r\n~/workspace/vista/services prod\r\n\u276f fn apps config set configbug TEST 456\r\nerror updating app configuration: App not found\r\n```\r\n\r\n*might* be fixed in later version as I'm running against staging.\r\n\r\n```\r\n\u276f fn version\r\nClient version: 0.3.26\r\nServer version 0.3.24\r\n```\r\n  There needs to be a standard way across functions for a developer (or even user) to understand what a function does, what it's inputs/outputs are, etc, without going through the code. Something like the following:\r\n\r\n```\r\nName: Draw Service\r\nPurpose: Draws a box given an image URL and array of coordinates\r\nExpects:\r\n  Input:\r\n    id: 123\r\n    image_url: http://wallpaper.pickywallpapers.com/1920x1080/red-alfa-romeo-4c-us-spec-in-the-city-back-view.jpg\r\n    countrycode: us\r\n    bucket: my-bucket\r\n    rectangles: [{startx:0, starty:100, endx: 200, endy:200}]\r\n  Environment:\r\n    ACCESS: SOMESTORAGEACCESSKEY\r\n    SECRET: SOMESTORAGESECRETKEY\r\n    PUBNUB_SUBSCRIBE_KEY: ASD-123\r\n    PUBNUB_PUBLISH_KEY: QWE-456\r\n    HOSTNAME: MYHOST\r\nOutput:\r\n  Description: Outputs image to bucket\r\n```\r\n\r\nObviously this is YAML, but I could also see this as a standard format of docs at the beginning of the func file ala rdocs/godocs, etc.\r\n\r\nIdeally one could run a doc tool and create a \"func docs\" file of all functions in a given directory or something similar to the way API docs are created.\r\n\r\nMaybe this could also be combined with the test stuff @treeder is working on, but although they dupe work (inputs/outputs) they feel like different purposes (docs vs automated ci test framework).\r\n\r\nThis could also be an effort in collaboration with other func frameworks not just Fn. OFF (Open Function Format)\r\n\r\nthus: Fn OFF ;) @treeder this is more for documentation and including inside the repo for all developers with code access. func.yaml is for actual settings values and thus (to my knowledge) not to be included in the repo. Also func.yaml doesn't include environment vars, just config vars.\r\n\r\n oh i thought we discussed this and decided func.yaml would stay out of VCS's... (side note: some thoughts on this: #220). \r\n\r\nThat said it still feels separate.... func.yaml has *actual* values necessary to run, what I'm describing is documentation... furthermore this could be standard doc that other faas platforms can adopt. But let's get some other opinions.\r\n\r\n\r\n\r\n Also if we have output info, we can show output JSON as wiring to input of another function, etc. Got some ideas (and working solution) regarding this topic. Function spec would look like:\r\n```yaml\r\nversion: 0.0.1\r\n\r\napplication:\r\n  name: app\r\n  config:\r\n    c: 123\r\n    10: \"helloworld\"\r\n\r\ndescription: Functions spec that describes Fn-powered serverless application\r\n\r\nfunctions:\r\n  createUser:\r\n    handler: handler.create\r\n    events:\r\n      - http:\r\n          method: post\r\n          fn: ${file(models/func.yml):first}\r\n          documentation:\r\n            summary: Create User\r\n            description: Creates a user and then sends a generated password email\r\n            requestBody:\r\n              schema: ${file(models/PutDocumentRequest.json)}\r\n            parameters:\r\n              - name: username\r\n                description: The username for a user to create\r\n                required: true\r\n                in: path\r\n                schema:\r\n                  type: string\r\n                  pattern: \"^[-a-z0-9_]+$\"\r\n              - name: membershipType\r\n                description: The user's Membership Type\r\n                required: true\r\n                in: query\r\n                schema:\r\n                  type: string\r\n                  enum:\r\n                    - premium\r\n                    - standard\r\n            responses:\r\n              200:\r\n                description: create a user\r\n                content:\r\n                  application/json:\r\n                    schema: ${file(models/PutDocumentResponse.json)}\r\n              500:\r\n                description: error\r\n                content:\r\n                  application/json:\r\n                    schema: ${file(models/ErrorResponse.json)}\r\n```\r\nIt is an enhanced version of Swagger V2 and least complex than OpenAPI v3 itself.\r\nI made the tool that does the conversion between Function spec and OpenAPI v3 (https://github.com/denismakogon/fn-openapi-v3) @denismakogon I think you're thinking of something else, you're defining an API/app, not what a particular function expects. \r\n\r\nSo let's start a new issue if you want to talk about that, but my first question is going to be: why not just use swagger/openapi as is?\r\n So, there are at least two topics:\r\n1. We need to implement CLI feature that let developers generate OpenAPI spec from Fn application.\r\n2. Function spec.  don't merge this ;)\r\n\r\nthis is loosely what i'm thinking for reworking the backend. i am kind of giving up on polishing the doc, i could work on it for a week or two and have it make sense or i could just start writing code and see what happens. if anyone sees anything blatant or has suggestions, they would be welcome. have discussed this with @treeder at length. at a minimum, it highlights the current 'issues' relatively well. i also believe it expresses a separation of layers specifically up top (around http) that has some clarity compared to the rest of the thing.\r\n\r\n__beware__, going to work on this for a week or two (i hope), and i would appreciate an avoidance of any changes in the `api/` dir so that I could avoid trying to patch them in as I'm likely changing files and the structure significantly to the point where a rebase doesn't really work. I hate that this blocks everyone on that, but i think it's worth it (has been painful the way it is). there are a lot of things to do for the service stuff, fnlb and cli so hopefully nobody is bored.\r\n\r\nan aside, we have much work to do, even after this, in simply designing a scalable async system (notably omitted, see end). we basically need to rebuild a lot of the stuff we had for titan / iron worker and we probably need to figure out how to use kafka since redis isn't going to scale too, and figure out how to deal with their messaging semantics. this set of changes will only be concerned with the execution of async tasks, not in efficient/scalable retrieval of them nor 'exactly once' semantics around them. am going to make it 'at least once' for now, though, since 'at most once' is pretty useless as it stands.\r\n\r\nanyway, feedback welcome.  cc @oracloud @treeder @denismakogon  As usual, you're impeccable @rdallman - the proposed solution seems adequate. Perhaps I would try squash some layers to try having fewer of them, but also I admit I lack the clarity and the context to back it up.\r\n\r\nI think this is a time to review part of the history of why things are as they are - and make some product design decisions here.\r\n\r\nfn's predecessor suffered from push and pull regarding of what it should be be: spiritual successor to the IronWorker platform (async / cold); a strong competitor to other FaaS in the market (async || sync / hot); aspirational to be horizontally scalable (async + MQ / cold); whether it should have or not scheduled tasks, prioritized tasks and so on. I guess we can get the idea of the pressures. \r\n\r\nMy suggestion is that before we go around and start rewriting code, to re-state what FN should actually be. During my small tenure in IronFunctions, I pushed forward the vision that it should be: a) hot only and b) sync only; of course, I failed. In the end I guess it is something that needs to be reviewed by the powers that be.\r\n\r\nMy reasons for a) and b) are:\r\na) once we got proper wrappers - in the http.ServerHTTP like fashion for every language we should support; the idea of cold functions (that is using stdin/stdout just once) would be rendered obsolete. We didn't get there, but now we're in a much better situation. We already have some wrappers - let's write them just once: for hot only.\r\n\r\nb) sync only: my rationale at the time, and I am more than happy to change my view on this, is that if you wanted async, all you had to do is to place the request and close the connection. From the server perspective, what's the difference of a sync request in which you just had a connection problem and an async task? None. I know that the client side might wait for a TaskID of sorts, but again this is a design decision: you can either say that we don't give the TaskID back and go check it somewhere else, or we can promptly return a response with the taskID in the headers and let the client decide on whether it should close the connection or not. \r\n\r\nAgain, from the server perspective, once the response arrives, if the writer is already closed - it will be a no-op, and it can just discard the bytes and move on.\r\n\r\nThe practical consequences of these two product design choices is that we would have fewer moving parts in our clock work, and push behavior decisions to the far edges of the application, helping to make the kern of the fn much smaller.\r\n\r\n(If that's not intuitive, think of the following, if all tasks are sync - then the fn kern is only doing sync work. The edge of the system, the HTTP interface, can handle cleverly the response - delivering if the client is present, discard the response if not. Simpler, easier to reason about.)\r\n\r\ncc: @carimura \r\n\r\n\r\n thanks for the detailed response\r\n\r\n> Perhaps I would try squash some layers to try having fewer of them\r\n\r\nyea, it's possible after digging into it this happens. the main thing is pull everything out of http so that we can test it without having to make http requests + everything flows down instead of right now 'runner' is kind of a fat layer. unfortunately with so many things pluggable, reducing layers is hard, but if we tie them together nicely then the hope is this isn't too painful (it is right now).\r\n\r\n> a) once we got proper wrappers...\r\n\r\nthe issue i see with this is that it still forces users to rebuild their code to add our bindings. i.e. you can't just use images you've already made and yank them off docker hub and run them on `fn`. while this ultimately isn't important if somebody commits to using `fn`, I do think it's important to have little friction in getting started, and having 'cold' is for that. I've given some thoughts on how we can maintain both somewhat seamlessly wrt the backend in #137 and this patch is working towards that a bit, as well.\r\n\r\n> b) sync only\r\n\r\ni kind of agree with this. 'async' feels very much tacked on, and really doesn't work well at all (see #146). the entire 'async' part of functions is its own non-trivial system (we spent years building one of these) and it's not really just as easy as throwing things on a queue and picking them up when we have space to run them... i'm not sure we really want to push this kind of computing model on people with `fn`, i think maybe we just have a bias towards this due to our past, though i agree that it's useful, it's just... can it be part of another system? is `fn` 'it' for running docker containers? where does it stop? what happens when people want to run hour long async tasks on `fn` and at the same time serve `sync` requests? are we going to do microservices too? it would be nice to optimize for one use case (sync), not only for simplicity, but for performance and user experience and simplicity and coherence. if we do keep it, then we basically need to rebuild what was 'titan', and we're a pretty far cry from that at the moment.\r\n\r\nthat all being said, it would be pretty easy to lop off async, and many of the proposed changes in the doc are still relevant to making it easier for us to dev & debug & test sync functions, too. \r\n\r\ngoing to get started since there seems no red flags. we can keep the discussion open @rdallman Is there anyway that I can async-pair with you on this?  hey, not sure. at the moment it's a lot of just hacking. i'll pop my head up once there's something to discuss or look at. i don't think anybody denies that it's useful (see points), that's not really the discussion. i don't really want to have a philosophical discussion around keeping async / how async should work here as it's not all that relevant aside from making async hit similar code paths as sync for the actual execution. @treeder @rdallman pretty much summarized the discussion. Right now we have too many execution paths, all of them with their own minor quirks and nuances. The idea here is to have one execution path in a way that all use cases are appropriately catered for. @treeder what you said is pretty much inline with what we've agreed so far. The extra detail that also arose, is that we'd be using this `*model.Call/*model.Task` (still getting the names right, but I guess we've been leaning `*model.Call`) object everywhere - if it comes from sync, the http layer would bake a `*model.Call`; and if it comes from async's MQ, then we'll unserialized into a `*model.Call` as well. This pretty much unifies the execution model: bake a `*model.Call` and find a way to feed with it. goals:\r\n\r\ncloses #209, #205, #188, #158, #156, #146, #127, #124, #117, #107, #78  > why does a sync request need an agent?\r\n\r\ninside of the agent is where hot containers will be managed, slots allocated, driver executed if cold, also atm we are storing 'calls' and 'logs' for sync functions (not sure if desirable, maybe optional is better)[, etc.]\r\n\r\nthe idea is that 'agent' is just the thing that executes and stores information about a call. if another name would be more befitting, i'm amenable to change, the thesaurus seemed lacking on 'executor' and i didn't want to get too medieval. \r\n\r\nso to answer 'A sync request can just go right through the system and either run or 503.' -- not really, quite a bit goes into running a sync request. the idea is that async (well, a thread reading the queue) and sync (http) submit calls to the agent and the agent just ingests calls, so that the execution paths are identical (see https://github.com/fnproject/fn/pull/210#issuecomment-322430643, well explained).\r\n\r\n>  For instance, a task.AfterComplete() method could be called on the task and async would delete the MQ message, while sync would do nothing.\r\n\r\nyep, have moved to something similar to that instead of having a 'Controller' at this point. +1\r\n\r\nthanks for the feedback. we are working on flattening hot and cold atm and having streaming hotties (so hot right now), things look promising and a lot simpler already, woo  good idea. we're passing `METHOD` in the env vars in the headers, so this is possible but yea we should make http request the same method too. `GET` is grabbing payload from query parameters (weird, saw this today). yea, think we should just read the body for all of them the same, no weird query param for GET (this is b/c most http libraries won't allow adding a body to GET, at least easily, even though it is possible to do); code: https://github.com/fnproject/fn/blob/master/api/server/runner.go#L52-L62 .\r\n\r\nI get what you're saying about allowing different roots of routes. this just seems like url rewriting between getting the call and calling the user's function (i.e. not too hard)? haven't thought about it enough to think of issues.  @denismakogon json fixes the crux of this issue? there's also some work on #713   Thanks for adding this, @denismakogon. What about the case when you run `fn run` without specifying and image but want to pass a memory flag? For e.g.\r\n\r\n `fn run --memory 512`\r\n\r\nShouldn't this override what's in the `func.yaml`?  (both should work?)  Let's say I'm a client using FooLang to develop my own functions. The platform is vibrant and undergoing near-constant revision.\r\n\r\nFor many customers, constant API churn of the FooLang platform is going to be a turn-off. As a customer, I'd like to be able to pin my released functions to a particular version of a language runtime; as a runtime supplier, I'd like to be able to ship a :1-latest, :2-latest alongside :1.0.1, :1.1.0, etc.\r\n\r\nPossibly one simple way to do this is to add versions (or image) pegging to the func.yaml. For instance, possibly something like:\r\n\r\n```\r\nname: mystuff/myfunc\r\nversion: 0.0.1\r\ntimeout: 30s\r\nformat: http\r\n# ... etc ...\r\nruntime: java\r\nruntime-run-version: 1-stable\r\n```\r\n\r\nMaybe these keys (`runtime-build-image`, `runtime-run-image`, etc.) could be omitted from the standard `fn init` output, but a savvy customer who cares about backwards API compatibility can set them if required.\r\n\r\n(Incidentally this'd also offer a simple avenue for runtime maintainers to set up simple integration tests for new versions of their runtimes.)\r\n\r\nThis'd also be a pretty trivial mechanism for extending `fn build` to support a \"package-only\" mode, where it injects pre-built stuff into a docker image of the end user's choosing. I think this was already done with build_image and run_image. \r\n  https://github.com/fnproject/fn/commit/5bfc043bcadd4f6b5fd107a9b4aa0711d72b2e4a does some work to actually get rid of the heroku registry client. the latter commit updates the deps. since our deps are broken if we don't strip the vendor directory and without getting rid of heroku, they were broken with stripping, too (p.s. we shouldn't have to strip vendor for our deps to work)\r\n\r\nthe `cli` package was not properly being omitted from the top level `fn` deps anymore, so this removes a lot of deps from that too.\r\n\r\nthe sirupsen thing was broken again too. it seems like we basically need to wait for all of our deps to update to lower case and then we can update to lower case. until then, we need to keep upper case versions of everything that uses logrus vendored. (yes, seriously). there are good rants to be found here: https://github.com/sirupsen/logrus/issues/570#issuecomment-313933276 . so for the moment, had to add some old versions of things that updated to lower case sirupsen until we are ready. :(((((((((((((((\r\n\r\nif we get this in before #191 i'll rebase and update deps there, or if vice versa i'll remove them here.\r\n\r\njust think of all the fun ya'll missed since we have vendor vendored ^_^\r\n\r\nthese are seriously a disaster to maintain, and idk what to do about it (and that has nothing to do with whether we download them or not. updating them is impossible and happening all the time is the issue. and sirupsen. definitely sirupsen. and docker too) should we freeze everything at its current state? @treeder @denismakogon @hibooboo2 ? going to update w/ #191 stuff meow ok, updated. looks good now (i think). should review https://github.com/fnproject/fn/commit/5bfc043bcadd4f6b5fd107a9b4aa0711d72b2e4a mostly bump @denismakogon @oracloud  @rdallman @denismakogon CircleCI is happy. LGTM. thanks!  https://github.com/fnproject/fn/commit/0322d2623e9494c75d1d8886a334016025e4d15d was happening. and we don't want that to happen. this fixes that. (yes, i realize we could probably put this in a script somewhere we could reference. no, i'd rather not get into that right now, just trying to quick fix this and get on with my life please) @treeder or @hibooboo2 or @denismakogon or whoever sees this? quickie looking for an `=` basically. see: https://github.com/fnproject/fn/commit/0322d2623e9494c75d1d8886a334016025e4d15d  will this resolve #147 ?   at present we have no test suite for making api level tests where we can test how things end up looking inside of the docker container. it may be impossible to do this without creating some images to test certain behaviors, but it would be nice to avoid, if possible (mock docker client?)\r\n\r\n#163 and #186 basically need this kind of full stack api through container kind of test I don't think that we already do it makes it okay. In fact, we should probably have 1 to make sure it all works. Perhaps what I mean is that I would prefer not to make a habit of it (have a lot of different docker images just for our test suite). There are many reasons for this: \r\n\r\n1) docker is required to be installed & configured a certain way locally for tests to run\r\n2) if docker hub is down one is unable to run our test suite\r\n3) one must download all required docker images to run tests, this takes both space and time.\r\n4) if the images go out of sync locally for a dev, then tests can fail spuriously due to a certain dev not having the latest image, as we are not pulling these images before running tests (see: 3)\r\n\r\nnone of the above should be issues. So I agree to disagree, with concrete arguments.\r\n\r\nHaving an entirely separate test suite that runs a bunch of docker images isn't great either, because then it means we're basically requiring devs to use that test suite, otherwise they can't see if they didn't break anything even if the 'normal' test suite is passing.  Addresses #147 thanks, it's important to print errs to `stderr` and return non-zero exit code. I'm ultimately fine with merging this as is, but I think we could possibly do a little better on the future proof front if it's easy enough to do in our current cli (or with minimal changes).\r\n\r\nnow that it's done this is less painful to add but future work will require every err to be wrapped in `clierr`. i haven't dug into the cli too much, but is there a way for us to express every command such that at a higher level we can trap errors and then only in 1-2 places do we need to add `clierr` ?\r\n\r\nwhat i mean is, something like (very pseudo):\r\n\r\n```go\r\n// ...\r\ncmd := getCmd(os.Args)\r\nerr := cmd.Do(os.Args)\r\nif err != nil {\r\n   clierr(err)\r\n}\r\n// ...\r\n```\r\n\r\nthen we only need to call clierr after `Do`, in this example (may require more than what i'm trying to express with `Do` but I think this illustrates my point at least).\r\n\r\ni'm not sure if urfave's cli package makes this easy to do either (not asking to change cli libs, asking if the one we have has an easy way to do this as i'm not familiar with it myself). anyway, not sure how easy it is to implement this in cli's current state, but if it is then it would be preferable imo. thanks @treeder that's what i was getting at. should we close this in favor of #190 (i.e. is it really that easy)?  Before this change, if I run `fn call` on a route that doesn't exist we get:\r\n\r\n```shell\r\n$ fn call i-dont-exist /neither-do-i\r\n{\"error\":{\"message\":\"App not found\"}}\r\n```\r\nwe're now getting:\r\n\r\n```shell\r\n $ fn call i-dont-exist /neither-do-i\r\nCall ID:\r\n```\r\n Maybe nit picking, but I think we should check for errors before continuing with the happy path. I'm guessing success would be indicated by a response code of 200. At the moment, the error case is embedded within the async else block which is not too clear.  @denismakogon I see where you are coming from. I can propose some alternatives: a) you could print to stderr, so if someone doesn't want this output then one just redirect to /dev/null; or b) add a silent flag. What you say? So now the behaviour for async functions is that when you do `fn call app /route` is that by default you get no output, unless you specify the `--display-call-id`... I think that's not optimal from a UX point of view. Personal opinion: I think it would be best for call-id to be printed to stderr for all success cases (already suggested by @oracloud). That's useful anyway as now if my function returns an output I'ld like to parse, I don't have to deal with the `Call ID` line. Thoughts? @denismakogon yes, personally I think that's a better UX. Also, we should output call id to stderr only. @oracloud thoughts? @mhaji I vote for stderr. I defer to @denismakogon the final decision, however.\r\n @denismakogon\r\n\r\nThe reasons I think printing Call ID to stderr is:\r\n\r\n1. It's informational, not part of the actual output.\r\n2. If I want to pipe the output of `fn call` to something else, for example `jq`, then I don't want to have to deal with unstructured text. This is the behaviour of `curl` for e.g. If I add the `-v` flag, the request and response payloads are printed to stderr, that what I can do `curl | jq` etc.\r\n\r\nConcrete example:\r\n```bash\r\n$ fn call app /route\r\n{\"foo\": \"bar\"}\r\n\r\n$ fn call app /route | jq .foo\r\n\"bar\"\r\n\r\n$ fn call app /route --display-call-id\r\nCall ID: 01BPM841FA07WG400000000000\r\n{\"foo\": \"bar\"}\r\n\r\n$ fn call app /route --display-call-id | jq .foo # this will fail as Call ID line will go to stdout too\r\nparse error: Invalid numeric literal at line 1, column 5\r\n```\r\nthe behaviour I think we want is (without having to specify  `--display-call-id`):\r\n\r\n```bash\r\n$ fn call app /route --display-call-id | jq .foo\r\nCall ID: 01BPM87P2W07WGC00000000000\r\n\"bar\"\r\n``` @treeder I agree, however, since `fn logs` has been added (see  #182), if I do `fn call` on a sync function and it's successful, how then should one get the call ID to look at the logs? ping @treeder  Correct me if I'm wrong but I think @treeder might be referring to debugging synchronous invocation executed using `fn call` . If the user doesn't pass in `--display-call-id` they won't get the call ID. As mentioned by @denismakogon in #182, the user can run `fn calls list` which will give the user the call-id :\r\n\r\n```\r\n$ fn calls list my-app /my-route\r\nID: 01BQ10NASG07WG200000000000\r\nApp: my-app\r\nRoute: /my-route\r\nCreated At: 2017-08-08T13:31:05.393Z\r\nStarted At: 2017-08-08T13:31:05.393Z\r\nCompleted At: 2017-08-08T13:31:06.995Z\r\nStatus: success\r\n\r\nID: 01BQ10NWWJ07WG400000000000\r\nApp: my-app\r\nRoute: /my-route\r\nCreated At: 2017-08-08T13:31:23.922Z\r\nStarted At: 2017-08-08T13:31:23.922Z\r\nCompleted At: 2017-08-08T13:31:25.496Z\r\nStatus: success\r\n```\r\n\r\nThis may be sufficient. Personally I'm still for displaying the call ID by default and that being printed to stderr, but at least there is a way to get the call ID even for synchronous calls. I would personally say printed by default as it's going to stderr and won't be in the same stream as the function's output, but I will leave the final decision up to you :) @denismakogon I am owning the merge decision here. Let's have this merged. I do ask you, please, to own this changeset if problems arise in the future and adjust accordingly.  Glad this was added! I'm trying to use it at the moment, however, a bit unclear where I get the `call-id` from. The only place I can think of is either when an error happens and it's part of the response, or by looking at the server logs.  @denismakogon cool, thanks for that, yes I can see the response header when I curl. Also good to find out about `fn calls list` :)  just looks like a timeout to me. kind of hard to say from those logs that there's anything wrong with fn or your function. can you debug it? there are a lot of known issues right now, if you find anything new you could file it. > error streaming docker stats for task\r\n\r\nthis is not relevant to the task state at all, whatsoever (it's in another thread, even)\r\n\r\n> we might consider to use docker logs <ID> instead of what we have in func logger\r\n\r\ndue to formatting (json), it's hard on i/o (on EBS drives, especially). the issue here isn't our mechanism for getting logs. at some point, we have to cut off the logs and time the task out, regardless of whether the container is running (perhaps, we can't kill the container). so not sure what this buys us. maybe func logger isn't flushing, sure, we should fix that if that's the case.\r\n\r\n> it might happen that function writes to STDERR multiple times and function fails with some unexpected/unhandled error log is not going to be created\r\n\r\nwhat does this even mean?\r\n\r\n> create call object before execution and update later, this will require to introduce few more statuses except those we already have (at least we'd know where we stuck)\r\n\r\ni suspect we don't want to do this for sync. it doesn't really buy us or the user anything and just adds latency. users would prefer the call to run and not have a call id (who cares, it's small % of cases, they still should get response) vs have added latency on every req.\r\n\r\ntbh it's not clear from your comments what the issue is at all. it seems to be implying that it's specific to this task you've linked but it's not clear.\r\n\r\ncould you please clearly define what your issue is as opposed to guessing what issues may be causing this mysterious issue of yours?\r\n\r\nfor example: \"my task times out, i don't get a call id, there are no logs\" thanks.\r\n\r\ndid the task produce any logs? you can comment out the line to remove the container and run it locally again and then check docker logs (among other ways). is the task properly uploaded as a hot function? is the `HOT` env var being correctly passed into the function? does the task run at all? (maybe i can think of more things to check?)\r\n\r\ni would say the context is exceeded and the db call would time out but we're actually not passing the context down into our sql requests right now so it would write logs if there were any. if the task doesn't produce any logs, then why is it a bug not to have logs? i have no clue what you're getting at now (sorry). \r\n\r\ni'm gonna unsubscribe from this unless this starts making sense soon, and I'd encourage starting a new ticket altogether about adding a python wrapper since this issue is now nonsensical to anyone who may come across it for more innocent reasons. is this an issue specifically with the python wrapper code you are trying to add or... ? This would  almost done within fdk-python Closed via https://github.com/fnproject/fdk-python/pull/1  looks great, thanks  shweet. seems like the docker push at the end failed (not sure if creds issue / we have this set up on circle yet) -- you can just omit that for now if you'd like  Start fn server at port 8081 and then try to start fnlb with default settings:\r\n```\r\n ./fnlb --nodes localhost:8081,localhost:8082,localhost:8083\r\nINFO[0000] datastore dialed                              datastore=sqlite3 max_idle_connections=30\r\n\r\n```\r\nWhen sending SIGINT it reacts with corresponding message:\r\n```\r\nINFO[0089] received signal                               signal=interrupt\r\nFATA[0089] server error                                  error=\"listen tcp :8081: bind: address already in use\"\r\n```\r\n @rdallman i just opened an issue, planned to fix it later, but you've got it first =)  It'd be great to be able to treat a route as a prefix when matching, rather than having to match exactly.  For example:\r\n\r\n```\r\n  /r/my_app/some-path-prefix/<anything>/<at>/<all>  ->  myfn\r\n```\r\n\r\nThis doesn't mandate that path params to be evaluated by the fn platform, as long as the entire request URL is passed into the function we can do that ourselves.\r\n\r\nThis request would be especially useful for https://github.com/bbilger/jrestlesss - we can define an application with a base-url and many sub-resources hosted in a single function.  This is hard work at the moment as we need to create a lot of routes in the fn platform, and are not able to dynamically add a route at runtime. Why wouldn't you be able to add a route at runtime @mjg123 ? Hi there. By \"dynamically\" I mean that the function wouldn't be able to create new routes for itself depending on (eg) something from a data store.\r\n\r\nFor example a `path-prefix/users/<user_id>/details` URL where new `<user_id>` values can be created at runtime.   AIUI the current behaviour is that all the possible values for `<user_id>` would need to have routes manually created.\r\n\r\nThis isn't really a separate requirement - we would like to have a single prefix (eg  `/r/my_app/some-path-prefix/`) mapped to a function so that `/r/my_app/some-path-prefix/<anything>/<at>/<all>?with=params` would be sent to it. One example of a use case for this is a function that serves a static file: You'd expect the filepath to look something like `domain.local/static/main.css` but this is currently not possible with `fn`. Instead I have to resort to hacky file serving aka `domain.local/static?file=main.css` which works but is semantically bad.\r\n\r\nAnother example is a function serving a Single Page Application that works with client-side routing \u00e1 la React Router. I want the `root` function to be able to read the path and respond based on that (e.g. `domain.local/show/all` or `domain.local/show/1` handled by JavaScript and not server side)        Improving error handling while trying to reserve tasks at async runner\r\n    \r\n     Each time when MQ becomes unreachable HTTP GET /tasks returned HTTP 500\r\n     and code was not handling this case except expecting networking errors.\r\n     After that it tried to unmarshal empty response body that caused another sort of an error.\r\n    \r\n     This patch triggers error based on http response code, explicitly checking if response code\r\n     is something unexpected (not HTTP 200 OK).\r\n    \r\n     Response status code for /tasks for changed from 202 Accepted to 200 OK according to swagger doc.\r\n @rdallman fixed.    @rdallman isn't this good time to add one?\r\n\r\nthere's reason why we don't have one, since all API tests are depending on API server only(think of validation tests), tests for hot functions would require to connect to Docker in order to ensure hot container is really there and no new containers created.\r\n\r\nSo, here's a scenarios:\r\n1. Create config\r\n2. Start hot fn\r\n3. Change config\r\n4. Expect config to change via function output (python's `os.environ` or whatever lang you want to output operating system env)\r\n > no, i don't think my patch related to fixing a certain behavior is a great time to ask me to go add an entire test harness.\r\n\r\nNamely, in the past, big PRs led to even longer review times and more porous to bugs coming through. Also, a test harness - namely in our case - is not something trivial and needs to be discussed so it covers more than the case this PRs makes evident. @hhexo @denismakogon @oracloud i've updated the code for setting env vars as requested. wrt adding a test, i'd prefer not to write a test that depends on an image checking for env vars since that is brittle, and our current test suite is not well-suited to making this kind of test easy otherwise. i've tested manually and there seems no defects in this code, though I agree about adding the ability to test this kind of thing more easily in the future.\r\n\r\nif you could take another pass, it would be appreciated. if the test is a blocker, then please close. @denismakogon #189  Yep, LGTM now too. thanks!  ok. let's try 60 seconds / 60 minutes for sync / async, respectively?\r\n\r\nin theory, people could change their load balancers to have a 60 minute timeout and give less of a shit. maybe we should enforce these limits from fn-service and leave the OSS version flexible (i feel sweaty just thinking about the plumbing already).  Let's make a decision soon on this and move out of discussion into implementation.  Merged.  I think this is still an issue for some odd reason.. going to move into current milestone and close if I can't reproduce this week. bump for closure  #190 fixed this?\r\n\r\nre-open if wrong @oracloud @treeder   Have done some homework on this now. \r\n\r\nIf we are doing apps and routes by lexicographical ordering then providing a `previous_cursor` value is more challenging as we will have to get the entire previous page in order to provide the first value of that page, or have another argument on top of `cursor` to provide to the api ala `cursor_backwards` to denote that we should get the previous 100 results based on the cursor provided rather than the next 100. So, if we do choose this, imo we should only implement forward paging for now and leave this open. \r\n\r\nalso, in trying to prepare for the eventual namespacing of apps / routes, as well as trying to make things somewhat forwards compatible with non-sql dbs, i'm not sure if we should add ids to apps and routes and then identify them based on that. it would make things trickier from the perspective of a route path changing (i.e. does the id change? is this a new route? yes, seems so). it would make the `previous_cursor` thing fall out. but for security ultimately is kind of where my head is at. i think our db schema for the service would have to add another field for a tenant id or we will have to prefix `app_name` with the tenant id, which as far as attack vectors go, i think our cursoring will hopefully only contain an `app_name` or `route` and not the full id, and we can inject these. i think this will be secure, but i haven't deliberated about it for very long if anything sticks out.\r\n\r\nanyway, pressing on for now with \r\n\r\n> For ordering, I'd say alphabetical for apps and routes, calls and logs by date descending.\r\n\r\nwith only next_cursor, always a string (not an int, like twitter) and gonna add time boxing of dates to calls/logs api (i.e. `greater_than` & `less_than`, open to name ideas)  merged  closing for #785 discussion  seems related to #201   See also https://github.com/fnproject/cli/issues/51\r\nhttps://github.com/fnproject/cli/pull/52 https://github.com/fnproject/cli/pull/369 done?!  done?! https://github.com/fnproject/cli/pull/369  @treeder was this completed? You tell me. Doesn't seem like something we'll be pursuing anytime soon. \r\n ok you closed it that's why i was asking.. let's keep open as placeholder, thx. I'm not even sure what this issue is, can you update it so we are clear what it is?\r\n  closed in #314 \r\n\r\nor no? need to add to routes delete too ?  @treeder i have an idea... once we make progress on #211 (functions spec), `fn run` would know which ENV vars are required, and grab them from the users local ENV and pass them through to Docker using -e. Then I wouldn't need these annoying [runlocal.sh](https://github.com/carimura/vista/blob/master/services/detect-plates/runlocal.sh) scripts just to pass 5 ENV variables through every time I test locally.\r\n\r\n This may already solve this: https://github.com/fnproject/cli/pull/20\r\n\r\nEg:\r\n\r\n```yaml\r\nversion: 0.0.1\r\nruntime: go\r\nentrypoint: ./func\r\nexpects:\r\n  config:\r\n    - name: SECRET_1\r\n      required: true\r\n    - name: SECRET_2\r\n```\r\n re-opening until i can verify The root of this issue will probably never happen, the follow up in the comments was done a long time ago. Please verify and close soon so we can keep our issues clean. Or just add to your to do list and reopen later if it's not the case. \r\n I think the root of the issue still makes sense so I'd like to keep the issue open as discussion. thanks. cli issue? re-file in cli if still relevant (not clear, seems resolved?)  closing for https://github.com/fnproject/fn/issues/367  @denismakogon do you still see this? I no longer get 'weird errors' since we are now properly masking non user friendly errors in the front end. we still need this `we also need to probably figure out how to make this stop across all the various backends, we would prefer for them to wait and then possibly get hit with a timeout instead of just failing.` but moving elsewhere.  closing for now....  @carimura what if this will be a json object instead of env var per query parameter?\r\nLet's say, `GET /foo?first=joe&last=user` will be parsed into:\r\n```\r\n{\r\n    \"first\": \"joe\",\r\n    \"last\": \"user\",\r\n}\r\n```\r\nand will be available at function site as ` FN_QUERY_JSON` or ` FN_QUERY` env var?\r\nThem you'll be able to work with in as with function STDIN @rdallman @hibooboo2 thoughts? Closing this in favor of https://github.com/fnproject/fn/issues/476  Going to close this because flow.   Still want this open?  turns out this is the case. unfortunately, the user containers can't talk to anything. I'm not sure that we really want #410 since we are managing containers directly (for good reason), but we'll at least need to have some answer for intra-k8s cluster networking stuff and we'll likely have to make a pod out of every container to do that, which I'm sure the overhead will be murderous and not worth it but I'll feign optimism.  How to pass timeout value to docker run command as default time out is 2m which is very less for windows container to start .   https://github.com/fnproject/fn/blob/master/docs/developers/configs.md  i think this can be closed for now... let's open tickets for specific scenarios now.  this is covered by this #158 & #156 (or at least, it should be, and all the docker calls respect a ctx except for removal, which should be async #156). closing since the other 2 highlight concrete work to do that resolves this vs simply highlighting a bug.  closing this one, because of multiple reasons: logstash doesn't really work as multi-tenant log store, we agree to use the s3-compatible store for logs and calls  the helpers have changed a lot since this was filed and this is a cli issue, closing...  @rdallman isn't this done already? fixed now. should add test for this (need to run through real backend, not mock)  cli issue  I did some tests and I was not able to reproduce the issue, plus I looked at the code and the signal is managed correctly (https://github.com/fnproject/cli/blob/master/common.go#L131) and we delete the temporary `Dockerfile` with `defer` https://github.com/fnproject/cli/blob/master/common.go#L107\r\nTo me the issue can be closed as fixed.\r\nI don't understand why the bug is open against the `fn` project, in my understanding `build` and `run` are performed by the `cli`therefore I expected to see this as a `cli` issue, am I right? have a sneaking suspicion our loitering issue has changed to leaving around intermediate build images instead of docker files now, but that's not quite this. thanks for investigating, I believe you cracked this one @reclaro   This is where I am going with this. Posting for visibility and feedback:\r\n\r\n- Should be a tool to test a known point of the system can handle x\r\n- Profile and see what a point of pressure / execution times the system can do well.\r\n\r\nThe profiles that it generates / tests will track these measures:\r\n\r\n- Amount of concurrent functions: ex 5 hitting over and over\r\n- Amount of total runs: ex 1000 calls to a function or 100000\r\n- Rate of error: how many errored 4 calls or 0 or all\r\n- Uses a sync/ async / cold / hot functions  (Just sync cold to start.)\r\n-  Tracks Latency per request\r\n    - For sync latency is time from making call to having response.\r\n    - For async latency is time from making call to resp w/ call id. As well as time it took to execute once it has executed.\r\n    - Will do average/Max/p99 latency.\r\n    - Compare Latencies across different amounts of concurrent calls. Ex latency w 5 concurrent vs 25.\r\n\r\n\r\nThe above should make it so that we can easily say our system is performing at one level of throughput and when we make changes test to see if that changes for better or worse and be able to work on making it better over time. sounds good to me. tracking total time to complete x will most likely be enough to get a read out, percentiles of latency inside of that are important to track, as well (as noted). avg throughput would be cool, too, but since we're capping memory it seems like this will trend towards that capacity, but maybe we should ensure that.  I think @hhexo and co. are doing this for flow, we can likely reuse the framework at least? I can think of numerous bugs we'll run into but the server isn't really polished wrt the api so that seems more important... We currently have an ad-hoc framework that we're still working on, see https://github.com/fnproject/flow-load-testing - it's a private repo but you should have access, I think.\r\n\r\nOne of the problems we're having is to figure out what a \"representative\" load for flow is (how is a typical graph structured), however you probably don't have that problem for general functions - you just run tons of them.\r\n\r\nI imagine that for hot functions, once you saturate the container space (N containers per node where N = memory / (memory per container) ), your parallelism will be maxed out so you should be able to easily estimate what the results of a test should be, and detect any difference. We're still in the process of getting to the point where I can max out that\ntheoretical capacity of an fn cluster; for single flows we are still seeing\nsome kind of bug where the return message from the graph actor doesn't come\nback to the REST api's Ask future. That's one distinct failure; the actual\nramp-up other wise looks okay although I am still getting to the point of\ndriving it hard enough to see an fn backlog build up.\n Yesterday I came up with some considerations after I hammered an Fn node trying to run functions to create many many Flows in a short time.\r\n\r\nAs far as I know (I may be wrong) Fn's policy for determining the number of concurrent containers is based on some function of memory. On a reasonably sized Fn node, I might have given 32GB of memory to Fn which means that, if each function is by default limited to 128MB, in theory I could run up to 256 concurrent function containers. I don't know if that theoretical limit is reached, but I have seen the number of containers reach at least 208 in my tests when I observed it, so let's go with the theory.\r\nThe problem here is that on the machine I might only have a small number of CPUs (say, 4CPUs which are actually 8 threads).\r\n\r\nAssume that my function usually runs in 1 second, so I gave it a generous timeout of 30 seconds. Also assume that the scheduler is fair, and each container gets an equal share of the CPU time. In such a configuration of containers, that CPU share is 8 / 256 = 0.03125 \"processors per container\".\r\nMy function running in such a configuration would take on average (handwaving the fact that scheduling is quantized rather than continuous) 1 / 0.03125 = 32 seconds. It would then very likely time out before it's finished.\r\nAnd this is without considering the overhead that Docker adds when starting a lot of containers. Anecdotally, Docker gets slower the more containers are alive.\r\n\r\nI admit, I don't have precise numbers here, mostly because my focus was testing Flow rather than Fn. However, I worry that functions are actually CPU-bound, and I propose that one of the outcomes of load testing for Fn should be to find out how much that is a problem. \r\nI would recommend a test based on a function with a known deterministic single-threaded duration, measuring how \"slower\" it gets when more containers are around.\r\nI think this would be very important feedback for Fn's scaling policy. @hhexo I agree that it's very likely for fn nodes to be cpu bound more so than memory bound, obviously dependent on workload but I think it's likely the normal case. I've made a comment https://github.com/fnproject/fn/issues/497#issuecomment-344333715 to do something about this. we _should_ be able to check this when trying to create a new slot (note: not existing slot that is free) and queue it or 504 so that the function could run elsewhere. does this seem like a good idea? as far as load testing, it would be great to save the cpu contended workload presented from the current tests and use it against a version of fn that attempts to apply back pressure when the cpu is saturated to see if things are faster / slower, this will give us an obvious path forward. this ticket isn't providing very much value and we have addressed the cpu concerns in #642 - I see multiple tracks here: benchmarking, CI-like load testing for verification, testing thresholds -- each of these useful in its own right -- if we break out and do any of those we can make separate, more specific tickets for them.\r\n\r\nmost people I've seen to date have been using a standard http benchmarking framework (they are vast) after setting up some routes and then watching for fireworks.  Assume we can close this with new helm charts.   still disorganized. good to have placeholder ticket until we come up w/ better system.  think this might have been that Docker image caching issue that I hadn't figured out at this point....  users can send in headers on the request that get passed down now without our prefixing of `HEADER_` (i.e. so Content-Type and Content-Length are useful). for any non-http format, assuming that this would be useless, and can't imagine a scenario where the request to call a container would specify a Content-Type only to want it to be rewritten before passing to the container?\r\n\r\nclose?  @denismakogon can we close this? Yes since it didn't find anyone interested in it.  think this is still supported/works? @hibooboo2  It does not work if that is your question.  Will be doing this as part of node fdk, s  I can pick this up and put something in https://github.com/fnproject/fn/tree/master/docs.\r\n\r\n- How to set the FN_REGISTRY variable appropriately\r\n- (running a `registry:2` container to use as a demo)\r\n- (setting insecure registries if necessary)\r\n- Deploying and using a private image\r\n- Using `docker login/logout` to authenticate against a private registry and deploy functions to it\r\n- (optional) how does fn server deal with registry auth?\r\n\r\n Some relevant convo from today:\r\n\r\n```\r\nChad Arimura [10:17] \r\ni\u2019m totally blanking on something.. trying to connect to wcr.io from dev cluster to pull images but forget how to pass creds.\r\nfunc is deployed.\r\n\r\n\u276f fn call demo hello\r\n{\"error\":{\"message\":\"Failed to pull image 'wcr.io/iron/hello:0.0.2': pull access denied for wcr.io/iron/hello, repository does not exist or may require 'docker login'\"}}\r\n\r\ni feel like this is automatic with docker hub .. \r\n\r\n\r\nTravis Reeder [10:24] \r\nit\u2019s a config thing, sec\r\n\r\n\r\nChad Arimura [10:24] \r\njust saw Reed approve this: https://github.com/fnproject/fn/pull/654/files\r\n\r\n\r\nTravis Reeder [10:26] \r\nit\u2019s DOCKER_AUTH, looks like we don\u2019t have good docs on it though\r\n\r\n\r\nChad Arimura [10:27] \r\ngot it. that\u2019s the token i presume\r\n\r\n\r\nTravis Reeder [10:27] \r\nthink it\u2019s more than that\r\nit\u2019s a json snippet\r\ni think\r\n\r\n\r\nReed Allman [10:28] \r\nwcr.io is public tho\r\ndon't need all that\r\nright?\r\n\r\n\r\nTravis Reeder [10:28] \r\nfor private images?\r\n\r\n\r\nChad Arimura [10:28] \r\nprivate image\r\n\r\n\r\nTravis Reeder [10:28] \r\ndoesn\u2019t matter if reg is public\r\n\r\n\r\nReed Allman [10:28] \r\nok\r\nthought it was public image\r\n\r\n\r\nChad Arimura [10:28] \r\ndon\u2019t think so \u2014 but try this: `docker pull wcr.io/iron/hello:0.0.2`\r\n\r\n\r\nReed Allman [10:29] \r\ni think you can embed `https://<user>:<password>@wcr.io/<org>/<image>`\r\n\r\n\r\nTravis Reeder [10:29] \r\ni believe it\u2019s a `.dockercfg` file as a sstring\r\nprobably not smart to put that in the image URL?\r\n\r\n\r\nReed Allman [10:29] \r\nstoring creds in fn isn't a great idea\r\nyea\r\nbut i think it works\r\n\r\n\r\nTravis Reeder [10:30] \r\ncreds in fn better than putting it in the image URL\r\n\r\n\r\nReed Allman [10:30] \r\nthat's what i meant\r\nthe DOCKER_AUTH stuff hasn't been tested in forever, may need fixing\r\n\r\n\r\nChad Arimura [10:31] \r\ngot it. so private images not ready for primetime.\r\n\r\n\r\nReed Allman [10:31] \r\nit worked at one point\r\njust unsure if it still does\r\n\r\n\r\nChad Arimura [10:32] \r\nya I hear you. no docs though == not done, etc. so I\u2019ll make a non-urgent ticket to work on this.\r\noh hey \u2014 https://github.com/fnproject/fn/issues/35\r\n```\r\n\r\n:) I think we need to support this in the app/function configs, eg:\r\n\r\n`fn .... config set DOCKER_AUTH REG:TOKEN`\r\n\r\nNeed a hashed/secure token though, not the username/password base64'd that may be in your .dockercfg.  Can we make JWT tokens and use those?: https://docs.docker.com/registry/spec/auth/jwt/\r\n\r\n More reading: https://github.com/docker/docker-registry/issues/541\r\n that convo is confusing. this covers all of that more succinctly: https://github.com/fnproject/fn/pull/654#pullrequestreview-87293844 yes but #654 doesn't cover private images... I think that's whats missing still.\r\n   specifically referring to the comment highlighting how to configure fn server (see link)  closing for #399 which has a better description  https://github.com/fnproject/cli/issues/158  Closing because flow.   > (no idea why?)\r\n\r\nya know, some people still have to deal with dynamically linked libraries ;)  we're gonna do this, dk why it got closed @rdallman Probably better include CPU, RAM into `/calls` response? yea, not clear from description but I agree, they're also getting spurted to prometheus now too.   closing, see http://github.com/fnproject/fdk-go  curious what @rdallman 's comments were on here... ;)\r\n https://github.com/fnproject/fdk-node  Allows to update route without func.yml file. Implements: #139  need to close this PR and reopen to make CI pass.  @treeder @rdallman @denismakogon  @rdallman Rebased. @denismakogon What ever comments you Left I didn't get to see. Can you leave them again? @denismakogon Thanks :) There were no comments from me. All good.", "text_all_count": 124522, "text_word_token": ["What", "s", "left", "in", "this", "metric", "with", "the", "uds", "and", "pull", "times", "remove", "Just", "the", "container", "start", "time", "Wonder", "if", "it", "makes", "sense", "to", "public", "two", "metrics", "here", "the", "total", "time", "as", "we", "do", "now", "and", "the", "time", "without", "uds", "and", "pull", "Apologies", "if", "we", "re", "already", "doing", "this", "and", "I", "ve", "just", "overlooked", "it", "NUMBER", "shreyagarge", "Could", "you", "please", "perhaps", "move", "these", "to", "api", "common", "stats_utils", "NUMBER", "go", "Looks", "good", "work", "in", "my", "test", "NUMBER", "mattstep", "branch", "builder", "namespace", "still", "kicking", "after", "NUMBER", "days", "looks", "like", "it", "s", "good", "to", "merge", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "Rtvik", "Sriram", "Bharadwaj", "LINK", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "Rtvik", "Sriram", "Bharadwaj", "LINK", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "Rtvik", "Sriram", "Bharadwaj", "LINK", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "CLA", "Bot", "All", "committers", "have", "sign", "the", "CLA", "NUMBER", "The", "description", "of", "the", "change", "be", "clear", "and", "seems", "a", "cool", "thing", "to", "have", "but", "then", "reading", "the", "implementation", "I", "be", "having", "some", "troubles", "NUMBER", "Some", "question", "even", "have", "the", "front", "end", "write", "headers", "while", "TryExec", "be", "write", "headers", "NUMBER", "Is", "this", "change", "address", "this", "issue", "as", "well", "Reading", "the", "code", "seems", "to", "me", "that", "this", "case", "having", "the", "front", "end", "write", "headers", "be", "still", "possible", "The", "change", "to", "the", "sentToRunner", "function", "be", "about", "the", "optimisation", "for", "copying", "RequestBody", "right", "If", "so", "shall", "it", "go", "into", "a", "different", "change", "I", "be", "not", "a", "great", "fan", "of", "merge", "more", "change", "in", "a", "single", "PR", "and", "it", "confuses", "me", "in", "reviewing", "as", "I", "have", "to", "change", "context", "probably", "it", "be", "just", "me", "be", "an", "old", "man", "so", "if", "you", "don", "t", "want", "to", "change", "that", "s", "fine", "NUMBER", "thanks", "thanks", "oh", "this", "looks", "legit", "NUMBER", "While", "LB", "be", "finishing", "off", "reading", "from", "Runner", "the", "goroutine", "above", "the", "runner_invoke", "NUMBER", "go", "code", "might", "be", "already", "write", "headers", "NUMBER", "I", "notice", "that", "most", "of", "these", "headers", "syncResponseWriter", "or", "DetachedResponseWriter", "be", "shallow", "copies", "of", "the", "original", "gin", "resp", "headers", "map", "NUMBER", "I", "don", "t", "think", "the", "issue", "be", "specific", "to", "detached", "mode", "NUMBER", "In", "both", "modes", "a", "shallow", "copy", "of", "header", "be", "be", "made", "and", "while", "the", "headers", "be", "be", "set", "the", "logger", "in", "above", "stack", "trace", "may", "be", "reading", "them", "NUMBER", "The", "logger", "merely", "needs", "status", "code", "from", "runner", "NUMBER", "There", "s", "no", "reason", "for", "it", "to", "concurrently", "read", "the", "entire", "response", "header", "map", "NUMBER", "resp", "writer", "that", "be", "safe", "be", "probably", "a", "good", "option", "NUMBER", "Otherwise", "we", "d", "need", "to", "NUMBER", "make", "sure", "in", "receiveFromRunner", "header", "NUMBER", "Set", "case", "pb", "NUMBER", "RunnerMsg_ResultStart", "be", "not", "executed", "after", "TryExec", "returns", "NUMBER", "logger", "can", "read", "a", "local", "variable", "for", "the", "fn", "http", "status", "instead", "of", "concurrent", "access", "NUMBER", "We", "can", "perhaps", "think", "of", "other", "options", "NUMBER", "IMHO", "concurrent", "safe", "resp", "writer", "itself", "be", "a", "red", "flag", "NUMBER", "runner_client", "could", "perhaps", "create", "headers", "buffer", "and", "then", "move", "these", "and", "relinquish", "ownership", "when", "do", "NUMBER", "We", "can", "avoid", "unnecessary", "IO", "copy", "this", "way", "too", "NUMBER", "w", "o", "copy", "be", "going", "to", "require", "iface", "change", "to", "bunch", "of", "places", "since", "this", "be", "abstracted", "by", "resp", "writer", "iface", "NUMBER", "For", "short", "term", "I", "think", "we", "can", "surgically", "fixup", "receiveFromRunner", "and", "TryExec", "NUMBER", "Unfortunately", "we", "had", "to", "revert", "the", "change", "to", "fix", "this", "issue", "as", "the", "solution", "propose", "broke", "detach", "mode", "NUMBER", "I", "merge", "NUMBER", "already", "NUMBER", "So", "you", "need", "to", "rebase", "on", "master", "and", "change", "the", "value", "to", "a", "pointer", "in", "api", "agent", "drivers", "docker", "cookie", "NUMBER", "go", "NUMBER", "Just", "notice", "I", "never", "approved", "this", "PR", "sorry", "Description", "I", "m", "trying", "to", "work", "out", "how", "to", "secure", "Fn", "when", "hosting", "it", "standalone", "without", "Kubernetes", "given", "the", "ext", "auth", "middleware", "LINK", "auth", "be", "broken", "NUMBER", "Even", "if", "I", "stick", "Fn", "behind", "an", "Nginx", "reverse", "proxy", "that", "performs", "authentication", "for", "all", "the", "administrative", "actions", "deploying", "function", "etc", "someone", "on", "the", "server", "itself", "could", "still", "directly", "hit", "the", "IP", "address", "for", "the", "Fn", "Docker", "container", "bypassing", "the", "Nginx", "reverse", "proxy", "NUMBER", "It", "would", "be", "nice", "to", "support", "basic", "auth", "or", "a", "Bearer", "auth", "token", "out", "of", "the", "box", "similar", "to", "what", "OpenFaaS", "do", "LINK", "Then", "I", "could", "at", "least", "use", "this", "auth", "token", "in", "the", "Nginx", "configuration", "NUMBER", "Thanks", "rdallman", "I", "did", "have", "a", "very", "brief", "look", "at", "trying", "to", "work", "out", "how", "to", "fix", "it", "but", "didn", "t", "get", "too", "far", "and", "you", "ll", "likely", "be", "able", "to", "do", "a", "better", "job", "NUMBER", "These", "be", "the", "compilation", "error", "I", "hit", "when", "build", "ext", "auth", "LINK", "auth", "issue", "NUMBER", "NUMBER", "NUMBER", "fnproject", "ext", "auth", "app_listener", "NUMBER", "go", "NUMBER", "NUMBER", "l", "NUMBER", "simple", "NUMBER", "ds", "NUMBER", "GetDatabase", "undefined", "type", "models", "NUMBER", "Datastore", "has", "no", "field", "or", "method", "GetDatabase", "NUMBER", "NUMBER", "fnproject", "ext", "auth", "app_listener", "NUMBER", "go", "NUMBER", "NUMBER", "l", "NUMBER", "simple", "NUMBER", "ds", "NUMBER", "GetDatabase", "undefined", "type", "models", "NUMBER", "Datastore", "has", "no", "field", "or", "method", "GetDatabase", "NUMBER", "NUMBER", "fnproject", "ext", "auth", "app_listener", "NUMBER", "go", "NUMBER", "NUMBER", "l", "NUMBER", "simple", "NUMBER", "ds", "NUMBER", "GetDatabase", "undefined", "type", "models", "NUMBER", "Datastore", "has", "no", "field", "or", "method", "GetDatabase", "NUMBER", "NUMBER", "fnproject", "ext", "auth", "app_listener", "NUMBER", "go", "NUMBER", "NUMBER", "filter", "NUMBER", "NameIn", "undefined", "type", "models", "NUMBER", "AppFilter", "has", "no", "field", "or", "method", "NameIn", "NUMBER", "NUMBER", "fnproject", "ext", "auth", "middleware", "NUMBER", "go", "NUMBER", "NUMBER", "m", "NUMBER", "simple", "NUMBER", "ds", "NUMBER", "GetApp", "undefined", "type", "models", "NUMBER", "Datastore", "has", "no", "field", "or", "method", "GetApp", "NUMBER", "NUMBER", "fnproject", "ext", "auth", "simple", "NUMBER", "go", "NUMBER", "NUMBER", "s", "NUMBER", "ds", "NUMBER", "GetDatabase", "undefined", "type", "models", "NUMBER", "Datastore", "has", "no", "field", "or", "method", "GetDatabase", "NUMBER", "NUMBER", "fnproject", "ext", "auth", "simple", "NUMBER", "go", "NUMBER", "NUMBER", "s", "NUMBER", "ds", "NUMBER", "GetDatabase", "undefined", "type", "models", "NUMBER", "Datastore", "has", "no", "field", "or", "method", "GetDatabase", "NUMBER", "NUMBER", "fnproject", "ext", "auth", "simple", "NUMBER", "go", "NUMBER", "NUMBER", "s", "NUMBER", "ds", "NUMBER", "GetDatabase", "undefined", "type", "models", "NUMBER", "Datastore", "has", "no", "field", "or", "method", "GetDatabase", "NUMBER", "NUMBER", "fnproject", "ext", "auth", "simple", "NUMBER", "go", "NUMBER", "NUMBER", "s", "NUMBER", "ds", "NUMBER", "GetDatabase", "undefined", "type", "models", "NUMBER", "Datastore", "has", "no", "field", "or", "method", "GetDatabase", "NUMBER", "remove", "the", "GetDatabase", "method", "from", "models", "NUMBER", "Datastore", "and", "I", "wasn", "t", "quite", "sure", "what", "to", "replace", "it", "with", "NUMBER", "Perhaps", "the", "solution", "be", "for", "ext", "auth", "to", "have", "its", "own", "database", "object", "instead", "of", "reusing", "fn", "s", "one", "but", "given", "I", "don", "t", "actually", "know", "Golang", "and", "don", "t", "have", "time", "to", "properly", "learn", "it", "I", "stopped", "looking", "into", "it", "I", "suspect", "when", "Fn", "hits", "NUMBER", "the", "API", "ABI", "will", "be", "less", "susceptible", "to", "breaking", "change", "like", "this", "NUMBER", "The", "other", "functionality", "that", "d", "be", "useful", "be", "the", "ability", "to", "disable", "creating", "new", "users", "LINK", "auth", "issue", "NUMBER", "and", "allow", "multiple", "users", "for", "one", "app", "LINK", "auth", "issue", "NUMBER", "NUMBER", "rdallman", "Any", "luck", "with", "the", "middleware", "Any", "way", "to", "help", "here", "I", "be", "going", "with", "standalone", "fn", "option", "Daniel", "NUMBER", "have", "you", "made", "any", "progress", "to", "authenticate", "fn", "i", "be", "thinking", "of", "going", "by", "iptables", "access", "only", "few", "apps", "be", "given", "access", "to", "hit", "fn", "server", "NUMBER", "TAG", "Description", "As", "a", "official", "FDK", "maintainers", "we", "commit", "ourselves", "to", "deliver", "best", "tooling", "for", "doing", "serverless", "with", "Fn", "NUMBER", "One", "of", "the", "first", "things", "we", "need", "to", "fix", "be", "the", "security", "of", "docker", "base", "images", "for", "the", "particular", "runtimes", "like", "Go", "Java", "Node", "Python", "and", "Ruby", "NUMBER", "Unfortunately", "we", "have", "obvious", "problem", "with", "our", "base", "images", "because", "certain", "package", "must", "be", "update", "ASAP", "NUMBER", "Steps", "to", "reproduce", "the", "issue", "bash", "snyk", "test", "docker", "TAG", "json", "docker", "run", "rm", "i", "denismakogon", "snyk", "filter", "NUMBER", "replace", "with", "any", "of", "the", "following", "images", "fnproject", "node", "dev", "fnproject", "python", "NUMBER", "or", "fnproject", "python", "NUMBER", "dev", "fnproject", "go", "dev", "Describe", "the", "results", "you", "received", "I", "ll", "post", "here", "some", "results", "of", "test", "our", "base", "images", "here", "nodejs", "dev", "Final", "package", "to", "update", "node", "NUMBER", "busybox", "NUMBER", "r", "NUMBER", "musl", "NUMBER", "r", "NUMBER", "python", "NUMBER", "dev", "Final", "package", "to", "update", "glibc", "libc", "bin", "NUMBER", "NUMBER", "deb", "NUMBER", "u", "NUMBER", "glibc", "libc", "NUMBER", "NUMBER", "NUMBER", "deb", "NUMBER", "u", "NUMBER", "glibc", "multiarch", "support", "NUMBER", "NUMBER", "deb", "NUMBER", "u", "NUMBER", "openssl", "libssl", "NUMBER", "NUMBER", "j", "NUMBER", "deb", "NUMBER", "u", "NUMBER", "openssl", "NUMBER", "j", "NUMBER", "deb", "NUMBER", "u", "NUMBER", "perl", "perl", "base", "NUMBER", "NUMBER", "deb", "NUMBER", "u", "NUMBER", "systemd", "libsystemd", "NUMBER", "NUMBER", "NUMBER", "deb", "NUMBER", "u", "NUMBER", "systemd", "libudev", "NUMBER", "NUMBER", "NUMBER", "deb", "NUMBER", "u", "NUMBER", "apt", "libapt", "pkg", "NUMBER", "NUMBER", "apt", "NUMBER", "and", "so", "on", "NUMBER", "Describe", "the", "results", "you", "expected", "Well", "hard", "to", "say", "but", "I", "d", "like", "to", "see", "no", "issue", "with", "package", "in", "base", "images", "NUMBER", "Action", "items", "Ask", "FDK", "maintainers", "to", "start", "work", "on", "base", "image", "fix", "Turn", "security", "check", "into", "CI", "job", "to", "prevent", "issue", "in", "future", "Thanks", "for", "starting", "this", "NUMBER", "NUMBER", "on", "the", "CI", "job", "NUMBER", "thanks", "for", "the", "feedback", "however", "i", "don", "t", "feel", "like", "there", "s", "a", "way", "to", "automate", "fix", "for", "package", "security", "issue", "because", "not", "all", "problem", "can", "be", "solve", "only", "by", "doing", "apt", "get", "update", "from", "what", "I", "know", "you", "d", "need", "to", "add", "security", "package", "index", "and", "basically", "wait", "for", "an", "update", "to", "show", "up", "but", "again", "there", "art", "two", "types", "of", "fix", "the", "one", "that", "comes", "with", "an", "upgrade", "and", "the", "one", "that", "comes", "with", "patch", "and", "the", "patch", "here", "be", "way", "too", "complex", "because", "you", "d", "need", "to", "build", "package", "by", "yourself", "NUMBER", "the", "tool", "I", "ve", "made", "shows", "only", "fixable", "issue", "via", "upgrade", "which", "be", "kinda", "can", "be", "gated", "easily", "by", "the", "CI", "NUMBER", "First", "I", "d", "like", "to", "move", "FDK", "base", "images", "out", "of", "dockers", "repo", "to", "FDK", "repos", "NUMBER", "Then", "we", "can", "gate", "the", "Dockerfiles", "at", "every", "commit", "with", "the", "tool", "I", "ve", "made", "NUMBER", "First", "bits", "of", "work", "requiring", "reviews", "LINK", "python", "pull", "NUMBER", "LINK", "node", "pull", "NUMBER", "Right", "at", "first", "I", "d", "like", "to", "have", "a", "complete", "PR", "for", "one", "of", "the", "FDKs", "i", "start", "with", "Python", "and", "then", "just", "populate", "the", "work", "across", "the", "others", "NUMBER", "Okay", "now", "both", "Python", "and", "Node", "FDKs", "use", "Anchore", "to", "run", "security", "checks", "which", "be", "totally", "cool", "because", "it", "s", "free", "and", "build", "in", "into", "Circle", "CI", "via", "orbs", "NUMBER", "The", "only", "thing", "that", "be", "still", "unclear", "be", "describe", "here", "LINK", "engine", "issue", "NUMBER", "I", "m", "really", "looking", "forward", "to", "better", "local", "logging", "for", "development", "as", "setting", "up", "a", "syslog", "server", "just", "for", "local", "development", "seems", "a", "bit", "too", "complicated", "NUMBER", "Acessing", "the", "logs", "via", "docker", "logs", "would", "be", "super", "nice", "discussion", "with", "other", "colleagues", "here", "the", "only", "concern", "be", "that", "the", "backend", "database", "could", "be", "something", "which", "already", "uses", "some", "in", "memory", "solution", "so", "the", "gain", "for", "this", "change", "could", "be", "not", "big", "and", "there", "be", "no", "way", "to", "disable", "it", "NUMBER", "In", "our", "case", "we", "use", "boltDB", "which", "uses", "a", "memory", "mapped", "data", "file", "LINK", "see", "Caveats", "paragraph", "I", "haven", "t", "do", "any", "benchmarking", "but", "it", "would", "be", "good", "to", "have", "a", "way", "to", "disable", "caching", "or", "maybe", "the", "solution", "be", "to", "implement", "a", "DataAccess", "without", "caching", "what", "do", "you", "think", "Today", "I", "update", "to", "the", "latest", "version", "docker", "fnproject", "fnserver", "NUMBER", "Everything", "be", "work", "fine", "when", "I", "m", "invoking", "the", "function", "every", "few", "seconds", "but", "if", "I", "wait", "roughly", "NUMBER", "seconds", "I", "m", "get", "an", "error", "for", "the", "first", "request", "NUMBER", "fn", "invoke", "helloworld", "helloworld", "date", "message", "Hello", "World", "Fri", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fn", "invoke", "helloworld", "helloworld", "date", "Error", "invoking", "function", "NUMBER", "status", "NUMBER", "message", "error", "receiving", "function", "response", "Fri", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Logs", "LINK", "Another", "example", "fn", "invoke", "helloworld", "helloworld", "date", "message", "Hello", "World", "Fri", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "CEST", "NUMBER", "fn", "invoke", "helloworld", "helloworld", "date", "message", "Hello", "World", "Fri", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "CEST", "NUMBER", "fn", "invoke", "helloworld", "helloworld", "date", "message", "Hello", "World", "Fri", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "CEST", "NUMBER", "fn", "invoke", "helloworld", "helloworld", "date", "message", "Hello", "World", "Fri", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "CEST", "NUMBER", "fn", "invoke", "helloworld", "helloworld", "date", "Error", "invoking", "function", "NUMBER", "status", "NUMBER", "message", "error", "receiving", "function", "response", "Fri", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "CEST", "NUMBER", "fn", "invoke", "helloworld", "helloworld", "date", "message", "Hello", "World", "Fri", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "CEST", "NUMBER", "fn", "invoke", "helloworld", "helloworld", "date", "message", "Hello", "World", "func", "NUMBER", "js", "const", "fdk", "require", "fnproject", "fdk", "fdk", "NUMBER", "handle", "function", "input", "let", "name", "World", "if", "input", "NUMBER", "name", "name", "input", "NUMBER", "name", "console", "NUMBER", "log", "ljadslfjlsadkfjklsdj", "return", "message", "Hello", "name", "fn", "version", "Client", "version", "be", "latest", "version", "NUMBER", "Server", "version", "NUMBER", "I", "ve", "experienced", "exactly", "the", "same", "issue", "here", "NUMBER", "thanks", "for", "the", "report", "NUMBER", "we", "re", "looking", "into", "this", "asap", "NUMBER", "Hi", "Can", "you", "please", "check", "if", "it", "happens", "only", "with", "node", "NUMBER", "js", "function", "Also", "would", "like", "to", "know", "what", "s", "your", "setup", "be", "NUMBER", "We", "re", "use", "the", "unmodified", "docker", "fnserver", "image", "in", "a", "nomad", "cluster", "NUMBER", "But", "that", "be", "nothing", "fancy", "and", "it", "has", "be", "work", "in", "production", "for", "months", "NUMBER", "I", "can", "not", "reproduce", "this", "with", "a", "java", "based", "function", "NUMBER", "Just", "to", "make", "sure", "can", "you", "please", "try", "go", "Python", "as", "well", "Hi", "again", "NUMBER", "Unfortunately", "I", "can", "reproduce", "as", "well", "NUMBER", "But", "that", "doesn", "t", "mean", "we", "quit", "solving", "this", "problem", "so", "what", "we", "need", "NUMBER", "Docker", "version", "NUMBER", "NUMBER", "NodeJS", "runtime", "version", "NUMBER", "NUMBER", "Execution", "logs", "please", "try", "setting", "up", "syslog", "for", "your", "applications", "see", "fn", "create", "app", "h", "NUMBER", "NUMBER", "Ideally", "We", "I", "would", "like", "to", "see", "traces", "from", "OpenTracing", "during", "a", "function", "s", "execution", "NUMBER", "There", "be", "no", "logs", "NUMBER", "I", "install", "a", "syslog", "server", "since", "you", "remove", "fn", "get", "logs", "NUMBER", "but", "that", "didn", "t", "work", "very", "well", "either", "NUMBER", "I", "execed", "into", "the", "run", "fnserver", "docker", "image", "app", "docker", "version", "Client", "Version", "NUMBER", "ce", "API", "version", "NUMBER", "Go", "version", "go", "NUMBER", "Git", "commit", "c", "NUMBER", "c", "NUMBER", "d", "NUMBER", "Built", "Wed", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "OS", "Arch", "linux", "amd", "NUMBER", "Server", "Engine", "Version", "NUMBER", "ce", "API", "version", "NUMBER", "minimum", "version", "NUMBER", "Go", "version", "go", "NUMBER", "Git", "commit", "c", "NUMBER", "c", "NUMBER", "d", "NUMBER", "Built", "Wed", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "OS", "Arch", "linux", "amd", "NUMBER", "Experimental", "false", "I", "switched", "debug", "level", "on", "NUMBER", "Here", "be", "the", "log", "from", "fnserver", "LINK", "And", "here", "be", "the", "output", "of", "docker", "events", "LINK", "I", "googled", "and", "docker", "exit", "code", "NUMBER", "seems", "to", "have", "something", "to", "do", "with", "the", "OOM", "killer", "NUMBER", "I", "update", "func", "NUMBER", "yaml", "to", "memory", "NUMBER", "My", "fnserver", "has", "NUMBER", "GB", "Ram", "and", "there", "be", "nothing", "in", "dmesg", "NUMBER", "I", "had", "fnproject", "fdk", "NUMBER", "and", "now", "tried", "NUMBER", "How", "can", "I", "produce", "traces", "According", "to", "your", "logs", "LINK", "How", "can", "I", "produce", "traces", "Since", "Fn", "support", "OpenTracking", "through", "jaeger", "binding", "you", "can", "collect", "traces", "by", "setting", "up", "the", "following", "env", "configuration", "options", "LINK", "client", "go", "environment", "variables", "More", "about", "jaeger", "you", "may", "find", "here", "LINK", "fn", "invoke", "helloworld", "helloworld", "date", "message", "Hello", "World", "Mon", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "CEST", "NUMBER", "LINK", "fn", "invoke", "helloworld", "helloworld", "date", "Error", "invoking", "function", "NUMBER", "status", "NUMBER", "message", "error", "receiving", "function", "response", "Mon", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "CEST", "NUMBER", "LINK", "Do", "you", "need", "anything", "else", "Hm", "nothing", "unusual", "there", "which", "means", "that", "issue", "be", "in", "FDK", "itself", "in", "its", "underlying", "http", "server", "probably", "need", "to", "investigate", "it", "NUMBER", "But", "it", "did", "not", "happen", "with", "an", "old", "version", "of", "fnserver", "NUMBER", "I", "do", "not", "understand", "why", "you", "can", "not", "reproduce", "it", "NUMBER", "It", "do", "happen", "on", "my", "local", "dev", "maschine", "too", "ubuntu", "NUMBER", "NUMBER", "I", "m", "going", "to", "test", "it", "with", "a", "clean", "ubuntu", "vm", "NUMBER", "Ok", "NUMBER", "I", "can", "reproduce", "it", "on", "a", "vanilla", "ubuntu", "NUMBER", "not", "that", "hard", "NUMBER", "NUMBER", "Install", "Ubuntu", "NUMBER", "NUMBER", "apt", "get", "install", "docker", "NUMBER", "io", "NUMBER", "curl", "LSs", "LINK", "sh", "NUMBER", "docker", "login", "docker", "hub", "account", "NUMBER", "docker", "run", "privileged", "p", "NUMBER", "NUMBER", "fnproject", "fnserver", "new", "console", "NUMBER", "docker", "ps", "look", "for", "the", "container", "id", "NUMBER", "docker", "exec", "it", "container_id", "bin", "sh", "NUMBER", "docker", "login", "new", "console", "NUMBER", "cd", "helloworld", "app", "from", "above", "NUMBER", "FN_REGISTRY", "username", "fn", "deploy", "Updating", "function", "helloworld", "use", "image", "username", "helloworld", "NUMBER", "root", "fnserver", "test", "helloworld", "fn", "invoke", "helloworld", "helloworld", "message", "Hello", "World", "root", "fnserver", "test", "helloworld", "fn", "invoke", "helloworld", "helloworld", "message", "Hello", "World", "root", "fnserver", "test", "helloworld", "fn", "invoke", "helloworld", "helloworld", "Error", "invoking", "function", "NUMBER", "status", "NUMBER", "message", "error", "receiving", "function", "response", "I", "can", "give", "you", "a", "ssh", "access", "on", "this", "server", "NUMBER", "You", "can", "send", "me", "your", "public", "key", "NUMBER", "docker", "run", "privileged", "p", "NUMBER", "NUMBER", "fnproject", "fnserver", "be", "that", "the", "exact", "way", "you", "run", "Fn", "server", "root", "fnserver", "test", "history", "grep", "docker", "NUMBER", "apt", "get", "install", "docker", "NUMBER", "docker", "run", "privileged", "p", "NUMBER", "NUMBER", "fnproject", "fnserver", "NUMBER", "apt", "install", "docker", "NUMBER", "io", "NUMBER", "docker", "run", "privileged", "p", "NUMBER", "NUMBER", "fnproject", "fnserver", "Okay", "i", "see", "what", "s", "going", "on", "NUMBER", "You", "ve", "do", "an", "upgrade", "but", "probably", "didn", "t", "notice", "that", "the", "whole", "Fn", "change", "a", "lot", "hopefully", "all", "change", "documented", "NUMBER", "docker", "run", "privileged", "p", "NUMBER", "NUMBER", "fnproject", "fnserver", "Short", "story", "with", "the", "following", "command", "you", "get", "a", "dead", "Fn", "server", "that", "basically", "doesn", "t", "work", "NUMBER", "from", "operation", "docs", "LINK", "docker", "run", "privileged", "rm", "name", "fns", "it", "v", "PWD", "data", "app", "data", "v", "PWD", "data", "iofs", "iofs", "e", "FN_IOFS_DOCKER_PATH", "PWD", "data", "iofs", "e", "FN_IOFS_PATH", "iofs", "p", "NUMBER", "NUMBER", "fnproject", "fnserver", "that", "s", "the", "bare", "minimum", "command", "to", "run", "Fn", "server", "as", "a", "container", "NUMBER", "that", "s", "why", "for", "a", "single", "instance", "of", "the", "Fn", "we", "strongly", "recommend", "to", "use", "fn", "start", "NUMBER", "Ok", "but", "that", "did", "not", "change", "anything", "NUMBER", "I", "reinstalled", "Ubuntu", "NUMBER", "just", "to", "be", "sure", "NUMBER", "NUMBER", "Install", "Ubuntu", "NUMBER", "NUMBER", "apt", "get", "install", "docker", "NUMBER", "io", "NUMBER", "curl", "LSs", "LINK", "sh", "NUMBER", "docker", "login", "docker", "hub", "account", "NUMBER", "fn", "start", "root", "fnserver", "test", "helloworld", "FN_REGISTRY", "username", "fn", "deploy", "root", "fnserver", "test", "helloworld", "fn", "invoke", "helloworld", "helloworld", "message", "Hello", "World", "root", "fnserver", "test", "helloworld", "fn", "invoke", "helloworld", "helloworld", "message", "Hello", "World", "root", "fnserver", "test", "helloworld", "fn", "invoke", "helloworld", "helloworld", "Error", "invoking", "function", "NUMBER", "status", "NUMBER", "message", "error", "receiving", "function", "response", "But", "the", "log", "change", "LINK", "Here", "be", "the", "helloworld", "app", "LINK", "Can", "you", "make", "sure", "that", "SElinux", "be", "disabled", "on", "your", "host", "Still", "can", "t", "reproduce", "on", "local", "Fn", "ubuntu", "VM", "k", "NUMBER", "s", "Fn", "deployment", "fn", "invoke", "node", "helloworld", "date", "message", "Hello", "World", "Mon", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "EEST", "NUMBER", "fn", "invoke", "node", "helloworld", "date", "message", "Hello", "World", "Mon", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "EEST", "NUMBER", "fn", "invoke", "node", "helloworld", "date", "message", "Hello", "World", "Mon", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "EEST", "NUMBER", "fn", "invoke", "node", "helloworld", "date", "message", "Hello", "World", "Mon", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "EEST", "NUMBER", "fn", "invoke", "node", "helloworld", "date", "message", "Hello", "World", "Mon", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "EEST", "NUMBER", "fn", "invoke", "node", "helloworld", "date", "message", "Hello", "World", "Mon", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "EEST", "NUMBER", "fn", "invoke", "node", "helloworld", "date", "message", "Hello", "World", "Mon", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "EEST", "NUMBER", "fn", "invoke", "node", "helloworld", "date", "message", "Hello", "World", "Mon", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "EEST", "NUMBER", "fn", "invoke", "node", "helloworld", "date", "message", "Hello", "World", "Mon", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "EEST", "NUMBER", "What", "version", "do", "you", "have", "I", "narrowed", "it", "down", "to", "version", "NUMBER", "v", "NUMBER", "root", "fnserver", "test", "helloworld", "sh", "test", "NUMBER", "sh", "message", "Hello", "World", "message", "Hello", "World", "v", "NUMBER", "root", "fnserver", "test", "helloworld", "sh", "test", "NUMBER", "sh", "message", "Hello", "World", "Error", "invoking", "function", "NUMBER", "status", "NUMBER", "message", "error", "receiving", "function", "response", "test", "NUMBER", "sh", "bin", "sh", "fn", "invoke", "helloworld", "helloworld", "sleep", "NUMBER", "fn", "invoke", "helloworld", "helloworld", "Okay", "now", "I", "see", "the", "error", "appears", "true", "since", "NUMBER", "node", "function", "be", "not", "run", "flawlessly", "NUMBER", "Weird", "that", "only", "node", "function", "affected", "NUMBER", "The", "only", "change", "were", "introduce", "to", "UDS", "management", "were", "a", "part", "of", "LINK", "rdallman", "would", "be", "good", "to", "get", "some", "help", "here", "NUMBER", "rdallman", "it", "s", "good", "to", "go", "NUMBER", "Big", "green", "Merge", "button", "waiting", "for", "you", "NUMBER", "While", "we", "re", "on", "the", "topic", "we", "should", "probably", "build", "with", "go", "mod", "enable", "in", "CI", "a", "la", "LINK", "Hello", "all", "NUMBER", "I", "ve", "be", "enjoying", "trying", "out", "Fn", "and", "things", "seem", "to", "be", "work", "pretty", "well", "for", "me", "run", "a", "simple", "server", "with", "fn", "start", "and", "even", "run", "my", "own", "server", "use", "docker", "run", "so", "I", "m", "good", "to", "go", "on", "simple", "use", "cases", "NUMBER", "I", "ve", "come", "a", "bit", "unstuck", "however", "trying", "to", "get", "Fn", "run", "on", "Kubernetes", "NUMBER", "I", "m", "aware", "that", "this", "be", "a", "distributed", "configuration", "involving", "several", "different", "fnproject", "fnserver", "Node", "Types", "and", "have", "read", "up", "on", "that", "topology", "here", "LINK", "fn", "beyond", "fn", "start", "NUMBER", "ee", "NUMBER", "baf", "NUMBER", "fb", "NUMBER", "and", "here", "LINK", "I", "m", "aware", "of", "the", "Fn", "helm", "chart", "LINK", "helm", "and", "I", "m", "use", "that", "as", "my", "starting", "point", "but", "to", "try", "and", "get", "my", "head", "around", "things", "a", "little", "my", "goal", "was", "to", "try", "and", "get", "things", "run", "use", "a", "simple", "NodePort", "service", "type", "to", "run", "on", "my", "local", "machine", "NUMBER", "I", "m", "run", "a", "very", "simple", "local", "docker", "registry", "use", "the", "registry", "NUMBER", "image", "on", "localhost", "NUMBER", "and", "my", "setup", "be", "work", "fine", "with", "OpenFaaS", "which", "I", "set", "up", "as", "a", "control", "to", "try", "and", "rule", "out", "any", "silly", "issue", "with", "my", "basic", "set", "up", "NUMBER", "I", "ll", "try", "to", "give", "some", "detail", "of", "exactly", "where", "I", "m", "at", "as", "follows", "I", "created", "a", "deployment", "fn", "NUMBER", "yaml", "use", "the", "helm", "chart", "as", "a", "template", "e", "NUMBER", "g", "NUMBER", "git", "clone", "LINK", "helm", "NUMBER", "git", "helm", "dep", "build", "fn", "helm", "fn", "helm", "template", "name", "fn", "namespace", "fn", "fn", "helm", "fn", "fn", "NUMBER", "yaml", "to", "keep", "things", "tidy", "I", "created", "a", "fn", "namespace", "on", "my", "K", "NUMBER", "s", "cluster", "kubectl", "create", "namespace", "fn", "Next", "I", "edit", "the", "fn", "NUMBER", "yaml", "to", "include", "the", "fn", "namespace", "and", "add", "the", "NodePort", "stuff", "NUMBER", "The", "relevant", "parts", "be", "below", "apart", "from", "add", "the", "fn", "namespace", "I", "haven", "t", "change", "the", "fn", "mysql", "fn", "redis", "fn", "fn", "flow", "or", "fn", "fn", "ui", "parts", "I", "m", "just", "focussing", "on", "the", "core", "function", "CRUD", "and", "invocation", "parts", "ATM", "so", "the", "ke", "parts", "be", "Source", "fn", "template", "fn", "runner", "node", "service", "NUMBER", "yaml", "apiVersion", "v", "NUMBER", "kind", "Service", "metadata", "name", "fn", "fn", "runner", "namespace", "fn", "labels", "app", "fn", "fn", "chart", "fn", "NUMBER", "heritage", "Tiller", "release", "fn", "spec", "type", "ClusterIP", "ports", "name", "grpc", "port", "NUMBER", "targetPort", "NUMBER", "selector", "app", "fn", "fn", "role", "runner", "Source", "fn", "template", "fn", "service", "NUMBER", "yaml", "apiVersion", "v", "NUMBER", "kind", "Service", "metadata", "name", "fn", "fn", "namespace", "fn", "labels", "app", "fn", "fn", "chart", "fn", "NUMBER", "heritage", "Tiller", "release", "fn", "spec", "type", "ClusterIP", "type", "NodePort", "ports", "name", "api", "port", "NUMBER", "targetPort", "NUMBER", "nodePort", "NUMBER", "name", "runner", "lb", "port", "NUMBER", "targetPort", "NUMBER", "nodePort", "NUMBER", "selector", "app", "fn", "fn", "role", "fn", "service", "Source", "fn", "template", "fn", "deployment", "NUMBER", "yaml", "apiVersion", "apps", "v", "NUMBER", "beta", "NUMBER", "kind", "Deployment", "metadata", "name", "fn", "fn", "namespace", "fn", "labels", "app", "fn", "fn", "chart", "fn", "NUMBER", "heritage", "Tiller", "release", "fn", "spec", "replicas", "NUMBER", "template", "metadata", "labels", "app", "fn", "fn", "chart", "fn", "NUMBER", "heritage", "Tiller", "release", "fn", "role", "fn", "service", "spec", "container", "name", "api", "image", "fnproject", "fnserver", "latest", "imagePullPolicy", "Always", "resources", "limits", "cpu", "NUMBER", "m", "memory", "NUMBER", "Gi", "request", "cpu", "NUMBER", "m", "memory", "NUMBER", "Mi", "securityContext", "privileged", "true", "ports", "containerPort", "NUMBER", "readinessProbe", "httpGet", "path", "v", "NUMBER", "apps", "port", "NUMBER", "initialDelaySeconds", "NUMBER", "periodSeconds", "NUMBER", "env", "name", "FN_DB_PASSWD", "valueFrom", "secretKeyRef", "name", "fn", "mysql", "key", "mysql", "password", "name", "FN_DB_HOST", "value", "fn", "mysql", "name", "FN_MQ_HOST", "value", "fn", "redis", "name", "FN_PORT", "value", "NUMBER", "name", "FN_NODE_TYPE", "value", "api", "name", "FN_PUBLIC_LB_URL", "value", "LINK", "value", "LINK", "name", "FN_DB_URL", "value", "mysql", "fnapp", "FN_DB_PASSWD", "tcp", "FN_DB_HOST", "NUMBER", "fndb", "name", "FN_LOG_LEVEL", "value", "INFO", "name", "FN_MQ_URL", "value", "redis", "FN_MQ_HOST", "NUMBER", "name", "runner", "lb", "image", "fnproject", "fnserver", "latest", "imagePullPolicy", "Always", "resources", "limits", "cpu", "NUMBER", "m", "memory", "NUMBER", "Gi", "request", "cpu", "NUMBER", "m", "memory", "NUMBER", "Mi", "securityContext", "privileged", "true", "ports", "containerPort", "NUMBER", "env", "name", "FN_NODE_TYPE", "value", "lb", "name", "FN_GRPC_PORT", "value", "NUMBER", "name", "FN_PORT", "value", "NUMBER", "name", "FN_RUNNER_API_URL", "value", "LINK", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "NUMBER", "name", "FN_RUNNER_ADDRESSES", "value", "fn", "fn", "runner", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "NUMBER", "name", "FN_LOG_LEVEL", "value", "INFO", "Source", "fn", "template", "fn", "runner", "node", "deployment", "NUMBER", "yaml", "apiVersion", "apps", "v", "NUMBER", "beta", "NUMBER", "kind", "Deployment", "metadata", "name", "fn", "fn", "runner", "namespace", "fn", "labels", "app", "fn", "fn", "chart", "fn", "NUMBER", "heritage", "Tiller", "release", "fn", "spec", "replicas", "NUMBER", "template", "metadata", "labels", "app", "fn", "fn", "chart", "fn", "NUMBER", "heritage", "Tiller", "release", "fn", "role", "runner", "spec", "container", "name", "runner", "image", "fnproject", "fnserver", "latest", "imagePullPolicy", "Always", "resources", "limits", "cpu", "NUMBER", "m", "memory", "NUMBER", "Gi", "request", "cpu", "NUMBER", "m", "memory", "NUMBER", "Gi", "securityContext", "privileged", "true", "ports", "containerPort", "NUMBER", "env", "name", "FN_NODE_TYPE", "value", "pure", "runner", "name", "FN_GRPC_PORT", "value", "NUMBER", "name", "FN_LOG_LEVEL", "value", "INFO", "The", "relevent", "bits", "really", "be", "that", "in", "the", "fn", "service", "I", "change", "the", "type", "to", "NodePort", "and", "add", "nodePort", "NUMBER", "to", "api", "and", "nodePort", "NUMBER", "to", "runner", "lb", "NUMBER", "The", "other", "change", "be", "that", "under", "fn", "deployment", "I", "change", "the", "FN_PUBLIC_LB_URL", "value", "from", "LINK", "to", "LINK", "When", "I", "deploy", "this", "with", "kubectl", "apply", "f", "NUMBER", "fn", "NUMBER", "yaml", "I", "see", "a", "successful", "deployment", "in", "the", "Kubernetes", "dashboard", "NUMBER", "I", "have", "set", "up", "my", "context", "to", "point", "to", "the", "required", "API", "URL", "and", "registry", "fn", "list", "contexts", "CURRENT", "NAME", "PROVIDER", "API", "URL", "REGISTRY", "default", "default", "LINK", "localhost", "NUMBER", "and", "fn", "version", "be", "happy", "correctly", "returning", "the", "server", "version", "fn", "version", "Client", "version", "be", "latest", "version", "NUMBER", "Server", "version", "NUMBER", "As", "far", "as", "I", "can", "see", "it", "looks", "like", "my", "API", "be", "run", "fine", "and", "I", "seem", "to", "be", "able", "to", "correctly", "run", "the", "CRUD", "operations", "my", "issue", "be", "with", "the", "fn", "invoke", "which", "be", "clearly", "rather", "important", "I", "ve", "test", "use", "LINK", "as", "follows", "fn", "init", "runtime", "go", "trigger", "http", "gofn", "Creating", "function", "at", "gofn", "Function", "boilerplate", "generate", "NUMBER", "func", "NUMBER", "yaml", "created", "NUMBER", "fn", "create", "app", "goapp", "Successfully", "created", "app", "goapp", "fn", "verbose", "deploy", "app", "goapp", "Deploying", "gofn", "to", "app", "goapp", "Bumped", "to", "version", "NUMBER", "Building", "image", "localhost", "NUMBER", "gofn", "NUMBER", "FN_REGISTRY", "localhost", "NUMBER", "Current", "Context", "default", "Sending", "build", "context", "to", "Docker", "daemon", "NUMBER", "kB", "Step", "NUMBER", "NUMBER", "FROM", "fnproject", "go", "dev", "as", "build", "stage", "dev", "Pulling", "from", "fnproject", "go", "cd", "NUMBER", "e", "NUMBER", "Pull", "complete", "NUMBER", "e", "NUMBER", "b", "NUMBER", "dfc", "NUMBER", "Pull", "complete", "NUMBER", "c", "NUMBER", "fd", "NUMBER", "a", "Pull", "complete", "daee", "NUMBER", "ea", "NUMBER", "d", "Pull", "complete", "NUMBER", "dd", "NUMBER", "cffb", "NUMBER", "bd", "Pull", "complete", "NUMBER", "ef", "NUMBER", "ff", "NUMBER", "b", "NUMBER", "Pull", "complete", "Digest", "sha", "NUMBER", "fad", "NUMBER", "d", "NUMBER", "e", "NUMBER", "fe", "NUMBER", "de", "NUMBER", "c", "NUMBER", "d", "NUMBER", "e", "NUMBER", "f", "NUMBER", "fdd", "NUMBER", "d", "NUMBER", "bba", "NUMBER", "e", "NUMBER", "c", "NUMBER", "b", "NUMBER", "b", "NUMBER", "f", "NUMBER", "a", "NUMBER", "Status", "Downloaded", "newer", "image", "for", "fnproject", "go", "dev", "NUMBER", "c", "NUMBER", "fb", "NUMBER", "a", "NUMBER", "e", "NUMBER", "Step", "NUMBER", "NUMBER", "WORKDIR", "function", "Running", "in", "NUMBER", "d", "NUMBER", "f", "NUMBER", "cbf", "NUMBER", "c", "Removing", "intermediate", "container", "NUMBER", "d", "NUMBER", "f", "NUMBER", "cbf", "NUMBER", "c", "d", "NUMBER", "fe", "NUMBER", "e", "NUMBER", "aa", "NUMBER", "a", "Step", "NUMBER", "NUMBER", "RUN", "go", "get", "u", "github", "NUMBER", "com", "golang", "dep", "cmd", "dep", "Running", "in", "NUMBER", "d", "NUMBER", "d", "NUMBER", "Removing", "intermediate", "container", "NUMBER", "d", "NUMBER", "d", "NUMBER", "a", "NUMBER", "b", "NUMBER", "de", "NUMBER", "e", "NUMBER", "Step", "NUMBER", "NUMBER", "ADD", "NUMBER", "go", "src", "func", "NUMBER", "fd", "NUMBER", "a", "NUMBER", "e", "NUMBER", "Step", "NUMBER", "NUMBER", "RUN", "cd", "go", "src", "func", "dep", "ensure", "Running", "in", "NUMBER", "e", "NUMBER", "f", "NUMBER", "c", "NUMBER", "Removing", "intermediate", "container", "NUMBER", "e", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "c", "NUMBER", "fadec", "NUMBER", "Step", "NUMBER", "NUMBER", "RUN", "cd", "go", "src", "func", "go", "build", "o", "func", "Running", "in", "NUMBER", "ff", "NUMBER", "d", "NUMBER", "cdd", "Removing", "intermediate", "container", "NUMBER", "ff", "NUMBER", "d", "NUMBER", "cdd", "NUMBER", "a", "NUMBER", "d", "NUMBER", "Step", "NUMBER", "NUMBER", "FROM", "fnproject", "go", "latest", "Pulling", "from", "fnproject", "go", "ba", "NUMBER", "f", "NUMBER", "deea", "NUMBER", "d", "Pull", "complete", "a", "NUMBER", "fe", "NUMBER", "Pull", "complete", "Digest", "sha", "NUMBER", "d", "NUMBER", "b", "NUMBER", "a", "NUMBER", "fc", "NUMBER", "d", "NUMBER", "bf", "NUMBER", "a", "NUMBER", "f", "NUMBER", "f", "NUMBER", "fec", "NUMBER", "dc", "NUMBER", "ade", "NUMBER", "dc", "NUMBER", "Status", "Downloaded", "newer", "image", "for", "fnproject", "go", "latest", "d", "NUMBER", "de", "NUMBER", "fe", "NUMBER", "Step", "NUMBER", "NUMBER", "WORKDIR", "function", "Running", "in", "eac", "NUMBER", "b", "NUMBER", "cc", "NUMBER", "be", "NUMBER", "Removing", "intermediate", "container", "eac", "NUMBER", "b", "NUMBER", "cc", "NUMBER", "be", "NUMBER", "NUMBER", "f", "NUMBER", "b", "NUMBER", "c", "NUMBER", "Step", "NUMBER", "NUMBER", "COPY", "from", "build", "stage", "go", "src", "func", "func", "function", "NUMBER", "c", "NUMBER", "Step", "NUMBER", "NUMBER", "ENTRYPOINT", "NUMBER", "func", "Running", "in", "NUMBER", "bf", "NUMBER", "a", "NUMBER", "bf", "Removing", "intermediate", "container", "NUMBER", "bf", "NUMBER", "a", "NUMBER", "bf", "NUMBER", "be", "NUMBER", "ac", "NUMBER", "a", "Successfully", "build", "NUMBER", "be", "NUMBER", "ac", "NUMBER", "a", "Successfully", "tag", "localhost", "NUMBER", "gofn", "NUMBER", "Parts", "localhost", "NUMBER", "gofn", "NUMBER", "Pushing", "localhost", "NUMBER", "gofn", "NUMBER", "to", "docker", "registry", "NUMBER", "The", "push", "refers", "to", "repository", "localhost", "NUMBER", "gofn", "NUMBER", "e", "NUMBER", "c", "NUMBER", "Pushed", "NUMBER", "b", "NUMBER", "a", "NUMBER", "Pushed", "db", "NUMBER", "edf", "NUMBER", "Pushed", "NUMBER", "b", "NUMBER", "a", "NUMBER", "a", "NUMBER", "Pushed", "NUMBER", "digest", "sha", "NUMBER", "d", "NUMBER", "a", "NUMBER", "d", "NUMBER", "d", "NUMBER", "d", "NUMBER", "a", "NUMBER", "a", "NUMBER", "a", "NUMBER", "c", "NUMBER", "b", "NUMBER", "e", "NUMBER", "a", "NUMBER", "b", "NUMBER", "a", "NUMBER", "deb", "NUMBER", "size", "NUMBER", "Updating", "function", "gofn", "use", "image", "localhost", "NUMBER", "gofn", "NUMBER", "Successfully", "created", "function", "gofn", "with", "localhost", "NUMBER", "gofn", "NUMBER", "Successfully", "created", "trigger", "gofn", "Trigger", "Endpoint", "LINK", "As", "far", "as", "I", "can", "see", "this", "all", "looks", "good", "so", "far", "and", "the", "Trigger", "Endpoint", "port", "be", "what", "I", "think", "I", "m", "expecting", "it", "to", "be", "given", "how", "I", "set", "up", "the", "fn", "service", "NodePort", "and", "if", "I", "check", "my", "local", "registry", "by", "browsing", "to", "LINK", "_catalog", "I", "can", "see", "gofn", "NUMBER", "however", "NUMBER", "If", "I", "now", "do", "fn", "invoke", "goapp", "gofn", "The", "call", "hangs", "for", "a", "while", "before", "eventually", "returning", "with", "Error", "invoking", "function", "NUMBER", "status", "NUMBER", "message", "internal", "server", "error", "Following", "the", "instructions", "in", "LINK", "fn", "beyond", "fn", "start", "NUMBER", "ee", "NUMBER", "baf", "NUMBER", "fb", "NUMBER", "I", "tried", "fn", "inspect", "fn", "goapp", "gofn", "which", "returns", "annotations", "fnproject", "NUMBER", "io", "fn", "invokeEndpoint", "LINK", "app_id", "NUMBER", "D", "NUMBER", "M", "NUMBER", "GH", "NUMBER", "BT", "NUMBER", "G", "NUMBER", "A", "NUMBER", "created_at", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "id", "NUMBER", "D", "NUMBER", "M", "NUMBER", "KVR", "NUMBER", "BT", "NUMBER", "G", "NUMBER", "A", "NUMBER", "idle_timeout", "NUMBER", "image", "localhost", "NUMBER", "gofn", "NUMBER", "memory", "NUMBER", "name", "gofn", "timeout", "NUMBER", "updated_at", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "again", "the", "IP", "port", "of", "the", "invokeEndpoint", "be", "what", "I", "think", "I", "was", "expecting", "NUMBER", "If", "I", "do", "curl", "LINK", "I", "see", "goto", "LINK", "hello", "world", "But", "I", "think", "that", "s", "the", "welcome", "from", "the", "base", "endpoint", "not", "the", "function", "cause", "the", "function", "has", "Hello", "World", "with", "capitals", "curl", "LINK", "yields", "message", "Method", "not", "allow", "GET", "invoke", "NUMBER", "D", "NUMBER", "M", "NUMBER", "KVR", "NUMBER", "BT", "NUMBER", "G", "NUMBER", "A", "NUMBER", "and", "curl", "LINK", "which", "be", "the", "trigger", "endpoint", "hangs", "for", "a", "bit", "and", "returns", "message", "internal", "server", "error", "I", "d", "really", "appreciate", "any", "thoughts", "on", "this", "I", "appreciate", "that", "use", "NodePort", "isn", "t", "the", "recommended", "approach", "but", "as", "far", "as", "I", "can", "see", "it", "should", "be", "possible", "to", "make", "it", "work", "OK", "and", "much", "of", "what", "I", "m", "seeing", "looks", "like", "I", "m", "expecting", "apart", "from", "the", "invoke", "not", "work", "of", "course", "D", "NUMBER", "As", "I", "mention", "previously", "I", "get", "OpenFaaS", "work", "on", "the", "same", "set", "up", "so", "I", "think", "the", "underlying", "infrastructure", "be", "basically", "sound", "NUMBER", "MTIA", "Hi", "curl", "LINK", "Invoke", "API", "allows", "only", "HTTP", "POST", "NUMBER", "curl", "LINK", "which", "be", "the", "trigger", "endpoint", "hangs", "for", "a", "bit", "and", "returns", "message", "internal", "server", "error", "Meaning", "that", "you", "have", "problem", "with", "communication", "between", "Fn", "API", "and", "Fn", "LB", "nodes", "NUMBER", "You", "d", "need", "to", "investigate", "what", "s", "going", "in", "LB", "logs", "i", "NUMBER", "e", "NUMBER", "why", "it", "gives", "NUMBER", "back", "NUMBER", "Anyways", "the", "recommended", "approach", "be", "to", "use", "an", "ingress", "controller", "or", "LoadBalancer", "but", "not", "NodePort", "NUMBER", "Hi", "but", "that", "curl", "was", "only", "one", "aspect", "of", "the", "issue", "and", "doesn", "t", "explain", "why", "the", "basic", "fn", "invoke", "goapp", "gofn", "fail", "NUMBER", "I", "actually", "only", "tried", "the", "curl", "direct", "against", "the", "invoke", "endpoint", "to", "see", "what", "happens", "and", "as", "I", "also", "mention", "I", "tried", "a", "curl", "against", "the", "trigger", "endpoint", "too", "via", "curl", "LINK", "That", "be", "the", "endpoint", "mention", "in", "the", "fn", "verbose", "deploy", "app", "goapp", "If", "I", "follow", "the", "Invoke", "with", "Curl", "from", "the", "tutorial", "LINK", "replacing", "LINK", "with", "my", "host", "and", "port", "e", "NUMBER", "g", "NUMBER", "curl", "H", "Content", "Type", "application", "json", "LINK", "trigger", "I", "see", "it", "hang", "and", "eventually", "return", "message", "internal", "server", "error", "So", "the", "fact", "that", "I", "use", "GET", "on", "the", "invoke", "API", "for", "one", "case", "above", "be", "a", "bit", "of", "a", "red", "herring", "NUMBER", "Indeed", "if", "I", "do", "curl", "X", "POST", "LINK", "NUMBER", "I", "see", "message", "internal", "server", "error", "I", "appreciate", "that", "the", "recommended", "approach", "be", "to", "use", "an", "ingress", "controller", "or", "LoadBalancer", "but", "not", "NodePort", "NUMBER", "and", "I", "mention", "that", "I", "was", "aware", "of", "that", "in", "my", "original", "post", "but", "the", "point", "be", "that", "it", "should", "be", "able", "to", "make", "it", "work", "and", "the", "point", "of", "trying", "it", "be", "to", "see", "how", "it", "all", "hangs", "together", "so", "I", "was", "really", "looking", "for", "some", "advice", "in", "what", "I", "might", "be", "doing", "wrong", "in", "terms", "of", "the", "config", "because", "I", "thought", "that", "the", "main", "piece", "of", "config", "I", "needed", "was", "to", "set", "the", "FN_PUBLIC_LB_URL", "and", "I", "think", "that", "s", "looking", "OK", "NUMBER", "Re", "Meaning", "that", "you", "have", "problem", "with", "communication", "between", "Fn", "API", "and", "Fn", "LB", "nodes", "I", "pretty", "much", "realised", "that", "but", "the", "crux", "of", "my", "question", "was", "actually", "why", "which", "be", "why", "I", "was", "ask", "NUMBER", "I", "m", "not", "entirely", "sure", "where", "to", "look", "I", "was", "hoping", "my", "original", "post", "had", "enough", "detail", "for", "some", "insight", "NUMBER", "Re", "You", "d", "need", "to", "investigate", "what", "s", "going", "in", "LB", "logs", "i", "NUMBER", "e", "NUMBER", "why", "it", "gives", "NUMBER", "back", "NUMBER", "could", "you", "give", "some", "suggestions", "on", "which", "might", "be", "the", "most", "useful", "logs", "to", "look", "at", "and", "where", "they", "might", "be", "located", "so", "far", "a", "basic", "stand", "alone", "Fn", "server", "has", "just", "worked", "so", "I", "ve", "get", "limited", "experience", "digging", "around", "the", "Fn", "logs", "NUMBER", "Looking", "at", "the", "fn", "fn", "runner", "logs", "under", "Pods", "in", "the", "K", "NUMBER", "s", "dashboard", "doesn", "t", "yield", "too", "much", "and", "looks", "kind", "of", "what", "I", "see", "when", "I", "stand", "ap", "a", "Fn", "server", "stand", "alone", "that", "be", "the", "Pod", "logs", "end", "up", "with", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "available", "memory", "cgroup_limit", "NUMBER", "head_room", "NUMBER", "total_memory", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "ram", "reservations", "avail_memory", "NUMBER", "ram_async_hw_mark", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "available", "cpu", "avail_cpu", "NUMBER", "total_cpu", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "cpu", "reservations", "cpu", "NUMBER", "cpu_async_hw_mark", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "Severaly", "Limited", "CPU", "cpu", "TAG", "Looking", "at", "the", "fn", "fn", "runner", "logs", "That", "s", "not", "where", "you", "should", "look", "for", "lb", "node", "be", "the", "one", "which", "accepts", "invocations", "you", "d", "need", "to", "look", "there", "NUMBER", "You", "need", "to", "trace", "what", "s", "going", "on", "in", "lb", "container", "logs", "in", "order", "to", "see", "why", "the", "node", "gives", "you", "internal", "server", "error", "NUMBER", "One", "thing", "I", "m", "wondering", "about", "though", "looking", "at", "the", "Kubernetes", "config", "I", "can", "t", "see", "any", "volume", "mounts", "referring", "to", "the", "Docker", "socket", "so", "be", "I", "correct", "in", "thinking", "that", "the", "Fn", "server", "container", "be", "run", "in", "Docker", "in", "Docker", "mode", "true", "rdallman", "issue", "be", "not", "relate", "to", "IOFS", "because", "with", "ingress", "controller", "or", "LoadBalancer", "service", "type", "deployment", "works", "as", "expected", "with", "no", "problem", "NUMBER", "I", "feel", "like", "that", "s", "something", "relate", "to", "networking", "cause", "by", "NodePort", "NUMBER", "In", "the", "logs", "for", "runner", "lb", "I", "m", "seeing", "the", "following", "after", "the", "fail", "invoke", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Fn", "serving", "on", "NUMBER", "type", "lb", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "error", "from", "API", "server", "retrying", "error", "Get", "LINK", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "NUMBER", "v", "NUMBER", "fns", "NUMBER", "D", "NUMBER", "MPM", "NUMBER", "K", "NUMBER", "BT", "NUMBER", "G", "NUMBER", "A", "NUMBER", "dial", "tcp", "lookup", "fn", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "Try", "again", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "error", "from", "API", "server", "retrying", "error", "Get", "LINK", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "NUMBER", "v", "NUMBER", "fns", "NUMBER", "D", "NUMBER", "MPM", "NUMBER", "K", "NUMBER", "BT", "NUMBER", "G", "NUMBER", "A", "NUMBER", "dial", "tcp", "lookup", "fn", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "Try", "again", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "error", "from", "API", "server", "retrying", "error", "Get", "LINK", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "NUMBER", "v", "NUMBER", "fns", "NUMBER", "D", "NUMBER", "MPM", "NUMBER", "K", "NUMBER", "BT", "NUMBER", "G", "NUMBER", "A", "NUMBER", "dial", "tcp", "lookup", "fn", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "Try", "again", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "error", "from", "API", "server", "retrying", "error", "Get", "LINK", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "NUMBER", "v", "NUMBER", "fns", "NUMBER", "D", "NUMBER", "MPM", "NUMBER", "K", "NUMBER", "BT", "NUMBER", "G", "NUMBER", "A", "NUMBER", "dial", "tcp", "lookup", "fn", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "Try", "again", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "error", "from", "API", "server", "retrying", "error", "Get", "LINK", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "NUMBER", "v", "NUMBER", "fns", "NUMBER", "D", "NUMBER", "MPM", "NUMBER", "K", "NUMBER", "BT", "NUMBER", "G", "NUMBER", "A", "NUMBER", "dial", "tcp", "lookup", "fn", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "Try", "again", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "error", "from", "API", "server", "retrying", "error", "Get", "LINK", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "NUMBER", "v", "NUMBER", "fns", "NUMBER", "D", "NUMBER", "MPM", "NUMBER", "K", "NUMBER", "BT", "NUMBER", "G", "NUMBER", "A", "NUMBER", "dial", "tcp", "lookup", "fn", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "Try", "again", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "internal", "server", "error", "action", "server", "NUMBER", "handleFnInvokeCall", "fm", "error", "Get", "LINK", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "NUMBER", "v", "NUMBER", "fns", "NUMBER", "D", "NUMBER", "MPM", "NUMBER", "K", "NUMBER", "BT", "NUMBER", "G", "NUMBER", "A", "NUMBER", "dial", "tcp", "lookup", "fn", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "Try", "again", "fn_id", "NUMBER", "D", "NUMBER", "MPM", "NUMBER", "K", "NUMBER", "BT", "NUMBER", "G", "NUMBER", "A", "NUMBER", "stack", "goroutine", "NUMBER", "run", "nruntime", "debug", "NUMBER", "Stack", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "c", "NUMBER", "n", "t", "usr", "local", "go", "src", "runtime", "debug", "stack", "NUMBER", "go", "NUMBER", "NUMBER", "xa", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "HandleErrorResponse", "NUMBER", "x", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "fdc", "NUMBER", "be", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "error_response", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "handleErrorResponse", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "error_response", "NUMBER", "go", "NUMBER", "NUMBER", "xa", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "handleFnInvokeCall", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "runner_fninvoke", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "da", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "handleFnInvokeCall", "fm", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "runMiddleware", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "middleware", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "rootMiddlewareWrapper", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "middleware", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "panicWrap", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "panicWrap", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "apiMetricsWrap", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "traceWrap", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "loggerWrap", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ea", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Engine", "NUMBER", "handleHTTPRequest", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "gin", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Engine", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "ec", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "gin", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "go", "NUMBER", "opencensus", "NUMBER", "io", "plugin", "ochttp", "NUMBER", "Handler", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "ec", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "go", "NUMBER", "opencensus", "NUMBER", "io", "plugin", "ochttp", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "nnet", "http", "NUMBER", "serverHandler", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "ac", "NUMBER", "e", "NUMBER", "NUMBER", "xc", "NUMBER", "n", "t", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "xbc", "nnet", "http", "NUMBER", "conn", "NUMBER", "serve", "NUMBER", "xc", "NUMBER", "ca", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "c", "NUMBER", "n", "t", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ncreated", "by", "net", "http", "NUMBER", "Server", "NUMBER", "Serve", "n", "t", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "b", "n", "That", "fn", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "looks", "interesting", "NUMBER", "In", "my", "fn", "NUMBER", "yaml", "I", "had", "to", "replace", "the", "FN_PUBLIC_LB_URL", "from", "value", "LINK", "to", "value", "LINK", "I", "m", "thinking", "then", "that", "I", "probably", "need", "to", "replace", "the", "FN_RUNNER_API_URL", "from", "value", "LINK", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "NUMBER", "to", "value", "LINK", "which", "be", "the", "API", "URL", "point", "to", "by", "the", "fn", "CLI", "though", "not", "sure", "why", "it", "s", "not", "seeing", "the", "internal", "address", "I", "ve", "also", "experienced", "issue", "elsewhere", "where", "I", "ve", "needed", "a", "closing", "period", "dot", "after", "NUMBER", "local", "addressess", "e", "NUMBER", "g", "NUMBER", "I", "m", "wondering", "to", "try", "value", "fn", "fn", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "NUMBER", "too", "to", "see", "if", "that", "makes", "a", "difference", "I", "ll", "try", "tweaking", "those", "but", "please", "keep", "the", "thoughts", "come", "as", "there", "might", "well", "be", "more", "than", "one", "thing", "cause", "my", "woes", "I", "ve", "still", "get", "a", "nagging", "feeling", "that", "the", "DinD", "might", "be", "having", "an", "issue", "seeing", "my", "slightly", "quick", "and", "dirty", "local", "container", "registry", "Thanks", "for", "all", "the", "replies", "so", "far", "On", "the", "IOFS", "things", "I", "definitely", "needed", "them", "when", "I", "tried", "firing", "up", "fnserver", "directly", "via", "docker", "run", "e", "NUMBER", "g", "NUMBER", "like", "this", "docker", "run", "rm", "i", "name", "fnserver", "v", "var", "run", "docker", "NUMBER", "sock", "var", "run", "docker", "NUMBER", "sock", "p", "NUMBER", "NUMBER", "v", "PWD", "data", "app", "data", "v", "PWD", "iofs", "iofs", "e", "FN_IOFS_DOCKER_PATH", "PWD", "iofs", "e", "FN_IOFS_PATH", "iofs", "entrypoint", "NUMBER", "fnserver", "fnproject", "fnserver", "which", "information", "as", "it", "happens", "I", "get", "from", "a", "previous", "conversation", "with", "rdallman", "Which", "also", "reminds", "me", "about", "the", "reservations", "I", "had", "about", "run", "fnserver", "privileged", "which", "seems", "to", "be", "the", "case", "too", "for", "the", "current", "Kubernetes", "config", "NUMBER", "It", "cerainly", "seems", "possible", "to", "run", "fnserver", "by", "bind", "mounting", "the", "parent", "s", "docker", "socket", "and", "it", "then", "not", "having", "to", "be", "run", "privileged", "though", "it", "s", "a", "question", "orthogonal", "to", "the", "main", "thrust", "of", "this", "thread", "NUMBER", "On", "the", "IOFS", "things", "I", "definitely", "needed", "them", "when", "I", "tried", "firing", "up", "fnserver", "directly", "via", "docker", "run", "You", "need", "IOFS", "configuration", "only", "in", "case", "of", "local", "Fn", "but", "the", "one", "you", "use", "on", "k", "NUMBER", "s", "NUMBER", "Local", "Fn", "needs", "a", "docker", "link", "via", "socket", "mount", "but", "in", "k", "NUMBER", "s", "we", "use", "DIND", "mode", "where", "you", "don", "t", "need", "to", "configure", "IOSF", "because", "it", "works", "by", "default", "but", "doesn", "t", "work", "in", "local", "Fn", "without", "proper", "configuration", "NUMBER", "Hello", "I", "seem", "to", "have", "made", "some", "progress", "bur", "I", "could", "still", "do", "with", "some", "insight", "NUMBER", "I", "ve", "managed", "to", "nursemaid", "my", "setup", "so", "that", "fn", "invoke", "goapp", "gofn", "runs", "and", "returns", "what", "I", "expect", "NUMBER", "To", "do", "this", "in", "addition", "to", "the", "change", "I", "mention", "in", "my", "original", "post", "around", "modifying", "the", "fn", "service", "yaml", "to", "add", "the", "node", "ports", "and", "fn", "deployment", "yaml", "to", "change", "FN_PUBLIC_LB_URL", "to", "value", "LINK", "for", "api", "I", "also", "had", "to", "change", "the", "runner", "lb", "FN_RUNNER_API_URL", "to", "value", "LINK", "that", "s", "the", "one", "I", "wondered", "about", "a", "couple", "of", "replies", "back", "and", "in", "addition", "to", "that", "I", "had", "to", "change", "FN_RUNNER_ADDRESSES", "from", "value", "fn", "fn", "runner", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "NUMBER", "to", "value", "fn", "fn", "runner", "NUMBER", "fn", "NUMBER", "svc", "NUMBER", "cluster", "NUMBER", "local", "NUMBER", "NUMBER", "that", "be", "to", "say", "I", "had", "to", "add", "a", "trail", "period", "after", "the", "NUMBER", "local", "part", "NUMBER", "As", "it", "happens", "I", "ve", "come", "across", "the", "issue", "of", "needing", "the", "trail", "period", "elsewhere", "with", "my", "setup", "but", "I", "m", "not", "clear", "why", "I", "ve", "previously", "come", "across", "a", "comment", "that", "a", "trail", "period", "signifies", "an", "absolute", "address", "but", "it", "s", "unclear", "why", "I", "need", "it", "with", "my", "K", "NUMBER", "s", "deployment", "when", "I", "m", "guessing", "that", "you", "guys", "don", "t", "need", "it", "NUMBER", "As", "I", "say", "I", "ve", "seen", "this", "elsewhere", "but", "I", "m", "relatively", "inexperienced", "with", "Kubernetes", "and", "couldn", "t", "say", "whether", "it", "s", "my", "system", "be", "overly", "pedantic", "or", "other", "systems", "be", "overly", "lax", "in", "how", "those", "address", "be", "parsed", "or", "whether", "it", "s", "something", "else", "entirely", "I", "d", "definitely", "appreciate", "any", "insights", "from", "those", "more", "experienced", "with", "K", "NUMBER", "s", "quirks", "NUMBER", "Once", "I", "get", "all", "the", "addressing", "sorted", "in", "my", "yaml", "I", "finally", "hit", "the", "issue", "that", "I", "was", "half", "expecting", "to", "hit", "which", "was", "a", "problem", "seeing", "my", "local", "Docker", "registry", "NUMBER", "As", "it", "happens", "the", "error", "message", "relating", "to", "that", "was", "pretty", "self", "explanatory", "fn", "invoke", "goapp", "gofn", "Error", "invoking", "function", "NUMBER", "status", "NUMBER", "message", "Failed", "to", "pull", "image", "localhost", "NUMBER", "gofn", "NUMBER", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "getsockopt", "connection", "refused", "as", "a", "really", "hacky", "workaround", "I", "execed", "into", "the", "runner", "and", "proxied", "to", "my", "host", "via", "docker", "run", "name", "registry", "proxy", "d", "e", "LISTEN", "NUMBER", "e", "TALK", "sbin", "ip", "route", "awk", "default", "print", "NUMBER", "NUMBER", "p", "NUMBER", "NUMBER", "tecnativa", "tcp", "proxy", "obviously", "that", "ll", "have", "to", "change", "but", "it", "did", "mean", "that", "I", "eventually", "get", "fn", "invoke", "goapp", "gofn", "message", "Hello", "World", "Ultimately", "I", "m", "going", "to", "be", "run", "a", "much", "nicer", "and", "more", "secure", "local", "container", "registry", "but", "in", "the", "mean", "time", "do", "you", "have", "any", "thoughts", "on", "how", "I", "might", "be", "able", "to", "configure", "so", "the", "DinD", "docker", "can", "see", "my", "registry", "The", "reason", "I", "was", "use", "localhost", "for", "the", "registry", "was", "because", "the", "NUMBER", "NUMBER", "network", "be", "in", "insecure", "registries", "by", "default", "but", "clearly", "inside", "the", "fnproject", "fnserver", "runner", "container", "NUMBER", "refers", "to", "its", "own", "localhost", "NUMBER", "I", "see", "in", "LINK", "_registries", "NUMBER", "md", "there", "be", "an", "example", "of", "a", "private", "registry", "on", "localhost", "which", "be", "similar", "to", "my", "setup", "and", "all", "of", "the", "CRUD", "and", "image", "build", "works", "fine", "but", "I", "can", "t", "see", "how", "that", "would", "work", "with", "DinD", "Again", "I", "d", "appreciate", "any", "thoughts", "NUMBER", "This", "rather", "makes", "me", "sad", "NUMBER", "I", "ve", "always", "be", "on", "the", "side", "of", "keep", "calls", "and", "logs", "in", "OSS", "at", "least", "until", "good", "experience", "alternatives", "be", "in", "place", "NUMBER", "After", "some", "reading", "and", "considerations", "I", "d", "remove", "logs", "API", "but", "will", "keep", "calls", "API", "until", "better", "alternative", "NUMBER", "We", "ve", "seen", "people", "use", "calls", "API", "to", "connect", "it", "with", "prometheus", "NUMBER", "So", "that", "s", "said", "logs", "must", "go", "in", "favor", "of", "syslog", "but", "calls", "should", "remain", "until", "better", "option", "NUMBER", "can", "we", "add", "the", "prometheus", "metrics", "of", "interest", "to", "the", "particular", "case", "noted", "earlier", "any", "info", "here", "rdallman", "can", "we", "please", "wait", "for", "NUMBER", "more", "day", "I", "ll", "try", "to", "reach", "our", "users", "I", "ve", "be", "talking", "about", "NUMBER", "I", "ll", "figure", "out", "their", "use", "cases", "and", "will", "go", "back", "to", "you", "NUMBER", "rdallman", "as", "promised", "I", "ll", "try", "to", "translate", "you", "what", "I", "ve", "get", "from", "a", "customer", "In", "fact", "we", "need", "CRD", "call", "detail", "record", "which", "function", "fail", "which", "ones", "were", "successful", "NUMBER", "We", "get", "use", "to", "collecting", "them", "calls", "in", "ELK", "and", "then", "doing", "aggregation", "for", "the", "statistics", "i", "NUMBER", "e", "NUMBER", "of", "successful", "VS", "of", "fail", "NUMBER", "But", "we", "ll", "be", "ok", "with", "remove", "calls", "API", "as", "long", "as", "you", "d", "provide", "an", "alternative", "middleware", "plugin", "that", "will", "allow", "us", "to", "do", "the", "same", "but", "with", "no", "Fn", "API", "polling", "on", "our", "side", "NUMBER", "no", "technical", "details", "on", "how", "they", "do", "that", "but", "I", "asked", "how", "to", "provide", "some", "details", "It", "s", "also", "possible", "to", "get", "this", "from", "prometheus", "the", "one", "thing", "that", "bothers", "me", "that", "syslog", "feature", "be", "accessible", "through", "the", "API", "but", "when", "calls", "API", "will", "go", "away", "which", "alternative", "we", "d", "offer", "to", "users", "not", "operators", "NUMBER", "which", "there", "was", "an", "option", "to", "let", "Fn", "an", "endpoint", "where", "to", "post", "calls", "objects", "or", "whatever", "NUMBER", "use", "the", "call", "extensions", "stuff", "it", "should", "be", "relatively", "easy", "for", "a", "user", "to", "connect", "to", "their", "syslog", "url", "and", "post", "a", "log", "with", "the", "call", "to", "it", "that", "s", "fine", "would", "be", "nice", "to", "provide", "an", "example", "with", "I", "guess", "NUMBER", "Description", "fnserver", "currently", "do", "not", "allow", "upper", "case", "letters", "in", "app", "and", "fn", "names", "NUMBER", "While", "this", "isn", "t", "really", "a", "problem", "for", "developers", "it", "isn", "t", "the", "friendliest", "visually", "and", "isn", "t", "easy", "to", "read", "for", "folks", "who", "aren", "t", "developers", "NUMBER", "As", "an", "example", "our", "use", "case", "of", "fn", "be", "an", "open", "system", "where", "anyone", "calls", "anything", "NUMBER", "This", "requires", "us", "to", "have", "search", "listing", "and", "filtering", "functionality", "with", "good", "readability", "so", "users", "of", "our", "system", "know", "how", "to", "look", "for", "things", "and", "find", "it", "easy", "to", "grok", "what", "they", "find", "once", "the", "run", "a", "search", "NUMBER", "Steps", "to", "reproduce", "the", "issue", "NUMBER", "Try", "creating", "a", "function", "with", "an", "upper", "case", "letter", "Describe", "the", "results", "you", "received", "The", "fn", "cli", "fail", "Describe", "the", "results", "you", "expected", "I", "d", "expect", "fnserver", "to", "allow", "for", "the", "set", "of", "characters", "normal", "function", "allow", "for", "NUMBER", "I", "think", "the", "underlying", "reason", "for", "this", "be", "because", "docker", "image", "names", "cannot", "contain", "upper", "case", "characters", "NUMBER", "I", "wonder", "if", "a", "possible", "work", "around", "for", "this", "be", "to", "make", "it", "case", "insensitive", "i", "NUMBER", "e", "NUMBER", "convert", "anything", "the", "users", "send", "to", "lower", "case", "behind", "the", "scenes", "Indeed", "image", "name", "tag", "be", "what", "concerns", "all", "of", "us", "NUMBER", "Description", "We", "have", "a", "need", "to", "create", "app", "and", "fn", "names", "that", "be", "longer", "than", "the", "current", "NUMBER", "character", "limit", "NUMBER", "The", "associated", "database", "field", "be", "varchar", "NUMBER", "yet", "looking", "through", "the", "code", "we", "see", "a", "const", "declaration", "of", "NUMBER", "characters", "for", "each", "and", "these", "cannot", "be", "overridden", "LINK", "L", "NUMBER", "I", "would", "like", "to", "propose", "that", "we", "make", "NUMBER", "characters", "the", "default", "but", "make", "them", "configurable", "at", "runtime", "NUMBER", "Steps", "to", "reproduce", "the", "issue", "NUMBER", "Try", "to", "create", "a", "function", "or", "app", "with", "more", "than", "NUMBER", "characters", "Describe", "the", "results", "you", "received", "We", "get", "an", "error", "saying", "that", "neither", "field", "can", "t", "be", "over", "NUMBER", "characters", "Describe", "the", "results", "you", "expected", "We", "expect", "to", "be", "able", "to", "set", "an", "app", "and", "or", "function", "name", "that", "be", "greater", "than", "NUMBER", "characters", "without", "fail", "Additional", "information", "you", "deem", "important", "e", "NUMBER", "g", "NUMBER", "issue", "happens", "only", "occasionally", "Output", "of", "fn", "version", "CLI", "command", "curl", "to", "fnserver", "directly", "curl", "LINK", "XPOST", "d", "name", "thisislongerthanthirtycharactersthisislongerthanthirtycharactersthisislongerthanthirtycharactersthisislongerthanthirtycharactersthisislongerthanthirtycharacters", "message", "App", "name", "must", "be", "NUMBER", "characters", "or", "less", "Additional", "environment", "details", "OSX", "Linux", "flags", "etc", "NUMBER", "OSX", "That", "would", "be", "terrific", "On", "Tue", "Apr", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "Reed", "Allman", "TAG", "write", "we", "re", "looking", "into", "increasing", "the", "default", "of", "this", "value", "it", "may", "be", "possible", "to", "just", "bump", "it", "up", "but", "run", "some", "checks", "first", "NUMBER", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Gregg", "Altschul", "m", "NUMBER", "NUMBER", "NUMBER", "Extracting", "the", "name", "validation", "functionality", "from", "the", "models", "validators", "means", "we", "can", "use", "them", "else", "where", "NUMBER", "In", "particular", "this", "means", "we", "can", "use", "them", "to", "validate", "user", "input", "in", "the", "CLI", "without", "duplicating", "the", "logic", "c", "NUMBER", "f", "NUMBER", "fnproject", "cli", "NUMBER", "Link", "to", "issue", "this", "resolve", "This", "be", "a", "prerequisite", "for", "my", "change", "in", "fnproject", "cli", "NUMBER", "What", "I", "did", "The", "full", "explaination", "can", "be", "find", "here", "LINK", "issuecomment", "NUMBER", "NUMBER", "In", "particular", "this", "commit", "seperates", "the", "name", "validation", "from", "models", "NUMBER", "App", "models", "NUMBER", "Fn", "and", "models", "NUMBER", "Trigger", "Validate", "function", "so", "that", "they", "can", "be", "call", "independently", "NUMBER", "How", "to", "verify", "it", "cd", "GOPATH", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "models", "go", "test", "fn", "models", "NUMBER", "Fn", "Name", "name", "fn", "NUMBER", "ValidateName", "fn", "NUMBER", "Validate", "app", "models", "NUMBER", "App", "Name", "name", "app", "NUMBER", "ValidateName", "app", "NUMBER", "Validate", "trigger", "models", "NUMBER", "Trigger", "Name", "name", "trigger", "NUMBER", "ValidateName", "trigger", "NUMBER", "Validate", "One", "line", "description", "for", "the", "changelog", "Extract", "name", "validation", "from", "model", "validators", "One", "moving", "picture", "involving", "robots", "not", "mandatory", "but", "encourage", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "document", "NUMBER", "ready", "setInterval", "function", "img", "NUMBER", "animate", "left", "NUMBER", "px", "NUMBER", "function", "this", "NUMBER", "animate", "left", "NUMBER", "NUMBER", "NUMBER", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "Vince", "Zarola", "LINK", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "CLA", "Bot", "All", "committers", "have", "sign", "the", "CLA", "NUMBER", "I", "have", "add", "unit", "test", "and", "fix", "the", "issue", "of", "the", "miss", "fn", "name", "check", "in", "Fn", "NUMBER", "ValidateName", "happy", "to", "chat", "on", "slack", "or", "here", "about", "the", "plan", "it", "would", "be", "nice", "to", "lock", "down", "a", "plan", "for", "validating", "as", "there", "be", "a", "few", "bug", "PRs", "open", "for", "this", "now", "NUMBER", "Humm", "these", "be", "fair", "points", "and", "I", "can", "t", "think", "of", "any", "decent", "solutions", "for", "it", "NUMBER", "The", "only", "options", "I", "can", "think", "of", "be", "To", "have", "a", "shared", "libraries", "repo", "which", "everything", "use", "NUMBER", "However", "this", "still", "has", "most", "of", "the", "issue", "you", "ve", "point", "out", "above", "it", "d", "get", "huge", "you", "d", "have", "to", "recompile", "everything", "that", "use", "them", "version", "mismatches", "etc", "NUMBER", "To", "have", "an", "API", "endpoint", "on", "the", "server", "which", "we", "could", "use", "for", "validation", "this", "be", "how", "I", "d", "get", "around", "the", "issue", "with", "websites", "I", "d", "have", "function", "on", "the", "server", "side", "that", "can", "do", "the", "validation", "and", "then", "use", "ajax", "on", "the", "client", "side", "to", "make", "use", "of", "them", "NUMBER", "I", "don", "t", "like", "the", "idea", "of", "requiring", "a", "server", "to", "be", "able", "to", "call", "fn", "init", "though", "NUMBER", "I", "also", "fear", "this", "will", "pollute", "the", "function", "API", "NUMBER", "Which", "leaves", "me", "with", "what", "you", "suggested", "and", "that", "s", "keep", "the", "validation", "server", "side", "and", "passing", "it", "through", "to", "the", "client", "NUMBER", "In", "which", "case", "I", "m", "going", "to", "leave", "things", "as", "they", "be", "NUMBER", "You", "ve", "sorted", "the", "immediate", "issue", "with", "trigger", "be", "appended", "to", "the", "function", "names", "NUMBER", "Something", "else", "I", "was", "wondering", "I", "ve", "never", "use", "Swagger", "but", "I", "notice", "the", "fn_go", "models", "had", "some", "validation", "that", "looked", "auto", "generate", "use", "it", "NUMBER", "Is", "there", "a", "way", "we", "could", "centralise", "it", "use", "Swagger", "and", "then", "have", "the", "validation", "in", "the", "Fn", "server", "and", "the", "client", "use", "the", "Swagger", "generate", "models", "Sometimes", "CallListener", "doesn", "t", "quite", "cut", "it", "NUMBER", "There", "be", "some", "use", "cases", "where", "we", "ll", "want", "to", "have", "access", "to", "invocation", "extensions", "metadata", "and", "possibly", "interact", "with", "the", "container", "creation", "process", "NUMBER", "Take", "two", "add", "the", "ability", "to", "wrap", "Close", "plus", "an", "extensible", "BeforeCall", "AfterCall", "NUMBER", "These", "can", "be", "use", "by", "a", "custom", "driver", "to", "add", "listeners", "to", "a", "ContainerTask", "this", "also", "offers", "a", "way", "to", "get", "per", "call", "behaviour", "into", "a", "Before", "After", "pair", "plus", "an", "avenue", "from", "the", "custom", "driver", "modifying", "the", "Cookie", "s", "definition", "before", "returning", "it", "to", "intercept", "container", "creation", "NUMBER", "I", "m", "not", "NUMBER", "convinced", "this", "be", "neater", "than", "an", "explicit", "extension", "inferface", "but", "I", "offer", "it", "in", "contrast", "NUMBER", "FWIW", "the", "code", "here", "can", "be", "use", "to", "do", "the", "same", "kind", "of", "mount", "mangling", "and", "population", "I", "had", "in", "mind", "for", "the", "original", "NUMBER", "Up", "for", "a", "review", "of", "the", "basic", "shape", "NUMBER", "If", "this", "should", "instead", "be", "in", "fnext", "lemme", "know", "NUMBER", "Can", "wrap", "a", "couple", "of", "test", "around", "this", "once", "there", "s", "some", "agreement", "on", "where", "it", "should", "live", "NUMBER", "FYI", "this", "can", "t", "replace", "the", "call", "overrider", "since", "that", "runs", "and", "it", "needs", "to", "run", "much", "earlier", "than", "the", "propose", "callbacks", "here", "NUMBER", "So", "the", "gist", "be", "this", "the", "WrapBeforeCall", "and", "WrapAfterCall", "were", "there", "to", "add", "lifecycle", "interception", "just", "either", "side", "of", "the", "invocation", "run", "where", "they", "have", "access", "to", "that", "request", "s", "call", "extensions", "NUMBER", "It", "s", "true", "the", "cookie", "could", "be", "the", "carrier", "for", "these", "NUMBER", "The", "reason", "that", "the", "original", "version", "with", "an", "explicit", "interface", "for", "plugins", "that", "behave", "like", "this", "came", "about", "was", "that", "it", "seem", "to", "me", "to", "be", "cleaner", "to", "expose", "an", "interface", "that", "simply", "had", "the", "requisite", "lifecycle", "extension", "points", "on", "it", "rather", "than", "requiring", "hooks", "on", "Task", "or", "Cookie", "NUMBER", "The", "last", "in", "particular", "seems", "like", "an", "odd", "place", "to", "put", "things", "Task", "be", "arguably", "a", "better", "fit", "in", "terms", "of", "what", "it", "represents", "NUMBER", "What", "v", "NUMBER", "bundled", "together", "was", "the", "set", "of", "behaviours", "a", "pre", "creation", "hook", "a", "post", "deletion", "one", "and", "per", "call", "before", "and", "after", "NUMBER", "The", "main", "issue", "with", "the", "interceptor", "extension", "was", "that", "since", "it", "typically", "requires", "per", "container", "state", "even", "if", "that", "s", "just", "a", "random", "id", "the", "ContainerTask", "winds", "up", "be", "a", "part", "of", "its", "method", "signatures", "NUMBER", "Having", "this", "behaviour", "associated", "with", "a", "Task", "makes", "some", "sense", "perhaps", "in", "as", "much", "as", "if", "you", "re", "doing", "something", "before", "and", "after", "container", "creation", "that", "s", "closely", "relate", "to", "things", "you", "do", "either", "side", "of", "a", "call", "Task", "seems", "to", "be", "the", "decriptor", "of", "that", "you", "re", "mutating", "the", "container", "environment", "that", "a", "call", "executes", "in", "NUMBER", "It", "s", "not", "clear", "to", "me", "what", "the", "cookie", "really", "represents", "rather", "than", "a", "packaged", "up", "frozen", "request", "to", "a", "driver", "to", "make", "a", "container", "NUMBER", "As", "per", "conversation", "with", "Reed", "last", "night", "WrapClose", "WrapBeforeCall", "and", "WrapAfterCall", "in", "place", "NUMBER", "They", "re", "still", "on", "ContainerTask", "for", "the", "moment", "it", "d", "be", "nice", "to", "have", "the", "Before", "After", "on", "a", "call", "but", "with", "hot", "container", "we", "need", "to", "intercept", "to", "wrap", "for", "each", "call", "to", "a", "container", "NUMBER", "Agent", "might", "be", "the", "other", "place", "to", "put", "this", "behaviour", "but", "for", "the", "moment", "it", "s", "on", "the", "CT", "as", "that", "s", "get", "the", "context", "available", "for", "the", "required", "decorations", "to", "be", "able", "to", "do", "their", "thing", "NUMBER", "Dropped", "the", "Set", "GetCallID", "stuff", "NUMBER", "Docker", "on", "WSL", "NUMBER", "might", "make", "Windows", "fix", "unnecessary", "as", "the", "experience", "should", "be", "closer", "to", "Docker", "on", "Linux", "LINK", "hearts", "wsl", "NUMBER", "Description", "Unable", "to", "execute", "any", "function", "Steps", "to", "reproduce", "the", "issue", "NUMBER", "Downloaded", "latest", "version", "of", "fn", "NUMBER", "exe", "CLI", "NUMBER", "Ran", "fn", "start", "NUMBER", "Created", "new", "function", "as", "per", "quickstart", "guide", "tried", "both", "Node", "NUMBER", "js", "and", "Python", "NUMBER", "Tried", "executing", "function", "use", "fn", "invoke", "Describe", "the", "results", "you", "received", "\u03bb", "fn", "invoke", "helloapp", "hellopy", "Error", "invoking", "function", "NUMBER", "status", "NUMBER", "message", "internal", "server", "error", "Error", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Fn", "serving", "on", "NUMBER", "type", "full", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "Could", "not", "create", "container", "app_id", "NUMBER", "D", "NUMBER", "KZNGHNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "cpus", "error", "API", "error", "NUMBER", "invalid", "mode", "tmp", "iofs", "fn_id", "NUMBER", "D", "NUMBER", "MHK", "NUMBER", "YNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "id", "NUMBER", "D", "NUMBER", "MPSYDNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "idle_timeout", "NUMBER", "image", "hellopy", "NUMBER", "memory", "NUMBER", "stack", "CreateContainer", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "internal", "server", "error", "action", "server", "NUMBER", "handleFnInvokeCall", "fm", "error", "API", "error", "NUMBER", "invalid", "mode", "tmp", "iofs", "fn_id", "NUMBER", "D", "NUMBER", "MHK", "NUMBER", "YNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "stack", "goroutine", "NUMBER", "run", "runtime", "debug", "NUMBER", "Stack", "NUMBER", "xc", "NUMBER", "fce", "NUMBER", "NUMBER", "x", "NUMBER", "ca", "NUMBER", "NUMBER", "xc", "NUMBER", "ab", "NUMBER", "usr", "local", "go", "src", "runtime", "debug", "stack", "NUMBER", "go", "NUMBER", "NUMBER", "xa", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "HandleErrorResponse", "NUMBER", "x", "NUMBER", "a", "NUMBER", "fc", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "dad", "NUMBER", "e", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "ca", "NUMBER", "NUMBER", "xc", "NUMBER", "ab", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "error_response", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "handleErrorResponse", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "ca", "NUMBER", "NUMBER", "xc", "NUMBER", "ab", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "error_response", "NUMBER", "go", "NUMBER", "NUMBER", "xa", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "handleFnInvokeCall", "NUMBER", "xc", "NUMBER", "eb", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "runner_fninvoke", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "da", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "handleFnInvokeCall", "fm", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "runMiddleware", "NUMBER", "xc", "NUMBER", "eb", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "middleware", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "rootMiddlewareWrapper", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "middleware", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "panicWrap", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "panicWrap", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "apiMetricsWrap", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "traceWrap", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "loggerWrap", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ea", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Engine", "NUMBER", "handleHTTPRequest", "NUMBER", "xc", "NUMBER", "ea", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "gin", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Engine", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "ea", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "ed", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "gin", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "go", "NUMBER", "opencensus", "NUMBER", "io", "plugin", "ochttp", "NUMBER", "Handler", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "adf", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "go", "NUMBER", "opencensus", "NUMBER", "io", "plugin", "ochttp", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "net", "http", "NUMBER", "serverHandler", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "ab", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "xbc", "net", "http", "NUMBER", "conn", "NUMBER", "serve", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "f", "NUMBER", "NUMBER", "xc", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "created", "by", "net", "http", "NUMBER", "Server", "NUMBER", "Serve", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "b", "Describe", "the", "results", "you", "expected", "Wanted", "it", "to", "work", "Additional", "information", "you", "deem", "important", "e", "NUMBER", "g", "NUMBER", "issue", "happens", "only", "occasionally", "Happens", "NUMBER", "of", "the", "time", "Output", "of", "fn", "version", "CLI", "command", "Client", "version", "be", "latest", "version", "NUMBER", "Server", "version", "NUMBER", "Additional", "environment", "details", "OSX", "Linux", "flags", "etc", "NUMBER", "Windows", "NUMBER", "NUMBER", "Hi", "thanks", "for", "report", "NUMBER", "But", "here", "s", "the", "thing", "you", "have", "problem", "creating", "container", "NUMBER", "That", "s", "what", "you", "have", "in", "your", "logs", "NUMBER", "Make", "sure", "you", "can", "do", "that", "and", "Fn", "has", "reliable", "connection", "with", "Docker", "NUMBER", "Also", "FYI", "we", "don", "t", "have", "any", "guarantees", "that", "Fn", "works", "on", "Windows", "NUMBER", "So", "you", "may", "face", "with", "problem", "NUMBER", "But", "here", "s", "the", "thing", "you", "have", "problem", "creating", "container", "NUMBER", "The", "Fdk", "server", "itself", "be", "a", "container", "though", "and", "that", "s", "run", "fine", "\u03bb", "docker", "ps", "CONTAINER", "ID", "IMAGE", "COMMAND", "CREATED", "STATUS", "PORTS", "NAMES", "df", "NUMBER", "f", "NUMBER", "e", "NUMBER", "fd", "fnproject", "fnserver", "NUMBER", "fnserver", "NUMBER", "minutes", "ago", "Up", "NUMBER", "minutes", "NUMBER", "tcp", "NUMBER", "NUMBER", "NUMBER", "tcp", "fnserver", "I", "don", "t", "have", "issue", "with", "other", "Docker", "container", "NUMBER", "FYI", "we", "don", "t", "have", "any", "guarantees", "that", "Fn", "works", "on", "Windows", "NUMBER", "So", "you", "may", "face", "with", "problem", "NUMBER", "OK", "NUMBER", "I", "can", "try", "to", "use", "a", "VM", "instead", "NUMBER", "I", "assume", "a", "local", "fn", "client", "can", "connect", "to", "a", "remote", "server", "Thanks", "for", "the", "detailed", "comment", "zootalures", "I", "tried", "the", "command", "you", "mention", "except", "replacing", "d", "with", "c", "since", "I", "have", "no", "D", "drive", "\u03bb", "docker", "run", "rm", "i", "name", "fnserver", "v", "c", "fndata", "iofs", "e", "FN_IOFS_DOCKER_PATH", "c", "fndata", "e", "FN_IOFS_PATH", "iofs", "v", "var", "run", "docker", "NUMBER", "sock", "var", "run", "docker", "NUMBER", "sock", "p", "NUMBER", "NUMBER", "entrypoint", "NUMBER", "fnserver", "fnproject", "fnserver", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Registering", "container", "driver", "docker", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Registering", "log", "provider", "s", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Registering", "data", "store", "provider", "sql", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Registering", "log", "provider", "sql", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Registering", "sql", "helper", "mysql", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Registering", "sql", "helper", "postgres", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Registering", "sql", "helper", "sqlite", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Setting", "log", "level", "to", "field", "NUMBER", "level", "info", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Connecting", "to", "DB", "url", "sqlite", "NUMBER", "app", "data", "fn", "NUMBER", "db", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "datastore", "dialed", "datastore", "sqlite", "NUMBER", "max_idle_connections", "NUMBER", "url", "sqlite", "NUMBER", "app", "data", "fn", "NUMBER", "db", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "agent", "starting", "cfg", "MinDockerVersion", "NUMBER", "ce", "ContainerLabelTag", "DockerNetworks", "DockerLoadFile", "FreezeIdle", "NUMBER", "ms", "HotPoll", "NUMBER", "ms", "HotLauncherTimeout", "NUMBER", "h", "NUMBER", "m", "NUMBER", "s", "HotPullTimeout", "NUMBER", "m", "NUMBER", "s", "HotStartTimeout", "NUMBER", "s", "AsyncChewPoll", "NUMBER", "m", "NUMBER", "s", "DetachedHeadRoom", "NUMBER", "m", "NUMBER", "s", "MaxResponseSize", "NUMBER", "MaxHdrResponseSize", "NUMBER", "MaxLogSize", "NUMBER", "MaxTotalCPU", "NUMBER", "MaxTotalMemory", "NUMBER", "MaxFsSize", "NUMBER", "PreForkPoolSize", "NUMBER", "PreForkImage", "busybox", "PreForkCmd", "tail", "f", "dev", "null", "PreForkUseOnce", "NUMBER", "PreForkNetworks", "EnableNBResourceTracker", "false", "MaxTmpFsInodes", "NUMBER", "DisableReadOnlyRootFs", "false", "DisableDebugUserLogs", "false", "IOFSEnableTmpfs", "false", "IOFSAgentPath", "iofs", "IOFSMountRoot", "c", "fndata", "IOFSOpts", "ImageCleanMaxSize", "NUMBER", "ImageCleanExemptTags", "ImageEnableVolume", "false", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "no", "docker", "auths", "from", "config", "file", "find", "this", "be", "fine", "error", "open", "root", "NUMBER", "dockercfg", "no", "such", "file", "or", "directory", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "available", "memory", "cgroup_limit", "NUMBER", "head_room", "NUMBER", "total_memory", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "ram", "reservations", "avail_memory", "NUMBER", "ram_async_hw_mark", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "available", "cpu", "avail_cpu", "NUMBER", "total_cpu", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "cpu", "reservations", "cpu", "NUMBER", "cpu_async_hw_mark", "NUMBER", "______", "____", "___", "_", "__", "__", "_", "_", "_", "v", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Fn", "serving", "on", "NUMBER", "type", "full", "Then", "when", "I", "do", "fn", "invoke", "helloapp", "hellopy", "it", "still", "mentions", "tmp", "iofs", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "Could", "not", "create", "container", "app_id", "NUMBER", "D", "NUMBER", "Q", "NUMBER", "XT", "NUMBER", "NG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "cpus", "error", "API", "error", "NUMBER", "invalid", "mode", "tmp", "iofs", "fn_id", "NUMBER", "D", "NUMBER", "Q", "NUMBER", "AN", "NUMBER", "NG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "id", "NUMBER", "D", "NUMBER", "Q", "NUMBER", "GZ", "NUMBER", "NG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "idle_timeout", "NUMBER", "image", "hellopy", "NUMBER", "memory", "NUMBER", "stack", "CreateContainer", "Is", "that", "supposed", "to", "mention", "iofs", "instead", "If", "I", "swap", "the", "entry", "point", "from", "NUMBER", "fnserver", "to", "env", "it", "do", "indeed", "show", "the", "environment", "variable", "\u03bb", "docker", "run", "rm", "i", "name", "fnserver", "v", "c", "fndata", "iofs", "e", "FN_IOFS_DOCKER_PATH", "c", "fndata", "e", "FN_IOFS_PATH", "iofs", "v", "var", "run", "docker", "NUMBER", "sock", "var", "run", "docker", "NUMBER", "sock", "p", "NUMBER", "NUMBER", "entrypoint", "env", "fnproject", "fnserver", "PATH", "usr", "local", "sbin", "usr", "local", "bin", "usr", "sbin", "usr", "bin", "sbin", "bin", "HOSTNAME", "NUMBER", "e", "NUMBER", "d", "NUMBER", "c", "FN_IOFS_DOCKER_PATH", "c", "fndata", "FN_IOFS_PATH", "iofs", "DOCKER_CHANNEL", "stable", "DOCKER_VERSION", "NUMBER", "ce", "DIND_COMMIT", "NUMBER", "b", "NUMBER", "fac", "NUMBER", "d", "NUMBER", "ca", "NUMBER", "b", "NUMBER", "HOME", "root", "Thank", "you", "so", "much", "for", "the", "investigation", "zootalures", "the", "downside", "here", "be", "that", "each", "function", "can", "see", "each", "other", "function", "sockets", "v", "bad", "but", "it", "would", "work", "I", "think", "NUMBER", "I", "don", "t", "think", "anyone", "would", "actually", "use", "Docker", "for", "Windows", "in", "production", "so", "maybe", "a", "warning", "on", "startup", "would", "suffice", "eg", "NUMBER", "Due", "to", "Windows", "limitations", "Fn", "be", "run", "in", "an", "INSECURE", "mode", "that", "be", "only", "for", "development", "purposes", "Any", "work", "around", "for", "this", "Hitting", "the", "same", "problem", "on", "windows", "NUMBER", "with", "docker", "desktop", "as", "well", "NUMBER", "I", "get", "it", "to", "work", "by", "installing", "fn", "inside", "WSL", "NUMBER", "and", "run", "them", "from", "there", "Runs", "the", "function", "container", "as", "user", "id", "NUMBER", "gid", "NUMBER", "in", "docker", "NUMBER", "This", "requires", "corresponding", "change", "in", "base", "runtime", "images", "add", "user", "group", "that", "be", "use", "by", "the", "fdks", "NUMBER", "It", "also", "drops", "all", "the", "security", "capabilities", "by", "use", "CapDrop", "all", "NUMBER", "Note", "that", "there", "be", "an", "opt", "out", "environment", "variable", "FN_DISABLE_DOCKER_SECURITY", "which", "can", "be", "set", "to", "true", "to", "disable", "this", "features", "NUMBER", "We", "could", "also", "chown", "the", "iofs", "directory", "to", "GID", "NUMBER", "and", "make", "it", "NUMBER", "for", "run", "the", "test", "locally", "one", "would", "need", "to", "be", "member", "of", "GID", "NUMBER", "I", "m", "gonna", "try", "if", "that", "works", "NUMBER", "Yes", "I", "m", "attempting", "tmpfs", "too", "not", "straightforward", "NUMBER", "was", "there", "a", "reason", "not", "to", "use", "LINK", "to", "cover", "this", "it", "s", "hiding", "out", "in", "common", "but", "I", "m", "not", "sure", "if", "it", "was", "analyzed", "and", "ruled", "out", "would", "get", "rid", "of", "most", "of", "this", "code", "from", "what", "I", "can", "tell", "to", "just", "do", "singleflight", "NUMBER", "Do", "imageKey", "call", "func", "dockerPull", "inline", "where", "it", "was", "and", "the", "timeout", "behavior", "would", "be", "the", "same", "as", "well", "NUMBER", "In", "the", "top", "error", "handler", "we", "log", "the", "stacktrace", "if", "we", "get", "back", "a", "non", "API", "error", "NUMBER", "Under", "that", "category", "we", "will", "have", "gRPC", "error", "as", "well", "there", "be", "no", "point", "to", "log", "a", "stacktrace", "for", "a", "gRPC", "error", "where", "those", "could", "happen", "on", "the", "server", "side", "or", "due", "to", "some", "temporary", "network", "blips", "NUMBER", "In", "this", "change", "we", "skip", "the", "stack", "trace", "log", "in", "presence", "of", "gRPC", "error", "plus", "we", "change", "some", "log", "level", "from", "Error", "down", "to", "Info", "for", "some", "retryable", "error", "NUMBER", "In", "the", "last", "commit", "I", "add", "the", "concept", "of", "retryable", "error", "NUMBER", "The", "new", "interface", "contains", "an", "APIErrorWrapper", "that", "allows", "to", "define", "a", "specific", "root", "error", "which", "gets", "logged", "for", "debugging", "and", "a", "more", "general", "error", "which", "be", "returned", "back", "to", "the", "caller", "NUMBER", "Before", "this", "change", "we", "were", "setting", "the", "Retry", "After", "header", "in", "case", "we", "get", "a", "ErrCallTimeoutServerBusy", "now", "we", "intercept", "in", "the", "agent", "NUMBER", "Submit", "the", "error", "returned", "and", "if", "it", "be", "an", "ErrCallTimeoutServerBusy", "we", "transform", "it", "inot", "a", "retryable", "error", "NUMBER", "Before", "this", "change", "we", "were", "setting", "the", "Retry", "After", "header", "in", "case", "we", "get", "a", "ErrCallTimeoutServerBusy", "now", "we", "intercept", "in", "the", "agent", "NUMBER", "Submit", "the", "error", "returned", "and", "if", "it", "be", "an", "ErrCallTimeoutServerBusy", "we", "transform", "it", "inot", "a", "retryable", "error", "NUMBER", "when", "we", "declare", "ErrCallTimeoutServerBusy", "can", "we", "just", "declare", "it", "as", "a", "Retryable", "error", "then", "we", "don", "t", "have", "to", "worry", "about", "catching", "it", "anywhere", "else", "NUMBER", "that", "seems", "to", "be", "the", "intention", "for", "it", "at", "least", "do", "you", "think", "it", "makes", "sense", "I", "ll", "add", "and", "fix", "exist", "test", "once", "we", "have", "an", "agreement", "that", "Retryable", "error", "be", "a", "good", "idea", "NUMBER", "In", "this", "version", "the", "gRPC", "error", "be", "not", "a", "retryable", "error", "anymore", "as", "we", "don", "t", "know", "if", "the", "function", "run", "for", "a", "while", "on", "the", "runner", "so", "we", "don", "t", "return", "a", "response", "with", "the", "Retry", "After", "header", "but", "we", "return", "a", "NUMBER", "error", "it", "be", "up", "to", "the", "caller", "to", "decide", "to", "try", "again", "the", "same", "call", "NUMBER", "There", "be", "a", "simplified", "version", "of", "the", "Retryable", "error", "if", "we", "don", "t", "have", "an", "agreement", "on", "the", "retryable", "error", "thing", "it", "be", "probably", "worth", "just", "fix", "the", "gRPC", "issue", "where", "the", "fix", "will", "be", "just", "transform", "the", "generic", "error", "in", "an", "APIError", "NUMBER", "Let", "me", "know", "what", "do", "you", "think", "system_tests", "be", "still", "fail", "but", "I", "haven", "t", "looked", "at", "them", "yet", "NUMBER", "I", "change", "my", "mind", "as", "we", "agree", "that", "this", "gRPC", "error", "won", "t", "be", "a", "retryable", "error", "i", "be", "going", "to", "change", "this", "PR", "so", "as", "it", "manages", "just", "the", "better", "management", "of", "the", "gRPC", "error", "and", "remove", "all", "the", "Retryable", "idea", "here", "NUMBER", "If", "we", "want", "to", "implement", "the", "Retryable", "error", "that", "can", "be", "do", "on", "a", "separate", "PR", "NUMBER", "skinowski", "I", "think", "the", "top", "level", "handler", "already", "deal", "with", "the", "error", "so", "I", "tackle", "the", "problem", "you", "posted", "with", "your", "last", "comment", "remove", "those", "general", "error", "in", "favor", "of", "models", "NUMBER", "API", "error", "NUMBER", "In", "that", "case", "it", "be", "possible", "if", "required", "to", "manage", "them", "properly", "in", "error_response", "NUMBER", "go", "NUMBER", "I", "modify", "most", "of", "the", "error", "you", "mention", "but", "not", "the", "io", "NUMBER", "EOF", "as", "I", "think", "it", "be", "managed", "as", "special", "case", "and", "I", "don", "t", "want", "to", "touch", "it", "NUMBER", "What", "do", "you", "think", "of", "this", "new", "version", "This", "be", "a", "super", "simplified", "version", "where", "in", "the", "top", "error", "handler", "we", "just", "verify", "if", "we", "have", "any", "gRPC", "error", "back", "and", "if", "so", "we", "don", "t", "log", "the", "stacktrace", "with", "the", "error", "NUMBER", "as", "skinowski", "point", "out", "in", "some", "other", "discussion", "be", "the", "stacktrace", "helpful", "at", "all", "at", "that", "level", "Experiments", "in", "load", "test", "revealed", "that", "eviction", "of", "container", "that", "be", "starting", "be", "detrimental", "since", "this", "increases", "churn", "and", "acts", "as", "a", "feedback", "mechanism", "increasing", "docker", "API", "rates", "NUMBER", "Starting", "and", "deleting", "container", "be", "one", "of", "the", "most", "expensive", "docker", "API", "calls", "and", "traffic", "arriving", "on", "a", "busy", "loaded", "server", "can", "trigger", "flood", "of", "container", "create", "actions", "that", "get", "canceled", "with", "evictions", "NUMBER", "Previous", "code", "tried", "to", "prevent", "this", "by", "track", "the", "presence", "of", "the", "original", "request", "that", "cause", "the", "container", "start", "but", "based", "on", "the", "load", "test", "data", "this", "do", "not", "seem", "good", "enough", "to", "avoid", "flurry", "of", "evictions", "NUMBER", "In", "other", "words", "in", "a", "busy", "system", "likelihood", "of", "the", "original", "request", "get", "quickly", "serviced", "by", "another", "container", "be", "not", "that", "rare", "NUMBER", "With", "this", "change", "we", "restrict", "evict", "ability", "of", "container", "to", "Idle", "and", "Paused", "state", "exclusively", "NUMBER", "This", "increases", "the", "likelihood", "of", "back", "pressure", "NUMBER", "since", "it", "allows", "starting", "container", "to", "initialize", "NUMBER", "A", "race", "condition", "that", "occasionally", "causes", "a", "busy", "container", "eviction", "be", "also", "fix", "NUMBER", "The", "fix", "propose", "here", "be", "that", "we", "unblock", "the", "listener", "as", "if", "busy", "container", "really", "get", "evicted", "but", "in", "the", "busy", "container", "we", "simply", "refresh", "the", "eviction", "token", "and", "get", "rid", "of", "the", "evicted", "old", "token", "NUMBER", "Unblocked", "listener", "checkLaunch", "rechecks", "and", "attempts", "another", "launch", "after", "this", "NUMBER", "In", "future", "based", "on", "empirical", "data", "we", "may", "consider", "introduce", "evictions", "for", "slow", "docker", "pulls", "NUMBER", "If", "the", "above", "change", "still", "result", "in", "aggressive", "evictions", "a", "possible", "next", "step", "can", "be", "to", "restrict", "evictions", "to", "only", "paused", "container", "NUMBER", "reclaro", "Thanks", "for", "make", "these", "change", "LGTM", "NUMBER", "reclaro", "thanks", "for", "figuring", "the", "details", "out", "here", "NUMBER", "It", "seems", "like", "it", "s", "possible", "that", "we", "re", "not", "implement", "the", "http", "NUMBER", "ResponseWriter", "contract", "appropriately", "either", "NUMBER", "from", "LINK", "ResponseWriter", "Header", "returns", "the", "header", "map", "that", "will", "be", "sent", "by", "WriteHeader", "NUMBER", "The", "Header", "map", "also", "be", "the", "mechanism", "with", "which", "Handlers", "can", "set", "HTTP", "trailers", "NUMBER", "Changing", "the", "header", "map", "after", "a", "call", "to", "WriteHeader", "or", "Write", "has", "no", "effect", "unless", "the", "modify", "headers", "be", "trailers", "NUMBER", "this", "would", "seem", "to", "say", "that", "WriteHeader", "should", "write", "the", "headers", "generally", "with", "http", "there", "s", "a", "buffer", "here", "so", "that", "the", "headers", "and", "early", "body", "bits", "be", "write", "in", "one", "go", "instead", "of", "NUMBER", "we", "probably", "want", "similar", "behavior", "but", "I", "haven", "t", "thought", "about", "details", "with", "NUMBER", "RPC", "message", "there", "it", "may", "be", "trickier", "instead", "of", "currently", "our", "behavior", "be", "that", "headers", "be", "not", "set", "until", "Write", "time", "NUMBER", "From", "LINK", "L", "NUMBER", "we", "be", "appropriately", "calling", "WriteHeader", "before", "that", "and", "Write", "itself", "should", "call", "WriteHeader", "as", "well", "if", "it", "has", "not", "be", "call", "yet", "either", "I", "be", "not", "sure", "we", "re", "doing", "this", "either", "NUMBER", "When", "invoking", "my", "Python", "function", "sometimes", "I", "get", "the", "logging", "output", "with", "fn", "get", "logs", "app", "func", "last", "but", "many", "times", "I", "don", "t", "NUMBER", "I", "always", "see", "the", "logged", "output", "from", "my", "function", "in", "the", "fnserver", "debug", "logging", "output", "so", "that", "tells", "me", "the", "function", "itself", "be", "behaving", "properly", "NUMBER", "Steps", "NUMBER", "Invoke", "a", "Python", "function", "NUMBER", "NUMBER", "Check", "the", "logs", "fn", "get", "logs", "app", "func", "last", "NUMBER", "Repeat", "FN", "version", "Client", "version", "NUMBER", "be", "not", "latest", "NUMBER", "Server", "version", "NUMBER", "Platform", "OSX", "Darwin", "NUMBER", "Darwin", "Kernel", "Version", "NUMBER", "Thu", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PST", "NUMBER", "root", "xnu", "NUMBER", "NUMBER", "RELEASE_X", "NUMBER", "_", "NUMBER", "x", "NUMBER", "_", "NUMBER", "Docker", "version", "Client", "Docker", "Engine", "Community", "Version", "NUMBER", "API", "version", "NUMBER", "Go", "version", "go", "NUMBER", "Git", "commit", "NUMBER", "Built", "Sun", "Feb", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "OS", "Arch", "darwin", "amd", "NUMBER", "Experimental", "false", "Server", "Docker", "Engine", "Community", "Engine", "Version", "NUMBER", "API", "version", "NUMBER", "minimum", "version", "NUMBER", "Go", "version", "go", "NUMBER", "Git", "commit", "NUMBER", "Built", "Sun", "Feb", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "OS", "Arch", "linux", "amd", "NUMBER", "Experimental", "true", "Here", "be", "some", "more", "findings", "When", "I", "invoke", "a", "function", "and", "see", "the", "expected", "logging", "output", "with", "fn", "get", "logs", "app", "func", "last", "I", "see", "the", "following", "in", "fnserver", "debug", "log", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "starting", "call", "action", "server", "NUMBER", "handleFnInvokeCall", "fm", "app_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "VVNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "container_id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "PWFNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "A", "fn_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "XBNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "PWENG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "debug", "msg", "Log", "to", "stdout", "n", "action", "server", "NUMBER", "handleFnInvokeCall", "fm", "app_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "VVNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "call_id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "PWENG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "fn_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "XBNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "PWENG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "image", "iad", "NUMBER", "ocir", "NUMBER", "io", "renesysinternetintelligence", "hello", "latest", "user_log", "true", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "debug", "msg", "Log", "to", "stderr", "n", "action", "server", "NUMBER", "handleFnInvokeCall", "fm", "app_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "VVNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "call_id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "PWENG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "fn_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "XBNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "PWENG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "image", "iad", "NUMBER", "ocir", "NUMBER", "io", "renesysinternetintelligence", "hello", "latest", "user_log", "true", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "debug", "msg", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "root", "INFO", "NUMBER", "Feb", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "POST", "call", "HTTP", "NUMBER", "NUMBER", "NUMBER", "Go", "http", "client", "NUMBER", "n", "action", "server", "NUMBER", "handleFnInvokeCall", "fm", "app_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "VVNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "call_id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "PWENG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "fn_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "XBNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "PWENG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "image", "iad", "NUMBER", "ocir", "NUMBER", "io", "renesysinternetintelligence", "hello", "latest", "user_log", "true", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "debug", "msg", "Got", "resp", "from", "UDS", "socket", "action", "server", "NUMBER", "handleFnInvokeCall", "fm", "app_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "VVNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "fn_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "XBNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "PWENG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "resp", "NUMBER", "OK", "NUMBER", "HTTP", "NUMBER", "NUMBER", "NUMBER", "map", "Content", "Type", "application", "json", "Content", "Length", "NUMBER", "Date", "Thu", "NUMBER", "Feb", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Server", "Python", "NUMBER", "aiohttp", "NUMBER", "Fn", "Http", "Status", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "false", "false", "map", "NUMBER", "xc", "NUMBER", "TAG", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "debug", "msg", "docker", "pause", "app_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "VVNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "call_id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "PWFNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "A", "cpus", "fn_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "XBNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "PWFNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "A", "idle_timeout", "NUMBER", "image", "iad", "NUMBER", "ocir", "NUMBER", "io", "renesysinternetintelligence", "hello", "latest", "memory", "NUMBER", "stack", "Freeze", "When", "I", "don", "t", "see", "the", "logged", "output", "I", "see", "the", "following", "in", "the", "fnserver", "debug", "log", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "starting", "call", "action", "server", "NUMBER", "handleFnInvokeCall", "fm", "app_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "VVNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "container_id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "V", "NUMBER", "BNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "D", "fn_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "XBNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "KNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "F", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "debug", "msg", "docker", "unpause", "app_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "VVNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "call_id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "V", "NUMBER", "BNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "D", "cpus", "fn_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "XBNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "V", "NUMBER", "BNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "D", "idle_timeout", "NUMBER", "image", "iad", "NUMBER", "ocir", "NUMBER", "io", "renesysinternetintelligence", "hello", "latest", "memory", "NUMBER", "stack", "Unfreeze", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "debug", "msg", "Got", "resp", "from", "UDS", "socket", "action", "server", "NUMBER", "handleFnInvokeCall", "fm", "app_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "VVNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "fn_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "XBNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "KNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "F", "resp", "NUMBER", "OK", "NUMBER", "HTTP", "NUMBER", "NUMBER", "NUMBER", "map", "Fn", "Http", "Status", "NUMBER", "Content", "Type", "application", "json", "Content", "Length", "NUMBER", "Date", "Thu", "NUMBER", "Feb", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Server", "Python", "NUMBER", "aiohttp", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "false", "false", "map", "NUMBER", "xc", "NUMBER", "TAG", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "debug", "msg", "Log", "to", "stdout", "n", "app_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "VVNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "container_id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "V", "NUMBER", "BNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "D", "fn_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "XBNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "image", "iad", "NUMBER", "ocir", "NUMBER", "io", "renesysinternetintelligence", "hello", "latest", "tag", "stderr", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "debug", "msg", "Log", "to", "stderr", "n", "app_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "VVNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "container_id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "V", "NUMBER", "BNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "D", "fn_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "XBNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "image", "iad", "NUMBER", "ocir", "NUMBER", "io", "renesysinternetintelligence", "hello", "latest", "tag", "stderr", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "debug", "msg", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "root", "INFO", "NUMBER", "Feb", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "POST", "call", "HTTP", "NUMBER", "NUMBER", "NUMBER", "Go", "http", "client", "NUMBER", "n", "app_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "VVNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "container_id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "V", "NUMBER", "BNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "D", "fn_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "XBNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "image", "iad", "NUMBER", "ocir", "NUMBER", "io", "renesysinternetintelligence", "hello", "latest", "tag", "stderr", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "debug", "msg", "docker", "pause", "app_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "VVNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "call_id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "V", "NUMBER", "BNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "D", "cpus", "fn_id", "NUMBER", "D", "NUMBER", "Y", "NUMBER", "XBNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "id", "NUMBER", "D", "NUMBER", "PR", "NUMBER", "V", "NUMBER", "BNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "D", "idle_timeout", "NUMBER", "image", "iad", "NUMBER", "ocir", "NUMBER", "io", "renesysinternetintelligence", "hello", "latest", "memory", "NUMBER", "stack", "Freeze", "I", "notice", "two", "things", "here", "NUMBER", "When", "the", "logging", "works", "the", "fnserver", "debug", "output", "attaches", "user_log", "true", "to", "the", "function", "log", "message", "and", "they", "be", "recorded", "before", "the", "message", "Got", "resp", "from", "UDS", "socket", "NUMBER", "When", "the", "logging", "do", "not", "work", "the", "fnserver", "debug", "output", "attaches", "tag", "stderr", "to", "the", "function", "log", "message", "and", "they", "appear", "after", "the", "message", "Got", "resp", "from", "UDS", "socket", "Thanks", "for", "file", "an", "issue", "NUMBER", "One", "thing", "I", "d", "like", "to", "note", "if", "you", "do", "logging", "inside", "of", "a", "Python", "function", "you", "d", "need", "to", "flush", "your", "message", "ASAP", "i", "NUMBER", "e", "NUMBER", "print", "blah", "flush", "True", "file", "sys", "NUMBER", "derr", "NUMBER", "Yes", "the", "function", "flushes", "the", "message", "NUMBER", "paulfelix", "logs", "API", "itself", "be", "scheduled", "for", "deprecation", "we", "recommend", "use", "debug", "logs", "as", "you", "be", "now", "or", "use", "a", "syslog", "url", "LINK", "remote", "syslog", "for", "function", "sorry", "for", "the", "hitch", "be", "meaning", "to", "get", "around", "to", "this", "removal", "I", "tried", "to", "use", "the", "syslog", "url", "approach", "with", "no", "luck", "NUMBER", "Is", "there", "a", "way", "to", "set", "that", "up", "on", "OSX", "I", "m", "also", "not", "convinced", "that", "the", "problem", "goes", "away", "if", "one", "uses", "the", "syslog", "url", "which", "I", "m", "guessing", "be", "further", "down", "the", "pipeline", "NUMBER", "Thus", "log", "message", "might", "get", "lost", "either", "way", "NUMBER", "carimura", "mention", "miss", "logs", "use", "papertrail", "NUMBER", "we", "re", "use", "the", "docker", "logging", "drivers", "I", "d", "expect", "this", "to", "work", "on", "OSX", "configuration", "be", "no", "different", "NUMBER", "it", "s", "certainly", "possible", "that", "syslog", "can", "miss", "logs", "though", "I", "think", "there", "s", "quite", "a", "lower", "probability", "provide", "a", "stable", "connection", "we", "re", "attaching", "to", "the", "container", "and", "not", "swapping", "out", "each", "task", "as", "we", "be", "with", "the", "current", "logging", "API", "stuff", "which", "I", "suspect", "be", "likely", "responsible", "for", "some", "of", "the", "miss", "logs", "on", "that", "end", "at", "least", "I", "d", "surmise", "that", "the", "source", "of", "the", "problem", "for", "miss", "logs", "with", "either", "one", "be", "different", "than", "the", "other", "NUMBER", "This", "be", "what", "I", "did", "when", "I", "test", "all", "the", "FDK", "s", "hello", "worlds", "obviously", "needs", "more", "config", "etc", "NUMBER", "the", "system", "test", "don", "t", "test", "the", "new", "behavior", "but", "at", "least", "some", "rpc", "s", "be", "going", "to", "get", "executed", "there", "s", "some", "concurrency", "stuff", "too", "so", "they", "re", "not", "just", "lollipop", "test", "Ugh", "sorry", "NUMBER", "Based", "on", "offline", "follow", "up", "I", "didn", "t", "realize", "we", "were", "caching", "the", "incoming", "request", "at", "a", "higher", "level", "in", "the", "lb", "NUMBER", "In", "that", "case", "I", "don", "t", "see", "a", "problem", "with", "the", "exist", "implementation", "of", "isTooBusy", "NUMBER", "However", "my", "interpretation", "be", "that", "we", "can", "get", "these", "connection", "error", "in", "multiple", "situations", "so", "it", "may", "make", "sense", "to", "more", "crisply", "define", "when", "we", "can", "and", "can", "t", "retry", "one", "of", "these", "request", "in", "response", "to", "get", "our", "connection", "close", "NUMBER", "maybe", "out", "of", "band", "but", "why", "be", "the", "agent", "starting", "before", "the", "networks", "be", "created", "be", "agent", "startup", "so", "slow", "that", "we", "have", "to", "do", "it", "concurrently", "and", "uh", "how", "thing", "can", "start", "super", "fast", "worried", "about", "funny", "biz", "if", "any", "it", "would", "save", "us", "quite", "a", "bit", "of", "code", "anyway", "there", "be", "NUMBER", "layers", "of", "retries", "going", "on", "here", "fwiw", "since", "we", "want", "to", "retry", "any", "error", "for", "this", "one", "it", "s", "a", "little", "different", "than", "just", "temporary", "error", "like", "we", "do", "in", "the", "docker", "client", "anyway", "it", "sticks", "out", "as", "something", "to", "think", "about", "but", "I", "think", "this", "be", "absolutely", "fine", "can", "t", "think", "of", "any", "issue", "or", "way", "to", "merge", "the", "two", "cleanly", "really", "Recently", "Nvidia", "shared", "libraries", "enabling", "GPU", "intensive", "computations", "in", "Docker", "enable", "environments", "NUMBER", "That", "s", "a", "great", "improvement", "for", "all", "mathematicians", "and", "data", "scientists", "NUMBER", "Let", "s", "imagine", "Fn", "cluster", "enabling", "users", "access", "to", "quite", "expensive", "GPU", "NUMBER", "What", "Nvida", "made", "be", "based", "mainly", "on", "device", "mapping", "NUMBER", "It", "s", "describe", "here", "NUMBER", "LINK", "container", "NUMBER", "html", "and", "NUMBER", "LINK", "docker", "wiki", "GPU", "isolation", "version", "NUMBER", "And", "here", "what", "people", "did", "before", "LINK", "digits", "Device", "mapping", "makes", "it", "possible", "to", "access", "host", "level", "devices", "from", "container", "NUMBER", "Let", "s", "imagine", "that", "you", "do", "not", "have", "good", "random", "generator", "in", "the", "container", "but", "you", "have", "available", "the", "perfect", "one", "at", "host", "NUMBER", "To", "plug", "host", "device", "to", "the", "container", "do", "the", "following", "docker", "run", "it", "device", "dev", "random", "dev", "HOST_RANDOM", "r", "ubuntu", "bash", "c", "ls", "l", "dev", "grep", "HOST_RANDOM", "crw", "rw", "NUMBER", "root", "root", "NUMBER", "NUMBER", "Jan", "NUMBER", "NUMBER", "NUMBER", "HOST_RANDOM_DEVICE", "As", "you", "see", "there", "a", "new", "device", "NUMBER", "Non", "exist", "without", "device", "dev", "random", "dev", "HOST_RANDOM", "r", "NUMBER", "Now", "you", "can", "read", "from", "this", "new", "random", "generator", "NUMBER", "docker", "run", "it", "device", "dev", "random", "dev", "HOST_RANDOM_DEVICE", "r", "ubuntu", "bash", "c", "cat", "dev", "HOST_RANDOM_DEVICE", "head", "NUMBER", "exit", "It", "s", "the", "simplest", "demonstration", "NUMBER", "For", "random", "which", "be", "read", "only", "you", "may", "start", "multiple", "instances", "and", "read", "at", "the", "same", "time", "NUMBER", "Former", "trick", "for", "Nvidia", "GPU", "was", "based", "on", "devices", "mapping", "what", "be", "describe", "here", "LINK", "digits", "and", "here", "LINK", "docker", "wiki", "GPU", "isolation", "version", "NUMBER", "NUMBER", "it", "was", "do", "like", "this", "docker", "run", "it", "p", "TAG", "NUMBER", "device", "dev", "nvidiactl", "dev", "nvidiactl", "device", "dev", "nvidia", "uvm", "dev", "nvidia", "uvm", "device", "dev", "nvidia", "NUMBER", "dev", "nvidia", "NUMBER", "v", "TAG", "TAG", "iahmedkaseb", "cuda", "digits", "New", "way", "of", "doing", "this", "be", "little", "different", "and", "based", "on", "runtime", "NUMBER", "Described", "here", "LINK", "docker", "wiki", "Usage", "NUMBER", "Device", "mapping", "has", "a", "wider", "context", "of", "a", "lot", "of", "argument", "relate", "to", "docker", "run", "NUMBER", "It", "s", "about", "a", "lot", "of", "mission", "critical", "argument", "relate", "to", "memory", "consumption", "cgroups", "privileges", "etc", "NUMBER", "Details", "be", "here", "LINK", "According", "to", "Docker", "API", "device", "mapping", "and", "all", "run", "relate", "things", "should", "be", "specified", "by", "HostConfig", "structure", "NUMBER", "Inside", "of", "this", "there", "be", "Devices", "collection", "holding", "number", "of", "Device", "structures", "NUMBER", "API", "LINK", "tells", "that", "Devices", "A", "list", "of", "devices", "to", "add", "to", "the", "container", "specified", "as", "a", "JSON", "object", "in", "the", "form", "PathOnHost", "dev", "deviceName", "PathInContainer", "dev", "deviceName", "CgroupPermissions", "mrw", "I", "ve", "tried", "to", "dig", "into", "Fn", "code", "probably", "locating", "the", "place", "where", "container", "be", "start", "docker_client", "NUMBER", "go", "NUMBER", "however", "it", "looks", "that", "whole", "HostConfig", "contructure", "be", "just", "empty", "NUMBER", "func", "d", "dockerWrap", "StartContainerWithContext", "id", "string", "hostConfig", "docker", "NUMBER", "HostConfig", "ctx", "context", "NUMBER", "Context", "err", "error", "ctx", "closer", "makeTracker", "ctx", "docker_start_container", "defer", "closer", "ctx", "_", "common", "NUMBER", "LoggerWithFields", "ctx", "logrus", "NUMBER", "Fields", "docker_cmd", "StartContainer", "err", "d", "NUMBER", "retry", "ctx", "func", "error", "err", "d", "NUMBER", "docker", "NUMBER", "StartContainerWithContext", "id", "hostConfig", "ctx", "if", "_", "ok", "err", "NUMBER", "docker", "NUMBER", "NoSuchContainer", "ok", "for", "some", "reason", "create", "will", "sometimes", "return", "successfully", "then", "say", "no", "such", "container", "here", "NUMBER", "wtf", "NUMBER", "so", "just", "retry", "like", "normal", "return", "temp", "err", "return", "err", "return", "err", "It", "looks", "the", "above", "be", "invoked", "from", "docker", "NUMBER", "go", "where", "HostConfig", "be", "null", "NUMBER", "func", "drv", "DockerDriver", "startTask", "ctx", "context", "NUMBER", "Context", "container", "string", "error", "log", "common", "NUMBER", "Logger", "ctx", "log", "NUMBER", "WithFields", "logrus", "NUMBER", "Fields", "container", "container", "NUMBER", "Debug", "Starting", "container", "execution", "err", "drv", "NUMBER", "docker", "NUMBER", "StartContainerWithContext", "container", "nil", "ctx", "if", "err", "nil", "dockerErr", "ok", "err", "NUMBER", "docker", "NUMBER", "Error", "_", "containerAlreadyRunning", "err", "NUMBER", "docker", "NUMBER", "ContainerAlreadyRunning", "if", "containerAlreadyRunning", "ok", "dockerErr", "NUMBER", "Status", "NUMBER", "NUMBER", "container", "already", "start", "so", "we", "can", "ignore", "error", "else", "return", "err", "return", "err", "Adding", "device", "mapping", "on", "this", "stage", "be", "quite", "important", "for", "me", "as", "I", "m", "trying", "to", "demonstrate", "Fn", "as", "layer", "make", "it", "possible", "to", "provide", "remote", "access", "to", "quite", "expensive", "GPU", "platform", "NUMBER", "I", "m", "more", "that", "interesting", "in", "implement", "this", "even", "by", "myself", "however", "after", "first", "try", "it", "seems", "not", "to", "work", "properly", "NUMBER", "It", "was", "my", "naive", "definition", "of", "Devices", "holding", "one", "Device", "mapping", "NUMBER", "hostConfig", "docker", "NUMBER", "HostConfig", "Devices", "docker", "NUMBER", "Device", "docker", "NUMBER", "Device", "PathOnHost", "dev", "video", "NUMBER", "PathInContainer", "dev", "video", "NUMBER", "CgroupPermissions", "rwm", "I", "ve", "add", "above", "to", "docker_client", "NUMBER", "go", "NUMBER", "func", "d", "dockerWrap", "StartContainerWithContext", "id", "string", "hostConfig", "docker", "NUMBER", "HostConfig", "ctx", "context", "NUMBER", "Context", "err", "error", "ctx", "closer", "makeTracker", "ctx", "docker_start_container", "defer", "closer", "hostConfig", "docker", "NUMBER", "HostConfig", "Devices", "docker", "NUMBER", "Device", "docker", "NUMBER", "Device", "PathOnHost", "dev", "video", "NUMBER", "PathInContainer", "dev", "video", "NUMBER", "CgroupPermissions", "rwm", "ctx", "_", "common", "NUMBER", "LoggerWithFields", "ctx", "logrus", "NUMBER", "Fields", "docker_cmd", "StartContainer", "err", "d", "NUMBER", "retry", "ctx", "func", "error", "err", "d", "NUMBER", "docker", "NUMBER", "StartContainerWithContext", "id", "hostConfig", "ctx", "if", "_", "ok", "err", "NUMBER", "docker", "NUMBER", "NoSuchContainer", "ok", "for", "some", "reason", "create", "will", "sometimes", "return", "successfully", "then", "say", "no", "such", "container", "here", "NUMBER", "wtf", "NUMBER", "so", "just", "retry", "like", "normal", "return", "temp", "err", "return", "err", "return", "err", "I", "understand", "it", "s", "a", "wider", "issue", "around", "HostConfig", "however", "on", "this", "stage", "I", "m", "more", "than", "interested", "in", "having", "just", "device", "mapping", "NUMBER", "Let", "me", "know", "if", "above", "code", "be", "correct", "NUMBER", "Unfortunately", "Go", "be", "a", "a", "quite", "new", "environment", "for", "me", "NUMBER", "That", "seems", "to", "be", "the", "right", "place", "for", "the", "device", "mapping", "NUMBER", "So", "in", "order", "to", "make", "device", "mapping", "quite", "flexible", "I", "recommend", "make", "it", "configurable", "and", "there", "be", "couple", "options", "NUMBER", "Env", "var", "FN_DOCKER_DEVICE_MAPPINGS", "for", "instance", "with", "the", "structure", "PathOnHost", "PathInContainer", "CgroupPermissions", "NUMBER", "so", "if", "I", "d", "like", "to", "add", "the", "GPU", "device", "mapping", "for", "Fn", "I", "d", "need", "to", "set", "the", "following", "env", "var", "dev", "video", "NUMBER", "dev", "video", "NUMBER", "rwm", "if", "I", "need", "to", "add", "more", "device", "mapping", "I", "d", "need", "to", "set", "the", "following", "env", "var", "dev", "video", "NUMBER", "dev", "video", "NUMBER", "rwm", "dev", "random", "dev", "HOST_RANDOM", "r", "NUMBER", "via", "device", "mapping", "config", "file", "that", "be", "defined", "as", "env", "var", "FN_DOCKER_DEVICE_MAPPING_CONFIG", "NUMBER", "so", "the", "config", "file", "would", "be", "a", "JSON", "file", "with", "config", "mappings", "json", "PathOnHost", "NUMBER", "PathOnDevice", "NUMBER", "CgroupPermissions", "NUMBER", "this", "be", "actually", "more", "flexible", "and", "it", "s", "simple", "to", "process", "as", "if", "you", "d", "try", "to", "marshal", "a", "JSON", "from", "a", "file", "go", "dmc_file", "err", "os", "NUMBER", "Open", "os", "NUMBER", "Getenv", "FN_DOCKER_DEVICE_MAPPING_CONFIG", "process", "error", "var", "dms", "docker", "NUMBER", "Device", "err", "json", "NUMBER", "NewDecoder", "dmc_file", "NUMBER", "Decode", "dms", "process", "error", "hostConfig", "docker", "NUMBER", "HostConfig", "Devices", "dms", "Personally", "I", "prefer", "NUMBER", "option", "because", "if", "people", "need", "to", "add", "more", "options", "to", "each", "device", "mapping", "they", "would", "have", "no", "reason", "to", "modify", "Fn", "s", "code", "and", "go", "straight", "away", "editing", "device", "mapping", "config", "NUMBER", "rdallman", "skinowski", "thoughts", "It", "s", "perfect", "NUMBER", "Will", "try", "it", "tomorrow", "NUMBER", "NUMBER", "option", "will", "work", "i", "wasn", "t", "sure", "whether", "docker", "NUMBER", "Device", "structure", "be", "tag", "properly", "but", "it", "be", "LINK", "dockerclient", "blob", "NUMBER", "f", "NUMBER", "d", "NUMBER", "a", "NUMBER", "a", "NUMBER", "d", "NUMBER", "f", "NUMBER", "bdd", "NUMBER", "f", "NUMBER", "d", "NUMBER", "c", "NUMBER", "a", "container", "NUMBER", "go", "L", "NUMBER", "Hi", "I", "m", "trying", "to", "use", "the", "code", "posted", "by", "you", "dmc_file", "err", "os", "NUMBER", "Open", "os", "NUMBER", "Getenv", "FN_DOCKER_DEVICE_MAPPING_CONFIG", "process", "error", "var", "dms", "docker", "NUMBER", "Device", "err", "json", "NUMBER", "NewDecoder", "dmc_file", "NUMBER", "Decode", "dms", "process", "error", "hostConfig", "docker", "NUMBER", "HostConfig", "Devices", "dms", "And", "get", "the", "complier", "error", "on", "line", "hostConfig", "docker", "NUMBER", "HostConfig", "Devices", "dms", "Error", "cannot", "use", "dms", "type", "docker", "NUMBER", "Device", "as", "type", "docker", "NUMBER", "Device", "in", "field", "value", "I", "m", "quite", "new", "in", "Go", "and", "suspect", "that", "be", "some", "pointer", "trick", "here", "Could", "you", "help", "go", "hostConfig", "docker", "NUMBER", "HostConfig", "Devices", "dms", "Thanks", "it", "be", "compile", "sadly", "do", "not", "work", "on", "my", "machine", "I", "do", "the", "following", "test", "NUMBER", "Print", "HostConfig", "in", "docker_client", "NUMBER", "go", "to", "verify", "that", "env", "was", "loaded", "fmt", "NUMBER", "Println", "HostConfig", "v", "hostConfig", "Resoult", "HostConfig", "v", "map", "NUMBER", "dev", "video", "NUMBER", "dev", "video", "NUMBER", "rw", "map", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "map", "false", "false", "false", "false", "false", "map", "map", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "false", "NUMBER", "I", "have", "a", "long", "run", "Fn", "python", "based", "function", "that", "Sleep", "time", "NUMBER", "sleep", "NUMBER", "and", "ls", "on", "dev", "NUMBER", "During", "execution", "i", "try", "to", "get", "the", "run", "docker", "image", "docker", "ps", "a", "and", "inspect", "that", "docker", "inspect", "TAG", "I", "m", "checking", "and", "unfortunately", "Devices", "null", "HostConfig", "NUMBER", "Devices", "null", "NUMBER", "while", "when", "run", "docker", "run", "it", "device", "dev", "video", "NUMBER", "darknet", "bin", "bash", "docker", "inspect", "NUMBER", "a", "NUMBER", "ffdc", "NUMBER", "daa", "NUMBER", "gives", "HostConfig", "NUMBER", "Devices", "PathOnHost", "dev", "video", "NUMBER", "PathInContainer", "dev", "video", "NUMBER", "CgroupPermissions", "rwm", "NUMBER", "Maybe", "you", "miss", "something", "in", "configuration", "skinowski", "I", "don", "t", "think", "that", "this", "be", "a", "reason", "for", "starting", "another", "driver", "because", "device", "mapping", "be", "a", "part", "of", "docker", "API", "so", "this", "feature", "might", "end", "up", "be", "a", "part", "of", "docker", "driver", "NUMBER", "According", "to", "Docker", "nvidia", "gpu", "guide", "there", "s", "no", "need", "to", "run", "a", "container", "in", "priveleged", "mode", "I", "m", "order", "to", "allow", "gpu", "device", "mapping", "NUMBER", "But", "I", "m", "general", "I", "get", "what", "you", "re", "saying", "NUMBER", "niktaken", "can", "you", "make", "sure", "that", "GPU", "device", "mapping", "fits", "into", "non", "privileged", "container", "execution", "Added", "to", "UpdateState", "so", "as", "a", "container", "change", "status", "to", "starts", "and", "do", "it", "note", "that", "a", "given", "app", "function", "image", "tuple", "be", "hot", "or", "not", "in", "open", "census", "Changed", "UpdateState", "to", "take", "in", "the", "entire", "call", "for", "increase", "flexibility", "Link", "to", "issue", "this", "resolve", "NUMBER", "LINK", "What", "I", "did", "Added", "to", "UpdateState", "so", "as", "a", "container", "change", "status", "to", "starts", "and", "do", "it", "note", "that", "a", "given", "app", "function", "image", "tuple", "be", "hot", "or", "not", "in", "open", "census", "Changed", "UpdateState", "to", "take", "in", "the", "entire", "call", "for", "increase", "flexibility", "How", "I", "did", "it", "In", "agent", "NUMBER", "go", "I", "switched", "UpdatedState", "to", "take", "in", "call", "instead", "of", "call", "NUMBER", "slots", "so", "it", "can", "be", "more", "powerful", "NUMBER", "In", "stats", "NUMBER", "go", "I", "add", "a", "hotFunctionMeasure", "and", "tags", "for", "it", "in", "state_trackers", "NUMBER", "go", "I", "add", "the", "functionality", "such", "that", "when", "a", "container", "starts", "it", "increases", "the", "hot", "function", "measure", "by", "one", "for", "a", "given", "appId", "FunctionId", "Image", "and", "when", "that", "container", "close", "it", "decreases", "the", "hot", "function", "measure", "by", "one", "How", "to", "verify", "it", "Call", "a", "function", "on", "FN", "then", "while", "during", "it", "s", "timeout", "period", "call", "curl", "localhost", "NUMBER", "metrics", "grep", "a", "NUMBER", "b", "NUMBER", "Function", "and", "you", "should", "see", "a", "line", "that", "looks", "like", "fn_Hot_Functions", "app_id", "NUMBER", "CVRYP", "NUMBER", "EWNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "function_id", "NUMBER", "D", "NUMBER", "JFCNH", "NUMBER", "NG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "Z", "image_name", "imagename", "NUMBER", "NUMBER", "After", "the", "function", "times", "out", "which", "be", "NUMBER", "seconds", "by", "defualt", "and", "be", "not", "longer", "hot", "make", "that", "call", "again", "and", "you", "should", "see", "something", "like", "fn_Hot_Functions", "app_id", "NUMBER", "CVRYP", "NUMBER", "EWNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "function_id", "NUMBER", "D", "NUMBER", "JFCNH", "NUMBER", "NG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "Z", "image_name", "imagename", "NUMBER", "NUMBER", "One", "line", "description", "for", "the", "changelog", "Added", "change", "that", "exposes", "what", "function", "be", "currently", "hot", "to", "metrics", "One", "moving", "picture", "involving", "robots", "not", "mandatory", "but", "encourage", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "Sam", "Strauch", "LINK", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "Sure", "I", "can", "make", "the", "logging", "optional", "if", "performance", "be", "a", "large", "concern", "NUMBER", "Made", "change", "to", "the", "commit", "based", "on", "feedback", "NUMBER", "Now", "uses", "env", "FN_FUNCTION_STATE_METRICS", "to", "turn", "on", "metrics", "Metrics", "now", "be", "unique", "per", "container", "state", "eg", "container_paused_function", "SamTS", "I", "ve", "checked", "this", "out", "and", "run", "it", "with", "FN_CONTAINER_STATE_METRICS", "true", "NUMBER", "fnserver", "and", "in", "the", "metrics", "field", "I", "m", "not", "seeing", "any", "tags", "on", "the", "metrics", "I", "was", "expecting", "eg", "from", "curl", "sSL", "localhost", "NUMBER", "metrics", "TYPE", "fn_container_paused_total", "untyped", "fn_container_paused_total", "NUMBER", "be", "my", "test", "methodology", "off", "any", "ideas", "here", "p", "NUMBER", "s", "NUMBER", "if", "you", "want", "to", "rebase", "and", "push", "up", "that", "would", "be", "great", "thanks", "SamTS", "bad", "news", "I", "think", "NUMBER", "when", "I", "start", "this", "with", "the", "option", "off", "I", "see", "curl", "sSL", "localhost", "NUMBER", "metrics", "grep", "paused", "HELP", "fn_container_paused_total", "container", "in", "state", "container_paused_total", "TYPE", "fn_container_paused_total", "untyped", "fn_container_paused_total", "app_id", "function_id", "image_name", "NUMBER", "though", "I", "m", "glad", "to", "see", "update", "opencensus", "fix", "this", "I", "think", "we", "need", "to", "move", "the", "configuration", "setting", "to", "be", "around", "the", "views", "not", "registering", "certain", "tags", "rather", "than", "the", "metrics", "that", "be", "we", "can", "throw", "metrics", "with", "any", "tags", "at", "the", "views", "but", "unless", "the", "view", "registers", "those", "tags", "then", "they", "won", "t", "appear", "in", "prometheus", "NUMBER", "at", "present", "we", "re", "registering", "all", "the", "tags", "but", "not", "offering", "them", "from", "the", "metrics", "meaning", "the", "tags", "will", "be", "the", "zero", "value", "not", "what", "we", "want", "NUMBER", "be", "this", "plausible", "SamTS", "I", "did", "not", "get", "to", "this", "today", "sorry", "I", "will", "fiddle", "with", "how", "to", "configure", "the", "tags", "tomorrow", "and", "post", "whatever", "the", "results", "be", "here", "NUMBER", "async", "brain", "processing", "hasn", "t", "given", "me", "too", "many", "ideas", "since", "Monday", "sounds", "good", "let", "me", "know", "how", "it", "goes", "NUMBER", "SamTS", "this", "be", "what", "I", "m", "thinking", "LINK", "hotmetrics", "expand", "NUMBER", "this", "allows", "anybody", "build", "fn", "to", "build", "with", "whatever", "tags", "they", "want", "and", "on", "the", "backend", "we", "can", "wire", "in", "whatever", "tags", "we", "want", "just", "letting", "the", "main", "file", "add", "which", "tags", "they", "want", "to", "expose", "without", "additional", "configuration", "for", "various", "tags", "across", "the", "backend", "NUMBER", "I", "d", "like", "to", "cohesive", "plan", "for", "advertising", "and", "bunching", "what", "those", "tags", "be", "eventually", "for", "people", "to", "use", "but", "this", "at", "least", "be", "a", "start", "and", "be", "in", "line", "with", "what", "I", "m", "thinking", "I", "think", "this", "be", "the", "way", "the", "metrics", "views", "be", "supposed", "to", "be", "split", "really", "add", "whatever", "tags", "you", "want", "to", "metrics", "turn", "on", "with", "views", "NUMBER", "let", "me", "know", "what", "you", "make", "of", "that", "it", "will", "meet", "requirements", "by", "just", "having", "them", "on", "in", "OSS", "by", "default", "but", "won", "t", "bug", "our", "version", "of", "fn", "where", "we", "don", "t", "want", "to", "turn", "these", "tags", "on", "yet", "NUMBER", "I", "can", "PR", "this", "with", "your", "commit", "here", "or", "to", "your", "fork", "let", "me", "know", "which", "you", "d", "prefer", "NUMBER", "we", "do", "need", "to", "get", "the", "CLA", "sign", "to", "merge", "any", "commit", "though", "let", "me", "know", "if", "you", "have", "sign", "it", "and", "it", "s", "just", "our", "bot", "acting", "up", "it", "happens", "and", "we", "ll", "get", "that", "taken", "care", "of", "NUMBER", "rdallman", "The", "one", "bit", "I", "be", "concerned", "about", "be", "under", "the", "current", "construction", "fn_container_", "container_status", "_duration_seconds_bucket", "populates", "by", "the", "cross", "product", "of", "latency", "and", "each", "app", "fn", "image", "tuple", "NUMBER", "If", "you", "re", "good", "with", "it", "I", "m", "fine", "but", "it", "s", "something", "I", "notice", "that", "could", "make", "the", "information", "in", "that", "section", "more", "unclear", "NUMBER", "SamTS", "yea", "I", "think", "they", "will", "be", "useful", "for", "the", "latency", "buckets", "as", "well", "if", "i", "m", "understanding", "correctly", "I", "see", "them", "there", "NUMBER", "it", "s", "relatively", "easy", "to", "filter", "out", "tags", "in", "grafana", "to", "get", "eg", "the", "duration", "across", "all", "function", "I", "forget", "how", "prometheus", "handles", "the", "tags", "in", "queries", "ie", "if", "the", "query", "be", "expensive", "or", "not", "to", "ignore", "tags", "I", "guess", "that", "brings", "up", "a", "good", "point", "that", "we", "may", "want", "the", "metrics", "raw", "separately", "from", "the", "fully", "tag", "version", "just", "to", "quickly", "query", "the", "former", "if", "that", "s", "an", "issue", "honestly", "idk", "I", "guess", "I", "should", "figure", "that", "out", "NUMBER", "cool", "i", "can", "PR", "this", "and", "tag", "another", "for", "review", "if", "that", "works", "for", "you", "any", "luck", "with", "CLA", "bot", "LINK", "issuecomment", "NUMBER", "let", "me", "know", "if", "I", "can", "help", "would", "be", "nice", "to", "close", "this", "out", "sorry", "it", "s", "dragged", "on", "so", "long", "Yeah", "that", "works", "great", "CLA", "should", "be", "in", "progress", "sent", "off", "the", "form", "so", "however", "long", "that", "takes", "NUMBER", "rdallman", "FYI", "SamTS", "s", "OCA", "be", "now", "approved", "CLA", "Bot", "All", "committers", "have", "sign", "the", "CLA", "NUMBER", "SamTS", "sorry", "for", "delay", "again", "here", "I", "ve", "opened", "LINK", "to", "close", "this", "out", "I", "hope", "close", "via", "NUMBER", "thanks", "The", "lb_agent", "logs", "an", "error", "if", "the", "difference", "between", "exec", "and", "call", "latency", "be", "NUMBER", "this", "change", "increase", "the", "value", "to", "reduce", "some", "potential", "false", "positive", "NUMBER", "resolve", "NUMBER", "skinowski", "NUMBER", "possibilities", "be", "listed", "LINK", "reclaro", "closing", "since", "NUMBER", "be", "merge", "we", "can", "try", "this", "again", "if", "it", "isn", "t", "fix", "by", "that", "thanks", "FN_API_URL", "LINK", "path", "fn", "version", "Client", "version", "NUMBER", "be", "not", "latest", "NUMBER", "Server", "version", "server", "s", "logfile", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "cl", "dc", "NUMBER", "nodeXXX", "fabio", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "WARN", "No", "route", "for", "fqdn", "NUMBER", "version", "It", "seems", "that", "fn", "ignores", "the", "path", "from", "FN_API_URL", "NUMBER", "I", "tried", "a", "custom", "context", "fn", "list", "context", "CURRENT", "NAME", "PROVIDER", "API", "URL", "REGISTRY", "default", "default", "LINK", "nms", "default", "LINK", "path", "Does", "not", "change", "anything", "NUMBER", "I", "have", "the", "same", "issue", "with", "client", "NUMBER", "on", "OSX", "NUMBER", "Hi", "I", "be", "unable", "to", "replicate", "this", "NUMBER", "Would", "it", "be", "possible", "to", "try", "again", "with", "the", "latest", "version", "and", "let", "me", "know", "if", "it", "s", "work", "for", "you", "now", "I", "m", "assuming", "it", "has", "be", "fix", "NUMBER", "In", "order", "to", "try", "and", "replicate", "this", "I", "ensured", "nothing", "was", "run", "on", "the", "default", "localhost", "NUMBER", "just", "to", "ensure", "fn", "wasn", "t", "ignoring", "the", "environment", "variable", "completely", "start", "an", "fnserver", "on", "port", "NUMBER", "and", "then", "setup", "a", "local", "reverse", "proxy", "that", "forwarded", "fn", "to", "LINK", "NUMBER", "vzarola", "Mac", "myapp", "NUMBER", "vzarola", "echo", "FN_API_URL", "LINK", "vzarola", "Mac", "myapp", "NUMBER", "vzarola", "fn", "list", "app", "NAME", "ID", "myApp", "NUMBER", "D", "NUMBER", "KMK", "NUMBER", "SZNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "myapp", "NUMBER", "NUMBER", "D", "NUMBER", "J", "NUMBER", "TSJ", "NUMBER", "NG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "vzarola", "Mac", "myapp", "NUMBER", "vzarola", "fn", "version", "Client", "version", "be", "latest", "version", "NUMBER", "Server", "version", "After", "terminating", "the", "reverse", "proxy", "I", "get", "vzarola", "Mac", "myapp", "NUMBER", "vzarola", "fn", "list", "app", "Fn", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "connect", "connection", "refused", "See", "fn", "TAG", "help", "for", "more", "information", "NUMBER", "Client", "version", "NUMBER", "Ah", "I", "see", "the", "issue", "be", "isolated", "to", "the", "fn", "version", "command", "NUMBER", "I", "misunderstood", "and", "thought", "none", "of", "the", "commands", "were", "work", "e", "NUMBER", "g", "NUMBER", "fn", "list", "app", "NUMBER", "I", "think", "the", "cause", "for", "this", "be", "this", "line", "LINK", "_go", "blob", "NUMBER", "d", "NUMBER", "d", "NUMBER", "b", "NUMBER", "cdbbcd", "NUMBER", "d", "NUMBER", "f", "NUMBER", "fa", "NUMBER", "dd", "NUMBER", "a", "provider", "defaultprovider", "default_provider", "NUMBER", "go", "L", "NUMBER", "NUMBER", "It", "needs", "change", "to", "use", "op", "NUMBER", "FnApiUrl", "NUMBER", "Path", "like", "this", "line", "LINK", "_go", "blob", "NUMBER", "d", "NUMBER", "d", "NUMBER", "b", "NUMBER", "cdbbcd", "NUMBER", "d", "NUMBER", "f", "NUMBER", "fa", "NUMBER", "dd", "NUMBER", "a", "provider", "oracle", "oracle_provider", "NUMBER", "go", "L", "NUMBER", "NUMBER", "Before", "change", "vzarola", "Mac", "test", "vzarola", "echo", "FN_API_URL", "LINK", "vzarola", "Mac", "test", "vzarola", "fn", "version", "Client", "version", "be", "latest", "version", "NUMBER", "Server", "version", "Proxy", "Logs", "CONNECT", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Request", "file", "descriptor", "NUMBER", "GET", "version", "HTTP", "NUMBER", "After", "change", "vzarola", "Mac", "test", "vzarola", "echo", "FN_API_URL", "LINK", "vzarola", "Mac", "test", "vzarola", "fn", "version", "Client", "version", "be", "latest", "version", "NUMBER", "Server", "version", "NUMBER", "proxy", "logs", "CONNECT", "Apr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Request", "file", "descriptor", "NUMBER", "GET", "fn", "version", "HTTP", "NUMBER", "I", "ll", "create", "a", "PR", "How", "can", "I", "get", "the", "IP", "address", "of", "a", "function", "caller", "Is", "there", "any", "way", "of", "get", "the", "original", "HTTP", "request", "Assuming", "this", "be", "for", "HTTP", "triggers", "do", "it", "suffice", "for", "the", "the", "trigger", "handler", "to", "add", "X", "Forwarded", "For", "at", "the", "gateway", "I", "m", "use", "the", "Java", "FDK", "but", "I", "guess", "this", "be", "a", "generic", "issue", "for", "all", "the", "FDKs", "to", "be", "able", "to", "resolve", "the", "details", "of", "the", "incoming", "request", "NUMBER", "The", "use", "case", "I", "m", "trying", "to", "implement", "be", "to", "implement", "an", "analytics", "end", "point", "as", "a", "FN", "function", "where", "some", "details", "of", "the", "caller", "be", "stored", "NUMBER", "The", "IP", "address", "be", "one", "of", "those", "details", "NUMBER", "For", "the", "caller", "IP", "use", "case", "the", "X", "Forwarded", "For", "header", "be", "fine", "but", "the", "optimal", "implementation", "from", "my", "point", "of", "view", "would", "be", "that", "the", "Java", "FDK", "would", "provide", "a", "injected", "type", "RequestEvent", "or", "similar", "that", "would", "contain", "the", "details", "of", "the", "original", "request", "NUMBER", "For", "other", "FDK", "s", "a", "similar", "thing", "can", "probably", "be", "do", "as", "well", "NUMBER", "denismakogon", "Sure", "I", "can", "manually", "do", "it", "but", "then", "I", "have", "to", "trust", "what", "the", "clients", "be", "sending", "to", "the", "function", "NUMBER", "That", "be", "not", "really", "an", "option", "NUMBER", "What", "I", "be", "after", "be", "something", "I", "can", "currently", "can", "do", "with", "AWS", "API", "Gateway", "LINK", "center", "custom", "headers", "api", "gateway", "lambda", "allowing", "access", "to", "the", "original", "request", "and", "mapping", "it", "onto", "JSON", "NUMBER", "For", "example", "via", "the", "API", "gateway", "I", "can", "do", "something", "like", "this", "if", "context", "NUMBER", "identity", "NUMBER", "sourceIp", "NUMBER", "source_ip", "context", "NUMBER", "identity", "NUMBER", "sourceIp", "else", "broken", "end", "This", "allows", "me", "to", "implement", "IP", "filtering", "logging", "etc", "NUMBER", "Addresses", "LINK", "by", "raising", "the", "default", "container", "start", "timeout", "to", "NUMBER", "seconds", "NUMBER", "To", "give", "more", "context", "the", "change", "propose", "here", "be", "not", "about", "addressing", "any", "particular", "FDK", "s", "internal", "initialization", "taking", "too", "long", "NUMBER", "The", "way", "the", "major", "FDKs", "be", "currently", "implement", "do", "not", "provide", "any", "guarantees", "that", "end", "user", "code", "won", "t", "run", "prior", "to", "FDK", "initialization", "thus", "cause", "a", "timeout", "NUMBER", "For", "example", "a", "static", "initialization", "block", "in", "a", "Java", "function", "or", "a", "custom", "import", "inside", "a", "Python", "function", "will", "currently", "take", "place", "prior", "to", "FDK", "initialization", "and", "can", "cause", "a", "timeout", "if", "the", "total", "time", "be", "over", "five", "seconds", "NUMBER", "Optimizing", "a", "particular", "FDK", "s", "initialization", "although", "valuable", "do", "not", "solve", "the", "problem", "of", "customer", "imports", "or", "static", "block", "declarations", "defined", "outside", "the", "FDK", "s", "control", "NUMBER", "Other", "than", "provide", "more", "time", "for", "initialization", "of", "customer", "code", "the", "only", "way", "to", "fully", "mitigate", "this", "would", "require", "us", "to", "rewrite", "all", "of", "our", "FDKs", "to", "use", "the", "appropriate", "language", "constructs", "that", "can", "guarantee", "that", "FDK", "initialization", "completes", "prior", "to", "run", "or", "loading", "any", "external", "customer", "code", "if", "available", "in", "that", "language", "NUMBER", "In", "the", "meantime", "any", "FDK", "be", "liable", "to", "run", "into", "a", "container", "initialization", "timeouts", "purely", "as", "a", "result", "of", "customer", "code", "initialization", "run", "on", "it", "and", "outside", "of", "the", "control", "of", "the", "FDK", "in", "question", "NUMBER", "Should", "close", "this", "PR", "Python", "FDK", "issue", "be", "be", "fix", "NUMBER", "I", "m", "not", "oppose", "to", "modifying", "this", "in", "future", "but", "we", "should", "only", "do", "so", "based", "on", "metrics", "observations", "NUMBER", "Increasing", "this", "too", "high", "eg", "NUMBER", "NUMBER", "secs", "be", "risky", "and", "needs", "careful", "evaluation", "test", "to", "ensure", "there", "s", "no", "scheduler", "impact", "NUMBER", "I", "d", "also", "prefer", "that", "we", "not", "implement", "a", "solution", "that", "increases", "the", "timeout", "unless", "it", "s", "absolutely", "necessary", "NUMBER", "We", "re", "fix", "the", "specific", "problem", "in", "the", "FDK", "NUMBER", "I", "d", "vote", "to", "close", "this", "out", "NUMBER", "Happy", "to", "close", "it", "for", "now", "since", "we", "be", "addressing", "this", "issue", "at", "the", "FDK", "level", "NUMBER", "Naming", "nit", "use", "UserExecutionTime", "sounds", "a", "bit", "like", "we", "re", "collecting", "user", "sys", "and", "idle", "times", "NUMBER", "I", "was", "going", "to", "suggest", "ContainerExecutionTime", "but", "I", "realize", "that", "doesn", "t", "differentiate", "between", "the", "FDK", "user", "cases", "so", "maybe", "this", "be", "fine", "as", "be", "NUMBER", "If", "you", "have", "other", "ideas", "for", "a", "name", "that", "doesn", "t", "share", "the", "potential", "for", "confusion", "with", "track", "time", "spent", "other", "cpu", "state", "though", "I", "m", "certainly", "open", "to", "revision", "NUMBER", "skinowski", "did", "call", "NUMBER", "CompletedAt", "call", "NUMBER", "StartedAt", "diverge", "from", "meaning", "actual", "user", "execution", "time", "rdallman", "This", "be", "actually", "completedAt", "StartedAt", "come", "from", "runners", "but", "this", "be", "recorded", "as", "UserExecutionTime", "on", "LB", "side", "NUMBER", "On", "LB", "side", "StartedAt", "timestamp", "has", "a", "different", "meaning", "NUMBER", "StartedAt", "be", "placer", "start", "searching", "NUMBER", "We", "probably", "could", "shuffle", "things", "and", "make", "these", "right", "on", "LB", "but", "since", "now", "handlers", "callbacks", "be", "executed", "before", "placer", "algorithm", "kicks", "in", "it", "be", "difficult", "to", "change", "with", "dependencies", "NUMBER", "Another", "approach", "be", "set", "call", "NUMBER", "StartedAt", "on", "LB", "side", "again", "after", "the", "call", "be", "executed", "use", "StartedAt", "from", "runners", "but", "either", "way", "it", "s", "a", "hack", "NUMBER", "oh", "boy", "NUMBER", "thanks", "for", "explanation", "NUMBER", "it", "seems", "to", "have", "lost", "its", "meaning", "in", "that", "case", "and", "without", "storing", "them", "why", "not", "I", "guess", "where", "it", "wouldn", "t", "be", "set", "until", "execution", "began", "on", "the", "runner", "NUMBER", "I", "guess", "if", "that", "were", "the", "case", "most", "of", "this", "wouldn", "t", "have", "be", "necessary", "though", "new", "interface", "methods", "methods", "on", "call", "etc", "Another", "approach", "be", "set", "call", "NUMBER", "StartedAt", "on", "LB", "side", "again", "after", "the", "call", "be", "executed", "use", "StartedAt", "from", "runners", "but", "either", "way", "it", "s", "a", "hack", "NUMBER", "this", "makes", "sense", "to", "me", "and", "be", "the", "intended", "usage", "anyway", "as", "it", "s", "documented", "on", "the", "field", "itself", "with", "the", "exception", "that", "LB", "probably", "shouldn", "t", "set", "it", "to", "begin", "with", "and", "should", "read", "it", "from", "the", "runner", "s", "call", "object", "intuitively", "maybe", "the", "runner", "call", "object", "should", "really", "replace", "the", "lb", "call", "object", "NUMBER", "i", "guess", "ideally", "the", "LB", "just", "uses", "CreatedAt", "as", "there", "isn", "t", "a", "meaningful", "amount", "of", "time", "between", "the", "call", "object", "get", "created", "in", "the", "lb", "and", "starting", "to", "place", "things", "idk", "for", "pure", "runner", "this", "turns", "it", "off", "for", "real", "this", "time", "NUMBER", "this", "also", "just", "makes", "the", "agent", "container", "type", "send", "stdout", "to", "stderr", "since", "we", "re", "not", "use", "stdout", "for", "function", "output", "anymore", "this", "be", "pretty", "straightforward", "hopefully", "NUMBER", "I", "add", "a", "panic", "and", "some", "type", "checking", "printlns", "to", "ensure", "this", "be", "true", "for", "pure_runner", "both", "stdout", "and", "stderr", "be", "off", "also", "add", "a", "unit", "test", "from", "agent", "to", "ensure", "this", "behavior", "from", "its", "container", "type", "which", "pure_runner", "utilizes", "no", "integration", "test", "though", "will", "fix", "up", "ci", "NUMBER", "can", "t", "run", "all", "test", "locally", "these", "days", "woo", "figured", "out", "why", "the", "ghost", "writer", "was", "a", "thing", "need", "to", "swap", "out", "underlying", "writers", "handed", "off", "to", "the", "docker", "driver", "s", "stderr", "io", "NUMBER", "Writer", "d", "oh", "so", "we", "keep", "them", "I", "guess", "NUMBER", "Closing", "this", "for", "now", "NUMBER", "FDK", "must", "respond", "with", "NUMBER", "NUMBER", "NUMBER", "to", "http", "request", "NUMBER", "Any", "other", "status", "be", "invalid", "and", "container", "must", "be", "terminated", "if", "that", "occur", "NUMBER", "HTTP", "timeouts", "be", "also", "considered", "a", "shutdown", "reason", "for", "the", "container", "NUMBER", "this", "seems", "unforgiving", "at", "best", "NUMBER", "do", "we", "want", "to", "leave", "a", "nozzle", "to", "shut", "down", "container", "like", "this", "now", "that", "timeout", "doesn", "t", "cause", "i", "o", "issue", "and", "just", "causes", "resource", "utilization", "issue", "be", "this", "required", "can", "think", "of", "policies", "like", "letting", "fn", "respond", "with", "NUMBER", "but", "wait", "for", "container", "to", "actually", "return", "http", "code", "before", "be", "ready", "for", "slot", "again", "this", "has", "obvious", "issue", "to", "handle", "highlight", "that", "alternative", "policies", "exist", "eg", "letting", "users", "shut", "down", "container", "causes", "container", "churn", "and", "can", "cause", "issue", "and", "if", "we", "don", "t", "have", "a", "great", "way", "of", "informing", "users", "they", "fail", "the", "contract", "this", "be", "confusing", "I", "guess", "we", "can", "do", "things", "like", "rewrite", "TAG", "NUMBER", "to", "NUMBER", "and", "be", "more", "forgiving", "at", "least", "i", "see", "users", "get", "confused", "about", "FN_HTTP_STATUS", "and", "this", "code", "and", "think", "it", "s", "a", "user", "story", "to", "sort", "out", "TAG", "Description", "Assume", "you", "ve", "configured", "an", "application", "with", "a", "syslog", "Papertrail", "Logstash", "etc", "NUMBER", "but", "for", "some", "reason", "it", "get", "broke", "NUMBER", "It", "appears", "that", "broken", "syslog", "blocks", "the", "execution", "of", "a", "function", "NUMBER", "Steps", "to", "reproduce", "the", "issue", "NUMBER", "create", "an", "app", "and", "a", "function", "NUMBER", "setup", "Papertrail", "account", "get", "the", "logging", "URL", "NUMBER", "fn", "update", "app", "testapp", "syslog", "url", "tcp", "tls", "logs", "NUMBER", "papertrailapp", "NUMBER", "com", "NUMBER", "you", "can", "actuall", "use", "this", "one", "because", "this", "one", "was", "revoked", "NUMBER", "NUMBER", "Revoke", "papertrail", "account", "NUMBER", "NUMBER", "Call", "a", "function", "see", "Fn", "logs", "NUMBER", "Describe", "the", "results", "you", "received", "A", "sequence", "of", "the", "following", "erros", "in", "Fn", "logs", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "app_id", "NUMBER", "CQR", "NUMBER", "HQNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "cpus", "docker_cmd", "StartContainer", "error", "API", "error", "NUMBER", "fail", "to", "initialize", "logging", "driver", "dial", "tcp", "NUMBER", "NUMBER", "connect", "connection", "refused", "fn_id", "NUMBER", "CV", "NUMBER", "DSCTMNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "id", "NUMBER", "CVWWVD", "NUMBER", "PNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "idle_timeout", "NUMBER", "image", "denismakogon", "word", "generator", "NUMBER", "memory", "NUMBER", "leads", "to", "ime", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "internal", "server", "error", "action", "server", "NUMBER", "handleFnInvokeCall", "fm", "error", "API", "error", "NUMBER", "fail", "to", "initialize", "logging", "driver", "dial", "tcp", "NUMBER", "NUMBER", "connect", "connection", "refused", "fnID", "NUMBER", "CV", "NUMBER", "DSCTMNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "Describe", "the", "results", "you", "expected", "I", "actually", "not", "sure", "what", "i", "was", "expecting", "to", "get", "since", "i", "miss", "the", "whole", "thing", "about", "revoking", "update", "my", "app", "with", "a", "new", "papertrail", "instance", "NUMBER", "But", "i", "assume", "that", "broken", "syslog", "might", "not", "be", "a", "problem", "for", "the", "invocation", "no", "thanks", "this", "be", "interesting", "and", "seems", "like", "a", "behavior", "we", "should", "try", "to", "document", "and", "allow", "users", "to", "get", "a", "useful", "error", "message", "on", "at", "least", "NUMBER", "an", "argument", "could", "likely", "be", "made", "either", "way", "probably", "that", "if", "logs", "can", "t", "connect", "users", "may", "or", "may", "want", "function", "to", "run", "regardless", "but", "yea", "I", "d", "imagine", "most", "people", "would", "rather", "have", "their", "function", "run", "and", "not", "get", "logs", "than", "not", "run", "NUMBER", "seems", "like", "a", "good", "policy", "would", "be", "retry", "connect", "a", "few", "times", "bound", "this", "and", "then", "maybe", "try", "to", "start", "the", "container", "without", "the", "logging", "driver", "attached", "eventually", "we", "d", "need", "to", "make", "sure", "this", "error", "be", "user", "visible", "somehow", "probably", "which", "be", "tricky", "without", "logs", "so", "that", "users", "can", "see", "that", "their", "logging", "driver", "didn", "t", "connect", "when", "they", "ask", "why", "they", "aren", "t", "get", "logs", "metrics", "would", "be", "a", "good", "place", "for", "that", "maybe", "but", "we", "don", "t", "have", "a", "good", "story", "there", "either", "NUMBER", "any", "thoughts", "ideas", "That", "s", "the", "thing", "I", "m", "not", "sure", "that", "what", "would", "be", "the", "right", "way", "NUMBER", "Maybe", "test", "a", "connectivity", "when", "a", "user", "attempts", "to", "update", "his", "app", "with", "a", "new", "syslog", "URL", "It", "do", "seem", "to", "be", "kind", "of", "unexpect", "for", "users", "to", "block", "an", "invocation", "when", "the", "syslog", "be", "broken", "unreachable", "NUMBER", "I", "d", "rather", "not", "get", "logs", "but", "give", "my", "function", "a", "shot", "NUMBER", "I", "tend", "to", "agree", "this", "situation", "be", "like", "Uroboros", "you", "can", "t", "get", "logs", "because", "log", "service", "be", "down", "you", "can", "t", "tell", "people", "that", "their", "log", "service", "be", "down", "because", "we", "have", "only", "NUMBER", "transport", "for", "logs", "a", "user", "s", "log", "service", "NUMBER", "skinowski", "I", "think", "that", "s", "the", "best", "we", "can", "do", "in", "a", "short", "term", "NUMBER", "it", "s", "also", "an", "option", "to", "go", "back", "to", "doing", "these", "ourselves", "and", "get", "behavior", "we", "want", "and", "call", "ids", "but", "then", "we", "have", "the", "networking", "problem", "ie", "container", "must", "have", "outbound", "access", "that", "can", "reach", "log", "service", "we", "ve", "at", "least", "improved", "this", "error", "LINK", "closing", "I", "think", "I", "should", "add", "another", "timeout", "here", "docker", "pull", "vs", "UDS", "start", "NUMBER", "Blanket", "timeout", "for", "all", "of", "it", "seems", "too", "broad", "and", "leaves", "too", "much", "time", "for", "UDS", "start", "phase", "which", "will", "eat", "cpu", "mem", "outside", "of", "call", "NUMBER", "Start", "End", "NUMBER", "that", "seems", "fine", "NUMBER", "original", "uds", "proposal", "had", "NUMBER", "s", "or", "something", "yea", "they", "re", "on", "the", "clock", "for", "the", "uds", "thing", "NUMBER", "TAG", "Description", "TAG", "Steps", "to", "reproduce", "the", "issue", "NUMBER", "fn", "init", "runtime", "go", "name", "test", "and", "fn", "v", "deploy", "app", "testapp", "local", "NUMBER", "fn", "inspect", "fn", "testapp", "test", "shows", "timeout", "value", "as", "NUMBER", "this", "be", "fine", "NUMBER", "update", "timeout", "in", "func", "NUMBER", "yaml", "to", "NUMBER", "and", "re", "deploy", "the", "app", "NUMBER", "fn", "inspect", "fn", "testapp", "test", "shows", "timeout", "value", "as", "NUMBER", "so", "far", "so", "good", "NUMBER", "remove", "the", "timeout", "from", "func", "NUMBER", "yaml", "and", "re", "deploy", "the", "app", "Describe", "the", "results", "you", "received", "fn", "inspect", "fn", "testapp", "test", "still", "shows", "timeout", "value", "as", "NUMBER", "Describe", "the", "results", "you", "expected", "fn", "inspect", "fn", "testapp", "test", "should", "show", "timeout", "value", "as", "NUMBER", "default", "value", "Output", "of", "fn", "version", "CLI", "command", "Client", "version", "NUMBER", "be", "not", "latest", "NUMBER", "Additional", "environment", "details", "OSX", "Linux", "flags", "etc", "NUMBER", "Linux", "Hi", "your", "assumption", "be", "quite", "incorrect", "NUMBER", "Because", "when", "you", "delete", "the", "timeout", "from", "the", "func", "NUMBER", "yaml", "and", "calling", "fn", "deploy", "you", "re", "basically", "saying", "to", "Fn", "to", "update", "my", "function", "with", "no", "timeout", "change", "that", "s", "why", "the", "timeout", "will", "remain", "as", "it", "was", "from", "the", "last", "update", "NUMBER", "So", "IMHO", "it", "s", "not", "a", "bug", "but", "expected", "behaviour", "NUMBER", "thanks", "for", "explanation", "that", "helps", "clarify", "i", "mostly", "solve", "the", "puzzle", "woo", "NUMBER", "gives", "me", "some", "intuition", "that", "the", "nanny", "be", "much", "more", "straightforward", "if", "it", "s", "solely", "responsible", "for", "setting", "the", "container", "to", "evictable", "state", "if", "initialization", "be", "ongoing", "when", "the", "initiating", "thread", "returns", "i", "do", "see", "how", "it", "s", "a", "convenient", "place", "to", "run", "a", "state", "machine", "since", "it", "s", "there", "there", "be", "just", "NUMBER", "of", "them", "basically", "one", "of", "them", "actually", "doing", "the", "things", "cookie", "NUMBER", "Prepare", "cookie", "NUMBER", "Run", "etc", "another", "watching", "for", "those", "things", "to", "happen", "in", "a", "separate", "place", "given", "the", "cookie", "apis", "aren", "t", "async", "nanny", "just", "seems", "maybe", "more", "complicated", "than", "it", "needs", "to", "be", "like", "i", "said", "earlier", "though", "it", "may", "lead", "to", "context", "jungle", "anyway", "trust", "your", "judgment", "it", "s", "just", "an", "idea", "NUMBER", "Link", "to", "issue", "this", "resolve", "So", "many", "What", "I", "did", "Used", "Go", "Mod", "How", "I", "did", "it", "Quickly", "How", "to", "verify", "it", "go", "mod", "download", "go", "mod", "vendor", "v", "One", "line", "description", "for", "the", "changelog", "Burned", "go", "dep", "NUMBER", "In", "a", "fire", "NUMBER", "One", "moving", "picture", "involving", "robots", "not", "mandatory", "but", "encourage", "packing", "up", "those", "mods", "LINK", "content", "uploads", "NUMBER", "NUMBER", "gif", "NUMBER", "gif", "w", "NUMBER", "crop", "NUMBER", "Packing", "up", "those", "mods", "NUMBER", "Current", "status", "on", "each", "question", "NUMBER", "certain", "transitive", "dependencies", "seem", "to", "have", "be", "remove", "by", "mod", "a", "quick", "glance", "I", "find", "NUMBER", "valid", "transitive", "deps", "golang", "NUMBER", "org", "x", "text", "github", "NUMBER", "com", "petar", "GoLLRB", "NUMBER", "even", "if", "the", "following", "point", "be", "possible", "this", "be", "a", "little", "concerning", "just", "for", "the", "status", "of", "go", "mod", "but", "I", "m", "optimistic", "that", "it", "s", "just", "part", "of", "the", "migration", "or", "something", "we", "can", "fix", "I", "can", "explicitly", "include", "that", "NUMBER", "The", "indication", "I", "get", "from", "the", "docs", "be", "that", "it", "will", "prune", "modules", "that", "be", "not", "reachable", "NUMBER", "So", "I", "m", "not", "sure", "what", "happened", "there", "NUMBER", "be", "it", "possible", "to", "swap", "out", "the", "Gopkg", "NUMBER", "file", "for", "the", "go", "NUMBER", "sum", "without", "any", "update", "of", "the", "dependencies", "here", "whereby", "run", "go", "mod", "tidy", "or", "go", "mod", "vendor", "or", "go", "mod", "verify", "would", "not", "cause", "any", "vendor", "file", "to", "change", "pardon", "my", "unfamiliarity", "with", "the", "tool", "I", "believe", "I", "m", "mostly", "talking", "about", "verify", "or", "vendor", "though", "where", "the", "go", "NUMBER", "sum", "file", "would", "ensure", "the", "vendor", "has", "all", "matching", "deps", "in", "the", "same", "manner", "as", "dep", "ensure", "did", "it", "would", "make", "this", "PR", "really", "easy", "to", "green", "light", "if", "this", "be", "possible", "NUMBER", "ie", "it", "s", "not", "clear", "whether", "this", "patch", "moves", "to", "go", "mod", "or", "moves", "to", "go", "mod", "and", "uses", "go", "mod", "to", "update", "the", "dependencies", "perhaps", "this", "could", "just", "be", "clarified", "NUMBER", "Any", "delta", "of", "deps", "would", "be", "nice", "as", "it", "s", "not", "easy", "to", "see", "from", "the", "diff", "if", "leaving", "vendor", "alone", "isn", "t", "possible", "NUMBER", "It", "uses", "the", "Gopkg", "NUMBER", "file", "to", "generate", "it", "s", "initial", "list", "of", "dependencies", "NUMBER", "You", "have", "to", "do", "some", "replace", "commands", "to", "get", "everything", "to", "work", "NUMBER", "go", "mod", "vendor", "causes", "it", "to", "use", "the", "go", "NUMBER", "mod", "version", "to", "populate", "the", "vendor", "directly", "no", "update", "be", "cause", "as", "long", "as", "you", "run", "your", "go", "commands", "with", "the", "mod", "vendor", "NUMBER", "If", "you", "do", "not", "include", "this", "flag", "it", "will", "implicitly", "to", "minor", "version", "update", "NUMBER", "will", "package", "that", "import", "fn", "but", "still", "use", "dep", "handle", "this", "okay", "I", "m", "optimistic", "I", "just", "honestly", "do", "not", "know", "NUMBER", "I", "know", "we", "have", "at", "least", "NUMBER", "My", "understanding", "be", "that", "it", "should", "still", "work", "NUMBER", "But", "I", "be", "still", "experimenting", "NUMBER", "No", "claims", "yet", "NUMBER", "Haha", "ok", "I", "was", "ambivalent", "about", "it", "NUMBER", "Im", "glad", "you", "have", "a", "opinion", "about", "it", "NUMBER", "On", "Mon", "Oct", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "Reed", "Allman", "TAG", "write", "get", "rid", "of", "the", "vendor", "directory", "we", "learned", "this", "lesson", "a", "long", "time", "ago", "checking", "in", "the", "vendor", "directory", "was", "worth", "it", "to", "prevent", "users", "from", "having", "dependency", "issue", "when", "get", "start", "maybe", "dampened", "now", "to", "new", "devs", "as", "well", "as", "not", "having", "dependency", "issue", "among", "the", "active", "team", "as", "well", "as", "bringing", "down", "CI", "times", "NUMBER", "please", "add", "it", "back", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "diff", "of", "go", "list", "NUMBER", "NUMBER", "in", "the", "vendor", "directory", "NUMBER", "a", "NUMBER", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "Azure", "go", "ansiterm", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "Microsoft", "go", "winio", "NUMBER", "a", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "aws", "aws", "sdk", "go", "aws", "csm", "NUMBER", "a", "NUMBER", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "aws", "aws", "sdk", "go", "internal", "s", "NUMBER", "err", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "aws", "aws", "sdk", "go", "internal", "sdkio", "NUMBER", "a", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "aws", "aws", "sdk", "go", "internal", "sdkuri", "NUMBER", "a", "NUMBER", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "aws", "aws", "sdk", "go", "private", "protocol", "eventstream", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "aws", "aws", "sdk", "go", "private", "protocol", "eventstream", "eventstreamapi", "NUMBER", "d", "NUMBER", "TAG", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "google", "NUMBER", "golang", "NUMBER", "org", "appengine", "cloudsql", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "Azure", "go", "ansiterm", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "Microsoft", "go", "winio", "these", "were", "previously", "excluded", "as", "they", "re", "only", "needed", "to", "build", "on", "WIN", "be", "not", "sure", "if", "they", "fit", "compliance", "offhand", "or", "if", "there", "be", "a", "way", "for", "go", "mod", "to", "ignore", "these", "once", "again", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "petar", "GoLLRB", "llrb", "this", "one", "be", "curiously", "gone", "and", "btree", "needs", "it", "and", "we", "vendor", "btree", "NUMBER", "can", "you", "investigate", "there", "may", "be", "others", "I", "miss", "too", "NUMBER", "I", "think", "everything", "else", "be", "okay", "the", "text", "package", "just", "looks", "shuffled", "NUMBER", "a", "diff", "of", "the", "Gopkg", "NUMBER", "lock", "list", "and", "the", "go", "NUMBER", "sum", "list", "may", "be", "more", "useful", "few", "shell", "commands", "of", "wizardry", "I", "had", "to", "do", "some", "digging", "around", "with", "the", "provide", "diff", "anyway", "NUMBER", "Redid", "it", "but", "locking", "to", "the", "revisions", "that", "were", "in", "the", "gopkg", "NUMBER", "lock", "Regarding", "This", "PR", "introduces", "a", "go", "module", "at", "the", "root", "of", "the", "repository", "and", "then", "also", "new", "modules", "for", "images", "fn", "test", "utils", "and", "images", "hello", "and", "images", "fn", "status", "checker", "NUMBER", "Do", "these", "sub", "directories", "need", "to", "be", "their", "own", "modules", "Can", "they", "just", "be", "sub", "package", "of", "the", "one", "top", "level", "module", "They", "can", "be", "I", "was", "experimenting", "and", "forgot", "to", "delete", "those", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "Azure", "go", "ansiterm", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "Microsoft", "go", "winio", "these", "were", "previously", "excluded", "as", "they", "re", "only", "needed", "to", "build", "on", "WIN", "be", "not", "sure", "if", "they", "fit", "compliance", "offhand", "or", "if", "there", "be", "a", "way", "for", "go", "mod", "to", "ignore", "these", "once", "again", "NUMBER", "I", "add", "exclude", "statements", "for", "both", "of", "these", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "petar", "GoLLRB", "llrb", "this", "one", "be", "curiously", "gone", "and", "btree", "needs", "it", "and", "we", "vendor", "btree", "NUMBER", "can", "you", "investigate", "there", "may", "be", "others", "I", "miss", "too", "NUMBER", "So", "it", "looks", "like", "btree", "replaces", "that", "package", "LINK", "L", "NUMBER", "So", "we", "don", "t", "need", "it", "anymore", "NUMBER", "Also", "package", "with", "capital", "letters", "be", "the", "worst", "NUMBER", "I", "think", "everything", "else", "be", "okay", "the", "text", "package", "just", "looks", "shuffled", "NUMBER", "a", "diff", "of", "the", "Gopkg", "NUMBER", "lock", "list", "and", "the", "go", "NUMBER", "sum", "list", "may", "be", "more", "useful", "few", "shell", "commands", "of", "wizardry", "I", "had", "to", "do", "some", "digging", "around", "with", "the", "provide", "diff", "anyway", "NUMBER", "I", "add", "exclude", "statements", "for", "both", "of", "these", "NUMBER", "the", "file", "be", "still", "checked", "into", "vendor", "possible", "to", "remove", "them", "or", "mod", "bug", "I", "d", "do", "a", "clear", "out", "of", "vendor", "and", "grab", "them", "again", "with", "the", "latest", "mod", "file", "I", "think", "with", "that", "this", "LGTM", "NUMBER", "ping", "zootalures", "for", "NUMBER", "eyes", "Will", "do", "On", "Thu", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "Reed", "Allman", "TAG", "write", "I", "d", "do", "a", "clear", "out", "of", "vendor", "and", "grab", "them", "again", "with", "the", "latest", "mod", "file", "I", "think", "with", "that", "this", "LGTM", "NUMBER", "ping", "zootalures", "TAG", "for", "NUMBER", "eyes", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "It", "looks", "like", "you", "can", "t", "exclude", "a", "package", "that", "be", "needed", "for", "any", "build", "with", "go", "mod", "like", "you", "can", "with", "go", "dep", "NUMBER", "And", "we", "don", "t", "want", "to", "check", "the", "Microsoft", "code", "into", "our", "repo", "for", "the", "windows", "build", "so", "my", "current", "proposal", "be", "to", "just", "add", "the", "paths", "in", "the", "vendor", "directory", "that", "hold", "these", "deps", "to", "the", "NUMBER", "gitignore", "NUMBER", "Thoughts", "rpallman", "other", "folks", "with", "thoughts", "a", "second", "option", "be", "creating", "a", "package", "call", "null", "or", "something", "like", "it", "and", "use", "the", "replace", "directive", "to", "replace", "the", "package", "with", "an", "empty", "one", "NUMBER", "Created", "a", "noop", "module", "and", "replaced", "NUMBER", "It", "looks", "like", "you", "can", "exclude", "a", "package", "that", "be", "needed", "for", "any", "build", "with", "go", "mod", "like", "you", "can", "with", "go", "dep", "NUMBER", "assuming", "this", "meant", "to", "say", "can", "t", "that", "s", "ok", "NUMBER", "I", "be", "unfamiliar", "with", "the", "compliance", "process", "and", "I", "imagine", "that", "if", "we", "do", "check", "them", "in", "they", "will", "simply", "need", "to", "be", "vetted", "NUMBER", "if", "that", "s", "easy", "that", "may", "be", "the", "right", "thing", "to", "do", "instead", "of", "make", "the", "dependency", "process", "our", "own", "special", "incantation", "to", "work", "around", "go", "mod", "deficiencies", "we", "were", "previously", "accustomed", "to", "having", "I", "do", "appreciate", "the", "effort", "NUMBER", "do", "you", "mind", "looking", "into", "that", "or", "do", "we", "think", "this", "be", "the", "best", "path", "forward", "as", "far", "as", "I", "m", "aware", "we", "re", "not", "in", "a", "huge", "rush", "either", "here", "please", "correct", "me", "if", "this", "isn", "t", "the", "case", "I", "find", "a", "less", "hacky", "answer", "NUMBER", "I", "just", "made", "a", "folder", "in", "this", "repo", "call", "noop", "with", "an", "empty", "module", "and", "replaced", "the", "offending", "modules", "with", "it", "NUMBER", "I", "find", "a", "less", "hacky", "answer", "NUMBER", "I", "just", "made", "a", "folder", "in", "this", "repo", "call", "noop", "with", "an", "empty", "module", "and", "replaced", "the", "offending", "modules", "with", "it", "NUMBER", "ok", "NUMBER", "any", "details", "this", "sounds", "like", "rewriting", "some", "import", "paths", "or", "mod", "file", "on", "some", "of", "our", "dependencies", "Nothing", "quite", "that", "drastic", "I", "add", "this", "replace", "github", "NUMBER", "com", "Azure", "go", "ansiterm", "NUMBER", "noop", "github", "NUMBER", "com", "Microsoft", "go", "winio", "NUMBER", "noop", "to", "our", "mod", "file", "NUMBER", "cool", "that", "seems", "easy", "to", "follow", "and", "not", "need", "any", "maintenance", "when", "we", "update", "Anything", "else", "we", "need", "to", "do", "rdallman", "zootalures", "LGTM", "here", "NUMBER", "My", "understanding", "be", "that", "it", "should", "still", "work", "NUMBER", "But", "I", "be", "still", "experimenting", "NUMBER", "No", "claims", "yet", "NUMBER", "any", "claims", "re", "how", "our", "package", "that", "import", "this", "one", "will", "hold", "up", "as", "long", "as", "that", "be", "smooth", "sailing", "I", "m", "ready", "to", "pull", "the", "trigger", "anyway", "If", "you", "be", "use", "mod", "it", "s", "smooth", "sailing", "it", "looks", "like", "it", "works", "for", "dep", "too", "NUMBER", "As", "a", "test", "I", "have", "tried", "a", "new", "project", "with", "go", "dep", "and", "add", "a", "dependency", "to", "this", "branch", "of", "fn", "NUMBER", "Everything", "seem", "to", "work", "NUMBER", "Seems", "good", "NUMBER", "I", "considered", "whether", "the", "needed", "capacity", "in", "the", "resource", "tokens", "could", "get", "out", "of", "date", "stale", "but", "in", "the", "worst", "case", "we", "just", "evict", "one", "more", "container", "because", "at", "some", "point", "the", "capacity", "was", "needed", "and", "I", "think", "that", "s", "acceptable", "NUMBER", "Code", "Looks", "good", "and", "full", "of", "wholesome", "deletage", "have", "tried", "and", "test", "it", "a", "bit", "and", "I", "see", "no", "error", "It", "looks", "like", "old", "non", "stream", "function", "fail", "with", "a", "NUMBER", "on", "invoke", "should", "this", "to", "be", "something", "else", "or", "something", "more", "informative", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "internal", "server", "error", "action", "server", "NUMBER", "handleFnInvokeCall", "fm", "error", "context", "canceled", "fnID", "NUMBER", "CTP", "NUMBER", "KQ", "NUMBER", "NG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "stack", "goroutine", "NUMBER", "run", "nruntime", "debug", "NUMBER", "Stack", "NUMBER", "xc", "NUMBER", "ad", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "c", "NUMBER", "n", "t", "usr", "local", "go", "src", "runtime", "debug", "stack", "NUMBER", "go", "NUMBER", "NUMBER", "xa", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "HandleErrorResponse", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ee", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "error_response", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "handleErrorResponse", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "error_response", "NUMBER", "go", "NUMBER", "NUMBER", "xa", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "handleFnInvokeCall", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "runner_fninvoke", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "da", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "handleFnInvokeCall", "fm", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "runMiddleware", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "middleware", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "rootMiddlewareWrapper", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "middleware", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "apiMetricsWrap", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "panicWrap", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "traceWrap", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "loggerWrap", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ea", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Engine", "NUMBER", "handleHTTPRequest", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "gin", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Engine", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "e", "NUMBER", "NUMBER", "xc", "NUMBER", "ad", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "gin", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "go", "NUMBER", "opencensus", "NUMBER", "io", "plugin", "ochttp", "NUMBER", "Handler", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "e", "NUMBER", "NUMBER", "xc", "NUMBER", "ad", "NUMBER", "NUMBER", "xc", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "go", "NUMBER", "opencensus", "NUMBER", "io", "plugin", "ochttp", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "nnet", "http", "NUMBER", "serverHandler", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "dfa", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "n", "t", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "xbc", "nnet", "http", "NUMBER", "conn", "NUMBER", "serve", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "ae", "NUMBER", "c", "NUMBER", "n", "t", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ncreated", "by", "net", "http", "NUMBER", "Server", "NUMBER", "Serve", "n", "t", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "b", "n", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "hot", "function", "terminated", "app_id", "NUMBER", "CT", "NUMBER", "ZVBCZNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "N", "cpus", "error", "container", "exit", "code", "NUMBER", "fn_id", "NUMBER", "CTP", "NUMBER", "YZPNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "id", "NUMBER", "CTP", "NUMBER", "KBWNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "idle_timeout", "NUMBER", "image", "foo", "NUMBER", "memory", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "internal", "server", "error", "action", "server", "NUMBER", "handleFnInvokeCall", "fm", "error", "context", "canceled", "fnID", "NUMBER", "CTP", "NUMBER", "YZPNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "stack", "goroutine", "NUMBER", "run", "nruntime", "debug", "NUMBER", "Stack", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "c", "NUMBER", "n", "t", "usr", "local", "go", "src", "runtime", "debug", "stack", "NUMBER", "go", "NUMBER", "NUMBER", "xa", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "HandleErrorResponse", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "xc", "NUMBER", "fadb", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ee", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "error_response", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "handleErrorResponse", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "c", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "error_response", "NUMBER", "go", "NUMBER", "NUMBER", "xa", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "handleFnInvokeCall", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "runner_fninvoke", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "da", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "handleFnInvokeCall", "fm", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "runMiddleware", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "middleware", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "rootMiddlewareWrapper", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "middleware", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "apiMetricsWrap", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "panicWrap", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "traceWrap", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "loggerWrap", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "gin_middlewares", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ea", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Engine", "NUMBER", "handleHTTPRequest", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "gin", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Engine", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "e", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "gin", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ngithub", "NUMBER", "com", "fnproject", "fn", "vendor", "go", "NUMBER", "opencensus", "NUMBER", "io", "plugin", "ochttp", "NUMBER", "Handler", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "e", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "n", "t", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "go", "NUMBER", "opencensus", "NUMBER", "io", "plugin", "ochttp", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "nnet", "http", "NUMBER", "serverHandler", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "dfa", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "n", "t", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "xbc", "nnet", "http", "NUMBER", "conn", "NUMBER", "serve", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "n", "t", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ncreated", "by", "net", "http", "NUMBER", "Server", "NUMBER", "Serve", "n", "t", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "b", "n", "POST", "invoke", "NUMBER", "CTP", "NUMBER", "YZPNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "HTTP", "NUMBER", "Host", "localhost", "NUMBER", "User", "Agent", "Go", "http", "client", "NUMBER", "Content", "Length", "NUMBER", "Content", "Type", "text", "plain", "Accept", "Encoding", "gzip", "HTTP", "NUMBER", "NUMBER", "Internal", "Server", "Error", "Content", "Length", "NUMBER", "Content", "Type", "application", "json", "charset", "utf", "NUMBER", "Date", "Thu", "NUMBER", "Oct", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "message", "internal", "server", "error", "Error", "Fn", "Error", "calling", "function", "status", "NUMBER", "Vista", "demo", "was", "update", "all", "http", "stream", "format", "funcs", "once", "CLI", "test", "will", "be", "fix", "those", "ones", "that", "zootalures", "referring", "to", "we", "can", "merge", "this", "NUMBER", "It", "breaks", "all", "java", "based", "FDKs", "so", "err", "no", "Unblocking", "but", "can", "you", "re", "add", "FN_FORMAT", "for", "a", "bit", "to", "make", "java", "happy", "Ok", "that", "may", "work", "NUMBER", "Here", "be", "the", "ClI", "set", "I", "was", "test", "against", "LINK", "deletage", "the", "internet", "doesn", "t", "think", "this", "be", "a", "word", "NUMBER", "I", "m", "curious", "now", "It", "s", "medieval", "french", "the", "state", "of", "some", "software", "having", "benefited", "from", "the", "removal", "of", "some", "of", "its", "code", "NUMBER", "Mon", "dieu", "regarde", "le", "deletage", "de", "ce", "pull", "request", "I", "ve", "be", "build", "an", "Fn", "application", "with", "function", "that", "have", "to", "hold", "authentication", "info", "to", "connect", "to", "a", "central", "object", "store", "NUMBER", "I", "pass", "the", "login", "secrets", "to", "the", "Fn", "function", "use", "fn", "config", "app", "APP", "name_of_secret", "value_of_secret", "and", "then", "retrieved", "them", "in", "the", "function", "from", "environment", "variables", "NUMBER", "This", "all", "worked", "great", "However", "while", "I", "was", "exploring", "the", "Fn", "relate", "API", "of", "the", "app", "I", "saw", "that", "the", "config", "variables", "be", "given", "in", "plain", "text", "to", "anyone", "who", "can", "connect", "to", "the", "Fn", "server", "via", "LINK", "server_url", "v", "NUMBER", "apps", "NUMBER", "Example", "output", "be", "items", "id", "XXXXXX", "name", "XXXXX", "config", "SECRET", "XXXXXX", "created_at", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "updated_at", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "etc", "NUMBER", "etc", "NUMBER", "You", "can", "also", "get", "the", "config", "data", "use", "the", "app", "s", "ID", "e", "NUMBER", "g", "NUMBER", "via", "LINK", "server_url", "v", "NUMBER", "apps", "APP_ID", "Is", "this", "expected", "behaviour", "It", "surprised", "me", "that", "the", "config", "data", "of", "a", "function", "would", "be", "so", "publicly", "visible", "as", "this", "leaks", "useful", "information", "for", "bad", "actors", "NUMBER", "If", "this", "be", "expected", "then", "what", "be", "recommended", "way", "to", "store", "secrets", "in", "function", "e", "NUMBER", "g", "NUMBER", "passwords", "for", "object", "stores", "or", "databases", "I", "d", "rather", "not", "embed", "them", "in", "the", "container", "themselves", "as", "then", "I", "d", "have", "to", "use", "a", "private", "container", "registry", "and", "worry", "about", "the", "container", "leaking", "NUMBER", "Using", "fn", "config", "app", "works", "really", "well", "as", "it", "be", "easy", "to", "change", "after", "deployment", "thereby", "support", "easy", "automate", "password", "key", "rotation", "NUMBER", "this", "be", "also", "the", "case", "for", "the", "V", "NUMBER", "API", "I", "update", "everything", "to", "V", "NUMBER", "to", "see", "if", "it", "was", "already", "fix", "and", "have", "scoured", "docs", "and", "issue", "to", "see", "if", "this", "has", "be", "discussed", "before", "and", "whether", "I", "be", "handle", "secrets", "incorrectly", "Thanks", "rdallman", "really", "useful", "reply", "NUMBER", "My", "user", "authentication", "be", "build", "on", "top", "of", "OCI", "object", "store", "and", "the", "secret", "be", "the", "private", "key", "needed", "to", "read", "and", "write", "to", "that", "store", "NUMBER", "I", "agree", "that", "the", "best", "solution", "would", "be", "encrypting", "my", "config", "and", "then", "uploading", "the", "decryption", "key", "to", "the", "function", "NUMBER", "Looking", "at", "ext", "auth", "an", "apologies", "in", "advance", "as", "my", "go", "be", "basic", "it", "looks", "like", "the", "extension", "add", "in", "support", "for", "holding", "a", "secret", "that", "be", "copied", "from", "an", "environment", "variable", "SIMPLE_SECRET", "which", "be", "copied", "into", "the", "function", "during", "fn", "deploy", "NUMBER", "The", "presence", "of", "this", "secret", "be", "checked", "for", "in", "Setup", "lines", "NUMBER", "NUMBER", "in", "simple", "NUMBER", "go", "but", "nothing", "be", "then", "do", "with", "it", "The", "Setup", "function", "then", "continues", "to", "initialise", "a", "database", "with", "rows", "to", "hold", "usernames", "and", "passwords", "line", "NUMBER", "s", "NUMBER", "ds", "NUMBER", "GetDataBase", "NUMBER", "How", "do", "the", "function", "authenticate", "with", "this", "database", "Where", "be", "the", "secret", "held", "that", "allows", "the", "function", "calling", "GetDataBase", "to", "prove", "that", "it", "has", "read", "write", "access", "to", "this", "database", "and", "to", "follow", "up", "on", "this", "where", "be", "the", "environment", "variables", "stored", "for", "a", "function", "Are", "they", "stored", "with", "the", "config", "stored", "inside", "the", "container", "or", "be", "there", "another", "location", "in", "the", "Fn", "server", "that", "holds", "the", "variables", "and", "supplies", "them", "when", "the", "function", "be", "call", "Regarding", "use", "something", "like", "an", "S", "NUMBER", "compatible", "store", "worth", "saying", "that", "you", "still", "can", "create", "presigned", "URLs", "that", "you", "may", "feed", "to", "your", "function", "therefore", "there", "s", "no", "need", "in", "auth", "unless", "your", "usecase", "be", "way", "more", "complex", "NUMBER", "Way", "more", "complex", "I", "m", "afraid", "Functions", "can", "create", "new", "buckets", "adjust", "permissions", "and", "provide", "an", "interface", "that", "sits", "over", "the", "object", "store", "as", "part", "of", "an", "access", "authorization", "and", "accounting", "infrastructure", "for", "run", "HPC", "applications", "on", "demand", "as", "Fn", "function", "NUMBER", "The", "presentation", "here", "gives", "an", "overview", "of", "what", "I", "be", "build", "NUMBER", "LINK", "Eu", "NUMBER", "uszcTojPeOLpZGlsIEdK", "NUMBER", "yS", "view", "NUMBER", "I", "have", "the", "identity", "and", "accounting", "service", "work", "so", "that", "I", "can", "log", "in", "from", "Jupyter", "notebooks", "and", "perform", "accounting", "for", "data", "uploads", "simulation", "compute", "but", "then", "notice", "what", "I", "thought", "was", "secret", "wasn", "t", "NUMBER", "A", "presigned", "URL", "be", "a", "solution", "but", "I", "then", "need", "something", "that", "can", "feed", "that", "URL", "to", "the", "function", "NUMBER", "As", "the", "presigned", "URL", "be", "not", "know", "by", "and", "must", "not", "be", "accessible", "to", "the", "user", "calling", "the", "function", "then", "it", "would", "have", "to", "be", "secretly", "provide", "by", "another", "service", "or", "the", "function", "would", "have", "to", "pull", "it", "from", "another", "service", "which", "then", "brings", "me", "back", "to", "needing", "the", "function", "to", "possess", "a", "secret", "that", "lets", "it", "authenticate", "itself", "with", "that", "sign", "URL", "provide", "service", "NUMBER", "In", "its", "simplest", "form", "I", "have", "function", "that", "modify", "the", "state", "of", "shared", "data", "NUMBER", "They", "need", "privileged", "access", "to", "that", "shared", "data", "so", "that", "they", "can", "modify", "its", "state", "NUMBER", "Thus", "they", "need", "a", "secret", "that", "only", "they", "know", "that", "provides", "them", "with", "that", "privileged", "access", "NUMBER", "Currently", "this", "be", "a", "little", "unclear", "and", "there", "be", "a", "problem", "with", "user", "fns", "returning", "error", "responses", "which", "we", "can", "not", "differentiate", "from", "our", "service", "error", "NUMBER", "This", "change", "breaks", "the", "status", "selection", "logic", "out", "and", "add", "some", "test", "that", "spell", "out", "how", "we", "want", "this", "fiddly", "bit", "to", "work", "NUMBER", "The", "offering", "here", "be", "user", "fn", "status", "returned", "if", "set", "but", "modify", "NUMBER", "xx", "to", "NUMBER", "If", "no", "response", "code", "from", "user", "fn", "use", "one", "the", "service", "has", "deemed", "appropriate", "NUMBER", "Default", "to", "NUMBER", "if", "neither", "of", "them", "have", "commented", "NUMBER", "Seems", "good", "to", "me", "NUMBER", "rdallman", "I", "think", "you", "should", "take", "a", "glance", "at", "this", "change", "you", "to", "zootalures", "NUMBER", "This", "seems", "like", "the", "right", "way", "to", "go", "but", "be", "one", "of", "those", "change", "that", "modifies", "mental", "models", "NUMBER", "I", "think", "I", "d", "rather", "trigger", "status", "code", "didn", "t", "propagate", "if", "the", "function", "was", "in", "error", "NUMBER", "I", "see", "this", "as", "nesting", "of", "what", "did", "the", "service", "say", "takes", "precedence", "over", "what", "did", "the", "FDK", "say", "takes", "precedence", "over", "what", "did", "the", "user", "code", "say", "To", "a", "certain", "extent", "I", "m", "also", "wondering", "if", "propagating", "any", "headers", "possibly", "including", "partial", "ones", "that", "the", "function", "set", "when", "it", "was", "still", "on", "the", "happy", "path", "be", "right", "NUMBER", "e", "NUMBER", "g", "NUMBER", "void", "function", "HttpContext", "hctx", "hctx", "NUMBER", "setHeader", "my", "happy", "header", "value", "hctx", "NUMBER", "setStatusCode", "NUMBER", "NUMBER", "throw", "new", "RuntimeException", "crap", "it", "broke", "I", "think", "my", "expectation", "here", "be", "that", "a", "the", "trigger", "looks", "like", "it", "fail", "to", "the", "user", "b", "I", "don", "t", "see", "my", "happy", "header", "we", "could", "make", "this", "an", "FDK", "responsibility", "of", "course", "but", "maybe", "it", "s", "better", "for", "the", "trigger", "gateway", "to", "be", "strict", "FYI", "NUMBER", "NUMBER", "has", "superseded", "these", "ideas", "NUMBER", "TAG", "Description", "So", "here", "s", "the", "thing", "NUMBER", "When", "a", "developer", "uses", "Trigger", "API", "to", "call", "a", "function", "he", "gets", "the", "following", "headers", "go", "map", "Content", "Type", "application", "json", "Fn", "Call", "Id", "NUMBER", "CSHDGH", "NUMBER", "NG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "Fn", "Deadline", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Fn", "Http", "H", "Accept", "Fn", "Http", "H", "Content", "Length", "NUMBER", "Fn_call_id", "NUMBER", "CSHDGH", "NUMBER", "NG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "Fn_deadline", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Accept", "Encoding", "gzip", "Fn", "Http", "Request", "Url", "LINK", "Fn", "Http", "Method", "POST", "User", "Agent", "Go", "http", "client", "NUMBER", "Fn", "Intent", "httprequest", "Fn", "Http", "H", "User", "Agent", "curl", "NUMBER", "but", "for", "Invoke", "API", "headers", "be", "go", "map", "Content", "Type", "application", "json", "Fn", "Call", "Id", "NUMBER", "CSHEY", "NUMBER", "VZNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "Fn_call_id", "NUMBER", "CSHEY", "NUMBER", "VZNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "Accept", "Accept", "Encoding", "gzip", "User", "Agent", "curl", "NUMBER", "Fn", "Deadline", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Fn_deadline", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "As", "you", "may", "see", "a", "number", "of", "headers", "be", "not", "consistent", "not", "talking", "about", "format", "specific", "headers", "but", "in", "general", "NUMBER", "One", "of", "the", "key", "differences", "be", "the", "content", "length", "in", "Invoke", "headers", "it", "doesn", "not", "exist", "for", "some", "reason", "NUMBER", "Steps", "to", "reproduce", "the", "issue", "NUMBER", "Deploy", "hello", "world", "application", "with", "any", "of", "FDKs", "NUMBER", "NUMBER", "Add", "a", "piece", "of", "code", "that", "logs", "incoming", "headers", "NUMBER", "NUMBER", "See", "logs", "NUMBER", "Describe", "the", "results", "you", "received", "With", "an", "outgoing", "heades", "POST", "t", "testapp", "azure", "HTTP", "NUMBER", "Host", "localhost", "NUMBER", "User", "Agent", "curl", "NUMBER", "Accept", "Content", "Type", "application", "json", "Content", "Length", "NUMBER", "the", "incoming", "headers", "be", "not", "consistent", "within", "the", "exist", "API", "methods", "NUMBER", "Describe", "the", "results", "you", "expected", "Well", "i", "expect", "to", "have", "them", "consistent", "no", "matter", "if", "that", "be", "prefixed", "with", "Fn", "Http", "H", "or", "not", "NUMBER", "Output", "of", "fn", "version", "CLI", "command", "Client", "version", "be", "latest", "version", "NUMBER", "Server", "version", "NUMBER", "Content", "Length", "header", "must", "be", "there", "because", "basically", "I", "cannot", "proxy", "the", "request", "to", "another", "service", "without", "actually", "inspecting", "the", "size", "of", "the", "data", "and", "manually", "injecing", "that", "NUMBER", "Content", "length", "be", "optional", "and", "laregely", "unnecessary", "when", "you", "use", "the", "HTTP", "NUMBER", "chunked", "encoding", "you", "won", "t", "get", "it", "a", "lot", "of", "the", "time", "anyway", "Closing", "this", "as", "I", "don", "t", "believe", "it", "be", "a", "bug", "If", "you", "need", "to", "proxy", "request", "you", "should", "use", "chunked", "encoding", "on", "the", "downstream", "system", "NUMBER", "If", "you", "need", "the", "content", "length", "then", "you", "need", "to", "buffer", "the", "input", "NUMBER", "What", "s", "the", "point", "of", "having", "NUMBER", "times", "the", "call", "ID", "i", "NUMBER", "e", "NUMBER", "Fn", "Call", "Id", "and", "Fn_call_id", "eg", "NUMBER", "HTTP", "NUMBER", "NUMBER", "OK", "Connection", "keep", "alive", "Content", "Length", "NUMBER", "Content", "Type", "application", "json", "Date", "Tue", "NUMBER", "Oct", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Fn", "Call", "Id", "NUMBER", "CSYVRKZDNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "R", "Fn_call_id", "NUMBER", "CSYVRKZDNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "R", "TAG", "Description", "Here", "s", "the", "idea", "imagine", "that", "function", "needs", "certain", "NUMBER", "so", "or", "binary", "executable", "file", "during", "its", "runtime", "NUMBER", "The", "only", "place", "where", "a", "function", "can", "write", "the", "data", "be", "tmp", "NUMBER", "In", "case", "of", "Go", "plugins", "they", "have", "to", "be", "stored", "as", "a", "file", "somewhere", "be", "loaded", "through", "the", "its", "file", "path", "NUMBER", "In", "my", "case", "i", "cannot", "load", "the", "NUMBER", "so", "file", "from", "because", "tmpfs", "mounted", "with", "noexec", "by", "default", "NUMBER", "Server", "logs", "Oct", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "linuxkit", "NUMBER", "app_id", "NUMBER", "CQR", "NUMBER", "HQNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "fn_id", "NUMBER", "CS", "NUMBER", "AR", "NUMBER", "NG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "temp", "file", "tmp", "NUMBER", "edccae", "NUMBER", "NUMBER", "d", "NUMBER", "ac", "NUMBER", "c", "NUMBER", "df", "NUMBER", "de", "NUMBER", "dd", "NUMBER", "so", "created", "Oct", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "linuxkit", "NUMBER", "app_id", "NUMBER", "CQR", "NUMBER", "HQNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "fn_id", "NUMBER", "CS", "NUMBER", "AR", "NUMBER", "NG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "tmp", "NUMBER", "edccae", "NUMBER", "NUMBER", "d", "NUMBER", "ac", "NUMBER", "c", "NUMBER", "df", "NUMBER", "de", "NUMBER", "dd", "NUMBER", "so", "access", "rights", "rwxr", "xr", "x", "Oct", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "linuxkit", "NUMBER", "app_id", "NUMBER", "CQR", "NUMBER", "HQNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "fn_id", "NUMBER", "CS", "NUMBER", "AR", "NUMBER", "NG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "plugin", "NUMBER", "Open", "tmp", "NUMBER", "edccae", "NUMBER", "NUMBER", "d", "NUMBER", "ac", "NUMBER", "c", "NUMBER", "df", "NUMBER", "de", "NUMBER", "dd", "NUMBER", "so", "tmp", "NUMBER", "edccae", "NUMBER", "NUMBER", "d", "NUMBER", "ac", "NUMBER", "c", "NUMBER", "df", "NUMBER", "de", "NUMBER", "dd", "NUMBER", "so", "fail", "to", "map", "segment", "from", "shared", "object", "Steps", "to", "reproduce", "the", "issue", "I", "write", "a", "function", "LINK", "fn", "tree", "master", "go", "plugin", "func", "that", "downloads", "pre", "compiled", "Go", "plugin", "and", "attempts", "to", "invoke", "a", "method", "out", "of", "that", "NUMBER", "Function", "s", "code", "works", "fine", "see", "test", "script", "LINK", "fn", "blob", "master", "go", "plugin", "func", "test", "NUMBER", "sh", "NUMBER", "NUMBER", "Deploy", "a", "function", "NUMBER", "Trigger", "a", "function", "curl", "v", "X", "POST", "LINK", "plugin", "func", "trigger", "d", "payload", "NUMBER", "json", "NUMBER", "See", "the", "result", "NUMBER", "Describe", "the", "results", "you", "received", "Trying", "NUMBER", "TCP_NODELAY", "set", "Connected", "to", "localhost", "NUMBER", "port", "NUMBER", "NUMBER", "POST", "t", "testapp", "go", "plugin", "func", "trigger", "HTTP", "NUMBER", "Host", "localhost", "NUMBER", "User", "Agent", "curl", "NUMBER", "Accept", "Content", "Length", "NUMBER", "Content", "Type", "application", "x", "www", "form", "urlencoded", "upload", "completely", "sent", "off", "NUMBER", "out", "of", "NUMBER", "bytes", "TAG", "perhaps", "it", "should", "handle", "supressing", "n", "from", "output", "NUMBER", "this", "means", "just", "to", "aggregate", "lines", "until", "the", "fdk", "sees", "n", "before", "sending", "right", "this", "could", "be", "okay", "to", "ignore", "even", "if", "it", "looks", "weird", "in", "papertrail", "et", "al", "NUMBER", "we", "gotta", "keep", "fdk", "contract", "minimal", "despite", "all", "efforts", "to", "the", "contrary", "and", "users", "can", "learn", "to", "log", "lines", "NUMBER", "as", "long", "as", "it", "s", "not", "doing", "anything", "weird", "NUMBER", "the", "stdout", "thing", "seems", "ok", "too", "it", "s", "not", "that", "big", "of", "a", "deal", "and", "makes", "sense", "w", "socket", "io", "as", "long", "as", "we", "still", "get", "stdout", "and", "test", "seem", "to", "pass", "NUMBER", "also", "think", "we", "should", "remove", "the", "other", "syslog", "code", "and", "not", "feature", "flag", "this", "it", "s", "in", "git", "we", "can", "find", "it", "NUMBER", "for", "future", "context", "the", "real", "reason", "we", "re", "doing", "this", "be", "because", "we", "re", "attenuating", "network", "permissions", "to", "fn", "s", "container", "while", "the", "container", "run", "dockerd", "that", "fn", "talks", "to", "has", "the", "network", "permissions", "necessary", "to", "send", "to", "syslog", "from", "a", "user", "s", "container", "NUMBER", "there", "be", "very", "few", "TODOs", "but", "some", "NUMBER", "mostly", "there", "be", "concrete", "suggestions", "for", "them", "NUMBER", "to", "date", "this", "plan", "exists", "in", "old", "docs", "in", "close", "down", "issue", "that", "be", "now", "stale", "so", "this", "be", "a", "new", "plan", "with", "a", "smaller", "delta", "that", "we", "can", "follow", "with", "an", "attempt", "to", "approximate", "the", "actual", "work", "involved", "at", "the", "bottom", "NUMBER", "this", "be", "trying", "to", "have", "the", "simplest", "possible", "cloud", "event", "format", "without", "us", "modifying", "the", "things", "into", "oblivion", "only", "http", "trigger", "do", "this", "as", "propose", "it", "seems", "kinda", "reasonable", "if", "we", "be", "willing", "to", "commit", "so", "maybe", "we", "should", "mostly", "talk", "about", "the", "commitment", "part", "technically", "speaking", "there", "s", "not", "a", "lot", "to", "these", "things", "NUMBER", "i", "have", "little", "success", "in", "extracating", "these", "kinds", "of", "things", "into", "an", "english", "document", "so", "we", "ll", "see", "how", "this", "goes", "NUMBER", "add", "streaming", "presents", "issue", "at", "a", "few", "levels", "one", "be", "limits", "and", "the", "other", "be", "gluing", "the", "lb", "runner", "etc", "the", "current", "lb_agent", "won", "t", "take", "well", "to", "streaming", "since", "we", "need", "to", "buffer", "for", "retries", "it", "opens", "a", "big", "can", "of", "worms", "NUMBER", "we", "ve", "tried", "to", "support", "streaming", "in", "the", "past", "out", "of", "the", "box", "even", "but", "ended", "up", "having", "to", "buffer", "for", "various", "reasons", "that", "was", "before", "grpc", "lb_agent", "even", "which", "makes", "things", "slightly", "more", "complex", "NUMBER", "i", "m", "not", "sure", "that", "going", "to", "cloud", "events", "precludes", "us", "from", "having", "something", "streamable", "their", "http", "transport", "in", "unstructured", "mode", "be", "streamable", "and", "if", "we", "switch", "to", "a", "port", "on", "the", "container", "we", "could", "in", "theory", "stream", "it", "all", "the", "way", "down", "and", "back", "out", "too", "NUMBER", "that", "be", "said", "for", "e", "NUMBER", "g", "NUMBER", "invoke", "w", "debug", "we", "d", "need", "a", "structured", "return", "and", "we", "could", "support", "structured", "or", "unstructured", "for", "the", "http", "trigger", "endpoint", "maybe", "it", "s", "almost", "like", "it", "d", "be", "a", "cloudevent", "http", "trigger", "endpoint", "for", "unstructured", "where", "on", "invoke", "we", "could", "do", "similar", "just", "not", "an", "open", "ended", "http", "request", "like", "it", "be", "now", "invoke", "would", "immediately", "be", "a", "structured", "or", "unstructured", "cloud", "event", "but", "idk", "about", "with", "debug", "mode", "add", "Link", "to", "issue", "this", "resolve", "What", "I", "did", "Added", "a", "control", "loop", "to", "clean", "up", "images", "as", "well", "as", "an", "LRU", "to", "keep", "track", "of", "them", "NUMBER", "How", "I", "did", "it", "Added", "an", "LRU", "on", "eviction", "from", "the", "lru", "a", "message", "be", "pass", "on", "a", "channel", "to", "a", "goroutine", "that", "takes", "care", "of", "cleaning", "up", "the", "image", "NUMBER", "Added", "a", "slice", "that", "keep", "track", "of", "the", "images", "that", "the", "docker", "agent", "tells", "it", "about", "NUMBER", "On", "each", "image", "there", "be", "a", "count", "of", "how", "often", "it", "has", "be", "use", "and", "when", "it", "was", "last", "use", "NUMBER", "Every", "NUMBER", "minutes", "a", "clean", "up", "worker", "asks", "the", "image", "cache", "for", "any", "evictable", "images", "in", "order", "of", "most", "evictable", "ness", "NUMBER", "this", "be", "defined", "as", "timeSinceLastUse", "numberOfUses", "and", "not", "locked", "NUMBER", "If", "the", "deletion", "be", "a", "success", "the", "image", "be", "remove", "from", "the", "cache", "NUMBER", "When", "a", "cookie", "be", "created", "for", "an", "execution", "the", "image", "be", "locked", "in", "the", "image", "cache", "until", "the", "cookie", "be", "cleaned", "up", "STILL", "PENDING", "HOW", "TO", "CLEAN", "THIS", "UP", "When", "an", "image", "be", "use", "for", "a", "container", "the", "numberOfUses", "be", "incremented", "NUMBER", "How", "to", "verify", "it", "Run", "NUMBER", "function", "with", "different", "NUMBER", "GB", "images", "if", "they", "all", "worked", "the", "evictor", "did", "it", "s", "job", "NUMBER", "One", "line", "description", "for", "the", "changelog", "Clean", "up", "after", "old", "function", "when", "there", "be", "no", "more", "space", "NUMBER", "One", "moving", "picture", "involving", "robots", "not", "mandatory", "but", "encourage", "robot", "LINK", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "Eric", "Fode", "LINK", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "CLA", "Bot", "All", "committers", "have", "sign", "the", "CLA", "NUMBER", "we", "do", "need", "something", "like", "this", "thanks", "for", "digging", "into", "this", "NUMBER", "if", "I", "can", "be", "of", "use", "the", "last", "time", "I", "ve", "seen", "something", "along", "these", "lines", "get", "use", "there", "were", "NUMBER", "issue", "that", "I", "m", "not", "sure", "be", "tackled", "here", "and", "maybe", "they", "be", "I", "m", "just", "throw", "this", "out", "there", "NUMBER", "listing", "images", "means", "that", "images", "that", "be", "based", "on", "other", "images", "will", "cause", "images", "that", "get", "use", "more", "frequently", "to", "get", "remove", "because", "the", "image", "they", "depend", "on", "be", "not", "get", "use", "often", "and", "gets", "LRU", "d", "and", "transitively", "the", "one", "that", "_does_", "get", "use", "as", "well", "NUMBER", "it", "may", "be", "possible", "to", "work", "around", "this", "but", "iirc", "requires", "us", "to", "keep", "our", "own", "LRU", "list", "of", "the", "images", "rather", "than", "relying", "on", "docker", "s", "stored", "and", "loaded", "on", "boot", "too", "perhaps", "perhaps", "this", "has", "change", "and", "images", "have", "some", "new", "useful", "field", "in", "this", "dept", "it", "s", "be", "NUMBER", "years", "NUMBER", "force", "removal", "can", "cause", "issue", "when", "not", "serialized", "with", "any", "calls", "to", "create", "container", "use", "some", "kind", "of", "semaphore", "cause", "container", "creation", "to", "fail", "NUMBER", "this", "may", "also", "have", "change", "and", "be", "relatively", "easy", "to", "test", "for", "but", "was", "the", "reason", "we", "ended", "up", "opting", "to", "just", "rotate", "servers", "completely", "after", "a", "set", "number", "of", "hours", "instead", "of", "fiddling", "with", "the", "cache", "bits", "a", "not", "great", "answer", "that", "had", "other", "causes", "too", "it", "would", "certainly", "be", "nice", "to", "think", "we", "could", "run", "servers", "for", "prolonged", "periods", "software", "should", "work", "like", "this", "Chatted", "with", "kmjohansen", "he", "point", "out", "that", "I", "could", "prune", "at", "startup", "to", "catch", "the", "case", "where", "someone", "had", "restarted", "their", "runner", "and", "only", "add", "images", "to", "the", "LRU", "that", "be", "actually", "request", "by", "the", "user", "NUMBER", "For", "comments", "from", "rdallman", "NUMBER", "Good", "catch", "list", "all", "was", "the", "wrong", "operation", "and", "we", "can", "get", "around", "it", "with", "the", "above", "strategy", "NUMBER", "NUMBER", "Removed", "force", "remove", "just", "add", "the", "image", "back", "to", "the", "LRU", "if", "there", "be", "an", "issue", "deleting", "it", "NUMBER", "Now", "there", "needs", "to", "be", "something", "to", "keep", "this", "from", "looping", "too", "much", "in", "the", "case", "the", "entire", "LRU", "be", "in", "use", "NUMBER", "Quick", "q", "be", "in", "a", "field", "so", "can", "t", "review", "properly", "but", "do", "this", "avoid", "deleting", "the", "pre", "loaded", "image", "s", "use", "for", "status", "checks", "and", "netNs", "pre", "forking", "ericfode", "I", "talked", "with", "skinowski", "who", "convinced", "me", "that", "I", "ve", "given", "you", "bad", "advice", "about", "pruning", "at", "startup", "NUMBER", "It", "has", "the", "potential", "to", "make", "start", "take", "a", "long", "time", "just", "from", "the", "prune", "operation", "itself", "and", "it", "also", "has", "the", "side", "effect", "of", "potentially", "generating", "a", "pull", "storm", "for", "all", "container", "that", "launch", "right", "after", "restart", "NUMBER", "It", "might", "be", "better", "to", "just", "populate", "the", "LRU", "on", "boot", "by", "doing", "a", "list", "and", "then", "only", "add", "from", "the", "images", "that", "be", "actually", "request", "by", "customer", "code", "NUMBER", "Another", "part", "of", "the", "discussion", "that", "skinowski", "and", "I", "had", "revolved", "around", "how", "to", "handle", "insertion", "and", "removal", "of", "items", "from", "the", "LRU", "and", "what", "to", "do", "if", "we", "receive", "a", "request", "to", "execute", "a", "function", "while", "we", "re", "trying", "to", "delete", "its", "image", "NUMBER", "From", "work", "on", "previous", "systems", "I", "ve", "find", "it", "easier", "to", "only", "insert", "items", "into", "this", "type", "of", "cache", "when", "they", "re", "actually", "eligible", "for", "eviction", "NUMBER", "So", "in", "that", "sense", "it", "may", "be", "worth", "deferring", "cache", "insertion", "until", "after", "we", "ve", "evicted", "the", "hot", "function", "use", "image", "NUMBER", "It", "may", "also", "be", "beneficial", "to", "flag", "an", "item", "as", "be", "in", "the", "process", "of", "be", "delete", "so", "that", "if", "a", "new", "request", "arrives", "for", "this", "image", "and", "we", "ve", "already", "sent", "it", "down", "to", "the", "evictor", "we", "can", "block", "or", "fail", "the", "inbound", "request", "until", "the", "delete", "completes", "NUMBER", "Similarly", "function", "in", "the", "LRU", "that", "aren", "t", "yet", "be", "delete", "can", "be", "remove", "from", "the", "list", "if", "a", "new", "request", "for", "them", "arrives", "NUMBER", "Since", "the", "delete", "process", "be", "fairly", "expensive", "it", "may", "make", "sense", "to", "only", "trigger", "this", "periodically", "and", "only", "re", "try", "fail", "deletes", "on", "a", "subsequent", "invocation", "NUMBER", "What", "about", "use", "this", "LINK", "_prune", "What", "about", "use", "this", "LINK", "_prune", "IIUC", "system", "prune", "be", "going", "to", "do", "more", "than", "you", "really", "want", "since", "it", "may", "also", "remove", "networks", "and", "other", "objects", "that", "aren", "t", "currently", "in", "use", "NUMBER", "What", "be", "api", "datastore", "sql", "sqlite_test_dir", "I", "think", "it", "s", "commit", "by", "accident", "NUMBER", "You", "were", "correct", "NUMBER", "It", "be", "now", "delete", "NUMBER", "replace", "maybe", "but", "remove", "gonna", "close", "NUMBER", "under", "discussion", "no", "context", "be", "provide", "here", "sorry", "haven", "t", "get", "time", "to", "do", "this", "in", "detail", "I", "think", "this", "can", "go", "in", "as", "it", "stands", "Only", "question", "that", "came", "to", "mind", "was", "that", "If", "every", "function", "always", "has", "an", "endpoint", "shouldn", "t", "this", "be", "an", "attribute", "on", "the", "resource", "rather", "than", "an", "annotation", "yeah", "for", "triggers", "it", "s", "optional", "and", "dependent", "on", "the", "trigger", "type", "my", "argument", "be", "that", "for", "function", "it", "s", "for", "everywhere", "NUMBER", "That", "said", "the", "cost", "of", "add", "a", "new", "field", "to", "fn", "be", "relatively", "high", "now", "so", "NUMBER", "signing", "off", "with", "a", "PR", "per", "usual", "NUMBER", "this", "one", "works", "with", "invoke", "minimally", "NUMBER", "test", "with", "plaintext", "and", "json", "curl", "d", "eventID", "NUMBER", "data", "yo", "H", "Content", "Type", "application", "cloudevents", "json", "v", "localhost", "NUMBER", "invoke", "NUMBER", "CMCSXPS", "NUMBER", "RZJ", "NUMBER", "Uses", "proxy", "env", "variable", "no_proxy", "localhost", "NUMBER", "NUMBER", "NUMBER", "local", "NUMBER", "home", "github", "NUMBER", "com", "NUMBER", "pool", "NUMBER", "ntp", "NUMBER", "org", "NUMBER", "Trying", "NUMBER", "TCP_NODELAY", "set", "Connected", "to", "localhost", "NUMBER", "port", "NUMBER", "NUMBER", "POST", "invoke", "NUMBER", "CMCSXPS", "NUMBER", "RZJ", "NUMBER", "HTTP", "NUMBER", "Host", "localhost", "NUMBER", "User", "Agent", "curl", "NUMBER", "Accept", "Content", "Type", "application", "cloudevents", "json", "Content", "Length", "NUMBER", "upload", "completely", "sent", "off", "NUMBER", "out", "of", "NUMBER", "bytes", "TAG", "Why", "be", "the", "resource", "in", "models", "only", "have", "Memory", "good", "catch", "yea", "we", "need", "to", "iron", "that", "out", "i", "ve", "start", "a", "library", "LINK", "which", "has", "basic", "support", "for", "transforming", "an", "http", "NUMBER", "Request", "into", "a", "cloudevent", "by", "the", "spec", "s", "NUMBER", "standard", "NUMBER", "I", "d", "like", "to", "use", "it", "as", "well", "for", "not", "only", "this", "but", "cli", "and", "fdk", "go", "too", "we", "can", "modify", "to", "needs", "relatively", "easily", "NUMBER", "I", "believe", "that", "the", "copied", "over", "code", "from", "NUMBER", "was", "also", "copied", "over", "from", "said", "library", "and", "tweaked", "slightly", "NUMBER", "will", "take", "a", "further", "look", "today", "one", "thing", "i", "m", "not", "sure", "about", "be", "whether", "we", "be", "going", "to", "have", "to", "update", "the", "lb_agent", "pure_runner", "models", "to", "accommodate", "arbitrary", "cloud", "events", "as", "NUMBER", "do", "eventually", "we", "likely", "want", "to", "move", "to", "NUMBER", "style", "but", "for", "the", "intermediary", "state", "idk", "how", "much", "we", "can", "get", "away", "with", "NUMBER", "i", "d", "be", "OK", "with", "merge", "something", "that", "works", "for", "a", "standard", "agent", "before", "get", "to", "that", "point", "too", "it", "would", "unblock", "some", "work", "potentially", "and", "keep", "the", "deltas", "smaller", "NUMBER", "opened", "LINK", "to", "merge", "into", "here", "if", "you", "will", "NUMBER", "additionally", "in", "the", "steps", "to", "write", "down", "somewhere", "it", "seems", "a", "pretty", "sane", "reasonable", "goal", "to", "get", "this", "work", "with", "json", "events", "first", "and", "then", "get", "binary", "work", "if", "it", "ends", "up", "make", "things", "easier", "for", "example", "it", "may", "mean", "we", "can", "punt", "on", "change", "the", "Submit", "signature", "I", "think", "NUMBER", "NUMBER", "it", "build", "anyway", "in", "the", "server", "package", "now", "but", "have", "not", "attempted", "to", "do", "much", "test", "yet", "NUMBER", "I", "gotta", "make", "din", "din", "chat", "tomorrow", "I", "made", "LINK", "PTAL", "to", "fill", "in", "for", "the", "validate", "stuff", "going", "away", "that", "could", "be", "useful", "though", "all", "of", "those", "field", "we", "don", "t", "really", "_need_", "in", "order", "to", "run", "a", "function", "it", "would", "be", "nice", "to", "have", "the", "cli", "send", "them", "in", "so", "users", "don", "t", "have", "to", "futz", "with", "them", "and", "then", "require", "them", "against", "the", "API", "in", "general", "NUMBER", "Provide", "the", "ability", "to", "plugin", "custom", "code", "which", "should", "get", "automatically", "invoked", "just", "before", "a", "hot", "function", "terminates", "NUMBER", "One", "of", "the", "use", "cases", "be", "to", "be", "able", "to", "close", "remote", "connections", "e", "NUMBER", "g", "NUMBER", "database", "API", "handles", "etc", "NUMBER", "which", "should", "ideally", "not", "be", "killed", "after", "every", "invocation", "of", "the", "function", "in", "order", "to", "make", "use", "of", "hot", "function", "NUMBER", "Rather", "than", "abandoning", "them", "e", "NUMBER", "g", "NUMBER", "leaving", "it", "to", "the", "DB", "server", "to", "kill", "hanging", "connections", "after", "certain", "timeout", "it", "would", "be", "ideal", "if", "the", "developer", "can", "provide", "the", "logic", "and", "hand", "it", "over", "to", "Fn", "to", "call", "it", "I", "be", "assuming", "this", "would", "be", "a", "FDK", "specific", "feature", "this", "sounds", "like", "a", "good", "thing", "to", "have", "the", "interplay", "between", "the", "server", "and", "container", "may", "be", "challenging", "given", "the", "current", "protocol", "as", "there", "s", "multiple", "conditions", "where", "a", "container", "may", "be", "terminated", "idle_timeout", "eviction", "when", "resources", "be", "full", "docker", "crashes", "maybe", "more", "in", "future", "NUMBER", "in", "my", "mind", "a", "user", "could", "theoretically", "hook", "this", "up", "as", "follows", "go", "go", "func", "main", "fdk", "NUMBER", "Handle", "myHandler", "myExitHandler", "the", "above", "would", "require", "no", "additional", "interface", "for", "the", "FDK", "to", "implement", "it", "s", "just", "simply", "a", "user", "defined", "function", "they", "add", "to", "the", "call", "stack", "after", "the", "handle", "loop", "exits", "NUMBER", "every", "FDK", "at", "the", "moment", "be", "structured", "this", "way", "and", "in", "theory", "we", "could", "do", "this", "if", "we", "handle", "OS", "signals", "inside", "of", "fdk", "NUMBER", "Handle", "and", "bailed", "without", "add", "anything", "onto", "the", "byte", "protocol", "itself", "NUMBER", "the", "above", "would", "not", "work", "currently", "because", "we", "aren", "t", "handle", "signals", "and", "exiting", "fdk", "NUMBER", "Handle", "in", "the", "FDK", "we", "re", "terminating", "the", "entire", "container", "via", "docker", "i", "NUMBER", "e", "NUMBER", "the", "fdk", "code", "doesn", "t", "handle", "the", "shutdown", "NUMBER", "it", "would", "also", "be", "possible", "to", "add", "an", "additional", "protocol", "method", "onto", "our", "FDK", "contract", "to", "bail", "on", "fdk", "NUMBER", "Handle", "or", "maybe", "something", "else", "the", "OS", "signal", "thing", "seems", "a", "lot", "cleaner", "and", "potentially", "easier", "to", "hook", "up", "server", "side", "NUMBER", "it", "would", "be", "possible", "to", "add", "an", "additional", "method", "onto", "the", "FDK", "to", "make", "this", "explicit", "I", "just", "fear", "bloat", "there", "and", "would", "like", "the", "FDK", "to", "be", "as", "minimal", "as", "possible", "if", "anything", "for", "ease", "of", "maintenance", "but", "also", "to", "make", "it", "look", "easy", "to", "use", "NUMBER", "wdyt", "of", "this", "proposal", "abhirockzz", "I", "m", "against", "having", "this", "as", "a", "design", "principle", "Right", "now", "we", "make", "no", "promises", "about", "what", "happens", "to", "your", "function", "after", "a", "call", "be", "completed", "including", "offering", "any", "sort", "of", "graceful", "shutdown", "this", "simplifies", "the", "lifecycle", "and", "allows", "Fn", "to", "more", "effectively", "use", "resources", "on", "a", "shared", "resource", "pool", "NUMBER", "If", "we", "add", "this", "hook", "we", "d", "either", "have", "to", "make", "best", "efforts", "to", "handle", "it", "make", "function", "shutdown", "more", "complex", "and", "reducing", "our", "ability", "to", "quickly", "free", "resources", "for", "new", "function", "or", "sometimes", "not", "honour", "it", "which", "be", "confusing", "for", "users", "as", "they", "were", "expecting", "it", "to", "work", "NUMBER", "In", "the", "case", "where", "somebody", "be", "billing", "for", "a", "function", "that", "also", "becomes", "more", "complex", "here", "NUMBER", "When", "we", "shut", "down", "your", "function", "I", "think", "fn", "docker", "should", "cause", "all", "exist", "TCP", "connections", "to", "be", "reset", "Most", "DB", "servers", "can", "be", "configured", "to", "correctly", "honour", "that", "and", "release", "resources", "NUMBER", "that", "s", "true", "and", "it", "complicates", "the", "freeze", "significantly", "thaw", "run", "the", "thing", "along", "with", "billing", "NUMBER", "I", "think", "my", "mental", "model", "here", "be", "Functions", "be", "conceptually", "stateless", "things", "that", "should", "also", "engage", "with", "similarly", "conceptually", "stateless", "services", "In", "practice", "hot", "function", "may", "keep", "some", "transient", "state", "between", "calls", "and", "this", "be", "beneficial", "for", "performance", "HTTP", "connections", "JDBC", "connections", "but", "the", "contract", "for", "that", "state", "be", "that", "it", "should", "not", "materially", "impact", "subsequent", "interactions", "can", "t", "tell", "the", "difference", "functionally", "between", "the", "first", "and", "second", "interaction", "and", "that", "the", "state", "should", "be", "discardable", "without", "action", "NUMBER", "Doing", "connection", "state", "based", "things", "like", "JDBC", "connections", "be", "possible", "so", "long", "as", "it", "works", "but", "I", "think", "the", "onus", "be", "on", "the", "user", "to", "make", "sure", "that", "the", "downstream", "services", "be", "tolerant", "to", "disconnects", "and", "discards", "not", "fn", "NUMBER", "I", "would", "like", "to", "understand", "what", "be", "our", "recommendation", "to", "folks", "that", "want", "to", "use", "function", "to", "talk", "to", "less", "scalable", "traditional", "backends", "like", "databases", "message", "queues", "NUMBER", "How", "should", "folks", "deal", "with", "connections", "What", "be", "the", "best", "place", "to", "open", "close", "them", "I", "wonder", "if", "abhirockzz", "be", "actually", "referring", "to", "idle", "connections", "on", "live", "but", "idle", "hot", "container", "NUMBER", "In", "other", "words", "hot", "container", "that", "haven", "t", "exceeded", "their", "idle", "timeout", "but", "not", "handle", "a", "request", "and", "holding", "on", "to", "such", "connections", "NUMBER", "skinowski", "no", "that", "s", "not", "the", "case", "NUMBER", "The", "use", "case", "be", "relate", "to", "hot", "container", "and", "the", "point", "of", "impact", "be", "just", "before", "they", "terminate", "NUMBER", "When", "we", "shut", "down", "your", "function", "I", "think", "fn", "docker", "should", "cause", "all", "exist", "TCP", "connections", "to", "be", "reset", "Most", "DB", "servers", "can", "be", "configured", "to", "correctly", "honour", "that", "and", "release", "resources", "NUMBER", "zootalures", "The", "problem", "be", "generic", "in", "nature", "DB", "was", "just", "an", "example", "NUMBER", "It", "be", "not", "about", "stateful", "or", "stateless", "either", "although", "the", "DB", "specific", "example", "be", "a", "stateful", "one", "NUMBER", "System", "NUMBER", "getRuntime", "NUMBER", "addShutdownHook", "do", "not", "work", "I", "understand", "why", "since", "rdallman", "confirmed", "in", "the", "FDK", "we", "re", "terminating", "the", "entire", "container", "via", "docker", "i", "NUMBER", "e", "NUMBER", "the", "fdk", "code", "doesn", "t", "handle", "the", "shutdown", "There", "should", "be", "some", "way", "for", "the", "user", "to", "plugin", "this", "logic", "before", "the", "container", "exits", "at", "the", "bare", "minimum", "it", "should", "handle", "SIGTERM", "NUMBER", "I", "see", "that", "there", "be", "a", "listener", "concept", "LINK", "java", "blob", "NUMBER", "cfb", "NUMBER", "b", "NUMBER", "e", "NUMBER", "f", "NUMBER", "b", "NUMBER", "d", "NUMBER", "e", "NUMBER", "a", "NUMBER", "b", "NUMBER", "api", "src", "main", "java", "com", "fnproject", "fn", "api", "InvocationListener", "NUMBER", "java", "in", "the", "Java", "FDK", "per", "invocation", "based", "Listeners", "allow", "you", "to", "inject", "code", "around", "the", "event", "lifecycle", "but", "not", "the", "container", "lifecycle", "NUMBER", "There", "should", "be", "some", "way", "to", "gracefully", "shutdown", "the", "fn", "container", "after", "Its", "life", "cycle", "be", "over", "NUMBER", "Some", "of", "the", "scenarios", "NUMBER", "cleaning", "up", "open", "DB", "connections", "NUMBER", "storing", "fn", "state", "to", "some", "persistent", "storage", "so", "that", "once", "fn", "be", "invoked", "again", "It", "can", "read", "from", "that", "persistent", "store", "I", "m", "closing", "this", "as", "won", "t", "fix", "for", "now", "per", "discussion", "above", "there", "isn", "t", "a", "way", "we", "can", "guarantee", "that", "these", "hooks", "will", "happen", "so", "if", "you", "rely", "on", "them", "for", "things", "like", "DB", "disconnections", "would", "cause", "problem", "when", "that", "didn", "t", "happen", "a", "bit", "pedantic", "any", "chance", "of", "doing", "this", "without", "the", "add", "dependency", "aside", "from", "more", "to", "manage", "it", "s", "more", "cognitive", "burden", "for", "every", "dev", "that", "has", "to", "futz", "with", "these", "test", "to", "learn", "a", "NUMBER", "party", "API", "and", "this", "one", "isn", "t", "widely", "know", "amongst", "gophers", "reflect", "isn", "t", "my", "fav", "thing", "in", "the", "world", "but", "it", "be", "in", "stdlib", "this", "be", "just", "for", "test", "and", "have", "use", "LINK", "DeepEqual", "in", "the", "past", "to", "test", "stuff", "like", "this", "and", "it", "works", "OK", "NUMBER", "I", "think", "a", "few", "people", "have", "raise", "use", "PBT", "for", "contracts", "in", "the", "past", "there", "be", "a", "few", "places", "I", "think", "it", "could", "help", "out", "e", "NUMBER", "g", "data", "store", "and", "test", "maybe", "where", "you", "have", "a", "couple", "of", "dimensions", "of", "variation", "on", "a", "couple", "of", "properties", "it", "can", "simplify", "strengthen", "valid", "extent", "test", "I", "think", "I", "m", "pro", "if", "we", "can", "reuse", "the", "generators", "there", "against", "if", "not", "NUMBER", "Can", "you", "double", "check", "that", "the", "licensing", "of", "this", "and", "any", "subdeps", "be", "sound", "gopter", "be", "under", "MIT", "and", "there", "be", "no", "additional", "transitive", "dependencies", "NUMBER", "One", "thing", "though", "be", "we", "should", "pin", "the", "gopter", "version", "in", "Gopkg", "NUMBER", "toml", "I", "guess", "to", "avoid", "the", "version", "change", "and", "cause", "unexpect", "failures", "in", "test", "NUMBER", "rdallman", "zootalures", "Seems", "like", "you", "two", "disagreed", "regard", "the", "use", "of", "gopter", "NUMBER", "I", "think", "that", "we", "can", "re", "use", "the", "generators", "in", "other", "test", "areas", "as", "long", "as", "we", "check", "that", "the", "relevant", "parts", "be", "export", "NUMBER", "i", "have", "PTSD", "from", "bad", "experiences", "maintaining", "non", "standard", "go", "test", "in", "the", "past", "over", "a", "long", "period", "of", "time", "LINK", "to", "be", "exact", "so", "not", "this", "it", "was", "not", "easy", "to", "ramp", "up", "new", "people", "and", "they", "would", "just", "go", "write", "their", "own", "new", "test", "suite", "they", "could", "understand", "a", "problem", "we", "have", "already", "as", "well", "NUMBER", "it", "would", "be", "great", "to", "use", "test", "quick", "if", "possible", "since", "it", "s", "stdlib", "though", "I", "ll", "admit", "it", "s", "somewhat", "obscure", "for", "most", "go", "devs", "in", "any", "case", "if", "gopter", "has", "additional", "features", "we", "re", "use", "I", "can", "understand", "be", "we", "motivation", "alternatives", "that", "s", "just", "my", "preference", "I", "won", "t", "block", "this", "and", "agree", "about", "the", "general", "usefulness", "of", "PBT", "also", "thanks", "for", "add", "it", "NUMBER", "Thanks", "for", "doing", "this", "NUMBER", "NUMBER", "I", "m", "setting", "up", "CORS", "for", "an", "Fn", "function", "however", "from", "reading", "the", "docs", "LINK", "it", "appears", "I", "need", "to", "set", "the", "environment", "variable", "FN_API_CORS_ORIGINS", "to", "set", "the", "Acccess", "Control", "Allow", "Origin", "header", "NUMBER", "Since", "I", "m", "use", "docker", "in", "docker", "I", "m", "struggling", "with", "where", "I", "should", "specify", "the", "variable", "NUMBER", "The", "docs", "say", "to", "add", "variables", "use", "docker", "run", "e", "VAR_NAME", "VALUE", "however", "I", "deploy", "the", "function", "for", "Fn", "to", "manage", "it", "I", "don", "t", "need", "to", "ever", "use", "docker", "run", "NUMBER", "I", "ve", "tried", "to", "add", "the", "following", "to", "my", "Dockerfile", "with", "no", "success", "even", "though", "the", "variable", "be", "available", "to", "when", "I", "log", "it", "in", "my", "function", "ENV", "FN_API_CORS_ORIGINS", "So", "where", "would", "I", "specify", "the", "variable", "I", "managed", "to", "find", "a", "workaround", "add", "the", "following", "to", "my", "func", "NUMBER", "yaml", "file", "headers", "Access", "Control", "Allow", "Origin", "LINK", "However", "it", "isn", "t", "the", "best", "solution", "to", "the", "issue", "NUMBER", "Thanks", "really", "appreciate", "it", "I", "think", "i", "bit", "of", "a", "bit", "more", "than", "my", "time", "allow", "here", "I", "know", "this", "be", "WIP", "but", "glanced", "through", "it", "and", "there", "be", "too", "many", "seemingly", "not", "NUMBER", "NUMBER", "relate", "change", "stacked", "renaming", "agent", "config", "remove", "max", "req", "size", "add", "events", "documents", "reworking", "IO", "in", "various", "parts", "modifying", "error", "NUMBER", "go", "etc", "NUMBER", "I", "wonder", "if", "we", "can", "merge", "the", "IO", "change", "in", "advance", "also", "NUMBER", "By", "accepting", "and", "incurring", "an", "extra", "buffer", "copy", "we", "can", "perhaps", "merge", "the", "IO", "change", "pure", "runner", "runner", "client", "etc", "NUMBER", "and", "get", "them", "test", "merge", "before", "invoke", "events", "change", "make", "it", "NUMBER", "as", "promised", "have", "be", "futzing", "with", "the", "pure", "runner", "to", "get", "system", "test", "to", "pass", "NUMBER", "this", "patch", "do", "a", "lot", "of", "change", "there", "that", "I", "guess", "I", "was", "trying", "to", "avoid", "I", "haven", "t", "quite", "made", "up", "my", "mind", "if", "we", "can", "get", "away", "with", "it", "or", "not", "i", "m", "still", "trying", "to", "get", "the", "system", "test", "to", "pass", "NUMBER", "i", "ll", "try", "to", "press", "on", "tomorrow", "I", "rebased", "this", "so", "we", "can", "see", "the", "remaining", "diff", "NUMBER", "obviously", "it", "s", "still", "huge", "and", "we", "may", "or", "may", "not", "go", "with", "it", "as", "be", "zootalures", "riconnon", "mantree", "let", "s", "close", "this", "it", "s", "here", "and", "we", "want", "to", "pull", "some", "of", "this", "over", "in", "some", "capacity", "but", "since", "we", "have", "a", "slightly", "different", "first", "pass", "in", "now", "NUMBER", "feel", "free", "to", "re", "open", "an", "upvote", "indicates", "you", "would", "like", "to", "write", "to", "anywhere", "in", "the", "container", "filesystem", "as", "one", "might", "expect", "from", "a", "bring", "your", "own", "container", "function", "model", "NUMBER", "talk", "about", "a", "push", "poll", "I", "think", "that", "the", "ability", "to", "wire", "an", "arbitrary", "container", "to", "run", "as", "a", "fn", "function", "be", "a", "strong", "value", "proposition", "of", "the", "fn", "project", "NUMBER", "Essentially", "in", "this", "way", "you", "can", "web", "enable", "an", "encapslulated", "legacy", "system", "and", "use", "it", "through", "HTTP", "without", "touching", "it", "NUMBER", "So", "I", "be", "upvoting", "NUMBER", "Bumped", "into", "this", "yesterday", "prepping", "a", "demo", "NUMBER", "It", "wasn", "t", "a", "massive", "deal", "although", "the", "absence", "of", "a", "writable", "run", "caught", "me", "out", "I", "could", "work", "around", "it", "I", "can", "see", "the", "upsides", "of", "the", "change", "but", "there", "be", "certainly", "cases", "where", "this", "ll", "cause", "surprise", "NUMBER", "Dare", "I", "suggest", "this", "defaults", "to", "on", "but", "be", "tunable", "to", "off", "This", "introduces", "more", "moving", "parts", "but", "in", "different", "circumstances", "I", "think", "I", "d", "often", "appreciate", "having", "my", "function", "s", "fs", "inviolable", "NUMBER", "the", "function", "container", "launched", "an", "internal", "service", "process", "that", "needed", "to", "read", "configuration", "from", "the", "fs", "I", "was", "injecting", "that", "config", "via", "the", "app", "and", "expected", "to", "be", "able", "to", "write", "it", "out", "NUMBER", "This", "doesn", "t", "talk", "about", "the", "benefits", "of", "protecting", "the", "root", "file", "system", "I", "see", "this", "change", "as", "a", "massive", "benefit", "to", "users", "in", "terms", "of", "security", "stability", "and", "performance", "NUMBER", "It", "s", "good", "practice", "from", "a", "security", "perspective", "at", "no", "point", "be", "any", "of", "the", "binaries", "or", "source", "file", "of", "your", "function", "writable", "directly", "this", "protects", "against", "a", "large", "class", "of", "security", "vulnerabilities", "and", "be", "best", "practice", "in", "docker", "NUMBER", "It", "improves", "the", "stability", "of", "systems", "run", "Fn", "Before", "this", "change", "a", "single", "function", "could", "DOS", "the", "whole", "host", "it", "runs", "on", "by", "filling", "up", "the", "overlay", "top", "layer", "file", "system", "NUMBER", "Whilst", "there", "be", "some", "ways", "of", "preventing", "function", "from", "consuming", "too", "much", "space", "without", "remove", "write", "e", "NUMBER", "g", "NUMBER", "provisioning", "the", "top", "layer", "in", "its", "own", "loopback", "FS", "use", "XFS", "Fs", "quotas", "both", "of", "these", "come", "with", "significant", "downsides", "either", "in", "performance", "and", "stability", "or", "they", "place", "additional", "restrictions", "on", "the", "type", "of", "machine", "that", "Fn", "runs", "moving", "away", "from", "it", "runs", "on", "any", "docker", "machine", "as", "it", "do", "now", "NUMBER", "Performance", "be", "considerably", "easier", "to", "control", "and", "the", "impacts", "of", "one", "container", "on", "another", "be", "easier", "to", "manage", "use", "this", "approach", "than", "sticking", "with", "Overlay", "in", "Overlay", "write", "one", "byte", "to", "a", "NUMBER", "GB", "file", "on", "the", "image", "causes", "NUMBER", "GB", "of", "copy", "up", "which", "in", "the", "case", "where", "we", "ve", "had", "to", "up", "the", "top", "layer", "into", "its", "own", "file", "system", "to", "prevent", "a", "single", "container", "from", "consuming", "a", "shared", "overlay", "FS", "would", "be", "a", "cross", "filesystem", "operation", "NUMBER", "I", "be", "absolutely", "in", "favour", "of", "the", "simplest", "experience", "possible", "and", "i", "totally", "agree", "that", "this", "be", "not", "clearly", "documented", "but", "I", "also", "think", "we", "be", "doing", "the", "best", "for", "our", "users", "here", "NUMBER", "People", "want", "function", "that", "work", "all", "the", "time", "as", "well", "as", "a", "simple", "experience", "NUMBER", "The", "option", "to", "disable", "it", "be", "documented", "here", "LINK", "Just", "find", "this", "issue", "as", "a", "naive", "Fn", "user", "NUMBER", "Everything", "was", "work", "when", "I", "was", "use", "fn", "run", "locally", "and", "write", "to", "the", "root", "filesystem", "and", "then", "it", "all", "broke", "when", "I", "fn", "deploy", "deployed", "and", "call", "my", "function", "via", "LINK", "The", "workaround", "be", "easy", "write", "to", "tmp", "NUMBER", "It", "be", "the", "fact", "that", "the", "behaviour", "be", "different", "when", "run", "via", "fn", "run", "and", "then", "run", "the", "function", "after", "fn", "deploy", "NUMBER", "I", "agree", "that", "most", "of", "the", "filesystem", "should", "be", "read", "only", "NUMBER", "You", "need", "to", "be", "more", "upfront", "about", "this", "restriction", "more", "consistent", "between", "function", "run", "in", "different", "environment", "fn", "run", "versus", "fn", "deploy", "and", "have", "more", "documentation", "steering", "users", "to", "develop", "function", "that", "write", "to", "tmp", "or", "designate", "another", "area", "that", "should", "be", "read", "write", "NUMBER", "The", "documentation", "on", "how", "to", "fix", "this", "disable", "it", "doesnt", "exist", "anymore", "Can", "anyone", "explain", "the", "fix", "to", "disable", "this", "FN_DISABLE_READONLY_ROOTFS", "true", "when", "configuring", "fn", "NUMBER", "Note", "that", "Google", "Functions", "may", "bill", "for", "both", "GB", "and", "GHz", "but", "the", "user", "only", "selects", "GBs", "NUMBER", "The", "relationship", "between", "GBs", "and", "GHz", "be", "fix", "NUMBER", "IMHO", "this", "be", "simply", "pricing", "obfuscation", "NUMBER", "My", "thinking", "here", "be", "that", "CPU", "ought", "to", "somewhat", "configurabile", "pluggable", "either", "at", "the", "LB", "ingress", "point", "i", "NUMBER", "e", "NUMBER", "one", "policy", "for", "all", "function", "or", "at", "the", "agent", "itself", "policy", "based", "on", "specific", "host", "configuration", "you", "get", "what", "we", "get", "based", "on", "the", "host", "maximise", "usage", "of", "specific", "hosts", "tmp", "we", "keep", "saying", "tmpfs", "but", "actualy", "I", "don", "t", "see", "a", "necessity", "that", "this", "be", "actually", "a", "memory", "backed", "tmpfs", "could", "be", "e", "NUMBER", "g", "NUMBER", "a", "loopback", "on", "disk", "probably", "ought", "to", "be", "uniform", "even", "if", "it", "s", "proportional", "to", "RAM", "across", "the", "system", "but", "also", "configurable", "as", "it", "represents", "a", "much", "harder", "constraint", "on", "the", "function", "implementation", "rather", "than", "CPU", "when", "I", "target", "a", "particular", "platform", "I", "want", "to", "know", "how", "much", "tmp", "I", "m", "going", "to", "get", "NUMBER", "Here", "be", "the", "screen", "capture", "of", "run", "the", "python", "tutorial", "NUMBER", "fn", "version", "works", "and", "the", "Ubuntu", "guest", "in", "VirtualBox", "be", "able", "to", "browse", "to", "LINK", "but", "it", "redirects", "the", "url", "to", "https", "NUMBER", "scott", "scott", "VirtualBox", "cd", "pythonfn", "scott", "scott", "VirtualBox", "pythonfn", "fn", "verbose", "run", "Building", "image", "pythonfn", "NUMBER", "Sending", "build", "context", "to", "Docker", "daemon", "NUMBER", "kB", "Step", "NUMBER", "NUMBER", "FROM", "python", "NUMBER", "slim", "stretch", "b", "NUMBER", "cb", "NUMBER", "e", "NUMBER", "a", "NUMBER", "Step", "NUMBER", "NUMBER", "WORKDIR", "function", "Using", "cache", "bcc", "NUMBER", "d", "NUMBER", "a", "NUMBER", "c", "NUMBER", "Step", "NUMBER", "NUMBER", "RUN", "apt", "get", "update", "apt", "get", "install", "no", "install", "recommends", "qy", "build", "essential", "gcc", "Running", "in", "NUMBER", "c", "NUMBER", "a", "NUMBER", "b", "NUMBER", "a", "NUMBER", "Err", "NUMBER", "LINK", "stretch", "InRelease", "Temporary", "failure", "resolving", "deb", "NUMBER", "debian", "NUMBER", "org", "Err", "NUMBER", "LINK", "security", "stretch", "update", "InRelease", "Temporary", "failure", "resolving", "security", "NUMBER", "debian", "NUMBER", "org", "Err", "NUMBER", "LINK", "stretch", "update", "InRelease", "Temporary", "failure", "resolving", "deb", "NUMBER", "debian", "NUMBER", "org", "Reading", "package", "lists", "NUMBER", "W", "Failed", "to", "fetch", "LINK", "Temporary", "failure", "resolving", "deb", "NUMBER", "debian", "NUMBER", "org", "W", "Failed", "to", "fetch", "LINK", "security", "dists", "stretch", "update", "InRelease", "Temporary", "failure", "resolving", "security", "NUMBER", "debian", "NUMBER", "org", "W", "Failed", "to", "fetch", "LINK", "update", "InRelease", "Temporary", "failure", "resolving", "deb", "NUMBER", "debian", "NUMBER", "org", "W", "Some", "index", "file", "fail", "to", "download", "NUMBER", "They", "have", "be", "ignored", "or", "old", "ones", "use", "instead", "NUMBER", "Reading", "package", "lists", "NUMBER", "Building", "dependency", "tree", "NUMBER", "Reading", "state", "information", "NUMBER", "E", "Unable", "to", "locate", "package", "build", "essential", "E", "Unable", "to", "locate", "package", "gcc", "The", "command", "bin", "sh", "c", "apt", "get", "update", "apt", "get", "install", "no", "install", "recommends", "qy", "build", "essential", "gcc", "returned", "a", "non", "zero", "code", "NUMBER", "Hi", "and", "welcome", "NUMBER", "First", "of", "all", "it", "s", "not", "Ubuntu", "it", "s", "Debian", "NUMBER", "Despite", "that", "isn", "t", "it", "all", "about", "temporary", "problem", "apt", "repo", "problem", "Asking", "this", "because", "I", "can", "t", "reproduce", "given", "problem", "within", "EU", "region", "NUMBER", "On", "Thu", "Jun", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "Scott", "Zimmerman", "TAG", "write", "Here", "be", "the", "screen", "capture", "of", "run", "the", "python", "tutorial", "NUMBER", "fn", "version", "works", "and", "the", "Ubuntu", "guest", "in", "VirtualBox", "be", "able", "to", "browse", "to", "LINK", "but", "it", "redirects", "the", "url", "to", "https", "NUMBER", "scott", "scott", "VirtualBox", "cd", "pythonfn", "scott", "scott", "VirtualBox", "pythonfn", "fn", "verbose", "run", "Building", "image", "pythonfn", "NUMBER", "Sending", "build", "context", "to", "Docker", "daemon", "NUMBER", "kB", "Step", "NUMBER", "NUMBER", "FROM", "python", "NUMBER", "slim", "stretch", "b", "NUMBER", "cb", "NUMBER", "e", "NUMBER", "a", "NUMBER", "Step", "NUMBER", "NUMBER", "WORKDIR", "function", "Using", "cache", "bcc", "NUMBER", "d", "NUMBER", "a", "NUMBER", "c", "NUMBER", "Step", "NUMBER", "NUMBER", "RUN", "apt", "get", "update", "apt", "get", "install", "no", "install", "recommends", "qy", "build", "essential", "gcc", "Running", "in", "NUMBER", "c", "NUMBER", "a", "NUMBER", "b", "NUMBER", "a", "NUMBER", "Err", "NUMBER", "LINK", "stretch", "InRelease", "Temporary", "failure", "resolving", "deb", "NUMBER", "debian", "NUMBER", "org", "Err", "NUMBER", "LINK", "security", "stretch", "update", "InRelease", "Temporary", "failure", "resolving", "security", "NUMBER", "debian", "NUMBER", "org", "Err", "NUMBER", "LINK", "stretch", "update", "InRelease", "Temporary", "failure", "resolving", "deb", "NUMBER", "debian", "NUMBER", "org", "Reading", "package", "lists", "NUMBER", "W", "Failed", "to", "fetch", "LINK", "Temporary", "failure", "resolving", "deb", "NUMBER", "debian", "NUMBER", "org", "W", "Failed", "to", "fetch", "LINK", "security", "dists", "stretch", "update", "InRelease", "Temporary", "failure", "resolving", "security", "NUMBER", "debian", "NUMBER", "org", "W", "Failed", "to", "fetch", "LINK", "update", "InRelease", "Temporary", "failure", "resolving", "deb", "NUMBER", "debian", "NUMBER", "org", "W", "Some", "index", "file", "fail", "to", "download", "NUMBER", "They", "have", "be", "ignored", "or", "old", "ones", "use", "instead", "NUMBER", "Reading", "package", "lists", "NUMBER", "Building", "dependency", "tree", "NUMBER", "Reading", "state", "information", "NUMBER", "E", "Unable", "to", "locate", "package", "build", "essential", "E", "Unable", "to", "locate", "package", "gcc", "The", "command", "bin", "sh", "c", "apt", "get", "update", "apt", "get", "install", "no", "install", "recommends", "qy", "build", "essential", "gcc", "returned", "a", "non", "zero", "code", "NUMBER", "You", "be", "receiving", "this", "because", "you", "be", "subscribed", "to", "this", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "I", "meant", "my", "guest", "os", "be", "Ubuntu", "where", "I", "m", "run", "fn", "NUMBER", "I", "had", "the", "same", "error", "yesterday", "be", "there", "a", "way", "to", "know", "what", "be", "cause", "the", "temporary", "outage", "Is", "there", "a", "way", "I", "can", "point", "the", "demo", "to", "use", "the", "EU", "repo", "After", "installing", "fn", "what", "components", "be", "the", "demo", "trying", "to", "download", "Thanks", "How", "to", "debug", "this", "You", "may", "try", "trace", "route", "to", "apt", "repos", "from", "inside", "docker", "container", "manually", "NUMBER", "However", "you", "may", "try", "assigning", "custom", "docker", "image", "in", "func", "NUMBER", "yml", "build_image", "NUMBER", "that", "do", "have", "all", "necessary", "package", "gcc", "etc", "NUMBER", "install", "NUMBER", "On", "Thu", "Jun", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "Scott", "Zimmerman", "TAG", "write", "I", "meant", "my", "guest", "os", "be", "Ubuntu", "where", "I", "m", "run", "fn", "NUMBER", "I", "had", "the", "same", "error", "yesterday", "be", "there", "a", "way", "to", "know", "what", "be", "cause", "the", "temporary", "outage", "Is", "there", "a", "way", "I", "can", "point", "the", "demo", "to", "use", "the", "EU", "repo", "After", "installing", "fn", "what", "components", "be", "the", "demo", "trying", "to", "download", "Thanks", "You", "be", "receiving", "this", "because", "you", "commented", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "It", "seems", "off", "that", "we", "re", "doing", "an", "apt", "get", "install", "during", "fn", "build", "here", "I", "think", "the", "base", "requirements", "should", "be", "bundled", "into", "the", "respective", "container", "we", "provide", "This", "be", "a", "small", "tweak", "to", "the", "placer", "latency", "stats", "NUMBER", "If", "we", "have", "a", "cluster", "of", "values", "around", "the", "NUMBER", "NUMBER", "s", "mark", "then", "having", "a", "single", "relatively", "broad", "bucket", "that", "captures", "the", "NUMBER", "s", "NUMBER", "s", "range", "will", "obscure", "that", "NUMBER", "In", "particular", "typical", "Prometheus", "quartile", "estimates", "may", "be", "distorted", "by", "this", "bucket", "size", "NUMBER", "We", "should", "probably", "do", "something", "better", "here", "either", "let", "the", "end", "user", "inject", "their", "distributions", "or", "perhaps", "generate", "a", "log", "linear", "spread", "across", "likely", "values", "with", "far", "more", "intervals", "NUMBER", "Agreed", "advice", "from", "statisticians", "wrt", "bucket", "counts", "versus", "from", "the", "prom", "guys", "be", "in", "conflict", "NUMBER", "All", "we", "can", "tell", "from", "quantiles", "be", "the", "nth", "percentile", "lies", "in", "this", "bucket", "though", "NUMBER", "We", "probably", "need", "a", "better", "scheme", "to", "let", "us", "tune", "these", "across", "the", "board", "NUMBER", "I", "m", "not", "convinced", "that", "encoding", "this", "in", "environment", "variables", "be", "the", "best", "way", "to", "express", "this", "information", "NUMBER", "I", "d", "like", "to", "avoid", "breaking", "applications", "if", "we", "decide", "to", "support", "volume", "attachments", "or", "more", "than", "a", "single", "fix", "writable", "location", "NUMBER", "What", "s", "the", "contract", "for", "environment", "variables", "generally", "Also", "how", "were", "you", "planning", "to", "express", "a", "tmp", "with", "no", "writable", "space", "and", "a", "tmp", "with", "unlimited", "space", "Fundamentally", "it", "s", "not", "actually", "unlimited", "so", "any", "well", "formed", "application", "be", "going", "to", "have", "to", "look", "at", "the", "available", "space", "anyway", "NUMBER", "My", "major", "concerns", "here", "be", "two", "fold", "NUMBER", "The", "first", "be", "the", "vast", "proliferation", "of", "environment", "variables", "NUMBER", "It", "seems", "like", "it", "might", "be", "easier", "to", "encode", "configuration", "information", "into", "a", "runtime", "neutral", "format", "that", "any", "FDK", "can", "parse", "and", "return", "to", "the", "application", "NUMBER", "The", "second", "be", "the", "set", "of", "issue", "around", "provide", "static", "definitions", "for", "resources", "that", "be", "dynamically", "available", "NUMBER", "If", "for", "example", "we", "provide", "an", "interface", "that", "allow", "the", "caller", "to", "get", "both", "the", "max", "and", "available", "transient", "storage", "in", "a", "single", "call", "that", "would", "pacify", "me", "NUMBER", "The", "concern", "here", "be", "that", "any", "caller", "that", "depends", "upon", "the", "environment", "variable", "when", "the", "availability", "of", "the", "resource", "be", "dynamic", "be", "broken", "by", "definition", "NUMBER", "kmjohansen", "These", "be", "actually", "properly", "formally", "formatted", "in", "json", "cloud", "events", "protocol", "as", "function", "config", "NUMBER", "They", "only", "have", "to", "be", "env", "variables", "in", "cold", "function", "which", "has", "no", "structured", "protocol", "NUMBER", "Because", "of", "this", "I", "keep", "calling", "these", "env", "variables", "and", "I", "ve", "accidentally", "cause", "some", "confusion", "NUMBER", "FDKs", "actually", "parse", "these", "and", "offer", "them", "as", "config", "data", "NUMBER", "I", "also", "agree", "with", "dynamic", "nature", "of", "the", "resource", "NUMBER", "But", "these", "be", "to", "be", "treated", "as", "function", "configuration", "not", "as", "a", "way", "to", "dynamically", "determine", "how", "much", "memory", "or", "tmp", "space", "a", "function", "has", "at", "a", "given", "time", "NUMBER", "In", "other", "words", "these", "tell", "the", "function", "which", "shape", "it", "be", "currently", "run", "on", "NUMBER", "We", "expose", "FN_CPU", "FN_MEMORY", "along", "with", "configuration", "set", "in", "that", "route", "which", "be", "also", "merge", "with", "the", "application", "configuration", "NUMBER", "In", "other", "words", "we", "communicate", "almost", "all", "configuration", "params", "in", "a", "route", "to", "the", "function", "LINK", "L", "NUMBER", "Based", "on", "ongoing", "discussion", "LINK", "we", "might", "eventually", "hide", "these", "cpu", "tmpsize", "from", "users", "NUMBER", "But", "in", "case", "we", "don", "t", "I", "d", "like", "to", "keep", "the", "triplet", "cpu", "mem", "tmpfs", "consistent", "merge", "in", "expose", "NUMBER", "What", "I", "did", "multiple", "reasons", "to", "remove", "the", "api", "test", "awkward", "dependency", "with", "fn_go", "meant", "generating", "bindings", "on", "a", "branch", "fn", "to", "vendor", "those", "to", "test", "new", "stuff", "NUMBER", "this", "be", "at", "a", "minimum", "not", "at", "all", "intuitive", "worth", "it", "nor", "a", "fun", "way", "to", "spend", "the", "finite", "amount", "of", "time", "we", "have", "to", "live", "NUMBER", "api", "test", "only", "test", "a", "subset", "of", "functionality", "that", "the", "server", "api", "test", "already", "test", "and", "we", "risk", "having", "test", "where", "one", "test", "some", "thing", "and", "the", "other", "doesn", "t", "NUMBER", "let", "s", "not", "NUMBER", "we", "have", "too", "many", "test", "suite", "as", "it", "be", "and", "these", "pretty", "much", "only", "test", "that", "we", "update", "the", "fn_go", "bindings", "which", "be", "actually", "a", "hassle", "as", "noted", "above", "and", "the", "cli", "will", "pretty", "quickly", "figure", "out", "anyway", "NUMBER", "fn_go", "relies", "on", "openapi", "which", "relies", "on", "mgo", "which", "be", "deprecate", "and", "we", "d", "like", "to", "remove", "as", "a", "dependency", "NUMBER", "openapi", "be", "a", "_huge_", "dep", "build", "in", "a", "NIH", "fashion", "that", "cannot", "simply", "remove", "the", "mgo", "dep", "as", "users", "may", "be", "use", "it", "NUMBER", "we", "ve", "now", "stolen", "their", "date", "time", "and", "otherwise", "killed", "usage", "of", "it", "in", "fn", "core", "for", "fn_go", "it", "still", "exists", "but", "that", "s", "less", "of", "a", "problem", "NUMBER", "created", "common", "NUMBER", "DateTime", "same", "thing", "as", "strfmt", "NUMBER", "DateTime", "but", "sans", "mgo", "and", "sans", "json", "NUMBER", "json", "uses", "TextMarshaler", "which", "the", "strfmt", "NUMBER", "DateTime", "implement", "as", "well", "and", "be", "more", "efficient", "than", "their", "json", "marshaler", "NUMBER", "strfmt", "be", "a", "good", "case", "of", "NIH", "gone", "wrong", "keep", "this", "as", "ammo", "NUMBER", "this", "gets", "rid", "of", "our", "openapi", "dep", "NUMBER", "update", "the", "deps", "removals", "easyjson", "mgo", "go", "openapi", "mapstructure", "fn_go", "purell", "go", "validator", "also", "had", "to", "lock", "docker", "NUMBER", "we", "shouldn", "t", "use", "docker", "on", "master", "anyway", "they", "strongly", "advise", "against", "that", "NUMBER", "had", "no", "luck", "with", "latest", "version", "rev", "so", "i", "locked", "it", "to", "what", "we", "were", "use", "before", "NUMBER", "until", "next", "time", "NUMBER", "the", "rest", "be", "just", "playing", "dep", "roulette", "those", "end", "up", "remove", "a", "ton", "tho", "i", "cross", "checked", "in", "varying", "capacities", "everything", "be", "covered", "i", "believe", "NUMBER", "summary", "much", "of", "it", "be", "app", "route", "POST", "PUT", "GET", "test", "alone", "and", "NUMBER", "NUMBER", "cases", "better", "coverage", "in", "server", "call", "log", "api", "test", "runner_test", "NUMBER", "go", "has", "a", "ton", "of", "coverage", "hot", "json", "test", "but", "no", "other", "formats", "well", "covered", "also", "and", "every", "format", "annotations", "have", "similar", "behavioral", "test", "in", "annotations_test", "NUMBER", "go", "simply", "not", "through", "api", "NUMBER", "app", "api", "has", "some", "coverage", "for", "setting", "them", "NUMBER", "thanks", "Thanks", "looks", "good", "We", "still", "have", "a", "gap", "in", "verifying", "that", "the", "server", "strongly", "complies", "with", "both", "its", "swagger", "spec", "and", "general", "API", "contract", "behaviour", "but", "I", "think", "this", "wasn", "t", "the", "right", "hammer", "for", "it", "NUMBER", "this", "will", "very", "quickly", "get", "out", "of", "hand", "if", "we", "allow", "it", "i", "realize", "we", "don", "t", "have", "principles", "write", "down", "anywhere", "but", "to", "date", "one", "of", "them", "has", "be", "that", "binaries", "just", "work", "without", "having", "to", "do", "any", "configuration", "NUMBER", "currently", "a", "user", "must", "set", "FN_MAX_REQUEST_SIZE", "FN_MAX_RESPONSE_SIZE", "neither", "of", "these", "should", "be", "required", "to", "run", "NUMBER", "test", "case", "cd", "test", "fn", "system", "test", "go", "test", "v", "this", "breaks", "with", "error", "lb", "agent", "requires", "MaxRequestSize", "limit", "this", "means", "you", "have", "to", "run", "a", "script", "since", "go", "test", "won", "t", "just", "work", "this", "isn", "t", "great", "for", "dev", "experience", "and", "parsing", "through", "our", "Makefile", "isn", "t", "very", "fun", "and", "shouldn", "t", "be", "necessary", "go", "test", "should", "just", "work", "in", "whatever", "directory", "you", "re", "in", "that", "has", "them", "we", "can", "add", "additional", "configuration", "to", "e", "NUMBER", "g", "NUMBER", "run", "test", "on", "various", "backends", "but", "they", "should", "all", "work", "in", "their", "respective", "dirs", "NUMBER", "this", "start", "here", "LINK", "Perhaps", "we", "can", "remove", "them", "but", "even", "without", "them", "you", "d", "still", "need", "to", "set", "FN_DB_URL", "FN_API_URL", "NUMBER", "db", "defaults", "to", "sqlite", "api", "url", "can", "have", "our", "standard", "NUMBER", "default", "that", "sure", "may", "not", "work", "but", "might", "work", "on", "a", "local", "system", "just", "fine", "agree", "about", "docs", "NUMBER", "this", "be", "just", "a", "slippery", "slope", "to", "be", "on", "better", "to", "remedy", "before", "there", "s", "NUMBER", "required", "env", "vars", "LINK", "r", "NUMBER", "maybe", "i", "miss", "some", "context", "but", "in", "general", "think", "this", "be", "the", "right", "thing", "to", "do", "Listener", "extensions", "implement", "the", "_CallListener_", "interface", "have", "access", "to", "the", "_models", "NUMBER", "Call_", "object", "but", "not", "the", "original", "request", "NUMBER", "This", "be", "problematic", "for", "listeners", "that", "need", "to", "consume", "the", "request", "body", "as", "part", "of", "their", "processing", "NUMBER", "We", "already", "expose", "URL", "and", "Headers", "in", "_models", "NUMBER", "Call_", "so", "exposing", "the", "body", "would", "provide", "the", "miss", "access", "NUMBER", "think", "we", "re", "past", "this", "re", "open", "if", "wanted", "yeah", "no", "longer", "needed", "thanks", "NUMBER", "It", "be", "very", "useful", "to", "associate", "a", "request", "ID", "to", "each", "incoming", "request", "this", "change", "allows", "to", "provide", "a", "function", "to", "do", "that", "via", "Server", "Option", "NUMBER", "The", "change", "comes", "with", "a", "default", "function", "which", "will", "inspect", "the", "incoming", "request", "to", "see", "if", "there", "be", "a", "header", "with", "a", "request", "ID", "if", "it", "s", "there", "it", "uses", "that", "value", "as", "request", "ID", "if", "it", "be", "not", "there", "it", "will", "generate", "a", "new", "request", "ID", "NUMBER", "The", "request", "ID", "be", "put", "in", "the", "request", "context", "along", "with", "a", "common", "logger", "which", "always", "logs", "the", "request", "id", "this", "seems", "like", "the", "right", "idea", "to", "me", "NUMBER", "needs", "to", "add", "the", "same", "middleware", "component", "to", "the", "lb", "be", "not", "sure", "where", "that", "be", "at", "the", "moment", "NUMBER", "overall", "LGTM", "some", "minor", "janitorial", "comments", "NUMBER", "thanks", "for", "add", "this", "here", "treeder", "and", "skinowski", "thank", "you", "both", "for", "the", "great", "reviews", "NUMBER", "With", "reference", "to", "skinowski", "final", "comment", "I", "think", "we", "can", "change", "the", "signature", "for", "the", "RIDGenerator", "function", "which", "could", "accept", "a", "HTTP", "NUMBER", "Request", "as", "param", "instead", "of", "a", "string", "doing", "that", "we", "delegate", "to", "the", "RIDProvider", "decide", "if", "the", "RID", "will", "be", "looked", "up", "in", "the", "headers", "somewhere", "else", "or", "just", "generate", "a", "new", "ID", "from", "scratch", "NUMBER", "What", "do", "you", "think", "not", "sure", "that", "this", "will", "fall", "out", "as", "expected", "with", "the", "default", "format", "specifically", "the", "main", "issue", "be", "that", "when", "a", "currently", "default", "image", "starts", "it", "can", "exit", "before", "the", "runHot", "thread", "would", "have", "a", "chance", "to", "receive", "a", "slot", "for", "it", "and", "attach", "to", "its", "pipes", "if", "it", "ignores", "stdin", "meaning", "the", "call", "doesn", "t", "have", "any", "output", "when", "the", "container", "did", "have", "output", "currently", "default", "be", "the", "way", "it", "be", "due", "to", "this", "poorly", "documented", "sorry", "NUMBER", "i", "m", "not", "sure", "that", "trying", "to", "figure", "out", "such", "a", "race", "be", "worth", "it", "NUMBER", "I", "know", "there", "have", "be", "a", "number", "of", "discussions", "around", "how", "do", "we", "get", "default", "format", "behavior", "if", "default", "format", "isn", "t", "baked", "into", "fn", "though", "nothing", "be", "turning", "up", "there", "be", "a", "couple", "threads", "NUMBER", "sorry", "this", "reply", "sucks", "I", "will", "elaborate", "more", "tomorrow", "if", "I", "can", "NUMBER", "the", "other", "discussion", "i", "saw", "the", "decision", "log", "around", "the", "knobs", "for", "a", "route", "specifically", "haven", "t", "had", "time", "to", "digest", "this", "either", "sorry", "NUMBER", "i", "m", "pretty", "firmly", "in", "the", "minimal", "number", "of", "knobs", "category", "myself", "but", "i", "think", "me", "and", "my", "flimsy", "backbone", "have", "already", "be", "defeated", "to", "a", "certain", "degree", "all", "be", "not", "lost", "a", "story", "around", "how", "do", "we", "have", "the", "knobs", "without", "the", "user", "seeing", "them", "seems", "like", "a", "productive", "discussion", "worth", "engaging", "in", "everybody", "wins", "that", "be", "my", "main", "concern", "with", "having", "them", "NUMBER", "I", "m", "generally", "in", "favor", "of", "instituting", "a", "max", "request", "policy", "for", "container", "NUMBER", "Other", "security", "sensitive", "software", "enforces", "a", "finite", "lifetime", "on", "their", "processes", "to", "mitigate", "bug", "leaks", "and", "other", "issue", "NUMBER", "At", "least", "at", "a", "high", "level", "I", "think", "this", "idea", "makes", "sense", "NUMBER", "From", "a", "customer", "standpoint", "however", "it", "s", "going", "to", "be", "intrusive", "to", "have", "every", "Nth", "request", "generate", "a", "cold", "container", "start", "at", "least", "until", "we", "re", "able", "to", "optimize", "our", "cold", "start", "times", "NUMBER", "I", "m", "not", "a", "huge", "fan", "of", "having", "lots", "of", "knobs", "either", "NUMBER", "My", "preference", "would", "be", "to", "have", "the", "software", "auto", "tune", "or", "choose", "sane", "defaults", "NUMBER", "However", "there", "be", "cases", "where", "we", "can", "expect", "to", "have", "values", "that", "need", "to", "be", "overridden", "on", "a", "per", "customer", "basis", "NUMBER", "In", "that", "case", "I", "d", "rather", "we", "make", "that", "easy", "to", "observe", "but", "I", "m", "flexible", "about", "the", "exact", "mechanism", "NUMBER", "For", "this", "particular", "question", "either", "agent", "or", "route", "configuration", "seems", "most", "sensible", "NUMBER", "The", "argument", "in", "favor", "of", "agent", "be", "that", "as", "a", "security", "feature", "we", "won", "t", "be", "able", "to", "have", "hostile", "software", "change", "the", "parameter", "for", "us", "in", "the", "message", "payload", "NUMBER", "The", "argument", "in", "favor", "of", "a", "per", "route", "option", "presumes", "that", "it", "would", "be", "more", "important", "for", "us", "to", "modify", "this", "for", "some", "function", "in", "case", "the", "customer", "be", "severely", "impacted", "by", "our", "default", "NUMBER", "As", "far", "as", "cold", "container", "go", "I", "suspect", "that", "it", "s", "really", "only", "useful", "to", "us", "internally", "as", "a", "test", "tool", "to", "keep", "the", "max", "request", "NUMBER", "behavior", "NUMBER", "In", "busy", "deployments", "max_requests", "can", "be", "a", "valuable", "workaround", "for", "resource", "leaks", "in", "problematic", "routes", "NUMBER", "Indeed", "however", "there", "be", "at", "least", "one", "use", "cases", "when", "a", "function", "should", "be", "aware", "of", "how", "many", "times", "it", "can", "be", "call", "self", "call", "or", "self", "triggered", "function", "the", "idea", "here", "that", "the", "function", "can", "reschedule", "itself", "certain", "number", "of", "times", "before", "it", "dies", "a", "function", "calls", "itself", "if", "requirement", "match", "after", "certain", "time", "pass", "NUMBER", "Here", "s", "the", "use", "case", "trigger", "a", "function", "only", "when", "the", "bucket", "has", "the", "particular", "amount", "of", "objects", "NUMBER", "So", "the", "function", "queries", "the", "store", "if", "the", "requirement", "met", "end", "or", "do", "whatever", "be", "necessary", "if", "not", "sleep", "and", "call", "itself", "one", "more", "time", "NUMBER", "So", "the", "feature", "you", "d", "like", "to", "introduce", "should", "not", "actually", "affect", "the", "use", "case", "I", "ve", "describe", "because", "it", "be", "still", "valid", "NUMBER", "However", "the", "max", "number", "of", "request", "could", "be", "use", "by", "a", "function", "to", "limit", "the", "number", "of", "times", "it", "can", "reschedule", "itself", "NUMBER", "i", "believe", "this", "was", "discussed", "somewhere", "be", "there", "a", "reason", "to", "prefer", "a", "count", "of", "executions", "to", "cap", "container", "lifetime", "vs", "NUMBER", "a", "time", "based", "solution", "for", "the", "NUMBER", "case", "max", "executions", "makes", "sense", "but", "for", "something", "like", "the", "NUMBER", "case", "max", "executions", "seems", "like", "it", "could", "lead", "to", "the", "container", "be", "around", "for", "anywhere", "between", "a", "few", "seconds", "to", "hours", "say", "the", "function", "be", "call", "with", "NUMBER", "minutes", "between", "invocations", "and", "idle", "timeout", "be", "higher", "than", "that", "value", "NUMBER", "if", "we", "end", "up", "with", "a", "max", "number", "of", "executions", "settings", "and", "a", "max", "active", "duration", "to", "cap", "the", "lifetime", "of", "a", "container", "based", "on", "time", "we", "would", "have", "NUMBER", "knobs", "to", "do", "very", "similar", "things", "and", "it", "gets", "hard", "to", "reason", "about", "if", "both", "be", "set", "etc", "NUMBER", "may", "be", "worth", "discussing", "that", "before", "add", "one", "or", "the", "other", "or", "maybe", "not", "I", "m", "not", "sure", "that", "it", "s", "an", "either", "or", "situation", "NUMBER", "I", "think", "having", "a", "time", "based", "expiration", "policy", "makes", "sense", "NUMBER", "I", "consider", "the", "request", "count", "based", "expiration", "policy", "to", "be", "complimentary", "NUMBER", "It", "works", "best", "in", "a", "situation", "where", "an", "attacker", "needs", "multiple", "try", "in", "order", "to", "guess", "the", "layout", "of", "memory", "leak", "something", "in", "the", "right", "place", "to", "overwrite", "later", "or", "just", "generally", "exhaust", "resources", "NUMBER", "You", "re", "absolutely", "correct", "that", "this", "has", "the", "potential", "to", "impact", "busy", "customers", "and", "it", "may", "be", "something", "that", "we", "want", "to", "disable", "or", "tune", "up", "NUMBER", "I", "consider", "it", "to", "be", "good", "security", "policy", "but", "we", "can", "argue", "about", "whether", "it", "makes", "sense", "to", "be", "a", "mandatory", "setting", "I", "certainly", "take", "your", "point", "about", "it", "exacerbating", "the", "impact", "of", "container", "start", "time", "NUMBER", "This", "be", "potentially", "open", "ended", "but", "there", "s", "scope", "in", "the", "Status", "return", "message", "for", "a", "runner", "to", "explicitly", "call", "out", "that", "it", "s", "in", "trouble", "NUMBER", "In", "particular", "if", "the", "docker", "subsystem", "be", "having", "trouble", "the", "runner", "should", "definitely", "let", "the", "LB", "or", "any", "other", "polling", "service", "know", "that", "it", "s", "in", "difficulties", "NUMBER", "There", "s", "space", "for", "this", "for", "instance", "the", "Status", "call", "can", "explicitly", "return", "an", "error", "rather", "than", "a", "status", "NUMBER", "However", "we", "require", "some", "detection", "in", "the", "runner", "for", "these", "kinds", "of", "conditions", "NUMBER", "Alternatively", "the", "runner", "could", "just", "panic", "if", "its", "docker", "driver", "or", "any", "other", "pertinent", "subsystem", "gets", "into", "trouble", "this", "ll", "show", "up", "as", "a", "grpc", "error", "since", "it", "ll", "stop", "talking", "Was", "discussing", "something", "similar", "with", "skinowski", "yesterday", "NUMBER", "We", "presently", "don", "t", "have", "any", "mechanism", "to", "recover", "container", "state", "if", "dockerd", "fail", "so", "if", "we", "lose", "our", "docker", "connection", "or", "the", "ability", "to", "talk", "to", "the", "daemon", "either", "a", "panic", "or", "failure", "report", "seems", "appropriate", "NUMBER", "There", "may", "be", "other", "deployment", "specific", "components", "that", "need", "to", "surface", "status", "to", "the", "LB", "about", "whether", "the", "host", "be", "healthy", "NUMBER", "I", "don", "t", "have", "any", "brilliant", "proposals", "for", "this", "beyond", "a", "host", "status", "type", "of", "plugin", "that", "can", "return", "Status", "information", "to", "the", "LB", "NUMBER", "Would", "this", "be", "the", "appropriate", "place", "to", "report", "information", "like", "run", "low", "on", "memory", "and", "non", "fatal", "conditions", "Is", "there", "a", "place", "to", "report", "metrics", "from", "the", "runner", "back", "to", "the", "load", "balancer", "right", "now", "skinowski", "Fixed", "this", "so", "I", "m", "closing", "it", "out", "NUMBER", "If", "we", "run", "into", "specific", "health", "items", "that", "we", "d", "like", "to", "add", "to", "the", "status", "we", "can", "file", "new", "issue", "to", "pull", "them", "in", "NUMBER", "same", "question", "as", "in", "NUMBER", "long", "term", "viability", "desire", "of", "this", "as", "a", "feature", "was", "left", "murky", "We", "re", "going", "to", "remove", "user", "configuration", "this", "and", "CPU", "configuration", "from", "the", "APIs", "in", "the", "trigger", "change", "as", "discussed", "previously", "it", "s", "unlikely", "that", "honoring", "these", "by", "guarantee", "without", "add", "substantial", "complexity", "to", "scheduling", "will", "work", "in", "a", "scaled", "up", "system", "NUMBER", "For", "both", "we", "ll", "set", "these", "by", "configuration", "in", "the", "server", "as", "a", "function", "of", "memory", "initially", "NUMBER", "Sounds", "good", "NUMBER", "This", "PR", "was", "a", "consistency", "change", "to", "keep", "route", "configuration", "cpu", "mem", "tmpfssize", "together", "NUMBER", "Since", "tmpfssize", "was", "merge", "in", "already", "it", "should", "be", "in", "swagger", "NUMBER", "When", "we", "remove", "it", "we", "can", "remove", "it", "along", "with", "cpu", "etc", "NUMBER", "Does", "it", "make", "sense", "to", "still", "keep", "track", "of", "these", "types", "of", "responses", "Maybe", "keep", "a", "counter", "and", "dump", "it", "once", "a", "minute", "yeah", "a", "metric", "would", "be", "best", "this", "feels", "like", "something", "leaking", "from", "the", "service", "into", "OSS", "and", "if", "I", "recall", "from", "internal", "briefings", "long", "term", "tmpfs", "isn", "t", "something", "we", "re", "planning", "to", "rely", "on", "NUMBER", "disk", "seems", "like", "a", "knob", "we", "want", "to", "expose", "for", "users", "to", "turn", "on", "each", "func", "which", "perhaps", "be", "tmpfs", "at", "some", "point", "and", "a", "real", "disk", "at", "other", "times", "but", "for", "compat", "reasons", "and", "for", "simplicity", "reasons", "we", "should", "probably", "try", "to", "hash", "out", "what", "we", "really", "want", "to", "support", "here", "as", "breaking", "things", "like", "env", "vars", "be", "challenging", "NUMBER", "thanks", "for", "digging", "into", "this", "NUMBER", "to", "fix", "the", "master", "build", "fail", "all", "we", "d", "need", "to", "do", "be", "comment", "out", "the", "deploy", "section", "of", "the", "CI", "config", "right", "this", "would", "get", "us", "a", "green", "check", "mark", "I", "believe", "I", "m", "hesitant", "to", "gut", "change", "a", "lot", "of", "the", "auto", "deploy", "process", "expecting", "to", "do", "it", "manually", "would", "be", "nice", "to", "keep", "it", "the", "same", "but", "try", "to", "automate", "it", "in", "another", "way", "NUMBER", "At", "least", "it", "s", "not", "clear", "this", "be", "the", "intent", "of", "this", "patch", "but", "maybe", "so", "master", "be", "the", "only", "protected", "branch", "we", "have", "as", "far", "as", "I", "know", "NUMBER", "I", "believe", "we", "have", "a", "number", "of", "alternatives", "to", "maintain", "the", "automate", "release", "process", "albeit", "none", "seem", "to", "be", "as", "convenient", "as", "what", "we", "have", "NUMBER", "the", "easiest", "solution", "I", "can", "think", "of", "in", "my", "jet", "lagged", "state", "be", "for", "our", "deploy", "CI", "section", "to", "create", "a", "release", "branch", "automatically", "and", "bump", "the", "version", "and", "push", "it", "there", "at", "which", "point", "we", "need", "to", "figure", "out", "how", "to", "automate", "get", "it", "into", "the", "tip", "of", "master", "but", "at", "least", "the", "release", "process", "of", "docker", "images", "etc", "NUMBER", "be", "happening", "and", "has", "the", "same", "code", "as", "master", "NUMBER", "it", "would", "be", "relatively", "easy", "to", "post", "PRs", "of", "release", "branch", "into", "master", "there", "may", "be", "other", "better", "ways", "and", "we", "may", "be", "able", "to", "securely", "automate", "that", "to", "keep", "the", "same", "bump", "version", "for", "every", "change", "that", "lands", "behavior", "open", "to", "ideas", "around", "that", "or", "automating", "this", "in", "general", "NUMBER", "I", "be", "enjoying", "work", "with", "Fn", "especially", "use", "asynchronous", "function", "NUMBER", "An", "issue", "be", "that", "there", "be", "no", "easy", "way", "to", "remove", "data", "created", "from", "old", "function", "calls", "NUMBER", "Currently", "I", "have", "to", "edit", "the", "log", "and", "output", "databases", "manually", "NUMBER", "It", "would", "be", "useful", "to", "have", "the", "ability", "to", "do", "this", "with", "Fn", "directly", "e", "NUMBER", "g", "NUMBER", "fn", "calls", "delete", "APP", "CALL_ID", "or", "fn", "logs", "delete", "APP", "CALL_ID", "would", "remove", "all", "data", "associated", "with", "the", "specified", "call", "ID", "in", "the", "specified", "application", "NUMBER", "This", "would", "prevent", "the", "server", "from", "filling", "up", "with", "old", "data", "from", "old", "calls", "NUMBER", "It", "would", "also", "allow", "me", "to", "build", "logic", "into", "my", "application", "that", "detects", "when", "a", "user", "has", "retrieved", "the", "output", "from", "a", "call", "and", "so", "safely", "delete", "that", "data", "from", "the", "server", "NUMBER", "Hi", "chryswoods", "thanks", "for", "the", "issue", "NUMBER", "Is", "this", "specifically", "to", "prevent", "disk", "full", "issue", "I", "notice", "we", "actually", "remove", "the", "API", "call", "at", "one", "point", "per", "issue", "NUMBER", "but", "there", "s", "some", "thought", "in", "there", "about", "if", "when", "how", "it", "might", "be", "add", "back", "in", "NUMBER", "Any", "thoughts", "Yes", "this", "be", "to", "prevent", "disk", "full", "issue", "NUMBER", "The", "use", "case", "be", "use", "Fn", "to", "run", "molecular", "dynamics", "simulations", "on", "demand", "as", "individual", "function", "NUMBER", "Fn", "provides", "the", "serverless", "interface", "for", "simulations", "that", "be", "initiated", "queried", "and", "then", "collected", "from", "Jupyter", "notebooks", "run", "in", "a", "k", "NUMBER", "s", "cluster", "NUMBER", "This", "allows", "the", "notebooks", "to", "use", "relatively", "low", "powered", "cloud", "instances", "for", "the", "k", "NUMBER", "s", "cluster", "with", "big", "fat", "nodes", "in", "the", "cloud", "or", "on", "premise", "use", "on", "demand", "to", "run", "simulations", "when", "they", "be", "invoked", "as", "a", "Fn", "function", "NUMBER", "The", "simulations", "be", "long", "and", "so", "async", "function", "be", "needed", "NUMBER", "The", "Jupyter", "interface", "will", "capture", "the", "CALL_ID", "and", "then", "use", "this", "later", "to", "query", "when", "the", "simulation", "has", "finished", "and", "to", "then", "get", "the", "ID", "of", "the", "data", "cache", "in", "which", "the", "data", "be", "generate", "NUMBER", "The", "user", "will", "transfer", "the", "data", "from", "the", "data", "cache", "to", "storage", "connected", "to", "the", "notebook", "use", "this", "data", "ID", "NUMBER", "Once", "the", "data", "has", "be", "transferred", "the", "system", "should", "delete", "everything", "relate", "to", "the", "request", "NUMBER", "This", "be", "mainly", "to", "prevent", "disk", "full", "issue", "but", "also", "for", "data", "governance", "whereby", "commercial", "users", "would", "not", "want", "records", "of", "the", "simulation", "run", "to", "be", "retained", "on", "the", "system", "for", "any", "longer", "than", "was", "necessary", "to", "run", "the", "calculation", "NUMBER", "Looking", "at", "NUMBER", "I", "understand", "that", "you", "don", "t", "want", "users", "to", "be", "able", "to", "delete", "their", "logs", "for", "auditing", "reasons", "NUMBER", "The", "compromise", "of", "use", "a", "cleaner", "to", "remove", "everything", "completed", "that", "be", "older", "than", "NUMBER", "days", "be", "not", "an", "option", "as", "it", "could", "clean", "out", "the", "results", "of", "an", "async", "function", "before", "the", "user", "has", "a", "chance", "to", "collect", "the", "results", "NUMBER", "Perhaps", "a", "better", "idea", "would", "be", "for", "the", "user", "to", "be", "able", "to", "flag", "a", "call", "as", "delete", "but", "this", "only", "sets", "a", "deletable", "flag", "on", "the", "record", "Then", "a", "cleaner", "periodically", "prunes", "the", "database", "to", "remove", "all", "deletable", "records", "that", "be", "older", "than", "a", "set", "time", "e", "NUMBER", "g", "NUMBER", "NUMBER", "or", "NUMBER", "days", "Essentially", "deleting", "really", "moves", "things", "to", "trash", "and", "only", "the", "sysadmin", "or", "the", "cleaner", "script", "can", "remove", "things", "from", "the", "trash", "thanks", "chryswoods", "I", "think", "a", "configurable", "cleaner", "interval", "be", "what", "we", "were", "thinking", "about", "to", "have", "a", "better", "out", "of", "the", "box", "xp", "around", "this", "deleting", "all", "call", "and", "log", "records", "before", "some", "set", "time", "remedies", "one", "issue", "surfaced", "in", "NUMBER", "it", "may", "be", "easier", "in", "the", "short", "term", "to", "have", "DELETE", "calls", "before", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "to", "delete", "records", "our", "api", "at", "present", "doesn", "t", "lend", "well", "to", "this", "but", "we", "could", "add", "it", "as", "an", "admin", "style", "endpoint", "need", "to", "think", "on", "this", "one", "some", "more", "open", "to", "ideas", "here", "NUMBER", "thanks", "for", "surfacing", "this", "NUMBER", "Thanks", "rdallman", "I", "will", "add", "the", "short", "term", "DELETE", "as", "you", "suggest", "NUMBER", "I", "can", "also", "short", "term", "add", "in", "a", "layer", "above", "Fn", "that", "marks", "records", "for", "later", "deletion", "for", "specific", "jobs", "when", "the", "user", "has", "moved", "file", "NUMBER", "I", "m", "happy", "to", "feed", "back", "how", "this", "works", "for", "my", "use", "case", "so", "that", "you", "can", "see", "whether", "or", "not", "this", "would", "be", "useful", "in", "mainline", "NUMBER", "NUMBER", "fix", "this", "NUMBER", "fix", "this", "worked", "fine", "thanks", "But", "still", "here", "would", "be", "bad", "UX", "in", "cases", "when", "the", "max", "size", "of", "the", "FS", "would", "not", "enough", "NUMBER", "A", "good", "example", "here", "would", "a", "function", "I", "ve", "do", "it", "downloads", "a", "video", "file", "from", "S", "NUMBER", "store", "and", "function", "has", "no", "idea", "of", "how", "big", "video", "file", "can", "be", "unless", "there", "s", "particular", "check", "whether", "a", "function", "can", "fit", "a", "file", "OpenCV", "can", "t", "read", "a", "video", "file", "from", "in", "memory", "stream", "it", "can", "only", "accept", "a", "file", "path", "it", "s", "weird", "indeed", "but", "still", "one", "of", "the", "possible", "use", "cases", "NUMBER", "So", "i", "do", "understand", "that", "we", "can", "t", "let", "a", "funciton", "decide", "how", "big", "FS", "it", "wants", "expect", "route", "configuration", "but", "there", "has", "to", "be", "a", "way", "to", "let", "function", "know", "of", "how", "much", "memory", "to", "use", "it", "has", "similar", "to", "RAM", "NUMBER", "Thoughts", "Problem", "While", "FN_DISABLE_READONLY_ROOTFS", "left", "unset", "a", "function", "can", "t", "write", "to", "tmp", "or", "any", "other", "temporary", "directory", "defined", "by", "OS", "Steps", "to", "reproduce", "NUMBER", "Create", "a", "function", "that", "attempts", "to", "create", "a", "temp", "file", "no", "matter", "which", "programming", "language", "to", "use", "NUMBER", "NUMBER", "Execute", "in", "any", "mode", "sync", "async", "NUMBER", "Function", "use", "to", "test", "LINK", "splitter", "processor", "NUMBER", "go", "L", "NUMBER", "Code", "snippet", "go", "tempFile", "err", "ioutil", "NUMBER", "TempFile", "os", "NUMBER", "TempDir", "fmt", "NUMBER", "Sprintf", "s", "s", "prefix", "filepath", "NUMBER", "Ext", "video", "NUMBER", "Object", "if", "err", "nil", "return", "err", "Logs", "open", "tmp", "NUMBER", "abe", "NUMBER", "e", "NUMBER", "NUMBER", "bf", "NUMBER", "f", "NUMBER", "cdea", "NUMBER", "d", "NUMBER", "f", "NUMBER", "mp", "NUMBER", "read", "only", "file", "system", "body", "open", "tmp", "NUMBER", "abe", "NUMBER", "e", "NUMBER", "NUMBER", "bf", "NUMBER", "f", "NUMBER", "cdea", "NUMBER", "d", "NUMBER", "f", "NUMBER", "mp", "NUMBER", "read", "only", "file", "system", "content_type", "protocol", "status_code", "NUMBER", "Expectations", "Guess", "tmp", "still", "should", "be", "available", "for", "RWX", "NUMBER", "Alpine", "NUMBER", "not", "a", "huge", "fan", "of", "the", "mutable", "call", "NUMBER", "req", "to", "swap", "context", "stuff", "in", "out", "there", "s", "the", "context", "on", "methods", "too", "and", "this", "seems", "brittle", "the", "goal", "was", "to", "surface", "call", "NUMBER", "Req", "NUMBER", "Context", "early", "and", "use", "modify", "it", "as", "a", "standard", "ctx", "param", "if", "some", "better", "way", "comes", "to", "mind", "would", "prefer", "it", "but", "if", "not", "just", "ignore", "me", "and", "ship", "it", "NUMBER", "Is", "it", "feasible", "to", "to", "add", "an", "e", "NUMBER", "e", "test", "to", "witness", "the", "FS", "limit", "here", "Ah", "find", "it", "I", "have", "some", "minor", "concerns", "about", "the", "impact", "of", "make", "this", "per", "route", "configurable", "but", "understand", "that", "while", "this", "be", "necessarily", "tmpfs", "that", "this", "make", "sense", "NUMBER", "seems", "like", "a", "good", "use", "case", "for", "annotations", "to", "configure", "Are", "there", "any", "corresponding", "change", "that", "need", "to", "be", "made", "to", "the", "fn", "api", "or", "cli", "to", "support", "this", "Relatedly", "should", "we", "enable", "by", "default", "and", "instead", "use", "the", "environment", "to", "allow", "users", "to", "disable", "I", "be", "use", "nodejs", "on", "fn", "version", "Client", "version", "NUMBER", "Server", "version", "NUMBER", "When", "I", "run", "the", "command", "echo", "n", "name", "Bob", "fn", "run", "The", "result", "be", "message", "Hello", "World", "when", "it", "should", "be", "message", "Hello", "Bob", "This", "worked", "in", "previous", "fn", "version", "NUMBER", "I", "see", "what", "s", "going", "on", "NUMBER", "With", "latest", "change", "to", "CLI", "we", "remove", "default", "hard", "code", "content", "type", "NUMBER", "In", "order", "to", "make", "it", "work", "you", "need", "to", "use", "the", "following", "command", "echo", "name", "Bob", "fn", "run", "content", "type", "application", "json", "message", "Hello", "Bob", "cc", "rikgibson", "michael", "w", "williams", "Thanks", "Denis", "NUMBER", "I", "will", "start", "make", "the", "change", "in", "the", "tutorials", "NUMBER", "When", "the", "server", "be", "configured", "use", "WithDatastore", "function", "fn", "doesn", "t", "use", "the", "validator", "metric", "emitter", "from", "api", "datastore", "internal", "datastoreutil", "NUMBER", "This", "change", "makes", "validator", "and", "metrics", "emitter", "mandatory", "for", "custom", "datastore", "implementation", "by", "introduce", "new", "function", "Wrap", "to", "datastore", "which", "be", "then", "call", "from", "WithDatastore", "function", "NUMBER", "cc", "rdallman", "zootalures", "adoublebarrel", "jan", "g", "skinowski", "makes", "sense", "on", "the", "other", "hand", "this", "way", "we", "can", "say", "that", "FN", "guarantees", "the", "same", "set", "of", "metrics", "every", "time", "NUMBER", "I", "get", "your", "point", "especially", "with", "having", "fnext", "datastore", "which", "might", "need", "more", "detailed", "metrics", "anyway", "NUMBER", "Do", "we", "agree", "that", "every", "datastore", "should", "be", "wrapped", "with", "validator", "I", "do", "have", "doubts", "make", "metrics", "and", "validation", "optional", "NUMBER", "Most", "of", "the", "times", "we", "need", "validation", "for", "an", "app", "route", "so", "the", "validation", "be", "required", "just", "to", "prevent", "from", "weird", "SQL", "queries", "but", "have", "no", "clue", "when", "I", "woundn", "t", "need", "metrics", "NUMBER", "Noticed", "unexpect", "async", "call", "rescheduling", "when", "agent", "fail", "to", "pull", "an", "image", "INFO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Pulling", "image", "app_id", "NUMBER", "CDADXSG", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "cpus", "format", "json", "id", "NUMBER", "CDAE", "NUMBER", "JF", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "C", "idle_timeout", "NUMBER", "image", "frame", "splitter", "NUMBER", "memory", "NUMBER", "registry", "LINK", "route", "frame", "splitter", "stack", "Prepare", "username", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Failed", "to", "pull", "image", "app_id", "NUMBER", "CDADXSG", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "cpus", "error", "API", "error", "NUMBER", "message", "invalid", "reference", "format", "n", "format", "json", "id", "NUMBER", "CDAE", "NUMBER", "JF", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "C", "idle_timeout", "NUMBER", "image", "frame", "splitter", "NUMBER", "memory", "NUMBER", "registry", "LINK", "route", "frame", "splitter", "stack", "Prepare", "username", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "error", "run", "async", "call", "error", "Failed", "to", "pull", "image", "frame", "splitter", "NUMBER", "invalid", "reference", "format", "id", "NUMBER", "CDADZ", "NUMBER", "XMR", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Reserved", "call_id", "NUMBER", "CDADZ", "NUMBER", "XMR", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Hot", "function", "launcher", "stats", "app_id", "NUMBER", "CDADXSG", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "currentStats", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "id", "NUMBER", "CDADZ", "NUMBER", "XMR", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "isNeeded", "true", "route", "frame", "splitter", "INFO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Hot", "function", "launcher", "starting", "hot", "container", "app_id", "NUMBER", "CDADXSG", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "currentStats", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "id", "NUMBER", "CDADZ", "NUMBER", "XMR", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "isNeeded", "true", "route", "frame", "splitter", "INFO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Pulling", "image", "app_id", "NUMBER", "CDADXSG", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "cpus", "format", "json", "id", "NUMBER", "CDAEABE", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "D", "idle_timeout", "NUMBER", "image", "frame", "splitter", "NUMBER", "memory", "NUMBER", "registry", "LINK", "route", "frame", "splitter", "stack", "Prepare", "username", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Failed", "to", "pull", "image", "app_id", "NUMBER", "CDADXSG", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "cpus", "error", "API", "error", "NUMBER", "message", "invalid", "reference", "format", "n", "format", "json", "id", "NUMBER", "CDAEABE", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "D", "idle_timeout", "NUMBER", "image", "frame", "splitter", "NUMBER", "memory", "NUMBER", "registry", "LINK", "route", "frame", "splitter", "stack", "Prepare", "username", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "error", "run", "async", "call", "error", "Failed", "to", "pull", "image", "frame", "splitter", "NUMBER", "invalid", "reference", "format", "id", "NUMBER", "CDADZ", "NUMBER", "XMR", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Reserved", "call_id", "NUMBER", "CDADZ", "NUMBER", "XMR", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Hot", "function", "launcher", "stats", "app_id", "NUMBER", "CDADXSG", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "currentStats", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "id", "NUMBER", "CDADZ", "NUMBER", "XMR", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "isNeeded", "true", "route", "frame", "splitter", "INFO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Hot", "function", "launcher", "starting", "hot", "container", "app_id", "NUMBER", "CDADXSG", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "currentStats", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "id", "NUMBER", "CDADZ", "NUMBER", "XMR", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "isNeeded", "true", "route", "frame", "splitter", "INFO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Pulling", "image", "app_id", "NUMBER", "CDADXSG", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "cpus", "format", "json", "id", "NUMBER", "CDAEC", "NUMBER", "YR", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "E", "idle_timeout", "NUMBER", "image", "frame", "splitter", "NUMBER", "memory", "NUMBER", "registry", "LINK", "route", "frame", "splitter", "stack", "Prepare", "username", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Failed", "to", "pull", "image", "app_id", "NUMBER", "CDADXSG", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "cpus", "error", "API", "error", "NUMBER", "message", "invalid", "reference", "format", "n", "format", "json", "id", "NUMBER", "CDAEC", "NUMBER", "YR", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "E", "idle_timeout", "NUMBER", "image", "frame", "splitter", "NUMBER", "memory", "NUMBER", "registry", "LINK", "route", "frame", "splitter", "stack", "Prepare", "username", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "error", "run", "async", "call", "error", "Failed", "to", "pull", "image", "frame", "splitter", "NUMBER", "invalid", "reference", "format", "id", "NUMBER", "CDADZ", "NUMBER", "XMR", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Reserved", "call_id", "NUMBER", "CDADZ", "NUMBER", "XMR", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Hot", "function", "launcher", "stats", "app_id", "NUMBER", "CDADXSG", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "currentStats", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "id", "NUMBER", "CDADZ", "NUMBER", "XMR", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "isNeeded", "true", "route", "frame", "splitter", "INFO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Hot", "function", "launcher", "starting", "hot", "container", "app_id", "NUMBER", "CDADXSG", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "currentStats", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "id", "NUMBER", "CDADZ", "NUMBER", "XMR", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "isNeeded", "true", "route", "frame", "splitter", "INFO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Pulling", "image", "app_id", "NUMBER", "CDADXSG", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "cpus", "format", "json", "id", "NUMBER", "CDAEE", "NUMBER", "W", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "F", "idle_timeout", "NUMBER", "image", "frame", "splitter", "NUMBER", "memory", "NUMBER", "registry", "LINK", "route", "frame", "splitter", "stack", "Prepare", "username", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Failed", "to", "pull", "image", "app_id", "NUMBER", "CDADXSG", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "cpus", "error", "API", "error", "NUMBER", "message", "invalid", "reference", "format", "n", "format", "json", "id", "NUMBER", "CDAEE", "NUMBER", "W", "NUMBER", "R", "NUMBER", "M", "NUMBER", "RZJ", "NUMBER", "F", "idle_timeout", "NUMBER", "image", "frame", "splitter", "NUMBER", "memory", "NUMBER", "registry", "LINK", "route", "frame", "splitter", "stack", "Prepare", "username", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "error", "run", "async", "call", "As", "you", "can", "see", "runner", "try", "to", "reschedule", "a", "call", "every", "minute", "but", "fail", "to", "pull", "an", "image", "NUMBER", "Image", "tag", "be", "actually", "broken", "but", "that", "was", "do", "on", "purpose", "NUMBER", "heade", "commit", "NUMBER", "d", "NUMBER", "b", "NUMBER", "c", "NUMBER", "f", "NUMBER", "e", "NUMBER", "e", "NUMBER", "a", "NUMBER", "efafe", "NUMBER", "tried", "to", "restart", "Fn", "server", "it", "doesn", "t", "go", "away", "NUMBER", "A", "bit", "more", "details", "on", "my", "setup", "sqlite", "bolt", "not", "sure", "if", "the", "problem", "be", "in", "the", "mq", "backend", "yeah", "know", "issue", "LINK", "L", "NUMBER", "L", "NUMBER", "probably", "most", "recent", "complaints", "around", "async", "listed", "here", "LINK", "L", "NUMBER", "for", "NUMBER", "months", "or", "so", "I", "notice", "the", "EnvAsHeader", "function", "was", "incorrect", "and", "that", "the", "only", "test", "that", "really", "exercises", "it", "was", "also", "broken", "in", "a", "way", "that", "made", "it", "pass", "when", "it", "shouldn", "t", "NUMBER", "The", "fix", "test", "doesn", "t", "pass", "because", "the", "attempt", "to", "invoke", "the", "function", "fail", "with", "Failed", "to", "pull", "image", "denismakogon", "os", "NUMBER", "environ", "pull", "access", "denied", "for", "denismakogon", "os", "NUMBER", "environ", "repository", "do", "not", "exist", "or", "may", "require", "docker", "login", "denismakogon", "looks", "like", "that", "container", "isn", "t", "publicly", "readable", "could", "you", "make", "that", "image", "publicly", "accessible", "somewhere", "ostrain", "the", "images", "you", "referred", "to", "has", "gone", "so", "i", "recommend", "to", "make", "a", "new", "one", "to", "cover", "this", "case", "NUMBER", "I", "like", "this", "implementation", "but", "I", "be", "still", "concerned", "about", "buffering", "the", "whole", "body", "of", "the", "http", "request", "on", "the", "LB", "side", "NUMBER", "The", "LB", "be", "going", "to", "handle", "multiple", "request", "possibly", "for", "multiple", "tenants", "NUMBER", "If", "I", "send", "several", "malicious", "request", "with", "gigabytes", "of", "body", "and", "I", "have", "enough", "bandwidth", "to", "do", "so", "within", "the", "function", "timeout", "I", "could", "OOM", "the", "LB", "affecting", "not", "only", "my", "function", "but", "also", "other", "people", "s", "NUMBER", "Granted", "it", "has", "to", "be", "a", "lot", "of", "bandwidth", "e", "NUMBER", "g", "NUMBER", "NUMBER", "GB", "NUMBER", "minutes", "NUMBER", "MB", "sec", "but", "still", "NUMBER", "This", "buffering", "be", "use", "only", "for", "retries", "and", "hopefully", "we", "get", "a", "NACK", "pretty", "quickly", "if", "we", "have", "to", "retry", "after", "all", "we", "just", "wait", "for", "the", "capacity", "check", "NUMBER", "Is", "it", "possible", "to", "use", "a", "ring", "buffer", "and", "hope", "that", "we", "receive", "the", "NACK", "before", "it", "wraps", "around", "and", "error", "out", "with", "a", "server", "too", "busy", "if", "we", "have", "to", "retry", "but", "it", "has", "already", "wrapped", "around", "This", "be", "the", "scenario", "I", "m", "thinking", "about", "LB", "receives", "request", "LB", "try", "first", "runner", "starts", "streaming", "and", "filling", "the", "ring", "buffer", "LB", "receives", "NACK", "stops", "streaming", "ring", "buffer", "be", "half", "full", "LB", "try", "second", "runner", "starts", "streaming", "the", "data", "in", "the", "buffer", "first", "LB", "receives", "NACK", "before", "any", "more", "data", "be", "needed", "stops", "streaming", "ring", "buffer", "be", "still", "half", "full", "LB", "try", "third", "runner", "starts", "streaming", "the", "data", "in", "the", "buffer", "first", "Then", "it", "seems", "to", "work", "so", "LB", "resumes", "reading", "the", "request", "body", "and", "streaming", "buffering", "it", "The", "buffer", "wraps", "around", "we", "lose", "the", "first", "bit", "of", "the", "body", "At", "this", "point", "if", "the", "runner", "has", "worked", "then", "everything", "be", "fine", "but", "if", "the", "LB", "receives", "a", "very", "late", "NACK", "then", "it", "must", "error", "out", "because", "it", "cannot", "retry", "anymore", "NUMBER", "I", "m", "hoping", "that", "the", "vast", "majority", "of", "request", "will", "satisfy", "these", "two", "conditions", "The", "body", "be", "small", "anyway", "and", "probably", "just", "fits", "into", "the", "maximum", "ring", "buffer", "size", "If", "it", "doesn", "t", "the", "NACK", "responses", "be", "fast", "enough", "that", "we", "don", "t", "need", "to", "buffer", "too", "much", "Since", "there", "be", "an", "upper", "bound", "to", "the", "ring", "buffer", "size", "a", "malicious", "actor", "will", "OOM", "the", "LB", "only", "if", "they", "send", "millions", "of", "request", "at", "which", "point", "some", "higher", "level", "rate", "limiting", "will", "kick", "in", "anyway", "NUMBER", "hhexo", "I", "like", "the", "idea", "of", "pre", "allocating", "and", "re", "use", "some", "fix", "amount", "of", "storage", "NUMBER", "That", "means", "the", "garbage", "collector", "should", "have", "less", "work", "to", "do", "if", "we", "re", "use", "instead", "of", "free", "and", "reallocate", "NUMBER", "IMO", "we", "should", "either", "buffer", "everything", "and", "be", "willing", "to", "retry", "or", "just", "buffer", "the", "request", "header", "and", "only", "re", "try", "if", "we", "get", "a", "nack", "after", "sending", "the", "first", "frame", "NUMBER", "There", "be", "enough", "edge", "cases", "here", "that", "we", "may", "want", "to", "start", "simple", "first", "NUMBER", "I", "have", "another", "question", "NUMBER", "consider", "this", "scenario", "The", "LB", "receives", "a", "request", "The", "LB", "try", "a", "runner", "The", "LB", "streams", "the", "body", "and", "it", "never", "receives", "a", "NACK", "so", "it", "thinks", "the", "runner", "be", "ok", "NUMBER", "NUMBER", "but", "the", "runner", "was", "actually", "defective", "and", "it", "keep", "the", "connection", "open", "but", "never", "even", "run", "the", "function", "The", "LB", "times", "out", "the", "call", "after", "a", "while", "In", "this", "scenario", "the", "LB", "has", "no", "information", "on", "whether", "it", "can", "or", "cannot", "retry", "the", "call", "we", "don", "t", "know", "if", "the", "function", "had", "actually", "start", "and", "the", "only", "option", "be", "to", "fail", "when", "it", "times", "out", "NUMBER", "If", "the", "protocol", "required", "an", "explicit", "ACK", "instead", "the", "code", "that", "expects", "the", "ACK", "could", "time", "out", "earlier", "than", "the", "function", "timeout", "this", "be", "analogous", "to", "the", "slot", "allocation", "timeout", "in", "single", "node", "fn", "therefore", "giving", "the", "possibility", "of", "a", "retry", "because", "the", "LB", "knows", "that", "the", "runner", "has", "not", "start", "the", "function", "NUMBER", "Removing", "the", "explicit", "ACK", "curtails", "our", "options", "somewhat", "NUMBER", "Is", "the", "scenario", "of", "a", "defective", "runner", "rare", "enough", "that", "we", "accept", "the", "possibility", "of", "letting", "some", "calls", "fail", "in", "this", "way", "We", "d", "lose", "all", "function", "calls", "issue", "to", "the", "runner", "before", "some", "other", "mechanism", "detects", "the", "faulty", "runner", "I", "ll", "test", "this", "tomorrow", "for", "sure", "NUMBER", "Thanks", "NUMBER", "Sorry", "for", "taking", "that", "long", "NUMBER", "Worked", "fine", "NUMBER", "Problem", "Fn", "starts", "container", "with", "no", "network", "binding", "considering", "that", "default", "network", "will", "be", "routed", "to", "the", "internet", "NUMBER", "So", "if", "someone", "will", "create", "a", "dedicated", "network", "Fn", "and", "will", "start", "Fn", "server", "s", "attached", "to", "that", "network", "agents", "runners", "will", "still", "deploy", "container", "to", "default", "network", "implicitly", "of", "course", "NUMBER", "how", "be", "it", "affects", "function", "In", "each", "protocol", "frame", "function", "gets", "request", "URL", "API", "endpoint", "or", "LB", "endpoint", "no", "matter", "so", "if", "a", "function", "will", "be", "scheduled", "within", "another", "network", "it", "may", "case", "broken", "connection", "from", "function", "to", "LB", "API", "endpoint", "call", "another", "function", "for", "instance", "etc", "NUMBER", "how", "to", "reproduce", "the", "issue", "The", "simplest", "way", "deploy", "Fn", "from", "docker", "compose", "NUMBER", "yml", "and", "call", "some", "chained", "function", "NUMBER", "You", "ll", "notice", "that", "function", "can", "t", "talk", "to", "Fn", "because", "it", "ended", "up", "on", "a", "different", "network", "NUMBER", "But", "have", "no", "idea", "how", "to", "reproduce", "this", "problem", "on", "k", "NUMBER", "ts", "NUMBER", "possible", "ways", "to", "solve", "At", "the", "cursory", "glance", "pass", "DOCKER_NET", "FN_NET", "to", "a", "runner", "to", "tell", "where", "to", "schedule", "function", "NUMBER", "Maybe", "there", "s", "something", "else", "but", "not", "sure", "NUMBER", "skinowski", "thank", "you", "NUMBER", "So", "tell", "me", "with", "that", "feature", "you", "d", "add", "would", "Fn", "admin", "be", "capable", "to", "specify", "a", "network", "list", "of", "those", "to", "attach", "each", "function", "to", "that", "Just", "trying", "to", "understand", "the", "networking", "we", "d", "like", "to", "build", "in", "order", "to", "avoid", "unrouted", "request", "between", "function", "and", "Fn", "NUMBER", "Or", "inject", "Fn", "API", "endpoint", "that", "function", "can", "talk", "to", "without", "falling", "into", "Uknown", "host", "NUMBER", "Deployment", "with", "docker", "compose", "be", "very", "handy", "to", "discover", "this", "particular", "issue", "where", "ends", "in", "one", "network", "and", "function", "attached", "to", "default", "bridge", "defined", "in", "docker", "daemon", "config", "NUMBER", "Yes", "NUMBER", "As", "long", "as", "Fn", "will", "be", "able", "to", "attach", "function", "to", "the", "same", "network", "it", "runs", "on", "then", "it", "s", "fine", "NUMBER", "I", "ve", "be", "considering", "the", "next", "case", "Fn", "should", "accept", "env", "var", "that", "represents", "a", "mandatory", "network", "or", "a", "list", "of", "those", "that", "container", "will", "be", "attached", "to", "and", "an", "env", "var", "that", "represents", "a", "list", "of", "optional", "networks", "where", "Fn", "will", "apply", "round", "robin", "NUMBER", "The", "purpose", "be", "each", "function", "should", "be", "attached", "to", "an", "MGMT", "network", "s", "and", "others", "be", "optional", "so", "a", "function", "at", "least", "will", "be", "able", "to", "talk", "to", "Fn", "which", "be", "not", "guaranteed", "by", "an", "optional", "network", "s", "NUMBER", "if", "we", "want", "them", "back", "we", "can", "dig", "them", "out", "of", "git", "instead", "of", "some", "poor", "soul", "uncommenting", "them", "NUMBER", "years", "from", "now", "and", "spending", "NUMBER", "months", "on", "fail", "CI", "build", "trying", "to", "figure", "out", "how", "a", "test", "that", "breaks", "doesn", "t", "mean", "the", "code", "s", "broke", "NUMBER", "these", "test", "be", "notoriously", "flaky", "and", "hard", "to", "understand", "fix", "they", "also", "test", "very", "specific", "agent", "behaviors", "all", "the", "way", "through", "the", "front", "end", "when", "it", "may", "be", "easier", "to", "test", "them", "in", "unit", "test", "instead", "should", "we", "so", "choose", "NUMBER", "at", "least", "since", "the", "behaviors", "test", "aren", "t", "be", "change", "very", "often", "these", "be", "only", "serving", "to", "provide", "negative", "value", "in", "time", "wasted", "re", "run", "the", "test", "suite", "since", "them", "fail", "doesn", "t", "really", "indicate", "the", "code", "be", "wrong", "NUMBER", "the", "IOPipes", "test", "be", "partially", "covered", "by", "TestPipesAreClear", "which", "hasn", "t", "cropped", "up", "as", "be", "as", "flaky", "but", "it", "test", "less", "behaviors", "NUMBER", "it", "be", "not", "easy", "tt", "o", "understand", "either", "NUMBER", "while", "i", "think", "we", "learned", "a", "lot", "from", "these", "test", "they", "haven", "t", "be", "a", "great", "citizen", "of", "our", "test", "suite", "at", "large", "i", "figure", "if", "we", "need", "to", "change", "runner", "behavior", "in", "the", "future", "we", "can", "maybe", "make", "another", "go", "at", "it", "NUMBER", "the", "last", "NUMBER", "NUMBER", "weeks", "this", "has", "be", "unbearable", "gotta", "kick", "the", "bucket", "NUMBER", "NUMBER", "times", "even", "for", "docs", "change", "thanks", "reclaro", "agree", "i", "think", "we", "need", "to", "pick", "a", "better", "spot", "to", "test", "stuff", "like", "this", "possibly", "make", "the", "code", "easier", "to", "test", "cc", "skinowski", "we", "can", "discuss", "when", "you", "be", "back", "D", "users", "may", "specify", "a", "syslog", "url", "s", "on", "apps", "now", "and", "all", "function", "under", "that", "app", "will", "spew", "their", "logs", "out", "to", "it", "NUMBER", "the", "docs", "have", "more", "information", "around", "details", "there", "please", "review", "those", "swagger", "and", "operate", "logging", "NUMBER", "md", "tried", "to", "implement", "to", "spec", "in", "some", "parts", "and", "improve", "others", "open", "to", "feedback", "on", "format", "though", "lots", "of", "liberty", "there", "NUMBER", "design", "decision", "wise", "I", "be", "looking", "to", "the", "future", "and", "ignoring", "cold", "container", "NUMBER", "the", "overhead", "of", "the", "connections", "there", "will", "not", "be", "worth", "it", "so", "this", "feature", "only", "works", "for", "hot", "function", "since", "we", "re", "killing", "cold", "anyway", "even", "if", "a", "user", "can", "just", "straight", "up", "exit", "a", "hot", "container", "NUMBER", "syslog", "connections", "will", "be", "opened", "against", "a", "container", "when", "it", "starts", "up", "and", "then", "the", "call", "id", "that", "be", "logged", "gets", "swapped", "out", "for", "each", "call", "that", "goes", "through", "the", "container", "this", "cuts", "down", "on", "the", "cost", "of", "open", "closing", "connections", "significantly", "NUMBER", "there", "be", "buffers", "to", "accumulate", "logs", "until", "we", "get", "a", "n", "to", "actually", "write", "a", "syslog", "line", "and", "a", "buffer", "to", "save", "some", "bytes", "when", "we", "re", "write", "the", "syslog", "format", "as", "well", "NUMBER", "underneath", "writers", "re", "use", "the", "line", "writer", "in", "certain", "scenarios", "swapper", "NUMBER", "we", "could", "likely", "improve", "the", "ease", "of", "setting", "this", "up", "but", "open", "the", "syslog", "conns", "against", "a", "container", "seems", "worth", "it", "and", "be", "a", "different", "path", "than", "the", "other", "func", "loggers", "that", "we", "create", "when", "we", "make", "a", "call", "object", "NUMBER", "the", "Close", "stuff", "be", "a", "little", "tricky", "not", "sure", "how", "to", "make", "it", "easier", "and", "have", "the", "benefits", "open", "to", "idears", "NUMBER", "this", "do", "add", "another", "vector", "of", "limits", "to", "consider", "for", "more", "strict", "service", "operators", "NUMBER", "one", "be", "how", "many", "syslog", "urls", "can", "a", "user", "add", "to", "an", "app", "infinite", "atm", "and", "the", "other", "be", "on", "the", "order", "of", "number", "of", "container", "per", "host", "we", "could", "run", "out", "of", "connections", "in", "certain", "scenarios", "NUMBER", "there", "may", "be", "some", "utility", "in", "having", "multiple", "syslog", "sinks", "to", "send", "to", "it", "could", "help", "with", "debugging", "at", "times", "to", "send", "to", "another", "destination", "or", "if", "a", "user", "be", "a", "client", "w", "someone", "and", "both", "want", "the", "function", "logs", "e", "NUMBER", "g", "NUMBER", "have", "use", "this", "for", "that", "in", "the", "past", "specifically", "NUMBER", "this", "also", "doesn", "t", "work", "behind", "a", "proxy", "which", "be", "something", "i", "m", "open", "to", "fix", "but", "afaict", "will", "require", "a", "NUMBER", "party", "dependency", "we", "can", "pretty", "much", "steal", "what", "docker", "do", "NUMBER", "this", "be", "mostly", "of", "utility", "for", "those", "of", "us", "that", "work", "behind", "a", "proxy", "all", "the", "time", "not", "really", "for", "end", "users", "NUMBER", "there", "be", "some", "unit", "test", "NUMBER", "integration", "test", "for", "this", "don", "t", "sound", "very", "fun", "to", "maintain", "NUMBER", "I", "did", "test", "against", "papertrail", "with", "each", "protocol", "and", "it", "works", "and", "even", "times", "out", "if", "you", "re", "behind", "a", "proxy", "NUMBER", "close", "NUMBER", "me", "i", "dream", "of", "a", "day", "where", "i", "won", "t", "have", "to", "click", "ci", "rebuild", "over", "IOPipes", "be", "this", "test", "provide", "value", "i", "might", "just", "get", "rid", "of", "it", "it", "doesn", "t", "seem", "worth", "it", "now", "there", "s", "TestPipesAreClear", "to", "make", "sure", "we", "aren", "t", "leaving", "garbage", "in", "there", "though", "IOPipes", "test", "NUMBER", "other", "things", "NUMBER", "this", "may", "also", "close", "NUMBER", "we", "also", "have", "mr", "freeze", "now", "so", "it", "s", "kinda", "moot", "the", "container", "won", "t", "do", "anything", "between", "calls", "really", "it", "could", "still", "spew", "some", "logs", "on", "startup", "though", "NUMBER", "i", "m", "not", "really", "sure", "we", "want", "to", "have", "a", "container", "logs", "api", "the", "call", "logs", "api", "be", "already", "get", "nailed", "up", "for", "target", "practice", "just", "get", "the", "logs", "out", "to", "syslog", "seems", "pretty", "good", "to", "me", "looks", "pretty", "good", "in", "papertrail", "the", "format", "be", "kinda", "optimized", "for", "that", "it", "s", "what", "I", "know", "TAG", "NUMBER", "s", "NUMBER", "vjs", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "be", "NUMBER", "e", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "d", "a", "NUMBER", "e", "NUMBER", "c", "NUMBER", "e", "NUMBER", "gif", "bump", "zootalures", "jan", "g", "hhexo", "i", "think", "DP", "be", "gonna", "use", "this", "idk", "i", "m", "out", "of", "the", "loop", "thanks", "for", "reviewing", "NUMBER", "Should", "we", "execute", "this", "dial", "in", "parallel", "for", "all", "syslog", "sinks", "yea", "this", "could", "be", "a", "good", "idea", "NUMBER", "trying", "to", "keep", "it", "simple", "for", "a", "first", "pass", "also", "suspect", "most", "users", "will", "use", "NUMBER", "or", "maybe", "NUMBER", "NUMBER", "tops", "so", "N", "be", "really", "small", "but", "could", "be", "NUMBER", "NUMBER", "s", "for", "a", "tls", "conn", "half", "way", "around", "the", "world", "too", "I", "guess", "NUMBER", "and", "also", "in", "background", "to", "avoid", "add", "up", "to", "container", "start", "latency", "slight", "concern", "about", "doing", "it", "in", "parallel", "to", "starting", "the", "container", "as", "this", "could", "mean", "that", "the", "logger", "could", "miss", "some", "logs", "NUMBER", "In", "particular", "for", "container", "whose", "launches", "subsequently", "fail", "relatively", "quickly", "NUMBER", "I", "think", "it", "s", "best", "that", "we", "ensure", "we", "don", "t", "miss", "any", "logs", "hard", "to", "explain", "debug", "and", "in", "practice", "w", "hot", "function", "eating", "the", "latency", "should", "be", "mitigated", "mostly", "though", "that", "depends", "on", "how", "optimistically", "we", "launch", "NUMBER", "so", "it", "s", "possible", "to", "do", "all", "of", "that", "NUMBER", "i", "can", "t", "honestly", "say", "i", "agree", "that", "it", "s", "worth", "it", "but", "we", "don", "t", "really", "have", "any", "data", "to", "point", "at", "now", "to", "say", "one", "way", "or", "another", "NUMBER", "we", "re", "going", "to", "be", "presumably", "add", "a", "strategy", "to", "pre", "emptively", "launch", "container", "to", "get", "around", "start", "time", "in", "any", "case", "for", "the", "high", "throughput", "installs", "NUMBER", "for", "this", "one", "more", "worried", "about", "imposing", "some", "connect", "timeout", "policy", "than", "anything", "as", "in", "the", "average", "case", "I", "expect", "this", "be", "an", "entire", "order", "of", "magnitude", "smaller", "than", "the", "docker", "start", "time", "for", "udp", "even", "less", "dns", "time", "if", "any", "NUMBER", "but", "sticking", "with", "the", "theme", "of", "not", "imposing", "limits", "in", "OSS", "it", "seems", "like", "a", "decent", "use", "case", "for", "annotations", "to", "me", "but", "there", "s", "no", "other", "plumbing", "NUMBER", "I", "think", "add", "timeout", "address", "the", "real", "concern", "when", "without", "a", "timeout", "even", "if", "we", "go", "optimize", "to", "the", "hilt", "plumb", "a", "syslog", "conn", "pool", "manager", "that", "starts", "in", "one", "place", "and", "gets", "waited", "on", "in", "another", "we", "still", "end", "up", "waiting", "longer", "than", "someone", "might", "like", "to", "get", "our", "stinkin", "logs", "out", "just", "b", "c", "the", "dial", "takes", "forever", "if", "blocking", "NUMBER", "the", "idea", "of", "a", "bit", "to", "set", "lossy", "logs", "and", "unlossy", "logs", "seems", "like", "a", "really", "slippery", "slope", "i", "d", "prefer", "to", "avoid", "aside", "from", "be", "yet", "another", "knob", "nobody", "will", "use", "NUMBER", "we", "should", "just", "pick", "a", "sane", "default", "I", "think", "NUMBER", "I", "see", "the", "support", "tickets", "already", "hey", "my", "container", "says", "yo", "on", "startup", "but", "on", "April", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "GMT", "my", "container", "start", "but", "didn", "t", "print", "yo", "I", "set", "non", "lossy", "logs", "be", "life", "still", "worth", "living", "NUMBER", "UDP", "will", "inherently", "be", "lossy", "make", "the", "slope", "even", "more", "slippery", "NUMBER", "it", "seems", "hard", "to", "grok", "for", "users", "NUMBER", "i", "wish", "we", "had", "a", "larger", "community", "of", "prod", "users", "we", "could", "poll", "for", "stuff", "like", "this", "NUMBER", "get", "logs", "out", "from", "the", "container", "on", "startup", "be", "key", "I", "think", "if", "we", "have", "to", "pick", "one", "NUMBER", "we", "could", "hold", "up", "handing", "out", "a", "slot", "until", "the", "dial", "goes", "through", "but", "we", "re", "still", "in", "the", "dial", "takes", "too", "long", "case", "potentially", "and", "it", "s", "relatively", "complex", "to", "plumb", "NUMBER", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "Reed", "Allman", "The", "email", "use", "in", "the", "commit", "be", "not", "linked", "to", "your", "GitHub", "account", "NUMBER", "As", "a", "result", "we", "cannot", "verify", "that", "you", "have", "sign", "the", "CLA", "NUMBER", "If", "you", "have", "sign", "already", "please", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "_invite", "MjIwNzc", "NUMBER", "MTE", "NUMBER", "ODg", "NUMBER", "LTE", "NUMBER", "MDE", "NUMBER", "NTUyNTktYThmYmRjZDUwOQ", "NUMBER", "Thanks", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "CLA", "Bot", "All", "committers", "have", "sign", "the", "CLA", "NUMBER", "add", "a", "trace", "so", "we", "can", "track", "this", "we", "ll", "probably", "need", "a", "latency", "distribution", "be", "hoping", "to", "get", "back", "to", "that", "stuff", "next", "week", "and", "have", "some", "ideas", "for", "get", "that", "out", "of", "traces", "When", "we", "chain", "middlewares", "the", "last", "middleware", "do", "not", "use", "the", "request", "pass", "by", "the", "preceding", "middleware", "NUMBER", "If", "the", "preceding", "middleware", "read", "httpRequest", "NUMBER", "Body", "and", "set", "a", "new", "io", "NUMBER", "ReadCloser", "to", "httpRequest", "NUMBER", "Body", "the", "last", "middleware", "will", "not", "see", "this", "NUMBER", "This", "change", "be", "useful", "when", "some", "middleware", "reads", "httpRequest", "NUMBER", "Body", "to", "perform", "some", "logic", "and", "assigns", "a", "new", "ReadCloser", "to", "httpRequest", "NUMBER", "Body", "as", "body", "can", "be", "read", "only", "once", "NUMBER", "One", "example", "be", "authentication", "middleware", "that", "needs", "to", "read", "the", "body", "to", "validate", "signature", "NUMBER", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "Srinidhi", "Chokkadi", "Puranik", "LINK", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "stale", "I", "was", "wondering", "if", "I", "can", "safely", "delete", "the", "data", "directory", "if", "I", "m", "not", "use", "a", "database", "NUMBER", "They", "be", "checked", "into", "source", "control", "and", "seem", "to", "get", "modify", "randomly", "NUMBER", "Do", "these", "get", "created", "when", "you", "start", "up", "fn", "server", "Also", "this", "link", "references", "function", "NUMBER", "db", "but", "It", "be", "named", "fn", "NUMBER", "db", "on", "my", "system", "NUMBER", "LINK", "sqlite", "NUMBER", "default", "going", "to", "close", "this", "particular", "area", "covered", "by", "operational", "docs", "LINK", "NUMBER", "Some", "update", "on", "triggers", "and", "FDK", "s", "NUMBER", "alright", "i", "ll", "address", "my", "own", "comments", "thanks", "for", "update", "I", "be", "trying", "out", "fn", "use", "the", "guide", "on", "the", "main", "page", "and", "I", "be", "having", "trouble", "run", "it", "behind", "the", "proxy", "NUMBER", "I", "ve", "created", "the", "hello", "world", "function", "and", "I", "be", "able", "to", "start", "the", "fn", "server", "but", "when", "I", "tried", "fn", "start", "it", "gives", "an", "error", "when", "run", "with", "verbose", "I", "get", "the", "following", "error", "sudo", "fn", "verbose", "run", "Building", "image", "hello", "NUMBER", "Sending", "build", "context", "to", "Docker", "daemon", "NUMBER", "kB", "Step", "NUMBER", "NUMBER", "FROM", "fnproject", "go", "dev", "as", "build", "stage", "fac", "NUMBER", "f", "NUMBER", "d", "NUMBER", "d", "Step", "NUMBER", "NUMBER", "WORKDIR", "function", "Using", "cache", "NUMBER", "de", "NUMBER", "f", "NUMBER", "b", "NUMBER", "Step", "NUMBER", "NUMBER", "RUN", "go", "get", "u", "github", "NUMBER", "com", "golang", "dep", "cmd", "dep", "Running", "in", "NUMBER", "c", "NUMBER", "e", "NUMBER", "e", "NUMBER", "cd", "NUMBER", "git", "clone", "LINK", "go", "src", "github", "NUMBER", "com", "golang", "dep", "Cloning", "into", "go", "src", "github", "NUMBER", "com", "golang", "dep", "NUMBER", "fatal", "unable", "to", "access", "LINK", "Could", "not", "resolve", "host", "github", "NUMBER", "com", "package", "github", "NUMBER", "com", "golang", "dep", "cmd", "dep", "exit", "status", "NUMBER", "The", "command", "bin", "sh", "c", "go", "get", "u", "github", "NUMBER", "com", "golang", "dep", "cmd", "dep", "returned", "a", "non", "zero", "code", "NUMBER", "Error", "during", "build", "NUMBER", "Run", "with", "verbose", "flag", "to", "see", "what", "went", "wrong", "NUMBER", "eg", "fn", "verbose", "CMD", "ERROR", "error", "run", "docker", "build", "exit", "status", "NUMBER", "I", "have", "proxy", "setup", "in", "NUMBER", "gitconfig", "for", "both", "regular", "user", "and", "root", "and", "I", "can", "verify", "that", "I", "can", "work", "with", "git", "successfully", "behind", "proxy", "but", "I", "can", "t", "get", "the", "fn", "run", "function", "to", "work", "with", "various", "settings", "like", "export", "http_proxy", "or", "git", "config", "global", "http", "NUMBER", "proxy", "both", "http", "and", "https", "NUMBER", "Any", "ideas", "rdallman", "if", "I", "set", "HTTPS_PROXY", "say", "export", "HTTPS_PROXY", "LINK", "then", "the", "error", "I", "get", "be", "Cloning", "into", "go", "src", "github", "NUMBER", "com", "golang", "dep", "NUMBER", "fatal", "unable", "to", "access", "LINK", "Could", "not", "resolve", "proxy", "myproxy", "NUMBER", "com", "package", "github", "NUMBER", "com", "golang", "dep", "cmd", "dep", "exit", "status", "NUMBER", "The", "command", "bin", "sh", "c", "go", "get", "u", "github", "NUMBER", "com", "golang", "dep", "cmd", "dep", "returned", "a", "non", "zero", "code", "NUMBER", "So", "it", "do", "like", "it", "reads", "from", "HTTPS_PROXY", "but", "cannot", "resolve", "the", "proxy", "address", "somehow", "I", "also", "have", "to", "add", "sudo", "E", "to", "pass", "on", "the", "environment", "sudo", "E", "fn", "verbose", "run", "Does", "this", "have", "to", "do", "because", "I", "be", "run", "use", "sudo", "or", "there", "s", "a", "way", "to", "run", "it", "without", "sudo", "If", "I", "try", "without", "sudo", "then", "I", "get", "this", "ERROR", "could", "not", "check", "Docker", "version", "exit", "status", "NUMBER", "rdallman", "Yeah", "none", "of", "the", "tricks", "worked", "I", "ve", "already", "add", "my", "user", "to", "the", "docker", "group", "and", "can", "succesfully", "run", "docker", "as", "a", "container", "and", "download", "them", "as", "non", "root", "we", "do", "use", "the", "http", "instead", "of", "https", "as", "well", "when", "setting", "https_proxy", "but", "that", "didn", "t", "help", "either", "NUMBER", "I", "ve", "manually", "typed", "git", "clone", "LINK", "go", "src", "github", "NUMBER", "com", "golang", "dep", "and", "it", "work", "in", "both", "regular", "user", "and", "root", "as", "well", "as", "sudo", "NUMBER", "So", "it", "appears", "to", "fail", "at", "RUN", "go", "get", "u", "github", "NUMBER", "com", "golang", "dep", "cmd", "dep", "if", "I", "run", "just", "that", "command", "it", "also", "works", "and", "I", "can", "see", "the", "dep", "project", "get", "downloaded", "to", "my", "GOPATH", "NUMBER", "Is", "there", "a", "way", "to", "edit", "this", "script", "somewhere", "locally", "on", "my", "machine", "to", "hack", "around", "it", "Where", "be", "this", "line", "come", "from", "be", "it", "build", "into", "the", "binary", "or", "some", "conf", "file", "I", "can", "edit", "Btw", "be", "there", "a", "reason", "why", "you", "put", "github", "NUMBER", "com", "under", "the", "NO_PROXY", "list", "sorry", "lost", "this", "one", "NUMBER", "it", "definitely", "seems", "like", "the", "build", "args", "aren", "t", "get", "in", "there", "NUMBER", "if", "you", "haven", "t", "had", "any", "luck", "yet", "the", "build", "args", "we", "copy", "over", "be", "LINK", "L", "NUMBER", "L", "NUMBER", "notably", "not", "the", "lower", "case", "ones", "NUMBER", "you", "shouldn", "t", "need", "to", "hack", "anything", "other", "than", "setting", "those", "variables", "properly", "to", "get", "past", "the", "cloning", "dep", "stage", "NUMBER", "Btw", "be", "there", "a", "reason", "why", "you", "put", "github", "NUMBER", "com", "under", "the", "NO_PROXY", "list", "i", "do", "not", "recall", "anymore", "but", "we", "don", "t", "seem", "to", "be", "copying", "this", "over", "as", "a", "build", "arg", "and", "this", "works", "on", "my", "machine", "out", "of", "the", "box", "so", "this", "shouldn", "t", "affect", "anything", "NUMBER", "closing", "for", "inactivity", "hope", "this", "worked", "out", "NUMBER", "we", "have", "a", "number", "of", "users", "behind", "a", "proxy", "so", "it", "works", "with", "enough", "jigging", "with", "it", "NUMBER", "thanks", "for", "the", "issue", "I", "tried", "to", "run", "lambda", "function", "by", "document", "NUMBER", "but", "I", "couldn", "t", "find", "the", "right", "runtime", "NUMBER", "so", "I", "want", "to", "run", "the", "aws", "lambda", "function", "without", "any", "change", "NUMBER", "what", "should", "i", "do", "NUMBER", "by", "the", "way", "my", "function", "with", "python", "NUMBER", "NUMBER", "I", "love", "the", "open", "source", "It", "s", "fascinating", "NUMBER", "but", "The", "code", "for", "my", "project", "be", "write", "in", "python", "NUMBER", "So", "Can", "you", "give", "me", "some", "feasible", "suggestions", "denismakogon", "NUMBER", "thanks", "Import", "Lambda", "function", "and", "run", "them", "anywhere", "but", "I", "import", "lambda", "function", "from", "my", "aws", "server", "It", "s", "doesn", "t", "work", "NUMBER", "can", "you", "tell", "me", "why", "Littermonkey", "Would", "you", "mind", "to", "be", "more", "explicit", "please", "about", "what", "doesn", "t", "work", "it", "be", "show", "have", "not", "right", "runtime", "NUMBER", "when", "I", "import", "lambda", "function", "runtime", "there", "s", "a", "limit", "Which", "runtime", "Please", "provide", "more", "information", "hard", "to", "guess", "what", "s", "going", "on", "without", "an", "actual", "problem", "details", "NUMBER", "Note", "that", "runtime", "means", "literally", "nothing", "to", "Fn", "server", "it", "s", "only", "for", "CLI", "since", "Fn", "works", "with", "container", "not", "the", "programming", "language", "runtime", "NUMBER", "For", "Fn", "container", "be", "the", "runtime", "which", "be", "one", "of", "the", "best", "features", "we", "did", "NUMBER", "Ok", "I", "will", "tell", "you", "what", "the", "specific", "requirements", "be", "and", "I", "need", "to", "get", "the", "lambda", "function", "code", "to", "run", "on", "any", "cloud", "service", "without", "make", "any", "change", "NUMBER", "but", "the", "lambda", "function", "runtime", "be", "python", "NUMBER", "now", "How", "I", "to", "do", "Import", "your", "function", "with", "Fn", "CLI", "and", "set", "runtime", "to", "docker", "NUMBER", "Here", "s", "the", "doc", "how", "to", "do", "so", "LINK", "Before", "fn", "deploy", "update", "runtime", "in", "func", "NUMBER", "yml", "runtime", "docker", "Bumped", "to", "version", "NUMBER", "ERROR", "Dockerfile", "do", "not", "exist", "for", "docker", "runtime", "when", "I", "fn", "deploy", "The", "above", "error", "occur", "NUMBER", "Show", "me", "the", "content", "of", "your", "func", "NUMBER", "yml", "NUMBER", "Basically", "you", "need", "to", "write", "a", "Dockerfile", "to", "package", "your", "code", "into", "a", "container", "NUMBER", "name", "glb", "NUMBER", "test_hello", "version", "NUMBER", "runtime", "docker", "cmd", "lambda_function", "NUMBER", "lambda_handler", "path", "test_hello", "So", "yes", "you", "need", "to", "write", "dockerfile", "to", "package", "your", "function", "into", "a", "container", "NUMBER", "ok", "so", "Does", "func", "NUMBER", "yml", "need", "to", "change", "What", "do", "you", "mean", "Just", "write", "dockerfile", "put", "that", "near", "func", "NUMBER", "yml", "and", "call", "deploy", "NUMBER", "Thank", "you", "very", "much", "I", "have", "a", "try", "NUMBER", "In", "aws", "lambda", "function", "need", "two", "parameters", "context", "event", "NUMBER", "but", "In", "fn", "server", "What", "should", "I", "replace", "these", "two", "parameters", "Hi", "Well", "this", "be", "quite", "problematic", "question", "because", "of", "the", "of", "the", "complete", "difference", "between", "concepts", "of", "a", "function", "between", "Lambda", "and", "Fn", "NUMBER", "I", "guess", "you", "be", "aware", "that", "Lambda", "has", "a", "wrapper", "that", "starts", "your", "function", "by", "dynamically", "loading", "your", "code", "to", "the", "runtime", "that", "s", "why", "Lambda", "support", "Node", "and", "Python", "as", "first", "programming", "languages", "to", "deliver", "NUMBER", "Fn", "be", "totally", "different", "the", "runtime", "for", "a", "function", "be", "not", "an", "actual", "programming", "language", "runtime", "but", "docker", "container", "so", "Fn", "be", "not", "aware", "of", "your", "code", "which", "signature", "it", "has", "and", "what", "it", "do", "NUMBER", "It", "means", "that", "you", "decide", "on", "the", "signature", "but", "you", "be", "responsible", "for", "request", "data", "parsing", "from", "the", "protocol", "frame", "in", "case", "of", "hot", "function", "that", "s", "why", "we", "made", "a", "bunch", "of", "FDKs", "for", "Node", "Go", "Python", "NUMBER", "Java", "Ruby", "Kotlin", "etc", "NUMBER", "I", "may", "be", "wrong", "because", "i", "didn", "t", "try", "lambda", "import", "however", "i", "have", "pretty", "strong", "opinion", "that", "you", "can", "t", "import", "lambda", "function", "without", "actually", "change", "your", "code", "to", "make", "it", "work", "with", "Fn", "NUMBER", "cc", "treeder", "Well", "let", "me", "ask", "if", "there", "be", "a", "better", "way", "to", "run", "lambda", "function", "NUMBER", "please", "give", "me", "some", "advice", "NUMBER", "Unfortunately", "have", "no", "idea", "at", "this", "moment", "except", "change", "the", "code", "of", "your", "function", "NUMBER", "Change", "the", "function", "code", "You", "mean", "be", "modify", "python", "NUMBER", "and", "use", "FKDs", "integrated", "into", "FN", "server", "Yes", "that", "s", "the", "simplest", "path", "to", "go", "NUMBER", "NUMBER", "weeks", "of", "inactivity", "on", "this", "one", "re", "open", "if", "you", "d", "still", "like", "a", "hand", "we", "re", "in", "slack", "too", "NUMBER", "thanks", "do", "ngrok", "call", "fn", "with", "https", "do", "we", "just", "need", "to", "check", "X", "Forwarded", "For", "for", "the", "original", "URL", "I", "guess", "we", "will", "almost", "always", "front", "fn", "with", "an", "lb", "and", "want", "the", "original", "request", "url", "we", "probably", "need", "to", "plumb", "that", "NUMBER", "but", "i", "don", "t", "think", "the", "bug", "be", "in", "http", "https", "scheme", "solving", "NUMBER", "with", "cloud", "events", "the", "event", "uri", "be", "in", "there", "maybe", "that", "s", "all", "we", "really", "need", "to", "do", "NUMBER", "gonna", "close", "but", "maybe", "we", "should", "open", "an", "issue", "for", "This", "be", "good", "NUMBER", "Would", "this", "change", "benefit", "from", "some", "black", "box", "narrative", "use", "cases", "that", "walked", "through", "the", "specific", "new", "user", "features", "that", "it", "enable", "I", "guess", "it", "s", "mostly", "covered", "but", "for", "other", "future", "readers", "setting", "out", "how", "this", "solves", "specific", "problem", "might", "help", "understanding", "NUMBER", "This", "could", "be", "in", "an", "adjacent", "doc", "section", "use", "cases", "this", "doc", "be", "the", "outcome", "but", "would", "be", "good", "to", "see", "some", "work", "E", "NUMBER", "g", "NUMBER", "I", "have", "a", "kafka", "queue", "I", "m", "trying", "to", "do", "this", "I", "do", "that", "NUMBER", "I", "want", "to", "hook", "up", "a", "github", "webook", "NUMBER", "Also", "on", "the", "function", "registry", "stuff", "would", "be", "good", "to", "have", "some", "lucidity", "by", "example", "on", "the", "good", "stuff", "that", "this", "enable", "i", "NUMBER", "e", "NUMBER", "sharing", "function", "between", "platforms", "function", "hub", "For", "queue", "triggers", "can", "you", "sketch", "out", "how", "this", "could", "might", "work", "with", "a", "Kafka", "Kinesis", "queue", "how", "do", "I", "authenticate", "how", "to", "I", "connect", "etc", "In", "the", "implementation", "roughly", "how", "be", "the", "polling", "pull", "likely", "to", "work", "how", "do", "you", "hook", "up", "the", "last", "mile", "for", "the", "queue", "to", "the", "events", "NUMBER", "You", "mention", "filters", "for", "queues", "what", "would", "that", "mean", "for", "a", "queue", "that", "didn", "t", "support", "filtering", "natively", "NUMBER", "For", "queues", "be", "the", "content", "on", "the", "queue", "cloud", "events", "or", "be", "cloud", "events", "wrapped", "on", "the", "queue", "content", "itself", "For", "namespaces", "be", "the", "intention", "to", "enable", "real", "multi", "tenancy", "here", "How", "will", "access", "control", "work", "in", "that", "case", "how", "do", "I", "integrate", "mix", "this", "with", "an", "exist", "access", "control", "system", "NUMBER", "You", "re", "specify", "components", "here", "trigger", "manager", "seems", "a", "bit", "fluffy", "could", "you", "clarify", "e", "NUMBER", "g", "NUMBER", "for", "a", "kafka", "queue", "above", "how", "do", "this", "scale", "up", "looking", "forward", "it", "seems", "odd", "to", "decouple", "the", "function", "and", "trigger", "resources", "in", "the", "API", "but", "then", "still", "leave", "them", "coupled", "in", "func", "NUMBER", "yaml", "if", "a", "function", "be", "truely", "an", "independent", "thing", "just", "a", "registered", "image", "and", "some", "config", "could", "these", "be", "separated", "all", "the", "way", "up", "the", "stack", "Are", "function", "immutable", "If", "they", "aren", "t", "and", "If", "I", "refer", "to", "a", "function", "in", "a", "different", "function", "registry", "how", "and", "when", "do", "I", "reflect", "change", "in", "that", "registry", "i", "NUMBER", "e", "NUMBER", "same", "problem", "as", "docker", "images", "I", "NUMBER", "e", "NUMBER", "if", "function", "becomse", "a", "remotable", "resource", "how", "do", "auth", "and", "state", "transfer", "work", "NUMBER", "be", "gonna", "start", "tinkering", "with", "LINK", "diff", "a", "NUMBER", "b", "NUMBER", "bd", "NUMBER", "dbe", "NUMBER", "bb", "NUMBER", "ef", "NUMBER", "c", "NUMBER", "b", "NUMBER", "f", "NUMBER", "fbR", "NUMBER", "need", "to", "tinker", "to", "see", "how", "this", "be", "gonna", "mash", "together", "but", "initially", "would", "like", "to", "have", "exactly", "what", "our", "FDKs", "of", "the", "future", "look", "like", "under", "the", "cloudevents", "format", "binary", "and", "all", "this", "exists", "now", "but", "the", "cloud", "event", "doesn", "t", "contain", "_all_", "information", "inside", "of", "it", "e", "NUMBER", "g", "NUMBER", "app", "id", "timeout", "NUMBER", "after", "we", "settle", "on", "this", "and", "update", "FDKs", "then", "I", "d", "like", "to", "rip", "out", "the", "other", "http", "default", "json", "formats", "and", "switch", "to", "all", "cloud", "event", "as", "it", "will", "drastically", "simplify", "the", "agent", "NUMBER", "I", "think", "this", "be", "relatively", "easily", "manageable", "and", "can", "be", "do", "before", "change", "triggers", "function", "APIs", "NUMBER", "This", "would", "break", "all", "exist", "function", "inasmuch", "as", "they", "d", "need", "to", "update", "the", "FDK", "use", "an", "FDK", "or", "update", "to", "handle", "the", "new", "format", "maintaining", "the", "various", "formats", "has", "long", "be", "a", "thorn", "in", "our", "foot", "this", "be", "more", "of", "a", "good", "riddance", "hopefully", "NUMBER", "meeting", "about", "prioritization", "of", "these", "wrt", "other", "things", "happening", "toss", "namespaces", "out", "for", "now", "do", "API", "change", "of", "trigger", "function", "first", "do", "cloud", "event", "change", "later", "FDK", "have", "NUMBER", "handlers", "we", "can", "stage", "i", "ll", "make", "change", "to", "this", "doc", "wrt", "remove", "namespaces", "today", "hopefully", "NUMBER", "and", "then", "shift", "to", "work", "on", "scoping", "the", "API", "change", "vs", "NUMBER", "scoping", "the", "cloud", "event", "change", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "Reed", "Allman", "The", "email", "use", "in", "the", "commit", "be", "not", "linked", "to", "your", "GitHub", "account", "NUMBER", "As", "a", "result", "we", "cannot", "verify", "that", "you", "have", "sign", "the", "CLA", "NUMBER", "If", "you", "have", "sign", "already", "please", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "_invite", "MjIwNzc", "NUMBER", "MTE", "NUMBER", "ODg", "NUMBER", "LTE", "NUMBER", "MDE", "NUMBER", "NTUyNTktYThmYmRjZDUwOQ", "NUMBER", "Thanks", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "die", "cla", "bot", "i", "change", "my", "github", "email", "immediate", "issue", "created", "by", "trying", "to", "throw", "out", "namespaces", "be", "that", "function", "do", "not", "have", "a", "bucket", "to", "exist", "in", "they", "be", "just", "all", "in", "one", "big", "bucket", "NUMBER", "for", "someone", "that", "wants", "to", "do", "authenticated", "listing", "of", "function", "they", "will", "have", "to", "implement", "a", "custom", "datastore", "that", "takes", "their", "namespace", "variable", "into", "account", "when", "make", "db", "queries", "we", "have", "this", "issue", "with", "apps", "now", "anyway", "and", "will", "continue", "to", "NUMBER", "this", "seems", "to", "be", "the", "plan", "anyway", "NUMBER", "not", "expecting", "to", "hear", "anything", "here", "just", "yelling", "into", "the", "void", "NUMBER", "Why", "be", "we", "remove", "namespacing", "Can", "someone", "explain", "here", "why", "we", "do", "not", "want", "to", "add", "name", "space", "as", "it", "be", "a", "valuable", "tool", "that", "would", "add", "flexibility", "utility", "and", "be", "something", "that", "would", "greatly", "benefit", "anyone", "that", "wants", "to", "add", "auth", "to", "fn", "for", "their", "own", "deployments", "NUMBER", "hibooboo", "NUMBER", "i", "wonder", "if", "my", "email", "change", "breaks", "the", "cla", "bot", "yay", "edge", "cases", "It", "be", "looking", "to", "see", "that", "you", "sign", "your", "commit", "with", "an", "email", "that", "be", "your", "primary", "email", "I", "believe", "NUMBER", "I", "can", "make", "it", "check", "all", "emails", "that", "it", "can", "see", "on", "you", "NUMBER", "Not", "sure", "why", "it", "be", "saying", "you", "did", "not", "sign", "it", "NUMBER", "Do", "you", "want", "me", "to", "investigate", "it", "kinda", "confused", "why", "it", "s", "not", "work", "today", "worked", "yesterday", "with", "email", "change", "in", "place", "NUMBER", "will", "see", "if", "i", "can", "finagle", "it", "NUMBER", "K", "let", "me", "know", "NUMBER", "hibooboo", "NUMBER", "I", "think", "the", "CLA", "bot", "be", "use", "the", "earliest", "commit", "s", "author", "to", "check", "their", "email", "for", "the", "CLA", "bot", "and", "not", "the", "last", "one", "so", "for", "stuff", "like", "this", "even", "if", "I", "add", "commit", "on", "it", "won", "t", "help", "and", "for", "this", "one", "since", "it", "s", "a", "collab", "it", "s", "kinda", "mean", "to", "rebase", "NUMBER", "not", "a", "big", "deal", "I", "guess", "if", "it", "s", "easy", "to", "change", "it", "to", "the", "last", "one", "it", "may", "be", "worth", "it", "I", "m", "likely", "a", "rare", "case", "though", "NUMBER", "NUMBER", "points", "that", "came", "from", "recent", "slack", "discussions", "it", "may", "make", "sense", "to", "hang", "function", "off", "of", "apps", "inside", "of", "a", "trigger", "to", "help", "users", "manage", "function", "NUMBER", "the", "downsides", "be", "this", "hides", "function", "inside", "of", "an", "app", "and", "if", "we", "end", "up", "with", "a", "function", "hub", "like", "thing", "then", "this", "be", "more", "challenging", "we", "would", "presumably", "need", "another", "way", "to", "address", "function", "NUMBER", "the", "upshot", "be", "a", "user", "makes", "a", "function", "app", "and", "then", "creates", "function", "and", "triggers", "in", "there", "NUMBER", "additionally", "permissions", "can", "be", "attenuated", "better", "on", "that", "and", "conversely", "it", "s", "harder", "to", "share", "function", "have", "to", "re", "create", "in", "each", "app", "NUMBER", "kind", "of", "a", "composability", "vs", "easy", "UX", "thing", "NUMBER", "hanging", "calls", "logs", "off", "of", "app", "or", "function", "or", "trigger", "NUMBER", "this", "was", "an", "open", "ended", "TODO", "in", "the", "swagger", "file", "which", "didn", "t", "generate", "too", "much", "discussion", "NUMBER", "calls", "and", "logs", "be", "kind", "of", "a", "wart", "and", "we", "really", "want", "a", "pure", "runner", "like", "module", "that", "only", "execs", "and", "returns", "the", "output", "logs", "call", "metadata", "NUMBER", "this", "was", "not", "easy", "to", "rip", "out", "last", "time", "I", "tried", "with", "our", "agent", "variations", "aside", "from", "that", "we", "still", "haven", "t", "really", "come", "to", "a", "conclusion", "on", "what", "we", "want", "this", "api", "to", "look", "like", "for", "OSS", "while", "be", "an", "interface", "that", "a", "larger", "scale", "deployment", "could", "presumably", "implement", "without", "much", "issue", "NUMBER", "NUMBER", "points", "we", "could", "address", "resources", "by", "ID", "instead", "of", "name", "everywhere", "NUMBER", "we", "seem", "to", "have", "be", "use", "name", "for", "some", "time", "this", "be", "a", "good", "place", "to", "change", "that", "if", "we", "want", "NUMBER", "github", "docker", "allow", "use", "name", "and", "then", "the", "underlying", "resource", "have", "ID", "I", "think", "this", "be", "what", "we", "were", "going", "for", "but", "we", "hadn", "t", "fully", "gotten", "there", "yet", "NUMBER", "it", "be", "a", "bit", "tedious", "to", "implement", "the", "backend", "with", "the", "name", "stuff", "it", "s", "really", "hairy", "see", "app", "id", "but", "it", "do", "look", "nice", "to", "have", "name", "in", "the", "UI", "and", "allows", "us", "to", "use", "PUT", "instead", "of", "POST", "for", "resources", "as", "was", "propose", "here", "NUMBER", "Thoughts", "on", "the", "three", "points", "NUMBER", "I", "think", "Function", "inside", "App", "makes", "a", "lot", "of", "sense", "giving", "a", "top", "level", "abstraction", "to", "hang", "auth", "and", "general", "metadata", "off", "NUMBER", "I", "m", "wondering", "if", "Triggers", "should", "have", "an", "App", "ID", "as", "well", "so", "it", "s", "easy", "to", "traverse", "the", "domain", "from", "app", "directly", "to", "Trigger", "NUMBER", "It", "might", "make", "more", "sense", "to", "go", "that", "way", "for", "certain", "use", "cases", "NUMBER", "Reluctant", "to", "say", "much", "on", "FnHub", "not", "that", "familiar", "with", "the", "idea", "but", "if", "a", "user", "takes", "makes", "use", "of", "another", "user", "s", "function", "it", "seems", "reasonable", "that", "an", "entry", "function", "row", "would", "need", "to", "exist", "in", "their", "domain", "for", "calls", "and", "triggers", "to", "reference", "if", "nothing", "else", "NUMBER", "The", "FnHub", "from", "this", "perspective", "more", "provide", "somewhere", "to", "clone", "settings", "from", "rather", "than", "a", "reusable", "execution", "environment", "NUMBER", "NUMBER", "Uncertain", "what", "pure", "means", "here", "but", "I", "think", "the", "Log", "stderr", "from", "container", "should", "exist", "within", "a", "Call", "object", "referenced", "on", "a", "separate", "route", "via", "the", "api", "NUMBER", "NUMBER", "I", "think", "there", "s", "a", "mixing", "of", "API", "and", "Domain", "Model", "thinking", "here", "NUMBER", "The", "Domain", "Model", "table", "design", "should", "be", "completely", "linked", "via", "ID", "s", "imo", "NUMBER", "The", "API", "though", "can", "expose", "the", "entities", "via", "names", "if", "that", "s", "deemed", "valuable", "NUMBER", "I", "m", "not", "sure", "why", "that", "be", "particularly", "valuable", "here", "though", "NUMBER", "This", "be", "not", "an", "API", "users", "will", "be", "interacting", "with", "all", "the", "usage", "comes", "via", "the", "CLI", "NUMBER", "The", "API", "can", "therefore", "be", "machine", "orientated", "i", "NUMBER", "e", "NUMBER", "ID", "s", "use", "throughout", "the", "routes", "support", "query", "params", "for", "name", "NUMBER", "If", "there", "be", "a", "strong", "case", "for", "human", "friendly", "urls", "then", "perhaps", "we", "could", "support", "both", "with", "different", "routes", "or", "differentiate", "between", "ID", "and", "name", "usage", "ensuring", "no", "one", "could", "create", "a", "name", "that", "looks", "like", "an", "ID", "and", "regexp", "to", "discover", "which", "one", "be", "in", "use", "NUMBER", "Maybe", "there", "s", "a", "use", "case", "I", "m", "not", "yet", "familiar", "with", "here", "NUMBER", "I", "think", "Function", "Version", "needs", "a", "solution", "NUMBER", "A", "call", "has", "to", "reference", "both", "the", "exact", "code", "that", "executed", "it", "and", "the", "configuration", "it", "was", "executed", "with", "in", "order", "to", "be", "of", "any", "use", "NUMBER", "See", "the", "Docker", "Images", "table", "in", "my", "forks", "ERD", "for", "an", "idea", "in", "this", "area", "NUMBER", "Not", "entirely", "sure", "that", "be", "the", "way", "to", "go", "mind", "might", "want", "something", "more", "generic", "NUMBER", "Surfacing", "swagger", "TODO", "s", "TODO", "pagination", "should", "only", "list", "resource", "names", "or", "the", "entire", "resource", "Paged", "resources", "normally", "return", "the", "entire", "resource", "NUMBER", "TODO", "triggers", "and", "function", "OR", "trigs", "and", "funcs", "I", "think", "apps", "fns", "triggers", "NUMBER", "Bikeshedding", "alert", "TODO", "version", "change", "v", "NUMBER", "No", "NUMBER", "My", "understanding", "be", "that", "v", "NUMBER", "has", "not", "be", "release", "really", "we", "should", "go", "for", "NUMBER", "or", "something", "saving", "one", "until", "we", "re", "confident", "NUMBER", "TODO", "remove", "stats", "from", "call", "They", "seem", "useful", "but", "need", "to", "be", "optional", "NUMBER", "I", "don", "t", "think", "calls", "should", "link", "to", "app_id", "more", "to", "fn_id", "NUMBER", "They", "must", "reference", "an", "exact", "code", "version", "docker", "coordinates", "image", "sha", "config", "somehow", "NUMBER", "TODO", "amend", "log", "api", "if", "we", "have", "app", "logs", "we", "could", "tail", "logs", "on", "an", "app", "or", "trig", "and", "have", "point", "lookup", "for", "call", "still", "I", "think", "log", "should", "live", "under", "call", "NUMBER", "Something", "like", "apps", "id", "fns", "id", "calls", "id", "log", "TODO", "annotations", "config", "event", "NUMBER", "extensions", "redundant", "to", "a", "degree", "naming", "confusing", "discuss", "NUMBER", "Annotations", "and", "Config", "be", "different", "entities", "imo", "NUMBER", "Annotations", "don", "t", "influence", "execution", "they", "be", "labels", "NUMBER", "Config", "do", "influence", "the", "execution", "be", "set", "as", "env", "vars", "NUMBER", "Not", "sure", "what", "event", "NUMBER", "extensions", "be", "but", "they", "can", "t", "really", "be", "config", "event", "data", "shouldn", "t", "cause", "a", "new", "function", "instance", "to", "be", "instantiated", "to", "execute", "it", "for", "example", "NUMBER", "TODO", "add", "run", "API", "to", "swagger", "doc", "only", "covers", "API", "module", "atm", "I", "think", "this", "can", "be", "remove", "in", "favour", "of", "triggering", "triggers", "NUMBER", "TODO", "should", "trigger", "have", "an", "enable", "field", "to", "easily", "toggle", "on", "and", "off", "via", "API", "Yes", "well", "rather", "it", "should", "have", "a", "status", "field", "NUMBER", "One", "value", "of", "which", "can", "be", "enable", "NUMBER", "TODO", "let", "s", "punt", "on", "add", "a", "row", "for", "FuncVersions", "with", "snapshot", "of", "each", "func", "version", "just", "a", "string", "field", "for", "now", "NUMBER", "I", "think", "this", "be", "such", "a", "crucial", "aspect", "see", "above", "and", "we", "should", "answer", "this", "at", "this", "stage", "NUMBER", "TODO", "put", "body", "and", "response", "objects", "have", "different", "required", "field", "etc", "make", "NUMBER", "objects", "Yes", "NUMBER", "The", "extra", "field", "be", "system", "determined", "I", "guess", "NUMBER", "Is", "there", "an", "extension", "mechanism", "in", "swagger", "LINK", "models", "inheritance", "and", "polymorphism", "TODO", "change", "all", "params", "to", "ref", "s", "Don", "t", "really", "know", "what", "the", "norm", "be", "in", "Swagger", "but", "it", "looks", "sensible", "NUMBER", "TODO", "orcl", "NUMBER", "DELETE", "success", "Seems", "viable", "although", "I", "personally", "don", "t", "like", "deletes", "at", "all", "and", "would", "prefer", "to", "use", "Status", "Inactive", "NUMBER", "Actually", "deleting", "data", "makes", "auditing", "hard", "NUMBER", "TODO", "orcl", "NUMBER", "should", "we", "define", "this", "to", "delineate", "w", "NUMBER", "even", "tho", "we", "don", "t", "have", "auth", "by", "default", "This", "be", "tricky", "as", "a", "NUMBER", "indicates", "that", "a", "resource", "exists", "and", "thereby", "can", "leak", "ids", "NUMBER", "Often", "I", "ve", "simplified", "to", "not", "NUMBER", "and", "just", "use", "NUMBER", "s", "for", "unauth", "d", "as", "well", "NUMBER", "Potential", "bikeshed", "NUMBER", "Thank", "you", "for", "your", "submission", "On", "hierarchy", "setting", "up", "for", "a", "Fn", "Hub", "sort", "of", "model", "it", "s", "only", "a", "soft", "opinon", "but", "I", "guess", "my", "brain", "s", "preference", "for", "disentanglement", "be", "to", "keep", "a", "strictly", "hierarchical", "domain", "model", "for", "now", "Understand", "the", "argument", "and", "how", "this", "would", "support", "a", "FnHub", "sort", "of", "thing", "but", "add", "explicit", "indirection", "to", "the", "domain", "model", "makes", "a", "bunch", "of", "things", "hard", "that", "weren", "t", "before", "notably", "work", "out", "when", "how", "change", "be", "propagaged", "how", "deletions", "work", "and", "ar", "report", "etc", "NUMBER", "It", "s", "probably", "a", "bit", "pansy", "assed", "but", "I", "m", "all", "in", "favour", "of", "worring", "about", "sharing", "ownership", "of", "function", "and", "triggers", "some", "other", "time", "NUMBER", "My", "mental", "model", "here", "largely", "stands", "at", "An", "app", "be", "a", "unit", "of", "deployment", "control", "permission", "wise", "and", "configuration", "A", "function", "be", "a", "unit", "of", "functinoality", "within", "an", "app", "associated", "to", "it", "s", "causes", "by", "zero", "or", "more", "triggers", "NUMBER", "On", "calls", "Logs", "My", "intutition", "be", "that", "they", "belong", "only", "to", "function", "and", "not", "triggers", "as", "In", "when", "I", "list", "calls", "logs", "for", "a", "function", "I", "see", "everything", "irrespective", "of", "the", "trigger", "but", "perhaps", "the", "trigger", "identifier", "be", "encoded", "in", "or", "attached", "as", "metadata", "to", "both", "as", "a", "cause", "or", "something", "maybe", "something", "in", "the", "CloudEvents", "model", "fn", "calls", "list", "myapp", "myfn", "time", "trigger", "status", "duration", "NUMBER", "NUMBER", "NUMBER", "httpRoute", "OK", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "TAG", "OK", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "queue", "NUMBER", "FAILED", "NUMBER", "ms", "And", "for", "logs", "something", "morally", "equivalent", "to", "a", "logger", "field", "for", "the", "same", "NUMBER", "Because", "I", "want", "to", "to", "be", "able", "to", "call", "a", "function", "independently", "of", "a", "defined", "trigger", "in", "the", "Fn", "model", "e", "NUMBER", "g", "NUMBER", "via", "e", "NUMBER", "g", "NUMBER", "a", "debug", "call", "over", "an", "authenticated", "API", "as", "a", "feature", "later", "this", "doesn", "t", "have", "an", "associated", "trigger", "unless", "we", "create", "a", "synthetic", "one", "e", "NUMBER", "g", "NUMBER", "I", "do", "an", "Fn", "Call", "on", "a", "function", "with", "no", "triggers", "or", "via", "an", "external", "integration", "that", "be", "provide", "triggers", "for", "us", "but", "integrating", "directly", "into", "Fn", "i", "NUMBER", "e", "NUMBER", "we", "just", "do", "the", "callin", "Calls", "Logs", "arguablly", "could", "persist", "beyond", "the", "lifecycle", "of", "triggers", "delete", "trigger", "still", "want", "to", "see", "account", "for", "stuff", "I", "don", "t", "care", "if", "I", "can", "fetch", "calls", "logs", "per", "app", "at", "least", "not", "in", "CLI", "for", "instance", "If", "I", "m", "exporting", "my", "logs", "to", "a", "logging", "service", "then", "I", "want", "my", "app", "Identifier", "encoded", "as", "a", "field", "in", "my", "logs", "NUMBER", "FWIW", "Off", "the", "top", "of", "my", "head", "my", "spidey", "sense", "says", "that", "the", "modal", "case", "will", "be", "people", "dealing", "with", "single", "apps", "single", "function", "single", "triggers", "and", "that", "we", "have", "to", "make", "sure", "that", "the", "payoff", "in", "the", "UX", "be", "when", "that", "be", "the", "case", "On", "names", "IDs", "Pretty", "sure", "we", "need", "human", "readable", "typable", "identifiers", "for", "function", "and", "probably", "triggers", "here", "unique", "in", "their", "context", "NUMBER", "If", "it", "s", "necessary", "for", "mechanical", "IDs", "then", "we", "should", "have", "them", "as", "well", "not", "instead", "of", "NUMBER", "sorry", "didn", "t", "make", "it", "to", "this", "today", "thanks", "both", "for", "your", "input", "i", "have", "no", "meetings", "tomorrow", "and", "short", "of", "divine", "meeting", "intervention", "the", "opposite", "of", "what", "put", "all", "these", "meetings", "there", "i", "will", "get", "to", "this", "first", "thing", "zootalures", "re", "names", "ids", "it", "s", "not", "so", "much", "that", "we", "don", "t", "need", "them", "it", "s", "whether", "they", "belong", "in", "the", "api", "at", "the", "route", "level", "NUMBER", "Name", "as", "a", "query", "param", "on", "fns", "would", "be", "how", "people", "find", "fns", "by", "name", "NUMBER", "My", "suggestion", "be", "people", "aren", "t", "going", "to", "be", "manually", "typing", "these", "urls", "or", "really", "sharing", "them", "NUMBER", "It", "ll", "all", "go", "via", "the", "cli", "which", "can", "resolve", "sort", "such", "things", "out", "NUMBER", "My", "suggestion", "be", "people", "aren", "t", "going", "to", "be", "manually", "typing", "these", "urls", "or", "really", "sharing", "them", "NUMBER", "It", "ll", "all", "go", "via", "the", "cli", "which", "can", "resolve", "sort", "such", "things", "out", "NUMBER", "the", "main", "thing", "be", "that", "in", "a", "sense", "we", "re", "exposing", "webhooks", "and", "naming", "these", "can", "be", "preferable", "for", "management", "where", "most", "usage", "be", "not", "through", "the", "cli", "NUMBER", "this", "entails", "every", "resource", "in", "that", "chain", "be", "addressable", "by", "name", "instead", "of", "id", "app", "and", "trigger", "previously", "app", "and", "route", "NUMBER", "it", "s", "possible", "to", "have", "a", "mix", "but", "it", "s", "nice", "to", "be", "uniform", "and", "not", "have", "to", "look", "up", "app", "names", "and", "such", "as", "noted", "a", "regex", "mix", "of", "id", "and", "name", "on", "resources", "be", "hairy", "NUMBER", "as", "a", "side", "note", "it", "s", "be", "nice", "ux", "wise", "in", "the", "cli", "and", "such", "to", "address", "things", "by", "name", "instead", "of", "having", "to", "copy", "and", "paste", "various", "ids", "which", "be", "something", "we", "could", "fix", "up", "but", "name", "in", "this", "case", "be", "going", "to", "have", "to", "be", "unique", "anyway", "NUMBER", "in", "any", "case", "we", "can", "use", "ids", "in", "the", "backend", "while", "having", "the", "api", "use", "names", "which", "be", "the", "plan", "here", "at", "least", "for", "now", "definitely", "with", "an", "eye", "on", "function", "hub", "like", "thing", "for", "function", "and", "for", "a", "decent", "out", "of", "the", "box", "experience", "for", "triggers", "without", "having", "to", "set", "up", "API", "gateway", "routes", "and", "such", "to", "get", "nice", "urls", "NUMBER", "TODO", "pagination", "should", "only", "list", "resource", "names", "or", "the", "entire", "resource", "TODO", "version", "change", "v", "NUMBER", "TODO", "annotations", "config", "event", "NUMBER", "extensions", "redundant", "to", "a", "degree", "naming", "confusing", "discuss", "NUMBER", "address", "LINK", "I", "think", "apps", "fns", "triggers", "NUMBER", "Bikeshedding", "alert", "fns", "and", "triggers", "seems", "pretty", "cool", "to", "me", "NUMBER", "like", "fn", "use", "fn", "terminology", "downside", "be", "when", "someone", "says", "fn", "we", "have", "to", "clarify", "whether", "it", "s", "a", "func", "or", "a", "server", "service", "they", "re", "talking", "about", "i", "still", "like", "it", "NUMBER", "this", "be", "an", "easy", "rename", "I", "have", "most", "of", "this", "plumbed", "with", "func", "but", "would", "be", "easy", "to", "change", "hopefully", "posting", "soon", "NUMBER", "TODO", "remove", "stats", "from", "call", "we", "re", "sending", "to", "prometheus", "we", "can", "stop", "storing", "them", "pretty", "easily", "and", "still", "have", "a", "handle", "on", "them", "NUMBER", "this", "be", "easy", "too", "has", "come", "up", "NUMBER", "TODO", "amend", "log", "api", "if", "we", "have", "app", "logs", "we", "could", "tail", "logs", "on", "an", "app", "or", "trig", "and", "have", "point", "lookup", "for", "call", "still", "at", "present", "you", "can", "list", "calls", "on", "an", "app", "and", "filter", "by", "path", "basically", "giving", "this", "functionality", "NUMBER", "assuming", "we", "have", "listing", "calls", "on", "an", "app", "with", "ability", "to", "filter", "by", "function", "or", "trigger", "this", "allows", "listing", "across", "triggers", "funcs", "which", "would", "be", "hindered", "by", "nesting", "them", "deeper", "in", "the", "url", "or", "we", "d", "need", "to", "add", "an", "additional", "endpoint", "for", "this", "if", "we", "do", "end", "up", "wanting", "it", "NUMBER", "I", "think", "Function", "Version", "needs", "a", "solution", "NUMBER", "let", "s", "spec", "this", "out", "I", "agree", "we", "really", "should", "have", "something", "robust", "soon", "NUMBER", "we", "can", "figure", "out", "if", "we", "need", "to", "add", "it", "here", "or", "if", "we", "can", "add", "it", "in", "a", "month", "but", "we", "can", "spec", "it", "out", "now", "to", "figure", "that", "out", "NUMBER", "Would", "you", "like", "to", "spec", "out", "the", "api", "bits", "for", "this", "on", "top", "of", "a", "function", "Would", "be", "really", "great", "to", "be", "able", "to", "list", "all", "version", "of", "a", "function", "with", "the", "full", "configuration", "and", "we", "could", "also", "use", "this", "to", "enforce", "docker", "image", "shas", "at", "runtime", "too", "we", "can", "have", "immutable", "version", "basically", "if", "we", "want", "this", "be", "discussed", "further", "up", "thread", "as", "well", "NUMBER", "TODO", "add", "run", "API", "to", "swagger", "doc", "only", "covers", "API", "module", "atm", "it", "s", "not", "very", "clearly", "defined", "but", "this", "be", "basically", "the", "r", "app", "route", "endpoint", "we", "have", "now", "which", "be", "not", "in", "the", "swagger", "NUMBER", "this", "one", "we", "can", "kinda", "punt", "on", "anyone", "bigger", "fish", "NUMBER", "it", "s", "only", "a", "soft", "opinon", "but", "I", "guess", "my", "brain", "s", "preference", "for", "disentanglement", "be", "to", "keep", "a", "strictly", "hierarchical", "domain", "model", "for", "now", "yea", "we", "can", "pretty", "easily", "add", "a", "rooted", "funcs", "and", "move", "them", "up", "if", "we", "want", "or", "add", "a", "registry", "api", "separately", "use", "function", "ids", "to", "query", "into", "app", "function", "later", "that", "s", "true", "NUMBER", "having", "function", "rooted", "seems", "a", "little", "odd", "yea", "this", "made", "more", "sense", "when", "it", "was", "ns", "ns", "funcs", "func", "instead", "of", "rooted", "funcs", "NUMBER", "think", "we", "should", "roll", "with", "moving", "function", "into", "apps", "seems", "to", "be", "agreement", "on", "that", "some", "function", "seem", "useful", "across", "apps", "i", "NUMBER", "e", "NUMBER", "outside", "of", "an", "app", "context", "e", "NUMBER", "g", "NUMBER", "an", "image", "resize", "func", "be", "generally", "useful", "outside", "the", "context", "of", "an", "app", "again", "this", "kinda", "made", "more", "sense", "with", "namespaces", "I", "think", "NUMBER", "anyway", "on", "with", "app", "function", "NUMBER", "My", "intutition", "be", "that", "they", "belong", "only", "to", "function", "and", "not", "triggers", "kinda", "discussed", "today", "IRL", "textifying", "NUMBER", "the", "original", "intent", "of", "the", "proposal", "here", "which", "be", "mutable", "was", "that", "a", "trigger", "be", "the", "way", "to", "invoke", "a", "function", "and", "thus", "triggers", "have", "executions", "with", "additional", "configurations", "that", "may", "not", "make", "sense", "solely", "in", "the", "context", "of", "a", "function", "NUMBER", "our", "thinking", "was", "something", "like", "a", "docker", "image", "be", "to", "a", "docker", "container", "as", "a", "function", "be", "to", "a", "trigger", "i", "NUMBER", "e", "NUMBER", "a", "trigger", "be", "an", "execution", "of", "a", "function", "and", "the", "analogy", "kinda", "makes", "sense", "in", "that", "docker", "images", "don", "t", "have", "logs", "container", "do", "in", "the", "same", "sense", "that", "a", "function", "doesn", "t", "have", "logs", "a", "trigger", "do", "NUMBER", "the", "oddity", "here", "be", "that", "it", "doesn", "t", "seem", "like", "trigger", "provides", "very", "much", "value", "other", "than", "be", "able", "to", "add", "additional", "configuration", "and", "a", "case", "could", "likely", "be", "made", "to", "get", "rid", "of", "the", "trigger", "and", "just", "invoke", "function", "directly", "kinda", "get", "that", "NUMBER", "if", "we", "don", "t", "ever", "plan", "to", "let", "a", "trigger", "invoke", "multiple", "function", "it", "makes", "sense", "but", "if", "we", "add", "the", "trigger", "construct", "here", "we", "can", "leverage", "it", "to", "do", "that", "in", "addition", "to", "be", "able", "to", "configure", "NUMBER", "party", "function", "without", "having", "to", "copy", "them", "maybe", "other", "stuff", "NUMBER", "directly", "to", "the", "point", "about", "calls", "logs", "littered", "various", "places", "if", "we", "leave", "them", "on", "app", "we", "can", "add", "filters", "for", "function", "or", "trigger", "etc", "and", "they", "exist", "on", "an", "app", "i", "NUMBER", "e", "NUMBER", "if", "you", "nuke", "a", "function", "there", "s", "still", "a", "log", "on", "the", "app", "for", "it", "Pretty", "sure", "we", "need", "human", "readable", "typable", "identifiers", "for", "function", "and", "probably", "triggers", "here", "unique", "in", "their", "context", "NUMBER", "If", "it", "s", "necessary", "for", "mechanical", "IDs", "then", "we", "should", "have", "them", "as", "well", "not", "instead", "of", "NUMBER", "NUMBER", "the", "app", "id", "name", "thing", "has", "be", "a", "pain", "was", "thinking", "about", "carving", "it", "out", "hybrid", "was", "the", "big", "bugaboo", "there", "and", "any", "other", "middleware", "auth", "NUMBER", "if", "we", "say", "don", "t", "allow", "renaming", "or", "deleting", "then", "we", "take", "care", "of", "some", "issue", "there", "NUMBER", "i", "m", "not", "sure", "what", "to", "do", "about", "this", "situation", "there", "s", "not", "enough", "zoloft", "to", "fix", "this", "one", "NUMBER", "think", "we", "re", "converging", "on", "a", "few", "things", "like", "app", "function", "thanks", "for", "the", "feedback", "here", "NUMBER", "closing", "to", "continue", "on", "NUMBER", "free", "of", "these", "load", "times", "and", "context", "NUMBER", "will", "review", "this", "for", "anything", "we", "may", "have", "miss", "and", "swoop", "it", "up", "For", "example", "image", "or", "audio", "processing", "NUMBER", "Once", "content", "type", "can", "be", "defined", "as", "part", "of", "a", "function", "CLI", "NUMBER", "LINK", "and", "communicated", "correctly", "it", "becomes", "possible", "to", "send", "a", "binary", "payload", "to", "a", "function", "NUMBER", "To", "support", "this", "however", "change", "would", "be", "needed", "in", "the", "various", "FDKs", "and", "the", "Fn", "Server", "itself", "NUMBER", "Given", "the", "JSON", "nature", "of", "the", "protocol", "between", "server", "and", "function", "container", "binary", "data", "as", "it", "stands", "can", "t", "be", "transmitted", "and", "thus", "needs", "to", "be", "encoded", "in", "some", "way", "probably", "Base", "NUMBER", "This", "then", "necessitates", "the", "need", "for", "an", "extension", "flag", "to", "the", "JSON", "protocol", "to", "say", "what", "the", "encoding", "of", "the", "request", "payload", "be", "support", "for", "this", "would", "need", "to", "be", "add", "to", "the", "various", "FDKs", "first", "and", "once", "those", "be", "rolled", "out", "the", "corresponding", "change", "to", "the", "Fn", "Server", "can", "be", "made", "NUMBER", "Fn", "Server", "For", "Fn", "Server", "to", "decide", "whether", "or", "not", "to", "set", "a", "isBase", "NUMBER", "Encoded", "flag", "in", "the", "JSON", "protocol", "the", "server", "needs", "to", "know", "whether", "the", "payload", "needs", "to", "be", "encoded", "or", "not", "NUMBER", "The", "simplest", "way", "be", "to", "check", "the", "Content", "Type", "header", "in", "the", "incoming", "request", "but", "the", "question", "be", "whether", "this", "can", "be", "relied", "upon", "to", "be", "accurate", "for", "instance", "nothing", "stops", "someone", "specify", "text", "plain", "as", "a", "Content", "Type", "but", "actually", "sending", "some", "application", "octet", "stream", "data", "across", "potentially", "leaving", "the", "server", "trying", "to", "json", "encode", "binary", "data", "which", "may", "be", "problematic", "NUMBER", "FDKs", "The", "support", "FDKs", "need", "to", "be", "extend", "to", "respect", "the", "isBase", "NUMBER", "Encoded", "flag", "and", "if", "detected", "simply", "decode", "the", "payload", "before", "passing", "the", "request", "to", "the", "function", "handler", "NUMBER", "These", "should", "be", "completed", "and", "delivered", "first", "so", "that", "binary", "ready", "function", "FDKs", "be", "already", "in", "place", "before", "the", "server", "be", "update", "NUMBER", "Why", "can", "t", "the", "function", "get", "the", "binary", "data", "image", "or", "a", "video", "file", "from", "external", "object", "store", "in", "the", "short", "term", "re", "reading", "this", "issue", "my", "comment", "didn", "t", "indicate", "that", "this", "be", "possible", "today", "use", "the", "http", "format", "and", "my", "comment", "was", "more", "guided", "towards", "going", "forward", "but", "I", "think", "our", "answer", "right", "now", "be", "OK", "most", "FDKs", "support", "http", "format", "today", "NUMBER", "This", "really", "came", "into", "be", "on", "the", "assumption", "that", "http", "was", "going", "away", "and", "wasn", "t", "support", "everywhere", "either", "e", "NUMBER", "g", "NUMBER", "Python", "FDK", "I", "think", "NUMBER", "opened", "NUMBER", "to", "resolve", "for", "the", "interim", "NUMBER", "but", "we", "can", "have", "a", "more", "illustrious", "convo", "around", "what", "docker", "auth", "should", "look", "like", "here", "NUMBER", "have", "some", "food", "for", "thought", "question", "below", "It", "s", "a", "UX", "product", "question", "really", "do", "we", "want", "users", "to", "log", "in", "to", "an", "app", "so", "they", "don", "t", "reuse", "login", "creds", "how", "do", "we", "or", "do", "we", "store", "these", "should", "we", "leave", "it", "to", "where", "operators", "have", "to", "configure", "fn", "for", "a", "registry", "so", "that", "operators", "can", "trust", "the", "images", "they", "re", "run", "be", "from", "only", "particular", "registries", "etc", "NUMBER", "kind", "of", "makes", "sense", "to", "put", "on", "namespace", "maybe", "NUMBER", "i", "m", "kind", "of", "one", "foot", "in", "the", "boat", "that", "operators", "should", "have", "to", "set", "up", "registry", "creds", "beforehand", "though", "as", "it", "be", "now", "apart", "from", "absolving", "us", "of", "all", "risks", "of", "having", "to", "store", "registry", "credentials", "for", "any", "registry", "as", "an", "operator", "it", "would", "also", "mean", "operators", "could", "likely", "restrict", "the", "domain", "of", "images", "that", "operate", "on", "their", "cluster", "though", "i", "suppose", "this", "could", "be", "do", "in", "a", "number", "of", "ways", "NUMBER", "NUMBER", "on", "be", "able", "to", "configure", "the", "registry", "at", "the", "app", "and", "or", "function", "level", "NUMBER", "i", "think", "NUMBER", "and", "NUMBER", "close", "this", "one", "thanks", "System", "test", "for", "hot", "call", "function", "in", "json", "and", "http", "format", "This", "be", "a", "WIP", "change", "at", "the", "moment", "the", "test", "be", "fail", "as", "I", "don", "t", "have", "push", "the", "two", "new", "images", "use", "in", "system", "test", "NUMBER", "reclaro", "still", "WIP", "here", "rdallman", "I", "be", "not", "work", "on", "it", "right", "now", "I", "might", "have", "some", "time", "in", "the", "future", "no", "ETA", "at", "the", "moment", "be", "that", "ok", "for", "you", "no", "worries", "up", "to", "you", "can", "leave", "it", "open", "if", "it", "s", "still", "wip", "CLosing", "as", "we", "delete", "the", "system", "test", "NUMBER", "This", "add", "CloudEvent", "format", "as", "I", "O", "format", "NUMBER", "This", "now", "has", "support", "for", "ingestion", "of", "CloudEvents", "as", "input", "via", "HTTP", "as", "well", "as", "the", "function", "I", "O", "format", "NUMBER", "This", "now", "has", "support", "for", "ingestion", "of", "CloudEvents", "as", "input", "via", "HTTP", "as", "well", "as", "the", "function", "I", "O", "format", "NUMBER", "LINK", "diff", "de", "NUMBER", "fddaf", "NUMBER", "c", "NUMBER", "c", "NUMBER", "bca", "NUMBER", "c", "NUMBER", "ba", "NUMBER", "Ehh", "not", "sure", "why", "this", "build", "be", "fail", "FAIL", "TestDatastore", "apps", "NUMBER", "NUMBER", "s", "sql_test", "NUMBER", "go", "NUMBER", "this", "authentication", "plugin", "be", "not", "support", "FAIL", "TestDatastore", "routes", "NUMBER", "NUMBER", "s", "sql_test", "NUMBER", "go", "NUMBER", "this", "authentication", "plugin", "be", "not", "support", "test", "NUMBER", "go", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "couldn", "t", "ping", "db", "error", "this", "authentication", "plugin", "be", "not", "support", "url", "root", "root", "tcp", "localhost", "NUMBER", "funcs", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "couldn", "t", "ping", "db", "error", "this", "authentication", "plugin", "be", "not", "support", "url", "root", "root", "tcp", "localhost", "NUMBER", "funcs", "sql_test", "NUMBER", "go", "NUMBER", "this", "authentication", "plugin", "be", "not", "support", "Just", "did", "a", "rebuild", "NUMBER", "All", "that", "stuff", "looks", "so", "much", "like", "all", "the", "crap", "we", "ve", "be", "dealing", "with", "use", "different", "formats", "NUMBER", "The", "part", "I", "find", "strange", "though", "be", "that", "if", "you", "have", "to", "set", "all", "the", "headers", "anyways", "why", "not", "just", "pass", "the", "event", "in", "the", "JSON", "event", "format", "Anyways", "I", "ll", "change", "the", "content", "type", "to", "Content", "Type", "application", "cloudevents", "json", "charset", "UTF", "NUMBER", "good", "find", "NUMBER", "close", "for", "NUMBER", "Followed", "example", "Running", "load", "balanced", "fn", "against", "a", "pool", "of", "runners", "LINK", "_pools", "NUMBER", "md", "and", "created", "NUMBER", "runners", "api", "and", "lb", "servers", "NUMBER", "When", "executing", "an", "async", "function", "call", "the", "lb", "exits", "with", "the", "following", "error", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "fatal", "msg", "Enqueue", "not", "implement", "NUMBER", "Panicking", "NUMBER", "Synchronous", "call", "succeeds", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Call", "finished", "successfully", "NUMBER", "CBAH", "NUMBER", "F", "NUMBER", "NG", "NUMBER", "G", "NUMBER", "RZJ", "NUMBER", "Please", "advise", "Trying", "to", "use", "the", "curl", "to", "update", "a", "function", "doesn", "t", "work", "NUMBER", "The", "following", "command", "fail", "curl", "H", "Content", "Type", "application", "json", "X", "POST", "d", "route", "memory", "NUMBER", "cpus", "NUMBER", "type", "async", "LINK", "async", "with", "the", "following", "error", "error", "message", "Path", "not", "find", "v", "NUMBER", "apps", "myapp", "routes", "hello", "async", "When", "I", "put", "the", "same", "link", "in", "the", "browser", "it", "returns", "the", "following", "message", "Successfully", "loaded", "route", "route", "app_id", "NUMBER", "CAREB", "NUMBER", "JNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "path", "hello", "async", "image", "xxx", "hello", "go", "NUMBER", "memory", "NUMBER", "cpus", "NUMBER", "m", "type", "async", "format", "default", "timeout", "NUMBER", "idle_timeout", "NUMBER", "created_at", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "updated_at", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Please", "advise", "NUMBER", "Just", "to", "make", "it", "clear", "I", "be", "trying", "to", "update", "the", "exist", "function", "NUMBER", "The", "first", "command", "be", "from", "the", "example", "provide", "at", "fn", "docs", "operate", "routes", "NUMBER", "md", "NUMBER", "The", "second", "command", "shows", "the", "path", "actually", "exists", "NUMBER", "If", "I", "understood", "you", "correctly", "the", "suggestion", "be", "to", "run", "the", "following", "command", "curl", "H", "Content", "Type", "application", "json", "X", "POST", "d", "route", "path", "hello", "async", "memory", "NUMBER", "cpus", "NUMBER", "type", "async", "LINK", "It", "returns", "the", "following", "error", "error", "message", "Missing", "route", "Image", "And", "if", "I", "do", "add", "the", "image", "and", "run", "the", "following", "command", "curl", "H", "Content", "Type", "application", "json", "X", "POST", "d", "route", "path", "hello", "async", "image", "xxx", "hello", "go", "NUMBER", "memory", "NUMBER", "cpus", "NUMBER", "type", "async", "LINK", "it", "returns", "the", "following", "error", "error", "message", "Route", "already", "exists", "Maybe", "you", "could", "provide", "an", "example", "that", "update", "the", "exist", "function", "NUMBER", "No", "error", "returned", "but", "the", "function", "was", "not", "update", "NUMBER", "My", "bad", "it", "actually", "worked", "NUMBER", "I", "had", "to", "change", "the", "path", "from", "v", "NUMBER", "apps", "myapp", "routes", "to", "v", "NUMBER", "apps", "myapp", "routes", "hello", "async", "NUMBER", "Just", "for", "others", "here", "be", "the", "example", "that", "actually", "worked", "curl", "H", "Content", "Type", "application", "json", "X", "PUT", "d", "route", "path", "hello", "async", "image", "xxx", "hello", "go", "NUMBER", "memory", "NUMBER", "cpus", "NUMBER", "type", "async", "LINK", "async", "Perhaps", "someone", "could", "change", "the", "examples", "from", "POST", "to", "PUT", "NUMBER", "Thanks", "again", "Here", "be", "the", "link", "Updating", "function", "LINK", "update", "function", "Naive", "be", "now", "a", "naive", "RR", "algorithm", "NUMBER", "Both", "now", "checks", "for", "ctx", "timeout", "in", "each", "attempt", "NUMBER", "skinowski", "still", "want", "this", "merge", "ya", "NUMBER", "weeks", "without", "an", "objection", "I", "wish", "everything", "I", "wanted", "in", "life", "went", "like", "that", "Should", "it", "be", "y", "docker", "login", "NUMBER", "though", "The", "current", "pure", "runner", "capacity", "reservation", "mechanism", "be", "faulty", "and", "will", "not", "work", "properly", "NUMBER", "Fix", "the", "following", "problem", "CapacityManager", "in", "pure", "runner", "needs", "to", "be", "remove", "NUMBER", "This", "uses", "a", "simple", "accounting", "add", "subtract", "memory", "for", "each", "request", "but", "this", "will", "fail", "because", "NUMBER", "agent", "NUMBER", "go", "internal", "resource", "tracker", "be", "not", "in", "sync", "with", "CapacityManager", "NUMBER", "Current", "code", "try", "to", "read", "internal", "resource", "tracker", "readings", "in", "an", "attempt", "to", "keep", "things", "in", "sync", "but", "this", "be", "very", "fragile", "and", "hard", "to", "maintain", "NUMBER", "There", "be", "already", "couple", "of", "bug", "in", "there", "as", "CapacityManager", "do", "not", "honor", "config", "settings", "as", "resourceTracker", "do", "NUMBER", "NUMBER", "hot", "container", "already", "spawned", "be", "not", "be", "taken", "into", "account", "NUMBER", "This", "means", "the", "system", "can", "fail", "in", "all", "sorts", "of", "ways", "and", "can", "emit", "too", "busy", "if", "pure", "runner", "spawned", "a", "ton", "of", "hot", "container", "already", "resident", "but", "still", "thinks", "it", "s", "get", "capacity", "NUMBER", "In", "other", "words", "hot", "container", "already", "waiting", "for", "request", "be", "not", "and", "cannot", "be", "tracked", "by", "pure", "runner", "NUMBER", "handleTryCall", "reservation", "call", "already", "synthesizes", "a", "Call", "object", "NUMBER", "It", "might", "as", "well", "schedule", "to", "run", "it", "NUMBER", "There", "s", "no", "need", "to", "delay", "run", "the", "Call", "NUMBER", "Therefore", "agent", "NUMBER", "Submit", "can", "be", "performed", "immediately", "instead", "of", "waiting", "for", "more", "data", "NUMBER", "This", "will", "cut", "down", "latency", "since", "if", "a", "container", "spawn", "needs", "to", "be", "initiated", "it", "needs", "to", "be", "triggered", "ASAP", "NUMBER", "modify", "FN", "agent", "to", "quick", "fail", "if", "there", "s", "no", "cpu", "memory", "capacity", "NUMBER", "This", "will", "work", "well", "with", "handleTryCall", "and", "we", "can", "safely", "remove", "the", "pure", "runner", "CapacityManager", "NUMBER", "An", "in", "progress", "work", "for", "this", "be", "pending", "approval", "NUMBER", "pure", "runner", "can", "register", "a", "listener", "to", "it", "s", "wrapped", "Agent", "to", "receive", "notifications", "on", "call", "NUMBER", "Start", "NUMBER", "Upon", "call", "NUMBER", "Start", "it", "can", "send", "ACK", "to", "the", "LB", "NUMBER", "include", "CPU", "in", "the", "pure", "runner", "code", "NUMBER", "We", "can", "use", "zero", "for", "now", "but", "we", "must", "not", "omit", "this", "for", "future", "therefore", "a", "place", "holder", "for", "it", "be", "prudent", "NUMBER", "cc", "rdallman", "kmjohansen", "I", "m", "trying", "to", "run", "with", "puppeteer", "node", "NUMBER", "js", "module", "to", "retrieve", "a", "web", "page", "use", "headless", "chrome", "It", "fail", "to", "execute", "with", "Error", "Failed", "to", "launch", "chrome", "spawn", "function", "node_modules", "puppeteer", "NUMBER", "local", "chromium", "linux", "NUMBER", "chrome", "linux", "chrome", "ENOENT", "Here", "be", "my", "code", "NUMBER", "var", "fdk", "require", "fnproject", "fdk", "const", "puppeteer", "require", "puppeteer", "fdk", "NUMBER", "handle", "function", "inp", "try", "const", "makeRequest", "async", "const", "browser", "await", "puppeteer", "NUMBER", "launch", "const", "page", "await", "browser", "NUMBER", "newPage", "await", "page", "NUMBER", "goto", "LINK", "var", "bodyHTML", "await", "page", "NUMBER", "evaluate", "document", "NUMBER", "body", "NUMBER", "innerHTML", "await", "browser", "NUMBER", "close", "return", "bodyHTML", "makeRequest", "NUMBER", "en", "result", "return", "result", "catch", "e", "return", "e", "inp", "Could", "you", "share", "your", "func", "NUMBER", "yaml", "and", "build", "process", "Are", "you", "run", "npm", "inside", "fn", "build", "or", "on", "your", "host", "if", "you", "run", "npm", "install", "prior", "to", "fn", "build", "then", "fn", "will", "use", "node_modules", "from", "your", "build", "dir", "e", "NUMBER", "g", "NUMBER", "on", "mac", "you", "may", "end", "up", "with", "inconsistent", "binary", "deps", "in", "your", "node_modules", "If", "you", "can", "try", "remove", "node_modules", "and", "run", "fn", "build", "again", "this", "will", "run", "npm", "install", "on", "linux", "inside", "the", "container", "I", "delete", "the", "node_modules", "and", "run", "fn", "build", "followed", "by", "fn", "run", "NUMBER", "It", "get", "the", "same", "error", "Here", "be", "my", "func", "NUMBER", "yaml", "name", "crawl", "version", "NUMBER", "runtime", "node", "entrypoint", "node", "func", "NUMBER", "js", "format", "json", "I", "ve", "had", "a", "look", "and", "I", "think", "I", "see", "the", "problem", "When", "I", "test", "this", "npm", "did", "install", "the", "correct", "chromium", "version", "however", "our", "node", "base", "image", "be", "based", "on", "alpine", "and", "the", "binaries", "that", "npm", "be", "pulling", "be", "not", "alpine", "compatible", "NUMBER", "There", "be", "a", "couple", "of", "options", "here", "Build", "your", "own", "docker", "image", "based", "on", "e", "NUMBER", "g", "NUMBER", "a", "debian", "node", "image", "build", "an", "alpine", "image", "including", "the", "binary", "compat", "chromium", "from", "alpine", "i", "guess", "puppeteer", "lets", "you", "specify", "the", "chromium", "binary", "i", "googled", "and", "find", "this", "as", "an", "example", "LINK", "node", "chromium", "In", "both", "cases", "you", "will", "need", "to", "put", "a", "custom", "Dockerfile", "into", "your", "function", "dir", "fn", "will", "use", "this", "in", "place", "of", "the", "defaults", "for", "reference", "the", "default", "docker", "file", "that", "fn", "uses", "for", "node", "looks", "like", "this", "FROM", "fnproject", "node", "dev", "as", "build", "stage", "WORKDIR", "function", "ADD", "package", "lock", "NUMBER", "json", "function", "ADD", "package", "NUMBER", "json", "function", "RUN", "npm", "install", "FROM", "fnproject", "node", "WORKDIR", "function", "ADD", "NUMBER", "function", "COPY", "from", "build", "stage", "function", "node_modules", "function", "node_modules", "ENTRYPOINT", "node", "func", "NUMBER", "js", "hope", "this", "helps", "What", "be", "be", "your", "base", "image", "fnproject", "node", "dev", "Can", "I", "just", "use", "your", "Dockerfile", "above", "and", "replace", "base", "image", "with", "something", "like", "node", "NUMBER", "I", "ve", "be", "on", "something", "else", "but", "now", "back", "trying", "to", "get", "this", "to", "work", "NUMBER", "I", "tried", "use", "a", "base", "image", "of", "node", "NUMBER", "or", "node", "NUMBER", "but", "it", "still", "gets", "the", "same", "error", "NUMBER", "Dockerfile", "looks", "like", "this", "NUMBER", "Is", "there", "something", "else", "I", "need", "FROM", "node", "NUMBER", "as", "build", "stage", "WORKDIR", "function", "ADD", "package", "lock", "NUMBER", "json", "function", "ADD", "package", "NUMBER", "json", "function", "RUN", "npm", "install", "FROM", "fnproject", "node", "WORKDIR", "function", "ADD", "NUMBER", "function", "COPY", "from", "build", "stage", "function", "node_modules", "function", "node_modules", "ENTRYPOINT", "node", "func", "NUMBER", "js", "I", "was", "able", "to", "get", "headless", "chrome", "to", "start", "with", "the", "Dockerfile", "below", "NUMBER", "I", "m", "get", "other", "error", "run", "it", "though", "and", "be", "struggling", "to", "debug", "it", "NUMBER", "It", "runs", "in", "node", "outside", "of", "FN", "function", "NUMBER", "Where", "do", "the", "console", "NUMBER", "log", "message", "go", "I", "m", "not", "seeing", "anything", "logged", "NUMBER", "FROM", "node", "NUMBER", "as", "build", "stage", "WORKDIR", "function", "ADD", "package", "lock", "NUMBER", "json", "function", "ADD", "package", "NUMBER", "json", "function", "RUN", "npm", "install", "save", "puppeteer", "NUMBER", "RUN", "npm", "install", "save", "puppeteer", "NUMBER", "RUN", "npm", "install", "FROM", "node", "NUMBER", "RUN", "apt", "get", "update", "apt", "get", "install", "yq", "gconf", "service", "libasound", "NUMBER", "libatk", "NUMBER", "NUMBER", "libc", "NUMBER", "libcairo", "NUMBER", "libcups", "NUMBER", "libdbus", "NUMBER", "NUMBER", "libexpat", "NUMBER", "libfontconfig", "NUMBER", "libgcc", "NUMBER", "libgconf", "NUMBER", "NUMBER", "libgdk", "pixbuf", "NUMBER", "NUMBER", "libglib", "NUMBER", "NUMBER", "libgtk", "NUMBER", "NUMBER", "libnspr", "NUMBER", "libpango", "NUMBER", "NUMBER", "libpangocairo", "NUMBER", "NUMBER", "libstdc", "NUMBER", "libx", "NUMBER", "NUMBER", "libx", "NUMBER", "xcb", "NUMBER", "libxcb", "NUMBER", "libxcomposite", "NUMBER", "libxcursor", "NUMBER", "libxdamage", "NUMBER", "libxext", "NUMBER", "libxfixes", "NUMBER", "libxi", "NUMBER", "libxrandr", "NUMBER", "libxrender", "NUMBER", "libxss", "NUMBER", "libxtst", "NUMBER", "ca", "certificates", "fonts", "liberation", "libappindicator", "NUMBER", "libnss", "NUMBER", "lsb", "release", "xdg", "utils", "wget", "WORKDIR", "function", "ADD", "NUMBER", "function", "COPY", "from", "build", "stage", "function", "node_modules", "function", "node_modules", "ENTRYPOINT", "node", "func", "NUMBER", "js", "Anything", "going", "to", "stderr", "should", "be", "stored", "in", "fn", "logs", "fn", "logs", "get", "TAG", "last", "fn", "log", "be", "needing", "a", "call", "id", "NUMBER", "I", "don", "t", "see", "a", "call", "id", "on", "the", "fn", "console", "NUMBER", "I", "see", "in", "ID", "but", "use", "that", "doesn", "t", "return", "anything", "NUMBER", "where", "be", "the", "actual", "log", "file", "It", "shows", "this", "when", "I", "send", "a", "request", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Hot", "function", "launcher", "starting", "hot", "container", "action", "server", "NUMBER", "handleFunctionCall", "fm", "app", "crawl", "app_id", "NUMBER", "CBRSDD", "NUMBER", "XNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "currentStats", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "id", "NUMBER", "CBSKDV", "NUMBER", "DNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "isNeeded", "true", "route", "crawl", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "starting", "call", "action", "server", "NUMBER", "handleFunctionCall", "fm", "app", "crawl", "app_id", "NUMBER", "CBRSDD", "NUMBER", "XNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "container_id", "NUMBER", "CBSM", "NUMBER", "F", "NUMBER", "ANG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "id", "NUMBER", "CBSM", "NUMBER", "F", "NUMBER", "NG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "route", "crawl", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "api", "error", "action", "server", "NUMBER", "handleFunctionCall", "fm", "app", "crawl", "code", "NUMBER", "error", "invalid", "json", "response", "from", "function", "err", "invalid", "character", "r", "looking", "for", "beginning", "of", "value", "id", "NUMBER", "CBSM", "NUMBER", "F", "NUMBER", "NG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "route", "crawl", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "hot", "function", "terminating", "app_id", "NUMBER", "CBRSDD", "NUMBER", "XNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "cpus", "error", "invalid", "json", "response", "from", "function", "err", "invalid", "character", "r", "looking", "for", "beginning", "of", "value", "format", "json", "id", "NUMBER", "CBSM", "NUMBER", "F", "NUMBER", "ANG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "idle_timeout", "NUMBER", "image", "crawl", "NUMBER", "memory", "NUMBER", "route", "crawl", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "hot", "function", "terminated", "app_id", "NUMBER", "CBRSDD", "NUMBER", "XNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "cpus", "error", "context", "canceled", "format", "json", "id", "NUMBER", "CBSM", "NUMBER", "F", "NUMBER", "ANG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "idle_timeout", "NUMBER", "image", "crawl", "NUMBER", "memory", "NUMBER", "route", "crawl", "Thanks", "I", "can", "see", "it", "the", "header", "but", "it", "returns", "nothing", "when", "I", "use", "it", "fn", "logs", "get", "crawl", "NUMBER", "CBSQVK", "NUMBER", "NNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "I", "change", "my", "func", "NUMBER", "yaml", "to", "have", "format", "default", "instead", "of", "format", "json", "and", "now", "I", "get", "everything", "that", "I", "print", "use", "console", "NUMBER", "log", "in", "the", "response", "body", "NUMBER", "Is", "that", "how", "it", "s", "supposed", "to", "work", "The", "problem", "I", "m", "having", "be", "that", "when", "I", "set", "format", "back", "to", "JSON", "It", "returns", "an", "error", "invalid", "json", "response", "from", "function", "err", "invalid", "character", "c", "looking", "for", "beginning", "of", "value", "I", "m", "trying", "to", "figure", "out", "where", "the", "error", "be", "come", "from", "but", "I", "m", "not", "seeing", "anything", "logged", "NUMBER", "when", "I", "use", "the", "fn_call_id", "from", "the", "response", "header", "and", "enter", "fn", "logs", "get", "crawl", "NUMBER", "CBSTXYEGNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "where", "crawl", "be", "the", "name", "of", "my", "function", "It", "prints", "nothing", "NUMBER", "Shouldn", "t", "it", "print", "everything", "that", "was", "write", "to", "stdout", "for", "that", "request", "I", "get", "it", "to", "work", "after", "doing", "some", "more", "debugging", "NUMBER", "I", "needed", "to", "tell", "puppeteer", "to", "wait", "for", "network", "idle", "await", "page", "NUMBER", "goto", "url", "waitUntil", "domcontentloaded", "networkidle", "NUMBER", "And", "I", "change", "all", "my", "console", "NUMBER", "log", "to", "be", "console", "NUMBER", "error", "so", "they", "get", "logged", "The", "main", "problem", "I", "had", "after", "get", "the", "image", "work", "was", "that", "the", "statements", "console", "NUMBER", "log", "NUMBER", "or", "console", "NUMBER", "info", "NUMBER", "will", "break", "the", "json", "response", "NUMBER", "Any", "logging", "needs", "to", "be", "console", "NUMBER", "error", "for", "it", "to", "go", "to", "the", "log", "file", "NUMBER", "Question", "about", "timeouts", "NUMBER", "My", "node", "NUMBER", "js", "process", "may", "need", "to", "run", "for", "longer", "than", "NUMBER", "minutes", "and", "that", "be", "the", "maximum", "timeout", "your", "settings", "allow", "NUMBER", "Can", "function", "return", "a", "response", "and", "continue", "to", "run", "asyncrounously", "Does", "the", "timeout", "kill", "the", "run", "function", "freezes", "So", "when", "the", "next", "request", "comes", "in", "my", "function", "pick", "up", "where", "it", "left", "off", "and", "now", "there", "be", "two", "run", "If", "I", "change", "it", "to", "async", "can", "I", "create", "a", "function", "method", "that", "will", "return", "status", "if", "you", "pass", "in", "the", "call_id", "I", "tried", "it", "with", "async", "NUMBER", "I", "can", "t", "seem", "to", "view", "any", "logs", "until", "it", "completes", "NUMBER", "Is", "there", "a", "way", "to", "view", "the", "stderr", "pipe", "while", "it", "s", "run", "docker", "logs", "command", "give", "me", "configured", "logging", "driver", "do", "not", "support", "reading", "Regarding", "stdout", "if", "I", "need", "to", "exec", "shell", "child_process", "I", "need", "to", "make", "sure", "nothing", "gets", "write", "to", "stdout", "and", "everything", "be", "piped", "to", "stderr", "I", "opened", "this", "other", "issue", "NUMBER", "Can", "anyone", "explain", "LINK", "node", "issue", "NUMBER", "think", "this", "be", "resolve", "thanks", "re", "open", "if", "needed", "I", "m", "run", "the", "sample", "function", "project", "setup", "fn", "init", "runtime", "node", "myproject", "I", "retrieve", "the", "url", "at", "LINK", "If", "I", "pause", "for", "a", "while", "and", "reload", "the", "page", "another", "instance", "shows", "up", "in", "docker", "ps", "NUMBER", "These", "keep", "growing", "every", "time", "I", "pause", "for", "a", "while", "and", "reload", "Note", "I", "had", "to", "stringify", "the", "results", "for", "the", "hello", "world", "example", "or", "it", "just", "displays", "Object", "The", "init", "should", "have", "created", "it", "use", "stringify", "automatically", "NUMBER", "return", "JSON", "NUMBER", "ringify", "response", "Running", "Oracle", "Linux", "NUMBER", "run", "in", "virtualbox", "on", "windows", "NUMBER", "Thank", "you", "NUMBER", "So", "where", "be", "the", "idle", "timeout", "defined", "I", "have", "NUMBER", "instances", "of", "the", "same", "container", "showing", "up", "in", "docker", "all", "in", "Paused", "state", "and", "they", "have", "be", "there", "for", "over", "an", "hour", "NUMBER", "And", "it", "still", "creates", "more", "if", "I", "reload", "the", "browser", "NUMBER", "I", "m", "still", "not", "understanding", "NUMBER", "I", "understand", "that", "a", "cold", "function", "will", "start", "a", "new", "container", "for", "each", "request", "NUMBER", "But", "why", "be", "they", "not", "going", "away", "after", "be", "call", "The", "seem", "to", "go", "to", "paused", "status", "and", "remain", "there", "NUMBER", "If", "manually", "I", "run", "docker", "unpause", "then", "the", "container", "goes", "away", "NUMBER", "They", "won", "t", "show", "up", "forever", "in", "paused", "state", "will", "they", "I", "thought", "cold", "function", "was", "the", "default", "NUMBER", "How", "do", "I", "change", "it", "to", "be", "a", "cold", "function", "If", "I", "defined", "a", "hot", "function", "then", "why", "be", "it", "not", "reusing", "the", "same", "container", "for", "each", "request", "and", "instead", "loading", "a", "new", "instance", "NUMBER", "if", "there", "be", "a", "delay", "between", "request", "And", "they", "seem", "to", "never", "go", "away", "NUMBER", "Thanks", "NUMBER", "Sorry", "for", "all", "the", "question", "but", "I", "m", "new", "to", "fn", "NUMBER", "It", "s", "strange", "that", "a", "property", "name", "of", "format", "be", "use", "to", "determine", "whether", "it", "s", "a", "hot", "or", "cold", "function", "NUMBER", "So", "format", "of", "default", "be", "cold", "and", "format", "of", "json", "be", "hot", "NUMBER", "That", "s", "confusing", "NUMBER", "I", "tried", "it", "with", "default", "and", "now", "I", "see", "no", "instances", "in", "docker", "and", "they", "get", "loaded", "each", "time", "I", "refresh", "the", "browser", "so", "it", "s", "slower", "NUMBER", "That", "makes", "sense", "NUMBER", "But", "when", "I", "change", "it", "back", "to", "json", "now", "I", "can", "load", "in", "quick", "succession", "and", "it", "re", "uses", "the", "same", "container", "that", "stays", "loaded", "NUMBER", "However", "if", "I", "pause", "a", "while", "and", "reload", "it", "loads", "a", "new", "instance", "into", "docker", "but", "the", "old", "one", "be", "still", "there", "NUMBER", "Why", "wouldn", "t", "it", "continue", "to", "use", "the", "same", "instance", "since", "it", "seems", "to", "still", "be", "loaded", "and", "paused", "What", "happens", "to", "the", "old", "one", "Does", "it", "never", "get", "use", "again", "If", "not", "then", "why", "doesn", "t", "it", "get", "remove", "If", "I", "reload", "the", "browser", "in", "quick", "succession", "I", "only", "see", "the", "one", "instance", "of", "docker", "NUMBER", "But", "if", "I", "pause", "for", "about", "NUMBER", "seconds", "and", "then", "reload", "the", "browser", "loads", "slowly", "and", "now", "I", "see", "another", "instance", "in", "docker", "NUMBER", "Also", "I", "be", "seeing", "these", "message", "on", "the", "fn", "console", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "error", "remove", "container", "container", "NUMBER", "CA", "NUMBER", "WZEXMNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "M", "error", "API", "error", "NUMBER", "message", "Could", "not", "kill", "run", "container", "b", "NUMBER", "fb", "NUMBER", "f", "NUMBER", "e", "NUMBER", "f", "NUMBER", "baccdc", "NUMBER", "bc", "NUMBER", "d", "NUMBER", "eee", "NUMBER", "da", "NUMBER", "af", "NUMBER", "f", "NUMBER", "d", "NUMBER", "d", "NUMBER", "cannot", "remove", "Container", "b", "NUMBER", "fb", "NUMBER", "f", "NUMBER", "e", "NUMBER", "f", "NUMBER", "baccdc", "NUMBER", "bc", "NUMBER", "d", "NUMBER", "eee", "NUMBER", "da", "NUMBER", "af", "NUMBER", "f", "NUMBER", "d", "NUMBER", "d", "NUMBER", "be", "paused", "NUMBER", "Unpause", "the", "container", "before", "stopping", "or", "killing", "n", "NUMBER", "route", "crawl", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "docker", "temporary", "error", "retrying", "app_id", "NUMBER", "CA", "NUMBER", "SCZ", "NUMBER", "X", "NUMBER", "cpus", "docker_cmd", "RemoveContainer", "error", "API", "error", "NUMBER", "message", "Could", "not", "kill", "run", "container", "b", "NUMBER", "a", "NUMBER", "b", "NUMBER", "bb", "NUMBER", "eb", "NUMBER", "f", "NUMBER", "c", "NUMBER", "cf", "NUMBER", "eb", "NUMBER", "fa", "NUMBER", "f", "NUMBER", "f", "NUMBER", "f", "NUMBER", "f", "NUMBER", "f", "NUMBER", "fd", "NUMBER", "bde", "NUMBER", "cannot", "remove", "Container", "b", "NUMBER", "a", "NUMBER", "b", "NUMBER", "bb", "NUMBER", "eb", "NUMBER", "f", "NUMBER", "c", "NUMBER", "cf", "NUMBER", "eb", "NUMBER", "fa", "NUMBER", "f", "NUMBER", "f", "NUMBER", "f", "NUMBER", "f", "NUMBER", "f", "NUMBER", "fd", "NUMBER", "bde", "NUMBER", "be", "paused", "NUMBER", "Unpause", "the", "container", "before", "stopping", "or", "killing", "n", "format", "json", "id", "NUMBER", "CA", "NUMBER", "XBZ", "NUMBER", "KNG", "NUMBER", "G", "NUMBER", "GZJ", "NUMBER", "idle_timeout", "NUMBER", "image", "crawl", "NUMBER", "memory", "NUMBER", "route", "crawl", "Sounds", "like", "a", "docker", "bug", "NUMBER", "What", "version", "of", "docker", "be", "you", "use", "I", "ve", "seen", "this", "in", "older", "version", "which", "refused", "to", "remove", "a", "paused", "container", "NUMBER", "docker", "version", "Client", "Version", "NUMBER", "ol", "API", "version", "NUMBER", "Go", "version", "go", "NUMBER", "Git", "commit", "d", "NUMBER", "b", "NUMBER", "ab", "Built", "Fri", "Oct", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "OS", "Arch", "linux", "amd", "NUMBER", "Server", "Version", "NUMBER", "ol", "API", "version", "NUMBER", "minimum", "version", "NUMBER", "Go", "version", "go", "NUMBER", "Git", "commit", "d", "NUMBER", "b", "NUMBER", "ab", "Built", "Fri", "Oct", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "OS", "Arch", "linux", "amd", "NUMBER", "ah", "another", "OL", "docker", "version", "that", "doesn", "t", "handle", "this", "NUMBER", "Hmm", "you", "can", "either", "upgrade", "docker", "or", "as", "a", "workaround", "for", "now", "define", "this", "export", "FN_FREEZE_IDLE_MSECS", "NUMBER", "The", "FN_FREEZE_IDLE_MSECS", "NUMBER", "setting", "did", "not", "seem", "to", "have", "any", "affect", "NUMBER", "I", "still", "cannot", "kill", "a", "paused", "container", "NUMBER", "Upgrade", "to", "what", "I", "m", "on", "Oracle", "Linux", "NUMBER", "run", "in", "virtualbox", "on", "windows", "and", "I", "thought", "NUMBER", "ol", "was", "the", "latest", "version", "of", "docker", "for", "that", "NUMBER", "Ok", "It", "worked", "if", "I", "put", "that", "parameter", "in", "a", "file", "and", "start", "it", "with", "fn", "start", "env", "file", "NUMBER", "fn", "env", "It", "doesn", "t", "seem", "to", "use", "the", "System", "environment", "variable", "that", "be", "there", "declare", "x", "FN_FREEZE_IDLE_MSECS", "NUMBER", "I", "install", "NUMBER", "ce", "version", "of", "docker", "and", "it", "seems", "to", "be", "work", "correctly", "now", "NUMBER", "The", "container", "gets", "remove", "after", "about", "NUMBER", "seconds", "so", "I", "see", "either", "one", "or", "no", "instances", "run", "at", "any", "time", "I", "really", "appreciate", "your", "help", "Np", "could", "you", "also", "post", "what", "os", "version", "you", "be", "use", "eg", "etc", "redhat", "release", "Is", "this", "oracle", "linux", "NUMBER", "Oh", "saw", "your", "post", "now", "NUMBER", "Ok", "closing", "this", "NUMBER", "There", "be", "alternative", "formulations", "of", "this", "for", "instance", "see", "LINK", "_conversion_between_strings_and_byte_slices", "The", "problem", "manifested", "in", "the", "returned", "values", "from", "unsafeBytes", "occasionally", "be", "broken", "NUMBER", "It", "s", "possible", "that", "by", "keep", "a", "reference", "to", "the", "a", "parameter", "alive", "the", "original", "code", "would", "still", "work", "however", "this", "definitely", "seems", "like", "a", "fix", "NUMBER", "A", "cast", "to", "byte", "a", "looks", "increasingly", "attractive", "for", "all", "that", "it", "ll", "perform", "small", "allocations", "and", "copies", "NUMBER", "Almost", "do", "with", "this", "will", "continue", "tomorrow", "NUMBER", "I", "think", "s", "NUMBER", "keys", "have", "max", "of", "NUMBER", "bytes", "length", "NUMBER", "Just", "calling", "it", "out", "here", "NUMBER", "I", "think", "we", "be", "OK", "if", "looking", "at", "sql", "NUMBER", "go", "NUMBER", "bytes", "of", "app_id", "path", "even", "with", "base", "NUMBER", "overhead", "NUMBER", "Pulled", "this", "out", "of", "a", "conversation", "in", "slack", "How", "hard", "be", "it", "for", "us", "to", "move", "off", "of", "stdin", "stdout", "in", "fn", "I", "m", "referring", "to", "amending", "our", "fdks", "to", "support", "listen", "accept", "tcp", "model", "instead", "of", "stdin", "stdout", "NUMBER", "IMHO", "a", "busy", "service", "should", "not", "run", "on", "stdout", "stdin", "NUMBER", "which", "strategically", "ties", "us", "to", "NUMBER", "request", "at", "a", "time", "NUMBER", "Also", "docker", "muxes", "demuxes", "stdio", "which", "be", "a", "head", "of", "line", "blocking", "bottleneck", "there", "NUMBER", "With", "tcp", "listen", "accept", "model", "we", "can", "potentially", "run", "more", "than", "NUMBER", "req", "at", "a", "time", "on", "a", "container", "NUMBER", "But", "we", "d", "have", "to", "limit", "customer", "contract", "NUMBER", "How", "feasible", "be", "this", "Similar", "to", "discussions", "on", "dropping", "cold", "format", "can", "we", "do", "another", "leap", "and", "do", "this", "as", "well", "Most", "high", "level", "recent", "languages", "have", "build", "in", "or", "easy", "to", "add", "web", "server", "sock", "server", "NUMBER", "So", "it", "becomes", "bring", "your", "own", "web", "server", "NUMBER", "This", "would", "open", "up", "the", "possibility", "of", "k", "NUMBER", "s", "managing", "function", "container", "as", "well", "much", "more", "usable", "code", "compared", "to", "stdin", "out", "NUMBER", "take", "that", "function", "code", "and", "make", "it", "a", "server", "NUMBER", "run", "as", "vm", "etc", "NUMBER", "With", "dev", "tcp", "support", "the", "bash", "fdk", "grows", "by", "about", "a", "dozen", "lines", "to", "support", "this", "Open", "question", "from", "carimura", "how", "would", "BYOD", "get", "its", "input", "and", "be", "we", "considering", "others", "run", "a", "service", "not", "just", "OCI", "service", "IMHO", "I", "think", "we", "should", "take", "NUMBER", "even", "further", "NUMBER", "Let", "s", "say", "we", "agreed", "on", "json", "we", "should", "also", "move", "off", "of", "stdin", "stdout", "and", "switch", "to", "listen", "accept", "tcp", "socket", "or", "web", "server", "instead", "NUMBER", "A", "few", "reasons", "NUMBER", "stdin", "stdout", "in", "docker", "be", "processed", "by", "dockerd", "containerd", "and", "has", "mux", "demux", "applied", "to", "it", "NUMBER", "It", "has", "head", "of", "line", "blocking", "and", "processing", "bottleneck", "NUMBER", "NUMBER", "stdin", "stdout", "do", "not", "scale", "NUMBER", "Unless", "we", "pipeline", "json", "request", "through", "docker", "mux", "demux", "NUMBER", "NUMBER", "serving", "json", "as", "a", "web", "server", "in", "a", "container", "function", "be", "more", "usable", "code", "NUMBER", "you", "can", "use", "a", "web", "server", "anywhere", "NUMBER", "which", "becomes", "BYOW", "bring", "your", "own", "web", "server", "or", "tcp", "server", "NUMBER", "We", "can", "support", "it", "in", "fdks", "or", "ask", "customers", "to", "implement", "a", "web", "server", "NUMBER", "Here", "s", "a", "ruby", "version", "LINK", "Some", "relate", "work", "before", "LINK", "but", "I", "m", "not", "sure", "how", "to", "go", "about", "the", "transition", "NUMBER", "System", "wide", "option", "Per", "route", "option", "Or", "agree", "on", "this", "overlay", "communication", "and", "hard", "switch", "etc", "NUMBER", "which", "becomes", "BYOW", "bring", "your", "own", "web", "server", "or", "tcp", "server", "NUMBER", "fdk", "could", "make", "an", "opinion", "on", "this", "in", "each", "lang", "as", "well", "and", "then", "it", "s", "not", "necessarily", "BYOW", "just", "import", "the", "fdk", "same", "as", "now", "NUMBER", "System", "wide", "option", "Per", "route", "option", "Or", "agree", "on", "this", "overlay", "communication", "and", "hard", "switch", "etc", "NUMBER", "i", "guess", "if", "we", "reduce", "all", "formats", "to", "this", "then", "a", "lot", "of", "code", "dies", "but", "to", "ship", "it", "maybe", "just", "an", "additional", "format", "for", "now", "jsoncats", "format", "there", "s", "a", "lot", "of", "decisions", "around", "dropping", "all", "the", "formats", "cold", "etc", "NUMBER", "we", "could", "keep", "separately", "and", "wait", "to", "rip", "the", "band", "aid", "off", "The", "problem", "with", "all", "of", "this", "and", "BYOW", "be", "that", "you", "re", "bringing", "your", "own", "web", "server", "and", "your", "function", "be", "no", "longer", "a", "lightweight", "function", "NUMBER", "And", "at", "that", "point", "why", "even", "bother", "use", "a", "FaaS", "at", "all", "treeder", "agreed", "this", "be", "what", "Azure", "do", "with", "their", "runtime", "LINK", "juanpdantur", "azure", "function", "on", "a", "docker", "container", "NUMBER", "e", "NUMBER", "c", "NUMBER", "cf", "NUMBER", "The", "only", "two", "benefit", "I", "can", "see", "here", "no", "FDKs", "native", "concurrency", "but", "it", "makes", "serverless", "useless", "in", "general", "so", "there", "be", "obvious", "limits", "when", "serverless", "function", "turns", "into", "the", "lightweight", "web", "server", "NUMBER", "Also", "if", "we", "start", "support", "concurrent", "request", "in", "the", "most", "naive", "implementation", "this", "would", "require", "the", "function", "developer", "to", "have", "to", "worry", "about", "synchronization", "which", "in", "my", "mind", "was", "one", "of", "the", "key", "simplications", "that", "serverless", "less", "brings", "to", "the", "programming", "model", "NUMBER", "I", "m", "not", "following", "the", "argument", "why", "this", "be", "against", "serverless", "faas", "NUMBER", "Google", "AWS", "seems", "to", "provide", "a", "handler", "for", "example", "they", "be", "doing", "exactly", "the", "same", "thing", "by", "provide", "a", "handler", "over", "likely", "a", "web", "tcp", "grpc", "server", "of", "their", "own", "NUMBER", "We", "d", "be", "provide", "best", "of", "both", "worlds", "concurrency", "and", "if", "you", "don", "t", "want", "to", "use", "fdk", "which", "would", "use", "a", "web", "server", "then", "customers", "can", "implement", "a", "web", "server", "on", "their", "own", "NUMBER", "Both", "support", "for", "BYOD", "with", "additional", "requirements", "but", "this", "be", "a", "model", "that", "actually", "scales", "NUMBER", "A", "web", "server", "may", "have", "more", "applications", "eg", "NUMBER", "move", "a", "vm", "or", "actual", "server", "into", "faas", "or", "vice", "versa", "and", "has", "more", "mobility", "compared", "to", "stdin", "stdout", "NUMBER", "In", "comparison", "how", "many", "enterprise", "workloads", "have", "we", "seen", "use", "stdin", "stdout", "I", "recall", "very", "recently", "in", "Fn", "slack", "someone", "wanted", "to", "move", "their", "python", "app", "but", "was", "throw", "off", "by", "one", "request", "at", "a", "time", "restriction", "NUMBER", "Not", "surprisingly", "this", "was", "an", "app", "already", "handle", "concurrency", "with", "DB", "connection", "pool", "etc", "NUMBER", "He", "said", "tolga", "thanks", "for", "that", "description", "NUMBER", "I", "think", "if", "we", "ended", "up", "adopting", "Fn", "at", "our", "studio", "we", "would", "need", "to", "implement", "our", "own", "way", "of", "doing", "the", "concurrent", "server", "approach", "NUMBER", "Not", "everything", "can", "spin", "up", "to", "a", "ready", "state", "in", "sub", "second", "time", "and", "it", "seems", "like", "too", "much", "overhead", "to", "be", "spinning", "them", "up", "on", "concurrent", "access", "NUMBER", "We", "would", "end", "up", "having", "to", "increase", "the", "idle", "timeout", "alot", "to", "keep", "all", "these", "instances", "warm", "so", "they", "can", "keep", "servicing", "load", "NUMBER", "and", "Is", "it", "better", "to", "have", "NUMBER", "instances", "run", "with", "NUMBER", "database", "connections", "to", "gviedma", "s", "point", "I", "think", "the", "hardest", "thing", "be", "going", "to", "be", "controlling", "concurrency", "and", "resources", "around", "change", "to", "having", "a", "concurrent", "request", "per", "container", "model", "NUMBER", "in", "the", "new", "model", "we", "change", "from", "something", "where", "it", "s", "a", "__function__", "gets", "X", "amount", "of", "resources", "for", "cpu", "ram", "disk", "etc", "NUMBER", "and", "if", "we", "move", "to", "having", "concurrent", "request", "in", "a", "container", "at", "a", "time", "it", "s", "much", "harder", "to", "grasp", "resource", "utilization", "from", "a", "user", "perspective", "and", "nigh", "impossible", "for", "us", "to", "give", "the", "previous", "per", "function", "resource", "semantics", "and", "the", "semantics", "would", "be", "something", "like", "a", "__container__", "gets", "X", "amount", "of", "resources", "for", "cpu", "ram", "disk", "etc", "NUMBER", "and", "there", "s", "then", "likely", "some", "separate", "api", "to", "set", "concurrency", "on", "a", "container", "itself", "NUMBER", "we", "could", "default", "this", "to", "NUMBER", "and", "get", "the", "exact", "semantics", "we", "have", "now", "where", "we", "wait", "for", "a", "response", "and", "then", "look", "at", "add", "an", "option", "to", "let", "this", "tick", "up", "to", "some", "N", "at", "a", "users", "wishes", "to", "handle", "the", "case", "skinowski", "brings", "up", "from", "a", "user", "the", "other", "day", "NUMBER", "this", "be", "maybe", "a", "good", "trade", "off", "we", "ve", "had", "similar", "conversations", "around", "this", "before", "and", "it", "could", "be", "treated", "as", "a", "kind", "of", "power", "user", "feature", "where", "we", "let", "users", "shoot", "themselves", "in", "the", "foot", "with", "it", "if", "they", "want", "but", "out", "of", "the", "box", "we", "have", "the", "same", "behavior", "we", "have", "now", "NUMBER", "we", "could", "even", "keep", "the", "shutdown", "on", "timeout", "behavior", "like", "we", "have", "now", "to", "effectively", "disallow", "user", "request", "that", "go", "over", "the", "timeout", "to", "muddle", "the", "state", "of", "the", "container", "for", "subsequent", "request", "and", "maybe", "that", "s", "a", "pill", "we", "can", "swallow", "until", "we", "figure", "out", "something", "better", "NUMBER", "Nothing", "in", "this", "suggestion", "makes", "the", "user", "need", "to", "handle", "concurrent", "request", "NUMBER", "max", "concurrency", "be", "a", "thing", "most", "FaaS", "I", "ve", "seen", "tend", "to", "support", "and", "we", "could", "still", "default", "it", "to", "NUMBER", "if", "we", "don", "t", "want", "to", "spook", "people", "NUMBER", "Regarding", "this", "be", "somehow", "anti", "serverless", "I", "don", "t", "really", "get", "that", "NUMBER", "Seems", "to", "still", "support", "the", "principles", "in", "the", "serverless", "manifesto", "NUMBER", "Why", "even", "bother", "use", "FaaS", "at", "all", "No", "infrastructure", "visible", "to", "the", "user", "transparent", "scaling", "not", "paying", "for", "idle", "etc", "etc", "NUMBER", "gviedma", "Synchronization", "be", "a", "good", "point", "NUMBER", "I", "agree", "with", "you", "that", "this", "add", "complexity", "but", "also", "note", "that", "we", "do", "provide", "CPU", "resource", "to", "these", "function", "NUMBER", "So", "we", "be", "basically", "telling", "operators", "users", "that", "they", "can", "use", "multiple", "CPUs", "NUMBER", "In", "addition", "function", "if", "they", "be", "implicitly", "or", "explicitly", "forking", "threads", "already", "need", "synchronization", "in", "our", "eco", "system", "NUMBER", "eg", "NUMBER", "if", "you", "try", "to", "access", "previous", "request", "or", "stdin", "stdout", "in", "a", "go", "routine", "for", "example", "you", "can", "be", "executing", "parallel", "to", "another", "go", "routine", "handle", "next", "request", "NUMBER", "There", "s", "also", "a", "few", "technical", "reasons", "in", "fn", "agent", "we", "d", "want", "to", "do", "this", "NUMBER", "For", "example", "in", "stdin", "stdout", "model", "what", "do", "you", "do", "if", "your", "request", "timed", "out", "How", "do", "you", "ensure", "next", "request", "will", "go", "through", "stdin", "stdout", "Can", "you", "keep", "those", "pipes", "clean", "between", "request", "How", "do", "you", "handle", "a", "response", "that", "be", "too", "big", "And", "still", "process", "next", "request", "Today", "in", "most", "of", "these", "cases", "we", "have", "to", "kill", "the", "hot", "container", "since", "we", "cannot", "recover", "NUMBER", "Web", "tcp", "servers", "clients", "already", "have", "solve", "these", "problem", "NUMBER", "I", "agree", "with", "treeder", "s", "earlier", "comment", "ask", "why", "even", "both", "to", "use", "FaaS", "if", "you", "require", "developers", "to", "take", "on", "so", "much", "responsibility", "and", "complexity", "NUMBER", "I", "love", "the", "Fn", "experience", "over", "the", "typical", "Heroku", "style", "cloud", "native", "app", "which", "requires", "you", "to", "use", "an", "embedded", "web", "container", "NUMBER", "The", "whole", "point", "of", "FaaS", "be", "the", "ability", "to", "deploy", "small", "simple", "chunks", "of", "functionality", "that", "don", "t", "require", "an", "embedded", "container", "the", "platform", "be", "the", "container", "NUMBER", "So", "if", "the", "platform", "be", "lacks", "functionality", "that", "users", "need", "let", "s", "focus", "on", "those", "things", "NUMBER", "If", "you", "don", "t", "like", "the", "FaaS", "model", "then", "you", "have", "lots", "of", "other", "deployment", "choices", "out", "there", "many", "of", "which", "be", "also", "serverless", "to", "mjg", "NUMBER", "s", "point", "but", "aren", "t", "FaaS", "NUMBER", "relate", "LINK", "node", "issue", "NUMBER", "Another", "difficult", "issue", "due", "to", "stdout", "stderr", "contract", "NUMBER", "Here", "s", "another", "one", "LINK", "ruby", "pull", "NUMBER", "Seems", "to", "me", "stdin", "stdout", "processing", "be", "not", "that", "simple", "and", "puts", "burden", "on", "fdk", "or", "client", "code", "NUMBER", "Compare", "the", "above", "code", "with", "a", "web", "handler", "approach", "below", "NUMBER", "It", "s", "much", "more", "elegant", "LINK", "diff", "dc", "NUMBER", "ed", "NUMBER", "c", "NUMBER", "a", "NUMBER", "a", "NUMBER", "f", "NUMBER", "acaa", "NUMBER", "ff", "NUMBER", "And", "you", "constantly", "have", "to", "worry", "about", "function", "code", "itself", "or", "the", "libraries", "that", "it", "pulls", "in", "could", "write", "something", "to", "stdout", "and", "corrupt", "the", "output", "NUMBER", "This", "will", "kill", "the", "hot", "container", "NUMBER", "Compare", "this", "to", "processing", "on", "a", "per", "request", "socket", "NUMBER", "It", "s", "more", "robust", "and", "we", "can", "probably", "get", "rid", "of", "significant", "amount", "of", "Fdk", "code", "that", "we", "have", "support", "NUMBER", "nodejs", "ruby", "fdks", "be", "overly", "complex", "due", "to", "custom", "parsing", "NUMBER", "Modern", "web", "handler", "approach", "where", "most", "of", "these", "languages", "have", "already", "build", "in", "http", "tcp", "service", "support", "can", "take", "that", "down", "to", "a", "few", "lines", "of", "code", "NUMBER", "See", "my", "example", "post", "above", "Travis", "s", "ruby", "example", "NUMBER", "Protocol", "version", "helps", "to", "identify", "whether", "the", "FDK", "can", "handle", "request", "or", "not", "NUMBER", "Closing", "as", "wontfix", "for", "now", "Cloud", "events", "format", "will", "be", "inherently", "version", "NUMBER", "Right", "so", "Have", "I", "understood", "this", "correctly", "the", "request", "scope", "contains", "some", "information", "e", "NUMBER", "g", "NUMBER", "tenant", "ID", "in", "header", "or", "domain", "etc", "that", "be", "not", "part", "part", "of", "the", "model", "A", "datastore", "presumably", "extend", "needs", "to", "consume", "this", "in", "order", "to", "load", "the", "correct", "models", "In", "single", "tenant", "Fn", "this", "be", "not", "necessary", "If", "that", "be", "the", "case", "I", "think", "push", "the", "http", "request", "down", "to", "the", "datastore", "leaks", "out", "a", "couple", "of", "abstractions", "that", "might", "be", "better", "keep", "tight", "NUMBER", "An", "alternative", "solution", "would", "be", "In", "the", "system", "use", "a", "multi", "tenant", "solution", "inject", "an", "middleware", "that", "extracts", "the", "exact", "information", "required", "by", "the", "datastore", "into", "the", "context", "object", "see", "LINK", "dns", "blob", "master", "dns", "NUMBER", "go", "and", "then", "consume", "that", "from", "ctx", "NUMBER", "Value", "in", "the", "datastore", "zootalures", "suggestion", "would", "work", "and", "prevents", "us", "from", "having", "to", "pass", "on", "the", "_http", "NUMBER", "Request_", "inside", "GetApp", "and", "GetRoute", "NUMBER", "The", "downside", "be", "relying", "on", "special", "values", "in", "the", "context", "to", "be", "write", "and", "read", "by", "different", "layers", "make", "it", "potentially", "more", "difficult", "to", "reason", "about", "the", "correctness", "of", "the", "code", "NUMBER", "Since", "the", "middleware", "extensions", "mechanism", "meets", "the", "multi", "tenancy", "requirements", "without", "requiring", "change", "to", "the", "abstraction", "unnecessary", "for", "the", "single", "tenancy", "case", "I", "be", "closing", "this", "PR", "NUMBER", "sigh", "arg", "NUMBER", "We", "should", "be", "able", "to", "extend", "the", "RunnerCall", "interface", "and", "the", "underlying", "agent", "NUMBER", "call", "without", "significant", "cost", "rather", "than", "use", "a", "different", "mechanism", "to", "pass", "the", "information", "NUMBER", "See", "NUMBER", "for", "an", "alternative", "implementation", "NUMBER", "What", "do", "you", "think", "Closed", "in", "favor", "of", "NUMBER", "While", "work", "on", "a", "demo", "app", "I", "realized", "we", "don", "t", "have", "a", "nice", "way", "of", "dealing", "with", "error", "from", "function", "NUMBER", "Our", "current", "function", "output", "format", "LINK", "format", "NUMBER", "md", "output", "doesn", "t", "have", "any", "way", "to", "respond", "with", "an", "error", "other", "than", "use", "the", "protocol", "section", "but", "obviously", "that", "s", "very", "protocol", "specific", "and", "not", "the", "best", "way", "to", "do", "it", "NUMBER", "json", "body", "some", "output", "content_type", "application", "json", "protocol", "status_code", "NUMBER", "headers", "Other", "Header", "something", "I", "propose", "we", "add", "some", "error", "response", "field", "to", "our", "core", "output", "format", "to", "handle", "these", "nicely", "very", "similar", "to", "Lambda", "s", "format", "LINK", "error", "in", "lambda", "integration", "NUMBER", "html", "error", "message", "an", "error", "occur", "blah", "blah", "type", "Exception", "trace", "stack", "trace", "message", "required", "type", "optional", "trace", "optional", "Then", "the", "server", "can", "deal", "with", "these", "error", "appropriately", "based", "on", "the", "protocol", "be", "use", "NUMBER", "eg", "For", "the", "default", "HTTP", "route", "this", "could", "return", "a", "NUMBER", "or", "NUMBER", "with", "the", "error", "message", "in", "the", "body", "optionally", "overridden", "via", "the", "protocol", "status", "code", "NUMBER", "Protocol", "specific", "responses", "User", "s", "can", "continue", "to", "set", "protocol", "specific", "responses", "like", "they", "can", "right", "now", "eg", "error", "message", "an", "error", "occur", "blah", "blah", "type", "Exception", "trace", "stack", "trace", "protocol", "status_code", "NUMBER", "headers", "Other", "Header", "something", "FDK", "s", "FDK", "s", "should", "all", "have", "a", "nice", "an", "easy", "way", "for", "a", "user", "to", "respond", "with", "an", "error", "for", "an", "invocation", "NUMBER", "Node", "can", "do", "something", "like", "Lambda", "Go", "should", "allow", "an", "error", "return", "Java", "should", "allow", "a", "throw", "Exception", "etc", "NUMBER", "How", "can", "a", "developer", "override", "things", "for", "certain", "protocols", "in", "the", "FDK", "Perhaps", "with", "special", "Error", "objects", "that", "allow", "them", "to", "do", "that", "NUMBER", "For", "instance", "Go", "might", "have", "an", "HTTPProtocolError", "that", "user", "can", "use", "like", "this", "go", "return", "fdk", "NUMBER", "HTTPProtocolError", "message", "uh", "oh", "statusCode", "NUMBER", "I", "m", "up", "for", "this", "one", "NUMBER", "However", "i", "be", "bit", "disagreed", "with", "the", "FDK", "part", "NUMBER", "I", "would", "say", "that", "for", "Golang", "i", "would", "pick", "panic", "as", "the", "only", "valid", "case", "that", "will", "make", "FDK", "fill", "the", "error", "section", "of", "the", "response", "body", "ordinary", "error", "error", "NUMBER", "Error", "doesn", "t", "mean", "much", "to", "us", "except", "that", "something", "went", "wrong", "but", "doesn", "t", "mean", "something", "similar", "to", "exception", "in", "Python", "or", "Java", "it", "should", "just", "lead", "to", "HTTP", "NUMBER", "and", "error", "body", "NUMBER", "For", "FDK", "go", "i", "get", "use", "to", "write", "a", "wrapper", "go", "func", "withError", "_", "context", "NUMBER", "Context", "in", "io", "NUMBER", "Reader", "out", "io", "NUMBER", "Writer", "err", "myHandler", "in", "out", "if", "err", "nil", "fmt", "NUMBER", "Fprintln", "os", "NUMBER", "Stderr", "err", "NUMBER", "Error", "fdk", "NUMBER", "WriteStatus", "out", "NUMBER", "out", "NUMBER", "Write", "byte", "err", "NUMBER", "Error", "return", "it", "do", "great", "job", "and", "let", "the", "handler", "to", "return", "the", "error", "NUMBER", "For", "any", "other", "languages", "like", "Java", "Python", "i", "would", "agree", "that", "any", "throwable", "object", "exception", "should", "make", "the", "FDK", "write", "the", "error", "section", "of", "the", "JSON", "response", "body", "NUMBER", "I", "think", "you", "re", "miss", "the", "point", "your", "example", "be", "HTTP", "specific", "that", "s", "what", "this", "be", "trying", "to", "avoid", "NUMBER", "The", "FDK", "shouldn", "t", "have", "top", "level", "function", "like", "WriteStatus", "or", "anything", "HTTP", "specific", "NUMBER", "And", "an", "error", "in", "Go", "be", "almost", "exactly", "the", "same", "intent", "as", "Exceptions", "in", "Java", "NUMBER", "Panic", "be", "for", "something", "unexpect", "error", "be", "not", "unexpect", "NUMBER", "Okay", "if", "we", "want", "to", "step", "away", "from", "an", "HTTP", "stuff", "we", "would", "need", "to", "change", "the", "JSON", "response", "format", "as", "well", "along", "with", "what", "you", "re", "proposing", "because", "we", "still", "have", "the", "status", "code", "headers", "NUMBER", "So", "those", "just", "have", "to", "go", "away", "however", "there", "s", "a", "place", "for", "trigger", "specific", "response", "content", "that", "may", "be", "in", "the", "protocol", "section", "NUMBER", "denismakogon", "that", "s", "what", "this", "issue", "be", "all", "about", "isn", "t", "it", "In", "runner", "we", "trying", "to", "identify", "LINK", "L", "NUMBER", "L", "NUMBER", "whether", "the", "function", "s", "response", "be", "a", "JSON", "object", "NUMBER", "Unfortunately", "it", "works", "only", "for", "very", "specific", "JSON", "objects", "that", "starts", "with", "but", "the", "JSON", "objects", "could", "be", "very", "different", "here", "s", "at", "least", "one", "valid", "case", "of", "the", "JSON", "object", "json", "a", "b", "a", "b", "To", "solve", "this", "we", "need", "to", "change", "the", "way", "we", "do", "the", "detection", "here", "s", "a", "link", "to", "the", "solution", "i", "propose", "LINK", "At", "some", "point", "we", "have", "to", "say", "that", "the", "user", "has", "to", "set", "the", "content", "type", "to", "what", "they", "want", "it", "s", "not", "realistic", "for", "users", "to", "rely", "on", "us", "to", "have", "perfect", "content", "type", "detection", "NUMBER", "This", "exist", "be", "mostly", "an", "artifact", "of", "some", "code", "sliding", "in", "to", "default", "to", "json", "content", "type", "when", "this", "be", "not", "even", "generally", "the", "case", "and", "certain", "user", "routes", "relying", "on", "this", "behavior", "NUMBER", "It", "was", "a", "mistake", "to", "let", "that", "behavior", "in", "to", "begin", "with", "NUMBER", "Doesn", "t", "seem", "like", "it", "s", "worth", "it", "to", "read", "an", "entire", "body", "into", "another", "byte", "slice", "simply", "so", "that", "we", "can", "check", "content", "type", "as", "propose", "the", "stdlib", "detect", "only", "reads", "the", "first", "NUMBER", "bytes", "potentially", "but", "do", "no", "copying", "NUMBER", "If", "the", "open", "bracket", "for", "a", "list", "do", "not", "conflict", "with", "any", "other", "content", "types", "then", "we", "can", "consider", "add", "that", "case", "NUMBER", "But", "a", "string", "or", "number", "be", "also", "valid", "json", "values", "and", "we", "can", "t", "detect", "that", "NUMBER", "It", "s", "worth", "reading", "the", "RFC", "since", "my", "words", "mean", "less", "than", "theirs", "LINK", "section", "NUMBER", "In", "any", "event", "strongly", "prefer", "encouraging", "users", "to", "set", "their", "content", "type", "per", "the", "RFC", "reasoning", "NUMBER", "Oh", "one", "other", "question", "do", "we", "need", "new", "extension", "point", "s", "I", "m", "not", "really", "familiar", "with", "the", "mechanics", "of", "extensions", "but", "I", "didn", "t", "see", "anything", "along", "those", "lines", "NUMBER", "There", "s", "also", "the", "opposite", "problem", "i", "NUMBER", "e", "NUMBER", "an", "extension", "fail", "and", "cause", "the", "system", "to", "shut", "down", "NUMBER", "This", "could", "be", "helped", "by", "what", "I", "ve", "add", "in", "NUMBER", "use", "that", "mechanism", "extensions", "could", "register", "their", "own", "contexts", "say", "if", "they", "re", "run", "servers", "that", "can", "be", "cancelled", "and", "the", "main", "thread", "will", "wait", "on", "those", "NUMBER", "Maybe", "we", "need", "more", "than", "that", "though", "NUMBER", "the", "canonical", "interface", "we", "have", "for", "this", "tends", "towards", "implement", "io", "NUMBER", "Closer", "in", "this", "example", "ExtServer", "NUMBER", "Close", "and", "maybe", "Extension", "NUMBER", "Close", "NUMBER", "easy", "enough", "to", "plumb", "down", "the", "top", "level", "object", "as", "only", "an", "io", "NUMBER", "Closer", "escape", "hatch", "if", "we", "want", "the", "privates", "in", "the", "trenches", "to", "initiate", "shutdown", "NUMBER", "Closing", "for", "now", "since", "we", "have", "a", "few", "workarounds", "NUMBER", "For", "some", "types", "of", "error", "we", "might", "want", "to", "notify", "the", "actual", "caller", "if", "the", "error", "be", "directly", "NUMBER", "NUMBER", "tied", "to", "that", "request", "NUMBER", "If", "hotLauncher", "be", "triggered", "with", "signaller", "then", "here", "we", "send", "a", "back", "communication", "error", "notification", "channel", "NUMBER", "This", "be", "pass", "to", "checkLaunch", "to", "send", "back", "synchronous", "responses", "to", "the", "caller", "that", "initiated", "this", "hot", "container", "launch", "NUMBER", "This", "be", "useful", "if", "we", "want", "to", "run", "the", "agent", "in", "quick", "fail", "mode", "where", "instead", "of", "waiting", "for", "CPU", "Mem", "to", "become", "available", "we", "prefer", "to", "fail", "quick", "in", "order", "not", "to", "hold", "up", "the", "caller", "NUMBER", "To", "support", "this", "non", "blocking", "resource", "tracker", "option", "function", "be", "now", "available", "NUMBER", "The", "solution", "be", "not", "perfect", "as", "signaller", "channels", "may", "be", "lost", "and", "it", "might", "take", "additional", "signal", "attempts", "for", "that", "call", "each", "costs", "NUMBER", "msec", "to", "get", "this", "response", "NUMBER", "clarification", "of", "behavior", "shown", "the", "only", "case", "we", "want", "to", "immediately", "bail", "and", "not", "block", "be", "on", "resource", "tokens", "right", "not", "if", "create", "container", "gets", "hung", "up", "docker", "pull", "etc", "NUMBER", "right", "yes", "this", "be", "only", "for", "cpu", "mem", "allocation", "AKA", "do", "not", "wait", "on", "cpu", "mem", "NUMBER", "thinking", "out", "loud", "if", "we", "set", "the", "slot", "wait", "time", "to", "something", "pretty", "small", "like", "NUMBER", "ms", "we", "would", "get", "most", "of", "the", "benefits", "here", "without", "a", "lot", "of", "plumbing", "and", "without", "NUMBER", "ms", "could", "provide", "some", "back", "pressure", "in", "addition", "it", "would", "cover", "cases", "like", "rogue", "scheduling", "onto", "a", "new", "server", "would", "quickly", "fail", "and", "hopefully", "get", "retried", "on", "a", "server", "with", "the", "image", "with", "the", "bonus", "that", "the", "slot", "launcher", "on", "the", "new", "guy", "might", "launch", "a", "container", "for", "the", "next", "go", "round", "NUMBER", "i", "guess", "the", "hot", "launcher", "be", "kind", "of", "unpredictable", "since", "it", "s", "polling", "and", "will", "most", "likely", "NUMBER", "NUMBER", "ms", "chance", "sample", "for", "any", "given", "call", "when", "it", "s", "not", "queued", "since", "it", "times", "out", "after", "NUMBER", "ms", "NUMBER", "part", "of", "me", "thinks", "some", "kind", "of", "NUMBER", "phase", "just", "launch", "a", "hot", "container", "w", "o", "a", "call", "run", "this", "call", "or", "timeout", "immediately", "be", "in", "line", "with", "what", "we", "want", "maybe", "this", "be", "the", "first", "piece", "of", "that", "but", "it", "seems", "like", "we", "really", "want", "to", "either", "get", "a", "slot", "or", "bail", "which", "be", "higher", "up", "little", "plumbing", "required", "NUMBER", "not", "sure", "really", "NUMBER", "of", "course", "we", "don", "t", "have", "a", "just", "launch", "a", "hot", "container", "button", "atm", "but", "it", "wouldn", "t", "be", "so", "hard", "to", "add", "and", "with", "our", "ejection", "it", "can", "manage", "scaling", "down", "itself", "NUMBER", "then", "the", "router", "can", "just", "run", "around", "and", "with", "some", "idea", "of", "resource", "saturation", "itself", "which", "will", "be", "required", "tell", "NUMBER", "guys", "to", "launch", "a", "container", "and", "then", "try", "to", "round", "robin", "through", "them", "with", "a", "call", "until", "one", "can", "run", "it", "NUMBER", "thinking", "out", "loud", "and", "prob", "in", "the", "wrong", "place", "I", "think", "two", "approaches", "be", "complementary", "NUMBER", "Shrinking", "slot", "wait", "be", "a", "good", "way", "to", "pre", "warm", "a", "fleet", "as", "long", "as", "the", "caller", "LB", "has", "smarts", "to", "coordinate", "it", "but", "slot", "wait", "time", "include", "a", "set", "of", "operations", "which", "any", "could", "trigger", "the", "timeout", "NUMBER", "On", "the", "other", "hand", "cpu", "mem", "isolated", "quick", "fail", "allows", "the", "caller", "to", "rule", "out", "capacity", "issue", "only", "NUMBER", "I", "think", "when", "this", "cpu", "mem", "quick", "fail", "be", "enable", "NUMBER", "msec", "should", "be", "set", "to", "much", "faster", "pace", "NUMBER", "And", "probably", "not", "much", "performance", "impact", "due", "to", "reduced", "queuing", "NUMBER", "Wow", "you", "can", "send", "golang", "channels", "through", "a", "channel", "NUMBER", "I", "learn", "something", "new", "every", "day", "NUMBER", "This", "looks", "like", "it", "will", "help", "a", "lot", "but", "I", "m", "still", "a", "bit", "confused", "about", "all", "the", "moving", "parts", "and", "how", "they", "play", "with", "the", "container", "creation", "logic", "NUMBER", "As", "far", "as", "I", "understand", "the", "producer", "be", "monitoring", "the", "stats", "queued", "run", "etc", "and", "makes", "a", "decision", "to", "start", "a", "new", "container", "based", "on", "those", "that", "decision", "seems", "to", "take", "into", "account", "container", "that", "be", "waiting", "for", "resources", "to", "be", "start", "NUMBER", "startWaiters", "cur", "NUMBER", "containerStates", "ContainerStateWait", "NUMBER", "we", "expect", "resource", "waiters", "to", "eventually", "transition", "into", "starters", "NUMBER", "effectiveStarters", "starters", "startWaiters", "in", "isNewContainerNeeded", "Is", "there", "a", "possibility", "that", "while", "a", "container", "be", "waiting", "on", "the", "resource", "token", "channel", "it", "still", "figures", "in", "this", "calculation", "because", "until", "it", "receives", "the", "capacity", "error", "it", "still", "looks", "in", "a", "ContainerStateWait", "so", "another", "call", "could", "think", "that", "it", "can", "be", "queued", "accepted", "because", "there", "s", "a", "container", "which", "will", "eventually", "start", "Is", "such", "a", "race", "between", "calls", "possible", "hhexo", "Yes", "so", "at", "the", "time", "of", "this", "decision", "there", "s", "cases", "where", "momentarily", "have", "excess", "idle", "container", "waiters", "etc", "NUMBER", "which", "might", "cause", "agent", "to", "conclude", "that", "no", "new", "container", "be", "needed", "NUMBER", "But", "this", "should", "be", "remedied", "by", "polling", "from", "clients", "NUMBER", "For", "this", "operate", "mode", "we", "should", "raise", "the", "polling", "to", "something", "faster", "eg", "NUMBER", "NUMBER", "msecs", "NUMBER", "In", "other", "words", "isNewContainerNeeded", "be", "allow", "to", "make", "a", "mistake", "but", "eventually", "correct", "it", "NUMBER", "relate", "NUMBER", "Ping", "NUMBER", "I", "still", "think", "this", "be", "a", "valuable", "option", "NUMBER", "To", "be", "able", "to", "disable", "waiting", "on", "CPU", "Memory", "NUMBER", "Isolating", "these", "resources", "provides", "a", "good", "way", "to", "run", "a", "function", "and", "waiting", "knowing", "that", "you", "be", "waiting", "because", "the", "agent", "will", "most", "likely", "be", "able", "to", "run", "this", "without", "exceeding", "cpu", "memory", "capacity", "of", "that", "server", "NUMBER", "Allows", "a", "simple", "LB", "layer", "to", "probe", "retry", "agents", "without", "any", "significant", "blocking", "on", "CPU", "Memory", "NUMBER", "Added", "some", "comments", "and", "a", "small", "bug", "fix", "in", "there", "NUMBER", "The", "Python", "tutorial", "didn", "t", "work", "as", "write", "NUMBER", "Please", "consider", "these", "update", "which", "I", "test", "against", "a", "local", "brew", "install", "version", "of", "fn", "install", "on", "March", "NUMBER", "NUMBER", "Worth", "mentioning", "that", "func", "NUMBER", "py", "and", "sample", "NUMBER", "payload", "NUMBER", "json", "don", "t", "have", "any", "bearing", "on", "what", "fn", "init", "generates", "for", "you", "nowadays", "and", "it", "might", "make", "sense", "to", "get", "rid", "of", "this", "stuff", "NUMBER", "Note", "NUMBER", "fn", "test", "doesn", "t", "work", "due", "to", "a", "separate", "issue", "NUMBER", "Hopefully", "that", "issue", "will", "be", "resolve", "such", "that", "the", "tutorial", "as", "write", "will", "start", "work", "NUMBER", "Note", "NUMBER", "I", "have", "not", "sign", "the", "CLA", "and", "won", "t", "be", "able", "to", "do", "so", "until", "next", "week", "NUMBER", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "Carter", "Shanklin", "LINK", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "skinowski", "We", "be", "disabling", "this", "flakey", "test", "skinowski", "New", "flappy", "test", "be", "tracked", "in", "NUMBER", "old", "flappy", "test", "be", "tracked", "in", "NUMBER", "While", "talking", "with", "vshiva", "the", "concept", "of", "function", "be", "separate", "from", "routes", "came", "up", "and", "it", "get", "me", "thinking", "a", "bit", "NUMBER", "Currently", "a", "route", "be", "both", "a", "function", "definition", "and", "an", "HTTP", "route", "to", "that", "function", "NUMBER", "But", "what", "about", "when", "you", "don", "t", "want", "or", "need", "an", "HTTP", "route", "to", "the", "function", "A", "function", "needs", "the", "container", "image", "reference", "format", "memory", "timeout", "etc", "NUMBER", "It", "doesn", "t", "care", "about", "HTTP", "or", "what", "protocol", "be", "be", "use", "to", "call", "it", "it", "s", "only", "dependency", "be", "a", "Docker", "registry", "NUMBER", "A", "route", "as", "it", "be", "right", "now", "needs", "things", "like", "path", "image", "name", "some", "HTTP", "specific", "things", "like", "content", "type", "NUMBER", "If", "we", "separate", "function", "then", "it", "would", "need", "a", "reference", "to", "a", "function", "which", "isn", "t", "simply", "a", "Docker", "image", "URL", "NUMBER", "What", "s", "the", "benefit", "Well", "as", "vshiva", "point", "out", "say", "you", "have", "a", "UI", "that", "lets", "you", "tie", "things", "together", "when", "X", "happens", "run", "this", "function", "with", "X", "s", "event", "data", "NUMBER", "How", "that", "s", "hooked", "together", "behind", "the", "scenes", "doesn", "t", "really", "matter", "to", "the", "user", "could", "be", "via", "a", "message", "queue", "could", "be", "a", "webhook", "NUMBER", "This", "get", "me", "thinking", "of", "the", "decades", "old", "function", "hub", "conversations", "cc", "carimura", "but", "perhaps", "more", "of", "a", "function", "registry", "NUMBER", "In", "it", "s", "simplest", "form", "it", "would", "just", "be", "a", "way", "to", "CRUD", "a", "function", "object", "with", "the", "things", "above", "NUMBER", "Then", "when", "we", "create", "routes", "we", "give", "it", "the", "function", "URL", "which", "be", "a", "reference", "into", "the", "registry", "NUMBER", "This", "could", "be", "a", "separate", "API", "in", "itself", "but", "probably", "build", "it", "into", "Fn", "initially", "NUMBER", "Currently", "a", "route", "be", "both", "a", "function", "definition", "and", "an", "HTTP", "route", "to", "that", "function", "NUMBER", "But", "what", "about", "when", "you", "don", "t", "want", "or", "need", "an", "HTTP", "route", "to", "the", "function", "This", "statement", "implies", "to", "Triggers", "API", "NUMBER", "So", "we", "have", "apps", "function", "and", "we", "have", "API", "to", "define", "the", "triggers", "say", "I", "want", "to", "create", "an", "HTTP", "trigger", "to", "my", "function", "NUMBER", "It", "really", "makes", "sense", "to", "start", "this", "type", "of", "the", "discussion", "NUMBER", "Also", "we", "already", "have", "the", "type", "of", "the", "event", "in", "JSON", "protocol", "which", "be", "defaulted", "to", "http", "so", "having", "the", "Triggers", "API", "really", "makes", "sense", "NUMBER", "A", "route", "as", "it", "be", "right", "now", "needs", "things", "like", "path", "image", "name", "some", "HTTP", "specific", "things", "like", "content", "type", "So", "in", "future", "i", "would", "like", "to", "turn", "the", "route", "to", "a", "function", "into", "a", "trigger", "type", "in", "terms", "of", "HTTP", "triggering", "NUMBER", "It", "would", "need", "to", "have", "a", "reference", "to", "the", "function", "and", "an", "HTTP", "path", "attribute", "event", "the", "route", "config", "would", "no", "longer", "make", "sense", "because", "of", "the", "configuration", "really", "belongs", "to", "the", "function", "rather", "than", "to", "a", "route", "NUMBER", "The", "required", "config", "would", "belong", "to", "the", "function", "ie", "it", "defines", "it", "s", "own", "input", "but", "the", "actual", "values", "should", "be", "somewhere", "else", "defined", "by", "the", "user", "who", "s", "use", "the", "function", "NUMBER", "The", "app", "level", "config", "still", "makes", "sense", "maybe", "the", "route", "level", "config", "do", "too", "NUMBER", "If", "it", "s", "use", "the", "example", "above", "where", "there", "s", "no", "route", "then", "maybe", "config", "should", "be", "defined", "in", "the", "trigger", "yes", "I", "ve", "be", "struggling", "a", "bit", "with", "our", "coupling", "of", "routes", "and", "function", "NUMBER", "The", "market", "tends", "to", "think", "of", "things", "as", "function", "and", "triggers", "ala", "the", "major", "providers", "as", "well", "as", "many", "of", "the", "other", "frameworks", "NUMBER", "Denis", "mentions", "this", "above", "NUMBER", "I", "m", "NUMBER", "behind", "splitting", "the", "two", "apart", "NUMBER", "If", "it", "s", "use", "the", "example", "above", "where", "there", "s", "no", "route", "then", "maybe", "config", "should", "be", "defined", "in", "the", "trigger", "How", "do", "you", "see", "the", "trigger", "config", "what", "that", "would", "be", "for", "So", "the", "app", "config", "be", "a", "global", "thing", "for", "function", "function", "s", "config", "be", "unique", "things", "to", "itself", "NUMBER", "I", "do", "see", "a", "need", "to", "leave", "headers", "but", "strip", "out", "config", "because", "it", "has", "nothing", "to", "do", "with", "a", "route", "itself", "this", "be", "what", "we", "have", "right", "now", "but", "useful", "for", "the", "function", "NUMBER", "But", "on", "the", "other", "side", "assume", "i", "want", "to", "trigger", "a", "function", "with", "MQ", "event", "i", "need", "to", "tell", "the", "Fn", "how", "to", "connect", "to", "the", "MQ", "so", "trigger", "config", "may", "be", "useful", "NUMBER", "But", "on", "the", "other", "side", "assume", "i", "want", "to", "trigger", "a", "function", "with", "MQ", "event", "i", "need", "to", "tell", "the", "Fn", "how", "to", "connect", "to", "the", "MQ", "so", "trigger", "config", "may", "be", "useful", "NUMBER", "I", "think", "the", "intent", "of", "trigger", "config", "was", "to", "move", "the", "map", "string", "string", "of", "route", "NUMBER", "Config", "to", "trigger", "NUMBER", "Config", "not", "the", "configuration", "of", "the", "trigger", "itself", "but", "rather", "the", "configuration", "pass", "to", "the", "function", "at", "execution", "time", "NUMBER", "trigger", "configs", "as", "interpreted", "otherwise", "should", "probably", "not", "exist", "in", "fn", "but", "really", "we", "should", "have", "interfaces", "for", "various", "streams", "of", "events", "and", "each", "of", "those", "can", "configure", "itself", "NUMBER", "I", "have", "a", "proposal", "in", "the", "works", "on", "this", "though", "it", "s", "be", "sidelined", "until", "migrations", "work", "for", "me", "NUMBER", "I", "do", "think", "we", "need", "to", "change", "the", "eventing", "model", "of", "fn", "to", "something", "more", "robust", "than", "simply", "http", "events", "and", "our", "own", "async", "bus", "NUMBER", "Loosely", "based", "on", "LINK", "openwhisk", "blob", "master", "docs", "feeds", "NUMBER", "md", "as", "openwhisk", "seems", "to", "have", "do", "a", "great", "job", "here", "for", "definitions", "for", "things", "like", "kafka", "however", "it", "do", "not", "seem", "to", "have", "a", "very", "good", "answer", "around", "the", "push", "based", "model", "which", "I", "think", "we", "need", "to", "support", "as", "well", "NUMBER", "I", "also", "don", "t", "think", "this", "necessary", "precludes", "splitting", "them", "entirely", "apart", "as", "we", "have", "it", "now", "essentially", "each", "function", "s", "identity", "be", "a", "default", "route", "and", "it", "works", "but", "we", "need", "additional", "ways", "to", "say", "call", "function", "X", "when", "I", "pull", "a", "message", "from", "a", "topic", "too", "without", "having", "to", "thread", "through", "the", "http", "frontend", "NUMBER", "Implementation", "details", "aside", "separating", "a", "function", "from", "the", "invocation", "mechanism", "clearly", "makes", "sense", "NUMBER", "I", "always", "assumed", "we", "would", "be", "add", "additional", "mechanisms", "as", "we", "moved", "forward", "NUMBER", "NUMBER", "from", "me", "Couple", "of", "thoughts", "I", "don", "t", "think", "this", "should", "needs", "to", "make", "any", "commitments", "about", "who", "owns", "the", "link", "between", "a", "function", "and", "its", "source", "and", "I", "think", "eventually", "both", "source", "owns", "link", "to", "fn", "and", "fn", "owns", "link", "to", "source", "be", "likely", "and", "possible", "NUMBER", "e", "NUMBER", "g", "NUMBER", "For", "local", "simple", "HTTP", "gateway", "makes", "sense", "to", "orchestrate", "this", "from", "fn", "add", "an", "HTTP", "trigger", "in", "func", "NUMBER", "yaml", "implies", "that", "Fn", "takes", "responsibility", "for", "hooking", "it", "up", "to", "it", "s", "the", "current", "HTTP", "gateway", "for", "more", "complex", "non", "FN", "gateway", "makes", "sense", "to", "specify", "a", "fn", "ID", "ref", "in", "the", "config", "for", "some", "other", "event", "broking", "stack", "it", "s", "that", "plaforms", "stack", "to", "solve", "In", "general", "leaving", "this", "open", "means", "we", "can", "defer", "the", "choice", "as", "to", "whether", "Fn", "needs", "to", "do", "an", "integration", "without", "compromising", "the", "abilly", "for", "somebody", "else", "to", "do", "that", "as", "a", "client", "NUMBER", "Where", "a", "function", "be", "not", "publish", "I", "suggest", "we", "look", "at", "an", "authenticated", "API", "call", "pattern", "to", "send", "events", "directly", "to", "function", "e", "NUMBER", "g", "NUMBER", "a", "model", "based", "on", "current", "raw", "JSON", "ideally", "one", "that", "support", "streaming", "and", "back", "pressure", "NUMBER", "So", "if", "you", "agree", "with", "above", "this", "makes", "sense", "in", "lots", "of", "ways", "for", "me", "We", "can", "keep", "the", "current", "simple", "HTTP", "gateway", "model", "everything", "we", "have", "now", "works", "good", "simple", "first", "experience", "make", "a", "function", "public", "be", "an", "explicit", "choice", "no", "strange", "oddness", "around", "authed", "unauthed", "access", "to", "the", "single", "HTTP", "endpoint", "Stream", "sources", "be", "left", "as", "something", "that", "can", "either", "be", "solve", "within", "e", "NUMBER", "g", "NUMBER", "Async", "calls", "or", "outside", "the", "platform", "e", "NUMBER", "g", "NUMBER", "Kafka", "Connect", "adapter", "denismakogon", "treeder", "So", "in", "future", "i", "would", "like", "to", "turn", "the", "route", "to", "a", "function", "into", "a", "trigger", "type", "in", "terms", "of", "HTTP", "triggering", "NUMBER", "It", "would", "need", "to", "have", "a", "reference", "to", "the", "function", "and", "an", "HTTP", "path", "attribute", "event", "the", "route", "config", "would", "no", "longer", "make", "sense", "because", "of", "the", "configuration", "really", "belongs", "to", "the", "function", "rather", "than", "to", "a", "route", "NUMBER", "Extending", "that", "line", "of", "reasoning", "we", "will", "have", "this", "generic", "notion", "of", "a", "Event", "that", "be", "associated", "with", "mapped", "to", "a", "function", "via", "a", "Trigger", "NUMBER", "LINK", "serverless", "tree", "master", "whitepaper", "event", "source", "to", "function", "association", "So", "far", "example", "NUMBER", "Function", "Foo", "Trigger", "on", "HTTP", "Event", "GET", "POST", "at", "path", "Function", "Foo", "Trigger", "on", "Message", "Q", "Topic", "Event", "NUMBER", "so", "on", "and", "so", "forth", "NUMBER", "so", "we", "can", "end", "up", "with", "a", "whole", "class", "of", "events", "that", "could", "comply", "to", "LINK", "Key", "aspect", "above", "would", "be", "to", "associate", "map", "a", "function", "with", "multiple", "Events", "NUMBER", "I", "NUMBER", "e", "same", "function", "could", "be", "trigged", "by", "multiple", "event", "sources", "NUMBER", "treeder", "The", "required", "config", "would", "belong", "to", "the", "function", "ie", "it", "defines", "it", "s", "own", "input", "but", "the", "actual", "values", "should", "be", "somewhere", "else", "defined", "by", "the", "user", "who", "s", "use", "the", "function", "NUMBER", "The", "app", "level", "config", "still", "makes", "sense", "maybe", "the", "route", "level", "config", "do", "too", "NUMBER", "If", "it", "s", "use", "the", "example", "above", "where", "there", "s", "no", "route", "then", "maybe", "config", "should", "be", "defined", "in", "the", "trigger", "The", "required", "config", "can", "be", "captured", "in", "an", "association", "mapping", "object", "NUMBER", "Freeing", "the", "Function", "to", "truly", "represent", "the", "Code", "NUMBER", "a", "container", "image", "for", "example", "LINK", "_GetEventSourceMapping", "NUMBER", "html", "NUMBER", "Thinking", "about", "it", "can", "somebody", "provide", "me", "with", "a", "concrete", "real", "use", "case", "where", "somebody", "would", "need", "to", "attach", "two", "triggers", "to", "the", "same", "function", "I", "can", "t", "think", "of", "one", "NUMBER", "Examples", "drawn", "from", "say", "CD", "might", "arguably", "be", "the", "same", "trigger", "with", "different", "parameters", "NUMBER", "If", "i", "have", "multiple", "sources", "for", "those", "events", "i", "may", "want", "to", "hand", "out", "credentials", "infividually", "or", "manage", "loggong", "audit", "for", "those", "separately", "NUMBER", "Excuse", "typo", "NUMBER", "Phone", "screens", "don", "t", "make", "great", "ketbroads", "NUMBER", "Original", "message", "From", "Owen", "Cliffe", "TAG", "Date", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "m", "NUMBER", "GMT", "NUMBER", "NUMBER", "To", "fnproject", "fn", "TAG", "Cc", "Subscribed", "TAG", "Subject", "Re", "fnproject", "fn", "discussion", "Splitting", "function", "from", "routes", "nbsp", "NUMBER", "Thinking", "about", "it", "can", "somebody", "provide", "me", "with", "a", "concrete", "real", "use", "case", "where", "somebody", "would", "need", "to", "attach", "two", "triggers", "to", "the", "same", "function", "I", "can", "t", "think", "of", "one", "NUMBER", "You", "be", "receiving", "this", "because", "you", "be", "subscribed", "to", "this", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "or", "mute", "the", "thread", "NUMBER", "api_version", "NUMBER", "publisher", "api_key", "NUMBER", "dde", "NUMBER", "f", "NUMBER", "d", "NUMBER", "a", "NUMBER", "dd", "NUMBER", "c", "NUMBER", "e", "NUMBER", "bb", "name", "GitHub", "entity", "external_key", "github", "fnproject", "fn", "title", "fnproject", "fn", "subtitle", "GitHub", "repository", "main_image_url", "LINK", "NUMBER", "d", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "fc", "NUMBER", "c", "NUMBER", "bb", "NUMBER", "png", "avatar_image_url", "LINK", "NUMBER", "c", "NUMBER", "b", "NUMBER", "e", "NUMBER", "NUMBER", "aed", "b", "NUMBER", "png", "action", "name", "Open", "in", "GitHub", "url", "LINK", "update", "snippets", "icon", "PERSON", "message", "zootalures", "in", "NUMBER", "Thinking", "about", "it", "can", "somebody", "provide", "me", "with", "a", "concrete", "real", "use", "case", "where", "somebody", "would", "need", "to", "attach", "two", "triggers", "to", "the", "same", "function", "r", "n", "r", "nI", "can", "t", "think", "of", "one", "NUMBER", "r", "n", "r", "n", "action", "name", "View", "Issue", "url", "LINK", "issuecomment", "NUMBER", "If", "I", "run", "a", "social", "network", "and", "have", "a", "function", "that", "resizes", "an", "image", "to", "a", "configurable", "size", "and", "outputs", "that", "image", "it", "s", "likely", "that", "there", "be", "multiple", "different", "types", "of", "images", "NUMBER", "say", "profile", "photos", "which", "may", "need", "smaller", "thumbnails", "drawn", "as", "well", "as", "user", "uploaded", "photos", "which", "may", "want", "to", "keep", "varying", "sizes", "of", "for", "mobile", "desktop", "etc", "NUMBER", "it", "s", "likely", "that", "as", "a", "storage", "backend", "these", "images", "be", "not", "all", "going", "to", "be", "stored", "in", "the", "same", "spot", "to", "do", "post", "processing", "from", "though", "this", "isn", "t", "impossible", "it", "seems", "unwise", "at", "a", "certain", "scale", "NUMBER", "but", "I", "would", "like", "to", "trigger", "the", "drawing", "of", "the", "various", "image", "sizes", "needed", "for", "each", "image", "after", "the", "user", "uploads", "it", "into", "my", "storage", "system", "say", "some", "s", "NUMBER", "store", "NUMBER", "this", "means", "when", "there", "be", "a", "new", "user", "and", "they", "upload", "their", "first", "photo", "the", "system", "needs", "to", "create", "a", "bucket", "to", "put", "these", "photos", "and", "attach", "a", "trigger", "onto", "that", "bucket", "w", "the", "photo", "resize", "function", "NUMBER", "it", "follows", "that", "the", "same", "function", "can", "be", "use", "to", "do", "resizing", "across", "all", "of", "the", "various", "images", "woo", "but", "I", "will", "need", "to", "attach", "it", "to", "each", "user", "s", "photo", "bucket", "s", "and", "most", "likely", "wire", "up", "another", "function", "to", "store", "the", "post", "processed", "images", "somewhere", "handy", "I", "think", "that", "works", "as", "an", "example", "but", "i", "m", "only", "NUMBER", "NUMBER", "a", "cup", "in", "today", "NUMBER", "Or", "any", "case", "where", "multiple", "teams", "reuse", "the", "same", "function", "but", "give", "it", "its", "input", "in", "a", "a", "different", "way", "ie", "one", "team", "uses", "Kafka", "while", "another", "just", "wants", "webhook", "Thinking", "about", "it", "can", "somebody", "provide", "me", "with", "a", "concrete", "real", "use", "case", "where", "somebody", "would", "need", "to", "attach", "two", "triggers", "to", "the", "same", "function", "Use", "cases", "akin", "to", "Biz", "logic", "re", "use", "For", "example", "Function", "that", "can", "generate", "invoice", "which", "can", "be", "invoked", "in", "an", "offline", "mode", "due", "to", "a", "event", "in", "a", "queue", "or", "a", "user", "clicking", "a", "button", "that", "says", "generate", "a", "invoice", "now", "NUMBER", "Which", "be", "a", "HTTP", "Trigger", "This", "gives", "us", "the", "notion", "of", "Functions", "as", "a", "collection", "of", "library", "which", "can", "be", "composed", "to", "do", "a", "specific", "business", "flow", "by", "higher", "level", "services", "tool", "NUMBER", "Here", "s", "some", "more", "details", "on", "how", "this", "could", "work", "NUMBER", "Objects", "This", "breaks", "Route", "and", "Function", "apart", "NUMBER", "Routes", "depend", "on", "function", "but", "not", "the", "other", "way", "around", "NUMBER", "go", "type", "Function", "struct", "ID", "string", "repo", "host", "Namespace", "Name", "Tag", "make", "up", "the", "fully", "qualified", "name", "Namespace", "string", "Name", "string", "json", "name", "db", "name", "Memory", "uint", "NUMBER", "json", "memory", "db", "memory", "CPUs", "MilliCPUs", "json", "cpus", "db", "cpus", "hopefully", "this", "be", "just", "a", "hint", "Type", "string", "json", "type", "db", "type", "Format", "string", "json", "format", "db", "format", "Timeout", "int", "NUMBER", "json", "timeout", "db", "timeout", "IdleTimeout", "int", "NUMBER", "json", "idle_timeout", "db", "idle_timeout", "CreatedAt", "strfmt", "NUMBER", "DateTime", "json", "created_at", "omitempty", "db", "created_at", "UpdatedAt", "strfmt", "NUMBER", "DateTime", "json", "updated_at", "omitempty", "db", "updated_at", "type", "FunctionVersion", "struct", "FunctionID", "reference", "to", "Function", "FunctionID", "string", "Tag", "Version", "be", "the", "version", "tag", "of", "a", "specific", "build", "Tag", "Version", "string", "The", "Docker", "image", "for", "this", "build", "NUMBER", "Image", "string", "json", "image", "db", "image", "QUESTION", "Update", "the", "other", "params", "for", "each", "version", "or", "keep", "them", "all", "at", "the", "top", "level", "CreatedAt", "strfmt", "NUMBER", "DateTime", "json", "created_at", "omitempty", "db", "created_at", "UpdatedAt", "strfmt", "NUMBER", "DateTime", "json", "updated_at", "omitempty", "db", "updated_at", "type", "Route", "struct", "The", "grouping", "of", "routes", "into", "an", "app", "be", "specific", "to", "this", "type", "of", "trigger", "AppName", "string", "json", "app_name", "db", "app_name", "Path", "string", "json", "path", "db", "path", "Function", "a", "fully", "qualified", "function", "name", "referencing", "a", "function", "in", "a", "repository", "similar", "to", "a", "Docker", "image", "NUMBER", "eg", "funchub", "NUMBER", "fnproject", "NUMBER", "io", "jimbo", "somefunc", "NUMBER", "Function", "string", "json", "function", "db", "function", "Config", "be", "required", "by", "the", "function", "but", "set", "in", "the", "trigger", "ie", "the", "caller", "NUMBER", "Config", "Config", "json", "config", "omitempty", "db", "config", "Annotations", "trigger", "specific", "Annotations", "Annotations", "json", "annotations", "omitempty", "db", "annotations", "CreatedAt", "strfmt", "NUMBER", "DateTime", "json", "created_at", "omitempty", "db", "created_at", "UpdatedAt", "strfmt", "NUMBER", "DateTime", "json", "updated_at", "omitempty", "db", "updated_at", "Trigger", "specific", "Headers", "Headers", "json", "headers", "omitempty", "db", "headers", "Deploying", "fn", "deploy", "could", "work", "the", "same", "to", "a", "user", "but", "we", "build", "push", "update", "the", "function", "object", "then", "the", "route", "object", "NUMBER", "One", "extra", "step", "NUMBER", "be", "a", "route", "a", "first", "class", "citizen", "or", "be", "it", "a", "trigger", "that", "happens", "to", "be", "an", "http", "trigger", "where", "we", "have", "something", "along", "the", "lines", "of", "annotations", "to", "have", "trigger", "specific", "stuff", "for", "http", "headers", "path", "this", "would", "be", "more", "easily", "extensible", "NUMBER", "birds", "but", "I", "could", "see", "a", "case", "for", "routes", "be", "first", "class", "too", "I", "guess", "NUMBER", "no", "grouping", "of", "function", "both", "seem", "potentially", "useful", "by", "app", "there", "be", "likely", "subsets", "of", "function", "that", "be", "relate", "vs", "having", "a", "giant", "pool", "of", "function", "and", "having", "to", "determine", "their", "relationships", "from", "triggers", "or", "keep", "an", "excel", "sheet", "or", "something", "NUMBER", "should", "function", "have", "id", "and", "version", "and", "be", "able", "to", "point", "lookup", "past", "version", "at", "a", "certain", "id", "otherwise", "how", "to", "see", "history", "for", "a", "certain", "function", "be", "we", "imposing", "a", "version", "format", "so", "that", "these", "could", "be", "guessed", "or", "otherwise", "listed", "thanks", "for", "spec", "a", "great", "start", "There", "doesn", "t", "seem", "to", "be", "a", "standard", "language", "yet", "for", "this", "stuff", "NUMBER", "AWS", "uses", "event", "sources", "Azure", "uses", "triggers", "OpenWhisk", "uses", "triggers", "although", "they", "call", "funcs", "actions", "so", "NUMBER", "I", "vote", "for", "Triggers", "be", "first", "class", "NUMBER", "Am", "going", "to", "try", "to", "calcify", "some", "of", "the", "material", "from", "this", "thread", "into", "something", "cohesive", "to", "pick", "over", "NUMBER", "One", "thing", "that", "sticks", "out", "be", "management", "of", "the", "routing", "table", "itself", "be", "a", "part", "of", "fn", "as", "well", "as", "fn", "owning", "the", "triggers", "their", "configurations", "NUMBER", "I", "think", "it", "may", "be", "easier", "for", "fn", "server", "not", "to", "own", "these", "at", "all", "only", "a", "set", "of", "function", "perhaps", "under", "an", "app", "namespace", "both", "and", "let", "triggers", "do", "their", "own", "configuration", "where", "they", "simply", "push", "events", "to", "fn", "and", "fn", "exposes", "a", "minimal", "surface", "area", "to", "post", "events", "an", "http", "endpoint", "and", "a", "grpc", "endpoint", "and", "get", "a", "response", "NUMBER", "we", "can", "expose", "from", "fn", "start", "an", "fn", "that", "embeds", "a", "gateway", "which", "would", "be", "similar", "to", "fnlb", "in", "nature", "but", "with", "a", "routes", "api", "and", "that", "isn", "t", "directly", "a", "proxy", "but", "also", "translates", "current", "http", "event", "format", "to", "a", "json", "concrete", "event", "format", "that", "has", "an", "api", "for", "the", "routing", "table", "in", "it", "this", "may", "sound", "confusing", "I", "think", "it", "should", "be", "straightforward", "and", "may", "make", "more", "sense", "once", "fleshed", "out", "anyway", "it", "would", "give", "similar", "behavior", "to", "what", "we", "have", "now", "for", "the", "OSS", "get", "start", "story", "to", "keep", "that", "easy", "but", "be", "much", "more", "flexible", "to", "more", "complex", "installs", "NUMBER", "the", "critical", "steps", "here", "seem", "to", "be", "extracting", "function", "and", "event", "out", "hope", "to", "have", "an", "api", "document", "as", "well", "as", "a", "design", "document", "to", "work", "off", "of", "NUMBER", "the", "basic", "idea", "be", "that", "a", "trigger", "be", "capable", "of", "doing", "its", "own", "event", "generation", "transformation", "to", "an", "fn", "event", "and", "invocation", "against", "fn", "where", "e", "NUMBER", "g", "NUMBER", "for", "http", "it", "translates", "url", "paths", "to", "a", "function", "id", "NUMBER", "pre", "empting", "feedback", "of", "general", "idea", "open", "NUMBER", "imo", "we", "should", "wait", "to", "add", "version", "and", "namespacing", "and", "cloud", "events", "format", "as", "this", "be", "a", "pretty", "big", "shift", "in", "its", "own", "right", "NUMBER", "low", "hanging", "fruit", "question", "some", "edit", "in", "be", "apps", "sets", "of", "function", "be", "apps", "sets", "of", "routes", "spending", "some", "time", "traversing", "the", "nulb", "stuff", "to", "figure", "out", "requirements", "there", "it", "seems", "that", "exposing", "a", "grpc", "endpoint", "to", "submit", "events", "be", "enough", "there", "a", "protobuf", "spec", "of", "our", "event", "format", "seems", "easy", "enough", "to", "maintain", "alongside", "json", "NUMBER", "a", "func", "file", "should", "only", "define", "a", "function", "in", "theory", "multiple", "triggers", "or", "routes", "within", "a", "given", "trigger", "could", "point", "to", "a", "certain", "function", "NUMBER", "the", "NUMBER", "NUMBER", "be", "less", "clear", "here", "NUMBER", "Thanks", "for", "bringing", "this", "up", "NUMBER", "First", "of", "all", "I", "d", "like", "to", "answer", "the", "following", "question", "in", "the", "first", "place", "be", "apps", "sets", "of", "function", "That", "do", "seem", "to", "be", "NUMBER", "However", "the", "concept", "of", "applications", "we", "have", "implies", "to", "the", "shared", "configuration", "for", "a", "set", "of", "function", "NUMBER", "be", "apps", "sets", "of", "routes", "I", "don", "t", "think", "so", "NUMBER", "The", "high", "level", "resource", "be", "the", "application", "NUMBER", "Each", "application", "has", "a", "set", "of", "function", "NUMBER", "Each", "function", "can", "have", "N", "unique", "triggers", "NUMBER", "Triggers", "by", "themselves", "be", "independent", "however", "to", "trigger", "a", "function", "user", "have", "to", "create", "an", "association", "between", "function", "and", "the", "trigger", "NUMBER", "Been", "thinking", "about", "how", "the", "application", "could", "be", "useful", "NUMBER", "I", "really", "like", "the", "concept", "of", "the", "Azure", "logic", "apps", "NUMBER", "So", "the", "application", "defines", "the", "pipeline", "of", "actions", "where", "a", "user", "just", "needs", "to", "say", "this", "trusted", "function", "be", "an", "entry", "point", "to", "the", "app", "do", "some", "work", "send", "the", "email", "etc", "NUMBER", "cc", "carimura", "azure", "logic", "app", "concept", "makes", "me", "think", "of", "the", "function", "hub", "one", "more", "time", "but", "in", "the", "context", "of", "the", "trust", "a", "certain", "committee", "with", "approval", "rights", "function", "NUMBER", "However", "logic", "app", "concept", "fits", "better", "suite", "to", "the", "Flow", "doesn", "t", "it", "So", "would", "that", "mean", "that", "Fn", "should", "be", "a", "pretty", "low", "level", "tool", "that", "can", "do", "function", "with", "triggers", "without", "the", "concept", "of", "applications", "To", "sum", "up", "Fn", "should", "do", "function", "triggers", "and", "function", "to", "trigger", "binding", "NUMBER", "a", "func", "file", "should", "only", "define", "a", "function", "It", "might", "have", "a", "trigger", "definition", "but", "it", "s", "not", "required", "NUMBER", "in", "theory", "multiple", "triggers", "or", "routes", "within", "a", "given", "trigger", "could", "point", "to", "a", "certain", "function", "NUMBER", "the", "NUMBER", "NUMBER", "be", "less", "clear", "here", "NUMBER", "So", "Fn", "should", "have", "an", "API", "endpoint", "that", "describes", "available", "triggers", "http", "kafka", "grpc", "mqtt", "etc", "NUMBER", "and", "there", "should", "be", "an", "API", "to", "build", "an", "association", "between", "the", "function", "and", "the", "trigger", "user", "can", "create", "NUMBER", "grpc", "paths", "to", "call", "the", "function", "user", "wants", "to", "call", "a", "function", "by", "push", "the", "message", "into", "NUMBER", "different", "topics", "and", "so", "on", "NUMBER", "thanks", "for", "replies", "NUMBER", "immediate", "one", "that", "sticks", "out", "be", "So", "Fn", "should", "have", "an", "API", "endpoint", "that", "describes", "available", "triggers", "http", "kafka", "grpc", "mqtt", "etc", "NUMBER", "and", "there", "should", "be", "an", "API", "to", "build", "an", "association", "between", "the", "function", "and", "the", "trigger", "user", "can", "create", "NUMBER", "grpc", "paths", "to", "call", "the", "function", "user", "wants", "to", "call", "a", "function", "by", "push", "the", "message", "into", "NUMBER", "different", "topics", "and", "so", "on", "NUMBER", "intuitively", "it", "seems", "like", "a", "trigger", "be", "the", "one", "that", "glues", "some", "thing", "like", "a", "queue", "or", "a", "route", "to", "a", "function", "not", "fn", "server", "itself", "NUMBER", "it", "s", "hard", "to", "think", "about", "make", "a", "generic", "binding", "that", "works", "for", "every", "trigger", "type", "that", "would", "be", "nice", "to", "work", "with", "and", "it", "also", "doesn", "t", "seem", "like", "fn", "server", "necessarily", "cares", "about", "this", "association", "if", "it", "simply", "consumes", "events", "and", "outputs", "them", "NUMBER", "the", "thinking", "be", "that", "each", "trigger", "has", "its", "own", "way", "of", "mapping", "its", "specific", "ingest", "points", "onto", "function", "and", "the", "api", "could", "be", "there", "for", "http", "this", "could", "be", "a", "url", "path", "for", "instance", "as", "it", "be", "now", "NUMBER", "to", "the", "user", "if", "we", "by", "default", "have", "an", "embedded", "gateway", "that", "has", "this", "url", "path", "function", "mapping", "we", "keep", "the", "behavior", "we", "have", "now", "but", "the", "route", "mapping", "be", "push", "into", "the", "gateway", "and", "not", "in", "fn", "server", "itself", "as", "now", "NUMBER", "anyway", "seems", "odd", "to", "have", "fn", "server", "store", "triggers", "and", "mappings", "and", "the", "ux", "might", "get", "pretty", "bad", "trying", "to", "do", "it", "generically", "NUMBER", "thoughts", "I", "don", "t", "think", "so", "NUMBER", "The", "high", "level", "resource", "be", "the", "application", "NUMBER", "Each", "application", "has", "a", "set", "of", "function", "NUMBER", "Each", "function", "can", "have", "N", "unique", "triggers", "NUMBER", "Triggers", "by", "themselves", "be", "independent", "however", "to", "trigger", "a", "function", "user", "have", "to", "create", "an", "association", "between", "function", "and", "the", "trigger", "NUMBER", "yea", "it", "s", "not", "clear", "to", "me", "NUMBER", "it", "seems", "convenient", "to", "have", "bundlings", "for", "both", "that", "aren", "t", "necessarily", "relate", "at", "all", "NUMBER", "for", "example", "function", "apps", "image_resizers", "jpg_resizer_func", "image_resizers", "png_resizer_func", "route", "apps", "face_recognition", "spawn_jpg", "image_resizers", "jpg_resizer_func", "license_plate_detect", "spawn_png", "image_resizers", "png_resizer_func", "cat_thumbnails", "spawn_png", "image_resizers", "png_resizer_func", "at", "least", "per", "previous", "comment", "the", "trigger", "would", "be", "flexible", "to", "implement", "its", "own", "namespacing", "schemes", "as", "such", "and", "it", "more", "becomes", "a", "matter", "of", "do", "we", "offer", "function", "bundling", "by", "app", "in", "the", "fn", "server", "api", "or", "do", "we", "just", "have", "a", "giant", "bucket", "of", "function", "NUMBER", "somewhat", "minimal", "example", "however", "useful", "to", "think", "about", "grouping", "logs", "for", "debugging", "and", "cordoning", "off", "to", "see", "active", "function", "applying", "limits", "etc", "NUMBER", "intuitively", "it", "seems", "like", "a", "trigger", "be", "the", "one", "that", "glues", "some", "thing", "like", "a", "queue", "or", "a", "route", "to", "a", "function", "not", "fn", "server", "itself", "NUMBER", "it", "s", "hard", "to", "think", "about", "make", "a", "generic", "binding", "that", "works", "for", "every", "trigger", "type", "that", "would", "be", "nice", "to", "work", "with", "and", "it", "also", "doesn", "t", "seem", "like", "fn", "server", "necessarily", "cares", "about", "this", "association", "if", "it", "simply", "consumes", "events", "and", "outputs", "them", "NUMBER", "the", "thinking", "be", "that", "each", "trigger", "has", "its", "own", "way", "of", "mapping", "its", "specific", "ingest", "points", "onto", "function", "and", "the", "api", "could", "be", "there", "for", "http", "this", "could", "be", "a", "url", "path", "for", "instance", "as", "it", "be", "now", "NUMBER", "to", "the", "user", "if", "we", "by", "default", "have", "an", "embedded", "gateway", "that", "has", "this", "url", "path", "function", "mapping", "we", "keep", "the", "behavior", "we", "have", "now", "but", "the", "route", "mapping", "be", "push", "into", "the", "gateway", "and", "not", "in", "fn", "server", "itself", "as", "now", "NUMBER", "anyway", "seems", "odd", "to", "have", "fn", "server", "store", "triggers", "and", "mappings", "and", "the", "ux", "might", "get", "pretty", "bad", "trying", "to", "do", "it", "generically", "NUMBER", "thoughts", "I", "guess", "this", "be", "the", "exact", "question", "to", "ask", "NUMBER", "What", "would", "fnserver", "look", "like", "Here", "be", "bits", "of", "API", "that", "Fn", "platform", "should", "have", "MGMT", "API", "for", "creating", "apps", "function", "function", "to", "trigger", "bindings", "NUMBER", "trigger", "interface", "Trigger", "interface", "bothers", "me", "most", "it", "doesn", "t", "look", "good", "to", "have", "a", "single", "process", "that", "exposes", "GRCP", "interface", "HTTP", "interface", "maybe", "with", "GRPC", "since", "both", "use", "http", "don", "t", "know", "MQ", "interface", "NUMBER", "So", "it", "do", "seem", "like", "there", "would", "be", "an", "Fn", "MGMT", "API", "server", "and", "a", "bunch", "of", "trigger", "specific", "processes", "from", "which", "you", "can", "get", "the", "trigger", "URI", "to", "call", "a", "function", "and", "our", "favourite", "one", "agent", "s", "process", "that", "accepts", "the", "event", "and", "do", "the", "work", "it", "do", "at", "this", "moment", "NUMBER", "For", "the", "sake", "of", "the", "simplicity", "we", "can", "utilize", "the", "concept", "of", "the", "full", "server", "as", "we", "do", "now", "to", "have", "all", "in", "one", "box", "to", "keep", "the", "tutorial", "simple", "NUMBER", "Trigger", "interface", "bothers", "me", "most", "it", "doesn", "t", "look", "good", "to", "have", "a", "single", "process", "that", "exposes", "GRCP", "interface", "HTTP", "interface", "maybe", "with", "GRPC", "since", "both", "use", "http", "don", "t", "know", "MQ", "interface", "NUMBER", "the", "hard", "line", "be", "when", "we", "want", "to", "start", "optimizing", "and", "do", "things", "like", "the", "remote", "slot", "thing", "just", "having", "an", "invoke", "event", "endpoint", "isn", "t", "sufficient", "in", "itself", "we", "need", "to", "expose", "capacity", "information", "and", "possibly", "configure", "fn", "to", "behave", "a", "certain", "way", "NUMBER", "for", "other", "kinds", "of", "triggers", "like", "the", "MQ", "trigger", "I", "think", "we", "have", "some", "options", "an", "MQ", "trigger", "could", "be", "baked", "into", "fn", "itself", "and", "invoke", "events", "directly", "against", "the", "agent", "instead", "of", "going", "through", "the", "expose", "invoke", "path", "NUMBER", "we", "need", "to", "think", "about", "cases", "like", "implement", "events", "off", "of", "an", "object", "store", "be", "this", "trigger", "build", "into", "the", "object", "store", "and", "hitting", "our", "invoke", "endpoint", "remotely", "or", "be", "it", "queueing", "events", "against", "something", "and", "fn", "be", "polling", "that", "event", "queue", "agree", "that", "as", "a", "platform", "we", "need", "MGMT", "API", "for", "creating", "apps", "function", "function", "to", "trigger", "bindings", "NUMBER", "and", "this", "not", "necessarily", "be", "in", "fn", "server", "NUMBER", "Additional", "food", "for", "thought", "do", "we", "want", "to", "have", "triggers", "that", "allow", "a", "certain", "trigger", "to", "invoke", "NUMBER", "function", "this", "would", "make", "sense", "to", "have", "an", "API", "to", "manage", "and", "muddles", "at", "least", "what", "I", "had", "thought", "a", "trigger", "was", "defined", "as", "a", "concrete", "thing", "that", "invokes", "function", "e", "NUMBER", "g", "NUMBER", "API", "gateway", "kafka", "connector", "etc", "NUMBER", "to", "steal", "openwhisk", "terms", "what", "I", "think", "we", "have", "be", "calling", "a", "trigger", "be", "a", "feed", "NUMBER", "and", "a", "feed", "invokes", "triggers", "NUMBER", "and", "a", "trigger", "may", "call", "multiple", "actions", "where", "an", "action", "be", "what", "we", "have", "be", "calling", "a", "function", "NUMBER", "this", "flow", "be", "kind", "of", "complicated", "to", "grasp", "but", "it", "be", "pretty", "robust", "once", "you", "get", "the", "hang", "of", "it", "NUMBER", "do", "people", "like", "that", "I", "suppose", "we", "could", "start", "off", "with", "the", "bare", "minimum", "of", "simply", "having", "an", "invoke", "function", "endpoint", "and", "later", "we", "could", "add", "triggers", "in", "that", "capacity", "NUMBER", "and", "start", "calling", "things", "like", "API", "gateway", "a", "feed", "or", "some", "such", "and", "start", "calling", "things", "like", "API", "gateway", "a", "feed", "or", "some", "such", "vessels", "it", "add", "extra", "corn", "to", "the", "docker", "vernacular", "relevant", "change", "in", "Kubeless", "NUMBER", "LINK", "Breaking", "change", "The", "command", "kubeless", "route", "has", "be", "replaced", "with", "kubeless", "trigger", "http", "NUMBER", "This", "will", "create", "a", "new", "Ingress", "rule", "to", "expose", "a", "function", "outside", "the", "cluster", "NUMBER", "You", "can", "now", "also", "specify", "a", "path", "to", "deploy", "your", "function", "NUMBER", "More", "info", "here", "Breaking", "change", "Function", "Triggers", "have", "now", "their", "own", "Custom", "Resources", "NUMBER", "The", "same", "function", "can", "now", "be", "triggered", "from", "several", "event", "sources", "use", "a", "single", "Function", "deployment", "NUMBER", "That", "means", "that", "it", "be", "required", "to", "create", "a", "specific", "Custom", "Resource", "to", "trigger", "function", "use", "Kafka", "message", "or", "with", "a", "scheduled", "cron", "task", "NUMBER", "There", "be", "new", "commands", "available", "to", "do", "so", "check", "kubeless", "trigger", "help", "to", "discover", "these", "commands", "NUMBER", "Architecture", "details", "can", "be", "find", "here", "NUMBER", "OK", "here", "s", "an", "update", "proposal", "Functions", "Functions", "be", "standalone", "entities", "that", "have", "only", "one", "dependency", "a", "Docker", "image", "NUMBER", "They", "will", "have", "some", "URI", "to", "reference", "it", "eg", "fnregistry", "NUMBER", "fnproject", "NUMBER", "io", "NAMESPACE", "FUNCTION", "VERSION", "Models", "go", "type", "Function", "struct", "ID", "string", "repo", "host", "Namespace", "Name", "Tag", "make", "up", "the", "fully", "qualified", "name", "Namespace", "string", "Name", "string", "json", "name", "db", "name", "Memory", "uint", "NUMBER", "json", "memory", "db", "memory", "CPUs", "MilliCPUs", "json", "cpus", "db", "cpus", "hopefully", "this", "be", "just", "a", "hint", "Type", "string", "json", "type", "db", "type", "Format", "string", "json", "format", "db", "format", "Timeout", "int", "NUMBER", "json", "timeout", "db", "timeout", "IdleTimeout", "int", "NUMBER", "json", "idle_timeout", "db", "idle_timeout", "CreatedAt", "strfmt", "NUMBER", "DateTime", "json", "created_at", "omitempty", "db", "created_at", "UpdatedAt", "strfmt", "NUMBER", "DateTime", "json", "updated_at", "omitempty", "db", "updated_at", "type", "FunctionVersion", "struct", "FunctionID", "reference", "to", "Function", "FunctionID", "string", "Tag", "Version", "be", "the", "version", "tag", "of", "a", "specific", "build", "Tag", "Version", "string", "The", "Docker", "image", "for", "this", "build", "NUMBER", "Image", "string", "json", "image", "db", "image", "QUESTION", "Update", "the", "other", "params", "for", "each", "version", "or", "keep", "them", "all", "at", "the", "top", "level", "CreatedAt", "strfmt", "NUMBER", "DateTime", "json", "created_at", "omitempty", "db", "created_at", "UpdatedAt", "strfmt", "NUMBER", "DateTime", "json", "updated_at", "omitempty", "db", "updated_at", "CLI", "interactions", "We", "continue", "to", "have", "a", "func", "NUMBER", "yaml", "for", "function", "that", "defines", "the", "metadata", "for", "the", "models", "above", "NUMBER", "The", "these", "be", "the", "commands", "use", "for", "raw", "function", "NUMBER", "sh", "fn", "build", "fn", "run", "fn", "push", "new", "command", "that", "bumps", "build", "pushes", "image", "update", "function", "object", "and", "version", "Triggers", "Triggers", "replace", "our", "current", "routes", "model", "NUMBER", "Each", "trigger", "associates", "itself", "with", "a", "single", "function", "NUMBER", "Support", "http", "out", "of", "the", "box", "new", "types", "of", "triggers", "can", "be", "add", "with", "extensions", "NUMBER", "Models", "go", "type", "Trigger", "struct", "The", "grouping", "of", "routes", "into", "an", "app", "be", "specific", "to", "this", "type", "of", "trigger", "AppID", "string", "json", "app_id", "db", "app_id", "Function", "a", "fully", "qualified", "function", "name", "referencing", "a", "function", "in", "a", "repository", "NUMBER", "eg", "funchub", "NUMBER", "fnproject", "NUMBER", "io", "jimbo", "somefunc", "NUMBER", "Function", "string", "json", "function", "db", "function", "Config", "be", "required", "by", "the", "function", "but", "set", "in", "the", "trigger", "ie", "the", "caller", "NUMBER", "Config", "Config", "json", "config", "omitempty", "db", "config", "Annotations", "config", "for", "environment", "function", "will", "be", "run", "in", "Annotations", "Annotations", "json", "annotations", "omitempty", "db", "annotations", "CreatedAt", "strfmt", "NUMBER", "DateTime", "json", "created_at", "omitempty", "db", "created_at", "UpdatedAt", "strfmt", "NUMBER", "DateTime", "json", "updated_at", "omitempty", "db", "updated_at", "Type", "of", "trigger", "eg", "http", "default", "timer", "scheduler", "etc", "NUMBER", "Type", "string", "Trigger", "specific", "metadata", "TriggerConfig", "map", "string", "string", "json", "trigger_config", "omitempty", "db", "trigger_config", "Routes", "the", "default", "trigger", "type", "This", "will", "have", "some", "extra", "items", "in", "TriggerConfig", "just", "use", "Go", "here", "to", "be", "consistent", "but", "it", "would", "be", "an", "arbitrary", "map", "NUMBER", "go", "Path", "string", "Headers", "Headers", "CLI", "Interactions", "We", "create", "a", "new", "trigger", "NUMBER", "yaml", "file", "that", "defines", "the", "trigger", "information", "for", "the", "models", "above", "NUMBER", "A", "directory", "can", "have", "a", "trigger", "NUMBER", "yaml", "and", "a", "func", "NUMBER", "yaml", "if", "you", "d", "like", "to", "keep", "them", "together", "NUMBER", "sh", "fn", "deploy", "fn", "push", "update", "trigger", "fn", "TAG", "triggers", "for", "dealing", "with", "triggers", "directly", "similar", "to", "routes", "right", "now", "Apps", "Similar", "to", "apps", "relationship", "to", "routes", "right", "now", "but", "will", "be", "a", "collection", "of", "triggers", "instead", "typically", "an", "http", "route", "but", "can", "be", "any", "type", "of", "trigger", "NUMBER", "App", "triggers", "function", "at", "this", "point", "app", "be", "basically", "a", "trigger", "specific", "grouping", "and", "kind", "of", "goes", "away", "in", "fn", "NUMBER", "not", "sure", "what", "we", "want", "clarifying", "NUMBER", "What", "do", "you", "mean", "this", "goes", "away", "in", "Fn", "And", "let", "s", "not", "blindly", "follow", "OpenWhisk", "should", "avoid", "complexity", "all", "costs", "and", "their", "rules", "look", "essentially", "like", "workflows", "which", "should", "not", "be", "a", "core", "part", "of", "this", "NUMBER", "Always", "KISS", "NUMBER", "simple", "question", "be", "be", "apps", "a", "grouping", "of", "triggers", "or", "a", "grouping", "of", "function", "I", "m", "proposing", "it", "s", "a", "grouping", "of", "triggers", "NUMBER", "And", "since", "triggers", "need", "a", "function", "to", "do", "anything", "it", "s", "kind", "of", "both", "NUMBER", "A", "function", "can", "be", "use", "with", "multiple", "triggers", "NUMBER", "If", "we", "get", "into", "workflow", "down", "the", "road", "a", "trigger", "could", "fire", "off", "a", "workflow", "instead", "of", "a", "function", "similar", "to", "OpenWhisk", "rules", "step", "function", "but", "I", "d", "say", "we", "leave", "that", "out", "of", "NUMBER", "Let", "s", "think", "about", "a", "few", "common", "trigger", "types", "NUMBER", "http", "NUMBER", "timer", "scheduler", "NUMBER", "a", "message", "queue", "kafka", "redis", "etc", "Those", "trigger", "types", "probably", "cover", "nearly", "all", "cases", "or", "be", "I", "miss", "anything", "NUMBER", "We", "ll", "assume", "events", "from", "infrastructure", "or", "other", "SaaS", "apps", "will", "be", "use", "one", "of", "these", "NUMBER", "or", "NUMBER", "NUMBER", "When", "defining", "an", "application", "it", "may", "consist", "entirely", "of", "http", "triggers", "ie", "an", "API", "NUMBER", "But", "you", "may", "need", "some", "periodic", "function", "so", "you", "have", "a", "few", "scheduled", "function", "NUMBER", "And", "you", "may", "listen", "for", "events", "from", "infrastructure", "so", "you", "have", "some", "mq", "triggers", "too", "NUMBER", "It", "s", "the", "triggers", "that", "define", "what", "the", "application", "do", "NUMBER", "Sorry", "change", "it", "to", "trigger", "types", "better", "do", "NUMBER", "One", "small", "thing", "maybe", "with", "another", "PR", "later", "it", "would", "be", "perhaps", "better", "if", "we", "can", "generate", "the", "test", "certs", "instead", "of", "checking", "them", "in", "NUMBER", "One", "to", "do", "probably", "the", "conflict", "cause", "be", "to", "rebase", "this", "on", "opencensus", "change", "make", "relevant", "change", "in", "spans", "traces", "NUMBER", "IMHO", "lb", "agent", "be", "too", "tightly", "coupled", "with", "the", "runner", "agent", "and", "this", "may", "slow", "us", "down", "in", "the", "long", "run", "NUMBER", "LB", "agent", "do", "not", "seem", "to", "have", "much", "common", "with", "runner", "agent", "as", "seen", "from", "remoteSlot", "and", "various", "if", "else", "blocks", "in", "agent", "NUMBER", "submit", "call", "NUMBER", "GetCall", "etc", "NUMBER", "Container", "Request", "state", "in", "runners", "do", "not", "really", "correspond", "to", "the", "same", "state", "in", "LB", "NUMBER", "For", "example", "be", "call", "NUMBER", "Start", "be", "applicable", "in", "this", "case", "Since", "getSlot", "be", "skipped", "all", "of", "this", "lose", "meaning", "including", "a", "XXX", "FXLB", "WAIT", "header", "in", "responses", "was", "this", "intentional", "or", "stats", "counters", "such", "as", "enqueued", "NUMBER", "remoteSlot", "be", "no", "longer", "really", "a", "slot", "but", "a", "pointer", "back", "to", "lb", "agent", "or", "exec", "be", "not", "really", "exec", "but", "an", "LB", "forward", "NUMBER", "Timeouts", "etc", "NUMBER", "be", "a", "bit", "more", "hard", "to", "follow", "NUMBER", "They", "were", "already", "very", "confusing", "in", "current", "agent", "NUMBER", "I", "wonder", "if", "this", "would", "be", "much", "easier", "to", "follow", "and", "maintain", "if", "we", "just", "code", "the", "lb", "agent", "flow", "separately", "without", "trying", "to", "reuse", "any", "runner", "agent", "code", "NUMBER", "I", "haven", "t", "dug", "in", "too", "much", "to", "this", "but", "any", "chance", "this", "could", "be", "implement", "as", "an", "extension", "I", "don", "t", "think", "this", "can", "work", "as", "an", "extension", "because", "there", "be", "so", "much", "private", "stuff", "in", "the", "agent", "package", "that", "an", "extension", "can", "t", "possibly", "hope", "to", "access", "everything", "it", "needs", "e", "NUMBER", "g", "NUMBER", "data", "in", "lowercase", "call", "NUMBER", "We", "even", "wanted", "to", "write", "the", "new", "stuff", "in", "a", "different", "package", "and", "it", "turned", "out", "to", "be", "too", "hard", "NUMBER", "In", "order", "to", "do", "this", "in", "anything", "other", "than", "the", "agent", "package", "we", "d", "need", "to", "open", "up", "a", "lot", "of", "the", "agent", "abstractions", "NUMBER", "This", "be", "partly", "why", "we", "have", "reused", "and", "repurposed", "the", "exist", "abstractions", "to", "implement", "the", "LB", "Agent", "and", "the", "pure", "runner", "NUMBER", "The", "trick", "with", "remoteSlot", "be", "a", "bit", "odd", "but", "the", "alternative", "be", "to", "rewrite", "a", "lot", "of", "the", "agent", "code", "that", "we", "still", "need", "in", "a", "different", "agent", "implementation", "just", "arranged", "slightly", "differently", "NUMBER", "As", "far", "as", "I", "could", "see", "the", "Slot", "interface", "represents", "the", "object", "you", "can", "use", "to", "actually", "run", "and", "terminate", "this", "thing", "because", "the", "interface", "only", "has", "exec", "and", "Close", "methods", "and", "it", "has", "different", "implementations", "for", "hot", "and", "cold", "so", "we", "thought", "of", "add", "a", "remote", "implementation", "NUMBER", "I", "don", "t", "think", "this", "can", "work", "as", "an", "extension", "I", "agree", "in", "its", "current", "aims", "it", "will", "be", "rather", "painful", "to", "move", "_all_", "of", "this", "into", "some", "abstraction", "NUMBER", "I", "ve", "read", "through", "the", "patch", "and", "can", "think", "of", "some", "viable", "work", "product", "that", "uses", "current", "extensions", "though", "these", "be", "free", "to", "modify", "to", "our", "needs", "of", "course", "NUMBER", "In", "no", "way", "be", "this", "meant", "to", "be", "entirely", "prescriptive", "this", "be", "mostly", "a", "guess", "based", "on", "my", "current", "understanding", "of", "the", "machinations", "here", "subsequent", "attempt", "to", "start", "the", "extension", "convo", "extend", "FNLB", "s", "proxy", "layer", "to", "create", "also", "ingest", "a", "grpc", "request", "with", "a", "fully", "constructed", "call", "object", "to", "send", "to", "FN", "extend", "FN", "to", "have", "a", "grpc", "endpoint", "that", "receives", "a", "full", "call", "and", "throw", "it", "against", "agent", "NUMBER", "Submit", "eliding", "pre", "emptive", "slot", "logic", "for", "now", "and", "returns", "an", "object", "with", "the", "call", "execution", "info", "started_at", "status", "etc", "and", "log", "NUMBER", "this", "can", "be", "add", "to", "server", "NUMBER", "Router", "create", "a", "new", "grouper", "pass", "to", "the", "LB", "that", "returns", "a", "different", "set", "of", "nodes", "based", "on", "the", "given", "key", "as", "oppose", "to", "allgrouper", "which", "ignores", "the", "key", "the", "health", "crap", "thing", "needs", "to", "be", "moved", "somewhere", "more", "re", "usable", "but", "perhaps", "copying", "for", "now", "be", "ok", "NUMBER", "this", "seems", "mostly", "a", "lift", "and", "drop", "of", "the", "pool", "manager", "somewhere", "FNLB", "needs", "to", "construct", "a", "call", "from", "CP", "information", "this", "seems", "the", "hardest", "plumbing", "issue", "of", "rev", "NUMBER", "sans", "external", "slots", "it", "seems", "the", "goal", "be", "to", "marry", "an", "API", "node", "and", "the", "LB", "this", "seems", "achievable", "sensible", "NUMBER", "we", "can", "probably", "hook", "fn", "up", "to", "import", "the", "LB", "and", "use", "it", "for", "equiv", "r", "routing", "and", "configure", "an", "API", "node", "its", "routes", "alongside", "if", "the", "LB", "simply", "needs", "to", "interface", "with", "some", "CP", "API", "i", "ve", "lost", "track", "just", "ignore", "that", "last", "bit", "NUMBER", "do", "make", "a", "nil", "agent", "NUMBER", "DataAccess", "layer", "that", "do", "not", "upload", "call", "log", "do", "disable", "the", "async", "poller", "in", "agent", "be", "there", "fatal", "flaws", "with", "future", "work", "in", "skipping", "the", "slot", "plumbing", "out", "for", "now", "the", "above", "seems", "a", "plenty", "large", "chunk", "of", "forward", "progress", "to", "achieve", "NUMBER", "Also", "general", "question", "of", "best", "way", "to", "marry", "an", "API", "node", "and", "an", "LB", "if", "I", "m", "understanding", "correctly", "NUMBER", "Now", "what", "did", "I", "miss", "The", "slot", "plumbing", "be", "solving", "well", "currently", "fail", "to", "solve", "the", "problem", "of", "be", "able", "to", "support", "the", "semantics", "of", "try", "to", "run", "this", "call", "if", "you", "have", "capacity", "right", "now", "commit", "to", "it", "and", "do", "it", "otherwise", "don", "t", "do", "anything", "and", "tell", "me", "you", "can", "t", "run", "it", "do", "not", "queue", "NUMBER", "These", "semantics", "be", "required", "by", "how", "the", "new", "multi", "tenant", "multi", "runner", "dataplane", "be", "supposed", "to", "work", "NUMBER", "At", "the", "moment", "however", "Submit", "be", "only", "able", "to", "perform", "the", "semantics", "of", "queue", "this", "call", "and", "run", "it", "when", "you", "can", "which", "be", "why", "the", "concept", "of", "slot", "reservation", "came", "to", "mind", "as", "a", "possible", "solution", "NUMBER", "Slot", "reservation", "may", "not", "be", "the", "right", "solution", "but", "the", "problem", "be", "there", "NUMBER", "Another", "way", "to", "solve", "this", "could", "be", "to", "split", "Submit", "basically", "change", "the", "interface", "of", "the", "agent", "to", "change", "the", "GetCall", "Submit", "flow", "into", "GetCall", "AllocateResources", "Submit", "then", "we", "d", "have", "more", "control", "on", "the", "behaviour", "of", "AllocateResources", "the", "conditions", "in", "which", "we", "accept", "to", "queue", "the", "call", "or", "fail", "fast", "maybe", "we", "could", "have", "SlotAllocationOptions", "NUMBER", "Or", "as", "a", "narrower", "change", "we", "could", "just", "add", "a", "flag", "to", "Submit", "to", "control", "whether", "to", "queue", "the", "call", "or", "fail", "fast", "NUMBER", "Personally", "I", "perceive", "this", "problem", "as", "miss", "core", "functionality", "required", "to", "implement", "the", "semantics", "we", "need", "and", "I", "would", "like", "to", "see", "this", "in", "the", "open", "source", "rather", "than", "some", "kind", "of", "private", "extension", "NUMBER", "Or", "as", "a", "narrower", "change", "we", "could", "just", "add", "a", "flag", "to", "Submit", "Actually", "that", "probably", "doesn", "t", "work", "because", "we", "need", "to", "make", "the", "decision", "to", "accept", "reject", "the", "call", "_before_", "calling", "Submit", "the", "last", "controllable", "step", "on", "it", "NUMBER", "Ok", "NUMBER", "We", "have", "given", "up", "trying", "to", "add", "functionality", "to", "the", "Agent", "in", "order", "to", "deal", "with", "slot", "reservation", "capacity", "checking", "etc", "NUMBER", "A", "longer", "discussion", "be", "needed", "to", "figure", "out", "how", "to", "extend", "the", "abstractions", "of", "the", "slot", "allocation", "mechanism", "so", "that", "different", "slot", "allocations", "algorithms", "e", "NUMBER", "g", "NUMBER", "queue", "until", "you", "get", "one", "vs", "don", "t", "queue", "and", "fail", "fast", "can", "be", "selected", "NUMBER", "_As", "a", "tactical", "decision_", "we", "have", "moved", "the", "initial", "capacity", "check", "to", "a", "higher", "level", "in", "the", "Pure", "Runner", "NUMBER", "This", "probably", "duplicates", "reimplements", "some", "logic", "but", "it", "gets", "us", "closer", "to", "where", "we", "want", "to", "be", "and", "probably", "remove", "a", "blocker", "for", "this", "PR", "NUMBER", "We", "can", "and", "will", "iterate", "on", "that", "NUMBER", "Having", "remove", "the", "slot", "reservation", "mechanism", "we", "can", "t", "use", "the", "little", "trick", "we", "use", "to", "use", "in", "LB", "Agent", "so", "the", "LB", "Agent", "be", "now", "reimplementing", "Submit", "and", "submit", "up", "to", "the", "point", "where", "a", "slot", "be", "assigned", "then", "a", "remoteSlot", "be", "use", "NUMBER", "A", "side", "note", "seems", "the", "api", "test", "and", "system", "test", "both", "try", "to", "use", "port", "NUMBER", "which", "causes", "port", "collusion", "NUMBER", "Ideally", "test", "should", "bind", "to", "dynamic", "unalloc", "ports", "bind", "port", "NUMBER", "but", "to", "get", "things", "on", "going", "unblocking", "you", "might", "just", "try", "to", "choose", "a", "different", "port", "NUMBER", "a", "quick", "glance", "at", "this", "has", "me", "curious", "whether", "our", "turning", "off", "of", "the", "docker", "logs", "and", "use", "async", "attach", "be", "the", "race", "and", "not", "a", "poorly", "build", "multi", "log", "image", "though", "i", "look", "forward", "to", "remove", "this", "image", "i", "can", "t", "imagine", "it", "s", "doing", "anything", "that", "crazy", "NUMBER", "to", "be", "clear", "want", "to", "move", "forward", "with", "this", "and", "thanks", "for", "doing", "it", "just", "get", "me", "thinking", "about", "the", "root", "of", "the", "issue", "since", "when", "it", "happens", "it", "seems", "to", "skip", "the", "first", "line", "and", "it", "seems", "pursuant", "to", "a", "log", "race", "NUMBER", "i", "think", "the", "race", "exists", "but", "be", "more", "far", "fetched", "for", "hot", "NUMBER", "if", "attach", "takes", "longer", "than", "start", "hand", "out", "of", "slot", "then", "we", "can", "miss", "logs", "NUMBER", "attach", "be", "do", "in", "parallel", "to", "that", "so", "it", "could", "happen", "NUMBER", "previously", "we", "streamed", "all", "logs", "up", "to", "attach", "time", "which", "prevented", "this", "bug", "NUMBER", "it", "seems", "like", "we", "just", "need", "to", "add", "synchronous", "attachment", "to", "the", "container", "and", "add", "our", "own", "goroutine", "that", "we", "can", "manage", "so", "that", "we", "can", "properly", "manage", "the", "logs", "it", "s", "very", "much", "worth", "turning", "off", "the", "json", "logs", "NUMBER", "in", "any", "event", "we", "can", "do", "that", "separately", "can", "file", "another", "issue", "yea", "i", "think", "it", "s", "just", "racy", "multi", "log", "test", "waffled", "back", "and", "forth", "without", "re", "plumbing", "the", "context", "for", "launch", "hot", "i", "see", "some", "nascient", "issue", "container", "will", "go", "launch", "when", "convenient", "even", "after", "the", "request", "that", "spawned", "them", "be", "long", "gone", "on", "a", "loaded", "system", "we", "can", "bail", "outta", "this", "way", "before", "the", "hot", "launcher", "loop", "will", "be", "going", "run", "a", "bunch", "of", "calls", "and", "doing", "async", "removal", "be", "going", "to", "backlog", "docker", "for", "removals", "this", "just", "means", "we", "end", "up", "queued", "in", "a", "different", "place", "than", "before", "as", "long", "as", "we", "hold", "the", "resource", "token", "over", "docker", "removal", "we", "won", "t", "over", "provision", "the", "system", "at", "the", "same", "rate", "as", "now", "NUMBER", "it", "seems", "like", "a", "slightly", "better", "cut", "point", "may", "be", "to", "skip", "the", "slot", "queue", "but", "i", "m", "not", "sure", "of", "issue", "there", "intuitively", "seems", "ok", "NUMBER", "then", "we", "at", "least", "get", "the", "same", "execution", "path", "we", "just", "lop", "off", "the", "launcher", "NUMBER", "Closing", "this", "for", "now", "as", "the", "result", "ended", "up", "be", "equally", "complicated", "and", "also", "the", "main", "line", "has", "evolved", "significantly", "NUMBER", "One", "of", "the", "biggest", "gains", "out", "of", "this", "was", "the", "side", "effect", "of", "make", "all", "cold", "test", "go", "through", "hot", "to", "increase", "coverage", "but", "this", "be", "also", "debatable", "with", "code", "littered", "with", "if", "cold", "branch", "NUMBER", "We", "can", "re", "attempt", "this", "going", "forward", "but", "I", "m", "closing", "this", "for", "now", "NUMBER", "FAIL", "TestMultiLog", "NUMBER", "s", "exec_test", "NUMBER", "go", "NUMBER", "Sync", "execution", "call", "ID", "NUMBER", "C", "NUMBER", "C", "NUMBER", "BA", "NUMBER", "T", "NUMBER", "WG", "NUMBER", "exec_test", "NUMBER", "go", "NUMBER", "Log", "entry", "must", "contain", "First", "line", "string", "but", "get", "Second", "line", "this", "be", "in", "the", "api", "test", "i", "think", "and", "be", "habitually", "a", "flaky", "test", "offender", "for", "one", "reason", "or", "another", "NUMBER", "aside", "from", "not", "test", "tricky", "behaviors", "in", "the", "api", "test", "at", "all", "we", "should", "fix", "this", "situation", "NUMBER", "the", "api", "test", "here", "simply", "can", "check", "that", "the", "log", "endpoint", "returns", "a", "log", "that", "s", "all", "we", "need", "to", "do", "and", "there", "be", "multiple", "test", "for", "that", "NUMBER", "Note", "possibly", "relate", "to", "new", "flaky", "test", "issue", "NUMBER", "I", "have", "confirmed", "this", "be", "still", "an", "issue", "after", "NUMBER", "FAIL", "TestRouteRunnerExecution", "NUMBER", "s", "runner_test", "NUMBER", "go", "NUMBER", "Test", "NUMBER", "GetLog", "read", "IO", "call_id", "NUMBER", "C", "NUMBER", "PNVZP", "NUMBER", "WJM", "NUMBER", "cannot", "find", "EndOfLogs", "in", "logs", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "BeginOfLogs", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Received", "format", "http", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Received", "request", "main", "NUMBER", "AppRequest", "SleepTime", "NUMBER", "ResponseCode", "NUMBER", "ResponseContentType", "JasonContentType", "EchoContent", "IsDebug", "true", "IsCrash", "false", "ReadFile", "ReadFileSize", "NUMBER", "CreateFile", "CreateFileSize", "NUMBER", "AllocateMemory", "NUMBER", "LeakMemory", "NUMBER", "TrailerRepeat", "NUMBER", "InvalidResponse", "false", "PostSleepTime", "NUMBER", "PostOutGarbage", "PostErrGarbage", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Received", "headers", "map", "User", "Agent", "Go", "http", "client", "NUMBER", "Content", "Length", "NUMBER", "Fn_call_id", "NUMBER", "C", "NUMBER", "PNVZP", "NUMBER", "WJM", "NUMBER", "Fn_deadline", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Fn_method", "GET", "Fn_request_url", "LINK", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Received", "config", "map", "PATH", "usr", "local", "sbin", "usr", "local", "bin", "usr", "sbin", "usr", "bin", "sbin", "bin", "ENABLE_FOOTER", "yes", "FN_APP_NAME", "myapp", "FN_PATH", "myhot", "FN_FORMAT", "http", "HOME", "root", "HOSTNAME", "default", "NUMBER", "c", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "d", "NUMBER", "d", "NUMBER", "c", "NUMBER", "b", "a", "NUMBER", "c", "NUMBER", "d", "NUMBER", "FN_TYPE", "sync", "ENABLE_HEADER", "yes", "FN_MEMORY", "NUMBER", "LINK", "ought", "to", "close", "MultiLog", "possibly", "that", "one", "too", "they", "look", "similar", "though", "that", "looks", "possibly", "relate", "to", "not", "closing", "the", "log", "before", "uploading", "a", "guess", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "sachin", "pikle", "LINK", "pikle", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "sachin", "pikle", "LINK", "pikle", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "sachin", "pikle", "LINK", "pikle", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "sachin", "pikle", "LINK", "pikle", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "CLA", "Bot", "All", "committers", "have", "sign", "the", "CLA", "NUMBER", "Ok", "NUMBER", "Thank", "you", "for", "the", "review", "comments", "NUMBER", "The", "more", "I", "think", "about", "your", "comments", "and", "the", "way", "it", "should", "work", "be", "the", "prometheus", "yaml", "and", "the", "dashboard", "json", "file", "belong", "in", "the", "fn", "project", "NUMBER", "They", "be", "an", "integral", "part", "of", "fn", "s", "monitoring", "story", "i", "NUMBER", "e", "NUMBER", "batteries", "include", "but", "replaceable", "or", "extendable", "NUMBER", "Anyone", "be", "it", "compose", "or", "helm", "or", "tutorials", "or", "anyone", "else", "that", "needs", "an", "integrated", "set", "up", "of", "Fn", "Prometheus", "Grafana", "with", "our", "NUMBER", "dashboards", "should", "refer", "point", "to", "these", "file", "instead", "of", "duplicating", "them", "NUMBER", "I", "will", "let", "Shaun", "chime", "in", "and", "then", "update", "the", "PRs", "accordingly", "NUMBER", "Longer", "term", "Ideally", "fn", "start", "should", "have", "an", "additional", "option", "to", "start", "with", "ootb", "monitoring", "prometheus", "grafana", "NUMBER", "default", "dashboards", "enable", "NUMBER", "Closing", "this", "Pull", "Request", "NUMBER", "Will", "open", "a", "new", "one", "if", "needed", "NUMBER", "Hi", "Will", "you", "provide", "support", "for", "C", "language", "support", "also", "You", "can", "effectively", "package", "them", "as", "NUMBER", "NET", "core", "container", "and", "deploy", "them", "NUMBER", "Thanks", "and", "regards", "it", "might", "be", "easy", "to", "support", "NUMBER", "Net", "core", "since", "it", "be", "opensource", "and", "run", "on", "all", "the", "platforms", "NUMBER", "including", "Linux", "and", "Mac", "NUMBER", "That", "would", "be", "a", "great", "language", "to", "add", "to", "the", "support", "list", "NUMBER", "You", "can", "do", "that", "at", "this", "moment", "no", "need", "to", "wait", "for", "the", "FDK", "NUMBER", "Just", "make", "sure", "your", "function", "packaged", "to", "the", "docker", "image", "and", "can", "accept", "request", "through", "the", "STDIN", "and", "write", "response", "back", "to", "the", "STDOUT", "NUMBER", "Can", "I", "get", "a", "sample", "code", "or", "some", "blog", "links", "that", "will", "help", "us", "understand", "this", "hi", "VenkateshSrini", "docs", "for", "function", "formats", "be", "LINK", "format", "NUMBER", "md", "but", "you", "could", "get", "start", "just", "implement", "default", "it", "be", "easiest", "just", "plaintext", "over", "STDIN", "STDOUT", "NUMBER", "we", "have", "a", "few", "fdks", "the", "go", "one", "be", "pretty", "concise", "LINK", "go", "if", "you", "d", "like", "an", "example", "to", "work", "from", "to", "build", "json", "format", "NUMBER", "As", "mention", "you", "simply", "need", "to", "Dockerize", "a", "dotnet", "core", "application", "NUMBER", "Create", "a", "new", "directory", "on", "a", "machine", "with", "Docker", "and", "dotnet", "core", "sdk", "this", "example", "uses", "v", "NUMBER", "you", "may", "use", "dotnetcore", "sdk", "NUMBER", "so", "long", "as", "you", "make", "change", "in", "the", "FROM", "instructions", "in", "the", "Docker", "file", "below", "mkdir", "test", "NUMBER", "cd", "test", "NUMBER", "Create", "a", "simple", "console", "app", "via", "the", "sdk", "cli", "tool", "dotnet", "console", "new", "Edit", "the", "generate", "Program", "NUMBER", "cs", "to", "match", "file", "below", "use", "System", "namespace", "test", "NUMBER", "public", "class", "Program", "static", "void", "Main", "string", "args", "if", "Console", "NUMBER", "IsInputRedirected", "Console", "NUMBER", "WriteLine", "Input", "stream", "not", "redirected", "return", "string", "input", "Console", "NUMBER", "In", "NUMBER", "ReadToEnd", "if", "input", "NUMBER", "Length", "NUMBER", "Console", "NUMBER", "WriteLine", "Input", "be", "zero", "length", "or", "null", "NUMBER", "return", "echo", "what", "was", "pass", "in", "back", "to", "STDOUT", "of", "course", "typically", "you", "would", "use", "Newtson", "json", "Nuget", "package", "to", "parse", "into", "a", "rich", "object", "model", "and", "execute", "some", "functionality", "Console", "NUMBER", "WriteLine", "Passed", "to", "function", "input", "Create", "a", "Dockerfile", "at", "the", "same", "directory", "level", "of", "the", "generate", "cs", "project", "file", "clean", "with", "no", "build", "_bin_", "or", "_obj_", "directories", "FROM", "microsoft", "dotnet", "NUMBER", "runtime", "alpine", "AS", "base", "NUMBER", "mb", "WORKDIR", "app", "FROM", "microsoft", "dotnet", "NUMBER", "sdk", "AS", "build", "WORKDIR", "src", "COPY", "test", "NUMBER", "csproj", "NUMBER", "RUN", "dotnet", "restore", "COPY", "NUMBER", "NUMBER", "WORKDIR", "src", "RUN", "dotnet", "build", "c", "Release", "o", "app", "FROM", "build", "AS", "publish", "RUN", "dotnet", "publish", "c", "Release", "o", "app", "FROM", "base", "AS", "final", "WORKDIR", "app", "COPY", "from", "publish", "app", "NUMBER", "ENTRYPOINT", "dotnet", "test", "NUMBER", "dll", "Execute", "a", "docker", "build", "docker", "login", "and", "push", "to", "your", "repository", "docker", "login", "docker", "build", "NUMBER", "t", "yourrepository", "yournewimagename", "Create", "a", "function", "and", "point", "to", "the", "new", "image", "your", "created", "image", "yourrepository", "yournewimagename", "latest", "I", "might", "be", "interested", "in", "build", "a", "C", "FDK", "if", "I", "get", "some", "free", "time", "NUMBER", "Is", "there", "documentation", "on", "the", "contract", "that", "FDKs", "need", "to", "provide", "or", "would", "looking", "at", "an", "exist", "one", "like", "the", "Go", "one", "and", "porting", "the", "same", "API", "across", "be", "the", "best", "approach", "Daniel", "NUMBER", "hi", "thanks", "for", "stepping", "up", "here", "s", "the", "doc", "you", "ve", "asked", "for", "LINK", "format", "NUMBER", "md", "Generally", "you", "be", "right", "try", "to", "see", "how", "other", "FDKs", "implement", "NUMBER", "Also", "you", "mind", "this", "article", "quite", "useful", "LINK", "tips", "for", "a", "new", "fdk", "development", "NUMBER", "f", "NUMBER", "c", "NUMBER", "I", "start", "work", "on", "this", "Thanks", "for", "the", "links", "denismakogon", "Very", "useful", "I", "m", "use", "those", "docs", "plus", "use", "the", "Node", "NUMBER", "js", "FDK", "as", "a", "reference", "since", "it", "seems", "to", "have", "the", "simplest", "implementation", "NUMBER", "I", "get", "a", "basic", "NUMBER", "NET", "Core", "FDK", "work", "Docs", "be", "here", "LINK", "dotnet", "NUMBER", "Let", "me", "know", "if", "you", "have", "any", "question", "NUMBER", "I", "ll", "see", "if", "I", "can", "work", "out", "how", "to", "add", "it", "as", "a", "template", "in", "the", "CLI", "NUMBER", "For", "now", "you", "need", "to", "manually", "create", "a", "C", "project", "the", "Dockerfile", "and", "the", "func", "NUMBER", "yaml", "file", "NUMBER", "you", "can", "start", "with", "init", "image", "concept", "we", "have", "for", "such", "cases", "see", "LINK", "wider", "language", "support", "in", "fn", "with", "init", "images", "a", "NUMBER", "a", "NUMBER", "b", "NUMBER", "a", "NUMBER", "e", "denismakogon", "How", "be", "the", "build", "steps", "defined", "with", "init", "images", "For", "example", "I", "tried", "the", "one", "in", "that", "Medium", "article", "fn", "init", "init", "image", "mjg", "NUMBER", "java", "init", "and", "when", "you", "build", "it", "it", "knows", "to", "run", "Maven", "NUMBER", "However", "I", "do", "not", "see", "that", "in", "any", "of", "the", "generate", "file", "NUMBER", "Is", "that", "knowledge", "still", "hardcoded", "into", "the", "Fn", "CLI", "as", "the", "generate", "func", "NUMBER", "yaml", "uses", "runtime", "java", "Well", "build", "steps", "for", "java", "code", "be", "build", "in", "into", "Fn", "CLI", "true", "NUMBER", "However", "Fn", "CLI", "also", "recognizes", "Dockerfiles", "NUMBER", "So", "all", "you", "have", "to", "do", "be", "to", "write", "your", "own", "dockerfile", "and", "Fn", "will", "use", "that", "to", "build", "an", "image", "NUMBER", "Right", "thanks", "NUMBER", "My", "instructions", "for", "fdk", "dotnet", "involve", "manually", "creating", "a", "Dockerfile", "at", "the", "moment", "NUMBER", "I", "ll", "bundle", "all", "of", "that", "into", "an", "init", "image", "soon", "NUMBER", "Created", "an", "issue", "to", "track", "it", "LINK", "dotnet", "issue", "NUMBER", "We", "can", "likely", "close", "this", "issue", "now", "given", "my", "work", "on", "the", "NUMBER", "NET", "FDK", "we", "should", "likely", "document", "community", "support", "version", "of", "the", "fdk", "in", "docs", "somewhere", "I", "was", "going", "to", "try", "write", "a", "C", "tutorial", "for", "the", "site", "once", "I", "package", "everything", "up", "into", "an", "init", "image", "NUMBER", "Daniel", "NUMBER", "we", "also", "have", "Medium", "blog", "so", "would", "be", "nice", "to", "have", "your", "future", "post", "available", "there", "as", "well", "ask", "carimura", "when", "you", "ll", "have", "something", "to", "post", "NUMBER", "Meanwhile", "rdallman", "be", "we", "ready", "to", "accept", "new", "FDKs", "under", "Fn", "umbrella", "We", "have", "a", "fairly", "standard", "format", "for", "the", "tutorials", "now", "see", "the", "Node", "NUMBER", "js", "or", "Python", "tutorials", "see", "LINK", "So", "you", "can", "create", "your", "own", "or", "you", "can", "go", "the", "Medium", "route", "and", "have", "me", "create", "the", "tutorials", "NUMBER", "Just", "let", "me", "know", "NUMBER", "I", "like", "the", "first", "idea", "we", "do", "have", "identical", "tutorials", "for", "various", "langs", "we", "support", "so", "Daniel", "NUMBER", "can", "we", "ask", "you", "to", "write", "your", "own", "use", "one", "of", "the", "exist", "ones", "pick", "one", "you", "like", "NUMBER", "Later", "we", "d", "sort", "out", "how", "to", "turn", "it", "into", "a", "medium", "post", "NUMBER", "rdallman", "That", "s", "sounds", "good", "to", "me", "NUMBER", "We", "just", "add", "the", "subheading", "to", "that", "page", "when", "the", "FDK", "be", "ready", "NUMBER", "Init", "image", "works", "great", "fn", "init", "init", "image", "daniel", "NUMBER", "fn", "dotnet", "init", "I", "ll", "try", "to", "submit", "a", "tutorial", "for", "the", "site", "soon", "NUMBER", "nice", "Daniel", "NUMBER", "I", "think", "this", "can", "be", "close", "now", "NUMBER", "C", "tutorial", "be", "up", "LINK", "stops", "defaulting", "to", "application", "json", "NUMBER", "this", "was", "something", "awful", "go", "stdlib", "has", "a", "func", "to", "detect", "content", "type", "NUMBER", "sadly", "it", "doesn", "t", "contain", "json", "but", "we", "can", "do", "a", "pretty", "good", "job", "by", "checking", "for", "an", "open", "NUMBER", "there", "be", "other", "fish", "in", "the", "sea", "and", "now", "we", "handle", "them", "nicely", "instead", "of", "saying", "it", "s", "a", "json", "when", "it", "s", "not", "NUMBER", "a", "test", "confirms", "this", "there", "should", "be", "no", "breakage", "for", "any", "routes", "returning", "a", "json", "blob", "that", "were", "relying", "on", "us", "defaulting", "to", "this", "format", "granted", "that", "they", "start", "with", "a", "NUMBER", "buffers", "output", "now", "to", "a", "buffer", "for", "all", "protocol", "types", "default", "be", "no", "longer", "left", "out", "in", "the", "cold", "NUMBER", "use", "a", "little", "response", "writer", "so", "that", "we", "can", "still", "let", "users", "write", "headers", "from", "their", "function", "NUMBER", "this", "be", "useful", "for", "content", "type", "detection", "instead", "of", "having", "to", "do", "it", "in", "multiple", "places", "NUMBER", "plumbs", "the", "little", "content", "type", "bit", "into", "fn", "test", "util", "just", "so", "we", "can", "test", "it", "we", "don", "t", "want", "to", "put", "this", "in", "the", "fdk", "since", "it", "s", "redundant", "NUMBER", "I", "be", "totally", "in", "favor", "of", "get", "rid", "of", "content", "type", "from", "the", "top", "level", "json", "blurb", "NUMBER", "it", "s", "redundant", "at", "best", "and", "can", "have", "confusing", "behaviors", "if", "a", "user", "uses", "both", "the", "headers", "and", "the", "content_type", "field", "we", "override", "with", "the", "latter", "now", "NUMBER", "it", "s", "client", "protocol", "specific", "to", "http", "to", "a", "certain", "degree", "other", "protocols", "may", "use", "this", "concept", "but", "have", "their", "own", "way", "to", "set", "it", "like", "http", "do", "in", "headers", "NUMBER", "NUMBER", "I", "realize", "that", "it", "mostly", "exists", "because", "it", "s", "somewhat", "gross", "to", "have", "to", "index", "a", "list", "from", "the", "headers", "in", "certain", "languages", "more", "than", "others", "but", "with", "the", "behavior", "be", "it", "really", "worth", "it", "close", "NUMBER", "skinowski", "i", "know", "there", "s", "work", "to", "do", "the", "buffering", "in", "NUMBER", "I", "be", "happy", "to", "line", "up", "behind", "that", "I", "do", "not", "know", "if", "this", "makes", "your", "life", "easier", "in", "NUMBER", "or", "not", "sorry", "if", "so", "NUMBER", "Why", "wouldn", "t", "content", "type", "be", "top", "level", "Doesn", "t", "matter", "what", "protocol", "it", "be", "that", "s", "a", "must", "have", "NUMBER", "Why", "wouldn", "t", "content", "type", "be", "top", "level", "Doesn", "t", "matter", "what", "protocol", "it", "be", "that", "s", "a", "must", "have", "NUMBER", "each", "protocol", "that", "has", "this", "concept", "seems", "likely", "to", "have", "their", "own", "concept", "of", "how", "to", "expose", "it", "NUMBER", "maybe", "it", "has", "a", "capital", "C", "and", "a", "capital", "L", "maybe", "there", "s", "an", "underscore", "in", "between", "the", "two", "maybe", "it", "s", "a", "dash", "maybe", "it", "s", "an", "ascii", "shrug", "NUMBER", "grpc", "for", "example", "only", "has", "application", "grpc", "so", "contentType", "be", "a", "little", "bit", "out", "of", "place", "i", "realize", "it", "s", "the", "type", "of", "the", "body", "and", "we", "d", "need", "a", "grpc", "struct", "that", "fits", "our", "needs", "which", "could", "have", "content", "type", "to", "describe", "the", "body", "which", "for", "protobufs", "the", "way", "to", "say", "this", "idiomatically", "would", "be", "contentType", "but", "the", "fact", "that", "it", "did", "not", "even", "work", "until", "this", "patch", "means", "that", "it", "s", "probably", "pretty", "safe", "to", "remove", "it", "from", "output", "at", "least", "NUMBER", "the", "input", "one", "we", "could", "leave", "since", "it", "appears", "at", "least", "the", "ruby", "fdk", "be", "use", "it", "but", "but", "symmetry", "NUMBER", "it", "be", "duplicate", "in", "headers", "on", "input", "as", "well", "NUMBER", "What", "do", "you", "mean", "it", "didn", "t", "work", "It", "s", "fed", "into", "the", "function", "that", "s", "all", "the", "work", "it", "has", "to", "do", "NUMBER", "What", "do", "you", "mean", "it", "didn", "t", "work", "It", "s", "fed", "into", "the", "function", "that", "s", "all", "the", "work", "it", "has", "to", "do", "NUMBER", "it", "didn", "t", "work", "LINK", "this", "patch", "also", "be", "the", "first", "to", "hook", "it", "up", "NUMBER", "it", "didn", "t", "work", "NUMBER", "Oh", "sorry", "was", "thinking", "about", "the", "content_type", "for", "input", "which", "did", "work", "NUMBER", "Although", "content_type", "be", "still", "required", "for", "output", "NUMBER", "Anyways", "NUMBER", "LGTM", "NUMBER", "rdallman", "want", "to", "fix", "those", "conflict", "then", "merge", "thanks", "skinowski", "update", "NUMBER", "nobody", "caught", "this", "one", "default", "be", "no", "longer", "left", "out", "in", "the", "cold", "boo", "miss", "as", "in", "miss", "a", "joke", "rdallman", "this", "be", "rebased", "cleanup", "now", "which", "be", "essentially", "your", "pipe", "clamp", "change", "NUMBER", "NOTE", "this", "would", "keep", "default", "intact", "to", "maintain", "the", "easy", "to", "get", "start", "ness", "this", "could", "turn", "into", "a", "discussion", "of", "that", "but", "that", "s", "not", "really", "the", "intent", "i", "NUMBER", "e", "NUMBER", "this", "be", "not", "intended", "to", "be", "a", "discussion", "of", "remove", "cold", "format", "altogether", "nor", "change", "the", "default", "format", "to", "hot", "NUMBER", "HTTP", "format", "be", "the", "original", "hot", "format", "NUMBER", "JSON", "format", "at", "present", "provides", "similar", "functionality", "and", "be", "support", "in", "every", "fdk", "for", "framing", "hot", "request", "NUMBER", "benefits", "of", "HTTP", "over", "json", "it", "s", "possible", "to", "stream", "sync", "http", "request", "directly", "into", "and", "out", "of", "the", "container", "from", "the", "http", "client", "NUMBER", "this", "reduces", "memory", "overhead", "and", "allows", "a", "user", "to", "do", "things", "like", "potentially", "hijack", "a", "request", "or", "stream", "chunked", "data", "in", "or", "out", "without", "having", "to", "buffer", "the", "entire", "request", "in", "or", "out", "NUMBER", "json", "format", "has", "to", "ingest", "an", "entire", "request", "body", "client", "and", "response", "body", "container", "at", "present", "NUMBER", "though", "it", "would", "be", "possible", "to", "extend", "this", "for", "json", "NUMBER", "and", "http", "be", "no", "longer", "doing", "this", "NUMBER", "exactly", "NUMBER", "it", "s", "possible", "we", "could", "want", "to", "take", "advantage", "of", "other", "http", "features", "and", "would", "have", "to", "add", "these", "to", "json", "explicitly", "whereas", "with", "http", "they", "be", "there", "I", "offer", "no", "concrete", "example", "NUMBER", "reasons", "to", "standardize", "our", "vernacular", "for", "hot", "cold", "be", "translated", "into", "default", "http", "json", "and", "this", "verbiage", "be", "confusing", "for", "users", "NUMBER", "if", "we", "pick", "one", "hot", "format", "we", "could", "call", "this", "format", "hot", "instead", "of", "json", "where", "hot", "just", "happens", "to", "be", "json", "and", "users", "would", "implement", "this", "NUMBER", "this", "would", "clear", "up", "the", "vocabulary", "NUMBER", "we", "could", "have", "hot", "cold", "or", "hot", "default", "or", "something", "along", "these", "lines", "NUMBER", "for", "version", "this", "if", "we", "change", "the", "json", "protocol", "at", "some", "point", "it", "s", "trivial", "to", "add", "hot", "NUMBER", "or", "something", "along", "those", "lines", "NUMBER", "not", "every", "fdk", "can", "support", "http", "format", "which", "means", "we", "have", "an", "awkward", "mix", "of", "having", "to", "match", "routes", "with", "their", "abilities", "based", "on", "the", "code", "which", "be", "somewhat", "true", "for", "hot", "cold", "as", "it", "be", "but", "with", "NUMBER", "hot", "formats", "exacerbates", "this", "NUMBER", "bug", "features", "of", "support", "both", "formats", "surface", "area", "be", "reduced", "by", "NUMBER", "NUMBER", "performance", "disparity", "of", "json", "http", "be", "now", "negligible", "possibly", "some", "GC", "pressure", "benefits", "but", "in", "runs", "with", "NUMBER", "k", "NUMBER", "k", "there", "was", "no", "noticeable", "difference", "in", "throughput", "NUMBER", "potential", "downsides", "if", "we", "again", "come", "to", "a", "point", "where", "we", "want", "to", "support", "multiple", "formats", "for", "hot", "we", "ll", "have", "to", "figure", "out", "how", "we", "want", "to", "expose", "this", "since", "hot", "cold", "would", "be", "pretty", "rigid", "as", "propose", "NUMBER", "any", "users", "that", "write", "function", "against", "http", "directly", "would", "have", "to", "update", "to", "use", "an", "fdk", "or", "use", "json", "NUMBER", "the", "surface", "area", "of", "this", "at", "present", "may", "be", "minimal", "it", "would", "be", "a", "good", "idea", "to", "do", "this", "early", "for", "this", "reason", "NUMBER", "work", "involved", "it", "s", "relatively", "easy", "to", "drop", "http", "format", "in", "fn", "server", "outright", "we", "could", "leave", "routes", "that", "have", "http", "format", "as", "they", "be", "and", "error", "out", "their", "attempted", "execution", "that", "the", "format", "be", "no", "longer", "support", "and", "the", "user", "needs", "to", "update", "the", "route", "NUMBER", "if", "we", "want", "to", "change", "json", "to", "hot", "while", "dropping", "this", "we", "could", "run", "a", "migration", "NUMBER", "update", "docs", "bloggos", "to", "remove", "http", "references", "update", "fdk", "s", "to", "remove", "http", "discuss", "vote", "please", "NUMBER", "Strong", "NUMBER", "in", "principal", "Don", "t", "want", "this", "until", "I", "have", "a", "way", "of", "sending", "binary", "with", "JSON", "preferably", "without", "needing", "to", "copy", "twice", "in", "FDK", "e", "NUMBER", "g", "NUMBER", "b", "NUMBER", "streaming", "less", "bothered", "by", "Java", "doesn", "t", "do", "JSON", "yet", "Java", "doesn", "t", "do", "JSON", "yet", "this", "be", "fairly", "easy", "to", "add", "or", "be", "http", "stuff", "pretty", "baked", "in", "Don", "t", "want", "this", "until", "I", "have", "a", "way", "of", "sending", "binary", "with", "JSON", "thanks", "good", "point", "NUMBER", "i", "know", "part", "of", "this", "be", "the", "limitation", "of", "utf", "NUMBER", "in", "go", "s", "json", "library", "which", "could", "be", "worked", "around", "but", "without", "doing", "some", "encoding", "this", "c", "would", "become", "a", "client", "side", "issue", "as", "well", "NUMBER", "Totally", "agree", "about", "the", "problem", "statement", "relate", "to", "vernacular", "NUMBER", "Warning", "the", "following", "two", "points", "could", "be", "totally", "out", "of", "scope", "of", "this", "issue", "NUMBER", "I", "just", "want", "to", "throw", "them", "out", "there", "NUMBER", "NUMBER", "add", "CloudEvents", "as", "a", "format", "NUMBER", "I", "know", "you", "mention", "this", "could", "be", "JSON", "format", "or", "hot", "in", "your", "proposal", "but", "want", "to", "consider", "as", "we", "think", "about", "design", "NUMBER", "This", "could", "imply", "version", "of", "formats", "NUMBER", "NUMBER", "We", "need", "to", "consider", "what", "it", "means", "to", "make", "hot", "the", "default", "format", "and", "forcing", "usage", "of", "FDK", "s", "in", "some", "way", "NUMBER", "There", "s", "a", "user", "experience", "issue", "when", "the", "out", "of", "box", "experience", "add", "a", "NUMBER", "ms", "overhead", "from", "Docker", "NUMBER", "add", "CloudEvents", "as", "a", "format", "NUMBER", "I", "know", "you", "mention", "this", "could", "be", "JSON", "format", "or", "hot", "in", "your", "proposal", "but", "want", "to", "consider", "as", "we", "think", "about", "design", "NUMBER", "This", "could", "imply", "version", "of", "formats", "NUMBER", "be", "this", "a", "container", "format", "otherwise", "it", "s", "not", "relevant", "to", "this", "discussion", "NUMBER", "could", "you", "provide", "links", "if", "so", "that", "phrase", "be", "not", "easily", "googled", "NUMBER", "an", "event", "format", "be", "potentially", "completely", "orthogonal", "NUMBER", "We", "need", "to", "consider", "what", "it", "means", "to", "make", "hot", "the", "default", "format", "and", "forcing", "usage", "of", "FDK", "s", "in", "some", "way", "NUMBER", "There", "s", "a", "user", "experience", "issue", "when", "the", "out", "of", "box", "experience", "add", "a", "NUMBER", "ms", "overhead", "from", "Docker", "NUMBER", "this", "be", "not", "intended", "to", "turn", "into", "a", "discussion", "of", "the", "default", "format", "I", "ll", "clarify", "that", "this", "be", "also", "not", "proposing", "change", "hot", "to", "the", "default", "since", "it", "wasn", "t", "clear", "NUMBER", "LINK", "and", "LINK", "OK", "I", "ll", "let", "you", "guys", "decide", "on", "relevance", "to", "this", "issue", "but", "the", "point", "be", "we", "ll", "need", "a", "way", "to", "explicitly", "support", "this", "soon", "NUMBER", "Duly", "note", "it", "and", "move", "on", "NUMBER", "As", "for", "default", "sure", "I", "ll", "defer", "to", "another", "discussion", "NUMBER", "thanks", "NUMBER", "thanks", "NUMBER", "it", "looks", "somewhat", "relevant", "inasmuch", "it", "d", "be", "an", "additional", "hot", "format", "i", "NUMBER", "e", "NUMBER", "not", "only", "an", "external", "event", "format", "it", "aims", "to", "be", "both", "external", "and", "internal", "but", "doesn", "t", "block", "the", "wart", "removal", "of", "http", "format", "NUMBER", "if", "we", "standardized", "on", "only", "use", "cloud", "events", "we", "d", "have", "to", "follow", "their", "standard", "release", "exactly", "and", "also", "have", "a", "way", "to", "handle", "any", "major", "breakages", "they", "do", "i", "NUMBER", "e", "NUMBER", "this", "function", "handles", "openevent", "NUMBER", "format", "but", "not", "openevent", "NUMBER", "like", "oauth", "fun", "fun", "I", "suspect", "if", "we", "ingest", "them", "we", "ll", "have", "these", "issue", "as", "well", "but", "it", "likely", "won", "t", "be", "the", "only", "in", "road", "to", "spawn", "events", "NUMBER", "it", "seems", "wise", "to", "have", "an", "additional", "format", "that", "we", "can", "explicitly", "not", "break", "that", "users", "could", "readily", "switch", "to", "that", "acts", "as", "our", "primary", "format", "until", "such", "time", "comes", "that", "they", "have", "eaten", "the", "event", "world", "if", "when", "NUMBER", "their", "cause", "be", "noble", "it", "s", "also", "possible", "somebody", "else", "wins", "or", "we", "all", "decide", "to", "standardize", "on", "google", "s", "format", "ala", "s", "NUMBER", "so", "we", "should", "remain", "flexible", "imo", "flexible", "maintain", "json", "format", "NUMBER", "NUMBER", "agree", "on", "having", "our", "own", "as", "well", "NUMBER", "and", "ya", "version", "will", "be", "needed", "since", "CE", "be", "literally", "at", "NUMBER", "at", "the", "end", "of", "this", "month", "NUMBER", "Json", "in", "java", "be", "trivial", "yes", "and", "also", "ditches", "the", "cumbersome", "HTTP", "parser", "dep", "While", "reviewing", "this", "NUMBER", "and", "NUMBER", "it", "get", "me", "thinking", "that", "maybe", "we", "could", "deprecate", "default", "format", "and", "just", "use", "the", "json", "format", "even", "in", "a", "cold", "function", "NUMBER", "Not", "quite", "as", "easy", "as", "regular", "default", "but", "almost", "NUMBER", "Usually", "we", "re", "just", "doing", "a", "JSON", "NUMBER", "parse", "STDIN", "for", "default", "function", "anyways", "so", "that", "would", "stay", "the", "same", "and", "you", "d", "just", "have", "to", "grab", "the", "body", "field", "out", "of", "there", "and", "I", "guess", "JSON", "NUMBER", "parse", "that", "too", "if", "you", "re", "expecting", "JSON", "NUMBER", "Then", "this", "would", "be", "essentially", "what", "NUMBER", "be", "trying", "to", "do", "a", "cold", "function", "be", "just", "a", "hot", "function", "with", "a", "single", "object", "NUMBER", "Then", "you", "might", "ask", "why", "we", "didn", "t", "do", "this", "in", "the", "first", "place", "Because", "JSON", "format", "didn", "t", "exist", "NUMBER", "it", "get", "me", "thinking", "that", "maybe", "we", "could", "deprecate", "default", "format", "and", "just", "use", "the", "json", "format", "even", "in", "a", "cold", "function", "NUMBER", "the", "big", "win", "here", "would", "be", "get", "rid", "of", "cold", "and", "its", "semantics", "specifically", "that", "cold", "container", "can", "produce", "unprovoked", "output", "that", "we", "must", "collect", "be", "hard", "to", "capture", "in", "our", "current", "abstraction", "for", "hot", "function", "from", "an", "agent", "implementation", "perspective", "NUMBER", "this", "seems", "to", "be", "suggesting", "that", "we", "keep", "cold", "and", "relate", "semantics", "but", "change", "the", "format", "of", "the", "input", "which", "doesn", "t", "seem", "like", "a", "huge", "win", "perhaps", "I", "m", "misinterpreting", "if", "you", "could", "clarify", "please", "NUMBER", "if", "we", "had", "configuration", "for", "a", "hot", "function", "and", "the", "maximum", "times", "it", "could", "execute", "per", "container", "we", "could", "shut", "this", "down", "from", "an", "fn", "perspective", "if", "they", "set", "n", "NUMBER", "then", "it", "s", "effectively", "cold", "in", "nature", "json", "in", "format", "NUMBER", "it", "s", "also", "possible", "for", "a", "user", "to", "exit", "their", "container", "immediately", "after", "producing", "the", "first", "hot", "output", "we", "could", "add", "this", "to", "fdk", "even", "to", "retain", "the", "run", "once", "semantics", "of", "cold", "without", "the", "pitfalls", "of", "i", "o", "we", "have", "though", "this", "may", "be", "slightly", "racy", "I", "m", "not", "sure", "if", "it", "s", "worth", "discussing", "that", "bit", "here", "I", "have", "heard", "it", "discussed", "that", "this", "be", "desirable", "to", "certain", "users", "and", "they", "have", "their", "reasons", "I", "ve", "since", "forgotten", "and", "won", "t", "make", "up", "for", "them", "NUMBER", "In", "general", "FaaS", "platforms", "seem", "to", "have", "their", "i", "o", "format", "that", "a", "user", "must", "cater", "their", "code", "to", "and", "it", "makes", "sense", "from", "that", "perspective", "to", "change", "to", "just", "json", "and", "hot", "exist", "which", "would", "clear", "up", "the", "vernacular", "significantly", "provide", "NUMBER", "that", "we", "can", "make", "json", "usable", "for", "all", "use", "cases", "binary", "and", "NUMBER", "that", "we", "can", "add", "future", "other", "formats", "as", "well", "any", "of", "which", "would", "be", "hot", "NUMBER", "it", "s", "a", "possible", "NUMBER", "some", "clarification", "on", "cold", "dying", "required", "I", "just", "knew", "this", "discussion", "would", "lead", "here", "from", "parent", "I", "m", "leaning", "more", "and", "more", "towards", "dropping", "default", "cold", "format", "completely", "NUMBER", "The", "better", "the", "FDK", "s", "get", "and", "with", "boilerplate", "generation", "it", "s", "not", "much", "more", "convenient", "than", "just", "use", "an", "FDK", "NUMBER", "And", "would", "simplify", "internals", "obviously", "NUMBER", "We", "could", "have", "an", "optional", "flag", "to", "run", "once", "to", "sort", "of", "make", "it", "cold", "isolated", "if", "people", "need", "want", "that", "behavior", "NUMBER", "This", "would", "mean", "stop", "support", "http", "deprecate", "it", "for", "removal", "in", "a", "couple", "of", "minor", "version", "stop", "support", "cold", "deprecate", "it", "for", "removal", "in", "a", "couple", "of", "minor", "version", "stop", "support", "default", "deprecate", "it", "for", "removal", "in", "a", "couple", "of", "minor", "version", "only", "support", "json", "format", "new", "default", "can", "still", "add", "support", "for", "cloudevents", "and", "other", "formats", "in", "the", "future", "NUMBER", "It", "s", "a", "bit", "essy", "messy", "but", "we", "can", "also", "provide", "tooling", "for", "people", "wanting", "to", "run", "shell", "later", "a", "shell", "FDK", "by", "provide", "a", "wrapper", "binary", "that", "takes", "the", "JSON", "contract", "on", "the", "outside", "but", "invokes", "use", "the", "default", "contract", "or", "something", "like", "it", "that", "a", "user", "could", "put", "within", "the", "container", "NUMBER", "This", "would", "also", "work", "for", "things", "like", "fcgi", "I", "m", "NUMBER", "if", "we", "have", "a", "shell", "FDK", "as", "an", "adapter", "for", "default", "cold", "function", "NUMBER", "I", "d", "also", "like", "to", "solve", "the", "problem", "of", "use", "an", "exist", "container", "image", "as", "a", "hot", "function", "NUMBER", "For", "example", "I", "d", "like", "to", "take", "the", "Docker", "hello", "world", "container", "image", "and", "make", "it", "into", "a", "hot", "function", "without", "having", "source", "or", "defining", "a", "new", "image", "manually", "NUMBER", "One", "approach", "would", "be", "for", "the", "Fn", "server", "to", "automatically", "define", "a", "new", "image", "that", "extend", "a", "given", "binary", "image", "and", "replaces", "the", "entry", "point", "with", "our", "shell", "FDK", "to", "mediate", "the", "JSON", "protocol", "Or", "whatever", "other", "clever", "and", "efficient", "technique", "we", "can", "come", "up", "with", "NUMBER", "From", "a", "UX", "perspective", "I", "still", "like", "the", "you", "can", "just", "pick", "up", "any", "exist", "container", "that", "can", "accept", "STDIN", "and", "run", "it", "as", "a", "cold", "function", "use", "format", "default", "NUMBER", "If", "this", "story", "be", "simply", "change", "to", "use", "once", "true", "and", "the", "behind", "the", "scenes", "magic", "do", "the", "rest", "then", "NUMBER", "rikgibson", "to", "treeder", "s", "comment", "I", "think", "treeder", "be", "proposing", "dropping", "default", "completely", "in", "favour", "of", "a", "single", "prevalent", "format", "initially", "JSON", "later", "JSON", "or", "Cloud", "events", "shaunsmith", "That", "s", "in", "line", "with", "what", "I", "m", "proposing", "i", "NUMBER", "e", "NUMBER", "an", "exist", "docker", "build", "can", "be", "made", "to", "work", "in", "a", "way", "that", "was", "possible", "with", "default", "before", "however", "a", "user", "would", "have", "to", "create", "a", "new", "docker", "image", "do", "do", "this", "including", "the", "wrapper", "binary", "in", "the", "top", "level", "container", "I", "wonder", "if", "this", "can", "be", "do", "transparently", "in", "the", "CLI", "or", "even", "within", "Fn", "At", "build", "time", "given", "TAG", "create", "a", "new", "Dockerfile", "in", "CLI", "i", "NUMBER", "e", "NUMBER", "FROM", "TAG", "ADD", "fn", "hotwrapper", "ENTRYPOINT", "hotwrapper", "TAG", "or", "at", "runtime", "in", "fn", "mount", "hotwrapper", "into", "container", "somewhere", "read", "entrypoint", "of", "docker", "image", "hardish", "then", "invoke", "the", "container", "with", "the", "new", "entrypoint", "path", "to", "hotwrapper", "TAG", "zootalures", "yes", "I", "get", "that", "NUMBER", "My", "point", "be", "by", "dropping", "default", "as", "it", "be", "now", "what", "do", "the", "experience", "become", "for", "picking", "up", "an", "arbitrary", "container", "and", "run", "it", "as", "a", "function", "hot", "or", "otherwise", "We", "ve", "be", "telling", "people", "they", "can", "do", "X", "where", "X", "be", "for", "example", "just", "simply", "run", "docker", "hello", "world", "we", "be", "or", "be", "we", "now", "change", "our", "position", "so", "either", "they", "can", "t", "do", "X", "or", "the", "setup", "by", "which", "they", "can", "do", "X", "be", "now", "more", "complicated", "and", "fussy", "If", "it", "can", "be", "do", "transparently", "within", "fn", "or", "CLI", "in", "response", "to", "a", "simple", "flag", "then", "that", "s", "fine", "I", "m", "simply", "trying", "to", "argue", "for", "keep", "it", "clean", "and", "simple", "NUMBER", "zootalures", "rikgibson", "I", "m", "not", "convinced", "we", "can", "t", "build", "a", "new", "image", "with", "the", "hotwrapper", "automatically", "in", "the", "Fn", "Server", "or", "at", "least", "I", "hope", "we", "can", "NUMBER", "docker", "inspect", "hello", "world", "for", "the", "Docker", "sample", "dumps", "lots", "of", "info", "including", "Cmd", "bin", "sh", "c", "nop", "CMD", "hello", "So", "we", "can", "programatically", "determine", "what", "we", "need", "to", "wrap", "NUMBER", "stop", "support", "http", "deprecate", "it", "for", "removal", "in", "a", "couple", "of", "minor", "version", "stop", "support", "cold", "deprecate", "it", "for", "removal", "in", "a", "couple", "of", "minor", "version", "stop", "support", "default", "deprecate", "it", "for", "removal", "in", "a", "couple", "of", "minor", "version", "only", "support", "json", "format", "new", "default", "can", "still", "add", "support", "for", "cloudevents", "and", "other", "formats", "in", "the", "future", "All", "of", "that", "gets", "a", "big", "NUMBER", "from", "me", "NUMBER", "Single", "event", "format", "would", "save", "a", "lot", "of", "confusion", "simplify", "the", "FDKs", "and", "json", "be", "the", "one", "that", "makes", "the", "most", "sense", "atm", "NUMBER", "I", "would", "expect", "a", "shell", "FDK", "to", "be", "the", "same", "kind", "as", "all", "the", "other", "FDKs", "and", "will", "argue", "against", "hard", "code", "anything", "into", "the", "service", "or", "cli", "for", "it", "unless", "there", "s", "a", "demonstrated", "need", "for", "the", "stdin", "stdout", "usecase", "ie", "be", "anyone", "use", "it", "who", "couldn", "t", "add", "a", "call", "to", "jq", "into", "their", "image", "we", "re", "tying", "ourself", "in", "knots", "for", "nothing", "NUMBER", "We", "ve", "be", "telling", "people", "they", "can", "do", "X", "where", "X", "be", "for", "example", "just", "simply", "run", "docker", "hello", "world", "we", "be", "or", "be", "we", "now", "change", "our", "position", "so", "either", "they", "can", "t", "do", "X", "or", "the", "setup", "by", "which", "they", "can", "do", "X", "be", "now", "more", "complicated", "and", "fussy", "If", "it", "can", "be", "do", "transparently", "within", "fn", "or", "CLI", "in", "response", "to", "a", "simple", "flag", "then", "that", "s", "fine", "I", "m", "simply", "trying", "to", "argue", "for", "keep", "it", "clean", "and", "simple", "NUMBER", "rikgibson", "that", "s", "a", "pretty", "contrived", "example", "use", "the", "hello", "world", "image", "not", "really", "useful", "in", "any", "real", "world", "use", "case", "NUMBER", "While", "it", "s", "neat", "I", "think", "that", "s", "all", "it", "be", "NUMBER", "treeder", "OK", "maybe", "that", "s", "an", "overly", "simplistic", "case", "but", "the", "point", "be", "more", "around", "a", "general", "case", "of", "wanting", "to", "use", "an", "exist", "container", "that", "provides", "some", "form", "of", "useful", "function", "NUMBER", "I", "m", "fine", "with", "deprecating", "remove", "the", "things", "be", "propose", "I", "m", "only", "concerned", "about", "remove", "capabilities", "or", "increasing", "UX", "complexity", "NUMBER", "agree", "with", "rikgibson", "can", "someone", "explain", "how", "BYOD", "gets", "its", "input", "the", "UX", "if", "json", "hot", "becomes", "default", "I", "seem", "to", "be", "miss", "this", "NUMBER", "agree", "with", "rikgibson", "can", "someone", "explain", "how", "BYOD", "gets", "its", "input", "the", "UX", "if", "json", "hot", "becomes", "default", "I", "seem", "to", "be", "miss", "this", "NUMBER", "Input", "be", "still", "stdin", "the", "only", "difference", "be", "you", "have", "to", "parse", "the", "JSON", "input", "NUMBER", "If", "you", "bring", "your", "own", "container", "hopefully", "you", "re", "still", "use", "our", "FDK", "s", "NUMBER", "Are", "you", "guys", "talking", "about", "use", "just", "random", "container", "that", "don", "t", "know", "our", "input", "or", "output", "formats", "Is", "there", "any", "real", "world", "example", "where", "that", "would", "be", "useful", "I", "m", "confused", "NUMBER", "any", "BYOD", "use", "case", "right", "isn", "t", "that", "the", "whole", "value", "pitch", "of", "Fn", "ie", "LINK", "Sure", "so", "container", "that", "understands", "the", "input", "Fn", "be", "giving", "it", "and", "what", "to", "output", "NUMBER", "Changing", "to", "JSON", "be", "just", "a", "cleaner", "I", "O", "format", "NUMBER", "And", "dealing", "with", "it", "can", "be", "as", "easy", "as", "ruby", "body", "JSON", "NUMBER", "parse", "STDIN", "body", "vs", "now", "with", "default", "format", "ruby", "body", "STDIN", "NUMBER", "read", "yes", "i", "did", "that", "in", "Ruby", "NUMBER", "NUMBER", "Because", "look", "how", "nice", "that", "be", "ok", "so", "I", "think", "I", "get", "it", "now", "NUMBER", "func", "NUMBER", "yaml", "would", "still", "have", "runtime", "Docker", "and", "the", "customer", "would", "bring", "their", "own", "Dockerfile", "NUMBER", "Inside", "that", "func", "directory", "would", "be", "some", "code", "that", "they", "write", "which", "would", "import", "the", "FDK", "and", "parse", "the", "input", "just", "like", "any", "other", "function", "which", "would", "execute", "inside", "the", "Docker", "container", "as", "the", "func", "NUMBER", "I", "just", "needed", "to", "walk", "through", "that", "in", "my", "head", "NUMBER", "So", "your", "question", "about", "random", "container", "that", "don", "t", "have", "func", "code", "in", "it", "I", "can", "t", "think", "of", "any", "either", "at", "the", "moment", "NUMBER", "In", "that", "case", "I", "m", "NUMBER", "on", "all", "of", "this", "NUMBER", "treeder", "your", "example", "covers", "reading", "JSON", "but", "not", "the", "requirement", "to", "loop", "and", "process", "all", "incoming", "message", "that", "s", "the", "hard", "part", "NUMBER", "It", "s", "easy", "to", "write", "a", "function", "that", "reads", "writes", "to", "stdin", "stdout", "but", "add", "on", "the", "message", "stream", "handle", "be", "not", "as", "trivial", "NUMBER", "carimura", "yes", "if", "we", "provide", "a", "protocol", "adapter", "utility", "that", "was", "the", "entry", "point", "of", "the", "function", "container", "image", "that", "handle", "the", "JSON", "protocol", "and", "the", "message", "loop", "I", "think", "we", "re", "good", "NUMBER", "The", "random", "container", "image", "can", "be", "handle", "my", "extending", "the", "image", "and", "add", "the", "utility", "too", "so", "far", "call", "hotwrapper", "and", "shell", "FDK", "NUMBER", "honestly", "that", "just", "re", "confused", "me", "NUMBER", "take", "LINK", "plates", "for", "example", "NUMBER", "All", "the", "propose", "change", "be", "requiring", "me", "to", "do", "be", "move", "my", "func", "out", "of", "main", "and", "into", "a", "handler", "exactly", "the", "way", "fn", "init", "runtime", "go", "structures", "it", "NUMBER", "Then", "stdin", "be", "the", "io", "NUMBER", "Reader", "NUMBER", "Right", "Sorry", "there", "be", "two", "cases", "NUMBER", "we", "have", "an", "FDK", "for", "your", "programming", "language", "and", "NUMBER", "we", "don", "t", "NUMBER", "NUMBER", "be", "easy", "enough", "as", "you", "point", "out", "NUMBER", "NUMBER", "be", "the", "issue", "for", "both", "unsupported", "languages", "and", "non", "source", "artifacts", "you", "may", "want", "to", "package", "as", "a", "function", "NUMBER", "Ironically", "LINK", "issuecomment", "NUMBER", "treeder", "your", "example", "covers", "reading", "JSON", "but", "not", "the", "requirement", "to", "loop", "and", "process", "all", "incoming", "message", "that", "s", "the", "hard", "part", "NUMBER", "It", "s", "easy", "to", "write", "a", "function", "that", "reads", "writes", "to", "stdin", "stdout", "but", "add", "on", "the", "message", "stream", "handle", "be", "not", "as", "trivial", "NUMBER", "shaunsmith", "That", "would", "be", "the", "run", "once", "version", "NUMBER", "I", "think", "standardising", "on", "JSON", "with", "a", "run", "once", "option", "makes", "a", "lot", "of", "sense", "NUMBER", "Anyone", "who", "be", "use", "function", "in", "anger", "be", "going", "to", "have", "to", "standardise", "on", "a", "message", "format", "anyway", "NUMBER", "There", "be", "JSON", "parsers", "available", "for", "most", "languages", "even", "Bash", "so", "I", "don", "t", "think", "use", "JSON", "be", "going", "to", "prevent", "someone", "use", "a", "language", "for", "which", "there", "be", "no", "FDK", "NUMBER", "do", "too", "a", "lot", "of", "the", "logging", "test", "use", "async", "calls", "which", "was", "flaky", "with", "timings", "NUMBER", "there", "be", "a", "couple", "left", "that", "use", "async", "that", "we", "need", "to", "test", "but", "this", "reduces", "the", "probability", "of", "the", "flaky", "test", "flaking", "to", "NUMBER", "NUMBER", "instead", "of", "NUMBER", "NUMBER", "the", "behaviors", "we", "be", "test", "here", "we", "should", "not", "be", "test", "through", "the", "api", "for", "this", "exact", "reason", "we", "can", "test", "a", "ton", "of", "this", "in", "the", "agent", "itself", "and", "not", "have", "to", "rely", "on", "timings", "NUMBER", "not", "taking", "that", "here", "but", "this", "fix", "circle", "ci", "flaking", "out", "for", "a", "few", "days", "NUMBER", "fn", "start", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Setting", "log", "level", "to", "level", "info", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "start", "tracer", "url", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "datastore", "dialed", "datastore", "sqlite", "NUMBER", "max_idle_connections", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "Could", "not", "open", "BoltDB", "file", "for", "MQ", "dir", "app", "data", "error", "invalid", "argument", "mq", "bolt", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "fatal", "msg", "Error", "during", "server", "opt", "initialization", "NUMBER", "error", "invalid", "argument", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "error", "processed", "finished", "with", "error", "exit", "status", "NUMBER", "OMG", "NUMBER", "This", "be", "the", "same", "similar", "issue", "to", "iron", "io", "function", "NUMBER", "Are", "we", "just", "copying", "off", "each", "other", "and", "make", "the", "same", "assumptions", "Can", "we", "not", "assume", "a", "local", "Docker", "engine", "run", "on", "localhost", "Please", "I", "know", "what", "the", "problem", "be", "now", "I", "m", "run", "fn", "start", "with", "a", "remote", "Docker", "engine", "so", "home", "blah", "will", "not", "exist", "Also", "bind", "mounting", "volumes", "like", "this", "be", "really", "silly", "NUMBER", "In", "production", "you", "would", "actually", "use", "a", "named", "volume", "use", "the", "docker", "volumes", "sub", "system", "and", "an", "appropritate", "volume", "driver", "NUMBER", "Very", "rarely", "never", "have", "I", "bind", "mounted", "volumes", "for", "stateful", "services", "NUMBER", "prologic", "fyi", "Fn", "forked", "IronFunctions", "almost", "a", "year", "ago", "NUMBER", "It", "s", "much", "further", "along", "nearing", "GA", "in", "fact", "but", "will", "have", "similar", "issue", "as", "a", "result", "of", "same", "ancestry", "NUMBER", "I", "guess", "it", "s", "not", "a", "blocker", "per", "se", "but", "if", "you", "want", "folks", "to", "be", "able", "to", "try", "fn", "out", "quickly", "fix", "this", "be", "a", "good", "thing", "Also", "thanks", "for", "the", "history", "lesson", "good", "to", "see", "code", "re", "use", "even", "if", "a", "fork", "NUMBER", "fn", "start", "be", "mostly", "just", "for", "quickstart", "local", "development", "NUMBER", "Anything", "else", "and", "you", "should", "use", "docker", "run", "NUMBER", "with", "whatever", "flags", "you", "want", "NUMBER", "So", "what", "about", "quickstart", "on", "OS", "X", "Is", "this", "well", "documented", "test", "fb", "start", "doesn", "t", "work", "for", "me", "with", "OS", "X", "docker", "machine", "managed", "engine", "virtualbox", "prologic", "can", "you", "be", "more", "explicit", "when", "saying", "that", "fn", "start", "doesn", "t", "work", "for", "you", "Was", "my", "paste", "not", "clear", "James", "Mills", "prologic", "E", "prologic", "shortcircuit", "NUMBER", "net", "NUMBER", "au", "W", "prologic", "NUMBER", "shortcircuit", "NUMBER", "net", "NUMBER", "au", "On", "Mon", "Feb", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Denis", "Makogon", "TAG", "write", "prologic", "TAG", "can", "you", "be", "more", "explicit", "when", "saying", "that", "fn", "start", "doesn", "t", "work", "for", "you", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Okay", "NUMBER", "I", "can", "confirm", "that", "fn", "start", "works", "perfectly", "with", "Docker", "for", "Mac", "Version", "NUMBER", "ce", "mac", "NUMBER", "NUMBER", "NUMBER", "If", "it", "seems", "that", "fn", "start", "be", "faulty", "for", "you", "NUMBER", "You", "can", "get", "customised", "Fn", "server", "by", "creating", "an", "env", "file", "identical", "for", "Docker", "env", "file", "and", "pass", "that", "to", "the", "fn", "start", "check", "fn", "start", "help", "for", "more", "details", "NUMBER", "You", "can", "also", "try", "the", "following", "compose", "file", "LINK", "modify", "version", "of", "the", "one", "we", "have", "in", "tree", "Okay", "NUMBER", "I", "can", "confirm", "that", "fn", "start", "works", "perfectly", "with", "Docker", "for", "Mac", "Version", "NUMBER", "ce", "mac", "NUMBER", "NUMBER", "NUMBER", "So", "I", "m", "not", "use", "Docker", "for", "MAc", "but", "docker", "machine", "managed", "NUMBER", "Not", "sure", "if", "there", "s", "any", "significant", "differences", "but", "probably", "be", "NUMBER", "I", "think", "Docker", "for", "Mac", "do", "some", "host", "TAG", "engine", "filesystem", "sharing", "magic", "NUMBER", "Permissions", "issue", "NUMBER", "When", "you", "run", "with", "sudo", "it", "works", "in", "any", "directory", "NUMBER", "Without", "sudo", "it", "fail", "NUMBER", "Try", "sudo", "fn", "start", "I", "looked", "at", "the", "source", "code", "printing", "this", "error", "I", "think", "the", "line", "above", "it", "has", "too", "restrictive", "or", "demanding", "permissions", "on", "the", "file", "NUMBER", "This", "should", "be", "loosened", "somehow", "NUMBER", "db", "err", "bolt", "NUMBER", "Open", "url", "NUMBER", "Path", "NUMBER", "bolt", "NUMBER", "Options", "Timeout", "NUMBER", "time", "NUMBER", "Second", "if", "err", "nil", "log", "NUMBER", "WithError", "err", "NUMBER", "Errorln", "Could", "not", "open", "BoltDB", "file", "for", "MQ", "return", "nil", "err", "So", "sudo", "raises", "the", "privileges", "level", "NUMBER", "Too", "bad", "this", "bolt", "NUMBER", "go", "file", "be", "in", "a", "different", "iron", "io", "project", "NUMBER", "Has", "this", "be", "release", "I", "be", "on", "Docker", "version", "NUMBER", "ce", "build", "NUMBER", "e", "NUMBER", "and", "I", "be", "use", "docker", "machine", "command", "to", "manage", "docker", "daemon", "instead", "of", "Docker", "NUMBER", "app", "NUMBER", "I", "start", "docker", "as", "docker", "machine", "start", "NUMBER", "It", "asks", "me", "to", "set", "environment", "variables", "via", "output", "of", "docker", "machine", "env", "in", "current", "shell", "NUMBER", "If", "I", "don", "t", "fn", "wouldn", "t", "find", "docker", "daemon", "and", "give", "this", "error", "docker", "Cannot", "connect", "to", "the", "Docker", "daemon", "at", "unix", "var", "run", "docker", "NUMBER", "sock", "NUMBER", "Is", "the", "docker", "daemon", "run", "NUMBER", "See", "docker", "run", "help", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "error", "processed", "finished", "with", "error", "exit", "status", "NUMBER", "I", "set", "the", "following", "environment", "variables", "export", "DOCKER_TLS_VERIFY", "NUMBER", "export", "DOCKER_HOST", "tcp", "NUMBER", "NUMBER", "export", "DOCKER_CERT_PATH", "Users", "user", "NUMBER", "docker", "machine", "machines", "default", "export", "DOCKER_MACHINE_NAME", "default", "fn", "start", "gives", "me", "error", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Setting", "log", "level", "to", "level", "info", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "datastore", "dialed", "datastore", "sqlite", "NUMBER", "max_idle_connections", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "Could", "not", "open", "BoltDB", "file", "for", "MQ", "dir", "app", "data", "error", "invalid", "argument", "mq", "bolt", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "fatal", "msg", "Error", "during", "server", "opt", "initialization", "NUMBER", "error", "invalid", "argument", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "error", "processed", "finished", "with", "error", "exit", "status", "NUMBER", "sweet", "just", "did", "this", "too", "easy", "rebase", "did", "exact", "same", "thing", "NUMBER", "let", "s", "freeze", "this", "wart", "off", "http", "now", "buffers", "the", "entire", "request", "body", "from", "the", "container", "before", "copying", "it", "to", "the", "response", "writer", "and", "sets", "content", "length", "NUMBER", "this", "be", "a", "level", "of", "sad", "i", "don", "t", "feel", "comfortable", "talking", "about", "but", "it", "be", "what", "it", "be", "NUMBER", "json", "protocol", "was", "buffering", "the", "entire", "body", "so", "there", "wasn", "t", "any", "reason", "for", "us", "to", "try", "to", "write", "this", "directly", "to", "the", "container", "stdin", "manually", "we", "needed", "to", "add", "a", "bufio", "NUMBER", "Writer", "around", "it", "anyway", "it", "was", "make", "too", "many", "write", "fd", "syscalls", "with", "the", "way", "it", "was", "NUMBER", "this", "be", "just", "easier", "overall", "and", "has", "the", "same", "performance", "as", "http", "now", "in", "my", "test", "whereas", "previously", "this", "was", "NUMBER", "slower", "than", "http", "NUMBER", "add", "buffer", "pool", "for", "http", "json", "to", "share", "use", "NUMBER", "json", "doesn", "t", "create", "a", "new", "buffer", "every", "stinkin", "request", "NUMBER", "we", "need", "to", "plumb", "down", "content", "length", "so", "that", "we", "can", "properly", "size", "the", "buffer", "for", "json", "have", "to", "add", "header", "size", "and", "everything", "together", "but", "it", "s", "probably", "faster", "than", "malloc", "punting", "on", "properly", "sizing", "NUMBER", "json", "now", "sets", "content", "type", "to", "the", "length", "of", "the", "body", "from", "the", "returned", "json", "blurb", "from", "the", "container", "this", "do", "not", "handle", "imposing", "a", "maximum", "size", "of", "the", "response", "returned", "from", "a", "container", "which", "we", "need", "to", "add", "but", "this", "has", "be", "open", "for", "some", "time", "specifically", "on", "json", "NUMBER", "we", "can", "impose", "this", "by", "wrapping", "the", "pipes", "but", "there", "s", "some", "discussion", "to", "be", "had", "for", "json", "specifically", "we", "won", "t", "be", "able", "to", "just", "cut", "off", "the", "output", "stream", "and", "use", "that", "http", "we", "can", "do", "this", "NUMBER", "anyway", "file", "a", "ticket", "NUMBER", "close", "NUMBER", "thanks", "NUMBER", "wrt", "the", "buffer", "pool", "NUMBER", "we", "have", "NUMBER", "in", "func_logger", "as", "it", "be", "and", "this", "one", "as", "well", "NUMBER", "it", "seems", "like", "it", "would", "be", "a", "useful", "thing", "to", "have", "a", "general", "purpose", "buffer", "pool", "that", "can", "dispense", "based", "on", "some", "expected", "size", "NUMBER", "for", "this", "one", "it", "s", "not", "perfect", "since", "http", "be", "use", "it", "for", "container", "output", "and", "json", "for", "request", "input", "but", "in", "a", "heterogeneous", "workload", "we", "can", "t", "expect", "that", "those", "NUMBER", "differ", "a", "whole", "lot", "one", "of", "the", "func_logger", "ones", "be", "just", "for", "lines", "which", "should", "be", "short", "generally", "NUMBER", "something", "like", "that", "NUMBER", "opened", "NUMBER", "default", "needs", "to", "be", "handle", "as", "well", "NUMBER", "we", "could", "either", "return", "an", "error", "or", "return", "partial", "output", "and", "somehow", "try", "to", "indicate", "that", "their", "output", "was", "too", "long", "NUMBER", "not", "sure", "how", "worth", "it", "challenging", "the", "partial", "output", "thing", "be", "we", "re", "truncating", "logs", "but", "stdout", "be", "a", "little", "different", "NUMBER", "seems", "like", "extracting", "util", "didn", "t", "buy", "too", "much", "sugar", "just", "the", "ctx", "stuff", "useful", "we", "update", "that", "a", "good", "bit", "will", "resolve", "the", "TODO", "in", "NUMBER", "thanks", "For", "installing", "the", "fn", "curl", "LSs", "LINK", "sh", "the", "install", "script", "do", "not", "work", "as", "expect", "due", "to", "version", "curl", "silent", "LINK", "grep", "tag_name", "cut", "f", "NUMBER", "d", "cut", "f", "NUMBER", "d", "turns", "out", "to", "be", "empty", "NUMBER", "I", "sucessfully", "use", "the", "curl", "sh", "installer", "y", "day", "ubuntu", "NUMBER", "NUMBER", "Need", "more", "info", "about", "where", "it", "isn", "t", "work", "NUMBER", "I", "did", "it", "on", "CentOS", "NUMBER", "Now", "it", "works", "as", "expect", "NUMBER", "Previously", "when", "I", "tried", "to", "open", "this", "link", "LINK", "I", "get", "nothing", "in", "the", "web", "browser", "NUMBER", "This", "change", "introduces", "configurable", "server", "side", "mandated", "limits", "on", "CPU", "memory", "and", "disk", "usage", "NUMBER", "It", "required", "a", "little", "bit", "of", "refactoring", "in", "the", "agent", "package", "NUMBER", "This", "be", "the", "start", "of", "a", "broader", "work", "on", "managing", "resource", "usage", "on", "Fn", "nodes", "and", "preventing", "one", "function", "from", "cause", "disruption", "to", "other", "function", "by", "overusing", "resources", "NUMBER", "It", "s", "a", "complex", "issue", "and", "this", "be", "just", "a", "part", "of", "it", "NUMBER", "The", "goal", "be", "not", "just", "to", "defend", "from", "malicious", "agents", "but", "also", "accidental", "mistakes", "e", "NUMBER", "g", "NUMBER", "rogue", "loop", "write", "terabytes", "to", "disk", "NUMBER", "Functions", "already", "have", "CPU", "and", "memory", "limits", "set", "as", "part", "of", "their", "configuration", "but", "this", "be", "more", "about", "introduce", "service", "mandated", "limits", "so", "the", "actual", "limits", "to", "function", "resources", "will", "be", "the", "minimum", "between", "the", "service", "mandated", "limits", "and", "the", "limits", "request", "by", "the", "function", "developer", "NUMBER", "only", "did", "a", "quick", "pass", "looks", "pretty", "good", "but", "will", "let", "you", "finish", "NUMBER", "one", "note", "be", "that", "the", "storage", "size", "option", "for", "the", "docker", "fs", "driver", "be", "fs", "driver", "specific", "afaik", "and", "this", "appears", "to", "rely", "on", "the", "args", "for", "overlay", "NUMBER", "which", "be", "fine", "for", "prod", "that", "s", "what", "we", "ll", "use", "but", "I", "can", "see", "other", "users", "run", "into", "potential", "issue", "if", "they", "try", "to", "play", "with", "different", "fs", "drivers", "or", "if", "we", "do", "at", "some", "point", "for", "whatever", "reason", "not", "sure", "of", "the", "best", "policy", "we", "could", "implement", "the", "various", "args", "based", "on", "what", "docker", "fs", "driver", "we", "get", "a", "handle", "on", "in", "fn", "or", "we", "could", "just", "warn", "or", "shut", "down", "if", "it", "s", "not", "overlay", "maybe", "something", "else", "I", "know", "we", "know", "this", "but", "still", "noting", "it", "here", "Volume", "definitions", "in", "DockerFile", "will", "bypass", "the", "file", "system", "limit", "NUMBER", "since", "we", "aren", "t", "mounting", "host", "points", "at", "run", "time", "though", "these", "will", "not", "be", "mounted", "right", "rdallman", "I", "have", "add", "a", "check", "that", "the", "docker", "storage", "driver", "support", "filesystem", "quotas", "NUMBER", "Now", "if", "you", "try", "to", "set", "FN_MAX_FUNC_FILESYSTEM_SIZE", "on", "a", "system", "that", "doesn", "t", "support", "filesystem", "quotas", "you", "get", "a", "fatal", "error", "starting", "Fn", "NUMBER", "Also", "the", "erroneous", "calculation", "of", "the", "minimum", "clamp", "be", "fix", "NUMBER", "skinowski", "With", "regards", "to", "actually", "refusing", "request", "which", "want", "to", "have", "more", "disk", "space", "than", "the", "server", "side", "maximum", "I", "m", "thinking", "we", "should", "refuse", "to", "even", "_deploy_", "such", "function", "in", "the", "first", "place", "sorry", "you", "can", "t", "gobble", "up", "all", "our", "disk", "space", "be", "nice", "to", "your", "neighbours", "NUMBER", "But", "how", "do", "we", "know", "on", "an", "API", "node", "that", "the", "runners", "have", "a", "size", "limit", "We", "d", "have", "to", "assume", "that", "they", "be", "all", "start", "with", "the", "same", "configuration", "NUMBER", "be", "it", "a", "fair", "assumption", "Could", "Fn", "deployments", "have", "a", "heterogeneous", "set", "of", "runners", "there", "be", "dragons", "I", "think", "think", "we", "have", "to", "check", "if", "the", "call", "be", "unable", "to", "be", "satisfied", "at", "runtime", "submit", "for", "now", "NUMBER", "figuring", "out", "how", "to", "schedule", "those", "into", "a", "heterogeneous", "cluster", "so", "that", "they", "won", "t", "fail", "be", "a", "whole", "thing", "we", "re", "not", "quite", "ready", "for", "relate", "NUMBER", "hhexo", "Given", "NUMBER", "and", "NUMBER", "which", "I", "ve", "copied", "some", "of", "the", "impl", "from", "here", "do", "you", "think", "we", "can", "close", "this", "Yes", "I", "think", "we", "can", "close", "this", "one", "NUMBER", "this", "means", "a", "container", "could", "potentially", "use", "e", "NUMBER", "g", "NUMBER", "NUMBER", "MB", "user", "space", "NUMBER", "MB", "kernel", "space", "not", "clear", "how", "to", "rectify", "if", "that", "s", "the", "case", "this", "was", "be", "throw", "into", "the", "fn", "server", "logs", "but", "it", "s", "relatively", "easy", "to", "get", "this", "to", "crop", "up", "if", "a", "function", "user", "forgets", "that", "they", "left", "a", "println", "laying", "around", "that", "gets", "write", "to", "stdout", "it", "garbles", "the", "http", "or", "json", "in", "its", "case", "output", "and", "they", "just", "see", "internal", "server", "error", "NUMBER", "for", "certain", "clients", "i", "could", "see", "that", "we", "really", "do", "want", "to", "keep", "this", "as", "internal", "server", "error", "but", "for", "things", "like", "e", "NUMBER", "g", "NUMBER", "docker", "image", "not", "authorized", "we", "re", "showing", "that", "in", "the", "response", "so", "this", "seems", "apt", "NUMBER", "json", "likely", "needs", "the", "same", "treatment", "will", "file", "a", "bug", "NUMBER", "as", "always", "my", "error", "message", "be", "rarely", "helpful", "enough", "help", "me", "please", "close", "NUMBER", "LINK", "for", "jason", "it", "s", "a", "good", "first", "issue", "for", "somebody", "capable", "of", "growing", "sufficient", "beard", "to", "want", "to", "dig", "into", "the", "internals", "really", "I", "do", "not", "have", "the", "beard", "for", "this", "one", "NUMBER", "The", "only", "thing", "i", "miss", "here", "be", "the", "test", "that", "do", "the", "following", "creates", "a", "function", "with", "json", "or", "http", "format", "but", "the", "function", "be", "capable", "to", "do", "only", "default", "protocol", "framing", "dummy", "echo", "func", "would", "be", "more", "than", "enough", "here", "NUMBER", "Overall", "looks", "good", "NUMBER", "yea", "could", "use", "the", "hello", "image", "can", "t", "use", "the", "test", "utils", "image", "without", "be", "able", "to", "inject", "bad", "behavior", "into", "it", "NUMBER", "be", "marinating", "on", "exactly", "what", "scope", "this", "should", "cover", "in", "light", "of", "discussion", "open", "to", "thoughts", "ok", "i", "fix", "up", "test", "and", "went", "ahead", "and", "fix", "NUMBER", "thanks", "skinowski", "for", "test", "image", "update", "NUMBER", "should", "be", "ready", "to", "go", "NUMBER", "it", "do", "leak", "out", "the", "underlying", "error", "in", "the", "prominent", "cases", "users", "keep", "hitting", "I", "do", "think", "it", "will", "help", "with", "specificity", "even", "though", "extraneous", "cases", "be", "possible", "they", "still", "seem", "somewhat", "useful", "so", "that", "users", "can", "see", "where", "it", "went", "wrong", "NUMBER", "thanks", "Overall", "LGTM", "NUMBER", "One", "major", "concern", "JSON", "format", "before", "this", "change", "was", "meant", "to", "be", "close", "nearly", "compatible", "to", "CNCF", "OpenEvent", "structure", "but", "with", "this", "change", "we", "be", "about", "to", "make", "a", "step", "aside", "NUMBER", "treeder", "made", "JSON", "proto", "as", "it", "be", "right", "now", "so", "i", "d", "like", "to", "know", "if", "we", "really", "want", "to", "make", "that", "type", "of", "change", "NUMBER", "If", "so", "i", "recommend", "to", "do", "the", "following", "make", "JSON", "protocol", "interface", "embeddable", "so", "if", "we", "d", "like", "to", "bring", "OpenEvent", "to", "Fn", "there", "would", "just", "one", "thing", "to", "adjust", "actual", "data", "structure", "to", "serialize", "NUMBER", "Our", "json", "format", "won", "t", "match", "openevent", "which", "be", "fine", "NUMBER", "Once", "the", "dust", "settles", "on", "that", "we", "ll", "just", "have", "another", "format", "like", "openevent", "or", "I", "think", "it", "s", "change", "to", "cloudevent", "now", "NUMBER", "LGTM", "LGTM", "NUMBER", "the", "amendments", "seem", "like", "only", "additions", "really", "at", "the", "top", "level", "with", "removal", "from", "the", "header", "bucket", "so", "it", "won", "t", "hard", "break", "really", "NUMBER", "Agree", "the", "function", "should", "get", "the", "full", "timeout", "length", "to", "run", "NUMBER", "Regarding", "use", "a", "timestamp", "to", "say", "how", "long", "it", "has", "continued", "from", "NUMBER", "can", "we", "be", "sure", "the", "clock", "inside", "the", "container", "be", "the", "same", "as", "the", "one", "on", "the", "host", "What", "if", "we", "get", "into", "freezing", "container", "that", "would", "probably", "make", "that", "explicit", "timestamp", "very", "wrong", "NUMBER", "We", "probably", "need", "two", "timeouts", "NUMBER", "how", "long", "a", "function", "gets", "to", "run", "NUMBER", "the", "deadline", "to", "start", "executing", "a", "call", "if", "NUMBER", "be", "not", "set", "we", "could", "default", "it", "to", "NUMBER", "minute", "for", "sync", "calls", "NUMBER", "For", "async", "calls", "perhaps", "same", "deadline", "could", "be", "use", "to", "specify", "how", "long", "a", "request", "can", "sit", "in", "MQ", "and", "we", "could", "default", "that", "to", "whatever", "retention", "be", "provide", "in", "the", "MQ", "service", "NUMBER", "Without", "clearly", "defining", "these", "we", "ll", "have", "to", "answer", "question", "like", "my", "timeout", "be", "NUMBER", "secs", "why", "did", "it", "take", "NUMBER", "minutes", "to", "run", "my", "func", "or", "today", "s", "situation", "my", "timeout", "be", "NUMBER", "secs", "why", "did", "my", "func", "actually", "get", "NUMBER", "secs", "there", "be", "multiple", "interpretations", "of", "timeout", "likely", "that", "need", "to", "be", "taken", "into", "account", "NUMBER", "one", "interpretation", "be", "that", "a", "request", "should", "take", "no", "longer", "than", "the", "timeout", "this", "bounds", "the", "request", "to", "the", "timeout", "meaning", "clients", "can", "count", "on", "get", "a", "response", "within", "the", "route", "s", "timeout", "NUMBER", "there", "s", "an", "argument", "to", "be", "made", "that", "client", "request", "can", "impose", "these", "themselves", "however", "we", "re", "likely", "going", "to", "need", "to", "provide", "some", "bound", "on", "the", "prerequisites", "and", "the", "current", "timeout", "be", "somewhat", "convenient", "short", "of", "having", "a", "separate", "field", "as", "suggested", "that", "imposes", "this", "NUMBER", "it", "would", "be", "nice", "to", "minimize", "knobs", "for", "users", "NUMBER", "the", "other", "be", "that", "timeout", "be", "the", "time", "to", "run", "the", "task", "itself", "NUMBER", "from", "a", "metering", "perspective", "we", "re", "likely", "going", "to", "want", "to", "bill", "this", "entire", "duration", "to", "take", "into", "account", "docker", "pull", "of", "images", "container", "creation", "time", "etc", "it", "also", "means", "if", "a", "route", "has", "NUMBER", "s", "timeout", "and", "it", "takes", "NUMBER", "m", "to", "pull", "the", "container", "cold", "a", "request", "will", "hang", "out", "for", "NUMBER", "s", "which", "someone", "else", "could", "interpret", "as", "odd", "NUMBER", "either", "way", "be", "flawed", "and", "requires", "additional", "user", "cycles", "NUMBER", "for", "timeout", "to", "enclose", "the", "entire", "call", "not", "just", "time", "in", "docker", "container", "a", "user", "will", "have", "to", "coordinate", "in", "their", "function", "to", "ensure", "they", "have", "ample", "time", "to", "run", "vs", "the", "latter", "where", "they", "know", "this", "be", "timeout", "but", "prior", "to", "execution", "time", "either", "an", "arbitrary", "timeout", "needs", "to", "be", "imposed", "or", "a", "user", "specified", "timeout", "needs", "to", "be", "imposed", "for", "prerequisite", "work", "and", "the", "client", "request", "has", "no", "guaranteed", "bounds", "on", "response", "time", "from", "fn", "NUMBER", "so", "we", "need", "to", "pick", "who", "gets", "funny", "times", "the", "client", "or", "the", "code", "NUMBER", "for", "cold", "specifically", "this", "gets", "really", "funky", "and", "imo", "it", "s", "really", "not", "all", "that", "challenging", "to", "adjust", "a", "timeout", "if", "a", "user", "gets", "too", "many", "NUMBER", "than", "their", "liking", "NUMBER", "NUMBER", "s", "be", "far", "from", "the", "default", "though", "there", "be", "some", "argument", "to", "be", "made", "that", "the", "code", "should", "execute", "within", "some", "bounds", "timeout", "and", "perhaps", "ancillary", "stuff", "may", "not", "it", "s", "hard", "to", "express", "this", "with", "one", "timeout", "for", "cold", "for", "hot", "a", "lot", "of", "this", "gets", "hidden", "in", "NUMBER", "N", "case", "NUMBER", "NUMBER", "has", "same", "issue", "as", "cold", "since", "we", "can", "do", "some", "slot", "magic", "NUMBER", "If", "the", "function", "developer", "hasn", "t", "allow", "for", "enough", "wriggle", "room", "the", "function", "user", "will", "occasionally", "see", "those", "nasty", "NUMBER", "server", "too", "busy", "error", "imo", "this", "isn", "t", "something", "we", "need", "to", "optimize", "for", "because", "we", "be", "never", "going", "to", "get", "rid", "of", "these", "ever", "ever", "and", "we", "re", "going", "to", "use", "the", "lb", "to", "route", "around", "the", "ones", "of", "this", "nature", "in", "practice", "NUMBER", "can", "we", "be", "sure", "the", "clock", "inside", "the", "container", "be", "the", "same", "as", "the", "one", "on", "the", "host", "What", "if", "we", "get", "into", "freezing", "container", "that", "would", "probably", "make", "that", "explicit", "timestamp", "very", "wrong", "NUMBER", "let", "s", "cross", "that", "bridge", "once", "we", "have", "freezing", "container", "Also", "if", "say", "we", "had", "two", "timeouts", "wait", "timeout", "and", "exec", "timeout", "as", "I", "suggested", "we", "may", "have", "better", "retry", "policy", "it", "at", "lb", "level", "going", "forward", "NUMBER", "For", "example", "if", "wait", "timeout", "be", "set", "to", "say", "NUMBER", "secs", "and", "exec", "timeout", "of", "NUMBER", "secs", "we", "could", "fail", "faster", "on", "fn", "servers", "and", "leave", "room", "for", "x", "number", "of", "retries", "at", "lb", "level", "NUMBER", "eg", "NUMBER", "wait_timeout", "NUMBER", "exec_timeout", "NUMBER", "retries", "NUMBER", "could", "be", "a", "policy", "of", "NUMBER", "secs", "on", "each", "fn", "server", "NUMBER", "also", "wrt", "lb", "for", "sync", "we", "re", "going", "to", "impose", "lb", "timeout", "limits", "on", "the", "request", "as", "well", "which", "will", "provide", "cancellation", "if", "e", "NUMBER", "g", "NUMBER", "image", "pulling", "takes", "too", "long", "not", "sure", "we", "can", "rely", "on", "this", "exactly", "so", "we", "should", "have", "additional", "measures", "NUMBER", "for", "async", "we", "could", "inject", "the", "same", "timeout", "or", "do", "something", "else", "NUMBER", "Sounds", "good", "to", "me", "NUMBER", "not", "oppose", "at", "all", "just", "an", "additional", "point", "to", "consider", "be", "the", "NUMBER", "thing", "be", "mostly", "nice", "for", "async", "with", "it", "going", "away", "async", "will", "get", "a", "lot", "more", "timeout", "status", "if", "node", "s", "have", "many", "function", "queued", "up", "NUMBER", "thinking", "about", "it", "no", "obvious", "fix", "sticks", "out", "since", "slots", "aren", "t", "plumbed", "out", "even", "if", "there", "s", "capacity", "there", "s", "still", "docker", "pull", "to", "eat", "the", "clock", "NUMBER", "NUMBER", "maybe", "something", "comes", "to", "mind", "for", "someone", "else", "NUMBER", "This", "enable", "a", "function", "type", "call", "app", "which", "be", "intended", "for", "a", "function", "write", "as", "an", "app", "NUMBER", "It", "also", "enable", "a", "wildcard", "route", "at", "the", "root", "level", "ie", "path", "re", "NUMBER", "NUMBER", "This", "do", "NOT", "help", "with", "concurrency", "these", "types", "of", "function", "could", "handle", "concurrent", "request", "NUMBER", "cc", "skinowski", "re", "your", "slack", "comment", "today", "NUMBER", "Simple", "ruby", "example", "func", "include", "and", "works", "NUMBER", "Background", "After", "seeing", "some", "similar", "things", "out", "there", "there", "have", "be", "many", "discussions", "how", "that", "could", "look", "within", "Fn", "NUMBER", "fn", "deploy", "be", "such", "a", "nice", "and", "simple", "way", "to", "deploy", "a", "function", "why", "not", "a", "containerized", "app", "A", "hot", "function", "be", "essentially", "the", "same", "as", "a", "long", "run", "app", "just", "that", "it", "can", "only", "do", "one", "thing", "and", "can", "only", "be", "reached", "by", "one", "endpoint", "NUMBER", "The", "way", "Fn", "scales", "and", "deals", "with", "hot", "function", "could", "easily", "apply", "to", "an", "application", "too", "NUMBER", "Getting", "a", "lot", "of", "traffic", "Add", "more", "container", "and", "load", "balance", "between", "them", "NUMBER", "Sitting", "idle", "for", "X", "seconds", "Kill", "it", "NUMBER", "TODO", "I", "was", "noticing", "sometimes", "that", "the", "first", "request", "to", "a", "new", "container", "would", "fail", "NUMBER", "Automatically", "use", "format", "port", "http", "if", "type", "be", "app", "and", "only", "allow", "that", "combination", "NUMBER", "I", "m", "excited", "about", "this", "NUMBER", "I", "was", "expecting", "port", "to", "be", "an", "orthogonal", "attribute", "though", "eg", "NUMBER", "like", "cpu", "memory", "NUMBER", "For", "example", "an", "async", "route", "that", "uses", "json", "but", "binds", "to", "a", "port", "NUMBER", "If", "port", "be", "enable", "we", "spawn", "an", "non", "interactive", "container", "and", "all", "container", "needs", "to", "do", "be", "to", "bind", "listen", "accept", "but", "then", "route", "that", "connection", "through", "json", "or", "http", "depending", "on", "protocol", "chosen", "NUMBER", "Eventually", "perhaps", "all", "of", "this", "could", "go", "over", "http", "NUMBER", "under", "the", "hood", "to", "cut", "down", "num", "of", "connections", "plus", "we", "could", "do", "server", "push", "NUMBER", "If", "we", "could", "use", "non", "interactive", "container", "we", "might", "a", "bit", "experimental", "it", "seems", "but", "be", "able", "to", "use", "LINK", "to", "checkpoint", "start", "container", "quickly", "NUMBER", "They", "don", "t", "support", "interactive", "container", "seems", "like", "NUMBER", "If", "you", "want", "to", "run", "long", "lived", "container", "there", "be", "lots", "of", "things", "you", "ultimately", "want", "to", "take", "into", "account", "of", "ultimately", "you", "end", "up", "implement", "something", "like", "kubernetes", "don", "t", "you", "I", "would", "prefer", "to", "see", "a", "better", "integration", "between", "fn", "as", "it", "now", "and", "k", "NUMBER", "s", "than", "a", "cheap", "version", "of", "k", "NUMBER", "s", "creeping", "into", "fn", "NUMBER", "What", "if", "I", "need", "to", "kill", "the", "node", "that", "the", "container", "has", "start", "on", "do", "I", "have", "to", "start", "this", "up", "again", "Wr", "NUMBER", "t", "NUMBER", "this", "In", "a", "distributed", "install", "behind", "a", "LB", "with", "multiple", "fn", "servers", "where", "no", "which", "host", "would", "that", "port", "land", "would", "container", "be", "able", "to", "talk", "to", "each", "other", "on", "these", "ports", "I", "think", "solving", "wildcard", "at", "the", "gateway", "ingress", "layer", "of", "fn", "with", "everything", "else", "staying", "the", "same", "looks", "better", "from", "a", "user", "perspective", "i", "NUMBER", "e", "NUMBER", "solve", "the", "path", "matching", "problem", "for", "current", "FN", "calls", "be", "my", "preference", "NUMBER", "zootalures", "this", "be", "more", "along", "the", "lines", "of", "Azure", "Container", "Instances", "or", "Hyper", "NUMBER", "sh", "NUMBER", "If", "you", "want", "to", "run", "long", "lived", "container", "there", "be", "lots", "of", "things", "you", "ultimately", "want", "to", "take", "into", "account", "of", "ultimately", "you", "end", "up", "implement", "something", "like", "kubernetes", "don", "t", "you", "I", "would", "prefer", "to", "see", "a", "better", "integration", "between", "fn", "as", "it", "now", "and", "k", "NUMBER", "s", "than", "a", "cheap", "version", "of", "k", "NUMBER", "s", "creeping", "into", "fn", "NUMBER", "I", "don", "t", "think", "Kubernetes", "be", "a", "great", "end", "user", "experience", "definitely", "not", "as", "nice", "as", "fn", "deploy", "and", "you", "re", "do", "NUMBER", "And", "this", "be", "why", "things", "like", "Container", "Instances", "exist", "NUMBER", "What", "if", "I", "need", "to", "kill", "the", "node", "that", "the", "container", "has", "start", "on", "do", "I", "have", "to", "start", "this", "up", "again", "Wr", "NUMBER", "t", "NUMBER", "this", "In", "a", "distributed", "install", "behind", "a", "LB", "with", "multiple", "fn", "servers", "where", "no", "which", "host", "would", "that", "port", "land", "would", "container", "be", "able", "to", "talk", "to", "each", "other", "on", "these", "ports", "Everything", "be", "exactly", "the", "same", "as", "hot", "function", "which", "be", "why", "this", "PR", "be", "pretty", "simple", "NUMBER", "App", "in", "use", "keep", "it", "hot", "NUMBER", "App", "get", "busy", "scale", "it", "out", "NUMBER", "App", "not", "in", "use", "kill", "it", "NUMBER", "I", "think", "solving", "wildcard", "at", "the", "gateway", "ingress", "layer", "of", "fn", "with", "everything", "else", "staying", "the", "same", "looks", "better", "from", "a", "user", "perspective", "i", "NUMBER", "e", "NUMBER", "solve", "the", "path", "matching", "problem", "for", "current", "FN", "calls", "be", "my", "preference", "NUMBER", "This", "do", "need", "to", "solve", "but", "it", "s", "somewhat", "independent", "of", "this", "NUMBER", "Needs", "to", "be", "solve", "for", "function", "too", "not", "just", "for", "this", "NUMBER", "Going", "to", "close", "this", "for", "now", "until", "we", "decide", "to", "move", "forward", "with", "something", "like", "this", "NUMBER", "Is", "there", "some", "news", "What", "did", "you", "decide", "regard", "things", "like", "that", "Maybe", "first", "time", "it", "do", "soft", "but", "if", "pressed", "NUMBER", "times", "it", "will", "hard", "kill", "anything", "run", "and", "shutdown", "NUMBER", "Right", "now", "it", "just", "waits", "until", "it", "s", "do", "serving", "anything", "and", "no", "way", "to", "hard", "kill", "it", "NUMBER", "pkill", "NUMBER", "fn", "works", "that", "seems", "sane", "so", "long", "as", "init", "processes", "don", "t", "also", "do", "that", "and", "skirt", "our", "safe", "shutdown", "I", "do", "not", "know", "off", "the", "top", "of", "my", "head", "be", "this", "relate", "NUMBER", "where", "docker", "receives", "signal", "and", "dies", "and", "fn", "try", "to", "talk", "to", "in", "vain", "No", "basically", "if", "you", "ctrl", "c", "then", "you", "have", "to", "wait", "for", "all", "the", "hot", "container", "to", "die", "off", "before", "it", "quits", "NUMBER", "I", "just", "want", "a", "hard", "quit", "NUMBER", "The", "other", "option", "would", "be", "to", "just", "know", "that", "there", "be", "no", "request", "come", "in", "and", "just", "shutdown", "the", "hot", "container", "that", "would", "work", "too", "NUMBER", "Hello", "I", "get", "this", "error", "when", "tried", "fn", "start", "can", "t", "create", "unix", "socket", "var", "run", "docker", "NUMBER", "sock", "device", "or", "resource", "busy", "NUMBER", "i", "be", "run", "Docker", "with", "minikube", "NUMBER", "any", "idea", "what", "i", "suppose", "to", "do", "NUMBER", "I", "think", "you", "can", "ignore", "that", "NUMBER", "Can", "you", "paste", "the", "entire", "log", "output", "treeder", "I", "think", "in", "cli", "start", "we", "should", "pass", "an", "arg", "to", "fn", "container", "to", "make", "it", "clear", "that", "the", "invocation", "wants", "to", "skip", "docker", "start", "inside", "dind", "NUMBER", "Then", "we", "can", "skip", "dockerd", "start", "inside", "dind", "and", "avoid", "this", "issue", "we", "can", "probably", "just", "check", "the", "existence", "of", "var", "run", "docker", "NUMBER", "sock", "and", "if", "it", "s", "there", "not", "start", "one", "NUMBER", "not", "sure", "how", "that", "would", "handle", "docker", "stop", "start", "of", "fn", "an", "idea", "no", "less", "if", "you", "stop", "dockerd", "the", "sock", "still", "exists", "so", "I", "don", "t", "think", "it", "ll", "work", "NUMBER", "NUMBER", "maybe", "Fixed", "by", "LINK", "rushins", "could", "you", "please", "confirm", "the", "issue", "be", "fix", "That", "message", "was", "a", "warning", "that", "needed", "to", "be", "ignored", "so", "you", "should", "be", "able", "to", "proceed", "with", "your", "work", "regardless", "NUMBER", "Can", "you", "please", "confirm", "skinowski", "do", "you", "want", "me", "try", "by", "downloading", "the", "latest", "code", "and", "try", "as", "i", "see", "that", "you", "have", "stated", "fix", "by", "fnproject", "cli", "NUMBER", "NUMBER", "please", "confirm", "what", "to", "do", "so", "that", "i", "will", "post", "my", "results", "after", "your", "confirmaton", "NUMBER", "rushins", "grab", "the", "latest", "CLI", "from", "here", "LINK", "then", "try", "again", "NUMBER", "sorry", "brew", "not", "update", "to", "latest", "yet", "if", "you", "re", "on", "a", "mac", "i", "have", "alerady", "have", "the", "latest", "FN", "but", "still", "i", "see", "this", "problm", "On", "Fri", "Feb", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Tolga", "Ceylan", "TAG", "write", "Closed", "NUMBER", "TAG", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Best", "Regards", "NS", "Rushi", "Three", "things", "in", "life", "that", "makes", "you", "a", "great", "person", "NUMBER", "NUMBER", "Hardwork", "NUMBER", "Sincerity", "NUMBER", "Success", "NUMBER", "When", "fn", "system", "be", "stable", "no", "new", "container", "be", "spawned", "nor", "killed", "run", "hot", "function", "containerd", "be", "observed", "to", "take", "some", "CPU", "NUMBER", "In", "this", "case", "say", "for", "NUMBER", "container", "work", "on", "a", "steady", "NUMBER", "req", "sec", "load", "we", "observe", "NUMBER", "shim", "processes", "NUMBER", "containerd", "process", "but", "with", "many", "threads", "NUMBER", "Seems", "like", "containerd", "be", "on", "the", "data", "processing", "path", "NUMBER", "why", "be", "containerd", "taking", "cpu", "due", "to", "logs", "stats", "IO", "If", "we", "moved", "to", "port", "network", "model", "instead", "of", "stdin", "out", "err", "would", "this", "take", "containerd", "out", "of", "the", "data", "flow", "This", "be", "stats", "relate", "if", "LINK", "L", "NUMBER", "collectStats", "be", "disabled", "containerd", "CPU", "usage", "goes", "away", "NUMBER", "Related", "LINK", "linux", "issue", "NUMBER", "As", "a", "side", "note", "these", "stats", "we", "currently", "use", "be", "standard", "cgroup", "accounting", "metrics", "available", "in", "sys", "fs", "cgroup", "so", "worst", "case", "if", "this", "issue", "becomes", "a", "priority", "we", "can", "pull", "these", "ourselves", "NUMBER", "Remove", "go", "routine", "protocol", "Dispatch", "to", "avoid", "unsafe", "concurrent", "access", "to", "http", "NUMBER", "ResponseWriter", "headers", "map", "NUMBER", "Swap", "go", "routine", "Dispatch", "with", "channel", "IO", "select", "to", "detect", "timeouts", "and", "also", "notify", "hot", "container", "to", "shutdown", "in", "case", "of", "context", "cancel", "timeout", "NUMBER", "Close", "read", "write", "pipe", "ends", "in", "hot", "container", "exit", "to", "purge", "lingering", "IO", "in", "pipes", "NUMBER", "Fixes", "the", "following", "A", "hot", "container", "that", "timed", "out", "or", "somehow", "fail", "and", "can", "no", "longer", "respond", "NUMBER", "These", "cases", "can", "occur", "if", "timeouts", "occur", "in", "the", "middle", "of", "I", "O", "NUMBER", "Once", "the", "protocol", "req", "resp", "be", "broken", "that", "container", "can", "no", "longer", "serialize", "any", "more", "request", "nor", "responses", "NUMBER", "For", "instance", "if", "hot", "container", "executes", "sleep", "NUMBER", "and", "the", "client", "request", "times", "out", "then", "it", "s", "possible", "to", "keep", "that", "hot", "container", "alive", "with", "incoming", "traffic", "NUMBER", "Until", "sleep", "NUMBER", "completes", "the", "hot", "container", "will", "emit", "timeouts", "to", "all", "request", "NUMBER", "runner_test", "NUMBER", "go", "simulates", "this", "with", "a", "sleep", "NUMBER", "secs", "where", "the", "following", "request", "fail", "due", "to", "stuck", "hot", "container", "LINK", "_test", "NUMBER", "go", "L", "NUMBER", "However", "this", "test", "case", "pass", "on", "master", "today", "since", "NUMBER", "secs", "be", "not", "long", "enough", "to", "freeze", "the", "pipes", "NUMBER", "Build", "failure", "from", "today", "fatal", "error", "concurrent", "map", "writes", "goroutine", "NUMBER", "run", "runtime", "NUMBER", "row", "NUMBER", "x", "NUMBER", "f", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "usr", "local", "go", "src", "runtime", "panic", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "fp", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "ca", "NUMBER", "sp", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "c", "NUMBER", "pc", "NUMBER", "x", "NUMBER", "f", "NUMBER", "runtime", "NUMBER", "mapassign_faststr", "NUMBER", "x", "NUMBER", "e", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "ab", "NUMBER", "NUMBER", "xc", "NUMBER", "ac", "NUMBER", "f", "NUMBER", "NUMBER", "xc", "NUMBER", "x", "NUMBER", "usr", "local", "go", "src", "runtime", "hashmap_fast", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "da", "fp", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "d", "NUMBER", "sp", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "ca", "NUMBER", "pc", "NUMBER", "x", "NUMBER", "a", "net", "textproto", "NUMBER", "MIMEHeader", "NUMBER", "Add", "NUMBER", "xc", "NUMBER", "ab", "NUMBER", "NUMBER", "xc", "NUMBER", "ac", "NUMBER", "f", "NUMBER", "NUMBER", "xc", "NUMBER", "xc", "NUMBER", "ac", "NUMBER", "NUMBER", "x", "NUMBER", "usr", "local", "go", "src", "net", "textproto", "header", "NUMBER", "go", "NUMBER", "NUMBER", "xf", "NUMBER", "fp", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "d", "NUMBER", "sp", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "d", "NUMBER", "pc", "NUMBER", "x", "NUMBER", "b", "NUMBER", "net", "http", "NUMBER", "Header", "NUMBER", "Add", "NUMBER", "xc", "NUMBER", "ab", "NUMBER", "NUMBER", "xc", "NUMBER", "ac", "NUMBER", "f", "NUMBER", "NUMBER", "xc", "NUMBER", "xc", "NUMBER", "ac", "NUMBER", "NUMBER", "x", "NUMBER", "usr", "local", "go", "src", "net", "http", "header", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "fp", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "dc", "NUMBER", "sp", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "d", "NUMBER", "pc", "NUMBER", "x", "NUMBER", "b", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "protocol", "NUMBER", "JSONProtocol", "NUMBER", "Dispatch", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "aa", "NUMBER", "dc", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "aa", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "b", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "x", "NUMBER", "home", "circleci", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "protocol", "json", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "fp", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "f", "NUMBER", "sp", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "dc", "NUMBER", "pc", "NUMBER", "xd", "NUMBER", "cf", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "NUMBER", "hotSlot", "NUMBER", "exec", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "ab", "NUMBER", "NUMBER", "xc", "NUMBER", "cdda", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "NUMBER", "x", "NUMBER", "aa", "NUMBER", "dc", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "f", "NUMBER", "home", "circleci", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "agent", "NUMBER", "go", "NUMBER", "NUMBER", "xe", "NUMBER", "fp", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "fb", "NUMBER", "sp", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "f", "NUMBER", "pc", "NUMBER", "xd", "NUMBER", "dfb", "NUMBER", "runtime", "NUMBER", "goexit", "usr", "local", "go", "src", "runtime", "asm_amd", "NUMBER", "s", "NUMBER", "NUMBER", "x", "NUMBER", "fp", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "fc", "NUMBER", "sp", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "fb", "NUMBER", "pc", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "created", "by", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "NUMBER", "hotSlot", "NUMBER", "exec", "home", "circleci", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "agent", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "This", "be", "cause", "by", "the", "go", "routine", "in", "hot", "exec", "protocol", "NUMBER", "Dispatch", "NUMBER", "Related", "NUMBER", "Currently", "dind", "entry", "works", "like", "this", "dockerd", "sleep", "NUMBER", "NUMBER", "fn", "Instead", "of", "this", "we", "need", "a", "management", "system", "that", "be", "lightweight", "yet", "that", "can", "establish", "these", "dependencies", "clearly", "and", "robustly", "NUMBER", "eg", "NUMBER", "if", "dockerd", "dies", "also", "kill", "fn", "server", "spawn", "fn", "server", "only", "after", "dockerd", "be", "start", "etc", "NUMBER", "Also", "see", "sidecar", "pattern", "and", "or", "other", "ways", "of", "restructuring", "this", "NUMBER", "Perhaps", "these", "should", "be", "two", "container", "where", "fn", "server", "runs", "as", "a", "sidecar", "container", "NUMBER", "Or", "adopt", "an", "init", "process", "to", "manage", "it", "eg", "NUMBER", "see", "LINK", "systemd", "NUMBER", "org", "wiki", "index", "NUMBER", "php", "Init", "During", "test", "run", "into", "a", "case", "of", "crashed", "dockerd", "containerd", "and", "fn", "server", "continued", "run", "unable", "to", "service", "request", "NUMBER", "there", "be", "some", "thinking", "that", "went", "into", "this", "in", "the", "case", "that", "fn", "dies", "the", "container", "will", "die", "NUMBER", "in", "the", "case", "that", "docker", "dies", "fn", "has", "a", "chance", "to", "finish", "any", "outstanding", "tasks", "NUMBER", "supervisord", "and", "friends", "init", "were", "not", "great", "solutions", "to", "this", "restarting", "fn", "or", "dockerd", "as", "in", "most", "cases", "in", "prior", "experiences", "when", "docker", "dies", "there", "be", "no", "restarting", "docker", "to", "bring", "it", "back", "NUMBER", "when", "fn", "dies", "as", "far", "as", "state", "track", "and", "stuff", "kind", "of", "all", "bets", "be", "off", "there", "be", "some", "cases", "like", "panic", "where", "a", "quick", "restart", "almost", "makes", "sense", "but", "since", "we", "lost", "our", "pipes", "to", "the", "user", "container", "it", "doesn", "t", "really", "do", "us", "a", "whole", "lot", "of", "good", "to", "restart", "in", "container", "vs", "the", "container", "restarting", "NUMBER", "the", "best", "solution", "to", "date", "for", "this", "was", "when", "docker", "dies", "stop", "run", "tasks", "on", "that", "server", "let", "it", "finish", "all", "tasks", "it", "was", "run", "and", "take", "it", "out", "of", "commission", "NUMBER", "in", "a", "previous", "life", "we", "start", "container", "every", "task", "and", "that", "would", "simply", "fail", "in", "a", "manner", "safe", "to", "retry", "elsewhere", "with", "hot", "function", "we", "no", "longer", "have", "this", "duty", "and", "perhaps", "we", "need", "a", "higher", "level", "process", "run", "around", "make", "sure", "docker", "be", "not", "dead", "and", "shutting", "down", "the", "incoming", "task", "stream", "when", "it", "be", "the", "experience", "here", "be", "that", "this", "be", "also", "finicky", "checking", "docker", "ping", "but", "if", "we", "relax", "it", "enough", "we", "should", "be", "able", "to", "at", "least", "have", "an", "improvement", "over", "never", "checking", "NUMBER", "anyway", "point", "be", "this", "has", "be", "easier", "to", "do", "operationally", "in", "the", "past", "NUMBER", "Low", "priority", "but", "another", "relate", "issue", "be", "if", "docker", "dies", "during", "shutdown", "fn", "server", "keep", "retrying", "a", "non", "exist", "docker", "socket", "and", "do", "not", "shut", "down", "NUMBER", "Consistently", "get", "this", "FN", "start", "via", "docker", "run", "rm", "privileged", "it", "e", "NO_PROXY", "e", "HTTP_PROXY", "e", "FN_LOG_LEVEL", "debug", "e", "FN_ZIPKIN_URL", "e", "FN_DB_URL", "sqlite", "NUMBER", "app", "data", "fn", "NUMBER", "db", "v", "home", "tceylan", "workdir", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "data", "app", "data", "p", "NUMBER", "NUMBER", "fnproject", "fnserver", "CTRL", "C", "results", "in", "dockerd", "dead", "but", "fn", "run", "further", "CTRL", "C", "be", "ignored", "CINFO", "NUMBER", "Halting", "NUMBER", "INFO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Processing", "signal", "interrupt", "INFO", "NUMBER", "server", "stopped", "INFO", "NUMBER", "hot", "function", "terminated", "app", "fn", "http", "func", "cpus", "NUMBER", "m", "error", "TAG", "format", "http", "id", "NUMBER", "C", "NUMBER", "K", "NUMBER", "N", "NUMBER", "WPT", "NUMBER", "idle_timeout", "NUMBER", "image", "tceylan", "fn", "http", "func", "NUMBER", "memory", "NUMBER", "route", "fn", "http", "func", "WARN", "NUMBER", "docker", "temporary", "error", "retrying", "error", "Delete", "LINK", "NUMBER", "v", "NUMBER", "dial", "unix", "var", "run", "docker", "NUMBER", "sock", "connect", "no", "such", "file", "or", "directory", "WARN", "NUMBER", "docker", "temporary", "error", "retrying", "error", "Delete", "LINK", "NUMBER", "v", "NUMBER", "dial", "unix", "var", "run", "docker", "NUMBER", "sock", "connect", "no", "such", "file", "or", "directory", "WARN", "NUMBER", "docker", "temporary", "error", "retrying", "error", "Delete", "LINK", "NUMBER", "v", "NUMBER", "dial", "unix", "var", "run", "docker", "NUMBER", "sock", "connect", "no", "such", "file", "or", "directory", "WARN", "NUMBER", "docker", "temporary", "error", "retrying", "error", "Delete", "LINK", "NUMBER", "v", "NUMBER", "dial", "unix", "var", "run", "docker", "NUMBER", "sock", "connect", "no", "such", "file", "or", "directory", "where", "we", "be", "left", "with", "two", "processes", "one", "defunct", "root", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fnserver", "root", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "dockerd", "TAG", "Looks", "like", "fn", "server", "now", "the", "init", "process", "should", "honor", "init", "responsibility", "and", "reap", "wait", "for", "children", "as", "well", "NUMBER", "Eventually", "a", "few", "minutes", "it", "times", "out", "and", "shutdown", "succeeds", "WARN", "NUMBER", "docker", "temporary", "error", "retrying", "error", "Delete", "LINK", "NUMBER", "v", "NUMBER", "dial", "unix", "var", "run", "docker", "NUMBER", "sock", "connect", "no", "such", "file", "or", "directory", "WARN", "NUMBER", "docker", "temporary", "error", "retrying", "error", "Delete", "LINK", "NUMBER", "v", "NUMBER", "dial", "unix", "var", "run", "docker", "NUMBER", "sock", "connect", "no", "such", "file", "or", "directory", "WARN", "NUMBER", "docker", "call", "timed", "out", "error", "context", "deadline", "exceeded", "ERRO", "NUMBER", "error", "remove", "container", "container", "NUMBER", "C", "NUMBER", "K", "NUMBER", "N", "NUMBER", "WPT", "NUMBER", "error", "context", "deadline", "exceeded", "be", "the", "SIGINT", "be", "forward", "to", "dockerd", "maybe", "we", "just", "need", "to", "prevent", "that", "not", "sure", "if", "solely", "configuration", "issue", "i", "NUMBER", "e", "NUMBER", "use", "docker", "cli", "in", "terminal", "otherwise", "looks", "like", "safe", "shutdown", "be", "behaving", "as", "intended", "it", "s", "just", "weird", "that", "docker", "dies", "in", "this", "configuration", "NUMBER", "I", "think", "in", "this", "case", "since", "docker", "be", "run", "as", "in", "Makefile", "with", "interactive", "and", "with", "tty", "ti", "so", "CTRL", "C", "SIGINT", "delivered", "to", "both", "docker", "and", "fn", "server", "NUMBER", "We", "could", "prevent", "SIGINT", "to", "docker", "in", "the", "entry", "shell", "script", "NUMBER", "Is", "it", "time", "to", "close", "this", "A", "few", "PRs", "went", "in", "which", "remedies", "most", "of", "these", "issue", "NUMBER", "we", "ve", "just", "add", "dockerd", "monitoring", "pid", "to", "prometheus", "opencensus", "NUMBER", "NUMBER", "NUMBER", "track", "consume", "SIGCHLD", "NUMBER", "NUMBER", "prevent", "passing", "SIGINT", "to", "dockerd", "NUMBER", "Also", "relate", "CLI", "relate", "dind", "by", "pass", "LINK", "NUMBER", "This", "should", "probably", "be", "push", "back", "into", "the", "base", "image", "and", "or", "upstream", "into", "dind", "s", "master", "NUMBER", "In", "many", "k", "NUMBER", "s", "environments", "the", "host", "docker", "uses", "an", "overlay", "network", "which", "ll", "take", "bytes", "away", "from", "the", "effective", "MTU", "of", "outer", "container", "eg", "vxlan", "needs", "NUMBER", "bytes", "often", "leaving", "a", "NUMBER", "MTU", "on", "the", "container", "run", "dind", "and", "fn", "api", "NUMBER", "In", "such", "an", "arrangement", "packets", "exceeding", "the", "smaller", "MTU", "may", "be", "invisibly", "drop", "as", "they", "travel", "across", "the", "dind", "s", "docker", "NUMBER", "bridge", "NUMBER", "This", "mostly", "surfaces", "as", "a", "failure", "of", "function", "to", "be", "able", "to", "reliably", "talk", "to", "external", "services", "NUMBER", "Note", "the", "failure", "may", "be", "intermittent", "depending", "on", "the", "profile", "of", "the", "resulting", "TCP", "communication", "NUMBER", "A", "robust", "fix", "for", "this", "be", "to", "intercept", "the", "startup", "of", "the", "dind", "dockerd", "and", "ensure", "that", "etc", "docker", "daemon", "NUMBER", "json", "currently", "absent", "contains", "the", "following", "setting", "mtu", "NUMBER", "or", "whatever", "the", "MTU", "on", "the", "external", "interface", "may", "be", "NUMBER", "This", "should", "be", "autosized", "so", "the", "container", "works", "in", "a", "variety", "of", "deployments", "NUMBER", "The", "problem", "do", "not", "arise", "when", "use", "an", "embedded", "var", "run", "docker", "NUMBER", "sock", "or", "when", "run", "with", "dind", "on", "a", "host", "that", "can", "supply", "NUMBER", "byte", "MTUs", "to", "container", "on", "the", "host", "docker", "NUMBER", "Done", "that", "s", "cleaner", "but", "it", "ll", "need", "the", "fnproject", "dind", "image", "re", "release", "and", "the", "top", "level", "Dockerfile", "update", "to", "refer", "to", "it", "NUMBER", "Right", "I", "ve", "just", "rebuilt", "and", "re", "run", "the", "same", "test", "on", "my", "desktop", "use", "that", "patch", "NUMBER", "Good", "to", "merge", "I", "think", "NUMBER", "rdallman", "he", "update", "based", "on", "your", "suggestion", "in", "NUMBER", "NUMBER", "I", "think", "this", "should", "be", "part", "of", "perf", "run", "only", "to", "be", "invoked", "in", "circle", "CI", "eg", "NUMBER", "a", "specific", "Makefile", "target", "call", "from", "circle", "CI", "since", "there", "we", "have", "some", "sense", "of", "what", "size", "the", "machine", "be", "NUMBER", "But", "part", "of", "regular", "test", "suite", "be", "going", "to", "fail", "in", "small", "machines", "NUMBER", "Currently", "a", "JSON", "event", "looks", "as", "follows", "call_id", "NUMBER", "C", "NUMBER", "E", "NUMBER", "BQH", "NUMBER", "WG", "NUMBER", "content_type", "application", "json", "body", "Foo", "protocol", "type", "sync", "request_url", "LINK", "headers", "Accept", "Encoding", "gzip", "Content", "Type", "application", "json", "Fn_call_id", "NUMBER", "C", "NUMBER", "E", "NUMBER", "BQH", "NUMBER", "WG", "NUMBER", "Fn_deadline", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Fn_method", "POST", "Fn_request_url", "LINK", "User", "Agent", "Go", "http", "client", "NUMBER", "re", "formatted", "call_id", "NUMBER", "C", "NUMBER", "E", "NUMBER", "BQH", "NUMBER", "WG", "NUMBER", "content_type", "application", "json", "body", "Foo", "protocol", "type", "sync", "request_url", "LINK", "headers", "Accept", "Encoding", "gzip", "Content", "Type", "application", "json", "Fn_call_id", "NUMBER", "C", "NUMBER", "E", "NUMBER", "BQH", "NUMBER", "WG", "NUMBER", "Fn_deadline", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Fn_method", "POST", "Fn_request_url", "LINK", "User", "Agent", "Go", "http", "client", "NUMBER", "I", "think", "NUMBER", "protocol", "NUMBER", "type", "should", "be", "http", "and", "should", "maybe", "be", "renamed", "This", "should", "indicate", "the", "sort", "of", "metdata", "you", "be", "get", "in", "the", "protocol", "document", "it", "s", "unrelated", "to", "the", "fn", "event", "type", "sync", "async", "I", "think", "the", "assumption", "be", "that", "protocol", "be", "specific", "metadata", "relate", "to", "the", "type", "of", "event", "that", "was", "received", "e", "NUMBER", "g", "NUMBER", "an", "HTTP", "call", "NUMBER", "The", "assumption", "be", "that", "this", "may", "change", "extend", "in", "future", "in", "future", "e", "NUMBER", "g", "NUMBER", "MQ", "event", "Kafka", "event", "etc", "there", "should", "be", "no", "Fn_", "headers", "in", "the", "HTTP", "headers", "these", "should", "be", "a", "faithful", "representation", "of", "the", "original", "input", "headers", "this", "be", "actually", "make", "it", "harder", "to", "identify", "the", "correct", "header", "set", "as", "I", "have", "to", "strip", "off", "fn_", "prefixed", "headers", "NUMBER", "Relevant", "Fn_", "headers", "should", "be", "moved", "up", "to", "the", "top", "level", "message", "or", "to", "the", "protocol", "doc", "NUMBER", "e", "NUMBER", "g", "NUMBER", "json", "call_id", "NUMBER", "C", "NUMBER", "E", "NUMBER", "BQH", "NUMBER", "WG", "NUMBER", "content_type", "application", "json", "body", "NUMBER", "type", "sync", "deadline", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "protocol", "type", "http", "request_url", "LINK", "method", "GET", "headers", "Accept", "Encoding", "gzip", "Content", "Type", "application", "json", "User", "Agent", "Go", "http", "client", "NUMBER", "It", "would", "be", "nice", "while", "doing", "this", "to", "move", "where", "we", "modify", "the", "headers", "on", "the", "request", "where", "it", "add", "the", "Fn_", "headers", "into", "the", "http", "protocol", "handler", "and", "not", "earlier", "NUMBER", "So", "everyone", "will", "have", "the", "unmodified", "original", "request", "to", "work", "with", "and", "they", "won", "t", "end", "up", "in", "these", "other", "protocols", "NUMBER", "Thikning", "about", "it", "and", "change", "my", "mind", "from", "previous", "sorry", "denismakogon", "I", "think", "change", "the", "json", "writer", "to", "use", "standard", "Go", "JSON", "marshalling", "for", "the", "JSON", "output", "or", "at", "least", "guaranteeing", "that", "each", "message", "be", "on", "exactly", "one", "line", "would", "be", "better", "easier", "inside", "the", "FDK", "NUMBER", "That", "would", "rely", "on", "upstream", "to", "guarantee", "that", "message", "don", "t", "exceed", "memory", "but", "I", "think", "that", "s", "implied", "for", "async", "anyway", "NUMBER", "Some", "languages", "well", "node", "NUMBER", "js", "anyway", "don", "t", "have", "a", "native", "json", "stream", "parser", "so", "that", "lets", "an", "FDK", "buffer", "the", "line", "before", "parsing", "it", "in", "one", "shot", "NUMBER", "Python", "doesn", "t", "have", "build", "in", "non", "blocking", "JSON", "parser", "so", "it", "s", "not", "a", "problem", "at", "all", "NUMBER", "What", "if", "we", "just", "include", "the", "whole", "HTTP", "request", "into", "the", "payload", "Just", "out", "of", "curiosity", "NUMBER", "What", "if", "we", "just", "include", "the", "whole", "HTTP", "request", "into", "the", "payload", "Just", "out", "of", "curiosity", "NUMBER", "Do", "you", "mean", "the", "Raw", "HTTP", "Frame", "as", "a", "JSON", "string", "If", "so", "dunno", "but", "the", "current", "encapsulation", "seems", "pretty", "as", "expected", "so", "wouldn", "t", "change", "it", "Assuming", "I", "ve", "understood", "isn", "t", "one", "of", "the", "reasons", "for", "having", "the", "JSON", "format", "to", "avoid", "complications", "in", "reading", "HTTP", "frames", "so", "wouldn", "t", "that", "put", "you", "back", "where", "we", "start", "NUMBER", "timeout", "seconds", "from", "the", "moment", "the", "call", "be", "start", "Because", "at", "the", "moment", "it", "be", "neither", "of", "those", "NUMBER", "it", "s", "timeout", "seconds", "from", "the", "moment", "when", "some", "code", "in", "GetCall", "runs", "NUMBER", "it", "be", "intended", "to", "be", "for", "sync", "starting", "the", "clock", "as", "soon", "as", "we", "receive", "a", "request", "to", "run", "a", "function", "NUMBER", "for", "async", "when", "whoever", "pick", "it", "up", "goes", "to", "run", "it", "NUMBER", "explicitly", "it", "be", "before", "start", "since", "start", "takes", "time", "NUMBER", "and", "for", "async", "time", "since", "created", "be", "just", "not", "quite", "right", "but", "for", "sync", "this", "be", "accurate", "NUMBER", "wrt", "where", "it", "comes", "from", "it", "s", "easily", "taken", "from", "the", "context", "as", "well", "ctx", "NUMBER", "Deadline", "and", "provide", "through", "CallInfo", "NUMBER", "it", "s", "unfortunate", "that", "switching", "protocols", "will", "change", "headers", "location", "but", "I", "think", "I", "ve", "beaten", "the", "dead", "horse", "to", "death", "again", "NUMBER", "Hm", "NUMBER", "but", "the", "deadline", "be", "only", "in", "the", "context", "because", "it", "was", "put", "there", "by", "taking", "it", "from", "execDeadline", "which", "be", "the", "field", "I", "d", "like", "to", "refactor", "out", "NUMBER", "I", "see", "it", "s", "add", "to", "the", "headers", "in", "a", "separate", "location", "so", "there", "s", "NUMBER", "things", "I", "guess", "NUMBER", "we", "do", "still", "want", "to", "impose", "execDeadline", "in", "the", "context", "deadline", "itself", "so", "it", "may", "move", "but", "still", "needs", "to", "be", "in", "the", "same", "context", "that", "it", "be", "now", "to", "enclose", "submit", "NUMBER", "my", "understanding", "was", "we", "just", "want", "to", "pluck", "the", "location", "where", "it", "s", "set", "in", "headers", "out", "and", "expose", "execDeadline", "through", "CallInfo", "since", "polluting", "the", "header", "bucket", "in", "the", "picture", "esque", "json", "format", "be", "unsightly", "NUMBER", "ProcessedAt", "we", "have", "call", "NUMBER", "arted_at", "and", "call", "NUMBER", "completed_at", "which", "encompass", "this", "we", "do", "want", "to", "obey", "the", "timeout", "on", "the", "call", "with", "anything", "required", "to", "build", "the", "call", "but", "the", "deadline", "do", "not", "really", "change", "due", "to", "this", "NUMBER", "as", "it", "be", "queued_time", "started_at", "created_at", "so", "I", "think", "this", "conceptually", "be", "the", "same", "thing", "NUMBER", "to", "be", "clear", "if", "we", "simply", "pass", "started_at", "to", "the", "function", "to", "compute", "it", "s", "own", "timeout", "based", "on", "started_at", "NUMBER", "Add", "call_timeout", "then", "this", "will", "be", "different", "than", "the", "actual", "context", "timeout", "that", "we", "be", "imposing", "on", "the", "call", "NUMBER", "Does", "the", "function", "need", "that", "Or", "could", "it", "just", "know", "that", "it", "has", "NUMBER", "seconds", "to", "do", "it", "s", "thing", "it", "needs", "a", "timestamp", "of", "when", "the", "party", "be", "over", "because", "computing", "it", "locally", "will", "be", "different", "than", "the", "timeout", "we", "be", "imposing", "upon", "it", "from", "fn", "s", "side", "of", "things", "from", "an", "implementation", "standpoint", "this", "be", "really", "straightforward", "and", "should", "not", "be", "a", "concern", "NUMBER", "fn", "test", "utils", "can", "should", "be", "able", "to", "simulate", "all", "of", "this", "functionality", "therefore", "remove", "cleanup", "references", "to", "these", "images", "and", "decommission", "them", "from", "fn", "repo", "NUMBER", "NUMBER", "for", "this", "fnproject", "error", "be", "relatively", "huge", "fnproject", "error", "latest", "NUMBER", "a", "NUMBER", "b", "NUMBER", "cc", "NUMBER", "NUMBER", "months", "ago", "NUMBER", "MB", "alpine", "pg", "image", "be", "NUMBER", "megs", "lol", "we", "definitely", "need", "to", "come", "up", "with", "the", "only", "one", "image", "for", "test", "NUMBER", "As", "side", "problem", "unknown", "really", "number", "of", "images", "our", "test", "be", "depending", "on", "pollutes", "local", "registry", "blazingly", "fast", "so", "having", "NUMBER", "tag", "image", "makes", "a", "lot", "more", "sense", "NUMBER", "Along", "with", "that", "the", "number", "of", "function", "we", "made", "for", "test", "really", "makes", "fn", "repo", "looks", "like", "a", "dump", "of", "stuff", "we", "don", "t", "really", "want", "to", "store", "locally", "or", "at", "our", "own", "repositories", "NUMBER", "Yeah", "agreed", "NUMBER", "But", "not", "sure", "that", "that", "image", "be", "the", "last", "one", "lest", "there", "NUMBER", "Quick", "search", "gave", "at", "least", "one", "more", "image", "to", "substitute", "fnproject", "multi", "log", "that", "be", "use", "at", "API", "test", "as", "well", "multi", "log", "be", "gone", "NUMBER", "moved", "to", "fn", "test", "utils", "NUMBER", "use", "PG", "alpine", "use", "Minio", "alpine", "no", "official", "alpine", "distro", "for", "MySQL", "uhhh", "install", "swagger", "tool", "instead", "of", "docker", "image", "use", "retry", "func", "to", "confirm", "that", "datastore", "be", "okay", "before", "run", "test", "Reverting", "minio", "image", "docker", "images", "grep", "minio", "minio", "minio", "latest", "NUMBER", "ee", "NUMBER", "fc", "NUMBER", "NUMBER", "weeks", "ago", "NUMBER", "MB", "webcenter", "alpine", "minio", "latest", "NUMBER", "c", "NUMBER", "f", "NUMBER", "NUMBER", "weeks", "ago", "NUMBER", "MB", "Not", "sure", "what", "we", "can", "do", "with", "mysql", "image", "which", "be", "NUMBER", "Mb", "mysql", "docker", "community", "has", "do", "zero", "to", "build", "on", "alpine", "by", "this", "time", "NUMBER", "PG", "alpine", "size", "made", "me", "happy", "really", "docker", "images", "grep", "postgres", "postgres", "latest", "ec", "NUMBER", "d", "NUMBER", "c", "NUMBER", "NUMBER", "days", "ago", "NUMBER", "MB", "postgres", "NUMBER", "alpine", "NUMBER", "b", "NUMBER", "NUMBER", "weeks", "ago", "NUMBER", "MB", "So", "the", "time", "difference", "be", "not", "that", "huge", "at", "this", "moment", "but", "a", "good", "thing", "to", "have", "along", "with", "NUMBER", "rdallman", "i", "ll", "address", "all", "comments", "except", "swagger", "tool", "change", "NUMBER", "Regarding", "the", "MySQL", "alpine", "image", "we", "might", "ask", "mattlord", "for", "help", "NUMBER", "rdallman", "I", "push", "the", "image", "to", "my", "own", "docker", "repo", "denismakogon", "swagger", "tool", "NUMBER", "NUMBER", "Dockerfile", "you", "can", "find", "in", "tree", "NUMBER", "It", "s", "not", "NUMBER", "Mb", "size", "but", "NUMBER", "Mb", "NUMBER", "Still", "better", "than", "NUMBER", "Gb", "NUMBER", "How", "about", "add", "it", "to", "fnproject", "dockers", "Or", "at", "least", "we", "need", "the", "Dockerfile", "and", "build", "scripts", "public", "NUMBER", "Sure", "can", "submit", "there", "NUMBER", "treeder", "LINK", "Kind", "of", "unrelated", "but", "we", "should", "eventually", "be", "able", "to", "get", "rid", "of", "sleeper", "hello", "and", "error", "images", "as", "fn", "test", "utils", "can", "perform", "same", "functionality", "NUMBER", "I", "tried", "remove", "these", "with", "one", "PR", "but", "I", "quickly", "realized", "it", "s", "more", "work", "than", "I", "anticipated", "NUMBER", "Rebased", "NUMBER", "Nice", "we", "re", "at", "NUMBER", "NUMBER", "which", "be", "good", "NUMBER", "Is", "there", "anything", "else", "that", "we", "can", "speed", "up", "we", "could", "play", "with", "caching", "the", "static", "library", "file", "between", "runs", "NUMBER", "NUMBER", "of", "the", "time", "they", "don", "t", "change", "and", "go", "install", "takes", "about", "a", "minute", "and", "should", "handle", "build", "new", "version", "only", "when", "it", "needs", "to", "NUMBER", "seems", "like", "reducing", "test", "down", "to", "one", "image", "could", "save", "maybe", "NUMBER", "s", "or", "so", "per", "LINK", "issuecomment", "NUMBER", "we", "re", "build", "the", "release", "docker", "image", "on", "branch", "even", "though", "we", "don", "t", "use", "it", "for", "anything", "we", "only", "need", "to", "do", "this", "on", "master", "NUMBER", "that", "s", "NUMBER", "minutes", "NUMBER", "seems", "like", "we", "could", "get", "under", "NUMBER", "minutes", "pretty", "easily", "NUMBER", "we", "re", "also", "installing", "new", "docker", "version", "every", "time", "that", "s", "NUMBER", "minute", "NUMBER", "maybe", "we", "could", "cache", "that", "too", "at", "least", "we", "could", "have", "it", "in", "a", "NUMBER", "deb", "pack", "we", "could", "just", "dpkg", "i", "it", "that", "we", "could", "cache", "NUMBER", "on", "go", "install", "that", "should", "shave", "extensions", "middleware", "build", "time", "as", "well", "NUMBER", "Refactoring", "API", "test", "to", "take", "less", "time", "sqlite", "test", "NUMBER", "s", "overall", "time", "NUMBER", "m", "mysql", "test", "NUMBER", "s", "overall", "time", "NUMBER", "s", "All", "time", "that", "CI", "takes", "pulling", "images", "Let", "s", "see", "how", "much", "time", "CI", "will", "take", "to", "run", "them", "Unfortunately", "compile", "takes", "a", "lot", "of", "time", "NUMBER", "time", "go", "test", "c", "i", "real", "NUMBER", "m", "NUMBER", "s", "user", "NUMBER", "m", "NUMBER", "s", "sys", "NUMBER", "m", "NUMBER", "s", "FYI", "in", "NUMBER", "I", "ve", "fix", "a", "typo", "NUMBER", "sqlite", "sqlite", "NUMBER", "Makefile", "circleCI", "was", "calling", "api_test", "NUMBER", "sh", "with", "wrong", "arg", "for", "sqlite", "NUMBER", "That", "s", "not", "really", "critical", "the", "API", "test", "will", "just", "go", "for", "default", "value", "which", "be", "sqlite", "NUMBER", "At", "this", "moment", "i", "think", "about", "what", "rdallman", "mention", "NUMBER", "Build", "test", "binary", "once", "and", "then", "run", "it", "whenever", "you", "need", "API", "test", "NUMBER", "Hey", "skinowski", "check", "the", "latest", "commit", "it", "try", "to", "accomplish", "what", "I", "was", "talking", "about", "build", "binary", "during", "first", "API", "test", "run", "then", "other", "ones", "will", "reuse", "that", "binary", "later", "NUMBER", "Okay", "there", "be", "some", "problem", "with", "CI", "at", "this", "moment", "when", "trying", "to", "run", "go", "test", "i", "a", "CI", "fail", "with", "the", "following", "error", "go", "install", "runtime", "internal", "sys", "open", "usr", "local", "go", "pkg", "linux_amd", "NUMBER", "runtime", "internal", "sys", "NUMBER", "a", "permission", "denied", "see", "latest", "build", "log", "LINK", "_campaign", "vcs", "integration", "link", "utm_medium", "referral", "utm_source", "github", "build", "link", "NUMBER", "Any", "idea", "how", "can", "we", "overcome", "this", "rdallman", "skinowski", "Got", "some", "ideas", "will", "try", "to", "fix", "access", "rights", "to", "corresponding", "file", "and", "that", "should", "make", "it", "work", "at", "least", "had", "the", "same", "problem", "with", "Gogland", "couple", "month", "ago", "NUMBER", "Changing", "ownership", "and", "rights", "helped", "NUMBER", "Dirty", "hack", "worked", "NUMBER", "One", "binary", "NUMBER", "test", "suite", "NUMBER", "API", "test", "with", "MySQL", "NUMBER", "seconds", "API", "test", "with", "PG", "NUMBER", "seconds", "pg", "becomes", "reachable", "faster", "than", "MySQL", "API", "test", "with", "sqlite", "NUMBER", "NUMBER", "seconds", "sweet", "says", "down", "to", "NUMBER", "minutes", "with", "go", "install", "NUMBER", "looks", "like", "this", "pulls", "in", "NUMBER", "made", "a", "comment", "there", "to", "discuss", "the", "rest", "looks", "good", "NUMBER", "update", "with", "NUMBER", "and", "we", "ll", "get", "this", "in", "Recent", "addition", "of", "fn", "test", "utils", "image", "increase", "this", "significantly", "NUMBER", "Looking", "into", "it", "NUMBER", "NUMBER", "relate", "Extensions", "and", "middleware", "compilations", "at", "the", "end", "of", "test", "NUMBER", "sh", "script", "be", "taking", "forever", "since", "go", "build", "goes", "seem", "to", "perform", "incremental", "build", "NUMBER", "Identified", "the", "real", "culprit", "in", "this", "looks", "like", "fn", "test", "utils", "container", "stays", "in", "a", "busy", "loop", "spewing", "error", "NUMBER", "See", "LINK", "go", "pull", "NUMBER", "LINK", "go", "pull", "NUMBER", "This", "causes", "rest", "of", "the", "build", "to", "take", "forever", "NUMBER", "Also", "a", "poor", "man", "s", "attempt", "to", "speed", "up", "a", "few", "things", "in", "test", "NUMBER", "sh", "and", "release", "NUMBER", "sh", "NUMBER", "Container", "leak", "workaround", "in", "runner_test", "NUMBER", "go", "LINK", "make", "docker", "build", "we", "use", "vanilla", "go", "NUMBER", "alpine", "image", "and", "we", "do", "install", "there", "few", "more", "package", "so", "could", "someone", "tell", "if", "we", "can", "create", "our", "own", "version", "of", "go", "NUMBER", "alpine", "with", "all", "of", "that", "package", "and", "just", "use", "that", "as", "the", "base", "image", "for", "build", "fnserver", "image", "It", "takes", "a", "lot", "of", "time", "in", "CI", "NUMBER", "swagger", "image", "be", "damn", "huge", "for", "just", "one", "binary", "file", "almost", "half", "a", "gig", "NUMBER", "Maybe", "we", "can", "just", "pull", "binary", "release", "from", "here", "LINK", "swagger", "go", "swagger", "release", "and", "use", "that", "binary", "instead", "whole", "image", "Middleware", "and", "extensions", "CI", "build", "at", "least", "NUMBER", "different", "binaries", "for", "those", "to", "see", "if", "API", "be", "not", "broken", "NUMBER", "So", "just", "specifically", "for", "test", "can", "t", "we", "go", "with", "NUMBER", "example", "that", "include", "both", "middleware", "and", "extension", "Datastore", "images", "mysql", "redis", "postgres", "minio", "be", "huge", "we", "need", "to", "get", "smaller", "alpine", "images", "for", "test", "in", "CI", "NUMBER", "Played", "around", "with", "NUMBER", "an", "attempt", "to", "reduce", "shell", "script", "stuff", "into", "Makefile", "itself", "NUMBER", "Brings", "the", "build", "down", "to", "NUMBER", "min", "NUMBER", "down", "to", "NUMBER", "minutes", "now", "NUMBER", "awesome", "thanks", "some", "more", "ideas", "LINK", "issuecomment", "NUMBER", "LINK", "issuecomment", "NUMBER", "NUMBER", "minutes", "and", "change", "now", "NUMBER", "the", "go", "install", "caching", "if", "possible", "should", "save", "about", "another", "minute", "off", "NUMBER", "would", "be", "sweet", "but", "this", "be", "pretty", "bearable", "for", "now", "NUMBER", "we", "could", "leave", "this", "open", "I", "guess", "as", "ongoing", "but", "seems", "like", "we", "re", "in", "a", "pretty", "good", "spot", "Here", "s", "a", "truncated", "report", "from", "go", "vet", "on", "our", "issue", "api", "agent", "agent", "NUMBER", "go", "NUMBER", "NUMBER", "could", "not", "import", "github", "NUMBER", "com", "fnproject", "fn", "fnext", "can", "t", "find", "import", "github", "NUMBER", "com", "fnproject", "fn", "fnext", "api", "agent", "drivers", "docker", "docker_client", "NUMBER", "go", "NUMBER", "NUMBER", "too", "many", "argument", "api", "agent", "hybrid", "client", "NUMBER", "go", "NUMBER", "NUMBER", "DataAccess", "not", "declared", "by", "package", "agent", "api", "datastore", "mock_test", "NUMBER", "go", "NUMBER", "NUMBER", "could", "not", "import", "github", "NUMBER", "com", "fnproject", "fn", "api", "datastore", "internal", "datastoretest", "can", "t", "find", "import", "github", "NUMBER", "com", "fnproject", "fn", "api", "datastore", "internal", "datastoretest", "api", "datastore", "internal", "datastoretest", "test", "NUMBER", "go", "NUMBER", "NUMBER", "invalid", "operation", "ds", "variable", "of", "type", "github", "NUMBER", "com", "fnproject", "fn", "api", "models", "NUMBER", "Datastore", "has", "no", "field", "or", "method", "UpdateCall", "api", "datastore", "internal", "datastoreutil", "metrics", "NUMBER", "go", "NUMBER", "NUMBER", "invalid", "operation", "m", "NUMBER", "ds", "variable", "of", "type", "github", "NUMBER", "com", "fnproject", "fn", "api", "models", "NUMBER", "Datastore", "has", "no", "field", "or", "method", "UpdateCall", "api", "datastore", "sql", "sql_test", "NUMBER", "go", "NUMBER", "NUMBER", "could", "not", "import", "github", "NUMBER", "com", "fnproject", "fn", "api", "datastore", "internal", "datastoretest", "can", "t", "find", "import", "github", "NUMBER", "com", "fnproject", "fn", "api", "datastore", "internal", "datastoretest", "api", "datastore", "sql", "sql", "NUMBER", "go", "NUMBER", "can", "t", "check", "non", "constant", "format", "in", "call", "to", "Sprintf", "api", "logs", "log_test", "NUMBER", "go", "NUMBER", "NUMBER", "could", "not", "import", "github", "NUMBER", "com", "fnproject", "fn", "api", "logs", "test", "can", "t", "find", "import", "github", "NUMBER", "com", "fnproject", "fn", "api", "logs", "test", "api", "logs", "s", "NUMBER", "s", "NUMBER", "_test", "NUMBER", "go", "NUMBER", "NUMBER", "could", "not", "import", "github", "NUMBER", "com", "fnproject", "fn", "api", "logs", "test", "can", "t", "find", "import", "github", "NUMBER", "com", "fnproject", "fn", "api", "logs", "test", "api", "server", "app_listeners", "NUMBER", "go", "NUMBER", "NUMBER", "could", "not", "import", "github", "NUMBER", "com", "fnproject", "fn", "fnext", "can", "t", "find", "import", "github", "NUMBER", "com", "fnproject", "fn", "fnext", "examples", "middleware", "main", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "use", "CustomMiddleware", "literal", "value", "of", "type", "CustomMiddleware", "as", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Middleware", "value", "in", "argument", "to", "funcServer", "NUMBER", "AddMiddleware", "fnlb", "main", "NUMBER", "go", "NUMBER", "NUMBER", "could", "not", "import", "github", "NUMBER", "com", "coreos", "go", "semver", "semver", "can", "t", "find", "import", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "coreos", "go", "semver", "semver", "fnlb", "lb", "allgrouper", "NUMBER", "go", "NUMBER", "NUMBER", "could", "not", "import", "github", "NUMBER", "com", "coreos", "go", "semver", "semver", "can", "t", "find", "import", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "coreos", "go", "semver", "semver", "images", "fn", "test", "utils", "fn", "test", "utils", "NUMBER", "go", "NUMBER", "NUMBER", "could", "not", "import", "github", "NUMBER", "com", "fnproject", "fdk", "go", "can", "t", "find", "import", "github", "NUMBER", "com", "fnproject", "fdk", "go", "test", "fn", "api", "test", "utils", "NUMBER", "go", "NUMBER", "NUMBER", "WithDBURL", "not", "declared", "by", "package", "server", "test", "fn", "api", "test", "fn", "formats", "json", "go", "func", "NUMBER", "go", "NUMBER", "can", "t", "check", "non", "constant", "format", "in", "call", "to", "Fprintf", "test", "fn", "api", "test", "fn", "formats", "json", "go", "func", "NUMBER", "go", "NUMBER", "can", "t", "check", "non", "constant", "format", "in", "call", "to", "Fprintf", "test", "fn", "api", "test", "fn", "formats", "json", "go", "func", "NUMBER", "go", "NUMBER", "can", "t", "check", "non", "constant", "format", "in", "call", "to", "Fprintf", "test", "fn", "api", "test", "fn", "formats", "json", "go", "func", "NUMBER", "go", "NUMBER", "can", "t", "check", "non", "constant", "format", "in", "call", "to", "Fprintf", "I", "assume", "most", "of", "them", "needs", "to", "be", "fix", "NUMBER", "How", "to", "reproduce", "go", "vet", "v", "NUMBER", "NUMBER", "Fn", "API", "change", "NUMBER", "Swagger", "update", "NUMBER", "Certain", "API", "test", "were", "disabled", "to", "make", "CI", "happy", "NUMBER", "Okay", "the", "swagger", "doc", "be", "update", "NUMBER", "Will", "push", "new", "client", "s", "once", "swagger", "doc", "will", "be", "at", "the", "master", "NUMBER", "Answering", "your", "question", "NUMBER", "This", "code", "works", "with", "old", "swagger", "clients", "API", "test", "be", "passing", "and", "Logs", "API", "test", "be", "there", "NUMBER", "NUMBER", "API", "works", "with", "the", "new", "client", "patch", "for", "LINK", "NUMBER", "Regarding", "API", "test", "okay", "that", "s", "possible", "NUMBER", "I", "see", "that", "a", "lot", "of", "code", "was", "rolled", "back", "in", "this", "PR", "but", "why", "did", "do", "we", "want", "to", "change", "the", "default", "response", "to", "plain", "text", "instead", "of", "json", "like", "it", "was", "I", "get", "the", "reason", "that", "someone", "might", "want", "this", "but", "I", "would", "find", "it", "strange", "that", "a", "particular", "endpoint", "returns", "plain", "text", "by", "default", "while", "the", "rest", "return", "JSON", "NUMBER", "So", "there", "s", "at", "least", "one", "reason", "why", "we", "should", "not", "ship", "logs", "as", "JSON", "NUMBER", "It", "forces", "us", "to", "do", "buffering", "of", "the", "whole", "log", "object", "which", "can", "actually", "be", "pretty", "huge", "NUMBER", "The", "second", "reason", "be", "JSON", "that", "we", "ship", "at", "this", "moment", "be", "mostly", "useless", "because", "users", "would", "need", "just", "log", "entity", "why", "do", "they", "need", "exactly", "the", "same", "call", "ID", "as", "they", "pass", "in", "the", "request", "just", "remember", "we", "drop", "app", "name", "from", "router", "response", "object", "NUMBER", "Without", "call", "ID", "current", "JSON", "response", "be", "nothing", "but", "a", "JSON", "with", "NUMBER", "item", "only", "NUMBER", "So", "tell", "me", "what", "s", "the", "point", "of", "having", "a", "JSON", "response", "that", "forces", "us", "to", "buffer", "the", "log", "at", "the", "server", "and", "do", "JSON", "parsing", "at", "the", "client", "side", "why", "not", "just", "ship", "log", "as", "text", "Regarding", "amendments", "at", "NUMBER", "iteration", "i", "decided", "to", "implement", "gzip", "thing", "for", "make", "logs", "smaller", "but", "rdallman", "had", "concerns", "about", "the", "implementation", "so", "we", "decided", "to", "stick", "with", "NUMBER", "part", "of", "the", "original", "issue", "ship", "log", "as", "text", "and", "as", "the", "follow", "up", "use", "gzip", "to", "shrink", "logs", "NUMBER", "Well", "consistency", "for", "one", "NUMBER", "Every", "endpoint", "returns", "JSON", "by", "default", "except", "one", "NUMBER", "And", "two", "there", "s", "a", "high", "probability", "we", "could", "add", "more", "field", "NUMBER", "I", "like", "leaving", "it", "up", "to", "the", "user", "to", "pass", "in", "text", "plain", "if", "they", "want", "to", "change", "to", "another", "format", "but", "default", "should", "probably", "remain", "JSON", "NUMBER", "If", "it", "s", "too", "big", "of", "a", "log", "which", "would", "take", "a", "lot", "and", "we", "probably", "shouldn", "t", "be", "storing", "it", "anyways", "we", "could", "return", "an", "error", "and", "tell", "them", "to", "pass", "in", "text", "plain", "to", "retrieve", "it", "NUMBER", "it", "seems", "fine", "to", "default", "to", "json", "I", "guess", "users", "may", "expect", "this", "if", "they", "don", "t", "provide", "a", "content", "type", "NUMBER", "even", "with", "jq", "magic", "the", "logs", "be", "pretty", "hard", "to", "parse", "out", "via", "eyeball", "of", "json", "since", "the", "newline", "chars", "get", "escaped", "fwiw", "NUMBER", "at", "least", "in", "our", "clients", "we", "generate", "and", "in", "the", "cli", "we", "can", "send", "in", "Accept", "text", "plain", "and", "get", "back", "a", "plain", "text", "log", "which", "should", "cover", "most", "usage", "so", "we", "get", "the", "benefits", "NUMBER", "wrt", "field", "at", "a", "minimum", "we", "can", "maintain", "_some_", "endpoint", "that", "just", "returns", "a", "plaintext", "log", "whether", "it", "s", "the", "current", "one", "or", "not", "we", "have", "NUMBER", "call", "id", "for", "additional", "call", "field", "for", "most", "stuff", "probably", "NUMBER", "One", "thing", "be", "miss", "here", "be", "the", "swagger", "doc", "NUMBER", "new", "inactivity", "time", "out", "for", "hot", "queue", "we", "previously", "keep", "hot", "queues", "in", "memory", "forever", "NUMBER", "each", "hot", "queue", "now", "has", "a", "hot", "launcher", "to", "monitor", "and", "launch", "hot", "container", "consumers", "now", "create", "a", "consumer", "channel", "with", "startDequeuer", "that", "can", "be", "cancelled", "via", "context", "consumers", "now", "ping", "signal", "hot", "launcher", "every", "NUMBER", "msecs", "until", "they", "get", "a", "slot", "test", "for", "slot", "queue", "mgr", "rdallman", "ping", "NUMBER", "So", "this", "slightly", "get", "less", "complicated", "since", "the", "removal", "of", "destroySlotQueue", "which", "no", "longer", "needs", "closer", "channel", "and", "isClosed", "bool", "NUMBER", "Dequeuing", "hotWait", "waiters", "no", "longer", "need", "this", "notification", "wake", "up", "from", "destroySlotQueue", "since", "they", "now", "simply", "check", "a", "NUMBER", "shutdown", "themselves", "NUMBER", "update", "LGTM", "too", "NUMBER", "one", "bugaboo", "about", "returning", "ctx", "NUMBER", "DeadlineCanceled", "or", "something", "in", "waitHot", "on", "shutdown", "relate", "to", "NUMBER", "This", "looks", "bigger", "than", "it", "be", "since", "there", "s", "a", "search", "and", "replace", "for", "server", "NUMBER", "Database", "server", "NUMBER", "Database", "NUMBER", "Main", "gist", "be", "that", "it", "add", "BeforeAppGet", "ctx", "context", "NUMBER", "Context", "appName", "string", "error", "AfterAppGet", "ctx", "context", "NUMBER", "Context", "app", "models", "NUMBER", "App", "error", "BeforeAppsList", "ctx", "context", "NUMBER", "Context", "filter", "models", "NUMBER", "AppFilter", "error", "AfterAppsList", "ctx", "context", "NUMBER", "Context", "apps", "models", "NUMBER", "App", "error", "And", "some", "change", "to", "support", "this", "NUMBER", "Example", "where", "these", "change", "be", "required", "be", "LINK", "ext", "auth", "tree", "master", "simple", "I", "was", "wondering", "where", "you", "were", "going", "with", "that", "first", "off", "you", "can", "t", "have", "the", "method", "and", "the", "var", "with", "the", "same", "name", "so", "we", "can", "t", "just", "keep", "it", "as", "it", "was", "unless", "we", "call", "it", "something", "else", "NUMBER", "Which", "be", "fine", "I", "don", "t", "care", "call", "it", "Datastore", "NUMBER", "if", "you", "want", "but", "it", "s", "also", "not", "use", "anywhere", "that", "requires", "it", "to", "be", "export", "so", "NUMBER", "Maybe", "we", "can", "come", "back", "to", "that", "if", "it", "needs", "to", "be", "export", "for", "something", "Even", "then", "it", "might", "make", "sense", "to", "have", "it", "as", "a", "function", "so", "extensions", "could", "swap", "it", "out", "via", "the", "interface", "ie", "SetDatastore", "NUMBER", "NUMBER", "New", "tester", "image", "that", "uses", "go", "fdk", "for", "advance", "test", "scenarios", "NUMBER", "Right", "now", "this", "be", "an", "enhanced", "hello", "sleeper", "rolled", "into", "one", "that", "echos", "the", "received", "headers", "env", "to", "allow", "write", "test", "cases", "NUMBER", "I", "m", "not", "sure", "this", "be", "the", "way", "forward", "but", "I", "need", "this", "image", "to", "test", "scenarios", "that", "we", "currently", "cannot", "test", "such", "as", "hot", "request", "to", "be", "able", "to", "test", "a", "new", "header", "fn_deadline", "etc", "NUMBER", "Since", "it", "ll", "be", "directly", "use", "by", "fn", "test", "cases", "I", "thought", "this", "should", "really", "be", "in", "fn", "repo", "under", "NUMBER", "images", "NUMBER", "rdallman", "ping", "NUMBER", "I", "might", "be", "miss", "something", "but", "why", "do", "core", "need", "fdk", "go", "dependency", "for", "this", "image", "I", "think", "I", "can", "skip", "the", "go", "test", "in", "test", "NUMBER", "sh", "to", "avoid", "this", "dep", "NUMBER", "It", "would", "probably", "best", "for", "it", "to", "have", "it", "s", "own", "glide", "or", "preferably", "dep", "file", "and", "vendor", "dir", "or", "preferably", "get", "deps", "on", "build", "LINK", "so", "we", "don", "t", "just", "go", "add", "a", "bunch", "of", "dependencies", "to", "core", "that", "it", "doesn", "t", "use", "NUMBER", "Just", "like", "any", "other", "image", "or", "function", "has", "it", "s", "own", "dependencies", "NUMBER", "ping", "rdallman", "treeder", "Async", "hot", "request", "body", "do", "not", "seem", "to", "make", "it", "into", "the", "container", "NUMBER", "In", "async", "hot", "case", "some", "http", "headers", "be", "miss", "NUMBER", "Compare", "the", "following", "async", "and", "sync", "request", "POST", "r", "test", "foofn", "HTTP", "NUMBER", "Host", "localhost", "NUMBER", "Fn_app_name", "test", "Fn_call_id", "NUMBER", "C", "NUMBER", "AGQA", "NUMBER", "K", "NUMBER", "WJR", "NUMBER", "Fn_format", "http", "Fn_header_accept", "Fn_header_content_length", "NUMBER", "Fn_header_content_type", "application", "x", "www", "form", "urlencoded", "Fn_header_user_agent", "curl", "NUMBER", "Fn_memory", "NUMBER", "Fn_method", "POST", "Fn_param_app", "test", "Fn_param_route", "foofn", "Fn_path", "foofn", "Fn_request_url", "LINK", "Fn_type", "async", "POST", "r", "test", "foofn", "HTTP", "NUMBER", "Host", "localhost", "NUMBER", "Connection", "close", "Accept", "Connection", "close", "Content", "Length", "NUMBER", "Content", "Type", "application", "x", "www", "form", "urlencoded", "Fn_app_name", "test", "Fn_call_id", "NUMBER", "C", "NUMBER", "AJ", "NUMBER", "FMD", "NUMBER", "WMM", "NUMBER", "Fn_format", "http", "Fn_memory", "NUMBER", "Fn_method", "POST", "Fn_param_app", "test", "Fn_param_route", "foofn", "Fn_path", "foofn", "Fn_request_url", "LINK", "Fn_type", "sync", "i", "NUMBER", "e", "content", "length", "be", "not", "pass", "to", "outer", "request", "but", "moved", "to", "fn_header", "value", "and", "body", "never", "seems", "to", "be", "sent", "fn", "call", "without", "content", "length", "seems", "to", "result", "in", "body", "be", "sent", "without", "framing", "on", "the", "client", "side", "NUMBER", "That", "s", "something", "which", "still", "needs", "to", "be", "address", "NUMBER", "For", "the", "async", "path", "every", "HTTP", "protocol", "header", "gets", "fn_header_", "prefix", "this", "be", "up", "to", "FDKs", "to", "handle", "this", "case", "not", "sure", "that", "FDK", "that", "you", "ve", "use", "to", "develop", "function", "NUMBER", "Not", "sure", "about", "fn", "call", "NUMBER", "At", "this", "moment", "there", "s", "no", "difference", "in", "what", "fn", "server", "writes", "to", "logs", "would", "that", "be", "runner", "node", "or", "API", "node", "NUMBER", "fn", "api_", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Serving", "Functions", "API", "on", "address", "NUMBER", "fn", "api_", "NUMBER", "fn", "api_", "NUMBER", "______", "fn", "api_", "NUMBER", "____", "___", "fn", "api_", "NUMBER", "_", "__", "fn", "api_", "NUMBER", "__", "fn", "api_", "NUMBER", "_", "_", "_", "fn", "api_", "NUMBER", "v", "NUMBER", "fn", "api_", "NUMBER", "fn", "runner_", "NUMBER", "fn", "runner_", "NUMBER", "______", "fn", "runner_", "NUMBER", "____", "___", "fn", "runner_", "NUMBER", "_", "__", "fn", "runner_", "NUMBER", "__", "fn", "runner_", "NUMBER", "_", "_", "_", "fn", "runner_", "NUMBER", "v", "NUMBER", "fn", "runner_", "NUMBER", "fn", "runner_", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Serving", "Functions", "API", "on", "address", "NUMBER", "So", "should", "fn", "instance", "log", "its", "node", "type", "Problem", "fix", "NUMBER", "Will", "a", "public", "API", "be", "available", "to", "remove", "message", "off", "of", "the", "internal", "message", "queue", "This", "may", "be", "important", "in", "situations", "where", "message", "did", "not", "get", "processed", "in", "a", "timely", "manner", "and", "thus", "be", "stale", "message", "NUMBER", "When", "use", "asynchronous", "invocations", "the", "incoming", "request", "be", "placed", "on", "the", "internal", "messaging", "queue", "NUMBER", "Is", "there", "a", "public", "API", "to", "view", "the", "message", "currently", "sitting", "on", "the", "queue", "waiting", "to", "be", "processed", "You", "might", "try", "stats", "endpoint", "to", "see", "current", "function", "be", "start", "competed", "fail", "NUMBER", "gonna", "close", "for", "NUMBER", "for", "viewing", "queues", "we", "re", "very", "likely", "not", "gonna", "be", "able", "to", "support", "a", "peek", "api", "where", "peek", "be", "effectively", "a", "dequeue", "without", "dequeueing", "a", "message", "these", "be", "notoriously", "tricky", "to", "support", "over", "different", "message", "queue", "semantics", "and", "we", "would", "like", "to", "keep", "things", "easily", "pluggable", "NUMBER", "thanks", "for", "file", "this", "NUMBER", "The", "proposal", "doesn", "t", "look", "like", "a", "good", "place", "for", "documentation", "NUMBER", "Since", "all", "new", "env", "vars", "be", "part", "of", "Fn", "server", "configuration", "they", "should", "stick", "with", "other", "opts", "with", "the", "reference", "to", "hybrid", "spec", "NUMBER", "agree", "with", "rdallman", "on", "this", "one", "NUMBER", "very", "few", "customers", "should", "be", "run", "in", "Hybrid", "mode", "and", "thus", "the", "options", "be", "confusing", "even", "me", "NUMBER", "If", "we", "decide", "to", "keep", "them", "all", "together", "there", "should", "be", "a", "loud", "only", "required", "in", "hybrid", "mode", "note", "on", "those", "two", "options", "NUMBER", "Okay", "i", "ll", "open", "issue", "for", "extending", "hybrid", "doc", "with", "all", "new", "options", "NUMBER", "When", "FN_RUNNER_API_URL", "be", "not", "reachable", "runner", "crashes", "with", "panic", "FN_LOG_LEVEL", "ERROR", "FN_NODE_TYPE", "runner", "FN_PORT", "NUMBER", "FN_RUNNER_API_URL", "LINK", "NUMBER", "fnserver", "ERRO", "NUMBER", "error", "from", "API", "server", "retrying", "error", "Get", "LINK", "dial", "tcp", "NUMBER", "NUMBER", "getsockopt", "connection", "refused", "______", "____", "___", "_", "__", "__", "_", "_", "_", "v", "NUMBER", "panic", "interface", "conversion", "opentracing", "NUMBER", "SpanContext", "be", "opentracing", "NUMBER", "noopSpanContext", "not", "zipkintracer", "NUMBER", "SpanContext", "goroutine", "NUMBER", "run", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "openzipkin", "zipkin", "go", "opentracing", "NUMBER", "tracerImpl", "NUMBER", "artSpanWithOptions", "NUMBER", "xc", "NUMBER", "de", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "openzipkin", "zipkin", "go", "opentracing", "tracer", "NUMBER", "go", "NUMBER", "NUMBER", "xb", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "openzipkin", "zipkin", "go", "opentracing", "NUMBER", "tracerImpl", "NUMBER", "StartSpan", "NUMBER", "xc", "NUMBER", "de", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "openzipkin", "zipkin", "go", "opentracing", "tracer", "NUMBER", "go", "NUMBER", "NUMBER", "xdd", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "FnTracer", "NUMBER", "StartSpan", "NUMBER", "x", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "de", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "fntracer", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "FnTracer", "NUMBER", "StartSpan", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "TAG", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "opentracing", "opentracing", "go", "NUMBER", "artSpanFromContextWithTracer", "NUMBER", "x", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "cf", "NUMBER", "NUMBER", "x", "NUMBER", "bad", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "opentracing", "opentracing", "go", "gocontext", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "opentracing", "opentracing", "go", "NUMBER", "StartSpanFromContext", "NUMBER", "x", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "cf", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "c", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "opentracing", "opentracing", "go", "gocontext", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "hybrid", "NUMBER", "client", "NUMBER", "once", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "cf", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "bbe", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "ed", "NUMBER", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "hybrid", "client", "NUMBER", "go", "NUMBER", "NUMBER", "xdb", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "hybrid", "NUMBER", "client", "NUMBER", "do", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "cf", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "bbe", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "ed", "NUMBER", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "hybrid", "client", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "hybrid", "NUMBER", "client", "NUMBER", "Dequeue", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "cf", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "hybrid", "client", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "NUMBER", "CachedDataAccess", "NUMBER", "Dequeue", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "TAG", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "NUMBER", "agent", "NUMBER", "asyncChew", "NUMBER", "func", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "e", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "async", "NUMBER", "go", "NUMBER", "NUMBER", "xaa", "created", "by", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "NUMBER", "agent", "NUMBER", "asyncChew", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "async", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "Steps", "to", "reproduce", "NUMBER", "Deploy", "function", "NUMBER", "NUMBER", "Call", "function", "NUMBER", "curl", "v", "localhost", "NUMBER", "r", "testapp", "test", "fdk", "python", "d", "name", "john", "Trying", "NUMBER", "TCP_NODELAY", "set", "Connected", "to", "localhost", "NUMBER", "port", "NUMBER", "NUMBER", "POST", "r", "testapp", "test", "fdk", "python", "HTTP", "NUMBER", "Host", "localhost", "NUMBER", "User", "Agent", "curl", "NUMBER", "Accept", "Content", "Length", "NUMBER", "Content", "Type", "application", "x", "www", "form", "urlencoded", "upload", "completely", "sent", "off", "NUMBER", "out", "of", "NUMBER", "bytes", "TAG", "NUMBER", "Try", "to", "get", "call", "log", "from", "step", "NUMBER", "fn", "logs", "get", "testapp", "NUMBER", "C", "NUMBER", "DMDP", "NUMBER", "A", "NUMBER", "WG", "NUMBER", "host", "localhost", "NUMBER", "accept", "fn_app_name", "testapp", "fn_call_id", "NUMBER", "C", "NUMBER", "DMDP", "NUMBER", "A", "NUMBER", "WG", "NUMBER", "fn_format", "http", "fn_memory", "NUMBER", "fn_method", "GET", "fn_param_app", "testapp", "fn_param_route", "test", "fdk", "python", "fn_path", "test", "fdk", "python", "fn_request_url", "LINK", "fdk", "python", "fn_type", "sync", "user", "agent", "curl", "NUMBER", "environ", "PATH", "usr", "local", "bin", "usr", "local", "sbin", "usr", "local", "bin", "usr", "sbin", "usr", "bin", "sbin", "bin", "HOSTNAME", "cb", "NUMBER", "FN_PATH", "test", "fdk", "python", "FN_MEMORY", "NUMBER", "FN_TYPE", "sync", "FN_FORMAT", "http", "FN_APP_NAME", "testapp", "LANG", "C", "NUMBER", "UTF", "NUMBER", "GPG_KEY", "NUMBER", "D", "NUMBER", "DF", "NUMBER", "D", "NUMBER", "E", "NUMBER", "C", "NUMBER", "FBFB", "NUMBER", "F", "NUMBER", "D", "NUMBER", "EA", "NUMBER", "AA", "NUMBER", "D", "PYTHON_VERSION", "NUMBER", "PYTHON_PIP_VERSION", "NUMBER", "HOME", "root", "So", "the", "log", "be", "still", "there", "NUMBER", "It", "happens", "because", "of", "the", "way", "we", "delete", "calls", "and", "logs", "NUMBER", "Fn", "stores", "call", "in", "SQL", "store", "when", "we", "attempt", "to", "delete", "an", "app", "Fn", "attempts", "to", "delete", "routes", "calls", "and", "logs", "within", "a", "single", "transaction", "without", "use", "of", "datastore", "API", "just", "raw", "SQL", "LINK", "L", "NUMBER", "NUMBER", "NUMBER", "for", "the", "per", "app", "bucket", "rdallman", "Can", "you", "explain", "why", "that", "be", "not", "the", "case", "to", "have", "one", "app", "bucket", "with", "log", "entries", "As", "far", "as", "I", "understand", "the", "source", "of", "the", "problem", "here", "be", "that", "we", "don", "t", "have", "the", "cleaner", "for", "logs", "for", "certain", "reasons", "no", "matter", "what", "they", "be", "at", "this", "moment", "NUMBER", "So", "we", "want", "to", "make", "the", "simple", "plan", "for", "storing", "logs", "I", "would", "say", "that", "best", "option", "here", "be", "to", "create", "an", "app", "bucket", "as", "the", "placeholder", "for", "logs", "NUMBER", "I", "think", "it", "would", "work", "for", "us", "at", "least", "for", "the", "one", "reason", "at", "this", "moment", "we", "have", "only", "NUMBER", "API", "endpoint", "that", "retrieves", "logs", "from", "the", "log", "store", "NUMBER", "So", "tell", "me", "why", "deleting", "the", "whole", "app", "bucket", "would", "not", "work", "for", "Fn", "Maybe", "I", "be", "miss", "something", "I", "realize", "some", "people", "might", "not", "like", "the", "idea", "of", "dropping", "the", "vendor", "dir", "but", "if", "a", "dep", "tool", "works", "good", "then", "we", "shouldn", "t", "have", "vendor", "in", "git", "NUMBER", "If", "nothing", "else", "this", "shows", "that", "the", "dep", "tool", "be", "OK", "to", "use", "now", "NUMBER", "I", "just", "did", "the", "following", "rm", "rf", "vendor", "dep", "init", "set", "the", "same", "constraints", "as", "we", "had", "in", "glide", "file", "in", "Gopkg", "NUMBER", "toml", "dep", "ensure", "fix", "one", "change", "introduce", "here", "LINK", "L", "NUMBER", "NUMBER", "to", "switch", "to", "dep", "tool", "as", "well", "as", "waiting", "until", "NUMBER", "pre", "release", "see", "LINK", "NUMBER", "K", "NUMBER", "s", "support", "for", "the", "fnlb", "NUMBER", "This", "add", "a", "k", "NUMBER", "sGrouper", "as", "propose", "in", "fn", "NUMBER", "NUMBER", "It", "pulls", "in", "the", "k", "NUMBER", "s", "NUMBER", "io", "client", "go", "requirement", "at", "their", "recommended", "v", "NUMBER", "NUMBER", "Each", "fnlb", "if", "run", "in", "a", "k", "NUMBER", "s", "container", "can", "be", "configured", "to", "watch", "for", "the", "existence", "of", "pods", "matching", "a", "selector", "spec", "NUMBER", "The", "shared", "DB", "requirement", "disappears", "in", "this", "configuration", "as", "the", "k", "NUMBER", "s", "master", "replaces", "it", "NUMBER", "The", "management", "API", "still", "exists", "at", "the", "GET", "endpoint", "to", "list", "status", "NUMBER", "There", "s", "a", "lot", "of", "similarity", "between", "allGrouper", "and", "k", "NUMBER", "sGrouper", "NUMBER", "Further", "refactoring", "can", "be", "do", "but", "want", "to", "put", "a", "stake", "in", "the", "ground", "so", "that", "helm", "work", "can", "proceed", "the", "refactor", "can", "wait", "until", "fnlb", "lives", "in", "its", "own", "repo", "NUMBER", "In", "k", "NUMBER", "s", "s", "case", "add", "remove", "be", "probably", "not", "applicable", "and", "should", "return", "perm", "denied", "NUMBER", "Rest", "of", "allGrouper", "logic", "seems", "identical", "so", "we", "should", "be", "able", "to", "replace", "that", "db", "DBStore", "with", "a", "custom", "k", "NUMBER", "s", "db", "layer", "that", "implement", "DBStore", "iface", "right", "That", "s", "pretty", "much", "what", "i", "was", "thinking", "yeah", "NUMBER", "Want", "a", "first", "stab", "that", "can", "go", "into", "the", "helm", "charts", "NUMBER", "Excuse", "typo", "NUMBER", "Phone", "screens", "don", "t", "make", "great", "ketbroads", "NUMBER", "Original", "message", "From", "Tolga", "Ceylan", "TAG", "Date", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "p", "NUMBER", "m", "NUMBER", "GMT", "NUMBER", "NUMBER", "To", "fnproject", "fn", "TAG", "Cc", "jan", "grant", "TAG", "Author", "TAG", "Subject", "Re", "fnproject", "fn", "Fnlb", "k", "NUMBER", "s", "grouper", "NUMBER", "In", "k", "NUMBER", "s", "s", "case", "add", "remove", "be", "probably", "not", "applicable", "and", "should", "return", "perm", "denied", "NUMBER", "Rest", "of", "allGrouper", "logic", "seems", "identical", "so", "we", "should", "be", "able", "to", "replace", "that", "db", "DBStore", "with", "a", "custom", "k", "NUMBER", "s", "db", "layer", "that", "implement", "DBStore", "iface", "right", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "or", "mute", "the", "thread", "NUMBER", "api_version", "NUMBER", "publisher", "api_key", "NUMBER", "dde", "NUMBER", "f", "NUMBER", "d", "NUMBER", "a", "NUMBER", "dd", "NUMBER", "c", "NUMBER", "e", "NUMBER", "bb", "name", "GitHub", "entity", "external_key", "github", "fnproject", "fn", "title", "fnproject", "fn", "subtitle", "GitHub", "repository", "main_image_url", "LINK", "NUMBER", "d", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "fc", "NUMBER", "c", "NUMBER", "bb", "NUMBER", "png", "avatar_image_url", "LINK", "NUMBER", "c", "NUMBER", "b", "NUMBER", "e", "NUMBER", "NUMBER", "aed", "b", "NUMBER", "png", "action", "name", "Open", "in", "GitHub", "url", "LINK", "update", "snippets", "icon", "PERSON", "message", "skinowski", "in", "NUMBER", "In", "k", "NUMBER", "s", "s", "case", "add", "remove", "be", "probably", "not", "applicable", "and", "should", "return", "perm", "denied", "NUMBER", "Rest", "of", "allGrouper", "logic", "seems", "identical", "so", "we", "should", "be", "able", "to", "replace", "that", "db", "DBStore", "with", "a", "custom", "k", "NUMBER", "s", "db", "layer", "that", "implement", "DBStore", "iface", "right", "action", "name", "View", "Pull", "Request", "url", "LINK", "issuecomment", "NUMBER", "moved", "slot", "management", "to", "its", "own", "file", "slots", "be", "now", "implement", "with", "LIFO", "semantics", "this", "be", "important", "since", "we", "do", "not", "want", "to", "round", "robin", "hot", "container", "NUMBER", "Idle", "hot", "container", "should", "timeout", "properly", "NUMBER", "each", "slot", "queue", "now", "stores", "a", "few", "basic", "stats", "such", "as", "avg", "time", "a", "call", "spent", "in", "a", "given", "state", "and", "number", "of", "run", "launching", "container", "number", "of", "waiting", "calls", "in", "those", "state", "NUMBER", "first", "metrics", "in", "these", "basic", "stats", "be", "discarded", "to", "avoid", "initial", "docker", "pull", "start", "spikes", "NUMBER", "agent", "now", "records", "update", "slot", "queue", "state", "and", "how", "much", "time", "a", "call", "stayed", "in", "that", "state", "NUMBER", "waitHotSlot", "replaces", "the", "previous", "wait", "NUMBER", "msec", "logic", "where", "it", "sends", "a", "msg", "to", "hot", "slot", "go", "routine", "launchHot", "and", "waits", "for", "a", "slot", "launchHot", "be", "now", "a", "go", "routine", "for", "track", "container", "in", "hot", "slots", "it", "determines", "if", "a", "new", "container", "be", "needed", "based", "on", "slot", "queue", "stats", "NUMBER", "Running", "a", "simple", "test", "against", "the", "old", "logic", "and", "the", "impact", "of", "round", "robin", "on", "hot", "container", "be", "visible", "NUMBER", "Once", "you", "spin", "up", "a", "bunch", "of", "hot", "container", "even", "a", "small", "load", "keep", "all", "of", "them", "active", "since", "idle_timeout", "be", "not", "triggered", "NUMBER", "Seeing", "some", "suspicious", "NUMBER", "xx", "which", "I", "ll", "look", "into", "tomorrow", "but", "overall", "latencies", "numOfContainers", "looks", "good", "NUMBER", "I", "had", "to", "tweak", "a", "few", "things", "fix", "some", "track", "bug", "NUMBER", "rdallman", "I", "think", "this", "be", "a", "bit", "in", "better", "shape", "now", "NUMBER", "I", "notice", "that", "the", "NUMBER", "xx", "issue", "were", "popping", "up", "due", "to", "NUMBER", "time", "check", "in", "call", "NUMBER", "Start", "which", "I", "was", "violating", "NUMBER", "I", "preserved", "this", "threshold", "as", "NUMBER", "but", "add", "it", "s", "counterpart", "and", "made", "them", "two", "variables", "where", "we", "spend", "up", "to", "NUMBER", "of", "timeout", "on", "wait", "queue", "and", "NUMBER", "in", "after", "Start", "NUMBER", "isWaitTolerable", "be", "aggressive", "about", "launching", "container", "NUMBER", "But", "this", "be", "dampened", "by", "a", "last", "minute", "slot", "check", "and", "seems", "to", "work", "well", "with", "LIFO", "idle", "timeouts", "NUMBER", "I", "really", "tried", "to", "make", "isWaitTolerable", "and", "waitHotSlot", "as", "simple", "as", "I", "can", "since", "it", "s", "really", "hard", "to", "tune", "it", "NUMBER", "feedback", "loop", "various", "work", "loads", "scenarios", "NUMBER", "slot", "latency", "trackers", "throw", "away", "first", "measurements", "to", "improve", "docker", "pull", "start", "initial", "delay", "NUMBER", "I", "test", "this", "on", "a", "echo", "server", "test", "case", "and", "observed", "no", "differences", "between", "error", "rates", "between", "old", "new", "logic", "but", "new", "code", "tends", "to", "stabilize", "to", "a", "lower", "constant", "number", "of", "container", "to", "sustain", "that", "workload", "NUMBER", "Due", "to", "LIFO", "this", "be", "significantly", "less", "than", "previous", "container", "count", "which", "due", "to", "round", "robin", "keep", "alive", "in", "docker", "NUMBER", "There", "s", "some", "risk", "in", "the", "new", "code", "for", "different", "workloads", "but", "LIFO", "idle", "timeout", "improvement", "be", "really", "big", "NUMBER", "Ran", "another", "test", "with", "gamma", "distribution", "of", "NUMBER", "to", "NUMBER", "msec", "sleep", "time", "on", "container", "which", "worked", "OK", "NUMBER", "Hmm", "I", "see", "a", "bug", "in", "getSlot", "NUMBER", "I", "need", "to", "do", "one", "more", "pass", "NUMBER", "relate", "to", "NUMBER", "I", "have", "Fn", "cluster", "that", "run", "about", "NUMBER", "K", "calls", "node", "NUMBER", "Queue", "NUMBER", "Running", "NUMBER", "Complete", "NUMBER", "Failed", "NUMBER", "FunctionStatsMap", "test", "fdk", "python", "Queue", "NUMBER", "Running", "NUMBER", "Complete", "NUMBER", "Failed", "NUMBER", "node", "NUMBER", "Queue", "NUMBER", "Running", "NUMBER", "Complete", "NUMBER", "Failed", "NUMBER", "FunctionStatsMap", "test", "fdk", "python", "Queue", "NUMBER", "Running", "NUMBER", "Complete", "NUMBER", "Failed", "NUMBER", "node", "NUMBER", "Queue", "NUMBER", "Running", "NUMBER", "Complete", "NUMBER", "Failed", "NUMBER", "FunctionStatsMap", "test", "fdk", "python", "Queue", "NUMBER", "Running", "NUMBER", "Complete", "NUMBER", "Failed", "NUMBER", "But", "when", "i", "m", "trying", "to", "list", "all", "calls", "by", "setting", "number", "of", "objects", "per", "page", "equal", "to", "NUMBER", "API", "returns", "only", "NUMBER", "fn", "calls", "list", "ab", "test", "per", "page", "NUMBER", "grep", "Status", "wc", "l", "NUMBER", "I", "want", "to", "know", "how", "can", "I", "get", "NUMBER", "K", "calls", "all", "in", "one", "response", "or", "how", "can", "I", "get", "the", "number", "of", "successful", "or", "error", "calls", "within", "the", "certain", "timeframe", "At", "this", "particular", "moment", "as", "a", "user", "I", "have", "to", "do", "reverse", "iteration", "among", "calls", "because", "on", "API", "request", "I", "get", "only", "N", "last", "calls", "NUMBER", "So", "the", "pagination", "API", "be", "not", "really", "clear", "how", "to", "work", "with", "that", "I", "m", "sure", "that", "we", "have", "any", "doc", "explaining", "how", "pagination", "API", "works", "and", "specific", "reason", "why", "we", "limit", "the", "number", "of", "object", "to", "NUMBER", "Okay", "this", "do", "look", "like", "bad", "UX", "with", "Fn", "CLI", "it", "do", "not", "provide", "next", "cursor", "that", "s", "why", "it", "s", "kinda", "hard", "to", "work", "with", "calls", "with", "CLI", "NUMBER", "Tend", "to", "agree", "CLI", "at", "this", "moment", "be", "the", "best", "option", "but", "client", "libraries", "be", "not", "good", "at", "this", "moment", "because", "they", "were", "build", "with", "the", "swagger", "spec", "that", "makes", "them", "look", "like", "over", "complexed", "HTTP", "Fn", "specific", "framework", "where", "people", "doesn", "t", "see", "HTTP", "stuff", "but", "more", "playing", "with", "models", "client", "apps", "routes", "etc", "NUMBER", "NUMBER", "Current", "pagination", "looks", "awesome", "if", "i", "would", "go", "and", "build", "my", "own", "http", "fn", "library", "to", "talk", "to", "Fn", "because", "swagger", "clients", "don", "t", "care", "about", "pagination", "swagger", "generator", "considers", "our", "pagination", "attributes", "as", "regular", "query", "parameters", "and", "doesn", "t", "let", "call", "some", "sort", "of", "calls", "NUMBER", "next", "API", "so", "at", "CLI", "we", "have", "to", "do", "things", "like", "manual", "pagination", "which", "be", "awful", "but", "something", "that", "we", "supposed", "to", "be", "living", "with", "NUMBER", "To", "the", "statement", "that", "people", "doesn", "t", "use", "CLI", "i", "thought", "just", "as", "you", "that", "not", "true", "but", "it", "appeared", "that", "CLI", "be", "very", "useful", "for", "things", "like", "calls", "and", "logs", "of", "course", "in", "a", "context", "of", "function", "or", "sequence", "of", "function", "test", "NUMBER", "can", "we", "start", "with", "provide", "a", "simpler", "way", "for", "the", "CLI", "to", "grab", "all", "results", "Maybe", "by", "returning", "next", "cursor", "as", "you", "say", "I", "also", "work", "with", "the", "CLI", "quite", "a", "bit", "and", "needed", "a", "better", "way", "to", "get", "through", "sets", "of", "results", "NUMBER", "It", "was", "on", "my", "list", "of", "things", "to", "play", "around", "with", "and", "come", "up", "with", "some", "suggestions", "NUMBER", "ya", "I", "m", "not", "saying", "default", "to", "all", "just", "an", "easier", "way", "NUMBER", "I", "haven", "t", "played", "around", "with", "it", "enough", "but", "use", "the", "cursors", "was", "NOT", "intuitive", "unfortunately", "NUMBER", "Use", "two", "distinct", "DB", "connection", "for", "read", "and", "write", "ops", "In", "Fn", "deployment", "when", "it", "fn", "servers", "use", "MySQL", "as", "database", "where", "MySQL", "presented", "as", "group", "replication", "cluster", "with", "MySQL", "router", "sitting", "ontop", "there", "s", "possibility", "to", "use", "different", "connections", "for", "reading", "and", "write", "to", "the", "DB", "NUMBER", "MySQL", "router", "MySQL", "router", "LINK", "router", "NUMBER", "en", "be", "a", "per", "application", "query", "router", "that", "exposes", "two", "ports", "for", "reading", "and", "write", "ops", "default", "ports", "NUMBER", "NUMBER", "NUMBER", "Pros", "The", "benefit", "of", "such", "feature", "be", "that", "we", "can", "spread", "our", "request", "among", "two", "different", "connections", "and", "their", "internal", "pools", "NUMBER", "Cons", "This", "be", "MySQL", "specific", "feature", "NUMBER", "Would", "require", "certain", "workarounds", "for", "exist", "MySQL", "driver", "NUMBER", "IMO", "from", "a", "high", "level", "it", "doesn", "t", "hurt", "to", "have", "mysql", "specific", "features", "build", "into", "the", "Fn", "mysql", "driver", "NUMBER", "Doesn", "t", "pollute", "exist", "core", "or", "other", "db", "drivers", "NUMBER", "So", "port", "splitting", "be", "not", "necessary", "the", "MySQL", "router", "on", "port", "NUMBER", "accepts", "both", "read", "and", "write", "but", "it", "s", "recommended", "to", "use", "NUMBER", "port", "for", "reads", "only", "NUMBER", "I", "do", "agree", "that", "DB", "driver", "be", "simple", "and", "DB", "feature", "agnostic", "but", "not", "sure", "if", "that", "be", "something", "we", "should", "be", "proud", "of", "NUMBER", "Indeed", "we", "re", "not", "doing", "something", "very", "heavy", "on", "reads", "or", "writes", "data", "schemas", "be", "pretty", "flat", "we", "don", "t", "have", "joins", "or", "whatever", "NUMBER", "Note", "for", "those", "who", "gonna", "deploy", "Fn", "with", "the", "MySQL", "group", "replication", "it", "be", "recommended", "to", "deploy", "NUMBER", "router", "per", "Fn", "node", "NUMBER", "gonna", "close", "this", "a", "more", "general", "purpose", "issue", "discussing", "mysql", "clustering", "strategies", "could", "link", "to", "this", "not", "sure", "this", "be", "worth", "discussion", "in", "itself", "and", "targeted", "as", "feature", "req", "this", "reduces", "NUMBER", "msec", "response", "time", "in", "first", "time", "launched", "hot", "container", "subsequent", "request", "may", "trigger", "launch", "of", "more", "hot", "container", "but", "this", "drawback", "be", "ok", "since", "this", "means", "exist", "hot", "container", "were", "not", "able", "to", "meet", "the", "demand", "NUMBER", "this", "ends", "up", "make", "a", "pretty", "big", "herd", "against", "docker", "for", "short", "lived", "tasks", "NUMBER", "the", "theory", "with", "the", "NUMBER", "ms", "be", "that", "since", "we", "have", "to", "eat", "NUMBER", "ms", "of", "docker", "startup", "time", "if", "we", "have", "to", "start", "a", "container", "it", "s", "better", "to", "try", "to", "wait", "a", "little", "to", "find", "a", "free", "slot", "than", "to", "start", "a", "container", "and", "well", "NUMBER", "ms", "TAG", "NUMBER", "case", "but", "I", "have", "some", "ideas", "use", "the", "singleflight", "mechanism", "we", "have", "perhaps", "NUMBER", "anyway", "I", "think", "leaving", "the", "NUMBER", "ms", "be", "advisable", "just", "to", "do", "a", "little", "herd", "dampening", "but", "agree", "that", "it", "s", "a", "pretty", "naive", "policy", "to", "begin", "with", "NUMBER", "iirc", "the", "issue", "was", "too", "many", "container", "launching", "on", "startup", "this", "likely", "in", "practice", "be", "the", "same", "wrt", "that", "NUMBER", "I", "ll", "submit", "another", "PR", "later", "for", "this", "NUMBER", "I", "have", "some", "draft", "change", "to", "improve", "this", "NUMBER", "LINK", "I", "fix", "up", "the", "others", "that", "were", "nearby", "too", "NUMBER", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "Michael", "J", "Williams", "LINK", "w", "williams", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "LGTM", "only", "one", "comment", "that", "maybe", "we", "should", "replace", "the", "heading", "link", "client", "libraries", "with", "function", "developer", "kits", "in", "docs", "README", "NUMBER", "md", "CLA", "Bot", "All", "committers", "have", "sign", "the", "CLA", "NUMBER", "This", "really", "should", "of", "gone", "in", "as", "part", "of", "c", "NUMBER", "ec", "NUMBER", "cc", "NUMBER", "ecad", "NUMBER", "f", "NUMBER", "e", "NUMBER", "f", "NUMBER", "bc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "but", "better", "late", "than", "never", "NUMBER", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "Alexander", "Bransby", "Sharples", "LINK", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "There", "be", "NUMBER", "main", "parts", "that", "will", "work", "together", "to", "make", "hybrid", "work", "NUMBER", "NUMBER", "Fn", "Server", "API", "NUMBER", "Fn", "LB", "NUMBER", "Fn", "Runners", "Workers", "At", "a", "high", "level", "they", "interact", "like", "this", "Control", "Plane", "nbsp", "Work", "Plane", "Fn", "Server", "larr", "Fn", "LB", "s", "darr", "uarr", "darr", "Database", "larr", "Fn", "Runner", "s", "MQ", "nbsp", "darr", "Blob", "Store", "nbsp", "Blob", "Store", "Where", "everything", "in", "the", "Work", "Plane", "talks", "to", "the", "Fn", "Server", "to", "tell", "it", "what", "to", "do", "NUMBER", "As", "a", "bare", "minimum", "starting", "point", "we", "should", "have", "NUMBER", "container", "that", "we", "can", "run", "like", "this", "Start", "Control", "Plane", "sh", "docker", "run", "NUMBER", "fnproject", "fnserver", "Start", "Work", "Plane", "sh", "docker", "run", "NUMBER", "fnproject", "fnlb", "docker", "run", "NUMBER", "fnproject", "fnrunner", "Fn", "Server", "This", "probably", "doesn", "t", "really", "have", "to", "change", "much", "except", "flag", "to", "disable", "async", "processing", "new", "API", "endpoints", "to", "support", "below", "Fn", "LB", "allow", "runners", "to", "register", "themselves", "simple", "API", "on", "LB", "Runners", "When", "fnrunner", "starts", "it", "will", "register", "itself", "with", "the", "fnlb", "k", "NUMBER", "s", "do", "this", "for", "us", "since", "we", "re", "use", "this", "start", "ask", "the", "fnserver", "for", "async", "calls", "For", "each", "call", "it", "gets", "it", "will", "execute", "call", "report", "status", "to", "fnserver", "send", "logs", "to", "fnserver", "this", "could", "store", "logs", "in", "local", "blob", "store", "but", "for", "first", "attempt", "let", "s", "assume", "this", "isn", "t", "the", "case", "allow", "runners", "to", "register", "themselves", "how", "to", "do", "this", "with", "multiple", "LBs", "run", "it", "s", "backed", "by", "a", "db", "NUMBER", "just", "start", "lb", "with", "DB_URL", "NUMBER", "same", "as", "server", "support", "mysql", "pg", "NUMBER", "new", "API", "endpoints", "to", "support", "below", "I", "have", "a", "sketched", "out", "design", "doc", "for", "this", "api", "for", "fn", "server", "that", "I", "think", "will", "work", "be", "simple", "i", "can", "try", "to", "put", "it", "into", "something", "more", "palatable", "NUMBER", "was", "attempting", "to", "add", "reasonable", "MQ", "semantics", "at", "the", "same", "time", "but", "it", "s", "possible", "we", "could", "should", "punt", "this", "NUMBER", "Am", "i", "right", "in", "thinking", "async", "will", "go", "Outside", "NUMBER", "push", "FnLB", "NUMBER", "push", "Server", "NUMBER", "push", "MQ", "NUMBER", "poss", "via", "API", "pull", "runner", "If", "so", "then", "direct", "MQ", "be", "a", "good", "start", "for", "NUMBER", "and", "then", "wrap", "in", "an", "API", "once", "that", "works", "I", "think", "That", "sounds", "about", "right", "NUMBER", "I", "don", "t", "think", "we", "d", "want", "runner", "to", "directly", "access", "MQ", "though", "would", "add", "another", "layer", "of", "authentication", "and", "what", "not", "that", "we", "d", "have", "to", "think", "about", "NUMBER", "Runner", "should", "be", "pretty", "dumb", "for", "the", "most", "part", "and", "just", "get", "work", "sync", "or", "ask", "for", "work", "async", "run", "it", "report", "results", "that", "s", "basically", "all", "it", "should", "think", "about", "NUMBER", "And", "hopefully", "just", "talk", "to", "one", "thing", "NUMBER", "In", "fact", "we", "use", "to", "have", "a", "tasks", "endpoint", "that", "already", "did", "this", "via", "the", "API", "but", "I", "think", "it", "get", "remove", "in", "the", "recent", "gutting", "of", "core", "NUMBER", "runner", "will", "also", "have", "to", "post", "work", "for", "async", "NUMBER", "async", "request", "will", "come", "in", "through", "the", "same", "lb", "as", "sync", "in", "front", "of", "runners", "presumably", "NUMBER", "agree", "about", "direct", "access", "shouldn", "t", "be", "too", "bad", "to", "proxy", "through", "api", "nodes", "NUMBER", "Fnlb", "NUMBER", "i", "know", "there", "s", "more", "to", "this", "I", "don", "t", "think", "so", "NUMBER", "the", "lb", "just", "needs", "to", "know", "about", "the", "set", "of", "nodes", "NUMBER", "in", "theory", "in", "our", "k", "NUMBER", "s", "config", "somewhere", "there", "be", "a", "hook", "we", "can", "call", "when", "we", "add", "a", "new", "runner", "pod", "that", "calls", "the", "lb", "address", "to", "add", "itself", "so", "the", "lb", "be", "mostly", "an", "operational", "task", "at", "this", "point", "NUMBER", "imo", "we", "should", "just", "do", "authentication", "at", "the", "runner", "level", "not", "the", "lb", "level", "to", "keep", "the", "lb", "from", "get", "gummed", "up", "in", "NUMBER", "ways", "NUMBER", "Blob", "Store", "it", "would", "be", "nice", "initially", "to", "have", "all", "data", "storage", "on", "the", "LHS", "of", "this", "dia", "NUMBER", "then", "the", "runner", "be", "just", "sending", "all", "data", "to", "the", "LHS", "api", "and", "doesn", "t", "have", "to", "worry", "about", "straddling", "NUMBER", "things", "for", "certain", "things", "NUMBER", "We", "re", "still", "not", "certain", "that", "logs", "on", "the", "RHS", "will", "be", "in", "demand", "from", "users", "NUMBER", "I", "wonder", "if", "we", "could", "move", "async", "processing", "completely", "to", "RHS", "NUMBER", "Currently", "control", "plane", "be", "not", "really", "NUMBER", "control", "plane", "as", "it", "s", "in", "async", "processing", "path", "NUMBER", "We", "should", "be", "able", "to", "modify", "app", "routes", "regardless", "of", "the", "load", "on", "the", "front", "door", "NUMBER", "eg", "NUMBER", "MQ", "and", "call", "logs", "status", "storage", "on", "RHS", "side", "versus", "mostly", "read", "only", "config", "DB", "on", "LHS", "NUMBER", "skinowski", "one", "of", "the", "main", "objectives", "of", "all", "this", "be", "to", "keep", "the", "database", "and", "what", "not", "on", "the", "LHS", "so", "we", "users", "don", "t", "have", "to", "maintain", "multiple", "databases", "mqs", "obstores", "NUMBER", "I", "m", "going", "to", "make", "a", "start", "on", "this", "namely", "the", "part", "flag", "to", "disable", "async", "processing", "First", "run", "two", "instances", "of", "the", "fn", "server", "point", "at", "the", "same", "redis", "instance", "NUMBER", "Then", "I", "ll", "add", "a", "flag", "so", "that", "one", "of", "them", "only", "serves", "request", "to", "invoke", "asynchronous", "function", "on", "r", "so", "it", "puts", "the", "request", "on", "the", "queue", "and", "the", "other", "serves", "both", "synchronous", "request", "and", "pulls", "request", "from", "the", "queue", "NUMBER", "Shoud", "the", "runner", "NUMBER", "endpoints", "be", "api", "version", "too", "i", "NUMBER", "e", "NUMBER", "runner", "v", "NUMBER", "NUMBER", "It", "s", "not", "clear", "to", "me", "how", "the", "partitions", "topics", "be", "expected", "map", "to", "runners", "NUMBER", "Partitions", "be", "essentially", "static", "which", "be", "to", "say", "there", "s", "an", "async", "process", "for", "expanding", "the", "number", "of", "partitions", "a", "topic", "has", "but", "that", "expansion", "can", "take", "seconds", "NUMBER", "Brokers", "also", "have", "a", "number", "of", "FDs", "open", "per", "partition", "they", "re", "handle", "NUMBER", "Additionally", "the", "API", "nodes", "be", "the", "kafka", "consumers", "in", "this", "picture", "NUMBER", "If", "they", "re", "in", "the", "same", "consumer", "group", "then", "you", "may", "want", "as", "many", "partitions", "as", "API", "nodes", "or", "some", "reasonably", "larger", "number", "to", "balance", "load", "across", "API", "nodes", "NUMBER", "However", "use", "the", "runner", "node", "or", "something", "derived", "from", "it", "as", "a", "partition", "key", "means", "that", "the", "work", "will", "land", "in", "some", "partition", "NUMBER", "There", "s", "no", "guarantee", "that", "a", "k", "NUMBER", "s", "load", "balanced", "call", "from", "any", "particular", "runner", "will", "land", "on", "an", "API", "node", "whose", "consumer", "be", "handle", "the", "partition", "associated", "with", "that", "runner", "NUMBER", "In", "the", "extreme", "case", "if", "there", "be", "more", "API", "nodes", "than", "partitions", "it", "s", "possible", "that", "an", "API", "node", "will", "be", "starved", "and", "have", "no", "work", "to", "deliver", "NUMBER", "I", "think", "the", "expected", "model", "with", "kafka", "be", "also", "that", "topics", "be", "relatively", "static", "the", "way", "the", "broker", "works", "it", "doesn", "t", "sound", "like", "a", "topic", "per", "app", "route", "combo", "be", "workable", "either", "NUMBER", "Thinking", "about", "it", "even", "if", "we", "don", "t", "care", "about", "rendezvous", "style", "clustering", "of", "app", "route", "to", "preferred", "runners", "there", "s", "still", "a", "problem", "with", "API", "nodes", "all", "in", "the", "same", "consumer", "group", "to", "wit", "if", "there", "s", "just", "one", "async", "Call", "and", "it", "s", "landed", "in", "partition", "NUMBER", "then", "runners", "may", "fail", "to", "be", "tasked", "with", "that", "Call", "if", "their", "request", "to", "runner", "dequeue", "be", "loadbalanced", "to", "an", "API", "node", "whose", "consumer", "isn", "t", "servicing", "that", "partition", "NUMBER", "The", "alternative", "there", "be", "potentially", "that", "we", "use", "one", "CG", "per", "API", "node", "so", "all", "async", "Calls", "be", "effectively", "broadcast", "to", "all", "API", "nodes", "since", "there", "s", "some", "DB", "work", "to", "do", "before", "handing", "the", "work", "off", "to", "the", "runner", "there", "s", "less", "of", "a", "problem", "perhaps", "in", "just", "looping", "through", "Call", "records", "until", "we", "find", "the", "next", "one", "that", "s", "untaken", "NUMBER", "One", "might", "wonder", "why", "we", "use", "a", "MQ", "in", "that", "instance", "NUMBER", "However", "given", "the", "semantics", "of", "Kafka", "s", "offset", "commit", "the", "API", "node", "would", "have", "to", "serve", "up", "the", "first", "work", "item", "it", "find", "unless", "we", "wanted", "to", "drastically", "complicate", "the", "process", "of", "de", "queuing", "work", "at", "the", "API", "node", "NUMBER", "It", "s", "possible", "that", "a", "particular", "kafka", "Consumer", "knows", "which", "partitions", "be", "in", "the", "set", "that", "be", "currently", "bound", "to", "it", "NUMBER", "The", "ConsumerGroup", "rebalance", "be", "another", "eventual", "kind", "of", "operation", "but", "one", "option", "be", "for", "API", "nodes", "to", "gossip", "amongst", "themselves", "so", "that", "they", "know", "where", "a", "partition", "be", "be", "served", "from", "then", "internally", "proxy", "a", "request", "for", "partition", "X", "from", "one", "API", "node", "to", "the", "one", "that", "owns", "its", "partition", "NUMBER", "Or", "even", "open", "close", "consumer", "clients", "and", "pick", "the", "partition", "manually", "NUMBER", "I", "be", "worried", "that", "there", "be", "layers", "between", "the", "runner", "nodes", "on", "the", "RHS", "which", "have", "the", "information", "about", "what", "hot", "container", "be", "run", "and", "therefore", "would", "prefer", "to", "dequeue", "a", "job", "that", "fits", "because", "it", "would", "be", "efficient", "and", "the", "MQ", "partitions", "on", "the", "LHS", "which", "could", "be", "partitioned", "with", "the", "same", "criteria", "for", "efficiency", "NUMBER", "Along", "the", "way", "we", "don", "t", "just", "have", "the", "fn", "LB", "there", "s", "likely", "to", "to", "be", "an", "OCI", "LB", "and", "a", "Kube", "service", "LB", "which", "could", "shuffle", "request", "inefficiently", "because", "they", "don", "t", "know", "about", "the", "partitioning", "information", "NUMBER", "Basically", "our", "final", "LB", "would", "have", "to", "undo", "the", "work", "that", "the", "OCI", "LB", "and", "the", "Kube", "LB", "have", "do", "NUMBER", "The", "question", "be", "whether", "the", "partition", "aware", "strategy", "that", "has", "to", "undo", "the", "OCI", "Kube", "LBs", "distribution", "be", "really", "more", "efficient", "than", "a", "naive", "non", "partition", "aware", "pulling", "of", "jobs", "from", "any", "node", "or", "whether", "the", "redirections", "at", "the", "last", "layer", "where", "a", "request", "hits", "a", "pod", "which", "says", "no", "I", "m", "not", "the", "right", "one", "go", "there", "instead", "add", "enough", "latency", "that", "statistically", "it", "s", "not", "worth", "the", "effort", "of", "doing", "it", "when", "the", "numbers", "be", "big", "NUMBER", "Also", "when", "a", "user", "enqueues", "an", "async", "job", "how", "much", "do", "they", "care", "about", "latency", "be", "another", "open", "question", "NUMBER", "I", "don", "t", "know", "the", "answers", "but", "I", "feel", "that", "not", "worrying", "about", "partitions", "at", "this", "stage", "makes", "the", "implementation", "simpler", "and", "it", "can", "also", "be", "iteratively", "improved", "when", "we", "do", "have", "the", "data", "to", "determine", "the", "efficiency", "answer", "NUMBER", "There", "be", "some", "other", "complications", "with", "effectively", "pre", "assigning", "a", "task", "to", "a", "runner", "oriented", "partition", "NUMBER", "There", "be", "no", "easy", "way", "to", "manage", "work", "stealing", "in", "that", "scenario", "runnner", "A", "might", "be", "busy", "for", "a", "long", "time", "runner", "B", "which", "favours", "the", "same", "hot", "set", "free", "but", "there", "s", "not", "an", "easy", "way", "to", "land", "the", "work", "there", "NUMBER", "If", "the", "intent", "be", "that", "the", "FNLB", "assigns", "an", "async", "task", "to", "a", "runner", "with", "the", "view", "that", "that", "work", "will", "be", "scheduled", "soon", "then", "we", "ll", "need", "a", "way", "to", "ensure", "that", "capacity", "for", "it", "be", "reserved", "NUMBER", "You", "mention", "timeouts", "NUMBER", "The", "other", "question", "revolves", "around", "async", "work", "that", "turns", "up", "with", "a", "deadline", "NUMBER", "If", "that", "be", "fast", "approaching", "then", "the", "Call", "s", "priority", "for", "placement", "should", "rise", "I", "presume", "NUMBER", "Simple", "queues", "especially", "under", "the", "constraint", "that", "multiplying", "topics", "or", "partitions", "be", "expensive", "don", "t", "feel", "like", "a", "great", "fit", "here", "NUMBER", "Excuse", "typo", "NUMBER", "Phone", "screens", "don", "t", "make", "great", "ketbroads", "NUMBER", "Original", "message", "From", "Reed", "Allman", "TAG", "Date", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "p", "NUMBER", "m", "NUMBER", "GMT", "NUMBER", "NUMBER", "To", "fnproject", "fn", "TAG", "Cc", "jan", "grant", "TAG", "Comment", "TAG", "Subject", "Re", "fnproject", "fn", "Hybrid", "Mode", "MVP", "NUMBER", "I", "don", "t", "know", "the", "answers", "but", "I", "feel", "that", "not", "worrying", "about", "partitions", "at", "this", "stage", "makes", "the", "implementation", "simpler", "and", "it", "can", "also", "be", "iteratively", "improved", "when", "we", "do", "have", "the", "data", "to", "determine", "the", "efficiency", "answer", "NUMBER", "I", "wish", "this", "were", "possible", "kafka", "do", "not", "seem", "to", "have", "any", "easy", "way", "to", "provide", "MPMC", "semantics", "without", "thinking", "about", "partitioning", "NUMBER", "We", "need", "to", "have", "someway", "to", "have", "NUMBER", "process", "chewing", "on", "a", "partition", "we", "can", "t", "just", "let", "every", "request", "ask", "a", "queue", "for", "the", "head", "this", "has", "pros", "and", "cons", "not", "having", "to", "worry", "about", "timeouts", "sounds", "NUMBER", "delightful", "NUMBER", "Initial", "thinking", "was", "that", "API", "nodes", "would", "have", "their", "own", "partition", "and", "be", "part", "of", "a", "consumer", "group", "and", "this", "seems", "like", "the", "naive", "approach", "that", "would", "likely", "work", "but", "has", "at", "least", "one", "deficiency", "in", "that", "we", "lose", "distribution", "information", "for", "RHS", "processing", "NUMBER", "The", "thinking", "be", "that", "there", "be", "likely", "a", "small", "set", "of", "API", "nodes", "and", "a", "large", "set", "of", "runner", "nodes", "and", "we", "want", "a", "runner", "node", "to", "process", "some", "subset", "of", "calls", "so", "that", "we", "can", "re", "use", "hot", "container", "image", "caching", "the", "same", "reasons", "we", "have", "fnlb", "for", "sync", "NUMBER", "Can", "think", "about", "other", "ways", "to", "accomplish", "this", "NUMBER", "The", "complication", "of", "the", "k", "NUMBER", "s", "round", "robin", "load", "balancer", "in", "the", "middle", "be", "something", "that", "didn", "t", "come", "to", "mind", "thanks", "for", "point", "it", "out", "NUMBER", "It", "s", "kind", "of", "unfortunate", "that", "we", "have", "to", "proxy", "runner", "nodes", "over", "to", "the", "LHS", "to", "talk", "to", "kafka", "in", "a", "normal", "non", "hybrid", "deployment", "runners", "full", "fn", "servers", "get", "their", "own", "partition", "seems", "like", "it", "would", "work", "just", "fine", "maybe", "optimal", "even", "NUMBER", "It", "seems", "brittle", "to", "rely", "on", "having", "a", "sticky", "vs", "NUMBER", "round", "robin", "et", "al", "load", "balancer", "in", "between", "RHS", "and", "LHS", "so", "that", "kafka", "clients", "will", "work", "but", "it", "seems", "like", "it", "would", "maybe", "close", "this", "hole", "since", "this", "API", "be", "hanging", "off", "on", "the", "side", "we", "could", "open", "a", "long", "lived", "connection", "between", "an", "API", "node", "and", "a", "runner", "node", "so", "that", "NUMBER", "API", "node", "could", "serve", "a", "runner", "s", "partition", "to", "it", "NUMBER", "this", "be", "kind", "of", "smelly", "need", "to", "marinate", "on", "this", "a", "bit", "NUMBER", "Not", "completely", "bent", "on", "having", "a", "partition", "per", "runner", "the", "main", "sticking", "point", "be", "the", "distribution", "but", "even", "if", "we", "have", "a", "partition", "per", "API", "node", "we", "have", "an", "issue", "of", "routing", "a", "msg", "NUMBER", "Commit", "increment", "partition", "offset", "to", "an", "API", "node", "where", "the", "consumer", "for", "that", "partition", "be", "available", "NUMBER", "Partitions", "be", "essentially", "static", "which", "be", "to", "say", "there", "s", "an", "async", "process", "for", "expanding", "the", "number", "of", "partitions", "a", "topic", "has", "but", "that", "expansion", "can", "take", "seconds", "NUMBER", "This", "sounds", "edible", "we", "expect", "that", "the", "set", "of", "runners", "be", "scaling", "up", "and", "down", "but", "relatively", "infrequently", "likely", "NUMBER", "s", "of", "minutes", "NUMBER", "Not", "sure", "how", "well", "consumer", "group", "will", "adapt", "to", "this", "possibly", "a", "bad", "idea", "NUMBER", "API", "nodes", "will", "be", "less", "elastic", "and", "may", "make", "a", "better", "candidate", "NUMBER", "Shoud", "the", "runner", "NUMBER", "endpoints", "be", "api", "version", "too", "i", "NUMBER", "e", "NUMBER", "runner", "v", "NUMBER", "NUMBER", "v", "NUMBER", "runner", "makes", "sense", "API", "nodes", "serve", "all", "v", "NUMBER", "endpoints", "so", "it", "s", "uniform", "NUMBER", "good", "catch", "thanks", "NUMBER", "You", "be", "receiving", "this", "because", "you", "commented", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "or", "mute", "the", "thread", "NUMBER", "api_version", "NUMBER", "publisher", "api_key", "NUMBER", "dde", "NUMBER", "f", "NUMBER", "d", "NUMBER", "a", "NUMBER", "dd", "NUMBER", "c", "NUMBER", "e", "NUMBER", "bb", "name", "GitHub", "entity", "external_key", "github", "fnproject", "fn", "title", "fnproject", "fn", "subtitle", "GitHub", "repository", "main_image_url", "LINK", "NUMBER", "d", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "fc", "NUMBER", "c", "NUMBER", "bb", "NUMBER", "png", "avatar_image_url", "LINK", "NUMBER", "c", "NUMBER", "b", "NUMBER", "e", "NUMBER", "NUMBER", "aed", "b", "NUMBER", "png", "action", "name", "Open", "in", "GitHub", "url", "LINK", "update", "snippets", "icon", "PERSON", "message", "rdallman", "in", "NUMBER", "u", "NUMBER", "e", "I", "don", "t", "know", "the", "answers", "but", "I", "feel", "that", "not", "worrying", "about", "partitions", "at", "this", "stage", "makes", "the", "implementation", "simpler", "and", "it", "can", "also", "be", "iteratively", "improved", "when", "we", "do", "have", "the", "data", "to", "determine", "the", "efficiency", "answer", "NUMBER", "r", "n", "r", "nI", "wish", "this", "were", "possible", "kafka", "do", "not", "seem", "to", "have", "any", "easy", "way", "to", "provide", "MPMC", "semantics", "without", "thinking", "about", "partitioning", "NUMBER", "We", "need", "to", "have", "someway", "to", "have", "NUMBER", "process", "chewing", "on", "a", "partition", "we", "can", "t", "just", "let", "every", "request", "ask", "a", "queue", "for", "the", "head", "this", "has", "pros", "and", "cons", "not", "having", "to", "worry", "about", "timeouts", "sounds", "NUMBER", "delightful", "NUMBER", "Initial", "thinking", "was", "that", "API", "nodes", "would", "have", "their", "own", "partition", "and", "be", "part", "of", "a", "consumer", "group", "and", "this", "seems", "like", "the", "naive", "approach", "that", "would", "likely", "work", "but", "has", "at", "least", "one", "deficiency", "in", "that", "we", "lose", "distribution", "information", "for", "RHS", "processing", "NUMBER", "The", "thinking", "be", "that", "there", "be", "likely", "a", "small", "set", "of", "API", "nodes", "and", "a", "large", "set", "of", "runner", "nodes", "and", "we", "want", "a", "runner", "node", "to", "process", "some", "subset", "of", "calls", "so", "that", "we", "can", "re", "use", "hot", "container", "image", "caching", "the", "same", "reasons", "we", "have", "fnlb", "for", "sync", "NUMBER", "Can", "think", "about", "other", "ways", "to", "accomplish", "this", "NUMBER", "r", "n", "r", "nThe", "complication", "of", "the", "k", "NUMBER", "s", "round", "robin", "load", "balancer", "in", "the", "middle", "be", "something", "that", "didn", "t", "come", "to", "mind", "thanks", "for", "point", "it", "out", "NUMBER", "It", "s", "kind", "of", "unfortunate", "that", "we", "have", "to", "proxy", "runner", "nodes", "over", "to", "the", "LHS", "to", "talk", "to", "kafka", "in", "a", "normal", "non", "hybrid", "deployment", "runners", "full", "fn", "servers", "get", "their", "own", "partition", "seems", "like", "it", "would", "work", "just", "fine", "maybe", "optimal", "even", "NUMBER", "It", "seems", "brittle", "to", "rely", "on", "having", "a", "sticky", "vs", "NUMBER", "round", "robin", "et", "al", "load", "balancer", "in", "between", "RHS", "and", "LHS", "so", "that", "kafka", "clients", "will", "work", "but", "it", "seems", "like", "it", "would", "maybe", "close", "this", "hole", "since", "this", "API", "be", "hanging", "off", "on", "the", "side", "we", "_could_", "open", "a", "long", "lived", "connection", "between", "an", "API", "node", "and", "a", "runner", "node", "so", "that", "NUMBER", "API", "node", "could", "serve", "a", "runner", "s", "partition", "to", "it", "NUMBER", "this", "be", "kind", "of", "smelly", "need", "to", "marinate", "on", "this", "a", "bit", "NUMBER", "r", "n", "r", "nNot", "completely", "bent", "on", "having", "a", "partition", "per", "runner", "the", "main", "sticking", "point", "be", "the", "distribution", "but", "even", "if", "we", "have", "a", "partition", "per", "API", "node", "we", "have", "an", "issue", "of", "routing", "a", "msg", "NUMBER", "Commit", "increment", "partition", "offset", "to", "an", "API", "node", "where", "the", "consumer", "for", "that", "partition", "be", "available", "NUMBER", "r", "n", "r", "n", "u", "NUMBER", "e", "Partitions", "be", "essentially", "static", "which", "be", "to", "say", "there", "s", "an", "async", "process", "for", "expanding", "the", "number", "of", "partitions", "a", "topic", "has", "but", "that", "expansion", "can", "take", "seconds", "NUMBER", "r", "n", "r", "nThis", "sounds", "edible", "we", "expect", "that", "the", "set", "of", "runners", "be", "scaling", "up", "and", "down", "but", "relatively", "infrequently", "likely", "NUMBER", "s", "of", "minutes", "NUMBER", "Not", "sure", "how", "well", "consumer", "group", "will", "adapt", "to", "this", "possibly", "a", "bad", "idea", "NUMBER", "API", "nodes", "will", "be", "less", "elastic", "and", "may", "make", "a", "better", "candidate", "NUMBER", "r", "n", "r", "n", "u", "NUMBER", "e", "Shoud", "the", "runner", "NUMBER", "endpoints", "be", "api", "version", "too", "i", "NUMBER", "e", "NUMBER", "runner", "v", "NUMBER", "NUMBER", "r", "n", "r", "n", "v", "NUMBER", "runner", "makes", "sense", "API", "nodes", "serve", "all", "v", "NUMBER", "endpoints", "so", "it", "s", "uniform", "NUMBER", "good", "catch", "thanks", "NUMBER", "action", "name", "View", "Issue", "url", "LINK", "issuecomment", "NUMBER", "On", "a", "different", "tack", "if", "nobody", "pick", "up", "the", "runner", "to", "lb", "registration", "I", "ll", "do", "that", "on", "Monday", "following", "the", "idea", "of", "a", "k", "NUMBER", "s", "Grouper", "we", "already", "have", "a", "REST", "interface", "for", "manual", "poking", "into", "allGrouper", "NUMBER", "Excuse", "typo", "NUMBER", "Phone", "screens", "don", "t", "make", "great", "ketbroads", "NUMBER", "Original", "message", "From", "Reed", "Allman", "TAG", "Date", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "m", "NUMBER", "GMT", "NUMBER", "NUMBER", "To", "fnproject", "fn", "TAG", "Cc", "jan", "grant", "TAG", "Comment", "TAG", "Subject", "Re", "fnproject", "fn", "Hybrid", "Mode", "MVP", "NUMBER", "The", "other", "question", "revolves", "around", "async", "work", "that", "turns", "up", "with", "a", "deadline", "NUMBER", "If", "that", "be", "fast", "approaching", "then", "the", "Call", "s", "priority", "for", "placement", "should", "rise", "I", "presume", "NUMBER", "I", "be", "game", "to", "not", "have", "an", "idea", "of", "a", "deadline", "as", "I", "may", "have", "interpreted", "this", "NUMBER", "I", "be", "somewhat", "concerned", "about", "the", "fact", "that", "we", "effectively", "need", "to", "implement", "real", "timestamp", "based", "priority", "queueing", "but", "optimistic", "that", "we", "can", "use", "kafka", "s", "offsets", "as", "timestamps", "to", "achieve", "delayed", "message", "I", "m", "not", "sure", "this", "be", "the", "same", "as", "deadline", "i", "NUMBER", "e", "NUMBER", "run", "this", "call", "at", "this", "time", "in", "the", "future", "X", "and", "even", "then", "I", "don", "t", "think", "we", "can", "possibly", "make", "any", "guarantees", "about", "the", "immediacy", "of", "run", "that", "it", "ll", "be", "in", "line", "with", "anything", "else", "that", "came", "in", "and", "was", "scheduled", "to", "run", "before", "that", "time", "X", "NUMBER", "As", "far", "as", "priorities", "our", "redis", "implementation", "has", "these", "but", "only", "uses", "p", "NUMBER", "I", "would", "like", "to", "avoid", "add", "explicit", "p", "NUMBER", "p", "NUMBER", "p", "NUMBER", "priorities", "to", "start", "and", "forever", "if", "we", "re", "be", "honest", "since", "I", "think", "it", "s", "going", "to", "be", "quite", "a", "bit", "of", "work", "just", "to", "get", "one", "priority", "in", "NUMBER", "There", "be", "no", "easy", "way", "to", "manage", "work", "stealing", "in", "that", "scenario", "yep", "agree", "NUMBER", "as", "propose", "it", "be", "very", "optimistic", "that", "the", "node", "that", "enqueued", "it", "was", "routed", "to", "because", "it", "has", "enough", "room", "to", "run", "it", "once", "that", "be", "eventually", "dequeued", "which", "may", "be", "very", "far", "in", "the", "future", "NUMBER", "figuring", "out", "how", "to", "map", "a", "message", "that", "a", "runner", "has", "received", "from", "an", "API", "node", "to", "a", "request", "to", "delete", "that", "message", "to", "the", "same", "API", "node", "be", "still", "kind", "of", "what", "I", "m", "stuck", "on", "NUMBER", "Even", "if", "all", "API", "nodes", "stay", "healthy", "it", "seems", "like", "we", "re", "really", "fighting", "the", "kafka", "client", "semantics", "here", "NUMBER", "Apparently", "they", "have", "an", "http", "gateway", "that", "you", "can", "stick", "in", "front", "of", "kafka", "to", "make", "it", "so", "consumers", "producers", "can", "be", "less", "precise", "about", "exact", "positioning", "of", "message", "wrt", "partitions", "maybe", "this", "be", "the", "route", "we", "need", "to", "go", "down", "but", "damn", "turtles", "NUMBER", "for", "reference", "LINK", "rest", "You", "be", "receiving", "this", "because", "you", "commented", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "or", "mute", "the", "thread", "NUMBER", "api_version", "NUMBER", "publisher", "api_key", "NUMBER", "dde", "NUMBER", "f", "NUMBER", "d", "NUMBER", "a", "NUMBER", "dd", "NUMBER", "c", "NUMBER", "e", "NUMBER", "bb", "name", "GitHub", "entity", "external_key", "github", "fnproject", "fn", "title", "fnproject", "fn", "subtitle", "GitHub", "repository", "main_image_url", "LINK", "NUMBER", "d", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "fc", "NUMBER", "c", "NUMBER", "bb", "NUMBER", "png", "avatar_image_url", "LINK", "NUMBER", "c", "NUMBER", "b", "NUMBER", "e", "NUMBER", "NUMBER", "aed", "b", "NUMBER", "png", "action", "name", "Open", "in", "GitHub", "url", "LINK", "update", "snippets", "icon", "PERSON", "message", "rdallman", "in", "NUMBER", "u", "NUMBER", "e", "The", "other", "question", "revolves", "around", "async", "work", "that", "turns", "up", "with", "a", "deadline", "NUMBER", "If", "that", "be", "fast", "approaching", "then", "the", "Call", "s", "priority", "for", "placement", "should", "rise", "I", "presume", "NUMBER", "r", "n", "r", "nI", "be", "game", "to", "not", "have", "an", "idea", "of", "a", "deadline", "as", "I", "may", "have", "interpreted", "this", "NUMBER", "I", "be", "somewhat", "concerned", "about", "the", "fact", "that", "we", "effectively", "need", "to", "implement", "real", "timestamp", "based", "priority", "queueing", "but", "optimistic", "that", "we", "can", "use", "kafka", "s", "offsets", "as", "timestamps", "to", "achieve", "delayed", "message", "I", "m", "not", "sure", "this", "be", "the", "same", "as", "deadline", "i", "NUMBER", "e", "NUMBER", "run", "this", "call", "at", "this", "time", "in", "the", "future", "X", "and", "even", "then", "I", "don", "t", "think", "we", "can", "possibly", "make", "any", "guarantees", "about", "the", "immediacy", "of", "run", "that", "it", "ll", "be", "in", "line", "with", "anything", "else", "that", "came", "in", "and", "was", "scheduled", "to", "run", "before", "that", "time", "X", "NUMBER", "As", "far", "as", "priorities", "our", "redis", "implementation", "has", "these", "but", "only", "uses", "p", "NUMBER", "I", "would", "like", "to", "avoid", "add", "explicit", "p", "NUMBER", "p", "NUMBER", "p", "NUMBER", "priorities", "to", "start", "and", "forever", "if", "we", "re", "be", "honest", "since", "I", "think", "it", "s", "going", "to", "be", "quite", "a", "bit", "of", "work", "just", "to", "get", "one", "priority", "in", "NUMBER", "r", "n", "r", "n", "u", "NUMBER", "e", "There", "be", "no", "easy", "way", "to", "manage", "work", "stealing", "in", "that", "scenario", "r", "n", "r", "nyep", "agree", "NUMBER", "as", "propose", "it", "be", "very", "optimistic", "that", "the", "node", "that", "enqueued", "it", "was", "routed", "to", "because", "it", "has", "enough", "room", "to", "run", "it", "once", "that", "be", "eventually", "dequeued", "which", "may", "be", "very", "far", "in", "the", "future", "NUMBER", "r", "n", "r", "nfiguring", "out", "how", "to", "map", "a", "message", "that", "a", "runner", "has", "received", "from", "an", "API", "node", "to", "a", "request", "to", "delete", "that", "message", "to", "the", "same", "API", "node", "be", "still", "kind", "of", "what", "I", "m", "stuck", "on", "NUMBER", "Even", "if", "all", "API", "nodes", "stay", "healthy", "it", "seems", "like", "we", "re", "really", "fighting", "the", "kafka", "client", "semantics", "here", "NUMBER", "Apparently", "they", "have", "an", "http", "gateway", "that", "you", "can", "stick", "in", "front", "of", "kafka", "to", "make", "it", "so", "consumers", "producers", "can", "be", "less", "precise", "about", "exact", "positioning", "of", "message", "wrt", "partitions", "maybe", "this", "be", "the", "route", "we", "need", "to", "go", "down", "but", "damn", "turtles", "NUMBER", "for", "reference", "LINK", "rest", "action", "name", "View", "Issue", "url", "LINK", "issuecomment", "NUMBER", "The", "thinking", "be", "that", "there", "be", "likely", "a", "small", "set", "of", "API", "nodes", "and", "a", "large", "set", "of", "runner", "nodes", "and", "we", "want", "a", "runner", "node", "to", "process", "some", "subset", "of", "calls", "so", "that", "we", "can", "re", "use", "hot", "container", "image", "caching", "I", "m", "still", "not", "NUMBER", "convinced", "about", "the", "partitioning", "of", "the", "RHS", "runners", "NUMBER", "If", "we", "have", "a", "large", "number", "of", "runners", "but", "they", "be", "locked", "to", "the", "same", "partitions", "as", "API", "nodes", "so", "statistically", "you", "have", "N", "api", "nodes", "and", "K", "N", "workers", "and", "if", "there", "s", "an", "imbalance", "of", "load", "on", "a", "set", "of", "function", "some", "with", "high", "load", "some", "with", "low", "load", "don", "t", "we", "risk", "that", "we", "have", "a", "pool", "of", "runners", "staying", "idle", "while", "others", "be", "overloaded", "like", "Jan", "said", "I", "think", "we", "need", "some", "form", "of", "work", "stealing", "even", "though", "when", "you", "steal", "work", "you", "be", "cold", "and", "you", "have", "to", "pull", "images", "and", "start", "up", "container", "NUMBER", "The", "question", "be", "how", "significant", "that", "be", "on", "async", "function", "that", "the", "user", "has", "start", "with", "the", "expectation", "that", "at", "some", "point", "they", "will", "complete", "NUMBER", "Maybe", "they", "don", "t", "care", "about", "the", "NUMBER", "ms", "of", "container", "start", "but", "they", "do", "about", "the", "few", "seconds", "of", "image", "pulling", "NUMBER", "Hm", "NUMBER", "I", "m", "wondering", "how", "statistics", "would", "work", "with", "work", "stealing", "maybe", "we", "get", "our", "desired", "effect", "anyway", "NUMBER", "If", "we", "have", "partitioned", "API", "nodes", "but", "naive", "runner", "nodes", "which", "just", "pull", "the", "next", "job", "from", "whatever", "node", "the", "LBs", "happen", "to", "land", "the", "request", "on", "then", "if", "a", "function", "be", "more", "loaded", "than", "others", "eventually", "all", "the", "runner", "nodes", "will", "cache", "its", "image", "just", "by", "virtue", "of", "statistics", "NUMBER", "The", "downside", "be", "that", "if", "all", "function", "be", "loaded", "equally", "then", "all", "runner", "nodes", "will", "try", "to", "cache", "all", "images", "and", "that", "s", "a", "bit", "heavy", "NUMBER", "figuring", "out", "how", "to", "map", "a", "message", "that", "a", "runner", "has", "received", "from", "an", "API", "node", "to", "a", "request", "to", "delete", "that", "message", "to", "the", "same", "API", "node", "be", "still", "kind", "of", "what", "I", "m", "stuck", "on", "From", "what", "I", "can", "see", "in", "the", "propose", "spec", "the", "runners", "pull", "poll", "the", "API", "nodes", "for", "jobs", "to", "run", "when", "they", "call", "dequeue", "and", "start", "doesn", "t", "appear", "to", "need", "to", "land", "on", "the", "same", "partition", "the", "DB", "be", "the", "arbiter", "for", "the", "semantics", "NUMBER", "Only", "finish", "needs", "to", "be", "partition", "aware", "but", "once", "a", "runner", "be", "executing", "a", "job", "it", "can", "know", "which", "partition", "it", "came", "from", "the", "information", "could", "be", "in", "headers", "or", "in", "a", "field", "of", "the", "payload", "of", "the", "dequeue", "response", "so", "it", "can", "embed", "the", "same", "information", "in", "the", "finish", "call", "NUMBER", "This", "way", "only", "one", "out", "of", "four", "endpoints", "probably", "less", "than", "a", "quarter", "of", "the", "request", "needs", "to", "be", "routed", "properly", "and", "we", "still", "need", "a", "solution", "for", "this", "but", "at", "least", "we", "get", "work", "stealing", "NUMBER", "and", "maybe", "if", "there", "be", "few", "request", "needing", "this", "routing", "it", "becomes", "feasible", "to", "have", "the", "API", "nodes", "do", "additional", "work", "to", "redirect", "the", "request", "undoing", "the", "interference", "of", "the", "intermediate", "LBs", "NUMBER", "Anyway", "going", "back", "to", "the", "spirit", "of", "this", "ticket", "which", "MQ", "we", "use", "e", "NUMBER", "g", "NUMBER", "kafka", "be", "more", "of", "an", "implementation", "detail", "and", "I", "guess", "the", "main", "focus", "be", "the", "API", "to", "which", "we", "can", "later", "add", "protocol", "specific", "information", "like", "the", "kafka", "partition", "info", "NUMBER", "In", "general", "terms", "the", "API", "detailed", "in", "your", "document", "makes", "sense", "NUMBER", "I", "ll", "push", "the", "minor", "fix", "about", "the", "runner", "endpoints", "be", "under", "v", "NUMBER", "as", "well", "and", "then", "coordinate", "with", "msgodf", "I", "guess", "we", "can", "start", "implement", "the", "endpoints", "use", "the", "current", "MQ", "solution", "NUMBER", "Do", "we", "need", "msgodf", "s", "patch", "to", "have", "a", "flag", "that", "separates", "API", "and", "runner", "nodes", "It", "do", "touch", "the", "agent", "but", "maybe", "we", "don", "t", "need", "it", "to", "get", "start", "NUMBER", "The", "data", "access", "interface", "NUMBER", "sounds", "interesting", "NUMBER", "I", "ll", "start", "doing", "that", "in", "the", "hybrid", "api", "branch", "NUMBER", "I", "m", "also", "thinking", "that", "the", "runner", "nodes", "could", "_learn_", "where", "it", "s", "more", "efficient", "to", "dequeue", "jobs", "from", "NUMBER", "we", "don", "t", "even", "need", "complicated", "ML", "for", "this", "it", "should", "be", "sufficient", "to", "have", "a", "simple", "weighted", "probability", "table", "that", "be", "update", "based", "on", "whether", "we", "successfully", "get", "an", "efficiently", "runnable", "job", "NUMBER", "Reinforcement", "learning", "if", "you", "like", "but", "the", "simplest", "version", "of", "it", "NUMBER", "This", "has", "also", "the", "advantage", "that", "we", "don", "t", "need", "to", "worry", "about", "nodes", "moving", "around", "or", "be", "re", "partitioned", "the", "tables", "will", "update", "on", "their", "own", "eventually", "NUMBER", "implement", "a", "data", "access", "interface", "layer", "for", "the", "agent", "that", "encapsulates", "the", "functionality", "we", "need", "I", "ve", "tried", "abstracting", "this", "at", "the", "data", "access", "layer", "and", "I", "ve", "managed", "a", "quick", "refactor", "push", "a", "commit", "but", "now", "I", "m", "looking", "at", "it", "and", "I", "m", "not", "convinced", "it", "s", "useful", "at", "that", "layer", "NUMBER", "so", "I", "ve", "probably", "misinterpreted", "NUMBER", "From", "what", "I", "can", "see", "I", "think", "the", "agent", "itself", "probably", "needs", "a", "refactor", "like", "you", "say", "we", "need", "to", "shuffle", "code", "around", "first", "NUMBER", "What", "I", "envisage", "be", "a", "runnerAgent", "and", "an", "apiAgent", "and", "maybe", "a", "fullAgent", "for", "the", "current", "implementation", "implement", "Agent", "which", "will", "have", "the", "new", "methods", "corresponding", "to", "the", "new", "endpoints", "NUMBER", "This", "actually", "may", "supersede", "part", "of", "what", "msgodf", "be", "doing", "at", "that", "point", "the", "flag", "to", "switch", "mode", "becomes", "a", "decider", "for", "which", "struct", "be", "created", "NUMBER", "Am", "I", "on", "the", "right", "track", "I", "think", "fnlb", "shouldn", "t", "make", "a", "load", "based", "decision", "on", "async", "request", "it", "should", "just", "round", "robin", "them", "NUMBER", "The", "state", "of", "fn", "servers", "at", "the", "time", "of", "MQ", "queuing", "could", "be", "very", "stale", "NUMBER", "Since", "fnlb", "has", "the", "big", "picture", "maybe", "it", "could", "be", "a", "proxy", "to", "the", "API", "servers", "NUMBER", "fn", "servers", "could", "poll", "API", "servers", "through", "fnlb", "which", "could", "act", "as", "a", "switch", "board", "to", "route", "intercept", "the", "responses", "to", "the", "proper", "fn", "server", "NUMBER", "Maybe", "this", "could", "help", "with", "dequeue", "and", "finish", "mapping", "issue", "since", "probably", "fnlb", "will", "be", "in", "communication", "with", "all", "API", "servers", "NUMBER", "I", "guess", "agent", "s", "responsibility", "mostly", "be", "managing", "the", "pool", "of", "calls", "and", "the", "interfacing", "with", "the", "mq", "db", "be", "pretty", "minimal", "what", "you", "push", "looks", "pretty", "good", "to", "me", "That", "s", "fine", "but", "I", "was", "ask", "myself", "what", "will", "be", "responsible", "for", "handle", "the", "dequeue", "start", "finish", "API", "calls", "in", "the", "API", "only", "node", "NUMBER", "The", "Agent", "doesn", "t", "surface", "the", "interface", "to", "do", "so", "so", "will", "the", "Server", "go", "straight", "to", "the", "data", "Even", "in", "that", "case", "we", "ll", "need", "some", "sort", "of", "NoOp", "agent", "for", "the", "API", "only", "node", "NUMBER", "I", "suppose", "we", "ll", "cross", "that", "bridge", "when", "we", "get", "to", "it", "NUMBER", "Also", "currently", "we", "don", "t", "have", "an", "update", "call", "method", "in", "the", "datastore", "and", "we", "ll", "need", "it", "to", "update", "its", "status", "from", "queued", "to", "run", "to", "end", "state", "so", "I", "ll", "add", "an", "implementation", "of", "that", "too", "as", "an", "atomic", "thing", "it", "must", "basically", "do", "a", "CAS", "NUMBER", "We", "might", "want", "an", "index", "on", "some", "field", "too", "to", "speed", "up", "queries", "NUMBER", "I", "ll", "coordinate", "with", "msgodf", "NUMBER", "I", "ve", "add", "the", "UpdateCall", "method", "and", "I", "m", "write", "test", "at", "the", "moment", "should", "push", "things", "soon", "to", "hybrid", "api", "NUMBER", "edit", "push", "the", "UpdateCall", "stuff", "I", "ve", "merge", "with", "msgodf", "s", "stuff", "in", "the", "hybrid", "api", "branch", "NUMBER", "I", "could", "then", "merge", "all", "into", "hybrid", "impl", "if", "you", "want", "NUMBER", "Shall", "we", "work", "on", "the", "same", "branch", "It", "seems", "odd", "to", "have", "two", "NUMBER", "quick", "note", "When", "fnrunner", "starts", "it", "will", "register", "itself", "with", "the", "fnlb", "be", "effectively", "do", "the", "fnlb", "has", "the", "ability", "to", "discover", "runner", "nodes", "when", "run", "under", "k", "NUMBER", "s", "NUMBER", "In", "a", "non", "k", "NUMBER", "s", "deployment", "fnlb", "instances", "need", "to", "be", "launched", "with", "teh", "nodes", "flag", "or", "the", "management", "interface", "poked", "NUMBER", "Good", "stuff", "The", "FN_RUNNER_URL", "new", "env", "var", "in", "hybrid", "datarappa", "NUMBER", "it", "doesn", "t", "point", "to", "a", "runner", "node", "it", "points", "to", "an", "API", "node", "where", "we", "can", "invoke", "the", "v", "NUMBER", "runner", "endpoints", "NUMBER", "I", "can", "see", "the", "reason", "for", "the", "name", "but", "it", "may", "be", "a", "bit", "confusing", "NUMBER", "I", "have", "no", "suggestions", "though", "we", "can", "t", "use", "FN_API_URL", "as", "that", "has", "another", "meaning", "NUMBER", "I", "m", "happy", "to", "merge", "the", "hybrid", "mergy", "branch", "down", "to", "master", "as", "it", "do", "not", "affect", "the", "default", "case", "NUMBER", "I", "have", "add", "caching", "to", "the", "hybrid", "client", "in", "NUMBER", "but", "I", "m", "not", "sure", "we", "should", "move", "the", "caching", "from", "the", "datastore", "to", "there", "NUMBER", "The", "datastore", "cache", "be", "still", "going", "to", "be", "useful", "in", "the", "api", "node", "and", "the", "full", "standalone", "node", "I", "guess", "there", "be", "things", "other", "than", "the", "Agent", "which", "use", "GetApp", "and", "GetRoute", "NUMBER", "Actually", "it", "turns", "out", "the", "datastore", "cache", "wasn", "t", "be", "use", "by", "anything", "else", "so", "I", "have", "now", "remove", "it", "NUMBER", "I", "propose", "we", "change", "the", "env", "var", "for", "the", "runner", "API", "to", "FN_RUNNER_API_URL", "LINK", "NUMBER", "I", "m", "toying", "with", "some", "helm", "chart", "change", "to", "support", "a", "hybrid", "deployment", "and", "setting", "FN_RUNNER_URL", "to", "something", "api", "really", "looks", "odd", "NUMBER", "I", "ve", "just", "realised", "a", "minor", "issue", "about", "hybrid", "mode", "that", "I", "don", "t", "think", "we", "ve", "address", "yet", "NUMBER", "For", "a", "developer", "use", "the", "cli", "FN_API_URL", "will", "have", "to", "point", "to", "the", "API", "nodes", "LB", "address", "not", "the", "runner", "nodes", "LB", "address", "NUMBER", "This", "be", "fine", "NUMBER", "However", "fn", "call", "be", "a", "development", "operation", "that", "will", "have", "to", "reach", "the", "r", "NUMBER", "endpoints", "which", "require", "use", "the", "runners", "LB", "address", "NUMBER", "We", "ll", "need", "a", "solution", "for", "this", "NUMBER", "Hybrid", "deployment", "helm", "chart", "change", "up", "for", "discussion", "in", "LINK", "helm", "pull", "NUMBER", "Updated", "hybrid", "deployment", "PR", "to", "have", "two", "separate", "charts", "NUMBER", "I", "have", "a", "proposal", "to", "solve", "the", "problem", "with", "the", "split", "mode", "and", "fn", "call", "NUMBER", "We", "could", "have", "an", "FN_CONTROL_API_URL", "and", "an", "FN_WORK_API_URL", "as", "environment", "variables", "that", "the", "cli", "uses", "respectively", "for", "control", "plane", "URL", "v", "NUMBER", "NUMBER", "and", "work", "plane", "URL", "r", "NUMBER", "NUMBER", "However", "for", "backwards", "compatibility", "and", "for", "standalone", "deployments", "if", "FN_API_URL", "be", "provide", "then", "it", "will", "be", "use", "for", "both", "the", "control", "plane", "URL", "and", "the", "work", "plane", "URL", "NUMBER", "How", "do", "that", "sound", "Heya", "Any", "company", "team", "wishing", "to", "heavily", "base", "their", "platform", "services", "upon", "fn", "needs", "to", "have", "a", "clear", "view", "of", "the", "security", "of", "the", "project", "NUMBER", "Would", "it", "be", "possible", "to", "add", "a", "documentation", "page", "that", "covers", "topics", "such", "as", "general", "security", "perspective", "and", "take", "from", "the", "project", "how", "best", "dealing", "about", "secrets", "depending", "on", "the", "underlying", "platform", "how", "be", "communication", "secured", "between", "the", "various", "components", "be", "there", "any", "audit", "playbook", "Those", "be", "fairly", "quite", "open", "ended", "question", "but", "I", "hope", "they", "reflect", "various", "aspects", "one", "would", "look", "into", "such", "a", "project", "before", "heavily", "investing", "in", "it", "NUMBER", "Cheers", "Right", "NUMBER", "Looks", "like", "the", "expression", "route", "grep", "default", "awk", "print", "NUMBER", "doesn", "t", "work", "on", "MacOS", "NUMBER", "I", "ve", "fix", "this", "by", "use", "link", "instead", "of", "add", "host", "NUMBER", "See", "PR", "LINK", "I", "agree", "with", "both", "Travis", "and", "Chad", "s", "comments", "NUMBER", "I", "also", "wonder", "if", "we", "should", "be", "focusing", "on", "the", "local", "development", "experience", "with", "these", "simple", "tutorials", "or", "at", "least", "calling", "out", "the", "use", "of", "local", "The", "setting", "of", "FN_REGISTRY", "be", "covered", "in", "the", "quickstart", "but", "may", "be", "overlooked", "NUMBER", "Helping", "users", "get", "start", "I", "ve", "seen", "it", "be", "a", "stumbling", "block", "NUMBER", "Typo", "It", "will", "also", "demonstrates", "NUMBER", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "Michael", "J", "Williams", "LINK", "w", "williams", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "CLA", "Bot", "All", "committers", "have", "sign", "the", "CLA", "NUMBER", "Based", "on", "Travis", "feedback", "I", "dialed", "the", "config", "stuff", "back", "and", "linked", "to", "the", "function", "file", "NUMBER", "md", "NUMBER", "Added", "some", "markdown", "to", "make", "the", "command", "match", "the", "format", "Shaun", "be", "use", "in", "the", "tutorials", "NUMBER", "Made", "some", "other", "minor", "fix", "NUMBER", "Fixed", "some", "conflict", "NUMBER", "Made", "a", "few", "more", "fix", "NUMBER", "See", "my", "feedback", "for", "the", "Java", "and", "Node", "examples", "which", "be", "generically", "applicable", "LINK", "pullrequestreview", "NUMBER", "LINK", "michael", "w", "williams", "be", "this", "PR", "still", "valid", "Nope", "NUMBER", "This", "be", "replaced", "by", "the", "language", "tutorials", "in", "the", "tutorials", "repo", "NUMBER", "Closing", "NUMBER", "What", "s", "your", "intention", "in", "renaming", "fn", "examples", "grafana", "to", "fn", "examples", "UPDATE", "OR", "DELETE", "grafana", "I", "add", "this", "recently", "and", "have", "a", "PR", "open", "to", "update", "it", "NUMBER", "No", "intention", "thought", "it", "was", "old", "NUMBER", "I", "ll", "move", "it", "back", "NUMBER", "Although", "that", "looks", "like", "something", "that", "would", "be", "better", "in", "the", "docs", "rather", "than", "examples", "NUMBER", "Examples", "be", "for", "example", "function", "NUMBER", "Moved", "it", "back", "nigeldeakin", "I", "m", "seeing", "the", "following", "behaviour", "from", "fn", "NUMBER", "The", "run", "be", "triggered", "by", "flow", "but", "the", "behaviour", "s", "the", "same", "for", "function", "call", "directly", "by", "the", "user", "NUMBER", "In", "this", "case", "the", "function", "makes", "a", "bunch", "of", "API", "calls", "over", "a", "period", "of", "over", "two", "minutes", "before", "finally", "emitting", "a", "small", "amount", "of", "data", "NUMBER", "After", "two", "minutes", "fn", "responds", "with", "a", "NUMBER", "timeout", "NUMBER", "However", "I", "m", "still", "seeing", "indications", "that", "the", "container", "continues", "to", "run", "after", "that", "NUMBER", "be", "received", "NUMBER", "In", "my", "opinion", "which", "I", "invite", "discussion", "on", "this", "be", "error", "prone", "in", "this", "case", "fn", "should", "probably", "stop", "the", "container", "since", "it", "doesn", "t", "know", "if", "the", "function", "s", "run", "away", "or", "not", "strictly", "before", "returning", "a", "NUMBER", "It", "s", "much", "harder", "to", "write", "correct", "software", "as", "a", "set", "of", "function", "if", "I", "can", "t", "tell", "whether", "a", "timed", "out", "function", "be", "going", "to", "attempt", "to", "trigger", "more", "side", "effect", "after", "fn", "has", "returned", "to", "me", "NUMBER", "Example", "log", "extract", "follows", "NUMBER", "Function", "triggered", "this", "log", "trace", "from", "flow", "service", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Running", "Stage", "faas_url", "LINK", "service", "NUMBER", "fn", "NUMBER", "r", "function_id", "t", "flow", "load", "test", "vista", "graph_id", "NUMBER", "cd", "NUMBER", "dfb", "NUMBER", "e", "NUMBER", "NUMBER", "d", "NUMBER", "NUMBER", "a", "NUMBER", "d", "d", "NUMBER", "cca", "NUMBER", "c", "NUMBER", "logger", "executor_actor", "operation", "thenCompose", "stage_id", "NUMBER", "It", "generates", "some", "POSTs", "to", "the", "flow", "api", "GIN", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "s", "NUMBER", "POST", "graph", "NUMBER", "cd", "NUMBER", "dfb", "NUMBER", "e", "NUMBER", "NUMBER", "d", "NUMBER", "NUMBER", "a", "NUMBER", "d", "d", "NUMBER", "cca", "NUMBER", "c", "NUMBER", "stage", "NUMBER", "thenCompose", "NUMBER", "about", "NUMBER", "lines", "elided", "NUMBER", "GIN", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "s", "NUMBER", "POST", "graph", "NUMBER", "cd", "NUMBER", "dfb", "NUMBER", "e", "NUMBER", "NUMBER", "d", "NUMBER", "NUMBER", "a", "NUMBER", "d", "d", "NUMBER", "cca", "NUMBER", "c", "NUMBER", "stage", "NUMBER", "thenApply", "Then", "Fn", "gives", "up", "on", "the", "stage", "ever", "returning", "anything", "timeout", "at", "NUMBER", "minutes", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Fn", "load", "balancer", "delay", "faas_url", "LINK", "service", "NUMBER", "fn", "NUMBER", "r", "fn_lb_delay", "NUMBER", "\u00b5s", "function_id", "t", "flow", "load", "test", "vista", "graph_id", "NUMBER", "cd", "NUMBER", "dfb", "NUMBER", "e", "NUMBER", "NUMBER", "d", "NUMBER", "NUMBER", "a", "NUMBER", "d", "d", "NUMBER", "cca", "NUMBER", "c", "NUMBER", "logger", "executor_actor", "operation", "thenCompose", "stage_id", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "error", "msg", "Got", "non", "NUMBER", "error", "from", "FaaS", "endpoint", "faas_url", "LINK", "service", "NUMBER", "fn", "NUMBER", "r", "function_id", "t", "flow", "load", "test", "vista", "graph_id", "NUMBER", "cd", "NUMBER", "dfb", "NUMBER", "e", "NUMBER", "NUMBER", "d", "NUMBER", "NUMBER", "a", "NUMBER", "d", "d", "NUMBER", "cca", "NUMBER", "c", "NUMBER", "http_status", "NUMBER", "logger", "executor_actor", "operation", "thenCompose", "stage_id", "NUMBER", "However", "the", "container", "be", "not", "yet", "cancelled", "and", "be", "still", "run", "which", "be", "where", "this", "comes", "from", "half", "a", "dozen", "seconds", "later", "GIN", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ms", "NUMBER", "POST", "graph", "NUMBER", "cd", "NUMBER", "dfb", "NUMBER", "e", "NUMBER", "NUMBER", "d", "NUMBER", "NUMBER", "a", "NUMBER", "d", "d", "NUMBER", "cca", "NUMBER", "c", "NUMBER", "stage", "NUMBER", "thenCompose", "there", "be", "a", "bug", "file", "about", "swapping", "out", "the", "input", "output", "pipes", "to", "avoid", "some", "of", "the", "possible", "confusion", "around", "these", "kinds", "of", "timeouts", "NUMBER", "for", "hot", "function", "ideally", "we", "leave", "the", "container", "up", "not", "sure", "if", "this", "bug", "be", "file", "in", "a", "hot", "or", "cold", "function", "context", "and", "just", "swap", "out", "the", "output", "pipe", "to", "effectively", "shut", "that", "call", "down", "and", "free", "it", "up", "for", "another", "NUMBER", "in", "this", "case", "it", "s", "true", "that", "the", "code", "in", "the", "container", "be", "likely", "still", "executing", "and", "not", "prepared", "to", "take", "more", "input", "though", "fn", "will", "see", "it", "as", "available", "and", "attempt", "to", "shove", "more", "input", "into", "a", "container", "NUMBER", "for", "this", "reason", "I", "think", "it", "s", "probably", "best", "we", "do", "something", "like", "LINK", "it", "s", "kind", "of", "hard", "for", "us", "to", "know", "whether", "a", "container", "be", "actually", "prepared", "to", "take", "input", "or", "not", "there", "may", "also", "be", "some", "kind", "of", "trickery", "we", "could", "do", "with", "docker", "health", "checks", "LINK", "but", "this", "also", "seems", "like", "it", "would", "be", "something", "the", "client", "us", "would", "have", "to", "inject", "into", "container", "NUMBER", "anyway", "it", "seems", "like", "if", "we", "shove", "deadline", "in", "that", "container", "could", "effectively", "time", "out", "operations", "and", "cancel", "whatever", "it", "be", "they", "were", "doing", "to", "go", "take", "input", "for", "the", "next", "task", "NUMBER", "do", "NUMBER", "seem", "reasonable", "would", "be", "concerned", "about", "container", "churn", "if", "we", "made", "all", "timed", "out", "hot", "tasks", "have", "to", "shut", "down", "the", "container", "e", "NUMBER", "g", "NUMBER", "if", "user", "has", "NUMBER", "s", "timeout", "and", "their", "db", "be", "fucked", "but", "they", "continue", "to", "send", "us", "NUMBER", "rps", "NUMBER", "in", "the", "cold", "context", "this", "should", "kind", "of", "fall", "out", "except", "for", "the", "docker", "remove", "command", "can", "take", "an", "inordinate", "amount", "of", "time", "which", "leads", "me", "to", "believe", "this", "issue", "be", "file", "about", "hot", "so", "not", "expanding", "NUMBER", "The", "issue", "arose", "in", "a", "very", "loaded", "fn", "cluster", "cf", "NUMBER", "Dario", "s", "comments", "about", "cpu", "saturation", "NUMBER", "In", "this", "instance", "it", "arose", "because", "a", "function", "had", "plenty", "of", "time", "to", "execute", "NUMBER", "min", "usually", "runs", "in", "about", "NUMBER", "s", "but", "was", "hugely", "cpu", "contended", "under", "such", "a", "situation", "there", "s", "not", "a", "lot", "the", "function", "can", "do", "cooperatively", "to", "manage", "this", "NUMBER", "Could", "potentially", "rig", "up", "a", "signal", "internally", "with", "a", "view", "to", "aelf", "destruction", "if", "the", "deadline", "were", "exceeded", "that", "s", "still", "racy", "in", "many", "cases", "depending", "on", "the", "thread", "to", "whichthe", "signal", "be", "dispatched", "NUMBER", "I", "ll", "experiment", "along", "those", "lines", "NUMBER", "Excuse", "typo", "NUMBER", "Phone", "screens", "don", "t", "make", "great", "ketbroads", "NUMBER", "Original", "message", "From", "Reed", "Allman", "TAG", "Date", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "p", "NUMBER", "m", "NUMBER", "GMT", "NUMBER", "NUMBER", "To", "fnproject", "fn", "TAG", "Cc", "jan", "g", "TAG", "Author", "TAG", "Subject", "Re", "fnproject", "fn", "Hot", "sync", "function", "NUMBER", "from", "fn", "whilst", "the", "nbsp", "container", "still", "runs", "NUMBER", "NUMBER", "there", "be", "a", "bug", "file", "about", "swapping", "out", "the", "input", "output", "pipes", "to", "avoid", "some", "of", "the", "possible", "confusion", "around", "these", "kinds", "of", "timeouts", "NUMBER", "for", "hot", "function", "ideally", "we", "leave", "the", "container", "up", "not", "sure", "if", "this", "bug", "be", "file", "in", "a", "hot", "or", "cold", "function", "context", "and", "just", "swap", "out", "the", "output", "pipe", "to", "effectively", "shut", "that", "call", "down", "and", "free", "it", "up", "for", "another", "NUMBER", "in", "this", "case", "it", "s", "true", "that", "the", "code", "in", "the", "container", "be", "likely", "still", "executing", "and", "not", "prepared", "to", "take", "more", "input", "though", "fn", "will", "see", "it", "as", "available", "and", "attempt", "to", "shove", "more", "input", "into", "a", "container", "NUMBER", "for", "this", "reason", "I", "think", "it", "s", "probably", "best", "we", "do", "something", "like", "NUMBER", "it", "s", "kind", "of", "hard", "for", "us", "to", "know", "whether", "a", "container", "be", "actually", "prepared", "to", "take", "input", "or", "not", "there", "may", "also", "be", "some", "kind", "of", "trickery", "we", "could", "do", "with", "docker", "health", "checks", "NUMBER", "but", "this", "also", "seems", "like", "it", "would", "be", "something", "the", "client", "us", "would", "have", "to", "inject", "into", "container", "NUMBER", "anyway", "it", "seems", "like", "if", "we", "shove", "deadline", "in", "that", "container", "could", "effectively", "time", "out", "operations", "and", "cancel", "whatever", "it", "be", "they", "were", "doing", "to", "go", "take", "input", "for", "the", "next", "task", "NUMBER", "do", "NUMBER", "seem", "reasonable", "would", "be", "concerned", "about", "container", "churn", "if", "we", "made", "all", "timed", "out", "hot", "tasks", "have", "to", "shut", "down", "the", "container", "e", "NUMBER", "g", "NUMBER", "if", "user", "has", "NUMBER", "s", "timeout", "and", "their", "db", "be", "fucked", "but", "they", "continue", "to", "send", "us", "NUMBER", "rps", "NUMBER", "in", "the", "cold", "context", "this", "should", "kind", "of", "fall", "out", "except", "for", "the", "docker", "remove", "command", "can", "take", "an", "inordinate", "amount", "of", "time", "which", "leads", "me", "to", "believe", "this", "issue", "be", "file", "about", "hot", "so", "not", "expanding", "NUMBER", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "or", "mute", "the", "thread", "NUMBER", "api_version", "NUMBER", "publisher", "api_key", "NUMBER", "dde", "NUMBER", "f", "NUMBER", "d", "NUMBER", "a", "NUMBER", "dd", "NUMBER", "c", "NUMBER", "e", "NUMBER", "bb", "name", "GitHub", "entity", "external_key", "github", "fnproject", "fn", "title", "fnproject", "fn", "subtitle", "GitHub", "repository", "main_image_url", "LINK", "NUMBER", "d", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "fc", "NUMBER", "c", "NUMBER", "bb", "NUMBER", "png", "avatar_image_url", "LINK", "NUMBER", "c", "NUMBER", "b", "NUMBER", "e", "NUMBER", "NUMBER", "aed", "b", "NUMBER", "png", "action", "name", "Open", "in", "GitHub", "url", "LINK", "update", "snippets", "icon", "PERSON", "message", "rdallman", "in", "NUMBER", "there", "be", "a", "bug", "file", "about", "swapping", "out", "the", "input", "output", "pipes", "to", "avoid", "some", "of", "the", "possible", "confusion", "around", "these", "kinds", "of", "timeouts", "NUMBER", "for", "hot", "function", "ideally", "we", "leave", "the", "container", "up", "not", "sure", "if", "this", "bug", "be", "file", "in", "a", "hot", "or", "cold", "function", "context", "and", "just", "swap", "out", "the", "output", "pipe", "to", "effectively", "shut", "that", "call", "down", "and", "free", "it", "up", "for", "another", "NUMBER", "in", "this", "case", "it", "s", "true", "that", "the", "code", "in", "the", "container", "be", "likely", "still", "executing", "and", "not", "prepared", "to", "take", "more", "input", "though", "fn", "will", "see", "it", "as", "available", "and", "attempt", "to", "shove", "more", "input", "into", "a", "container", "NUMBER", "for", "this", "reason", "I", "think", "it", "s", "probably", "best", "we", "do", "something", "like", "LINK", "it", "s", "kind", "of", "hard", "for", "us", "to", "know", "whether", "a", "container", "be", "actually", "prepared", "to", "take", "input", "or", "not", "there", "may", "also", "be", "some", "kind", "of", "trickery", "we", "could", "do", "with", "docker", "health", "checks", "LINK", "but", "this", "also", "seems", "like", "it", "would", "be", "something", "the", "client", "us", "would", "have", "to", "inject", "into", "container", "NUMBER", "anyway", "it", "seems", "like", "if", "we", "shove", "deadline", "in", "that", "container", "could", "effectively", "time", "out", "operations", "and", "cancel", "whatever", "it", "be", "they", "were", "doing", "to", "go", "take", "input", "for", "the", "next", "task", "NUMBER", "do", "NUMBER", "seem", "reasonable", "would", "be", "concerned", "about", "container", "churn", "if", "we", "made", "all", "timed", "out", "hot", "tasks", "have", "to", "shut", "down", "the", "container", "e", "NUMBER", "g", "NUMBER", "if", "user", "has", "NUMBER", "s", "timeout", "and", "their", "db", "be", "fucked", "but", "they", "continue", "to", "send", "us", "NUMBER", "rps", "NUMBER", "r", "n", "r", "nin", "the", "cold", "context", "this", "should", "kind", "of", "fall", "out", "except", "for", "the", "docker", "remove", "command", "can", "take", "an", "inordinate", "amount", "of", "time", "which", "leads", "me", "to", "believe", "this", "issue", "be", "file", "about", "hot", "so", "not", "expanding", "NUMBER", "action", "name", "View", "Issue", "url", "LINK", "issuecomment", "NUMBER", "thanks", "for", "context", "NUMBER", "perhaps", "in", "addition", "to", "memory", "we", "should", "check", "on", "cpu", "usage", "before", "allowing", "more", "calls", "to", "run", "on", "a", "given", "host", "to", "try", "to", "avoid", "these", "kind", "of", "contention", "issue", "they", "be", "somewhat", "endemic", "and", "we", "ve", "dealt", "with", "it", "in", "the", "past", "by", "simply", "reducing", "the", "number", "of", "concurrent", "tasks", "that", "could", "run", "on", "any", "host", "but", "fn", "be", "more", "dynamic", "than", "the", "product", "I", "m", "speaking", "about", "NUMBER", "FYI", "LINK", "jan", "g", "could", "you", "pls", "post", "a", "brief", "explanation", "of", "the", "setup", "as", "well", "How", "many", "fn", "servers", "fn", "lb", "instances", "Using", "NUMBER", "VM", "NUMBER", "DenseIO", "NUMBER", "nodes", "with", "var", "lib", "docker", "on", "nvme", "for", "the", "DaemonSet", "NUMBER", "Each", "node", "saw", "roughly", "the", "same", "proportion", "of", "slow", "function", "fast", "function", "and", "vista", "container", "on", "it", "the", "latter", "c", "NUMBER", "NUMBER", "per", "node", "NUMBER", "The", "issue", "here", "be", "that", "we", "ve", "c", "NUMBER", "NUMBER", "GB", "per", "node", "and", "yet", "only", "NUMBER", "cores", "so", "Fn", "packs", "these", "far", "too", "densely", "and", "they", "don", "t", "get", "much", "of", "a", "look", "in", "NUMBER", "We", "were", "really", "looking", "to", "capacity", "test", "the", "Flow", "service", "we", "just", "notice", "this", "en", "passant", "NUMBER", "We", "ended", "up", "replacing", "the", "Fn", "function", "part", "with", "a", "golang", "mock", "based", "on", "GIN", "to", "get", "the", "capacity", "so", "that", "the", "Fn", "setup", "itself", "didn", "t", "need", "scaling", "beyond", "belief", "to", "get", "numbers", "for", "a", "different", "part", "of", "the", "system", "NUMBER", "However", "in", "practice", "the", "vista", "test", "looks", "to", "put", "a", "reasonable", "amount", "of", "hopefully", "fairly", "realistic", "stress", "on", "a", "system", "NUMBER", "Note", "that", "the", "slow", "function", "in", "that", "represents", "the", "image", "processing", "steps", "it", "s", "replaced", "by", "a", "sleep", "since", "we", "were", "interested", "in", "the", "Flow", "side", "rather", "than", "the", "Fn", "side", "but", "if", "that", "was", "also", "number", "crunching", "then", "the", "situation", "would", "be", "rather", "exacerbated", "NUMBER", "Clearly", "your", "work", "demand", "exceeds", "your", "capacity", "be", "always", "going", "to", "be", "a", "problem", "that", "needs", "addressing", "but", "Fn", "could", "definitely", "be", "a", "bit", "smarter", "about", "allocating", "capacity", "for", "small", "CPU", "intensive", "workloads", "NUMBER", "On", "Fri", "Nov", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Tolga", "Ceylan", "TAG", "write", "jan", "g", "TAG", "could", "you", "post", "a", "brief", "explanation", "of", "the", "setup", "as", "well", "How", "many", "fn", "servers", "fn", "lb", "instances", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Should", "we", "close", "this", "There", "were", "a", "few", "change", "in", "since", "this", "was", "opened", "NUMBER", "Does", "NUMBER", "provide", "solution", "to", "this", "workload", "I", "ll", "check", "this", "when", "I", "m", "back", "in", "the", "office", "NUMBER", "On", "Fri", "Jan", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Tolga", "Ceylan", "TAG", "write", "Should", "we", "close", "this", "There", "were", "a", "few", "change", "in", "since", "this", "was", "opened", "NUMBER", "Does", "NUMBER", "TAG", "provide", "solution", "to", "this", "workload", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Possibly", "relate", "NUMBER", "Hi", "i", "tried", "to", "execute", "your", "PHP", "code", "but", "it", "do", "not", "work", "for", "me", "the", "GO", "and", "node", "example", "just", "works", "fine", "NUMBER", "Initialize", "your", "function", "creating", "a", "func", "NUMBER", "yaml", "file", "fn", "init", "name", "hello", "php", "Test", "your", "function", "NUMBER", "This", "will", "run", "inside", "a", "container", "exactly", "how", "it", "will", "on", "the", "server", "NUMBER", "It", "will", "also", "install", "and", "vendor", "dependencies", "from", "Gemfile", "fn", "run", "Building", "image", "hanfrey", "hello", "php", "NUMBER", "Sending", "build", "context", "to", "Docker", "daemon", "NUMBER", "kB", "Step", "NUMBER", "NUMBER", "FROM", "funcy", "php", "dev", "as", "build", "stage", "dev", "Pulling", "from", "funcy", "php", "NUMBER", "Digest", "sha", "NUMBER", "cac", "NUMBER", "bfa", "NUMBER", "a", "NUMBER", "e", "NUMBER", "acb", "NUMBER", "fcdccd", "NUMBER", "c", "NUMBER", "a", "NUMBER", "adcafb", "NUMBER", "df", "NUMBER", "c", "NUMBER", "b", "NUMBER", "Status", "Downloaded", "newer", "image", "for", "funcy", "php", "dev", "NUMBER", "a", "NUMBER", "b", "NUMBER", "f", "NUMBER", "d", "Step", "NUMBER", "NUMBER", "WORKDIR", "function", "NUMBER", "cd", "NUMBER", "b", "NUMBER", "be", "Removing", "intermediate", "container", "NUMBER", "b", "NUMBER", "b", "NUMBER", "f", "NUMBER", "a", "NUMBER", "f", "NUMBER", "Step", "NUMBER", "NUMBER", "FROM", "FROM", "requires", "either", "one", "or", "three", "argument", "ERROR", "error", "run", "docker", "build", "exit", "status", "NUMBER", "Normally", "in", "the", "step", "should", "be", "the", "funcy", "php", "image", "no", "My", "func", "NUMBER", "yaml", "name", "hello", "php", "version", "NUMBER", "runtime", "php", "entrypoint", "php", "func", "NUMBER", "php", "fn", "version", "NUMBER", "NUMBER", "also", "tried", "a", "NUMBER", "version", "This", "was", "a", "bug", "in", "the", "php", "runtime", "code", "in", "the", "cli", "I", "ve", "fix", "this", "as", "part", "of", "fnproject", "cli", "NUMBER", "this", "should", "now", "work", "with", "the", "latest", "CLI", "NUMBER", "Extensions", "may", "need", "additional", "environment", "variables", "in", "the", "same", "namespace", "NUMBER", "For", "example", "the", "metrics", "API", "extension", "requires", "something", "like", "PROM_URL", "NUMBER", "Should", "this", "be", "FN_PROM_URL", "or", "FN_EXT_METRICS_PROM_URL", "DOCKER_HOST", "will", "need", "care", "as", "this", "be", "use", "by", "docker", "in", "env", "NUMBER", "But", "we", "can", "take", "this", "as", "FN_DOCKER_HOST", "and", "set", "DOCKER_HOST", "env", "ourselves", "in", "that", "fn", "server", "to", "isolate", "it", "NUMBER", "DOCKER_HOST", "makes", "sense", "to", "leave", "raw", "and", "in", "any", "case", "it", "s", "easy", "enough", "for", "a", "user", "that", "wants", "to", "complicate", "things", "and", "run", "NUMBER", "docker", "daemons", "on", "the", "same", "host", "to", "set", "this", "variable", "at", "runtime", "or", "in", "a", "config", "instead", "of", "exporting", "env", "vars", "NUMBER", "the", "rest", "seem", "like", "what", "every", "other", "config", "with", "env", "vars", "project", "seems", "to", "do", "NUMBER", "Cli", "issue", "it", "looks", "yep", "closing", "for", "LINK", "Needs", "to", "include", "flow", "and", "clustering", "etc", "NUMBER", "Shouldn", "t", "hybrid", "arch", "support", "be", "a", "diff", "ticket", "It", "was", "my", "understanding", "that", "the", "OSS", "Helm", "chart", "for", "Fn", "would", "allow", "the", "user", "to", "run", "anywhere", "so", "a", "hybrid", "approach", "here", "would", "only", "add", "more", "complexity", "NUMBER", "Are", "we", "confusing", "internal", "hybrid", "needs", "with", "OSS", "needs", "yeah", "let", "s", "make", "this", "Helm", "chart", "for", "fn", "repo", "Needs", "some", "docs", "Current", "plan", "helm", "chart", "with", "fn", "flow", "ui", "flowui", "prometheus", "can", "demo", "on", "naked", "k", "NUMBER", "s", "cluster", "docs", "tutorial", "in", "fn", "docs", "blog", "post", "outline", "not", "sure", "about", "prometheus", "but", "otherwise", "yeah", "that", "looks", "like", "a", "good", "plan", "NUMBER", "we", "can", "debate", "about", "prometheus", "or", "add", "it", "if", "we", "have", "the", "time", "NUMBER", "carimura", "cool", "NUMBER", "on", "add", "a", "docker", "compose", "example", "to", "operate", "docs", "NUMBER", "Note", "I", "push", "my", "old", "helm", "chart", "to", "a", "branch", "for", "zootalures", "to", "have", "a", "start", "point", "and", "he", "ll", "assist", "with", "the", "flow", "service", "NUMBER", "I", "ll", "swoop", "in", "next", "week", "after", "the", "break", "and", "we", "ll", "complete", "the", "helm", "chart", "leaving", "out", "prometheus", "NUMBER", "Can", "close", "now", "that", "the", "chart", "be", "release", "LINK", "helm", "thanks", "NUMBER", "initialization", "always", "ends", "up", "be", "kind", "of", "sad", "in", "my", "experience", "just", "have", "to", "comment", "so", "that", "people", "don", "t", "shuffle", "things", "around", "and", "mysteriously", "break", "things", "down", "the", "road", "doing", "this", "first", "in", "server", "init", "be", "probably", "as", "good", "as", "it", "s", "gonna", "get", "since", "we", "re", "going", "to", "need", "a", "handle", "on", "the", "config", "and", "in", "theory", "without", "agent", "run", "pulling", "calls", "from", "MQ", "or", "the", "http", "server", "run", "nothing", "should", "really", "be", "going", "on", "before", "that", "anyway", "so", "this", "should", "do", "the", "trick", "NUMBER", "This", "label", "cardinality", "thing", "be", "quite", "a", "pain", "I", "wonder", "if", "another", "prometheus", "client", "may", "not", "take", "such", "an", "issue", "with", "this", "maybe", "prometheus", "will", "end", "up", "not", "liking", "it", "though", "anyway", "For", "the", "load", "balancer", "the", "plan", "be", "to", "send", "a", "span", "in", "to", "fn", "servers", "as", "well", "I", "wonder", "if", "this", "could", "be", "would", "also", "trigger", "the", "cardinality", "issue", "NUMBER", "We", "do", "want", "to", "add", "some", "tags", "onto", "that", "span", "and", "then", "have", "fn", "continue", "that", "span", "NUMBER", "For", "what", "it", "s", "worth", "I", "run", "with", "this", "patch", "include", "for", "test", "all", "yesterday", "without", "seeing", "this", "so", "I", "m", "not", "sure", "it", "s", "anything", "within", "fn", "alone", "but", "it", "could", "be", "lingering", "somewhere", "I", "don", "t", "normally", "hit", "NUMBER", "Thanks", "for", "the", "patch", "let", "s", "get", "this", "in", "to", "avoid", "the", "panics", "at", "least", "NUMBER", "As", "of", "about", "NUMBER", "or", "NUMBER", "APi", "calls", "be", "panicing", "with", "error", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "starting", "call", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "travel", "container_id", "NUMBER", "BXCCPBR", "NUMBER", "WG", "NUMBER", "id", "NUMBER", "BXCCPBN", "NUMBER", "WG", "NUMBER", "route", "trip", "panic", "inconsistent", "label", "cardinality", "goroutine", "NUMBER", "run", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "prometheus", "client_golang", "prometheus", "NUMBER", "MetricVec", "NUMBER", "With", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "afe", "NUMBER", "NUMBER", "xc", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "prometheus", "client_golang", "prometheus", "vec", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "prometheus", "client_golang", "prometheus", "NUMBER", "HistogramVec", "NUMBER", "With", "NUMBER", "xc", "NUMBER", "fa", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "afe", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "prometheus", "client_golang", "prometheus", "histogram", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "PrometheusCollector", "NUMBER", "Collect", "NUMBER", "xc", "NUMBER", "cb", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "c", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "c", "NUMBER", "a", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "prom_zip_collector", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "PrometheusCollector", "NUMBER", "Collect", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "c", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "c", "NUMBER", "a", "NUMBER", "TAG", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "openzipkin", "zipkin", "go", "opentracing", "NUMBER", "Recorder", "NUMBER", "RecordSpan", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "d", "NUMBER", "e", "NUMBER", "f", "NUMBER", "be", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "ac", "NUMBER", "f", "NUMBER", "f", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "d", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "openzipkin", "zipkin", "go", "opentracing", "zipkin", "recorder", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ee", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "openzipkin", "zipkin", "go", "opentracing", "NUMBER", "spanImpl", "NUMBER", "FinishWithOptions", "NUMBER", "xc", "NUMBER", "ed", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "openzipkin", "zipkin", "go", "opentracing", "span", "NUMBER", "go", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "openzipkin", "zipkin", "go", "opentracing", "NUMBER", "spanImpl", "NUMBER", "Finish", "NUMBER", "xc", "NUMBER", "ed", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "openzipkin", "zipkin", "go", "opentracing", "span", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "FnSpan", "NUMBER", "Finish", "NUMBER", "x", "NUMBER", "a", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "ed", "NUMBER", "c", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "fntracer", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "FnSpan", "NUMBER", "Finish", "NUMBER", "xc", "NUMBER", "fa", "NUMBER", "TAG", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "drivers", "docker", "NUMBER", "dockerWrap", "NUMBER", "InspectImage", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "ee", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "drivers", "docker", "docker_client", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "drivers", "docker", "NUMBER", "DockerDriver", "NUMBER", "ensureImage", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "a", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "ec", "NUMBER", "NUMBER", "xc", "NUMBER", "bca", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "drivers", "docker", "docker", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "drivers", "docker", "NUMBER", "DockerDriver", "NUMBER", "Prepare", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "a", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "ec", "NUMBER", "NUMBER", "xc", "NUMBER", "bca", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "d", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "drivers", "docker", "docker", "NUMBER", "go", "NUMBER", "NUMBER", "xc", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "NUMBER", "agent", "NUMBER", "prepCold", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "ad", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xdb", "NUMBER", "f", "NUMBER", "c", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "agent", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "NUMBER", "agent", "NUMBER", "launch", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "ad", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "agent", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "created", "by", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "NUMBER", "agent", "NUMBER", "launch", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "agent", "agent", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "An", "example", "to", "show", "how", "to", "create", "an", "extension", "for", "use", "custom", "domains", "NUMBER", "Eg", "NUMBER", "namespaced", "by", "user", "appname", "NUMBER", "username", "NUMBER", "customdomain", "NUMBER", "com", "path", "to", "function", "points", "to", "same", "thing", "as", "host", "r", "appname", "path", "to", "function", "Eg", "NUMBER", "globally", "unique", "app", "names", "like", "s", "NUMBER", "heroku", "google", "cloud", "function", "lambda", "with", "api", "gateway", "appname", "NUMBER", "customdomain", "NUMBER", "com", "If", "you", "were", "run", "a", "service", "you", "d", "offer", "up", "domains", "like", "appname", "NUMBER", "my", "fn", "service", "NUMBER", "com", "carimura", "Yes", "it", "be", "somewhat", "relate", "NUMBER", "NUMBER", "I", "m", "a", "bit", "confused", "by", "the", "title", "of", "this", "issue", "specifically", "w", "r", "t", "namespacing", "via", "etc", "hosts", "NUMBER", "I", "must", "be", "miss", "some", "context", "from", "recent", "discussions", "NUMBER", "NUMBER", "Related", "to", "above", "I", "m", "not", "work", "on", "namespacing", "NUMBER", "That", "s", "another", "issue", "see", "GitLab", "service", "repo", "separate", "from", "what", "I", "had", "be", "work", "on", "before", "Fn", "OKE", "took", "up", "all", "of", "my", "time", "NUMBER", "NUMBER", "I", "be", "work", "on", "the", "second", "bullet", "point", "globally", "unique", "app", "names", "i", "NUMBER", "e", "myapp", "NUMBER", "fnservice", "NUMBER", "io", "NUMBER", "This", "be", "come", "together", "here", "LINK", "ext", "dns", "CLA", "sign", "and", "emailed", "per", "instructions", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "Russ", "Ferriday", "The", "email", "use", "in", "the", "commit", "be", "not", "linked", "to", "your", "GitHub", "account", "NUMBER", "As", "a", "result", "we", "cannot", "verify", "that", "you", "have", "sign", "the", "CLA", "NUMBER", "If", "you", "have", "sign", "already", "please", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "_invite", "MjIwNzc", "NUMBER", "MTE", "NUMBER", "ODg", "NUMBER", "LTE", "NUMBER", "MDE", "NUMBER", "NTUyNTktYThmYmRjZDUwOQ", "NUMBER", "Thanks", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "bump", "carimura", "for", "cla", "bot", "merge", "be", "blocked", "this", "be", "merge", "into", "mainline", "via", "another", "patch", "thanks", "NP", "NUMBER", "Russ", "Ferriday", "CEO", "Topia", "Systems", "Ltd", "NUMBER", "topiaruss", "gmail", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "On", "Tue", "Jan", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Reed", "Allman", "TAG", "write", "this", "be", "merge", "into", "mainline", "via", "another", "patch", "thanks", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "try", "run", "go", "fmt", "api", "server", "server", "NUMBER", "go", "recommend", "setting", "up", "on", "editor", "save", "hook", "I", "use", "goimports", "myself", "initial", "thoughts", "this", "looks", "really", "great", "NUMBER", "will", "dig", "into", "the", "code", "today", "partly", "to", "trigger", "another", "CI", "run", "I", "don", "t", "have", "permissions", "to", "re", "trigger", "the", "test", "I", "had", "this", "issue", "the", "other", "day", "and", "what", "fix", "it", "was", "going", "to", "the", "circleci", "dashboard", "page", "and", "make", "sure", "i", "m", "logged", "in", "and", "then", "clicking", "into", "my", "projects", "and", "then", "to", "this", "repo", "NUMBER", "then", "in", "circleci", "I", "was", "logged", "in", "and", "had", "permission", "where", "previously", "that", "had", "not", "be", "the", "case", "NUMBER", "was", "weird", "anyway", "might", "try", "doing", "that", "NUMBER", "now", "when", "I", "open", "circleci", "from", "this", "repo", "I", "appear", "logged", "in", "every", "time", "NUMBER", "Spans", "which", "have", "no", "app", "and", "path", "be", "shown", "with", "a", "line", "identified", "in", "the", "legend", "as", "fn_path", "fn_appname", "NUMBER", "not", "really", "important", "but", "probably", "would", "expect", "to", "see", "simply", "an", "aggregation", "of", "all", "serve_http", "across", "all", "app_name", "and", "path", "empty", "or", "otherwise", "than", "simply", "an", "aggregation", "of", "all", "blanks", "NUMBER", "iirc", "grafana", "allows", "this", "syntax", "with", "a", "but", "I", "m", "rusty", "NUMBER", "I", "made", "the", "request", "change", "and", "add", "the", "Flow", "FAQ", "question", "to", "the", "end", "NUMBER", "I", "tried", "to", "simplify", "the", "How", "do", "I", "Upgrade", "the", "FDK", "question", "and", "not", "sure", "if", "I", "helped", "or", "just", "mucked", "it", "up", "NUMBER", "I", "m", "hoping", "to", "start", "on", "this", "today", "NUMBER", "Still", "clearing", "the", "deck", "from", "previous", "projects", "NUMBER", "Ok", "I", "made", "almost", "all", "of", "the", "request", "change", "and", "commit", "them", "to", "the", "branch", "NUMBER", "Hope", "that", "was", "the", "right", "way", "to", "do", "it", "NUMBER", "Let", "me", "know", "if", "you", "have", "any", "more", "question", "or", "comments", "NUMBER", "Instead", "of", "Our", "vision", "at", "Iron", "NUMBER", "io", "was", "a", "lot", "larger", "than", "a", "simple", "FaaS", "platform", "NUMBER", "I", "would", "say", "The", "Fn", "Project", "be", "an", "evolution", "of", "the", "IronFunctions", "project", "from", "Iron", "NUMBER", "io", "and", "our", "original", "vision", "for", "IronFunctions", "was", "a", "lot", "larger", "than", "a", "simple", "FaaS", "platform", "NUMBER", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "Michael", "J", "Williams", "LINK", "w", "williams", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "Is", "this", "PR", "just", "blocked", "by", "CLA", "michael", "w", "williams", "looks", "like", "you", "should", "be", "covered", "now", "that", "your", "membership", "in", "oracle", "org", "be", "public", "Can", "one", "of", "you", "guys", "merge", "it", "It", "still", "appears", "that", "I", "can", "t", "do", "that", "NUMBER", "Is", "there", "anything", "else", "that", "needs", "to", "be", "do", "CLA", "Bot", "All", "committers", "have", "sign", "the", "CLA", "NUMBER", "michael", "w", "williams", "You", "should", "be", "good", "NUMBER", "Seems", "like", "its", "waiting", "on", "a", "from", "treeder", "Thanks", "we", "have", "to", "wait", "to", "get", "our", "CLA", "in", "place", "will", "merge", "right", "after", "NUMBER", "Oracle", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "we", "really", "appreciate", "it", "NUMBER", "Like", "many", "open", "source", "projects", "we", "ask", "that", "you", "sign", "our", "Contributor", "License", "Agreement", "LINK", "NUMBER", "html", "before", "we", "can", "accept", "your", "contribution", "NUMBER", "lagartoflojo", "Hi", "from", "the", "linked", "page", "Submitting", "the", "OCA", "procedure", "NUMBER", "Download", "the", "OCA", "from", "here", "LINK", "NUMBER", "pdf", "NUMBER", "Print", "it", "NUMBER", "Fill", "out", "and", "sign", "the", "form", "do", "not", "forget", "to", "fill", "in", "the", "point", "NUMBER", "and", "provide", "your", "mailing", "address", "not", "only", "your", "e", "mail", "address", "NUMBER", "Scan", "the", "paper", "NUMBER", "Send", "a", "picture", "PDF", "to", "oracle", "ca_us", "at", "oracle", "dot", "com", "Really", "It", "s", "gonna", "take", "me", "longer", "to", "do", "this", "than", "it", "took", "me", "to", "create", "the", "PR", "NUMBER", "You", "be", "welcome", "to", "open", "a", "new", "PR", "with", "the", "typo", "fix", "NUMBER", "I", "ll", "close", "this", "NUMBER", "I", "ll", "consider", "following", "the", "CLA", "procedure", "if", "I", "ever", "contribute", "something", "more", "significant", "to", "the", "project", "NUMBER", "This", "defines", "what", "should", "go", "in", "this", "repo", "and", "what", "shouldn", "t", "NUMBER", "Feedback", "welcome", "NUMBER", "I", "will", "be", "following", "up", "with", "examples", "of", "easy", "ways", "to", "add", "extensions", "and", "rebuild", "the", "server", "NUMBER", "rdallman", "derekschultz", "denismakogon", "carimura", "nigeldeakin", "spot", "on", "would", "be", "great", "if", "you", "could", "pull", "the", "prom", "stuff", "out", "into", "it", "s", "own", "extension", "NUMBER", "And", "check", "out", "this", "PR", "for", "and", "the", "example", "linked", "from", "there", "for", "build", "extensions", "LINK", "What", "about", "tracing", "Calls", "to", "the", "OpenTracing", "API", "should", "probably", "remain", "part", "of", "the", "core", "but", "the", "OpenTracing", "client", "implementation", "i", "NUMBER", "e", "NUMBER", "Zipkin", "and", "the", "configuration", "of", "the", "trace", "collectors", "the", "Http", "one", "already", "be", "use", "and", "the", "new", "custom", "collector", "to", "send", "spans", "to", "Prometheus", "should", "probably", "be", "add", "ons", "NUMBER", "NUMBER", "I", "agree", "we", "should", "standardize", "on", "the", "OpenTracing", "API", "for", "metrics", "logging", "in", "our", "code", "and", "then", "make", "it", "easy", "to", "plug", "in", "different", "backends", "to", "get", "that", "data", "out", "NUMBER", "I", "like", "this", "overall", "as", "long", "as", "it", "s", "really", "easy", "to", "build", "with", "plugins", "seems", "that", "way", "NUMBER", "fix", "NUMBER", "It", "would", "be", "nice", "to", "provide", "middleware", "for", "user", "applications", "in", "the", "form", "of", "another", "function", "so", "that", "a", "user", "can", "add", "things", "like", "authentication", "for", "instance", "NUMBER", "User", "add", "route", "function", "to", "app", "User", "add", "middleware", "to", "app", "URL", "s", "to", "function", "During", "execution", "we", "call", "URL", "s", "before", "run", "the", "function", "If", "response", "isn", "t", "NUMBER", "XX", "we", "respond", "early", "and", "don", "t", "run", "function", "NUMBER", "Related", "LINK", "Is", "this", "on", "the", "roadmap", "at", "all", "It", "would", "be", "very", "useful", "Daniel", "NUMBER", "At", "this", "moment", "you", "can", "develop", "your", "own", "middleware", "along", "with", "the", "extensions", "to", "Fn", "NUMBER", "So", "nothing", "stops", "you", "from", "doing", "what", "you", "want", "need", "NUMBER", "Sure", "I", "understand", "that", "I", "can", "write", "middleware", "for", "Fn", "in", "Go", "but", "it", "would", "be", "nice", "to", "have", "a", "simple", "build", "in", "way", "to", "use", "another", "function", "as", "middleware", "so", "that", "I", "could", "write", "the", "middleware", "in", "any", "language", "I", "like", "NUMBER", "Thanks", "for", "the", "reply", "NUMBER", "I", "m", "not", "sure", "if", "that", "s", "something", "we", "d", "do", "in", "short", "term", "NUMBER", "Maybe", "you", "re", "willing", "to", "contribute", "Would", "be", "nice", "to", "start", "with", "detailed", "feature", "description", "use", "cases", "etc", "NUMBER", "P", "NUMBER", "S", "NUMBER", "The", "reason", "this", "feature", "be", "not", "available", "because", "Fn", "has", "change", "significantly", "at", "least", "I", "think", "so", "NUMBER", "I", "made", "some", "minor", "change", "to", "the", "main", "README", "NUMBER", "md", "NUMBER", "Mostly", "a", "little", "clean", "up", "NUMBER", "For", "the", "Tutorials", "page", "I", "made", "change", "based", "on", "our", "discussion", "this", "morning", "NUMBER", "Made", "the", "old", "tutorials", "into", "a", "Guided", "Tour", "in", "NUMBER", "parts", "and", "add", "links", "for", "the", "OOW", "tutorials", "that", "I", "know", "about", "so", "far", "NUMBER", "Ping", "me", "if", "you", "have", "any", "feedback", "NUMBER", "Thanks", "Mike", "W", "NUMBER", "P", "NUMBER", "S", "NUMBER", "I", "m", "kinda", "new", "to", "actually", "use", "Git", "like", "you", "be", "supposed", "to", "in", "a", "group", "NUMBER", "So", "if", "you", "have", "any", "tips", "or", "feedback", "please", "let", "me", "know", "NUMBER", "Ok", "NUMBER", "I", "think", "I", "have", "made", "all", "the", "request", "change", "NUMBER", "Mike", "W", "NUMBER", "Just", "saw", "Travis", "comments", "NUMBER", "Let", "me", "fix", "those", "too", "NUMBER", "Mike", "W", "NUMBER", "Ok", "NUMBER", "I", "think", "I", "have", "fix", "all", "of", "travis", "comments", "as", "well", "NUMBER", "michael", "w", "williams", "shall", "we", "close", "this", "one", "You", "bet", "NUMBER", "The", "stats", "API", "call", "returns", "a", "map", "containing", "queued", "run", "completed", "fail", "stats", "for", "each", "function", "as", "well", "as", "global", "totals", "NUMBER", "However", "this", "do", "not", "include", "function", "that", "have", "not", "yet", "be", "call", "NUMBER", "This", "be", "no", "what", "the", "user", "or", "the", "UI", "tool", "would", "expect", "NUMBER", "If", "a", "function", "has", "be", "created", "then", "stats", "should", "return", "queued", "run", "completed", "fail", "stats", "for", "it", "NUMBER", "Obviously", "the", "values", "would", "all", "be", "zero", "until", "the", "function", "was", "actually", "call", "NUMBER", "Required", "for", "LINK", "I", "believe", "this", "be", "because", "async", "calls", "go", "directly", "on", "the", "queue", "without", "hitting", "the", "database", "first", "NUMBER", "rdallman", "can", "confirm", "NUMBER", "If", "that", "s", "the", "case", "it", "would", "probably", "make", "sense", "to", "hit", "the", "database", "with", "queued", "state", "or", "at", "least", "send", "a", "queued", "event", "to", "stats", "NUMBER", "yea", "relate", "to", "NUMBER", "and", "NUMBER", "just", "moving", "the", "stats", "NUMBER", "Queued", "call", "to", "agent", "NUMBER", "GetCall", "will", "probably", "do", "the", "trick", "and", "then", "our", "Stats", "struct", "thing", "doesn", "t", "have", "to", "leak", "into", "the", "front", "end", "as", "much", "NUMBER", "To", "fix", "this", "issue", "we", "need", "a", "new", "function", "that", "be", "call", "once", "for", "every", "route", "in", "the", "database", "when", "the", "server", "be", "start", "and", "subsequently", "whenever", "a", "new", "route", "be", "created", "NUMBER", "since", "we", "be", "planning", "to", "use", "an", "external", "aggregator", "service", "i", "don", "t", "think", "we", "need", "to", "add", "too", "much", "machinery", "here", "at", "the", "cost", "of", "slight", "precision", "loss", "around", "fn", "server", "failures", "which", "I", "don", "t", "think", "matters", "so", "much", "NUMBER", "if", "we", "call", "stats", "NUMBER", "Queued", "from", "agent", "NUMBER", "GetCall", "then", "in", "theory", "that", "data", "gets", "sent", "out", "or", "pull", "from", "statsd", "prometheus", "respectively", "within", "some", "polling", "interval", "so", "I", "don", "t", "think", "it", "s", "worth", "checking", "the", "db", "really", "NUMBER", "also", "since", "we", "re", "run", "distributed", "on", "startup", "we", "can", "t", "really", "have", "every", "fn", "server", "add", "up", "every", "queued", "call", "in", "the", "db", "otherwise", "if", "there", "be", "e", "NUMBER", "g", "NUMBER", "NUMBER", "queued", "calls", "and", "NUMBER", "fn", "servers", "restart", "prom", "would", "pull", "that", "NUMBER", "be", "queued", "and", "i", "don", "t", "think", "we", "can", "mix", "gauge", "and", "counter", "very", "easily", "NUMBER", "As", "for", "calling", "stats", "NUMBER", "Queued", "from", "agent", "NUMBER", "GetCall", "why", "be", "that", "better", "than", "calling", "it", "just", "once", "as", "now", "when", "the", "call", "be", "enqueued", "well", "just", "the", "positioning", "I", "think", "NUMBER", "GetCall", "be", "call", "before", "queueing", "the", "call", "to", "the", "MQ", "so", "while", "it", "sits", "on", "the", "MQ", "prometheus", "will", "have", "a", "counter", "incremented", "for", "it", "NUMBER", "whereas", "right", "now", "it", "s", "in", "Submit", "so", "only", "after", "the", "call", "gets", "pick", "off", "the", "MQ", "could", "be", "seconds", "minutes", "hours", "after", "it", "was", "actually", "queued", "will", "the", "counter", "get", "incremented", "NUMBER", "there", "be", "some", "consideration", "for", "calls", "that", "may", "get", "pull", "off", "the", "MQ", "multiple", "times", "for", "reasons", "of", "fail", "previously", "timeouts", "etc", "this", "be", "an", "issue", "in", "the", "current", "spot", "as", "well", "as", "in", "GetCall", "without", "certain", "care", "NUMBER", "I", "think", "originally", "this", "be", "how", "I", "interpreted", "this", "issue", "though", "now", "I", "understand", "it", "s", "something", "else", "NUMBER", "in", "any", "event", "this", "be", "also", "going", "on", "NUMBER", "closing", "don", "t", "think", "we", "need", "to", "have", "zeroed", "stats", "for", "routes", "that", "have", "yet", "be", "invoked", "if", "i", "understand", "correctly", "need", "to", "store", "in", "db", "add", "to", "api", "useful", "for", "auditing", "stuff", "NUMBER", "we", "should", "probably", "implement", "db", "migrations", "baked", "in", "so", "that", "we", "can", "make", "change", "like", "this", "without", "breaking", "people", "s", "dbs", "too", "NUMBER", "Was", "this", "implement", "rdallman", "It", "s", "not", "there", "yet", "NUMBER", "on", "it", "Current", "status", "waiting", "on", "corp", "digital", "sig", "account", "NUMBER", "stand", "by", "NUMBER", "This", "feature", "add", "new", "hot", "format", "JSON", "NUMBER", "Comparing", "to", "HTTP", "format", "JSON", "takes", "request", "payload", "and", "add", "certain", "field", "that", "might", "appear", "useful", "for", "function", "and", "send", "sends", "it", "to", "function", "s", "STDIN", "NUMBER", "Closes", "NUMBER", "TODO", "add", "more", "test", "API", "test", "So", "recent", "commit", "address", "few", "things", "writes", "JSONIO", "NUMBER", "body", "be", "bytes", "without", "unnecessary", "marshaling", "unmarshals", "function", "output", "only", "in", "case", "writer", "from", "Dispatch", "be", "a", "response", "writer", "writes", "whole", "function", "output", "copies", "to", "a", "writer", "from", "Dispatch", "NUMBER", "rdallman", "treeder", "question", "that", "be", "still", "open", "in", "case", "of", "huge", "JSON", "how", "should", "we", "write", "it", "to", "STDIN", "Maybe", "we", "need", "to", "write", "in", "in", "chunks", "but", "how", "big", "that", "chunk", "should", "be", "should", "chunk", "size", "align", "to", "request", "size", "limits", "Per", "discussion", "with", "rdallman", "NUMBER", "We", "need", "to", "do", "following", "JSONIO", "be", "redundant", "here", "because", "it", "s", "nothing", "but", "http", "NUMBER", "Request", "or", "it", "s", "small", "piece", "we", "should", "not", "buffer", "request", "body", "but", "define", "custom", "encoder", "for", "http", "NUMBER", "Request", "so", "we", "can", "build", "encoded", "state", "right", "into", "STDIN", "avoiding", "any", "kinds", "of", "buffering", "hopefully", "NUMBER", "treeder", "LINK", "looks", "promising", "but", "unmaintained", "almost", "a", "year", "NUMBER", "would", "try", "that", "someday", "later", "at", "this", "moment", "finishing", "hotfn", "py", "NUMBER", "After", "playing", "a", "while", "with", "code", "i", "find", "that", "it", "actually", "doesn", "t", "work", "properly", "and", "here", "s", "why", "NUMBER", "rdallman", "recommended", "to", "do", "following", "go", "io", "NUMBER", "WriteString", "h", "NUMBER", "in", "body", "io", "NUMBER", "Copy", "h", "NUMBER", "in", "req", "NUMBER", "Body", "io", "NUMBER", "WriteString", "h", "NUMBER", "in", "so", "i", "ended", "up", "with", "following", "code", "go", "func", "h", "JSONProtocol", "DumpJSON", "w", "io", "NUMBER", "Writer", "req", "http", "NUMBER", "Request", "error", "_", "err", "io", "NUMBER", "WriteString", "h", "NUMBER", "in", "if", "err", "nil", "this", "shouldn", "t", "happen", "return", "err", "if", "req", "NUMBER", "Body", "nil", "_", "err", "io", "NUMBER", "WriteString", "h", "NUMBER", "in", "body", "if", "err", "nil", "this", "shouldn", "t", "happen", "return", "err", "_", "err", "io", "NUMBER", "Copy", "h", "NUMBER", "in", "req", "NUMBER", "Body", "if", "err", "nil", "this", "shouldn", "t", "happen", "return", "err", "_", "err", "io", "NUMBER", "WriteString", "h", "NUMBER", "in", "if", "err", "nil", "this", "shouldn", "t", "happen", "return", "err", "defer", "req", "NUMBER", "Body", "NUMBER", "Close", "_", "err", "io", "NUMBER", "WriteString", "h", "NUMBER", "in", "headers", "if", "err", "nil", "this", "shouldn", "t", "happen", "return", "err", "err", "json", "NUMBER", "NewEncoder", "h", "NUMBER", "in", "NUMBER", "Encode", "req", "NUMBER", "Header", "if", "err", "nil", "this", "shouldn", "t", "happen", "return", "err", "_", "err", "io", "NUMBER", "WriteString", "h", "NUMBER", "in", "if", "err", "nil", "this", "shouldn", "t", "happen", "return", "err", "return", "nil", "Unfortunately", "it", "do", "work", "only", "into", "two", "cases", "body", "be", "empty", "body", "be", "plain", "text", "Cases", "when", "this", "code", "doesn", "t", "work", "json", "xml", "html", "Good", "question", "here", "would", "be", "why", "so", "Okay", "we", "agreed", "that", "JSON", "protocol", "be", "not", "kinda", "bidirectional", "so", "we", "let", "user", "write", "JSON", "XML", "Text", "HMTL", "in", "request", "body", "by", "itself", "JSON", "proto", "dispatcher", "writes", "a", "JSON", "object", "of", "the", "following", "format", "json", "body", "NUMBER", "string", "headers", "NUMBER", "http", "NUMBER", "Header", "as", "a", "response", "from", "function", "we", "allow", "to", "receive", "following", "format", "json", "body", "NUMBER", "string", "headers", "NUMBER", "http", "NUMBER", "Header", "status_code", "NUMBER", "int", "Assume", "user", "sends", "JSON", "object", "to", "a", "function", "json", "name", "Denis", "Taking", "into", "account", "the", "way", "we", "write", "request", "body", "STDIN", "function", "will", "receive", "following", "data", "json", "body", "name", "Denis", "this", "be", "not", "a", "valid", "JSON", "and", "this", "makes", "function", "fail", "to", "decode", "JSON", "object", "from", "the", "JSON", "body", "same", "thing", "happens", "to", "XML", "HTML", "NUMBER", "In", "order", "to", "fix", "following", "issue", "we", "need", "to", "turn", "request", "body", "to", "byte", "stream", "and", "send", "it", "as", "a", "string", "or", "byte", "stream", "representation", "doesn", "t", "actually", "matter", "at", "this", "point", "NUMBER", "Then", "create", "JSON", "object", "the", "one", "that", "would", "be", "sent", "later", "to", "a", "function", "with", "string", "byte", "representation", "of", "a", "request", "body", "NUMBER", "Pros", "function", "will", "receive", "valid", "data", "that", "can", "be", "transformed", "back", "to", "JSON", "XML", "HTML", "Text", "Cons", "allocating", "NUMBER", "buffer", "per", "request", "body", "we", "still", "can", "reset", "each", "buffer", "when", "it", "s", "no", "longer", "needed", "Last", "statement", "returns", "us", "to", "the", "following", "question", "should", "JSON", "dispatcher", "write", "request", "body", "into", "chunks", "We", "re", "almost", "set", "for", "this", "use", "code", "from", "latest", "commit", "NUMBER", "a", "NUMBER", "cfe", "NUMBER", "e", "NUMBER", "cbcbeef", "NUMBER", "d", "NUMBER", "a", "NUMBER", "e", "NUMBER", "we", "can", "write", "chunked", "request", "body", "easily", "NUMBER", "Thoughts", "treeder", "carimura", "hibooboo", "NUMBER", "rdallman", "zootalures", "that", "s", "the", "point", "of", "my", "long", "read", "comment", "above", "NUMBER", "We", "__can", "t__", "just", "copy", "request", "body", "to", "STDIN", "because", "it", "s", "bad", "idea", "NUMBER", "We", "need", "to", "make", "it", "work", "for", "everything", "that", "s", "why", "we", "need", "to", "read", "body", "as", "byte", "array", "and", "then", "get", "it", "string", "representation", "that", "can", "work", "for", "any", "content", "type", "JSON", "XML", "HTML", "NUMBER", "it", "seems", "fine", "to", "have", "a", "little", "pass", "thru", "copy", "function", "which", "can", "read", "NUMBER", "byte", "at", "a", "time", "and", "escape", "any", "chars", "necessary", "for", "json", "to", "encode", "it", "NUMBER", "json", "will", "only", "accept", "utf", "NUMBER", "so", "we", "need", "to", "check", "that", "anyway", "really", "NUMBER", "we", "don", "t", "need", "to", "care", "about", "html", "or", "xml", "encoding", "because", "the", "body", "be", "a", "string", "so", "as", "long", "as", "the", "string", "be", "parseable", "to", "a", "json", "string", "then", "it", "s", "fine", "NUMBER", "it", "s", "still", "not", "required", "to", "marshal", "the", "entire", "thing", "into", "a", "json", "it", "just", "takes", "a", "little", "ingenuity", "NUMBER", "i", "m", "happy", "to", "take", "this", "patch", "over", "if", "you", "do", "not", "want", "to", "work", "through", "the", "stuff", "required", "to", "do", "so", "NUMBER", "on", "the", "other", "end", "the", "hotpy", "stuff", "needs", "to", "use", "a", "streaming", "json", "parser", "which", "has", "be", "linked", "i", "m", "sure", "others", "exist", "it", "s", "also", "really", "easy", "to", "write", "one", "yourself", "and", "can", "be", "fun", "for", "certain", "kinds", "of", "brains", "NUMBER", "once", "we", "do", "something", "we", "re", "going", "to", "be", "stuck", "with", "bug", "as", "a", "feature", "and", "this", "one", "write", "event", "thing", "be", "exactly", "that", "kind", "of", "thing", "NUMBER", "check", "this", "out", "LINK", "easy", "peasy", "rdallman", "you", "ve", "mention", "the", "alternative", "that", "i", "ve", "be", "test", "as", "an", "alternative", "to", "what", "i", "ve", "made", "at", "this", "moment", "that", "s", "why", "i", "left", "that", "code", "in", "place", "NUMBER", "Don", "t", "think", "that", "i", "m", "arguing", "regard", "single", "write", "event", "i", "think", "we", "ll", "be", "able", "to", "find", "proper", "ways", "to", "read", "JSON", "no", "matter", "if", "that", "would", "be", "a", "byte", "by", "byte", "read", "as", "you", "said", "protocol", "dictates", "structure", "not", "frame", "NUMBER", "So", "feel", "free", "to", "review", "this", "one", "again", "NUMBER", "ok", "NUMBER", "seems", "like", "everything", "still", "get", "shoved", "in", "buffers", "here", "not", "sure", "if", "you", "push", "NUMBER", "lmk", "when", "update", "rdallman", "there", "s", "only", "one", "buffer", "for", "request", "body", "everything", "else", "be", "not", "buffered", "and", "gets", "write", "just", "into", "STDIN", "NUMBER", "So", "it", "s", "obvious", "why", "i", "did", "this", "for", "body", "it", "needs", "to", "be", "encoded", "properly", "NUMBER", "Latest", "change", "were", "push", "NUMBER", "the", "docs", "be", "still", "wrong", "see", "LINK", "discussion_r", "NUMBER", "outdate", "but", "still", "wrong", "if", "user", "returns", "json", "object", "but", "status", "code", "be", "NUMBER", "should", "we", "rewrite", "it", "to", "NUMBER", "probably", "this", "will", "return", "a", "NUMBER", "atm", "empty", "headers", "be", "fine", "but", "status", "one", "be", "weird", "NUMBER", "cool", "seems", "much", "better", "now", "NUMBER", "want", "to", "test", "with", "the", "examples", "and", "your", "python", "library", "and", "make", "sure", "everything", "be", "good", "then", "we", "can", "merge", "can", "optimize", "the", "buffer", "thing", "out", "in", "a", "bit", "need", "to", "fiddle", "with", "it", "NUMBER", "rdallman", "python", "JSON", "parser", "be", "not", "ready", "that", "would", "be", "do", "later", "so", "i", "excluded", "python", "s", "example", "from", "this", "PR", "and", "will", "push", "that", "later", "NUMBER", "works", "for", "me", "also", "in", "future", "we", "should", "probably", "parse", "out", "the", "response", "json", "ourselves", "since", "atm", "for", "output", "we", "be", "decoding", "into", "a", "gigantic", "buffer", "and", "then", "for", "logs", "re", "encoding", "it", "and", "for", "the", "http", "one", "we", "can", "just", "copy", "the", "raw", "body", "out", "of", "the", "json", "response", "respString", "x", "y", "instead", "of", "allocating", "a", "gigantic", "string", "and", "copying", "it", "over", "NUMBER", "but", "since", "we", "don", "t", "care", "about", "that", "for", "now", "moving", "on", "NUMBER", "close", "NUMBER", "some", "people", "hitting", "OOM", "just", "test", "stuff", "NUMBER", "we", "could", "increase", "default", "to", "NUMBER", "which", "be", "still", "a", "little", "tight", "NUMBER", "there", "be", "multiple", "solutions", "I", "think", "we", "should", "consider", "increase", "default", "to", "NUMBER", "MB", "for", "runtimes", "that", "use", "lots", "of", "ram", "fn", "init", "can", "add", "a", "higher", "default", "JVM", "ruby", "to", "func", "NUMBER", "yaml", "make", "OOM", "error", "message", "suggest", "increasing", "the", "route", "memory", "some", "people", "be", "unaware", "this", "be", "an", "option", "when", "run", "into", "OOM", "FWIW", "we", "haven", "t", "seen", "any", "significant", "problem", "with", "this", "in", "java", "yet", "we", "re", "use", "the", "latest", "JVM", "hacks", "to", "elastically", "set", "the", "heap", "with", "the", "container", "mem", "so", "users", "should", "see", "an", "OOM", "exception", "in", "java", "before", "a", "docker", "OOM", "in", "almost", "all", "cases", "NUMBER", "for", "NUMBER", "and", "NUMBER", "though", "I", "will", "look", "at", "the", "java", "fdk", "and", "try", "to", "apply", "the", "same", "JVM", "options", "to", "grow", "heap", "and", "this", "may", "help", "with", "my", "particular", "issue", "NUMBER", "markxnelson", "yeah", "IIRC", "the", "default", "no", "options", "heap", "for", "java", "be", "NUMBER", "NUMBER", "container", "ram", "I", "think", "we", "set", "it", "to", "NUMBER", "NUMBER", "which", "for", "NUMBER", "Mb", "anyway", "gives", "just", "about", "enough", "ram", "for", "other", "pools", "NUMBER", "Java", "NUMBER", "NUMBER", "will", "be", "difference", "entrypoint", "be", "here", "LINK", "java", "fdk", "blob", "master", "runtime", "Dockerfile", "ENTRYPOINT", "usr", "lib", "jvm", "java", "NUMBER", "openjdk", "amd", "NUMBER", "jre", "bin", "java", "XX", "UnlockExperimentalVMOptions", "XX", "UseCGroupMemoryLimitForHeap", "XX", "MaxRAMFraction", "NUMBER", "XX", "UseSerialGC", "Xshare", "on", "cp", "function", "app", "function", "runtime", "com", "NUMBER", "fnproject", "NUMBER", "fn", "NUMBER", "runtime", "NUMBER", "EntryPoint", "Consider", "this", "func", "NUMBER", "yaml", "yaml", "name", "alert", "manager", "version", "NUMBER", "runtime", "java", "cmd", "com", "NUMBER", "oracle", "NUMBER", "ate", "NUMBER", "demo", "handleRequest", "timeout", "NUMBER", "path", "alert", "manager", "headers", "Access", "Control", "Allow", "Headers", "Authorization", "Origin", "X", "Requested", "With", "Content", "Type", "Accept", "Access", "Control", "Allow", "Methods", "POST", "GET", "OPTIONS", "Access", "Control", "Allow", "Origin", "Content", "type", "text", "json", "idle_timeout", "NUMBER", "If", "I", "deploy", "this", "function", "several", "times", "in", "succession", "I", "observe", "that", "when", "make", "an", "OPTIONS", "request", "to", "the", "service", "the", "values", "of", "the", "response", "headers", "as", "specified", "above", "will", "be", "duplicate", "a", "number", "of", "times", "equal", "the", "number", "of", "deploys", "NUMBER", "closing", "NUMBER", "thanks", "for", "bug", "NUMBER", "i", "think", "we", "be", "intentionally", "add", "headers", "if", "they", "exist", "in", "config", "set", "but", "could", "see", "this", "be", "an", "issue", "for", "deploys", "FWIW", "here", "be", "an", "example", "of", "the", "problem", "Access", "Control", "Allow", "Headers", "Authorization", "Origin", "X", "Requested", "With", "Content", "Type", "Accept", "Authorization", "Origin", "X", "Requested", "With", "Content", "Type", "Accept", "Access", "Control", "Allow", "Methods", "POST", "GET", "OPTIONS", "POST", "GET", "OPTIONS", "Access", "Control", "Allow", "Origin", "Content", "Length", "NUMBER", "Content", "Type", "text", "json", "Fn_call_id", "NUMBER", "BTJS", "NUMBER", "ZY", "NUMBER", "WHR", "NUMBER", "Xxx", "Fxlb", "Wait", "NUMBER", "\u00c2\u00b5s", "Date", "Thu", "NUMBER", "Sep", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "So", "we", "can", "change", "deploy", "routine", "to", "make", "it", "actually", "do", "re", "deploying", "if", "app", "exists", "then", "drop", "it", "and", "create", "from", "scratch", "NUMBER", "On", "the", "other", "hand", "we", "can", "make", "headers", "be", "more", "solid", "i", "NUMBER", "e", "if", "header", "exists", "skip", "it", "NUMBER", "rdallman", "edburns", "thoughts", "On", "the", "other", "hand", "we", "can", "make", "headers", "be", "more", "solid", "i", "NUMBER", "e", "if", "header", "exists", "skip", "it", "NUMBER", "if", "they", "want", "to", "update", "the", "values", "this", "logic", "would", "make", "them", "unable", "to", "do", "so", "without", "first", "deleting", "an", "entry", "NUMBER", "it", "s", "kind", "of", "hairy", "to", "skip", "over", "would", "rather", "just", "override", "NUMBER", "this", "be", "a", "NUMBER", "line", "change", "Header", "NUMBER", "Add", "Header", "NUMBER", "Set", "if", "we", "all", "agree", "NUMBER", "later", "when", "somebody", "asks", "in", "NUMBER", "months", "we", "could", "add", "query", "parameter", "to", "make", "it", "additive", "like", "it", "be", "now", "NUMBER", "kind", "of", "against", "this", "we", "already", "have", "a", "load", "of", "timestamps", "and", "every", "lang", "has", "really", "really", "easy", "to", "use", "libs", "to", "do", "call", "NUMBER", "StartedAt", "call", "NUMBER", "CreatedAt", "NUMBER", "ui", "candy", "tooling", "makes", "more", "sense", "shouldn", "t", "bloat", "our", "api", "with", "every", "piece", "of", "info", "we", "think", "we", "want", "to", "see", "just", "return", "base", "data", "to", "chew", "on", "This", "change", "extend", "the", "JSON", "data", "returned", "by", "the", "stats", "API", "call", "to", "return", "a", "map", "of", "per", "function", "statistics", "keyed", "by", "the", "function", "s", "path", "NUMBER", "Before", "this", "change", "an", "example", "JSON", "data", "was", "Queue", "NUMBER", "Running", "NUMBER", "Complete", "NUMBER", "After", "this", "change", "an", "example", "JSON", "data", "be", "Queue", "NUMBER", "Running", "NUMBER", "Complete", "NUMBER", "FunctionStatsMap", "hello", "async", "NUMBER", "Queue", "NUMBER", "Running", "NUMBER", "Complete", "NUMBER", "I", "see", "the", "test", "fail", "with", "ERROR", "Repository", "not", "find", "NUMBER", "fatal", "Could", "not", "read", "from", "remote", "repository", "NUMBER", "I", "don", "t", "know", "why", "NUMBER", "this", "be", "my", "first", "PR", "on", "the", "fn", "project", "nigeldeakin", "push", "branch", "from", "your", "fork", "into", "a", "branch", "on", "this", "repo", "and", "PR", "that", "for", "CI", "to", "work", "cool", "code", "looks", "pretty", "good", "just", "needs", "gofmt", "run", "on", "it", "mostly", "and", "PR", "from", "in", "repo", "branch", "Since", "we", "want", "per", "project", "stats", "then", "it", "s", "more", "reasonable", "to", "put", "stats", "under", "v", "NUMBER", "apps", "v", "NUMBER", "apps", "app", "stats", "where", "you", "d", "get", "following", "response", "some", "random", "app", "path", "NUMBER", "Queue", "NUMBER", "Running", "NUMBER", "Complete", "NUMBER", "Thoughts", "treeder", "I", "m", "simply", "extending", "the", "exist", "stats", "API", "which", "be", "indeed", "in", "memory", "single", "server", "NUMBER", "This", "be", "intended", "to", "be", "quick", "eye", "candy", "for", "NUMBER", "Oct", "with", "as", "few", "moving", "parts", "as", "possible", "as", "directed", "at", "my", "last", "team", "meeting", "NUMBER", "The", "long", "term", "solution", "will", "probably", "be", "based", "on", "broadcasting", "tracing", "info", "and", "use", "something", "like", "prometheus", "or", "whatever", "ODX", "tool", "use", "to", "accumulate", "stats", "across", "multiple", "servers", "NUMBER", "denismakogon", "Yes", "that", "s", "a", "perfectly", "reasonable", "approach", "NUMBER", "The", "UI", "server", "would", "have", "to", "make", "one", "API", "call", "to", "list", "all", "the", "apps", "then", "a", "separate", "API", "call", "for", "each", "app", "NUMBER", "That", "would", "be", "more", "elegant", "when", "I", "go", "on", "to", "list", "per", "app", "stats", "NUMBER", "We", "could", "go", "even", "further", "and", "associate", "the", "stats", "with", "the", "individual", "function", "NUMBER", "That", "would", "require", "the", "UI", "server", "to", "have", "to", "make", "a", "separate", "API", "call", "for", "each", "function", "NUMBER", "nigeldeakin", "LINK", "fmt", "NUMBER", "sh", "I", "ve", "now", "created", "a", "new", "pull", "request", "LINK", "use", "a", "feature", "branch", "on", "this", "repo", "rather", "than", "a", "fork", "NUMBER", "That", "seems", "to", "allow", "the", "CircleCI", "test", "to", "run", "they", "pass", "NUMBER", "I", "will", "now", "close", "this", "PR", "NUMBER", "So", "when", "sending", "a", "request", "without", "content", "length", "specified", "causes", "server", "to", "fail", "on", "request", "error", "runtime", "error", "makeslice", "len", "out", "of", "range", "runtime", "debug", "NUMBER", "Stack", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "usr", "local", "go", "src", "runtime", "debug", "stack", "NUMBER", "go", "NUMBER", "NUMBER", "xbe", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "HandleErrorResponse", "NUMBER", "x", "NUMBER", "d", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "e", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "cbba", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "error_response", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "bf", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "handleErrorResponse", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "cbba", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "error_response", "NUMBER", "go", "NUMBER", "NUMBER", "xae", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "panicWrap", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "d", "panic", "NUMBER", "x", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "usr", "local", "go", "src", "runtime", "panic", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "serve", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "d", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "runner", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "handleRequest", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "runner", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "handleRunnerRequest", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "Server", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "handleRunnerRequest", "fm", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "c", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "panicWrap", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "c", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "traceWrap", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "c", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "NUMBER", "loggerWrap", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "api", "server", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Context", "NUMBER", "Next", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "c", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Engine", "NUMBER", "handleHTTPRequest", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "gin", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "NUMBER", "Engine", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "ac", "NUMBER", "e", "NUMBER", "NUMBER", "xc", "NUMBER", "Users", "denismakogon", "Documents", "oracle", "go", "src", "github", "NUMBER", "com", "fnproject", "fn", "vendor", "github", "NUMBER", "com", "gin", "gonic", "gin", "gin", "NUMBER", "go", "NUMBER", "NUMBER", "xcd", "net", "http", "NUMBER", "serverHandler", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "aea", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "ac", "NUMBER", "e", "NUMBER", "NUMBER", "xc", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "net", "http", "NUMBER", "conn", "NUMBER", "serve", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "e", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "f", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "d", "created", "by", "net", "http", "NUMBER", "Server", "NUMBER", "Serve", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "This", "happens", "on", "recent", "master", "NUMBER", "Maybe", "it", "s", "not", "merge", "yet", "yea", "fix", "this", "last", "week", "NUMBER", "on", "tip", "your", "line", "server", "runner", "NUMBER", "go", "NUMBER", "points", "to", "FireBeforeDispatch", "for", "me", "so", "update", "your", "branch", "NUMBER", "i", "see", "that", "we", "need", "to", "sanitize", "content", "length", "though", "if", "it", "s", "negative", "blech", "will", "fix", "this", "too", "NUMBER", "gonna", "close", "though", "NUMBER", "When", "logging", "incoming", "request", "headers", "in", "async", "hot", "function", "content", "length", "defined", "as", "Fn_header_content_length", "instead", "of", "Content", "Length", "NUMBER", "Moreover", "all", "HTTP", "NUMBER", "spec", "headers", "be", "prefixed", "with", "FN_", "Fn_header_accept", "Fn_header_content_type", "Fn_header_content_length", "NUMBER", "App", "config", "include", "into", "headers", "App", "info", "config", "pg_db", "emokognition", "pg_host", "NUMBER", "pg_port", "NUMBER", "pg_pswd", "postgres", "pg_user", "postgres", "name", "emokognition", "http", "headers", "logged", "inside", "hot", "func", "Pg_host", "NUMBER", "Pg_user", "Pg_db", "emokognition", "Pg_port", "NUMBER", "If", "this", "meant", "to", "be", "expected", "behaviour", "it", "doesn", "t", "look", "like", "documented", "NUMBER", "When", "run", "same", "hot", "function", "but", "sync", "everything", "works", "okay", "NUMBER", "I", "asked", "for", "opinions", "multiple", "times", "in", "NUMBER", "on", "this", "also", "you", "approved", "it", "It", "s", "a", "multi", "faceted", "because", "in", "the", "environment", "they", "have", "FN_HEADER_", "which", "leads", "to", "async", "get", "the", "same", "NUMBER", "async", "also", "doesn", "t", "add", "response", "headers", "NUMBER", "there", "be", "TODO", "for", "both", "of", "these", "NUMBER", "anyway", "seems", "like", "we", "have", "NUMBER", "votes", "to", "strip", "the", "prefix", "rdallman", "Tend", "to", "agree", "forgot", "about", "that", "my", "bad", "NUMBER", "But", "as", "far", "as", "i", "understood", "NUMBER", "was", "talking", "about", "HTTP", "headers", "NUMBER", "But", "why", "do", "app", "config", "gets", "injected", "into", "function", "as", "renamed", "name_of_config_attribute_A", "Name_of_config_attribute_a", "HTTP", "headers", "we", "could", "add", "a", "separate", "map", "but", "it", "seems", "pretty", "reasonable", "to", "me", "to", "strip", "FN_HEADER_", "and", "then", "we", "don", "t", "need", "to", "change", "the", "way", "we", "store", "load", "anything", "would", "have", "to", "be", "same", "data", "in", "NUMBER", "places", "basically", "already", "in", "NUMBER", "places", "with", "BaseEnv", "and", "EnvVars", "would", "be", "cool", "to", "reduce", "this", "one", "too", "NUMBER", "NUMBER", "discussion", "was", "trying", "to", "ameliorate", "the", "inconsistency", "between", "headers", "in", "env", "and", "http", "i", "NUMBER", "e", "NUMBER", "this", "inclusive", "NUMBER", "But", "why", "do", "app", "config", "gets", "injected", "into", "function", "as", "renamed", "name_of_config_attribute_A", "Name_of_config_attribute_a", "HTTP", "headers", "when", "you", "load", "anything", "into", "out", "of", "http", "NUMBER", "Header", "it", "will", "be", "transmuted", "into", "this", "form", "NUMBER", "we", "could", "write", "our", "own", "http", "dumper", "that", "writes", "out", "some", "form", "we", "want", "but", "idk", "NUMBER", "at", "least", "go", "handles", "this", "gracefully", "see", "LINK", "but", "i", "could", "see", "other", "langs", "not", "be", "so", "graceful", "i", "guess", "NUMBER", "maybe", "another", "thing", "to", "decide", "we", "need", "to", "lock", "in", "for", "compat", "for", "format", "shit", "like", "this", "Strong", "NUMBER", "for", "get", "rid", "of", "Fn_header_", "prefix", "NUMBER", "Recently", "you", "ve", "merge", "PR", "with", "Python", "NUMBER", "sample", "for", "hot", "function", "so", "it", "uses", "lib", "i", "ve", "made", "hotfn", "py", "LINK", "py", "that", "uses", "Content", "Length", "LINK", "py", "blob", "master", "hotfn", "http", "request", "NUMBER", "py", "L", "NUMBER", "to", "read", "data", "from", "request", "but", "i", "find", "myself", "with", "fail", "async", "hot", "function", "because", "request", "parser", "wasn", "t", "able", "to", "pull", "out", "request", "body", "because", "request", "doesn", "t", "contain", "regular", "HTTP", "headers", "NUMBER", "no", "longer", "the", "case", "closing", "At", "first", "it", "looked", "like", "it", "worked", "as", "expected", "but", "it", "appeared", "that", "FDK", "do", "all", "messy", "work", "for", "cleaning", "up", "headers", "NUMBER", "this", "still", "an", "issue", "not", "that", "I", "can", "easily", "find", "NUMBER", "I", "think", "I", "ll", "do", "a", "full", "sweep", "of", "the", "docs", "in", "the", "next", "week", "stand", "by", "NUMBER", "now", "it", "s", "part", "of", "the", "cli", "itself", "help", "on", "any", "command", "LINK", "L", "NUMBER", "and", "more", "holistic", "experience", "in", "various", "get", "start", "NUMBER", "so", "gonna", "close", "as", "discussed", "seems", "like", "this", "be", "a", "user", "preference", "NUMBER", "seems", "like", "we", "could", "make", "an", "option", "e", "NUMBER", "g", "NUMBER", "stream", "true", "to", "have", "current", "behavior", "and", "then", "go", "back", "to", "piling", "everything", "into", "a", "buffer", "before", "sending", "it", "as", "it", "was", "NUMBER", "specifically", "this", "be", "for", "output", "we", "can", "still", "leave", "the", "input", "path", "as", "it", "be", "NUMBER", "since", "call", "invocation", "be", "a", "bit", "of", "an", "odd", "ball", "endpoint", "not", "sure", "that", "it", "would", "be", "great", "to", "add", "a", "stream", "NUMBER", "since", "this", "will", "get", "push", "down", "into", "user", "s", "routes", "seems", "like", "it", "would", "be", "better", "to", "configure", "on", "the", "route", "and", "then", "every", "call", "would", "get", "this", "behavior", "NUMBER", "plumbing", "for", "this", "should", "probably", "be", "do", "inside", "of", "Dispatch", "but", "it", "would", "be", "nice", "to", "leave", "the", "Dispatch", "interface", "to", "only", "have", "input", "output", "so", "not", "sure", "how", "to", "plumb", "this", "config", "val", "exactly", "maybe", "NUMBER", "different", "implementers", "of", "HTTPDispatch", "one", "that", "buffers", "then", "copies", "to", "ResponseWriter", "another", "that", "has", "current", "behavior", "then", "this", "kind", "of", "half", "baked", "reply", "isn", "t", "possible", "and", "there", "s", "only", "a", "race", "between", "the", "container", "exit", "or", "a", "full", "reply", "be", "write", "out", "and", "we", "don", "t", "necessarily", "care", "who", "wins", "so", "this", "be", "fine", "NUMBER", "addition", "there", "be", "a", "comment", "in", "server", "runner", "NUMBER", "go", "about", "this", "but", "we", "need", "to", "snoop", "the", "response", "writer", "and", "if", "bytes", "have", "be", "write", "then", "not", "poop", "our", "json", "into", "the", "response", "just", "saw", "this", "in", "resp", "NUMBER", "yea", "agree", "that", "would", "be", "separate", "from", "NUMBER", "and", "it", "would", "be", "nice", "for", "that", "to", "be", "configurable", "as", "well", "NUMBER", "plumbing", "Still", "see", "this", "pretty", "ugly", "and", "unusable", "when", "a", "function", "error", "halfway", "through", "NUMBER", "screen", "shot", "NUMBER", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "NUMBER", "pm", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "d", "NUMBER", "a", "f", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "c", "NUMBER", "NUMBER", "e", "NUMBER", "e", "NUMBER", "e", "NUMBER", "a", "NUMBER", "png", "that", "one", "specifically", "i", "think", "the", "fix", "be", "separate", "from", "buffering", "we", "need", "to", "watch", "to", "see", "if", "bytes", "have", "be", "write", "and", "not", "write", "the", "error", "if", "they", "have", "NUMBER", "even", "if", "we", "have", "buffering", "we", "need", "that", "NUMBER", "To", "be", "clear", "here", "the", "problem", "be", "that", "a", "fail", "function", "returns", "a", "NUMBER", "status", "and", "a", "garbage", "response", "NUMBER", "If", "a", "function", "fail", "at", "any", "point", "it", "should", "be", "a", "NUMBER", "and", "return", "a", "JSON", "error", "response", "NUMBER", "Aside", "from", "the", "NUMBER", "NUMBER", "issue", "above", "I", "ll", "probably", "end", "up", "a", "add", "a", "configurable", "system", "wide", "setting", "eg", "NUMBER", "buffer", "size", "of", "NUMBER", "NUMBER", "MB", "along", "with", "stream", "of", "on", "option", "per", "route", "NUMBER", "we", "re", "going", "to", "want", "to", "do", "this", "in", "our", "service", "version", "of", "this", "thing", "but", "add", "this", "here", "so", "that", "it", "s", "usable", "by", "everyone", "NUMBER", "just", "an", "option", "can", "add", "it", "to", "server", "configuration", "but", "response", "be", "nicely", "formatted", "etc", "NUMBER", "close", "NUMBER", "bump", "treeder", "denismakogon", "easy", "one", "I", "think", "the", "issue", "be", "that", "for", "open", "source", "I", "don", "t", "really", "think", "we", "should", "impose", "some", "arbitrary", "limit", "NUMBER", "for", "our", "service", "yea", "absolutely", "but", "we", "can", "provide", "this", "option", "from", "the", "service", "code", "NUMBER", "i", "can", "add", "to", "ops", "doc", "for", "how", "to", "configure", "but", "it", "s", "compile", "time", "configuration", "and", "this", "patch", "imposes", "no", "limit", "on", "request", "size", "to", "fn", "itself", "it", "s", "relying", "on", "add", "this", "to", "our", "service", "code", "NUMBER", "carimura", "yeah", "that", "makes", "sense", "NUMBER", "NUMBER", "on", "Fn", "even", "though", "I", "previously", "voted", "for", "fn", "NUMBER", "I", "agree", "carimura", "fn", "should", "be", "cli", "and", "it", "should", "be", "Fn", "when", "talked", "about", "in", "blogs", "etc", "NUMBER", "just", "like", "Docker", "docker", "Go", "go", "etc", "NUMBER", "For", "context", "We", "have", "a", "demo", "that", "puts", "a", "REST", "Jersey", "Java", "Web", "container", "inside", "a", "function", "NUMBER", "One", "issue", "we", "had", "was", "that", "you", "can", "t", "bind", "a", "whole", "sub", "path", "to", "a", "function", "route", "for", "demo", "we", "had", "to", "bind", "every", "possible", "route", "to", "the", "same", "image", "which", "worked", "but", "means", "path", "variables", "be", "not", "an", "option", "NUMBER", "I", "know", "there", "use", "to", "be", "path", "variable", "support", "but", "I", "don", "t", "see", "a", "way", "to", "bring", "it", "back", "without", "make", "the", "database", "layer", "substantially", "more", "complex", "NUMBER", "I", "had", "a", "thought", "for", "how", "do", "this", "with", "less", "database", "impact", "outlined", "here", "NUMBER", "Allow", "route", "paths", "of", "the", "form", "path", "meaning", "any", "route", "prefixed", "by", "path", "This", "do", "an", "IN", "query", "of", "order", "of", "the", "number", "of", "components", "in", "the", "path", "see", "here", "assuming", "path", "be", "indexed", "on", "route", "this", "should", "be", "fast", "So", "app", "path", "to", "fn", "be", "search", "as", "SELECT", "NUMBER", "FROM", "routes", "where", "app", "WHERE", "app_name", "app", "AND", "path", "IN", "path", "to", "fn", "path", "path", "to", "path", "to", "fn", "ORDER", "BY", "LENGTH", "path", "DESC", "LIMIT", "NUMBER", "Main", "change", "Add", "MatchRoute", "to", "datastore", "Give", "me", "the", "right", "route", "for", "this", "URL", "path", "vs", "GetRoute", "which", "be", "always", "based", "on", "the", "unique", "route", "Allow", "Routes", "paths", "to", "contain", "a", "trail", "not", "previously", "validated", "out", "but", "now", "meaningful", "that", "indicates", "that", "the", "route", "will", "match", "any", "This", "also", "remove", "the", "old", "Param", "code", "which", "to", "my", "knowledge", "did", "not", "work", "NUMBER", "MatchRoute", "pick", "the", "longest", "route", "that", "matches", "a", "subpath", "of", "the", "incoming", "route", "after", "caching", "routes", "be", "always", "resolve", "deterministically", "but", "it", "s", "possible", "to", "define", "one", "route", "that", "takes", "precedence", "over", "others", "figure", "that", "can", "be", "a", "user", "choice", "though", "NUMBER", "I", "m", "not", "sure", "what", "the", "best", "option", "be", "for", "exact", "matches", "suppose", "you", "have", "route", "a", "path", "to", "fn", "and", "route", "b", "path", "to", "fn", "currently", "a", "request", "path", "to", "fn", "will", "match", "b", "but", "a", "seems", "more", "intuitive", "NUMBER", "I", "m", "not", "sure", "about", "introduce", "the", "new", "syntax", "for", "routes", "NUMBER", "An", "alternative", "approach", "with", "more", "change", "and", "a", "client", "change", "was", "having", "a", "wildcard", "flag", "or", "similar", "on", "the", "function", "that", "that", "has", "the", "same", "effect", "of", "add", "a", "on", "to", "the", "path", "NUMBER", "Anyway", "would", "appreciate", "thoughts", "if", "anybody", "has", "any", "time", "would", "be", "good", "for", "us", "but", "be", "not", "critical", "NUMBER", "It", "be", "relate", "to", "NUMBER", "but", "less", "complex", "around", "the", "caching", "side", "caching", "works", "much", "the", "same", "as", "before", "no", "need", "for", "explicit", "cache", "invalidation", "I", "figure", "introduce", "a", "lot", "of", "incidental", "complexity", "to", "the", "Cache", "Data", "layer", "be", "a", "bad", "idea", "right", "now", "NUMBER", "this", "be", "an", "interesting", "idea", "NUMBER", "the", "sql", "trick", "be", "clever", "and", "seems", "almost", "correct", "functionality", "wise", "NUMBER", "I", "m", "not", "sure", "what", "the", "best", "option", "be", "for", "exact", "matches", "suppose", "you", "have", "route", "a", "path", "to", "fn", "and", "route", "b", "path", "to", "fn", "currently", "a", "request", "path", "to", "fn", "will", "match", "b", "but", "a", "seems", "more", "intuitive", "seems", "like", "we", "need", "to", "solve", "this", "as", "well", "as", "potentially", "app", "path", "to", "f", "app", "path", "to", "be", "deterministic", "even", "i", "NUMBER", "e", "NUMBER", "lexicographically", "sorted", "or", "such", "in", "any", "case", "not", "sure", "it", "s", "reliable", "single", "char", "route", "paths", "to", "be", "clear", "NUMBER", "the", "previous", "case", "i", "m", "not", "sure", "to", "handle", "if", "they", "actually", "have", "a", "wildcard", "route", "defined", "at", "path", "to", "fn", "that", "be", "separate", "from", "path", "to", "fn", "i", "would", "think", "intuitively", "they", "should", "be", "separate", "and", "a", "should", "still", "match", "not", "sure", "we", "have", "this", "defined", "atm", "even", "NUMBER", "be", "it", "perhaps", "the", "case", "that", "we", "should", "return", "the", "first", "two", "matches", "and", "do", "further", "matching", "with", "our", "own", "logic", "based", "on", "best", "fit", "in", "our", "eyes", "instead", "of", "simply", "relying", "on", "the", "longest", "path", "to", "be", "the", "best", "match", "i", "m", "not", "sure", "if", "there", "be", "any", "cases", "where", "the", "best", "match", "may", "be", "outside", "the", "top", "two", "matches", "need", "to", "think", "on", "this", "more", "but", "it", "doesn", "t", "seem", "like", "it", "would", "be", "the", "worst", "thing", "to", "eat", "NUMBER", "vs", "NUMBER", "i", "could", "see", "returning", "them", "all", "becoming", "problematic", "NUMBER", "biggest", "concern", "i", "have", "as", "well", "be", "around", "caching", "this", "not", "necessarily", "that", "it", "needs", "to", "be", "do", "here", "but", "at", "least", "some", "ideas", "around", "add", "it", "nobody", "be", "doing", "any", "real", "volume", "against", "this", "service", "for", "now", "NUMBER", "It", "seems", "like", "if", "we", "can", "coordinate", "with", "similar", "to", "this", "functionality", "we", "may", "be", "able", "to", "have", "something", "NUMBER", "if", "we", "load", "all", "routes", "at", "the", "longest", "slash", "we", "may", "be", "able", "to", "have", "effective", "caching", "but", "we", "risk", "blowing", "out", "the", "cache", "size", "NUMBER", "what", "i", "mean", "by", "this", "be", "for", "example", "routes", "a", "app", "path", "to", "b", "app", "path", "to", "john", "c", "app", "path", "to", "bobby", "d", "app", "foo", "if", "a", "request", "for", "app", "path", "to", "abby", "comes", "in", "we", "could", "load", "a", "b", "and", "c", "into", "the", "cache", "this", "particular", "route", "would", "match", "a", "NUMBER", "a", "subsequent", "request", "for", "app", "path", "to", "john", "comes", "in", "we", "want", "to", "match", "b", "but", "if", "we", "don", "t", "load", "b", "or", "c", "into", "the", "cache", "we", "might", "naively", "match", "a", "since", "it", "s", "in", "the", "cache", "and", "do", "match", "even", "though", "it", "be", "not", "the", "ideal", "match", "NUMBER", "current", "behavior", "i", "believe", "would", "be", "that", "app", "path", "to", "abby", "be", "NUMBER", "cache", "entry", "and", "NUMBER", "db", "lookup", "and", "then", "app", "path", "to", "john", "be", "NUMBER", "cache", "entry", "and", "NUMBER", "db", "lookup", "i", "NUMBER", "e", "NUMBER", "we", "aren", "t", "caching", "app", "path", "to", "NUMBER", "I", "ve", "read", "NUMBER", "and", "we", "would", "obviously", "need", "something", "like", "it", "a", "tree", "based", "cache", "lookup", "but", "need", "to", "think", "about", "coordinating", "with", "the", "db", "as", "well", "relevant", "here", "NUMBER", "anyway", "maybe", "this", "sparks", "some", "ideas", "NUMBER", "thanks", "for", "the", "pr", "CLA", "Bot", "Thank", "you", "for", "your", "submission", "It", "appears", "that", "the", "following", "authors", "have", "not", "sign", "our", "Contributor", "License", "Agreement", "Owen", "Cliffe", "LINK", "Please", "do", "so", "now", "by", "visiting", "LINK", "NUMBER", "html", "LINK", "NUMBER", "html", "Once", "complete", "let", "us", "know", "in", "our", "community", "Slack", "LINK", "and", "we", "ll", "send", "you", "an", "Fn", "T", "shirt", "NUMBER", "We", "be", "work", "on", "modernizing", "the", "CLA", "process", "into", "a", "digital", "signature", "but", "it", "isn", "t", "quite", "ready", "yet", "NUMBER", "Thank", "you", "for", "be", "a", "part", "of", "the", "Fn", "Community", "CLA", "Bot", "All", "committers", "have", "sign", "the", "CLA", "NUMBER", "should", "we", "move", "this", "to", "an", "issue", "that", "links", "to", "this", "the", "code", "be", "out", "of", "date", "I", "think", "there", "s", "still", "discussion", "desire", "for", "this", "as", "a", "feature", "NUMBER", "close", "NUMBER", "Here", "s", "what", "I", "had", "to", "do", "to", "get", "CORS", "work", "with", "my", "java", "function", "NUMBER", "First", "the", "func", "NUMBER", "yaml", "NUMBER", "yaml", "name", "alert", "manager", "version", "NUMBER", "runtime", "java", "cmd", "com", "NUMBER", "oracle", "NUMBER", "ate", "NUMBER", "demo", "handleRequest", "timeout", "NUMBER", "path", "alert", "manager", "headers", "Access", "Control", "Allow", "Origin", "Access", "Control", "Allow", "Methods", "POST", "GET", "OPTIONS", "Access", "Control", "Allow", "Headers", "Authorization", "Origin", "X", "Requested", "With", "Content", "Type", "Accept", "idle_timeout", "NUMBER", "Then", "the", "function", "java", "public", "String", "handleRequest", "com", "NUMBER", "fnproject", "NUMBER", "fn", "NUMBER", "api", "NUMBER", "InputEvent", "ie", "byte", "bytes", "throw", "Exception", "if", "ie", "NUMBER", "getMethod", "NUMBER", "equals", "OPTIONS", "System", "NUMBER", "err", "NUMBER", "println", "debug", "edburns", "Recevied", "OPTIONS", "request", "returning", "empty", "json", "NUMBER", "return", "try", "ObjectMapper", "mapper", "new", "ObjectMapper", "JsonNode", "root", "mapper", "NUMBER", "readTree", "bytes", "JsonNode", "matchRegex", "root", "NUMBER", "get", "matchRegex", "if", "null", "matchRegex", "System", "NUMBER", "err", "NUMBER", "println", "putting", "matchRegex", "matchRegex", "NUMBER", "textValue", "alertCloudMap", "NUMBER", "put", "matchRegex", "matchRegex", "NUMBER", "textValue", "else", "lets", "delete", "it", "System", "NUMBER", "err", "NUMBER", "println", "deleting", "matchRegex", "alertCloudMap", "NUMBER", "remove", "matchRegex", "catch", "Exception", "e", "System", "NUMBER", "err", "NUMBER", "println", "Exception", "handlingRequest", "e", "throw", "e", "return", "Note", "that", "I", "find", "that", "I", "needed", "to", "not", "use", "the", "build", "in", "JSON", "coercion", "as", "it", "would", "throw", "an", "exception", "on", "the", "empty", "JSON", "body", "in", "the", "case", "of", "the", "browser", "sending", "the", "OPTIONS", "request", "NUMBER", "Ideally", "I", "d", "like", "to", "not", "have", "to", "send", "the", "CORS", "headers", "every", "time", "just", "in", "the", "OPTIONS", "case", "but", "this", "works", "for", "now", "NUMBER", "ideally", "you", "would", "want", "to", "echo", "back", "the", "whitelisted", "set", "of", "domains", "for", "CORS", "NUMBER", "returning", "a", "prevents", "you", "from", "use", "authorization", "in", "many", "browsers", "NUMBER", "FROM", "LINK", "US", "docs", "Web", "HTTP", "Access_control_CORS", "Credentialed", "request", "and", "wildcards", "When", "responding", "to", "a", "credentialed", "request", "the", "server", "must", "specify", "an", "origin", "in", "the", "value", "of", "the", "Access", "Control", "Allow", "Origin", "header", "instead", "of", "specify", "the", "wildcard", "NUMBER", "Because", "the", "request", "headers", "in", "the", "above", "example", "include", "a", "Cookie", "header", "the", "request", "would", "fail", "if", "the", "value", "of", "the", "Access", "Control", "Allow", "Origin", "header", "were", "NUMBER", "But", "it", "do", "not", "fail", "Because", "the", "value", "of", "the", "Access", "Control", "Allow", "Origin", "header", "be", "LINK", "an", "actual", "origin", "rather", "than", "the", "wildcard", "the", "credential", "cognizant", "content", "be", "returned", "to", "the", "invoking", "web", "content", "NUMBER", "Note", "that", "the", "Set", "Cookie", "response", "header", "in", "the", "example", "above", "also", "sets", "a", "further", "cookie", "NUMBER", "In", "case", "of", "failure", "an", "exception", "depending", "on", "the", "API", "use", "be", "raise", "NUMBER", "be", "this", "something", "we", "could", "configure", "in", "the", "YAML", "for", "each", "function", "would", "it", "just", "be", "an", "array", "of", "allow", "options", "defaulting", "to", "NUMBER", "Repoening", "this", "as", "the", "change", "above", "doesn", "t", "impact", "routes", "only", "the", "API", "I", "think", "we", "need", "to", "deal", "with", "this", "more", "elegantly", "for", "function", "calls", "When", "I", "try", "to", "add", "headers", "to", "my", "func", "NUMBER", "yml", "file", "they", "be", "stripped", "automatically", "every", "time", "I", "do", "fn", "deploy", "in", "fact", "no", "method", "that", "I", "m", "trying", "will", "add", "an", "Access", "Control", "Allow", "Origin", "header", "to", "the", "response", "NUMBER", "I", "ve", "tried", "FN_API_CORS_ORIGINS", "I", "ve", "even", "tried", "setting", "the", "headers", "directly", "on", "the", "OutputEvent", "with", "Headers", "NUMBER", "fromMap", "in", "the", "function", "call", "itself", "NUMBER", "I", "simply", "can", "not", "get", "a", "function", "call", "to", "set", "a", "response", "header", "NUMBER", "Trying", "on", "fn", "version", "NUMBER", "Edit", "just", "to", "add", "I", "even", "see", "this", "in", "the", "startup", "output", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "CORS", "enable", "for", "domains", "But", "no", "header", "be", "ever", "set", "on", "any", "response", "NUMBER", "I", "ve", "also", "tried", "everything", "cfsilence", "tried", "also", "not", "get", "the", "access", "control", "headers", "through", "NUMBER", "My", "expectation", "was", "that", "OutputEvent", "NUMBER", "fromBytes", "response", "NUMBER", "bytes", "status", "contentType", "Headers", "NUMBER", "fromMap", "Access", "Control", "Allow", "Origin", "x", "foo", "bar", "would", "do", "the", "trick", "but", "somehow", "the", "headers", "get", "lost", "NUMBER", "How", "be", "one", "supposed", "to", "use", "a", "customer", "headers", "b", "access", "control", "headers", "rdallman", "Tested", "with", "a", "http", "trigger", "and", "the", "java", "fdk", "NUMBER", "Ah", "if", "your", "use", "triggers", "you", "need", "to", "set", "the", "HTTP", "headers", "slightly", "differently", "now", "pull", "in", "a", "HTTPContext", "as", "a", "parameter", "and", "set", "CORS", "the", "headers", "there", "I", "think", "zootalures", "was", "referring", "to", "com", "NUMBER", "fnproject", "NUMBER", "fn", "NUMBER", "api", "NUMBER", "httpgateway", "NUMBER", "HTTPGatewayContext", "NUMBER", "Documentation", "LINK", "java", "blob", "master", "docs", "HTTPGatewayFunctions", "NUMBER", "md", "Yes", "I", "can", "confirm", "update", "the", "headers", "in", "HTTPGatewayContext", "works", "NUMBER", "I", "ll", "add", "my", "two", "cents", "as", "I", "was", "following", "the", "previous", "thread", "I", "think", "FN_REGISTRY", "be", "fine", "as", "in", "cases", "where", "use", "an", "image", "from", "your", "own", "private", "registry", "you", "ll", "need", "the", "FQDN", "as", "treeder", "stated", "NUMBER", "Although", "I", "don", "t", "need", "we", "should", "require", "an", "FQDN", "but", "I", "don", "t", "think", "that", "was", "the", "intent", "either", "NUMBER", "I", "be", "probably", "reiterating", "what", "has", "already", "be", "said", "but", "I", "see", "this", "work", "two", "ways", "NUMBER", "registry", "NUMBER", "mydomain", "NUMBER", "com", "username", "image", "NUMBER", "username", "image", "defaults", "to", "Docker", "Hub", "Anyway", "I", "think", "as", "long", "as", "it", "s", "documented", "clearly", "then", "it", "should", "be", "a", "non", "issue", "for", "people", "to", "grok", "NUMBER", "Secondly", "regard", "name", "I", "agree", "it", "s", "confusing", "NUMBER", "I", "d", "vote", "for", "calling", "it", "image", "instead", "if", "indeed", "that", "s", "all", "it", "be", "NUMBER", "But", "thinking", "a", "bit", "about", "the", "UX", "we", "d", "have", "duplicate", "data", "where", "FN_REGISTRY", "bobloblaw", "hello", "and", "image", "bobloblaw", "hello", "NUMBER", "That", "doesn", "t", "seem", "very", "elegant", "NUMBER", "But", "perhaps", "I", "m", "miss", "a", "key", "piece", "of", "info", "here", "NUMBER", "maybe", "name", "has", "a", "place", "wrt", "a", "function", "i", "suppose", "but", "it", "really", "seems", "superfluous", "given", "the", "context", "of", "what", "we", "have", "already", "NUMBER", "a", "path", "seems", "to", "identify", "a", "function", "adequately", "and", "be", "how", "it", "be", "currently", "referenced", "NUMBER", "interestingly", "a", "route", "currently", "be", "not", "identified", "by", "its", "name", "and", "name", "maps", "to", "the", "image", "field", "NUMBER", "this", "seems", "strange", "NUMBER", "i", "think", "we", "should", "just", "keep", "path", "and", "change", "name", "to", "image", "and", "drop", "name", "for", "provide", "reasons", "NUMBER", "this", "be", "specifically", "wrt", "the", "cli", "args", "NUMBER", "in", "addition", "since", "we", "be", "expecting", "people", "to", "use", "fn", "deploy", "from", "inside", "of", "a", "place", "where", "the", "_code_", "for", "a", "function", "lives", "alongside", "a", "func", "NUMBER", "yaml", "file", "to", "upload", "to", "a", "registry", "and", "to", "fn", "it", "seems", "reasonable", "to", "drop", "image", "entirely", "from", "func", "NUMBER", "yaml", "and", "force", "image", "to", "be", "supplied", "in", "fn", "deploy", "NUMBER", "this", "would", "also", "mean", "that", "fn", "init", "no", "longer", "takes", "image", "NUMBER", "i", "don", "t", "think", "this", "necessarily", "implies", "get", "rid", "of", "FN_REGISTRY", "as", "i", "think", "it", "s", "just", "a", "client", "side", "convenience", "but", "i", "think", "that", "it", "could", "be", "in", "addition", "to", "other", "potentially", "more", "sane", "methods", "NUMBER", "what", "this", "possibly", "looks", "like", "fn", "deploy", "image", "rdallman", "hello", "NUMBER", "fn", "deploy", "image", "LINK", "FN_REGISTRY", "rdallman", "fn", "deploy", "image", "hello", "FN_REGISTRY", "LINK", "fn", "deploy", "image", "hello", "to", "go", "into", "detail", "essentially", "if", "a", "fully", "qualified", "image", "be", "presented", "we", "can", "ignore", "FN_REGISTRY", "NUMBER", "the", "only", "case", "i", "think", "of", "where", "this", "be", "hairy", "be", "for", "images", "like", "ubuntu", "that", "can", "be", "naked", "even", "though", "they", "be", "at", "some", "point", "library", "ubuntu", "NUMBER", "imo", "due", "to", "the", "hairiness", "i", "think", "it", "would", "be", "ideal", "to", "just", "let", "all", "the", "registry", "business", "get", "do", "on", "the", "image", "level", "NUMBER", "i", "can", "think", "of", "cases", "where", "users", "may", "inadvertently", "overwrite", "the", "docker", "hub", "user", "for", "certain", "routes", "if", "we", "don", "t", "force", "them", "to", "explicitly", "supply", "it", "i", "NUMBER", "e", "NUMBER", "FN_REGISTRY", "NUMBER", "but", "to", "me", "the", "good", "argument", "here", "be", "this", "users", "be", "calling", "fn", "deploy", "in", "a", "directory", "where", "the", "code", "exists", "usually", "NUMBER", "because", "of", "this", "can", "be", "mapped", "to", "_any_", "image", "that", "user", "has", "push", "access", "to", "as", "configured", "locally", "NUMBER", "thus", "image", "be", "not", "required", "to", "know", "a", "priori", "in", "order", "to", "build", "a", "function", "the", "matter", "of", "build", "to", "the", "correct", "repo", "in", "docker", "hub", "be", "up", "to", "users", "to", "figure", "out", "amongst", "themselves", "NUMBER", "basically", "separating", "what", "be", "needed", "locally", "to", "_build_", "a", "function", "and", "where", "exactly", "that", "be", "stored", "NUMBER", "a", "corollary", "to", "this", "be", "remove", "path", "from", "func", "NUMBER", "yaml", "for", "the", "same", "reason", "but", "let", "s", "not", "go", "there", "just", "yet", "NUMBER", "on", "theme", "A", "horse", "a", "horse", "my", "kingdom", "for", "a", "horse", "EDIT", "FIXED", "fn", "init", "grew", "an", "explicit", "name", "flag", "NUMBER", "Use", "case", "here", "be", "that", "we", "have", "an", "integration", "test", "that", "stumbled", "over", "this", "NUMBER", "We", "basically", "run", "an", "fn", "init", "for", "the", "Java", "runtime", "then", "a", "build", "and", "test", "the", "result", "against", "a", "local", "function", "server", "NUMBER", "That", "seems", "to", "me", "like", "it", "d", "mimic", "a", "fairly", "common", "behaviour", "NUMBER", "What", "happens", "at", "the", "moment", "be", "that", "we", "do", "fn", "init", "runtime", "java", "app", "test", "NUMBER", "in", "this", "case", "and", "we", "see", "the", "app", "part", "elided", "from", "the", "resulting", "func", "NUMBER", "yaml", "NUMBER", "name", "test", "NUMBER", "NUMBER", "At", "that", "point", "fn", "build", "complains", "because", "there", "s", "no", "username", "which", "I", "supplied", "I", "d", "very", "much", "like", "this", "kind", "of", "thing", "to", "just", "work", "in", "a", "local", "environment", "NUMBER", "Suggestions", "appreciated", "NUMBER", "Mine", "be", "I", "m", "okay", "with", "this", "as", "long", "as", "fn", "init", "doesn", "t", "throw", "away", "the", "username", "if", "I", "supply", "it", "because", "currently", "if", "I", "edit", "the", "func", "NUMBER", "yaml", "and", "put", "the", "username", "back", "fn", "build", "will", "work", "properly", "NUMBER", "Turns", "out", "fn", "init", "NUMBER", "name", "app", "test", "NUMBER", "works", "NUMBER", "they", "re", "starting", "to", "notice", "LINK", "Can", "we", "close", "this", "this", "still", "an", "issue", "idk", "NUMBER", "seems", "like", "we", "re", "keep", "fn", "init", "clean", "so", "in", "that", "case", "better", "to", "keep", "out", "NUMBER", "can", "close", "NUMBER", "this", "add", "FN_", "in", "front", "of", "env", "vars", "that", "we", "be", "injecting", "into", "calls", "for", "namespacing", "reasons", "NUMBER", "this", "will", "break", "code", "relying", "on", "the", "current", "variables", "but", "if", "we", "want", "to", "do", "this", "the", "chance", "be", "now", "really", "NUMBER", "alternatively", "we", "could", "maintain", "both", "the", "old", "and", "new", "for", "a", "short", "period", "of", "time", "to", "ease", "the", "adjustment", "speak", "now", "NUMBER", "NUMBER", "update", "the", "docs", "as", "well", "NUMBER", "this", "also", "add", "test", "for", "the", "notoriously", "finicky", "configuration", "of", "the", "env", "vars", "and", "headers", "when", "setting", "up", "a", "call", "NUMBER", "this", "won", "t", "test", "the", "container", "request", "for", "the", "call", "be", "actually", "receiving", "them", "but", "it", "s", "a", "decent", "start", "and", "will", "yell", "loudly", "enough", "upon", "format", "breakage", "NUMBER", "add", "back", "FXLB_WAIT", "to", "a", "couple", "places", "so", "the", "lb", "can", "ride", "again", "one", "thing", "for", "feedback", "headers", "be", "a", "bit", "confusing", "at", "the", "moment", "not", "from", "this", "change", "but", "that", "behavior", "be", "keep", "here", "for", "now", "we", "ve", "a", "chance", "to", "fix", "them", "NUMBER", "currently", "headers", "in", "the", "request", "__are", "not__", "prefixed", "with", "FN_HEADER_", "i", "NUMBER", "e", "NUMBER", "hot", "sync", "container", "will", "receive", "Content", "Length", "in", "the", "http", "request", "headers", "yet", "a", "cold", "container", "from", "the", "same", "request", "would", "receive", "FN_HEADER_Content", "Length", "in", "its", "environment", "NUMBER", "This", "be", "additionally", "confusing", "because", "if", "this", "function", "were", "hot", "async", "it", "would", "receive", "FN_HEADER_Content", "Length", "in", "the", "headers", "where", "just", "change", "it", "to", "sync", "goes", "back", "to", "Content", "Length", "NUMBER", "If", "that", "was", "confusing", "then", "point", "made", "I", "propose", "to", "remove", "the", "FN_HEADER_", "prefix", "for", "request", "headers", "in", "the", "environment", "so", "that", "the", "request", "headers", "and", "env", "will", "match", "as", "request", "headers", "already", "be", "of", "this", "format", "not", "prefixed", "NUMBER", "please", "lmk", "thoughts", "here", "Would", "be", "fine", "with", "going", "back", "to", "the", "plain", "vars", "too", "then", "this", "patch", "will", "mostly", "just", "be", "add", "test", "and", "change", "FN_FORMAT", "to", "FORMAT", "NUMBER", "obviously", "from", "the", "examples", "it", "s", "a", "bit", "ingrained", "now", "NUMBER", "anyway", "entirely", "up", "to", "y", "all", "NUMBER", "close", "NUMBER", "treeder", "denismakogon", "zootalures", "mjg", "NUMBER", "anybody", "else", "would", "appreciate", "thoughts", "review", "here", "Looking", "at", "this", "reminded", "me", "that", "it", "might", "be", "useful", "esp", "NUMBER", "for", "wrappers", "for", "function", "to", "know", "if", "they", "be", "run", "sync", "or", "a", "sync", "but", "can", "raise", "that", "later", "NUMBER", "i", "can", "do", "that", "here", "NUMBER", "FN_TYPE", "async", "Not", "sure", "about", "prefixing", "or", "not", "in", "headers", "but", "at", "the", "very", "least", "should", "be", "consistent", "NUMBER", "atm", "it", "s", "not", "need", "votes", "either", "way", "NUMBER", "i", "ve", "cast", "mine", "in", "the", "parent", "comment", "NUMBER", "zootalures", "treeder", "one", "additional", "point", "of", "pedantry", "be", "the", "casing", "and", "underscores", "dashes", "be", "inconsistent", "between", "headers", "and", "env", "vars", "since", "they", "have", "different", "idioms", "NUMBER", "i", "m", "not", "sure", "if", "this", "really", "shakes", "anyone", "to", "the", "core", "but", "to", "me", "it", "at", "least", "looks", "uh", "unclean", "NUMBER", "update", "per", "comments", "Looks", "good", "Just", "one", "one", "small", "thing", "for", "Hot", "If", "a", "client", "pushes", "in", "a", "clashing", "Fn_header", "the", "function", "still", "gets", "both", "values", "which", "I", "think", "be", "ambiguous", "see", "fn_route", "below", "NUMBER", "Should", "those", "be", "set", "with", "req", "NUMBER", "Header", "NUMBER", "Set", "NUMBER", "rather", "than", "NUMBER", "Add", "NUMBER", "Hot", "curl", "data", "message", "hello", "HContent", "type", "application", "json", "Huser", "header", "foo", "H", "Fn_ROUTE", "fooo", "LINK", "Request", "foo", "NUMBER", "Req", "POST", "hello", "Headers", "key", "Fn_method", "val", "POST", "key", "Fn_route", "val", "fooo", "test", "key", "User", "Agent", "val", "curl", "NUMBER", "key", "Accept", "val", "key", "Fn_call_id", "val", "NUMBER", "BSGBVYQG", "NUMBER", "WGM", "NUMBER", "key", "Fn_request_url", "val", "LINK", "key", "Content", "Type", "val", "application", "json", "key", "Fn_format", "val", "http", "key", "Fn_type", "val", "sync", "key", "Content", "Length", "val", "NUMBER", "key", "Fn_app_name", "val", "test", "key", "Fn_memory", "val", "NUMBER", "key", "User", "Header", "val", "foo", "Env", "PATH", "usr", "local", "sbin", "usr", "local", "bin", "usr", "sbin", "usr", "bin", "sbin", "bin", "HOSTNAME", "OCLIFFE", "mac", "FN_MEMORY", "NUMBER", "FN_TYPE", "sync", "FN_FORMAT", "http", "FN_APP_NAME", "test", "FN_ROUTE", "test", "HTTP_PROXY", "LINK", "proxy", "NUMBER", "uk", "NUMBER", "oracle", "NUMBER", "com", "NUMBER", "http_proxy", "LINK", "proxy", "NUMBER", "uk", "NUMBER", "oracle", "NUMBER", "com", "NUMBER", "HTTPS_PROXY", "LINK", "proxy", "NUMBER", "uk", "NUMBER", "oracle", "NUMBER", "com", "NUMBER", "https_proxy", "LINK", "proxy", "NUMBER", "uk", "NUMBER", "oracle", "NUMBER", "com", "NUMBER", "no_proxy", "NUMBER", "NUMBER", "grungy", "NUMBER", "us", "localhost", "NUMBER", "oraclecorp", "NUMBER", "com", "idoru", "NUMBER", "docker", "NUMBER", "oraclecorp", "NUMBER", "com", "hipchat", "NUMBER", "aka", "NUMBER", "lgl", "NUMBER", "grungy", "NUMBER", "us", "NUMBER", "aka", "NUMBER", "lgl", "NUMBER", "grungy", "NUMBER", "us", "NUMBER", "localhost", "NUMBER", "NUMBER", "NUMBER", "usdv", "NUMBER", "oraclecloud", "NUMBER", "com", "login", "NUMBER", "oracle", "NUMBER", "com", "NUMBER", "us", "NUMBER", "oracle", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "oke", "NUMBER", "docker", "NUMBER", "oraclecorp", "NUMBER", "com", "HOME", "root", "Body", "message", "hello", "and", "cold", "url", "data", "message", "hello", "HContent", "type", "application", "json", "Huser", "header", "foo", "LINK", "Env", "foo", "PATH", "usr", "local", "sbin", "usr", "local", "bin", "usr", "sbin", "usr", "bin", "sbin", "bin", "HOSTNAME", "OCLIFFE", "mac", "FN_MEMORY", "NUMBER", "FN_HEADER_Content_Type", "application", "json", "FN_HEADER_Accept", "FN_FORMAT", "default", "FN_ROUTE", "test", "FN_TYPE", "sync", "FN_METHOD", "POST", "FN_HEADER_User_Header", "foo", "FN_HEADER_User_Agent", "curl", "NUMBER", "FN_CALL_ID", "NUMBER", "BSGBXQN", "NUMBER", "WGR", "NUMBER", "FN_APP_NAME", "test", "FN_REQUEST_URL", "LINK", "FN_HEADER_Content_Length", "NUMBER", "HTTP_PROXY", "LINK", "proxy", "NUMBER", "uk", "NUMBER", "oracle", "NUMBER", "com", "NUMBER", "http_proxy", "LINK", "proxy", "NUMBER", "uk", "NUMBER", "oracle", "NUMBER", "com", "NUMBER", "HTTPS_PROXY", "LINK", "proxy", "NUMBER", "uk", "NUMBER", "oracle", "NUMBER", "com", "NUMBER", "https_proxy", "LINK", "proxy", "NUMBER", "uk", "NUMBER", "oracle", "NUMBER", "com", "NUMBER", "no_proxy", "NUMBER", "NUMBER", "grungy", "NUMBER", "us", "localhost", "NUMBER", "oraclecorp", "NUMBER", "com", "idoru", "NUMBER", "docker", "NUMBER", "oraclecorp", "NUMBER", "com", "hipchat", "NUMBER", "aka", "NUMBER", "lgl", "NUMBER", "grungy", "NUMBER", "us", "NUMBER", "aka", "NUMBER", "lgl", "NUMBER", "grungy", "NUMBER", "us", "NUMBER", "localhost", "NUMBER", "NUMBER", "NUMBER", "usdv", "NUMBER", "oraclecloud", "NUMBER", "com", "login", "NUMBER", "oracle", "NUMBER", "com", "NUMBER", "us", "NUMBER", "oracle", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "oke", "NUMBER", "docker", "NUMBER", "oraclecorp", "NUMBER", "com", "HOME", "root", "Body", "message", "hello", "good", "find", "again", "for", "these", "specifically", "it", "makes", "sense", "to", "not", "let", "the", "user", "override", "change", "to", "Set", "NUMBER", "thanks", "update", "zootalures", "see", "LINK", "a", "slight", "addition", "that", "add", "any", "of", "these", "forbidden", "variables", "in", "the", "headers", "will", "be", "omitted", "in", "the", "FN_HEADER_", "list", "as", "well", "don", "t", "want", "them", "leaking", "in", "and", "people", "relying", "on", "this", "behavior", "NUMBER", "this", "all", "feels", "exceedingly", "hairy", "still", "NUMBER", "still", "taking", "thoughts", "on", "the", "FN_HEADER_", "debacle", "but", "good", "to", "go", "again", "NUMBER", "thanks", "NUMBER", "gonna", "merge", "then", "seems", "this", "be", "anticipated", "in", "fdk", "already", "thanks", "still", "taking", "thoughts", "on", "FN_HEADER_", "be", "inconsistent", "Yeah", "this", "kind", "of", "thing", "be", "mandatory", "for", "FaaS", "to", "take", "a", "big", "chunk", "of", "the", "services", "on", "PaaS", "space", "NUMBER", "IMO", "the", "right", "way", "to", "approach", "it", "would", "be", "to", "allow", "tool", "like", "spinnaker", "LINK", "to", "orchestrate", "function", "deployments", "NUMBER", "I", "d", "like", "to", "see", "this", "work", "based", "on", "version", "of", "routes", "something", "like", "Initially", "Each", "route", "has", "a", "version", "assume", "all", "version", "be", "mutually", "comparable", "e", "NUMBER", "g", "NUMBER", "semver", "NUMBER", "there", "be", "a", "virtual", "tag", "e", "NUMBER", "g", "NUMBER", "LATEST", "for", "the", "route", "that", "be", "the", "default", "version", "That", "would", "allow", "semantically", "addressable", "function", "by", "version", "for", "a", "given", "route", "e", "NUMBER", "g", "NUMBER", "with", "a", "header", "by", "callers", "e", "NUMBER", "g", "NUMBER", "sending", "a", "Version", "NUMBER", "NUMBER", "header", "on", "a", "request", "says", "select", "the", "latest", "version", "greater", "or", "equal", "to", "NUMBER", "but", "less", "than", "NUMBER", "With", "the", "default", "version", "be", "LATEST", "or", "similar", "just", "the", "highest", "version", "on", "the", "route", "NUMBER", "When", "canarying", "be", "enable", "change", "the", "behaviour", "of", "LATEST", "to", "offer", "a", "dynamic", "choice", "between", "the", "last", "accepted", "version", "and", "the", "next", "available", "version", "If", "you", "want", "to", "auto", "deploy", "with", "the", "canary", "have", "the", "canary", "process", "mark", "a", "version", "as", "OK", "which", "allows", "it", "to", "become", "the", "new", "LATEST", "when", "that", "version", "be", "acceptable", "NUMBER", "You", "have", "ignore", "fn", "file", "flag", "NUMBER", "fn", "routes", "update", "help", "NAME", "fn", "routes", "update", "update", "a", "route", "in", "an", "app", "USAGE", "fn", "routes", "update", "command", "options", "TAG", "TAG", "OPTIONS", "image", "value", "i", "value", "image", "name", "memory", "value", "m", "value", "memory", "in", "MiB", "default", "NUMBER", "type", "value", "t", "value", "route", "type", "sync", "or", "async", "config", "value", "c", "value", "route", "configuration", "headers", "value", "route", "response", "headers", "format", "value", "f", "value", "hot", "container", "IO", "format", "default", "or", "http", "default", "default", "timeout", "value", "route", "timeout", "eg", "NUMBER", "NUMBER", "default", "NUMBER", "idle", "timeout", "value", "route", "idle", "timeout", "eg", "NUMBER", "NUMBER", "default", "NUMBER", "ignore", "fn", "file", "defines", "whether", "skip", "func", "file", "or", "not", "Client", "version", "NUMBER", "Closing", "this", "NUMBER", "i", "could", "think", "of", "certain", "values", "that", "it", "would", "be", "really", "nice", "to", "have", "on", "a", "per", "request", "basis", "instead", "of", "every", "route", "use", "the", "same", "parameters", "asynchronicity", "timeout", "others", "neither", "of", "these", "would", "not", "effect", "the", "hot", "container", "s", "parameters", "and", "sync", "async", "be", "run", "the", "exact", "same", "now", "in", "this", "case", "it", "would", "just", "get", "queued", "up", "instead", "of", "run", "but", "when", "it", "gets", "run", "it", "will", "be", "the", "same", "NUMBER", "NUMBER", "on", "this", "Something", "like", "GET", "r", "app", "path", "HTTP", "NUMBER", "fn", "type", "sync", "async", "fn", "timeout", "NUMBER", "I", "guess", "there", "be", "a", "malicious", "case", "where", "a", "caller", "drops", "the", "timeout", "to", "a", "very", "low", "value", "and", "causes", "hot", "container", "to", "cycle", "much", "faster", "than", "they", "would", "otherwise", "NUMBER", "Very", "first", "steps", "towards", "interactive", "lessons", "tutorials", "LINK", "intro", "LINK", "scenarios", "treeder", "can", "you", "please", "create", "the", "Katacoda", "account", "then", "i", "ll", "push", "what", "i", "have", "to", "the", "fnproject", "katacoda", "tutorials", "repo", "there", "be", "NUMBER", "levels", "to", "this", "really", "that", "could", "be", "taken", "care", "of", "in", "one", "fell", "swoop", "NUMBER", "level", "NUMBER", "the", "current", "reserve", "delete", "semantics", "be", "such", "that", "there", "exists", "a", "point", "in", "time", "where", "a", "task", "could", "not", "be", "run", "to", "completion", "or", "stored", "in", "the", "db", "at", "all", "and", "at", "the", "same", "time", "there", "be", "no", "message", "on", "the", "mq", "to", "ensure", "that", "this", "task", "runs", "at", "least", "once", "NUMBER", "level", "NUMBER", "the", "way", "the", "queues", "be", "designed", "we", "be", "bottlenecked", "on", "NUMBER", "queue", "which", "ultimately", "will", "not", "scale", "for", "larger", "deployments", "redis", "will", "also", "not", "work", "for", "large", "deployments", "NUMBER", "we", "need", "at", "least", "NUMBER", "level", "of", "sharding", "and", "likely", "we", "want", "each", "route", "to", "have", "its", "own", "queue", "so", "we", "can", "do", "things", "like", "process", "hot", "function", "on", "that", "queue", "really", "fast", "NUMBER", "we", "be", "also", "currently", "storing", "an", "entire", "json", "serialized", "models", "NUMBER", "Call", "in", "there", "which", "be", "huge", "and", "message", "queues", "don", "t", "tend", "to", "do", "well", "with", "large", "things", "NUMBER", "we", "could", "probably", "just", "store", "the", "id", "in", "the", "mq", "NUMBER", "i", "NUMBER", "e", "NUMBER", "not", "only", "be", "the", "way", "that", "we", "have", "the", "queues", "set", "up", "insufficient", "but", "so", "be", "our", "semantics", "around", "use", "them", "in", "fn", "NUMBER", "level", "NUMBER", "we", "need", "to", "store", "a", "task", "in", "the", "db", "upon", "receiving", "it", "with", "status", "queued", "and", "then", "re", "work", "when", "we", "get", "to", "delete", "a", "message", "for", "good", "NUMBER", "ultimately", "it", "would", "be", "nice", "to", "have", "run", "once", "semantics", "which", "we", "should", "be", "able", "to", "do", "by", "use", "the", "db", "and", "update", "the", "status", "NUMBER", "i", "can", "think", "of", "various", "ways", "to", "design", "this", "so", "omitting", "the", "details", "NUMBER", "level", "NUMBER", "maybe", "we", "need", "to", "play", "with", "kafka", "unfortunately", "it", "s", "not", "ideal", "for", "timestamp", "based", "job", "processing", "like", "it", "appears", "we", "want", "to", "offer", "delay", "timeout", "based", "NUMBER", "or", "ya", "know", "build", "our", "own", "queue", "NUMBER", "another", "issue", "with", "async", "be", "that", "if", "there", "s", "some", "kind", "of", "error", "like", "image", "not", "find", "right", "now", "we", "try", "to", "run", "that", "call", "forever", "even", "though", "we", "may", "never", "be", "able", "to", "need", "to", "clean", "stuff", "like", "this", "up", "too", "add", "to", "call", "NUMBER", "Start", "This", "still", "an", "issue", "One", "more", "thing", "NUMBER", "With", "the", "current", "implementation", "the", "async", "call", "reaches", "success", "status", "just", "in", "a", "matter", "of", "milliseconds", "but", "the", "actual", "execution", "may", "still", "be", "in", "progress", "NUMBER", "So", "calls", "API", "be", "consistent", "only", "for", "sync", "calls", "can", "be", "a", "source", "of", "truth", "you", "can", "get", "an", "actual", "execution", "status", "NUMBER", "For", "async", "function", "calls", "API", "can", "state", "that", "request", "was", "accepted", "but", "not", "completed", "NUMBER", "Side", "note", "NUMBER", "Call", "object", "can", "t", "be", "a", "proof", "of", "execution", "even", "if", "sync", "function", "really", "makes", "each", "call", "can", "be", "represented", "as", "function", "s", "execution", "state", "NUMBER", "So", "i", "think", "we", "need", "to", "split", "current", "calls", "into", "at", "least", "two", "relative", "APIs", "execution", "request", "API", "as", "proof", "of", "execution", "acceptance", "execution", "state", "API", "as", "a", "source", "of", "function", "s", "lifecycle", "state", "thoughts", "the", "async", "call", "reaches", "success", "status", "just", "in", "a", "matter", "of", "milliseconds", "but", "the", "actual", "execution", "may", "still", "be", "in", "progress", "NUMBER", "don", "t", "think", "this", "be", "an", "accurate", "deduction", "NUMBER", "async", "call", "only", "marked", "as", "success", "after", "it", "executes", "unless", "there", "s", "some", "new", "bug", "in", "there", "NUMBER", "i", "think", "the", "follow", "up", "there", "describes", "this", "but", "this", "statement", "itself", "doesn", "t", "seem", "accurate", "NUMBER", "execution", "request", "API", "as", "proof", "of", "execution", "acceptance", "execution", "state", "API", "as", "a", "source", "of", "function", "s", "lifecycle", "state", "these", "don", "t", "have", "to", "be", "mutually", "exclusive", "NUMBER", "honestly", "any", "API", "that", "tracks", "state", "change", "on", "a", "call", "be", "going", "to", "get", "us", "into", "trouble", "we", "should", "really", "be", "trying", "to", "avoid", "it", "NUMBER", "it", "may", "be", "perfectly", "okay", "to", "say", "execution", "may", "happen", "at", "least", "once", "for", "async", "really", "and", "be", "able", "to", "avoid", "this", "completely", "NUMBER", "as", "far", "as", "the", "calls", "API", "be", "concerned", "it", "s", "not", "really", "a", "scalable", "API", "for", "implementers", "to", "have", "to", "maintain", "if", "they", "don", "t", "want", "to", "run", "serious", "infra", "so", "maybe", "it", "s", "just", "bad", "API", "design", "hopefully", "we", "can", "look", "at", "just", "plopping", "call", "information", "into", "logs", "like", "call", "queued", "call", "completed", "w", "info", "of", "which", "host", "did", "each", "of", "these", "which", "would", "satisfy", "the", "request", "here", "without", "having", "to", "worry", "about", "maintaining", "some", "insane", "API", "NUMBER", "tl", "dr", "agent", "be", "now", "runner", "with", "a", "hopefully", "saner", "api", "NUMBER", "at", "least", "it", "remove", "more", "than", "it", "add", "the", "general", "idea", "be", "get", "rid", "of", "all", "the", "various", "task", "structs", "now", "change", "our", "terminology", "to", "only", "be", "calls", "now", "push", "a", "lot", "of", "the", "http", "construction", "of", "a", "call", "into", "the", "agent", "allow", "calls", "to", "mutate", "their", "state", "around", "their", "execution", "easily", "and", "to", "simplify", "the", "number", "of", "code", "paths", "channels", "and", "context", "timeouts", "in", "something", "hopefully", "easy", "to", "understand", "NUMBER", "this", "introduces", "the", "idea", "of", "slots", "which", "be", "either", "hot", "or", "cold", "and", "be", "separate", "from", "reserving", "memory", "memory", "be", "denominated", "in", "tokens", "now", "NUMBER", "a", "slot", "be", "essentially", "a", "container", "that", "be", "ready", "for", "execution", "of", "a", "call", "be", "it", "hot", "or", "cold", "it", "just", "means", "different", "things", "based", "on", "hotness", "NUMBER", "taking", "a", "look", "into", "Submit", "should", "make", "these", "relatively", "easy", "to", "grok", "NUMBER", "sorry", "things", "were", "pretty", "broken", "especially", "wrt", "timings", "NUMBER", "I", "tried", "to", "keep", "good", "note", "maybe", "too", "good", "to", "highlight", "stuff", "so", "that", "we", "don", "t", "make", "the", "same", "mistakes", "again", "history", "repeating", "itself", "blah", "blah", "quote", "NUMBER", "even", "now", "there", "be", "lots", "of", "work", "to", "do", "I", "encourage", "just", "reading", "the", "agent", "NUMBER", "go", "code", "Submit", "be", "really", "simple", "and", "there", "s", "a", "description", "of", "how", "the", "whole", "thing", "works", "at", "the", "head", "of", "the", "file", "after", "TODOs", "NUMBER", "call", "NUMBER", "go", "contains", "code", "for", "constructing", "calls", "as", "well", "as", "Start", "End", "small", "atm", "NUMBER", "I", "did", "some", "amount", "of", "code", "massaging", "to", "try", "to", "make", "things", "simple", "straightforward", "fit", "reasonable", "mental", "model", "but", "as", "always", "be", "open", "to", "critique", "the", "more", "negative", "the", "better", "as", "I", "m", "just", "one", "guy", "and", "wth", "do", "i", "know", "NUMBER", "below", "enumerates", "a", "number", "of", "change", "as", "briefly", "as", "possible", "heh", "NUMBER", "models", "NUMBER", "Call", "all", "the", "things", "remove", "models", "NUMBER", "Task", "as", "models", "NUMBER", "Call", "be", "now", "what", "it", "previously", "was", "NUMBER", "models", "NUMBER", "FnCall", "be", "now", "rid", "of", "in", "favor", "of", "models", "NUMBER", "Call", "despite", "the", "datastore", "only", "storing", "a", "few", "field", "of", "it", "for", "now", "NUMBER", "we", "should", "probably", "store", "entire", "calls", "in", "the", "db", "since", "app", "route", "configurations", "can", "change", "at", "any", "given", "moment", "it", "would", "be", "nice", "to", "see", "the", "parameters", "of", "each", "call", "costs", "db", "space", "obviously", "NUMBER", "this", "remove", "the", "endpoints", "for", "get", "deleting", "message", "we", "were", "just", "looping", "back", "to", "localhost", "to", "call", "the", "MQ", "wtf", "this", "was", "for", "iron", "integration", "i", "think", "and", "just", "calls", "the", "MQ", "NUMBER", "change", "the", "name", "of", "the", "FnLog", "to", "LogStore", "confusing", "cause", "there", "s", "also", "a", "FuncLogger", "which", "uses", "the", "Logstore", "punting", "NUMBER", "remove", "other", "Fn", "prefixed", "structs", "redundant", "naming", "convention", "NUMBER", "remove", "some", "unuse", "and", "or", "weird", "structs", "IDStatus", "CompleteTime", "update", "the", "swagger", "makes", "the", "db", "methods", "consistent", "to", "use", "Call", "nomenclature", "NUMBER", "remove", "runner", "nuisances", "push", "down", "registry", "stuff", "to", "docker", "driver", "remove", "Environment", "Stats", "stuff", "of", "yore", "remove", "unuse", "writers", "now", "in", "FuncLogger", "remove", "NUMBER", "of", "the", "task", "types", "old", "hot", "stuff", "runner", "etc", "fix", "ram", "available", "calculation", "on", "startup", "to", "not", "always", "be", "NUMBER", "GB", "helps", "a", "lot", "on", "a", "laptop", "format", "for", "DOCKER_AUTH", "env", "now", "be", "not", "a", "list", "but", "a", "map", "there", "be", "no", "docs", "would", "prefer", "to", "get", "rid", "of", "this", "altogether", "anyway", "NUMBER", "the", "NUMBER", "docker", "cfg", "expected", "format", "be", "unchanged", "NUMBER", "remove", "arbitrary", "task", "queue", "if", "a", "machine", "be", "out", "of", "ram", "we", "can", "probably", "just", "time", "out", "without", "queueing", "NUMBER", "can", "open", "separate", "discussion", "in", "any", "case", "the", "old", "one", "didn", "t", "really", "account", "well", "for", "hot", "tasks", "it", "just", "lined", "everyone", "up", "in", "the", "task", "queue", "if", "there", "wasn", "t", "a", "place", "to", "run", "hot", "and", "then", "timed", "them", "out", "even", "if", "a", "slot", "became", "free", "NUMBER", "remove", "HEADER_", "prefixing", "on", "any", "headers", "in", "the", "request", "to", "a", "invoke", "a", "call", "NUMBER", "this", "was", "inconsistent", "with", "cli", "for", "test", "anyway", "remove", "TASK_ID", "header", "sent", "in", "to", "hot", "only", "this", "be", "a", "dupe", "of", "FN_CALL_ID", "which", "has", "not", "be", "remove", "now", "user", "function", "can", "reply", "directly", "to", "the", "client", "NUMBER", "this", "means", "that", "for", "cold", "container", "if", "they", "write", "to", "stdout", "it", "will", "send", "a", "NUMBER", "headers", "NUMBER", "for", "hot", "container", "the", "user", "can", "reply", "directly", "to", "the", "client", "from", "the", "container", "i", "NUMBER", "e", "NUMBER", "with", "its", "preferred", "status", "code", "headers", "vs", "NUMBER", "always", "get", "a", "NUMBER", "NUMBER", "the", "dispatch", "itself", "be", "a", "little", "http", "specific", "atm", "i", "think", "we", "can", "add", "an", "interchange", "format", "but", "the", "current", "version", "be", "easily", "extend", "to", "add", "json", "for", "now", "separate", "discussion", "NUMBER", "this", "eliminates", "a", "lot", "of", "the", "request", "response", "rewriting", "and", "buffering", "we", "were", "doing", "yey", "NUMBER", "now", "Dispatch", "ONLY", "do", "input", "and", "output", "vs", "NUMBER", "managing", "the", "call", "timeout", "and", "having", "access", "to", "a", "call", "s", "field", "NUMBER", "cache", "be", "push", "down", "into", "agent", "now", "instead", "of", "in", "the", "front", "end", "would", "like", "to", "push", "it", "down", "to", "the", "datastore", "actually", "but", "it", "s", "here", "for", "now", "anyway", "NUMBER", "cache", "delete", "function", "remove", "b", "c", "fn", "be", "distributed", "anyway", "NUMBER", "add", "app", "caching", "should", "help", "with", "latency", "NUMBER", "in", "general", "a", "lot", "of", "server", "runner", "NUMBER", "go", "get", "push", "down", "into", "the", "agent", "NUMBER", "i", "think", "it", "will", "be", "useful", "in", "test", "to", "be", "able", "to", "construct", "calls", "without", "having", "to", "invoke", "http", "handlers", "async", "also", "needs", "to", "construct", "calls", "without", "a", "handler", "NUMBER", "safe", "shutdown", "actually", "works", "now", "for", "everything", "leaked", "didn", "t", "wait", "on", "certain", "things", "before", "now", "we", "re", "waiting", "for", "hot", "slots", "to", "open", "up", "while", "we", "re", "attempting", "to", "get", "ram", "to", "launch", "a", "container", "if", "we", "didn", "t", "find", "any", "hot", "slots", "to", "run", "the", "call", "in", "immediately", "NUMBER", "we", "can", "change", "this", "policy", "really", "easily", "now", "no", "more", "channel", "jungle", "still", "some", "channels", "NUMBER", "also", "looking", "for", "somewhere", "else", "to", "go", "while", "the", "container", "be", "launching", "now", "NUMBER", "slots", "now", "get", "sent", "_out_", "of", "a", "container", "vs", "NUMBER", "a", "container", "receiving", "calls", "which", "makes", "this", "kind", "of", "policy", "easier", "to", "implement", "NUMBER", "this", "fix", "a", "number", "of", "bug", "around", "things", "like", "trying", "to", "execute", "calls", "against", "container", "that", "have", "not", "and", "may", "never", "start", "and", "trying", "to", "launch", "a", "bazillion", "container", "when", "there", "be", "no", "free", "container", "NUMBER", "the", "driver", "api", "underwent", "some", "change", "to", "make", "this", "possible", "relatively", "minimal", "add", "Wait", "NUMBER", "the", "easiest", "way", "to", "think", "about", "this", "be", "that", "allocating", "ram", "has", "moved", "up", "instead", "of", "just", "wrapping", "launching", "container", "so", "that", "we", "can", "select", "on", "a", "channel", "trying", "to", "find", "ram", "NUMBER", "not", "dispatching", "hot", "calls", "to", "container", "that", "died", "anymore", "either", "NUMBER", "the", "timeout", "be", "now", "start", "at", "the", "beginning", "of", "Submit", "rather", "than", "Dispatch", "or", "the", "container", "itself", "having", "to", "manage", "the", "call", "timeout", "which", "was", "an", "inaccurate", "way", "of", "doing", "things", "since", "finding", "a", "slot", "allocating", "ram", "pulling", "image", "can", "all", "take", "a", "non", "trivial", "timeout", "amount", "even", "amount", "of", "time", "NUMBER", "this", "makes", "for", "much", "more", "reasonable", "response", "times", "from", "fn", "under", "load", "there", "s", "still", "a", "little", "TODO", "about", "handle", "cold", "timeout", "container", "removal", "response", "times", "but", "it", "s", "much", "improved", "NUMBER", "if", "call", "NUMBER", "Start", "be", "call", "with", "TAG", "NUMBER", "cccab", "NUMBER", "fc", "NUMBER", "Step", "NUMBER", "NUMBER", "WORKDIR", "function", "Using", "cache", "NUMBER", "ad", "NUMBER", "d", "NUMBER", "f", "NUMBER", "c", "Step", "NUMBER", "NUMBER", "ADD", "NUMBER", "go", "src", "func", "f", "NUMBER", "cff", "NUMBER", "c", "NUMBER", "Step", "NUMBER", "NUMBER", "RUN", "cd", "go", "src", "func", "go", "build", "o", "func", "Running", "in", "f", "NUMBER", "cad", "NUMBER", "bc", "NUMBER", "d", "NUMBER", "e", "NUMBER", "a", "NUMBER", "ea", "NUMBER", "dcfef", "Removing", "intermediate", "container", "f", "NUMBER", "cad", "NUMBER", "bc", "NUMBER", "d", "NUMBER", "e", "Step", "NUMBER", "NUMBER", "FROM", "funcy", "go", "NUMBER", "e", "NUMBER", "a", "NUMBER", "edc", "NUMBER", "Step", "NUMBER", "NUMBER", "WORKDIR", "function", "Using", "cache", "NUMBER", "ab", "NUMBER", "ac", "NUMBER", "bb", "NUMBER", "Step", "NUMBER", "NUMBER", "COPY", "from", "build", "stage", "go", "src", "func", "func", "function", "NUMBER", "b", "NUMBER", "f", "Step", "NUMBER", "NUMBER", "ENTRYPOINT", "NUMBER", "func", "Running", "in", "NUMBER", "c", "NUMBER", "a", "NUMBER", "ae", "NUMBER", "bd", "NUMBER", "NUMBER", "b", "NUMBER", "e", "Removing", "intermediate", "container", "NUMBER", "c", "NUMBER", "a", "NUMBER", "ae", "NUMBER", "bd", "NUMBER", "Successfully", "build", "NUMBER", "b", "NUMBER", "e", "Successfully", "tag", "hello", "NUMBER", "error", "image", "name", "must", "have", "an", "owner", "and", "name", "eg", "username", "myfunc", "NUMBER", "Be", "sure", "to", "set", "FN_REGISTRY", "env", "var", "or", "pass", "in", "registry", "NUMBER", "ya", "not", "a", "big", "deal", "NUMBER", "probably", "uncommon", "but", "as", "a", "standard", "practice", "we", "should", "check", "for", "these", "types", "of", "error", "before", "build", "tagging", "etc", "where", "possible", "NUMBER", "link", "to", "NUMBER", "as", "this", "be", "taken", "care", "of", "now", "though", "we", "may", "need", "to", "make", "the", "error", "show", "up", "nicely", "rather", "than", "NUMBER", "LGTM", "I", "ve", "just", "notice", "that", "the", "file", "in", "langs", "in", "LINK", "be", "out", "of", "date", "compared", "to", "the", "ones", "that", "were", "in", "the", "fn", "repo", "before", "the", "deletion", "was", "merge", "NUMBER", "e", "NUMBER", "g", "NUMBER", "the", "change", "in", "NUMBER", "be", "miss", "there", "Since", "I", "m", "a", "Rust", "fan", "in", "my", "spare", "time", "I", "m", "contribute", "to", "the", "Rust", "build", "runtime", "for", "fn", "NUMBER", "This", "change", "fix", "the", "current", "build", "runtime", "which", "be", "currently", "broken", "as", "funcy", "rust", "dev", "do", "not", "exist", "and", "uses", "the", "official", "Rust", "image", "which", "now", "exists", "on", "DockerHub", "plus", "it", "generates", "boilerplate", "for", "a", "basic", "Cargo", "project", "NUMBER", "Sure", "I", "ll", "move", "the", "PR", "NUMBER", "Um", "I", "don", "t", "appear", "to", "have", "push", "access", "to", "LINK", "yet", "NUMBER", "I", "ll", "move", "the", "PR", "later", "NUMBER", "Now", "on", "LINK", "Running", "with", "a", "local", "docker", "container", "of", "fn", "I", "m", "seeing", "the", "number", "of", "hot", "so", "http", "format", "container", "grow", "without", "bound", "these", "don", "t", "ever", "appear", "to", "be", "cleaned", "up", "NUMBER", "Possibly", "relatedly", "there", "s", "no", "evidence", "that", "any", "container", "be", "reused", "rather", "a", "new", "one", "be", "spawned", "for", "each", "request", "my", "hunch", "be", "that", "it", "s", "this", "that", "s", "get", "in", "the", "way", "of", "the", "cleanup", "NUMBER", "Are", "hot", "container", "not", "be", "marked", "idle", "correctly", "Confirmed", "this", "with", "docker", "image", "NUMBER", "dcb", "NUMBER", "f", "from", "a", "couple", "of", "hours", "ago", "NUMBER", "link", "with", "NUMBER", "afaict", "_some_", "hot", "function", "be", "be", "re", "use", "and", "time", "out", "properly", "have", "seen", "this", "myself", "soon", "we", "can", "affirm", "with", "in", "repo", "test", "but", "I", "can", "think", "of", "cases", "where", "this", "may", "not", "necessarily", "be", "the", "case", "NUMBER", "right", "now", "if", "there", "be", "no", "free", "hot", "container", "we", "spawn", "a", "new", "one", "immediately", "so", "this", "can", "cause", "an", "uptick", "during", "traffic", "spikes", "or", "NUMBER", "other", "NUMBER", "cases", "NUMBER", "open", "ended", "cases", "I", "can", "think", "of", "be", "idle_timeout", "set", "to", "NUMBER", "be", "the", "hot", "container", "set", "up", "to", "consume", "input", "send", "output", "if", "the", "input", "of", "the", "first", "never", "gets", "consumed", "then", "the", "container", "will", "hang", "in", "io", "NUMBER", "Copy", "forever", "timeout", "be", "damned", "this", "be", "a", "bug", "the", "latter", "be", "something", "we", "need", "to", "fix", "NUMBER", "not", "ruling", "out", "that", "it", "could", "be", "the", "case", "as", "it", "s", "kind", "of", "on", "the", "user", "atm", "need", "to", "fix", "that", "too", "NUMBER", "i", "know", "that", "in", "the", "former", "case", "we", "rewrite", "idle_timeout", "to", "NUMBER", "s", "so", "this", "shouldn", "t", "be", "what", "s", "happening", "thus", "cleanup", "shouldn", "t", "be", "prevented", "due", "to", "lack", "of", "idle_timeout", "NUMBER", "jan", "g", "we", "could", "try", "to", "run", "with", "that", "docker", "image", "but", "it", "would", "be", "great", "if", "you", "could", "post", "your", "func", "NUMBER", "yaml", "Dockerfile", "code", "file", "s", "api", "call", "s", "to", "get", "this", "behavior", "so", "that", "we", "could", "debug", "exactly", "what", "you", "be", "seeing", "NUMBER", "perhaps", "one", "of", "the", "above", "cases", "sticks", "out", "there", "could", "be", "something", "else", "going", "on", "too", "though", "NUMBER", "wrt", "denismakogon", "async", "doesn", "t", "plumb", "certain", "values", "needed", "for", "hot", "this", "be", "know", "NUMBER", "not", "sure", "if", "relate", "to", "jan", "g", "issue", "sync", "async", "context", "not", "provide", "NUMBER", "Will", "supply", "links", "tomorrow", "on", "the", "phone", "at", "the", "mo", "NUMBER", "I", "ve", "a", "simple", "shell", "based", "image", "that", "consumes", "http", "framed", "input", "and", "puts", "out", "responses", "with", "a", "correct", "content", "length", "it", "s", "about", "as", "minimal", "a", "test", "case", "as", "i", "can", "manage", "NUMBER", "Fn", "call", "and", "or", "curl", "both", "produce", "correct", "output", "however", "the", "container", "never", "seems", "to", "he", "marked", "as", "idle", "NUMBER", "Also", "seen", "this", "with", "hot", "function", "on", "jfaas", "the", "code", "path", "be", "more", "complex", "but", "the", "behaviour", "as", "far", "as", "an", "external", "observer", "be", "concerned", "looks", "identical", "NUMBER", "Excuse", "typo", "NUMBER", "Phone", "screens", "don", "t", "make", "great", "ketbroads", "NUMBER", "Original", "message", "From", "Reed", "Allman", "TAG", "Date", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "p", "NUMBER", "m", "NUMBER", "GMT", "NUMBER", "NUMBER", "To", "fnproject", "fn", "TAG", "Cc", "jan", "g", "TAG", "Mention", "TAG", "Subject", "Re", "fnproject", "fn", "Hot", "function", "look", "like", "they", "aren", "t", "a", "be", "nbsp", "reused", "b", "timing", "out", "NUMBER", "link", "with", "NUMBER", "afaict", "some", "hot", "function", "be", "be", "re", "use", "and", "time", "out", "properly", "have", "seen", "this", "myself", "soon", "we", "can", "affirm", "with", "in", "repo", "test", "but", "I", "can", "think", "of", "cases", "where", "this", "may", "not", "necessarily", "be", "the", "case", "NUMBER", "right", "now", "if", "there", "be", "no", "free", "hot", "container", "we", "spawn", "a", "new", "one", "immediately", "so", "this", "can", "cause", "an", "uptick", "during", "traffic", "spikes", "or", "NUMBER", "other", "NUMBER", "cases", "NUMBER", "open", "ended", "cases", "I", "can", "think", "of", "be", "idle_timeout", "set", "to", "NUMBER", "be", "the", "hot", "container", "set", "up", "to", "consume", "input", "send", "output", "if", "the", "input", "of", "the", "first", "never", "gets", "consumed", "then", "the", "container", "will", "hang", "in", "io", "NUMBER", "Copy", "forever", "timeout", "be", "damned", "this", "be", "a", "bug", "the", "latter", "be", "something", "we", "need", "to", "fix", "NUMBER", "not", "ruling", "out", "that", "it", "could", "be", "the", "case", "as", "it", "s", "kind", "of", "on", "the", "user", "atm", "need", "to", "fix", "that", "too", "NUMBER", "i", "know", "that", "in", "the", "former", "case", "we", "rewrite", "idle_timeout", "to", "NUMBER", "s", "so", "this", "shouldn", "t", "be", "what", "s", "happening", "thus", "cleanup", "shouldn", "t", "be", "prevented", "due", "to", "lack", "of", "idle_timeout", "NUMBER", "jan", "g", "we", "could", "try", "to", "run", "with", "that", "docker", "image", "but", "it", "would", "be", "great", "if", "you", "could", "post", "your", "func", "NUMBER", "yaml", "Dockerfile", "code", "file", "s", "api", "call", "s", "to", "get", "this", "behavior", "so", "that", "we", "could", "debug", "exactly", "what", "you", "be", "seeing", "NUMBER", "perhaps", "one", "of", "the", "above", "cases", "sticks", "out", "there", "could", "be", "something", "else", "going", "on", "too", "though", "NUMBER", "wrt", "denismakogon", "async", "doesn", "t", "plumb", "certain", "values", "needed", "for", "hot", "this", "be", "know", "NUMBER", "not", "sure", "if", "relate", "to", "jan", "g", "issue", "sync", "async", "context", "not", "provide", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "or", "mute", "the", "thread", "NUMBER", "api_version", "NUMBER", "publisher", "api_key", "NUMBER", "dde", "NUMBER", "f", "NUMBER", "d", "NUMBER", "a", "NUMBER", "dd", "NUMBER", "c", "NUMBER", "e", "NUMBER", "bb", "name", "GitHub", "entity", "external_key", "github", "fnproject", "fn", "title", "fnproject", "fn", "subtitle", "GitHub", "repository", "main_image_url", "LINK", "NUMBER", "d", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "fc", "NUMBER", "c", "NUMBER", "bb", "NUMBER", "png", "avatar_image_url", "LINK", "NUMBER", "c", "NUMBER", "b", "NUMBER", "e", "NUMBER", "NUMBER", "aed", "b", "NUMBER", "png", "action", "name", "Open", "in", "GitHub", "url", "LINK", "update", "snippets", "icon", "PERSON", "message", "rdallman", "in", "NUMBER", "link", "with", "NUMBER", "r", "n", "r", "nafaict", "_some_", "hot", "function", "be", "be", "re", "use", "and", "time", "out", "properly", "have", "seen", "this", "myself", "soon", "we", "can", "affirm", "with", "in", "repo", "test", "but", "I", "can", "think", "of", "cases", "where", "this", "may", "not", "necessarily", "be", "the", "case", "NUMBER", "r", "n", "r", "nright", "now", "if", "there", "be", "no", "free", "hot", "container", "we", "spawn", "a", "new", "one", "immediately", "so", "this", "can", "cause", "an", "uptick", "during", "traffic", "spikes", "or", "NUMBER", "other", "NUMBER", "cases", "NUMBER", "r", "n", "r", "nopen", "ended", "cases", "I", "can", "think", "of", "r", "n", "r", "n", "be", "idle_timeout", "set", "to", "NUMBER", "r", "n", "be", "the", "hot", "container", "set", "up", "to", "consume", "input", "send", "output", "if", "the", "input", "of", "the", "first", "never", "gets", "consumed", "then", "the", "container", "will", "hang", "in", "io", "NUMBER", "Copy", "forever", "timeout", "be", "damned", "this", "be", "a", "bug", "r", "n", "r", "nthe", "latter", "be", "something", "we", "need", "to", "fix", "NUMBER", "not", "ruling", "out", "that", "it", "could", "be", "the", "case", "as", "it", "s", "kind", "of", "on", "the", "user", "atm", "need", "to", "fix", "that", "too", "NUMBER", "i", "know", "that", "in", "the", "former", "case", "we", "rewrite", "idle_timeout", "to", "NUMBER", "s", "so", "this", "shouldn", "t", "be", "what", "s", "happening", "thus", "cleanup", "shouldn", "t", "be", "prevented", "due", "to", "lack", "of", "idle_timeout", "NUMBER", "r", "n", "r", "n", "jan", "g", "we", "could", "try", "to", "run", "with", "that", "docker", "image", "but", "it", "would", "be", "great", "if", "you", "could", "post", "your", "r", "n", "r", "n", "func", "NUMBER", "yaml", "r", "n", "Dockerfile", "code", "file", "s", "r", "n", "api", "call", "s", "to", "get", "this", "behavior", "r", "n", "r", "nso", "that", "we", "could", "debug", "exactly", "what", "you", "be", "seeing", "NUMBER", "perhaps", "one", "of", "the", "above", "cases", "sticks", "out", "there", "could", "be", "something", "else", "going", "on", "too", "though", "NUMBER", "r", "n", "r", "nwrt", "denismakogon", "async", "doesn", "t", "plumb", "certain", "values", "needed", "for", "hot", "this", "be", "know", "NUMBER", "not", "sure", "if", "relate", "to", "jan", "g", "issue", "sync", "async", "context", "not", "provide", "NUMBER", "action", "name", "View", "Issue", "url", "LINK", "issuecomment", "NUMBER", "That", "s", "almost", "certainly", "it", "both", "runtimes", "I", "m", "looking", "at", "use", "a", "blocking", "read", "the", "assumption", "be", "that", "fn", "would", "either", "supply", "data", "or", "shut", "down", "the", "function", "NUMBER", "Is", "there", "some", "supplied", "value", "env", "var", "maybe", "i", "should", "use", "to", "time", "these", "out", "TBH", "the", "behaviour", "you", "describe", "be", "a", "bit", "surprising", "NUMBER", "This", "also", "doesn", "t", "explain", "why", "my", "hot", "function", "that", "do", "return", "output", "only", "appear", "to", "get", "call", "once", "NUMBER", "Do", "i", "have", "to", "respond", "with", "the", "result", "them", "immediately", "with", "an", "HTTP", "NUMBER", "Excuse", "typo", "NUMBER", "Phone", "screens", "don", "t", "make", "great", "ketbroads", "NUMBER", "Original", "message", "From", "Denis", "Makogon", "TAG", "Date", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "m", "NUMBER", "GMT", "NUMBER", "NUMBER", "To", "fnproject", "fn", "TAG", "Cc", "jan", "g", "TAG", "Mention", "TAG", "Subject", "Re", "fnproject", "fn", "Hot", "function", "look", "like", "they", "aren", "t", "a", "be", "nbsp", "reused", "b", "timing", "out", "NUMBER", "rdallman", "there", "s", "what", "i", "have", "hot", "function", "it", "s", "initial", "configuration", "it", "s", "sync", "fn", "routes", "i", "votes", "vote", "hot", "format", "http", "idle_timeout", "NUMBER", "image", "denismakogon", "votetask", "hot", "NUMBER", "memory", "NUMBER", "path", "vote", "hot", "timeout", "NUMBER", "type", "sync", "When", "submit", "POST", "request", "to", "FN", "server", "to", "run", "this", "func", "logs", "shows", "following", "lines", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Finding", "route", "on", "datastore", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "votes", "call_id", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "path", "vote", "hot", "route", "vote", "hot", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Got", "route", "from", "datastore", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "votes", "call_id", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "image", "denismakogon", "votetask", "hot", "NUMBER", "path", "vote", "hot", "route", "vote", "hot", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Starting", "container", "execution", "container", "task", "NUMBER", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "msg", "pg_db", "votes", "vote_id", "NUMBER", "e", "NUMBER", "b", "NUMBER", "e", "NUMBER", "ed", "NUMBER", "d", "pg_host", "NUMBER", "vote", "cats", "pg_port", "NUMBER", "pg_user", "postgres", "pg_pswd", "postgres", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "votes", "app_name", "votes", "call_id", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "image", "denismakogon", "votetask", "hot", "NUMBER", "path", "vote", "hot", "route", "vote", "hot", "user_log", "true", "Which", "be", "totally", "OK", "but", "hot", "func", "container", "be", "not", "suspended", "at", "the", "end", "of", "idle", "timeout", "and", "fn", "server", "shows", "following", "error", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "error", "msg", "error", "streaming", "docker", "stats", "for", "task", "call_id", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "container", "task", "NUMBER", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "error", "net", "http", "request", "canceled", "Client", "NUMBER", "Timeout", "exceeded", "while", "reading", "body", "So", "here", "s", "my", "assumption", "example", "that", "we", "have", "for", "hot", "function", "that", "works", "for", "sure", "sends", "to", "STDOUT", "HTTP", "NUMBER", "if", "no", "data", "supplied", "NUMBER", "And", "then", "function", "container", "gets", "suspended", "at", "the", "end", "of", "idle", "timeout", "NUMBER", "But", "my", "func", "sends", "nothing", "to", "STDOUT", "if", "no", "data", "supplied", "via", "STDIN", "and", "that", "makes", "hot", "path", "break", "apart", "NUMBER", "Docker", "says", "that", "container", "still", "up", "and", "run", "docker", "ps", "a", "CONTAINER", "ID", "IMAGE", "COMMAND", "CREATED", "STATUS", "PORTS", "NAMES", "f", "NUMBER", "e", "NUMBER", "a", "NUMBER", "denismakogon", "votetask", "hot", "NUMBER", "NUMBER", "func", "NUMBER", "minutes", "ago", "Up", "NUMBER", "minutes", "task", "NUMBER", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "It", "appears", "that", "hot", "path", "fail", "if", "container", "send", "responses", "to", "stdout", "ONLY", "when", "user", "sends", "a", "request", "NUMBER", "And", "do", "not", "fail", "if", "container", "sends", "HTTP", "NUMBER", "see", "example", "when", "nothing", "be", "sent", "to", "STDIN", "NUMBER", "cc", "jan", "g", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "or", "mute", "the", "thread", "NUMBER", "api_version", "NUMBER", "publisher", "api_key", "NUMBER", "dde", "NUMBER", "f", "NUMBER", "d", "NUMBER", "a", "NUMBER", "dd", "NUMBER", "c", "NUMBER", "e", "NUMBER", "bb", "name", "GitHub", "entity", "external_key", "github", "fnproject", "fn", "title", "fnproject", "fn", "subtitle", "GitHub", "repository", "main_image_url", "LINK", "NUMBER", "d", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "fc", "NUMBER", "c", "NUMBER", "bb", "NUMBER", "png", "avatar_image_url", "LINK", "NUMBER", "c", "NUMBER", "b", "NUMBER", "e", "NUMBER", "NUMBER", "aed", "b", "NUMBER", "png", "action", "name", "Open", "in", "GitHub", "url", "LINK", "update", "snippets", "icon", "PERSON", "message", "denismakogon", "in", "NUMBER", "rdallman", "there", "s", "what", "i", "have", "r", "n", "hot", "function", "LINK", "r", "n", "it", "s", "initial", "configuration", "LINK", "r", "n", "it", "s", "sync", "r", "n", "r", "nfn", "routes", "i", "votes", "vote", "hot", "r", "n", "r", "n", "t", "format", "http", "r", "n", "t", "idle_timeout", "NUMBER", "r", "n", "t", "image", "denismakogon", "votetask", "hot", "NUMBER", "r", "n", "t", "memory", "NUMBER", "r", "n", "t", "path", "vote", "hot", "r", "n", "t", "timeout", "NUMBER", "r", "n", "t", "type", "sync", "r", "n", "r", "n", "r", "n", "r", "nWhen", "submit", "POST", "request", "to", "FN", "server", "to", "run", "this", "func", "logs", "shows", "following", "lines", "r", "n", "r", "ntime", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Finding", "route", "on", "datastore", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "votes", "call_id", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "path", "vote", "hot", "route", "vote", "hot", "r", "ntime", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Got", "route", "from", "datastore", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "votes", "call_id", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "image", "denismakogon", "votetask", "hot", "NUMBER", "path", "vote", "hot", "route", "vote", "hot", "r", "ntime", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "Starting", "container", "execution", "container", "task", "NUMBER", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "r", "ntime", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "msg", "pg_db", "votes", "vote_id", "NUMBER", "e", "NUMBER", "b", "NUMBER", "e", "NUMBER", "ed", "NUMBER", "d", "pg_host", "NUMBER", "vote", "cats", "pg_port", "NUMBER", "pg_user", "postgres", "pg_pswd", "postgres", "r", "n", "action", "server", "NUMBER", "handleRunnerRequest", "fm", "app", "votes", "app_name", "votes", "call_id", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "image", "denismakogon", "votetask", "hot", "NUMBER", "path", "vote", "hot", "route", "vote", "hot", "user_log", "true", "r", "n", "r", "nWhich", "be", "totally", "OK", "but", "hot", "func", "container", "be", "not", "suspended", "at", "the", "end", "of", "idle", "timeout", "and", "fn", "server", "shows", "following", "error", "r", "n", "r", "ntime", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "error", "msg", "error", "streaming", "docker", "stats", "for", "task", "call_id", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "container", "task", "NUMBER", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "error", "net", "http", "request", "canceled", "Client", "NUMBER", "Timeout", "exceeded", "while", "reading", "body", "r", "n", "r", "nSo", "here", "s", "my", "assumption", "example", "LINK", "that", "we", "have", "for", "hot", "function", "that", "works", "for", "sure", "sends", "to", "STDOUT", "HTTP", "NUMBER", "if", "no", "data", "supplied", "NUMBER", "And", "then", "function", "container", "gets", "suspended", "at", "the", "end", "of", "idle", "timeout", "NUMBER", "But", "my", "func", "sends", "nothing", "to", "STDOUT", "if", "no", "data", "supplied", "via", "STDIN", "and", "that", "makes", "hot", "path", "break", "apart", "NUMBER", "r", "n", "r", "nDocker", "says", "that", "container", "still", "up", "and", "run", "r", "n", "r", "ndocker", "ps", "a", "r", "nCONTAINER", "ID", "IMAGE", "COMMAND", "CREATED", "STATUS", "PORTS", "NAMES", "r", "nf", "NUMBER", "e", "NUMBER", "a", "NUMBER", "denismakogon", "votetask", "hot", "NUMBER", "NUMBER", "func", "NUMBER", "minutes", "ago", "Up", "NUMBER", "minutes", "task", "NUMBER", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "r", "n", "r", "n", "r", "nIt", "appears", "that", "hot", "path", "fail", "if", "container", "send", "responses", "to", "stdout", "ONLY", "when", "user", "sends", "a", "request", "NUMBER", "And", "do", "not", "fail", "if", "container", "sends", "HTTP", "NUMBER", "see", "example", "LINK", "when", "nothing", "be", "sent", "to", "STDIN", "NUMBER", "r", "n", "r", "n", "r", "ncc", "jan", "g", "action", "name", "View", "Issue", "url", "LINK", "issuecomment", "NUMBER", "again", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "error", "msg", "error", "streaming", "docker", "stats", "for", "task", "call_id", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "container", "task", "NUMBER", "NUMBER", "BR", "NUMBER", "JP", "NUMBER", "FG", "NUMBER", "WG", "NUMBER", "error", "net", "http", "request", "canceled", "Client", "NUMBER", "Timeout", "exceeded", "while", "reading", "body", "be", "basically", "expected", "upon", "task", "completion", "shut", "down", "the", "stats", "stream", "forcefully", "there", "s", "no", "reason", "to", "reference", "this", "NUMBER", "it", "was", "worthwhile", "to", "have", "when", "figuring", "out", "why", "tasks", "didn", "t", "have", "stats", "but", "now", "it", "s", "cause", "all", "sorts", "of", "made", "up", "bug", "so", "maybe", "it", "s", "not", "worth", "it", "to", "log", "anymore", "NUMBER", "But", "my", "func", "sends", "nothing", "to", "STDOUT", "if", "no", "data", "supplied", "via", "STDIN", "and", "that", "makes", "hot", "path", "break", "apart", "NUMBER", "yes", "exactly", "NUMBER", "if", "the", "container", "doesn", "t", "actually", "write", "anything", "out", "it", "blocks", "forever", "NUMBER", "we", "just", "need", "a", "context", "based", "io", "NUMBER", "Copy", "to", "catch", "this", "I", "think", "but", "in", "general", "users", "will", "have", "to", "at", "least", "write", "headers", "back", "otherwise", "we", "have", "no", "clue", "that", "the", "task", "finished", "and", "will", "just", "wait", "for", "output", "until", "the", "timeout", "not", "sure", "how", "to", "get", "around", "this", "NUMBER", "the", "STDIN", "with", "empty", "body", "should", "be", "taken", "care", "of", "by", "consuming", "headers", "and", "having", "NUMBER", "Content", "Length", "NUMBER", "Do", "i", "have", "to", "respond", "with", "the", "result", "them", "immediately", "with", "an", "HTTP", "NUMBER", "I", "don", "t", "think", "immediacy", "be", "necessary", "NUMBER", "will", "at", "least", "have", "to", "give", "headers", "at", "some", "point", "before", "timeout", "NUMBER", "the", "dispatch", "code", "be", "definitely", "not", "perfect", "atm", "it", "s", "get", "it", "s", "hair", "and", "make", "up", "do", "at", "the", "moment", "though", "NUMBER", "This", "actually", "be", "not", "true", "user", "should", "not", "supply", "anything", "to", "let", "fn", "know", "that", "task", "be", "finished", "http", "request", "in", "STDOUT", "means", "that", "task", "be", "finished", "NUMBER", "I", "tend", "to", "agree", "about", "io", "NUMBER", "Copy", "needs", "a", "idle", "timeout", "based", "context", "NUMBER", "what", "be", "not", "true", "we", "seem", "to", "agree", "that", "the", "user", "has", "to", "write", "an", "http", "request", "to", "STDOUT", "or", "we", "need", "to", "timeout", "NUMBER", "Timeout", "actually", "never", "happens", "get", "container", "that", "runs", "already", "for", "NUMBER", "NUMBER", "hours", "where", "timeout", "be", "NUMBER", "s", "and", "idle", "timeout", "be", "NUMBER", "s", "NUMBER", "maybe", "this", "be", "just", "a", "superfluous", "reply", "but", "yes", "this", "be", "the", "current", "behavior", "due", "to", "the", "lack", "of", "io", "NUMBER", "Copy", "w", "ctx", "as", "noted", "NUMBER", "did", "I", "miss", "something", "This", "should", "be", "change", "IMO", "NUMBER", "Or", "at", "least", "should", "be", "protocol", "bound", "thing", "only", "NUMBER", "sure", "NUMBER", "it", "s", "the", "same", "for", "any", "other", "format", "though", "NUMBER", "if", "they", "don", "t", "write", "anything", "we", "can", "t", "know", "that", "it", "s", "do", "or", "we", "timeout", "NUMBER", "Do", "i", "have", "to", "respond", "with", "the", "result", "them", "immediately", "with", "an", "HTTP", "NUMBER", "this", "be", "an", "errant", "question", "in", "quoting", "the", "parent", "comment", "i", "m", "not", "sure", "i", "follow", "what", "exactly", "the", "issue", "that", "be", "be", "outlined", "now", "as", "it", "pertains", "to", "any", "of", "my", "previous", "acknowledgements", "of", "any", "bug", "s", "NUMBER", "be", "there", "some", "misunderstanding", "here", "some", "clear", "definition", "of", "what", "outside", "of", "the", "scope", "of", "the", "outlined", "current", "acknowledged", "bug", "would", "be", "appreciated", "NUMBER", "as", "it", "stands", "I", "have", "if", "a", "task", "do", "not", "consume", "or", "send", "any", "input", "output", "the", "container", "will", "hang", "forever", "NUMBER", "if", "a", "task", "writes", "a", "NUMBER", "the", "user", "will", "receive", "a", "NUMBER", "both", "of", "these", "be", "be", "worked", "on", "NUMBER", "if", "there", "be", "something", "else", "to", "add", "to", "this", "let", "me", "know", "NUMBER", "One", "more", "bullet", "point", "to", "add", "to", "that", "which", "be", "the", "original", "problem", "when", "a", "task", "responds", "with", "an", "http", "response", "status", "line", "content", "length", "and", "content", "it", "be", "never", "reused", "or", "timed", "out", "NUMBER", "Excuse", "typo", "NUMBER", "Phone", "screens", "don", "t", "make", "great", "ketbroads", "NUMBER", "Original", "message", "From", "Reed", "Allman", "TAG", "Date", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "p", "NUMBER", "m", "NUMBER", "GMT", "NUMBER", "NUMBER", "To", "fnproject", "fn", "TAG", "Cc", "jan", "g", "TAG", "Mention", "TAG", "Subject", "Re", "fnproject", "fn", "Hot", "function", "look", "like", "they", "aren", "t", "a", "be", "nbsp", "reused", "b", "timing", "out", "NUMBER", "This", "actually", "be", "not", "true", "user", "should", "not", "supply", "anything", "to", "let", "fn", "know", "that", "task", "be", "finished", "http", "request", "in", "STDOUT", "means", "that", "task", "be", "finished", "NUMBER", "I", "tend", "to", "agree", "about", "io", "NUMBER", "Copy", "needs", "a", "idle", "timeout", "based", "context", "NUMBER", "what", "be", "not", "true", "we", "seem", "to", "agree", "that", "the", "user", "has", "to", "write", "an", "http", "request", "to", "STDOUT", "or", "we", "need", "to", "timeout", "NUMBER", "Timeout", "actually", "never", "happens", "get", "container", "that", "runs", "already", "for", "NUMBER", "NUMBER", "hours", "where", "timeout", "be", "NUMBER", "s", "and", "idle", "timeout", "be", "NUMBER", "s", "NUMBER", "maybe", "this", "be", "just", "a", "superfluous", "reply", "but", "yes", "this", "be", "the", "current", "behavior", "due", "to", "the", "lack", "of", "io", "NUMBER", "Copy", "as", "noted", "NUMBER", "did", "I", "miss", "something", "This", "should", "be", "change", "IMO", "NUMBER", "Or", "at", "least", "should", "be", "protocol", "bound", "thing", "only", "NUMBER", "sure", "NUMBER", "it", "s", "the", "same", "for", "any", "other", "format", "though", "NUMBER", "if", "they", "don", "t", "write", "anything", "we", "can", "t", "know", "that", "it", "s", "do", "or", "we", "timeout", "NUMBER", "Do", "i", "have", "to", "respond", "with", "the", "result", "them", "immediately", "with", "an", "HTTP", "NUMBER", "huh", "no", "just", "have", "to", "respond", "before", "the", "timeout", "NUMBER", "right", "now", "responding", "NUMBER", "results", "in", "a", "NUMBER", "which", "be", "confusing", "which", "be", "acknowledged", "and", "be", "fix", "NUMBER", "but", "i", "don", "t", "understand", "this", "issue", "of", "immediacy", "if", "someone", "could", "outline", "it", "for", "me", "NUMBER", "i", "m", "not", "sure", "i", "follow", "what", "exactly", "the", "issue", "that", "be", "be", "outlined", "now", "as", "it", "pertains", "to", "any", "of", "my", "previous", "acknowledgements", "of", "any", "bug", "s", "NUMBER", "be", "there", "some", "misunderstanding", "here", "some", "clear", "definition", "of", "what", "outside", "of", "the", "scope", "of", "the", "outlined", "current", "acknowledged", "bug", "would", "be", "appreciated", "NUMBER", "as", "it", "stands", "I", "have", "if", "a", "task", "do", "not", "consume", "or", "send", "any", "input", "output", "the", "container", "will", "hang", "forever", "NUMBER", "if", "a", "task", "writes", "a", "NUMBER", "the", "user", "will", "receive", "a", "NUMBER", "both", "of", "these", "be", "be", "worked", "on", "NUMBER", "if", "there", "be", "something", "useful", "to", "add", "please", "do", "so", "otherwise", "I", "don", "t", "think", "this", "warrants", "any", "further", "discussion", "and", "lack", "of", "replies", "would", "be", "appreciated", "to", "avoid", "further", "confusion", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "or", "mute", "the", "thread", "NUMBER", "api_version", "NUMBER", "publisher", "api_key", "NUMBER", "dde", "NUMBER", "f", "NUMBER", "d", "NUMBER", "a", "NUMBER", "dd", "NUMBER", "c", "NUMBER", "e", "NUMBER", "bb", "name", "GitHub", "entity", "external_key", "github", "fnproject", "fn", "title", "fnproject", "fn", "subtitle", "GitHub", "repository", "main_image_url", "LINK", "NUMBER", "d", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "fc", "NUMBER", "c", "NUMBER", "bb", "NUMBER", "png", "avatar_image_url", "LINK", "NUMBER", "c", "NUMBER", "b", "NUMBER", "e", "NUMBER", "NUMBER", "aed", "b", "NUMBER", "png", "action", "name", "Open", "in", "GitHub", "url", "LINK", "update", "snippets", "icon", "PERSON", "message", "rdallman", "in", "NUMBER", "u", "NUMBER", "e", "This", "actually", "be", "not", "true", "user", "should", "not", "supply", "anything", "to", "let", "fn", "know", "that", "task", "be", "finished", "http", "request", "in", "STDOUT", "means", "that", "task", "be", "finished", "NUMBER", "I", "tend", "to", "agree", "about", "io", "NUMBER", "Copy", "needs", "a", "idle", "timeout", "based", "context", "NUMBER", "r", "n", "r", "nwhat", "be", "not", "true", "we", "seem", "to", "agree", "that", "the", "user", "has", "to", "write", "an", "http", "request", "to", "STDOUT", "or", "we", "need", "to", "timeout", "NUMBER", "r", "n", "r", "n", "u", "NUMBER", "e", "Timeout", "actually", "never", "happens", "get", "container", "that", "runs", "already", "for", "NUMBER", "NUMBER", "hours", "where", "timeout", "be", "NUMBER", "s", "and", "idle", "timeout", "be", "NUMBER", "s", "NUMBER", "r", "n", "r", "nmaybe", "this", "be", "just", "a", "superfluous", "reply", "but", "yes", "this", "be", "the", "current", "behavior", "due", "to", "the", "lack", "of", "io", "NUMBER", "Copy", "as", "noted", "NUMBER", "did", "I", "miss", "something", "r", "n", "r", "n", "u", "NUMBER", "e", "This", "should", "be", "change", "IMO", "NUMBER", "Or", "at", "least", "should", "be", "protocol", "bound", "thing", "only", "NUMBER", "r", "n", "r", "nsure", "NUMBER", "it", "s", "the", "same", "for", "any", "other", "format", "though", "NUMBER", "if", "they", "don", "t", "write", "anything", "we", "can", "t", "know", "that", "it", "s", "do", "or", "we", "timeout", "NUMBER", "r", "n", "r", "n", "u", "NUMBER", "e", "Do", "i", "have", "to", "respond", "with", "the", "result", "them", "immediately", "with", "an", "HTTP", "NUMBER", "r", "n", "r", "nhuh", "no", "just", "have", "to", "respond", "before", "the", "timeout", "NUMBER", "right", "now", "responding", "NUMBER", "results", "in", "a", "NUMBER", "which", "be", "confusing", "which", "be", "acknowledged", "and", "be", "fix", "NUMBER", "but", "i", "don", "t", "understand", "this", "issue", "of", "immediacy", "if", "someone", "could", "outline", "it", "for", "me", "NUMBER", "r", "n", "r", "ni", "m", "not", "sure", "i", "follow", "what", "exactly", "the", "issue", "that", "be", "be", "outlined", "now", "as", "it", "pertains", "to", "any", "of", "my", "previous", "acknowledgements", "of", "any", "bug", "s", "NUMBER", "be", "there", "some", "misunderstanding", "here", "some", "clear", "definition", "of", "what", "outside", "of", "the", "scope", "of", "the", "outlined", "current", "acknowledged", "bug", "would", "be", "appreciated", "NUMBER", "as", "it", "stands", "I", "have", "r", "n", "r", "n", "if", "a", "task", "do", "not", "consume", "or", "send", "any", "input", "output", "the", "container", "will", "hang", "forever", "NUMBER", "r", "n", "if", "a", "task", "writes", "a", "NUMBER", "the", "user", "will", "receive", "a", "NUMBER", "r", "n", "r", "nboth", "of", "these", "be", "be", "worked", "on", "NUMBER", "if", "there", "be", "something", "useful", "to", "add", "please", "do", "so", "otherwise", "I", "don", "t", "think", "this", "warrants", "any", "further", "discussion", "and", "lack", "of", "replies", "would", "be", "appreciated", "to", "avoid", "further", "confusion", "NUMBER", "action", "name", "View", "Issue", "url", "LINK", "issuecomment", "NUMBER", "weird", "one", "NUMBER", "thanks", "NUMBER", "i", "repro", "d", "must", "be", "from", "recent", "change", "NUMBER", "this", "seems", "like", "the", "normal", "path", "for", "hot", "be", "broken", "not", "the", "edge", "cases", "we", "seem", "to", "be", "digging", "into", "NUMBER", "map", "iteration", "be", "random", "do", "the", "trick", "NUMBER", "fix", "NUMBER", "thanks", "for", "bug", "This", "be", "the", "gist", "of", "how", "I", "want", "to", "filter", "out", "closure", "calls", "that", "don", "t", "originate", "from", "the", "completer", "and", "also", "auto", "configure", "the", "completer", "endpoint", "on", "all", "calls", "to", "function", "where", "the", "completer", "has", "be", "enable", "The", "behaviour", "should", "be", "No", "FNPROJECT_THREADID", "header", "not", "a", "closure", "call", "invoke", "function", "normally", "don", "t", "check", "token", "Has", "FNPROJECT_THREADID", "header", "closure", "call", "make", "sure", "that", "FNPROJECT_COMPLETER_TOKEN", "matches", "configured", "token", "reject", "if", "it", "doesn", "t", "invoke", "function", "if", "it", "do", "NUMBER", "I", "was", "thinking", "to", "make", "the", "completer", "optional", "globally", "in", "fn", "depending", "on", "whether", "it", "s", "configured", "in", "the", "fn", "server", "env", "especially", "for", "local", "dev", "NUMBER", "I", "was", "also", "thinking", "about", "make", "the", "completer", "optional", "in", "function", "config", "and", "requiring", "config", "to", "be", "enable", "although", "it", "might", "make", "more", "sense", "to", "turn", "it", "on", "all", "the", "time", "At", "the", "moment", "this", "be", "use", "a", "shared", "key", "between", "completer", "and", "fn", "but", "I", "might", "make", "this", "use", "some", "sort", "of", "rudimentary", "signature", "possibly", "time", "based", "to", "reduce", "some", "of", "the", "risks", "of", "the", "headers", "becoming", "visible", "NUMBER", "I", "ended", "up", "add", "a", "new", "listener", "around", "task", "start", "the", "Runner", "listener", "would", "only", "have", "a", "partial", "view", "of", "the", "config", "even", "after", "change", "when", "it", "run", "no", "app", "config", "I", "ended", "up", "add", "a", "new", "listener", "around", "task", "start", "the", "Runner", "listener", "would", "only", "have", "a", "partial", "view", "of", "the", "config", "even", "after", "change", "when", "it", "run", "no", "app", "config", "be", "game", "to", "modifying", "the", "old", "Runner", "listener", "or", "replacing", "it", "with", "the", "new", "NUMBER", "these", "be", "eerily", "similar", "NUMBER", "i", "don", "t", "think", "anybody", "be", "actually", "hooked", "in", "on", "the", "BeforeDispatch", "or", "AfterDispatch", "hooks", "at", "present", "so", "we", "can", "modify", "these", "to", "what", "we", "need", "NUMBER", "be", "good", "with", "having", "some", "kind", "of", "idea", "of", "core", "integrations", "that", "we", "bake", "in", "always", "NUMBER", "structure", "wise", "maybe", "we", "have", "a", "hooks", "package", "or", "something", "analogous", "NUMBER", "I", "be", "not", "sure", "if", "it", "s", "more", "desirable", "to", "have", "the", "completer", "code", "in", "the", "completer", "repo", "and", "then", "to", "just", "import", "it", "here", "up", "to", "you", "NUMBER", "treeder", "What", "s", "the", "argument", "not", "to", "include", "this", "I", "m", "not", "super", "fond", "of", "having", "to", "tell", "people", "to", "re", "compile", "to", "make", "this", "work", "I", "guess", "for", "me", "there", "be", "two", "parts", "NUMBER", "For", "setting", "the", "completer", "URL", "having", "this", "by", "default", "remove", "complexity", "of", "having", "to", "do", "this", "in", "function", "config", "for", "each", "function", "perhaps", "this", "could", "be", "a", "fn", "wide", "option", "to", "always", "inject", "a", "specified", "environment", "var", "into", "all", "function", "this", "be", "contextual", "service", "discovery", "the", "completer", "for", "this", "fn", "NUMBER", "For", "Auth", "I", "d", "really", "like", "to", "get", "this", "or", "something", "like", "this", "in", "by", "default", "In", "principal", "we", "could", "skip", "this", "but", "it", "puts", "us", "in", "a", "precarious", "position", "generally", "why", "didn", "t", "you", "make", "this", "secure", "if", "say", "a", "user", "made", "fn", "publically", "available", "The", "completer", "operates", "by", "injecting", "code", "executable", "content", "especially", "in", "the", "case", "of", "java", "serialization", "into", "the", "function", "preventing", "this", "from", "arriving", "over", "the", "general", "ingress", "by", "default", "be", "my", "goal", "NUMBER", "I", "think", "RunnerListener", "should", "go", "be", "replaced", "by", "this", "all", "it", "can", "do", "now", "be", "change", "the", "app", "name", "and", "path", "of", "an", "incoming", "request", "anyway", "NUMBER", "i", "think", "the", "general", "idea", "with", "hooks", "be", "that", "yea", "somebody", "wants", "to", "add", "their", "own", "specific", "hooks", "that", "nobody", "else", "needs", "and", "run", "their", "own", "function", "and", "they", "can", "compile", "a", "separate", "binary", "and", "do", "that", "as", "suggested", "NUMBER", "with", "this", "yea", "it", "seems", "like", "we", "ll", "have", "this", "in", "every", "fn", "deployment", "be", "the", "idea", "and", "it", "so", "happens", "to", "be", "simple", "enough", "to", "pull", "in", "via", "the", "hook", "interfaces", "vs", "NUMBER", "having", "to", "plumb", "in", "to", "the", "runner", "code", "NUMBER", "it", "makes", "sense", "to", "me", "NUMBER", "imo", "the", "code", "in", "api", "completer", "can", "probably", "go", "in", "the", "completer", "repo", "and", "we", "just", "import", "it", "and", "we", "can", "have", "some", "kind", "of", "hooks", "default", "NUMBER", "go", "file", "that", "imports", "these", "and", "add", "them", "to", "the", "server", "by", "default", "or", "perhaps", "hooks", "completer", "if", "that", "makes", "more", "sense", "NUMBER", "but", "that", "s", "just", "what", "i", "m", "thinking", "NUMBER", "open", "to", "idears", "NUMBER", "Will", "come", "back", "to", "this", "later", "look", "at", "very", "bottom", "NUMBER", "it", "s", "weird", "NUMBER", "fn", "init", "Error", "occur", "ERROR", "Missing", "required", "argument", "TAG", "NAME", "fn", "init", "create", "a", "local", "func", "NUMBER", "yaml", "file", "USAGE", "fn", "init", "command", "options", "TAG", "DESCRIPTION", "Creates", "a", "func", "NUMBER", "yaml", "file", "in", "the", "current", "directory", "NUMBER", "OPTIONS", "force", "overwrite", "exist", "func", "NUMBER", "yaml", "runtime", "value", "choose", "an", "exist", "runtime", "NUMBER", "js", "NUMBER", "rb", "NUMBER", "py", "NUMBER", "rs", "NUMBER", "java", "NUMBER", "go", "NUMBER", "php", "NUMBER", "cs", "NUMBER", "fs", "entrypoint", "value", "entrypoint", "be", "the", "command", "to", "run", "to", "start", "this", "function", "equivalent", "to", "Dockerfile", "ENTRYPOINT", "NUMBER", "version", "value", "function", "version", "default", "NUMBER", "image", "value", "i", "value", "image", "name", "memory", "value", "m", "value", "memory", "in", "MiB", "default", "NUMBER", "type", "value", "t", "value", "route", "type", "sync", "or", "async", "config", "value", "c", "value", "route", "configuration", "headers", "value", "route", "response", "headers", "format", "value", "f", "value", "hot", "container", "IO", "format", "default", "or", "http", "default", "default", "timeout", "value", "route", "timeout", "eg", "NUMBER", "NUMBER", "s", "default", "NUMBER", "s", "idle", "timeout", "value", "route", "idle", "timeout", "eg", "NUMBER", "NUMBER", "s", "default", "NUMBER", "s", "help", "h", "show", "help", "exiting", "NUMBER", "in", "fact", "the", "CLI", "output", "now", "for", "error", "be", "worse", "NUMBER", "here", "s", "another", "one", "that", "be", "not", "write", "for", "humans", "fn", "routes", "l", "myapp", "Error", "occur", "error", "App", "not", "find", "exiting", "NUMBER", "This", "should", "be", "Error", "occur", "App", "not", "find", "NUMBER", "or", "something", "like", "that", "NUMBER", "or", "simply", "Error", "App", "not", "find", "NUMBER", "or", "even", "better", "IMO", "App", "not", "find", "treeder", "think", "it", "s", "fix", "NUMBER", "will", "open", "other", "tickets", "if", "wonky", "output", "NUMBER", "Thanks", "was", "update", "recently", "to", "include", "FN_REGISTRY", "and", "fn", "init", "with", "no", "argument", "NUMBER", "but", "this", "isn", "t", "work", "NUMBER", "get", "the", "following", "fn", "init", "Error", "occur", "ERROR", "Missing", "required", "argument", "TAG", "treeder", "I", "had", "the", "latest", "release", "from", "here", "LINK", "can", "we", "cut", "a", "new", "release", "with", "that", "code", "in", "Currently", "the", "main", "README", "be", "broken", "NUMBER", "it", "s", "fix", "on", "a", "super", "old", "version", "of", "the", "CLI", "NUMBER", "NUMBER", "version", "back", "from", "latest", "release", "and", "the", "fn", "init", "doesn", "t", "work", "even", "on", "the", "latest", "release", "which", "be", "NUMBER", "treeder", "just", "mention", "he", "s", "moving", "the", "CLI", "so", "standing", "by", "on", "this", "one", "NUMBER", "Fixed", "NUMBER", "maybe", "we", "should", "just", "avoid", "the", "strings", "NUMBER", "ToUpper", "call", "and", "leave", "the", "casing", "users", "can", "provide", "upper", "case", "if", "they", "be", "anal", "retentive", "i", "think", "we", "should", "stop", "prefixing", "with", "HEADER_", "thanks", "for", "bringing", "this", "up", "collide", "with", "what", "if", "the", "provide", "request", "header", "overrides", "a", "route", "or", "app", "configured", "env", "var", "I", "don", "t", "see", "a", "problem", "with", "that", "precedence", "NUMBER", "was", "talking", "to", "treeder", "about", "this", "and", "want", "to", "use", "the", "same", "code", "that", "we", "use", "in", "fn", "to", "run", "things", "really", "NUMBER", "then", "if", "we", "add", "other", "drivers", "it", "will", "just", "fall", "out", "too", "and", "maybe", "hot", "would", "be", "easier", "and", "such", "e", "NUMBER", "g", "NUMBER", "right", "now", "it", "would", "be", "runner", "NUMBER", "Run", "task", "hopefully", "this", "be", "easier", "soon", "ish", "NUMBER", "Should", "this", "be", "close", "since", "we", "be", "remove", "cli", "from", "the", "repo", "and", "coincidentally", "func", "NUMBER", "yaml", "assuming", "user", "do", "not", "want", "language", "magic", "they", "can", "just", "BYOD", "bring", "your", "own", "docker", "but", "the", "runtime", "isnt", "an", "option", "yet", "NUMBER", "it", "needs", "to", "be", "blank", "and", "I", "think", "even", "gets", "set", "to", "blank", "with", "fn", "init", "NUMBER", "instead", "of", "name", "hello", "version", "NUMBER", "runtime", "path", "hello", "this", "be", "much", "cleaner", "name", "hello", "version", "NUMBER", "runtime", "docker", "path", "hello", "Also", "fn", "init", "will", "detect", "a", "Dockerfile", "as", "well", "think", "it", "already", "do", "this", "In", "my", "case", "it", "s", "my", "own", "Dockerfile", "NUMBER", "If", "the", "image", "already", "exists", "somewhere", "you", "can", "just", "use", "Dockerfile", "with", "one", "line", "FROM", "TAG", "then", "runtime", "stays", "true", "doesn", "t", "become", "an", "image", "name", "When", "there", "be", "a", "Dockerfile", "the", "runtime", "will", "be", "enforced", "to", "docker", "if", "docker", "runtime", "be", "set", "in", "func", "file", "and", "no", "Dockerfile", "an", "error", "NUMBER", "I", "v", "posted", "the", "initial", "code", "change", "for", "this", "in", "PR", "LINK", "If", "only", "image", "file", "specified", "on", "command", "line", "and", "no", "Dockerfile", "it", "seems", "to", "me", "the", "exist", "behavior", "be", "proper", "so", "no", "change", "on", "that", "NUMBER", "code", "change", "commit", "LINK", "NUMBER", "rewrites", "ambiguous", "timeouts", "to", "nanoseconds", "NUMBER", "timeout", "NUMBER", "turns", "into", "timeout", "NUMBER", "ns", "after", "deploy", "NUMBER", "Probably", "not", "what", "I", "intended", "NUMBER", "NUMBER", "timeout", "NUMBER", "s", "turns", "into", "timeout", "NUMBER", "m", "NUMBER", "s", "after", "deploy", "NUMBER", "also", "sorta", "lame", "NUMBER", "works", "for", "me", "NUMBER", "at", "least", "don", "t", "rewrite", "it", "from", "one", "format", "to", "another", "NUMBER", "yea", "need", "to", "not", "call", "SetDefaults", "imo", "in", "update", "ok", "NUMBER", "i", "don", "t", "see", "any", "of", "the", "test", "use", "PATCH", "method", "want", "to", "add", "a", "few", "or", "did", "I", "miss", "them", "LGTM", "rdallman", "Has", "to", "re", "review", "though", "NUMBER", "yay", "more", "test", "NUMBER", "some", "nits", "NUMBER", "overall", "this", "seems", "an", "improvement", "NUMBER", "def", "need", "to", "remove", "the", "global", "NUMBER", "i", "would", "say", "that", "it", "seems", "really", "weird", "that", "we", "be", "checking", "which", "http", "method", "we", "re", "in", "the", "context", "of", "in", "NUMBER", "different", "places", "still", "now", "and", "we", "might", "want", "to", "reduce", "that", "but", "not", "the", "end", "of", "the", "world", "NUMBER", "alright", "let", "s", "do", "it", "NUMBER", "when", "the", "Fn", "server", "can", "t", "be", "find", "this", "be", "the", "response", "from", "the", "CLI", "NUMBER", "it", "s", "ugly", "and", "tells", "me", "nothing", "NUMBER", "fn", "apps", "l", "unexpect", "error", "TAG", "models", "NUMBER", "Error", "be", "not", "support", "by", "the", "TextConsumer", "can", "be", "resolve", "by", "support", "TextUnmarshaler", "interface", "NUMBER", "NUMBER", "dupe", "swagger", "maybe", "fix", "NUMBER", "see", "following", "series", "of", "commands", "starts", "as", "async", "then", "I", "do", "an", "fn", "routes", "config", "set", "then", "it", "turns", "sync", "even", "though", "the", "func", "NUMBER", "yaml", "be", "set", "to", "async", "workspace", "vista", "services", "alert", "master", "fn", "routes", "i", "myapp", "alert", "config", "TWITTER_CONF_KEY", "Vwa", "NUMBER", "XdN", "NUMBER", "ShfHgE", "NUMBER", "EPXB", "NUMBER", "D", "TWITTER_CONF_SECRET", "dfgWNpJVi", "NUMBER", "uK", "NUMBER", "OMD", "NUMBER", "vYTSKfG", "NUMBER", "tKyE", "NUMBER", "UyM", "NUMBER", "ztiR", "NUMBER", "mwoKLQ", "NUMBER", "PF", "TWITTER_TOKEN_KEY", "NUMBER", "sIALgu", "NUMBER", "TRNbxyOqmfutYQpwivHM", "NUMBER", "TWITTER_TOKEN_SECRET", "R", "NUMBER", "cBgUvAJjIc", "NUMBER", "OCx", "NUMBER", "hSfEV", "NUMBER", "iZUIrDdUrAewYGSV", "NUMBER", "Dds", "NUMBER", "N", "format", "default", "idle_timeout", "NUMBER", "image", "carimura", "alert", "NUMBER", "memory", "NUMBER", "path", "alert", "timeout", "NUMBER", "type", "async", "workspace", "vista", "services", "alert", "master", "fn", "routes", "config", "set", "myapp", "alert", "TWITTER_CONF_KEY", "Vwa", "NUMBER", "XdN", "NUMBER", "ShfHgE", "NUMBER", "EPXB", "NUMBER", "myapp", "alert", "update", "TWITTER_CONF_KEY", "with", "Vwa", "NUMBER", "XdN", "NUMBER", "ShfHgE", "NUMBER", "EPXB", "NUMBER", "workspace", "vista", "services", "alert", "master", "fn", "routes", "i", "myapp", "alert", "config", "TWITTER_CONF_KEY", "Vwa", "NUMBER", "XdN", "NUMBER", "ShfHgE", "NUMBER", "EPXB", "NUMBER", "TWITTER_CONF_SECRET", "dfgWNpJVi", "NUMBER", "uK", "NUMBER", "OMD", "NUMBER", "vYTSKfG", "NUMBER", "tKyE", "NUMBER", "UyM", "NUMBER", "ztiR", "NUMBER", "mwoKLQ", "NUMBER", "PF", "TWITTER_TOKEN_KEY", "NUMBER", "sIALgu", "NUMBER", "TRNbxyOqmfutYQpwivHM", "NUMBER", "TWITTER_TOKEN_SECRET", "R", "NUMBER", "cBgUvAJjIc", "NUMBER", "OCx", "NUMBER", "hSfEV", "NUMBER", "iZUIrDdUrAewYGSV", "NUMBER", "Dds", "NUMBER", "N", "format", "default", "idle_timeout", "NUMBER", "image", "carimura", "alert", "NUMBER", "memory", "NUMBER", "path", "alert", "timeout", "NUMBER", "type", "sync", "workspace", "vista", "services", "alert", "master", "cat", "func", "NUMBER", "yaml", "name", "carimura", "alert", "version", "NUMBER", "runtime", "type", "async", "path", "alert", "so", "that", "the", "CLI", "can", "take", "care", "of", "bumping", "major", "version", "rather", "than", "manual", "edit", "of", "func", "NUMBER", "yaml", "Since", "func", "NUMBER", "yaml", "be", "checked", "in", "one", "thing", "that", "confuses", "me", "be", "the", "way", "it", "handles", "the", "dockerid", "NUMBER", "For", "example", "what", "if", "a", "developer", "wants", "to", "push", "the", "func", "to", "their", "own", "docker", "registry", "account", "or", "a", "dev", "account", "They", "would", "need", "to", "change", "the", "name", "in", "the", "func", "NUMBER", "yaml", "which", "then", "risks", "get", "checked", "into", "VCS", "NUMBER", "I", "m", "thinking", "there", "should", "be", "a", "way", "to", "separate", "the", "registry", "from", "the", "func", "NUMBER", "yaml", "maybe", "like", "kubectl", "handles", "contexts", "kubectl", "config", "set", "context", "NUMBER", "Here", "be", "the", "cheesiest", "possible", "way", "to", "fix", "this", "NUMBER", "find", "NUMBER", "name", "func", "NUMBER", "yaml", "exec", "perl", "pi", "NUMBER", "bak", "e", "s", "carimura", "TAG", "g", "print", "This", "seems", "reasonable", "NUMBER", "NUMBER", "fn", "start", "mount", "permission", "denied", "be", "you", "root", "Could", "not", "mount", "sys", "kernel", "security", "NUMBER", "AppArmor", "detection", "and", "privileged", "mode", "might", "break", "NUMBER", "mount", "permission", "denied", "be", "you", "root", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "datastore", "dialed", "datastore", "sqlite", "NUMBER", "max_idle_connections", "NUMBER", "______", "____", "___", "_", "__", "__", "_", "_", "_", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Serving", "Functions", "API", "on", "address", "NUMBER", "Things", "still", "work", "but", "the", "two", "duplicate", "warnings", "be", "jarring", "NUMBER", "i", "don", "t", "really", "think", "we", "want", "to", "suppress", "these", "kind", "of", "error", "or", "warnings", "because", "a", "lot", "of", "times", "that", "s", "exactly", "why", "it", "didn", "t", "run", "NUMBER", "this", "be", "mac", "shit", "NUMBER", "if", "we", "could", "add", "requisite", "flags", "to", "make", "mac", "happy", "to", "docker", "start", "that", "would", "be", "okay", "investigation", "appreciated", "NUMBER", "fortunately", "nobody", "in", "prod", "or", "doing", "a", "real", "test", "of", "fn", "will", "be", "run", "on", "mac", "just", "for", "get", "start", "for", "a", "lot", "of", "sigh", "devs", "NUMBER", "As", "rdallman", "point", "out", "lots", "of", "devs", "kicking", "the", "tires", "on", "macs", "before", "this", "ever", "makes", "it", "into", "production", "so", "we", "need", "a", "solution", "somewhere", "that", "makes", "it", "happy", "on", "a", "Mac", "out", "of", "the", "box", "NUMBER", "Can", "t", "have", "the", "second", "command", "most", "tire", "kickers", "run", "throw", "NUMBER", "lines", "of", "error", "NUMBER", "Requisite", "flags", "sound", "like", "a", "fine", "solution", "NUMBER", "carimura", "Can", "you", "clarify", "which", "docker", "you", "test", "this", "with", "on", "mac", "Using", "the", "current", "docker", "on", "mac", "with", "xhyve", "I", "don", "t", "get", "these", "error", "NUMBER", "I", "m", "curious", "if", "this", "was", "fix", "or", "if", "you", "re", "run", "boot", "NUMBER", "docker", "or", "something", "like", "that", "NUMBER", "I", "see", "mattstep", "mba", "fn", "mattstep", "go", "bin", "fn", "start", "INFO", "NUMBER", "datastore", "dialed", "datastore", "sqlite", "NUMBER", "max_idle_connections", "NUMBER", "INFO", "NUMBER", "no", "docker", "auths", "from", "config", "file", "find", "this", "be", "fine", "error", "open", "Users", "mattstep", "NUMBER", "dockercfg", "no", "such", "file", "or", "directory", "INFO", "NUMBER", "available", "memory", "ram", "NUMBER", "______", "____", "___", "_", "__", "__", "_", "_", "_", "v", "NUMBER", "INFO", "NUMBER", "Serving", "Functions", "API", "on", "address", "NUMBER", "hmm", "NUMBER", "mattstep", "tmp", "docker", "version", "Docker", "version", "NUMBER", "ce", "build", "afdb", "NUMBER", "d", "NUMBER", "tmp", "fn", "start", "mount", "permission", "denied", "be", "you", "root", "Could", "not", "mount", "sys", "kernel", "security", "NUMBER", "AppArmor", "detection", "and", "privileged", "mode", "might", "break", "NUMBER", "mount", "permission", "denied", "be", "you", "root", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "datastore", "dialed", "datastore", "sqlite", "NUMBER", "max_idle_connections", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "no", "docker", "auths", "from", "config", "file", "find", "this", "be", "fine", "error", "open", "root", "NUMBER", "dockercfg", "no", "such", "file", "or", "directory", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "available", "memory", "ram", "NUMBER", "______", "____", "___", "_", "__", "__", "_", "_", "_", "v", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Serving", "Functions", "API", "on", "address", "NUMBER", "docker", "for", "mac", "Version", "NUMBER", "ce", "mac", "NUMBER", "NUMBER", "Channel", "edge", "c", "NUMBER", "f", "NUMBER", "mattstep", "looks", "like", "you", "re", "run", "the", "binary", "directly", "not", "the", "docker", "container", "NUMBER", "treeder", "That", "makes", "a", "difference", "NUMBER", "Alright", "I", "can", "reproduce", "this", "now", "NUMBER", "because", "dind", "image", "be", "run", "without", "privileged", "flag", "so", "mounting", "sys", "kernel", "security", "fail", "cli", "start", "NUMBER", "go", "still", "refers", "to", "funcy", "function", "should", "that", "be", "fnproject", "function", "which", "possibly", "has", "a", "script", "somewhere", "like", "below", "LINK", "No", "longer", "the", "issue", "on", "Mac", "with", "Fn", "CLI", "version", "NUMBER", "fn", "start", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "start", "tracer", "url", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "datastore", "dialed", "datastore", "sqlite", "NUMBER", "max_idle_connections", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "no", "docker", "auths", "from", "config", "file", "find", "this", "be", "fine", "error", "open", "root", "NUMBER", "dockercfg", "no", "such", "file", "or", "directory", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "available", "memory", "availMemory", "NUMBER", "cgroupLimit", "NUMBER", "headRoom", "NUMBER", "totalMemory", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "sync", "and", "async", "reservations", "ramAsync", "NUMBER", "ramAsyncHWMark", "NUMBER", "ramSync", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Fn", "serving", "on", "NUMBER", "type", "full", "______", "____", "___", "_", "__", "__", "_", "_", "_", "v", "NUMBER", "confirmed", "those", "error", "be", "gone", "NUMBER", "there", "be", "some", "new", "Docker", "ones", "on", "mac", "that", "I", "think", "someone", "point", "out", "fn", "start", "can", "t", "create", "unix", "socket", "var", "run", "docker", "NUMBER", "sock", "device", "or", "resource", "busy", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "start", "tracer", "url", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "datastore", "dialed", "datastore", "sqlite", "NUMBER", "max_idle_connections", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "no", "docker", "auths", "from", "config", "file", "find", "this", "be", "fine", "error", "open", "root", "NUMBER", "dockercfg", "no", "such", "file", "or", "directory", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "available", "memory", "availMemory", "NUMBER", "cgroupLimit", "NUMBER", "headRoom", "NUMBER", "totalMemory", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "sync", "and", "async", "reservations", "ramAsync", "NUMBER", "ramAsyncHWMark", "NUMBER", "ramSync", "NUMBER", "______", "____", "___", "_", "__", "__", "_", "_", "_", "v", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "Fn", "serving", "on", "NUMBER", "type", "full", "Slightly", "jarring", "albeit", "less", "than", "the", "original", "ones", "NUMBER", "there", "be", "no", "more", "warnings", "only", "info", "log", "lines", "this", "issue", "be", "close", "mind", "work", "on", "this", "one", "denismakogon", "docs", "need", "a", "lot", "of", "work", "NUMBER", "deleting", "tasks", "endpoints", "NUMBER", "When", "the", "runtime", "be", "assumed", "to", "java", "LINK", "L", "NUMBER", "L", "NUMBER", "i", "NUMBER", "e", "NUMBER", "not", "explicitly", "set", "the", "pom", "NUMBER", "xml", "isn", "t", "created", "LINK", "L", "NUMBER", "L", "NUMBER", "and", "hence", "init", "fail", "LINK", "L", "NUMBER", "L", "NUMBER", "NUMBER", "denismakogon", "can", "I", "just", "create", "a", "new", "branch", "on", "upstream", "and", "submit", "the", "PR", "from", "it", "Looks", "good", "from", "our", "POV", "NUMBER", "Thanks", "NUMBER", "thanks", "Looks", "like", "was", "change", "from", "FORMAT", "to", "FN_FORMAT", "in", "NUMBER", "ccd", "NUMBER", "e", "LINK", "for", "server", "side", "function", "NUMBER", "Also", "I", "can", "t", "seem", "to", "find", "this", "anywhere", "but", "be", "there", "an", "explicit", "contract", "that", "state", "that", "FN_FORMAT", "will", "always", "be", "set", "even", "if", "it", "be", "default", "Or", "be", "the", "expectation", "that", "default", "should", "be", "assumed", "if", "FN_FORMAT", "be", "not", "set", "thanks", "i", "wasn", "t", "trying", "to", "kill", "anybody", "s", "puppies", "that", "s", "how", "i", "find", "it", "LINK", "diff", "c", "NUMBER", "dad", "NUMBER", "d", "NUMBER", "aa", "NUMBER", "e", "NUMBER", "e", "NUMBER", "L", "NUMBER", "From", "the", "perspective", "of", "a", "user", "of", "the", "fn", "platform", "while", "we", "developed", "the", "Java", "fn", "experience", "we", "start", "out", "by", "noticing", "that", "the", "format", "was", "stored", "in", "the", "FN_FORMAT", "variable", "then", "in", "PR", "NUMBER", "I", "notice", "it", "was", "be", "change", "to", "FORMAT", "as", "part", "of", "the", "change", "so", "I", "commented", "on", "it", "and", "it", "was", "change", "back", "to", "FN_FORMAT", "with", "NUMBER", "ccd", "NUMBER", "e", "which", "be", "just", "one", "of", "the", "commit", "within", "the", "PR", "NUMBER", "Apologies", "if", "this", "has", "cause", "confusion", "NUMBER", "From", "a", "usage", "perspective", "I", "ve", "always", "assumed", "the", "variable", "was", "intended", "to", "be", "FN_FORMAT", "but", "that", "s", "only", "by", "empirical", "observation", "NUMBER", "Am", "I", "wrong", "we", "can", "change", "our", "Java", "runtime", "once", "we", "converge", "on", "a", "defined", "contract", "for", "the", "format", "environment", "variable", "so", "personally", "I", "m", "not", "too", "attached", "to", "either", "name", "super", "wonky", "NUMBER", "easy", "to", "repro", "NUMBER", "workspace", "vista", "services", "prod", "fn", "apps", "create", "configbug", "Successfully", "created", "app", "configbug", "workspace", "vista", "services", "prod", "fn", "apps", "i", "configbug", "name", "configbug", "workspace", "vista", "services", "prod", "fn", "apps", "config", "set", "configbug", "TEST", "NUMBER", "configbug", "update", "TEST", "with", "NUMBER", "workspace", "vista", "services", "prod", "fn", "apps", "config", "set", "configbug", "TEST", "NUMBER", "error", "update", "app", "configuration", "App", "not", "find", "workspace", "vista", "services", "prod", "fn", "apps", "config", "set", "configbug", "TEST", "NUMBER", "configbug", "update", "TEST", "with", "NUMBER", "workspace", "vista", "services", "prod", "fn", "apps", "config", "set", "configbug", "TEST", "NUMBER", "error", "update", "app", "configuration", "App", "not", "find", "might", "be", "fix", "in", "later", "version", "as", "I", "m", "run", "against", "staging", "NUMBER", "fn", "version", "Client", "version", "NUMBER", "Server", "version", "NUMBER", "There", "needs", "to", "be", "a", "standard", "way", "across", "function", "for", "a", "developer", "or", "even", "user", "to", "understand", "what", "a", "function", "do", "what", "it", "s", "inputs", "outputs", "be", "etc", "without", "going", "through", "the", "code", "NUMBER", "Something", "like", "the", "following", "Name", "Draw", "Service", "Purpose", "Draws", "a", "box", "given", "an", "image", "URL", "and", "array", "of", "coordinates", "Expects", "Input", "id", "NUMBER", "image_url", "LINK", "alfa", "romeo", "NUMBER", "c", "us", "spec", "in", "the", "city", "back", "view", "NUMBER", "jpg", "countrycode", "us", "bucket", "my", "bucket", "rectangles", "startx", "NUMBER", "starty", "NUMBER", "endx", "NUMBER", "endy", "NUMBER", "Environment", "ACCESS", "SOMESTORAGEACCESSKEY", "SECRET", "SOMESTORAGESECRETKEY", "PUBNUB_SUBSCRIBE_KEY", "ASD", "NUMBER", "PUBNUB_PUBLISH_KEY", "QWE", "NUMBER", "HOSTNAME", "MYHOST", "Output", "Description", "Outputs", "image", "to", "bucket", "Obviously", "this", "be", "YAML", "but", "I", "could", "also", "see", "this", "as", "a", "standard", "format", "of", "docs", "at", "the", "beginning", "of", "the", "func", "file", "ala", "rdocs", "godocs", "etc", "NUMBER", "Ideally", "one", "could", "run", "a", "doc", "tool", "and", "create", "a", "func", "docs", "file", "of", "all", "function", "in", "a", "given", "directory", "or", "something", "similar", "to", "the", "way", "API", "docs", "be", "created", "NUMBER", "Maybe", "this", "could", "also", "be", "combined", "with", "the", "test", "stuff", "treeder", "be", "work", "on", "but", "although", "they", "dupe", "work", "inputs", "outputs", "they", "feel", "like", "different", "purposes", "docs", "vs", "automate", "ci", "test", "framework", "NUMBER", "This", "could", "also", "be", "an", "effort", "in", "collaboration", "with", "other", "func", "frameworks", "not", "just", "Fn", "NUMBER", "OFF", "Open", "Function", "Format", "thus", "Fn", "OFF", "treeder", "this", "be", "more", "for", "documentation", "and", "including", "inside", "the", "repo", "for", "all", "developers", "with", "code", "access", "NUMBER", "func", "NUMBER", "yaml", "be", "for", "actual", "settings", "values", "and", "thus", "to", "my", "knowledge", "not", "to", "be", "include", "in", "the", "repo", "NUMBER", "Also", "func", "NUMBER", "yaml", "doesn", "t", "include", "environment", "vars", "just", "config", "vars", "NUMBER", "oh", "i", "thought", "we", "discussed", "this", "and", "decided", "func", "NUMBER", "yaml", "would", "stay", "out", "of", "VCS", "s", "NUMBER", "side", "note", "some", "thoughts", "on", "this", "NUMBER", "NUMBER", "That", "said", "it", "still", "feels", "separate", "NUMBER", "func", "NUMBER", "yaml", "has", "actual", "values", "necessary", "to", "run", "what", "I", "m", "describing", "be", "documentation", "NUMBER", "furthermore", "this", "could", "be", "standard", "doc", "that", "other", "faas", "platforms", "can", "adopt", "NUMBER", "But", "let", "s", "get", "some", "other", "opinions", "NUMBER", "Also", "if", "we", "have", "output", "info", "we", "can", "show", "output", "JSON", "as", "wiring", "to", "input", "of", "another", "function", "etc", "NUMBER", "Got", "some", "ideas", "and", "work", "solution", "regard", "this", "topic", "NUMBER", "Function", "spec", "would", "look", "like", "yaml", "version", "NUMBER", "application", "name", "app", "config", "c", "NUMBER", "NUMBER", "helloworld", "description", "Functions", "spec", "that", "describes", "Fn", "powered", "serverless", "application", "function", "createUser", "handler", "handler", "NUMBER", "create", "events", "http", "method", "post", "fn", "file", "models", "func", "NUMBER", "yml", "first", "documentation", "summary", "Create", "User", "description", "Creates", "a", "user", "and", "then", "sends", "a", "generate", "password", "email", "requestBody", "schema", "file", "models", "PutDocumentRequest", "NUMBER", "json", "parameters", "name", "username", "description", "The", "username", "for", "a", "user", "to", "create", "required", "true", "in", "path", "schema", "type", "string", "pattern", "a", "z", "NUMBER", "NUMBER", "_", "name", "membershipType", "description", "The", "user", "s", "Membership", "Type", "required", "true", "in", "query", "schema", "type", "string", "enum", "premium", "standard", "responses", "NUMBER", "description", "create", "a", "user", "content", "application", "json", "schema", "file", "models", "PutDocumentResponse", "NUMBER", "json", "NUMBER", "description", "error", "content", "application", "json", "schema", "file", "models", "ErrorResponse", "NUMBER", "json", "It", "be", "an", "enhanced", "version", "of", "Swagger", "V", "NUMBER", "and", "least", "complex", "than", "OpenAPI", "v", "NUMBER", "itself", "NUMBER", "I", "made", "the", "tool", "that", "do", "the", "conversion", "between", "Function", "spec", "and", "OpenAPI", "v", "NUMBER", "LINK", "openapi", "v", "NUMBER", "denismakogon", "I", "think", "you", "re", "thinking", "of", "something", "else", "you", "re", "defining", "an", "API", "app", "not", "what", "a", "particular", "function", "expects", "NUMBER", "So", "let", "s", "start", "a", "new", "issue", "if", "you", "want", "to", "talk", "about", "that", "but", "my", "first", "question", "be", "going", "to", "be", "why", "not", "just", "use", "swagger", "openapi", "as", "be", "So", "there", "be", "at", "least", "two", "topics", "NUMBER", "We", "need", "to", "implement", "CLI", "feature", "that", "let", "developers", "generate", "OpenAPI", "spec", "from", "Fn", "application", "NUMBER", "NUMBER", "Function", "spec", "NUMBER", "don", "t", "merge", "this", "this", "be", "loosely", "what", "i", "m", "thinking", "for", "reworking", "the", "backend", "NUMBER", "i", "be", "kind", "of", "giving", "up", "on", "polishing", "the", "doc", "i", "could", "work", "on", "it", "for", "a", "week", "or", "two", "and", "have", "it", "make", "sense", "or", "i", "could", "just", "start", "write", "code", "and", "see", "what", "happens", "NUMBER", "if", "anyone", "sees", "anything", "blatant", "or", "has", "suggestions", "they", "would", "be", "welcome", "NUMBER", "have", "discussed", "this", "with", "treeder", "at", "length", "NUMBER", "at", "a", "minimum", "it", "highlights", "the", "current", "issue", "relatively", "well", "NUMBER", "i", "also", "believe", "it", "expresses", "a", "separation", "of", "layers", "specifically", "up", "top", "around", "http", "that", "has", "some", "clarity", "compared", "to", "the", "rest", "of", "the", "thing", "NUMBER", "__beware__", "going", "to", "work", "on", "this", "for", "a", "week", "or", "two", "i", "hope", "and", "i", "would", "appreciate", "an", "avoidance", "of", "any", "change", "in", "the", "api", "dir", "so", "that", "I", "could", "avoid", "trying", "to", "patch", "them", "in", "as", "I", "m", "likely", "change", "file", "and", "the", "structure", "significantly", "to", "the", "point", "where", "a", "rebase", "doesn", "t", "really", "work", "NUMBER", "I", "hate", "that", "this", "blocks", "everyone", "on", "that", "but", "i", "think", "it", "s", "worth", "it", "has", "be", "painful", "the", "way", "it", "be", "NUMBER", "there", "be", "a", "lot", "of", "things", "to", "do", "for", "the", "service", "stuff", "fnlb", "and", "cli", "so", "hopefully", "nobody", "be", "bored", "NUMBER", "an", "aside", "we", "have", "much", "work", "to", "do", "even", "after", "this", "in", "simply", "designing", "a", "scalable", "async", "system", "notably", "omitted", "see", "end", "NUMBER", "we", "basically", "need", "to", "rebuild", "a", "lot", "of", "the", "stuff", "we", "had", "for", "titan", "iron", "worker", "and", "we", "probably", "need", "to", "figure", "out", "how", "to", "use", "kafka", "since", "redis", "isn", "t", "going", "to", "scale", "too", "and", "figure", "out", "how", "to", "deal", "with", "their", "messaging", "semantics", "NUMBER", "this", "set", "of", "change", "will", "only", "be", "concerned", "with", "the", "execution", "of", "async", "tasks", "not", "in", "efficient", "scalable", "retrieval", "of", "them", "nor", "exactly", "once", "semantics", "around", "them", "NUMBER", "be", "going", "to", "make", "it", "at", "least", "once", "for", "now", "though", "since", "at", "most", "once", "be", "pretty", "useless", "as", "it", "stands", "NUMBER", "anyway", "feedback", "welcome", "NUMBER", "cc", "oracloud", "treeder", "denismakogon", "As", "usual", "you", "re", "impeccable", "rdallman", "the", "propose", "solution", "seems", "adequate", "NUMBER", "Perhaps", "I", "would", "try", "squash", "some", "layers", "to", "try", "having", "fewer", "of", "them", "but", "also", "I", "admit", "I", "lack", "the", "clarity", "and", "the", "context", "to", "back", "it", "up", "NUMBER", "I", "think", "this", "be", "a", "time", "to", "review", "part", "of", "the", "history", "of", "why", "things", "be", "as", "they", "be", "and", "make", "some", "product", "design", "decisions", "here", "NUMBER", "fn", "s", "predecessor", "suffered", "from", "push", "and", "pull", "regard", "of", "what", "it", "should", "be", "be", "spiritual", "successor", "to", "the", "IronWorker", "platform", "async", "cold", "a", "strong", "competitor", "to", "other", "FaaS", "in", "the", "market", "async", "sync", "hot", "aspirational", "to", "be", "horizontally", "scalable", "async", "MQ", "cold", "whether", "it", "should", "have", "or", "not", "scheduled", "tasks", "prioritized", "tasks", "and", "so", "on", "NUMBER", "I", "guess", "we", "can", "get", "the", "idea", "of", "the", "pressures", "NUMBER", "My", "suggestion", "be", "that", "before", "we", "go", "around", "and", "start", "rewriting", "code", "to", "re", "state", "what", "FN", "should", "actually", "be", "NUMBER", "During", "my", "small", "tenure", "in", "IronFunctions", "I", "push", "forward", "the", "vision", "that", "it", "should", "be", "a", "hot", "only", "and", "b", "sync", "only", "of", "course", "I", "fail", "NUMBER", "In", "the", "end", "I", "guess", "it", "be", "something", "that", "needs", "to", "be", "review", "by", "the", "powers", "that", "be", "NUMBER", "My", "reasons", "for", "a", "and", "b", "be", "a", "once", "we", "get", "proper", "wrappers", "in", "the", "http", "NUMBER", "ServerHTTP", "like", "fashion", "for", "every", "language", "we", "should", "support", "the", "idea", "of", "cold", "function", "that", "be", "use", "stdin", "stdout", "just", "once", "would", "be", "rendered", "obsolete", "NUMBER", "We", "didn", "t", "get", "there", "but", "now", "we", "re", "in", "a", "much", "better", "situation", "NUMBER", "We", "already", "have", "some", "wrappers", "let", "s", "write", "them", "just", "once", "for", "hot", "only", "NUMBER", "b", "sync", "only", "my", "rationale", "at", "the", "time", "and", "I", "be", "more", "than", "happy", "to", "change", "my", "view", "on", "this", "be", "that", "if", "you", "wanted", "async", "all", "you", "had", "to", "do", "be", "to", "place", "the", "request", "and", "close", "the", "connection", "NUMBER", "From", "the", "server", "perspective", "what", "s", "the", "difference", "of", "a", "sync", "request", "in", "which", "you", "just", "had", "a", "connection", "problem", "and", "an", "async", "task", "None", "NUMBER", "I", "know", "that", "the", "client", "side", "might", "wait", "for", "a", "TaskID", "of", "sorts", "but", "again", "this", "be", "a", "design", "decision", "you", "can", "either", "say", "that", "we", "don", "t", "give", "the", "TaskID", "back", "and", "go", "check", "it", "somewhere", "else", "or", "we", "can", "promptly", "return", "a", "response", "with", "the", "taskID", "in", "the", "headers", "and", "let", "the", "client", "decide", "on", "whether", "it", "should", "close", "the", "connection", "or", "not", "NUMBER", "Again", "from", "the", "server", "perspective", "once", "the", "response", "arrives", "if", "the", "writer", "be", "already", "close", "it", "will", "be", "a", "no", "op", "and", "it", "can", "just", "discard", "the", "bytes", "and", "move", "on", "NUMBER", "The", "practical", "consequences", "of", "these", "two", "product", "design", "choices", "be", "that", "we", "would", "have", "fewer", "moving", "parts", "in", "our", "clock", "work", "and", "push", "behavior", "decisions", "to", "the", "far", "edges", "of", "the", "application", "helping", "to", "make", "the", "kern", "of", "the", "fn", "much", "smaller", "NUMBER", "If", "that", "s", "not", "intuitive", "think", "of", "the", "following", "if", "all", "tasks", "be", "sync", "then", "the", "fn", "kern", "be", "only", "doing", "sync", "work", "NUMBER", "The", "edge", "of", "the", "system", "the", "HTTP", "interface", "can", "handle", "cleverly", "the", "response", "delivering", "if", "the", "client", "be", "present", "discard", "the", "response", "if", "not", "NUMBER", "Simpler", "easier", "to", "reason", "about", "NUMBER", "cc", "carimura", "thanks", "for", "the", "detailed", "response", "Perhaps", "I", "would", "try", "squash", "some", "layers", "to", "try", "having", "fewer", "of", "them", "yea", "it", "s", "possible", "after", "digging", "into", "it", "this", "happens", "NUMBER", "the", "main", "thing", "be", "pull", "everything", "out", "of", "http", "so", "that", "we", "can", "test", "it", "without", "having", "to", "make", "http", "request", "everything", "flows", "down", "instead", "of", "right", "now", "runner", "be", "kind", "of", "a", "fat", "layer", "NUMBER", "unfortunately", "with", "so", "many", "things", "pluggable", "reducing", "layers", "be", "hard", "but", "if", "we", "tie", "them", "together", "nicely", "then", "the", "hope", "be", "this", "isn", "t", "too", "painful", "it", "be", "right", "now", "NUMBER", "a", "once", "we", "get", "proper", "wrappers", "NUMBER", "the", "issue", "i", "see", "with", "this", "be", "that", "it", "still", "forces", "users", "to", "rebuild", "their", "code", "to", "add", "our", "bindings", "NUMBER", "i", "NUMBER", "e", "NUMBER", "you", "can", "t", "just", "use", "images", "you", "ve", "already", "made", "and", "yank", "them", "off", "docker", "hub", "and", "run", "them", "on", "fn", "NUMBER", "while", "this", "ultimately", "isn", "t", "important", "if", "somebody", "commit", "to", "use", "fn", "I", "do", "think", "it", "s", "important", "to", "have", "little", "friction", "in", "get", "start", "and", "having", "cold", "be", "for", "that", "NUMBER", "I", "ve", "given", "some", "thoughts", "on", "how", "we", "can", "maintain", "both", "somewhat", "seamlessly", "wrt", "the", "backend", "in", "NUMBER", "and", "this", "patch", "be", "work", "towards", "that", "a", "bit", "as", "well", "NUMBER", "b", "sync", "only", "i", "kind", "of", "agree", "with", "this", "NUMBER", "async", "feels", "very", "much", "tacked", "on", "and", "really", "doesn", "t", "work", "well", "at", "all", "see", "NUMBER", "NUMBER", "the", "entire", "async", "part", "of", "function", "be", "its", "own", "non", "trivial", "system", "we", "spent", "years", "build", "one", "of", "these", "and", "it", "s", "not", "really", "just", "as", "easy", "as", "throw", "things", "on", "a", "queue", "and", "picking", "them", "up", "when", "we", "have", "space", "to", "run", "them", "NUMBER", "i", "m", "not", "sure", "we", "really", "want", "to", "push", "this", "kind", "of", "computing", "model", "on", "people", "with", "fn", "i", "think", "maybe", "we", "just", "have", "a", "bias", "towards", "this", "due", "to", "our", "past", "though", "i", "agree", "that", "it", "s", "useful", "it", "s", "just", "NUMBER", "can", "it", "be", "part", "of", "another", "system", "be", "fn", "it", "for", "run", "docker", "container", "where", "do", "it", "stop", "what", "happens", "when", "people", "want", "to", "run", "hour", "long", "async", "tasks", "on", "fn", "and", "at", "the", "same", "time", "serve", "sync", "request", "be", "we", "going", "to", "do", "microservices", "too", "it", "would", "be", "nice", "to", "optimize", "for", "one", "use", "case", "sync", "not", "only", "for", "simplicity", "but", "for", "performance", "and", "user", "experience", "and", "simplicity", "and", "coherence", "NUMBER", "if", "we", "do", "keep", "it", "then", "we", "basically", "need", "to", "rebuild", "what", "was", "titan", "and", "we", "re", "a", "pretty", "far", "cry", "from", "that", "at", "the", "moment", "NUMBER", "that", "all", "be", "said", "it", "would", "be", "pretty", "easy", "to", "lop", "off", "async", "and", "many", "of", "the", "propose", "change", "in", "the", "doc", "be", "still", "relevant", "to", "make", "it", "easier", "for", "us", "to", "dev", "debug", "test", "sync", "function", "too", "NUMBER", "going", "to", "get", "start", "since", "there", "seems", "no", "red", "flags", "NUMBER", "we", "can", "keep", "the", "discussion", "open", "rdallman", "Is", "there", "anyway", "that", "I", "can", "async", "pair", "with", "you", "on", "this", "hey", "not", "sure", "NUMBER", "at", "the", "moment", "it", "s", "a", "lot", "of", "just", "hacking", "NUMBER", "i", "ll", "pop", "my", "head", "up", "once", "there", "s", "something", "to", "discuss", "or", "look", "at", "NUMBER", "i", "don", "t", "think", "anybody", "denies", "that", "it", "s", "useful", "see", "points", "that", "s", "not", "really", "the", "discussion", "NUMBER", "i", "don", "t", "really", "want", "to", "have", "a", "philosophical", "discussion", "around", "keep", "async", "how", "async", "should", "work", "here", "as", "it", "s", "not", "all", "that", "relevant", "aside", "from", "make", "async", "hit", "similar", "code", "paths", "as", "sync", "for", "the", "actual", "execution", "NUMBER", "treeder", "rdallman", "pretty", "much", "summarized", "the", "discussion", "NUMBER", "Right", "now", "we", "have", "too", "many", "execution", "paths", "all", "of", "them", "with", "their", "own", "minor", "quirks", "and", "nuances", "NUMBER", "The", "idea", "here", "be", "to", "have", "one", "execution", "path", "in", "a", "way", "that", "all", "use", "cases", "be", "appropriately", "catered", "for", "NUMBER", "treeder", "what", "you", "said", "be", "pretty", "much", "inline", "with", "what", "we", "ve", "agreed", "so", "far", "NUMBER", "The", "extra", "detail", "that", "also", "arose", "be", "that", "we", "d", "be", "use", "this", "model", "NUMBER", "Call", "model", "NUMBER", "Task", "still", "get", "the", "names", "right", "but", "I", "guess", "we", "ve", "be", "leaning", "model", "NUMBER", "Call", "object", "everywhere", "if", "it", "comes", "from", "sync", "the", "http", "layer", "would", "bake", "a", "model", "NUMBER", "Call", "and", "if", "it", "comes", "from", "async", "s", "MQ", "then", "we", "ll", "unserialized", "into", "a", "model", "NUMBER", "Call", "as", "well", "NUMBER", "This", "pretty", "much", "unifies", "the", "execution", "model", "bake", "a", "model", "NUMBER", "Call", "and", "find", "a", "way", "to", "feed", "with", "it", "NUMBER", "goal", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "why", "do", "a", "sync", "request", "need", "an", "agent", "inside", "of", "the", "agent", "be", "where", "hot", "container", "will", "be", "managed", "slots", "allocated", "driver", "executed", "if", "cold", "also", "atm", "we", "be", "storing", "calls", "and", "logs", "for", "sync", "function", "not", "sure", "if", "desirable", "maybe", "optional", "be", "better", "etc", "NUMBER", "the", "idea", "be", "that", "agent", "be", "just", "the", "thing", "that", "executes", "and", "stores", "information", "about", "a", "call", "NUMBER", "if", "another", "name", "would", "be", "more", "befitting", "i", "m", "amenable", "to", "change", "the", "thesaurus", "seem", "lacking", "on", "executor", "and", "i", "didn", "t", "want", "to", "get", "too", "medieval", "NUMBER", "so", "to", "answer", "A", "sync", "request", "can", "just", "go", "right", "through", "the", "system", "and", "either", "run", "or", "NUMBER", "not", "really", "quite", "a", "bit", "goes", "into", "run", "a", "sync", "request", "NUMBER", "the", "idea", "be", "that", "async", "well", "a", "thread", "reading", "the", "queue", "and", "sync", "http", "submit", "calls", "to", "the", "agent", "and", "the", "agent", "just", "ingests", "calls", "so", "that", "the", "execution", "paths", "be", "identical", "see", "LINK", "issuecomment", "NUMBER", "well", "explained", "NUMBER", "For", "instance", "a", "task", "NUMBER", "AfterComplete", "method", "could", "be", "call", "on", "the", "task", "and", "async", "would", "delete", "the", "MQ", "message", "while", "sync", "would", "do", "nothing", "NUMBER", "yep", "have", "moved", "to", "something", "similar", "to", "that", "instead", "of", "having", "a", "Controller", "at", "this", "point", "NUMBER", "NUMBER", "thanks", "for", "the", "feedback", "NUMBER", "we", "be", "work", "on", "flattening", "hot", "and", "cold", "atm", "and", "having", "streaming", "hotties", "so", "hot", "right", "now", "things", "look", "promising", "and", "a", "lot", "simpler", "already", "woo", "good", "idea", "NUMBER", "we", "re", "passing", "METHOD", "in", "the", "env", "vars", "in", "the", "headers", "so", "this", "be", "possible", "but", "yea", "we", "should", "make", "http", "request", "the", "same", "method", "too", "NUMBER", "GET", "be", "grabbing", "payload", "from", "query", "parameters", "weird", "saw", "this", "today", "NUMBER", "yea", "think", "we", "should", "just", "read", "the", "body", "for", "all", "of", "them", "the", "same", "no", "weird", "query", "param", "for", "GET", "this", "be", "b", "c", "most", "http", "libraries", "won", "t", "allow", "add", "a", "body", "to", "GET", "at", "least", "easily", "even", "though", "it", "be", "possible", "to", "do", "code", "LINK", "L", "NUMBER", "L", "NUMBER", "NUMBER", "I", "get", "what", "you", "re", "saying", "about", "allowing", "different", "roots", "of", "routes", "NUMBER", "this", "just", "seems", "like", "url", "rewriting", "between", "get", "the", "call", "and", "calling", "the", "user", "s", "function", "i", "NUMBER", "e", "NUMBER", "not", "too", "hard", "haven", "t", "thought", "about", "it", "enough", "to", "think", "of", "issue", "NUMBER", "denismakogon", "json", "fix", "the", "crux", "of", "this", "issue", "there", "s", "also", "some", "work", "on", "NUMBER", "Thanks", "for", "add", "this", "denismakogon", "NUMBER", "What", "about", "the", "case", "when", "you", "run", "fn", "run", "without", "specify", "and", "image", "but", "want", "to", "pass", "a", "memory", "flag", "For", "e", "NUMBER", "g", "NUMBER", "fn", "run", "memory", "NUMBER", "Shouldn", "t", "this", "override", "what", "s", "in", "the", "func", "NUMBER", "yaml", "both", "should", "work", "Let", "s", "say", "I", "m", "a", "client", "use", "FooLang", "to", "develop", "my", "own", "function", "NUMBER", "The", "platform", "be", "vibrant", "and", "undergoing", "near", "constant", "revision", "NUMBER", "For", "many", "customers", "constant", "API", "churn", "of", "the", "FooLang", "platform", "be", "going", "to", "be", "a", "turn", "off", "NUMBER", "As", "a", "customer", "I", "d", "like", "to", "be", "able", "to", "pin", "my", "release", "function", "to", "a", "particular", "version", "of", "a", "language", "runtime", "as", "a", "runtime", "supplier", "I", "d", "like", "to", "be", "able", "to", "ship", "a", "NUMBER", "latest", "NUMBER", "latest", "alongside", "NUMBER", "NUMBER", "etc", "NUMBER", "Possibly", "one", "simple", "way", "to", "do", "this", "be", "to", "add", "version", "or", "image", "pegging", "to", "the", "func", "NUMBER", "yaml", "NUMBER", "For", "instance", "possibly", "something", "like", "name", "mystuff", "myfunc", "version", "NUMBER", "timeout", "NUMBER", "s", "format", "http", "NUMBER", "etc", "NUMBER", "runtime", "java", "runtime", "run", "version", "NUMBER", "stable", "Maybe", "these", "keys", "runtime", "build", "image", "runtime", "run", "image", "etc", "NUMBER", "could", "be", "omitted", "from", "the", "standard", "fn", "init", "output", "but", "a", "savvy", "customer", "who", "cares", "about", "backwards", "API", "compatibility", "can", "set", "them", "if", "required", "NUMBER", "Incidentally", "this", "d", "also", "offer", "a", "simple", "avenue", "for", "runtime", "maintainers", "to", "set", "up", "simple", "integration", "test", "for", "new", "version", "of", "their", "runtimes", "NUMBER", "This", "d", "also", "be", "a", "pretty", "trivial", "mechanism", "for", "extending", "fn", "build", "to", "support", "a", "package", "only", "mode", "where", "it", "injects", "pre", "build", "stuff", "into", "a", "docker", "image", "of", "the", "end", "user", "s", "choosing", "NUMBER", "I", "think", "this", "was", "already", "do", "with", "build_image", "and", "run_image", "NUMBER", "LINK", "do", "some", "work", "to", "actually", "get", "rid", "of", "the", "heroku", "registry", "client", "NUMBER", "the", "latter", "commit", "update", "the", "deps", "NUMBER", "since", "our", "deps", "be", "broken", "if", "we", "don", "t", "strip", "the", "vendor", "directory", "and", "without", "get", "rid", "of", "heroku", "they", "were", "broken", "with", "stripping", "too", "p", "NUMBER", "s", "NUMBER", "we", "shouldn", "t", "have", "to", "strip", "vendor", "for", "our", "deps", "to", "work", "the", "cli", "package", "was", "not", "properly", "be", "omitted", "from", "the", "top", "level", "fn", "deps", "anymore", "so", "this", "remove", "a", "lot", "of", "deps", "from", "that", "too", "NUMBER", "the", "sirupsen", "thing", "was", "broken", "again", "too", "NUMBER", "it", "seems", "like", "we", "basically", "need", "to", "wait", "for", "all", "of", "our", "deps", "to", "update", "to", "lower", "case", "and", "then", "we", "can", "update", "to", "lower", "case", "NUMBER", "until", "then", "we", "need", "to", "keep", "upper", "case", "version", "of", "everything", "that", "uses", "logrus", "vendored", "NUMBER", "yes", "seriously", "NUMBER", "there", "be", "good", "rants", "to", "be", "find", "here", "LINK", "issuecomment", "NUMBER", "NUMBER", "so", "for", "the", "moment", "had", "to", "add", "some", "old", "version", "of", "things", "that", "update", "to", "lower", "case", "sirupsen", "until", "we", "be", "ready", "NUMBER", "if", "we", "get", "this", "in", "before", "NUMBER", "i", "ll", "rebase", "and", "update", "deps", "there", "or", "if", "vice", "versa", "i", "ll", "remove", "them", "here", "NUMBER", "just", "think", "of", "all", "the", "fun", "ya", "ll", "miss", "since", "we", "have", "vendor", "vendored", "_", "these", "be", "seriously", "a", "disaster", "to", "maintain", "and", "idk", "what", "to", "do", "about", "it", "and", "that", "has", "nothing", "to", "do", "with", "whether", "we", "download", "them", "or", "not", "NUMBER", "update", "them", "be", "impossible", "and", "happening", "all", "the", "time", "be", "the", "issue", "NUMBER", "and", "sirupsen", "NUMBER", "definitely", "sirupsen", "NUMBER", "and", "docker", "too", "should", "we", "freeze", "everything", "at", "its", "current", "state", "treeder", "denismakogon", "hibooboo", "NUMBER", "going", "to", "update", "w", "NUMBER", "stuff", "meow", "ok", "update", "NUMBER", "looks", "good", "now", "i", "think", "NUMBER", "should", "review", "LINK", "mostly", "bump", "denismakogon", "oracloud", "rdallman", "denismakogon", "CircleCI", "be", "happy", "NUMBER", "LGTM", "NUMBER", "thanks", "LINK", "was", "happening", "NUMBER", "and", "we", "don", "t", "want", "that", "to", "happen", "NUMBER", "this", "fix", "that", "NUMBER", "yes", "i", "realize", "we", "could", "probably", "put", "this", "in", "a", "script", "somewhere", "we", "could", "reference", "NUMBER", "no", "i", "d", "rather", "not", "get", "into", "that", "right", "now", "just", "trying", "to", "quick", "fix", "this", "and", "get", "on", "with", "my", "life", "please", "treeder", "or", "hibooboo", "NUMBER", "or", "denismakogon", "or", "whoever", "sees", "this", "quickie", "looking", "for", "an", "basically", "NUMBER", "see", "LINK", "will", "this", "resolve", "NUMBER", "at", "present", "we", "have", "no", "test", "suite", "for", "make", "api", "level", "test", "where", "we", "can", "test", "how", "things", "end", "up", "looking", "inside", "of", "the", "docker", "container", "NUMBER", "it", "may", "be", "impossible", "to", "do", "this", "without", "creating", "some", "images", "to", "test", "certain", "behaviors", "but", "it", "would", "be", "nice", "to", "avoid", "if", "possible", "mock", "docker", "client", "NUMBER", "and", "NUMBER", "basically", "need", "this", "kind", "of", "full", "stack", "api", "through", "container", "kind", "of", "test", "I", "don", "t", "think", "that", "we", "already", "do", "it", "makes", "it", "okay", "NUMBER", "In", "fact", "we", "should", "probably", "have", "NUMBER", "to", "make", "sure", "it", "all", "works", "NUMBER", "Perhaps", "what", "I", "mean", "be", "that", "I", "would", "prefer", "not", "to", "make", "a", "habit", "of", "it", "have", "a", "lot", "of", "different", "docker", "images", "just", "for", "our", "test", "suite", "NUMBER", "There", "be", "many", "reasons", "for", "this", "NUMBER", "docker", "be", "required", "to", "be", "install", "configured", "a", "certain", "way", "locally", "for", "test", "to", "run", "NUMBER", "if", "docker", "hub", "be", "down", "one", "be", "unable", "to", "run", "our", "test", "suite", "NUMBER", "one", "must", "download", "all", "required", "docker", "images", "to", "run", "test", "this", "takes", "both", "space", "and", "time", "NUMBER", "NUMBER", "if", "the", "images", "go", "out", "of", "sync", "locally", "for", "a", "dev", "then", "test", "can", "fail", "spuriously", "due", "to", "a", "certain", "dev", "not", "having", "the", "latest", "image", "as", "we", "be", "not", "pulling", "these", "images", "before", "run", "test", "see", "NUMBER", "none", "of", "the", "above", "should", "be", "issue", "NUMBER", "So", "I", "agree", "to", "disagree", "with", "concrete", "argument", "NUMBER", "Having", "an", "entirely", "separate", "test", "suite", "that", "runs", "a", "bunch", "of", "docker", "images", "isn", "t", "great", "either", "because", "then", "it", "means", "we", "re", "basically", "requiring", "devs", "to", "use", "that", "test", "suite", "otherwise", "they", "can", "t", "see", "if", "they", "didn", "t", "break", "anything", "even", "if", "the", "normal", "test", "suite", "be", "passing", "NUMBER", "Addresses", "NUMBER", "thanks", "it", "s", "important", "to", "print", "errs", "to", "stderr", "and", "return", "non", "zero", "exit", "code", "NUMBER", "I", "m", "ultimately", "fine", "with", "merge", "this", "as", "be", "but", "I", "think", "we", "could", "possibly", "do", "a", "little", "better", "on", "the", "future", "proof", "front", "if", "it", "s", "easy", "enough", "to", "do", "in", "our", "current", "cli", "or", "with", "minimal", "change", "NUMBER", "now", "that", "it", "s", "do", "this", "be", "less", "painful", "to", "add", "but", "future", "work", "will", "require", "every", "err", "to", "be", "wrapped", "in", "clierr", "NUMBER", "i", "haven", "t", "dug", "into", "the", "cli", "too", "much", "but", "be", "there", "a", "way", "for", "us", "to", "express", "every", "command", "such", "that", "at", "a", "higher", "level", "we", "can", "trap", "error", "and", "then", "only", "in", "NUMBER", "NUMBER", "places", "do", "we", "need", "to", "add", "clierr", "what", "i", "mean", "be", "something", "like", "very", "pseudo", "go", "NUMBER", "cmd", "getCmd", "os", "NUMBER", "Args", "err", "cmd", "NUMBER", "Do", "os", "NUMBER", "Args", "if", "err", "nil", "clierr", "err", "NUMBER", "then", "we", "only", "need", "to", "call", "clierr", "after", "Do", "in", "this", "example", "may", "require", "more", "than", "what", "i", "m", "trying", "to", "express", "with", "Do", "but", "I", "think", "this", "illustrates", "my", "point", "at", "least", "NUMBER", "i", "m", "not", "sure", "if", "urfave", "s", "cli", "package", "makes", "this", "easy", "to", "do", "either", "not", "ask", "to", "change", "cli", "libs", "ask", "if", "the", "one", "we", "have", "has", "an", "easy", "way", "to", "do", "this", "as", "i", "m", "not", "familiar", "with", "it", "myself", "NUMBER", "anyway", "not", "sure", "how", "easy", "it", "be", "to", "implement", "this", "in", "cli", "s", "current", "state", "but", "if", "it", "be", "then", "it", "would", "be", "preferable", "imo", "NUMBER", "thanks", "treeder", "that", "s", "what", "i", "was", "get", "at", "NUMBER", "should", "we", "close", "this", "in", "favor", "of", "NUMBER", "i", "NUMBER", "e", "NUMBER", "be", "it", "really", "that", "easy", "Before", "this", "change", "if", "I", "run", "fn", "call", "on", "a", "route", "that", "doesn", "t", "exist", "we", "get", "shell", "fn", "call", "i", "dont", "exist", "neither", "do", "i", "error", "message", "App", "not", "find", "we", "re", "now", "get", "shell", "fn", "call", "i", "dont", "exist", "neither", "do", "i", "Call", "ID", "Maybe", "nit", "picking", "but", "I", "think", "we", "should", "check", "for", "error", "before", "continuing", "with", "the", "happy", "path", "NUMBER", "I", "m", "guessing", "success", "would", "be", "indicated", "by", "a", "response", "code", "of", "NUMBER", "At", "the", "moment", "the", "error", "case", "be", "embedded", "within", "the", "async", "else", "block", "which", "be", "not", "too", "clear", "NUMBER", "denismakogon", "I", "see", "where", "you", "be", "come", "from", "NUMBER", "I", "can", "propose", "some", "alternatives", "a", "you", "could", "print", "to", "stderr", "so", "if", "someone", "doesn", "t", "want", "this", "output", "then", "one", "just", "redirect", "to", "dev", "null", "or", "b", "add", "a", "silent", "flag", "NUMBER", "What", "you", "say", "So", "now", "the", "behaviour", "for", "async", "function", "be", "that", "when", "you", "do", "fn", "call", "app", "route", "be", "that", "by", "default", "you", "get", "no", "output", "unless", "you", "specify", "the", "display", "call", "id", "NUMBER", "I", "think", "that", "s", "not", "optimal", "from", "a", "UX", "point", "of", "view", "NUMBER", "Personal", "opinion", "I", "think", "it", "would", "be", "best", "for", "call", "id", "to", "be", "printed", "to", "stderr", "for", "all", "success", "cases", "already", "suggested", "by", "oracloud", "NUMBER", "That", "s", "useful", "anyway", "as", "now", "if", "my", "function", "returns", "an", "output", "I", "ld", "like", "to", "parse", "I", "don", "t", "have", "to", "deal", "with", "the", "Call", "ID", "line", "NUMBER", "Thoughts", "denismakogon", "yes", "personally", "I", "think", "that", "s", "a", "better", "UX", "NUMBER", "Also", "we", "should", "output", "call", "id", "to", "stderr", "only", "NUMBER", "oracloud", "thoughts", "mhaji", "I", "vote", "for", "stderr", "NUMBER", "I", "defer", "to", "denismakogon", "the", "final", "decision", "however", "NUMBER", "denismakogon", "The", "reasons", "I", "think", "printing", "Call", "ID", "to", "stderr", "be", "NUMBER", "It", "s", "informational", "not", "part", "of", "the", "actual", "output", "NUMBER", "NUMBER", "If", "I", "want", "to", "pipe", "the", "output", "of", "fn", "call", "to", "something", "else", "for", "example", "jq", "then", "I", "don", "t", "want", "to", "have", "to", "deal", "with", "unstructured", "text", "NUMBER", "This", "be", "the", "behaviour", "of", "curl", "for", "e", "NUMBER", "g", "NUMBER", "If", "I", "add", "the", "v", "flag", "the", "request", "and", "response", "payloads", "be", "printed", "to", "stderr", "that", "what", "I", "can", "do", "curl", "jq", "etc", "NUMBER", "Concrete", "example", "bash", "fn", "call", "app", "route", "foo", "bar", "fn", "call", "app", "route", "jq", "NUMBER", "foo", "bar", "fn", "call", "app", "route", "display", "call", "id", "Call", "ID", "NUMBER", "BPM", "NUMBER", "FA", "NUMBER", "WG", "NUMBER", "foo", "bar", "fn", "call", "app", "route", "display", "call", "id", "jq", "NUMBER", "foo", "this", "will", "fail", "as", "Call", "ID", "line", "will", "go", "to", "stdout", "too", "parse", "error", "Invalid", "numeric", "literal", "at", "line", "NUMBER", "column", "NUMBER", "the", "behaviour", "I", "think", "we", "want", "be", "without", "having", "to", "specify", "display", "call", "id", "bash", "fn", "call", "app", "route", "display", "call", "id", "jq", "NUMBER", "foo", "Call", "ID", "NUMBER", "BPM", "NUMBER", "P", "NUMBER", "W", "NUMBER", "WGC", "NUMBER", "bar", "treeder", "I", "agree", "however", "since", "fn", "logs", "has", "be", "add", "see", "NUMBER", "if", "I", "do", "fn", "call", "on", "a", "sync", "function", "and", "it", "s", "successful", "how", "then", "should", "one", "get", "the", "call", "ID", "to", "look", "at", "the", "logs", "ping", "treeder", "Correct", "me", "if", "I", "m", "wrong", "but", "I", "think", "treeder", "might", "be", "referring", "to", "debugging", "synchronous", "invocation", "executed", "use", "fn", "call", "NUMBER", "If", "the", "user", "doesn", "t", "pass", "in", "display", "call", "id", "they", "won", "t", "get", "the", "call", "ID", "NUMBER", "As", "mention", "by", "denismakogon", "in", "NUMBER", "the", "user", "can", "run", "fn", "calls", "list", "which", "will", "give", "the", "user", "the", "call", "id", "fn", "calls", "list", "my", "app", "my", "route", "ID", "NUMBER", "BQ", "NUMBER", "NASG", "NUMBER", "WG", "NUMBER", "App", "my", "app", "Route", "my", "route", "Created", "At", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Started", "At", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Completed", "At", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Status", "success", "ID", "NUMBER", "BQ", "NUMBER", "NWWJ", "NUMBER", "WG", "NUMBER", "App", "my", "app", "Route", "my", "route", "Created", "At", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Started", "At", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Completed", "At", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Status", "success", "This", "may", "be", "sufficient", "NUMBER", "Personally", "I", "m", "still", "for", "display", "the", "call", "ID", "by", "default", "and", "that", "be", "printed", "to", "stderr", "but", "at", "least", "there", "be", "a", "way", "to", "get", "the", "call", "ID", "even", "for", "synchronous", "calls", "NUMBER", "I", "would", "personally", "say", "printed", "by", "default", "as", "it", "s", "going", "to", "stderr", "and", "won", "t", "be", "in", "the", "same", "stream", "as", "the", "function", "s", "output", "but", "I", "will", "leave", "the", "final", "decision", "up", "to", "you", "denismakogon", "I", "be", "owning", "the", "merge", "decision", "here", "NUMBER", "Let", "s", "have", "this", "merge", "NUMBER", "I", "do", "ask", "you", "please", "to", "own", "this", "changeset", "if", "problem", "arise", "in", "the", "future", "and", "adjust", "accordingly", "NUMBER", "Glad", "this", "was", "add", "I", "m", "trying", "to", "use", "it", "at", "the", "moment", "however", "a", "bit", "unclear", "where", "I", "get", "the", "call", "id", "from", "NUMBER", "The", "only", "place", "I", "can", "think", "of", "be", "either", "when", "an", "error", "happens", "and", "it", "s", "part", "of", "the", "response", "or", "by", "looking", "at", "the", "server", "logs", "NUMBER", "denismakogon", "cool", "thanks", "for", "that", "yes", "I", "can", "see", "the", "response", "header", "when", "I", "curl", "NUMBER", "Also", "good", "to", "find", "out", "about", "fn", "calls", "list", "just", "looks", "like", "a", "timeout", "to", "me", "NUMBER", "kind", "of", "hard", "to", "say", "from", "those", "logs", "that", "there", "s", "anything", "wrong", "with", "fn", "or", "your", "function", "NUMBER", "can", "you", "debug", "it", "there", "be", "a", "lot", "of", "know", "issue", "right", "now", "if", "you", "find", "anything", "new", "you", "could", "file", "it", "NUMBER", "error", "streaming", "docker", "stats", "for", "task", "this", "be", "not", "relevant", "to", "the", "task", "state", "at", "all", "whatsoever", "it", "s", "in", "another", "thread", "even", "we", "might", "consider", "to", "use", "docker", "logs", "TAG", "instead", "of", "what", "we", "have", "in", "func", "logger", "due", "to", "format", "json", "it", "s", "hard", "on", "i", "o", "on", "EBS", "drives", "especially", "NUMBER", "the", "issue", "here", "isn", "t", "our", "mechanism", "for", "get", "logs", "NUMBER", "at", "some", "point", "we", "have", "to", "cut", "off", "the", "logs", "and", "time", "the", "task", "out", "regardless", "of", "whether", "the", "container", "be", "run", "perhaps", "we", "can", "t", "kill", "the", "container", "NUMBER", "so", "not", "sure", "what", "this", "buys", "us", "NUMBER", "maybe", "func", "logger", "isn", "t", "flushing", "sure", "we", "should", "fix", "that", "if", "that", "s", "the", "case", "NUMBER", "it", "might", "happen", "that", "function", "writes", "to", "STDERR", "multiple", "times", "and", "function", "fail", "with", "some", "unexpect", "unhandle", "error", "log", "be", "not", "going", "to", "be", "created", "what", "do", "this", "even", "mean", "create", "call", "object", "before", "execution", "and", "update", "later", "this", "will", "require", "to", "introduce", "few", "more", "statuses", "except", "those", "we", "already", "have", "at", "least", "we", "d", "know", "where", "we", "stuck", "i", "suspect", "we", "don", "t", "want", "to", "do", "this", "for", "sync", "NUMBER", "it", "doesn", "t", "really", "buy", "us", "or", "the", "user", "anything", "and", "just", "add", "latency", "NUMBER", "users", "would", "prefer", "the", "call", "to", "run", "and", "not", "have", "a", "call", "id", "who", "cares", "it", "s", "small", "of", "cases", "they", "still", "should", "get", "response", "vs", "have", "add", "latency", "on", "every", "req", "NUMBER", "tbh", "it", "s", "not", "clear", "from", "your", "comments", "what", "the", "issue", "be", "at", "all", "NUMBER", "it", "seems", "to", "be", "implying", "that", "it", "s", "specific", "to", "this", "task", "you", "ve", "linked", "but", "it", "s", "not", "clear", "NUMBER", "could", "you", "please", "clearly", "define", "what", "your", "issue", "be", "as", "oppose", "to", "guessing", "what", "issue", "may", "be", "cause", "this", "mysterious", "issue", "of", "yours", "for", "example", "my", "task", "times", "out", "i", "don", "t", "get", "a", "call", "id", "there", "be", "no", "logs", "thanks", "NUMBER", "did", "the", "task", "produce", "any", "logs", "you", "can", "comment", "out", "the", "line", "to", "remove", "the", "container", "and", "run", "it", "locally", "again", "and", "then", "check", "docker", "logs", "among", "other", "ways", "NUMBER", "be", "the", "task", "properly", "uploaded", "as", "a", "hot", "function", "be", "the", "HOT", "env", "var", "be", "correctly", "pass", "into", "the", "function", "do", "the", "task", "run", "at", "all", "maybe", "i", "can", "think", "of", "more", "things", "to", "check", "i", "would", "say", "the", "context", "be", "exceeded", "and", "the", "db", "call", "would", "time", "out", "but", "we", "re", "actually", "not", "passing", "the", "context", "down", "into", "our", "sql", "request", "right", "now", "so", "it", "would", "write", "logs", "if", "there", "were", "any", "NUMBER", "if", "the", "task", "doesn", "t", "produce", "any", "logs", "then", "why", "be", "it", "a", "bug", "not", "to", "have", "logs", "i", "have", "no", "clue", "what", "you", "re", "get", "at", "now", "sorry", "NUMBER", "i", "m", "gonna", "unsubscribe", "from", "this", "unless", "this", "starts", "make", "sense", "soon", "and", "I", "d", "encourage", "starting", "a", "new", "ticket", "altogether", "about", "add", "a", "python", "wrapper", "since", "this", "issue", "be", "now", "nonsensical", "to", "anyone", "who", "may", "come", "across", "it", "for", "more", "innocent", "reasons", "NUMBER", "be", "this", "an", "issue", "specifically", "with", "the", "python", "wrapper", "code", "you", "be", "trying", "to", "add", "or", "NUMBER", "This", "would", "almost", "do", "within", "fdk", "python", "Closed", "via", "LINK", "python", "pull", "NUMBER", "looks", "great", "thanks", "shweet", "NUMBER", "seems", "like", "the", "docker", "push", "at", "the", "end", "fail", "not", "sure", "if", "creds", "issue", "we", "have", "this", "set", "up", "on", "circle", "yet", "you", "can", "just", "omit", "that", "for", "now", "if", "you", "d", "like", "Start", "fn", "server", "at", "port", "NUMBER", "and", "then", "try", "to", "start", "fnlb", "with", "default", "settings", "NUMBER", "fnlb", "nodes", "localhost", "NUMBER", "localhost", "NUMBER", "localhost", "NUMBER", "INFO", "NUMBER", "datastore", "dialed", "datastore", "sqlite", "NUMBER", "max_idle_connections", "NUMBER", "When", "sending", "SIGINT", "it", "reacts", "with", "corresponding", "message", "INFO", "NUMBER", "received", "signal", "signal", "interrupt", "FATA", "NUMBER", "server", "error", "error", "listen", "tcp", "NUMBER", "bind", "address", "already", "in", "use", "rdallman", "i", "just", "opened", "an", "issue", "planned", "to", "fix", "it", "later", "but", "you", "ve", "get", "it", "first", "It", "d", "be", "great", "to", "be", "able", "to", "treat", "a", "route", "as", "a", "prefix", "when", "matching", "rather", "than", "having", "to", "match", "exactly", "NUMBER", "For", "example", "r", "my_app", "some", "path", "prefix", "TAG", "TAG", "TAG", "myfn", "This", "doesn", "t", "mandate", "that", "path", "params", "to", "be", "evaluated", "by", "the", "fn", "platform", "as", "long", "as", "the", "entire", "request", "URL", "be", "pass", "into", "the", "function", "we", "can", "do", "that", "ourselves", "NUMBER", "This", "request", "would", "be", "especially", "useful", "for", "LINK", "we", "can", "define", "an", "application", "with", "a", "base", "url", "and", "many", "sub", "resources", "hosted", "in", "a", "single", "function", "NUMBER", "This", "be", "hard", "work", "at", "the", "moment", "as", "we", "need", "to", "create", "a", "lot", "of", "routes", "in", "the", "fn", "platform", "and", "be", "not", "able", "to", "dynamically", "add", "a", "route", "at", "runtime", "NUMBER", "Why", "wouldn", "t", "you", "be", "able", "to", "add", "a", "route", "at", "runtime", "mjg", "NUMBER", "Hi", "there", "NUMBER", "By", "dynamically", "I", "mean", "that", "the", "function", "wouldn", "t", "be", "able", "to", "create", "new", "routes", "for", "itself", "depending", "on", "eg", "something", "from", "a", "data", "store", "NUMBER", "For", "example", "a", "path", "prefix", "users", "TAG", "details", "URL", "where", "new", "TAG", "values", "can", "be", "created", "at", "runtime", "NUMBER", "AIUI", "the", "current", "behaviour", "be", "that", "all", "the", "possible", "values", "for", "TAG", "would", "need", "to", "have", "routes", "manually", "created", "NUMBER", "This", "isn", "t", "really", "a", "separate", "requirement", "we", "would", "like", "to", "have", "a", "single", "prefix", "eg", "r", "my_app", "some", "path", "prefix", "mapped", "to", "a", "function", "so", "that", "r", "my_app", "some", "path", "prefix", "TAG", "TAG", "TAG", "with", "params", "would", "be", "sent", "to", "it", "NUMBER", "One", "example", "of", "a", "use", "case", "for", "this", "be", "a", "function", "that", "serves", "a", "static", "file", "You", "d", "expect", "the", "filepath", "to", "look", "something", "like", "domain", "NUMBER", "local", "static", "main", "NUMBER", "css", "but", "this", "be", "currently", "not", "possible", "with", "fn", "NUMBER", "Instead", "I", "have", "to", "resort", "to", "hacky", "file", "serving", "aka", "domain", "NUMBER", "local", "static", "file", "main", "NUMBER", "css", "which", "works", "but", "be", "semantically", "bad", "NUMBER", "Another", "example", "be", "a", "function", "serving", "a", "Single", "Page", "Application", "that", "works", "with", "client", "side", "routing", "\u00e1", "la", "React", "Router", "NUMBER", "I", "want", "the", "root", "function", "to", "be", "able", "to", "read", "the", "path", "and", "respond", "based", "on", "that", "e", "NUMBER", "g", "NUMBER", "domain", "NUMBER", "local", "show", "all", "or", "domain", "NUMBER", "local", "show", "NUMBER", "handle", "by", "JavaScript", "and", "not", "server", "side", "Improving", "error", "handle", "while", "trying", "to", "reserve", "tasks", "at", "async", "runner", "Each", "time", "when", "MQ", "becomes", "unreachable", "HTTP", "GET", "tasks", "returned", "HTTP", "NUMBER", "and", "code", "was", "not", "handle", "this", "case", "except", "expecting", "networking", "error", "NUMBER", "After", "that", "it", "tried", "to", "unmarshal", "empty", "response", "body", "that", "cause", "another", "sort", "of", "an", "error", "NUMBER", "This", "patch", "triggers", "error", "based", "on", "http", "response", "code", "explicitly", "checking", "if", "response", "code", "be", "something", "unexpect", "not", "HTTP", "NUMBER", "OK", "NUMBER", "Response", "status", "code", "for", "tasks", "for", "change", "from", "NUMBER", "Accepted", "to", "NUMBER", "OK", "according", "to", "swagger", "doc", "NUMBER", "rdallman", "fix", "NUMBER", "rdallman", "isn", "t", "this", "good", "time", "to", "add", "one", "there", "s", "reason", "why", "we", "don", "t", "have", "one", "since", "all", "API", "test", "be", "depending", "on", "API", "server", "only", "think", "of", "validation", "test", "test", "for", "hot", "function", "would", "require", "to", "connect", "to", "Docker", "in", "order", "to", "ensure", "hot", "container", "be", "really", "there", "and", "no", "new", "container", "created", "NUMBER", "So", "here", "s", "a", "scenarios", "NUMBER", "Create", "config", "NUMBER", "Start", "hot", "fn", "NUMBER", "Change", "config", "NUMBER", "Expect", "config", "to", "change", "via", "function", "output", "python", "s", "os", "NUMBER", "environ", "or", "whatever", "lang", "you", "want", "to", "output", "operate", "system", "env", "no", "i", "don", "t", "think", "my", "patch", "relate", "to", "fix", "a", "certain", "behavior", "be", "a", "great", "time", "to", "ask", "me", "to", "go", "add", "an", "entire", "test", "harness", "NUMBER", "Namely", "in", "the", "past", "big", "PRs", "led", "to", "even", "longer", "review", "times", "and", "more", "porous", "to", "bug", "come", "through", "NUMBER", "Also", "a", "test", "harness", "namely", "in", "our", "case", "be", "not", "something", "trivial", "and", "needs", "to", "be", "discussed", "so", "it", "covers", "more", "than", "the", "case", "this", "PRs", "makes", "evident", "NUMBER", "hhexo", "denismakogon", "oracloud", "i", "ve", "update", "the", "code", "for", "setting", "env", "vars", "as", "request", "NUMBER", "wrt", "add", "a", "test", "i", "d", "prefer", "not", "to", "write", "a", "test", "that", "depends", "on", "an", "image", "checking", "for", "env", "vars", "since", "that", "be", "brittle", "and", "our", "current", "test", "suite", "be", "not", "well", "suited", "to", "make", "this", "kind", "of", "test", "easy", "otherwise", "NUMBER", "i", "ve", "test", "manually", "and", "there", "seems", "no", "defects", "in", "this", "code", "though", "I", "agree", "about", "add", "the", "ability", "to", "test", "this", "kind", "of", "thing", "more", "easily", "in", "the", "future", "NUMBER", "if", "you", "could", "take", "another", "pass", "it", "would", "be", "appreciated", "NUMBER", "if", "the", "test", "be", "a", "blocker", "then", "please", "close", "NUMBER", "denismakogon", "NUMBER", "Yep", "LGTM", "now", "too", "NUMBER", "thanks", "ok", "NUMBER", "let", "s", "try", "NUMBER", "seconds", "NUMBER", "minutes", "for", "sync", "async", "respectively", "in", "theory", "people", "could", "change", "their", "load", "balancers", "to", "have", "a", "NUMBER", "minute", "timeout", "and", "give", "less", "of", "a", "shit", "NUMBER", "maybe", "we", "should", "enforce", "these", "limits", "from", "fn", "service", "and", "leave", "the", "OSS", "version", "flexible", "i", "feel", "sweaty", "just", "thinking", "about", "the", "plumbing", "already", "NUMBER", "Let", "s", "make", "a", "decision", "soon", "on", "this", "and", "move", "out", "of", "discussion", "into", "implementation", "NUMBER", "Merged", "NUMBER", "I", "think", "this", "be", "still", "an", "issue", "for", "some", "odd", "reason", "NUMBER", "going", "to", "move", "into", "current", "milestone", "and", "close", "if", "I", "can", "t", "reproduce", "this", "week", "NUMBER", "bump", "for", "closure", "NUMBER", "fix", "this", "re", "open", "if", "wrong", "oracloud", "treeder", "Have", "do", "some", "homework", "on", "this", "now", "NUMBER", "If", "we", "be", "doing", "apps", "and", "routes", "by", "lexicographical", "ordering", "then", "provide", "a", "previous_cursor", "value", "be", "more", "challenging", "as", "we", "will", "have", "to", "get", "the", "entire", "previous", "page", "in", "order", "to", "provide", "the", "first", "value", "of", "that", "page", "or", "have", "another", "argument", "on", "top", "of", "cursor", "to", "provide", "to", "the", "api", "ala", "cursor_backwards", "to", "denote", "that", "we", "should", "get", "the", "previous", "NUMBER", "results", "based", "on", "the", "cursor", "provide", "rather", "than", "the", "next", "NUMBER", "So", "if", "we", "do", "choose", "this", "imo", "we", "should", "only", "implement", "forward", "paging", "for", "now", "and", "leave", "this", "open", "NUMBER", "also", "in", "trying", "to", "prepare", "for", "the", "eventual", "namespacing", "of", "apps", "routes", "as", "well", "as", "trying", "to", "make", "things", "somewhat", "forwards", "compatible", "with", "non", "sql", "dbs", "i", "m", "not", "sure", "if", "we", "should", "add", "ids", "to", "apps", "and", "routes", "and", "then", "identify", "them", "based", "on", "that", "NUMBER", "it", "would", "make", "things", "trickier", "from", "the", "perspective", "of", "a", "route", "path", "change", "i", "NUMBER", "e", "NUMBER", "do", "the", "id", "change", "be", "this", "a", "new", "route", "yes", "seems", "so", "NUMBER", "it", "would", "make", "the", "previous_cursor", "thing", "fall", "out", "NUMBER", "but", "for", "security", "ultimately", "be", "kind", "of", "where", "my", "head", "be", "at", "NUMBER", "i", "think", "our", "db", "schema", "for", "the", "service", "would", "have", "to", "add", "another", "field", "for", "a", "tenant", "id", "or", "we", "will", "have", "to", "prefix", "app_name", "with", "the", "tenant", "id", "which", "as", "far", "as", "attack", "vectors", "go", "i", "think", "our", "cursoring", "will", "hopefully", "only", "contain", "an", "app_name", "or", "route", "and", "not", "the", "full", "id", "and", "we", "can", "inject", "these", "NUMBER", "i", "think", "this", "will", "be", "secure", "but", "i", "haven", "t", "deliberated", "about", "it", "for", "very", "long", "if", "anything", "sticks", "out", "NUMBER", "anyway", "pressing", "on", "for", "now", "with", "For", "ordering", "I", "d", "say", "alphabetical", "for", "apps", "and", "routes", "calls", "and", "logs", "by", "date", "descending", "NUMBER", "with", "only", "next_cursor", "always", "a", "string", "not", "an", "int", "like", "twitter", "and", "gonna", "add", "time", "boxing", "of", "dates", "to", "calls", "logs", "api", "i", "NUMBER", "e", "NUMBER", "greater_than", "less_than", "open", "to", "name", "ideas", "merge", "closing", "for", "NUMBER", "discussion", "seems", "relate", "to", "NUMBER", "See", "also", "LINK", "LINK", "LINK", "do", "do", "LINK", "treeder", "was", "this", "completed", "You", "tell", "me", "NUMBER", "Doesn", "t", "seem", "like", "something", "we", "ll", "be", "pursuing", "anytime", "soon", "NUMBER", "ok", "you", "close", "it", "that", "s", "why", "i", "was", "ask", "NUMBER", "let", "s", "keep", "open", "as", "placeholder", "thx", "NUMBER", "I", "m", "not", "even", "sure", "what", "this", "issue", "be", "can", "you", "update", "it", "so", "we", "be", "clear", "what", "it", "be", "close", "in", "NUMBER", "or", "no", "need", "to", "add", "to", "routes", "delete", "too", "treeder", "i", "have", "an", "idea", "NUMBER", "once", "we", "make", "progress", "on", "NUMBER", "function", "spec", "fn", "run", "would", "know", "which", "ENV", "vars", "be", "required", "and", "grab", "them", "from", "the", "users", "local", "ENV", "and", "pass", "them", "through", "to", "Docker", "use", "e", "NUMBER", "Then", "I", "wouldn", "t", "need", "these", "annoying", "runlocal", "NUMBER", "sh", "LINK", "plates", "runlocal", "NUMBER", "sh", "scripts", "just", "to", "pass", "NUMBER", "ENV", "variables", "through", "every", "time", "I", "test", "locally", "NUMBER", "This", "may", "already", "solve", "this", "LINK", "Eg", "yaml", "version", "NUMBER", "runtime", "go", "entrypoint", "NUMBER", "func", "expects", "config", "name", "SECRET_", "NUMBER", "required", "true", "name", "SECRET_", "NUMBER", "re", "open", "until", "i", "can", "verify", "The", "root", "of", "this", "issue", "will", "probably", "never", "happen", "the", "follow", "up", "in", "the", "comments", "was", "do", "a", "long", "time", "ago", "NUMBER", "Please", "verify", "and", "close", "soon", "so", "we", "can", "keep", "our", "issue", "clean", "NUMBER", "Or", "just", "add", "to", "your", "to", "do", "list", "and", "reopen", "later", "if", "it", "s", "not", "the", "case", "NUMBER", "I", "think", "the", "root", "of", "the", "issue", "still", "makes", "sense", "so", "I", "d", "like", "to", "keep", "the", "issue", "open", "as", "discussion", "NUMBER", "thanks", "NUMBER", "cli", "issue", "re", "file", "in", "cli", "if", "still", "relevant", "not", "clear", "seems", "resolve", "closing", "for", "LINK", "denismakogon", "do", "you", "still", "see", "this", "I", "no", "longer", "get", "weird", "error", "since", "we", "be", "now", "properly", "masking", "non", "user", "friendly", "error", "in", "the", "front", "end", "NUMBER", "we", "still", "need", "this", "we", "also", "need", "to", "probably", "figure", "out", "how", "to", "make", "this", "stop", "across", "all", "the", "various", "backends", "we", "would", "prefer", "for", "them", "to", "wait", "and", "then", "possibly", "get", "hit", "with", "a", "timeout", "instead", "of", "just", "fail", "NUMBER", "but", "moving", "elsewhere", "NUMBER", "closing", "for", "now", "NUMBER", "carimura", "what", "if", "this", "will", "be", "a", "json", "object", "instead", "of", "env", "var", "per", "query", "parameter", "Let", "s", "say", "GET", "foo", "first", "joe", "last", "user", "will", "be", "parsed", "into", "first", "joe", "last", "user", "and", "will", "be", "available", "at", "function", "site", "as", "FN_QUERY_JSON", "or", "FN_QUERY", "env", "var", "Them", "you", "ll", "be", "able", "to", "work", "with", "in", "as", "with", "function", "STDIN", "rdallman", "hibooboo", "NUMBER", "thoughts", "Closing", "this", "in", "favor", "of", "LINK", "Going", "to", "close", "this", "because", "flow", "NUMBER", "Still", "want", "this", "open", "turns", "out", "this", "be", "the", "case", "NUMBER", "unfortunately", "the", "user", "container", "can", "t", "talk", "to", "anything", "NUMBER", "I", "m", "not", "sure", "that", "we", "really", "want", "NUMBER", "since", "we", "be", "managing", "container", "directly", "for", "good", "reason", "but", "we", "ll", "at", "least", "need", "to", "have", "some", "answer", "for", "intra", "k", "NUMBER", "s", "cluster", "networking", "stuff", "and", "we", "ll", "likely", "have", "to", "make", "a", "pod", "out", "of", "every", "container", "to", "do", "that", "which", "I", "m", "sure", "the", "overhead", "will", "be", "murderous", "and", "not", "worth", "it", "but", "I", "ll", "feign", "optimism", "NUMBER", "How", "to", "pass", "timeout", "value", "to", "docker", "run", "command", "as", "default", "time", "out", "be", "NUMBER", "m", "which", "be", "very", "less", "for", "windows", "container", "to", "start", "NUMBER", "LINK", "i", "think", "this", "can", "be", "close", "for", "now", "NUMBER", "let", "s", "open", "tickets", "for", "specific", "scenarios", "now", "NUMBER", "this", "be", "covered", "by", "this", "NUMBER", "NUMBER", "or", "at", "least", "it", "should", "be", "and", "all", "the", "docker", "calls", "respect", "a", "ctx", "except", "for", "removal", "which", "should", "be", "async", "NUMBER", "NUMBER", "closing", "since", "the", "other", "NUMBER", "highlight", "concrete", "work", "to", "do", "that", "resolve", "this", "vs", "simply", "highlight", "a", "bug", "NUMBER", "closing", "this", "one", "because", "of", "multiple", "reasons", "logstash", "doesn", "t", "really", "work", "as", "multi", "tenant", "log", "store", "we", "agree", "to", "use", "the", "s", "NUMBER", "compatible", "store", "for", "logs", "and", "calls", "the", "helpers", "have", "change", "a", "lot", "since", "this", "was", "file", "and", "this", "be", "a", "cli", "issue", "closing", "NUMBER", "rdallman", "isn", "t", "this", "do", "already", "fix", "now", "NUMBER", "should", "add", "test", "for", "this", "need", "to", "run", "through", "real", "backend", "not", "mock", "cli", "issue", "I", "did", "some", "test", "and", "I", "was", "not", "able", "to", "reproduce", "the", "issue", "plus", "I", "looked", "at", "the", "code", "and", "the", "signal", "be", "managed", "correctly", "LINK", "L", "NUMBER", "and", "we", "delete", "the", "temporary", "Dockerfile", "with", "defer", "LINK", "L", "NUMBER", "To", "me", "the", "issue", "can", "be", "close", "as", "fix", "NUMBER", "I", "don", "t", "understand", "why", "the", "bug", "be", "open", "against", "the", "fn", "project", "in", "my", "understanding", "build", "and", "run", "be", "performed", "by", "the", "cli", "therefore", "I", "expected", "to", "see", "this", "as", "a", "cli", "issue", "be", "I", "right", "have", "a", "sneaking", "suspicion", "our", "loitering", "issue", "has", "change", "to", "leaving", "around", "intermediate", "build", "images", "instead", "of", "docker", "file", "now", "but", "that", "s", "not", "quite", "this", "NUMBER", "thanks", "for", "investigating", "I", "believe", "you", "cracked", "this", "one", "reclaro", "This", "be", "where", "I", "be", "going", "with", "this", "NUMBER", "Posting", "for", "visibility", "and", "feedback", "Should", "be", "a", "tool", "to", "test", "a", "know", "point", "of", "the", "system", "can", "handle", "x", "Profile", "and", "see", "what", "a", "point", "of", "pressure", "execution", "times", "the", "system", "can", "do", "well", "NUMBER", "The", "profiles", "that", "it", "generates", "test", "will", "track", "these", "measures", "Amount", "of", "concurrent", "function", "ex", "NUMBER", "hitting", "over", "and", "over", "Amount", "of", "total", "runs", "ex", "NUMBER", "calls", "to", "a", "function", "or", "NUMBER", "Rate", "of", "error", "how", "many", "error", "NUMBER", "calls", "or", "NUMBER", "or", "all", "Uses", "a", "sync", "async", "cold", "hot", "function", "Just", "sync", "cold", "to", "start", "NUMBER", "Tracks", "Latency", "per", "request", "For", "sync", "latency", "be", "time", "from", "make", "call", "to", "having", "response", "NUMBER", "For", "async", "latency", "be", "time", "from", "make", "call", "to", "resp", "w", "call", "id", "NUMBER", "As", "well", "as", "time", "it", "took", "to", "execute", "once", "it", "has", "executed", "NUMBER", "Will", "do", "average", "Max", "p", "NUMBER", "latency", "NUMBER", "Compare", "Latencies", "across", "different", "amounts", "of", "concurrent", "calls", "NUMBER", "Ex", "latency", "w", "NUMBER", "concurrent", "vs", "NUMBER", "The", "above", "should", "make", "it", "so", "that", "we", "can", "easily", "say", "our", "system", "be", "performing", "at", "one", "level", "of", "throughput", "and", "when", "we", "make", "change", "test", "to", "see", "if", "that", "change", "for", "better", "or", "worse", "and", "be", "able", "to", "work", "on", "make", "it", "better", "over", "time", "NUMBER", "sounds", "good", "to", "me", "NUMBER", "track", "total", "time", "to", "complete", "x", "will", "most", "likely", "be", "enough", "to", "get", "a", "read", "out", "percentiles", "of", "latency", "inside", "of", "that", "be", "important", "to", "track", "as", "well", "as", "noted", "NUMBER", "avg", "throughput", "would", "be", "cool", "too", "but", "since", "we", "re", "capping", "memory", "it", "seems", "like", "this", "will", "trend", "towards", "that", "capacity", "but", "maybe", "we", "should", "ensure", "that", "NUMBER", "I", "think", "hhexo", "and", "co", "NUMBER", "be", "doing", "this", "for", "flow", "we", "can", "likely", "reuse", "the", "framework", "at", "least", "I", "can", "think", "of", "numerous", "bug", "we", "ll", "run", "into", "but", "the", "server", "isn", "t", "really", "polished", "wrt", "the", "api", "so", "that", "seems", "more", "important", "NUMBER", "We", "currently", "have", "an", "ad", "hoc", "framework", "that", "we", "re", "still", "work", "on", "see", "LINK", "load", "test", "it", "s", "a", "private", "repo", "but", "you", "should", "have", "access", "I", "think", "NUMBER", "One", "of", "the", "problem", "we", "re", "having", "be", "to", "figure", "out", "what", "a", "representative", "load", "for", "flow", "be", "how", "be", "a", "typical", "graph", "structured", "however", "you", "probably", "don", "t", "have", "that", "problem", "for", "general", "function", "you", "just", "run", "tons", "of", "them", "NUMBER", "I", "imagine", "that", "for", "hot", "function", "once", "you", "saturate", "the", "container", "space", "N", "container", "per", "node", "where", "N", "memory", "memory", "per", "container", "your", "parallelism", "will", "be", "maxed", "out", "so", "you", "should", "be", "able", "to", "easily", "estimate", "what", "the", "results", "of", "a", "test", "should", "be", "and", "detect", "any", "difference", "NUMBER", "We", "re", "still", "in", "the", "process", "of", "get", "to", "the", "point", "where", "I", "can", "max", "out", "that", "theoretical", "capacity", "of", "an", "fn", "cluster", "for", "single", "flows", "we", "be", "still", "seeing", "some", "kind", "of", "bug", "where", "the", "return", "message", "from", "the", "graph", "actor", "doesn", "t", "come", "back", "to", "the", "REST", "api", "s", "Ask", "future", "NUMBER", "That", "s", "one", "distinct", "failure", "the", "actual", "ramp", "up", "other", "wise", "looks", "okay", "although", "I", "be", "still", "get", "to", "the", "point", "of", "driving", "it", "hard", "enough", "to", "see", "an", "fn", "backlog", "build", "up", "NUMBER", "Yesterday", "I", "came", "up", "with", "some", "considerations", "after", "I", "hammered", "an", "Fn", "node", "trying", "to", "run", "function", "to", "create", "many", "many", "Flows", "in", "a", "short", "time", "NUMBER", "As", "far", "as", "I", "know", "I", "may", "be", "wrong", "Fn", "s", "policy", "for", "determining", "the", "number", "of", "concurrent", "container", "be", "based", "on", "some", "function", "of", "memory", "NUMBER", "On", "a", "reasonably", "sized", "Fn", "node", "I", "might", "have", "given", "NUMBER", "GB", "of", "memory", "to", "Fn", "which", "means", "that", "if", "each", "function", "be", "by", "default", "limited", "to", "NUMBER", "MB", "in", "theory", "I", "could", "run", "up", "to", "NUMBER", "concurrent", "function", "container", "NUMBER", "I", "don", "t", "know", "if", "that", "theoretical", "limit", "be", "reached", "but", "I", "have", "seen", "the", "number", "of", "container", "reach", "at", "least", "NUMBER", "in", "my", "test", "when", "I", "observed", "it", "so", "let", "s", "go", "with", "the", "theory", "NUMBER", "The", "problem", "here", "be", "that", "on", "the", "machine", "I", "might", "only", "have", "a", "small", "number", "of", "CPUs", "say", "NUMBER", "CPUs", "which", "be", "actually", "NUMBER", "threads", "NUMBER", "Assume", "that", "my", "function", "usually", "runs", "in", "NUMBER", "second", "so", "I", "gave", "it", "a", "generous", "timeout", "of", "NUMBER", "seconds", "NUMBER", "Also", "assume", "that", "the", "scheduler", "be", "fair", "and", "each", "container", "gets", "an", "equal", "share", "of", "the", "CPU", "time", "NUMBER", "In", "such", "a", "configuration", "of", "container", "that", "CPU", "share", "be", "NUMBER", "NUMBER", "NUMBER", "processors", "per", "container", "NUMBER", "My", "function", "run", "in", "such", "a", "configuration", "would", "take", "on", "average", "handwaving", "the", "fact", "that", "scheduling", "be", "quantized", "rather", "than", "continuous", "NUMBER", "NUMBER", "NUMBER", "seconds", "NUMBER", "It", "would", "then", "very", "likely", "time", "out", "before", "it", "s", "finished", "NUMBER", "And", "this", "be", "without", "considering", "the", "overhead", "that", "Docker", "add", "when", "starting", "a", "lot", "of", "container", "NUMBER", "Anecdotally", "Docker", "gets", "slower", "the", "more", "container", "be", "alive", "NUMBER", "I", "admit", "I", "don", "t", "have", "precise", "numbers", "here", "mostly", "because", "my", "focus", "was", "test", "Flow", "rather", "than", "Fn", "NUMBER", "However", "I", "worry", "that", "function", "be", "actually", "CPU", "bound", "and", "I", "propose", "that", "one", "of", "the", "outcomes", "of", "load", "test", "for", "Fn", "should", "be", "to", "find", "out", "how", "much", "that", "be", "a", "problem", "NUMBER", "I", "would", "recommend", "a", "test", "based", "on", "a", "function", "with", "a", "know", "deterministic", "single", "threaded", "duration", "measuring", "how", "slower", "it", "gets", "when", "more", "container", "be", "around", "NUMBER", "I", "think", "this", "would", "be", "very", "important", "feedback", "for", "Fn", "s", "scaling", "policy", "NUMBER", "hhexo", "I", "agree", "that", "it", "s", "very", "likely", "for", "fn", "nodes", "to", "be", "cpu", "bound", "more", "so", "than", "memory", "bound", "obviously", "dependent", "on", "workload", "but", "I", "think", "it", "s", "likely", "the", "normal", "case", "NUMBER", "I", "ve", "made", "a", "comment", "LINK", "issuecomment", "NUMBER", "to", "do", "something", "about", "this", "NUMBER", "we", "_should_", "be", "able", "to", "check", "this", "when", "trying", "to", "create", "a", "new", "slot", "note", "not", "exist", "slot", "that", "be", "free", "and", "queue", "it", "or", "NUMBER", "so", "that", "the", "function", "could", "run", "elsewhere", "NUMBER", "do", "this", "seem", "like", "a", "good", "idea", "as", "far", "as", "load", "test", "it", "would", "be", "great", "to", "save", "the", "cpu", "contended", "workload", "presented", "from", "the", "current", "test", "and", "use", "it", "against", "a", "version", "of", "fn", "that", "attempts", "to", "apply", "back", "pressure", "when", "the", "cpu", "be", "saturated", "to", "see", "if", "things", "be", "faster", "slower", "this", "will", "give", "us", "an", "obvious", "path", "forward", "NUMBER", "this", "ticket", "isn", "t", "provide", "very", "much", "value", "and", "we", "have", "address", "the", "cpu", "concerns", "in", "NUMBER", "I", "see", "multiple", "tracks", "here", "benchmarking", "CI", "like", "load", "test", "for", "verification", "test", "thresholds", "each", "of", "these", "useful", "in", "its", "own", "right", "if", "we", "break", "out", "and", "do", "any", "of", "those", "we", "can", "make", "separate", "more", "specific", "tickets", "for", "them", "NUMBER", "most", "people", "I", "ve", "seen", "to", "date", "have", "be", "use", "a", "standard", "http", "benchmarking", "framework", "they", "be", "vast", "after", "setting", "up", "some", "routes", "and", "then", "watching", "for", "fireworks", "NUMBER", "Assume", "we", "can", "close", "this", "with", "new", "helm", "charts", "NUMBER", "still", "disorganized", "NUMBER", "good", "to", "have", "placeholder", "ticket", "until", "we", "come", "up", "w", "better", "system", "NUMBER", "think", "this", "might", "have", "be", "that", "Docker", "image", "caching", "issue", "that", "I", "hadn", "t", "figured", "out", "at", "this", "point", "NUMBER", "users", "can", "send", "in", "headers", "on", "the", "request", "that", "get", "pass", "down", "now", "without", "our", "prefixing", "of", "HEADER_", "i", "NUMBER", "e", "NUMBER", "so", "Content", "Type", "and", "Content", "Length", "be", "useful", "NUMBER", "for", "any", "non", "http", "format", "assuming", "that", "this", "would", "be", "useless", "and", "can", "t", "imagine", "a", "scenario", "where", "the", "request", "to", "call", "a", "container", "would", "specify", "a", "Content", "Type", "only", "to", "want", "it", "to", "be", "rewritten", "before", "passing", "to", "the", "container", "close", "denismakogon", "can", "we", "close", "this", "Yes", "since", "it", "didn", "t", "find", "anyone", "interested", "in", "it", "NUMBER", "think", "this", "be", "still", "support", "works", "hibooboo", "NUMBER", "It", "do", "not", "work", "if", "that", "be", "your", "question", "NUMBER", "Will", "be", "doing", "this", "as", "part", "of", "node", "fdk", "s", "I", "can", "pick", "this", "up", "and", "put", "something", "in", "LINK", "How", "to", "set", "the", "FN_REGISTRY", "variable", "appropriately", "run", "a", "registry", "NUMBER", "container", "to", "use", "as", "a", "demo", "setting", "insecure", "registries", "if", "necessary", "Deploying", "and", "use", "a", "private", "image", "Using", "docker", "login", "logout", "to", "authenticate", "against", "a", "private", "registry", "and", "deploy", "function", "to", "it", "optional", "how", "do", "fn", "server", "deal", "with", "registry", "auth", "Some", "relevant", "convo", "from", "today", "Chad", "Arimura", "NUMBER", "NUMBER", "i", "m", "totally", "blanking", "on", "something", "NUMBER", "trying", "to", "connect", "to", "wcr", "NUMBER", "io", "from", "dev", "cluster", "to", "pull", "images", "but", "forget", "how", "to", "pass", "creds", "NUMBER", "func", "be", "deployed", "NUMBER", "fn", "call", "demo", "hello", "error", "message", "Failed", "to", "pull", "image", "wcr", "NUMBER", "io", "iron", "hello", "NUMBER", "pull", "access", "denied", "for", "wcr", "NUMBER", "io", "iron", "hello", "repository", "do", "not", "exist", "or", "may", "require", "docker", "login", "i", "feel", "like", "this", "be", "automatic", "with", "docker", "hub", "NUMBER", "Travis", "Reeder", "NUMBER", "NUMBER", "it", "s", "a", "config", "thing", "sec", "Chad", "Arimura", "NUMBER", "NUMBER", "just", "saw", "Reed", "approve", "this", "LINK", "Travis", "Reeder", "NUMBER", "NUMBER", "it", "s", "DOCKER_AUTH", "looks", "like", "we", "don", "t", "have", "good", "docs", "on", "it", "though", "Chad", "Arimura", "NUMBER", "NUMBER", "get", "it", "NUMBER", "that", "s", "the", "token", "i", "presume", "Travis", "Reeder", "NUMBER", "NUMBER", "think", "it", "s", "more", "than", "that", "it", "s", "a", "json", "snippet", "i", "think", "Reed", "Allman", "NUMBER", "NUMBER", "wcr", "NUMBER", "io", "be", "public", "tho", "don", "t", "need", "all", "that", "right", "Travis", "Reeder", "NUMBER", "NUMBER", "for", "private", "images", "Chad", "Arimura", "NUMBER", "NUMBER", "private", "image", "Travis", "Reeder", "NUMBER", "NUMBER", "doesn", "t", "matter", "if", "reg", "be", "public", "Reed", "Allman", "NUMBER", "NUMBER", "ok", "thought", "it", "was", "public", "image", "Chad", "Arimura", "NUMBER", "NUMBER", "don", "t", "think", "so", "but", "try", "this", "docker", "pull", "wcr", "NUMBER", "io", "iron", "hello", "NUMBER", "Reed", "Allman", "NUMBER", "NUMBER", "i", "think", "you", "can", "embed", "LINK", "TAG", "TAG", "wcr", "NUMBER", "io", "TAG", "TAG", "Travis", "Reeder", "NUMBER", "NUMBER", "i", "believe", "it", "s", "a", "NUMBER", "dockercfg", "file", "as", "a", "sstring", "probably", "not", "smart", "to", "put", "that", "in", "the", "image", "URL", "Reed", "Allman", "NUMBER", "NUMBER", "storing", "creds", "in", "fn", "isn", "t", "a", "great", "idea", "yea", "but", "i", "think", "it", "works", "Travis", "Reeder", "NUMBER", "NUMBER", "creds", "in", "fn", "better", "than", "putting", "it", "in", "the", "image", "URL", "Reed", "Allman", "NUMBER", "NUMBER", "that", "s", "what", "i", "meant", "the", "DOCKER_AUTH", "stuff", "hasn", "t", "be", "test", "in", "forever", "may", "need", "fix", "Chad", "Arimura", "NUMBER", "NUMBER", "get", "it", "NUMBER", "so", "private", "images", "not", "ready", "for", "primetime", "NUMBER", "Reed", "Allman", "NUMBER", "NUMBER", "it", "worked", "at", "one", "point", "just", "unsure", "if", "it", "still", "do", "Chad", "Arimura", "NUMBER", "NUMBER", "ya", "I", "hear", "you", "NUMBER", "no", "docs", "though", "not", "do", "etc", "NUMBER", "so", "I", "ll", "make", "a", "non", "urgent", "ticket", "to", "work", "on", "this", "NUMBER", "oh", "hey", "LINK", "I", "think", "we", "need", "to", "support", "this", "in", "the", "app", "function", "configs", "eg", "fn", "NUMBER", "config", "set", "DOCKER_AUTH", "REG", "TOKEN", "Need", "a", "hashed", "secure", "token", "though", "not", "the", "username", "password", "base", "NUMBER", "d", "that", "may", "be", "in", "your", "NUMBER", "dockercfg", "NUMBER", "Can", "we", "make", "JWT", "tokens", "and", "use", "those", "LINK", "More", "reading", "LINK", "registry", "issue", "NUMBER", "that", "convo", "be", "confusing", "NUMBER", "this", "covers", "all", "of", "that", "more", "succinctly", "LINK", "pullrequestreview", "NUMBER", "yes", "but", "NUMBER", "doesn", "t", "cover", "private", "images", "NUMBER", "I", "think", "that", "s", "whats", "miss", "still", "NUMBER", "specifically", "referring", "to", "the", "comment", "highlight", "how", "to", "configure", "fn", "server", "see", "link", "closing", "for", "NUMBER", "which", "has", "a", "better", "description", "LINK", "Closing", "because", "flow", "NUMBER", "no", "idea", "why", "ya", "know", "some", "people", "still", "have", "to", "deal", "with", "dynamically", "linked", "libraries", "we", "re", "gonna", "do", "this", "dk", "why", "it", "get", "close", "rdallman", "Probably", "better", "include", "CPU", "RAM", "into", "calls", "response", "yea", "not", "clear", "from", "description", "but", "I", "agree", "they", "re", "also", "get", "spurted", "to", "prometheus", "now", "too", "NUMBER", "closing", "see", "LINK", "go", "curious", "what", "rdallman", "s", "comments", "were", "on", "here", "NUMBER", "LINK", "node", "Allows", "to", "update", "route", "without", "func", "NUMBER", "yml", "file", "NUMBER", "Implements", "NUMBER", "need", "to", "close", "this", "PR", "and", "reopen", "to", "make", "CI", "pass", "NUMBER", "treeder", "rdallman", "denismakogon", "rdallman", "Rebased", "NUMBER", "denismakogon", "What", "ever", "comments", "you", "Left", "I", "didn", "t", "get", "to", "see", "NUMBER", "Can", "you", "leave", "them", "again", "denismakogon", "Thanks", "There", "were", "no", "comments", "from", "me", "NUMBER", "All", "good", "NUMBER"], "text_count": [0, 48645, 11844, 5142, 2310, 1538, 2412, 9, 396, 6677, 6583, 12513, 7216, 5578, 5238, 1797, 0, 0, 0, 0, 15209, 4241, 2344, 1601, 2652, 2227, 0, 0, 0, 0, 24653, 15199, 9758, 539, 4418, 1801, 0, 0, 0, 0, 32990, 181, 14201, 12891, 8357, 0, 0, 0, 0, 0, 8579, 3680, 4533, 2516, 3899, 1542, 3714, 0, 0, 0, 23199, 1826, 18352, 1572, 0, 0, 0, 0, 0, 0, 17525, 2170, 12973, 5123, 1725, 0, 0, 0, 0, 0, 32074, 16289, 2568, 11823, 1647, 1268, 0, 0, 0, 0, 1604, 10940, 1061, 0, 0, 0, 0, 0, 0, 0, 28255, 6345, 16046, 6195, 0, 0, 0, 0, 0, 0, 49266, 98066, 1285, 3700, 1172, 1850, 0, 0, 0, 0, 126191, 639, 94231, 1418, 21468, 28308]}]