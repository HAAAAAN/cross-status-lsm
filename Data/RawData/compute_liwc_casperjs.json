[{"repo": "casperjs", "type": "elite", "title": "", "number of text": 428, "text": "  Hi,\nclientutils already have `findOne` and `findAll` methods, we don't need more here.\nIf you need some sugar in your project, you can easely extends Casper object to add them.\n\nRegards,\n  hmm, are you sure the initial orthograph is uncorrect ?\n You're right :)\n\nThanks for your contribution.\n  Thanks!\n  Fixed by #1029.\n  Thanks.\n  Sorry, I don't have time to review your suggest ... maybe @n1k0 ?\n\nFor now, can you \"fixup\" your commits into only one ?\n \"Hi houston, we have a bug\", I need to investigate a little bit on this.\n  Thanks.\n  Thanks :)\n  Interesting but how can we test it ? \n  Are you sure? The folder doesn't exists in 1.1.x :)\n  Thanks :+1: \n  Hi, I don't see a real explanation on how the special keys works. Maybe a minimal example can help CasperJS users ?\n  This is an known issue :)\n\nThanks !\n  I suspect we don't really want to search up to the fs root, for security reason.\n\nAlso, could you please ensure that builds are green? Thanks.\n Nice, thanks. Do you think you could write a test? Typically one in https://github.com/n1k0/casperjs/blob/master/tests/clitests/runtests.py\n\nThat would help preventing further regressions.\n Hmm I don't have a windows box at hand, but last time I did tests were running just fine. What errors do you get?\n Sounds like Python/Windows things, a land where I'm kinda clueless :( \n\nPoking @hexid and @laurentj here in case they have ideas.\n Thanks a bunch, I truly appreciate. In the meanwhile, I filed issue #996 to track broken tests on Windows.\n This is good, thanks a lot! :)\n  I can't merge this one, we need @n1k0's review\n If we want to support Phantom2, we need to add it to the Travis build matrix.\n true, @Xenik007 can you add phantomjs 2 to the .travis.yml file ?\n Yeah\u2026 I guess this is blocked until we get proper builds to download and test against, then. I don't really want to start claiming support for Phantom2 while it's possibly not fully supported.\n Hey, what we can do is allowing using phantom2 with casper but logging a supplementary warning for probable bugs and no official support until a stable version is released. Thoughts?\n You can add a commit and rebase after when you're done :)\n It's not :)\n\nmerging.\n\nThank you !\n  thank you denis !\n  Hi,\ncan you please add docs, and maybe a test ?\nRegards, \n I do :)\nping @n1k0 can you review this please ?\n Hi,\n\ncan you rebase your commits ? I'll merge this cc/ @n1k0\n Can you squash your commits too? I swear it's my last request :D\n Thank you @davidlinse !\n  A good idea, but I don't have time (for now) to review.\nping @n1k0\n Somehow I missed this PR. Very interesting approach, I'll review this soon\u00a0:)\n @n1k0 I may need this one, do you have enough time this week for this ?\n@botandrose I'll add docs for this ;)\n ping @n1k0 can I merge it or do you want to review this one before ?\n @n1k0 did you have time to take a look ?\n@botandrose can you rebase master and squash your commits please ? If @n1k0 is unavailable I'll merge this one soon.\n Thanks @botandrose \n  Looks good, merging. Thanks for contributing!\n  Interesting, can you please squash your commits as I can review this one ?\n  Would you mind adding a test for this? We didn't have anyone before, it's missing.\n Ah no it's cool :)\n refs #916 & #919\n  Immediately schedule next step if a `waitFor` condition is already met at the time the inner `waitFor` step is executed.\n Hmm, Travis build is showing intermittent failures with a totally unrelated test. This is no good.\n  Refs #916, #919\n\nThis patch uses native PhantomJS `WebPage#reload()`.\n @mickaelandrieu sure please do (side note, `reload` is done)\nedit 20/05/2013 from mickaelandrieu: true :) it's back & forward that we need to refactor\n  I'd like we had a test for this\u2026\n As the tests pass, we can merge this one. ping @n1k0 \n Well, I wish we could find a way to avoid coupling the `events` module (which is a port of nodejs' one) with casper test specifics, but:\n- this module has been modified already (filters)\n- it's not kept updated against latest changes from node\n- this patch actually fixes the issue\n\nAlso, as you may have suspected I don't have much time to maintain the project lately, so I'll just merge this as it's useful to people\u00a0:)\n\nThanks!\n  Nope, I have comments I need to put down here once I get time.\n Sorry, @n1k0 is very busy :)\n  This is very cool, thank you\u00a0:)\n  We should add a section describing the license used for these assets.\n I just want the licensing information being mentioned in the patch for these assets.\n Thanks mate\n  Poke.\n  Sounds like something we don't really want. Closing.\n  Nice work, thanks! Nits to be addressed, and I really want unit tests for the config parsing/mapping logic. Extracting this part and moving it to a dedicated function in the `cli` module seems like the way to go to achieve just that.\n Ah, also, documentation should be added as well ;)\n @mickaelandrieu wonderful\n Is the work finished ? Can i merge it ? ping @r8k @n1k0 \n @r8k did you have time to finish this ?\n  Hmm that's right.\n  Thanks :)\n  @mickaelandrieu we'd need to ensure this wouldn't break with untested cases (and write new ones accordingly); could you please take care of that?\n > As for the code in this pull request, you can see that the entries.map call already outputs the absolute paths of each of the files\n\nIndeed, merging.\n Thanks for contributing (and keep it up with trifle)\u00a0:)\n  `os.execvp` is used for a very good reason, see #96:\n\n>  make python launcher use os.execvp() instead of subprocess.Popen()\n> \n> This fixes a bug where casperjs' python launcher process won't pass along kill\n> signals to the phantomjs subprocess. This patch works by using an exec system\n> call which causes the phantomjs subprocess to completely replace the casperjs\n> parent process (while maintaining the same pid). This patch also has the added\n> benefit of saving 10 megs or so of memory.\n\nI'm highly reluctant to add a switch case targetting Windows specifically.\n  The patch looks generally very good. Minor nits to be addressed mostly about coding style though.\n\nThanks for contributing :)\n > jshint still returns cyclomatic complexity of 8 for the `clientutils.getFieldValue`\n\nYeah, this method is getting bloated as we keep adding stuff in there. Though I think this shouldn't really be addressed by this PR. Let's fight this bit of technical debt in a next one.\n  Thanks. Adding a test would be really nice :)\n No worries. The build has failed because of jshint issues:\n\n```\ntests/suites/clientutils.js: line 211, col 14, 'info' is already defined.\ntests/suites/clientutils.js: line 215, col 14, 'info' is already defined.\ntests/suites/clientutils.js: line 219, col 14, 'info' is already defined.\n```\n\nCould you please take care of fixing these and rebase your work into a single commit? Thanks!\n Sure, that's probably the only case where `push -f` is safe\u00a0:)\n Thanks!\n  @hexid could you please take care of reviewing this? thanks!\n @hexid good question, I didn't notice actually; needs investigation (I'm still superbusy atm, so any help is welcome)\n The build failed because of npm issues, restarted it manually (@hexid, you should be able to do so by login with your github account into travis).\n  Thanks a bunch.\n  > variable username and password are always empty\n\n``` js\n>>> var loc = \"http://user:pass@host.com/\"\nundefined\n>>> loc.match(/^https?:\\/\\/(.+):(.+)@/i)\nArray [ \"http://user:pass@\", \"user\", \"pass\" ]\n```\n\nI don't get it. Closing.\n Oh, sorry, I'm not awake yet. Reopening.\n Thanks :)\n  The patch looks good, though for some reason Travis is not providing build status. Could you please rebase your two commits (possibly with a more meaningful message) so we get a chance to have a green status? Thanks.\n Thanks for contributing!\n  Thanks!\n  Thanks mate :)\n  Is JSON encoding parameters the default behavior we want when using `application/json`? Shouldn't we just add documentation for such a case, so people may use `JSON.stringify` explicitely?\n Hmm, you're kinda right :) Merging.\n Thanks for contributing.\n  `batchbin` stuff is deprecated; other issues have been addressed in other PRs :)\n  Thanks.\n  Thanks. Could you please add docs and a test please?\n Looks like an improvement. How about renaming `newPage` to `reset` though?\n > What other resources within Phantom, aside from the page, could be leaking?\n\nThe casper instance stores a bunch of logs, history, resource objects and so on; it might be interesting to check these and provide a way to purge the data they contain.\n  @robcolburn I'm just wondering if you have find a way to do it. Sorry for spam.\n  Thanks\n\nNote: skipped travis build because this is docs patch\n  Thank you !\n Wait, why is that change? The previous version was working perfectly. Reverting.\n Reverted by 4d94b84a3c2ce78b95a5464f7044cab5464a742d\n  All tests pass ... a good idea :)\n\n@n1k0 , @hexid , @mduvall what did you think about this ? I can review this PR.\n  Thanks!\n  Hi,\n\nthank you for your contribution. Can you fix some broken tests please ?\n\nRegards,\n @kirs : ping ?\n You can get a look to Travis report :) \nlet me know if you need help.\n  This will ensure that the correct engine version is being used.\n\nref #775\n This fails because I forgot to make the call after Mono had been installed.\n\nBut, it still proves my point that the Travis tests are always being run against PhantomJS 1.9.2 and not the versions downloaded.\n It appears as though there is an issue with PhantomJS 1.8.2 that was overlooked because of this issue.\n\nAlso, some adjustments need to be made so that SlimerJS can be run in a [headless environment](http://about.travis-ci.org/docs/user/gui-and-headless-browsers/#Using-xvfb-to-Run-Tests-That-Require-GUI-%28e.g.-a-Web-browser%29)\n @hexid yeah I'm aware of this silly situation, unfortunately I'm overbusy these days and to be honest was expecting anyone from the team to take over the issue :)\n\nSo right now I can't tell when I'll be capable of handling this in a near future.\n  Maintains support for versions of PhantomJS that don't support require.paths\n\nref #612\n @n1k0 How would you want me to go about fixing the jslint error?\n Sorry, I've been far from casper lately. The patch looks good, merging.\n  ref: #768\n\nThe dotNET jobs should now, like the python jobs, fail when there are jslint errors or the clitests fail.\n  I restarted that job to see if it's just an anomaly.\n Ok, looks like it's still failing. I'll try to take a look at it tonight.\n This should be good to go. The first time it failed, it was failing on `casper.back()` and the second was on `casper.forward()`.\nIt appears to just be a coincidence that they happened back to back of each other.\n I swear I'll give it a look soon, but this one is big & impacting enough to take the required time for an appropriate review.\n   @n1k0 need time/help to validate PR ? cc @mduvall @hexid @laurentj . I need a review :+1: \n Yeah please help, I'm overbusy these days\n Ok, I will take a look to issues/pr tonight, but I can't review my own pr(s) ^^ \n ty @hexid \n  Add check to dotNET application to make sure the CasperJS process has exited before trying to return the exit code.\nref: #762\nSource: http://stackoverflow.com/a/65070\n  Fixes #757 and the false positives on #754.\n  I'll take a look at this tomorrow to see if it's an issue with the .NET launcher\nSorry I've been kind of inactive lately, but I've been pretty busy with school this past month.\n Ok, I found the issue. If you check the travis builds, the builds that passed do in fact have the failed tests.\n\nI got it working by changing the lines in `tests/suites/xunit.js` from:\n\n```\ncasper.start().setContent(xunit.getXML());\n```\n\nto:\n\n```\ncasper.start().setContent(xunit.getSerializedXML());\n```\n This also brings up an issue about the test suite not returning the correct exit code when using the python launcher.\n  This method is available in latest beta version of casperjs, please upgrade.\n  Poke. Any problem?\n No problem :)\n  Suddenly test suites take [~10mn to complete](https://travis-ci.org/n1k0/casperjs/builds/14645914), is this a temporary travis issue or could it be possibly related to this change?\n New test runs are fast again, so it was temporarily due to some Travis overload or something. Merging, thanks!\n  This was a hard decision to make, but too many people just don't [read the docs](http://docs.casperjs.org/en/latest/testing.html#test-command-args-and-options) and create new casper instance(s) in a test env, overriding the preconfigured one, therefore creating cumbersome, hard to understand situations.\n\nHopefully this change will inform users right from the place they read docs the most, fatal error messages. So as of now you'll get this fatal error when creating a new casper instance in your test script:\n\n```\nFatal: you can't override the preconfigured casper instance in a test environment.\n```\n\n**Reminder: when using the `casperjs test` subcommand, you _must not_ create a new `casper` instance, just use the provided one. You may argue it's always been a bad design decision, but that's the way it is. We'll change this for 2.0.**\n @icoloma sure, will add it to the description as well\n  Thanks!\n  Thanks!\n  Thanks @clochix! \n  Definitely need to add Slimer to the travis build matrix, just so we know about regressions/incompatibilities - refs #594 \n In the meanwhile, could you please fix the minor jshint issues so the build turns green? :)\n\n```\nmodules/casper.js: line 928, col 36, Expected '===' and instead saw '=='.\nmodules/casper.js: line 935, col 42, Expected '===' and instead saw '=='.\nmodules/casper.js: line 936, col 53, Expected '===' and instead saw '=='.\nmodules/casper.js: line 937, col 42, Expected '===' and instead saw '=='.\ntests/suites/http_status.js: line 31, col 13, Bad line breaking before '||'.\ntests/suites/http_status.js: line 32, col 13, Bad line breaking before '||'.\n```\n\nYou can run jshint checks using `make jshint`.\n Also, you may want to rebase over latest master which now properly runs tests against slimer\u00a0:)\n Poke\u00a0:)\n  Much simpler than the previous version. Thank you!\n  Great work! Minor nits to be addressed, and a jshint issue to fix for the build to turn green:\n\n```\nmodules/tester.js: line 455, col 12, Possible strict violation.\n```\n\nThanks!\n Great stuff, cheers!\n  Hold on, let me review this first.\n > I like events, so I added a frame.changed event.To be consistent, maybe should I also encapsulate switchToParentFrame and switchToMainFrame, to also emit this event ?\n\nSounds like a good idea indeed\n Poke\n Woops been really busy lately, will check the new diff this week.\n  thanks for contributing!\n  I'll take care of writing these, no worry\n Fixed by df1eef5db914643864728c6733d4ad47f0ec7440\n  From the [git docs](https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html):\n\n> When text=auto normalization is enabled in an existing repository, any text files containing CRLFs should be normalized. If they are not they will be normalized the next time someone tries to change them, causing unfortunate misattribution. From a clean working directory:\n\n```\n$ echo \"* text=auto\" >>.gitattributes\n$ rm .git/index     # Remove the index to force git to\n$ git reset         # re-scan the working directory\n$ git status        # Show files that will be normalized\n$ git add -u\n$ git add .gitattributes\n$ git commit -m \"Introduce end-of-line normalization\"\n```\n\nHave you made this check and related operations? If not, could you please update the PR? Thanks!\n  @mickaelandrieu I'll review that one.\n Thanks for contributing.\n @nathanboktae actually I had pretty much nothing to say, and I'm usually not the easy guy\u00a0:) So, would you like to join the casperjs team?\n  Please rather add this to the CasperJS [samples & snippets wiki page](https://github.com/n1k0/casperjs/wiki).\n  Yes, I'd like to see some tests added. Maybe just with a popup opening a popup. \n @jefleponot poke, could you please take care of adding tests to this PR? If you can't or doesn't want to, please tell us, we'll take care of it.\n Poke\n Poke.\n  Do you know if it's possible to publish to npm using tagged versions of the repo? I'd like to provide a package for 1.1-beta2 (and possibly 1.0.4 once it's released, 1.0.3 has a problem with its version number atm)\n Ok, will investigate tomorrow. Anyway, thanks for the update, merging :)\n  Please keep the `duration` attribute for backward compatibility. Please also update tests accordingly.\n Yep, tested and approved. Thanks for contributing.\n  Thanks for contributing.\n  doh, thank you\n  Thanks.\n\n> because the tests are self tests, it's not possible to do these failure tests\n\nMaybe a python cli test would be smart to write here?\n Sure.\n\n> I would guess that the on('fail') code needs to not fail twice.\n\nWell, maybe just using `once('fail')` would solve the issue?\n Double AssertionError issue has been reported in #558 already.\n Can you please rebase on latest master? Thanks.\n Thank you!\n  I think we need `assertFieldSelector`, `assertFieldName` and `assertFieldXPath` to match what we have in `fill*`; also, default behavior of `assertField` should be kept BC and be aliased to `assertFieldName`.\n @mduvall yeah, SemVer is the goal\n Still not sure about this change. I was more expecting adding `inputName` arg inspection capability to `assertField`:\n\n``` html\n<form>\n  <input id=\"my_id\" name=\"my_name\" value=\"plop\">\n</form>\n```\n\nTests\n\n``` js\ntest.assertField(\"my_name\", \"plop\");\ntest.assertField({type: \"name\", path: \"my_name\"}, \"plop\");\ntest.assertField({type: \"css\", path: \"input[name=my_name]\"}, \"plop\");\ntest.assertField({type: \"xpath\", path: \"//input[@name=my_name]\"}, \"plop\");\n```\n\nWith new methods for asserts:\n\n``` js\ntest.assertFieldName(\"my_name\", \"plop\");\ntest.assertFieldSelector(\"input[name=my_name]\", \"plop\");\ntest.assertFieldXPath(\"//input[@name=my_name]\", \"plop\");\n```\n\nAnd `assertField` would obviously just use `test.assertFieldName` by default.\n Poke\n  @mduvall @hexid sounds good, let's do this.\n  Docs issue to be fixed, you can safely merge this once addressed.\n  Actually it was because PhantomJS was already providing a `--verbose` option I didn't want to override. Well, too late. Anyway, I'm easy with replacing it after all.\n\nThough as we just broke backward compatibility, I think we need to continue supporting the `--direct` option in some way. I'll create an issue for that.\n You mean `--verbose` I suppose. Oddly, I can't find trace of `--verbose` in phantomjs anymore. Did I dream? Anyway, ensuring BC is P1.\n  Yeah, we definitely want these features, just clean the diff and rebase on top of latest master :)\n  Dunno if you've seen them, but jshint errors were encountered in the build:\n\n```\nmodules/utils.js: line 644, col 37, Blocks are nested too deeply. (4)\nmodules/utils.js: line 646, col 24, Blocks are nested too deeply. (4)\nmodules/utils.js: line 683, col 37, Blocks are nested too deeply. (4)\nmodules/utils.js: line 685, col 24, Blocks are nested too deeply. (4)\ntests/suites/utils.js: line 376, col 32, Expected '===' and instead saw '=='.\ntests/suites/utils.js: line 379, col 27, Expected '===' and instead saw '=='.\n```\n\nBtw I think we should start the jshint validation before any other test to fail quickly and avoid wasting travis resources.\n Looks good until minor bits are addressed and jshint not complains anymore so the build turns green\u00a0:)\n Sure! \n  Thanks!\n  I wonder if we shouldn't update `createStep` to accept a `name` as its first agument?\n Sounds good, let's do that.\n Have to interupt my review because of some conference call, I'll continue tonight. Good work.\n Sorry for the lag, I'm over busy and cruelly lack time.\n\nStill some remarks to be addressed. Also:\n- the [build fails](https://travis-ci.org/n1k0/casperjs/jobs/12378196), please consider fixing it\n- `coalesce` needs some unit test love :)\n Now I think about it, the way we use `coalesce` is usually this way:\n\n``` js\nvar step = this.createStep(utils.coalesce(then && then.name, \"_foo\"), then);\n```\n\nWhich could actually be written this way:\n\n``` js\nvar step = this.createStep(then && then.name || \"_foo\", then);\n```\n\nHonestly, the more I think about it, the less I see real use cases for `coalesce` :)\n  @mickaelandrieu I think I'm ready to drop support for 1.8.2 for this to land. Also, we would be able to get rid of some conditionals dedicated to supporting this version.\n +1 for using an event; I'd even like to deprecate the `on*` listeners in the future (2.0)\n\n@brandon-bethke-neudesic could you please rebase on latest master and implement the feature as an event only?\n  Have you considered implementing something like `TestSuiteResult#toJSON`?\n  Thanks!\n  Thanks\n  Thanks!\n  Adding support for this in `sendKeys()` is fine with me, though I'd expect some bits of documentation added along this patch\u00a0:)\n\nThanks\n Great patch, thanks for contributing!\n  Good work, while some raised issues are to be addressed.\n Thanks!\n  Thanks!\n  Thanks!\n  Great :)\n  Awesome work, thanks.\n\nHave you seen the error on Travis?\n\n```\n$ make compile\nmcs -out:./bin/casperjs.exe ./src/casperjs.cs\n./src/casperjs.cs(111,60): error CS0122: `System.IO.Path.Combine(string, string, string)' is inaccessible due to its protection level\n/usr/lib/mono/2.0/mscorlib.dll (Location of the symbol related to previous error)\n./src/casperjs.cs(111,43): error CS1502: The best overloaded method match for `System.IO.Path.GetFullPath(string)' has some invalid arguments\n/usr/lib/mono/2.0/mscorlib.dll (Location of the symbol related to previous error)\n./src/casperjs.cs(111,43): error CS1503: Argument `#1' cannot convert `object' expression to type `string'\n./src/casperjs.cs(146,30): error CS0122: `System.IO.Path.Combine(string, string, string)' is inaccessible due to its protection level\n/usr/lib/mono/2.0/mscorlib.dll (Location of the symbol related to previous error)\nCompilation failed: 4 error(s), 0 warnings\n```\n Cool. I suspect running `casperjs.exe selftest` runs OK on your Windows machine?\n\nNow I think of it, wouldn't adding a new travis matrix for running the tests using that new executable be a good idea?\n What are the failures mostly related to? Possible to gist the output?\n Way cool. Can you commit that? Also, if it's phantomjs related, maybe we should just `skip` failing tests when the detected platform is Windows, what do you think?\n Scratch that, I'm silly, you can't commit anything as it would likely break casper. I'd love having a green build using this .NET version, could you imagine investigating a bit more to see what's happening here and why?\n Nice. Thanks for your efforts, I really appreciate.\n Thank you! Could you eventually update the docs to mention the new executable? Thanks\n Very cool, thank you! :)\n  Looks like the tests are failing :)\n Well, testing for constructors is usually hard, and I'm expecting to receive lots of questions and bug reports for this one. Still unsure we should land this one.\n\nUsually, people can test for this kind of stuff themselves very easily, and it keeps under _their_ control and responsibility:\n\n``` js\ntest.assert(foo instanceof Cow, \"foo is a Cow\");\n```\n\nCan't really see much added value with a dedicated API\u2026 hints?\n  Thanks :)\n  Thanks :)\n  Sry for being nitpicky\u00a0;)\n Looks good ;) Thanks!\n  Thanks!\n  Don't pay attention to test failure, we got random ones for some reason we still need to investigate. Thanks.\n  Thanks!\n  I'm against this change. I find it useful to be sure the test file being run is the one you expect, even if the information may be redundant for some.\n  Can anybody with a Windows box confirm that this patch addresses the mentioned issue and doesn't break backward compatibility?\n #604 deprecates `casperjs.bat`, so I'm closing this one.\n  Looks good. Thanks!\n  Thanks! :)\n  Just close this PR and cherry pick the commits you need on a new branch and send a new PR :)\n  Thanks!\n  Thanks, you're on fire today, that's plain cool ;)\n  Maybe we want to be sure this is part of the maintained public API of phantom, so it's not likely to break in the future.\n I'll take care of writing the docs\n  I'm in holidays using a crappy edge connection, maybe @laurentj could have a look? Also, AFAICS tests are failing.\n Poke.\n No pb take your time:)\nLe 12 ao\u00fbt 2013 17:34, \"Nicolas\" notifications@github.com a \u00e9crit :\n\n> I was in holidays.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/n1k0/casperjs/pull/526#issuecomment-22501981\n> .\n The patch looks good, though some minor CS issues to be addressed. Also, please ensure to rebase on top of latest master.\n\n(Sorry for the latency, I've been quite busy with other fronts these last months)\n  Thanks for contributing!\n  refs #462\n @theefer will merge this one and publish the `casperjs` package to npm once 1.1 stable will be tagged.\n I hope I'll be able to release it before the end of the summer.\n  @laurentj while there's still some work regarding coding style and implementation, I'm still not convinced by the feature, as I can see cumbersome support requests coming to the mailing-list already\u00a0:) I'd personally rather see this being implemented by developers, or by a third-party project.\n\nBut I need to take some time reviewing it thoroughly and think about it.\n Also, this PR badly needs tests & documentation, of course.\n  Thanks dude.\n  When an assertion fails, casperjs stops any steps in the current suite.\nThis could cause issues in a test suite. For example, \"withFrame\"\ngenerates some steps:\n- one to switch to the given frame\n- one to execute the given tests\n- one to switch to the main frame.\n\nIf tests fail, the third step is not executed, and then next tests fail\nbecause they are not executed in the main frame.\n\nwe can saw this issue in selftests: if a test fails in tests/suites/casper/frame.js,\ntests in tests/suites/casper/global.js fail too.\n  Thanks for your patch :-)\n  Thanks for your patch :-)\n  Please take care of these jshint issues https://travis-ci.org/n1k0/casperjs/jobs/7536304#L1482 :)\n Damn you're right :)\n Thanks!\n  Thanks!\n  This could be interesting. Please, could you update the documentation? Tests are welcomed too.\n  Great stuff. I'll review the patch but it's looking good already.\n\nI'll merge this as soon as the tests are green though.\n Sorry, I never used Ruby and I don't have time to learn a new language ...\n I can't express how happy I am with the great work you achieved here. Thank you so much.\n  Looks very good despite some minor remarks which should be addressed though. Thanks!\n Also, I'd like some documentation updates as well, if possible. Thanks!\n Landed! Cheers :)\n @quanghoc The docs says **New in version 1.1**. Please upgrade to 1.1-beta1 if you plan to use this feature.\n  Looks good, please take care of the minor coding style issues and I'll merge this\n Thanks!\n  Merged, thanks for contributing!\n  Looks nice, I'm a bit busy for the next few days but expect a review next week :) thanks\n Reviewed, please take care of the several issues I raised in the diff, thank you!\n The more I review this one, the more I think the filling methods (by name, by ids or by xpath, possibly) should sit in `ClientUtils` and should only be called accordingly through `evaluate` in their corresponding methods in `Casper`.\n\nRight now the code is hard to read, follow and grasp as it declares functions in the casper prototype to be executed within the page env\u2026 I'd like a bit more of separation of concerns here.\n\nLet me try to pick your branch and send you a PR accordingly.\n Finally merged by myself, thank you!\n  thanks :)\n  Looks fine. Can you please update the docs in `docs/modules/clientutils.rst`? Thank you!\n Wow, I'm sorry. I'm getting old.\n  Thanks!\n  hmm why did you close this?\n Oh indeed, I didn't notice. This is weird as the diff is quite clean. \n\nCan you please try to investigate what's going on? The feature is interesting.\n Thanks for contributing.\n  Thanks!\n  Thanks!\n  Thanks!\n  Thanks!\n  Thanks for the quick fix. \n\nWill looking back at the whole `cli` code, I think I'm gonna refactor it though\u00a0:)\n  Thanks!\n  My main concern with this is its maintenance; I've already made the mistake accepting a ruby executable which is no more maintained by the original contributor, so I think I won't do the same mistake twice.\n\nPython is perfectly fine for the time being. \n  Thanks for contributing.\n  I don't really like the `thenSkip*` methods as they're coupling back the tester to the casper instance. Other than that, it's a pretty cool patch!\n Looks nice. I'll be playing with the patch to see how it goes.\n I'm not sure we should have this dedicated purple bar for when tests have been skipped in a suite. Right now with the patch the whole casper suite finishes being purple, which is not really what's expected here\u00a0:)\n\nI think skipping tests is okay and should not affect the build status. Also, having the number of skipped tests in the status bar is informative enough.\n I've pushed a `skip` branch, please try to keep in sync with it for further development.\n Also, I'm finding the two `skip` concepts very confusing\u2026 I suggest renaming `Casper#skip()` to `Casper#bypass()` instead.\n I've refactored tes tests and renamed `Casper#skip` to `Casper#bypass`. Now I'm realizing the `Tester#skip` implementation just relies on step bypass. That's no good, as one may want to skip tests not relying on navigation steps. I'll have to change the implementation as well. \n > In fact I find test.skip irrevelant.\n\nSample use:\n\n``` js\ncasper.test.begin('foo', 4, function(test) {\n    test.assert(true);\n    test.assert(true);\n    test.skip(2);\n    test.done();\n});\n```\n\nOther use case, compat:\n\n``` js\ncasper.test.begin('foo', 4, function(test) {\n    if (phantom.version.major < 2) {\n        test.skip(2);\n    } else {\n        test.assert(true);\n        test.assert(true);\n    }\n    test.done();\n});\n```\n Partially merged and adapted, thanks for your contribution!\n  Finally merged. Thanks for contributing!\n  Thanks for your patch :-)\n  fixed in 55b648e883e27b4e72e9b3b54b1835c3f614f8de\n sure, never claimed it was\n Because it actually was https://github.com/n1k0/casperjs/commit/55b648e883e27b4e72e9b3b54b1835c3f614f8de#L0L735\n\n(I'm loving this thread, let's keep going on)\n  done in 20ff461\n  Thanks for contributing.\n  Thanks\n  Merged, thanks for contributing.\n  Merged. Thanks for contributing.\n  I'm afraid it's not really XUnit compliant, but I've never been able to find any official spec\u2026 Question is, would it break consumption by mainstream CI softwares like Jenkins?\n Build fails. Also, I'm not sure we want to derive from standard XUnit.\n  Could you please eventually add test cases to cover the ones this patch fixes? thanks.\n Merged. Thanks for contributing.\n  Merci :)\n  Thanks for contributing!\n  Haha, \"Merge with caution\" :D\n\nNice one, cheers!\n  documentation has been added here http://docs.casperjs.org/en/latest/modules/casper.html#waitforselectortextchange (new docsite)\n  Merged, thanks for contributing.\n\nNote: the feature is only available in 1.1-DEV (current master branch) only.\n For some reason it was never merged. I'm getting old.\n  Could you please update the sources and build the docs from there? Explanations for contributing to docs are [here](https://github.com/n1k0/casperjs/blob/gh-pages/README.md#readme) :)\n\nThank you\n  Damn, you're right.\n  Regarding #56 I've been working on a new implementation of _test cases_ on the [testcase branch](https://github.com/n1k0/casperjs/tree/testcase), as well as trying to enhance the XUnit XML output. \n\nBasically now you can do:\n\n``` js\nfunction Cow() {\n    this.mowed = false;\n    this.moo = function moo() {\n        this.mowed = true; // mootable state: don't do that\n        return 'moo!';\n    };\n}\n\n// unit style synchronous test case\ncasper.test.begin('Cow can moo', function() {\n    var cow = new Cow();\n    this.assertEquals(cow.moo(), 'moo!');\n    this.assert(cow.mowed);\n    this.done(2);\n});\n\n// asynchronous test case\ncasper.test.begin('Casperjs.org is navigable', function(test) {\n    casper.start('http://casperjs.org/', function() {\n        test.assertTitleMatches(/casperjs/i);\n        this.clickLabel('Testing');\n    });\n\n    casper.then(function() {\n        test.assertUrlMatches(/testing\\.html$/);\n    });\n\n    casper.run(function() {\n        test.done(2);\n    });\n});\n```\n\nXUnit XML report for these two suites looks like this:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites duration=\"3.702\">\n    <testsuite failures=\"0\" name=\"Cow can moo\" package=\"tests/testcase\" tests=\"2\" time=\"0.104\">\n        <testcase classname=\"tests/testcase\" name=\"Subject equals the expected value\" time=\"0.104\"/>\n        <testcase classname=\"tests/testcase\" name=\"Subject is strictly true\" time=\"0\"/>\n    </testsuite>\n    <testsuite failures=\"0\" name=\"Casperjs.org is navigable\" package=\"tests/testcase\" tests=\"2\" time=\"3.598\">\n        <testcase classname=\"tests/testcase\" name=\"Subject is strictly true\" time=\"2.28\"/>\n        <testcase classname=\"tests/testcase\" name=\"Current url matches the provided pattern\" time=\"1.318\"/>\n    </testsuite>\n</testsuites>\n```\n\nAlso, here's a sample XUnit XML results log output of the whole casper test suite: https://gist.github.com/4332371\n\nWhat do you think? As you can see, it's quite a big changeset, so as we're in 1.0RCX should we wait for 1.1 for pushing this?\n\nPS: cherry on the cake, this is totally BC (but heh, your feedback is totally welcome)\n > You should wait for the 1.1 for pushing this\n\nI'm thinking the same.\n Merged the feature into the [`1.1-dev` ](https://github.com/n1k0/casperjs/tree/1.1-dev) branch\n I'm closing this one has the feature development will now occur in the 1.1 branch.\n  You did it right :)\n  Sure, I totally support the idea. Now if you could add tests and patch the docs, it would be really cool :)\n\nThanks for contributing.\n  Merged in 12272eae4edbfd3e5519b67e9883fcd32e3b7046. I took the liberty to adapt the code a bit.\n  Ah, probably instructions for [contributing documentation](https://github.com/n1k0/casperjs/blob/master/CONTRIBUTING.md#write-documentation) aren't clear enough, but you shouldn't modify the HTML pages, [only the sources](https://github.com/n1k0/casperjs/blob/gh-pages/README.md#casperjs-documentation).\n  Yep!\n I dunno if I want to merge this as is anyway reading the description. \n\n> damn it all and write a teenie tiny .NET app that will handle it all nicely?\n\n@owenmartin that would be the best option for sure, but up to you as I don't have a clue how to do it myself ;)\n  Great patch!\n\n> I noticed a couple semantic mistakes in the findOne() / findAll() tests. Should I commit the changes I made to fix them?\n\nSure!\n Thanks for contributing \n  Thanks for contributing :)\n  Hmm, looks like you've committed your work on test suites on the wrong branch\u2026 could you please create a new PR for the test related stuff?\u00a0:)\n\nThanks\n\nNote on initial PR: still no windows box nor working VM to test any windows-related PRs, that's why it takes so long.\n  Neat, thanks for contributing!\n  Thanks! For the records, you're the first person submitting a doc patch while actually building the pages. Thank you\u00a0:')\n  Already implemented, see #283\n  thanks\n .\n sorry for the noise, my mistake was because you have to modify [the sources](https://github.com/n1k0/casperjs/tree/gh-pages/builder/sources), not the resulting html ;)\n  My knowledge of Batch and the Windows platform being nearly zero, I hereby invoke @Reinboom for some advice and validation.\n > I'll try and knock one together that maintains the phantom arguments\n\nThat would be just great, thanks!\n Just had the opportunity to finally play with this patch on a Windows VM:\n\n```\nCopyright (c) 2009 Microsoft Corporation.  All rights reserved.\n\nC:\\local\\casperjs\\batchbin>casperjs.bat ../samples/cliplay.js --plop=2 foo bar 'bar foo'\nCasper CLI passed args:\n[\n    \"foo\",\n    \"bar\",\n    \"bar foo\"\n]\nCasper CLI passed options:\n{\n    \"plop\": 2\n}\n```\n\nWorks (enough) for me.\n  Thanks :)\n  I'm not very comfortable with the proposed API.\n\nAt least, I'd like options being passed as an object:\n\n``` javascript\ncasper.click('#foo a.bar', {\n    blockEvents: [\"loadInProgress\", \"navigationRequested\"]\n});\n```\n\nYes it's a bit more verbose but we will be able to add more option easily while keeping everything BC.\n\nOther than that, very helpful feature.\n > Meanwhile, I notice you used the term \"blockEvents\" instead of \"blockStep\" -- why a more general term?  I was specifically aiming at steps... rather than more general events that are all over the place.\n\nYou're right, I don't like that name as well, and it may be confusing for end users. I wonder if we couldn't find something even more meaningful though.\n\n> Also, what does \"BC\" mean?\n\nBackward Compatible :)\n\n> Finally... I wonder how I can \"update\" a pull request to reference a different commit.\n\nJust keep committing and pushing on the very same branch on your fork :)\n\nPS: as a side note it's generally preferable to create a branch dedicated to implementing a given feature before sending PRs.\n I'm starting wondering if those blocking events shouldn't be configurable casper options\u2026 So you could define these at start time then switching using this `holdOn` method:\n\n``` javascript\nvar casper = require('casper').create({\n    holdOn: {\n        navigationRequested: true,\n        pendingWait: true,\n        loadInProgress: false\n    }\n});\n\ncasper.start('http://foo.com/', function() {\n    // stuff\n    this.click('#link'); // defaults blocking events are used\n});\n\ncasper.holdOn({loadInProgress: true}); // we should only update that new different value\n\ncasper.then(function() {\n    this.click('#newlink'); // new global blocking events are used\n    // or\u2026\n    this.click('#newlink', {\n        holdOn: {\n            // per click specific bocking events specified here\n        }\n    }); // specific blocking events are used\n});\n```\n\nWhat do you think?\n What's the status of this PR?\n > are we itching to get this feature integrated real soon?\n\nNot necessarily, I was just triaging tickets & PRs, hence this poke\u00a0:) I'll be reading the whole thread again in the following days to act some decision about this.\n  YAY, WINDOWS USER! Thanks for the PR, but could you _please_ test PR #234 which provides the same feature but it's entirely written in a `.bat`file?\n\nI don't have any Windows box at hand, so any help would be warmly welcome\u00a0:)\n  Indeed :) Thanks for contributing.\n  Thanks for contributing.\n  Wow, thank you! I'll be merging this after some testing as soon as I'll get a windows vm running :)\n Merged, thanks for contributing.\n\nPS: dunno why github hasn't closed this one automatically.\n @AndiDog @Reinboom if you have 5 minutes, could you just describe basique installation (if any) & usage of this new tool? Write it here in markdown, I'll add it to the docs myself.\n @Reinboom: thanks!\n  Thanks for contributing :)\n  Thanks for contributing.\n  Thanks for contributing.\n  I don't really want to support all possible exotic use cases. Those should be handled manually by the developer.\n  One more time, thanks for contributing.\n  Thanks, very useful. I'll be merging this, just take care of the few typos I commented on :)\n Merged. Thanks for contributing.\n  Merged, thanks for contributing.\n  I'm not sure for the `getCurrentHeader*` names, mostly because it's not obvious if we're talking about _response_ or _request_ ones.\n\nAlso, I'm thinking a neat API would be something more like:\n\n``` javascript\nvar accept = casper.currentResponse.headers.get('Content-Length');\n```\n\nWhat do you think?\n Now, I'm wondering if I shouldn't pass the response object to the step callback:\n\n``` javascript\ncasper.start('http://google.com/', function(response) {\n    if (/json/.test(response.headers.get('Content-Type'))) {\n        this.echo('JSON spotted');\n    }\n});\n```\n\nThat would break any old codebase relying on the deprecated `self` argument passed as a first parameter though\u2026\n\nThoughts?\n Very nice, things are shaping up nicely.\n\nRegarding [my comment](https://github.com/n1k0/casperjs/pull/188#issuecomment-7091504) about passing the response as an argument of the step callback, any thought?\n Merged\n @doni documentation is here http://casperjs.org/api.html#casper.then.callbacks\n  Merci mec :)\n  Nice. This PR and the `PUT` requests you perform in your tests highlights the real limitations of using the filesystem for HTTP related tests.\n\nI'm in the process of moving to a full HTTP server solution for testing requests/responses (eg. what's have been done for [this test](https://github.com/n1k0/casperjs/blob/master/tests/suites/http_status.js)), I think I'll merge this one when I'm done with it.\n\nAs always, thanks for contributing.\n Merged. Thanks for contributing :)\n  I'm sorry, this one won't make it to master.\n  Thank you!\n  Great stuff, thanks for contributing.\n  Great stuff, thanks! Could you eventually try to add some tests for these new events please? \n\nFor example by trying to submit a form triggering a `keyCode = 13` event\n\nMerci :)\n Well, the more test coverage we have, the more we'll be sure that it works as one can expect.\n\nI'll try to add more test cases if I can find some time, and create a dedicated remote branch.\n\nAnyway, we could possibly merge the feature for 1.0 with strong warnings about its limitation. \n I had to revert changes erroneously commited to master, sorry for the noise.\n After playing a bit with the feature, looks like it's indeed failing at many other use cases. I'll keep the `keyboard` branch to investigate a bit more about these.\n In the meanwhile, let's all star this issue in order to make it coming in future phantomjs releases http://code.google.com/p/phantomjs/issues/detail?id=492&q=keyboard\n I've just started a discussion in ariya/phantomjs#287\n It will be released this week with phantomjs 1.7 :)\n @ysangkok here you go https://github.com/ariya/phantomjs/commit/1b2a84df9c56a2f22c2f4449fd2113e8c696a05c#src/phantom.cpp\n @ysangkok right now and as we're still compatible with phantomjs 1.6, you have to use this feature by yourself.\n\nI might drop phantomjs 1.6 support when phantomjs 1.8 comes out in December, then I'll be able to refactor `fill()`.\n @mpalmerlee this patch was merged then removed as phantomjs has gained [native keyboard events](https://github.com/ariya/phantomjs/wiki/API-Reference#wiki-webpage-sendEvent) in the meanwhile. But as I say in the comment preceding yours, it will be released when support for 1.6 will be dropped.\n I've just created #302 to keep track of this.\n  Just to be sure, is it now working for you with this change? Does it solve #154? Wasn't it working using the event object?\n  fixed by 1a23e9eb2f48eed5319fb9276c658ceeabc8a015 :)\n  I'm revamping the docs right now, the fix will be applied.\n Fixed in new docs.\n  Ah yes, silly me, thanks!\n  Thanks for contributing.\n  Commited (don't pay attention to latest commit)\n  Merged.\n  Okay thanks a lot for this work, it's great. I commented a bit some changes which might be discussed though.\n\nThanks again :)\n Yeah, sorry for the latency.\n\nActually when I stated I wanted `/**/` comment blocks, that was for multiline ones\u2026 So for single line comments, I'd prefer keeping the `//` form.\n\nAlso, I'm not really happy with the var declarations with no assignment, so instead of:\n\n``` javascript\nvar casper;\ncasper = require('casper').create();\n```\n\nI'd rather prefer the old form:\n\n``` javascript\nvar casper = require('casper').create();\n```\n\nSorry I've not been clear enough :/\n Poke :)\n Ping :/\n No problem, mothers first ;)\n Can you please review the whole diff, I can see places where all the changes have not been applied\u00a0:)\n\nThanks a lot for your work!\n I'm so sorry being so painful\u2026 feel free to hate me\u00a0;)\n Merci :)\n  Thanks.\n  Thanks!\n  Yay, pretty cool enhancement, thanks for contributing :)\n  Nice! May I eventually ask you to provide some unit tests and some documentation for these changes? :)\n\nThanks!\n Oh it's you, okay. Don't worry, I'll take care of the unit tests. \n\nBut could you please just add some documentation? Everything is explained on the `gh-pages` branch README :) https://github.com/n1k0/casperjs/tree/gh-pages#readme\n No problem, thanks :)\n 2 months later, what's the status of this PR?\u00a0:)\n Merged, thanks a lot for contributing\u00a0:)\n  Merged, thanks for contributing.\n  PS: thank you so much for this, I really appreciate.\n  fixed with ae2beef3f7\n  Hmmm. Could you please use just one PR, with a dedicated branch on your own fork? That would ease a lot merging the whole featureset\u00a0:)\n  Could you please commit the generated html as well? will ease review :)\n  Sorry I came with a rather simpler solution :)\n\nI dropped your tests because none were passing on my box. I'll be working on mocking the results provided by the `fs` API if I get some times :/\n  No worry for the merge with upstream, I did it by my side :) I merged your patch, thanks for contributing.\n No problem at all, I'm probably a bit too much picky about this :)\n  Don't tell anybody.\n Should be a bit more clear [with a README](https://github.com/n1k0/casperjs/blob/gh-pages/README.md#files) =)\n  Thanks for this PR! definitely a neat idea. I'll work out the small cyclic dependency issue and merge the feature soon, stay tuned :)\n  Interesting feature, but could you please fix the indentation and coding standard issues before I merge it? Thanks.\n  Thanks!\n  It is\u2026 well\u2026 very verbose ^^'\n\nI'll try to add something like \"custom formats\" for you to add your own custom log levels, with a callback to format the message string against the resource and other stuff :)\n So after having thinking a bit of implementing the feature, I finally found that it was quite easily doable by the developer \u2014 I provided [a sample](https://github.com/n1k0/casperjs/blob/master/samples/customlogging.js) to highlight how to do exactly what your patch does\u00a0:)\n Happy to help :)\n  The patch looks great but it makes the test suite fail on the `waitFor()` test\u00a0:/\n\nCould you please have a look and fix what is making that test actually fails? Thanks!\n I may be due to your use of `setTimeout` instead of `setInterval`\u2026\n Sounds awesome :) don't hesitate to write as many tests as you can, and eventually to update the docs in the `gh-pages` branch as well :)\n Just great! I'm in the process of splitting the code of casper.js into smaller \"modules\" in the `modularization` branch, I will also split tests so don't expect a merge really soon, I'll try to push the whole new thing in the next few days :)\n The feature has been merged into master, as well as the modularization branch. Many thanks for your great work!\n  Great stuff, thanks!\n  To get a field value, have a look at [`ClientUtils.getFieldValue()`](http://casperjs.org/api.html#clientutils.getFieldValue):\n\n``` js\ncasper.then(function() {\n    this.echo(this.evaluate(function() {\n        return __utils__.getFieldValue('foo[]');\n    }));\n});\n```\n\nIt will return multiple values in case of a checkbox or radio group.\n For the records I've just added [`Casper.getFormValues()`](http://casperjs.org/api.html#casper.getFormValues) in db638037de2ad908a07033fe41e46db1af153eeb to ease retrieving form values.\n  Let me rather add an `onScriptTimeout` option to Casper instead. After all, there can be several use cases and this behavior should be overridable any case.\n The feature [has been implemented](https://github.com/n1k0/casperjs/commit/9e3916fc4562b22495ce02394cf6b372346c58d7). The option has been named `onTimeout`, and the default behavior on script execution timeout has been set to `die()` as suggested\u00a0:)\n Unfortunately I cannot tie the timeout callback handling to the context of the `Casper.start()` method.\n\nThough you can get the current requested document location by using the `requestUrl` property, as well as some other contextual informations: \n\n``` javascript\nvar casper = new phantom.Casper({\n    timeout: 10000,\n    onTimeout: function(self) {\n        self.die('timeout exceeded. context: ' + JSON.stringify({\n            currentUrl: self.getCurrentUrl(),\n            currentHTTPStatus: self.currentHTTPStatus,\n            requestUrl: self.requestUrl,\n            // ...\n        }));\n    }\n})\n```\n Yes it works, but the `location` you get is the one passed to `start()`. What if the timeout is reached after, say, 10 `thenOpen()` other steps?\n  Thanks, great & classy patch :) I've updated the [docs](http://n1k0.github.com/casperjs/#phantom_Casper_getGlobal) accordingly.\n  Oh, just as a side note, I switched the order of the arguments from your initial proposition :)\n  The debug messages have been added, thanks!\n", "text_all_count": 8011, "text_word_token": ["Hi", "clientutils", "already", "have", "findOne", "and", "findAll", "methods", "we", "don", "t", "need", "more", "here", "NUMBER", "If", "you", "need", "some", "sugar", "in", "your", "project", "you", "can", "easely", "extend", "Casper", "object", "to", "add", "them", "NUMBER", "Regards", "hmm", "be", "you", "sure", "the", "initial", "orthograph", "be", "uncorrect", "You", "re", "right", "Thanks", "for", "your", "contribution", "NUMBER", "Thanks", "Fixed", "by", "NUMBER", "Thanks", "NUMBER", "Sorry", "I", "don", "t", "have", "time", "to", "review", "your", "suggest", "NUMBER", "maybe", "n", "NUMBER", "k", "NUMBER", "For", "now", "can", "you", "fixup", "your", "commit", "into", "only", "one", "Hi", "houston", "we", "have", "a", "bug", "I", "need", "to", "investigate", "a", "little", "bit", "on", "this", "NUMBER", "Thanks", "NUMBER", "Thanks", "Interesting", "but", "how", "can", "we", "test", "it", "Are", "you", "sure", "The", "folder", "doesn", "t", "exists", "in", "NUMBER", "x", "Thanks", "NUMBER", "Hi", "I", "don", "t", "see", "a", "real", "explanation", "on", "how", "the", "special", "keys", "works", "NUMBER", "Maybe", "a", "minimal", "example", "can", "help", "CasperJS", "users", "This", "be", "an", "know", "issue", "Thanks", "I", "suspect", "we", "don", "t", "really", "want", "to", "search", "up", "to", "the", "fs", "root", "for", "security", "reason", "NUMBER", "Also", "could", "you", "please", "ensure", "that", "build", "be", "green", "Thanks", "NUMBER", "Nice", "thanks", "NUMBER", "Do", "you", "think", "you", "could", "write", "a", "test", "Typically", "one", "in", "LINK", "That", "would", "help", "preventing", "further", "regressions", "NUMBER", "Hmm", "I", "don", "t", "have", "a", "windows", "box", "at", "hand", "but", "last", "time", "I", "did", "test", "were", "run", "just", "fine", "NUMBER", "What", "error", "do", "you", "get", "Sounds", "like", "Python", "Windows", "things", "a", "land", "where", "I", "m", "kinda", "clueless", "Poking", "hexid", "and", "laurentj", "here", "in", "case", "they", "have", "ideas", "NUMBER", "Thanks", "a", "bunch", "I", "truly", "appreciate", "NUMBER", "In", "the", "meanwhile", "I", "file", "issue", "NUMBER", "to", "track", "broken", "test", "on", "Windows", "NUMBER", "This", "be", "good", "thanks", "a", "lot", "I", "can", "t", "merge", "this", "one", "we", "need", "n", "NUMBER", "k", "NUMBER", "s", "review", "If", "we", "want", "to", "support", "Phantom", "NUMBER", "we", "need", "to", "add", "it", "to", "the", "Travis", "build", "matrix", "NUMBER", "true", "Xenik", "NUMBER", "can", "you", "add", "phantomjs", "NUMBER", "to", "the", "NUMBER", "travis", "NUMBER", "yml", "file", "Yeah", "I", "guess", "this", "be", "blocked", "until", "we", "get", "proper", "build", "to", "download", "and", "test", "against", "then", "NUMBER", "I", "don", "t", "really", "want", "to", "start", "claiming", "support", "for", "Phantom", "NUMBER", "while", "it", "s", "possibly", "not", "fully", "support", "NUMBER", "Hey", "what", "we", "can", "do", "be", "allowing", "use", "phantom", "NUMBER", "with", "casper", "but", "logging", "a", "supplementary", "warning", "for", "probable", "bug", "and", "no", "official", "support", "until", "a", "stable", "version", "be", "release", "NUMBER", "Thoughts", "You", "can", "add", "a", "commit", "and", "rebase", "after", "when", "you", "re", "do", "It", "s", "not", "merge", "NUMBER", "Thank", "you", "thank", "you", "denis", "Hi", "can", "you", "please", "add", "docs", "and", "maybe", "a", "test", "Regards", "I", "do", "ping", "n", "NUMBER", "k", "NUMBER", "can", "you", "review", "this", "please", "Hi", "can", "you", "rebase", "your", "commit", "I", "ll", "merge", "this", "cc", "n", "NUMBER", "k", "NUMBER", "Can", "you", "squash", "your", "commit", "too", "I", "swear", "it", "s", "my", "last", "request", "D", "Thank", "you", "davidlinse", "A", "good", "idea", "but", "I", "don", "t", "have", "time", "for", "now", "to", "review", "NUMBER", "ping", "n", "NUMBER", "k", "NUMBER", "Somehow", "I", "miss", "this", "PR", "NUMBER", "Very", "interesting", "approach", "I", "ll", "review", "this", "soon", "n", "NUMBER", "k", "NUMBER", "I", "may", "need", "this", "one", "do", "you", "have", "enough", "time", "this", "week", "for", "this", "botandrose", "I", "ll", "add", "docs", "for", "this", "ping", "n", "NUMBER", "k", "NUMBER", "can", "I", "merge", "it", "or", "do", "you", "want", "to", "review", "this", "one", "before", "n", "NUMBER", "k", "NUMBER", "did", "you", "have", "time", "to", "take", "a", "look", "botandrose", "can", "you", "rebase", "master", "and", "squash", "your", "commit", "please", "If", "n", "NUMBER", "k", "NUMBER", "be", "unavailable", "I", "ll", "merge", "this", "one", "soon", "NUMBER", "Thanks", "botandrose", "Looks", "good", "merge", "NUMBER", "Thanks", "for", "contribute", "Interesting", "can", "you", "please", "squash", "your", "commit", "as", "I", "can", "review", "this", "one", "Would", "you", "mind", "add", "a", "test", "for", "this", "We", "didn", "t", "have", "anyone", "before", "it", "s", "miss", "NUMBER", "Ah", "no", "it", "s", "cool", "refs", "NUMBER", "NUMBER", "Immediately", "schedule", "next", "step", "if", "a", "waitFor", "condition", "be", "already", "met", "at", "the", "time", "the", "inner", "waitFor", "step", "be", "executed", "NUMBER", "Hmm", "Travis", "build", "be", "showing", "intermittent", "failures", "with", "a", "totally", "unrelated", "test", "NUMBER", "This", "be", "no", "good", "NUMBER", "Refs", "NUMBER", "NUMBER", "This", "patch", "uses", "native", "PhantomJS", "WebPage", "reload", "NUMBER", "mickaelandrieu", "sure", "please", "do", "side", "note", "reload", "be", "do", "edit", "NUMBER", "NUMBER", "NUMBER", "from", "mickaelandrieu", "true", "it", "s", "back", "forward", "that", "we", "need", "to", "refactor", "I", "d", "like", "we", "had", "a", "test", "for", "this", "As", "the", "test", "pass", "we", "can", "merge", "this", "one", "NUMBER", "ping", "n", "NUMBER", "k", "NUMBER", "Well", "I", "wish", "we", "could", "find", "a", "way", "to", "avoid", "coupling", "the", "events", "module", "which", "be", "a", "port", "of", "nodejs", "one", "with", "casper", "test", "specifics", "but", "this", "module", "has", "be", "modify", "already", "filters", "it", "s", "not", "keep", "update", "against", "latest", "change", "from", "node", "this", "patch", "actually", "fix", "the", "issue", "Also", "as", "you", "may", "have", "suspected", "I", "don", "t", "have", "much", "time", "to", "maintain", "the", "project", "lately", "so", "I", "ll", "just", "merge", "this", "as", "it", "s", "useful", "to", "people", "Thanks", "Nope", "I", "have", "comments", "I", "need", "to", "put", "down", "here", "once", "I", "get", "time", "NUMBER", "Sorry", "n", "NUMBER", "k", "NUMBER", "be", "very", "busy", "This", "be", "very", "cool", "thank", "you", "We", "should", "add", "a", "section", "describing", "the", "license", "use", "for", "these", "assets", "NUMBER", "I", "just", "want", "the", "licensing", "information", "be", "mention", "in", "the", "patch", "for", "these", "assets", "NUMBER", "Thanks", "mate", "Poke", "NUMBER", "Sounds", "like", "something", "we", "don", "t", "really", "want", "NUMBER", "Closing", "NUMBER", "Nice", "work", "thanks", "Nits", "to", "be", "address", "and", "I", "really", "want", "unit", "test", "for", "the", "config", "parsing", "mapping", "logic", "NUMBER", "Extracting", "this", "part", "and", "moving", "it", "to", "a", "dedicated", "function", "in", "the", "cli", "module", "seems", "like", "the", "way", "to", "go", "to", "achieve", "just", "that", "NUMBER", "Ah", "also", "documentation", "should", "be", "add", "as", "well", "mickaelandrieu", "wonderful", "Is", "the", "work", "finished", "Can", "i", "merge", "it", "ping", "r", "NUMBER", "k", "n", "NUMBER", "k", "NUMBER", "r", "NUMBER", "k", "did", "you", "have", "time", "to", "finish", "this", "Hmm", "that", "s", "right", "NUMBER", "Thanks", "mickaelandrieu", "we", "d", "need", "to", "ensure", "this", "wouldn", "t", "break", "with", "untested", "cases", "and", "write", "new", "ones", "accordingly", "could", "you", "please", "take", "care", "of", "that", "As", "for", "the", "code", "in", "this", "pull", "request", "you", "can", "see", "that", "the", "entries", "NUMBER", "map", "call", "already", "outputs", "the", "absolute", "paths", "of", "each", "of", "the", "file", "Indeed", "merge", "NUMBER", "Thanks", "for", "contribute", "and", "keep", "it", "up", "with", "trifle", "os", "NUMBER", "execvp", "be", "use", "for", "a", "very", "good", "reason", "see", "NUMBER", "make", "python", "launcher", "use", "os", "NUMBER", "execvp", "instead", "of", "subprocess", "NUMBER", "Popen", "This", "fix", "a", "bug", "where", "casperjs", "python", "launcher", "process", "won", "t", "pass", "along", "kill", "signals", "to", "the", "phantomjs", "subprocess", "NUMBER", "This", "patch", "works", "by", "use", "an", "exec", "system", "call", "which", "causes", "the", "phantomjs", "subprocess", "to", "completely", "replace", "the", "casperjs", "parent", "process", "while", "maintaining", "the", "same", "pid", "NUMBER", "This", "patch", "also", "has", "the", "add", "benefit", "of", "saving", "NUMBER", "megs", "or", "so", "of", "memory", "NUMBER", "I", "m", "highly", "reluctant", "to", "add", "a", "switch", "case", "targetting", "Windows", "specifically", "NUMBER", "The", "patch", "looks", "generally", "very", "good", "NUMBER", "Minor", "nits", "to", "be", "address", "mostly", "about", "code", "style", "though", "NUMBER", "Thanks", "for", "contribute", "jshint", "still", "returns", "cyclomatic", "complexity", "of", "NUMBER", "for", "the", "clientutils", "NUMBER", "getFieldValue", "Yeah", "this", "method", "be", "get", "bloated", "as", "we", "keep", "add", "stuff", "in", "there", "NUMBER", "Though", "I", "think", "this", "shouldn", "t", "really", "be", "address", "by", "this", "PR", "NUMBER", "Let", "s", "fight", "this", "bit", "of", "technical", "debt", "in", "a", "next", "one", "NUMBER", "Thanks", "NUMBER", "Adding", "a", "test", "would", "be", "really", "nice", "No", "worries", "NUMBER", "The", "build", "has", "fail", "because", "of", "jshint", "issue", "test", "suite", "clientutils", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "info", "be", "already", "defined", "NUMBER", "test", "suite", "clientutils", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "info", "be", "already", "defined", "NUMBER", "test", "suite", "clientutils", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "info", "be", "already", "defined", "NUMBER", "Could", "you", "please", "take", "care", "of", "fix", "these", "and", "rebase", "your", "work", "into", "a", "single", "commit", "Thanks", "Sure", "that", "s", "probably", "the", "only", "case", "where", "push", "f", "be", "safe", "Thanks", "hexid", "could", "you", "please", "take", "care", "of", "reviewing", "this", "thanks", "hexid", "good", "question", "I", "didn", "t", "notice", "actually", "needs", "investigation", "I", "m", "still", "superbusy", "atm", "so", "any", "help", "be", "welcome", "The", "build", "fail", "because", "of", "npm", "issue", "restarted", "it", "manually", "hexid", "you", "should", "be", "able", "to", "do", "so", "by", "login", "with", "your", "github", "account", "into", "travis", "NUMBER", "Thanks", "a", "bunch", "NUMBER", "variable", "username", "and", "password", "be", "always", "empty", "js", "var", "loc", "LINK", "host", "NUMBER", "com", "undefined", "loc", "NUMBER", "match", "https", "NUMBER", "NUMBER", "i", "Array", "LINK", "user", "pass", "I", "don", "t", "get", "it", "NUMBER", "Closing", "NUMBER", "Oh", "sorry", "I", "m", "not", "awake", "yet", "NUMBER", "Reopening", "NUMBER", "Thanks", "The", "patch", "looks", "good", "though", "for", "some", "reason", "Travis", "be", "not", "provide", "build", "status", "NUMBER", "Could", "you", "please", "rebase", "your", "two", "commit", "possibly", "with", "a", "more", "meaningful", "message", "so", "we", "get", "a", "chance", "to", "have", "a", "green", "status", "Thanks", "NUMBER", "Thanks", "for", "contribute", "Thanks", "Thanks", "mate", "Is", "JSON", "encoding", "parameters", "the", "default", "behavior", "we", "want", "when", "use", "application", "json", "Shouldn", "t", "we", "just", "add", "documentation", "for", "such", "a", "case", "so", "people", "may", "use", "JSON", "NUMBER", "ringify", "explicitely", "Hmm", "you", "re", "kinda", "right", "Merging", "NUMBER", "Thanks", "for", "contribute", "NUMBER", "batchbin", "stuff", "be", "deprecate", "other", "issue", "have", "be", "address", "in", "other", "PRs", "Thanks", "NUMBER", "Thanks", "NUMBER", "Could", "you", "please", "add", "docs", "and", "a", "test", "please", "Looks", "like", "an", "improvement", "NUMBER", "How", "about", "renaming", "newPage", "to", "reset", "though", "What", "other", "resources", "within", "Phantom", "aside", "from", "the", "page", "could", "be", "leaking", "The", "casper", "instance", "stores", "a", "bunch", "of", "logs", "history", "resource", "objects", "and", "so", "on", "it", "might", "be", "interesting", "to", "check", "these", "and", "provide", "a", "way", "to", "purge", "the", "data", "they", "contain", "NUMBER", "robcolburn", "I", "m", "just", "wondering", "if", "you", "have", "find", "a", "way", "to", "do", "it", "NUMBER", "Sorry", "for", "spam", "NUMBER", "Thanks", "Note", "skipped", "travis", "build", "because", "this", "be", "docs", "patch", "Thank", "you", "Wait", "why", "be", "that", "change", "The", "previous", "version", "was", "work", "perfectly", "NUMBER", "Reverting", "NUMBER", "Reverted", "by", "NUMBER", "d", "NUMBER", "b", "NUMBER", "a", "NUMBER", "c", "NUMBER", "ce", "NUMBER", "b", "NUMBER", "a", "NUMBER", "f", "NUMBER", "cab", "NUMBER", "a", "NUMBER", "d", "All", "test", "pass", "NUMBER", "a", "good", "idea", "n", "NUMBER", "k", "NUMBER", "hexid", "mduvall", "what", "did", "you", "think", "about", "this", "I", "can", "review", "this", "PR", "NUMBER", "Thanks", "Hi", "thank", "you", "for", "your", "contribution", "NUMBER", "Can", "you", "fix", "some", "broken", "test", "please", "Regards", "kirs", "ping", "You", "can", "get", "a", "look", "to", "Travis", "report", "let", "me", "know", "if", "you", "need", "help", "NUMBER", "This", "will", "ensure", "that", "the", "correct", "engine", "version", "be", "be", "use", "NUMBER", "ref", "NUMBER", "This", "fail", "because", "I", "forgot", "to", "make", "the", "call", "after", "Mono", "had", "be", "install", "NUMBER", "But", "it", "still", "proves", "my", "point", "that", "the", "Travis", "test", "be", "always", "be", "run", "against", "PhantomJS", "NUMBER", "and", "not", "the", "version", "downloaded", "NUMBER", "It", "appears", "as", "though", "there", "be", "an", "issue", "with", "PhantomJS", "NUMBER", "that", "was", "overlooked", "because", "of", "this", "issue", "NUMBER", "Also", "some", "adjustments", "need", "to", "be", "made", "so", "that", "SlimerJS", "can", "be", "run", "in", "a", "headless", "environment", "LINK", "ci", "NUMBER", "org", "docs", "user", "gui", "and", "headless", "browsers", "Using", "xvfb", "to", "Run", "Tests", "That", "Require", "GUI", "NUMBER", "e", "NUMBER", "g", "NUMBER", "a", "Web", "browser", "NUMBER", "hexid", "yeah", "I", "m", "aware", "of", "this", "silly", "situation", "unfortunately", "I", "m", "overbusy", "these", "days", "and", "to", "be", "honest", "was", "expecting", "anyone", "from", "the", "team", "to", "take", "over", "the", "issue", "So", "right", "now", "I", "can", "t", "tell", "when", "I", "ll", "be", "capable", "of", "handle", "this", "in", "a", "near", "future", "NUMBER", "Maintains", "support", "for", "version", "of", "PhantomJS", "that", "don", "t", "support", "require", "NUMBER", "paths", "ref", "NUMBER", "n", "NUMBER", "k", "NUMBER", "How", "would", "you", "want", "me", "to", "go", "about", "fix", "the", "jslint", "error", "Sorry", "I", "ve", "be", "far", "from", "casper", "lately", "NUMBER", "The", "patch", "looks", "good", "merge", "NUMBER", "ref", "NUMBER", "The", "dotNET", "jobs", "should", "now", "like", "the", "python", "jobs", "fail", "when", "there", "be", "jslint", "error", "or", "the", "clitests", "fail", "NUMBER", "I", "restarted", "that", "job", "to", "see", "if", "it", "s", "just", "an", "anomaly", "NUMBER", "Ok", "looks", "like", "it", "s", "still", "fail", "NUMBER", "I", "ll", "try", "to", "take", "a", "look", "at", "it", "tonight", "NUMBER", "This", "should", "be", "good", "to", "go", "NUMBER", "The", "first", "time", "it", "fail", "it", "was", "fail", "on", "casper", "NUMBER", "back", "and", "the", "second", "was", "on", "casper", "NUMBER", "forward", "NUMBER", "It", "appears", "to", "just", "be", "a", "coincidence", "that", "they", "happened", "back", "to", "back", "of", "each", "other", "NUMBER", "I", "swear", "I", "ll", "give", "it", "a", "look", "soon", "but", "this", "one", "be", "big", "impacting", "enough", "to", "take", "the", "required", "time", "for", "an", "appropriate", "review", "NUMBER", "n", "NUMBER", "k", "NUMBER", "need", "time", "help", "to", "validate", "PR", "cc", "mduvall", "hexid", "laurentj", "NUMBER", "I", "need", "a", "review", "NUMBER", "Yeah", "please", "help", "I", "m", "overbusy", "these", "days", "Ok", "I", "will", "take", "a", "look", "to", "issue", "pr", "tonight", "but", "I", "can", "t", "review", "my", "own", "pr", "s", "ty", "hexid", "Add", "check", "to", "dotNET", "application", "to", "make", "sure", "the", "CasperJS", "process", "has", "exited", "before", "trying", "to", "return", "the", "exit", "code", "NUMBER", "ref", "NUMBER", "Source", "LINK", "Fixes", "NUMBER", "and", "the", "false", "positives", "on", "NUMBER", "I", "ll", "take", "a", "look", "at", "this", "tomorrow", "to", "see", "if", "it", "s", "an", "issue", "with", "the", "NUMBER", "NET", "launcher", "Sorry", "I", "ve", "be", "kind", "of", "inactive", "lately", "but", "I", "ve", "be", "pretty", "busy", "with", "school", "this", "past", "month", "NUMBER", "Ok", "I", "find", "the", "issue", "NUMBER", "If", "you", "check", "the", "travis", "build", "the", "build", "that", "pass", "do", "in", "fact", "have", "the", "fail", "test", "NUMBER", "I", "get", "it", "work", "by", "change", "the", "lines", "in", "test", "suite", "xunit", "NUMBER", "js", "from", "casper", "NUMBER", "art", "NUMBER", "setContent", "xunit", "NUMBER", "getXML", "to", "casper", "NUMBER", "art", "NUMBER", "setContent", "xunit", "NUMBER", "getSerializedXML", "This", "also", "brings", "up", "an", "issue", "about", "the", "test", "suite", "not", "returning", "the", "correct", "exit", "code", "when", "use", "the", "python", "launcher", "NUMBER", "This", "method", "be", "available", "in", "latest", "beta", "version", "of", "casperjs", "please", "upgrade", "NUMBER", "Poke", "NUMBER", "Any", "problem", "No", "problem", "Suddenly", "test", "suite", "take", "NUMBER", "mn", "to", "complete", "LINK", "ci", "NUMBER", "org", "n", "NUMBER", "k", "NUMBER", "casperjs", "build", "NUMBER", "be", "this", "a", "temporary", "travis", "issue", "or", "could", "it", "be", "possibly", "relate", "to", "this", "change", "New", "test", "runs", "be", "fast", "again", "so", "it", "was", "temporarily", "due", "to", "some", "Travis", "overload", "or", "something", "NUMBER", "Merging", "thanks", "This", "was", "a", "hard", "decision", "to", "make", "but", "too", "many", "people", "just", "don", "t", "read", "the", "docs", "LINK", "test", "command", "args", "and", "options", "and", "create", "new", "casper", "instance", "s", "in", "a", "test", "env", "overriding", "the", "preconfigured", "one", "therefore", "creating", "cumbersome", "hard", "to", "understand", "situations", "NUMBER", "Hopefully", "this", "change", "will", "inform", "users", "right", "from", "the", "place", "they", "read", "docs", "the", "most", "fatal", "error", "message", "NUMBER", "So", "as", "of", "now", "you", "ll", "get", "this", "fatal", "error", "when", "creating", "a", "new", "casper", "instance", "in", "your", "test", "script", "Fatal", "you", "can", "t", "override", "the", "preconfigured", "casper", "instance", "in", "a", "test", "environment", "NUMBER", "Reminder", "when", "use", "the", "casperjs", "test", "subcommand", "you", "_must", "not_", "create", "a", "new", "casper", "instance", "just", "use", "the", "provide", "one", "NUMBER", "You", "may", "argue", "it", "s", "always", "be", "a", "bad", "design", "decision", "but", "that", "s", "the", "way", "it", "be", "NUMBER", "We", "ll", "change", "this", "for", "NUMBER", "icoloma", "sure", "will", "add", "it", "to", "the", "description", "as", "well", "Thanks", "Thanks", "Thanks", "clochix", "Definitely", "need", "to", "add", "Slimer", "to", "the", "travis", "build", "matrix", "just", "so", "we", "know", "about", "regressions", "incompatibilities", "refs", "NUMBER", "In", "the", "meanwhile", "could", "you", "please", "fix", "the", "minor", "jshint", "issue", "so", "the", "build", "turns", "green", "modules", "casper", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "Expected", "and", "instead", "saw", "NUMBER", "modules", "casper", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "Expected", "and", "instead", "saw", "NUMBER", "modules", "casper", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "Expected", "and", "instead", "saw", "NUMBER", "modules", "casper", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "Expected", "and", "instead", "saw", "NUMBER", "test", "suite", "http_status", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "Bad", "line", "breaking", "before", "NUMBER", "test", "suite", "http_status", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "Bad", "line", "breaking", "before", "NUMBER", "You", "can", "run", "jshint", "checks", "use", "make", "jshint", "NUMBER", "Also", "you", "may", "want", "to", "rebase", "over", "latest", "master", "which", "now", "properly", "runs", "test", "against", "slimer", "Poke", "Much", "simpler", "than", "the", "previous", "version", "NUMBER", "Thank", "you", "Great", "work", "Minor", "nits", "to", "be", "address", "and", "a", "jshint", "issue", "to", "fix", "for", "the", "build", "to", "turn", "green", "modules", "tester", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "Possible", "strict", "violation", "NUMBER", "Thanks", "Great", "stuff", "cheer", "Hold", "on", "let", "me", "review", "this", "first", "NUMBER", "I", "like", "events", "so", "I", "add", "a", "frame", "NUMBER", "change", "event", "NUMBER", "To", "be", "consistent", "maybe", "should", "I", "also", "encapsulate", "switchToParentFrame", "and", "switchToMainFrame", "to", "also", "emit", "this", "event", "Sounds", "like", "a", "good", "idea", "indeed", "Poke", "Woops", "be", "really", "busy", "lately", "will", "check", "the", "new", "diff", "this", "week", "NUMBER", "thanks", "for", "contribute", "I", "ll", "take", "care", "of", "write", "these", "no", "worry", "Fixed", "by", "df", "NUMBER", "eef", "NUMBER", "db", "NUMBER", "c", "NUMBER", "d", "NUMBER", "ad", "NUMBER", "f", "NUMBER", "ec", "NUMBER", "From", "the", "git", "docs", "LINK", "When", "text", "auto", "normalization", "be", "enable", "in", "an", "exist", "repository", "any", "text", "file", "containing", "CRLFs", "should", "be", "normalized", "NUMBER", "If", "they", "be", "not", "they", "will", "be", "normalized", "the", "next", "time", "someone", "try", "to", "change", "them", "cause", "unfortunate", "misattribution", "NUMBER", "From", "a", "clean", "work", "directory", "echo", "text", "auto", "NUMBER", "gitattributes", "rm", "NUMBER", "git", "index", "Remove", "the", "index", "to", "force", "git", "to", "git", "reset", "re", "scan", "the", "work", "directory", "git", "status", "Show", "file", "that", "will", "be", "normalized", "git", "add", "u", "git", "add", "NUMBER", "gitattributes", "git", "commit", "m", "Introduce", "end", "of", "line", "normalization", "Have", "you", "made", "this", "check", "and", "relate", "operations", "If", "not", "could", "you", "please", "update", "the", "PR", "Thanks", "mickaelandrieu", "I", "ll", "review", "that", "one", "NUMBER", "Thanks", "for", "contribute", "NUMBER", "nathanboktae", "actually", "I", "had", "pretty", "much", "nothing", "to", "say", "and", "I", "m", "usually", "not", "the", "easy", "guy", "So", "would", "you", "like", "to", "join", "the", "casperjs", "team", "Please", "rather", "add", "this", "to", "the", "CasperJS", "samples", "snippets", "wiki", "page", "LINK", "NUMBER", "Yes", "I", "d", "like", "to", "see", "some", "test", "add", "NUMBER", "Maybe", "just", "with", "a", "popup", "open", "a", "popup", "NUMBER", "jefleponot", "poke", "could", "you", "please", "take", "care", "of", "add", "test", "to", "this", "PR", "If", "you", "can", "t", "or", "doesn", "t", "want", "to", "please", "tell", "us", "we", "ll", "take", "care", "of", "it", "NUMBER", "Poke", "Poke", "NUMBER", "Do", "you", "know", "if", "it", "s", "possible", "to", "publish", "to", "npm", "use", "tag", "version", "of", "the", "repo", "I", "d", "like", "to", "provide", "a", "package", "for", "NUMBER", "beta", "NUMBER", "and", "possibly", "NUMBER", "once", "it", "s", "release", "NUMBER", "has", "a", "problem", "with", "its", "version", "number", "atm", "Ok", "will", "investigate", "tomorrow", "NUMBER", "Anyway", "thanks", "for", "the", "update", "merge", "Please", "keep", "the", "duration", "attribute", "for", "backward", "compatibility", "NUMBER", "Please", "also", "update", "test", "accordingly", "NUMBER", "Yep", "test", "and", "approved", "NUMBER", "Thanks", "for", "contribute", "NUMBER", "Thanks", "for", "contribute", "NUMBER", "doh", "thank", "you", "Thanks", "NUMBER", "because", "the", "test", "be", "self", "test", "it", "s", "not", "possible", "to", "do", "these", "failure", "test", "Maybe", "a", "python", "cli", "test", "would", "be", "smart", "to", "write", "here", "Sure", "NUMBER", "I", "would", "guess", "that", "the", "on", "fail", "code", "needs", "to", "not", "fail", "twice", "NUMBER", "Well", "maybe", "just", "use", "once", "fail", "would", "solve", "the", "issue", "Double", "AssertionError", "issue", "has", "be", "report", "in", "NUMBER", "already", "NUMBER", "Can", "you", "please", "rebase", "on", "latest", "master", "Thanks", "NUMBER", "Thank", "you", "I", "think", "we", "need", "assertFieldSelector", "assertFieldName", "and", "assertFieldXPath", "to", "match", "what", "we", "have", "in", "fill", "also", "default", "behavior", "of", "assertField", "should", "be", "keep", "BC", "and", "be", "aliased", "to", "assertFieldName", "NUMBER", "mduvall", "yeah", "SemVer", "be", "the", "goal", "Still", "not", "sure", "about", "this", "change", "NUMBER", "I", "was", "more", "expecting", "add", "inputName", "arg", "inspection", "capability", "to", "assertField", "html", "TAG", "TAG", "TAG", "Tests", "js", "test", "NUMBER", "assertField", "my_name", "plop", "test", "NUMBER", "assertField", "type", "name", "path", "my_name", "plop", "test", "NUMBER", "assertField", "type", "css", "path", "input", "name", "my_name", "plop", "test", "NUMBER", "assertField", "type", "xpath", "path", "input", "name", "my_name", "plop", "With", "new", "methods", "for", "asserts", "js", "test", "NUMBER", "assertFieldName", "my_name", "plop", "test", "NUMBER", "assertFieldSelector", "input", "name", "my_name", "plop", "test", "NUMBER", "assertFieldXPath", "input", "name", "my_name", "plop", "And", "assertField", "would", "obviously", "just", "use", "test", "NUMBER", "assertFieldName", "by", "default", "NUMBER", "Poke", "mduvall", "hexid", "sounds", "good", "let", "s", "do", "this", "NUMBER", "Docs", "issue", "to", "be", "fix", "you", "can", "safely", "merge", "this", "once", "address", "NUMBER", "Actually", "it", "was", "because", "PhantomJS", "was", "already", "provide", "a", "verbose", "option", "I", "didn", "t", "want", "to", "override", "NUMBER", "Well", "too", "late", "NUMBER", "Anyway", "I", "m", "easy", "with", "replacing", "it", "after", "all", "NUMBER", "Though", "as", "we", "just", "broke", "backward", "compatibility", "I", "think", "we", "need", "to", "continue", "support", "the", "direct", "option", "in", "some", "way", "NUMBER", "I", "ll", "create", "an", "issue", "for", "that", "NUMBER", "You", "mean", "verbose", "I", "suppose", "NUMBER", "Oddly", "I", "can", "t", "find", "trace", "of", "verbose", "in", "phantomjs", "anymore", "NUMBER", "Did", "I", "dream", "Anyway", "ensuring", "BC", "be", "P", "NUMBER", "Yeah", "we", "definitely", "want", "these", "features", "just", "clean", "the", "diff", "and", "rebase", "on", "top", "of", "latest", "master", "Dunno", "if", "you", "ve", "seen", "them", "but", "jshint", "error", "were", "encountered", "in", "the", "build", "modules", "utils", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "Blocks", "be", "nested", "too", "deeply", "NUMBER", "NUMBER", "modules", "utils", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "Blocks", "be", "nested", "too", "deeply", "NUMBER", "NUMBER", "modules", "utils", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "Blocks", "be", "nested", "too", "deeply", "NUMBER", "NUMBER", "modules", "utils", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "Blocks", "be", "nested", "too", "deeply", "NUMBER", "NUMBER", "test", "suite", "utils", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "Expected", "and", "instead", "saw", "NUMBER", "test", "suite", "utils", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "Expected", "and", "instead", "saw", "NUMBER", "Btw", "I", "think", "we", "should", "start", "the", "jshint", "validation", "before", "any", "other", "test", "to", "fail", "quickly", "and", "avoid", "wasting", "travis", "resources", "NUMBER", "Looks", "good", "until", "minor", "bits", "be", "address", "and", "jshint", "not", "complains", "anymore", "so", "the", "build", "turns", "green", "Sure", "Thanks", "I", "wonder", "if", "we", "shouldn", "t", "update", "createStep", "to", "accept", "a", "name", "as", "its", "first", "agument", "Sounds", "good", "let", "s", "do", "that", "NUMBER", "Have", "to", "interupt", "my", "review", "because", "of", "some", "conference", "call", "I", "ll", "continue", "tonight", "NUMBER", "Good", "work", "NUMBER", "Sorry", "for", "the", "lag", "I", "m", "over", "busy", "and", "cruelly", "lack", "time", "NUMBER", "Still", "some", "remarks", "to", "be", "address", "NUMBER", "Also", "the", "build", "fail", "LINK", "ci", "NUMBER", "org", "n", "NUMBER", "k", "NUMBER", "casperjs", "jobs", "NUMBER", "please", "consider", "fix", "it", "coalesce", "needs", "some", "unit", "test", "love", "Now", "I", "think", "about", "it", "the", "way", "we", "use", "coalesce", "be", "usually", "this", "way", "js", "var", "step", "this", "NUMBER", "createStep", "utils", "NUMBER", "coalesce", "then", "then", "NUMBER", "name", "_foo", "then", "Which", "could", "actually", "be", "write", "this", "way", "js", "var", "step", "this", "NUMBER", "createStep", "then", "then", "NUMBER", "name", "_foo", "then", "Honestly", "the", "more", "I", "think", "about", "it", "the", "less", "I", "see", "real", "use", "cases", "for", "coalesce", "mickaelandrieu", "I", "think", "I", "m", "ready", "to", "drop", "support", "for", "NUMBER", "for", "this", "to", "land", "NUMBER", "Also", "we", "would", "be", "able", "to", "get", "rid", "of", "some", "conditionals", "dedicated", "to", "support", "this", "version", "NUMBER", "NUMBER", "for", "use", "an", "event", "I", "d", "even", "like", "to", "deprecate", "the", "on", "listeners", "in", "the", "future", "NUMBER", "brandon", "bethke", "neudesic", "could", "you", "please", "rebase", "on", "latest", "master", "and", "implement", "the", "feature", "as", "an", "event", "only", "Have", "you", "considered", "implement", "something", "like", "TestSuiteResult", "toJSON", "Thanks", "Thanks", "Thanks", "Adding", "support", "for", "this", "in", "sendKeys", "be", "fine", "with", "me", "though", "I", "d", "expect", "some", "bits", "of", "documentation", "add", "along", "this", "patch", "Thanks", "Great", "patch", "thanks", "for", "contribute", "Good", "work", "while", "some", "raise", "issue", "be", "to", "be", "address", "NUMBER", "Thanks", "Thanks", "Thanks", "Great", "Awesome", "work", "thanks", "NUMBER", "Have", "you", "seen", "the", "error", "on", "Travis", "make", "compile", "mcs", "out", "NUMBER", "bin", "casperjs", "NUMBER", "exe", "NUMBER", "src", "casperjs", "NUMBER", "cs", "NUMBER", "src", "casperjs", "NUMBER", "cs", "NUMBER", "NUMBER", "error", "CS", "NUMBER", "System", "NUMBER", "IO", "NUMBER", "Path", "NUMBER", "Combine", "string", "string", "string", "be", "inaccessible", "due", "to", "its", "protection", "level", "usr", "lib", "mono", "NUMBER", "mscorlib", "NUMBER", "dll", "Location", "of", "the", "symbol", "relate", "to", "previous", "error", "NUMBER", "src", "casperjs", "NUMBER", "cs", "NUMBER", "NUMBER", "error", "CS", "NUMBER", "The", "best", "overloaded", "method", "match", "for", "System", "NUMBER", "IO", "NUMBER", "Path", "NUMBER", "GetFullPath", "string", "has", "some", "invalid", "argument", "usr", "lib", "mono", "NUMBER", "mscorlib", "NUMBER", "dll", "Location", "of", "the", "symbol", "relate", "to", "previous", "error", "NUMBER", "src", "casperjs", "NUMBER", "cs", "NUMBER", "NUMBER", "error", "CS", "NUMBER", "Argument", "NUMBER", "cannot", "convert", "object", "expression", "to", "type", "string", "NUMBER", "src", "casperjs", "NUMBER", "cs", "NUMBER", "NUMBER", "error", "CS", "NUMBER", "System", "NUMBER", "IO", "NUMBER", "Path", "NUMBER", "Combine", "string", "string", "string", "be", "inaccessible", "due", "to", "its", "protection", "level", "usr", "lib", "mono", "NUMBER", "mscorlib", "NUMBER", "dll", "Location", "of", "the", "symbol", "relate", "to", "previous", "error", "Compilation", "fail", "NUMBER", "error", "s", "NUMBER", "warnings", "Cool", "NUMBER", "I", "suspect", "run", "casperjs", "NUMBER", "exe", "selftest", "runs", "OK", "on", "your", "Windows", "machine", "Now", "I", "think", "of", "it", "wouldn", "t", "add", "a", "new", "travis", "matrix", "for", "run", "the", "test", "use", "that", "new", "executable", "be", "a", "good", "idea", "What", "be", "the", "failures", "mostly", "relate", "to", "Possible", "to", "gist", "the", "output", "Way", "cool", "NUMBER", "Can", "you", "commit", "that", "Also", "if", "it", "s", "phantomjs", "relate", "maybe", "we", "should", "just", "skip", "fail", "test", "when", "the", "detected", "platform", "be", "Windows", "what", "do", "you", "think", "Scratch", "that", "I", "m", "silly", "you", "can", "t", "commit", "anything", "as", "it", "would", "likely", "break", "casper", "NUMBER", "I", "d", "love", "having", "a", "green", "build", "use", "this", "NUMBER", "NET", "version", "could", "you", "imagine", "investigating", "a", "bit", "more", "to", "see", "what", "s", "happening", "here", "and", "why", "Nice", "NUMBER", "Thanks", "for", "your", "efforts", "I", "really", "appreciate", "NUMBER", "Thank", "you", "Could", "you", "eventually", "update", "the", "docs", "to", "mention", "the", "new", "executable", "Thanks", "Very", "cool", "thank", "you", "Looks", "like", "the", "test", "be", "fail", "Well", "test", "for", "constructors", "be", "usually", "hard", "and", "I", "m", "expecting", "to", "receive", "lots", "of", "question", "and", "bug", "report", "for", "this", "one", "NUMBER", "Still", "unsure", "we", "should", "land", "this", "one", "NUMBER", "Usually", "people", "can", "test", "for", "this", "kind", "of", "stuff", "themselves", "very", "easily", "and", "it", "keep", "under", "_their_", "control", "and", "responsibility", "js", "test", "NUMBER", "assert", "foo", "instanceof", "Cow", "foo", "be", "a", "Cow", "Can", "t", "really", "see", "much", "add", "value", "with", "a", "dedicated", "API", "hints", "Thanks", "Thanks", "Sry", "for", "be", "nitpicky", "Looks", "good", "Thanks", "Thanks", "Don", "t", "pay", "attention", "to", "test", "failure", "we", "get", "random", "ones", "for", "some", "reason", "we", "still", "need", "to", "investigate", "NUMBER", "Thanks", "NUMBER", "Thanks", "I", "m", "against", "this", "change", "NUMBER", "I", "find", "it", "useful", "to", "be", "sure", "the", "test", "file", "be", "run", "be", "the", "one", "you", "expect", "even", "if", "the", "information", "may", "be", "redundant", "for", "some", "NUMBER", "Can", "anybody", "with", "a", "Windows", "box", "confirm", "that", "this", "patch", "address", "the", "mention", "issue", "and", "doesn", "t", "break", "backward", "compatibility", "NUMBER", "deprecates", "casperjs", "NUMBER", "bat", "so", "I", "m", "closing", "this", "one", "NUMBER", "Looks", "good", "NUMBER", "Thanks", "Thanks", "Just", "close", "this", "PR", "and", "cherry", "pick", "the", "commit", "you", "need", "on", "a", "new", "branch", "and", "send", "a", "new", "PR", "Thanks", "Thanks", "you", "re", "on", "fire", "today", "that", "s", "plain", "cool", "Maybe", "we", "want", "to", "be", "sure", "this", "be", "part", "of", "the", "maintained", "public", "API", "of", "phantom", "so", "it", "s", "not", "likely", "to", "break", "in", "the", "future", "NUMBER", "I", "ll", "take", "care", "of", "write", "the", "docs", "I", "m", "in", "holidays", "use", "a", "crappy", "edge", "connection", "maybe", "laurentj", "could", "have", "a", "look", "Also", "AFAICS", "test", "be", "fail", "NUMBER", "Poke", "NUMBER", "No", "pb", "take", "your", "time", "Le", "NUMBER", "ao\u00fbt", "NUMBER", "NUMBER", "NUMBER", "Nicolas", "notifications", "github", "NUMBER", "com", "a", "\u00e9crit", "I", "was", "in", "holidays", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "NUMBER", "The", "patch", "looks", "good", "though", "some", "minor", "CS", "issue", "to", "be", "address", "NUMBER", "Also", "please", "ensure", "to", "rebase", "on", "top", "of", "latest", "master", "NUMBER", "Sorry", "for", "the", "latency", "I", "ve", "be", "quite", "busy", "with", "other", "fronts", "these", "last", "months", "Thanks", "for", "contribute", "refs", "NUMBER", "theefer", "will", "merge", "this", "one", "and", "publish", "the", "casperjs", "package", "to", "npm", "once", "NUMBER", "stable", "will", "be", "tag", "NUMBER", "I", "hope", "I", "ll", "be", "able", "to", "release", "it", "before", "the", "end", "of", "the", "summer", "NUMBER", "laurentj", "while", "there", "s", "still", "some", "work", "regard", "code", "style", "and", "implementation", "I", "m", "still", "not", "convinced", "by", "the", "feature", "as", "I", "can", "see", "cumbersome", "support", "request", "come", "to", "the", "mailing", "list", "already", "I", "d", "personally", "rather", "see", "this", "be", "implement", "by", "developers", "or", "by", "a", "third", "party", "project", "NUMBER", "But", "I", "need", "to", "take", "some", "time", "reviewing", "it", "thoroughly", "and", "think", "about", "it", "NUMBER", "Also", "this", "PR", "badly", "needs", "test", "documentation", "of", "course", "NUMBER", "Thanks", "dude", "NUMBER", "When", "an", "assertion", "fail", "casperjs", "stops", "any", "steps", "in", "the", "current", "suite", "NUMBER", "This", "could", "cause", "issue", "in", "a", "test", "suite", "NUMBER", "For", "example", "withFrame", "generates", "some", "steps", "one", "to", "switch", "to", "the", "given", "frame", "one", "to", "execute", "the", "given", "test", "one", "to", "switch", "to", "the", "main", "frame", "NUMBER", "If", "test", "fail", "the", "third", "step", "be", "not", "executed", "and", "then", "next", "test", "fail", "because", "they", "be", "not", "executed", "in", "the", "main", "frame", "NUMBER", "we", "can", "saw", "this", "issue", "in", "selftests", "if", "a", "test", "fail", "in", "test", "suite", "casper", "frame", "NUMBER", "js", "test", "in", "test", "suite", "casper", "global", "NUMBER", "js", "fail", "too", "NUMBER", "Thanks", "for", "your", "patch", "Thanks", "for", "your", "patch", "Please", "take", "care", "of", "these", "jshint", "issue", "LINK", "ci", "NUMBER", "org", "n", "NUMBER", "k", "NUMBER", "casperjs", "jobs", "NUMBER", "L", "NUMBER", "Damn", "you", "re", "right", "Thanks", "Thanks", "This", "could", "be", "interesting", "NUMBER", "Please", "could", "you", "update", "the", "documentation", "Tests", "be", "welcomed", "too", "NUMBER", "Great", "stuff", "NUMBER", "I", "ll", "review", "the", "patch", "but", "it", "s", "looking", "good", "already", "NUMBER", "I", "ll", "merge", "this", "as", "soon", "as", "the", "test", "be", "green", "though", "NUMBER", "Sorry", "I", "never", "use", "Ruby", "and", "I", "don", "t", "have", "time", "to", "learn", "a", "new", "language", "NUMBER", "I", "can", "t", "express", "how", "happy", "I", "be", "with", "the", "great", "work", "you", "achieved", "here", "NUMBER", "Thank", "you", "so", "much", "NUMBER", "Looks", "very", "good", "despite", "some", "minor", "remarks", "which", "should", "be", "address", "though", "NUMBER", "Thanks", "Also", "I", "d", "like", "some", "documentation", "update", "as", "well", "if", "possible", "NUMBER", "Thanks", "Landed", "Cheers", "quanghoc", "The", "docs", "says", "New", "in", "version", "NUMBER", "NUMBER", "Please", "upgrade", "to", "NUMBER", "beta", "NUMBER", "if", "you", "plan", "to", "use", "this", "feature", "NUMBER", "Looks", "good", "please", "take", "care", "of", "the", "minor", "code", "style", "issue", "and", "I", "ll", "merge", "this", "Thanks", "Merged", "thanks", "for", "contribute", "Looks", "nice", "I", "m", "a", "bit", "busy", "for", "the", "next", "few", "days", "but", "expect", "a", "review", "next", "week", "thanks", "Reviewed", "please", "take", "care", "of", "the", "several", "issue", "I", "raise", "in", "the", "diff", "thank", "you", "The", "more", "I", "review", "this", "one", "the", "more", "I", "think", "the", "filling", "methods", "by", "name", "by", "ids", "or", "by", "xpath", "possibly", "should", "sit", "in", "ClientUtils", "and", "should", "only", "be", "call", "accordingly", "through", "evaluate", "in", "their", "corresponding", "methods", "in", "Casper", "NUMBER", "Right", "now", "the", "code", "be", "hard", "to", "read", "follow", "and", "grasp", "as", "it", "declares", "function", "in", "the", "casper", "prototype", "to", "be", "executed", "within", "the", "page", "env", "I", "d", "like", "a", "bit", "more", "of", "separation", "of", "concerns", "here", "NUMBER", "Let", "me", "try", "to", "pick", "your", "branch", "and", "send", "you", "a", "PR", "accordingly", "NUMBER", "Finally", "merge", "by", "myself", "thank", "you", "thanks", "Looks", "fine", "NUMBER", "Can", "you", "please", "update", "the", "docs", "in", "docs", "modules", "clientutils", "NUMBER", "rst", "Thank", "you", "Wow", "I", "m", "sorry", "NUMBER", "I", "m", "get", "old", "NUMBER", "Thanks", "hmm", "why", "did", "you", "close", "this", "Oh", "indeed", "I", "didn", "t", "notice", "NUMBER", "This", "be", "weird", "as", "the", "diff", "be", "quite", "clean", "NUMBER", "Can", "you", "please", "try", "to", "investigate", "what", "s", "going", "on", "The", "feature", "be", "interesting", "NUMBER", "Thanks", "for", "contribute", "NUMBER", "Thanks", "Thanks", "Thanks", "Thanks", "Thanks", "for", "the", "quick", "fix", "NUMBER", "Will", "looking", "back", "at", "the", "whole", "cli", "code", "I", "think", "I", "m", "gonna", "refactor", "it", "though", "Thanks", "My", "main", "concern", "with", "this", "be", "its", "maintenance", "I", "ve", "already", "made", "the", "mistake", "accepting", "a", "ruby", "executable", "which", "be", "no", "more", "maintained", "by", "the", "original", "contributor", "so", "I", "think", "I", "won", "t", "do", "the", "same", "mistake", "twice", "NUMBER", "Python", "be", "perfectly", "fine", "for", "the", "time", "be", "NUMBER", "Thanks", "for", "contribute", "NUMBER", "I", "don", "t", "really", "like", "the", "thenSkip", "methods", "as", "they", "re", "coupling", "back", "the", "tester", "to", "the", "casper", "instance", "NUMBER", "Other", "than", "that", "it", "s", "a", "pretty", "cool", "patch", "Looks", "nice", "NUMBER", "I", "ll", "be", "playing", "with", "the", "patch", "to", "see", "how", "it", "goes", "NUMBER", "I", "m", "not", "sure", "we", "should", "have", "this", "dedicated", "purple", "bar", "for", "when", "test", "have", "be", "skipped", "in", "a", "suite", "NUMBER", "Right", "now", "with", "the", "patch", "the", "whole", "casper", "suite", "finishes", "be", "purple", "which", "be", "not", "really", "what", "s", "expected", "here", "I", "think", "skipping", "test", "be", "okay", "and", "should", "not", "affect", "the", "build", "status", "NUMBER", "Also", "having", "the", "number", "of", "skipped", "test", "in", "the", "status", "bar", "be", "informative", "enough", "NUMBER", "I", "ve", "push", "a", "skip", "branch", "please", "try", "to", "keep", "in", "sync", "with", "it", "for", "further", "development", "NUMBER", "Also", "I", "m", "finding", "the", "two", "skip", "concepts", "very", "confusing", "I", "suggest", "renaming", "Casper", "skip", "to", "Casper", "bypass", "instead", "NUMBER", "I", "ve", "refactored", "tes", "test", "and", "renamed", "Casper", "skip", "to", "Casper", "bypass", "NUMBER", "Now", "I", "m", "realizing", "the", "Tester", "skip", "implementation", "just", "relies", "on", "step", "bypass", "NUMBER", "That", "s", "no", "good", "as", "one", "may", "want", "to", "skip", "test", "not", "relying", "on", "navigation", "steps", "NUMBER", "I", "ll", "have", "to", "change", "the", "implementation", "as", "well", "NUMBER", "In", "fact", "I", "find", "test", "NUMBER", "skip", "irrevelant", "NUMBER", "Sample", "use", "js", "casper", "NUMBER", "test", "NUMBER", "begin", "foo", "NUMBER", "function", "test", "test", "NUMBER", "assert", "true", "test", "NUMBER", "assert", "true", "test", "NUMBER", "skip", "NUMBER", "test", "NUMBER", "do", "Other", "use", "case", "compat", "js", "casper", "NUMBER", "test", "NUMBER", "begin", "foo", "NUMBER", "function", "test", "if", "phantom", "NUMBER", "version", "NUMBER", "major", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "Also", "here", "s", "a", "sample", "XUnit", "XML", "results", "log", "output", "of", "the", "whole", "casper", "test", "suite", "LINK", "What", "do", "you", "think", "As", "you", "can", "see", "it", "s", "quite", "a", "big", "changeset", "so", "as", "we", "re", "in", "NUMBER", "RCX", "should", "we", "wait", "for", "NUMBER", "for", "push", "this", "PS", "cherry", "on", "the", "cake", "this", "be", "totally", "BC", "but", "heh", "your", "feedback", "be", "totally", "welcome", "You", "should", "wait", "for", "the", "NUMBER", "for", "push", "this", "I", "m", "thinking", "the", "same", "NUMBER", "Merged", "the", "feature", "into", "the", "NUMBER", "dev", "LINK", "dev", "branch", "I", "m", "closing", "this", "one", "has", "the", "feature", "development", "will", "now", "occur", "in", "the", "NUMBER", "branch", "NUMBER", "You", "did", "it", "right", "Sure", "I", "totally", "support", "the", "idea", "NUMBER", "Now", "if", "you", "could", "add", "test", "and", "patch", "the", "docs", "it", "would", "be", "really", "cool", "Thanks", "for", "contribute", "NUMBER", "Merged", "in", "NUMBER", "eae", "NUMBER", "edbfd", "NUMBER", "e", "NUMBER", "b", "NUMBER", "e", "NUMBER", "fcd", "NUMBER", "e", "NUMBER", "b", "NUMBER", "I", "took", "the", "liberty", "to", "adapt", "the", "code", "a", "bit", "NUMBER", "Ah", "probably", "instructions", "for", "contribute", "documentation", "LINK", "write", "documentation", "aren", "t", "clear", "enough", "but", "you", "shouldn", "t", "modify", "the", "HTML", "pages", "only", "the", "sources", "LINK", "pages", "README", "NUMBER", "md", "casperjs", "documentation", "NUMBER", "Yep", "I", "dunno", "if", "I", "want", "to", "merge", "this", "as", "be", "anyway", "reading", "the", "description", "NUMBER", "damn", "it", "all", "and", "write", "a", "teenie", "tiny", "NUMBER", "NET", "app", "that", "will", "handle", "it", "all", "nicely", "owenmartin", "that", "would", "be", "the", "best", "option", "for", "sure", "but", "up", "to", "you", "as", "I", "don", "t", "have", "a", "clue", "how", "to", "do", "it", "myself", "Great", "patch", "I", "notice", "a", "couple", "semantic", "mistakes", "in", "the", "findOne", "findAll", "test", "NUMBER", "Should", "I", "commit", "the", "change", "I", "made", "to", "fix", "them", "Sure", "Thanks", "for", "contribute", "Thanks", "for", "contribute", "Hmm", "looks", "like", "you", "ve", "commit", "your", "work", "on", "test", "suite", "on", "the", "wrong", "branch", "could", "you", "please", "create", "a", "new", "PR", "for", "the", "test", "relate", "stuff", "Thanks", "Note", "on", "initial", "PR", "still", "no", "windows", "box", "nor", "work", "VM", "to", "test", "any", "windows", "relate", "PRs", "that", "s", "why", "it", "takes", "so", "long", "NUMBER", "Neat", "thanks", "for", "contribute", "Thanks", "For", "the", "records", "you", "re", "the", "first", "person", "submit", "a", "doc", "patch", "while", "actually", "build", "the", "pages", "NUMBER", "Thank", "you", "Already", "implement", "see", "NUMBER", "thanks", "NUMBER", "sorry", "for", "the", "noise", "my", "mistake", "was", "because", "you", "have", "to", "modify", "the", "sources", "LINK", "pages", "builder", "sources", "not", "the", "resulting", "html", "My", "knowledge", "of", "Batch", "and", "the", "Windows", "platform", "be", "nearly", "zero", "I", "hereby", "invoke", "Reinboom", "for", "some", "advice", "and", "validation", "NUMBER", "I", "ll", "try", "and", "knock", "one", "together", "that", "maintains", "the", "phantom", "argument", "That", "would", "be", "just", "great", "thanks", "Just", "had", "the", "opportunity", "to", "finally", "play", "with", "this", "patch", "on", "a", "Windows", "VM", "Copyright", "c", "NUMBER", "Microsoft", "Corporation", "NUMBER", "All", "rights", "reserved", "NUMBER", "C", "local", "casperjs", "batchbin", "casperjs", "NUMBER", "bat", "NUMBER", "samples", "cliplay", "NUMBER", "js", "plop", "NUMBER", "foo", "bar", "bar", "foo", "Casper", "CLI", "pass", "args", "foo", "bar", "bar", "foo", "Casper", "CLI", "pass", "options", "plop", "NUMBER", "Works", "enough", "for", "me", "NUMBER", "Thanks", "I", "m", "not", "very", "comfortable", "with", "the", "propose", "API", "NUMBER", "At", "least", "I", "d", "like", "options", "be", "pass", "as", "an", "object", "javascript", "casper", "NUMBER", "click", "foo", "a", "NUMBER", "bar", "blockEvents", "loadInProgress", "navigationRequested", "Yes", "it", "s", "a", "bit", "more", "verbose", "but", "we", "will", "be", "able", "to", "add", "more", "option", "easily", "while", "keep", "everything", "BC", "NUMBER", "Other", "than", "that", "very", "helpful", "feature", "NUMBER", "Meanwhile", "I", "notice", "you", "use", "the", "term", "blockEvents", "instead", "of", "blockStep", "why", "a", "more", "general", "term", "I", "was", "specifically", "aiming", "at", "steps", "NUMBER", "rather", "than", "more", "general", "events", "that", "be", "all", "over", "the", "place", "NUMBER", "You", "re", "right", "I", "don", "t", "like", "that", "name", "as", "well", "and", "it", "may", "be", "confusing", "for", "end", "users", "NUMBER", "I", "wonder", "if", "we", "couldn", "t", "find", "something", "even", "more", "meaningful", "though", "NUMBER", "Also", "what", "do", "BC", "mean", "Backward", "Compatible", "Finally", "NUMBER", "I", "wonder", "how", "I", "can", "update", "a", "pull", "request", "to", "reference", "a", "different", "commit", "NUMBER", "Just", "keep", "committing", "and", "push", "on", "the", "very", "same", "branch", "on", "your", "fork", "PS", "as", "a", "side", "note", "it", "s", "generally", "preferable", "to", "create", "a", "branch", "dedicated", "to", "implement", "a", "given", "feature", "before", "sending", "PRs", "NUMBER", "I", "m", "starting", "wondering", "if", "those", "blocking", "events", "shouldn", "t", "be", "configurable", "casper", "options", "So", "you", "could", "define", "these", "at", "start", "time", "then", "switching", "use", "this", "holdOn", "method", "javascript", "var", "casper", "require", "casper", "NUMBER", "create", "holdOn", "navigationRequested", "true", "pendingWait", "true", "loadInProgress", "false", "casper", "NUMBER", "art", "LINK", "function", "stuff", "this", "NUMBER", "click", "link", "defaults", "blocking", "events", "be", "use", "casper", "NUMBER", "holdOn", "loadInProgress", "true", "we", "should", "only", "update", "that", "new", "different", "value", "casper", "NUMBER", "en", "function", "this", "NUMBER", "click", "newlink", "new", "global", "blocking", "events", "be", "use", "or", "this", "NUMBER", "click", "newlink", "holdOn", "per", "click", "specific", "bocking", "events", "specified", "here", "specific", "blocking", "events", "be", "use", "What", "do", "you", "think", "What", "s", "the", "status", "of", "this", "PR", "be", "we", "itching", "to", "get", "this", "feature", "integrated", "real", "soon", "Not", "necessarily", "I", "was", "just", "triaging", "tickets", "PRs", "hence", "this", "poke", "I", "ll", "be", "reading", "the", "whole", "thread", "again", "in", "the", "following", "days", "to", "act", "some", "decision", "about", "this", "NUMBER", "YAY", "WINDOWS", "USER", "Thanks", "for", "the", "PR", "but", "could", "you", "_please_", "test", "PR", "NUMBER", "which", "provides", "the", "same", "feature", "but", "it", "s", "entirely", "write", "in", "a", "NUMBER", "bat", "file", "I", "don", "t", "have", "any", "Windows", "box", "at", "hand", "so", "any", "help", "would", "be", "warmly", "welcome", "Indeed", "Thanks", "for", "contribute", "NUMBER", "Thanks", "for", "contribute", "NUMBER", "Wow", "thank", "you", "I", "ll", "be", "merge", "this", "after", "some", "test", "as", "soon", "as", "I", "ll", "get", "a", "windows", "vm", "run", "Merged", "thanks", "for", "contribute", "NUMBER", "PS", "dunno", "why", "github", "hasn", "t", "close", "this", "one", "automatically", "NUMBER", "AndiDog", "Reinboom", "if", "you", "have", "NUMBER", "minutes", "could", "you", "just", "describe", "basique", "installation", "if", "any", "usage", "of", "this", "new", "tool", "Write", "it", "here", "in", "markdown", "I", "ll", "add", "it", "to", "the", "docs", "myself", "NUMBER", "Reinboom", "thanks", "Thanks", "for", "contribute", "Thanks", "for", "contribute", "NUMBER", "Thanks", "for", "contribute", "NUMBER", "I", "don", "t", "really", "want", "to", "support", "all", "possible", "exotic", "use", "cases", "NUMBER", "Those", "should", "be", "handle", "manually", "by", "the", "developer", "NUMBER", "One", "more", "time", "thanks", "for", "contribute", "NUMBER", "Thanks", "very", "useful", "NUMBER", "I", "ll", "be", "merge", "this", "just", "take", "care", "of", "the", "few", "typo", "I", "commented", "on", "Merged", "NUMBER", "Thanks", "for", "contribute", "NUMBER", "Merged", "thanks", "for", "contribute", "NUMBER", "I", "m", "not", "sure", "for", "the", "getCurrentHeader", "names", "mostly", "because", "it", "s", "not", "obvious", "if", "we", "re", "talking", "about", "_response_", "or", "_request_", "ones", "NUMBER", "Also", "I", "m", "thinking", "a", "neat", "API", "would", "be", "something", "more", "like", "javascript", "var", "accept", "casper", "NUMBER", "currentResponse", "NUMBER", "headers", "NUMBER", "get", "Content", "Length", "What", "do", "you", "think", "Now", "I", "m", "wondering", "if", "I", "shouldn", "t", "pass", "the", "response", "object", "to", "the", "step", "callback", "javascript", "casper", "NUMBER", "art", "LINK", "function", "response", "if", "json", "NUMBER", "test", "response", "NUMBER", "headers", "NUMBER", "get", "Content", "Type", "this", "NUMBER", "echo", "JSON", "spotted", "That", "would", "break", "any", "old", "codebase", "relying", "on", "the", "deprecate", "self", "argument", "pass", "as", "a", "first", "parameter", "though", "Thoughts", "Very", "nice", "things", "be", "shaping", "up", "nicely", "NUMBER", "Regarding", "my", "comment", "LINK", "issuecomment", "NUMBER", "about", "passing", "the", "response", "as", "an", "argument", "of", "the", "step", "callback", "any", "thought", "Merged", "doni", "documentation", "be", "here", "LINK", "casper", "NUMBER", "en", "NUMBER", "callbacks", "Merci", "mec", "Nice", "NUMBER", "This", "PR", "and", "the", "PUT", "request", "you", "perform", "in", "your", "test", "highlights", "the", "real", "limitations", "of", "use", "the", "filesystem", "for", "HTTP", "relate", "test", "NUMBER", "I", "m", "in", "the", "process", "of", "moving", "to", "a", "full", "HTTP", "server", "solution", "for", "test", "request", "responses", "eg", "NUMBER", "what", "s", "have", "be", "do", "for", "this", "test", "LINK", "_status", "NUMBER", "js", "I", "think", "I", "ll", "merge", "this", "one", "when", "I", "m", "do", "with", "it", "NUMBER", "As", "always", "thanks", "for", "contribute", "NUMBER", "Merged", "NUMBER", "Thanks", "for", "contribute", "I", "m", "sorry", "this", "one", "won", "t", "make", "it", "to", "master", "NUMBER", "Thank", "you", "Great", "stuff", "thanks", "for", "contribute", "NUMBER", "Great", "stuff", "thanks", "Could", "you", "eventually", "try", "to", "add", "some", "test", "for", "these", "new", "events", "please", "For", "example", "by", "trying", "to", "submit", "a", "form", "triggering", "a", "keyCode", "NUMBER", "event", "Merci", "Well", "the", "more", "test", "coverage", "we", "have", "the", "more", "we", "ll", "be", "sure", "that", "it", "works", "as", "one", "can", "expect", "NUMBER", "I", "ll", "try", "to", "add", "more", "test", "cases", "if", "I", "can", "find", "some", "time", "and", "create", "a", "dedicated", "remote", "branch", "NUMBER", "Anyway", "we", "could", "possibly", "merge", "the", "feature", "for", "NUMBER", "with", "strong", "warnings", "about", "its", "limitation", "NUMBER", "I", "had", "to", "revert", "change", "erroneously", "commit", "to", "master", "sorry", "for", "the", "noise", "NUMBER", "After", "playing", "a", "bit", "with", "the", "feature", "looks", "like", "it", "s", "indeed", "fail", "at", "many", "other", "use", "cases", "NUMBER", "I", "ll", "keep", "the", "keyboard", "branch", "to", "investigate", "a", "bit", "more", "about", "these", "NUMBER", "In", "the", "meanwhile", "let", "s", "all", "star", "this", "issue", "in", "order", "to", "make", "it", "come", "in", "future", "phantomjs", "release", "LINK", "NUMBER", "q", "keyboard", "I", "ve", "just", "start", "a", "discussion", "in", "ariya", "phantomjs", "NUMBER", "It", "will", "be", "release", "this", "week", "with", "phantomjs", "NUMBER", "ysangkok", "here", "you", "go", "LINK", "src", "phantom", "NUMBER", "cpp", "ysangkok", "right", "now", "and", "as", "we", "re", "still", "compatible", "with", "phantomjs", "NUMBER", "you", "have", "to", "use", "this", "feature", "by", "yourself", "NUMBER", "I", "might", "drop", "phantomjs", "NUMBER", "support", "when", "phantomjs", "NUMBER", "comes", "out", "in", "December", "then", "I", "ll", "be", "able", "to", "refactor", "fill", "NUMBER", "mpalmerlee", "this", "patch", "was", "merge", "then", "remove", "as", "phantomjs", "has", "gained", "native", "keyboard", "events", "LINK", "Reference", "wiki", "webpage", "sendEvent", "in", "the", "meanwhile", "NUMBER", "But", "as", "I", "say", "in", "the", "comment", "preceding", "yours", "it", "will", "be", "release", "when", "support", "for", "NUMBER", "will", "be", "drop", "NUMBER", "I", "ve", "just", "created", "NUMBER", "to", "keep", "track", "of", "this", "NUMBER", "Just", "to", "be", "sure", "be", "it", "now", "work", "for", "you", "with", "this", "change", "Does", "it", "solve", "NUMBER", "Wasn", "t", "it", "work", "use", "the", "event", "object", "fix", "by", "NUMBER", "a", "NUMBER", "e", "NUMBER", "eb", "NUMBER", "f", "NUMBER", "eed", "NUMBER", "fb", "NUMBER", "c", "NUMBER", "ceeabc", "NUMBER", "a", "NUMBER", "I", "m", "revamping", "the", "docs", "right", "now", "the", "fix", "will", "be", "applied", "NUMBER", "Fixed", "in", "new", "docs", "NUMBER", "Ah", "yes", "silly", "me", "thanks", "Thanks", "for", "contribute", "NUMBER", "Commited", "don", "t", "pay", "attention", "to", "latest", "commit", "Merged", "NUMBER", "Okay", "thanks", "a", "lot", "for", "this", "work", "it", "s", "great", "NUMBER", "I", "commented", "a", "bit", "some", "change", "which", "might", "be", "discussed", "though", "NUMBER", "Thanks", "again", "Yeah", "sorry", "for", "the", "latency", "NUMBER", "Actually", "when", "I", "stated", "I", "wanted", "comment", "blocks", "that", "was", "for", "multiline", "ones", "So", "for", "single", "line", "comments", "I", "d", "prefer", "keep", "the", "form", "NUMBER", "Also", "I", "m", "not", "really", "happy", "with", "the", "var", "declarations", "with", "no", "assignment", "so", "instead", "of", "javascript", "var", "casper", "casper", "require", "casper", "NUMBER", "create", "I", "d", "rather", "prefer", "the", "old", "form", "javascript", "var", "casper", "require", "casper", "NUMBER", "create", "Sorry", "I", "ve", "not", "be", "clear", "enough", "Poke", "Ping", "No", "problem", "mothers", "first", "Can", "you", "please", "review", "the", "whole", "diff", "I", "can", "see", "places", "where", "all", "the", "change", "have", "not", "be", "applied", "Thanks", "a", "lot", "for", "your", "work", "I", "m", "so", "sorry", "be", "so", "painful", "feel", "free", "to", "hate", "me", "Merci", "Thanks", "NUMBER", "Thanks", "Yay", "pretty", "cool", "enhancement", "thanks", "for", "contribute", "Nice", "May", "I", "eventually", "ask", "you", "to", "provide", "some", "unit", "test", "and", "some", "documentation", "for", "these", "change", "Thanks", "Oh", "it", "s", "you", "okay", "NUMBER", "Don", "t", "worry", "I", "ll", "take", "care", "of", "the", "unit", "test", "NUMBER", "But", "could", "you", "please", "just", "add", "some", "documentation", "Everything", "be", "explained", "on", "the", "gh", "pages", "branch", "README", "LINK", "pages", "readme", "No", "problem", "thanks", "NUMBER", "months", "later", "what", "s", "the", "status", "of", "this", "PR", "Merged", "thanks", "a", "lot", "for", "contribute", "Merged", "thanks", "for", "contribute", "NUMBER", "PS", "thank", "you", "so", "much", "for", "this", "I", "really", "appreciate", "NUMBER", "fix", "with", "ae", "NUMBER", "beef", "NUMBER", "f", "NUMBER", "Hmmm", "NUMBER", "Could", "you", "please", "use", "just", "one", "PR", "with", "a", "dedicated", "branch", "on", "your", "own", "fork", "That", "would", "ease", "a", "lot", "merge", "the", "whole", "featureset", "Could", "you", "please", "commit", "the", "generate", "html", "as", "well", "will", "ease", "review", "Sorry", "I", "came", "with", "a", "rather", "simpler", "solution", "I", "drop", "your", "test", "because", "none", "were", "passing", "on", "my", "box", "NUMBER", "I", "ll", "be", "work", "on", "mocking", "the", "results", "provide", "by", "the", "fs", "API", "if", "I", "get", "some", "times", "No", "worry", "for", "the", "merge", "with", "upstream", "I", "did", "it", "by", "my", "side", "I", "merge", "your", "patch", "thanks", "for", "contribute", "NUMBER", "No", "problem", "at", "all", "I", "m", "probably", "a", "bit", "too", "much", "picky", "about", "this", "Don", "t", "tell", "anybody", "NUMBER", "Should", "be", "a", "bit", "more", "clear", "with", "a", "README", "LINK", "pages", "README", "NUMBER", "md", "file", "Thanks", "for", "this", "PR", "definitely", "a", "neat", "idea", "NUMBER", "I", "ll", "work", "out", "the", "small", "cyclic", "dependency", "issue", "and", "merge", "the", "feature", "soon", "stay", "tuned", "Interesting", "feature", "but", "could", "you", "please", "fix", "the", "indentation", "and", "code", "standard", "issue", "before", "I", "merge", "it", "Thanks", "NUMBER", "Thanks", "It", "be", "well", "very", "verbose", "I", "ll", "try", "to", "add", "something", "like", "custom", "formats", "for", "you", "to", "add", "your", "own", "custom", "log", "levels", "with", "a", "callback", "to", "format", "the", "message", "string", "against", "the", "resource", "and", "other", "stuff", "So", "after", "having", "thinking", "a", "bit", "of", "implement", "the", "feature", "I", "finally", "find", "that", "it", "was", "quite", "easily", "doable", "by", "the", "developer", "I", "provide", "a", "sample", "LINK", "to", "highlight", "how", "to", "do", "exactly", "what", "your", "patch", "do", "Happy", "to", "help", "The", "patch", "looks", "great", "but", "it", "makes", "the", "test", "suite", "fail", "on", "the", "waitFor", "test", "Could", "you", "please", "have", "a", "look", "and", "fix", "what", "be", "make", "that", "test", "actually", "fail", "Thanks", "I", "may", "be", "due", "to", "your", "use", "of", "setTimeout", "instead", "of", "setInterval", "Sounds", "awesome", "don", "t", "hesitate", "to", "write", "as", "many", "test", "as", "you", "can", "and", "eventually", "to", "update", "the", "docs", "in", "the", "gh", "pages", "branch", "as", "well", "Just", "great", "I", "m", "in", "the", "process", "of", "splitting", "the", "code", "of", "casper", "NUMBER", "js", "into", "smaller", "modules", "in", "the", "modularization", "branch", "I", "will", "also", "split", "test", "so", "don", "t", "expect", "a", "merge", "really", "soon", "I", "ll", "try", "to", "push", "the", "whole", "new", "thing", "in", "the", "next", "few", "days", "The", "feature", "has", "be", "merge", "into", "master", "as", "well", "as", "the", "modularization", "branch", "NUMBER", "Many", "thanks", "for", "your", "great", "work", "Great", "stuff", "thanks", "To", "get", "a", "field", "value", "have", "a", "look", "at", "ClientUtils", "NUMBER", "getFieldValue", "LINK", "clientutils", "NUMBER", "getFieldValue", "js", "casper", "NUMBER", "en", "function", "this", "NUMBER", "echo", "this", "NUMBER", "evaluate", "function", "return", "__utils__", "NUMBER", "getFieldValue", "foo", "It", "will", "return", "multiple", "values", "in", "case", "of", "a", "checkbox", "or", "radio", "group", "NUMBER", "For", "the", "records", "I", "ve", "just", "add", "Casper", "NUMBER", "getFormValues", "LINK", "casper", "NUMBER", "getFormValues", "in", "db", "NUMBER", "de", "NUMBER", "ad", "NUMBER", "a", "NUMBER", "fe", "NUMBER", "e", "NUMBER", "db", "NUMBER", "af", "NUMBER", "eeb", "to", "ease", "retrieving", "form", "values", "NUMBER", "Let", "me", "rather", "add", "an", "onScriptTimeout", "option", "to", "Casper", "instead", "NUMBER", "After", "all", "there", "can", "be", "several", "use", "cases", "and", "this", "behavior", "should", "be", "overridable", "any", "case", "NUMBER", "The", "feature", "has", "be", "implement", "LINK", "NUMBER", "The", "option", "has", "be", "named", "onTimeout", "and", "the", "default", "behavior", "on", "script", "execution", "timeout", "has", "be", "set", "to", "die", "as", "suggested", "Unfortunately", "I", "cannot", "tie", "the", "timeout", "callback", "handle", "to", "the", "context", "of", "the", "Casper", "NUMBER", "art", "method", "NUMBER", "Though", "you", "can", "get", "the", "current", "request", "document", "location", "by", "use", "the", "requestUrl", "property", "as", "well", "as", "some", "other", "contextual", "informations", "javascript", "var", "casper", "new", "phantom", "NUMBER", "Casper", "timeout", "NUMBER", "onTimeout", "function", "self", "self", "NUMBER", "die", "timeout", "exceeded", "NUMBER", "context", "JSON", "NUMBER", "ringify", "currentUrl", "self", "NUMBER", "getCurrentUrl", "currentHTTPStatus", "self", "NUMBER", "currentHTTPStatus", "requestUrl", "self", "NUMBER", "requestUrl", "NUMBER", "Yes", "it", "works", "but", "the", "location", "you", "get", "be", "the", "one", "pass", "to", "start", "NUMBER", "What", "if", "the", "timeout", "be", "reached", "after", "say", "NUMBER", "thenOpen", "other", "steps", "Thanks", "great", "classy", "patch", "I", "ve", "update", "the", "docs", "LINK", "phantom_Casper_getGlobal", "accordingly", "NUMBER", "Oh", "just", "as", "a", "side", "note", "I", "switched", "the", "order", "of", "the", "argument", "from", "your", "initial", "proposition", "The", "debug", "message", "have", "be", "add", "thanks"], "text_count": [0, 3078, 794, 418, 182, 50, 328, 0, 15, 376, 435, 738, 464, 385, 304, 104, 0, 0, 0, 0, 1008, 342, 150, 81, 173, 181, 0, 0, 0, 0, 1907, 1272, 652, 29, 372, 126, 0, 0, 0, 0, 2133, 14, 839, 774, 563, 0, 0, 0, 0, 0, 537, 211, 238, 175, 230, 129, 188, 0, 0, 0, 1632, 151, 1272, 139, 0, 0, 0, 0, 0, 0, 1277, 122, 951, 496, 151, 0, 0, 0, 0, 0, 2080, 1004, 200, 754, 180, 96, 0, 0, 0, 0, 157, 722, 87, 0, 0, 0, 0, 0, 0, 0, 1902, 384, 1067, 471, 0, 0, 0, 0, 0, 0, 3427, 6604, 145, 364, 56, 147, 0, 0, 0, 0, 8671, 40, 6611, 128, 1579, 1789]}, {"repo": "casperjs", "type": "nonelite", "title": "", "number of text": 680, "text": "  Add 2 functions to the casper module:\n- getElement\n- getElements\n\nThey provide a way to fetch DOM nodes with scope attached to them, so further manipulations and operations like using querySelector can be done.\n   I'm not an english language expert, but haven't been able to find anything on the other way of spelling it.\n\nTo back me up, here is a couple of links http://www.thefreedictionary.com/explicit, http://dictionary.reference.com/browse/explicit, http://dictionary.cambridge.org/dictionary/british/explicit\n  this code doesn't work; `Array.prototype.forEach` should be `Array.prototype.map`.\n    SEE: https://github.com/blog/1482-heads-up-nosniff-header-support-coming-to-chrome-and-firefox\n  We are using the **\"page.resource.requsted\"** event to measure the page loading times. But we noticed, that on the urls with russian symbols (they are mostly urlencoded, look at ru.wikipedia.org) these event were never fired! \n\nThe problem was in the _page.onResourceRequested()_ function. It compares the requested URL with the current page URL to check if the **\"page.resource.requsted\"** event can be fired. But PhantomJS (as well as Chrome of FF) requests the URL urlencoded, so the comparison never succeeds on urlencoded urls.\n\nI've added the code for decoding the URL before the comparison, and the event **\"page.resource.requsted\"** is now fired on ulrencoded URLs. I've also added tests for this case.\n\nBut the tests has detected the problem with not correctly urlencoded urls: the event **\"page.resource.requsted\"** is not fired on URLs which were created with _escape()_ function. After some digging, I think, that the problem is on the PhantomJS side. The **page.onNavigationRequested** event is fired from PhantomJS and gets as an argumen not correctly escaped url : `console.log(casper.requestUrl) -> http://localhost:54321/tests/site/urls.html?test=Forl\ufffd`. For example, Chrome and Firefox do not escape this URL at all (`/urls.html?test=Forl%EC`). We could unescape this URL, but it will still not be equal  with the PhantomJS one `console.log(unescape(requestData.url)) -> http://localhost:54321/tests/site/urls.html?test=Forl\u00ec`\n\n**Edit:** I have noticed, that  the **\"page.resource.received\"** event suffers from this bug and extended the tests to include it.\n\nI have commented the unit test which checks the escaped URL, so the PR could be merged, but the problem with escaped URLs is still there.\nI have not so much experience with PhantomJS or CasperJS to fix it directly, but would like to discuss it to find the way to do it.\n Hi guys, two monats passed since this PR was created, but no one commented on it. \nShould I rewrite it? This PR solves an actual error in casperJS and also provides unit tests to test for this error.\n Ping @n1k0, @mickaelandrieu \n Merged commits and rebased the fix branch using latest master.\n  BSD mktemp needs an argument to provide an appropriate path. This update provides a working path directory in both Linux and Mac OSX.\n    One of My friends failed to use casperjs to write test case in mobile web page testing, because this web page use touch event to trigger a action, but capserjs only support click event. I wrote following codes to make touch event available in capserjs, and I think a touch event supporting in mobile web page testing is necessary, as the touch event in cellphone is very common. So I commit my patch back to capserjs, and hope it helps others.\n @mickaelandrieu  Generally, You need to set ua to ios/android and then test mobile-only site. More details and examples can be seen in tests and docs I added at this time. \n poke @mickaelandrieu \n Hi,\n\nmaybe the `Mouse API` can be improved this way ? /c  @n1k0\n Just use API this.evaluate trigger event by page itself, casperjs need not to support it!\n @andypeker \nnot every casper user have ability to use 'evaluate trigger' emulating the touch event.\n\npoke @mickaelandrieu . your suggestions is done \n I think we need @n1k0 review for this.\n poke @mickaelandrieu @n1k0 \n  On Windows, it's the batchbin directory (which contains casperjs.bat) which needs to be added to the PATH, not bin.\n Indeed, things have changed in 1.1beta3. But as the current \"last stable version\" is still using the old path, it is necessary to give it (as following the current instructions with the stable version doesn't work). I have provided an updated version which lists both options. This can be changed again once the stable version uses the new path. \n  Details was written as \"deatils\", I know it's trivial, but here it is.\n   I have no idea why the Github Markdown engine does not parse the link.\nI tried with other engines, the link works.\n\nAll in all, it's important to at least note this, it took me a while to figure it out myself.\n I have added a minimal example.\n  Added windows-specific workaround for systems with both integrated and discrete graphics\n linked with #193 \n  This fixes #956.\n > I suspect we don't really want to search up to the fs root, for security reason.\n\nThat's what node.js does: http://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders\n\nI'm trying to understand why the test fails on Travis...\n I fixed the test.\n I'll try to write a test.\n I'm currently on Windows, and it seems the tests do not work on this platform, is it a known issue?\n Many failures trying to use `SIGALRM` like that:\n\n```\n======================================================================\nERROR: test_help (__main__.BasicCommandsTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/clitests/runtests.py\", line 31, in f2\n    old_handler = signal.signal(signal.SIGALRM, timeout_handler)\nAttributeError: 'module' object has no attribute 'SIGALRM'\n```\n\nthen these errors:\n\n```\n======================================================================\nERROR: test_xunit_report_failing (__main__.XUnitReportTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/clitests/runtests.py\", line 436, in test_xunit_report_failing\n    self.runCommand(command, failing=True)\n  File \"tests/clitests/runtests.py\", line 54, in runCommand\n    return subprocess.check_output(cmd_args).strip().decode('utf-8')\n  File \"c:\\Python27\\lib\\subprocess.py\", line 568, in check_output\n    process = Popen(stdout=PIPE, *popenargs, **kwargs)\n  File \"c:\\Python27\\lib\\subprocess.py\", line 711, in __init__\n    errread, errwrite)\n  File \"c:\\Python27\\lib\\subprocess.py\", line 948, in _execute_child\n    startupinfo)\nWindowsError: [Error 193] %1 is not a valid Win32 application\n\n======================================================================\nERROR: test_xunit_report_passing (__main__.XUnitReportTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/clitests/runtests.py\", line 430, in test_xunit_report_passing\n    self.runCommand(command, failing=False)\n  File \"tests/clitests/runtests.py\", line 54, in runCommand\n    return subprocess.check_output(cmd_args).strip().decode('utf-8')\n  File \"c:\\Python27\\lib\\subprocess.py\", line 568, in check_output\n    process = Popen(stdout=PIPE, *popenargs, **kwargs)\n  File \"c:\\Python27\\lib\\subprocess.py\", line 711, in __init__\n    errread, errwrite)\n  File \"c:\\Python27\\lib\\subprocess.py\", line 948, in _execute_child\n    startupinfo)\nWindowsError: [Error 193] %1 is not a valid Win32 application\n\n----------------------------------------------------------------------\n```\n I'm trying to setup a Linux VM to run the tests.\n I implemented one test.\n  Hi,\nWe were in desperate need to test websocket (xSockets v4) functionality in the app were developing. For this we had to upgrade to the very new (unstable) release of phantomjs 2.0. Currently casperjs didn't allow us to start this new version.\nI have edited the bootstrap.js to allow phantomjs of version 2.x.\n\nI hope i have done it correctly (my first PR), any feedback is appreciated. \n I took a look at the yml file. I am not sure where to find the binaries of the new phantomJs version. I don't have access to phantoms google code to look there for the files and they aren't published on their website yet. Only source code is available. \n Sounds reasonable. They have stated that they still have bugs present and its not ready for public release, but their master branch on github is v2. I will try to do it as soon as it will be possible. If anyone needs to use phantom2 with websockets like we did at least they can find the edited file here in the mean time. \n Sounds good. I'll try to do it tomorrow. Is it possible to add the checkin to this PR or must i submit a new PR? \n I don't understand why the Travis build is failing with slimerJS. Any advice?\n I made this change locally and got this:\nCouldn't find nor compute phantom.casperPath, exiting.\n\nany advice?\n my guess is that you don't have your casperJS enviroment property set up correctly. Try to check that. \n @Xenik007 if I use just the current without this change it works, if apply this stop working\nthx\n   Oh, damn, there were two typos in that test. :)\nNow updated.\n  Allow to pass in a custom name to `casper.test.fail()` which is used in the junit xml report.\n\n```\nthis.test.fail('My custom failure message', {name: 'My custom test-case name'});\n```\n\nwill produce the following xml.\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites time=\"0.383\">\n    <testsuite errors=\"0\" failures=\"1\" name=\"demo\" package=\"./custom-test-case-name\" tests=\"1\" time=\"0.383\" timestamp=\"2014-07-04T11:09:11.072Z\">\n        <testcase classname=\"./custom-test-case-name\" name=\"My custom test-case name\" time=\"0.165\">\n            <failure type=\"fail\">My custom failure message</failure>\n        </testcase>\n        <system-out/>\n    </testsuite>\n</testsuites>\n```\n\nWhat do you think about it guys?\n\nbest regards\n~david\n Relevant to #912 and PR #920 \n @mickaelandrieu are you ok with this ?\n\n_Update:_ It looks like _travis_ is failing for other reasons.. \n Any news on this ?\n @mickaelandrieu i rebased to lastest master.. \n Completed.. \n Thanks for merge.. :beers: \n  Hi folks! I've begun using it to write acceptance tests, and its a much better tool for this purpose than all the others that I've tried in JavaScript-land. So, thank you for CasperJS!\n\nSo, from the standpoint of using CasperJS as a tool to write acceptance tests, I have found one area for improvement. The problem is that the methods for interacting with forms and form elements require direct knowledge of the underlying html, specifically the name attribute of the inputs. Since acceptance tests are written from the standpoint of a non-technical user, and non-technical users don't know anything about html, css selectors, etc; associated label text is a better way of calling out form elements. This strategy also reduces the coupling between the acceptance test and the app, promoting refactoring of the html and css.\n\nThis branch is an attempt at adding this behavior to CasperJS, in the form of new fillLabels method. What do you guys think?\n What do you guys think? Any feedback on this?\n :thumbsup: Thanks! I've been using it for the last month or so, and its really improved the feel of our acceptance tests.\n Thanks for the review, @mickaelandrieu! @n1k0 let me know if there's anything additional I can do to help this get merged.\n @mickaelandrieu Done. Thanks for stewarding this PR along!\n  Some basic CSS tweaks to make the sidebar fixed while the page scrolls.  Looks ok in limited testing (Mac Chrome and Firefox).\n\nWould be nice to fix the header and maybe integrate it with the sidebar, but that's a but much to tackle with no knowledge of Sphinx.\n\n(p.s. this is my first pull request, so hopefully I'm doing everything correctly.)\n  Currently `curTestSuiteNum` is updated for every file that is run, restricting each file to one test suite per file.  \nThis was causing issues in files with multiple sets of tests:\n- stepTimeout uses an id of `<filenum>_<stepnum>`, and `stepTimeout` stops polling if the id matches\n- if a subsequent `testSuite` runs in the same file, it will have the same `testSuiteId`, causing potential misfires of `stepTimeout`\n\nThis separates file count from test suite count, eliminating the `stepTimeout` problem, and allowing multiple `testSuite`s per file.\n @mickaelandrieu hi there, sorry for the delay. @reply me to make sure i get the email notification.  \n\nWhat do you mean by \"squash\" my commits?\n I mean merge your commits into one.\n\nSee http://git-scm.com/book/en/Git-Tools-Rewriting-History#Squashing-Commits, let me know if you need help :)\n @mickaelandrieu closing this PR and opened a squashed version here:\nhttps://github.com/n1k0/casperjs/pull/1026\n\nhad a little bit of trouble w/ the rebasing, but I think i figured it out.  let me know if you see issues\n   history.js test the back() method, isn't enough ?\n   Wow! Such amazing :dancer: \nI can finish this if you don't have time for reload & forward methods.\n  Bon, y'a pas de test d\u00e9di\u00e9 au lancement fail-fast qui pr\u00e9serve les listeners \"fail\" des tests utilisateurs, mais on a valid\u00e9 avec @mickaelandrieu que \u00e7a roule, et `casperjs selftest` est green, aussi :smile: \n maybe in fail-fast test suite ? Need a hit to finish this if needed\n Finally got around to adding the test. How does that scan?\n\nBest,\n  One solution for ref #912.\nlocal selftest Okay.\n\n_Edit_ : Where do I define textContent? ...\n Thank you for this first step, sounds good to me.\nWould you mind to fix some lint issues ? You can check travis report to help you.\n\nRegards,\n Done :)\n +1 for me. ping @n1k0 for review :)\nCan you squash your commits ? \n\nGood job !\n Squashed.\n thank you, @n1k0 can I merge it ?\nI will add docs ;)\n It doesn't manage some useful errors ( Timeout for wait() family). I'll look at it again.\n Assert error : http://hpics.li/4119bff\nWait() -> timeout : http://hpics.li/03af4d8\n\n``` js\n/*\n * Take a screenshot and send it on jenkins workspace when a test fails (if --xunit option is set)\n */\nif (casper.cli.get(\"xunit\")){\n    var screenCount = 1\n        ,fileName = require('system').args[4]\n        ;\n    //get back only fileName if needed, not the complete path\n    if (fileName.indexOf('/') !==-1 ){ fileName = fileName.split('/'); fileName = fileName[fileName.length-1];}\n    //get fileName -> we delete '.js'\n    fileName = fileName.substring(0, fileName.length - 3);\n    //get back the job name -> --xunit=/var/lib/jenkins/jobs/\"+jobName+\"/workspace/logs\" + (j+1) + \".xml\"\n    var job = casper.cli.get(\"xunit\").split('/')[5];\n    console.log(job);\n    //event onFail\n    casper.test.on('fail', function(failure) {\n        //save screenshot in adequate workspace\n        var capture = '/var/lib/jenkins/jobs/' + job + '/workspace/screenshots/' + fileName + 'Fail' + screenCount + '.png';\n        casper.capture(capture);\n        // failure type : assert or fail\n        if(failure.type.indexOf('assert') !==-1 || failure.type ==='fail'){\n            failure.description = \"Message : \" + failure.message + \"\\nLine : \" + failure.line + \"\\nCode : \" + failure.lineContents \n                + \"\\nScreen : \" + 'http://-jenkins-/job/' + job + '/lastFailedBuild/artifact/screenshots/' + fileName + 'Fail' + screenCount + '.png/'\n                + \"\\nUrl : \" + casper.getCurrentUrl();\n        }\n        //failure type : uncaught\n        else if (failure.type === 'uncaughtError'){\n            //timeout error (for wait() function)\n            if (failure.values.error.name === 'TimedOutError'){\n                failure.description = \"Message : \" + failure.message + \"\\nCode : wait() -> timeout\"  \n                    + \"\\nScreen : \" + 'http://-jenkins-/job/' + job + '/lastFailedBuild/artifact/screenshots/' + fileName + 'Fail' + screenCount + '.png/'\n                    + \"\\nUrl : \" + casper.getCurrentUrl();\n            }\n        }\n        screenCount++;\n    });\n}\n```\n\n> Chances ar high that this.textContent refers to nothing here. \n\nWhat must be done here? Deleted? I forgot why I've added that **. And do you want to split the lines in 3?\n Up.\n  Fixes the captureSelector method not being aware of the WebPage.zoomFactor feature introduced in PhantomJS 1.6 and supported since #157. Previously, captureSelector failed to scale a capture region\u2019s coordinates to match the zoom factor, resulting in incorrect screenshots.\n\nFixes #917.\n## Changes\n- Check for casper.page.zoomFactor when getting element bounds, and scale the clipRect accordingly\n- Add tests\n## Notes\n- Also fixes a statement that assigned `Casper.prototype.getElementsBounds = function getElementBounds(selector)`, the right side name not matching the plural `Elements`.\n Nice contribution, I like it !\n\nping @n1k0 we need this ;)\n Tommorow I will document this too ;)\nedit 20/05/2014: already documented here http://casperjs.readthedocs.org/en/latest/modules/casper.html?highlight=zoom#zoom\n I\u2019m glad I could help. Thanks all round!\n  As Jeremy Forveille has confirmed to me the logo has been open sourced and released to me some source files to help me print some t-shirt, I think it's time to release these files to allow anyone to use them according to the MIT licence ;)\n These assets are under MIT licence, should we have to apply a more specific licence ?\n This is now good ;)\n  Can you help me to write a test case for this?\n Hi @mucsi96 ,\n\nthanks for your contribution.\n\nMaybe this tests can help you ? https://github.com/mucsi96/casperjs/blob/master/tests/suites/casper/events.js#L31\n  Hi,\n\nwhen a test fail, I take a screenshot and add some debug info to failure.message:\n\n```\ncasper.test.on(\"fail\", function (failure) {\n    \"use strict\";\n    var capturefile = \"reports/casper/\" + failure.suite + \".\" + failure.line + \".png\",\n        page = \"Page: \" + casper.getCurrentUrl(),\n        screenshot = \"Screenshot: \" + exports.siteUrl + \"/tests/\" + capturefile,\n        messages = \"Console: \" + \"\\n  \" + remoteMessages.join(\"\\n  \");\n    failure.message = (failure.message? failure.message : failure.standard) + \"\\n\" + [page, screenshot, messages].join(\"\\n\");\n    casper.capture(capturefile);\n});\n```\n\nthe problem is, the testcase will contain all this debug information.\nAll I want is have it in the failure node.\n\nThanks.\n Hi,\n\nplease correct the tests :+1: \n\nRegards,\n  - provide a cli argument for config.json file\n- parse arguments & options from config.json\n- ensure config.json is valid and can be required\n- ensure args & opts are stored back in phantom.casperArgs.raw\n- fixes #745\n- a config.json can look like:\n\n``` json\n    {\n      \"includes\": [\n        \"inc1.js\",\n        \"inc2.js\"\n      ],\n      \"log-level\": \"debug\",\n      \"paths\": [\n        \"test.js\",\n        \"sub1\"\n      ],\n      \"post\": [\n        \"post1.js\",\n        \"post2.js\"\n      ],\n      \"pre\": [\n        \"pre1.js\",\n        \"pre2.js\"\n      ],\n      \"verbose\": true,\n      \"xunit\": \"results.xml\"\n    }\n```\n- tests can be run using:\n  `$ casperjs test ./config.json`\n- note that, the config file is not a key word argument, since there are no additional arguments that\n  you need to pass into the cli, if you provide a config.json.\n @mickaelandrieu @n1k0 can you please review this, and let me know, if everything is fine.\n\n_P.S: I can add tests, if you think the patch looks good._\n Hi\n\nplease add tests, I'll review this tomorrow.\n\nYou're on fire :+1\n i'm adding tests, probably will be done by tomorrow.\n Ok, can't wait for it :+1: \n poke @r8k \n @mickaelandrieu pushing these today. :beers: \n poke @r8k I'm on fire ^^\n @mickaelandrieu sorry for the delay, i was unwell. now fixing couple of tests which are failing. will certainly fix and push these by today.\n pb take your time (in fact, I can't wait to test this new feature :D )\n @mickaelandrieu how does this look now? :violin: \n @r8k only need a squash and to be reviewed by @n1k0 to be merged in master.\n\nThanks a lot it's a nice feature :+1: \n @mickaelandrieu i think that commit is a dangling one .. i can't find it, to squash it. i see only one way left now. do you want me to close this pull req, and submit a new one with the changes ?\n nope ! let's wait for @n1k0 review\n ping @mickaelandrieu \n I can't merge without @n1k0 agreement :) poke @n1k0\n oh yea, that was a typo ping .. :smile: \nping @n1k0 :flags: \n I can carry on the docs, trust me ;)\n @n1k0 @mickaelandrieu many thanks for the review. i will address the nitpicks, and push the changes. :smile: \n am reorganizing the code a bit, per n1k0's review comments. taking a bit longer than usual.\n @r8k ok ! I'll document this when the PR will be merged ;)\n @mickaelandrieu just been busy, and couldn't push my changes. i'll be pushing them today. be ready for it :smile: \n I'll review this soon ;) ty @r8k\n  - fix casper.test.on.pass to casper.test.on.success\n- fixes #890\n @mickaelandrieu @n1k0 can you please review this, and let me know, if everything is fine.\n Thanks !\n Hum... still not updated:\nhttp://docs.casperjs.org/en/1.1-beta3/modules/tester.html#getfailures\n\nSee the Note below <code>getFailures()</code> :\n\"In CasperJS 1.1, you can store test successes by recording them listening to the tester <code>pass</code> event:\"  -> should be test failures and 'fail' event\n\nAnd for test.success, below <code>getPasses()</code>:\nIt should be success x2 instead of 'pass'.\n    `entry` already contains an absolute path. The path that is constructed is strange and unusual. This causes issues on Windows with TrifleJS (WIP).\n I really want to see TrifleJS support on casperJs, what do you think @n1k0 ?\n\nI'm note sure of the impact of this suggest ...\n @n1k0 this don't broke actual tests, any suggests for \"untested cases\" ?\nI will check for actual test tonight :+1: \n It'll be a long time before TrifleJS actually happens. I've spent three work days so far trying to make it play nicely with CasperJS, but it's slow going. Only about 40% of the tests pass when running `selftest` (with this pull request) because of lack of support for the proper APIs.\n\nFor instance, `document.createElement` is not implemented. In Phantom and Slimer, this exists because you're running in what's essentially a browser context at all times. TrifleJS is not a browser context with APIs to control the browser, it's a JavaScript engine (V8) with some very thin APIs to control a separate browser instance. This means that there's no concept of DOM, XHR, etc. implemented in TrifleJS so far. And of course you can't just expose .Net's `HtmlDocument` class, since all of the member names `AreCapitalized` (and MSXML's DOM class--while having the correct capitalization on names--only supports XML).\n\nThe library that Trifle uses to embed V8 is pretty unfriendly, too. It doesn't let you pass functions or closures into the JS context, which means `require` has to be implemented completely in JS.\n\nAs for the code in this pull request, you can see that the `entries.map` call already outputs the absolute paths of each of the files. The reason the tests weren't currently failing is the way JS files are tested (looking at the extension without accessing the actual file). The current code generates paths like this: `/Users/mbasta/src/test//Users/mbasta/src/test/foo.js`. TrifleJS actually does a lookup when you use the path functions in `fs` (probably not the best), which causes it to fail.\n @n1k0 `fs` functions are very well tested : https://github.com/n1k0/casperjs/blob/master/tests/suites/fs.js\nDid you see another use case ?\n  Using os.exec on Windows causes the process to fork into the background--meaning that a command line environment running casperjs will not be able to read the return code or easily detect when the script has finished execution.\n\nsubprocess.call provides better cross-platform compatibility, and fixes the problem easily.\n I was having issues integrating casperjs with my Windows-based testing environment because running casperjs would seem to return immediately, forking the main phantom process to the background. \n\nThis simple change fixed the issue for me, and I imagine it will be useful for others. I'm not readily able to test on other platforms, but from what I've read about subprocess.call I don't think there should be any issues.\n ping @n1k0 \nfor me it's +1 \n +1, at least for windows\n\nrunning casperjs on windows is the same as running a process in the background, it does not wait for the end of the process and the output is a bit unreadable\n Hm i just found out `subprocess.call` does the exact same thing (background-like process), it must have something to do with the way i installed casperjs (via npm), I'll keep testing\n ok, if you replace the contents of the installed (by npm) file casperjs.cmd:\n\n```\n@IF EXIST \"%~dp0\\python.exe\" (\n  \"%~dp0\\python.exe\"  \"%~dp0\\node_modules\\casperjs\\bin\\casperjs\" %*\n) ELSE (\n  python  \"%~dp0\\node_modules\\casperjs\\bin\\casperjs\" %*\n)\n```\n\nwith:\n\n```\n@ECHO OFF\ncall \"%~dp0\\node_modules\\casperjs\\batchbin\\casperjs.bat\" %*\n```\n\nIt doesn't go in the background anymore, and i'm guessing you don't have to install python - i've read somewhere that it's embedded in the casperjs folder...\n\nBut has it been deprecated? @n1k0 help :)\n  Pending enhancement request #505 \n\nUpdated docs reflect usage. Basically, a user will provide an array of values for multiselect to compare against the select options. All matching values would be set to `true`, and the rest to `false`.\n Working on tests. Sorry for the premature PR.\n\nWill rebase once done. Thanks.\n Hi,\n\nfood for me.\n\nping @n1k0\n @mickaelandrieu Quick question for you: how to `console.log` in tests? `clientutils` have a `log` method defined but I didn't have much success using it. Is `stdout` being redirected by casper?\n @kbdaitch maybe you just need to use `casper.echo` ? \nhttps://github.com/n1k0/casperjs/blob/master/modules/clientutils.js#L140\n\nIf you need more, please ask for help on the casperjs mailing list :)\n @mickaelandrieu Thanks. Actually, the issue was with `evaluate`. I need to remember using `casper.on('remote.message')` ;)\n\nAnyhow, I have added tests and they are passing.\n\n`jshint` still returns cyclomatic complexity of 8 for the `clientutils.getFieldValue`. I would welcome any suggestions to improve it. I am currently checking for `type` to detect `select-multiple` as opposed to `getAttribute(type)` which returns `null` for such elements as per spec.\n Sounds good @n1k0. I am kinda new to idiomatic JS, will address the nits. Happy to make a PR.\n @n1k0 I made suggested changes as well as rebased. Let me know if anything remains.\n  When checking for visibility, style.display is checked to match \u201cinline\u201d.  Added a check for \u201cinline-block\u201d.\n Added!  Apologies for missing the tests the first time around.\n I'm having some issues rebasing since I already pushed the prior changes.  Would you recommend doing a force push in this instance?\n Ok, that's what I figured but wanted to run it by you first. :)  Force pushed!\n  Adding quotations around the file path to allow whitespace in the path for the bootstrap.js file passed to the execution engine and the CASPER_PATH argument.\n My only issue with this is that it no longer works on Unix-based systems because the backslash is hard-coded in.\nChanging the first line to this fixes that problem:\n\n```\n@\"\"\"\" + Path.Combine(Path.Combine(CASPER_PATH, \"bin\"), \"bootstrap.js\") + @\"\"\"\",\n```\n\n@n1k0 Is there any reason why Travis isn't testing pull requests anymore?\n @hexid Sorry about that!  Not used to considering both OSes.  I just pushed a new commit that should take out the hard-coded separator.\n Closing/Reopening to trigger a Travis build.\n It looks as though the issue is that we are compiling with dotNET 3.0, which does not have support for:\n\n```\nPath.Combine(String, String, String);\n```\n\nHere is the workaround that I have been using:\n\n```\nPath.Combine(Path.Combine(str1, str2), str3);\n```\n\nBy taking this approach, we don't need to require dotNET 4.0, which is only shipped by default with Windows 8.\n Fair enough, wasn't aware of that.  Looks like that fixed the build.\n Awesome. Thanks!\n  Add an event emit for clicking, passing the selector.\n Added a test for the click emit.  I'm not sure what docs to change?  It looks like there is already documentation for the click event.  I found the docs first and when I tried to use the event I realized it wasn't being emit()'ed.  If you could point me to the docs to change I'd be happy to update them.\n  variable username and password are always empty\n\n```\nvar username, password, httpAuthMatch = location.match(/^https?:\\/\\/(.+):(.+)@/i);\n```\n\nSo event http.auth always pass empty values.\n :+1:  ping @n1k0 \n I would like to make a unit test for that, but got a leak regarding casperjs unit test, should be great if i can speak to somebody in french, in particular @montpellier ;)\n what did you think  @n1k0 , can i merge it ? \n poke @n1k0 :)\n :coffee: ? \n  this completely fixes #832 #196 by taking into account the fact that, `content-type` can also contain `charset` values, apart from the `content-type` itself.\n @n1k0 @mickaelandrieu your thoughts on this please?\n @n1k0 thank you for politely asking me to correct my commit message (i wont submit a half baked pull request again) :smile: \n\ntravis thinks the pull request is :green_heart: now ..\n @n1k0 Can You please close all related issues too, good to see you home :)\n  I couldn't find a place to find this info, except in SlimerJS docs.\nMaybe a page dedicated to using SlimerJS with CasperJS would be nice?\nI could try an humble start in this direction.\n +1. Ran into this as well.\n    Use `JSON.stringify` for encoding the request body when `Content-Type` is `application/json`.\n This should fix #196 \n\nI've run `casperjs selftest` and everything is green :)\n Hi @sqren \n\nCan you please add a test for your specific case ?\n\nRegards,\n Added a test.\n For me :+1: when you will fix some typos.\n\nLet's wait @n1k0 review  ;)\n Thanks for the comments. I've fixed the style issues and squashed everything into a single commit. \n The most important thing is, that we don't run `qs.encode` on the body if the Content-Type is `application/json`.\nI'm not sure why someone would want to send data with a Content-Type of `application/json` but not encode with `JSON.stringify`, which is why I think it makes sense to add it.\n  In fact I use Cygwin but didn't want to clutter the instructions with a new section (I can do it if needed).\nThese are some ideas of additions, not sure I understood the `bin` vs `batchbin` thing...\n  Apparent docs typo.\n  Currently casperjs does not handle closing a page and creating a new\npage object. \n\nIf user does a casper.page.close() there is no option to create a new\npage object.\n\nWith this change we can use a casper.page = casper.newPage()\n Ya, I don't think this is quite all the way there, or I'm possibly using it wrong.  I just integrated this into 1.1-beta3 as a test with the code from #803 and get this error:\n\n```\nError: cannot access member `customHeaders' of deleted QObject\n```\n @ilangv Digging a little deeper and looking at `casper.start` it looks like there is some additional initialization that must happen on the page object after it is created.  However, even after bringing everything relevant to `page` initialization into the `newPage` function it still doesn't want to cooperate.\n @ilangv I take that back, I messed up my test structure (different function prototypes between thenOpen and open), but there are still a couple things required in `newPage`.  I got it to work as I want using:\n\n```\nvar links = ['http://www.google.com', 'http://www.yahoo.com'];\n\nvar casper = require('casper').create({\n    logging: 'error',\n    pageSettings: {\n        webSecurityEnabled: false\n    }\n});\n\ncasper.start('http://www.amazon.com', function () {\n    this.echo(this.getTitle());\n});\n\ncasper.eachThen(links, function(item) {\n    var url = item.data;\n    this.open(url).then(function (){\n        this.echo(this.getTitle());\n    }).then(function () {\n        casper.page.close();\n        casper.newPage();\n    });\n});\n\ncasper.run(function (){\n    this.echo('Done');\n    casper.exit();\n});\n```\n\ncombined with this (obviously a copy/paste, but a simple extract method refactoring should take care of it):\n\n```\nCasper.prototype.newPage = function newPage() {\n    \"use strict\";\n    this.checkStarted();\n    //copied from casper.start()\n    this.page = this.mainPage = createPage(this);\n    this.page.settings = utils.mergeObjects(this.page.settings, this.options.pageSettings);\n    if (utils.isClipRect(this.options.clipRect)) {\n        this.page.clipRect = this.options.clipRect;\n    }\n    if (utils.isObject(this.options.viewportSize)) {\n        this.page.viewportSize = this.options.viewportSize;\n    }\n    return this.page;\n};\n```\n Would it also be worth it to check the deleted status of the current `WebPage` object to either throw an error or call `close()` on it for the caller?  As it stands, calling `newPage` without first calling `close()` would result in a memory leak, so we might was well protect from that within casper.\n @mlb5000 :+1: Valid point\n I think this should solve it. \n\nCalling a `page.close()` explicitly should do the job \n\n``` js\nCasper.prototype.newPage = function newPage() {\n        \"use strict\";\n        this.checkStarted();\n        //Close the existing page object. Does not harm anything even if close() is called twice\n        this.page.close();\n        //copied from casper.start()\n        this.page = this.mainPage = createPage(this);\n        this.page.settings = utils.mergeObjects(this.page.settings, this.options.pageSettings);\n        if (utils.isClipRect(this.options.clipRect)) {\n        this.page.clipRect = this.options.clipRect;\n    }\n    if (utils.isObject(this.options.viewportSize)) {\n        this.page.viewportSize = this.options.viewportSize;\n    }\n    return this.page;\n};\n```\n @n1k0 Will add tests and update docs shortly. Thanks\n Unfortunately something still isn't getting cleaned up.  After this patch I'm still getting this error after my `eachThen` runs for a while, even with `newPage` called each time around.\n\n```\nQEventDispatcherUNIXPrivate(): Unable to create thread pipe: Too many open files\n2014-02-13T21:18:06 [FATAL] QEventDispatcherUNIXPrivate(): Can not continue without a thread pipe\nAbort trap: 6\n```\n It's worth noting that without this it grows by about 10MB per page load, and grows much slower with it.  It still gets to over 2GB memory usage after a few hundred iterations though...\n @n1k0 casper.reset() sounds misleading. Tends me to think of it as a master reset to the entire casper object rather than just the page. Don't you think so?\n @mlb5000 Don't see this happening in my case. I am currently running the crawler code https://github.com/seethroughtrees/casperjs-spider with the above change and all is well so far. Am I missing something?\n @n1k0 Are you talking in the sense of calling `start` again?  Start clears all steps and history as well as resetting the page.  This would be counterproductive in my use case, and is why I don't use it.\n\n@ilangv That's a little concerning.  I'm calling `casper.newPage()` as the last step of my `eachThen` callback and still it's definitely still leaking.  What other resources within Phantom, aside from the page, could be leaking?\n @mlb5000 any update on this issue? I am facing the same issue... thanks\n Hi to all, I have written several scripts with casperjs to scrap webpages the last couple of years. I'm using casperjs in Linux. The problem with the increased need in resources (CPU, RAM) was always a big pain for all these scripts and imagine some of them are running standalone in a vps without my supervision. To manage the increase in ram I was automatically restarting the scripts through bash scripts.\n\nYesterday I came across this thread and I was amazed by the idea to close my headless page in order to reallocate resources and keep the RAM consumption stable and not rising.\nI tested it yesterday by adding the following code after a casper.thenOpen inside a loop of several iterations (target was 1000 iterations).\n\ncasper.then(function() {\n    casper.page.close();\n    casper.newPage();\n    this.wait(2000, function() {\n    });\n});\n\nInitially I tested it with no wait and it failed completely. The program was hanging in casper.newPage() for ever. Then I added a wait of 1000ms and it managed to do some iterations (~5) but again it hanged. Then I increased it to 2000ms and it managed to do 80-100 iterations before hanging. I repeated the test with my pc restarted (so all other resources were relatively free) and the script has hanged in the 270th iteration... After a while (~30secs) by it's own started working again.\nDuring all these iterations the RAM is kept relatively stable and increasing only very slowly. The difference is huge compared to the same code without page.close().\n\nThe reasons I'm posting here are the following:\n1. I want to say this is a must and we definitely should find a way to close pages at the end of every iteration.\n2. I see some instability on the above code. I don't understand why we need so much time to wait. 2000ms is too much for 1000 iterations. I could live with it if at least was stable. I don't understand why it hangs every now and then.\n3. I want to ask if it's possible to make the casper.newPage() blocking until the new Page is ready. That way we don't need to put an unreliable wait() for it.\n @cptX I do the same as you to manage the ever growing memory consumption; manage an external queue of URLs to process and execute Casper from another program in a loop.  Unfortunately my own experiments came to the same unstable conclusion as your own so I just decided not to trust it altogether and continue on with looping from an outside program.\n This promise of closing every page is too good to reject it so soon! I definitely want to stay with it! I saw so much memory impact difference that for sure can change everything in my implementations...\nIf we focus on finding the problems of the instabilities?\nWhy is the delay necessary? What happens behind? How can we make it blocking until the new page is ready?\n For now I use this tip to reduce RAM and CPU used by my own scripts.\nYou can use event to send a KILL signal to phantomjs:\n\n``` js\ncasper.on('run.complete', function() {\n    casper.die('kill phantom', 1);\n});\n```\n @mickaelandrieu Thanks for the tip, I'll have to try that.  I have noticed that if I'm running in a loop for a long time I'll start to accumulate a lot of orphaned PhantomJS instances (from times when something crashes).  Maybe this would fix that.\n @mickaelandrieu Is it possible to use your script in a loop and if yes do we have to start a new phantom instance somehow after that? How?\n @cptX can you post your ask in mailing list ? \n Hi mickaelandrieu, as I'm new here I don't understand what you mean to post in the mailing list.\n @cptX https://groups.google.com/forum/#!forum/casperjs\n OK I opened an issue here: https://groups.google.com/forum/#!topic/casperjs/h-KyQWYXFfY\n @n1k0 can you take a look at this ? I will try to reviews others waiting PR \n  It's a known issue that CasperJS does not support threads, but I'd really like to see a little more thread support.  In particular, I'd like to be able to restart a PhantomJS thread.\n\nIf I don't include the thread killing logic on lines 54-58, then CasperJS crashes repeating the error `select: Invalid argument` after 500MB of memory or so.  If I do include the logic, then CasperJS will crash as soon as I attempt to kill a thread.  My other option here, is to manage Phantom pooling and threads through node, but so far I've difficulty getting the node/phantom layer to communicate properly.\n\nNote: My example uses several npm modules.  These could easily be replaced by a few plain JS functions, but they keep it easier to read.\nhttps://npmjs.org/package/generic-pool\nhttps://npmjs.org/package/async\nhttps://npmjs.org/package/lodash\n poke ? \n Any chance this will be revisited at some point to come up with a stable solution?\n Hey @mickaelandrieu, wassup?\n\nfyi: I haven't worked with casper in several months, so I may be a bit behind.\n With Casper? Didn't dig too deep in Casper's internals. I ended up, just writing in Node to control Phantom threads. I left behind my progress on that front (except proprietary parts) in [tarantula](https://www.npmjs.org/package/tarantula) if you're interested. The effort I was working toward was replaced by some off-the-shelf stuff, so my interest dwindled. ;-)\n  Also, `errorCode` doesn't always represent the HTTP status.\n\nFor example, I sometimes get this:\n\n``` json\n{\n    \"errorCode\": 5,\n    \"errorString\": \"Operation canceled\",\n    \"id\": 70,\n    \"url\": \"http://api.example.com\"\n}\n```\n  Fixes #796\n  Change for Issue #791. Please review. This change increases performance of our UI tests by a noticeable amount.\n @brandon-bethke-neudesic ca you please fix the tests ?\n poke ? if you can't please talk, I will.\n Forgive me, I have been busy at work. I am not currently setup to investigate this. If you have the time to investigate, I would appreciate that.\n  The code example in `waitForSelectorTextChange()` has an unterminated string literal on line 2172.\n  Make `fs.workingDirectory` priority higher, otherwise `localModulePath` would mean `casperScriptBaseDirPath`\n This is my first contribution to JS project and I'll need some time to get how the tests work\n  @n1k0 @mickaelandrieu \nAny chance this could get some attention? It is failing on purpose because the current Travis builds are all using the same engine (PhantomJS 1.9.2)\n\nFor example (https://travis-ci.org/n1k0/casperjs/jobs/15739147) should be running on SlimerJS v0.8.5, but if you expand line 111 of the log, it is using PhantomJS v1.9.2\n @hexid I'm busy too, I try to take a look on it the next week end...\n If I remember correctly, CasperJS v1.1.0 is supposed to remove PhantomJS support below v1.9.x, so removing that version from the build file would fix that issue.\n\nApart from that, everything appears to be working in way of Phantom, while Slimer has yet to become headless.\n\nIt looks like [this](http://docs.travis-ci.com/user/gui-and-headless-browsers/#Using-xvfb-to-Run-Tests-That-Require-GUI-%28e.g.-a-Web-browser%29) may be a solution for Slimer for now. I'll try to take a look into a solution this weekend.\n  Easy fix: add a `/*jshint maxstatements:99*/` directive in your function. Longer one: refactor so the function nb of statements decrease\u00a0:) Up to you, I'm fine with both ways.\n Now this is done, good for merge isn't it ?\n  Thanks!\n  See #763 \n\nSo I've splitted my proposal into 2 contributions:\n- this one which introduce a refactoring of export system (with BC) to allow the implementation of new exporters\n\n-> allow the exporters MUST have render() method which return the correct output.\n\nAs a sample, I will - after this contribution to be merged - add a new HTML/PHPUnit-like exporter\n humm, I've a weird issue with dotNet and phantomjs 1.9.2, can you take a look @hexid ? :)\n No pb you have time, it's a WIP :)\n @mickaelandrieu I think @hexid is working on #768 \n oh ? good ! :D need @n1k0 for discuss or/and review\n @mickaelandrieu I'm busy these days, but will have a look next week\u00a0:)\n @n1k0 I need to work again on UI improvement, and eventually found a way to edit a HTML template ...\n @n1k0 it's now done for me. Would you mind to take a look ? :)\n   Hmm that's most likely to break scripts relying on the current behavior\u2026 I'd rather see a new `prependListener` method\n (also, tests to be added)\n hum... I think a tag can be usefull to maintain the current api, and let the developper choose the correct order of the events dispatched.\nBy the way, maybe can we add another tag \"OVERRIDE\" in case of we want to avoid totaly the event declared before.\n\nIf `prependListener` is correct, should I rename `addListener` to `appendListener` ? \n\nPS: I will clean my commits :)\n I'm sorry, what do you call a \"tag\"?\n\n> If prependListener is correct, should I rename addListener to appendListener ? \n\nDon't rename anything for BC purpose, just add a new `prependListener` method, thanks :)\n Re: the changeset: please don't change anything to the current `addListener` method, just add a new `prependListener` one (no supplementary arg to be passed, as a third one is usually associated to passing a context object in other frameworks/libs); `on` shouldn't be altered as well.\n\nDevs wanting to prepend a listener to the current stack will do explicitely by themselves. We'll obviously document this thoroughly.\n\nThanks\n Ok, I work on it now :) (\\* I'm on fire ^^ *)\n What did you think @n1k0 ? Good for merge after clean my commits ?\n Thanks, I'll review the patch later tonight :)\n @n1k0 : good for you ? \n @n1k0 can we merge it ? I'm working on eventListener improvement and this PR may be first step ;)\n Everything looks good to me. :+1:\n  Thanks!\n :dancer:  thanks !!\n  Thanks\n Thanks ! very boring issue :+1: \n  The `toString()` function is not called by gecko because a `DOMNode` does not inherits from `Object`. We should call a specific function to serialize the content of the XML.\n\nCloses #753\n Strangely it always fails when using the .NET executable\u2026 No idea why. Also, I think we should add a python cli test to check for the resulting XML file creation.\n @hexid no pb\n @hexid indeed! that's really weird.\n\n@laurentj could you please update your PR according to @hexid's suggested changes? Also, please rebase to get rid of the _oups_ commit ;)\n Will update the PR, see #759 \n  This one introduces `Casper#waitForAlert()` to wait until an [alert](https://developer.mozilla.org/en-US/docs/Web/API/Window.alert) is triggered:\n\n``` js\ncasper.waitForAlert(function(response) {\n    this.echo(\"Alert received: \" + response.data);\n});\n```\n\nWaiting for Travis to confirm all is fine.\n Hi, I used waitForAlert has a error, but i don't know why? \n\n``` coffeescript\ncasper  = require('casper')\ndump = require('utils').dump\ncasper\n  .create()\n  .start('http://localhost:3000') \ncasper.waitForAlert (response) ->\n  @.echo \"Alert received: \" + response.data \ncasper.run()  \n```\n\n```\nTypeError: 'undefined' is not a function (evaluating 'casper.waitForAlert(function(response) {\n  return this.echo(\"Alert received: \"  );\n})')\n```\n Is this only available in git installation? Both homebrew and npm ship 1.1-beta3.\n Hi,\n\ncan you try this ? `npm install casperjs@dev-master`\n\nRegards,\n sorry, but npm complains `valid install targets: [\"1.1.0-beta2\",\"1.1.0-beta3\"]`\n aw we should tag new `1.1.x` release, what do you think @n1k0 ?\n\nFor now, you should probably install master branch from git.\n  Replacement for #663.\n I won't have access to a development environment for the next couple of days. It will have to wait a bit longer. Sorry!\n  Some tests fail with SlimerJS...\n\nCloses #732\n @mickaelandrieu I added `return equals(inputToTest.constructor.name, constructor.name)` to fallback to the behavior before the implementation of your betterInstanceOf() function. And I need the original value of the `input` parameter. And because you changed this value in the loop, I use an intermediate variable for the loop\n @laurentj ok, thx to have fixed it :+1: \n  :+1: \n It's worth mentioning the error message `Fatal: you can't override the preconfigured casper instance in a test environment.`. Otherwise using Google to find this PR is tricky :)\n    correct misspelled 'bootsrap' to 'bootstrap' on line 48 of the README.md\n\nFix #717\n    Some tests were red with Slimerjs because of some issues with Gecko...\n Note that some other tests are still red. But no time to fix them now. I'll propose later some other patches.\n I hate jshint the idiot dictator :-p \n\nI will fix that. I reinstalled my laptop system last week and so I need to re-install jshint.\n  Hi! \n\nThis is a new RPM package build script.\nIt detects version from `package.json`.\nThe files that are installed are specified as wildcard, so you don't have to bother with RPM spec file when you add/remove/rename files.\n\nUsage:\n\n```\ncd rpm\n./build\n```\n\nthen RPM package is created under `/tmp`\n  Fixes #650.\n  Some update of the frame code:\n- methods `childFramesCount`, `childFramesName` and `switchToChildFrame` are deprecated. Replace them with their new synonyms;\n- I need to play with the content of an iframe for more than one step, so I exposed the `switchToFrame` method;\n- also, I need my clients scripts into the frame, so I injected them;\n- I like events, so I added a `frame.changed` event.To be consistent, maybe should I also encapsulate `switchToParentFrame` and `switchToMainFrame`, to also emit this event\u00a0?\n Hello clochix,\n\nsounds good. Maybe you can also add new `frame.change` event to the documentation ?\n Thank you, for me good to be merged :+1: \n Any news on this\u00a0?\n poke @n1k0 ? merge sounds good.\n Robust code as it has already green since 8 months :+1: \n\nping @n1k0 Clochix deserves it \n  I think the fail messages are a little cryptic if they are in past tense. For instance: \n\n> FAIL Found an element matching: testsuite[name=\"foo\"][package=\"foo\"]\n\nDid it find the element and that's why it failed or did it fail to find the element? I'm thinking making it present tense clarifies it: \n\n> FAIL Find an element matching: testsuite[name=\"foo\"][package=\"foo\"]\n > PASS 865 tests executed in 21.196s, 865 passed, 0 failed, 0 dubious, 107 skipped.\n Hi,\n\nthanks for your pull request.\n\n:+1:  for me :) \n\nwhat did you think @n1k0 ? \n  fixes #699\n Hi,\nthanks for your report and your pull request.\n\nCan you please add a test for this ?\n\nRegards,\n @mickaelandrieu For sure - can you point me to where I would put those tests? I can't seem to find an existing test for `getPageContent`.\n  > PASS 865 tests executed in 20.93s, 865 passed, 0 failed, 0 dubious, 107 skipped.\n\nI'm hoping this fixes it, it's fixing it on my machine. \n No changes. But local settings can influence line-ending behavior so it seems possible that someone else will see changes. I'm unsure how to proceed here. \n  Whenever a wait timeout occours, there is no information on what is being waited on - even if you have verbose debug logging turned on.\n\nThis PR adds a `details` property bag to all the waitFor.timeout events, and updates tester to output friendly, informative messages based on that property bag.\n\nSome other minor issues:\n1. `step.timeout` didn't have the same params as onStepTimeout, so I updated that too. Without looking through the git logs, I'm guessing that the events came after the on*Timeout callbacks. Is there plans to deprecate this?\n2. `waitFor.timeout` would output a warning, but because it was throwing in onWaitTimeout, it would just error out anyways. I removed the warning and put all the error logic there, and no-op'd the onWaitTimeout.\n3. the clitests were rerunning capser every time it checked for a string. I changed it to only run once, and it was a big perf boost, ~2-3x.\n Hi,\nnot good for now, can you please correct tests suites ?\n\nSincerely,\n Everything is passing now. I was just running clitests locally at first. I moved tester's wait for timeout handling back to the callback due to the churn on the other tests. The event handling vs hook handling issue can be saved for later.\n What did you think @n1k0 ? Good for me.\n Great! Thanks for reviewing my pull request.\n :+1: \n  using slimerjs engine\n  Trouble with popups.\nWhen a \"window.open\" occurs, casper can't listen to callbacks for popups pages.\n A test and a better PR title would be nice, otherwise it looks good!\n I've edited commit label, also it's good for me (when some tests are added as @n1k0 said) \n  Then you just need to to `npm publish` to make that available with `npm install casperjs` :-)\n\n![](http://i.imgur.com/OGEY6ll.gif)\n `npm publish --tag beta`\n\n`npm publish` is assuming `npm publish --tag latest` (and `npm install casperjs` as `npm install casperjs@latest`).\n\nJust learned that thanks to your question :-)\n What `npm publish` does is when you do `npm publish [--tag latest]`, it links the `version` described in the `package.json` with the `latest` + `<pkg.version>` tag. It's not relying on the Git tag at all. Except if you install the module over the git protocol (like `git install https://github.com/n1k0/casperjs.git@1.1.0-DEV`) \n  Changed testsuite Attribute \"duration\" to \"time\".\nJenkins does not parse the generated xunit Files otherways.\n\nSee also:\nhttps://groups.google.com/d/msg/casperjs/n1tbi0K9Tnk/MA4SO_4SImUJ\n\nThe XSD Schema:\nhttp://windyroad.com.au/dl/Open%20Source/JUnit.xsd\n I can not keep duration for compatibility here. Because Jenkins will not accept XMLs with duration in Tag \"testsuite\".\n\nI don't know how to handle this issue then.\n   Forgot about this fix that I made a while back.\n\nThis fixes the `TypeError: 'undefined' is not a function (evaluating 'this.emit('error', error)')` error found in the gist that I posted on https://github.com/n1k0/casperjs/pull/604#issuecomment-23520287\n  due to the fix for #547 backtrace is not always defined.\n\nI am more worried that this bug went undetected for so long, and I see now that because the tests are self tests, it's not possible to do these failure tests.\n Ah didn't see those. Test added! However, I found another bug :( due to that same #547 change, now casper reports 2 failures from the same exception. This should report just 1 exception, correct? I would guess that the on('fail') code needs to not fail twice.\n\nThoughts?\n np, done.\n  Fixes https://github.com/n1k0/casperjs/issues/650.\n @n1k0 I added in support for `assertField` but was wondering if we should add a method `assertFieldBySelector` or deprecate the current API for the function prototype `assertField(finder, expected, message)` where `finder` is a defined object that can either support CSS selectors, XPath selectors, or specifying the format by the name of the input as it is now during deprecation. Thoughts?\n @n1k0 That sounds good, keeping the two interfaces consistent is probably better than overloading `assertField` in the commit. I'll update the code and docs. The alias makes sense and supporting BC will be good. What's the stance in casper on deprecation? SemVer?\n @n1k0 Conformed to the `fill*` API for the `assertField*` methods, docs incoming.\n Build was red due to linting error, 54490e9 should amend\n @n1k0 Ah this fell off the dashboard! Must look at the pending PR dashboards more often.\n\nI agree with the format of assertField taking the object here, I will go with that in a separate PR and close this one.\n  This change will download the correct version of PhantomJS for each build instead of downloading all of them.\n\nI'll also look into getting SlimerJS working with this new format. Though I'm not sure if we should wait until SlimerJS has headless support or if we could use [this](http://about.travis-ci.org/docs/user/gui-and-headless-browsers/).\n\nAny input would be greatly appreciated.\n Looks like it is working, but the `PHANTOMJS_SHORT_VERSION` environment variable isn't getting set.\n\nSince there is only one version of PhantomJS on each build, this isn't a problem.\nI can remove this if everyone thinks that it can go, but on the other hand, I could just add the following to the beginning of `before_install:` and take out the global environment variables\n\n```\n export PHANTOMJS_VERSION_SHORT=$(echo $PHANTOMJS_VERSION | tr -cd '[[:digit:]]')\n export PHANTOMJS_EXECUTABLE=\"bin/phantomjs$(echo $PHANTOMJS_SHORT_VERSION) --local-to-remote-url-access=yes --ignore-ssl-errors=yes\"\n```\n Taking out the glob vars may be more maintainable in the long run, what do you think @n1k0?\n Ok, I've changed the configuration so that now it will use `ENGINE` and `ENGINE_VERSION` environment variables to determine what should be downloaded and used.\n\nThe engine is now downloaded to `engine.tar.bz2` and extracted (ignoring the top directory of the archive) to the `engine/` directory.\nThis will remove the need for calculating where the binary files should be located.\n\nI've also kept two global environment variables `PHANTOMJS_EXECUTABLE` and `SLIMERJS_EXECUTABLE` since they won't conflict with each other and they should be the same for any tested version of that engine.\n @hexid Awesome this looks good! Merging.\n  Please wait for @n1k0 for a last validation :)\n Done.\n  | Q | A |\n| --- | --- |\n| Bug fix? | [no] |\n| New feature? | [no] |\n| BC breaks? | [yes] |\n| Deprecations? | [yes] |\n| Tests pass? | [yes] |\n| Fixed tickets |  |\n| License | MIT |\n| Doc PR | [yes] |\n\nCasperJs have an [Cli Module](http://docs.casperjs.org/en/latest/cli.html), which is useful usually when you need to log/debug your scrapping/testing.\n\nI don't understand why `--direct` argument match to `verbose` option so I propose this PR to fix this.\n\nBy the way, documentation has been updated in this PR, also the file `usage.txt` which has been \"prompted\" on CLI.\n Cool, I think that `--verbose` is more inline with other unix tools. Merging.\n I didn't know about phantomjs `--verbose`, I'll ensure backward compatibility ASAP. (edit: yes)\n I saw in casperjs module a way to emit a deprecated but this event is not dispatched correctly in logs, maybe am i to log a warning ?\n  This is a better version of #540, using a separate branch for the changes.\n Actualy not good, can you rebase the master branch ?\nRegards,\n  Addressing https://github.com/n1k0/casperjs/issues/658. This follows @n1k0's recommendation to add the a reference to keep the references (here it is `keepReferences`).\n Tests and documentation changes incoming.\n @n1k0 Have you seen this behavior? All tests seem to be passing on TravisCI but showing up as failures here?\n @n1k0 Updated the linting checks, thanks for letting me know about that. Will add a follow up commit to update the `CONTRIBUTING.md` as well!\n @n1k0 This look good to go?\n   Let me know if you have any feedback or criticism on the implementation.  \n\nOne criticism I had of my approach was whether then() and createStep() could be combined in some way.\n\nNote I didn't get rid of _step in 100% of cases!  For instance - for the forward() and back() functions appear to accidentally have some faults:\n\n1) they are asymmetric (one has a then function parameter, the other doesn't)\n\n2) the then function parameter for the forward() function doesn't seem to be called\n\nSo where there were overlapping issues I did not make corrections (yet) - for the purposes of keeping commits separate.\n\nI'm happy for all feedback on approach, variable naming, indentation - please feel free to be direct if you see something you don't like, and I will take it as constructive criticism and guidance on understanding your expectations :)\n\nCheers\n Yes, it sounds reasonable.  Basically it infers we don't have anonymous steps, if it's a non-optional parameter.\n\nRather than having name inference at the runStep() - we could have it concretely defined in all cases whenever at step was created, we'd modify the calls to this.then() in all cases to use this.createStep()\n\nMaybe also to improve readability a little, de-nest this stuff, even if it is at a cost of a bit of conciseness:\n\n```\nvar _step = this.createStep(\"name\", fn, options);\nthis.then(_step);\n```\n\nI would choose that approach actually.\n\nLet me know your thoughts\n Actually, this only works for internal calls to then().  Of course, external calls (as then() is a defined part of the API) may have anonymous functions.\n\nThis would make createStep() only electively used where we are not passing a user function as the parameter, internally.\n\nHowever, then() could resolve the function name up-front, rather than deferring it to runStep(), by determining if there's an options property on the function parameter.\n travis build failure - it _seems_ to be unrelated to this change set, something to do with the dotNET build returning a bad error code.\n ```\njshint .\nmodules/casper.js: line 1496, col 44, This function has too many statements. (21)\nmodules/casper.js: line 1496, col 44, This function's cyclomatic complexity is too high. (9)\nmodules/casper.js: line 1705, col 38, This function has too many statements. (17)\n3 errors\nmake: *** [jshint] Error 2\n```\n aha - many thanks.  Just installing rhino, jshint and XCode command line tools (for make) to run this myself.\n :+1:  sounds great !\n Ok, this is green and I'm fairly happy with it.  Had to learn about travis, the right version of jshint and installing node, but I'm up to speed now :)\n\nSquashed up the commits on my branch also.\n\nkind regards\n do we need documentation for this ? I wonder\n Maybe not documentation, as info log output is not generally a formally documented part of an API.\n\nHowever, unit testing the info messages may be worthwhile, as there's sufficient complexity in this one that it's worth testing for invariance (which I have not presently done.)\n Hi Nicolas, still a worthwhile change?  \n\nIf you are worried about backwards compatibility, do we not protect against this by versioned releases where we describe what the variations in behaviour happen to be?\n\nThis change is a sensible tidy-up of some less-than-optimal logging that crept in, which arose in my own code, as a starting user.\n\nthanks\n No worries, thanks very much for your time and the review.  I just have a spot of time off work (I have an opposite problem) and rather enthusiastic to do a spot of coding :)\n Thanks, I took pause, just to do some deeper reading on JavaScript here.  Just been through Crockford's book.\n\nThere's a bit of style I'm not 100% happy with...\n\n``` js\nvar step = this.createStep(\"_thenOpen\", function () {\n    this.open(location, settings);\n});\nthis.then(step);\n```\n\nIt just doesn't read as nicely as the previous code, which read more nicely left to right:\n\n``` js\nthis.then(function _thenOpen() {\n    this.open(location, settings);\n}));\n```\n\nI'm not sure what the solution is, \"createStep\" is probably better described as \"addStepMetadata\":\n\n``` js\nthis.then(this.addStepMetadata(name, \n      function () {\n       ...\n}));\n```\n\nI got rid of the nesting initially because I thought I was improving readability - but with a temporary `var step` variable it's not as concise and has much less of a functional programming feel.\n\nDeleted all the `coalesce()` stuff btw, I agreed entirely with your observation...\n  Added hook for webpage.onResourceError as described #610\n The tests are failing for phantom 1.8.x because onResourceError is a phantom 1.9.x feature. So this enhancement would require phantom 1.9.x\n\n\"onResourceError\nIntroduced: PhantomJS 1.9 This callback is invoked when a web page was unable to load resource. The only argument to the callback is the resourceError metadata object.\"\n Looks like it is also failing for the Phantom 1.9.x series as well.\n\n```\njshint .\nmodules/casper.js: line 100, col 35, Trailing whitespace.\ntests/suites/casper/hooks.js: line 61, col 27, Expected '!==' and instead saw '!='.\ntests/suites/casper/hooks.js: line 62, col 37, Expected '===' and instead saw '=='.\n3 errors\nmake: *** [jshint] Error 2\n```\n\nThose should be fairly easy to fix.\n Fixed jshint errors and now the 190, 191, and 192 builds are now passing.\n Not good yet. can you please fix travis build ? :)\n As mentioned previously, the feature is only compatible with phantomjs 1.9.x. The travis build is only failing, as expected, on the 1.8.x run.\n what did you think @n1k0, it's a big BC (no more phantomjs <1.9.x)...\n Shouldn't we be favoring the event pattern over a hook/callback pattern? Only one hook can exist but any number of event listeners can, as well as filtering on events. At least keep parity by having an event.\n  Including tests and docs. the option name is `--jsonReporter` and the API is very similiar to `--XUNIT`\n\n**UPDATE** this closes #647 and not #635 . but I can't fix that from my side. sorry for the typo\n\n**UPDATE:** fixed to implement @n1k0 suggestions about code style etc, Also more DRY.\n hum, IMO the api should be modified.\n\nexample --format=xunit/json\n\nWhat did you think @n1k0 ?\n @mickaelandrieu I agree and have seen a lot of JS tools follow this convention (`--reporter` in JSHint and `--format` in ESLint). It reduces the ambiguity in specifying multiple formats at the same time (`casperjs --reporter-json --reporter-xunit`).\n OK, I Think I can do that, but lets wait for @n1k0 for input about this\nsugggestion.\n\nTwitter:@alonisser https://twitter.com/alonisser\nLinkedIn Profile http://www.linkedin.com/in/alonisser\nFacebook https://www.facebook.com/alonisser\n_Tech blog:_4p-tech.co.il/blog\n_Personal Blog:_degeladom.wordpress.com\nTel:972-54-6734469\n\nOn Mon, Oct 7, 2013 at 9:53 PM, Matt DuVall notifications@github.comwrote:\n\n> @mickaelandrieu https://github.com/mickaelandrieu I agree and have seen\n> a lot of JS tools follow this convention (--reporter in JSHint and\n> --format in ESLint). It reduces the ambiguity in specifying multiple\n> formats at the same time (casperjs --reporter-json --reporter-xunit).\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/n1k0/casperjs/pull/647#issuecomment-25834847\n> .\n @mduvall yeah, I like it :+1\n Just missed that I could probably build the Json with just ``utils.dump`what do you think?\n I don't think I understood your meaning with this: `TestSuiteResult#toJSON` . Did you mean that instead of building the JSON I could probabely just `utils.dump(results)`? just thought about it, but not sure I'll get the tests duration from that. or did you mean something else?\n can you rebase master please ?\n\nAlso, is it ok for you @n1k0 ?\n @mickaelandrieu could you be more specific what to rebase and how?\n To avoid merge conflicts, you need to rebase master branch on your branch :)\n Not great at rebasing. you mean pull master and merge on my branch and then\ndo a pull request again?\n\nTwitter:@alonisser https://twitter.com/alonisser\nLinkedIn Profile http://www.linkedin.com/in/alonisser\nFacebook https://www.facebook.com/alonisser\n_Tech blog:_4p-tech.co.il/blog\n_Personal Blog:_degeladom.wordpress.com\nTel:972-54-6734469\n\nOn Fri, Nov 8, 2013 at 12:36 PM, Micka\u00ebl Andrieu\nnotifications@github.comwrote:\n\n> To avoid merge conflicts, you need to rebase master branch on your branch\n> :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/n1k0/casperjs/pull/647#issuecomment-28054007\n> .\n Yes, and be sure you don't break tests.\nAlso, I worked on https://github.com/n1k0/casperjs/pull/767\n\nDo you think we can be ported your exported to a more generic system ?\n Sure, this is the correct approach. how can I help?\n hum, it is not accepted yet.\nBut, the exporters should be called by using `casperjs test --format=[xunit|html|json|exporterName...] --file=[filepath]` you need at list to rename your exporter filename with the name passed. For instance, with jsonReporter.js you should call `--format=jsonReporter` and the method to render the file should be called `render()` I can help you ;)\n What's the status of this? I'm looking to add html / json functionality and am willing to pick up where everything was left off at.\n  The examples for both `fillSelectors` and `fillXPath` referenced calls\nto `fill`.  This commit corrects both examples. fixes #645\n  Simple example:\n\n``` JavaScript\nx = require('casper').selectXPath;\ncasper = require('casper').create({\n    verbose: true,\n    logLevel: \"debug\"\n});\n\ncasper.start('http://www.casperjs.org', function() {\n  this.page.navigationLocked = true;\n});\n\ncasper.thenClick(x('//a[@class=\"brand\"]'), function() {\n    this.echo('Then executed!')\n});\n\ncasper.run(function() {\n  this.exit();\n});\n```\n\nActual:\n\n```\n$casperjs test.js\n[info] [phantom] Starting...\n[info] [phantom] Running suite: 4 steps\n[debug] [phantom] opening url: http://www.casperjs.org/, HTTP GET\n[debug] [phantom] Navigation requested: url=http://www.casperjs.org/, type=Other, willNavigate=true, isMainFrame=true\n[debug] [phantom] Navigation requested: url=http://casperjs.org/, type=Other, willNavigate=true, isMainFrame=true\n[debug] [phantom] url changed to \"http://casperjs.org/\"\n[debug] [phantom] Successfully injected Casper client-side utilities\n[info] [phantom] Step anonymous 2/4 http://casperjs.org/ (HTTP 200)\n[info] [phantom] Step anonymous 2/4: done in 4263ms.\n[info] [phantom] Step _step 3/4 http://casperjs.org/ (HTTP 200)\n[debug] [phantom] Mouse event 'mousedown' on selector: xpath selector: //a[@class=\"brand\"]\n[debug] [phantom] Mouse event 'mouseup' on selector: xpath selector: //a[@class=\"brand\"]\n[debug] [phantom] Mouse event 'click' on selector: xpath selector: //a[@class=\"brand\"]\n[debug] [phantom] Navigation requested: url=http://casperjs.org/index.html, type=LinkClicked, willNavigate=false, isMainFrame=true\n[info] [phantom] Step _step 3/4: done in 4294ms.\n\n\n```\n\nExpected:\n\n```\n$casperjs test.js                      \n[info] [phantom] Starting...\n[info] [phantom] Running suite: 4 steps\n[debug] [phantom] opening url: http://www.casperjs.org/, HTTP GET\n[debug] [phantom] Navigation requested: url=http://www.casperjs.org/, type=Other, willNavigate=true, isMainFrame=true\n[debug] [phantom] Navigation requested: url=http://casperjs.org/, type=Other, willNavigate=true, isMainFrame=true\n[debug] [phantom] url changed to \"http://casperjs.org/\"\n[debug] [phantom] Successfully injected Casper client-side utilities\n[info] [phantom] Step anonymous 2/4 http://casperjs.org/ (HTTP 200)\n[info] [phantom] Step anonymous 2/4: done in 7179ms.\n[info] [phantom] Step _step 3/4 http://casperjs.org/ (HTTP 200)\n[debug] [phantom] Mouse event 'mousedown' on selector: xpath selector: //a[@class=\"brand\"]\n[debug] [phantom] Mouse event 'mouseup' on selector: xpath selector: //a[@class=\"brand\"]\n[debug] [phantom] Mouse event 'click' on selector: xpath selector: //a[@class=\"brand\"]\n[debug] [phantom] Navigation requested: url=http://casperjs.org/index.html, type=LinkClicked, willNavigate=false, isMainFrame=true\n[info] [phantom] Step _step 3/4: done in 7206ms.\n[info] [phantom] Step anonymous 4/4 http://casperjs.org/ (HTTP 200)\nThen executed!\n[info] [phantom] Step anonymous 4/4: done in 7219ms.\n[info] [phantom] Done 4 steps in 7238ms\n```\n   My pleasure :)\n  This fixes an issue where sendKeys does not fill in the text on\ncontentEditable elements. The element is checked in the attributes\nobject whether `contenteditable` is true and clicks the element to\nsendKeys to.\n\nfixes https://github.com/n1k0/casperjs/issues/615.\n @n1k0 Definitely, sorry about leaving that out initially. I pushed the documentation under `1.1` and listed explicitly the types of elements that `sendKeys` will send the keyboard events to.\n (Boolean) reset:\nWhen set to true, this option will first empty the current field value. By default, it\u2019s set to false and sendKeys() will just append string to the current field value.\nI am using following command for content-editable='true' edit box\n\nthis.sendKeys('form#event-form div.nicEdit-main', 'gopi', {reset: true ,keepFocus: true});\n\nThe issue was it is not clearing the current field value.But it is appending the current field value.Please tell me how to clear the current content.\n  | Q | A |\n| --- | --- |\n| Bug fix? | [no] |\n| New feature? | [yes] |\n| BC breaks? | [no] |\n| Deprecations? | [no] |\n| Tests pass? | [yes] |\n| Fixed tickets | [#602] |\n| License | MIT |\n| Doc PR | [#619] |\n\nCasperJs 1.1-dev now offers [Tester Api](http://docs.casperjs.org/en/latest/modules/tester.html),\nwhich can be useful to unit test logical business. This PR is a start to complete this API and closer to that PHPUnit offers.\n- add utils.betterInstanceOf\n- add many tests for native and custom objects\n- add Tester Api documentation and samples\n    CasperJS didn't find any more users modules, when we\nindicate only the name of the main script (it worked only\nwhen we indicate the full path of the script on the command line).\n\nFixes #601\n Strange, all cli tests pass for me... And unfortunately, output of runtest.py is not really useful. I'm going to improve it to see the real error.\n  To avoid breaking the XML output with specific HTML entities such as &nbsp;\n  This is mostly to make sure that Travis can handle the changes that I made.\n\nref #596\n Yea I have. I believe that it may be because of an older version of Mono.\nI have limited access to an Ubuntu machine, so I will try to figure it out.\n I'm getting quite a few errors on my windows machine, but I am getting the exact same output running `casperjs.exe selftest` as I am running `python casperjs selftest` and `casperjs.bat selftest`.\n\nI'll try running it on a different machine later on to see if it is just my machine acting up.\n Ok, it looks like it might be a PhantomJS issue.\nI'm getting 45 failures when I run Phantom's test suite.\n Here's a [gist](https://gist.github.com/hexid/6382900) of the output I received.\nThe first is the output from running with CasperJS-master and the second is with CasperJS-1.1-beta\nI'll try finding where along the line this started to happen.\n I think I finally found the issue.\nIt looks as though removing the two lines that were added to `modules/casper.js` in https://github.com/n1k0/casperjs/commit/76b7f73fc098892c31d3df15181d3710b857d573 produces the same output as 1.1-beta.\n\n```\nFAIL 834 tests executed in 203.976s, 828 passed, 6 failed, 2 dubious, 106 skipped.\n\nDetails for the 8 failed tests:\n\nIn C:/Users/hexid/Desktop/casperjs/casperjs-1.1-beta1/tests/suites/casper/encode.js:10\n  base64encode() and download() tests\n    assertEquals: Casper.base64encode() can retrieve base64 contents\nIn C:/Users/hexid/Desktop/casperjs/casperjs-1.1-beta1/tests/suites/casper/logging.js:38\n  logging tests\n    assertEquals: Casper.log() logged messages\nIn C:/Users/hexid/Desktop/casperjs/casperjs-1.1-beta1/tests/suites/casper/wait.js:112\n  waitForSelectorTextChange() tests\n    fail: Casper.waitForSelectorTextChange() can wait for text on a selector to change\nIn C:/Users/hexid/Desktop/casperjs/casperjs-1.1-beta1/tests/suites/casper/xpath.js:10\n  XPath tests\n    assertExists: XPath selector can find an element\nIn C:/Users/hexid/Desktop/casperjs/casperjs-1.1-beta1/tests/suites/casper/xpath.js:1323\n  XPath tests\n    uncaughtError: Cannot dispatch mousedown event on nonexistent selector: xpath selector: /html/body/a[2]\nIn C:/Users/hexid/Desktop/casperjs/casperjs-1.1-beta1/tests/suites/tester/setup-teardown-async.js\n  tearDown() tests\n    dubious: tearDown() tests: 1 tests planned, 0 tests executed\nIn C:/Users/hexid/Desktop/casperjs/casperjs-1.1-beta1/tests/suites/tester/skip.js\n  Skip tests (asynchronous)\n    dubious: Skip tests (asynchronous): 1 tests planned, 0 tests executed\nIn C:/Users/hexid/Desktop/casperjs/casperjs-1.1-beta1/tests/suites/utils.js:348\n  quoteXPathAttributeString() tests\n    assertExists: Xpath selector \"//a[text()=concat(\"Label with double \", '\"', \"quotes\", '\"', \"\")]\" is found on \"tests/site/click.html\" page\n```\n Sounds good.\n\nI'll also work on getting Travis to run selftests with the .NET application.\n I believe this is ready to be merged.\nI compressed everything down to just a few commits and I have added the selftests for the dotNET app to travis.\n\nThe failures are still occuring on Windows, but that is also true with the Python and Batch scripts, so I think that should be dealt with in a different issue.\n Sounds good! Just glad to be able to help.\n Sorry that it took so long, but I updated the docs to show that `casperjs.exe` should be used on Windows instead of the old `casperjs.bat`.\n\n48cea0865ecfb6b73fc47bd84d22048d75ba855c\nb092f84d96b3d815b1b10235ba1bed5492441781\n  When you need to unit test your front logical business, instanceof become useful to be sure to have the good object.\n\n| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Tests pass? | yes |\n| Doc & Tests | of course ! |\n\nTested on GNU/Linux Mint 14 with PhantomJS 1.9.1 & casperJs 1.1-dev\n Curious, I have no problem with the `casperjs selftest` command ... I'll update this pull request tomorrow\n\nedit: i'm a noob, I launched tests from my casperjs and no from my PR. It's now fixed.\n good for merge or definetively a bad idea ? :)\n I wanted an API more complete, something like PHPUnit for example, which provide http://phpunit.de/manual/3.7/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions.assertInstanceOf.\n\nThat's why I wanted String as first parameter on my first commit.\n\nedit: I will improve this, pass a String (a className) is definitively what users need.\n\nWhat do you think about https://gist.github.com/mickaelandrieu/6371509 ? \n\nedit from 30/08 : I'll write more tests this week, specially for inheritance and all known Objects.\n   :+1: \n  The latest backwards-compatibility commit ended up adding in `fs.pathJoin(dir, basename)` three times for each `basename`.\n\nThis commit adds it for each `basename` instead of each `extension` and `basename`\n  ...nodejs modules\n\nThe same way phantomJS can.\n Add documentation, in reference of closed ticket https://github.com/n1k0/casperjs/pull/587\n  Fixes a wrong comment in an example\n  Trying to fix the example code for changing the user-agent. \nCurrent example doesn't work.\n Example of changing user-agent on fly doesn't work since calls to change user-agent are executed before run().\n  Fixed some issues with the commits from the last PR.\n  Ref: [StackOverflow](http://stackoverflow.com/questions/18052251/do-not-show-test-file-xxx-js-while-testing-casperjs-file)\n\nJust a quick change so that `casper test` doesn't print out `Test file: /path/to/test.js` when there is only one file being tested.\n  Trailing backslash in `%CASPER_PATH%` was escaping closing quote in `--casper-path`.\n\nThis changes backslashes in `%CASPER_PATH%` to forward slashes. Same with `%CASPER_BIN%` to be consistent.\n\nI also removed superfluous `%ARGV%` variable to avoid potential problems with batch failing to properly send full cli params.\n @n1k0 Actually, it turns out that the issue this references is a non-issue. I was using custom batch file (or maybe an older batch file?) which had a trailing slash. CasperJS doesn't actually have a trailing slash there.\n\nEven still, this pull request should be accepted since `fs.absolute` (used in `bin/bootstrap.js`:~151) converts `\\` to `/` anyway, and since backslashes still do, in fact, escape closing quotes around command line parameters.\n\nIf you're wondering about the `%VAR:find=replace%` syntax on line 3; that has been supported since at least Windows 2000.\n Can I have a test case ? I can run an Windows 8 with phantomjs 1.9.1 and casperJS (master branch).\n This is the one I posted in the Issue that this pull request references (#562).\n\n**test.js**\n\n<pre>var fs = require('fs');\nconsole.log([phantom.version.major, phantom.version.minor, phantom.version.patch].join('.'));\nconsole.log(phantom.args);\nconsole.log(fs.separator);\nconsole.log(fs.absolute('..\\temp'));\nconsole.log(fs.absolute('..\\\\temp'));\nphantom.exit(0);</pre>\n\nNow run it...\n\n<pre>D:\\temp>phantomjs test.js x=a y=\"foo\\bar\\\" z=\"true\"\n1.9.1\nx=a,y=foo\\bar\" z=true\n\\\nD:/temp/..      emp\nD:/temp</pre>\n\nAs you can see, `fs.absolute()` converts the backslashes to forward slashes (despite `fs.separator` being a backslash) only if they're escaped, otherwise the backslashes are interpreted as escape characters. Additionally, the trailing backslash in `y=\"foo\\bar\\\"` acts as an escape character for the final quote, causing PhantomJS to interpret the value of `y` to be `foo\\bar\" z=true` (in other words, there is no longer a `z` option being passed).\n\nI mentioned in the issue that this references is a PhantomJS issue, not a CasperJS one. My recommendation is to simply take it easy on PhantomJS and always give it forward slashes _because_ `fs.absolute()` will convert all backslashes to forward slashes anyway. In other words, there is simply no benefit to using backslashes and PhantomJS has an obvious preference for forward slashes. Get it?\n  Fix for #560\n\nLet me know if you think any tests should be added for this.\n  https://media.readthedocs.org/pdf/casperjs-test/latest/casperjs-test.pdf\n\nthere is the result, the stack trace from Latex engine have some warnings so I suppose it's not perfect...\n  Here are a couple of methods, similar to Selenium, that I use all the time. Hope it is useful for others.\n I added a couple of shortcuts that make translating Selenium tests much smoother.\n Great change @MisterY. Do you mind adding test coverage and documentation in `docs/modules/casper.rst`? Much appreciated!\n Thanks! Will do. This was a quick job during tests transfer from Selenium, hence these calls for compatibility.\n I now know I should have done this on a separate branch. Is there a way to discontinue adding commits to this issue?\nI could redo the changes on a fresh fork.\n Cool. That's better. Thank you!\n  When upgrading to Casper 1.1, custom modules have to call the new patchRequire global function.\n  The usage documentation displayed when Casper is launched without options miss the awesome SlimerJS\n  See https://github.com/ariya/phantomjs/blob/master/src/webpage.cpp#L854\n\nNote: PhantomJS is missing the documentation for this feature (https://github.com/ariya/phantomjs/issues/11469)\n Like you probably know `undefined` is the equivalent of \"not-existing\" in Javascript for all practical purposes so this change can't by definition, break anything else.\n\n*\\* The only exception is when using the `arguments` object in a function scope but this is not the case in the functions modified by this commit.\n Many things are missing from the API documentation, even many of them are often used I guess. At least I implemented this parameter in SlimerJS. For me this \"hidden\" parameter makes sens.\n  I wrote a simple test.\nThe code to be updated is in fillForm() method and can be surely improved.\n This would be a nice addition.\n\nAny updates on it yet?\n I was in holidays.\n I fix indentation and simplify a bit code in modules/casper.js\nAll tests are ok.\n  Fixes #521 \n  This will enable installing casperjs via npm, so that e.g. grunt tasks can run the tests.\nSee this example: https://github.com/smlgbl/grunt-casperjs-extra\n That issue addresses publishing casperjs as a proper npm package, which probably requires some changes, as outlined in there. My suggestion is only to enable npm to be used as an \"installation agent\", so that e.g. grunt can be used to run the tests, without the need for another manual installation routine and/or test runner.\n +1 for npm-friendliness/this pull request. We could use it in the above referenced passup.js tool https://github.com/alanctkc/passup.js/pull/21.\n This would be magical. The travis configuration could also be updated to use npm to get phantomjs instead of the tar download stuff it is doing now.\n Are there still pending issues with this pull request? I've been using this branch and would really love for it to get merged. Happy to contribute if there is anything left to do.\n\nThanks!\n OK great thanks for the quick feedback!\n\nAny ETA for 1.1 stable?\n British summer or French summer?\n Hey! :+1: \nNo need to do something special and release to npm, in order to get casper in node. With this pull request we can do:\n\n```\n\"casperjs\": \"git://github.com/n1k0/casperjs\",\n```\n\nand use casperjs right now. Current package.json is simply broken, and this 2 lines will help. Looking forward to have this merge.\n Thank you @n1k0 !!\nIt was so fast!\n Nice!! Thanks so much @ask11 and @n1k0! Really happy to see this. :)\n   @n1k0 are you ok for this feature?\n @n1k0 I agree on the fact that the 'regex selector' is not a standard (and both to CSS3 and XPath are). However, I made this patch because there was no way to do a regex match directly.\n\nThe closest thing to it would have been to extract every element from the webpage's DOM (using the CSS selector to get the tag), and do the matching manually. Not to mention the pain it would have been to use it with the click() method.\n Hey! Has this feature been implemented ?\n\nThanks!\n @vasilakisfil The pull request has not been accepted yet, but you can get it from my fork if you want to try/use it.\n  Casper.getGlobal uses f, aka utils.format in code executed client side, resulting in an error message. Plain old string concatenate should fix this.\n  This commit was also integrated into the slimerjs-2 branch that has just been merged. This pull-request is now useless.\n  Forgotten backslash breaks syntax coloration in assertMatch() example.\n\nSee https://github.com/n1k0/casperjs/pull/501\n  Forgotten backslash breaks syntax coloration in assertMatch() example.\n\n(Incoming PR in gh-pages as well)\n   The line must have the AND checking, because it checks for Windows AND not having an env varibale `ANSICON` OR not having `styleName` in `styles`.\n\n``` js\nif ((fs.isWindows() && !env['ANSICON']) || !(styleName in styles))\n```\n :thumbsup: \n Will there be support for `--no-color` option?\n > Will there be support for `--no-color` option?\n\nThere is, please use latest master.\n    Current the mimeType is fixed in the codes and already overrided,\nthis will block some ajaX requests which return back those like Chinese in some scenarios..\n For backward compatible, I set override default to true.  \n\nUsers can pass in {overrideMimeType: false} to disable the override feature, but this need the users could found their unexpected result was caused by this in some scenarios first. \n Thanks for reminding, I updated the document. Actually, we can not always override the mimeType by using the default one. \n Well, I'm (very) late. Would you mind to add tests ?\n  These changes allow to launch scripts with SlimerJS instead of PhantomJS.\n\nNote that tests on CasperJS are not green yet when launching it with SlimerJS, because of missing features into SlimerJS. \n Tests are green. Travis CI fails only because of jshint that is not happy because I added two \"if\" statements, and because I added a line break on a line of code on an assignement. I can fix this last \"issue\", but should I really to refactorize the entire code of bootstrap.js just because of these two if???\n Ok, no refactoring is needed, I just increased jshint parameters :)\n Please sync with latest master. Also, the `rubybin/casperjs` script should also reflect the changes made in `bin/casperjs` (poke @hannyu)\n @laurentj me neither nor I want to.\n\nIf nobody wants to maintain the ruby exec, I'll probably get rid of it. I'll create an issue about this.\n Awesome feature :+1: \n\n![High five!](http://www.reactiongifs.com/wp-content/uploads/2013/06/Colbert-High-Five.gif)\n \\o/\n\nThank you both!\n So nice! Thanks @laurentj & @n1k0 \n  Adds getElementsAttribute() and getElementsInfo() and tests for each.\nIssue #455\n\nOne issue I have with this is that the `visible` attribute is true for all elements if any one element is visible.\nI don't have time right now to fix this, but I'll try to get to it in the next week or so.\n Ok, I think I got everything this time around.\n Sample code here doesn't work on Windows (casperjs 1.0.2)\n\nhttp://docs.casperjs.org/en/latest/modules/casper.html#getelementsattribute\n\n```\nvar casper = require('casper').create();\n\ncasper.start('http://www.google.fr/', function() {\n    require('utils').dump(this.getElementsAttribute('div[title=\"Google\"]', 'title')); // \"['Google']\"\n});\n\ncasper.run();\n```\n\nI got this error\n\n```\nTypeError: 'undefined' is not a function (evaluating 'this.getElementsAttribute(\n'div[title=\"Google\"]', 'title')')\n  C:/test.js:26\n  C:/:1335 in runStep\n  C:/:332 in checkStep\n```\n Oops! Misread that part. Will wait then. There is problem with using require for .json in 1.1.\n I am also getting the error TypeError: 'undefined' is not a function (evaluating 'this.getElementsAttribute(path,'href')'). What is the status of this issue?\n What version of CasperJS are you running?\n 1.1.0-beta3\n Cleared up this issue [here](http://stackoverflow.com/questions/20924722/how-can-i-retrieve-the-href-element-from-a-button-in-a-casperjs-script/20924902#20924902)\n thanks. I also added a small follow up question :-/\n  Previously, when clicking on a link in a page or submitting a form,\n`Casper.page` would be updated to reflect the newly loaded page, but\n`Casper.currentResponse` would not.  This caused the response passed to\n'then' callbacks to only reflect the initial page load.  This patch\nresolves that issue so that Casper's page and currentResponse are\nconsistent and subsequent 'then' callbacks receive the response of the\nmost recent main page load.\n  Both the HTTP 1.1 spec ([5.1.1 Method](http://www.ietf.org/rfc/rfc2616.txt)) and PhantomJS [webpage.cpp](https://github.com/ariya/phantomjs/blob/master/src/webpage.cpp#L811) require or support uppercase HTTP Methods.\n\nThis patch adds that functionality to CasperJS.\n\nI wasn't sure how you wanted tests like this structured. I ran all tests locally and they pass on top of PhantomJS 1.9.0.\n Updated.\n Thanks for poking! Glad to see this in.\n   Great. There are probably some ways you might like to change it - just let me know. I tried to keep the discussion on #307 in mind while writing it.\n Thanks for your comments and improvement suggestions. I believe I have resolved all of the issues you raised.\n @n1k0 Is there any plan to release #449 ? Current stable release v1.0.2 doesn't have fillSelectors functionality. \n @cabhishek this feature will not land in the 1.0.x branch, only in 1.1 (which is pretty stable actually).\n\nI'm considering releasing 1.1 (at least a RC) in the next few weeks, but I cruelly lack time :/\n thanks. that would be very helpful :) \n    Some sites don't accept the default content-type \"application/x-www-form-urlencoded\", must send out the specific content-type.\nso we need the extra settings to override the default content-type setting in current sendAJAX implementation.\n\nFor back-compatible, I didn't modify the previous parameters, just add a new Object settings  as the last parameter. We can use it for storing more settings in the future if needed. \n Hi, In this PR, I have updated the doc docs/modules/clientutils.rst, please see the Files Changed Tab. :)\n  [Issue #431](https://github.com/n1k0/casperjs/issues/431)\n\nThe proposed fix makes it so that, when the selector passed to visible() matches multiple elements, it checks that one of them is visible, as the documentation suggests.\n\nThere is no change when passing a selector matching only 1 element.\n\nNew test cases have been added and all are passing.\n  Adds to `sendKeys()` an option to prevent losing focus which is useful when testing autocomplete widgets. For example, to pick the first suggestion in an autocomplete drop down, one could use:\n\n``` js\nthis.sendKeys('input[name=\"language\"]', 'fr', {keepFocus: true});\nthis.click('#autocomplete li:first-child');\n```\n\nAlso:\n- The documentation has been updated. \n- The test harness has been updated to test that the option works with an autocomplete widget. A custom bare-bone autocomplete widget had been added to `form.html` to allow testing without impacting the speed of the test harness.\n Tests failed on tour ci server. I'm puzzled as to why. My fork was probably out of date. Apologies. \n Ok, solved! My update to `form.html` added a field which broke two tests in `formfill.js`. \n\nI probably ran `casperjs selftest` instead of `./bin/casperjs selftest` which meant I rested the version of casperjs installed by homebrew (currenlty at 1.0.2) instead of the version of casperjs located in the current directory where bash was located. Since the test appeared to be green, I submitted the pull request.\n  Now the log messages have step function name if available.\n\n``` js\ncasper.start('http://www.foo.com/property/loginpage.php', function login() {\n  this.fill('form', { username: 'abc', password: 'xyz'}, true);\n});\n```\n\nthen the log will look like\n\n```\nStep login (2/15) http://www.foo.com/property/loginpage.php (HTTP 200)\n```\n\nif the function is not named then it will look (note the extra spaces)\n\n```\nStep  (2/15) http://www.foo.com/property/loginpage.php (HTTP 200)\n```\n Makes sense. Updated Issue with another commit.(copying your code)\n  This adds an option to tune the delay for retires on the wait operations.\n  Just an update about phantomJs version \n  The example for assertSelectorHasText() was referring to assertSelectorDoesntHaveText().\n  Stop cli.parse(phantomArgs) from casting raw positional arguments\n  In `page.onNavigationRequested` we set `casper.navigationRequested` to `true` only when we\u2019re on a different URL.\n\nOtherwise, .runStep wouldn't procceed with .waitFor stuff (for hash-based URL where you were redirected).\n  Python is huge, bash + coreutils(dirname,realpath,seq) are much smaller.\n Since Python is cross-platform, I feel as though it should remain the default, with the option to use this on unix-based systems.\n\nWith that, I feel as though this would be better placed in a `bashbin` folder instead of `bin`.\nThis way, it will conform more to how the Windows batch script is used, being in `batchbin`.\n    Add test.skip:\n\n``` js\n    casper.then(function () {\n        test.skip(1, \"Skip me.\");\n    });\n```\n\nAnd also:\n\n``` js\ncasper.thenSkip(1, \"Skip me.\");\n// ....\ncasper.thenSkipIf(true, 1, \"Skip me.\");\n// ....\ncasper.thenSkipIf(function () {\n    return true; // check configuration or anything\n}, 1, \"Skip me.\");\n// ....\ncasper.thenSkipUnless(true, 1, \"Skip me.\");\n```\n\nI found `thenSkip*` quite useful to condition tests quickly.\n\nSkipped tests are reported to test results.\n Well, me neither, so I had a though about it.\nWe do skip steps, not assertions. I've got this feeling that skip api belongs to `Casper` object more that `Tester`.\n\nLast change behavior is as follow: `Casper.skip` does skip `n` steps while `Tester.skip` now delegates to `Casper.skip` and add a `skipped` assertion.\n\nWhat do you reckon ?\n In fact I find test.skip irrevelant.\nMaybe a markAsSkipped that add n skipped test can fit better in Tester.\n\nSkip remains about navigation wereas markAsSkipped would only deal with\nexpected tests.\n Indeed, be able to mark tests as skipped is mandatory feature.\n\nOne don't actually skip tests, just mark them as skipped (or add skipped tests) so `test.markAsSkipped` or `test.addSkipped` seemed relevant, but it's only my 2 cents.\n\n``` js\ncasper.test.begin('foo', 2, function(test) {\n    caspr.start().\n\n        thenSkipUnless(phantom.version.major < 2, 1).\n        then(function () {\n            test.markAsSkipped(2);\n        }).\n\n        thenSkipIf(phantom.version.major < 2, 1).\n        then(function () {\n            test.assert(true);\n            test.assert(true)\n        }).\n    casper.run(function () {test.done(); });\n});\n```\n\nThanks for your work !\n  Addresses #401 with tests\n Please merge this. Having abort() in casper would be awesome.\n  The previous one show a link to the new one :)\n   It actually was not.\n Why did you close the pull request then?\n That was the 4th occurrence that you added after this PR was made.\n  Patch version is checked for all minor versions >= 8, therefore\nwhen checking for 1.8.x patch version minor needs to be checked\nagainst 8 again.\n\nFixes issue #394\n  This converts an exception:\n\n<pre>\nrvm@reactor casperjs % ./bin/casperjs selftest tests/suites/casper/agent.js                 \nTest file: tests/suites/casper/agent.js                                         \n# userAgent() tests\nPASS Default user agent matches /CasperJS/\nFAIL TypeError: 'undefined' is not an object (evaluating 'request.headers.filter(function(header) {\n        return header.name === \"User-Agent\";\n    }).pop().value')\n#    type: uncaughtError\n#    file: tests/suites/casper/agent.js:12\n#    error: 'undefined' is not an object (evaluating 'request.headers.filter(function(header) {\n        return header.name === \"User-Agent\";\n    }).pop().value')\n#           TypeError: 'undefined' is not an object (evaluating 'request.headers.filter(function(header) {\n#                   return header.name === \"User-Agent\";\n#               }).pop().value')\n#               at fetchUA (tests/suites/casper/agent.js:12)\n#               at g (:170)\n#               at emit (:80)\n#               at onResourceRequested (:2142)\n#    stack: not provided\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffduserAgent() tests: 2 tests planned, 1 tests executed\nFAIL 3 tests executed in 0.213s, 1 passed, 2 failed.                            \n\nDetails for the 2 failed tests:\n\nIn tests/suites/casper/agent.js:12\n  userAgent() tests\n    uncaughtError: TypeError: 'undefined' is not an object (evaluating 'request.headers.filter(function(header) {\n        return header.name === \"User-Agent\";\n    }).pop().value')\nIn tests/suites/casper/agent.js\n  userAgent() tests\n    dubious: userAgent() tests: 2 tests planned, 1 tests executed\n</pre>\n\n\ninto a failure:\n\n<pre>\nrvm@reactor casperjs % ./bin/casperjs selftest tests/suites/casper/agent.js\nTest file: tests/suites/casper/agent.js                                         \n# userAgent() tests\nPASS Default user agent matches /CasperJS/\nFAIL Subject is strictly true\n#    type: assert\n#    file: tests/suites/casper/agent.js:13\n#    code: casper.test.assert(headers.length > 0);\n#    subject: false\nFAIL 2 tests executed in 0.213s, 1 passed, 1 failed.                            \n\nDetails for the 1 failed test:\n\nIn tests/suites/casper/agent.js:13\n  userAgent() tests\n    assert: Subject is strictly true\n</pre>\n\n\nWhat to do with the failure I do not know.\n Tests are now fixed.\n  This probably does not affect much but is the correct usage.\n  This commit addresses an issue where if a document had more than one form, and there was overlap in field names across forms, `getFormValues` would not return the correct result.\n\nThe fix is to pass a scope to `getFieldValue` so it only attempts to retrieve values for fields in the given form.\n Okay, made the changes discussed, rebased and pushed.\n  This addresses #360. Fixes a bug with getting form values for radio inputs, and introduces a minor optimization to avoid processing the same form fields more than once.\n  I've done a quick update to the 1.0 branch to add expected and subject nodes to renderResults generated xunit XML.\n\nI don't actually know if this is valid xunit XML or not but I figured you would know. Take a look and use it as you see fit.\n  mergeObjects failed to deep-clone when the target object did not contain the corresponding key\n    This is required to support angular.js apps.\nIf DOM elements in the browser responds to \n'oninput', the angular.js framework listens for \nthis event as a cue to update data bindings.\n  Hello there,\n\nI just stumbled across your awesome project, and wondered how I could contribute and make it better, and I did!\n\nI know this will break some stuff somewhere, sorry for that, but I think it is worth the change. \n\n( _And have a happy friday! ;-)_ )\n\nBest regards,\n\nKasper Grubbe\n :+1: \n  Updated documentation for #refs 350 - waitForSelectorTextChange.\n  New feature for CasperJS that adds a new wait method.\n`function Casper.waitForSelectorTextChange(selector, then, onTimeout, timeout)`\n\nContains the method as well as a test case to test the new method.\n  should be 'leaves', not 'leaved'.\n  onPageInitialized could not be invoked.\n\nI have not tested a fix, but I've decided to send it immediately to prevent this bug appearance within the upcoming 1.0.0 release.\n  Great feature ! (minus a little issue #330)\n\nBut I think you should wait for the 1.1 for pushing this, adding some new features during the validation of a release candidate is not a recommended behavior ;)\n    Hey @n1k0, this probably isn't complete as it needs some tests but just wanted to start a dialog and see what else you'd like to see. I'm using casperjs a whole lot with iframe content. Let me know!\n @n1k0 I added a super basic test and a PR for docs at https://github.com/n1k0/casperjs/pull/326. Let me know if you'd like anything else.\n  Added \"time\"-attribute to the tags `<testsuite>` and `<testcase>`.\nThe `time`-attribute of the tag `<testsuite>` consists of the summary of all `<testcase>` `time`-attributes.\n\nThere were also tests added for this functionality.\n That's totally fine with me. Thanks for you tip. I also saw that you also used the concat method which I also wanted to introduce now to the code. Nice, that I could contribute something to the project. I am looking forward to push other things forward as well.\n I added a pullrequest to change the attribute \"duration\" to \"time\". Otherwise Jenkins will not read the File properly.\nhttps://github.com/n1k0/casperjs/pull/681\n  It's not clear from the documentation that it's possible to add a full\npath to a resource file for unit testing using casperjs.\n Ah. I'm so sorry about that.  I'm closing this pull request and doing it the right way.\n  The implementation of the batch file is lacking in proper support for parameters. This is not so much a limitation of the `casperjs.bat` file, as it is of batch files in general.\n\nA better alternative is to use Powershell.  It has more options and almost certainly has a brighter future than batch scripts.\n\nPowershell does support arguments out of the box, but these are to be prefixed with a single `-`, rather than `--`.  The solution is either;\n- roll your own parser that handles `--`\n- alter the documentation for casperjs to note windows users should use `-`\n\nI would prefer the first, however this goes against the default implementation of powershell, and leads to some messy code.\n\nEither way, this will handle command parameters better than the batch script, but will not handle spaces in paths (even with quotes).\n\nA design decision needs to be made on native support for powershell, with its windows quirks, trying to write our own parser in powershell for `--` arguments, or damn it all and write a teenie tiny .NET app that will handle it all nicely?\n Shouldn't this be closed?\n From what I can tell, this PR was never actually merged...\nThe file `batchbin/casperjs.ps1` doesn't exist in master or any of the other branches.\n Sorry, I saw merged and I quickly thought it was this PR that was merged. What exactly is wrong with parameter parsing the way it is? Also, doesn't Casper depend on Python? If so, we could just write a python parser program.\n  This ensures that `findOne()` and `findAll()` observe the scope for XPath expressions,\nnot just when passed CSS selectors.\n I noticed a couple semantic mistakes in the `findOne()` / `findAll()` tests. Should I commit the changes I made to fix them?\n\n``` diff\ndiff --git a/tests/suites/clientutils.js b/tests/suites/clientutils.js\nindex 20c558d..2b80472 100644\n--- a/tests/suites/clientutils.js\n+++ b/tests/suites/clientutils.js\n@@ -52,6 +52,7 @@ function fakeDocument(html) {\n     // scoped\n     var scope = clientutils.findOne('ul');\n     casper.test.assertType(clientutils.findAll('li', scope), 'nodelist', 'ClientUtils.findAll() can\n+    casper.test.assertEquals(clientutils.findAll('li', scope).length, 2, 'ClientUtils.findAll() can\n     casper.test.assertType(clientutils.findAll(x('//li'), scope), 'array', 'ClientUtils.findAll() c\n     fakeDocument(null);\n })(casper);\n@@ -64,8 +65,7 @@ function fakeDocument(html) {\n     casper.test.assertNot(clientutils.findOne('ol'), 'ClientUtils.findOne() can find a matching DOM\n     // scoped\n     var scope = clientutils.findOne('ul');\n-    casper.test.assertType(clientutils.findAll('li', scope), 'nodelist', 'ClientUtils.findAll() can\n-    casper.test.assertEquals(clientutils.findAll('li', scope).length, 2, 'ClientUtils.findAll() can\n+    casper.test.assertType(clientutils.findOne('li', scope), 'htmllielement', 'ClientUtils.findOne(\n     casper.test.assertType(clientutils.findOne(x('//li'), scope), 'htmllielement', 'ClientUtils.fin\n     fakeDocument(null);\n })(casper);\n```\n Thanks for making an awesome project.\n  In the xunit module, fallback to casperScript name if the final value of the script string is empty.\n  ## Overview\n\nDue to batch files not handling parameters nicely (splitting by an = sign) an alternative script is required to provide good Windows support.\n## Implementation\n\nA powershell script has been implemented that will take the command arguments, parse them into phatnomjs or casperjs arguments, then use the bootstrap.js file in casper to run whatever scripts are required.\n## Testing\n\nHave so far tested this with a small set (around 5) of different parameter implementations and so far so good!\nThis version of the script does _not_ support spaces in file or folder names.  I've yet to work on this.  The built in PowerShell argument functionality splits by \".\" character so I am having to re-invent the wheel somewhat!\n No worries, please close this PR, and I'll instigate a new one from a branch.\nI still have some stuff to do for the test suite branch, I'll create a PR when it is slightly more stable ;)\n Well look at that, I can close things ;)\n    Looks like they have changed their structure a bit.\nCasperError: No element matching selector found: .twc-story-block \n  This is a simple implementation of a missing function. It's based off `1.0.0-RC4` because the tests pass for me there but don't on `master` (although the patch applies cleanly there, the other tests don't all pass when running directly on `master`)\n   Je suis perdu :) je me suis relu 3x avant de poster le patch pour \u00eatre sur de ne pas faire de boulette mais c'est bien blanc sur fond vert, on est d'accord, par contre je n'avais pas corrig\u00e9 au bon endroit c'est \u00e7a ? \n\nEdit : burned \n Woah there.  As cool as French is, think about the contributors who don't know French, and barely understand English!  Let's stick to English, please.  Also, the \"emoji\" only works on github.  It appears as a blank box within e-mails.\n  Went ahead and created the corresponding fixes to support paths with spaces and prevent arguments with values (e.g. --param=value) from being split (e..g --param value).\n This fix will work, however it will not allow us to pass in any parameters directly to PhantomJS.  This would be good functionality to keep.\nIt appears that batch files have crippled themselves to a degree by treating arguments linked with an = sign to be separate arguments.  One way around this is to encase it in quotes (e.g. '--xunit=output.xml') but this doesn't seem natural, and doesn't work in casper anyway!\nOne alternative may be to use a powershell script, rather than a batch script to start casper.  It's a bit more modern, and anyone developing on windows should be capable of running powershell scripts.  I'll try and knock one together that maintains the phantom arguments\n PR for the powershell script at #303\n  The aliases for the Tester module's methods need to be included in the selftest.\n\nRegression happened, and was not reported by the original selftest scripts.  Specifically, `Tester.assertThrows()` and `Tester.assertSelectorExists()` were mis-declared and backwards compatibility broke.\n\nThis contribution improves the selftest, and fixes the declarations of those 2 methods.\n\n**Notice** - the selftest for the Tester module simply fails hard when undefined functions are called upon, and the bottom-line result of the selftest actually shows \"green\", whereas, scrolling through the full log will reveal \"red\" errors.  This is because the selftest is not yet at the level of \"let me assert that the method exists before I try to invoke it\".  Similar issues are likely to exist with all the other selftest scripts.\n  There exists circumstances where the next CasperJS step executes too early, causing false positives for failures in subsequent testing.\n\nThis commit introduces `Casper.blockStep()`, also integrated into `click()` and `clickLabel()`. Developers will now be able to give CasperJS a hint about the nature of a click, and expect CasperJS to block execution of its next step until some not-yet-started behaviour actually starts and completes (today, we're concerned about `loadInProgress` and `navigtationRequested` -- `pendingWait` exists, but I can't think of why I'd want to invoke `blockStep` using that reason).\n\nIt is relatively easy to maintain if new reasons for blocking the next step are created in the future; just add a new `case` for `switch` within `blockStep()`. It is also possible to directly call `blockStep()`, but a developer would typically be better just directly setting `Casper.navigationRequested`, or `Casper.loadInProgress`, or `Casper.pendingWait`.\n\nThe idea of introducing blockStep() tied into click() and clickLabel() is so that we express the whole thing as a single statement.\n\nThis usage is probably the generalized version:\n\n```\nCasper.click(\"#that_button\", \"loadInProgress\");\n```\n\nThis usage is probably more specifically looking at navigation of the `_top` frame (`isMainFrame` in CasperJS code):\n\n```\nCasper.click(\"#that_button\", \"navigationRequested\");\n```\n Here are my minimum tester files (3 items):\n\n**sleepy_page.html**\n\nNOTE -- depending on your environment, you might need to tweak the `sleep` time in order for `premature_execution.js` to actually produce the badly timed execution.\n\n``` html\n<!DOCTYPE HTML>\n<html>\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n        <title>Sleepy Page</title>\n        <script type=\"text/javascript\">\n          function sleep(milliseconds) {\n            var start = new Date().getTime();\n            while ((new Date().getTime() - start) < milliseconds){\n              // Do nothing\n            }\n          }\n        </script>\n    </head>\n    <body>\n      <form method=\"get\">\n        <input type=\"text\" name=\"hello\" />\n        <input type=\"submit\" id=\"my_form_submit\" onclick=\"sleep(250); return true;\"/>\n      </form>\n    </body>\n</html>\n```\n\n**premature_execution.js**\n\nNOTE -- fill-out `casper.start()` with a better URL\n\n``` javascript\nvar casper = require('casper').create({\n  viewportSize: {width: 1280, height: 768}\n  //, verbose: true\n  , logLevel: 'debug'\n});\ncasper.start('http://www.example.com/sleepy_page.html');\ncasper.then(function (){\n  this.test.info('home');\n  this.test.info(this.getCurrentUrl() + '\\n');\n  this.fill(\"form\", {\n    'hello' : 'world'\n  }, false);\n  this.click('#my_form_submit');\n});\ncasper.then(function (){\n  this.test.info('should be hello=world');\n  this.test.info(this.getCurrentUrl() + '\\n');\n  this.fill(\"form\", {\n    'hello' : 'foobar'\n  }, false);\n  this.click('#my_form_submit');\n});\ncasper.then(function (){\n  this.test.info('should be hello=foobar');\n  this.test.info(this.getCurrentUrl() + '\\n');\n});\ncasper.run();\n```\n\n**improved_step_by_step.js**\n\nNOTE -- fill-out `casper.start()` with a better URL\n\n``` javascript\nvar casper = require('casper').create({\n  viewportSize: {width: 1280, height: 768}\n  //, verbose: true\n  , logLevel: 'debug'\n});\ncasper.start('http://www.example.com/sleepy_page.html');\ncasper.then(function (){\n  this.test.info('home');\n  this.test.info(this.getCurrentUrl() + '\\n');\n  this.fill(\"form\", {\n    'hello' : 'world'\n  }, false);\n  this.click('#my_form_submit', 'loadInProgress');\n});\ncasper.then(function (){\n  this.test.info('should be hello=world');\n  this.test.info(this.getCurrentUrl() + '\\n');\n  this.fill(\"form\", {\n    'hello' : 'foobar'\n  }, false);\n  this.click('#my_form_submit', ['loadInProgress', 'navigationRequested']);\n});\ncasper.then(function (){\n  this.test.info('should be hello=foobar');\n  this.test.info(this.getCurrentUrl() + '\\n');\n});\ncasper.run();\n```\n Oh, yeah! I'd like to implement the \"pass an object\" way of doing this.\n\nMeanwhile, I notice you used the term \"blockEvents\" instead of \"blockStep\" -- why a more general term?  I was specifically aiming at steps... rather than more general events that are all over the place.\n\nAlso, what does \"BC\" mean?\n\nFinally... I wonder how I can \"update\" a pull request to reference a different commit.\n Hm... Maybe something involving \"hint\" (too vague by itself). How about \"expect\" (too vague)? \"waitOn\"? \"waitFor\"? \"flagUp\"? \"holdOn\"? \"holdFor\"? \"holdUp\" (oh! we're robbing stuff now!)?\n\nI'm leaning towards \"holdOn\" since it's the shortest between \"holdOn / holdFor\", and it avoids getting confused with the \"wait-family\" methods.\n\nOr... would you want to just stick to \"blockStep\"?\n\nPS: Totally agree on using topic branches, for instance, this is getting worked on in the `blockable_clicks` branch :)\n Refactored. We now two flavours of setting the click options available:\n\nI prefer the simplified version, as it doesn't introduce new names and doesn't even require the `holdOn()` method anymore, previously called `blockStep()`.  It may even be a good idea to remove `holdOn()` and the associated elaborate version... since I didn't feel great using those string options to begin with.\n\n``` javascript\n// An elaborate version\ncasper.click('#foo a.bar', {holdOn: [\"loadInProgress\", \"navigationRequested\"]});\n// A simplified version\ncasper.click('#foo a.bar', {loadInProgress:true, navigationRequested:true});\n```\n\nI also thought that maybe we'd prefer having something like this, if we keep the `holdOn` option:\n\n``` javascript\ncasper.click('#foo a.bar',\n    {holdOn: {loadInProgress:true, navigationRequested:true}}\n);\n```\n\nOf course, keeping `holdOn` as a separate method seems counter to the \"don't repeat yourself\" principle.\n\nThoughts?\n Absolutely not.  They must not be global options that are set at the start.  Here's why:\n\nIt is a very likely scenario that one test script will click many elements on a page, for many different reasons that do not involve \"navigation\" or \"loading\".  An couple of easy examples would be: click on the radio button to select a different option; click on the tab to show a new tab (think: jQuery tabs).\n\n[I changed my mind in the next comment... entertaining the idea that it might be nice to have a global CasperJS default behaviour set in place].\n\nOptions:\n- Use \"human intelligence\" to give CasperJS testing scripts the necessary hints indicating certain click actions as \"load\" and/or \"navigation\", thus minimizing the changes needed to our precious HTML pages.\n  - Augment `click()` -- its current behaviour is actually broken and unexpected.\n  - Introduce a new kind of `click()`, perhaps called `follow()` for `navigationRequred` blocking, and `fetch()` for `loadInProgress` blocking.\n- Use \"human intelligence\" to give clickable elements `class` attributes `navigationRequred` or `loadInProgress`, such that CasperJS's `click()` will analyze the selected element, and raise a step-blocking flag; this kind of hinting should be discouraged, in my opinion.  It seems pretty counter-productive to go through every single clickable element in my website, tagging them specifically for CasperJS's testing.\n- Give CasperJS gains a hardcore parser that fully analyzes (a) basic html hints that indicate load/navigation (b) all add-on script and systems [javascript, java, activeX, etc] that may override basic html hints -- in order to have a smarter version of `click()` that will automatically know whether or not it should raise a step-blocking flag.\n\nSo far, we covered the first option using the \"augment click()\" sub-option.\n Basically, for each click action, someone needs to make a judgement call on whether or not the next step should be blocked.\n\n``` javascript\ncasper.then(function (){\n   // casper needs to know whether or not to block the next step\n   this.click('#something');\n   // this is one way of doing it.\n   this.holdOn('navigationRequested');\n});\ncasper.then(function (){\n  // because, a test in this step depends on reactions to click().\n   this.test.assert( ... );\n});\n```\n\n``` javascript\ncasper.then(function (){\n   // giving the hint before clicking is fine, too\n   this.holdOn('navigationRequested');\n   // casper needs to know whether or not to block the next step\n   this.click('#something');\n});\ncasper.then(function (){\n   // because, a test in this step depends on reactions to click().\n   this.test.assert( ... );\n});\n```\n\n``` javascript\ncasper.then(function (){\n   // this is easiest to read and write.\n   // worst-case: go read the documentation that talks about \"click options\"\n   this.click('#something', {navigationRequested: true});\n});\ncasper.then(function (){\n   // because, a test in this step depends on reactions to click().\n   this.test.assert( ... );\n});\n```\n\nLet's see... How about I entertain the idea of \"global setting\"?  Let's say it's a good idea to always block clicks() as if they were always going to navigate to another page.  In that case, we would want the following to be possible:\n\n``` javascript\nvar casper = require('casper').create({\n    holdOn: {\n        navigationRequested: true,\n        pendingWait: false,\n        loadInProgress: true\n    }\n});\ncasper.start(...); // load something sensible\ncasper.then(function (){\n   this.click('#something', {navigationRequested: false});\n   this. waitUntilVisible('#awesome');\n});\ncasper.then(function (){\n   // we're waiting on an invisible item to turn visible\n   this.test.assert( ... );\n});\n```\n\nAnd... we absolutely won't be able to use a simple array of strings.  It would always have to be a \"block-flag-name: true|false\" collection of object-properties.\n I noticed that `casper.open()` also stands to benefit from having a `navigationRequested` hint.  Any ideas whether or not it should be permanently built-in, or if it should be optional, like what we're going for with `casper.click()`?  I ask this because while most web URLs are HTML pages, there exists those which are resources like binary files (PDFs, for example)...\n\nCurrently investigating... _(starts pondering test scripts to provide groundwork hypotheses)_\n Uhh.... on my side it's \"on ice\" -- I was planning on simply pushing out\nthe following features for it...\n- \"by default\"\n- \"by config option array-thing\"\n- \"by config before calling the function(s) -- a natural extension of by\n  default\"\n\nI just haven't had time to commit to bashing out that code... are we\nitching to get this feature integrated real soon?  I could get motivated to\ndo so, if you ask for it to be pushed up in my scheduling.\n\n// Victor\n Would it be better to move this functionality into waitFor? I'm just trying to understand the advantages of this approach.\n @danielnitsche Well, in my opinion, we're faced with a bug that should permanently be fixed.  However, it's plausible that others have already \"worked around\" this bug, and would prefer \"old school / buggy\" style, maybe even to the point of requiring the buggy style by default.  Also consider that my solution is effectively a new functionality, so it's probably best to segregate it into its own function and add a few calls to it, as needed.  Make sense so far?\n\nThe next aspect that's curious to me is that I didn't include the option to block on a mere \"wait\", probably because it only matters that we block when a load is initiated.\n Any news on this?\n Nothing officially merge-worthy, but, the old patch / concepts can be used\nas-is with a private merge/patch/rebase operation -- unless casperjs has\ndiverged THAT much since I last saw it.\n\nThere's an infinitely small amount of interest to hash out further\ndevelopment~  The main issue is in the debate about what style of\nimplementation to follow.  Unclear.  I was probably gonna go for \"why not\nboth?\" (options array/object + default configs available).\n\n// Victor, the time-constraint\n\nOn Tue, Jun 4, 2013 at 8:58 PM, Pavel Puchkin notifications@github.comwrote:\n\n> Any news on this?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/n1k0/casperjs/pull/264#issuecomment-18949379\n> .\n Ok. Currently I use raising `loadInProgress` flag before calling `click`, `fill` with submit and other as a workaround.\n I've been setting the flag after the call to click/fill, I don't think it\nmakes a difference but is there a race condition possible?\n\nOn Tue, Jun 4, 2013 at 9:32 PM, Pavel Puchkin notifications@github.comwrote:\n\n> Ok. Currently I use raising loadInProgress flag before calling click, fillwith submit and other as a workaround.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/n1k0/casperjs/pull/264#issuecomment-18955081\n> .\n There exists occasions where \"if the flag was not raised, then, depending\non random execution ordering decided by the JavaScript or browser or\nprocessor, there is a chance that program execution will misbehave\". (ie:\nthe next assertions randomly pass/fail - making unreliable automated test\nscripts). Even if you tried adding tons of \"wait\" time, there is still a\nchance to fail in making the correct assertion. It's bad on two levels:\nartificial wait time slows down time-to-results, and, random pass/fails\nmeans you couldn't rely on the automated testing for test-driven\ndevelopment.\n\nCommonly, it's a problem that occurs when \"clicking causes something like\nan Ajax request\"; the order of operations is messed up... like the async\nnature of Ajax tends to wreck havoc... that has been my observation so far.\n\n(I thought I already mentioned all this once before...)\n\n---\n\nSo, in order to fix this : we have to think \"backwards compatible old/buggy\noption\" + \"improved default wait flag raising\" + \"documentation\".\n\n// Victor, via phone\nOn Jun 5, 2013 1:56 AM, \"bjabes\" notifications@github.com wrote:\n\n> I've been setting the flag after the call to click/fill, I don't think it\n> makes a difference but is there a race condition possible?\n> \n> On Tue, Jun 4, 2013 at 9:32 PM, Pavel Puchkin notifications@github.comwrote:\n> \n> > Ok. Currently I use raising loadInProgress flag before calling click,\n> > fillwith submit and other as a workaround.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/n1k0/casperjs/pull/264#issuecomment-18955081>\n> > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/n1k0/casperjs/pull/264#issuecomment-18956980\n> .\n (FWIW, I discovered this pull request after trying to figure out why my CasperJS tests were failing on CircleCI but passing locally. CircleCI's VMs are slower, but putting in a `casper.wait()` didn't seem right, of course. After seeing this PR I have inserted `casper. loadInProgress = true` after all my `casper.click()`s and everything works fine on CircleCI. I support this change as it would be a more compact syntax for what I've done.)\n Hi,\n\nI have issue with casper 1.1 when i click to submit a form. So what's the correct workaround and what the current status of this issue?\n This pull request is currently in limbo, but, you're welcome to either take up the where I left off, getting it up to date with the latest CasperJS, or, simply replicate the little changes that I was trying to introduce.\n\nWhy is it in limbo? It's because I haven't yet continued tweaking the \"parameterization / configuration\" aspects to a form that respects @n1k0's liking. Why I haven't I done so yet? That's because I haven't been actively using CasperJS since I initial discovered and reported this; and thus, motivation to continue improving and fixing this has dropped to near-zero levels.\n\nSomething like a workaround hint can be found here, it addresses CasperJS 1.0.0-RC4, but, if you can confirm whether or not my observations still apply in CasperJS 1.1 and/or the latest version[s](both here and in StackOverflow), that would probably be helpful for the world -- http://stackoverflow.com/q/11604611/508823.\n\n> As of CasperJS 1.0.0-RC4, a flaw exists, where, under certain time-based\n> circumstances, the \"try to do next step\" method will be triggered before\n> CasperJS had the time to raise either one of the loadInProgress or\n> navigationRequested flags. The solution is to raise one of those flags before\n> leaving any step where those flags are expected to be raised\n> (ie: casper.click()).\n  This adds a batch file for starting casperjs on Windows (requires installed Python in the PATH). It also changes the use of os.exec to subprocess (only on Windows) so that the correct exit code is returned instead of starting casperjs in the background.\n\nOne only has to add the casperjs\\bin folder to the PATH and running on Windows becomes as simple as\n\n```\nset PHANTOMJS_EXECUTABLE=Path\\To\\phantomjs-1.7.0-windows\\phantomjs.exe\ncasperjs <script>\n```\n    Apologies if I'm approaching this wrongly, but I've found myself writing a lot of _if (this.visible(x)) else_ statements when writing tests, and thought it would be helpful to have a specific \"assertVisible\" method.\n\nI've added the method to the tester.js module. I wasn't sure if it needed a specific test written as it's essentially just returns the result of casper.visible().\n\nThanks,\n\nDonovan\n  This provides a loader similar in function to the Ruby and Python loader, but setup for windows.\n\nAfter adding phantomjs to the windows Path variable as well as casperjs/batchbin to the windows Path variable, this should work as it would on OSX. \"casperjs <ARGS>\"\n\nAlthough a lot of our web engineers use OS X, the vast majority of our DevQA prefer Windows, so this is vital for enterprise inclusion.\n I can confirm this is working, should be better than my simple script because it also handles phantomjs arguments. @n1k0: Please pull this one, I will close my request.\n Phantomjs installation additions\n- Windows users: Append \";C:\\phantomjs\" to your PATH environment variable. Modify this path appropriately if you installed PhantomJS to a different location.\n\nCasperjs installation additions\n- Windows users: Append \";C:\\casperjs\\batchbin\" to your PATH environment variable. Modify this path appropriately if you installed CasperJS to a different location.\n  This will allow \n\n**utils**.options.scope = element\n\nSo all future finds and tests will use that for the scope. Very useful for writing tests that look at a single widget on the page. \n This pull request [fails](http://travis-ci.org/n1k0/casperjs/builds/2178107) (merged 9211f91f into 5ed461e8).\n This pull request [passes](http://travis-ci.org/n1k0/casperjs/builds/2180008) (merged d6c11e45 into 5ed461e8).\n  When using casper.download() with unicode characters (\u00e9, \u00e1, \u00e7, etc), sometimes it just garbled the response data and other times the request completely failed.\nWhen replacing escape (https://github.com/n1k0/casperjs/blob/master/modules/clientutils.js#L317) by encodeURIComponent the issue is gone.\n\nNot sure if it covers all the cases, but it works for me.\n\nIn any case, it could help someone else, so here it goes the pull request.\n This pull request [passes](http://travis-ci.org/n1k0/casperjs/builds/2142986) (merged 24e0708b into 5ed461e8).\n  When the page changes location via javascript onLoadStarted is not called - casper.then does not wait for the page to finish loading before going to the next step. This is most likely due to a bug in phantomjs. \n This pull request [passes](http://travis-ci.org/n1k0/casperjs/builds/2180567) (merged dbb3dc02 into 5ed461e8).\n  Calls the onclick on submit buttons before submitting the form in casper.fill.\n\nI know some of these aren't technically submit buttons (`button`, `input[type=\"button\"]`), but I've seen a site using `input[type=\"button\"]` as a submit button in a form.\n  https://github.com/n1k0/casperjs/issues/201\n\n---\n\ncasperjs - line 1088 - the stepTimeoutCheckInterval only checks the step number and does not take into account multiple test files. When running a series of suites the step numbers overlap.\n\nif (self.step === stepNum) - needs to take account of which suite is currently running.\n  This branch adds three new assertions to the Tester module:\n\n``` js\n// Asserts that a given input field has the provided value.\ntest.assertField(input_name, expected_value, message) \n```\n\n``` js\n// Asserts that given text exists in the provided selector.\ntest.assertSelectorHasText(selector, text, message)\n```\n\n``` js\n// Asserts that given text does not exist in the provided selector.\ntest.assertSelectorDoesntHaveText(selector, text, message)\n```\n\nPassing tests included.\n @n1k0 Good points, will do.\n code updated! :+1: :-1: :question:\n Yes, looks fine :) I'll be merging these soon, I'm a bit over busy right now\n +1 for assert Text. Can you add one that's simply \"Assert Text?\" Sometimes you don't care about the selector.\n @twinturbo: you can already use assertTextExists if you don't care about the selector: http://casperjs.org/api.html#tester.assertTextExists\n  The colorized formatting produced invalid XML for casper.test.renderResults().\n\nTweaked for formatting so that the variable part is presented by a colon,\nhelping to keep it distinct now that the colorized format is taken away.\n\nBroken XML was introduced by commit 789f60d04e1090c3e5ed2ee3943528b9fb3bc8e5.\n Oh. Amended my email address + force-pushed my branch... Seems like github understood it and I didn't need to re-create the pull request. Please pull 26a85b0 for the right history. Next time I'll know that I won't have to write an issue before making the patch :)\n  Helper to easilly access a response header from anywhere.\n Yay, it would be even easier. And shorter to write. And less ambiguous than retrieving `casper.currentResponse`.\n Okay, pushed a cleaner API and case-insensitive retrieval.\n Yep indeed. I may do that in another PR, especially as I've not digged too much in steps and it seems there are some subtle stuff with history etc.\n Finally put the `response` in the step.\n\nAs expected, browsing back and forward does not match with `currentResponse` values.  \nIt would imply to save the whole response state (status etc.)\n Do you need anything more for this PR?\n How do you access the response headers with the latest pull request?\n  Nice library, thanks for the huge work\n  This pull request implements tests and support for the \"settings\" argument in thenOpen. This allows you to do such things as `POST` the results of your scrape to a URL of your choice. Combined with the web server introduced in phantomjs 1.5, you should be able achieve half-duplex communications between any other server-client that supports RESTful communications.\n\nI added the tests to open.js, but feel free to move them to thenopen.js.\n\nHUGE CAVEAT: There is a bug in the test suite that I have no idea how you want to fix. \n\nCurrently when you run the test suite, there is a filter in run.js to point `casper.open()` to a local file, however the underlying phantomjs implementation of `page.openUrl()` is able to modify that file when the method is `PUT`. This means that the tests for `thenOpen()` (or even an open inside a `casper.then()` fn callback) will modify/mangle the local file, which in the case of the `open()` tests is `tests/site/index.html`. \n\nThe problem with mangling this file is that it will cause many subsequent tests to fail. Run the test quite and then run `git diff` to see the modifications performed.\n\nI don't know how you want to fix this bug. Locally I solved the bug by changing the file permissions to 444 with chmod, however git doesn't support file permissions on files so this isn't a transferrable solution. The simplest approach is to add a few lines to the test runner that sets that file as read-only. This is not the best solution, just the easiest. Another approach is to perform a teardown that restores that file after the open.js test file is run. Yet another approach is to actually run a web server using node.js or python that serves the tests/site files.\n No prob. Thank you for casper.js. It's been super useful.\n\nI did get thenOpen to work for posting the results of a test back to my node server, so I reckon that together with the built-in web server in phantomjs we now have full two way communication that isn't dependent on stdio. \n\nIt'd be nice if we could get access to get qt's require() method to fallback to npm() when it cannot find the built in ones that phantom comes with.\n\nit should look first for a qt require, then fallback to npm, then fallback to ./node_modules then fallback to a relative path string (e.g. require('../lib/underscore.js');)\n  binds all possible events although some events are not triggered yet\nthis script creates events_most.js script within events_all folder\nseparate directory helps to avoid cluttering of samples folder\nlengthy comment is included at the top of the page.\nscript runs fine, few improvements I wish to do are explained in the\ncomment section\n I figured out how to turn this into a module, I will re-submit when I convert the code. I will keep the pull request here meanwhile in case if it is useful to anyone.\n I took out the creator script, I thought it may cause unnecessary load on your servers.\nAs a result of modularization, the example became a lot shorter and clear.\n  I have modified `casperjs.gemspec` for reading VERSION from `package.json` file. \nAnd I test it is okay.\nPls have a look~\n  Issue 1: Numerous web applications we develop make extensive use of HTML5 data attributes. As this is a pretty standard use, having a way to quickly query for them could be quite valuable (and was valuable for me).\n\nIssue 2: For our CI environment, having preemptive control of the exit code is a big win. To enable that knowledge about failures and passes should be available before the test results culminate.\n\nChecking the testResults object would be bad, as that has nothing that would suggest it's final.\n  I needed to simulate keyboard events to test an autocomplete field, so I copy-pasted mouseEvent to create keyboardEvent.\nWorks for me but need more tests, I know.\n Here are some tests, but, in fact `initKeyboardEvent` seems buggy in Webkit. My patch works for me but may fail for other use cases, so I don't know if pulling this is a good idea.\n Yep, this was enough for my needs but seems really buggy. It triggers the event listeners, but with lots of side effects. I have no time to look deeper, so I will keep the patch as a local extends in my tests files.\nFor the record, here's a related Webkit bug\u00a0: https://bugs.webkit.org/show_bug.cgi?id=16735\n How is this feature going? I'm looking forward to handle keyboard events with casperJS. \n There's a fine PR awaiting to be merged upstream https://github.com/ariya/phantomjs/pull/290\n I think https://github.com/ariya/phantomjs/pull/290 is merged. \nHow is this feature going?\n @n1k0 you rock, thanks!\n I can't find the commit adding support for this, @n1k0 . I'd appreciate a link. Thanks in advance.\n @n1k0 : Is there going to be Casper.js usage of this too? For example, `fill()` is not triggering `onkeyup` AFAIK. Will there be an option to use events to enter the data instead? Thanks.\n I don't see the keyboardEvent method in RC4 of casper.  I see it has been merged to master though. When can we expect to see this in a release?\n Just an update for others trying to look up phantomjs [native keyboard events](https://github.com/ariya/phantomjs/wiki/API-Reference-WebPage#wiki-webpage-sendEvent): <-- it's here now.\n  For issue #154.\n Yes, with this change, it is working and solves #154, it didn't work before. `event` is `undefined` at that place.\n    See attached commit\n  One word patch that fixes require('system').\n\np.s. Thanks for CasperJS!\n  In order to tell whether an element is visible or not, both visibility and display properties should be verified from its compute styles.\n\nproblem:\nlooking at `el.style.visibility` is only valid if such element visibility style was set directly inline via JS or style attribute, i.e: `el.style.visibility = 'hidden'` or `<div style=\"visibility:hidden\"></div>`\nAn invisible element could have empty style and yet be invisible if set via via css. e.g: `<style>div{visibility:hidden;}</style><div></div>`.\n\nsolution:\nlook at element computed styles (both visibility and display)\n  kind of awkward to keep this backwards compatible\n  or any other keyword with a billion or two hits.\n\nTry this:\n\n```\n$ casperjs samples/googlematch.js banana apple orange\nLet the match begin between \"banana\", \"apple\", \"orange\"!\nbanana: 330000000\napple: -2114967296\norange: 1690000000\nWinner is banana with 330000000 results\n```\n  This is kind of a heavy revision, but I've checked every samples and compared coffee/js version.\nI've made changes in order to have cleaner js code (almost as it would have been if `coffee -bc sample.coffee` was run)\n\nTahnk you nicolas\n\n++\n @n1k0 ok I've moved var declaration to the top of scripts, I think my PR is now mergeable, what do you think of it ;)\n ping @n1k0 \n ok @n1k0 I'll revise this PR tomorrow :) cheer\n Sorry, I won't have time before next week... Because of mu work and\nmother's day... Cheer\n @n1k0 mother's day is over ;) ... can yoiu check my latest changes and accept this PR ;)\n @n1k0 I don't hate you (for now ;) ) I think now it is mergeable (hope so)\ncheer buddy\n Tu es le bienvenue :)\n      This patch fixes a bug where casperjs' python launcher process won't pass along kill signals to the phantomjs subprocess. This patch works by using an exec system call which causes the phantomjs subprocess to completely replace the casperjs parent process (while maintaining the same pid). This patch also has the added benefit of saving 10 megs or so of memory because the python process is discarded.\n\nThank you in advance for merging this and I hope you'll forgive me for the hyperbolic title :]\n Thank you for making this lovely project\n  This is a set of minimal changes to support a wider range of mouse events, e.g. \"mousedown\", \"mouseover\", etc. I used the same approach as \"click\" had previously - try a client-side synthetic event, then try a QtWebKit event - and I converted the existing `casper.click` method to use the generalized approach.\n Sure, but see my earlier email to the list - I have a Windows machine, and the way the tests are currently set up, none of the paths work for Windows, so I haven't been able to successfully run the tests. I'll see if there's a reasonable way to get is running on my machine, and then I'm happy to write tests. \n Okay, I got the tests running (for some reason, probably due to Window's forward slashes, the `file://` urls weren't working). And it looks like this set of changes introduced some issues in the `.click()` edge cases - so please hold off on the pull, and I will fix and add some commits and tests.\n OK, I fixed the issue and added some unit tests. I can add documentation too, but I won't be able to do it right away. There's a slight issue here, noted in the tests, that there's a mismatch between the mouse event types you can dispatch synthetically on the client and the PhantomJS-supported events. I added a [PhantomJS feature request](http://code.google.com/p/phantomjs/issues/detail?id=491) to support this, but as it stands, if you send a `mouseover` or `mouseout` event and it fails (or `preventDefault()` is called), there's no native fallback. I put a comment to this effect in my tests.\n\nI'm also seeing failing tests on the formfill.js suite, because `this.click('input[type=\"submit\"]');` isn't working. This test suite fails for me on the master branch as well, though, so if it's a problem I don't think it's one I caused.\n Should still be valid. The mismatch between synthetic events and PhantomJS events is unavoidable until they update PhantomJS, but at least adding the synthetic events gives a wider range of testing possibilities.\n\nAs I noted, I'm not sure whether the error in the unit tests is due to anything in my commits. So if the tests run green for you, this should be good to pull.\n  this is useful in cases where there are hidden form fields you need to grab via something like\n\n```\nvar form_data = this.evaluate(function() {\n  return jQuery('form').serialize();\n});\nvar base64contents = this.base64encode(form_url, 'POST', form_data);\n```\n  A few of the changes were probably changing the British spelling of some words to the US way, but other than that, the corrections are all pretty legitimate.\n My pleasure\n  A few of the changes were probably changing the British spelling of some words to the US way, but other than that, the corrections are all pretty legitimate.\n  This time on the main README.md file\n I don't think it's possible to have just one PR with a commit from master and one from a submodule, that's why there's two commits (this one for **casperjs**, and #71 for the **docs** submodule).\n\nTo have a look at the resulting README.md, check my fork https://github.com/magopian/casperjs#readme\n  second attempt, with correctly formated markdown this time _facepalm_\n How can I do that? It's not the docs that I modified, it's the README.md. You can have a look at the result on my fork:\n\n https://github.com/magopian/casperjs/tree/gh-pages#readme\n  See docs on modified method for desired order.\n That's great, I look forward to seeing it.\n\nIt's weird none of the tests were passing. Were there assumptions baked in about the root directory or something? I figured it was a decent exercise to use the module to read the tests from casper's test directory and validate that all parent files were returned (and sorted) before any child file.\n  Add 'context' to both tester.assertEval and tester.assertEvalEquals that just passes through to casper.evaluate.\n Sorry for the extra spacing, still getting the hang of clean pull requests!\n  To be honest, I just want to be a \"contributor\" by adding a \"g\" :D\n  Hi,\n\nWhat do you think of using script file names as class names in JUnit xml report? I think it helps readability of the results for example in Jenkins report.\n\n-Mikko-\n Ok, thanks!\n  I have added the ability to pass a request method and request data to the base64encode() method. This allows a user to post data to a url and download the resulting data.\n Sorry that the indenting is messed up. :(\n That should do it. Thanks for considering merging. I have found it a needed feature in order to do what I need to do with Casper. \n  Adds a feature to check to see if a remote element is visible and wait until / wait while methods that can be used to control process flow.\n\nFor example:\n\n``` coffeescript\ncasper.then ->\n  @click \"a#ajaxy-link\"\n  @waitWhileSelector \"img#ajax-spinner\", ->\n    # ajax load is complete, do something with the page\n```\n  As i mentioned in issue 23; I was looking for a way to have more logs to see what was going on between phantomjs and the server.\n\nSo here it is. I've named it \"verbose\" because it tells a LOT of things ;)\n\nFor each request received, it shows something like :\n[verbose] [phantom] received : http://xxxx, OK, null, 11700, [Date,Wed, 07 Dec 2011 09:48:12 GMT] [Server,Apache/2.2.21 (Debian)] [X-Powered-By,PHP/5.3.8-1+b1] [Expires,Thu, 19 Nov 1981 08:52:00 GMT] [Cache-Control,no-store, no-cache, must-revalidate, post-check=0, pre-check=0] [Pragma,no-cache] [Vary,Accept-Encoding] [Content-Encoding,gzip] [Keep-Alive,timeout=5, max=32] [Connection,Keep-Alive] [Content-Type,text/html; charset=utf-8]\n Like it, thanks\n\nIt's been helpful for me (not being sure if something was loading before having the error message from phantom)\n  new resource functions\n I'll have a look at this ...\n I changed the ways `waits` behaves. I just pushed a version that fixes your test. I've also committed another test that contains nested `waits`. This test currently doesn't pass completely, but I'm working on it :)\n All tests are running again. I've changed way steps that are dynamically created at runtime are handled.\nNow these steps are inserted before the next step and not at the end of the queue. \n Thanks! Looking forward to the modularized casper.\n can we use waitForSelector in tester module ??? it giving this error.\n\n```\nFAIL Wait timeout occured (5000ms)\n#    type: uncaughtError\n#    file: testfinal.js:231\n#    error: Wait timeout occured (5000ms)\n#           TimedOutError: Wait timeout occured (5000ms)\n#               at test_onWaitTimeout (C:/casperjs/modules/tester.js:231)\n#               at _check (C:/casperjs/modules/casper.js:2029)\n#    stack: not provided\n```\n  Hi--  I added an example that searches for an arbitrary search term and processes up to the first 5 pages of results.  Might be useful for someone?\n  If there are multiple elements in the DOM, I would like to be able to give multiple values in the fill method.\n\nExample: http://www.pap.fr/ checkbox element name = \"typebiens[]\"\n how can i use this?\n\ni tried\n\n``` coffeescript\n\ncasper.then -> @fill 'form', {\n    'foo[]': true\n}\n\n# and\n\ncasper.then -> @fill 'form', {\n    'foo[]': [true, true, true]\n}\n```\n\nbut without success.\ni couldn't find this in the documentation, either.\n\ncheers mark\n i know this pull request is a year old and casper changed a lot during this time.\n\nis this feature still available or do I need to use a workaround for this?\n\nmy method to check just **one** checkbox is\n\n``` coffeescript\ncasper.then ->\n    document.querySelector('input[name=\"foo[]\"]').setAttribute('checked', true)\n```\n\nbut my tests with querySelectorAll and forEach did not work out.\n thanks for your help,\n\ni also found out that you can use jquery in `thenEvaluate`\n\n``` coffeescript\ncasper.thenEvaluate -> $('input[name=\"foo[]\"]').prop('checked', true)\n```\n\nworks great and is readable\ncheers :)\n  This way, the script can stop gracefully: For example, it's possible to log when a website doesn't respond quickly enough, thanks to the onDie configuration option.\n Yep, that's exactly what I was looking for! My solution was just a poor version of yours (especially as it allows to customize the behavior on timeout instead of relying on the generic `onDie` behavior.) \n Thanks! You will probably think I abuse but it'd be great to also have the location passed to the callback like this:\n\n```\nif (isType(self.options.onTimeout, \"function\")) {\n    self.options.onTimeout(self, location);\n}\n```\n Ok I'll do this way but in [my fork](https://github.com/nautilebleu/casperjs/commit/d0e4958197d8401f647608ff78d1e0c5d5bee133) I've simply add the `location` and it works (or seems to, in my use case.)\n Yes I understand. The problem also occurs if the `location` has done a redirection that doesn't respond. \n    I've added a \"thenClick\" function to solve the following problem.\n\nLet's imagine that I test a website page like this : \n- I open the website\n- I click on a button with opens a div (content loaded with Ajax call)\n- I want to click on a link in this div, which will open a new page\n\nI didn't find a way to do it without the step I've added. My js script is now :\n\n``` javascript\ncasper.start('http://mywebsite/', function(self) {\n  self.click('a#popin');\n  self.waitForSelector('div.popin-content', function(self) {\n    self.test.assert(true, 'div.popin-content has appeared as expected');\n    resumeTests(self);\n  }, function (self) {\n    self.test.assert(false, 'div.popin-content has appeared as expected');\n  });\n});\nfunction resumeTests(self) {\n  self.thenClick('a#in_popin', true, function(self) {\n    self.test.assert(true, 'at last, I can continue my tests');\n  });\n}\n```\n  add a way for setting the viewportSize, and some debug log messages when capturing\n", "text_all_count": 24986, "text_word_token": ["Add", "NUMBER", "function", "to", "the", "casper", "module", "getElement", "getElements", "They", "provide", "a", "way", "to", "fetch", "DOM", "nodes", "with", "scope", "attached", "to", "them", "so", "further", "manipulations", "and", "operations", "like", "use", "querySelector", "can", "be", "do", "NUMBER", "I", "m", "not", "an", "english", "language", "expert", "but", "haven", "t", "be", "able", "to", "find", "anything", "on", "the", "other", "way", "of", "spelling", "it", "NUMBER", "To", "back", "me", "up", "here", "be", "a", "couple", "of", "links", "LINK", "LINK", "LINK", "this", "code", "doesn", "t", "work", "Array", "NUMBER", "prototype", "NUMBER", "forEach", "should", "be", "Array", "NUMBER", "prototype", "NUMBER", "map", "NUMBER", "SEE", "LINK", "heads", "up", "nosniff", "header", "support", "come", "to", "chrome", "and", "firefox", "We", "be", "use", "the", "page", "NUMBER", "resource", "NUMBER", "requsted", "event", "to", "measure", "the", "page", "loading", "times", "NUMBER", "But", "we", "notice", "that", "on", "the", "urls", "with", "russian", "symbols", "they", "be", "mostly", "urlencoded", "look", "at", "ru", "NUMBER", "wikipedia", "NUMBER", "org", "these", "event", "were", "never", "fired", "The", "problem", "was", "in", "the", "_page", "NUMBER", "onResourceRequested", "_", "function", "NUMBER", "It", "compares", "the", "request", "URL", "with", "the", "current", "page", "URL", "to", "check", "if", "the", "page", "NUMBER", "resource", "NUMBER", "requsted", "event", "can", "be", "fired", "NUMBER", "But", "PhantomJS", "as", "well", "as", "Chrome", "of", "FF", "request", "the", "URL", "urlencoded", "so", "the", "comparison", "never", "succeeds", "on", "urlencoded", "urls", "NUMBER", "I", "ve", "add", "the", "code", "for", "decoding", "the", "URL", "before", "the", "comparison", "and", "the", "event", "page", "NUMBER", "resource", "NUMBER", "requsted", "be", "now", "fired", "on", "ulrencoded", "URLs", "NUMBER", "I", "ve", "also", "add", "test", "for", "this", "case", "NUMBER", "But", "the", "test", "has", "detected", "the", "problem", "with", "not", "correctly", "urlencoded", "urls", "the", "event", "page", "NUMBER", "resource", "NUMBER", "requsted", "be", "not", "fired", "on", "URLs", "which", "were", "created", "with", "_escape", "_", "function", "NUMBER", "After", "some", "digging", "I", "think", "that", "the", "problem", "be", "on", "the", "PhantomJS", "side", "NUMBER", "The", "page", "NUMBER", "onNavigationRequested", "event", "be", "fired", "from", "PhantomJS", "and", "gets", "as", "an", "argumen", "not", "correctly", "escaped", "url", "console", "NUMBER", "log", "casper", "NUMBER", "requestUrl", "LINK", "Forl", "NUMBER", "For", "example", "Chrome", "and", "Firefox", "do", "not", "escape", "this", "URL", "at", "all", "urls", "NUMBER", "html", "test", "Forl", "EC", "NUMBER", "We", "could", "unescape", "this", "URL", "but", "it", "will", "still", "not", "be", "equal", "with", "the", "PhantomJS", "one", "console", "NUMBER", "log", "unescape", "requestData", "NUMBER", "url", "LINK", "Forl\u00ec", "Edit", "I", "have", "notice", "that", "the", "page", "NUMBER", "resource", "NUMBER", "received", "event", "suffers", "from", "this", "bug", "and", "extend", "the", "test", "to", "include", "it", "NUMBER", "I", "have", "commented", "the", "unit", "test", "which", "checks", "the", "escaped", "URL", "so", "the", "PR", "could", "be", "merge", "but", "the", "problem", "with", "escaped", "URLs", "be", "still", "there", "NUMBER", "I", "have", "not", "so", "much", "experience", "with", "PhantomJS", "or", "CasperJS", "to", "fix", "it", "directly", "but", "would", "like", "to", "discuss", "it", "to", "find", "the", "way", "to", "do", "it", "NUMBER", "Hi", "guys", "two", "monats", "pass", "since", "this", "PR", "was", "created", "but", "no", "one", "commented", "on", "it", "NUMBER", "Should", "I", "rewrite", "it", "This", "PR", "solves", "an", "actual", "error", "in", "casperJS", "and", "also", "provides", "unit", "test", "to", "test", "for", "this", "error", "NUMBER", "Ping", "n", "NUMBER", "k", "NUMBER", "mickaelandrieu", "Merged", "commit", "and", "rebased", "the", "fix", "branch", "use", "latest", "master", "NUMBER", "BSD", "mktemp", "needs", "an", "argument", "to", "provide", "an", "appropriate", "path", "NUMBER", "This", "update", "provides", "a", "work", "path", "directory", "in", "both", "Linux", "and", "Mac", "OSX", "NUMBER", "One", "of", "My", "friends", "fail", "to", "use", "casperjs", "to", "write", "test", "case", "in", "mobile", "web", "page", "test", "because", "this", "web", "page", "use", "touch", "event", "to", "trigger", "a", "action", "but", "capserjs", "only", "support", "click", "event", "NUMBER", "I", "write", "following", "code", "to", "make", "touch", "event", "available", "in", "capserjs", "and", "I", "think", "a", "touch", "event", "support", "in", "mobile", "web", "page", "test", "be", "necessary", "as", "the", "touch", "event", "in", "cellphone", "be", "very", "common", "NUMBER", "So", "I", "commit", "my", "patch", "back", "to", "capserjs", "and", "hope", "it", "helps", "others", "NUMBER", "mickaelandrieu", "Generally", "You", "need", "to", "set", "ua", "to", "ios", "android", "and", "then", "test", "mobile", "only", "site", "NUMBER", "More", "details", "and", "examples", "can", "be", "seen", "in", "test", "and", "docs", "I", "add", "at", "this", "time", "NUMBER", "poke", "mickaelandrieu", "Hi", "maybe", "the", "Mouse", "API", "can", "be", "improved", "this", "way", "c", "n", "NUMBER", "k", "NUMBER", "Just", "use", "API", "this", "NUMBER", "evaluate", "trigger", "event", "by", "page", "itself", "casperjs", "need", "not", "to", "support", "it", "andypeker", "not", "every", "casper", "user", "have", "ability", "to", "use", "evaluate", "trigger", "emulating", "the", "touch", "event", "NUMBER", "poke", "mickaelandrieu", "NUMBER", "your", "suggestions", "be", "do", "I", "think", "we", "need", "n", "NUMBER", "k", "NUMBER", "review", "for", "this", "NUMBER", "poke", "mickaelandrieu", "n", "NUMBER", "k", "NUMBER", "On", "Windows", "it", "s", "the", "batchbin", "directory", "which", "contains", "casperjs", "NUMBER", "bat", "which", "needs", "to", "be", "add", "to", "the", "PATH", "not", "bin", "NUMBER", "Indeed", "things", "have", "change", "in", "NUMBER", "beta", "NUMBER", "But", "as", "the", "current", "last", "stable", "version", "be", "still", "use", "the", "old", "path", "it", "be", "necessary", "to", "give", "it", "as", "following", "the", "current", "instructions", "with", "the", "stable", "version", "doesn", "t", "work", "NUMBER", "I", "have", "provide", "an", "update", "version", "which", "lists", "both", "options", "NUMBER", "This", "can", "be", "change", "again", "once", "the", "stable", "version", "uses", "the", "new", "path", "NUMBER", "Details", "was", "write", "as", "deatils", "I", "know", "it", "s", "trivial", "but", "here", "it", "be", "NUMBER", "I", "have", "no", "idea", "why", "the", "Github", "Markdown", "engine", "do", "not", "parse", "the", "link", "NUMBER", "I", "tried", "with", "other", "engines", "the", "link", "works", "NUMBER", "All", "in", "all", "it", "s", "important", "to", "at", "least", "note", "this", "it", "took", "me", "a", "while", "to", "figure", "it", "out", "myself", "NUMBER", "I", "have", "add", "a", "minimal", "example", "NUMBER", "Added", "windows", "specific", "workaround", "for", "systems", "with", "both", "integrated", "and", "discrete", "graphics", "linked", "with", "NUMBER", "This", "fix", "NUMBER", "I", "suspect", "we", "don", "t", "really", "want", "to", "search", "up", "to", "the", "fs", "root", "for", "security", "reason", "NUMBER", "That", "s", "what", "node", "NUMBER", "js", "do", "LINK", "modules_loading_from_node_modules_folders", "I", "m", "trying", "to", "understand", "why", "the", "test", "fail", "on", "Travis", "NUMBER", "I", "fix", "the", "test", "NUMBER", "I", "ll", "try", "to", "write", "a", "test", "NUMBER", "I", "m", "currently", "on", "Windows", "and", "it", "seems", "the", "test", "do", "not", "work", "on", "this", "platform", "be", "it", "a", "know", "issue", "Many", "failures", "trying", "to", "use", "SIGALRM", "like", "that", "ERROR", "test_help", "__main__", "NUMBER", "BasicCommandsTest", "Traceback", "most", "recent", "call", "last", "File", "test", "clitests", "runtests", "NUMBER", "py", "line", "NUMBER", "in", "f", "NUMBER", "old_handler", "signal", "NUMBER", "signal", "signal", "NUMBER", "SIGALRM", "timeout_handler", "AttributeError", "module", "object", "has", "no", "attribute", "SIGALRM", "then", "these", "error", "ERROR", "test_xunit_report_failing", "__main__", "NUMBER", "XUnitReportTest", "Traceback", "most", "recent", "call", "last", "File", "test", "clitests", "runtests", "NUMBER", "py", "line", "NUMBER", "in", "test_xunit_report_failing", "self", "NUMBER", "runCommand", "command", "fail", "True", "File", "test", "clitests", "runtests", "NUMBER", "py", "line", "NUMBER", "in", "runCommand", "return", "subprocess", "NUMBER", "check_output", "cmd_args", "NUMBER", "rip", "NUMBER", "decode", "utf", "NUMBER", "File", "c", "Python", "NUMBER", "lib", "subprocess", "NUMBER", "py", "line", "NUMBER", "in", "check_output", "process", "Popen", "stdout", "PIPE", "popenargs", "kwargs", "File", "c", "Python", "NUMBER", "lib", "subprocess", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "errread", "errwrite", "File", "c", "Python", "NUMBER", "lib", "subprocess", "NUMBER", "py", "line", "NUMBER", "in", "_execute_child", "startupinfo", "WindowsError", "Error", "NUMBER", "NUMBER", "be", "not", "a", "valid", "Win", "NUMBER", "application", "ERROR", "test_xunit_report_passing", "__main__", "NUMBER", "XUnitReportTest", "Traceback", "most", "recent", "call", "last", "File", "test", "clitests", "runtests", "NUMBER", "py", "line", "NUMBER", "in", "test_xunit_report_passing", "self", "NUMBER", "runCommand", "command", "fail", "False", "File", "test", "clitests", "runtests", "NUMBER", "py", "line", "NUMBER", "in", "runCommand", "return", "subprocess", "NUMBER", "check_output", "cmd_args", "NUMBER", "rip", "NUMBER", "decode", "utf", "NUMBER", "File", "c", "Python", "NUMBER", "lib", "subprocess", "NUMBER", "py", "line", "NUMBER", "in", "check_output", "process", "Popen", "stdout", "PIPE", "popenargs", "kwargs", "File", "c", "Python", "NUMBER", "lib", "subprocess", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "errread", "errwrite", "File", "c", "Python", "NUMBER", "lib", "subprocess", "NUMBER", "py", "line", "NUMBER", "in", "_execute_child", "startupinfo", "WindowsError", "Error", "NUMBER", "NUMBER", "be", "not", "a", "valid", "Win", "NUMBER", "application", "I", "m", "trying", "to", "setup", "a", "Linux", "VM", "to", "run", "the", "test", "NUMBER", "I", "implement", "one", "test", "NUMBER", "Hi", "We", "were", "in", "desperate", "need", "to", "test", "websocket", "xSockets", "v", "NUMBER", "functionality", "in", "the", "app", "were", "developing", "NUMBER", "For", "this", "we", "had", "to", "upgrade", "to", "the", "very", "new", "unstable", "release", "of", "phantomjs", "NUMBER", "Currently", "casperjs", "didn", "t", "allow", "us", "to", "start", "this", "new", "version", "NUMBER", "I", "have", "edit", "the", "bootstrap", "NUMBER", "js", "to", "allow", "phantomjs", "of", "version", "NUMBER", "x", "NUMBER", "I", "hope", "i", "have", "do", "it", "correctly", "my", "first", "PR", "any", "feedback", "be", "appreciated", "NUMBER", "I", "took", "a", "look", "at", "the", "yml", "file", "NUMBER", "I", "be", "not", "sure", "where", "to", "find", "the", "binaries", "of", "the", "new", "phantomJs", "version", "NUMBER", "I", "don", "t", "have", "access", "to", "phantoms", "google", "code", "to", "look", "there", "for", "the", "file", "and", "they", "aren", "t", "publish", "on", "their", "website", "yet", "NUMBER", "Only", "source", "code", "be", "available", "NUMBER", "Sounds", "reasonable", "NUMBER", "They", "have", "stated", "that", "they", "still", "have", "bug", "present", "and", "its", "not", "ready", "for", "public", "release", "but", "their", "master", "branch", "on", "github", "be", "v", "NUMBER", "I", "will", "try", "to", "do", "it", "as", "soon", "as", "it", "will", "be", "possible", "NUMBER", "If", "anyone", "needs", "to", "use", "phantom", "NUMBER", "with", "websockets", "like", "we", "did", "at", "least", "they", "can", "find", "the", "edit", "file", "here", "in", "the", "mean", "time", "NUMBER", "Sounds", "good", "NUMBER", "I", "ll", "try", "to", "do", "it", "tomorrow", "NUMBER", "Is", "it", "possible", "to", "add", "the", "checkin", "to", "this", "PR", "or", "must", "i", "submit", "a", "new", "PR", "I", "don", "t", "understand", "why", "the", "Travis", "build", "be", "fail", "with", "slimerJS", "NUMBER", "Any", "advice", "I", "made", "this", "change", "locally", "and", "get", "this", "Couldn", "t", "find", "nor", "compute", "phantom", "NUMBER", "casperPath", "exiting", "NUMBER", "any", "advice", "my", "guess", "be", "that", "you", "don", "t", "have", "your", "casperJS", "enviroment", "property", "set", "up", "correctly", "NUMBER", "Try", "to", "check", "that", "NUMBER", "Xenik", "NUMBER", "if", "I", "use", "just", "the", "current", "without", "this", "change", "it", "works", "if", "apply", "this", "stop", "work", "thx", "Oh", "damn", "there", "were", "two", "typo", "in", "that", "test", "NUMBER", "Now", "update", "NUMBER", "Allow", "to", "pass", "in", "a", "custom", "name", "to", "casper", "NUMBER", "test", "NUMBER", "fail", "which", "be", "use", "in", "the", "junit", "xml", "report", "NUMBER", "this", "NUMBER", "test", "NUMBER", "fail", "My", "custom", "failure", "message", "name", "My", "custom", "test", "case", "name", "will", "produce", "the", "following", "xml", "NUMBER", "xml", "TAG", "TAG", "TAG", "TAG", "TAG", "My", "custom", "failure", "message", "TAG", "TAG", "TAG", "TAG", "TAG", "What", "do", "you", "think", "about", "it", "guys", "best", "regards", "david", "Relevant", "to", "NUMBER", "and", "PR", "NUMBER", "mickaelandrieu", "be", "you", "ok", "with", "this", "_Update", "_", "It", "looks", "like", "_travis_", "be", "fail", "for", "other", "reasons", "NUMBER", "Any", "news", "on", "this", "mickaelandrieu", "i", "rebased", "to", "lastest", "master", "NUMBER", "Completed", "NUMBER", "Thanks", "for", "merge", "NUMBER", "beers", "Hi", "folks", "I", "ve", "begun", "use", "it", "to", "write", "acceptance", "test", "and", "its", "a", "much", "better", "tool", "for", "this", "purpose", "than", "all", "the", "others", "that", "I", "ve", "tried", "in", "JavaScript", "land", "NUMBER", "So", "thank", "you", "for", "CasperJS", "So", "from", "the", "standpoint", "of", "use", "CasperJS", "as", "a", "tool", "to", "write", "acceptance", "test", "I", "have", "find", "one", "area", "for", "improvement", "NUMBER", "The", "problem", "be", "that", "the", "methods", "for", "interacting", "with", "form", "and", "form", "elements", "require", "direct", "knowledge", "of", "the", "underlying", "html", "specifically", "the", "name", "attribute", "of", "the", "inputs", "NUMBER", "Since", "acceptance", "test", "be", "write", "from", "the", "standpoint", "of", "a", "non", "technical", "user", "and", "non", "technical", "users", "don", "t", "know", "anything", "about", "html", "css", "selectors", "etc", "associated", "label", "text", "be", "a", "better", "way", "of", "calling", "out", "form", "elements", "NUMBER", "This", "strategy", "also", "reduces", "the", "coupling", "between", "the", "acceptance", "test", "and", "the", "app", "promoting", "refactoring", "of", "the", "html", "and", "css", "NUMBER", "This", "branch", "be", "an", "attempt", "at", "add", "this", "behavior", "to", "CasperJS", "in", "the", "form", "of", "new", "fillLabels", "method", "NUMBER", "What", "do", "you", "guys", "think", "What", "do", "you", "guys", "think", "Any", "feedback", "on", "this", "thumbsup", "Thanks", "I", "ve", "be", "use", "it", "for", "the", "last", "month", "or", "so", "and", "its", "really", "improved", "the", "feel", "of", "our", "acceptance", "test", "NUMBER", "Thanks", "for", "the", "review", "mickaelandrieu", "n", "NUMBER", "k", "NUMBER", "let", "me", "know", "if", "there", "s", "anything", "additional", "I", "can", "do", "to", "help", "this", "get", "merge", "NUMBER", "mickaelandrieu", "Done", "NUMBER", "Thanks", "for", "stewarding", "this", "PR", "along", "Some", "basic", "CSS", "tweak", "to", "make", "the", "sidebar", "fix", "while", "the", "page", "scrolls", "NUMBER", "Looks", "ok", "in", "limited", "test", "Mac", "Chrome", "and", "Firefox", "NUMBER", "Would", "be", "nice", "to", "fix", "the", "header", "and", "maybe", "integrate", "it", "with", "the", "sidebar", "but", "that", "s", "a", "but", "much", "to", "tackle", "with", "no", "knowledge", "of", "Sphinx", "NUMBER", "p", "NUMBER", "s", "NUMBER", "this", "be", "my", "first", "pull", "request", "so", "hopefully", "I", "m", "doing", "everything", "correctly", "NUMBER", "Currently", "curTestSuiteNum", "be", "update", "for", "every", "file", "that", "be", "run", "restricting", "each", "file", "to", "one", "test", "suite", "per", "file", "NUMBER", "This", "was", "cause", "issue", "in", "file", "with", "multiple", "sets", "of", "test", "stepTimeout", "uses", "an", "id", "of", "TAG", "_", "TAG", "and", "stepTimeout", "stops", "polling", "if", "the", "id", "matches", "if", "a", "subsequent", "testSuite", "runs", "in", "the", "same", "file", "it", "will", "have", "the", "same", "testSuiteId", "cause", "potential", "misfires", "of", "stepTimeout", "This", "separates", "file", "count", "from", "test", "suite", "count", "eliminating", "the", "stepTimeout", "problem", "and", "allowing", "multiple", "testSuite", "s", "per", "file", "NUMBER", "mickaelandrieu", "hi", "there", "sorry", "for", "the", "delay", "NUMBER", "reply", "me", "to", "make", "sure", "i", "get", "the", "email", "notification", "NUMBER", "What", "do", "you", "mean", "by", "squash", "my", "commit", "I", "mean", "merge", "your", "commit", "into", "one", "NUMBER", "See", "LINK", "scm", "NUMBER", "com", "book", "en", "Git", "Tools", "Rewriting", "History", "Squashing", "Commits", "let", "me", "know", "if", "you", "need", "help", "mickaelandrieu", "closing", "this", "PR", "and", "opened", "a", "squashed", "version", "here", "LINK", "had", "a", "little", "bit", "of", "trouble", "w", "the", "rebasing", "but", "I", "think", "i", "figured", "it", "out", "NUMBER", "let", "me", "know", "if", "you", "see", "issue", "history", "NUMBER", "js", "test", "the", "back", "method", "isn", "t", "enough", "Wow", "Such", "amazing", "dancer", "I", "can", "finish", "this", "if", "you", "don", "t", "have", "time", "for", "reload", "forward", "methods", "NUMBER", "Bon", "y", "a", "pas", "de", "test", "d\u00e9di\u00e9", "au", "lancement", "fail", "fast", "qui", "pr\u00e9serve", "les", "listeners", "fail", "des", "test", "utilisateurs", "mais", "on", "a", "valid\u00e9", "avec", "mickaelandrieu", "que", "\u00e7a", "roule", "et", "casperjs", "selftest", "est", "green", "aussi", "smile", "maybe", "in", "fail", "fast", "test", "suite", "Need", "a", "hit", "to", "finish", "this", "if", "needed", "Finally", "get", "around", "to", "add", "the", "test", "NUMBER", "How", "do", "that", "scan", "Best", "One", "solution", "for", "ref", "NUMBER", "local", "selftest", "Okay", "NUMBER", "_Edit_", "Where", "do", "I", "define", "textContent", "NUMBER", "Thank", "you", "for", "this", "first", "step", "sounds", "good", "to", "me", "NUMBER", "Would", "you", "mind", "to", "fix", "some", "lint", "issue", "You", "can", "check", "travis", "report", "to", "help", "you", "NUMBER", "Regards", "Done", "NUMBER", "for", "me", "NUMBER", "ping", "n", "NUMBER", "k", "NUMBER", "for", "review", "Can", "you", "squash", "your", "commit", "Good", "job", "Squashed", "NUMBER", "thank", "you", "n", "NUMBER", "k", "NUMBER", "can", "I", "merge", "it", "I", "will", "add", "docs", "It", "doesn", "t", "manage", "some", "useful", "error", "Timeout", "for", "wait", "family", "NUMBER", "I", "ll", "look", "at", "it", "again", "NUMBER", "Assert", "error", "LINK", "Wait", "timeout", "LINK", "js", "Take", "a", "screenshot", "and", "send", "it", "on", "jenkins", "workspace", "when", "a", "test", "fail", "if", "xunit", "option", "be", "set", "if", "casper", "NUMBER", "cli", "NUMBER", "get", "xunit", "var", "screenCount", "NUMBER", "fileName", "require", "system", "NUMBER", "args", "NUMBER", "get", "back", "only", "fileName", "if", "needed", "not", "the", "complete", "path", "if", "fileName", "NUMBER", "indexOf", "NUMBER", "fileName", "fileName", "NUMBER", "split", "fileName", "fileName", "fileName", "NUMBER", "length", "NUMBER", "get", "fileName", "we", "delete", "NUMBER", "js", "fileName", "fileName", "NUMBER", "substring", "NUMBER", "fileName", "NUMBER", "length", "NUMBER", "get", "back", "the", "job", "name", "xunit", "var", "lib", "jenkins", "jobs", "jobName", "workspace", "logs", "j", "NUMBER", "NUMBER", "xml", "var", "job", "casper", "NUMBER", "cli", "NUMBER", "get", "xunit", "NUMBER", "split", "NUMBER", "console", "NUMBER", "log", "job", "event", "onFail", "casper", "NUMBER", "test", "NUMBER", "on", "fail", "function", "failure", "save", "screenshot", "in", "adequate", "workspace", "var", "capture", "var", "lib", "jenkins", "jobs", "job", "workspace", "screenshots", "fileName", "Fail", "screenCount", "NUMBER", "png", "casper", "NUMBER", "capture", "capture", "failure", "type", "assert", "or", "fail", "if", "failure", "NUMBER", "type", "NUMBER", "indexOf", "assert", "NUMBER", "failure", "NUMBER", "type", "fail", "failure", "NUMBER", "description", "Message", "failure", "NUMBER", "message", "nLine", "failure", "NUMBER", "line", "nCode", "failure", "NUMBER", "lineContents", "nScreen", "LINK", "jenkins", "job", "job", "lastFailedBuild", "artifact", "screenshots", "fileName", "Fail", "screenCount", "NUMBER", "png", "nUrl", "casper", "NUMBER", "getCurrentUrl", "failure", "type", "uncaught", "else", "if", "failure", "NUMBER", "type", "uncaughtError", "timeout", "error", "for", "wait", "function", "if", "failure", "NUMBER", "values", "NUMBER", "error", "NUMBER", "name", "TimedOutError", "failure", "NUMBER", "description", "Message", "failure", "NUMBER", "message", "nCode", "wait", "timeout", "nScreen", "LINK", "jenkins", "job", "job", "lastFailedBuild", "artifact", "screenshots", "fileName", "Fail", "screenCount", "NUMBER", "png", "nUrl", "casper", "NUMBER", "getCurrentUrl", "screenCount", "Chances", "ar", "high", "that", "this", "NUMBER", "textContent", "refers", "to", "nothing", "here", "NUMBER", "What", "must", "be", "do", "here", "Deleted", "I", "forgot", "why", "I", "ve", "add", "that", "NUMBER", "And", "do", "you", "want", "to", "split", "the", "lines", "in", "NUMBER", "Up", "NUMBER", "Fixes", "the", "captureSelector", "method", "not", "be", "aware", "of", "the", "WebPage", "NUMBER", "zoomFactor", "feature", "introduce", "in", "PhantomJS", "NUMBER", "and", "support", "since", "NUMBER", "Previously", "captureSelector", "fail", "to", "scale", "a", "capture", "region", "s", "coordinates", "to", "match", "the", "zoom", "factor", "resulting", "in", "incorrect", "screenshots", "NUMBER", "Fixes", "NUMBER", "Changes", "Check", "for", "casper", "NUMBER", "page", "NUMBER", "zoomFactor", "when", "get", "element", "bounds", "and", "scale", "the", "clipRect", "accordingly", "Add", "test", "Notes", "Also", "fix", "a", "statement", "that", "assigned", "Casper", "NUMBER", "prototype", "NUMBER", "getElementsBounds", "function", "getElementBounds", "selector", "the", "right", "side", "name", "not", "matching", "the", "plural", "Elements", "NUMBER", "Nice", "contribution", "I", "like", "it", "ping", "n", "NUMBER", "k", "NUMBER", "we", "need", "this", "Tommorow", "I", "will", "document", "this", "too", "edit", "NUMBER", "NUMBER", "NUMBER", "already", "documented", "here", "LINK", "zoom", "zoom", "I", "m", "glad", "I", "could", "help", "NUMBER", "Thanks", "all", "round", "As", "Jeremy", "Forveille", "has", "confirmed", "to", "me", "the", "logo", "has", "be", "open", "sourced", "and", "release", "to", "me", "some", "source", "file", "to", "help", "me", "print", "some", "t", "shirt", "I", "think", "it", "s", "time", "to", "release", "these", "file", "to", "allow", "anyone", "to", "use", "them", "according", "to", "the", "MIT", "licence", "These", "assets", "be", "under", "MIT", "licence", "should", "we", "have", "to", "apply", "a", "more", "specific", "licence", "This", "be", "now", "good", "Can", "you", "help", "me", "to", "write", "a", "test", "case", "for", "this", "Hi", "mucsi", "NUMBER", "thanks", "for", "your", "contribution", "NUMBER", "Maybe", "this", "test", "can", "help", "you", "LINK", "L", "NUMBER", "Hi", "when", "a", "test", "fail", "I", "take", "a", "screenshot", "and", "add", "some", "debug", "info", "to", "failure", "NUMBER", "message", "casper", "NUMBER", "test", "NUMBER", "on", "fail", "function", "failure", "use", "strict", "var", "capturefile", "report", "casper", "failure", "NUMBER", "suite", "NUMBER", "failure", "NUMBER", "line", "NUMBER", "png", "page", "Page", "casper", "NUMBER", "getCurrentUrl", "screenshot", "Screenshot", "export", "NUMBER", "siteUrl", "test", "capturefile", "message", "Console", "n", "remoteMessages", "NUMBER", "join", "n", "failure", "NUMBER", "message", "failure", "NUMBER", "message", "failure", "NUMBER", "message", "failure", "NUMBER", "andard", "n", "page", "screenshot", "message", "NUMBER", "join", "n", "casper", "NUMBER", "capture", "capturefile", "the", "problem", "be", "the", "testcase", "will", "contain", "all", "this", "debug", "information", "NUMBER", "All", "I", "want", "be", "have", "it", "in", "the", "failure", "node", "NUMBER", "Thanks", "NUMBER", "Hi", "please", "correct", "the", "test", "NUMBER", "Regards", "provide", "a", "cli", "argument", "for", "config", "NUMBER", "json", "file", "parse", "argument", "options", "from", "config", "NUMBER", "json", "ensure", "config", "NUMBER", "json", "be", "valid", "and", "can", "be", "required", "ensure", "args", "opts", "be", "stored", "back", "in", "phantom", "NUMBER", "casperArgs", "NUMBER", "raw", "fix", "NUMBER", "a", "config", "NUMBER", "json", "can", "look", "like", "json", "include", "inc", "NUMBER", "js", "inc", "NUMBER", "js", "log", "level", "debug", "paths", "test", "NUMBER", "js", "sub", "NUMBER", "post", "post", "NUMBER", "js", "post", "NUMBER", "js", "pre", "pre", "NUMBER", "js", "pre", "NUMBER", "js", "verbose", "true", "xunit", "results", "NUMBER", "xml", "test", "can", "be", "run", "use", "casperjs", "test", "NUMBER", "config", "NUMBER", "json", "note", "that", "the", "config", "file", "be", "not", "a", "key", "word", "argument", "since", "there", "be", "no", "additional", "argument", "that", "you", "need", "to", "pass", "into", "the", "cli", "if", "you", "provide", "a", "config", "NUMBER", "json", "NUMBER", "mickaelandrieu", "n", "NUMBER", "k", "NUMBER", "can", "you", "please", "review", "this", "and", "let", "me", "know", "if", "everything", "be", "fine", "NUMBER", "_P", "NUMBER", "S", "I", "can", "add", "test", "if", "you", "think", "the", "patch", "looks", "good", "NUMBER", "_", "Hi", "please", "add", "test", "I", "ll", "review", "this", "tomorrow", "NUMBER", "You", "re", "on", "fire", "NUMBER", "i", "m", "add", "test", "probably", "will", "be", "do", "by", "tomorrow", "NUMBER", "Ok", "can", "t", "wait", "for", "it", "NUMBER", "poke", "r", "NUMBER", "k", "mickaelandrieu", "push", "these", "today", "NUMBER", "beers", "poke", "r", "NUMBER", "k", "I", "m", "on", "fire", "mickaelandrieu", "sorry", "for", "the", "delay", "i", "was", "unwell", "NUMBER", "now", "fix", "couple", "of", "test", "which", "be", "fail", "NUMBER", "will", "certainly", "fix", "and", "push", "these", "by", "today", "NUMBER", "pb", "take", "your", "time", "in", "fact", "I", "can", "t", "wait", "to", "test", "this", "new", "feature", "D", "mickaelandrieu", "how", "do", "this", "look", "now", "violin", "r", "NUMBER", "k", "only", "need", "a", "squash", "and", "to", "be", "review", "by", "n", "NUMBER", "k", "NUMBER", "to", "be", "merge", "in", "master", "NUMBER", "Thanks", "a", "lot", "it", "s", "a", "nice", "feature", "NUMBER", "mickaelandrieu", "i", "think", "that", "commit", "be", "a", "dangling", "one", "NUMBER", "i", "can", "t", "find", "it", "to", "squash", "it", "NUMBER", "i", "see", "only", "one", "way", "left", "now", "NUMBER", "do", "you", "want", "me", "to", "close", "this", "pull", "req", "and", "submit", "a", "new", "one", "with", "the", "change", "nope", "let", "s", "wait", "for", "n", "NUMBER", "k", "NUMBER", "review", "ping", "mickaelandrieu", "I", "can", "t", "merge", "without", "n", "NUMBER", "k", "NUMBER", "agreement", "poke", "n", "NUMBER", "k", "NUMBER", "oh", "yea", "that", "was", "a", "typo", "ping", "NUMBER", "smile", "ping", "n", "NUMBER", "k", "NUMBER", "flags", "I", "can", "carry", "on", "the", "docs", "trust", "me", "n", "NUMBER", "k", "NUMBER", "mickaelandrieu", "many", "thanks", "for", "the", "review", "NUMBER", "i", "will", "address", "the", "nitpicks", "and", "push", "the", "change", "NUMBER", "smile", "be", "reorganizing", "the", "code", "a", "bit", "per", "n", "NUMBER", "k", "NUMBER", "s", "review", "comments", "NUMBER", "taking", "a", "bit", "longer", "than", "usual", "NUMBER", "r", "NUMBER", "k", "ok", "I", "ll", "document", "this", "when", "the", "PR", "will", "be", "merge", "mickaelandrieu", "just", "be", "busy", "and", "couldn", "t", "push", "my", "change", "NUMBER", "i", "ll", "be", "push", "them", "today", "NUMBER", "be", "ready", "for", "it", "smile", "I", "ll", "review", "this", "soon", "ty", "r", "NUMBER", "k", "fix", "casper", "NUMBER", "test", "NUMBER", "on", "NUMBER", "pass", "to", "casper", "NUMBER", "test", "NUMBER", "on", "NUMBER", "success", "fix", "NUMBER", "mickaelandrieu", "n", "NUMBER", "k", "NUMBER", "can", "you", "please", "review", "this", "and", "let", "me", "know", "if", "everything", "be", "fine", "NUMBER", "Thanks", "Hum", "NUMBER", "still", "not", "update", "LINK", "beta", "NUMBER", "modules", "tester", "NUMBER", "html", "getfailures", "See", "the", "Note", "below", "TAG", "getFailures", "TAG", "In", "CasperJS", "NUMBER", "you", "can", "store", "test", "successes", "by", "recording", "them", "listening", "to", "the", "tester", "TAG", "pass", "TAG", "event", "should", "be", "test", "failures", "and", "fail", "event", "And", "for", "test", "NUMBER", "success", "below", "TAG", "getPasses", "TAG", "It", "should", "be", "success", "x", "NUMBER", "instead", "of", "pass", "NUMBER", "entry", "already", "contains", "an", "absolute", "path", "NUMBER", "The", "path", "that", "be", "constructed", "be", "strange", "and", "unusual", "NUMBER", "This", "causes", "issue", "on", "Windows", "with", "TrifleJS", "WIP", "NUMBER", "I", "really", "want", "to", "see", "TrifleJS", "support", "on", "casperJs", "what", "do", "you", "think", "n", "NUMBER", "k", "NUMBER", "I", "m", "note", "sure", "of", "the", "impact", "of", "this", "suggest", "NUMBER", "n", "NUMBER", "k", "NUMBER", "this", "don", "t", "broke", "actual", "test", "any", "suggests", "for", "untested", "cases", "I", "will", "check", "for", "actual", "test", "tonight", "NUMBER", "It", "ll", "be", "a", "long", "time", "before", "TrifleJS", "actually", "happens", "NUMBER", "I", "ve", "spent", "three", "work", "days", "so", "far", "trying", "to", "make", "it", "play", "nicely", "with", "CasperJS", "but", "it", "s", "slow", "going", "NUMBER", "Only", "about", "NUMBER", "of", "the", "test", "pass", "when", "run", "selftest", "with", "this", "pull", "request", "because", "of", "lack", "of", "support", "for", "the", "proper", "APIs", "NUMBER", "For", "instance", "document", "NUMBER", "createElement", "be", "not", "implement", "NUMBER", "In", "Phantom", "and", "Slimer", "this", "exists", "because", "you", "re", "run", "in", "what", "s", "essentially", "a", "browser", "context", "at", "all", "times", "NUMBER", "TrifleJS", "be", "not", "a", "browser", "context", "with", "APIs", "to", "control", "the", "browser", "it", "s", "a", "JavaScript", "engine", "V", "NUMBER", "with", "some", "very", "thin", "APIs", "to", "control", "a", "separate", "browser", "instance", "NUMBER", "This", "means", "that", "there", "s", "no", "concept", "of", "DOM", "XHR", "etc", "NUMBER", "implement", "in", "TrifleJS", "so", "far", "NUMBER", "And", "of", "course", "you", "can", "t", "just", "expose", "NUMBER", "Net", "s", "HtmlDocument", "class", "since", "all", "of", "the", "member", "names", "AreCapitalized", "and", "MSXML", "s", "DOM", "class", "while", "having", "the", "correct", "capitalization", "on", "names", "only", "support", "XML", "NUMBER", "The", "library", "that", "Trifle", "uses", "to", "embed", "V", "NUMBER", "be", "pretty", "unfriendly", "too", "NUMBER", "It", "doesn", "t", "let", "you", "pass", "function", "or", "closures", "into", "the", "JS", "context", "which", "means", "require", "has", "to", "be", "implement", "completely", "in", "JS", "NUMBER", "As", "for", "the", "code", "in", "this", "pull", "request", "you", "can", "see", "that", "the", "entries", "NUMBER", "map", "call", "already", "outputs", "the", "absolute", "paths", "of", "each", "of", "the", "file", "NUMBER", "The", "reason", "the", "test", "weren", "t", "currently", "fail", "be", "the", "way", "JS", "file", "be", "test", "looking", "at", "the", "extension", "without", "accessing", "the", "actual", "file", "NUMBER", "The", "current", "code", "generates", "paths", "like", "this", "Users", "mbasta", "src", "test", "Users", "mbasta", "src", "test", "foo", "NUMBER", "js", "NUMBER", "TrifleJS", "actually", "do", "a", "lookup", "when", "you", "use", "the", "path", "function", "in", "fs", "probably", "not", "the", "best", "which", "causes", "it", "to", "fail", "NUMBER", "n", "NUMBER", "k", "NUMBER", "fs", "function", "be", "very", "well", "test", "LINK", "Did", "you", "see", "another", "use", "case", "Using", "os", "NUMBER", "exec", "on", "Windows", "causes", "the", "process", "to", "fork", "into", "the", "background", "meaning", "that", "a", "command", "line", "environment", "run", "casperjs", "will", "not", "be", "able", "to", "read", "the", "return", "code", "or", "easily", "detect", "when", "the", "script", "has", "finished", "execution", "NUMBER", "subprocess", "NUMBER", "call", "provides", "better", "cross", "platform", "compatibility", "and", "fix", "the", "problem", "easily", "NUMBER", "I", "was", "having", "issue", "integrating", "casperjs", "with", "my", "Windows", "based", "test", "environment", "because", "run", "casperjs", "would", "seem", "to", "return", "immediately", "forking", "the", "main", "phantom", "process", "to", "the", "background", "NUMBER", "This", "simple", "change", "fix", "the", "issue", "for", "me", "and", "I", "imagine", "it", "will", "be", "useful", "for", "others", "NUMBER", "I", "m", "not", "readily", "able", "to", "test", "on", "other", "platforms", "but", "from", "what", "I", "ve", "read", "about", "subprocess", "NUMBER", "call", "I", "don", "t", "think", "there", "should", "be", "any", "issue", "NUMBER", "ping", "n", "NUMBER", "k", "NUMBER", "for", "me", "it", "s", "NUMBER", "NUMBER", "at", "least", "for", "windows", "run", "casperjs", "on", "windows", "be", "the", "same", "as", "run", "a", "process", "in", "the", "background", "it", "do", "not", "wait", "for", "the", "end", "of", "the", "process", "and", "the", "output", "be", "a", "bit", "unreadable", "Hm", "i", "just", "find", "out", "subprocess", "NUMBER", "call", "do", "the", "exact", "same", "thing", "background", "like", "process", "it", "must", "have", "something", "to", "do", "with", "the", "way", "i", "install", "casperjs", "via", "npm", "I", "ll", "keep", "test", "ok", "if", "you", "replace", "the", "contents", "of", "the", "install", "by", "npm", "file", "casperjs", "NUMBER", "cmd", "IF", "EXIST", "dp", "NUMBER", "python", "NUMBER", "exe", "dp", "NUMBER", "python", "NUMBER", "exe", "dp", "NUMBER", "node_modules", "casperjs", "bin", "casperjs", "ELSE", "python", "dp", "NUMBER", "node_modules", "casperjs", "bin", "casperjs", "with", "ECHO", "OFF", "call", "dp", "NUMBER", "node_modules", "casperjs", "batchbin", "casperjs", "NUMBER", "bat", "It", "doesn", "t", "go", "in", "the", "background", "anymore", "and", "i", "m", "guessing", "you", "don", "t", "have", "to", "install", "python", "i", "ve", "read", "somewhere", "that", "it", "s", "embedded", "in", "the", "casperjs", "folder", "NUMBER", "But", "has", "it", "be", "deprecate", "n", "NUMBER", "k", "NUMBER", "help", "Pending", "enhancement", "request", "NUMBER", "Updated", "docs", "reflect", "usage", "NUMBER", "Basically", "a", "user", "will", "provide", "an", "array", "of", "values", "for", "multiselect", "to", "compare", "against", "the", "select", "options", "NUMBER", "All", "matching", "values", "would", "be", "set", "to", "true", "and", "the", "rest", "to", "false", "NUMBER", "Working", "on", "test", "NUMBER", "Sorry", "for", "the", "premature", "PR", "NUMBER", "Will", "rebase", "once", "do", "NUMBER", "Thanks", "NUMBER", "Hi", "food", "for", "me", "NUMBER", "ping", "n", "NUMBER", "k", "NUMBER", "mickaelandrieu", "Quick", "question", "for", "you", "how", "to", "console", "NUMBER", "log", "in", "test", "clientutils", "have", "a", "log", "method", "defined", "but", "I", "didn", "t", "have", "much", "success", "use", "it", "NUMBER", "Is", "stdout", "be", "redirected", "by", "casper", "kbdaitch", "maybe", "you", "just", "need", "to", "use", "casper", "NUMBER", "echo", "LINK", "L", "NUMBER", "If", "you", "need", "more", "please", "ask", "for", "help", "on", "the", "casperjs", "mailing", "list", "mickaelandrieu", "Thanks", "NUMBER", "Actually", "the", "issue", "was", "with", "evaluate", "NUMBER", "I", "need", "to", "remember", "use", "casper", "NUMBER", "on", "remote", "NUMBER", "message", "Anyhow", "I", "have", "add", "test", "and", "they", "be", "passing", "NUMBER", "jshint", "still", "returns", "cyclomatic", "complexity", "of", "NUMBER", "for", "the", "clientutils", "NUMBER", "getFieldValue", "NUMBER", "I", "would", "welcome", "any", "suggestions", "to", "improve", "it", "NUMBER", "I", "be", "currently", "checking", "for", "type", "to", "detect", "select", "multiple", "as", "oppose", "to", "getAttribute", "type", "which", "returns", "null", "for", "such", "elements", "as", "per", "spec", "NUMBER", "Sounds", "good", "n", "NUMBER", "k", "NUMBER", "I", "be", "kinda", "new", "to", "idiomatic", "JS", "will", "address", "the", "nits", "NUMBER", "Happy", "to", "make", "a", "PR", "NUMBER", "n", "NUMBER", "k", "NUMBER", "I", "made", "suggested", "change", "as", "well", "as", "rebased", "NUMBER", "Let", "me", "know", "if", "anything", "remains", "NUMBER", "When", "checking", "for", "visibility", "style", "NUMBER", "display", "be", "checked", "to", "match", "inline", "NUMBER", "Added", "a", "check", "for", "inline", "block", "NUMBER", "Added", "Apologies", "for", "miss", "the", "test", "the", "first", "time", "around", "NUMBER", "I", "m", "having", "some", "issue", "rebasing", "since", "I", "already", "push", "the", "prior", "change", "NUMBER", "Would", "you", "recommend", "doing", "a", "force", "push", "in", "this", "instance", "Ok", "that", "s", "what", "I", "figured", "but", "wanted", "to", "run", "it", "by", "you", "first", "NUMBER", "Force", "push", "Adding", "quotations", "around", "the", "file", "path", "to", "allow", "whitespace", "in", "the", "path", "for", "the", "bootstrap", "NUMBER", "js", "file", "pass", "to", "the", "execution", "engine", "and", "the", "CASPER_PATH", "argument", "NUMBER", "My", "only", "issue", "with", "this", "be", "that", "it", "no", "longer", "works", "on", "Unix", "based", "systems", "because", "the", "backslash", "be", "hard", "code", "in", "NUMBER", "Changing", "the", "first", "line", "to", "this", "fix", "that", "problem", "Path", "NUMBER", "Combine", "Path", "NUMBER", "Combine", "CASPER_PATH", "bin", "bootstrap", "NUMBER", "js", "n", "NUMBER", "k", "NUMBER", "Is", "there", "any", "reason", "why", "Travis", "isn", "t", "test", "pull", "request", "anymore", "hexid", "Sorry", "about", "that", "Not", "use", "to", "considering", "both", "OSes", "NUMBER", "I", "just", "push", "a", "new", "commit", "that", "should", "take", "out", "the", "hard", "code", "separator", "NUMBER", "Closing", "Reopening", "to", "trigger", "a", "Travis", "build", "NUMBER", "It", "looks", "as", "though", "the", "issue", "be", "that", "we", "be", "compile", "with", "dotNET", "NUMBER", "which", "do", "not", "have", "support", "for", "Path", "NUMBER", "Combine", "String", "String", "String", "Here", "be", "the", "workaround", "that", "I", "have", "be", "use", "Path", "NUMBER", "Combine", "Path", "NUMBER", "Combine", "str", "NUMBER", "str", "NUMBER", "str", "NUMBER", "By", "taking", "this", "approach", "we", "don", "t", "need", "to", "require", "dotNET", "NUMBER", "which", "be", "only", "shipped", "by", "default", "with", "Windows", "NUMBER", "Fair", "enough", "wasn", "t", "aware", "of", "that", "NUMBER", "Looks", "like", "that", "fix", "the", "build", "NUMBER", "Awesome", "NUMBER", "Thanks", "Add", "an", "event", "emit", "for", "clicking", "passing", "the", "selector", "NUMBER", "Added", "a", "test", "for", "the", "click", "emit", "NUMBER", "I", "m", "not", "sure", "what", "docs", "to", "change", "It", "looks", "like", "there", "be", "already", "documentation", "for", "the", "click", "event", "NUMBER", "I", "find", "the", "docs", "first", "and", "when", "I", "tried", "to", "use", "the", "event", "I", "realized", "it", "wasn", "t", "be", "emit", "ed", "NUMBER", "If", "you", "could", "point", "me", "to", "the", "docs", "to", "change", "I", "d", "be", "happy", "to", "update", "them", "NUMBER", "variable", "username", "and", "password", "be", "always", "empty", "var", "username", "password", "httpAuthMatch", "location", "NUMBER", "match", "https", "NUMBER", "NUMBER", "i", "So", "event", "http", "NUMBER", "auth", "always", "pass", "empty", "values", "NUMBER", "NUMBER", "ping", "n", "NUMBER", "k", "NUMBER", "I", "would", "like", "to", "make", "a", "unit", "test", "for", "that", "but", "get", "a", "leak", "regard", "casperjs", "unit", "test", "should", "be", "great", "if", "i", "can", "speak", "to", "somebody", "in", "french", "in", "particular", "montpellier", "what", "did", "you", "think", "n", "NUMBER", "k", "NUMBER", "can", "i", "merge", "it", "poke", "n", "NUMBER", "k", "NUMBER", "coffee", "this", "completely", "fix", "NUMBER", "NUMBER", "by", "taking", "into", "account", "the", "fact", "that", "content", "type", "can", "also", "contain", "charset", "values", "apart", "from", "the", "content", "type", "itself", "NUMBER", "n", "NUMBER", "k", "NUMBER", "mickaelandrieu", "your", "thoughts", "on", "this", "please", "n", "NUMBER", "k", "NUMBER", "thank", "you", "for", "politely", "ask", "me", "to", "correct", "my", "commit", "message", "i", "wont", "submit", "a", "half", "baked", "pull", "request", "again", "smile", "travis", "thinks", "the", "pull", "request", "be", "green_heart", "now", "NUMBER", "n", "NUMBER", "k", "NUMBER", "Can", "You", "please", "close", "all", "relate", "issue", "too", "good", "to", "see", "you", "home", "I", "couldn", "t", "find", "a", "place", "to", "find", "this", "info", "except", "in", "SlimerJS", "docs", "NUMBER", "Maybe", "a", "page", "dedicated", "to", "use", "SlimerJS", "with", "CasperJS", "would", "be", "nice", "I", "could", "try", "an", "humble", "start", "in", "this", "direction", "NUMBER", "NUMBER", "Ran", "into", "this", "as", "well", "NUMBER", "Use", "JSON", "NUMBER", "ringify", "for", "encoding", "the", "request", "body", "when", "Content", "Type", "be", "application", "json", "NUMBER", "This", "should", "fix", "NUMBER", "I", "ve", "run", "casperjs", "selftest", "and", "everything", "be", "green", "Hi", "sqren", "Can", "you", "please", "add", "a", "test", "for", "your", "specific", "case", "Regards", "Added", "a", "test", "NUMBER", "For", "me", "NUMBER", "when", "you", "will", "fix", "some", "typo", "NUMBER", "Let", "s", "wait", "n", "NUMBER", "k", "NUMBER", "review", "Thanks", "for", "the", "comments", "NUMBER", "I", "ve", "fix", "the", "style", "issue", "and", "squashed", "everything", "into", "a", "single", "commit", "NUMBER", "The", "most", "important", "thing", "be", "that", "we", "don", "t", "run", "qs", "NUMBER", "encode", "on", "the", "body", "if", "the", "Content", "Type", "be", "application", "json", "NUMBER", "I", "m", "not", "sure", "why", "someone", "would", "want", "to", "send", "data", "with", "a", "Content", "Type", "of", "application", "json", "but", "not", "encode", "with", "JSON", "NUMBER", "ringify", "which", "be", "why", "I", "think", "it", "makes", "sense", "to", "add", "it", "NUMBER", "In", "fact", "I", "use", "Cygwin", "but", "didn", "t", "want", "to", "clutter", "the", "instructions", "with", "a", "new", "section", "I", "can", "do", "it", "if", "needed", "NUMBER", "These", "be", "some", "ideas", "of", "additions", "not", "sure", "I", "understood", "the", "bin", "vs", "batchbin", "thing", "NUMBER", "Apparent", "docs", "typo", "NUMBER", "Currently", "casperjs", "do", "not", "handle", "closing", "a", "page", "and", "creating", "a", "new", "page", "object", "NUMBER", "If", "user", "do", "a", "casper", "NUMBER", "page", "NUMBER", "close", "there", "be", "no", "option", "to", "create", "a", "new", "page", "object", "NUMBER", "With", "this", "change", "we", "can", "use", "a", "casper", "NUMBER", "page", "casper", "NUMBER", "newPage", "Ya", "I", "don", "t", "think", "this", "be", "quite", "all", "the", "way", "there", "or", "I", "m", "possibly", "use", "it", "wrong", "NUMBER", "I", "just", "integrated", "this", "into", "NUMBER", "beta", "NUMBER", "as", "a", "test", "with", "the", "code", "from", "NUMBER", "and", "get", "this", "error", "Error", "cannot", "access", "member", "customHeaders", "of", "delete", "QObject", "ilangv", "Digging", "a", "little", "deeper", "and", "looking", "at", "casper", "NUMBER", "art", "it", "looks", "like", "there", "be", "some", "additional", "initialization", "that", "must", "happen", "on", "the", "page", "object", "after", "it", "be", "created", "NUMBER", "However", "even", "after", "bringing", "everything", "relevant", "to", "page", "initialization", "into", "the", "newPage", "function", "it", "still", "doesn", "t", "want", "to", "cooperate", "NUMBER", "ilangv", "I", "take", "that", "back", "I", "messed", "up", "my", "test", "structure", "different", "function", "prototypes", "between", "thenOpen", "and", "open", "but", "there", "be", "still", "a", "couple", "things", "required", "in", "newPage", "NUMBER", "I", "get", "it", "to", "work", "as", "I", "want", "use", "var", "links", "LINK", "LINK", "var", "casper", "require", "casper", "NUMBER", "create", "logging", "error", "pageSettings", "webSecurityEnabled", "false", "casper", "NUMBER", "art", "LINK", "function", "this", "NUMBER", "echo", "this", "NUMBER", "getTitle", "casper", "NUMBER", "eachThen", "links", "function", "item", "var", "url", "item", "NUMBER", "data", "this", "NUMBER", "open", "url", "NUMBER", "en", "function", "this", "NUMBER", "echo", "this", "NUMBER", "getTitle", "NUMBER", "en", "function", "casper", "NUMBER", "page", "NUMBER", "close", "casper", "NUMBER", "newPage", "casper", "NUMBER", "run", "function", "this", "NUMBER", "echo", "Done", "casper", "NUMBER", "exit", "combined", "with", "this", "obviously", "a", "copy", "paste", "but", "a", "simple", "extract", "method", "refactoring", "should", "take", "care", "of", "it", "Casper", "NUMBER", "prototype", "NUMBER", "newPage", "function", "newPage", "use", "strict", "this", "NUMBER", "checkStarted", "copied", "from", "casper", "NUMBER", "art", "this", "NUMBER", "page", "this", "NUMBER", "mainPage", "createPage", "this", "this", "NUMBER", "page", "NUMBER", "settings", "utils", "NUMBER", "mergeObjects", "this", "NUMBER", "page", "NUMBER", "settings", "this", "NUMBER", "options", "NUMBER", "pageSettings", "if", "utils", "NUMBER", "isClipRect", "this", "NUMBER", "options", "NUMBER", "clipRect", "this", "NUMBER", "page", "NUMBER", "clipRect", "this", "NUMBER", "options", "NUMBER", "clipRect", "if", "utils", "NUMBER", "isObject", "this", "NUMBER", "options", "NUMBER", "viewportSize", "this", "NUMBER", "page", "NUMBER", "viewportSize", "this", "NUMBER", "options", "NUMBER", "viewportSize", "return", "this", "NUMBER", "page", "Would", "it", "also", "be", "worth", "it", "to", "check", "the", "delete", "status", "of", "the", "current", "WebPage", "object", "to", "either", "throw", "an", "error", "or", "call", "close", "on", "it", "for", "the", "caller", "As", "it", "stands", "calling", "newPage", "without", "first", "calling", "close", "would", "result", "in", "a", "memory", "leak", "so", "we", "might", "was", "well", "protect", "from", "that", "within", "casper", "NUMBER", "mlb", "NUMBER", "NUMBER", "Valid", "point", "I", "think", "this", "should", "solve", "it", "NUMBER", "Calling", "a", "page", "NUMBER", "close", "explicitly", "should", "do", "the", "job", "js", "Casper", "NUMBER", "prototype", "NUMBER", "newPage", "function", "newPage", "use", "strict", "this", "NUMBER", "checkStarted", "Close", "the", "exist", "page", "object", "NUMBER", "Does", "not", "harm", "anything", "even", "if", "close", "be", "call", "twice", "this", "NUMBER", "page", "NUMBER", "close", "copied", "from", "casper", "NUMBER", "art", "this", "NUMBER", "page", "this", "NUMBER", "mainPage", "createPage", "this", "this", "NUMBER", "page", "NUMBER", "settings", "utils", "NUMBER", "mergeObjects", "this", "NUMBER", "page", "NUMBER", "settings", "this", "NUMBER", "options", "NUMBER", "pageSettings", "if", "utils", "NUMBER", "isClipRect", "this", "NUMBER", "options", "NUMBER", "clipRect", "this", "NUMBER", "page", "NUMBER", "clipRect", "this", "NUMBER", "options", "NUMBER", "clipRect", "if", "utils", "NUMBER", "isObject", "this", "NUMBER", "options", "NUMBER", "viewportSize", "this", "NUMBER", "page", "NUMBER", "viewportSize", "this", "NUMBER", "options", "NUMBER", "viewportSize", "return", "this", "NUMBER", "page", "n", "NUMBER", "k", "NUMBER", "Will", "add", "test", "and", "update", "docs", "shortly", "NUMBER", "Thanks", "Unfortunately", "something", "still", "isn", "t", "get", "cleaned", "up", "NUMBER", "After", "this", "patch", "I", "m", "still", "get", "this", "error", "after", "my", "eachThen", "runs", "for", "a", "while", "even", "with", "newPage", "call", "each", "time", "around", "NUMBER", "QEventDispatcherUNIXPrivate", "Unable", "to", "create", "thread", "pipe", "Too", "many", "open", "file", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "FATAL", "QEventDispatcherUNIXPrivate", "Can", "not", "continue", "without", "a", "thread", "pipe", "Abort", "trap", "NUMBER", "It", "s", "worth", "noting", "that", "without", "this", "it", "grows", "by", "about", "NUMBER", "MB", "per", "page", "load", "and", "grows", "much", "slower", "with", "it", "NUMBER", "It", "still", "gets", "to", "over", "NUMBER", "GB", "memory", "usage", "after", "a", "few", "hundred", "iterations", "though", "NUMBER", "n", "NUMBER", "k", "NUMBER", "casper", "NUMBER", "reset", "sounds", "misleading", "NUMBER", "Tends", "me", "to", "think", "of", "it", "as", "a", "master", "reset", "to", "the", "entire", "casper", "object", "rather", "than", "just", "the", "page", "NUMBER", "Don", "t", "you", "think", "so", "mlb", "NUMBER", "Don", "t", "see", "this", "happening", "in", "my", "case", "NUMBER", "I", "be", "currently", "run", "the", "crawler", "code", "LINK", "spider", "with", "the", "above", "change", "and", "all", "be", "well", "so", "far", "NUMBER", "Am", "I", "miss", "something", "n", "NUMBER", "k", "NUMBER", "Are", "you", "talking", "in", "the", "sense", "of", "calling", "start", "again", "Start", "clears", "all", "steps", "and", "history", "as", "well", "as", "resetting", "the", "page", "NUMBER", "This", "would", "be", "counterproductive", "in", "my", "use", "case", "and", "be", "why", "I", "don", "t", "use", "it", "NUMBER", "ilangv", "That", "s", "a", "little", "concerning", "NUMBER", "I", "m", "calling", "casper", "NUMBER", "newPage", "as", "the", "last", "step", "of", "my", "eachThen", "callback", "and", "still", "it", "s", "definitely", "still", "leaking", "NUMBER", "What", "other", "resources", "within", "Phantom", "aside", "from", "the", "page", "could", "be", "leaking", "mlb", "NUMBER", "any", "update", "on", "this", "issue", "I", "be", "facing", "the", "same", "issue", "NUMBER", "thanks", "Hi", "to", "all", "I", "have", "write", "several", "scripts", "with", "casperjs", "to", "scrap", "webpages", "the", "last", "couple", "of", "years", "NUMBER", "I", "m", "use", "casperjs", "in", "Linux", "NUMBER", "The", "problem", "with", "the", "increase", "need", "in", "resources", "CPU", "RAM", "was", "always", "a", "big", "pain", "for", "all", "these", "scripts", "and", "imagine", "some", "of", "them", "be", "run", "standalone", "in", "a", "vps", "without", "my", "supervision", "NUMBER", "To", "manage", "the", "increase", "in", "ram", "I", "was", "automatically", "restarting", "the", "scripts", "through", "bash", "scripts", "NUMBER", "Yesterday", "I", "came", "across", "this", "thread", "and", "I", "was", "amazed", "by", "the", "idea", "to", "close", "my", "headless", "page", "in", "order", "to", "reallocate", "resources", "and", "keep", "the", "RAM", "consumption", "stable", "and", "not", "rising", "NUMBER", "I", "test", "it", "yesterday", "by", "add", "the", "following", "code", "after", "a", "casper", "NUMBER", "enOpen", "inside", "a", "loop", "of", "several", "iterations", "target", "was", "NUMBER", "iterations", "NUMBER", "casper", "NUMBER", "en", "function", "casper", "NUMBER", "page", "NUMBER", "close", "casper", "NUMBER", "newPage", "this", "NUMBER", "wait", "NUMBER", "function", "Initially", "I", "test", "it", "with", "no", "wait", "and", "it", "fail", "completely", "NUMBER", "The", "program", "was", "hanging", "in", "casper", "NUMBER", "newPage", "for", "ever", "NUMBER", "Then", "I", "add", "a", "wait", "of", "NUMBER", "ms", "and", "it", "managed", "to", "do", "some", "iterations", "NUMBER", "but", "again", "it", "hanged", "NUMBER", "Then", "I", "increase", "it", "to", "NUMBER", "ms", "and", "it", "managed", "to", "do", "NUMBER", "NUMBER", "iterations", "before", "hanging", "NUMBER", "I", "repeated", "the", "test", "with", "my", "pc", "restarted", "so", "all", "other", "resources", "were", "relatively", "free", "and", "the", "script", "has", "hanged", "in", "the", "NUMBER", "iteration", "NUMBER", "After", "a", "while", "NUMBER", "secs", "by", "it", "s", "own", "start", "work", "again", "NUMBER", "During", "all", "these", "iterations", "the", "RAM", "be", "keep", "relatively", "stable", "and", "increasing", "only", "very", "slowly", "NUMBER", "The", "difference", "be", "huge", "compared", "to", "the", "same", "code", "without", "page", "NUMBER", "close", "NUMBER", "The", "reasons", "I", "m", "posting", "here", "be", "the", "following", "NUMBER", "I", "want", "to", "say", "this", "be", "a", "must", "and", "we", "definitely", "should", "find", "a", "way", "to", "close", "pages", "at", "the", "end", "of", "every", "iteration", "NUMBER", "NUMBER", "I", "see", "some", "instability", "on", "the", "above", "code", "NUMBER", "I", "don", "t", "understand", "why", "we", "need", "so", "much", "time", "to", "wait", "NUMBER", "NUMBER", "ms", "be", "too", "much", "for", "NUMBER", "iterations", "NUMBER", "I", "could", "live", "with", "it", "if", "at", "least", "was", "stable", "NUMBER", "I", "don", "t", "understand", "why", "it", "hangs", "every", "now", "and", "then", "NUMBER", "NUMBER", "I", "want", "to", "ask", "if", "it", "s", "possible", "to", "make", "the", "casper", "NUMBER", "newPage", "blocking", "until", "the", "new", "Page", "be", "ready", "NUMBER", "That", "way", "we", "don", "t", "need", "to", "put", "an", "unreliable", "wait", "for", "it", "NUMBER", "cptX", "I", "do", "the", "same", "as", "you", "to", "manage", "the", "ever", "growing", "memory", "consumption", "manage", "an", "external", "queue", "of", "URLs", "to", "process", "and", "execute", "Casper", "from", "another", "program", "in", "a", "loop", "NUMBER", "Unfortunately", "my", "own", "experiments", "came", "to", "the", "same", "unstable", "conclusion", "as", "your", "own", "so", "I", "just", "decided", "not", "to", "trust", "it", "altogether", "and", "continue", "on", "with", "looping", "from", "an", "outside", "program", "NUMBER", "This", "promise", "of", "closing", "every", "page", "be", "too", "good", "to", "reject", "it", "so", "soon", "I", "definitely", "want", "to", "stay", "with", "it", "I", "saw", "so", "much", "memory", "impact", "difference", "that", "for", "sure", "can", "change", "everything", "in", "my", "implementations", "NUMBER", "If", "we", "focus", "on", "finding", "the", "problem", "of", "the", "instabilities", "Why", "be", "the", "delay", "necessary", "What", "happens", "behind", "How", "can", "we", "make", "it", "blocking", "until", "the", "new", "page", "be", "ready", "For", "now", "I", "use", "this", "tip", "to", "reduce", "RAM", "and", "CPU", "use", "by", "my", "own", "scripts", "NUMBER", "You", "can", "use", "event", "to", "send", "a", "KILL", "signal", "to", "phantomjs", "js", "casper", "NUMBER", "on", "run", "NUMBER", "complete", "function", "casper", "NUMBER", "die", "kill", "phantom", "NUMBER", "mickaelandrieu", "Thanks", "for", "the", "tip", "I", "ll", "have", "to", "try", "that", "NUMBER", "I", "have", "notice", "that", "if", "I", "m", "run", "in", "a", "loop", "for", "a", "long", "time", "I", "ll", "start", "to", "accumulate", "a", "lot", "of", "orphaned", "PhantomJS", "instances", "from", "times", "when", "something", "crashes", "NUMBER", "Maybe", "this", "would", "fix", "that", "NUMBER", "mickaelandrieu", "Is", "it", "possible", "to", "use", "your", "script", "in", "a", "loop", "and", "if", "yes", "do", "we", "have", "to", "start", "a", "new", "phantom", "instance", "somehow", "after", "that", "How", "cptX", "can", "you", "post", "your", "ask", "in", "mailing", "list", "Hi", "mickaelandrieu", "as", "I", "m", "new", "here", "I", "don", "t", "understand", "what", "you", "mean", "to", "post", "in", "the", "mailing", "list", "NUMBER", "cptX", "LINK", "forum", "casperjs", "OK", "I", "opened", "an", "issue", "here", "LINK", "topic", "casperjs", "h", "KyQWYXFfY", "n", "NUMBER", "k", "NUMBER", "can", "you", "take", "a", "look", "at", "this", "I", "will", "try", "to", "reviews", "others", "waiting", "PR", "It", "s", "a", "know", "issue", "that", "CasperJS", "do", "not", "support", "threads", "but", "I", "d", "really", "like", "to", "see", "a", "little", "more", "thread", "support", "NUMBER", "In", "particular", "I", "d", "like", "to", "be", "able", "to", "restart", "a", "PhantomJS", "thread", "NUMBER", "If", "I", "don", "t", "include", "the", "thread", "killing", "logic", "on", "lines", "NUMBER", "NUMBER", "then", "CasperJS", "crashes", "repeating", "the", "error", "select", "Invalid", "argument", "after", "NUMBER", "MB", "of", "memory", "or", "so", "NUMBER", "If", "I", "do", "include", "the", "logic", "then", "CasperJS", "will", "crash", "as", "soon", "as", "I", "attempt", "to", "kill", "a", "thread", "NUMBER", "My", "other", "option", "here", "be", "to", "manage", "Phantom", "pooling", "and", "threads", "through", "node", "but", "so", "far", "I", "ve", "difficulty", "get", "the", "node", "phantom", "layer", "to", "communicate", "properly", "NUMBER", "Note", "My", "example", "uses", "several", "npm", "modules", "NUMBER", "These", "could", "easily", "be", "replaced", "by", "a", "few", "plain", "JS", "function", "but", "they", "keep", "it", "easier", "to", "read", "NUMBER", "LINK", "pool", "LINK", "LINK", "poke", "Any", "chance", "this", "will", "be", "revisited", "at", "some", "point", "to", "come", "up", "with", "a", "stable", "solution", "Hey", "mickaelandrieu", "wassup", "fyi", "I", "haven", "t", "worked", "with", "casper", "in", "several", "months", "so", "I", "may", "be", "a", "bit", "behind", "NUMBER", "With", "Casper", "Didn", "t", "dig", "too", "deep", "in", "Casper", "s", "internals", "NUMBER", "I", "ended", "up", "just", "write", "in", "Node", "to", "control", "Phantom", "threads", "NUMBER", "I", "left", "behind", "my", "progress", "on", "that", "front", "except", "proprietary", "parts", "in", "tarantula", "LINK", "if", "you", "re", "interested", "NUMBER", "The", "effort", "I", "was", "work", "toward", "was", "replaced", "by", "some", "off", "the", "shelf", "stuff", "so", "my", "interest", "dwindled", "NUMBER", "Also", "errorCode", "doesn", "t", "always", "represent", "the", "HTTP", "status", "NUMBER", "For", "example", "I", "sometimes", "get", "this", "json", "errorCode", "NUMBER", "errorString", "Operation", "canceled", "id", "NUMBER", "url", "LINK", "Fixes", "NUMBER", "Change", "for", "Issue", "NUMBER", "Please", "review", "NUMBER", "This", "change", "increases", "performance", "of", "our", "UI", "test", "by", "a", "noticeable", "amount", "NUMBER", "brandon", "bethke", "neudesic", "ca", "you", "please", "fix", "the", "test", "poke", "if", "you", "can", "t", "please", "talk", "I", "will", "NUMBER", "Forgive", "me", "I", "have", "be", "busy", "at", "work", "NUMBER", "I", "be", "not", "currently", "setup", "to", "investigate", "this", "NUMBER", "If", "you", "have", "the", "time", "to", "investigate", "I", "would", "appreciate", "that", "NUMBER", "The", "code", "example", "in", "waitForSelectorTextChange", "has", "an", "unterminated", "string", "literal", "on", "line", "NUMBER", "Make", "fs", "NUMBER", "workingDirectory", "priority", "higher", "otherwise", "localModulePath", "would", "mean", "casperScriptBaseDirPath", "This", "be", "my", "first", "contribution", "to", "JS", "project", "and", "I", "ll", "need", "some", "time", "to", "get", "how", "the", "test", "work", "n", "NUMBER", "k", "NUMBER", "mickaelandrieu", "Any", "chance", "this", "could", "get", "some", "attention", "It", "be", "fail", "on", "purpose", "because", "the", "current", "Travis", "build", "be", "all", "use", "the", "same", "engine", "PhantomJS", "NUMBER", "For", "example", "LINK", "ci", "NUMBER", "org", "n", "NUMBER", "k", "NUMBER", "casperjs", "jobs", "NUMBER", "should", "be", "run", "on", "SlimerJS", "v", "NUMBER", "but", "if", "you", "expand", "line", "NUMBER", "of", "the", "log", "it", "be", "use", "PhantomJS", "v", "NUMBER", "hexid", "I", "m", "busy", "too", "I", "try", "to", "take", "a", "look", "on", "it", "the", "next", "week", "end", "NUMBER", "If", "I", "remember", "correctly", "CasperJS", "v", "NUMBER", "be", "supposed", "to", "remove", "PhantomJS", "support", "below", "v", "NUMBER", "x", "so", "remove", "that", "version", "from", "the", "build", "file", "would", "fix", "that", "issue", "NUMBER", "Apart", "from", "that", "everything", "appears", "to", "be", "work", "in", "way", "of", "Phantom", "while", "Slimer", "has", "yet", "to", "become", "headless", "NUMBER", "It", "looks", "like", "this", "LINK", "ci", "NUMBER", "com", "user", "gui", "and", "headless", "browsers", "Using", "xvfb", "to", "Run", "Tests", "That", "Require", "GUI", "NUMBER", "e", "NUMBER", "g", "NUMBER", "a", "Web", "browser", "NUMBER", "may", "be", "a", "solution", "for", "Slimer", "for", "now", "NUMBER", "I", "ll", "try", "to", "take", "a", "look", "into", "a", "solution", "this", "weekend", "NUMBER", "Easy", "fix", "add", "a", "jshint", "maxstatements", "NUMBER", "directive", "in", "your", "function", "NUMBER", "Longer", "one", "refactor", "so", "the", "function", "nb", "of", "statements", "decrease", "Up", "to", "you", "I", "m", "fine", "with", "both", "ways", "NUMBER", "Now", "this", "be", "do", "good", "for", "merge", "isn", "t", "it", "Thanks", "See", "NUMBER", "So", "I", "ve", "splitted", "my", "proposal", "into", "NUMBER", "contributions", "this", "one", "which", "introduce", "a", "refactoring", "of", "export", "system", "with", "BC", "to", "allow", "the", "implementation", "of", "new", "exporters", "allow", "the", "exporters", "MUST", "have", "render", "method", "which", "return", "the", "correct", "output", "NUMBER", "As", "a", "sample", "I", "will", "after", "this", "contribution", "to", "be", "merge", "add", "a", "new", "HTML", "PHPUnit", "like", "exporter", "humm", "I", "ve", "a", "weird", "issue", "with", "dotNet", "and", "phantomjs", "NUMBER", "can", "you", "take", "a", "look", "hexid", "No", "pb", "you", "have", "time", "it", "s", "a", "WIP", "mickaelandrieu", "I", "think", "hexid", "be", "work", "on", "NUMBER", "oh", "good", "D", "need", "n", "NUMBER", "k", "NUMBER", "for", "discuss", "or", "and", "review", "mickaelandrieu", "I", "m", "busy", "these", "days", "but", "will", "have", "a", "look", "next", "week", "n", "NUMBER", "k", "NUMBER", "I", "need", "to", "work", "again", "on", "UI", "improvement", "and", "eventually", "find", "a", "way", "to", "edit", "a", "HTML", "template", "NUMBER", "n", "NUMBER", "k", "NUMBER", "it", "s", "now", "do", "for", "me", "NUMBER", "Would", "you", "mind", "to", "take", "a", "look", "Hmm", "that", "s", "most", "likely", "to", "break", "scripts", "relying", "on", "the", "current", "behavior", "I", "d", "rather", "see", "a", "new", "prependListener", "method", "also", "test", "to", "be", "add", "hum", "NUMBER", "I", "think", "a", "tag", "can", "be", "usefull", "to", "maintain", "the", "current", "api", "and", "let", "the", "developper", "choose", "the", "correct", "order", "of", "the", "events", "dispatched", "NUMBER", "By", "the", "way", "maybe", "can", "we", "add", "another", "tag", "OVERRIDE", "in", "case", "of", "we", "want", "to", "avoid", "totaly", "the", "event", "declared", "before", "NUMBER", "If", "prependListener", "be", "correct", "should", "I", "rename", "addListener", "to", "appendListener", "PS", "I", "will", "clean", "my", "commit", "I", "m", "sorry", "what", "do", "you", "call", "a", "tag", "If", "prependListener", "be", "correct", "should", "I", "rename", "addListener", "to", "appendListener", "Don", "t", "rename", "anything", "for", "BC", "purpose", "just", "add", "a", "new", "prependListener", "method", "thanks", "Re", "the", "changeset", "please", "don", "t", "change", "anything", "to", "the", "current", "addListener", "method", "just", "add", "a", "new", "prependListener", "one", "no", "supplementary", "arg", "to", "be", "pass", "as", "a", "third", "one", "be", "usually", "associated", "to", "passing", "a", "context", "object", "in", "other", "frameworks", "libs", "on", "shouldn", "t", "be", "altered", "as", "well", "NUMBER", "Devs", "wanting", "to", "prepend", "a", "listener", "to", "the", "current", "stack", "will", "do", "explicitely", "by", "themselves", "NUMBER", "We", "ll", "obviously", "document", "this", "thoroughly", "NUMBER", "Thanks", "Ok", "I", "work", "on", "it", "now", "I", "m", "on", "fire", "What", "did", "you", "think", "n", "NUMBER", "k", "NUMBER", "Good", "for", "merge", "after", "clean", "my", "commit", "Thanks", "I", "ll", "review", "the", "patch", "later", "tonight", "n", "NUMBER", "k", "NUMBER", "good", "for", "you", "n", "NUMBER", "k", "NUMBER", "can", "we", "merge", "it", "I", "m", "work", "on", "eventListener", "improvement", "and", "this", "PR", "may", "be", "first", "step", "Everything", "looks", "good", "to", "me", "NUMBER", "NUMBER", "Thanks", "dancer", "thanks", "Thanks", "Thanks", "very", "boring", "issue", "NUMBER", "The", "toString", "function", "be", "not", "call", "by", "gecko", "because", "a", "DOMNode", "do", "not", "inherits", "from", "Object", "NUMBER", "We", "should", "call", "a", "specific", "function", "to", "serialize", "the", "content", "of", "the", "XML", "NUMBER", "Closes", "NUMBER", "Strangely", "it", "always", "fail", "when", "use", "the", "NUMBER", "NET", "executable", "No", "idea", "why", "NUMBER", "Also", "I", "think", "we", "should", "add", "a", "python", "cli", "test", "to", "check", "for", "the", "resulting", "XML", "file", "creation", "NUMBER", "hexid", "no", "pb", "hexid", "indeed", "that", "s", "really", "weird", "NUMBER", "laurentj", "could", "you", "please", "update", "your", "PR", "according", "to", "hexid", "s", "suggested", "change", "Also", "please", "rebase", "to", "get", "rid", "of", "the", "_oups_", "commit", "Will", "update", "the", "PR", "see", "NUMBER", "This", "one", "introduces", "Casper", "waitForAlert", "to", "wait", "until", "an", "alert", "LINK", "US", "docs", "Web", "API", "Window", "NUMBER", "alert", "be", "triggered", "js", "casper", "NUMBER", "waitForAlert", "function", "response", "this", "NUMBER", "echo", "Alert", "received", "response", "NUMBER", "data", "Waiting", "for", "Travis", "to", "confirm", "all", "be", "fine", "NUMBER", "Hi", "I", "use", "waitForAlert", "has", "a", "error", "but", "i", "don", "t", "know", "why", "coffeescript", "casper", "require", "casper", "dump", "require", "utils", "NUMBER", "dump", "casper", "NUMBER", "create", "NUMBER", "art", "LINK", "casper", "NUMBER", "waitForAlert", "response", "NUMBER", "echo", "Alert", "received", "response", "NUMBER", "data", "casper", "NUMBER", "run", "TypeError", "undefined", "be", "not", "a", "function", "evaluating", "casper", "NUMBER", "waitForAlert", "function", "response", "return", "this", "NUMBER", "echo", "Alert", "received", "Is", "this", "only", "available", "in", "git", "installation", "Both", "homebrew", "and", "npm", "ship", "NUMBER", "beta", "NUMBER", "Hi", "can", "you", "try", "this", "npm", "install", "casperjs", "dev", "master", "Regards", "sorry", "but", "npm", "complains", "valid", "install", "target", "NUMBER", "beta", "NUMBER", "NUMBER", "beta", "NUMBER", "aw", "we", "should", "tag", "new", "NUMBER", "x", "release", "what", "do", "you", "think", "n", "NUMBER", "k", "NUMBER", "For", "now", "you", "should", "probably", "install", "master", "branch", "from", "git", "NUMBER", "Replacement", "for", "NUMBER", "I", "won", "t", "have", "access", "to", "a", "development", "environment", "for", "the", "next", "couple", "of", "days", "NUMBER", "It", "will", "have", "to", "wait", "a", "bit", "longer", "NUMBER", "Sorry", "Some", "test", "fail", "with", "SlimerJS", "NUMBER", "Closes", "NUMBER", "mickaelandrieu", "I", "add", "return", "equals", "inputToTest", "NUMBER", "constructor", "NUMBER", "name", "constructor", "NUMBER", "name", "to", "fallback", "to", "the", "behavior", "before", "the", "implementation", "of", "your", "betterInstanceOf", "function", "NUMBER", "And", "I", "need", "the", "original", "value", "of", "the", "input", "parameter", "NUMBER", "And", "because", "you", "change", "this", "value", "in", "the", "loop", "I", "use", "an", "intermediate", "variable", "for", "the", "loop", "laurentj", "ok", "thx", "to", "have", "fix", "it", "NUMBER", "NUMBER", "It", "s", "worth", "mentioning", "the", "error", "message", "Fatal", "you", "can", "t", "override", "the", "preconfigured", "casper", "instance", "in", "a", "test", "environment", "NUMBER", "NUMBER", "Otherwise", "use", "Google", "to", "find", "this", "PR", "be", "tricky", "correct", "misspelled", "bootsrap", "to", "bootstrap", "on", "line", "NUMBER", "of", "the", "README", "NUMBER", "md", "Fix", "NUMBER", "Some", "test", "were", "red", "with", "Slimerjs", "because", "of", "some", "issue", "with", "Gecko", "NUMBER", "Note", "that", "some", "other", "test", "be", "still", "red", "NUMBER", "But", "no", "time", "to", "fix", "them", "now", "NUMBER", "I", "ll", "propose", "later", "some", "other", "patches", "NUMBER", "I", "hate", "jshint", "the", "idiot", "dictator", "p", "I", "will", "fix", "that", "NUMBER", "I", "reinstalled", "my", "laptop", "system", "last", "week", "and", "so", "I", "need", "to", "re", "install", "jshint", "NUMBER", "Hi", "This", "be", "a", "new", "RPM", "package", "build", "script", "NUMBER", "It", "detects", "version", "from", "package", "NUMBER", "json", "NUMBER", "The", "file", "that", "be", "install", "be", "specified", "as", "wildcard", "so", "you", "don", "t", "have", "to", "bother", "with", "RPM", "spec", "file", "when", "you", "add", "remove", "rename", "file", "NUMBER", "Usage", "cd", "rpm", "NUMBER", "build", "then", "RPM", "package", "be", "created", "under", "tmp", "Fixes", "NUMBER", "Some", "update", "of", "the", "frame", "code", "methods", "childFramesCount", "childFramesName", "and", "switchToChildFrame", "be", "deprecate", "NUMBER", "Replace", "them", "with", "their", "new", "synonyms", "I", "need", "to", "play", "with", "the", "content", "of", "an", "iframe", "for", "more", "than", "one", "step", "so", "I", "expose", "the", "switchToFrame", "method", "also", "I", "need", "my", "clients", "scripts", "into", "the", "frame", "so", "I", "injected", "them", "I", "like", "events", "so", "I", "add", "a", "frame", "NUMBER", "change", "event", "NUMBER", "To", "be", "consistent", "maybe", "should", "I", "also", "encapsulate", "switchToParentFrame", "and", "switchToMainFrame", "to", "also", "emit", "this", "event", "Hello", "clochix", "sounds", "good", "NUMBER", "Maybe", "you", "can", "also", "add", "new", "frame", "NUMBER", "change", "event", "to", "the", "documentation", "Thank", "you", "for", "me", "good", "to", "be", "merge", "NUMBER", "Any", "news", "on", "this", "poke", "n", "NUMBER", "k", "NUMBER", "merge", "sounds", "good", "NUMBER", "Robust", "code", "as", "it", "has", "already", "green", "since", "NUMBER", "months", "NUMBER", "ping", "n", "NUMBER", "k", "NUMBER", "Clochix", "deserves", "it", "I", "think", "the", "fail", "message", "be", "a", "little", "cryptic", "if", "they", "be", "in", "past", "tense", "NUMBER", "For", "instance", "FAIL", "Found", "an", "element", "matching", "testsuite", "name", "foo", "package", "foo", "Did", "it", "find", "the", "element", "and", "that", "s", "why", "it", "fail", "or", "did", "it", "fail", "to", "find", "the", "element", "I", "m", "thinking", "make", "it", "present", "tense", "clarifies", "it", "FAIL", "Find", "an", "element", "matching", "testsuite", "name", "foo", "package", "foo", "PASS", "NUMBER", "test", "executed", "in", "NUMBER", "s", "NUMBER", "pass", "NUMBER", "fail", "NUMBER", "dubious", "NUMBER", "skipped", "NUMBER", "Hi", "thanks", "for", "your", "pull", "request", "NUMBER", "NUMBER", "for", "me", "what", "did", "you", "think", "n", "NUMBER", "k", "NUMBER", "fix", "NUMBER", "Hi", "thanks", "for", "your", "report", "and", "your", "pull", "request", "NUMBER", "Can", "you", "please", "add", "a", "test", "for", "this", "Regards", "mickaelandrieu", "For", "sure", "can", "you", "point", "me", "to", "where", "I", "would", "put", "those", "test", "I", "can", "t", "seem", "to", "find", "an", "exist", "test", "for", "getPageContent", "NUMBER", "PASS", "NUMBER", "test", "executed", "in", "NUMBER", "s", "NUMBER", "pass", "NUMBER", "fail", "NUMBER", "dubious", "NUMBER", "skipped", "NUMBER", "I", "m", "hoping", "this", "fix", "it", "it", "s", "fix", "it", "on", "my", "machine", "NUMBER", "No", "change", "NUMBER", "But", "local", "settings", "can", "influence", "line", "ending", "behavior", "so", "it", "seems", "possible", "that", "someone", "else", "will", "see", "change", "NUMBER", "I", "m", "unsure", "how", "to", "proceed", "here", "NUMBER", "Whenever", "a", "wait", "timeout", "occours", "there", "be", "no", "information", "on", "what", "be", "be", "waited", "on", "even", "if", "you", "have", "verbose", "debug", "logging", "turned", "on", "NUMBER", "This", "PR", "add", "a", "details", "property", "bag", "to", "all", "the", "waitFor", "NUMBER", "timeout", "events", "and", "update", "tester", "to", "output", "friendly", "informative", "message", "based", "on", "that", "property", "bag", "NUMBER", "Some", "other", "minor", "issue", "NUMBER", "step", "NUMBER", "timeout", "didn", "t", "have", "the", "same", "params", "as", "onStepTimeout", "so", "I", "update", "that", "too", "NUMBER", "Without", "looking", "through", "the", "git", "logs", "I", "m", "guessing", "that", "the", "events", "came", "after", "the", "on", "Timeout", "callbacks", "NUMBER", "Is", "there", "plan", "to", "deprecate", "this", "NUMBER", "waitFor", "NUMBER", "timeout", "would", "output", "a", "warning", "but", "because", "it", "was", "throw", "in", "onWaitTimeout", "it", "would", "just", "error", "out", "anyways", "NUMBER", "I", "remove", "the", "warning", "and", "put", "all", "the", "error", "logic", "there", "and", "no", "op", "d", "the", "onWaitTimeout", "NUMBER", "NUMBER", "the", "clitests", "were", "rerunning", "capser", "every", "time", "it", "checked", "for", "a", "string", "NUMBER", "I", "change", "it", "to", "only", "run", "once", "and", "it", "was", "a", "big", "perf", "boost", "NUMBER", "NUMBER", "x", "NUMBER", "Hi", "not", "good", "for", "now", "can", "you", "please", "correct", "test", "suite", "Sincerely", "Everything", "be", "passing", "now", "NUMBER", "I", "was", "just", "run", "clitests", "locally", "at", "first", "NUMBER", "I", "moved", "tester", "s", "wait", "for", "timeout", "handle", "back", "to", "the", "callback", "due", "to", "the", "churn", "on", "the", "other", "test", "NUMBER", "The", "event", "handle", "vs", "hook", "handle", "issue", "can", "be", "saved", "for", "later", "NUMBER", "What", "did", "you", "think", "n", "NUMBER", "k", "NUMBER", "Good", "for", "me", "NUMBER", "Great", "Thanks", "for", "reviewing", "my", "pull", "request", "NUMBER", "NUMBER", "use", "slimerjs", "engine", "Trouble", "with", "popups", "NUMBER", "When", "a", "window", "NUMBER", "open", "occur", "casper", "can", "t", "listen", "to", "callbacks", "for", "popups", "pages", "NUMBER", "A", "test", "and", "a", "better", "PR", "title", "would", "be", "nice", "otherwise", "it", "looks", "good", "I", "ve", "edit", "commit", "label", "also", "it", "s", "good", "for", "me", "when", "some", "test", "be", "add", "as", "n", "NUMBER", "k", "NUMBER", "said", "Then", "you", "just", "need", "to", "to", "npm", "publish", "to", "make", "that", "available", "with", "npm", "install", "casperjs", "LINK", "npm", "publish", "tag", "beta", "npm", "publish", "be", "assuming", "npm", "publish", "tag", "latest", "and", "npm", "install", "casperjs", "as", "npm", "install", "casperjs", "latest", "NUMBER", "Just", "learned", "that", "thanks", "to", "your", "question", "What", "npm", "publish", "do", "be", "when", "you", "do", "npm", "publish", "tag", "latest", "it", "links", "the", "version", "describe", "in", "the", "package", "NUMBER", "json", "with", "the", "latest", "TAG", "tag", "NUMBER", "It", "s", "not", "relying", "on", "the", "Git", "tag", "at", "all", "NUMBER", "Except", "if", "you", "install", "the", "module", "over", "the", "git", "protocol", "like", "git", "install", "LINK", "NUMBER", "DEV", "Changed", "testsuite", "Attribute", "duration", "to", "time", "NUMBER", "Jenkins", "do", "not", "parse", "the", "generate", "xunit", "Files", "otherways", "NUMBER", "See", "also", "LINK", "_", "NUMBER", "SImUJ", "The", "XSD", "Schema", "LINK", "NUMBER", "Source", "JUnit", "NUMBER", "xsd", "I", "can", "not", "keep", "duration", "for", "compatibility", "here", "NUMBER", "Because", "Jenkins", "will", "not", "accept", "XMLs", "with", "duration", "in", "Tag", "testsuite", "NUMBER", "I", "don", "t", "know", "how", "to", "handle", "this", "issue", "then", "NUMBER", "Forgot", "about", "this", "fix", "that", "I", "made", "a", "while", "back", "NUMBER", "This", "fix", "the", "TypeError", "undefined", "be", "not", "a", "function", "evaluating", "this", "NUMBER", "emit", "error", "error", "error", "find", "in", "the", "gist", "that", "I", "posted", "on", "LINK", "issuecomment", "NUMBER", "due", "to", "the", "fix", "for", "NUMBER", "backtrace", "be", "not", "always", "defined", "NUMBER", "I", "be", "more", "worried", "that", "this", "bug", "went", "undetected", "for", "so", "long", "and", "I", "see", "now", "that", "because", "the", "test", "be", "self", "test", "it", "s", "not", "possible", "to", "do", "these", "failure", "test", "NUMBER", "Ah", "didn", "t", "see", "those", "NUMBER", "Test", "add", "However", "I", "find", "another", "bug", "due", "to", "that", "same", "NUMBER", "change", "now", "casper", "report", "NUMBER", "failures", "from", "the", "same", "exception", "NUMBER", "This", "should", "report", "just", "NUMBER", "exception", "correct", "I", "would", "guess", "that", "the", "on", "fail", "code", "needs", "to", "not", "fail", "twice", "NUMBER", "Thoughts", "np", "do", "NUMBER", "Fixes", "LINK", "n", "NUMBER", "k", "NUMBER", "I", "add", "in", "support", "for", "assertField", "but", "was", "wondering", "if", "we", "should", "add", "a", "method", "assertFieldBySelector", "or", "deprecate", "the", "current", "API", "for", "the", "function", "prototype", "assertField", "finder", "expected", "message", "where", "finder", "be", "a", "defined", "object", "that", "can", "either", "support", "CSS", "selectors", "XPath", "selectors", "or", "specify", "the", "format", "by", "the", "name", "of", "the", "input", "as", "it", "be", "now", "during", "deprecation", "NUMBER", "Thoughts", "n", "NUMBER", "k", "NUMBER", "That", "sounds", "good", "keep", "the", "two", "interfaces", "consistent", "be", "probably", "better", "than", "overloading", "assertField", "in", "the", "commit", "NUMBER", "I", "ll", "update", "the", "code", "and", "docs", "NUMBER", "The", "alias", "makes", "sense", "and", "support", "BC", "will", "be", "good", "NUMBER", "What", "s", "the", "stance", "in", "casper", "on", "deprecation", "SemVer", "n", "NUMBER", "k", "NUMBER", "Conformed", "to", "the", "fill", "API", "for", "the", "assertField", "methods", "docs", "incoming", "NUMBER", "Build", "was", "red", "due", "to", "linting", "error", "NUMBER", "e", "NUMBER", "should", "amend", "n", "NUMBER", "k", "NUMBER", "Ah", "this", "fell", "off", "the", "dashboard", "Must", "look", "at", "the", "pending", "PR", "dashboards", "more", "often", "NUMBER", "I", "agree", "with", "the", "format", "of", "assertField", "taking", "the", "object", "here", "I", "will", "go", "with", "that", "in", "a", "separate", "PR", "and", "close", "this", "one", "NUMBER", "This", "change", "will", "download", "the", "correct", "version", "of", "PhantomJS", "for", "each", "build", "instead", "of", "downloading", "all", "of", "them", "NUMBER", "I", "ll", "also", "look", "into", "get", "SlimerJS", "work", "with", "this", "new", "format", "NUMBER", "Though", "I", "m", "not", "sure", "if", "we", "should", "wait", "until", "SlimerJS", "has", "headless", "support", "or", "if", "we", "could", "use", "this", "LINK", "ci", "NUMBER", "org", "docs", "user", "gui", "and", "headless", "browsers", "NUMBER", "Any", "input", "would", "be", "greatly", "appreciated", "NUMBER", "Looks", "like", "it", "be", "work", "but", "the", "PHANTOMJS_SHORT_VERSION", "environment", "variable", "isn", "t", "get", "set", "NUMBER", "Since", "there", "be", "only", "one", "version", "of", "PhantomJS", "on", "each", "build", "this", "isn", "t", "a", "problem", "NUMBER", "I", "can", "remove", "this", "if", "everyone", "thinks", "that", "it", "can", "go", "but", "on", "the", "other", "hand", "I", "could", "just", "add", "the", "following", "to", "the", "beginning", "of", "before_install", "and", "take", "out", "the", "global", "environment", "variables", "export", "PHANTOMJS_VERSION_SHORT", "echo", "PHANTOMJS_VERSION", "tr", "cd", "digit", "export", "PHANTOMJS_EXECUTABLE", "bin", "phantomjs", "echo", "PHANTOMJS_SHORT_VERSION", "local", "to", "remote", "url", "access", "yes", "ignore", "ssl", "error", "yes", "Taking", "out", "the", "glob", "vars", "may", "be", "more", "maintainable", "in", "the", "long", "run", "what", "do", "you", "think", "n", "NUMBER", "k", "NUMBER", "Ok", "I", "ve", "change", "the", "configuration", "so", "that", "now", "it", "will", "use", "ENGINE", "and", "ENGINE_VERSION", "environment", "variables", "to", "determine", "what", "should", "be", "downloaded", "and", "use", "NUMBER", "The", "engine", "be", "now", "downloaded", "to", "engine", "NUMBER", "tar", "NUMBER", "bz", "NUMBER", "and", "extracted", "ignoring", "the", "top", "directory", "of", "the", "archive", "to", "the", "engine", "directory", "NUMBER", "This", "will", "remove", "the", "need", "for", "calculating", "where", "the", "binary", "file", "should", "be", "located", "NUMBER", "I", "ve", "also", "keep", "two", "global", "environment", "variables", "PHANTOMJS_EXECUTABLE", "and", "SLIMERJS_EXECUTABLE", "since", "they", "won", "t", "conflict", "with", "each", "other", "and", "they", "should", "be", "the", "same", "for", "any", "test", "version", "of", "that", "engine", "NUMBER", "hexid", "Awesome", "this", "looks", "good", "Merging", "NUMBER", "Please", "wait", "for", "n", "NUMBER", "k", "NUMBER", "for", "a", "last", "validation", "Done", "NUMBER", "Q", "A", "Bug", "fix", "no", "New", "feature", "no", "BC", "breaks", "yes", "Deprecations", "yes", "Tests", "pass", "yes", "Fixed", "tickets", "License", "MIT", "Doc", "PR", "yes", "CasperJs", "have", "an", "Cli", "Module", "LINK", "which", "be", "useful", "usually", "when", "you", "need", "to", "log", "debug", "your", "scrapping", "test", "NUMBER", "I", "don", "t", "understand", "why", "direct", "argument", "match", "to", "verbose", "option", "so", "I", "propose", "this", "PR", "to", "fix", "this", "NUMBER", "By", "the", "way", "documentation", "has", "be", "update", "in", "this", "PR", "also", "the", "file", "usage", "NUMBER", "txt", "which", "has", "be", "prompted", "on", "CLI", "NUMBER", "Cool", "I", "think", "that", "verbose", "be", "more", "inline", "with", "other", "unix", "tool", "NUMBER", "Merging", "NUMBER", "I", "didn", "t", "know", "about", "phantomjs", "verbose", "I", "ll", "ensure", "backward", "compatibility", "ASAP", "NUMBER", "edit", "yes", "I", "saw", "in", "casperjs", "module", "a", "way", "to", "emit", "a", "deprecate", "but", "this", "event", "be", "not", "dispatched", "correctly", "in", "logs", "maybe", "be", "i", "to", "log", "a", "warning", "This", "be", "a", "better", "version", "of", "NUMBER", "use", "a", "separate", "branch", "for", "the", "change", "NUMBER", "Actualy", "not", "good", "can", "you", "rebase", "the", "master", "branch", "Regards", "Addressing", "LINK", "This", "follows", "n", "NUMBER", "k", "NUMBER", "s", "recommendation", "to", "add", "the", "a", "reference", "to", "keep", "the", "references", "here", "it", "be", "keepReferences", "NUMBER", "Tests", "and", "documentation", "change", "incoming", "NUMBER", "n", "NUMBER", "k", "NUMBER", "Have", "you", "seen", "this", "behavior", "All", "test", "seem", "to", "be", "passing", "on", "TravisCI", "but", "showing", "up", "as", "failures", "here", "n", "NUMBER", "k", "NUMBER", "Updated", "the", "linting", "checks", "thanks", "for", "letting", "me", "know", "about", "that", "NUMBER", "Will", "add", "a", "follow", "up", "commit", "to", "update", "the", "CONTRIBUTING", "NUMBER", "md", "as", "well", "n", "NUMBER", "k", "NUMBER", "This", "look", "good", "to", "go", "Let", "me", "know", "if", "you", "have", "any", "feedback", "or", "criticism", "on", "the", "implementation", "NUMBER", "One", "criticism", "I", "had", "of", "my", "approach", "was", "whether", "then", "and", "createStep", "could", "be", "combined", "in", "some", "way", "NUMBER", "Note", "I", "didn", "t", "get", "rid", "of", "_step", "in", "NUMBER", "of", "cases", "For", "instance", "for", "the", "forward", "and", "back", "function", "appear", "to", "accidentally", "have", "some", "faults", "NUMBER", "they", "be", "asymmetric", "one", "has", "a", "then", "function", "parameter", "the", "other", "doesn", "t", "NUMBER", "the", "then", "function", "parameter", "for", "the", "forward", "function", "doesn", "t", "seem", "to", "be", "call", "So", "where", "there", "were", "overlapping", "issue", "I", "did", "not", "make", "corrections", "yet", "for", "the", "purposes", "of", "keep", "commit", "separate", "NUMBER", "I", "m", "happy", "for", "all", "feedback", "on", "approach", "variable", "naming", "indentation", "please", "feel", "free", "to", "be", "direct", "if", "you", "see", "something", "you", "don", "t", "like", "and", "I", "will", "take", "it", "as", "constructive", "criticism", "and", "guidance", "on", "understanding", "your", "expectations", "Cheers", "Yes", "it", "sounds", "reasonable", "NUMBER", "Basically", "it", "infers", "we", "don", "t", "have", "anonymous", "steps", "if", "it", "s", "a", "non", "optional", "parameter", "NUMBER", "Rather", "than", "having", "name", "inference", "at", "the", "runStep", "we", "could", "have", "it", "concretely", "defined", "in", "all", "cases", "whenever", "at", "step", "was", "created", "we", "d", "modify", "the", "calls", "to", "this", "NUMBER", "en", "in", "all", "cases", "to", "use", "this", "NUMBER", "createStep", "Maybe", "also", "to", "improve", "readability", "a", "little", "de", "nest", "this", "stuff", "even", "if", "it", "be", "at", "a", "cost", "of", "a", "bit", "of", "conciseness", "var", "_step", "this", "NUMBER", "createStep", "name", "fn", "options", "this", "NUMBER", "en", "_step", "I", "would", "choose", "that", "approach", "actually", "NUMBER", "Let", "me", "know", "your", "thoughts", "Actually", "this", "only", "works", "for", "internal", "calls", "to", "then", "NUMBER", "Of", "course", "external", "calls", "as", "then", "be", "a", "defined", "part", "of", "the", "API", "may", "have", "anonymous", "function", "NUMBER", "This", "would", "make", "createStep", "only", "electively", "use", "where", "we", "be", "not", "passing", "a", "user", "function", "as", "the", "parameter", "internally", "NUMBER", "However", "then", "could", "resolve", "the", "function", "name", "up", "front", "rather", "than", "deferring", "it", "to", "runStep", "by", "determining", "if", "there", "s", "an", "options", "property", "on", "the", "function", "parameter", "NUMBER", "travis", "build", "failure", "it", "_seems_", "to", "be", "unrelated", "to", "this", "change", "set", "something", "to", "do", "with", "the", "dotNET", "build", "returning", "a", "bad", "error", "code", "NUMBER", "jshint", "NUMBER", "modules", "casper", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "This", "function", "has", "too", "many", "statements", "NUMBER", "NUMBER", "modules", "casper", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "This", "function", "s", "cyclomatic", "complexity", "be", "too", "high", "NUMBER", "NUMBER", "modules", "casper", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "This", "function", "has", "too", "many", "statements", "NUMBER", "NUMBER", "NUMBER", "error", "make", "jshint", "Error", "NUMBER", "aha", "many", "thanks", "NUMBER", "Just", "installing", "rhino", "jshint", "and", "XCode", "command", "line", "tool", "for", "make", "to", "run", "this", "myself", "NUMBER", "NUMBER", "sounds", "great", "Ok", "this", "be", "green", "and", "I", "m", "fairly", "happy", "with", "it", "NUMBER", "Had", "to", "learn", "about", "travis", "the", "right", "version", "of", "jshint", "and", "installing", "node", "but", "I", "m", "up", "to", "speed", "now", "Squashed", "up", "the", "commit", "on", "my", "branch", "also", "NUMBER", "kind", "regards", "do", "we", "need", "documentation", "for", "this", "I", "wonder", "Maybe", "not", "documentation", "as", "info", "log", "output", "be", "not", "generally", "a", "formally", "documented", "part", "of", "an", "API", "NUMBER", "However", "unit", "test", "the", "info", "message", "may", "be", "worthwhile", "as", "there", "s", "sufficient", "complexity", "in", "this", "one", "that", "it", "s", "worth", "test", "for", "invariance", "which", "I", "have", "not", "presently", "do", "NUMBER", "Hi", "Nicolas", "still", "a", "worthwhile", "change", "If", "you", "be", "worried", "about", "backwards", "compatibility", "do", "we", "not", "protect", "against", "this", "by", "version", "release", "where", "we", "describe", "what", "the", "variations", "in", "behaviour", "happen", "to", "be", "This", "change", "be", "a", "sensible", "tidy", "up", "of", "some", "less", "than", "optimal", "logging", "that", "crept", "in", "which", "arose", "in", "my", "own", "code", "as", "a", "starting", "user", "NUMBER", "thanks", "No", "worries", "thanks", "very", "much", "for", "your", "time", "and", "the", "review", "NUMBER", "I", "just", "have", "a", "spot", "of", "time", "off", "work", "I", "have", "an", "opposite", "problem", "and", "rather", "enthusiastic", "to", "do", "a", "spot", "of", "code", "Thanks", "I", "took", "pause", "just", "to", "do", "some", "deeper", "reading", "on", "JavaScript", "here", "NUMBER", "Just", "be", "through", "Crockford", "s", "book", "NUMBER", "There", "s", "a", "bit", "of", "style", "I", "m", "not", "NUMBER", "happy", "with", "NUMBER", "js", "var", "step", "this", "NUMBER", "createStep", "_thenOpen", "function", "this", "NUMBER", "open", "location", "settings", "this", "NUMBER", "en", "step", "It", "just", "doesn", "t", "read", "as", "nicely", "as", "the", "previous", "code", "which", "read", "more", "nicely", "left", "to", "right", "js", "this", "NUMBER", "en", "function", "_thenOpen", "this", "NUMBER", "open", "location", "settings", "I", "m", "not", "sure", "what", "the", "solution", "be", "createStep", "be", "probably", "better", "describe", "as", "addStepMetadata", "js", "this", "NUMBER", "en", "this", "NUMBER", "addStepMetadata", "name", "function", "NUMBER", "I", "get", "rid", "of", "the", "nesting", "initially", "because", "I", "thought", "I", "was", "improving", "readability", "but", "with", "a", "temporary", "var", "step", "variable", "it", "s", "not", "as", "concise", "and", "has", "much", "less", "of", "a", "functional", "programming", "feel", "NUMBER", "Deleted", "all", "the", "coalesce", "stuff", "btw", "I", "agreed", "entirely", "with", "your", "observation", "NUMBER", "Added", "hook", "for", "webpage", "NUMBER", "onResourceError", "as", "describe", "NUMBER", "The", "test", "be", "fail", "for", "phantom", "NUMBER", "x", "because", "onResourceError", "be", "a", "phantom", "NUMBER", "x", "feature", "NUMBER", "So", "this", "enhancement", "would", "require", "phantom", "NUMBER", "x", "onResourceError", "Introduced", "PhantomJS", "NUMBER", "This", "callback", "be", "invoked", "when", "a", "web", "page", "was", "unable", "to", "load", "resource", "NUMBER", "The", "only", "argument", "to", "the", "callback", "be", "the", "resourceError", "metadata", "object", "NUMBER", "Looks", "like", "it", "be", "also", "fail", "for", "the", "Phantom", "NUMBER", "x", "series", "as", "well", "NUMBER", "jshint", "NUMBER", "modules", "casper", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "Trailing", "whitespace", "NUMBER", "test", "suite", "casper", "hooks", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "Expected", "and", "instead", "saw", "NUMBER", "test", "suite", "casper", "hooks", "NUMBER", "js", "line", "NUMBER", "col", "NUMBER", "Expected", "and", "instead", "saw", "NUMBER", "NUMBER", "error", "make", "jshint", "Error", "NUMBER", "Those", "should", "be", "fairly", "easy", "to", "fix", "NUMBER", "Fixed", "jshint", "error", "and", "now", "the", "NUMBER", "NUMBER", "and", "NUMBER", "build", "be", "now", "passing", "NUMBER", "Not", "good", "yet", "NUMBER", "can", "you", "please", "fix", "travis", "build", "As", "mention", "previously", "the", "feature", "be", "only", "compatible", "with", "phantomjs", "NUMBER", "x", "NUMBER", "The", "travis", "build", "be", "only", "fail", "as", "expected", "on", "the", "NUMBER", "x", "run", "NUMBER", "what", "did", "you", "think", "n", "NUMBER", "k", "NUMBER", "it", "s", "a", "big", "BC", "no", "more", "phantomjs", "TAG", "mickaelandrieu", "LINK", "I", "agree", "and", "have", "seen", "a", "lot", "of", "JS", "tool", "follow", "this", "convention", "reporter", "in", "JSHint", "and", "format", "in", "ESLint", "NUMBER", "It", "reduces", "the", "ambiguity", "in", "specify", "multiple", "formats", "at", "the", "same", "time", "casperjs", "reporter", "json", "reporter", "xunit", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "NUMBER", "mduvall", "yeah", "I", "like", "it", "NUMBER", "Just", "miss", "that", "I", "could", "probably", "build", "the", "Json", "with", "just", "utils", "NUMBER", "dump", "what", "do", "you", "think", "I", "don", "t", "think", "I", "understood", "your", "meaning", "with", "this", "TestSuiteResult", "toJSON", "NUMBER", "Did", "you", "mean", "that", "instead", "of", "build", "the", "JSON", "I", "could", "probabely", "just", "utils", "NUMBER", "dump", "results", "just", "thought", "about", "it", "but", "not", "sure", "I", "ll", "get", "the", "test", "duration", "from", "that", "NUMBER", "or", "did", "you", "mean", "something", "else", "can", "you", "rebase", "master", "please", "Also", "be", "it", "ok", "for", "you", "n", "NUMBER", "k", "NUMBER", "mickaelandrieu", "could", "you", "be", "more", "specific", "what", "to", "rebase", "and", "how", "To", "avoid", "merge", "conflict", "you", "need", "to", "rebase", "master", "branch", "on", "your", "branch", "Not", "great", "at", "rebasing", "NUMBER", "you", "mean", "pull", "master", "and", "merge", "on", "my", "branch", "and", "then", "do", "a", "pull", "request", "again", "Twitter", "alonisser", "LINK", "LinkedIn", "Profile", "LINK", "Facebook", "LINK", "_Tech", "blog", "_", "NUMBER", "p", "tech", "NUMBER", "co", "NUMBER", "il", "blog", "_Personal", "Blog", "_degeladom", "NUMBER", "wordpress", "NUMBER", "com", "Tel", "NUMBER", "NUMBER", "NUMBER", "On", "Fri", "Nov", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Micka\u00ebl", "Andrieu", "notifications", "github", "NUMBER", "comwrote", "To", "avoid", "merge", "conflict", "you", "need", "to", "rebase", "master", "branch", "on", "your", "branch", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "NUMBER", "Yes", "and", "be", "sure", "you", "don", "t", "break", "test", "NUMBER", "Also", "I", "worked", "on", "LINK", "Do", "you", "think", "we", "can", "be", "ported", "your", "export", "to", "a", "more", "generic", "system", "Sure", "this", "be", "the", "correct", "approach", "NUMBER", "how", "can", "I", "help", "hum", "it", "be", "not", "accepted", "yet", "NUMBER", "But", "the", "exporters", "should", "be", "call", "by", "use", "casperjs", "test", "format", "xunit", "html", "json", "exporterName", "NUMBER", "file", "filepath", "you", "need", "at", "list", "to", "rename", "your", "exporter", "filename", "with", "the", "name", "pass", "NUMBER", "For", "instance", "with", "jsonReporter", "NUMBER", "js", "you", "should", "call", "format", "jsonReporter", "and", "the", "method", "to", "render", "the", "file", "should", "be", "call", "render", "I", "can", "help", "you", "What", "s", "the", "status", "of", "this", "I", "m", "looking", "to", "add", "html", "json", "functionality", "and", "be", "willing", "to", "pick", "up", "where", "everything", "was", "left", "off", "at", "NUMBER", "The", "examples", "for", "both", "fillSelectors", "and", "fillXPath", "referenced", "calls", "to", "fill", "NUMBER", "This", "commit", "corrects", "both", "examples", "NUMBER", "fix", "NUMBER", "Simple", "example", "JavaScript", "x", "require", "casper", "NUMBER", "selectXPath", "casper", "require", "casper", "NUMBER", "create", "verbose", "true", "logLevel", "debug", "casper", "NUMBER", "art", "LINK", "function", "this", "NUMBER", "page", "NUMBER", "navigationLocked", "true", "casper", "NUMBER", "enClick", "x", "a", "class", "brand", "function", "this", "NUMBER", "echo", "Then", "executed", "casper", "NUMBER", "run", "function", "this", "NUMBER", "exit", "Actual", "casperjs", "test", "NUMBER", "js", "info", "phantom", "Starting", "NUMBER", "info", "phantom", "Running", "suite", "NUMBER", "steps", "debug", "phantom", "open", "url", "LINK", "HTTP", "GET", "debug", "phantom", "Navigation", "request", "url", "LINK", "type", "Other", "willNavigate", "true", "isMainFrame", "true", "debug", "phantom", "Navigation", "request", "url", "LINK", "type", "Other", "willNavigate", "true", "isMainFrame", "true", "debug", "phantom", "url", "change", "to", "LINK", "debug", "phantom", "Successfully", "injected", "Casper", "client", "side", "utilities", "info", "phantom", "Step", "anonymous", "NUMBER", "NUMBER", "LINK", "HTTP", "NUMBER", "info", "phantom", "Step", "anonymous", "NUMBER", "NUMBER", "do", "in", "NUMBER", "ms", "NUMBER", "info", "phantom", "Step", "_step", "NUMBER", "NUMBER", "LINK", "HTTP", "NUMBER", "debug", "phantom", "Mouse", "event", "mousedown", "on", "selector", "xpath", "selector", "a", "class", "brand", "debug", "phantom", "Mouse", "event", "mouseup", "on", "selector", "xpath", "selector", "a", "class", "brand", "debug", "phantom", "Mouse", "event", "click", "on", "selector", "xpath", "selector", "a", "class", "brand", "debug", "phantom", "Navigation", "request", "url", "LINK", "type", "LinkClicked", "willNavigate", "false", "isMainFrame", "true", "info", "phantom", "Step", "_step", "NUMBER", "NUMBER", "do", "in", "NUMBER", "ms", "NUMBER", "Expected", "casperjs", "test", "NUMBER", "js", "info", "phantom", "Starting", "NUMBER", "info", "phantom", "Running", "suite", "NUMBER", "steps", "debug", "phantom", "open", "url", "LINK", "HTTP", "GET", "debug", "phantom", "Navigation", "request", "url", "LINK", "type", "Other", "willNavigate", "true", "isMainFrame", "true", "debug", "phantom", "Navigation", "request", "url", "LINK", "type", "Other", "willNavigate", "true", "isMainFrame", "true", "debug", "phantom", "url", "change", "to", "LINK", "debug", "phantom", "Successfully", "injected", "Casper", "client", "side", "utilities", "info", "phantom", "Step", "anonymous", "NUMBER", "NUMBER", "LINK", "HTTP", "NUMBER", "info", "phantom", "Step", "anonymous", "NUMBER", "NUMBER", "do", "in", "NUMBER", "ms", "NUMBER", "info", "phantom", "Step", "_step", "NUMBER", "NUMBER", "LINK", "HTTP", "NUMBER", "debug", "phantom", "Mouse", "event", "mousedown", "on", "selector", "xpath", "selector", "a", "class", "brand", "debug", "phantom", "Mouse", "event", "mouseup", "on", "selector", "xpath", "selector", "a", "class", "brand", "debug", "phantom", "Mouse", "event", "click", "on", "selector", "xpath", "selector", "a", "class", "brand", "debug", "phantom", "Navigation", "request", "url", "LINK", "type", "LinkClicked", "willNavigate", "false", "isMainFrame", "true", "info", "phantom", "Step", "_step", "NUMBER", "NUMBER", "do", "in", "NUMBER", "ms", "NUMBER", "info", "phantom", "Step", "anonymous", "NUMBER", "NUMBER", "LINK", "HTTP", "NUMBER", "Then", "executed", "info", "phantom", "Step", "anonymous", "NUMBER", "NUMBER", "do", "in", "NUMBER", "ms", "NUMBER", "info", "phantom", "Done", "NUMBER", "steps", "in", "NUMBER", "ms", "My", "pleasure", "This", "fix", "an", "issue", "where", "sendKeys", "do", "not", "fill", "in", "the", "text", "on", "contentEditable", "elements", "NUMBER", "The", "element", "be", "checked", "in", "the", "attributes", "object", "whether", "contenteditable", "be", "true", "and", "clicks", "the", "element", "to", "sendKeys", "to", "NUMBER", "fix", "LINK", "n", "NUMBER", "k", "NUMBER", "Definitely", "sorry", "about", "leaving", "that", "out", "initially", "NUMBER", "I", "push", "the", "documentation", "under", "NUMBER", "and", "listed", "explicitly", "the", "types", "of", "elements", "that", "sendKeys", "will", "send", "the", "keyboard", "events", "to", "NUMBER", "Boolean", "reset", "When", "set", "to", "true", "this", "option", "will", "first", "empty", "the", "current", "field", "value", "NUMBER", "By", "default", "it", "s", "set", "to", "false", "and", "sendKeys", "will", "just", "append", "string", "to", "the", "current", "field", "value", "NUMBER", "I", "be", "use", "following", "command", "for", "content", "editable", "true", "edit", "box", "this", "NUMBER", "sendKeys", "form", "event", "form", "div", "NUMBER", "nicEdit", "main", "gopi", "reset", "true", "keepFocus", "true", "The", "issue", "was", "it", "be", "not", "clearing", "the", "current", "field", "value", "NUMBER", "But", "it", "be", "appending", "the", "current", "field", "value", "NUMBER", "Please", "tell", "me", "how", "to", "clear", "the", "current", "content", "NUMBER", "Q", "A", "Bug", "fix", "no", "New", "feature", "yes", "BC", "breaks", "no", "Deprecations", "no", "Tests", "pass", "yes", "Fixed", "tickets", "NUMBER", "License", "MIT", "Doc", "PR", "NUMBER", "CasperJs", "NUMBER", "dev", "now", "offers", "Tester", "Api", "LINK", "which", "can", "be", "useful", "to", "unit", "test", "logical", "business", "NUMBER", "This", "PR", "be", "a", "start", "to", "complete", "this", "API", "and", "closer", "to", "that", "PHPUnit", "offers", "NUMBER", "add", "utils", "NUMBER", "betterInstanceOf", "add", "many", "test", "for", "native", "and", "custom", "objects", "add", "Tester", "Api", "documentation", "and", "samples", "CasperJS", "didn", "t", "find", "any", "more", "users", "modules", "when", "we", "indicate", "only", "the", "name", "of", "the", "main", "script", "it", "worked", "only", "when", "we", "indicate", "the", "full", "path", "of", "the", "script", "on", "the", "command", "line", "NUMBER", "Fixes", "NUMBER", "Strange", "all", "cli", "test", "pass", "for", "me", "NUMBER", "And", "unfortunately", "output", "of", "runtest", "NUMBER", "py", "be", "not", "really", "useful", "NUMBER", "I", "m", "going", "to", "improve", "it", "to", "see", "the", "real", "error", "NUMBER", "To", "avoid", "breaking", "the", "XML", "output", "with", "specific", "HTML", "entities", "such", "as", "nbsp", "This", "be", "mostly", "to", "make", "sure", "that", "Travis", "can", "handle", "the", "change", "that", "I", "made", "NUMBER", "ref", "NUMBER", "Yea", "I", "have", "NUMBER", "I", "believe", "that", "it", "may", "be", "because", "of", "an", "older", "version", "of", "Mono", "NUMBER", "I", "have", "limited", "access", "to", "an", "Ubuntu", "machine", "so", "I", "will", "try", "to", "figure", "it", "out", "NUMBER", "I", "m", "get", "quite", "a", "few", "error", "on", "my", "windows", "machine", "but", "I", "be", "get", "the", "exact", "same", "output", "run", "casperjs", "NUMBER", "exe", "selftest", "as", "I", "be", "run", "python", "casperjs", "selftest", "and", "casperjs", "NUMBER", "bat", "selftest", "NUMBER", "I", "ll", "try", "run", "it", "on", "a", "different", "machine", "later", "on", "to", "see", "if", "it", "be", "just", "my", "machine", "acting", "up", "NUMBER", "Ok", "it", "looks", "like", "it", "might", "be", "a", "PhantomJS", "issue", "NUMBER", "I", "m", "get", "NUMBER", "failures", "when", "I", "run", "Phantom", "s", "test", "suite", "NUMBER", "Here", "s", "a", "gist", "LINK", "of", "the", "output", "I", "received", "NUMBER", "The", "first", "be", "the", "output", "from", "run", "with", "CasperJS", "master", "and", "the", "second", "be", "with", "CasperJS", "NUMBER", "beta", "I", "ll", "try", "finding", "where", "along", "the", "line", "this", "start", "to", "happen", "NUMBER", "I", "think", "I", "finally", "find", "the", "issue", "NUMBER", "It", "looks", "as", "though", "remove", "the", "two", "lines", "that", "were", "add", "to", "modules", "casper", "NUMBER", "js", "in", "LINK", "produces", "the", "same", "output", "as", "NUMBER", "beta", "NUMBER", "FAIL", "NUMBER", "test", "executed", "in", "NUMBER", "s", "NUMBER", "pass", "NUMBER", "fail", "NUMBER", "dubious", "NUMBER", "skipped", "NUMBER", "Details", "for", "the", "NUMBER", "fail", "test", "In", "C", "Users", "hexid", "Desktop", "casperjs", "casperjs", "NUMBER", "beta", "NUMBER", "test", "suite", "casper", "encode", "NUMBER", "js", "NUMBER", "base", "NUMBER", "encode", "and", "download", "test", "assertEquals", "Casper", "NUMBER", "base", "NUMBER", "encode", "can", "retrieve", "base", "NUMBER", "contents", "In", "C", "Users", "hexid", "Desktop", "casperjs", "casperjs", "NUMBER", "beta", "NUMBER", "test", "suite", "casper", "logging", "NUMBER", "js", "NUMBER", "logging", "test", "assertEquals", "Casper", "NUMBER", "log", "logged", "message", "In", "C", "Users", "hexid", "Desktop", "casperjs", "casperjs", "NUMBER", "beta", "NUMBER", "test", "suite", "casper", "wait", "NUMBER", "js", "NUMBER", "waitForSelectorTextChange", "test", "fail", "Casper", "NUMBER", "waitForSelectorTextChange", "can", "wait", "for", "text", "on", "a", "selector", "to", "change", "In", "C", "Users", "hexid", "Desktop", "casperjs", "casperjs", "NUMBER", "beta", "NUMBER", "test", "suite", "casper", "xpath", "NUMBER", "js", "NUMBER", "XPath", "test", "assertExists", "XPath", "selector", "can", "find", "an", "element", "In", "C", "Users", "hexid", "Desktop", "casperjs", "casperjs", "NUMBER", "beta", "NUMBER", "test", "suite", "casper", "xpath", "NUMBER", "js", "NUMBER", "XPath", "test", "uncaughtError", "Cannot", "dispatch", "mousedown", "event", "on", "nonexistent", "selector", "xpath", "selector", "html", "body", "a", "NUMBER", "In", "C", "Users", "hexid", "Desktop", "casperjs", "casperjs", "NUMBER", "beta", "NUMBER", "test", "suite", "tester", "setup", "teardown", "async", "NUMBER", "js", "tearDown", "test", "dubious", "tearDown", "test", "NUMBER", "test", "planned", "NUMBER", "test", "executed", "In", "C", "Users", "hexid", "Desktop", "casperjs", "casperjs", "NUMBER", "beta", "NUMBER", "test", "suite", "tester", "skip", "NUMBER", "js", "Skip", "test", "asynchronous", "dubious", "Skip", "test", "asynchronous", "NUMBER", "test", "planned", "NUMBER", "test", "executed", "In", "C", "Users", "hexid", "Desktop", "casperjs", "casperjs", "NUMBER", "beta", "NUMBER", "test", "suite", "utils", "NUMBER", "js", "NUMBER", "quoteXPathAttributeString", "test", "assertExists", "Xpath", "selector", "a", "text", "concat", "Label", "with", "double", "quotes", "be", "find", "on", "test", "site", "click", "NUMBER", "html", "page", "Sounds", "good", "NUMBER", "I", "ll", "also", "work", "on", "get", "Travis", "to", "run", "selftests", "with", "the", "NUMBER", "NET", "application", "NUMBER", "I", "believe", "this", "be", "ready", "to", "be", "merge", "NUMBER", "I", "compressed", "everything", "down", "to", "just", "a", "few", "commit", "and", "I", "have", "add", "the", "selftests", "for", "the", "dotNET", "app", "to", "travis", "NUMBER", "The", "failures", "be", "still", "occuring", "on", "Windows", "but", "that", "be", "also", "true", "with", "the", "Python", "and", "Batch", "scripts", "so", "I", "think", "that", "should", "be", "dealt", "with", "in", "a", "different", "issue", "NUMBER", "Sounds", "good", "Just", "glad", "to", "be", "able", "to", "help", "NUMBER", "Sorry", "that", "it", "took", "so", "long", "but", "I", "update", "the", "docs", "to", "show", "that", "casperjs", "NUMBER", "exe", "should", "be", "use", "on", "Windows", "instead", "of", "the", "old", "casperjs", "NUMBER", "bat", "NUMBER", "NUMBER", "cea", "NUMBER", "ecfb", "NUMBER", "b", "NUMBER", "fc", "NUMBER", "bd", "NUMBER", "d", "NUMBER", "d", "NUMBER", "ba", "NUMBER", "c", "b", "NUMBER", "f", "NUMBER", "d", "NUMBER", "b", "NUMBER", "d", "NUMBER", "b", "NUMBER", "b", "NUMBER", "ba", "NUMBER", "bed", "NUMBER", "When", "you", "need", "to", "unit", "test", "your", "front", "logical", "business", "instanceof", "become", "useful", "to", "be", "sure", "to", "have", "the", "good", "object", "NUMBER", "Q", "A", "Bug", "fix", "no", "New", "feature", "yes", "BC", "breaks", "no", "Tests", "pass", "yes", "Doc", "Tests", "of", "course", "Tested", "on", "GNU", "Linux", "Mint", "NUMBER", "with", "PhantomJS", "NUMBER", "casperJs", "NUMBER", "dev", "Curious", "I", "have", "no", "problem", "with", "the", "casperjs", "selftest", "command", "NUMBER", "I", "ll", "update", "this", "pull", "request", "tomorrow", "edit", "i", "m", "a", "noob", "I", "launched", "test", "from", "my", "casperjs", "and", "no", "from", "my", "PR", "NUMBER", "It", "s", "now", "fix", "NUMBER", "good", "for", "merge", "or", "definetively", "a", "bad", "idea", "I", "wanted", "an", "API", "more", "complete", "something", "like", "PHPUnit", "for", "example", "which", "provide", "LINK", "test", "for", "phpunit", "NUMBER", "html", "write", "test", "for", "phpunit", "NUMBER", "assertions", "NUMBER", "assertInstanceOf", "NUMBER", "That", "s", "why", "I", "wanted", "String", "as", "first", "parameter", "on", "my", "first", "commit", "NUMBER", "edit", "I", "will", "improve", "this", "pass", "a", "String", "a", "className", "be", "definitively", "what", "users", "need", "NUMBER", "What", "do", "you", "think", "about", "LINK", "edit", "from", "NUMBER", "NUMBER", "I", "ll", "write", "more", "test", "this", "week", "specially", "for", "inheritance", "and", "all", "know", "Objects", "NUMBER", "NUMBER", "The", "latest", "backwards", "compatibility", "commit", "ended", "up", "add", "in", "fs", "NUMBER", "pathJoin", "dir", "basename", "three", "times", "for", "each", "basename", "NUMBER", "This", "commit", "add", "it", "for", "each", "basename", "instead", "of", "each", "extension", "and", "basename", "NUMBER", "nodejs", "modules", "The", "same", "way", "phantomJS", "can", "NUMBER", "Add", "documentation", "in", "reference", "of", "close", "ticket", "LINK", "Fixes", "a", "wrong", "comment", "in", "an", "example", "Trying", "to", "fix", "the", "example", "code", "for", "change", "the", "user", "agent", "NUMBER", "Current", "example", "doesn", "t", "work", "NUMBER", "Example", "of", "change", "user", "agent", "on", "fly", "doesn", "t", "work", "since", "calls", "to", "change", "user", "agent", "be", "executed", "before", "run", "NUMBER", "Fixed", "some", "issue", "with", "the", "commit", "from", "the", "last", "PR", "NUMBER", "Ref", "StackOverflow", "LINK", "not", "show", "test", "file", "xxx", "js", "while", "test", "casperjs", "file", "Just", "a", "quick", "change", "so", "that", "casper", "test", "doesn", "t", "print", "out", "Test", "file", "path", "to", "test", "NUMBER", "js", "when", "there", "be", "only", "one", "file", "be", "test", "NUMBER", "Trailing", "backslash", "in", "CASPER_PATH", "was", "escaping", "closing", "quote", "in", "casper", "path", "NUMBER", "This", "change", "backslashes", "in", "CASPER_PATH", "to", "forward", "slashes", "NUMBER", "Same", "with", "CASPER_BIN", "to", "be", "consistent", "NUMBER", "I", "also", "remove", "superfluous", "ARGV", "variable", "to", "avoid", "potential", "problem", "with", "batch", "fail", "to", "properly", "send", "full", "cli", "params", "NUMBER", "n", "NUMBER", "k", "NUMBER", "Actually", "it", "turns", "out", "that", "the", "issue", "this", "references", "be", "a", "non", "issue", "NUMBER", "I", "was", "use", "custom", "batch", "file", "or", "maybe", "an", "older", "batch", "file", "which", "had", "a", "trail", "slash", "NUMBER", "CasperJS", "doesn", "t", "actually", "have", "a", "trail", "slash", "there", "NUMBER", "Even", "still", "this", "pull", "request", "should", "be", "accepted", "since", "fs", "NUMBER", "absolute", "use", "in", "bin", "bootstrap", "NUMBER", "js", "NUMBER", "converts", "to", "anyway", "and", "since", "backslashes", "still", "do", "in", "fact", "escape", "closing", "quotes", "around", "command", "line", "parameters", "NUMBER", "If", "you", "re", "wondering", "about", "the", "VAR", "find", "replace", "syntax", "on", "line", "NUMBER", "that", "has", "be", "support", "since", "at", "least", "Windows", "NUMBER", "Can", "I", "have", "a", "test", "case", "I", "can", "run", "an", "Windows", "NUMBER", "with", "phantomjs", "NUMBER", "and", "casperJS", "master", "branch", "NUMBER", "This", "be", "the", "one", "I", "posted", "in", "the", "Issue", "that", "this", "pull", "request", "references", "NUMBER", "NUMBER", "test", "NUMBER", "js", "TAG", "var", "fs", "require", "fs", "console", "NUMBER", "log", "phantom", "NUMBER", "version", "NUMBER", "major", "phantom", "NUMBER", "version", "NUMBER", "minor", "phantom", "NUMBER", "version", "NUMBER", "patch", "NUMBER", "join", "NUMBER", "console", "NUMBER", "log", "phantom", "NUMBER", "args", "console", "NUMBER", "log", "fs", "NUMBER", "separator", "console", "NUMBER", "log", "fs", "NUMBER", "absolute", "NUMBER", "temp", "console", "NUMBER", "log", "fs", "NUMBER", "absolute", "NUMBER", "temp", "phantom", "NUMBER", "exit", "NUMBER", "TAG", "Now", "run", "it", "NUMBER", "TAG", "D", "temp", "phantomjs", "test", "NUMBER", "js", "x", "a", "y", "foo", "bar", "z", "true", "NUMBER", "x", "a", "y", "foo", "bar", "z", "true", "D", "temp", "NUMBER", "emp", "D", "temp", "TAG", "As", "you", "can", "see", "fs", "NUMBER", "absolute", "converts", "the", "backslashes", "to", "forward", "slashes", "despite", "fs", "NUMBER", "separator", "be", "a", "backslash", "only", "if", "they", "re", "escaped", "otherwise", "the", "backslashes", "be", "interpreted", "as", "escape", "characters", "NUMBER", "Additionally", "the", "trail", "backslash", "in", "y", "foo", "bar", "acts", "as", "an", "escape", "character", "for", "the", "final", "quote", "cause", "PhantomJS", "to", "interpret", "the", "value", "of", "y", "to", "be", "foo", "bar", "z", "true", "in", "other", "words", "there", "be", "no", "longer", "a", "z", "option", "be", "pass", "NUMBER", "I", "mention", "in", "the", "issue", "that", "this", "references", "be", "a", "PhantomJS", "issue", "not", "a", "CasperJS", "one", "NUMBER", "My", "recommendation", "be", "to", "simply", "take", "it", "easy", "on", "PhantomJS", "and", "always", "give", "it", "forward", "slashes", "_because_", "fs", "NUMBER", "absolute", "will", "convert", "all", "backslashes", "to", "forward", "slashes", "anyway", "NUMBER", "In", "other", "words", "there", "be", "simply", "no", "benefit", "to", "use", "backslashes", "and", "PhantomJS", "has", "an", "obvious", "preference", "for", "forward", "slashes", "NUMBER", "Get", "it", "Fix", "for", "NUMBER", "Let", "me", "know", "if", "you", "think", "any", "test", "should", "be", "add", "for", "this", "NUMBER", "LINK", "test", "latest", "casperjs", "test", "NUMBER", "pdf", "there", "be", "the", "result", "the", "stack", "trace", "from", "Latex", "engine", "have", "some", "warnings", "so", "I", "suppose", "it", "s", "not", "perfect", "NUMBER", "Here", "be", "a", "couple", "of", "methods", "similar", "to", "Selenium", "that", "I", "use", "all", "the", "time", "NUMBER", "Hope", "it", "be", "useful", "for", "others", "NUMBER", "I", "add", "a", "couple", "of", "shortcuts", "that", "make", "translating", "Selenium", "test", "much", "smoother", "NUMBER", "Great", "change", "MisterY", "NUMBER", "Do", "you", "mind", "add", "test", "coverage", "and", "documentation", "in", "docs", "modules", "casper", "NUMBER", "rst", "Much", "appreciated", "Thanks", "Will", "do", "NUMBER", "This", "was", "a", "quick", "job", "during", "test", "transfer", "from", "Selenium", "hence", "these", "calls", "for", "compatibility", "NUMBER", "I", "now", "know", "I", "should", "have", "do", "this", "on", "a", "separate", "branch", "NUMBER", "Is", "there", "a", "way", "to", "discontinue", "add", "commit", "to", "this", "issue", "I", "could", "redo", "the", "change", "on", "a", "fresh", "fork", "NUMBER", "Cool", "NUMBER", "That", "s", "better", "NUMBER", "Thank", "you", "When", "upgrading", "to", "Casper", "NUMBER", "custom", "modules", "have", "to", "call", "the", "new", "patchRequire", "global", "function", "NUMBER", "The", "usage", "documentation", "display", "when", "Casper", "be", "launched", "without", "options", "miss", "the", "awesome", "SlimerJS", "See", "LINK", "L", "NUMBER", "Note", "PhantomJS", "be", "miss", "the", "documentation", "for", "this", "feature", "LINK", "Like", "you", "probably", "know", "undefined", "be", "the", "equivalent", "of", "not", "exist", "in", "Javascript", "for", "all", "practical", "purposes", "so", "this", "change", "can", "t", "by", "definition", "break", "anything", "else", "NUMBER", "The", "only", "exception", "be", "when", "use", "the", "argument", "object", "in", "a", "function", "scope", "but", "this", "be", "not", "the", "case", "in", "the", "function", "modify", "by", "this", "commit", "NUMBER", "Many", "things", "be", "miss", "from", "the", "API", "documentation", "even", "many", "of", "them", "be", "often", "use", "I", "guess", "NUMBER", "At", "least", "I", "implement", "this", "parameter", "in", "SlimerJS", "NUMBER", "For", "me", "this", "hidden", "parameter", "makes", "sens", "NUMBER", "I", "write", "a", "simple", "test", "NUMBER", "The", "code", "to", "be", "update", "be", "in", "fillForm", "method", "and", "can", "be", "surely", "improved", "NUMBER", "This", "would", "be", "a", "nice", "addition", "NUMBER", "Any", "update", "on", "it", "yet", "I", "was", "in", "holidays", "NUMBER", "I", "fix", "indentation", "and", "simplify", "a", "bit", "code", "in", "modules", "casper", "NUMBER", "js", "All", "test", "be", "ok", "NUMBER", "Fixes", "NUMBER", "This", "will", "enable", "installing", "casperjs", "via", "npm", "so", "that", "e", "NUMBER", "g", "NUMBER", "grunt", "tasks", "can", "run", "the", "test", "NUMBER", "See", "this", "example", "LINK", "casperjs", "extra", "That", "issue", "address", "publishing", "casperjs", "as", "a", "proper", "npm", "package", "which", "probably", "requires", "some", "change", "as", "outlined", "in", "there", "NUMBER", "My", "suggestion", "be", "only", "to", "enable", "npm", "to", "be", "use", "as", "an", "installation", "agent", "so", "that", "e", "NUMBER", "g", "NUMBER", "grunt", "can", "be", "use", "to", "run", "the", "test", "without", "the", "need", "for", "another", "manual", "installation", "routine", "and", "or", "test", "runner", "NUMBER", "NUMBER", "for", "npm", "friendliness", "this", "pull", "request", "NUMBER", "We", "could", "use", "it", "in", "the", "above", "referenced", "passup", "NUMBER", "js", "tool", "LINK", "This", "would", "be", "magical", "NUMBER", "The", "travis", "configuration", "could", "also", "be", "update", "to", "use", "npm", "to", "get", "phantomjs", "instead", "of", "the", "tar", "download", "stuff", "it", "be", "doing", "now", "NUMBER", "Are", "there", "still", "pending", "issue", "with", "this", "pull", "request", "I", "ve", "be", "use", "this", "branch", "and", "would", "really", "love", "for", "it", "to", "get", "merge", "NUMBER", "Happy", "to", "contribute", "if", "there", "be", "anything", "left", "to", "do", "NUMBER", "Thanks", "OK", "great", "thanks", "for", "the", "quick", "feedback", "Any", "ETA", "for", "NUMBER", "stable", "British", "summer", "or", "French", "summer", "Hey", "NUMBER", "No", "need", "to", "do", "something", "special", "and", "release", "to", "npm", "in", "order", "to", "get", "casper", "in", "node", "NUMBER", "With", "this", "pull", "request", "we", "can", "do", "casperjs", "git", "github", "NUMBER", "com", "n", "NUMBER", "k", "NUMBER", "casperjs", "and", "use", "casperjs", "right", "now", "NUMBER", "Current", "package", "NUMBER", "json", "be", "simply", "broken", "and", "this", "NUMBER", "lines", "will", "help", "NUMBER", "Looking", "forward", "to", "have", "this", "merge", "NUMBER", "Thank", "you", "n", "NUMBER", "k", "NUMBER", "It", "was", "so", "fast", "Nice", "Thanks", "so", "much", "ask", "NUMBER", "and", "n", "NUMBER", "k", "NUMBER", "Really", "happy", "to", "see", "this", "NUMBER", "n", "NUMBER", "k", "NUMBER", "be", "you", "ok", "for", "this", "feature", "n", "NUMBER", "k", "NUMBER", "I", "agree", "on", "the", "fact", "that", "the", "regex", "selector", "be", "not", "a", "standard", "and", "both", "to", "CSS", "NUMBER", "and", "XPath", "be", "NUMBER", "However", "I", "made", "this", "patch", "because", "there", "was", "no", "way", "to", "do", "a", "regex", "match", "directly", "NUMBER", "The", "closest", "thing", "to", "it", "would", "have", "be", "to", "extract", "every", "element", "from", "the", "webpage", "s", "DOM", "use", "the", "CSS", "selector", "to", "get", "the", "tag", "and", "do", "the", "matching", "manually", "NUMBER", "Not", "to", "mention", "the", "pain", "it", "would", "have", "be", "to", "use", "it", "with", "the", "click", "method", "NUMBER", "Hey", "Has", "this", "feature", "be", "implement", "Thanks", "vasilakisfil", "The", "pull", "request", "has", "not", "be", "accepted", "yet", "but", "you", "can", "get", "it", "from", "my", "fork", "if", "you", "want", "to", "try", "use", "it", "NUMBER", "Casper", "NUMBER", "getGlobal", "uses", "f", "aka", "utils", "NUMBER", "format", "in", "code", "executed", "client", "side", "resulting", "in", "an", "error", "message", "NUMBER", "Plain", "old", "string", "concatenate", "should", "fix", "this", "NUMBER", "This", "commit", "was", "also", "integrated", "into", "the", "slimerjs", "NUMBER", "branch", "that", "has", "just", "be", "merge", "NUMBER", "This", "pull", "request", "be", "now", "useless", "NUMBER", "Forgotten", "backslash", "breaks", "syntax", "coloration", "in", "assertMatch", "example", "NUMBER", "See", "LINK", "Forgotten", "backslash", "breaks", "syntax", "coloration", "in", "assertMatch", "example", "NUMBER", "Incoming", "PR", "in", "gh", "pages", "as", "well", "The", "line", "must", "have", "the", "AND", "checking", "because", "it", "checks", "for", "Windows", "AND", "not", "having", "an", "env", "varibale", "ANSICON", "OR", "not", "having", "styleName", "in", "styles", "NUMBER", "js", "if", "fs", "NUMBER", "isWindows", "env", "ANSICON", "styleName", "in", "styles", "thumbsup", "Will", "there", "be", "support", "for", "no", "color", "option", "Will", "there", "be", "support", "for", "no", "color", "option", "There", "be", "please", "use", "latest", "master", "NUMBER", "Current", "the", "mimeType", "be", "fix", "in", "the", "code", "and", "already", "overrided", "this", "will", "block", "some", "ajaX", "request", "which", "return", "back", "those", "like", "Chinese", "in", "some", "scenarios", "NUMBER", "For", "backward", "compatible", "I", "set", "override", "default", "to", "true", "NUMBER", "Users", "can", "pass", "in", "overrideMimeType", "false", "to", "disable", "the", "override", "feature", "but", "this", "need", "the", "users", "could", "find", "their", "unexpect", "result", "was", "cause", "by", "this", "in", "some", "scenarios", "first", "NUMBER", "Thanks", "for", "reminding", "I", "update", "the", "document", "NUMBER", "Actually", "we", "can", "not", "always", "override", "the", "mimeType", "by", "use", "the", "default", "one", "NUMBER", "Well", "I", "m", "very", "late", "NUMBER", "Would", "you", "mind", "to", "add", "test", "These", "change", "allow", "to", "launch", "scripts", "with", "SlimerJS", "instead", "of", "PhantomJS", "NUMBER", "Note", "that", "test", "on", "CasperJS", "be", "not", "green", "yet", "when", "launching", "it", "with", "SlimerJS", "because", "of", "miss", "features", "into", "SlimerJS", "NUMBER", "Tests", "be", "green", "NUMBER", "Travis", "CI", "fail", "only", "because", "of", "jshint", "that", "be", "not", "happy", "because", "I", "add", "two", "if", "statements", "and", "because", "I", "add", "a", "line", "break", "on", "a", "line", "of", "code", "on", "an", "assignement", "NUMBER", "I", "can", "fix", "this", "last", "issue", "but", "should", "I", "really", "to", "refactorize", "the", "entire", "code", "of", "bootstrap", "NUMBER", "js", "just", "because", "of", "these", "two", "if", "Ok", "no", "refactoring", "be", "needed", "I", "just", "increase", "jshint", "parameters", "Please", "sync", "with", "latest", "master", "NUMBER", "Also", "the", "rubybin", "casperjs", "script", "should", "also", "reflect", "the", "change", "made", "in", "bin", "casperjs", "poke", "hannyu", "laurentj", "me", "neither", "nor", "I", "want", "to", "NUMBER", "If", "nobody", "wants", "to", "maintain", "the", "ruby", "exec", "I", "ll", "probably", "get", "rid", "of", "it", "NUMBER", "I", "ll", "create", "an", "issue", "about", "this", "NUMBER", "Awesome", "feature", "NUMBER", "High", "five", "LINK", "content", "uploads", "NUMBER", "NUMBER", "Colbert", "High", "Five", "NUMBER", "gif", "o", "Thank", "you", "both", "So", "nice", "Thanks", "laurentj", "n", "NUMBER", "k", "NUMBER", "Adds", "getElementsAttribute", "and", "getElementsInfo", "and", "test", "for", "each", "NUMBER", "Issue", "NUMBER", "One", "issue", "I", "have", "with", "this", "be", "that", "the", "visible", "attribute", "be", "true", "for", "all", "elements", "if", "any", "one", "element", "be", "visible", "NUMBER", "I", "don", "t", "have", "time", "right", "now", "to", "fix", "this", "but", "I", "ll", "try", "to", "get", "to", "it", "in", "the", "next", "week", "or", "so", "NUMBER", "Ok", "I", "think", "I", "get", "everything", "this", "time", "around", "NUMBER", "Sample", "code", "here", "doesn", "t", "work", "on", "Windows", "casperjs", "NUMBER", "LINK", "getelementsattribute", "var", "casper", "require", "casper", "NUMBER", "create", "casper", "NUMBER", "art", "LINK", "function", "require", "utils", "NUMBER", "dump", "this", "NUMBER", "getElementsAttribute", "div", "title", "Google", "title", "Google", "casper", "NUMBER", "run", "I", "get", "this", "error", "TypeError", "undefined", "be", "not", "a", "function", "evaluating", "this", "NUMBER", "getElementsAttribute", "div", "title", "Google", "title", "C", "test", "NUMBER", "js", "NUMBER", "C", "NUMBER", "in", "runStep", "C", "NUMBER", "in", "checkStep", "Oops", "Misread", "that", "part", "NUMBER", "Will", "wait", "then", "NUMBER", "There", "be", "problem", "with", "use", "require", "for", "NUMBER", "json", "in", "NUMBER", "I", "be", "also", "get", "the", "error", "TypeError", "undefined", "be", "not", "a", "function", "evaluating", "this", "NUMBER", "getElementsAttribute", "path", "href", "NUMBER", "What", "be", "the", "status", "of", "this", "issue", "What", "version", "of", "CasperJS", "be", "you", "run", "NUMBER", "beta", "NUMBER", "Cleared", "up", "this", "issue", "here", "LINK", "can", "i", "retrieve", "the", "href", "element", "from", "a", "button", "in", "a", "casperjs", "script", "NUMBER", "NUMBER", "thanks", "NUMBER", "I", "also", "add", "a", "small", "follow", "up", "question", "Previously", "when", "clicking", "on", "a", "link", "in", "a", "page", "or", "submit", "a", "form", "Casper", "NUMBER", "page", "would", "be", "update", "to", "reflect", "the", "newly", "loaded", "page", "but", "Casper", "NUMBER", "currentResponse", "would", "not", "NUMBER", "This", "cause", "the", "response", "pass", "to", "then", "callbacks", "to", "only", "reflect", "the", "initial", "page", "load", "NUMBER", "This", "patch", "resolve", "that", "issue", "so", "that", "Casper", "s", "page", "and", "currentResponse", "be", "consistent", "and", "subsequent", "then", "callbacks", "receive", "the", "response", "of", "the", "most", "recent", "main", "page", "load", "NUMBER", "Both", "the", "HTTP", "NUMBER", "spec", "NUMBER", "Method", "LINK", "and", "PhantomJS", "webpage", "NUMBER", "cpp", "LINK", "L", "NUMBER", "require", "or", "support", "uppercase", "HTTP", "Methods", "NUMBER", "This", "patch", "add", "that", "functionality", "to", "CasperJS", "NUMBER", "I", "wasn", "t", "sure", "how", "you", "wanted", "test", "like", "this", "structured", "NUMBER", "I", "run", "all", "test", "locally", "and", "they", "pass", "on", "top", "of", "PhantomJS", "NUMBER", "Updated", "NUMBER", "Thanks", "for", "poking", "Glad", "to", "see", "this", "in", "NUMBER", "Great", "NUMBER", "There", "be", "probably", "some", "ways", "you", "might", "like", "to", "change", "it", "just", "let", "me", "know", "NUMBER", "I", "tried", "to", "keep", "the", "discussion", "on", "NUMBER", "in", "mind", "while", "write", "it", "NUMBER", "Thanks", "for", "your", "comments", "and", "improvement", "suggestions", "NUMBER", "I", "believe", "I", "have", "resolve", "all", "of", "the", "issue", "you", "raise", "NUMBER", "n", "NUMBER", "k", "NUMBER", "Is", "there", "any", "plan", "to", "release", "NUMBER", "Current", "stable", "release", "v", "NUMBER", "doesn", "t", "have", "fillSelectors", "functionality", "NUMBER", "cabhishek", "this", "feature", "will", "not", "land", "in", "the", "NUMBER", "x", "branch", "only", "in", "NUMBER", "which", "be", "pretty", "stable", "actually", "NUMBER", "I", "m", "considering", "release", "NUMBER", "at", "least", "a", "RC", "in", "the", "next", "few", "weeks", "but", "I", "cruelly", "lack", "time", "thanks", "NUMBER", "that", "would", "be", "very", "helpful", "Some", "sites", "don", "t", "accept", "the", "default", "content", "type", "application", "x", "www", "form", "urlencoded", "must", "send", "out", "the", "specific", "content", "type", "NUMBER", "so", "we", "need", "the", "extra", "settings", "to", "override", "the", "default", "content", "type", "setting", "in", "current", "sendAJAX", "implementation", "NUMBER", "For", "back", "compatible", "I", "didn", "t", "modify", "the", "previous", "parameters", "just", "add", "a", "new", "Object", "settings", "as", "the", "last", "parameter", "NUMBER", "We", "can", "use", "it", "for", "storing", "more", "settings", "in", "the", "future", "if", "needed", "NUMBER", "Hi", "In", "this", "PR", "I", "have", "update", "the", "doc", "docs", "modules", "clientutils", "NUMBER", "rst", "please", "see", "the", "Files", "Changed", "Tab", "NUMBER", "Issue", "NUMBER", "LINK", "The", "propose", "fix", "makes", "it", "so", "that", "when", "the", "selector", "pass", "to", "visible", "matches", "multiple", "elements", "it", "checks", "that", "one", "of", "them", "be", "visible", "as", "the", "documentation", "suggests", "NUMBER", "There", "be", "no", "change", "when", "passing", "a", "selector", "matching", "only", "NUMBER", "element", "NUMBER", "New", "test", "cases", "have", "be", "add", "and", "all", "be", "passing", "NUMBER", "Adds", "to", "sendKeys", "an", "option", "to", "prevent", "losing", "focus", "which", "be", "useful", "when", "test", "autocomplete", "widgets", "NUMBER", "For", "example", "to", "pick", "the", "first", "suggestion", "in", "an", "autocomplete", "drop", "down", "one", "could", "use", "js", "this", "NUMBER", "sendKeys", "input", "name", "language", "fr", "keepFocus", "true", "this", "NUMBER", "click", "autocomplete", "li", "first", "child", "Also", "The", "documentation", "has", "be", "update", "NUMBER", "The", "test", "harness", "has", "be", "update", "to", "test", "that", "the", "option", "works", "with", "an", "autocomplete", "widget", "NUMBER", "A", "custom", "bare", "bone", "autocomplete", "widget", "had", "be", "add", "to", "form", "NUMBER", "html", "to", "allow", "test", "without", "impacting", "the", "speed", "of", "the", "test", "harness", "NUMBER", "Tests", "fail", "on", "tour", "ci", "server", "NUMBER", "I", "m", "puzzled", "as", "to", "why", "NUMBER", "My", "fork", "was", "probably", "out", "of", "date", "NUMBER", "Apologies", "NUMBER", "Ok", "solve", "My", "update", "to", "form", "NUMBER", "html", "add", "a", "field", "which", "broke", "two", "test", "in", "formfill", "NUMBER", "js", "NUMBER", "I", "probably", "run", "casperjs", "selftest", "instead", "of", "NUMBER", "bin", "casperjs", "selftest", "which", "meant", "I", "rested", "the", "version", "of", "casperjs", "install", "by", "homebrew", "currenlty", "at", "NUMBER", "instead", "of", "the", "version", "of", "casperjs", "located", "in", "the", "current", "directory", "where", "bash", "was", "located", "NUMBER", "Since", "the", "test", "appeared", "to", "be", "green", "I", "submitted", "the", "pull", "request", "NUMBER", "Now", "the", "log", "message", "have", "step", "function", "name", "if", "available", "NUMBER", "js", "casper", "NUMBER", "art", "LINK", "function", "login", "this", "NUMBER", "fill", "form", "username", "abc", "password", "xyz", "true", "then", "the", "log", "will", "look", "like", "Step", "login", "NUMBER", "NUMBER", "LINK", "HTTP", "NUMBER", "if", "the", "function", "be", "not", "named", "then", "it", "will", "look", "note", "the", "extra", "spaces", "Step", "NUMBER", "NUMBER", "LINK", "HTTP", "NUMBER", "Makes", "sense", "NUMBER", "Updated", "Issue", "with", "another", "commit", "NUMBER", "copying", "your", "code", "This", "add", "an", "option", "to", "tune", "the", "delay", "for", "retires", "on", "the", "wait", "operations", "NUMBER", "Just", "an", "update", "about", "phantomJs", "version", "The", "example", "for", "assertSelectorHasText", "was", "referring", "to", "assertSelectorDoesntHaveText", "NUMBER", "Stop", "cli", "NUMBER", "parse", "phantomArgs", "from", "casting", "raw", "positional", "argument", "In", "page", "NUMBER", "onNavigationRequested", "we", "set", "casper", "NUMBER", "navigationRequested", "to", "true", "only", "when", "we", "re", "on", "a", "different", "URL", "NUMBER", "Otherwise", "NUMBER", "runStep", "wouldn", "t", "procceed", "with", "NUMBER", "waitFor", "stuff", "for", "hash", "based", "URL", "where", "you", "were", "redirected", "NUMBER", "Python", "be", "huge", "bash", "coreutils", "dirname", "realpath", "seq", "be", "much", "smaller", "NUMBER", "Since", "Python", "be", "cross", "platform", "I", "feel", "as", "though", "it", "should", "remain", "the", "default", "with", "the", "option", "to", "use", "this", "on", "unix", "based", "systems", "NUMBER", "With", "that", "I", "feel", "as", "though", "this", "would", "be", "better", "placed", "in", "a", "bashbin", "folder", "instead", "of", "bin", "NUMBER", "This", "way", "it", "will", "conform", "more", "to", "how", "the", "Windows", "batch", "script", "be", "use", "be", "in", "batchbin", "NUMBER", "Add", "test", "NUMBER", "skip", "js", "casper", "NUMBER", "en", "function", "test", "NUMBER", "skip", "NUMBER", "Skip", "me", "NUMBER", "And", "also", "js", "casper", "NUMBER", "enSkip", "NUMBER", "Skip", "me", "NUMBER", "NUMBER", "casper", "NUMBER", "enSkipIf", "true", "NUMBER", "Skip", "me", "NUMBER", "NUMBER", "casper", "NUMBER", "enSkipIf", "function", "return", "true", "check", "configuration", "or", "anything", "NUMBER", "Skip", "me", "NUMBER", "NUMBER", "casper", "NUMBER", "enSkipUnless", "true", "NUMBER", "Skip", "me", "NUMBER", "I", "find", "thenSkip", "quite", "useful", "to", "condition", "test", "quickly", "NUMBER", "Skipped", "test", "be", "report", "to", "test", "results", "NUMBER", "Well", "me", "neither", "so", "I", "had", "a", "though", "about", "it", "NUMBER", "We", "do", "skip", "steps", "not", "assertions", "NUMBER", "I", "ve", "get", "this", "feeling", "that", "skip", "api", "belongs", "to", "Casper", "object", "more", "that", "Tester", "NUMBER", "Last", "change", "behavior", "be", "as", "follow", "Casper", "NUMBER", "skip", "do", "skip", "n", "steps", "while", "Tester", "NUMBER", "skip", "now", "delegates", "to", "Casper", "NUMBER", "skip", "and", "add", "a", "skipped", "assertion", "NUMBER", "What", "do", "you", "reckon", "In", "fact", "I", "find", "test", "NUMBER", "skip", "irrevelant", "NUMBER", "Maybe", "a", "markAsSkipped", "that", "add", "n", "skipped", "test", "can", "fit", "better", "in", "Tester", "NUMBER", "Skip", "remains", "about", "navigation", "wereas", "markAsSkipped", "would", "only", "deal", "with", "expected", "test", "NUMBER", "Indeed", "be", "able", "to", "mark", "test", "as", "skipped", "be", "mandatory", "feature", "NUMBER", "One", "don", "t", "actually", "skip", "test", "just", "mark", "them", "as", "skipped", "or", "add", "skipped", "test", "so", "test", "NUMBER", "markAsSkipped", "or", "test", "NUMBER", "addSkipped", "seem", "relevant", "but", "it", "s", "only", "my", "NUMBER", "cents", "NUMBER", "js", "casper", "NUMBER", "test", "NUMBER", "begin", "foo", "NUMBER", "function", "test", "caspr", "NUMBER", "art", "NUMBER", "thenSkipUnless", "phantom", "NUMBER", "version", "NUMBER", "major", "TAG", "NUMBER", "therefore", "when", "checking", "for", "NUMBER", "x", "patch", "version", "minor", "needs", "to", "be", "checked", "against", "NUMBER", "again", "NUMBER", "Fixes", "issue", "NUMBER", "This", "converts", "an", "exception", "TAG", "rvm", "reactor", "casperjs", "NUMBER", "bin", "casperjs", "selftest", "test", "suite", "casper", "agent", "NUMBER", "js", "Test", "file", "test", "suite", "casper", "agent", "NUMBER", "js", "userAgent", "test", "PASS", "Default", "user", "agent", "matches", "CasperJS", "FAIL", "TypeError", "undefined", "be", "not", "an", "object", "evaluating", "request", "NUMBER", "headers", "NUMBER", "filter", "function", "header", "return", "header", "NUMBER", "name", "User", "Agent", "NUMBER", "pop", "NUMBER", "value", "type", "uncaughtError", "file", "test", "suite", "casper", "agent", "NUMBER", "js", "NUMBER", "error", "undefined", "be", "not", "an", "object", "evaluating", "request", "NUMBER", "headers", "NUMBER", "filter", "function", "header", "return", "header", "NUMBER", "name", "User", "Agent", "NUMBER", "pop", "NUMBER", "value", "TypeError", "undefined", "be", "not", "an", "object", "evaluating", "request", "NUMBER", "headers", "NUMBER", "filter", "function", "header", "return", "header", "NUMBER", "name", "User", "Agent", "NUMBER", "pop", "NUMBER", "value", "at", "fetchUA", "test", "suite", "casper", "agent", "NUMBER", "js", "NUMBER", "at", "g", "NUMBER", "at", "emit", "NUMBER", "at", "onResourceRequested", "NUMBER", "stack", "not", "provide", "userAgent", "test", "NUMBER", "test", "planned", "NUMBER", "test", "executed", "FAIL", "NUMBER", "test", "executed", "in", "NUMBER", "s", "NUMBER", "pass", "NUMBER", "fail", "NUMBER", "Details", "for", "the", "NUMBER", "fail", "test", "In", "test", "suite", "casper", "agent", "NUMBER", "js", "NUMBER", "userAgent", "test", "uncaughtError", "TypeError", "undefined", "be", "not", "an", "object", "evaluating", "request", "NUMBER", "headers", "NUMBER", "filter", "function", "header", "return", "header", "NUMBER", "name", "User", "Agent", "NUMBER", "pop", "NUMBER", "value", "In", "test", "suite", "casper", "agent", "NUMBER", "js", "userAgent", "test", "dubious", "userAgent", "test", "NUMBER", "test", "planned", "NUMBER", "test", "executed", "TAG", "into", "a", "failure", "TAG", "rvm", "reactor", "casperjs", "NUMBER", "bin", "casperjs", "selftest", "test", "suite", "casper", "agent", "NUMBER", "js", "Test", "file", "test", "suite", "casper", "agent", "NUMBER", "js", "userAgent", "test", "PASS", "Default", "user", "agent", "matches", "CasperJS", "FAIL", "Subject", "be", "strictly", "true", "type", "assert", "file", "test", "suite", "casper", "agent", "NUMBER", "js", "NUMBER", "code", "casper", "NUMBER", "test", "NUMBER", "assert", "headers", "NUMBER", "length", "NUMBER", "subject", "false", "FAIL", "NUMBER", "test", "executed", "in", "NUMBER", "s", "NUMBER", "pass", "NUMBER", "fail", "NUMBER", "Details", "for", "the", "NUMBER", "fail", "test", "In", "test", "suite", "casper", "agent", "NUMBER", "js", "NUMBER", "userAgent", "test", "assert", "Subject", "be", "strictly", "true", "TAG", "What", "to", "do", "with", "the", "failure", "I", "do", "not", "know", "NUMBER", "Tests", "be", "now", "fix", "NUMBER", "This", "probably", "do", "not", "affect", "much", "but", "be", "the", "correct", "usage", "NUMBER", "This", "commit", "address", "an", "issue", "where", "if", "a", "document", "had", "more", "than", "one", "form", "and", "there", "was", "overlap", "in", "field", "names", "across", "form", "getFormValues", "would", "not", "return", "the", "correct", "result", "NUMBER", "The", "fix", "be", "to", "pass", "a", "scope", "to", "getFieldValue", "so", "it", "only", "attempts", "to", "retrieve", "values", "for", "field", "in", "the", "given", "form", "NUMBER", "Okay", "made", "the", "change", "discussed", "rebased", "and", "push", "NUMBER", "This", "address", "NUMBER", "Fixes", "a", "bug", "with", "get", "form", "values", "for", "radio", "inputs", "and", "introduces", "a", "minor", "optimization", "to", "avoid", "processing", "the", "same", "form", "field", "more", "than", "once", "NUMBER", "I", "ve", "do", "a", "quick", "update", "to", "the", "NUMBER", "branch", "to", "add", "expected", "and", "subject", "nodes", "to", "renderResults", "generate", "xunit", "XML", "NUMBER", "I", "don", "t", "actually", "know", "if", "this", "be", "valid", "xunit", "XML", "or", "not", "but", "I", "figured", "you", "would", "know", "NUMBER", "Take", "a", "look", "and", "use", "it", "as", "you", "see", "fit", "NUMBER", "mergeObjects", "fail", "to", "deep", "clone", "when", "the", "target", "object", "did", "not", "contain", "the", "corresponding", "key", "This", "be", "required", "to", "support", "angular", "NUMBER", "js", "apps", "NUMBER", "If", "DOM", "elements", "in", "the", "browser", "responds", "to", "oninput", "the", "angular", "NUMBER", "js", "framework", "listens", "for", "this", "event", "as", "a", "cue", "to", "update", "data", "bindings", "NUMBER", "Hello", "there", "I", "just", "stumbled", "across", "your", "awesome", "project", "and", "wondered", "how", "I", "could", "contribute", "and", "make", "it", "better", "and", "I", "did", "I", "know", "this", "will", "break", "some", "stuff", "somewhere", "sorry", "for", "that", "but", "I", "think", "it", "be", "worth", "the", "change", "NUMBER", "_And", "have", "a", "happy", "friday", "_", "Best", "regards", "Kasper", "Grubbe", "NUMBER", "Updated", "documentation", "for", "refs", "NUMBER", "waitForSelectorTextChange", "NUMBER", "New", "feature", "for", "CasperJS", "that", "add", "a", "new", "wait", "method", "NUMBER", "function", "Casper", "NUMBER", "waitForSelectorTextChange", "selector", "then", "onTimeout", "timeout", "Contains", "the", "method", "as", "well", "as", "a", "test", "case", "to", "test", "the", "new", "method", "NUMBER", "should", "be", "leaves", "not", "leaved", "NUMBER", "onPageInitialized", "could", "not", "be", "invoked", "NUMBER", "I", "have", "not", "test", "a", "fix", "but", "I", "ve", "decided", "to", "send", "it", "immediately", "to", "prevent", "this", "bug", "appearance", "within", "the", "upcoming", "NUMBER", "release", "NUMBER", "Great", "feature", "minus", "a", "little", "issue", "NUMBER", "But", "I", "think", "you", "should", "wait", "for", "the", "NUMBER", "for", "push", "this", "add", "some", "new", "features", "during", "the", "validation", "of", "a", "release", "candidate", "be", "not", "a", "recommended", "behavior", "Hey", "n", "NUMBER", "k", "NUMBER", "this", "probably", "isn", "t", "complete", "as", "it", "needs", "some", "test", "but", "just", "wanted", "to", "start", "a", "dialog", "and", "see", "what", "else", "you", "d", "like", "to", "see", "NUMBER", "I", "m", "use", "casperjs", "a", "whole", "lot", "with", "iframe", "content", "NUMBER", "Let", "me", "know", "n", "NUMBER", "k", "NUMBER", "I", "add", "a", "super", "basic", "test", "and", "a", "PR", "for", "docs", "at", "LINK", "Let", "me", "know", "if", "you", "d", "like", "anything", "else", "NUMBER", "Added", "time", "attribute", "to", "the", "tags", "TAG", "and", "TAG", "NUMBER", "The", "time", "attribute", "of", "the", "tag", "TAG", "consists", "of", "the", "summary", "of", "all", "TAG", "time", "attributes", "NUMBER", "There", "were", "also", "test", "add", "for", "this", "functionality", "NUMBER", "That", "s", "totally", "fine", "with", "me", "NUMBER", "Thanks", "for", "you", "tip", "NUMBER", "I", "also", "saw", "that", "you", "also", "use", "the", "concat", "method", "which", "I", "also", "wanted", "to", "introduce", "now", "to", "the", "code", "NUMBER", "Nice", "that", "I", "could", "contribute", "something", "to", "the", "project", "NUMBER", "I", "be", "looking", "forward", "to", "push", "other", "things", "forward", "as", "well", "NUMBER", "I", "add", "a", "pullrequest", "to", "change", "the", "attribute", "duration", "to", "time", "NUMBER", "Otherwise", "Jenkins", "will", "not", "read", "the", "File", "properly", "NUMBER", "LINK", "It", "s", "not", "clear", "from", "the", "documentation", "that", "it", "s", "possible", "to", "add", "a", "full", "path", "to", "a", "resource", "file", "for", "unit", "test", "use", "casperjs", "NUMBER", "Ah", "NUMBER", "I", "m", "so", "sorry", "about", "that", "NUMBER", "I", "m", "closing", "this", "pull", "request", "and", "doing", "it", "the", "right", "way", "NUMBER", "The", "implementation", "of", "the", "batch", "file", "be", "lacking", "in", "proper", "support", "for", "parameters", "NUMBER", "This", "be", "not", "so", "much", "a", "limitation", "of", "the", "casperjs", "NUMBER", "bat", "file", "as", "it", "be", "of", "batch", "file", "in", "general", "NUMBER", "A", "better", "alternative", "be", "to", "use", "Powershell", "NUMBER", "It", "has", "more", "options", "and", "almost", "certainly", "has", "a", "brighter", "future", "than", "batch", "scripts", "NUMBER", "Powershell", "do", "support", "argument", "out", "of", "the", "box", "but", "these", "be", "to", "be", "prefixed", "with", "a", "single", "rather", "than", "NUMBER", "The", "solution", "be", "either", "roll", "your", "own", "parser", "that", "handles", "alter", "the", "documentation", "for", "casperjs", "to", "note", "windows", "users", "should", "use", "I", "would", "prefer", "the", "first", "however", "this", "goes", "against", "the", "default", "implementation", "of", "powershell", "and", "leads", "to", "some", "messy", "code", "NUMBER", "Either", "way", "this", "will", "handle", "command", "parameters", "better", "than", "the", "batch", "script", "but", "will", "not", "handle", "spaces", "in", "paths", "even", "with", "quotes", "NUMBER", "A", "design", "decision", "needs", "to", "be", "made", "on", "native", "support", "for", "powershell", "with", "its", "windows", "quirks", "trying", "to", "write", "our", "own", "parser", "in", "powershell", "for", "argument", "or", "damn", "it", "all", "and", "write", "a", "teenie", "tiny", "NUMBER", "NET", "app", "that", "will", "handle", "it", "all", "nicely", "Shouldn", "t", "this", "be", "close", "From", "what", "I", "can", "tell", "this", "PR", "was", "never", "actually", "merge", "NUMBER", "The", "file", "batchbin", "casperjs", "NUMBER", "ps", "NUMBER", "doesn", "t", "exist", "in", "master", "or", "any", "of", "the", "other", "branch", "NUMBER", "Sorry", "I", "saw", "merge", "and", "I", "quickly", "thought", "it", "was", "this", "PR", "that", "was", "merge", "NUMBER", "What", "exactly", "be", "wrong", "with", "parameter", "parsing", "the", "way", "it", "be", "Also", "doesn", "t", "Casper", "depend", "on", "Python", "If", "so", "we", "could", "just", "write", "a", "python", "parser", "program", "NUMBER", "This", "ensures", "that", "findOne", "and", "findAll", "observe", "the", "scope", "for", "XPath", "expressions", "not", "just", "when", "pass", "CSS", "selectors", "NUMBER", "I", "notice", "a", "couple", "semantic", "mistakes", "in", "the", "findOne", "findAll", "test", "NUMBER", "Should", "I", "commit", "the", "change", "I", "made", "to", "fix", "them", "diff", "diff", "git", "a", "test", "suite", "clientutils", "NUMBER", "js", "b", "test", "suite", "clientutils", "NUMBER", "js", "index", "NUMBER", "c", "NUMBER", "d", "NUMBER", "b", "NUMBER", "NUMBER", "a", "test", "suite", "clientutils", "NUMBER", "js", "b", "test", "suite", "clientutils", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "function", "fakeDocument", "html", "scoped", "var", "scope", "clientutils", "NUMBER", "findOne", "ul", "casper", "NUMBER", "test", "NUMBER", "assertType", "clientutils", "NUMBER", "findAll", "li", "scope", "nodelist", "ClientUtils", "NUMBER", "findAll", "can", "casper", "NUMBER", "test", "NUMBER", "assertEquals", "clientutils", "NUMBER", "findAll", "li", "scope", "NUMBER", "length", "NUMBER", "ClientUtils", "NUMBER", "findAll", "can", "casper", "NUMBER", "test", "NUMBER", "assertType", "clientutils", "NUMBER", "findAll", "x", "li", "scope", "array", "ClientUtils", "NUMBER", "findAll", "c", "fakeDocument", "null", "casper", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "function", "fakeDocument", "html", "casper", "NUMBER", "test", "NUMBER", "assertNot", "clientutils", "NUMBER", "findOne", "ol", "ClientUtils", "NUMBER", "findOne", "can", "find", "a", "matching", "DOM", "scoped", "var", "scope", "clientutils", "NUMBER", "findOne", "ul", "casper", "NUMBER", "test", "NUMBER", "assertType", "clientutils", "NUMBER", "findAll", "li", "scope", "nodelist", "ClientUtils", "NUMBER", "findAll", "can", "casper", "NUMBER", "test", "NUMBER", "assertEquals", "clientutils", "NUMBER", "findAll", "li", "scope", "NUMBER", "length", "NUMBER", "ClientUtils", "NUMBER", "findAll", "can", "casper", "NUMBER", "test", "NUMBER", "assertType", "clientutils", "NUMBER", "findOne", "li", "scope", "htmllielement", "ClientUtils", "NUMBER", "findOne", "casper", "NUMBER", "test", "NUMBER", "assertType", "clientutils", "NUMBER", "findOne", "x", "li", "scope", "htmllielement", "ClientUtils", "NUMBER", "fin", "fakeDocument", "null", "casper", "Thanks", "for", "make", "an", "awesome", "project", "NUMBER", "In", "the", "xunit", "module", "fallback", "to", "casperScript", "name", "if", "the", "final", "value", "of", "the", "script", "string", "be", "empty", "NUMBER", "Overview", "Due", "to", "batch", "file", "not", "handle", "parameters", "nicely", "splitting", "by", "an", "sign", "an", "alternative", "script", "be", "required", "to", "provide", "good", "Windows", "support", "NUMBER", "Implementation", "A", "powershell", "script", "has", "be", "implement", "that", "will", "take", "the", "command", "argument", "parse", "them", "into", "phatnomjs", "or", "casperjs", "argument", "then", "use", "the", "bootstrap", "NUMBER", "js", "file", "in", "casper", "to", "run", "whatever", "scripts", "be", "required", "NUMBER", "Testing", "Have", "so", "far", "test", "this", "with", "a", "small", "set", "around", "NUMBER", "of", "different", "parameter", "implementations", "and", "so", "far", "so", "good", "This", "version", "of", "the", "script", "do", "_not_", "support", "spaces", "in", "file", "or", "folder", "names", "NUMBER", "I", "ve", "yet", "to", "work", "on", "this", "NUMBER", "The", "build", "in", "PowerShell", "argument", "functionality", "splits", "by", "NUMBER", "character", "so", "I", "be", "having", "to", "re", "invent", "the", "wheel", "somewhat", "No", "worries", "please", "close", "this", "PR", "and", "I", "ll", "instigate", "a", "new", "one", "from", "a", "branch", "NUMBER", "I", "still", "have", "some", "stuff", "to", "do", "for", "the", "test", "suite", "branch", "I", "ll", "create", "a", "PR", "when", "it", "be", "slightly", "more", "stable", "Well", "look", "at", "that", "I", "can", "close", "things", "Looks", "like", "they", "have", "change", "their", "structure", "a", "bit", "NUMBER", "CasperError", "No", "element", "matching", "selector", "find", "NUMBER", "twc", "story", "block", "This", "be", "a", "simple", "implementation", "of", "a", "miss", "function", "NUMBER", "It", "s", "based", "off", "NUMBER", "RC", "NUMBER", "because", "the", "test", "pass", "for", "me", "there", "but", "don", "t", "on", "master", "although", "the", "patch", "applies", "cleanly", "there", "the", "other", "test", "don", "t", "all", "pass", "when", "run", "directly", "on", "master", "Je", "suis", "perdu", "je", "me", "suis", "relu", "NUMBER", "x", "avant", "de", "poster", "le", "patch", "pour", "\u00eatre", "sur", "de", "ne", "pas", "faire", "de", "boulette", "mais", "c", "est", "bien", "blanc", "sur", "fond", "vert", "on", "est", "d", "accord", "par", "contre", "je", "n", "avais", "pas", "corrig\u00e9", "au", "bon", "endroit", "c", "est", "\u00e7a", "Edit", "burned", "Woah", "there", "NUMBER", "As", "cool", "as", "French", "be", "think", "about", "the", "contributors", "who", "don", "t", "know", "French", "and", "barely", "understand", "English", "Let", "s", "stick", "to", "English", "please", "NUMBER", "Also", "the", "emoji", "only", "works", "on", "github", "NUMBER", "It", "appears", "as", "a", "blank", "box", "within", "e", "mails", "NUMBER", "Went", "ahead", "and", "created", "the", "corresponding", "fix", "to", "support", "paths", "with", "spaces", "and", "prevent", "argument", "with", "values", "e", "NUMBER", "g", "NUMBER", "param", "value", "from", "be", "split", "e", "NUMBER", "g", "param", "value", "NUMBER", "This", "fix", "will", "work", "however", "it", "will", "not", "allow", "us", "to", "pass", "in", "any", "parameters", "directly", "to", "PhantomJS", "NUMBER", "This", "would", "be", "good", "functionality", "to", "keep", "NUMBER", "It", "appears", "that", "batch", "file", "have", "crippled", "themselves", "to", "a", "degree", "by", "treating", "argument", "linked", "with", "an", "sign", "to", "be", "separate", "argument", "NUMBER", "One", "way", "around", "this", "be", "to", "encase", "it", "in", "quotes", "e", "NUMBER", "g", "NUMBER", "xunit", "output", "NUMBER", "xml", "but", "this", "doesn", "t", "seem", "natural", "and", "doesn", "t", "work", "in", "casper", "anyway", "One", "alternative", "may", "be", "to", "use", "a", "powershell", "script", "rather", "than", "a", "batch", "script", "to", "start", "casper", "NUMBER", "It", "s", "a", "bit", "more", "modern", "and", "anyone", "developing", "on", "windows", "should", "be", "capable", "of", "run", "powershell", "scripts", "NUMBER", "I", "ll", "try", "and", "knock", "one", "together", "that", "maintains", "the", "phantom", "argument", "PR", "for", "the", "powershell", "script", "at", "NUMBER", "The", "aliases", "for", "the", "Tester", "module", "s", "methods", "need", "to", "be", "include", "in", "the", "selftest", "NUMBER", "Regression", "happened", "and", "was", "not", "report", "by", "the", "original", "selftest", "scripts", "NUMBER", "Specifically", "Tester", "NUMBER", "assertThrows", "and", "Tester", "NUMBER", "assertSelectorExists", "were", "mis", "declared", "and", "backwards", "compatibility", "broke", "NUMBER", "This", "contribution", "improves", "the", "selftest", "and", "fix", "the", "declarations", "of", "those", "NUMBER", "methods", "NUMBER", "Notice", "the", "selftest", "for", "the", "Tester", "module", "simply", "fail", "hard", "when", "undefined", "function", "be", "call", "upon", "and", "the", "bottom", "line", "result", "of", "the", "selftest", "actually", "shows", "green", "whereas", "scrolling", "through", "the", "full", "log", "will", "reveal", "red", "error", "NUMBER", "This", "be", "because", "the", "selftest", "be", "not", "yet", "at", "the", "level", "of", "let", "me", "assert", "that", "the", "method", "exists", "before", "I", "try", "to", "invoke", "it", "NUMBER", "Similar", "issue", "be", "likely", "to", "exist", "with", "all", "the", "other", "selftest", "scripts", "NUMBER", "There", "exists", "circumstances", "where", "the", "next", "CasperJS", "step", "executes", "too", "early", "cause", "false", "positives", "for", "failures", "in", "subsequent", "test", "NUMBER", "This", "commit", "introduces", "Casper", "NUMBER", "blockStep", "also", "integrated", "into", "click", "and", "clickLabel", "NUMBER", "Developers", "will", "now", "be", "able", "to", "give", "CasperJS", "a", "hint", "about", "the", "nature", "of", "a", "click", "and", "expect", "CasperJS", "to", "block", "execution", "of", "its", "next", "step", "until", "some", "not", "yet", "start", "behaviour", "actually", "starts", "and", "completes", "today", "we", "re", "concerned", "about", "loadInProgress", "and", "navigtationRequested", "pendingWait", "exists", "but", "I", "can", "t", "think", "of", "why", "I", "d", "want", "to", "invoke", "blockStep", "use", "that", "reason", "NUMBER", "It", "be", "relatively", "easy", "to", "maintain", "if", "new", "reasons", "for", "blocking", "the", "next", "step", "be", "created", "in", "the", "future", "just", "add", "a", "new", "case", "for", "switch", "within", "blockStep", "NUMBER", "It", "be", "also", "possible", "to", "directly", "call", "blockStep", "but", "a", "developer", "would", "typically", "be", "better", "just", "directly", "setting", "Casper", "NUMBER", "navigationRequested", "or", "Casper", "NUMBER", "loadInProgress", "or", "Casper", "NUMBER", "pendingWait", "NUMBER", "The", "idea", "of", "introduce", "blockStep", "tied", "into", "click", "and", "clickLabel", "be", "so", "that", "we", "express", "the", "whole", "thing", "as", "a", "single", "statement", "NUMBER", "This", "usage", "be", "probably", "the", "generalized", "version", "Casper", "NUMBER", "click", "that_button", "loadInProgress", "This", "usage", "be", "probably", "more", "specifically", "looking", "at", "navigation", "of", "the", "_top", "frame", "isMainFrame", "in", "CasperJS", "code", "Casper", "NUMBER", "click", "that_button", "navigationRequested", "Here", "be", "my", "minimum", "tester", "file", "NUMBER", "items", "sleepy_page", "NUMBER", "html", "NOTE", "depending", "on", "your", "environment", "you", "might", "need", "to", "tweak", "the", "sleep", "time", "in", "order", "for", "premature_execution", "NUMBER", "js", "to", "actually", "produce", "the", "badly", "timed", "execution", "NUMBER", "html", "TAG", "TAG", "TAG", "TAG", "TAG", "Sleepy", "Page", "TAG", "TAG", "function", "sleep", "milliseconds", "var", "start", "new", "Date", "NUMBER", "getTime", "while", "new", "Date", "NUMBER", "getTime", "start", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "premature_execution", "NUMBER", "js", "NOTE", "fill", "out", "casper", "NUMBER", "art", "with", "a", "better", "URL", "javascript", "var", "casper", "require", "casper", "NUMBER", "create", "viewportSize", "width", "NUMBER", "height", "NUMBER", "verbose", "true", "logLevel", "debug", "casper", "NUMBER", "art", "LINK", "_page", "NUMBER", "html", "casper", "NUMBER", "en", "function", "this", "NUMBER", "test", "NUMBER", "info", "home", "this", "NUMBER", "test", "NUMBER", "info", "this", "NUMBER", "getCurrentUrl", "n", "this", "NUMBER", "fill", "form", "hello", "world", "false", "this", "NUMBER", "click", "my_form_submit", "casper", "NUMBER", "en", "function", "this", "NUMBER", "test", "NUMBER", "info", "should", "be", "hello", "world", "this", "NUMBER", "test", "NUMBER", "info", "this", "NUMBER", "getCurrentUrl", "n", "this", "NUMBER", "fill", "form", "hello", "foobar", "false", "this", "NUMBER", "click", "my_form_submit", "casper", "NUMBER", "en", "function", "this", "NUMBER", "test", "NUMBER", "info", "should", "be", "hello", "foobar", "this", "NUMBER", "test", "NUMBER", "info", "this", "NUMBER", "getCurrentUrl", "n", "casper", "NUMBER", "run", "improved_step_by_step", "NUMBER", "js", "NOTE", "fill", "out", "casper", "NUMBER", "art", "with", "a", "better", "URL", "javascript", "var", "casper", "require", "casper", "NUMBER", "create", "viewportSize", "width", "NUMBER", "height", "NUMBER", "verbose", "true", "logLevel", "debug", "casper", "NUMBER", "art", "LINK", "_page", "NUMBER", "html", "casper", "NUMBER", "en", "function", "this", "NUMBER", "test", "NUMBER", "info", "home", "this", "NUMBER", "test", "NUMBER", "info", "this", "NUMBER", "getCurrentUrl", "n", "this", "NUMBER", "fill", "form", "hello", "world", "false", "this", "NUMBER", "click", "my_form_submit", "loadInProgress", "casper", "NUMBER", "en", "function", "this", "NUMBER", "test", "NUMBER", "info", "should", "be", "hello", "world", "this", "NUMBER", "test", "NUMBER", "info", "this", "NUMBER", "getCurrentUrl", "n", "this", "NUMBER", "fill", "form", "hello", "foobar", "false", "this", "NUMBER", "click", "my_form_submit", "loadInProgress", "navigationRequested", "casper", "NUMBER", "en", "function", "this", "NUMBER", "test", "NUMBER", "info", "should", "be", "hello", "foobar", "this", "NUMBER", "test", "NUMBER", "info", "this", "NUMBER", "getCurrentUrl", "n", "casper", "NUMBER", "run", "Oh", "yeah", "I", "d", "like", "to", "implement", "the", "pass", "an", "object", "way", "of", "doing", "this", "NUMBER", "Meanwhile", "I", "notice", "you", "use", "the", "term", "blockEvents", "instead", "of", "blockStep", "why", "a", "more", "general", "term", "I", "was", "specifically", "aiming", "at", "steps", "NUMBER", "rather", "than", "more", "general", "events", "that", "be", "all", "over", "the", "place", "NUMBER", "Also", "what", "do", "BC", "mean", "Finally", "NUMBER", "I", "wonder", "how", "I", "can", "update", "a", "pull", "request", "to", "reference", "a", "different", "commit", "NUMBER", "Hm", "NUMBER", "Maybe", "something", "involving", "hint", "too", "vague", "by", "itself", "NUMBER", "How", "about", "expect", "too", "vague", "waitOn", "waitFor", "flagUp", "holdOn", "holdFor", "holdUp", "oh", "we", "re", "robbing", "stuff", "now", "I", "m", "leaning", "towards", "holdOn", "since", "it", "s", "the", "shortest", "between", "holdOn", "holdFor", "and", "it", "avoids", "get", "confused", "with", "the", "wait", "family", "methods", "NUMBER", "Or", "NUMBER", "would", "you", "want", "to", "just", "stick", "to", "blockStep", "PS", "Totally", "agree", "on", "use", "topic", "branch", "for", "instance", "this", "be", "get", "worked", "on", "in", "the", "blockable_clicks", "branch", "Refactored", "NUMBER", "We", "now", "two", "flavours", "of", "setting", "the", "click", "options", "available", "I", "prefer", "the", "simplified", "version", "as", "it", "doesn", "t", "introduce", "new", "names", "and", "doesn", "t", "even", "require", "the", "holdOn", "method", "anymore", "previously", "call", "blockStep", "NUMBER", "It", "may", "even", "be", "a", "good", "idea", "to", "remove", "holdOn", "and", "the", "associated", "elaborate", "version", "NUMBER", "since", "I", "didn", "t", "feel", "great", "use", "those", "string", "options", "to", "begin", "with", "NUMBER", "javascript", "An", "elaborate", "version", "casper", "NUMBER", "click", "foo", "a", "NUMBER", "bar", "holdOn", "loadInProgress", "navigationRequested", "A", "simplified", "version", "casper", "NUMBER", "click", "foo", "a", "NUMBER", "bar", "loadInProgress", "true", "navigationRequested", "true", "I", "also", "thought", "that", "maybe", "we", "d", "prefer", "having", "something", "like", "this", "if", "we", "keep", "the", "holdOn", "option", "javascript", "casper", "NUMBER", "click", "foo", "a", "NUMBER", "bar", "holdOn", "loadInProgress", "true", "navigationRequested", "true", "Of", "course", "keep", "holdOn", "as", "a", "separate", "method", "seems", "counter", "to", "the", "don", "t", "repeat", "yourself", "principle", "NUMBER", "Thoughts", "Absolutely", "not", "NUMBER", "They", "must", "not", "be", "global", "options", "that", "be", "set", "at", "the", "start", "NUMBER", "Here", "s", "why", "It", "be", "a", "very", "likely", "scenario", "that", "one", "test", "script", "will", "click", "many", "elements", "on", "a", "page", "for", "many", "different", "reasons", "that", "do", "not", "involve", "navigation", "or", "loading", "NUMBER", "An", "couple", "of", "easy", "examples", "would", "be", "click", "on", "the", "radio", "button", "to", "select", "a", "different", "option", "click", "on", "the", "tab", "to", "show", "a", "new", "tab", "think", "jQuery", "tabs", "NUMBER", "I", "change", "my", "mind", "in", "the", "next", "comment", "NUMBER", "entertaining", "the", "idea", "that", "it", "might", "be", "nice", "to", "have", "a", "global", "CasperJS", "default", "behaviour", "set", "in", "place", "NUMBER", "Options", "Use", "human", "intelligence", "to", "give", "CasperJS", "test", "scripts", "the", "necessary", "hints", "indicating", "certain", "click", "actions", "as", "load", "and", "or", "navigation", "thus", "minimizing", "the", "change", "needed", "to", "our", "precious", "HTML", "pages", "NUMBER", "Augment", "click", "its", "current", "behaviour", "be", "actually", "broken", "and", "unexpect", "NUMBER", "Introduce", "a", "new", "kind", "of", "click", "perhaps", "call", "follow", "for", "navigationRequred", "blocking", "and", "fetch", "for", "loadInProgress", "blocking", "NUMBER", "Use", "human", "intelligence", "to", "give", "clickable", "elements", "class", "attributes", "navigationRequred", "or", "loadInProgress", "such", "that", "CasperJS", "s", "click", "will", "analyze", "the", "selected", "element", "and", "raise", "a", "step", "blocking", "flag", "this", "kind", "of", "hinting", "should", "be", "discouraged", "in", "my", "opinion", "NUMBER", "It", "seems", "pretty", "counter", "productive", "to", "go", "through", "every", "single", "clickable", "element", "in", "my", "website", "tagging", "them", "specifically", "for", "CasperJS", "s", "test", "NUMBER", "Give", "CasperJS", "gains", "a", "hardcore", "parser", "that", "fully", "analyzes", "a", "basic", "html", "hints", "that", "indicate", "load", "navigation", "b", "all", "add", "on", "script", "and", "systems", "javascript", "java", "activeX", "etc", "that", "may", "override", "basic", "html", "hints", "in", "order", "to", "have", "a", "smarter", "version", "of", "click", "that", "will", "automatically", "know", "whether", "or", "not", "it", "should", "raise", "a", "step", "blocking", "flag", "NUMBER", "So", "far", "we", "covered", "the", "first", "option", "use", "the", "augment", "click", "sub", "option", "NUMBER", "Basically", "for", "each", "click", "action", "someone", "needs", "to", "make", "a", "judgement", "call", "on", "whether", "or", "not", "the", "next", "step", "should", "be", "blocked", "NUMBER", "javascript", "casper", "NUMBER", "en", "function", "casper", "needs", "to", "know", "whether", "or", "not", "to", "block", "the", "next", "step", "this", "NUMBER", "click", "something", "this", "be", "one", "way", "of", "doing", "it", "NUMBER", "this", "NUMBER", "holdOn", "navigationRequested", "casper", "NUMBER", "en", "function", "because", "a", "test", "in", "this", "step", "depends", "on", "reactions", "to", "click", "NUMBER", "this", "NUMBER", "test", "NUMBER", "assert", "NUMBER", "javascript", "casper", "NUMBER", "en", "function", "giving", "the", "hint", "before", "clicking", "be", "fine", "too", "this", "NUMBER", "holdOn", "navigationRequested", "casper", "needs", "to", "know", "whether", "or", "not", "to", "block", "the", "next", "step", "this", "NUMBER", "click", "something", "casper", "NUMBER", "en", "function", "because", "a", "test", "in", "this", "step", "depends", "on", "reactions", "to", "click", "NUMBER", "this", "NUMBER", "test", "NUMBER", "assert", "NUMBER", "javascript", "casper", "NUMBER", "en", "function", "this", "be", "easiest", "to", "read", "and", "write", "NUMBER", "worst", "case", "go", "read", "the", "documentation", "that", "talks", "about", "click", "options", "this", "NUMBER", "click", "something", "navigationRequested", "true", "casper", "NUMBER", "en", "function", "because", "a", "test", "in", "this", "step", "depends", "on", "reactions", "to", "click", "NUMBER", "this", "NUMBER", "test", "NUMBER", "assert", "NUMBER", "Let", "s", "see", "NUMBER", "How", "about", "I", "entertain", "the", "idea", "of", "global", "setting", "Let", "s", "say", "it", "s", "a", "good", "idea", "to", "always", "block", "clicks", "as", "if", "they", "were", "always", "going", "to", "navigate", "to", "another", "page", "NUMBER", "In", "that", "case", "we", "would", "want", "the", "following", "to", "be", "possible", "javascript", "var", "casper", "require", "casper", "NUMBER", "create", "holdOn", "navigationRequested", "true", "pendingWait", "false", "loadInProgress", "true", "casper", "NUMBER", "art", "NUMBER", "load", "something", "sensible", "casper", "NUMBER", "en", "function", "this", "NUMBER", "click", "something", "navigationRequested", "false", "this", "NUMBER", "waitUntilVisible", "awesome", "casper", "NUMBER", "en", "function", "we", "re", "waiting", "on", "an", "invisible", "item", "to", "turn", "visible", "this", "NUMBER", "test", "NUMBER", "assert", "NUMBER", "And", "NUMBER", "we", "absolutely", "won", "t", "be", "able", "to", "use", "a", "simple", "array", "of", "strings", "NUMBER", "It", "would", "always", "have", "to", "be", "a", "block", "flag", "name", "true", "false", "collection", "of", "object", "properties", "NUMBER", "I", "notice", "that", "casper", "NUMBER", "open", "also", "stands", "to", "benefit", "from", "having", "a", "navigationRequested", "hint", "NUMBER", "Any", "ideas", "whether", "or", "not", "it", "should", "be", "permanently", "build", "in", "or", "if", "it", "should", "be", "optional", "like", "what", "we", "re", "going", "for", "with", "casper", "NUMBER", "click", "I", "ask", "this", "because", "while", "most", "web", "URLs", "be", "HTML", "pages", "there", "exists", "those", "which", "be", "resources", "like", "binary", "file", "PDFs", "for", "example", "NUMBER", "Currently", "investigating", "NUMBER", "_", "starts", "pondering", "test", "scripts", "to", "provide", "groundwork", "hypotheses", "_", "Uhh", "NUMBER", "on", "my", "side", "it", "s", "on", "ice", "I", "was", "planning", "on", "simply", "push", "out", "the", "following", "features", "for", "it", "NUMBER", "by", "default", "by", "config", "option", "array", "thing", "by", "config", "before", "calling", "the", "function", "s", "a", "natural", "extension", "of", "by", "default", "I", "just", "haven", "t", "had", "time", "to", "commit", "to", "bashing", "out", "that", "code", "NUMBER", "be", "we", "itching", "to", "get", "this", "feature", "integrated", "real", "soon", "I", "could", "get", "motivated", "to", "do", "so", "if", "you", "ask", "for", "it", "to", "be", "push", "up", "in", "my", "scheduling", "NUMBER", "Victor", "Would", "it", "be", "better", "to", "move", "this", "functionality", "into", "waitFor", "I", "m", "just", "trying", "to", "understand", "the", "advantages", "of", "this", "approach", "NUMBER", "danielnitsche", "Well", "in", "my", "opinion", "we", "re", "faced", "with", "a", "bug", "that", "should", "permanently", "be", "fix", "NUMBER", "However", "it", "s", "plausible", "that", "others", "have", "already", "worked", "around", "this", "bug", "and", "would", "prefer", "old", "school", "buggy", "style", "maybe", "even", "to", "the", "point", "of", "requiring", "the", "buggy", "style", "by", "default", "NUMBER", "Also", "consider", "that", "my", "solution", "be", "effectively", "a", "new", "functionality", "so", "it", "s", "probably", "best", "to", "segregate", "it", "into", "its", "own", "function", "and", "add", "a", "few", "calls", "to", "it", "as", "needed", "NUMBER", "Make", "sense", "so", "far", "The", "next", "aspect", "that", "s", "curious", "to", "me", "be", "that", "I", "didn", "t", "include", "the", "option", "to", "block", "on", "a", "mere", "wait", "probably", "because", "it", "only", "matters", "that", "we", "block", "when", "a", "load", "be", "initiated", "NUMBER", "Any", "news", "on", "this", "Nothing", "officially", "merge", "worthy", "but", "the", "old", "patch", "concepts", "can", "be", "use", "as", "be", "with", "a", "private", "merge", "patch", "rebase", "operation", "unless", "casperjs", "has", "diverged", "THAT", "much", "since", "I", "last", "saw", "it", "NUMBER", "There", "s", "an", "infinitely", "small", "amount", "of", "interest", "to", "hash", "out", "further", "development", "The", "main", "issue", "be", "in", "the", "debate", "about", "what", "style", "of", "implementation", "to", "follow", "NUMBER", "Unclear", "NUMBER", "I", "was", "probably", "gonna", "go", "for", "why", "not", "both", "options", "array", "object", "default", "configs", "available", "NUMBER", "Victor", "the", "time", "constraint", "On", "Tue", "Jun", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Pavel", "Puchkin", "notifications", "github", "NUMBER", "comwrote", "Any", "news", "on", "this", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "NUMBER", "Ok", "NUMBER", "Currently", "I", "use", "raising", "loadInProgress", "flag", "before", "calling", "click", "fill", "with", "submit", "and", "other", "as", "a", "workaround", "NUMBER", "I", "ve", "be", "setting", "the", "flag", "after", "the", "call", "to", "click", "fill", "I", "don", "t", "think", "it", "makes", "a", "difference", "but", "be", "there", "a", "race", "condition", "possible", "On", "Tue", "Jun", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Pavel", "Puchkin", "notifications", "github", "NUMBER", "comwrote", "Ok", "NUMBER", "Currently", "I", "use", "raising", "loadInProgress", "flag", "before", "calling", "click", "fillwith", "submit", "and", "other", "as", "a", "workaround", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "NUMBER", "There", "exists", "occasions", "where", "if", "the", "flag", "was", "not", "raise", "then", "depending", "on", "random", "execution", "ordering", "decided", "by", "the", "JavaScript", "or", "browser", "or", "processor", "there", "be", "a", "chance", "that", "program", "execution", "will", "misbehave", "NUMBER", "ie", "the", "next", "assertions", "randomly", "pass", "fail", "make", "unreliable", "automate", "test", "scripts", "NUMBER", "Even", "if", "you", "tried", "add", "tons", "of", "wait", "time", "there", "be", "still", "a", "chance", "to", "fail", "in", "make", "the", "correct", "assertion", "NUMBER", "It", "s", "bad", "on", "two", "levels", "artificial", "wait", "time", "slows", "down", "time", "to", "results", "and", "random", "pass", "fail", "means", "you", "couldn", "t", "rely", "on", "the", "automate", "test", "for", "test", "driven", "development", "NUMBER", "Commonly", "it", "s", "a", "problem", "that", "occur", "when", "clicking", "causes", "something", "like", "an", "Ajax", "request", "the", "order", "of", "operations", "be", "messed", "up", "NUMBER", "like", "the", "async", "nature", "of", "Ajax", "tends", "to", "wreck", "havoc", "NUMBER", "that", "has", "be", "my", "observation", "so", "far", "NUMBER", "I", "thought", "I", "already", "mention", "all", "this", "once", "before", "NUMBER", "So", "in", "order", "to", "fix", "this", "we", "have", "to", "think", "backwards", "compatible", "old", "buggy", "option", "improved", "default", "wait", "flag", "raising", "documentation", "NUMBER", "Victor", "via", "phone", "On", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "bjabes", "notifications", "github", "NUMBER", "com", "write", "I", "ve", "be", "setting", "the", "flag", "after", "the", "call", "to", "click", "fill", "I", "don", "t", "think", "it", "makes", "a", "difference", "but", "be", "there", "a", "race", "condition", "possible", "On", "Tue", "Jun", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Pavel", "Puchkin", "notifications", "github", "NUMBER", "comwrote", "Ok", "NUMBER", "Currently", "I", "use", "raising", "loadInProgress", "flag", "before", "calling", "click", "fillwith", "submit", "and", "other", "as", "a", "workaround", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "TAG", "LINK", "issuecomment", "NUMBER", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "NUMBER", "FWIW", "I", "discover", "this", "pull", "request", "after", "trying", "to", "figure", "out", "why", "my", "CasperJS", "test", "were", "fail", "on", "CircleCI", "but", "passing", "locally", "NUMBER", "CircleCI", "s", "VMs", "be", "slower", "but", "putting", "in", "a", "casper", "NUMBER", "wait", "didn", "t", "seem", "right", "of", "course", "NUMBER", "After", "seeing", "this", "PR", "I", "have", "inserted", "casper", "NUMBER", "loadInProgress", "true", "after", "all", "my", "casper", "NUMBER", "click", "s", "and", "everything", "works", "fine", "on", "CircleCI", "NUMBER", "I", "support", "this", "change", "as", "it", "would", "be", "a", "more", "compact", "syntax", "for", "what", "I", "ve", "do", "NUMBER", "Hi", "I", "have", "issue", "with", "casper", "NUMBER", "when", "i", "click", "to", "submit", "a", "form", "NUMBER", "So", "what", "s", "the", "correct", "workaround", "and", "what", "the", "current", "status", "of", "this", "issue", "This", "pull", "request", "be", "currently", "in", "limbo", "but", "you", "re", "welcome", "to", "either", "take", "up", "the", "where", "I", "left", "off", "get", "it", "up", "to", "date", "with", "the", "latest", "CasperJS", "or", "simply", "replicate", "the", "little", "change", "that", "I", "was", "trying", "to", "introduce", "NUMBER", "Why", "be", "it", "in", "limbo", "It", "s", "because", "I", "haven", "t", "yet", "continued", "tweaking", "the", "parameterization", "configuration", "aspects", "to", "a", "form", "that", "respects", "n", "NUMBER", "k", "NUMBER", "s", "liking", "NUMBER", "Why", "I", "haven", "t", "I", "do", "so", "yet", "That", "s", "because", "I", "haven", "t", "be", "actively", "use", "CasperJS", "since", "I", "initial", "discover", "and", "report", "this", "and", "thus", "motivation", "to", "continue", "improving", "and", "fix", "this", "has", "drop", "to", "near", "zero", "levels", "NUMBER", "Something", "like", "a", "workaround", "hint", "can", "be", "find", "here", "it", "address", "CasperJS", "NUMBER", "RC", "NUMBER", "but", "if", "you", "can", "confirm", "whether", "or", "not", "my", "observations", "still", "apply", "in", "CasperJS", "NUMBER", "and", "or", "the", "latest", "version", "s", "both", "here", "and", "in", "StackOverflow", "that", "would", "probably", "be", "helpful", "for", "the", "world", "LINK", "As", "of", "CasperJS", "NUMBER", "RC", "NUMBER", "a", "flaw", "exists", "where", "under", "certain", "time", "based", "circumstances", "the", "try", "to", "do", "next", "step", "method", "will", "be", "triggered", "before", "CasperJS", "had", "the", "time", "to", "raise", "either", "one", "of", "the", "loadInProgress", "or", "navigationRequested", "flags", "NUMBER", "The", "solution", "be", "to", "raise", "one", "of", "those", "flags", "before", "leaving", "any", "step", "where", "those", "flags", "be", "expected", "to", "be", "raise", "ie", "casper", "NUMBER", "click", "NUMBER", "This", "add", "a", "batch", "file", "for", "starting", "casperjs", "on", "Windows", "requires", "install", "Python", "in", "the", "PATH", "NUMBER", "It", "also", "change", "the", "use", "of", "os", "NUMBER", "exec", "to", "subprocess", "only", "on", "Windows", "so", "that", "the", "correct", "exit", "code", "be", "returned", "instead", "of", "starting", "casperjs", "in", "the", "background", "NUMBER", "One", "only", "has", "to", "add", "the", "casperjs", "bin", "folder", "to", "the", "PATH", "and", "run", "on", "Windows", "becomes", "as", "simple", "as", "set", "PHANTOMJS_EXECUTABLE", "Path", "To", "phantomjs", "NUMBER", "windows", "phantomjs", "NUMBER", "exe", "casperjs", "TAG", "Apologies", "if", "I", "m", "approaching", "this", "wrongly", "but", "I", "ve", "find", "myself", "write", "a", "lot", "of", "_if", "this", "NUMBER", "visible", "x", "else_", "statements", "when", "write", "test", "and", "thought", "it", "would", "be", "helpful", "to", "have", "a", "specific", "assertVisible", "method", "NUMBER", "I", "ve", "add", "the", "method", "to", "the", "tester", "NUMBER", "js", "module", "NUMBER", "I", "wasn", "t", "sure", "if", "it", "needed", "a", "specific", "test", "write", "as", "it", "s", "essentially", "just", "returns", "the", "result", "of", "casper", "NUMBER", "visible", "NUMBER", "Thanks", "Donovan", "This", "provides", "a", "loader", "similar", "in", "function", "to", "the", "Ruby", "and", "Python", "loader", "but", "setup", "for", "windows", "NUMBER", "After", "add", "phantomjs", "to", "the", "windows", "Path", "variable", "as", "well", "as", "casperjs", "batchbin", "to", "the", "windows", "Path", "variable", "this", "should", "work", "as", "it", "would", "on", "OSX", "NUMBER", "casperjs", "TAG", "Although", "a", "lot", "of", "our", "web", "engineers", "use", "OS", "X", "the", "vast", "majority", "of", "our", "DevQA", "prefer", "Windows", "so", "this", "be", "vital", "for", "enterprise", "inclusion", "NUMBER", "I", "can", "confirm", "this", "be", "work", "should", "be", "better", "than", "my", "simple", "script", "because", "it", "also", "handles", "phantomjs", "argument", "NUMBER", "n", "NUMBER", "k", "NUMBER", "Please", "pull", "this", "one", "I", "will", "close", "my", "request", "NUMBER", "Phantomjs", "installation", "additions", "Windows", "users", "Append", "C", "phantomjs", "to", "your", "PATH", "environment", "variable", "NUMBER", "Modify", "this", "path", "appropriately", "if", "you", "install", "PhantomJS", "to", "a", "different", "location", "NUMBER", "Casperjs", "installation", "additions", "Windows", "users", "Append", "C", "casperjs", "batchbin", "to", "your", "PATH", "environment", "variable", "NUMBER", "Modify", "this", "path", "appropriately", "if", "you", "install", "CasperJS", "to", "a", "different", "location", "NUMBER", "This", "will", "allow", "utils", "NUMBER", "options", "NUMBER", "scope", "element", "So", "all", "future", "finds", "and", "test", "will", "use", "that", "for", "the", "scope", "NUMBER", "Very", "useful", "for", "write", "test", "that", "look", "at", "a", "single", "widget", "on", "the", "page", "NUMBER", "This", "pull", "request", "fail", "LINK", "ci", "NUMBER", "org", "n", "NUMBER", "k", "NUMBER", "casperjs", "build", "NUMBER", "merge", "NUMBER", "f", "NUMBER", "f", "into", "NUMBER", "ed", "NUMBER", "e", "NUMBER", "NUMBER", "This", "pull", "request", "pass", "LINK", "ci", "NUMBER", "org", "n", "NUMBER", "k", "NUMBER", "casperjs", "build", "NUMBER", "merge", "d", "NUMBER", "c", "NUMBER", "e", "NUMBER", "into", "NUMBER", "ed", "NUMBER", "e", "NUMBER", "NUMBER", "When", "use", "casper", "NUMBER", "download", "with", "unicode", "characters", "\u00e9", "\u00e1", "\u00e7", "etc", "sometimes", "it", "just", "garbled", "the", "response", "data", "and", "other", "times", "the", "request", "completely", "fail", "NUMBER", "When", "replacing", "escape", "LINK", "L", "NUMBER", "by", "encodeURIComponent", "the", "issue", "be", "gone", "NUMBER", "Not", "sure", "if", "it", "covers", "all", "the", "cases", "but", "it", "works", "for", "me", "NUMBER", "In", "any", "case", "it", "could", "help", "someone", "else", "so", "here", "it", "goes", "the", "pull", "request", "NUMBER", "This", "pull", "request", "pass", "LINK", "ci", "NUMBER", "org", "n", "NUMBER", "k", "NUMBER", "casperjs", "build", "NUMBER", "merge", "NUMBER", "e", "NUMBER", "b", "into", "NUMBER", "ed", "NUMBER", "e", "NUMBER", "NUMBER", "When", "the", "page", "change", "location", "via", "javascript", "onLoadStarted", "be", "not", "call", "casper", "NUMBER", "en", "do", "not", "wait", "for", "the", "page", "to", "finish", "loading", "before", "going", "to", "the", "next", "step", "NUMBER", "This", "be", "most", "likely", "due", "to", "a", "bug", "in", "phantomjs", "NUMBER", "This", "pull", "request", "pass", "LINK", "ci", "NUMBER", "org", "n", "NUMBER", "k", "NUMBER", "casperjs", "build", "NUMBER", "merge", "dbb", "NUMBER", "dc", "NUMBER", "into", "NUMBER", "ed", "NUMBER", "e", "NUMBER", "NUMBER", "Calls", "the", "onclick", "on", "submit", "buttons", "before", "submit", "the", "form", "in", "casper", "NUMBER", "fill", "NUMBER", "I", "know", "some", "of", "these", "aren", "t", "technically", "submit", "buttons", "button", "input", "type", "button", "but", "I", "ve", "seen", "a", "site", "use", "input", "type", "button", "as", "a", "submit", "button", "in", "a", "form", "NUMBER", "LINK", "casperjs", "line", "NUMBER", "the", "stepTimeoutCheckInterval", "only", "checks", "the", "step", "number", "and", "do", "not", "take", "into", "account", "multiple", "test", "file", "NUMBER", "When", "run", "a", "series", "of", "suite", "the", "step", "numbers", "overlap", "NUMBER", "if", "self", "NUMBER", "ep", "stepNum", "needs", "to", "take", "account", "of", "which", "suite", "be", "currently", "run", "NUMBER", "This", "branch", "add", "three", "new", "assertions", "to", "the", "Tester", "module", "js", "Asserts", "that", "a", "given", "input", "field", "has", "the", "provide", "value", "NUMBER", "test", "NUMBER", "assertField", "input_name", "expected_value", "message", "js", "Asserts", "that", "given", "text", "exists", "in", "the", "provide", "selector", "NUMBER", "test", "NUMBER", "assertSelectorHasText", "selector", "text", "message", "js", "Asserts", "that", "given", "text", "do", "not", "exist", "in", "the", "provide", "selector", "NUMBER", "test", "NUMBER", "assertSelectorDoesntHaveText", "selector", "text", "message", "Passing", "test", "include", "NUMBER", "n", "NUMBER", "k", "NUMBER", "Good", "points", "will", "do", "NUMBER", "code", "update", "NUMBER", "NUMBER", "question", "Yes", "looks", "fine", "I", "ll", "be", "merge", "these", "soon", "I", "m", "a", "bit", "over", "busy", "right", "now", "NUMBER", "for", "assert", "Text", "NUMBER", "Can", "you", "add", "one", "that", "s", "simply", "Assert", "Text", "Sometimes", "you", "don", "t", "care", "about", "the", "selector", "NUMBER", "twinturbo", "you", "can", "already", "use", "assertTextExists", "if", "you", "don", "t", "care", "about", "the", "selector", "LINK", "tester", "NUMBER", "assertTextExists", "The", "colorized", "format", "produced", "invalid", "XML", "for", "casper", "NUMBER", "test", "NUMBER", "renderResults", "NUMBER", "Tweaked", "for", "format", "so", "that", "the", "variable", "part", "be", "presented", "by", "a", "colon", "helping", "to", "keep", "it", "distinct", "now", "that", "the", "colorized", "format", "be", "taken", "away", "NUMBER", "Broken", "XML", "was", "introduce", "by", "commit", "NUMBER", "f", "NUMBER", "d", "NUMBER", "e", "NUMBER", "c", "NUMBER", "e", "NUMBER", "ed", "NUMBER", "ee", "NUMBER", "b", "NUMBER", "fb", "NUMBER", "bc", "NUMBER", "e", "NUMBER", "Oh", "NUMBER", "Amended", "my", "email", "address", "force", "push", "my", "branch", "NUMBER", "Seems", "like", "github", "understood", "it", "and", "I", "didn", "t", "need", "to", "re", "create", "the", "pull", "request", "NUMBER", "Please", "pull", "NUMBER", "a", "NUMBER", "b", "NUMBER", "for", "the", "right", "history", "NUMBER", "Next", "time", "I", "ll", "know", "that", "I", "won", "t", "have", "to", "write", "an", "issue", "before", "make", "the", "patch", "Helper", "to", "easilly", "access", "a", "response", "header", "from", "anywhere", "NUMBER", "Yay", "it", "would", "be", "even", "easier", "NUMBER", "And", "shorter", "to", "write", "NUMBER", "And", "less", "ambiguous", "than", "retrieving", "casper", "NUMBER", "currentResponse", "NUMBER", "Okay", "push", "a", "cleaner", "API", "and", "case", "insensitive", "retrieval", "NUMBER", "Yep", "indeed", "NUMBER", "I", "may", "do", "that", "in", "another", "PR", "especially", "as", "I", "ve", "not", "digged", "too", "much", "in", "steps", "and", "it", "seems", "there", "be", "some", "subtle", "stuff", "with", "history", "etc", "NUMBER", "Finally", "put", "the", "response", "in", "the", "step", "NUMBER", "As", "expected", "browsing", "back", "and", "forward", "do", "not", "match", "with", "currentResponse", "values", "NUMBER", "It", "would", "imply", "to", "save", "the", "whole", "response", "state", "status", "etc", "NUMBER", "Do", "you", "need", "anything", "more", "for", "this", "PR", "How", "do", "you", "access", "the", "response", "headers", "with", "the", "latest", "pull", "request", "Nice", "library", "thanks", "for", "the", "huge", "work", "This", "pull", "request", "implement", "test", "and", "support", "for", "the", "settings", "argument", "in", "thenOpen", "NUMBER", "This", "allows", "you", "to", "do", "such", "things", "as", "POST", "the", "results", "of", "your", "scrape", "to", "a", "URL", "of", "your", "choice", "NUMBER", "Combined", "with", "the", "web", "server", "introduce", "in", "phantomjs", "NUMBER", "you", "should", "be", "able", "achieve", "half", "duplex", "communications", "between", "any", "other", "server", "client", "that", "support", "RESTful", "communications", "NUMBER", "I", "add", "the", "test", "to", "open", "NUMBER", "js", "but", "feel", "free", "to", "move", "them", "to", "thenopen", "NUMBER", "js", "NUMBER", "HUGE", "CAVEAT", "There", "be", "a", "bug", "in", "the", "test", "suite", "that", "I", "have", "no", "idea", "how", "you", "want", "to", "fix", "NUMBER", "Currently", "when", "you", "run", "the", "test", "suite", "there", "be", "a", "filter", "in", "run", "NUMBER", "js", "to", "point", "casper", "NUMBER", "open", "to", "a", "local", "file", "however", "the", "underlying", "phantomjs", "implementation", "of", "page", "NUMBER", "openUrl", "be", "able", "to", "modify", "that", "file", "when", "the", "method", "be", "PUT", "NUMBER", "This", "means", "that", "the", "test", "for", "thenOpen", "or", "even", "an", "open", "inside", "a", "casper", "NUMBER", "en", "fn", "callback", "will", "modify", "mangle", "the", "local", "file", "which", "in", "the", "case", "of", "the", "open", "test", "be", "test", "site", "index", "NUMBER", "html", "NUMBER", "The", "problem", "with", "mangling", "this", "file", "be", "that", "it", "will", "cause", "many", "subsequent", "test", "to", "fail", "NUMBER", "Run", "the", "test", "quite", "and", "then", "run", "git", "diff", "to", "see", "the", "modifications", "performed", "NUMBER", "I", "don", "t", "know", "how", "you", "want", "to", "fix", "this", "bug", "NUMBER", "Locally", "I", "solve", "the", "bug", "by", "change", "the", "file", "permissions", "to", "NUMBER", "with", "chmod", "however", "git", "doesn", "t", "support", "file", "permissions", "on", "file", "so", "this", "isn", "t", "a", "transferrable", "solution", "NUMBER", "The", "simplest", "approach", "be", "to", "add", "a", "few", "lines", "to", "the", "test", "runner", "that", "sets", "that", "file", "as", "read", "only", "NUMBER", "This", "be", "not", "the", "best", "solution", "just", "the", "easiest", "NUMBER", "Another", "approach", "be", "to", "perform", "a", "teardown", "that", "restores", "that", "file", "after", "the", "open", "NUMBER", "js", "test", "file", "be", "run", "NUMBER", "Yet", "another", "approach", "be", "to", "actually", "run", "a", "web", "server", "use", "node", "NUMBER", "js", "or", "python", "that", "serves", "the", "test", "site", "file", "NUMBER", "No", "prob", "NUMBER", "Thank", "you", "for", "casper", "NUMBER", "js", "NUMBER", "It", "s", "be", "super", "useful", "NUMBER", "I", "did", "get", "thenOpen", "to", "work", "for", "posting", "the", "results", "of", "a", "test", "back", "to", "my", "node", "server", "so", "I", "reckon", "that", "together", "with", "the", "build", "in", "web", "server", "in", "phantomjs", "we", "now", "have", "full", "two", "way", "communication", "that", "isn", "t", "dependent", "on", "stdio", "NUMBER", "It", "d", "be", "nice", "if", "we", "could", "get", "access", "to", "get", "qt", "s", "require", "method", "to", "fallback", "to", "npm", "when", "it", "cannot", "find", "the", "build", "in", "ones", "that", "phantom", "comes", "with", "NUMBER", "it", "should", "look", "first", "for", "a", "qt", "require", "then", "fallback", "to", "npm", "then", "fallback", "to", "NUMBER", "node_modules", "then", "fallback", "to", "a", "relative", "path", "string", "e", "NUMBER", "g", "NUMBER", "require", "NUMBER", "lib", "underscore", "NUMBER", "js", "binds", "all", "possible", "events", "although", "some", "events", "be", "not", "triggered", "yet", "this", "script", "creates", "events_most", "NUMBER", "js", "script", "within", "events_all", "folder", "separate", "directory", "helps", "to", "avoid", "cluttering", "of", "samples", "folder", "lengthy", "comment", "be", "include", "at", "the", "top", "of", "the", "page", "NUMBER", "script", "runs", "fine", "few", "improvement", "I", "wish", "to", "do", "be", "explained", "in", "the", "comment", "section", "I", "figured", "out", "how", "to", "turn", "this", "into", "a", "module", "I", "will", "re", "submit", "when", "I", "convert", "the", "code", "NUMBER", "I", "will", "keep", "the", "pull", "request", "here", "meanwhile", "in", "case", "if", "it", "be", "useful", "to", "anyone", "NUMBER", "I", "took", "out", "the", "creator", "script", "I", "thought", "it", "may", "cause", "unnecessary", "load", "on", "your", "servers", "NUMBER", "As", "a", "result", "of", "modularization", "the", "example", "became", "a", "lot", "shorter", "and", "clear", "NUMBER", "I", "have", "modify", "casperjs", "NUMBER", "gemspec", "for", "reading", "VERSION", "from", "package", "NUMBER", "json", "file", "NUMBER", "And", "I", "test", "it", "be", "okay", "NUMBER", "Pls", "have", "a", "look", "Issue", "NUMBER", "Numerous", "web", "applications", "we", "develop", "make", "extensive", "use", "of", "HTML", "NUMBER", "data", "attributes", "NUMBER", "As", "this", "be", "a", "pretty", "standard", "use", "having", "a", "way", "to", "quickly", "query", "for", "them", "could", "be", "quite", "valuable", "and", "was", "valuable", "for", "me", "NUMBER", "Issue", "NUMBER", "For", "our", "CI", "environment", "having", "preemptive", "control", "of", "the", "exit", "code", "be", "a", "big", "win", "NUMBER", "To", "enable", "that", "knowledge", "about", "failures", "and", "pass", "should", "be", "available", "before", "the", "test", "results", "culminate", "NUMBER", "Checking", "the", "testResults", "object", "would", "be", "bad", "as", "that", "has", "nothing", "that", "would", "suggest", "it", "s", "final", "NUMBER", "I", "needed", "to", "simulate", "keyboard", "events", "to", "test", "an", "autocomplete", "field", "so", "I", "copy", "pasted", "mouseEvent", "to", "create", "keyboardEvent", "NUMBER", "Works", "for", "me", "but", "need", "more", "test", "I", "know", "NUMBER", "Here", "be", "some", "test", "but", "in", "fact", "initKeyboardEvent", "seems", "buggy", "in", "Webkit", "NUMBER", "My", "patch", "works", "for", "me", "but", "may", "fail", "for", "other", "use", "cases", "so", "I", "don", "t", "know", "if", "pulling", "this", "be", "a", "good", "idea", "NUMBER", "Yep", "this", "was", "enough", "for", "my", "needs", "but", "seems", "really", "buggy", "NUMBER", "It", "triggers", "the", "event", "listeners", "but", "with", "lots", "of", "side", "effect", "NUMBER", "I", "have", "no", "time", "to", "look", "deeper", "so", "I", "will", "keep", "the", "patch", "as", "a", "local", "extend", "in", "my", "test", "file", "NUMBER", "For", "the", "record", "here", "s", "a", "relate", "Webkit", "bug", "LINK", "_bug", "NUMBER", "cgi", "id", "NUMBER", "How", "be", "this", "feature", "going", "I", "m", "looking", "forward", "to", "handle", "keyboard", "events", "with", "casperJS", "NUMBER", "There", "s", "a", "fine", "PR", "awaiting", "to", "be", "merge", "upstream", "LINK", "I", "think", "LINK", "be", "merge", "NUMBER", "How", "be", "this", "feature", "going", "n", "NUMBER", "k", "NUMBER", "you", "rock", "thanks", "I", "can", "t", "find", "the", "commit", "add", "support", "for", "this", "n", "NUMBER", "k", "NUMBER", "NUMBER", "I", "d", "appreciate", "a", "link", "NUMBER", "Thanks", "in", "advance", "NUMBER", "n", "NUMBER", "k", "NUMBER", "Is", "there", "going", "to", "be", "Casper", "NUMBER", "js", "usage", "of", "this", "too", "For", "example", "fill", "be", "not", "triggering", "onkeyup", "AFAIK", "NUMBER", "Will", "there", "be", "an", "option", "to", "use", "events", "to", "enter", "the", "data", "instead", "Thanks", "NUMBER", "I", "don", "t", "see", "the", "keyboardEvent", "method", "in", "RC", "NUMBER", "of", "casper", "NUMBER", "I", "see", "it", "has", "be", "merge", "to", "master", "though", "NUMBER", "When", "can", "we", "expect", "to", "see", "this", "in", "a", "release", "Just", "an", "update", "for", "others", "trying", "to", "look", "up", "phantomjs", "native", "keyboard", "events", "LINK", "Reference", "WebPage", "wiki", "webpage", "sendEvent", "TAG", "TAG", "An", "invisible", "element", "could", "have", "empty", "style", "and", "yet", "be", "invisible", "if", "set", "via", "via", "css", "NUMBER", "e", "NUMBER", "g", "TAG", "div", "visibility", "hidden", "TAG", "TAG", "TAG", "NUMBER", "solution", "look", "at", "element", "computed", "styles", "both", "visibility", "and", "display", "kind", "of", "awkward", "to", "keep", "this", "backwards", "compatible", "or", "any", "other", "keyword", "with", "a", "billion", "or", "two", "hits", "NUMBER", "Try", "this", "casperjs", "samples", "googlematch", "NUMBER", "js", "banana", "apple", "orange", "Let", "the", "match", "begin", "between", "banana", "apple", "orange", "banana", "NUMBER", "apple", "NUMBER", "orange", "NUMBER", "Winner", "be", "banana", "with", "NUMBER", "results", "This", "be", "kind", "of", "a", "heavy", "revision", "but", "I", "ve", "checked", "every", "samples", "and", "compared", "coffee", "js", "version", "NUMBER", "I", "ve", "made", "change", "in", "order", "to", "have", "cleaner", "js", "code", "almost", "as", "it", "would", "have", "be", "if", "coffee", "bc", "sample", "NUMBER", "coffee", "was", "run", "Tahnk", "you", "nicolas", "n", "NUMBER", "k", "NUMBER", "ok", "I", "ve", "moved", "var", "declaration", "to", "the", "top", "of", "scripts", "I", "think", "my", "PR", "be", "now", "mergeable", "what", "do", "you", "think", "of", "it", "ping", "n", "NUMBER", "k", "NUMBER", "ok", "n", "NUMBER", "k", "NUMBER", "I", "ll", "revise", "this", "PR", "tomorrow", "cheer", "Sorry", "I", "won", "t", "have", "time", "before", "next", "week", "NUMBER", "Because", "of", "mu", "work", "and", "mother", "s", "day", "NUMBER", "Cheer", "n", "NUMBER", "k", "NUMBER", "mother", "s", "day", "be", "over", "NUMBER", "can", "yoiu", "check", "my", "latest", "change", "and", "accept", "this", "PR", "n", "NUMBER", "k", "NUMBER", "I", "don", "t", "hate", "you", "for", "now", "I", "think", "now", "it", "be", "mergeable", "hope", "so", "cheer", "buddy", "Tu", "es", "le", "bienvenue", "This", "patch", "fix", "a", "bug", "where", "casperjs", "python", "launcher", "process", "won", "t", "pass", "along", "kill", "signals", "to", "the", "phantomjs", "subprocess", "NUMBER", "This", "patch", "works", "by", "use", "an", "exec", "system", "call", "which", "causes", "the", "phantomjs", "subprocess", "to", "completely", "replace", "the", "casperjs", "parent", "process", "while", "maintaining", "the", "same", "pid", "NUMBER", "This", "patch", "also", "has", "the", "add", "benefit", "of", "saving", "NUMBER", "megs", "or", "so", "of", "memory", "because", "the", "python", "process", "be", "discarded", "NUMBER", "Thank", "you", "in", "advance", "for", "merge", "this", "and", "I", "hope", "you", "ll", "forgive", "me", "for", "the", "hyperbolic", "title", "Thank", "you", "for", "make", "this", "lovely", "project", "This", "be", "a", "set", "of", "minimal", "change", "to", "support", "a", "wider", "range", "of", "mouse", "events", "e", "NUMBER", "g", "NUMBER", "mousedown", "mouseover", "etc", "NUMBER", "I", "use", "the", "same", "approach", "as", "click", "had", "previously", "try", "a", "client", "side", "synthetic", "event", "then", "try", "a", "QtWebKit", "event", "and", "I", "converted", "the", "exist", "casper", "NUMBER", "click", "method", "to", "use", "the", "generalized", "approach", "NUMBER", "Sure", "but", "see", "my", "earlier", "email", "to", "the", "list", "I", "have", "a", "Windows", "machine", "and", "the", "way", "the", "test", "be", "currently", "set", "up", "none", "of", "the", "paths", "work", "for", "Windows", "so", "I", "haven", "t", "be", "able", "to", "successfully", "run", "the", "test", "NUMBER", "I", "ll", "see", "if", "there", "s", "a", "reasonable", "way", "to", "get", "be", "run", "on", "my", "machine", "and", "then", "I", "m", "happy", "to", "write", "test", "NUMBER", "Okay", "I", "get", "the", "test", "run", "for", "some", "reason", "probably", "due", "to", "Window", "s", "forward", "slashes", "the", "file", "urls", "weren", "t", "work", "NUMBER", "And", "it", "looks", "like", "this", "set", "of", "change", "introduce", "some", "issue", "in", "the", "NUMBER", "click", "edge", "cases", "so", "please", "hold", "off", "on", "the", "pull", "and", "I", "will", "fix", "and", "add", "some", "commit", "and", "test", "NUMBER", "OK", "I", "fix", "the", "issue", "and", "add", "some", "unit", "test", "NUMBER", "I", "can", "add", "documentation", "too", "but", "I", "won", "t", "be", "able", "to", "do", "it", "right", "away", "NUMBER", "There", "s", "a", "slight", "issue", "here", "noted", "in", "the", "test", "that", "there", "s", "a", "mismatch", "between", "the", "mouse", "event", "types", "you", "can", "dispatch", "synthetically", "on", "the", "client", "and", "the", "PhantomJS", "support", "events", "NUMBER", "I", "add", "a", "PhantomJS", "feature", "request", "LINK", "NUMBER", "to", "support", "this", "but", "as", "it", "stands", "if", "you", "send", "a", "mouseover", "or", "mouseout", "event", "and", "it", "fail", "or", "preventDefault", "be", "call", "there", "s", "no", "native", "fallback", "NUMBER", "I", "put", "a", "comment", "to", "this", "effect", "in", "my", "test", "NUMBER", "I", "m", "also", "seeing", "fail", "test", "on", "the", "formfill", "NUMBER", "js", "suite", "because", "this", "NUMBER", "click", "input", "type", "submit", "isn", "t", "work", "NUMBER", "This", "test", "suite", "fail", "for", "me", "on", "the", "master", "branch", "as", "well", "though", "so", "if", "it", "s", "a", "problem", "I", "don", "t", "think", "it", "s", "one", "I", "cause", "NUMBER", "Should", "still", "be", "valid", "NUMBER", "The", "mismatch", "between", "synthetic", "events", "and", "PhantomJS", "events", "be", "unavoidable", "until", "they", "update", "PhantomJS", "but", "at", "least", "add", "the", "synthetic", "events", "gives", "a", "wider", "range", "of", "test", "possibilities", "NUMBER", "As", "I", "noted", "I", "m", "not", "sure", "whether", "the", "error", "in", "the", "unit", "test", "be", "due", "to", "anything", "in", "my", "commit", "NUMBER", "So", "if", "the", "test", "run", "green", "for", "you", "this", "should", "be", "good", "to", "pull", "NUMBER", "this", "be", "useful", "in", "cases", "where", "there", "be", "hidden", "form", "field", "you", "need", "to", "grab", "via", "something", "like", "var", "form_data", "this", "NUMBER", "evaluate", "function", "return", "jQuery", "form", "NUMBER", "serialize", "var", "base", "NUMBER", "contents", "this", "NUMBER", "base", "NUMBER", "encode", "form_url", "POST", "form_data", "A", "few", "of", "the", "change", "were", "probably", "change", "the", "British", "spelling", "of", "some", "words", "to", "the", "US", "way", "but", "other", "than", "that", "the", "corrections", "be", "all", "pretty", "legitimate", "NUMBER", "My", "pleasure", "A", "few", "of", "the", "change", "were", "probably", "change", "the", "British", "spelling", "of", "some", "words", "to", "the", "US", "way", "but", "other", "than", "that", "the", "corrections", "be", "all", "pretty", "legitimate", "NUMBER", "This", "time", "on", "the", "main", "README", "NUMBER", "md", "file", "I", "don", "t", "think", "it", "s", "possible", "to", "have", "just", "one", "PR", "with", "a", "commit", "from", "master", "and", "one", "from", "a", "submodule", "that", "s", "why", "there", "s", "two", "commit", "this", "one", "for", "casperjs", "and", "NUMBER", "for", "the", "docs", "submodule", "NUMBER", "To", "have", "a", "look", "at", "the", "resulting", "README", "NUMBER", "md", "check", "my", "fork", "LINK", "readme", "second", "attempt", "with", "correctly", "formated", "markdown", "this", "time", "_facepalm_", "How", "can", "I", "do", "that", "It", "s", "not", "the", "docs", "that", "I", "modify", "it", "s", "the", "README", "NUMBER", "md", "NUMBER", "You", "can", "have", "a", "look", "at", "the", "result", "on", "my", "fork", "LINK", "pages", "readme", "See", "docs", "on", "modify", "method", "for", "desired", "order", "NUMBER", "That", "s", "great", "I", "look", "forward", "to", "seeing", "it", "NUMBER", "It", "s", "weird", "none", "of", "the", "test", "were", "passing", "NUMBER", "Were", "there", "assumptions", "baked", "in", "about", "the", "root", "directory", "or", "something", "I", "figured", "it", "was", "a", "decent", "exercise", "to", "use", "the", "module", "to", "read", "the", "test", "from", "casper", "s", "test", "directory", "and", "validate", "that", "all", "parent", "file", "were", "returned", "and", "sorted", "before", "any", "child", "file", "NUMBER", "Add", "context", "to", "both", "tester", "NUMBER", "assertEval", "and", "tester", "NUMBER", "assertEvalEquals", "that", "just", "pass", "through", "to", "casper", "NUMBER", "evaluate", "NUMBER", "Sorry", "for", "the", "extra", "space", "still", "get", "the", "hang", "of", "clean", "pull", "request", "To", "be", "honest", "I", "just", "want", "to", "be", "a", "contributor", "by", "add", "a", "g", "D", "Hi", "What", "do", "you", "think", "of", "use", "script", "file", "names", "as", "class", "names", "in", "JUnit", "xml", "report", "I", "think", "it", "helps", "readability", "of", "the", "results", "for", "example", "in", "Jenkins", "report", "NUMBER", "Mikko", "Ok", "thanks", "I", "have", "add", "the", "ability", "to", "pass", "a", "request", "method", "and", "request", "data", "to", "the", "base", "NUMBER", "encode", "method", "NUMBER", "This", "allows", "a", "user", "to", "post", "data", "to", "a", "url", "and", "download", "the", "resulting", "data", "NUMBER", "Sorry", "that", "the", "indenting", "be", "messed", "up", "NUMBER", "That", "should", "do", "it", "NUMBER", "Thanks", "for", "considering", "merge", "NUMBER", "I", "have", "find", "it", "a", "needed", "feature", "in", "order", "to", "do", "what", "I", "need", "to", "do", "with", "Casper", "NUMBER", "Adds", "a", "feature", "to", "check", "to", "see", "if", "a", "remote", "element", "be", "visible", "and", "wait", "until", "wait", "while", "methods", "that", "can", "be", "use", "to", "control", "process", "flow", "NUMBER", "For", "example", "coffeescript", "casper", "NUMBER", "en", "click", "a", "ajaxy", "link", "waitWhileSelector", "img", "ajax", "spinner", "ajax", "load", "be", "complete", "do", "something", "with", "the", "page", "As", "i", "mention", "in", "issue", "NUMBER", "I", "was", "looking", "for", "a", "way", "to", "have", "more", "logs", "to", "see", "what", "was", "going", "on", "between", "phantomjs", "and", "the", "server", "NUMBER", "So", "here", "it", "be", "NUMBER", "I", "ve", "named", "it", "verbose", "because", "it", "tells", "a", "LOT", "of", "things", "For", "each", "request", "received", "it", "shows", "something", "like", "verbose", "phantom", "received", "LINK", "OK", "null", "NUMBER", "Date", "Wed", "NUMBER", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Server", "Apache", "NUMBER", "Debian", "X", "Powered", "By", "PHP", "NUMBER", "NUMBER", "b", "NUMBER", "Expires", "Thu", "NUMBER", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Cache", "Control", "no", "store", "no", "cache", "must", "revalidate", "post", "check", "NUMBER", "pre", "check", "NUMBER", "Pragma", "no", "cache", "Vary", "Accept", "Encoding", "Content", "Encoding", "gzip", "Keep", "Alive", "timeout", "NUMBER", "max", "NUMBER", "Connection", "Keep", "Alive", "Content", "Type", "text", "html", "charset", "utf", "NUMBER", "Like", "it", "thanks", "It", "s", "be", "helpful", "for", "me", "not", "be", "sure", "if", "something", "was", "loading", "before", "having", "the", "error", "message", "from", "phantom", "new", "resource", "function", "I", "ll", "have", "a", "look", "at", "this", "NUMBER", "I", "change", "the", "ways", "waits", "behaves", "NUMBER", "I", "just", "push", "a", "version", "that", "fix", "your", "test", "NUMBER", "I", "ve", "also", "commit", "another", "test", "that", "contains", "nested", "waits", "NUMBER", "This", "test", "currently", "doesn", "t", "pass", "completely", "but", "I", "m", "work", "on", "it", "All", "test", "be", "run", "again", "NUMBER", "I", "ve", "change", "way", "steps", "that", "be", "dynamically", "created", "at", "runtime", "be", "handle", "NUMBER", "Now", "these", "steps", "be", "inserted", "before", "the", "next", "step", "and", "not", "at", "the", "end", "of", "the", "queue", "NUMBER", "Thanks", "Looking", "forward", "to", "the", "modularized", "casper", "NUMBER", "can", "we", "use", "waitForSelector", "in", "tester", "module", "it", "giving", "this", "error", "NUMBER", "FAIL", "Wait", "timeout", "occured", "NUMBER", "ms", "type", "uncaughtError", "file", "testfinal", "NUMBER", "js", "NUMBER", "error", "Wait", "timeout", "occured", "NUMBER", "ms", "TimedOutError", "Wait", "timeout", "occured", "NUMBER", "ms", "at", "test_onWaitTimeout", "C", "casperjs", "modules", "tester", "NUMBER", "js", "NUMBER", "at", "_check", "C", "casperjs", "modules", "casper", "NUMBER", "js", "NUMBER", "stack", "not", "provide", "Hi", "I", "add", "an", "example", "that", "searches", "for", "an", "arbitrary", "search", "term", "and", "processes", "up", "to", "the", "first", "NUMBER", "pages", "of", "results", "NUMBER", "Might", "be", "useful", "for", "someone", "If", "there", "be", "multiple", "elements", "in", "the", "DOM", "I", "would", "like", "to", "be", "able", "to", "give", "multiple", "values", "in", "the", "fill", "method", "NUMBER", "Example", "LINK", "checkbox", "element", "name", "typebiens", "how", "can", "i", "use", "this", "i", "tried", "coffeescript", "casper", "NUMBER", "en", "fill", "form", "foo", "true", "and", "casper", "NUMBER", "en", "fill", "form", "foo", "true", "true", "true", "but", "without", "success", "NUMBER", "i", "couldn", "t", "find", "this", "in", "the", "documentation", "either", "NUMBER", "cheer", "mark", "i", "know", "this", "pull", "request", "be", "a", "year", "old", "and", "casper", "change", "a", "lot", "during", "this", "time", "NUMBER", "be", "this", "feature", "still", "available", "or", "do", "I", "need", "to", "use", "a", "workaround", "for", "this", "my", "method", "to", "check", "just", "one", "checkbox", "be", "coffeescript", "casper", "NUMBER", "en", "document", "NUMBER", "querySelector", "input", "name", "foo", "NUMBER", "setAttribute", "checked", "true", "but", "my", "test", "with", "querySelectorAll", "and", "forEach", "did", "not", "work", "out", "NUMBER", "thanks", "for", "your", "help", "i", "also", "find", "out", "that", "you", "can", "use", "jquery", "in", "thenEvaluate", "coffeescript", "casper", "NUMBER", "enEvaluate", "input", "name", "foo", "NUMBER", "prop", "checked", "true", "works", "great", "and", "be", "readable", "cheer", "This", "way", "the", "script", "can", "stop", "gracefully", "For", "example", "it", "s", "possible", "to", "log", "when", "a", "website", "doesn", "t", "respond", "quickly", "enough", "thanks", "to", "the", "onDie", "configuration", "option", "NUMBER", "Yep", "that", "s", "exactly", "what", "I", "was", "looking", "for", "My", "solution", "was", "just", "a", "poor", "version", "of", "yours", "especially", "as", "it", "allows", "to", "customize", "the", "behavior", "on", "timeout", "instead", "of", "relying", "on", "the", "generic", "onDie", "behavior", "NUMBER", "Thanks", "You", "will", "probably", "think", "I", "abuse", "but", "it", "d", "be", "great", "to", "also", "have", "the", "location", "pass", "to", "the", "callback", "like", "this", "if", "isType", "self", "NUMBER", "options", "NUMBER", "onTimeout", "function", "self", "NUMBER", "options", "NUMBER", "onTimeout", "self", "location", "Ok", "I", "ll", "do", "this", "way", "but", "in", "my", "fork", "LINK", "I", "ve", "simply", "add", "the", "location", "and", "it", "works", "or", "seems", "to", "in", "my", "use", "case", "NUMBER", "Yes", "I", "understand", "NUMBER", "The", "problem", "also", "occur", "if", "the", "location", "has", "do", "a", "redirection", "that", "doesn", "t", "respond", "NUMBER", "I", "ve", "add", "a", "thenClick", "function", "to", "solve", "the", "following", "problem", "NUMBER", "Let", "s", "imagine", "that", "I", "test", "a", "website", "page", "like", "this", "I", "open", "the", "website", "I", "click", "on", "a", "button", "with", "opens", "a", "div", "content", "loaded", "with", "Ajax", "call", "I", "want", "to", "click", "on", "a", "link", "in", "this", "div", "which", "will", "open", "a", "new", "page", "I", "didn", "t", "find", "a", "way", "to", "do", "it", "without", "the", "step", "I", "ve", "add", "NUMBER", "My", "js", "script", "be", "now", "javascript", "casper", "NUMBER", "art", "LINK", "function", "self", "self", "NUMBER", "click", "a", "popin", "self", "NUMBER", "waitForSelector", "div", "NUMBER", "popin", "content", "function", "self", "self", "NUMBER", "test", "NUMBER", "assert", "true", "div", "NUMBER", "popin", "content", "has", "appeared", "as", "expected", "resumeTests", "self", "function", "self", "self", "NUMBER", "test", "NUMBER", "assert", "false", "div", "NUMBER", "popin", "content", "has", "appeared", "as", "expected", "function", "resumeTests", "self", "self", "NUMBER", "enClick", "a", "in_popin", "true", "function", "self", "self", "NUMBER", "test", "NUMBER", "assert", "true", "at", "last", "I", "can", "continue", "my", "test", "add", "a", "way", "for", "setting", "the", "viewportSize", "and", "some", "debug", "log", "message", "when", "capturing"], "text_count": [0, 9360, 2336, 1093, 746, 73, 804, 0, 40, 1241, 1368, 2398, 1349, 915, 1032, 358, 0, 0, 0, 0, 2886, 835, 423, 286, 500, 453, 0, 0, 0, 0, 5359, 3409, 2036, 80, 1109, 403, 0, 0, 0, 0, 6122, 45, 2371, 2211, 1887, 0, 0, 0, 0, 0, 1639, 751, 785, 427, 628, 412, 647, 0, 0, 0, 4712, 373, 3794, 267, 0, 0, 0, 0, 0, 0, 3944, 390, 2948, 1487, 401, 0, 0, 0, 0, 0, 5863, 2630, 586, 2401, 387, 344, 0, 0, 0, 0, 474, 1955, 215, 0, 0, 0, 0, 0, 0, 0, 5698, 1413, 3113, 1330, 0, 0, 0, 0, 0, 0, 10898, 20789, 362, 977, 201, 429, 0, 0, 0, 0, 25982, 104, 19764, 294, 4582, 5514]}]