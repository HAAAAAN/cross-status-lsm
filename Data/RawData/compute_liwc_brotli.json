[{"repo": "brotli", "type": "elite", "title": "", "number of text": 402, "text": "  1) False positive; Coverity Scan fails to analyse workflow; it is guaranteed that at the stage when `ProcessCommands` is invoked ring-buffer is allocated.\r\n2) Same.\r\n\r\nTake a look at `BrotliEnsureRingBuffer` and its invocation points in the workflow.  This is a known problem. We work on this topic. Next brotli version will support more (all) languages.  Thanks  Going to dig into this problem soon. What build system do you use? This works for me:\r\n```\r\nmkdir out\r\ncd out\r\n../configure-cmake --disable-debug\r\ncmake ..\r\nmake -j8\r\nmake test\r\nmake install\r\ncd ..\r\n```\r\nAfter this include/library not found errors do not occur:\r\n```\r\ngo build ./go/cbrotli\r\n```  Going to investigate and extend binary downloads soon.\r\nYes, JNI is always a pain.\r\nBazel was a big hope, as it, at least, works both on OSX and linux (still not on windows)... but even on those platforms, JNI requires hacks: https://github.com/bazelbuild/bazel/issues/3079 Working on this.\r\nIn the meanwhile, just to be sure: have you built jni library, or just brotli common/dec/enc libraries? Currently only Bazel builds it, so CMake/premake/make is not enough... Those libraries are not enough. Going to add \"all-in-one\" statically linked `brotli_jni.dll` as soon as convince bazel to run tests properly on Appveyor. PR #612 adds brotli_jni.dll publishing. Could you try if this precompiled [brotli_jni.dll](https://bintray.com/eustas/brotli/download_file?file_path=brotli-win-bazel-jni-2017-10-11.zip) works for you, please. Thanks.  To make API concise and clear for v1.0.0 release.\r\nInternally we are developing a better alternative, and will public it soon. v1.0 means \"stable\". All the existing API are stable and cover the most useful use-cases.\r\nIn future versions (v1.x), we plan to add more functions, but the API that is released in v1.0 will be untouched.  Surely. I'll update README.md to reflect that default build with configure-cmake is \"Debug\".\r\nIt is mentioned inside configure-cmake, that this is done to reflect default automake behaviour...  Hello.\r\n Most distros pick up v0.6 release of brotli, and in this version CLI tool was named \"bro\". In tip-of-tree version it is \"brotli\". In one week (hopefully) brotli v1.0 will be released, and distros will start picking up brotli with fixed name. Absolutely no worries and thanks for the heads-up.  Releasing executable is a slippery road - there are tons of different OS / CPUs. Releasing for some of combinations would make people unhappy, that their favorite combination is not supported.\r\nThat is why binaries are released via appropriate binary distribution systems, e.g. HomeBrew or PyPI or linux distros.\r\nIf you have some specific OS / CPU in mind, we would be glad to try to support specific binary distribution system. After #596 windows binaries will be accessible as build artifacts. Latest build could be taken from here: https://bintray.com/eustas/brotli/bin/snapshot/view/files?sort=name&order=asc#files/\r\nNext release will contain those artifacts as well.  Hello, Paul.\r\n\r\n Unfortunately, I haven't found any information on how non-gmail users can sign CLA. Perhaps, one possible way could be \"Corparate CLA\", but it seems to be more difficult... Travis seems to be unhappy: https://travis-ci.org/google/brotli/jobs/266735082 Included into ##598  But it does so =) since #555 (29/05/2017)  Thanks for the report. Going to investigate/fix soon Could you provide sample CircleCI configuration, please? Hi. Could you try this once again? Now both static and shared libraries are built.\r\ncgo.go will hook up with shared libraries, though.  Going to investigate it on Monday. Haven't done investivation, just inspected the code.\r\nThis loop looks suspicious: https://github.com/MayhemYDG/iltorb/blob/master/src/enc/stream_encode_worker.cc#L25\r\nSee - no output space is given; if it happens, that internal brotli output buffer is full - it can't continue processing... so it becomes infinite loop...\r\nOuter wrapper also doesn't care, if chunk is too big to make \"StreamEncodeWorker\" choke...  Could this reside not in root directory?  Thanks for the report, going to investigate it ASAP.\r\nI would be grateful, if you attach an example of such file.\r\nAlso, target CPU model, compiler version and compilation options would help. Failed to reproduce on my Mac / linux workstation =(\r\nCould you, please, attach results of `cc -v` and `env` for mac / linux.\r\nI feel that something could go wrong about bitness / signedness, but without repro can't test it / fix it. In fresh debian:sid in docker on mac all is clean:\r\n```\r\nroot@974f56b46700:/clients/brotli# bin/brotli -Zfk balls.txt \r\nroot@974f56b46700:/clients/brotli# env\r\nHOSTNAME=974f56b46700\r\nPWD=/clients/brotli\r\nHOME=/root\r\nno_proxy=*.local, 169.254/16\r\nTERM=xterm\r\nSHLVL=1\r\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r\n_=/usr/bin/env\r\nOLDPWD=/clients\r\nroot@974f56b46700:/clients/brotli# cc -v\r\nUsing built-in specs.\r\nCOLLECT_GCC=cc\r\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/6/lto-wrapper\r\nTarget: x86_64-linux-gnu\r\nConfigured with: ../src/configure -v --with-pkgversion='Debian 6.4.0-2' --with-bugurl=file:///usr/share/doc/gcc-6/README.Bugs --enable-languages=c,ada,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-6 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-6-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-6-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-6-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\r\nThread model: posix\r\ngcc version 6.4.0 20170724 (Debian 6.4.0-2) \r\n``` It seems to be some derivative of debian:sid - there are Java, Python, Go, Node and Emscripten (my main suspect). Is there a public image that I could use to get the same environment? Instructions to recreate image would be nice. Hopefully, they would apply to Sierra 10.12.5. Ping? Still no luck with repro =(\r\nCould you attach the debug log (compile with `export CFLAGS=\"-DBIT_WRITER_DEBUG\"`) for `./bin/brotli -Zfk balls.txt`\r\nMine is attached: [bits.txt](https://github.com/google/brotli/files/1204861/bits.txt)\r\n Any updates?  Nice idea! Going to implement it next month. Will be implemented with #590  Thanks!  Hello. Thank you for your interest to `brotli` project.\r\n\r\nIn verbose mode CLI should provide some information useful to users: compression progress, ratio, speed, etc. Currently it is not implemented, just reserved, to make CLI more stable.\r\n\r\nFormat explanation is very different, and affects performance, even when off. `brotlidump` is the best choice for that. But it requires some care, as it might not work out of the box.\r\n\r\nIf you would like to invest your time/efforts in this direction, we would be grateful, if you work on `brotlidump` improvements.  Nice catch! Going to fix it ASAP. Will get fixed with #569\r\nThanks again!  Sorry for the late response. Lets change the order in the platforms list, so Win64 is listed first (and becomes the default). Also adding \"platform\" blows the configuration matrix.\r\nNow for linux/gmake there will be:\r\n * release_win32\r\n * release_win64\r\n * debug_win32\r\n * debug_win64\r\n\r\nSounds ridiculous. So, lets get rid of \"win\" prefix. There is a nice example how to specify architecture on premake wiki: https://github.com/premake/premake-core/wiki/architecture  The fix looks good. I think it is better to have slightly more explicit checks than loose a chance, when compiler finds a real issue =) Going to pick the fix to v0.6 branch  Unfortunately, we don't have such information.\r\nTheoretically, if IE provides provides proper API, some kind of extension could be created.\r\nMost probably there is such API, because it is required for Anti-Malware to work.\r\nThe problem is - we don't have enough resources to develop \"br\" extension for IE =(  Thanks.   * new CLI; bro -> brotli; + man page\r\n * JNI wrappers preparation (for bazel build)\r\n * add raw binary dictionary representation `dictionary.bin`\r\n * add ability to side-load brotli RFC dictionary\r\n * decoder persists last error now\r\n * fix `BrotliDecoderDecompress` documentation\r\n * go reader don't block until necessary\r\n * more consistent bazel target names\r\n * Java dictionary data compiled footprint reduced\r\n * Java tests refactoring  Thank you, Tino!\r\nAdded link to README.md.  Thanks! :+1:   Thanks for the heads-up. Going to investigate it deeper in early June. Slowdown on all-zeroes data will be fixed with #590\r\nFor generic data we expect that \"1MB+\" heuristic provides both faster and denser compression.  Thanks for the suggestion, but we tend to keep brotli compressor pure.\r\nThis is a feature for brotli framing format: #462.\r\nCould you place your FR into framing format discussion, please.  Hello. Thanks for the PR!\r\nJust returned from vacation. Going to review your PR this week. Hi. Sorry for the super-long review. Will get back to you as soon as get results from internal reviewer.  Gr\u00fc\u00dfe, Stefan. Thanks for the PR.\r\n\r\nIs it a standalone change, or releasing of new artifact version is required? Going to push a little update to decoder soon that provides 5-25% speedup and publish new artifact right after that. Hopefully, this will happen tomorrow. Just released 0.1.2  Thanks for the report.\r\n\r\nIs there a way to have both static and shared libraries on windows. IIUC, the problem is that on Windows the result of static and shared build are both library.lib, so they can not coexist in one place?\r\n\r\nGoing to try to fix the problem ASAP. Would be very grateful, if you point to the CMake project that have those problems solved, to we could grab the best practices from there. Thanks. Going to try adding suffix soon.\r\nMeanwhile I've split auto-cmake and cmake build manual. I hope plain CMake scenario is possible on Windows?\r\n\r\nDon't know why we put all artifacts to bin on Windows; most likely it for historical reasons =) going to update libraries installation path very soon. I forsee one drawback with building shared+static. Unfortenately, currently we have to stick to CMake 2.8.6. This means that we can not use OBJECT libraries implemented in 2.8.8. As a consequence, sources will be compiled twice... Max, could you take a look at #544.\r\nI've unified libraries installation across platforms. But there is an open question, what to do with includes... Hello, Max.\r\nCan't remember for sure, if all the problems have been resolved... Please, write back if there is something still to be done.\r\nNow we are preparing to release v1.0.0 (finally)... so it is time to put build scripts to the perfect state =) Thanks for the reporting.\r\nUpdated readme and cmake configuration. Please respond if it works better now. Thanks. BUILD_SHARED_LIBS=OFF is no-op now. Removing it from options renders your command sequence to be exactly the same as one given in readme.  Going to investigate ASAP (== tomorrow) Current workaround for simple build cases would be:\r\n * `cmake . && make` for static libraries\r\n * `cmake . -DBUILD_SHARED_LIBS=ON && make` for shared libraries\r\n\r\nDigging further, why this machinery doesn't work as expected. Thanks for the report. Going to update readme, and, most probably, release 0.6.1 after fixing buildfiles.\r\n\r\nLine `CMAKE_DEPENDENT_OPTION(BUILD_SHARED_LIBS \"Build shared libraries\" ON \"NOT BROTLI_BUNDLED_MODE\" OFF)` is read as \"if not in bundled mode (== top level project) then, by default, set BUILD_SHARED_LIBS=ON\". For some reason, this magic didn't happen. That is what configure-cmake flag has no effect. Oh, I have a guess what has happened! CMake is a very nasty build system. If you occasionally use it in root project folder - you poison it. CMake will cache some variables and do unexpected things based on cached values.\r\n\r\nThat is why there is `mkdir out && cd out` and `mkdir out-static && cd static-out` in readme.\r\n\r\nTo cure the poisoned repository try `git reset --hard && git clean -dfx`.  Going to see, if it is possible. If you point to a sample project with CMake build, that features such option, it will help greatly. Updated cmake to build both shared and static libraries the same time  It seems to be a wrong name for the file. Actually, sources are for python-module distribution.\r\nWe are on the way of splitting it out to brotli-wheels subproject...\r\n\r\nGoing to make an add full source release artifact, and extend README ASAP. \"Source Code\" is the right link. It contains the full copy of repo.\r\nIt is overweighted (19MiB),  because it contains pdf, images and other garbage.\r\nIn next release going to create a distilled version, with no garbage, just sources, meta, and tests.  https://github.com/bcmills/brotli/tree/cbrotli/go/cbrotli Going to be pushed with next update.  Hi.\r\n\r\n Was it ported by hand, or with some tool? It would be nice to have some (semi-)automated way to downstream changes from Java port to C#. Managed to transpile Java decoder with sharpen. Will publish it soon. Please take a look at #538.\r\nGoing to add integration test a little bit later.  \ud83d\udc4d   Thanks for the report. Going to fix it soon. Released 0.1.1 with fixed structure of sources.jar\r\nShould become available in less than 10 hours.  Hi. Thank you for help. Yup, PGI environment would be nice to have. Thank you.  Meged to #483   GZIPInputStream is based on native library. \r\nBrotliInputStream is a pure java implementation for platforms/products where embedding of native code is not allowed. For other platforms JNI wrapper should be used.  Hello. Sorry, this request has fallen out of my view.\r\nI'll give access to PyPI account soon. Going to investigate what bureaucracy needs to be done to create google/brotli-wheels repo. Woohoo, https://github.com/google/brotli-wheels has arrived =) No worries =) Any updates?  This piece of code is very tricky; it allows continuation after break in decoding.\r\nWe use special value (-1) to specify that distance is not decoded yet.\r\nIf distance is decoded, we retake it from distance ring-buffer.\r\nPlease, take a look where s->dist_rb_idx is incremented and decremented. For distance == 0 it has one extra decrement, so after processing the command it remains unchanged. Oh! I see. Thanks for the report. Going to fix that ASAP. Fixed. Again, thank you! This bug is a new \"survival champion\" - it was introduced about 1.5 years ago =O For testing the fix we have internally added 3 synthetic tests:\r\n```c++\r\nTEST(SynthTest, IntactDistanceRingBuffer0) {\r\n  uint8_t compressed[] = {\r\n    0x1b, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe3, 0xb4, 0x0d, 0x00, 0x00,\r\n    0x07, 0x5b, 0x26, 0x31, 0x40, 0x02, 0x00, 0xe0, 0x4e, 0x1b, 0xa1, 0x80,\r\n    0x20, 0x00\r\n  };\r\n  Verify(\r\n      R\"(\r\n      main_header\r\n      metablock_header_easy: 11, 1\r\n      command_inscopy_easy: 0, 7 // \"himself\" from dictionary\r\n      bits: \"000000\" // distance = 4 from RB; RB remains intact\r\n      command_inscopy_easy: 0, 4 // copy \"self\"\r\n      bits: \"000000\" // distance = 4 from RB; RB remains intact\r\n      )\",\r\n      compressed, sizeof(compressed),\r\n      BROTLI_DECODER_SUCCESS,\r\n      \"himselfself\");\r\n}\r\n\r\nTEST(SynthTest, IntactDistanceRingBuffer1) {\r\n  uint8_t compressed[] = {\r\n    0x1b, 0x09, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe3, 0xb4, 0x0d, 0x00, 0x00,\r\n    0x07, 0x5b, 0x26, 0x31, 0x40, 0x02, 0x00, 0xe0, 0x4e, 0x1b, 0x21, 0xa0,\r\n    0x20, 0x00\r\n  };\r\n  Verify(\r\n      R\"(\r\n      main_header\r\n      metablock_header_easy: 10, 1\r\n      command_inscopy_easy: 0, 6 // \"scroll\" from dictionary\r\n      bits: \"100000\" // distance = 11 from RB; RB remains intact\r\n      command_inscopy_easy: 0, 4 // copy \"roll\"\r\n      bits: \"000000\" // distance = 4 from RB; RB remains intact\r\n      )\",\r\n      compressed, sizeof(compressed),\r\n      BROTLI_DECODER_SUCCESS,\r\n      \"scrollroll\");\r\n}\r\n\r\nTEST(SynthTest, IntactDistanceRingBuffer2) {\r\n  uint8_t compressed[] = {\r\n    0x1b, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe3, 0xb4, 0x0d, 0x00, 0x00,\r\n    0x07, 0x5b, 0x26, 0x31, 0x40, 0x02, 0x00, 0xe0, 0x4e, 0x1b, 0x41, 0x80,\r\n    0x20, 0x50, 0x10, 0x24, 0x08, 0x06\r\n  };\r\n  Verify(\r\n      R\"(\r\n      main_header\r\n      metablock_header_easy: 16, 1\r\n      command_inscopy_easy: 0, 4 // \"left\" from dictionary (index = 3 = 4 - 1)\r\n      bits: \"000000\" // distance = 4 from RB; RB remains intact\r\n      command_inscopy_easy: 0, 4 // \"data\" from dictionary (index = 6 = 11 - 5)\r\n      bits: \"100000\" // distance = 11 from RB; RB remains intact\r\n      command_inscopy_easy: 0, 4 // \"data\" from dictionary (index = 6 = 15 - 9)\r\n      bits: \"010000\" // distance = 15 from RB; RB remains intact\r\n      command_inscopy_easy: 0, 4 // \"left\" from dictionary (index = 3 = 16 - 13)\r\n      bits: \"110000\" // distance = 16 from RB; RB remains intact\r\n      )\",\r\n      compressed, sizeof(compressed),\r\n      BROTLI_DECODER_SUCCESS,\r\n      \"leftdatadataleft\");\r\n}\r\n```\r\n\r\nThe first parameter of `Verify` is DSL code snippet used to generate `compressed`.\r\nThe last parameter is an expected output string. Ooops, missed the case when distance code is baked into command. I hope, now it is finally fixed with #506 =)  Brotli does not use any shared mutable data; but there are no explicit memory barriers.\r\n\r\nSo, as long as all things with a single instance are done within one thread - it is safe; every thread may work with as many instances as it wants.\r\n\r\nBut as soon as instance is passed between threads, developer should take care of exclusive access to the instance and appropriate memory barriers. I believe this model is called \"[conditionally safe](https://en.wikipedia.org/wiki/Thread_safety)\".  Hello.\r\n\r\nThanks for the report, going to fix it ASAP.\r\n\r\n*NB:* exit on OOM is considered normal for code in production; use `-DBROTLI_ENCODER_CLEANUP_ON_OOM` compiler option to allow encoder finish its work and cleanup after itself.  Pardon?  Fixed with #497  Oh, this ifdef wasn't retouched for almost 3 years.\r\nGoing to fix it with definitions taken from port.h very soon. Will be fixed with #498  #519  Tried `sharpen`. Almost succeeded:\r\n * `BitReader` has problems with nio, as expected\r\n * `InputStream` is unexpectedly unknown to sharpen\r\n\r\nI believe, with some minimal config it will be possible to have automated org.brotli.dec to c# conversion. +1 for C# wrapper for libbrotli\r\n+1 for NuGet support Updated issue title + placed a task list into issue description  About static_dict: it is masked with 0x7F to filter out highest bit. Going to add assert + comment + expand  kBrotliDictionarySizeBitsByLength and make mask more narrow; just to be on a safe side. As for other cases: this never can happen, according to BL (take a look at `EmitXXX` functions).\r\nWe mask with 0xFF for performance reasons (it turns to `movzbl` instead of real masking).\r\nGoing to add asserts to calm down VC++ Should be fixed with #497  * split brotli common/dec/enc .pc files\r\n* add URL, and use DEPENS_PRIVATE generator params We are terribly sorry for the inconveniences. It was a difficult decision that hit a lot of fans of brotli. But it has to be done to cover more use cases.\r\nIn some use-cases brotli encoder is an unbearable burden. So, we decided to split brotli into `encoder` and `decoder` modules. `common` is a part required by both of them; also, there is an alternative variant of `common` module that does not bring dictionary and allows loading it (for very special use-cases). It is an unfortunate consequence: we try to avoid redundancy.  Thanks. Going to fix it soon.  Sorry for the long delay.  It can be done,... but is there a use case for this. It is easier to make something when there is a clear goal to achieve. Currently there is no way to speedup decoding, unless streams are completely independent -> compressed less efficiently.\r\nWe are working on tools that may help create custom dictionaries -> improve compression over multiple chunks.\r\n\r\nFor multicore compression, I am going to return what was removed, but based on new API (so, not dependent on internal details). But it will be rather a template for multicore compression - it will be a function that compress chunks, but on a single core. To make it multicore, one will be required to add OS dependent multicore wrapper.  There were tiny changes.\r\nI'd be glad to tag with 1.0.0, but to do that, we need to remove functions tagged \"DEPRECATED\" first.\r\nI'm going to ask ngx_brotli if they can stick to some specific commit, so this removal won't hurt them. I've prepared a patch for ngx_brotli, but it may take some time to land it (because of the holidays). We're getting closer =) Just yesterday brotli.org became live...\r\nThe only thing that holds now is nginx-brotli module. It uses deprecated API, I plan to remove before releasing 1.0.0 Just discovered that ngx_brotli now depends on brotli via git submodule -> we are unblocked to move further =)\r\nSo, the plan is: release 0.6 with as brotli is now, and soon after that 1.0.0 with deprecated API removed. Just recently sent a PR with latest updates.\r\nAfter it is landed, we can start releasing 0.6.0 =) v0.6.0 is released. Sorry for the delays. v1.0.0 is coming soon. Surely. Technically, with `bro` being replaced with `brotli`, and recent tiny API additions, we are ready to do it =)\r\n\r\nGoing to see through issues list and, hopefully, new release will happen next week. I'm terribly sorry, but... the answer is again - very soon.\r\nWe have found that \"Custom Dictionary\" feature is somewhat confusing and misleading...\r\nSo we are going to \"unland\" it this week. After that our API is clean and concise and 1.0 ready.\r\nHopefully, it is the last delay. No more \"soon\" - we will just release it =)\r\n Yup. Now going through open issues. Perhaps one more will be addressed before release - building both static and dynamic libraries by CMake. It looks painful, as it will double compilation time, but, I suppose, a necessary thing... Releasing brotli tomorrow!\r\nJust set one day to settle the dust of the latest changes. :tada: Woohoo! Brotli **v1.0.0** is released now :tada:  Of course. This will be my first priority next week.   * release GIL on CPU intensive blocks, fixes #476\r\n * use BrotliDecoderTakeOutput (less memory, less memcpy) @nicksay, could you review, please. Finished well after rerun. Going to rebase and retest as a whole.  Will `Py_BEGIN_ALLOW_THREADS` / `Py_END_ALLOW_THREADS` do the trick, or we need something more exotic?  Going do it this week. https://github.com/nemequ/configure-cmake/ Done.\r\nIf more enable/disable/with params are required, feel free to request =)  Surely. Will try to do it today. Please take a look at #490  Thanks.  Currently we have no plans for Java encoder port. But, for sure, we will have JNI bindings.\nEncoder is complex and we try to use all the power of CPU to be competitive.\nWith Java it is much harder to match plain C performance.\n\nHowever, it is possible that some subset of encoder (levels 0, 1, or something similar) will be ported to support specific use cases.\n Merging into #405   Thank you! \ud83d\udc4d \n  Please write your thoughts on what features Brotli framing format should have.\nPS: framing format should not be a \"swiss-knife\", i.e. match every imaginable use case.\n Easy pick:\n- should not be a valid UTF-8 string\n- should not be a valid brotli stream\n- should have unique \"magic bytes\" signature\n\nFirst 2 requirements give us that the first \"magic byte\" is `0x91`.\n  Hello. What is the difference between \"build\" and \"build_ext\"?\n (ooops, rebase is required)\n  https://travis-ci.org/google/brotli/jobs/168940272\n May it be ralated to https://blog.travis-ci.com/2016-10-04-osx-73-default-image-live/ ?\n Homebrew gcc44 formulae is not supported for OS versions newer than maverics\n Thanks, fixed this way.\n  VS thinks that brotlienc depends on static brotlicommon...\nOf course we can modify appveyor config to force building static artefacts, but first we should teach CMake to generate valid shared library build for VS. \n Working on DLL imports/exports + stub lib generation. That will include this PR.\n  Thank you.\n  I think it should be:\n\n```\n  if(NOT WIN32)\n    install(DIRECTORY ${BROTLI_INCLUDE_DIRS}/brotli DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n  endif()\n```\n I meant, it should be outside of \"is shared libs\", because when linking statically, includes required as well =)\n Sounds logical.\n One last thing (sorry): any reason not to use paths provided by GNUInstallDirs?\nI'm not very experienced in that matter, but it feels like this will make build a bit more portable.\n(`${CMAKE_INSTALL_INCLUDEDIR}`, ...)\n And CMake wants `ARCHIVE DESTINATION` as well...\n  Hello, Alex.\n\n Is it a workaround for missing apple-gcc42 4.2.1-5666.3?\n If so, then PR #438 resolves that problem. Lets not strick to particular images, if possible.\n  Hi. Looks nice.\n\nWould you mind to drop a few lines to README.md how to use yapf (append a new 'Development' section)\n Hi.\n\n `python/README.md` sounds better, but then you should mention that formatting of setup.py in root directory is also a good habit =)\n  Could you point where it is used in brotli, please.\nThe only double-to-string conversion occurs in \"bro\" tool...\n  Hello. We already have pure Java decoder.\nUnfortunately its quality isn't proven, so it is too early to release it.\nI hope this will arrive shortly after v1.0.0 brotli release that is getting closer and closer.\n Good news: we have decided to publish this draft very soon (before v1.0.0).\n Update: we have more-or-less working java decoder now =) going to publish it early next week.\n Done. Going to push to Maven Central, but it might take a considerable amount time.\n poms are wrong (but still work). Going to fix them ASAP.\n Next week, I hope.\n Sorry for the delay (again). Now, I think it will be on the next week. Sorry. Still waiting for brotli.org to be made online. Sorry. org.brotli.dec is now accessible on Maven Central =)\r\nhttps://search.maven.org/#search%7Cga%7C1%7Corg.brotli.dec\r\n  Please pick-up sais as a git submodule.\n E.g. link research/third_party/esaxx to https://github.com/hillbig/esaxx\n  Does this problem occur with CMake or Premake5 generated XCode projects?\n Ideally, there will be only one port.h, and we are moving towards this.\nFeel free to ping me, if this is urgent.\n  The only difference between v7 and v8 in decoder, besides 32 vs 64 bits, is using \"rbit\" instruction.\nCould you check that \"rbit\" works on ARMv8, please.\n Hello. Hasn't #431 fixed the rbit problem?\n Hello @mdejong. Please, could you check that replacing\n`#if defined(BROTLI_TARGET_ARMV7)` with\n`#if defined(BROTLI_TARGET_ARMV7) || defined(BROTLI_TARGET_ARMV8)`\nbefore `BrotliRBit` declaration do not break build / tests?\n  Thanks\n  Nice! Thanks\n  Works for me both with 0.3.0 and 0.3.1 versions.\nCould you publish verbose Bazel report. Perhaps there is some other bug in Bazel, or some environment / configuration problem.\n  Please consider adding TODO / creating issue to use cc_inc_library when it is fixed.\nUsing \"includes\" causes warning:\n`WARNING: /usr/local/google/home/eustas/clients/brotli/BUILD:63:16: in includes attribute of cc_library rule //:brotli: 'include' resolves to 'include' not in 'third_party'. This will be an error in the future.`\n  Nice catch \ud83d\udc4d \nIt is dead since last October, but all compilers remain silent...\nTravisCL experience some troubles, but I'll rerun the build when it feel better.\n  Creating plugin is a nice initiative, but... then it will be a painful experience for users: they expect that everything works out of the box. Perhaps, it will be more efficient to negotiate with Igor Pavlov (7-Zip author), to make Brotli the part of official distribution. \n Meanwhile, to play with different compressors one can use [Squash](https://quixdb.github.io/squash/) - Compression Abstraction Library. It already has 31 compressor plugin (including Brotli) and has bindings for Vala and Rust.\n Cool! \ud83d\udc4d   With VS it is logical to use build system that supports project file generation -> cmake or premake5:\n- for cmake run `cmake -G \"some_generator\"`, where _some_generator_ is picked from the list provided by `cmake --help`\n- for premake5 run `premake5 vs2015`\n\nOf course, installed cmake/premake5 is a prerequisite.\n  Thanks for the report. I'll investigate it later. Feel free to ping me in a month or so, it I do not report back...\n  Going to add this behavior soon.\n Should be \"fixed\" with PR #431 \nThough, it is barely minimal implementation,... please check if helps in your case.\n  Going to revamp command line tool soon.\r\nPlanned changes:\r\n * more gzip-like arguments\r\n * better help message\r\n * man page\r\n * rename to 'brotli' to avoid clash with existing `/usr/bin/bro` tool Already done =)  Released as 0.5.1 to be safe\n No worries.\n Ooops. Released from master instead of branch.\n Done =)\n   Please, could you help with those things?\n  Internally we use SWIG and JNI wrappers for brotli library.\nWe plan publish them closer to Brotli 1.0.0 release.\nAlso we have pure-java brotli decoder. And, again, it will published a little bit later. Sorry.\n There is third-party port to JavaScript and Rust.\nNot sure, may be even to Go.\nv1.0.0 is not about format, it is about API. We need to make a final clean-ups (remove deprecated API) and make sure that API is portable and easy to use. So, I believe, we are almost here.\nSo, when v1.0.0 is released, API is considered stable -> it is good time to write wrappers to different languages...\n Hi. Java decoder seems to be ready for usage. We've fuzzed it and tested on a large corpora.\nSoon maven artifact will be published as well.\nEncoder port is not even planned...\n org.brotli.dec:0.1.1 has been recently released JNI bindings are already here, see java/org/brotli/wrapper\r\nUnfortunately, JNI is a headache for portable projects. There is no convenient way to use it out of the box. Currently only Bazel builds JNI artifacts...  Hello.\n\n BrotliDecompressStream and BrotliDecoderDecompressStream are the same, except the position of \"state\" argument.\n\n Decoder has internal storage - \"ring buffer\". In your example it seems to be 4MB, so in given example lines 2-5 do not consume more input, because there is some pending output in \"ring buffer\". I suppose that the whole compressed file is bigger than 5355157 bytes...\n _No feedback for 19 days; feel free to reopen if some concerns still remain._\n  Appveyor seems to be happy now. Will merge soon.\n  Unguarded `__STDC_VERSION__` will be fixed in next encoder/decoder update.\n  Hello. Perhaps you meant to post this issue to https://github.com/google/ngx_brotli/issues?\n  Added section to README.md\n  Hello, Piotr.\n  Please, give me few days to publish new decoder API first...\n  Hello. Sorry for the super-late response.\n\n Thank you for your PR.\n  Hello. For decompressor it is easy. For compressor we have only rough estimates (there are about 90 places where memory is allocated).\nGoing to add method for decompressor soon and for compressor after some code combing...\n For decompressor the worst case is 2.6MiB + 1.5 * ringbuffer size. Soon an API for calculating ringbuffer size from the first byte will appear + ability to remove 1.5x multiplier.\r\nAs for encoder, we still need more time to build the right model.   Travis looks happy, indeed.\nThe only thing left to do is to sign CLA (sorry for the bureaucracy).\n Don't worry about CLA. Rerunning travis...\nThank you for this PR!\n It looks like problem with gcc4.5 persists...\n Going to calm down clang-ubsan in few moments.\n Ubsan is happy now.\n I signed it!\n I think - yes. This bot is always harassing me...\n Okay, let's try\n  Hi. Thanks for an offer, but I'm little bit hesitate, and also it will a little bit easier for me to fix it in internal repository and then publish update to github.\n\nIdeas look great! I've planned to implement them next week (though it would require lot of courage and will to switch to snake case, I am old Java fan =).\n Added a task to initial message.\n In the internal repo we already have conformant arrays. But it seems that this does not apply to streaming functions. Am I right?\n Hello @jchampio \nPlease, could you describe toolchains you've used that caused \"incompatible\" bools.\nI'm going to modify BROTLI_BOOL definition in a way @nemequ proposed, but I'll need then to recheck that problem is gone.\n\nBest regards,\n  Eugene.\n Well, considering `BROTLI_BOOL` in API to be `int` in ABI we get both cleanliness and compatibility:\n- [x] \"Using _XXX_ helps make the code more readable and reduce documentation lookups\"\n- [x] No more \"the module and the library disagreed on the definition of _XXX_\"\n The only problem could be that result may have 4B+ values different from `BROTLI_TRUE` and `BROTLI_FALSE`, but brotli library swears not to return obscure values.\n  Going to investigate it tomorrow. Thanks for the heads-up!\n   Tried to add \"-b bin\" to \"pip wheel\", it still fails.\n Going to prepare a separate PR, to remove intermediate commits\n  Hello, Evan.\n  I like the option (1), but the help with writing CMakeLists.txt is much appreciated.\n  I consider having multiple build systems on board, as long as they do not interfere and reside in root and build/ directories. Currently planned build systems are CMake, Premake, and Bazel:\n- Premake is straightforward, but might be inconvenient\n- Bazel is also straightforward, but I'm not sure if it is possible to pull BUILD files out of subdirectories\n- CMake looks powerful, but complicated\n It is a problem that was recently introduced in premake5.\nI have plans to add postfilter to fix it. There are 3 workarounds:\n- use `xcodebuild`\n- remove `-Wl,--start-group` / `-Wl,--end-group` enclosure in build files\n- call directly `make brotli` to avoid building everything (`brotli.make` seem to be not corrupted)\n And, yes, `cmake` will be added soon.\n Running `premake5 gmake` on mac fixes the problem. Perhaps I'll remove generated buildfiles to avoid confusion.\n Removed generated buildfiles to avoid further confusion. Going to pull CMake soon.\n Wide list of compilers would be a nice addition (different versions of clang/gcc/mingw).\nAlso I see, it is possible to build/test with ASAN / MSAN. That is a super-cool option.\nSo if you add more variants, we will be very grateful.\n(Going to investigate ICC license question later).\n\nconfigure-cmake seems to cover all possible use-cases. Perhaps, a more light-weight version of this wrapper would fit our tiny simple project more =)\n\nAbout API stabilization - you are absolutely right. We plan that API will finally stabilize in next 6 months, and then going to publish packages for distros. Though, some background pre-work could be done earlier.\n PR #397 has landed. WooHoo! Kudos to Evan!\n  There is a very limited number of cases in which BrotliDecompressedSize works.\n1) The whole input is compressed in a single block\n2) The whole input is a single uncompressed block\n\nThe length of both compressed and uncompressed block is limited to 1 << 24 == 16MiB.\n\nTechnically it is possible to make this function work for a case: multiple uncompressed blocks followed by 0 or 1 compressed block.\n Different compression levels affect ability of encoder to detect better input splitting...\n Brotli is a low level format. It is designed for streaming processing.\nWe are planning to add framing format that will allow things like stream navigation, reliable calculation of uncompressed size, consistency checks, etc.\nUnfortunately, it is not ready yet...\n Hello.\n\nJust recently updated `BrotliDecompressedSize`. Now it supports multiple non-compressed and metadata blocks. Unfortunately, until brotli framing format is implemented, it will never cover all the cases. So, currently, I would recommend to use `BrotliDecompressStream`.\n\nAs for encoder, `BrotliEncoderMaxCompressedSize` provides the exact answer about how large output may be; but it only works for `BrotliEncoderCompress`.\n\nThank you for the report and for the R bindings.\nBest regards,\n  Eugene.\n Yup, in PR #386\n  New version of brotli encoder is almost ready to be published. In new version there is no std::\\* at all.\n Fixed in v0.5\n  Sorry for misguiding you. Use WriteMetadata instead of WriteMetaBlock.\nAnd pay attention that unlike WriteBrotliData output buffer is provided by client, not by encoder.\n You are welcome.\nSoon we will publish v0.4 with more clear interface...\n  Done  Fixed in v0.5\nNB: most frequently used values are looked up in table. High precision for bigger values is not required.\n  Thanks. We're going to adapt it in few steps: first resolve the compiler warnings and later, when we are ready for windows, grab __declspec part.\n Should be fixed.\n Ooops, thought it was about unused function...\nVisibility is fixed in v0.4, going to back-port fix soon.\n Should be fixed. _D\u00e9j\u00e0 vu?_\n  Fixed in v0.5\n  I have plans to use Doxygen generator, but not sure when it will be integrated to TravisCI automation...\n Doxygenized API can be found here: https://brotli.org/  Hello, Frank.\n\n  Sorry for the inconvenience, \"googlebot\" became very chatty recently. Just ignore it.\n  Our apologies. We hope, it won't stop you from making further PRs to brotli repository.\n\nBest regards,\n  Eugene.\n  Hello, Daniel.\n\n  Thank you for your report. Actually, the value taken from negative index lives very shortly - it is overwritten by mtf[0] = value. Nevertheless, going to fix it soon.\n Fixed in PR #343\n  There is [BrotliDecompressedSize](https://github.com/google/brotli/blob/master/dec/decode.h#L46) method.\nUnfortunately, it works only is stream contains only one block. But it is the most frequent case.\nWe plan to add framing format in future, but currently you need to attach your own header, as Daniel said.\n  Fixed in v0.5\n  Thank you!\n  Hello.\n\n  Sorry for the late response. Going to investigate soon.\n Seems that problem is already solved (at least in linux):\n\n```\n$ time ./bro -q 11 -f -i ./bad.xml -o ./bad.xml.br; ls -la bad.xml.br\n\nreal    0m3.429s\nuser    0m3.404s\nsys 0m0.024s\n-rw------- 1 eustas eng 6045 Jun 21 13:53 bad.xml.br\n```\n\nGoing to test under windows soon.\n Fixed in windows as well.\n  Hello.\n  Thank you for your report. Going to investigate this tomorrow.\n Hello. We have a fix for this. The problem is in decoder. Will publish fix soon.\n  Hello. Sorry for the late response. I have no strong opinion about using underscores in library names.\nSince it is just a trade of bit of readability (but whoever reads so filename?) for a bit of compatibility, lets to further without underscores.\n I believe one last piece is missing: .pc files.\nNot sure if we should have them generated, or manually written are ok.\n I was thinking about injection this to CMakeLists.txt:\n\n```\n# Build shared libs by default in unbundled mode.\nif(BUILD_SHARED_LIBS STREQUAL \"\")\n  if(BROTLI_BUNDLED_MODE STREQUAL \"OFF\")\n    set(BUILD_SHARED_LIBS ON)\n  endif()\nendif()\n```\n Hello. I prefer self-contained build files until they grow insanely large.\nCurrently CMakeLists is 264 lines, so it sounds OK.\n  Hello.\n\n After you call \"BrotliDecompressBufferStreaming\" compressedBytes, most likely, isn't zero. This is because \"flush\" flag of WriteBrotliData doesn't mean \"hard flush\". To make a \"hard flush\" you need to Write empty metablock after flushed data block.\n\n Sorry for the unclear API documentation. Will fix it soon.\n s/empty metablock/empty metadata block/\n Please consider using our new streaming API: `BrotliEncoderCompressStream` with op=`BROTLI_OPERATION_FLUSH` does exactly what is expected.\nSorry for the inconvenience and thank you for your interest to brotli.\n  String is gone and restricted is wrapped with ifdef.\nPlease check. If problem sill exists, then reopen the issue. Thank you.\n  Hello. You need sign CLA first, before we would be able to merge this PR. See CONTRIBUTING.md\n Thank you. Landing.\n   Fixed doc / added custom dictionary truncation.\n  Hello. In order to merge your pull request we need you to sign CLA. Please refer to CONTRIBUTING.md\nThank you!\n Thank you. I'll land this PR after travis/appveyor finish their checks.\n  Hi. I am sorry so much! This patch has fallen out of my view sight for so long.\r\nGoing to take a look at it soon.\r\nThank to for your contribution and your interest to brotli. Very nice and elegant! Would you mind moving it to research/ folder?  Hello.\n  Thank you for the report and sorry for the late response.\n  I'm going to fix it soon, but first I need to reproduce it. Unfortunately, clang-3.6 does not see this problem...\n Please, could you check if prepending \"!!\" to IS_CONSTANT and BROTLI_HAS_UBFX helps?\nThank you.\n It seems you've missed\n`#define IS_CONSTANT(x) (!!__builtin_constant_p(x))`\n Okay. Thank you. I'm going to make a fix soon.\n  Very sorry for that big latency (encoder was under construction). Fixed.\n  Thank you for your report. We'll investigate what happens under the hood, and, perhaps, fix the problem.\n This seems to be limitation of encoding. bzip uses BWT and thus wins from the input format (\\n, and ' ' get grouped). Thus it gets close to conventional compressors limit - about 17 bits per integer; using range coding would have improved the compression ratio.\nAnd of course, this is much bigger than true entropy (10 bits per integer).\n\nBTW, if we remove spaces and new lines\n`> ts=''.join('{:1b}'.format(random.getrandbits(1)) for i in range(10000))`\nthen \n`> print(len(codecs.encode(ts,'zip')))`\n`1661`\n`> print(len(codecs.encode(ts,'bz2')))`\n`1692`\n`> print(len(brotli.compress(ts)))`\n`1262`\n Yup, it is not the first time we found that we could push the limit if the format wouldn't be frozen to the moment... But there is a trade-off: freeze format early and help customers adopting it or never freeze it, have a full freedom, but no customers.\n\nThank you again for your experiments and analysis, this would help us make the next compressor even better ;-)\n  Going to merge is ASAP.\n  Thank you for your research and report. We are going to fix those warnings soon.\n Ooops. We've fixed this in internal repo, but still hasn't publised the fix. Going to do it ASAP.\n PR #323\n Hi. Could you check again (PR #323 just landed).\n The decoder thing seems to be easy to fix.\nBut brotli doesn't have a macro \"length\". Do you know where it is defined?\n No worries, we are going to try to decouple our header files, so embedder code doesn't reach hash.h from encode.h\n Hey, we've updated encoder recently -> many problems should be fixed by now.\nIf not, feel free to reopen the issue.\n  Unfortunately, there is no magic bytes for brotli.\nIn future brotli streams will be wrapped in some framing format which will have magic bytes that could be used to identify it.\n Mark Adler helped us much with proof-testing brotli and refining specification.\nHere is his framing format proposal:\nhttps://github.com/madler/brotli/blob/master/br-format-v3.txt\n\n> Signature in hexadecimal (four bytes):\n> \n> ce b2 cf 81\n  Already integrated. Sorry.\n  Thank you for the request.\nWe have this feature in our plans, but first we have to finish refactoring and do some preparations...\n Implemented in v0.5\n  Hello, Matt.\n\n Thank you for your report. Could you check if casting mote to int in python/brotlimodule.cc:131 fixes the problem?\n\nBest regards,\n  Eugene.\n  Going to check/fix it soon. And update documentation as well.\n Can not reproduce.\nCould you attach sample compressed file, please?\n  Brotli  archive header is less than 1 byte -> independently decompressible blocks are almost the same as  independent archives.\nThe coding phase takes not much time, the most of the time is used for finding better data decomposition. Trying to compress blocks of different size in parallel will not add much overhead (comparing to special solution that estimates output size without producing output).\n\nSo it looks that writing some wrapper, that tries to find the maximum input block that produces maximal feasible output, is the easiest solution.\n\nIf we consider brotli as a format (not implementation) there is a way to create implementation that will be more efficient for specific data type and output size requirements (e.g. it may omit some computations and use precalculated tables). But brotli is a general purpose data format. If you use some specific data format (SEED?) it likely will be more efficient.\n  Thank you\n  Decoder dumps all the output is has after it consumed the next chunk of input: https://github.com/google/brotli/blob/master/dec/decode.c#L1954\n\nPlease, could you provide sample data and code, so we could investigate what is going wrong?\n  Fixed in #555.  Hello.\n\nSerialized context may take up to 16 megabytes (the size of the window),...\nCould you point to other compressors that have such API, please.\nIt will help us understand the best practices in the field...\n\nBest regards,\n  Eugene.\n  Hello.\nI'm going to investigate it. Thank you for the report and sorry for the late response.\n We have a fix for this. I hope it will be published soon.\n  Yes, there is dependence between block size and maximum overhead.\nI'll check the implementation and plan to add utility method to brotli encoder API.\n WARNING: this function result only applicable to BrotliEncoderCompress.\nStream compression may use more output. E.g. if compress with level 0 or level 1, every chunk of input is compressed independently -> adding more overhead.\n\nI'm going to improve BrotliCompressStream behavior later and add another function for output size estimation.\n  We are working on our own Java wrappers. Soon it will be possible to make measurements and compare results / investigate bottlenecks.\n Hello, Martin.\r\n\r\nNow, we have our JNI wrappers published. Could you test their performance, and see if the problem is still here, please.\r\n\r\nThanks in advance,\r\n  Eugene.    Thank you for your report. We are actively working on those warnings...\n  Hello.\n\n Thank you for the report. Most probably this affects not only mingw, but some other compilers.\n And, again, we are very grateful for the proposed fix.\n\n I believe, the fix will be landed tomorrow.\n\nBest regards,\n  Eugene.\n  Hello.\n\n Thank you for the interest. \n Actually we're going to add custom memory allocation support to decoder soon. Encoder will get it a little bit later.\n\n Also we plan to update our API to converge with API of modern compressors.\n\nBest regards,\n  Eugene.\n Custom memory allocators for decoder feature has been landed recently.\n In v0.5 encoder also have custom-allocator feature.\n  Hello.\n\n Thank you for your patch.\n Unfortunately, we can't merge it until you sign CLA. More details here:\nhttps://github.com/google/brotli/blob/master/CONTRIBUTING.md\n\nBest regards,\n  Eugene.\n BrotliCompressWithCustomDictionary have been moved to compressor.cc and refactored. (And soon will be deprecated)\n  Hello.\n\n encode_parallel is mostly a skeleton / proof of concept. Currently we have no plans to develop it.\n  Hello.\n\nYou are right, BrotliCompressBufferParallel is a proof-of-concept for parallel encoding. One can implement actual parallelly executing compressor with his favorite technology (OpenMP, TBB, Hadoop, whatever...) using this method as a sketch.\n Nice! We will be glad to hear any update on this topic.\n  I started reviewing the changes, but I am not finished yet.\n\nI propose that we use this huge pull request for discussion and that you create separate pull requests for each smaller change after the review for them is complete.\n\nAs a start, the commit for Section 7.1 (f9f173c...) looks good as is and could be merged.\n  This could easily be added to BrotliCompressBuffer method, but impossible for streaming versions (as the data size is unknown).\n\nSo, if we add the logic that reduces window size to BrotliCompressBuffer, will it work for you?\n It would look a little bit confusing and redundant - lgwin and lgblock already specify the expected use-case. Probably it can be done with some helper function that adjusts BrotliParams given the expected input size... \n Basic formulae is max(24, min(10, log2(size)+0.5)), if memory itself is not a problem.\r\nIf memory is a limited resource, then lgwin should be lowered a bit, but for higher qualities, hashers might take more memory than ring-buffer, so cutting lgwin won't give a big win.  Fixed (with premake5 generated build).\n  This was fixed by PR #233 \n  Small changes are fine. Let me know when you are done and then I will push a new version to the official IETF site.\n  As mentioned in previous comment, should be fixed now.\nIf not, feel free to reopen the issue.\n  Thank you for reporting this issue. This was fixed in PR #223.\n  Hello.\n\n Sorry for the late response. Thank you for your PR. Would you mind to rebase it?\n  According to the [StackOverflow](http://stackoverflow.com/questions/2339679/what-are-the-differences-between-so-and-dylib-on-osx) .so and .dylib are almost interchangable in modern versions on OSX.\n Soon it will be possible to compile dylib with xcode: see PR #382\n  Thanks a lot for catching this, apparently we forgot to update the introduction part of the spec. I will do that shortly.\n  I fixed everything in enc/ in PR #206. Could you create a PR for the rest?\n  Pedantic warnings were fixed in PR #245 \n  This can be reused by all of the tools.\nSet the version to the next git release tag.\n 0.3.0 will be the version of the next release. It has to be updated before cutting the release.\n  We added the paper to the docs/ directory in PR #198, so you can use it with the same licence as the rest of the project.\n  These were fixed with PR #245 \n    Thanks for the fix.\n\nBefore we can merge, you have to sign a CLA (see https://github.com/google/brotli/blob/master/CONTRIBUTING).\n\nThanks!\n  Hello again.\n\n We have been busy last month, and have had no time to integrate your improvement to brotli encoder. Sorry.\n\n But don't worry - this awesome change is still on our radars, and we are enthusiastic about integrating it.\n\n Thank you for your patience.\n\nBest regards,\n  Eugene.\n  I've added support for icc recently.\nThough it looks that icc and clang produce about 10% slower binary than gcc 5.2.0\n  Should be fixed on v0.5.\nPlease check. If problem is still there, feel free to reopen the issue.\n  Fixed (in premake5 generated makefiles)\n  **Update** : currently brotli at level 11 compresses the example file to 1'236'595. It is still bigger than LZMA output, but there is a space for further encoder improvements.\n About 49s (with fixed encoder) on Intel Xeon E5-1650 @ 1200 MHz (powersave mode).\nThere is a problem in encoder that makes encoding of this file unexpectedly slow. I'm preparing a fix, soon it will be published.\n  We decided to change the interface of the bro tool to match gzip.\n\nWould you be willing to change bro.cc with these changes to the command line parsing? For easier review, it could be broken up into multiple pull requests, e.g. as a first step factor out the function that processes one file from main().\n\nAs for function naming and other style conventions, please see https://google-styleguide.googlecode.com/svn/trunk/cppguide.html\n\nAnd in order to accept your contributions, you have to sign a CLA (see https://github.com/google/brotli/blob/master/CONTRIBUTING)\n Soon I will be landing next brotli update. Among other things it contains new CLI...  These should be fixed with PR #186 \n  This is fixed in PR #187 \n  I think the Python module's version should refer to the version of the underlying Brotli library, but it seems  difficult to keep them in sync automatically. Any ideas would be welcome.\n\nIf we would do it manually, we would have to remember to bump the version number right _before_ we tag the release, right? Doing it right after would be too late since everything built from the tagged release would have the wrong version number (as with v0.2.0). I will try to remember doing this going forward.\n It is not clear if this would work if the version is updated through merging a pull request. Anyway, let's try to remember updating the version string before release for now and see if that works. The bro.cc does not have a --version flag yet, before we attempt to do this automation, I want to move the BROTLI_VERSION define to a common place and use it from the bro.cc as well.\n I created the version.h header in PR #193 \n\nClosing this now as the question in the issue was decided.\n  Fixed with PR #253.\nI'm going to update squash plugin soon.\n  Uninitialized variables and null-dereference are all false-positives. Usage of tainted values is natural -> almost false positive. Going to toss coda a little bit to convince Coverity Scan.\n  Eric's version for opening the file seems more robust. Dominik, did you try that? If that would work for you, I will make these changes to our internal version and push them here.\n  Thanks for the report, should be fixed now :)\n Yeah I was just noticing the same thing, I did it with \"_WIN32\" instead, visual studio does not appear to have any flags related to endianness but _WIN32 can be assumed to be LE.\n  I fixed this in #123, could you test that it works now?\n  Added link to brotli.js in README.md\n JS decoder transpiled from Java decoder is coming soon. Perhaps even AsmJS, if it will give reasonable performance boost. It turns out that AsmJs speed varies a lot from browser to browser. Pure JS decodes is performant enough for practical usage, it is ~2.x times faster than brotli.js and 5 times faster than BrotliHaxe/JS. Here is my playground: [decoders.zip](https://github.com/google/brotli/files/1259608/decoders.zip)\r\n* `alice.br` - test file I've used for benchmarks\r\n* `bar.html` - AsmJS decoder transpiled from Java\r\n* `bjs.html` - brotli.js browserified\r\n* `haxe.html` - BrotliHaxe/JS\r\n* `xxx.html` - WebAssembly generated for C decoder with Emscripten\r\n* `yyy.html` - JS decoder transpiled from Java (and published in last commit)\r\n\r\nAsmJs generated with Emscripten has nearly the same performance/structure/drawbacks as WebAssembly, so I've stopped experimenting with it.  As for quality 0, it is allowed, but currently is the same as quality 1. I found why it is broken now, I will fix it soon.\n  There will be some more improvements to the encoder in the coming weeks and I would prefer cutting a release after that.\n I have one quick question about the tests in the python subdirectory. Is there any easy way to run them on Linux in a self-contained manner, i.e. without needing to install anything outside the root directory in the repository. Ideally the following would work:\n\n$ python setup.py build_ext\n$ python setup.py test\n\nThe first command succeeds, but when I run the second, I get 'ImportError: No module named brotli', which suggests to me that it is looking for brotli in a system-wide lib and not in the created build/ directory.\n Thanks, I confirmed that it works on Linux.\n Hello. Let's revive this effort.\n\n  What needs to be done to proceed with publishing PyPI module?\n Hi. Actually, thanks for pinging! Going to do it now.\n Hey! That happened! Wasn't that scary as I thought =)\n\nYup, making releases automated is a nice idea. But to add you as a maintainer I need to know your username =)\n  If it involves just the setup.py file, it should be ok to have it in the top-level directory.\n  I fixed it by using FastLog2().\n    As reported by @anthrotype, log2() is missing from MSVS 2010.\nThis patch uses log() and a multiplication in FastLog2()\nfor _MSV_VER <= 1600 and uses FastLog2() in literal_cost.cc\ninstead of log2().\n I missed this one, sorry, fixed in #34\n  #79 added streaming output support.\n  Sorry for the delay, I have not been actively working on brotli for a while. My plan now is to test and submit your non-python changes to our internal version and then update this github repository.\n\nAfter that is done, for the remaining python part, you will have to sign a CLA on this page:\nhttps://developers.google.com/open-source/cla/individual?csw=1\n I fixed the issues regarding the files in the enc directory.\n\nCould you revert those files and try to compile it under visual studio? If it is still broken, please let me know.\n\nWhat e-mail address and github user name did you use for the CLA?\n  The encoder does not use unordered_map any more.\n  It turns out that this header is not needed at all, so I removed it. Hope it works now for OSX.\n  Hi Khaled. As per Google's open-source policy, you need to sign the [Google Individual Contributor License Agreement](https://developers.google.com/open-source/cla/individual?csw=1)(CLA), which you can do online.\n  I will close this as these issues were addressed recently.\n  Done. enc/encode.h and dec'decode.h now depend only on common/types.h\n  This commit contains a batch of changes that were made to the\nBrotli library since March 2014. Most important changes:\n- Fix BrotliDecompressedSize() to work for an uncompressed plus an\n  empty meta-block.\n- Move serialization functions into their own file.\n- Fix storing of the meta-block header for last empty meta-block.\n- Add a fast version of the hasher.\n I am closing this now and will break it up into more commits (at least one for decoder and one for encoder).\n", "text_all_count": 9303, "text_word_token": ["NUMBER", "False", "positive", "Coverity", "Scan", "fail", "to", "analyse", "workflow", "it", "be", "guaranteed", "that", "at", "the", "stage", "when", "ProcessCommands", "be", "invoked", "ring", "buffer", "be", "allocated", "NUMBER", "NUMBER", "Same", "NUMBER", "Take", "a", "look", "at", "BrotliEnsureRingBuffer", "and", "its", "invocation", "points", "in", "the", "workflow", "NUMBER", "This", "be", "a", "know", "problem", "NUMBER", "We", "work", "on", "this", "topic", "NUMBER", "Next", "brotli", "version", "will", "support", "more", "all", "languages", "NUMBER", "Thanks", "Going", "to", "dig", "into", "this", "problem", "soon", "NUMBER", "What", "build", "system", "do", "you", "use", "This", "works", "for", "me", "mkdir", "out", "cd", "out", "NUMBER", "configure", "cmake", "disable", "debug", "cmake", "NUMBER", "make", "j", "NUMBER", "make", "test", "make", "install", "cd", "NUMBER", "After", "this", "include", "library", "not", "find", "error", "do", "not", "occur", "go", "build", "NUMBER", "go", "cbrotli", "Going", "to", "investigate", "and", "extend", "binary", "downloads", "soon", "NUMBER", "Yes", "JNI", "be", "always", "a", "pain", "NUMBER", "Bazel", "was", "a", "big", "hope", "as", "it", "at", "least", "works", "both", "on", "OSX", "and", "linux", "still", "not", "on", "windows", "NUMBER", "but", "even", "on", "those", "platforms", "JNI", "requires", "hacks", "LINK", "Working", "on", "this", "NUMBER", "In", "the", "meanwhile", "just", "to", "be", "sure", "have", "you", "build", "jni", "library", "or", "just", "brotli", "common", "dec", "enc", "libraries", "Currently", "only", "Bazel", "build", "it", "so", "CMake", "premake", "make", "be", "not", "enough", "NUMBER", "Those", "libraries", "be", "not", "enough", "NUMBER", "Going", "to", "add", "all", "in", "one", "statically", "linked", "brotli_jni", "NUMBER", "dll", "as", "soon", "as", "convince", "bazel", "to", "run", "test", "properly", "on", "Appveyor", "NUMBER", "PR", "NUMBER", "add", "brotli_jni", "NUMBER", "dll", "publishing", "NUMBER", "Could", "you", "try", "if", "this", "precompiled", "brotli_jni", "NUMBER", "dll", "LINK", "_file", "file_path", "brotli", "win", "bazel", "jni", "NUMBER", "NUMBER", "NUMBER", "zip", "works", "for", "you", "please", "NUMBER", "Thanks", "NUMBER", "To", "make", "API", "concise", "and", "clear", "for", "v", "NUMBER", "release", "NUMBER", "Internally", "we", "be", "developing", "a", "better", "alternative", "and", "will", "public", "it", "soon", "NUMBER", "v", "NUMBER", "means", "stable", "NUMBER", "All", "the", "exist", "API", "be", "stable", "and", "cover", "the", "most", "useful", "use", "cases", "NUMBER", "In", "future", "version", "v", "NUMBER", "x", "we", "plan", "to", "add", "more", "function", "but", "the", "API", "that", "be", "release", "in", "v", "NUMBER", "will", "be", "untouched", "NUMBER", "Surely", "NUMBER", "I", "ll", "update", "README", "NUMBER", "md", "to", "reflect", "that", "default", "build", "with", "configure", "cmake", "be", "Debug", "NUMBER", "It", "be", "mention", "inside", "configure", "cmake", "that", "this", "be", "do", "to", "reflect", "default", "automake", "behaviour", "NUMBER", "Hello", "NUMBER", "Most", "distros", "pick", "up", "v", "NUMBER", "release", "of", "brotli", "and", "in", "this", "version", "CLI", "tool", "was", "named", "bro", "NUMBER", "In", "tip", "of", "tree", "version", "it", "be", "brotli", "NUMBER", "In", "one", "week", "hopefully", "brotli", "v", "NUMBER", "will", "be", "release", "and", "distros", "will", "start", "picking", "up", "brotli", "with", "fix", "name", "NUMBER", "Absolutely", "no", "worries", "and", "thanks", "for", "the", "heads", "up", "NUMBER", "Releasing", "executable", "be", "a", "slippery", "road", "there", "be", "tons", "of", "different", "OS", "CPUs", "NUMBER", "Releasing", "for", "some", "of", "combinations", "would", "make", "people", "unhappy", "that", "their", "favorite", "combination", "be", "not", "support", "NUMBER", "That", "be", "why", "binaries", "be", "release", "via", "appropriate", "binary", "distribution", "systems", "e", "NUMBER", "g", "NUMBER", "HomeBrew", "or", "PyPI", "or", "linux", "distros", "NUMBER", "If", "you", "have", "some", "specific", "OS", "CPU", "in", "mind", "we", "would", "be", "glad", "to", "try", "to", "support", "specific", "binary", "distribution", "system", "NUMBER", "After", "NUMBER", "windows", "binaries", "will", "be", "accessible", "as", "build", "artifacts", "NUMBER", "Latest", "build", "could", "be", "taken", "from", "here", "LINK", "name", "order", "asc", "file", "Next", "release", "will", "contain", "those", "artifacts", "as", "well", "NUMBER", "Hello", "Paul", "NUMBER", "Unfortunately", "I", "haven", "t", "find", "any", "information", "on", "how", "non", "gmail", "users", "can", "sign", "CLA", "NUMBER", "Perhaps", "one", "possible", "way", "could", "be", "Corparate", "CLA", "but", "it", "seems", "to", "be", "more", "difficult", "NUMBER", "Travis", "seems", "to", "be", "unhappy", "LINK", "ci", "NUMBER", "org", "google", "brotli", "jobs", "NUMBER", "Included", "into", "NUMBER", "But", "it", "do", "so", "since", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Thanks", "for", "the", "report", "NUMBER", "Going", "to", "investigate", "fix", "soon", "Could", "you", "provide", "sample", "CircleCI", "configuration", "please", "Hi", "NUMBER", "Could", "you", "try", "this", "once", "again", "Now", "both", "static", "and", "shared", "libraries", "be", "build", "NUMBER", "cgo", "NUMBER", "go", "will", "hook", "up", "with", "shared", "libraries", "though", "NUMBER", "Going", "to", "investigate", "it", "on", "Monday", "NUMBER", "Haven", "t", "do", "investivation", "just", "inspected", "the", "code", "NUMBER", "This", "loop", "looks", "suspicious", "LINK", "_encode_worker", "NUMBER", "cc", "L", "NUMBER", "See", "no", "output", "space", "be", "given", "if", "it", "happens", "that", "internal", "brotli", "output", "buffer", "be", "full", "it", "can", "t", "continue", "processing", "NUMBER", "so", "it", "becomes", "infinite", "loop", "NUMBER", "Outer", "wrapper", "also", "doesn", "t", "care", "if", "chunk", "be", "too", "big", "to", "make", "StreamEncodeWorker", "choke", "NUMBER", "Could", "this", "reside", "not", "in", "root", "directory", "Thanks", "for", "the", "report", "going", "to", "investigate", "it", "ASAP", "NUMBER", "I", "would", "be", "grateful", "if", "you", "attach", "an", "example", "of", "such", "file", "NUMBER", "Also", "target", "CPU", "model", "compiler", "version", "and", "compilation", "options", "would", "help", "NUMBER", "Failed", "to", "reproduce", "on", "my", "Mac", "linux", "workstation", "Could", "you", "please", "attach", "results", "of", "cc", "v", "and", "env", "for", "mac", "linux", "NUMBER", "I", "feel", "that", "something", "could", "go", "wrong", "about", "bitness", "signedness", "but", "without", "repro", "can", "t", "test", "it", "fix", "it", "NUMBER", "In", "fresh", "debian", "sid", "in", "docker", "on", "mac", "all", "be", "clean", "root", "NUMBER", "f", "NUMBER", "b", "NUMBER", "clients", "brotli", "bin", "brotli", "Zfk", "balls", "NUMBER", "txt", "root", "NUMBER", "f", "NUMBER", "b", "NUMBER", "clients", "brotli", "env", "HOSTNAME", "NUMBER", "f", "NUMBER", "b", "NUMBER", "PWD", "clients", "brotli", "HOME", "root", "no_proxy", "NUMBER", "local", "NUMBER", "NUMBER", "TERM", "xterm", "SHLVL", "NUMBER", "PATH", "usr", "local", "sbin", "usr", "local", "bin", "usr", "sbin", "usr", "bin", "sbin", "bin", "_", "usr", "bin", "env", "OLDPWD", "clients", "root", "NUMBER", "f", "NUMBER", "b", "NUMBER", "clients", "brotli", "cc", "v", "Using", "build", "in", "specs", "NUMBER", "COLLECT_GCC", "cc", "COLLECT_LTO_WRAPPER", "usr", "lib", "gcc", "x", "NUMBER", "_", "NUMBER", "linux", "gnu", "NUMBER", "lto", "wrapper", "Target", "x", "NUMBER", "_", "NUMBER", "linux", "gnu", "Configured", "with", "NUMBER", "src", "configure", "v", "with", "pkgversion", "Debian", "NUMBER", "NUMBER", "with", "bugurl", "file", "usr", "share", "doc", "gcc", "NUMBER", "README", "NUMBER", "Bugs", "enable", "languages", "c", "ada", "c", "java", "go", "d", "fortran", "objc", "obj", "c", "prefix", "usr", "program", "suffix", "NUMBER", "program", "prefix", "x", "NUMBER", "_", "NUMBER", "linux", "gnu", "enable", "shared", "enable", "linker", "build", "id", "libexecdir", "usr", "lib", "without", "include", "gettext", "enable", "threads", "posix", "libdir", "usr", "lib", "enable", "nls", "with", "sysroot", "enable", "clocale", "gnu", "enable", "libstdcxx", "debug", "enable", "libstdcxx", "time", "yes", "with", "default", "libstdcxx", "abi", "new", "enable", "gnu", "unique", "object", "disable", "vtable", "verify", "enable", "libmpx", "enable", "plugin", "enable", "default", "pie", "with", "system", "zlib", "disable", "browser", "plugin", "enable", "java", "awt", "gtk", "enable", "gtk", "cairo", "with", "java", "home", "usr", "lib", "jvm", "java", "NUMBER", "gcj", "NUMBER", "amd", "NUMBER", "jre", "enable", "java", "home", "with", "jvm", "root", "dir", "usr", "lib", "jvm", "java", "NUMBER", "gcj", "NUMBER", "amd", "NUMBER", "with", "jvm", "jar", "dir", "usr", "lib", "jvm", "export", "java", "NUMBER", "gcj", "NUMBER", "amd", "NUMBER", "with", "arch", "directory", "amd", "NUMBER", "with", "ecj", "jar", "usr", "share", "java", "eclipse", "ecj", "NUMBER", "jar", "with", "target", "system", "zlib", "enable", "objc", "gc", "auto", "enable", "multiarch", "with", "arch", "NUMBER", "i", "NUMBER", "with", "abi", "m", "NUMBER", "with", "multilib", "list", "m", "NUMBER", "m", "NUMBER", "mx", "NUMBER", "enable", "multilib", "with", "tune", "generic", "enable", "checking", "release", "build", "x", "NUMBER", "_", "NUMBER", "linux", "gnu", "host", "x", "NUMBER", "_", "NUMBER", "linux", "gnu", "target", "x", "NUMBER", "_", "NUMBER", "linux", "gnu", "Thread", "model", "posix", "gcc", "version", "NUMBER", "NUMBER", "Debian", "NUMBER", "NUMBER", "It", "seems", "to", "be", "some", "derivative", "of", "debian", "sid", "there", "be", "Java", "Python", "Go", "Node", "and", "Emscripten", "my", "main", "suspect", "NUMBER", "Is", "there", "a", "public", "image", "that", "I", "could", "use", "to", "get", "the", "same", "environment", "Instructions", "to", "recreate", "image", "would", "be", "nice", "NUMBER", "Hopefully", "they", "would", "apply", "to", "Sierra", "NUMBER", "Ping", "Still", "no", "luck", "with", "repro", "Could", "you", "attach", "the", "debug", "log", "compile", "with", "export", "CFLAGS", "DBIT_WRITER_DEBUG", "for", "NUMBER", "bin", "brotli", "Zfk", "balls", "NUMBER", "txt", "Mine", "be", "attached", "bits", "NUMBER", "txt", "LINK", "Any", "update", "Nice", "idea", "Going", "to", "implement", "it", "next", "month", "NUMBER", "Will", "be", "implement", "with", "NUMBER", "Thanks", "Hello", "NUMBER", "Thank", "you", "for", "your", "interest", "to", "brotli", "project", "NUMBER", "In", "verbose", "mode", "CLI", "should", "provide", "some", "information", "useful", "to", "users", "compression", "progress", "ratio", "speed", "etc", "NUMBER", "Currently", "it", "be", "not", "implement", "just", "reserved", "to", "make", "CLI", "more", "stable", "NUMBER", "Format", "explanation", "be", "very", "different", "and", "affects", "performance", "even", "when", "off", "NUMBER", "brotlidump", "be", "the", "best", "choice", "for", "that", "NUMBER", "But", "it", "requires", "some", "care", "as", "it", "might", "not", "work", "out", "of", "the", "box", "NUMBER", "If", "you", "would", "like", "to", "invest", "your", "time", "efforts", "in", "this", "direction", "we", "would", "be", "grateful", "if", "you", "work", "on", "brotlidump", "improvement", "NUMBER", "Nice", "catch", "Going", "to", "fix", "it", "ASAP", "NUMBER", "Will", "get", "fix", "with", "NUMBER", "Thanks", "again", "Sorry", "for", "the", "late", "response", "NUMBER", "Lets", "change", "the", "order", "in", "the", "platforms", "list", "so", "Win", "NUMBER", "be", "listed", "first", "and", "becomes", "the", "default", "NUMBER", "Also", "add", "platform", "blows", "the", "configuration", "matrix", "NUMBER", "Now", "for", "linux", "gmake", "there", "will", "be", "release_win", "NUMBER", "release_win", "NUMBER", "debug_win", "NUMBER", "debug_win", "NUMBER", "Sounds", "ridiculous", "NUMBER", "So", "lets", "get", "rid", "of", "win", "prefix", "NUMBER", "There", "be", "a", "nice", "example", "how", "to", "specify", "architecture", "on", "premake", "wiki", "LINK", "core", "wiki", "architecture", "The", "fix", "looks", "good", "NUMBER", "I", "think", "it", "be", "better", "to", "have", "slightly", "more", "explicit", "checks", "than", "loose", "a", "chance", "when", "compiler", "finds", "a", "real", "issue", "Going", "to", "pick", "the", "fix", "to", "v", "NUMBER", "branch", "Unfortunately", "we", "don", "t", "have", "such", "information", "NUMBER", "Theoretically", "if", "IE", "provides", "provides", "proper", "API", "some", "kind", "of", "extension", "could", "be", "created", "NUMBER", "Most", "probably", "there", "be", "such", "API", "because", "it", "be", "required", "for", "Anti", "Malware", "to", "work", "NUMBER", "The", "problem", "be", "we", "don", "t", "have", "enough", "resources", "to", "develop", "br", "extension", "for", "IE", "Thanks", "NUMBER", "new", "CLI", "bro", "brotli", "man", "page", "JNI", "wrappers", "preparation", "for", "bazel", "build", "add", "raw", "binary", "dictionary", "representation", "dictionary", "NUMBER", "bin", "add", "ability", "to", "side", "load", "brotli", "RFC", "dictionary", "decoder", "persists", "last", "error", "now", "fix", "BrotliDecoderDecompress", "documentation", "go", "reader", "don", "t", "block", "until", "necessary", "more", "consistent", "bazel", "target", "names", "Java", "dictionary", "data", "compiled", "footprint", "reduced", "Java", "test", "refactoring", "Thank", "you", "Tino", "Added", "link", "to", "README", "NUMBER", "md", "NUMBER", "Thanks", "NUMBER", "Thanks", "for", "the", "heads", "up", "NUMBER", "Going", "to", "investigate", "it", "deeper", "in", "early", "June", "NUMBER", "Slowdown", "on", "all", "zeroes", "data", "will", "be", "fix", "with", "NUMBER", "For", "generic", "data", "we", "expect", "that", "NUMBER", "MB", "heuristic", "provides", "both", "faster", "and", "denser", "compression", "NUMBER", "Thanks", "for", "the", "suggestion", "but", "we", "tend", "to", "keep", "brotli", "compressor", "pure", "NUMBER", "This", "be", "a", "feature", "for", "brotli", "framing", "format", "NUMBER", "Could", "you", "place", "your", "FR", "into", "framing", "format", "discussion", "please", "NUMBER", "Hello", "NUMBER", "Thanks", "for", "the", "PR", "Just", "returned", "from", "vacation", "NUMBER", "Going", "to", "review", "your", "PR", "this", "week", "NUMBER", "Hi", "NUMBER", "Sorry", "for", "the", "super", "long", "review", "NUMBER", "Will", "get", "back", "to", "you", "as", "soon", "as", "get", "results", "from", "internal", "reviewer", "NUMBER", "Gr\u00fc\u00dfe", "Stefan", "NUMBER", "Thanks", "for", "the", "PR", "NUMBER", "Is", "it", "a", "standalone", "change", "or", "release", "of", "new", "artifact", "version", "be", "required", "Going", "to", "push", "a", "little", "update", "to", "decoder", "soon", "that", "provides", "NUMBER", "NUMBER", "speedup", "and", "publish", "new", "artifact", "right", "after", "that", "NUMBER", "Hopefully", "this", "will", "happen", "tomorrow", "NUMBER", "Just", "release", "NUMBER", "Thanks", "for", "the", "report", "NUMBER", "Is", "there", "a", "way", "to", "have", "both", "static", "and", "shared", "libraries", "on", "windows", "NUMBER", "IIUC", "the", "problem", "be", "that", "on", "Windows", "the", "result", "of", "static", "and", "shared", "build", "be", "both", "library", "NUMBER", "lib", "so", "they", "can", "not", "coexist", "in", "one", "place", "Going", "to", "try", "to", "fix", "the", "problem", "ASAP", "NUMBER", "Would", "be", "very", "grateful", "if", "you", "point", "to", "the", "CMake", "project", "that", "have", "those", "problem", "solve", "to", "we", "could", "grab", "the", "best", "practices", "from", "there", "NUMBER", "Thanks", "NUMBER", "Going", "to", "try", "add", "suffix", "soon", "NUMBER", "Meanwhile", "I", "ve", "split", "auto", "cmake", "and", "cmake", "build", "manual", "NUMBER", "I", "hope", "plain", "CMake", "scenario", "be", "possible", "on", "Windows", "Don", "t", "know", "why", "we", "put", "all", "artifacts", "to", "bin", "on", "Windows", "most", "likely", "it", "for", "historical", "reasons", "going", "to", "update", "libraries", "installation", "path", "very", "soon", "NUMBER", "I", "forsee", "one", "drawback", "with", "build", "shared", "static", "NUMBER", "Unfortenately", "currently", "we", "have", "to", "stick", "to", "CMake", "NUMBER", "This", "means", "that", "we", "can", "not", "use", "OBJECT", "libraries", "implement", "in", "NUMBER", "As", "a", "consequence", "sources", "will", "be", "compiled", "twice", "NUMBER", "Max", "could", "you", "take", "a", "look", "at", "NUMBER", "I", "ve", "unified", "libraries", "installation", "across", "platforms", "NUMBER", "But", "there", "be", "an", "open", "question", "what", "to", "do", "with", "include", "NUMBER", "Hello", "Max", "NUMBER", "Can", "t", "remember", "for", "sure", "if", "all", "the", "problem", "have", "be", "resolve", "NUMBER", "Please", "write", "back", "if", "there", "be", "something", "still", "to", "be", "do", "NUMBER", "Now", "we", "be", "preparing", "to", "release", "v", "NUMBER", "finally", "NUMBER", "so", "it", "be", "time", "to", "put", "build", "scripts", "to", "the", "perfect", "state", "Thanks", "for", "the", "report", "NUMBER", "Updated", "readme", "and", "cmake", "configuration", "NUMBER", "Please", "respond", "if", "it", "works", "better", "now", "NUMBER", "Thanks", "NUMBER", "BUILD_SHARED_LIBS", "OFF", "be", "no", "op", "now", "NUMBER", "Removing", "it", "from", "options", "renders", "your", "command", "sequence", "to", "be", "exactly", "the", "same", "as", "one", "given", "in", "readme", "NUMBER", "Going", "to", "investigate", "ASAP", "tomorrow", "Current", "workaround", "for", "simple", "build", "cases", "would", "be", "cmake", "NUMBER", "make", "for", "static", "libraries", "cmake", "NUMBER", "DBUILD_SHARED_LIBS", "ON", "make", "for", "shared", "libraries", "Digging", "further", "why", "this", "machinery", "doesn", "t", "work", "as", "expected", "NUMBER", "Thanks", "for", "the", "report", "NUMBER", "Going", "to", "update", "readme", "and", "most", "probably", "release", "NUMBER", "after", "fix", "buildfiles", "NUMBER", "Line", "CMAKE_DEPENDENT_OPTION", "BUILD_SHARED_LIBS", "Build", "shared", "libraries", "ON", "NOT", "BROTLI_BUNDLED_MODE", "OFF", "be", "read", "as", "if", "not", "in", "bundled", "mode", "top", "level", "project", "then", "by", "default", "set", "BUILD_SHARED_LIBS", "ON", "NUMBER", "For", "some", "reason", "this", "magic", "didn", "t", "happen", "NUMBER", "That", "be", "what", "configure", "cmake", "flag", "has", "no", "effect", "NUMBER", "Oh", "I", "have", "a", "guess", "what", "has", "happened", "CMake", "be", "a", "very", "nasty", "build", "system", "NUMBER", "If", "you", "occasionally", "use", "it", "in", "root", "project", "folder", "you", "poison", "it", "NUMBER", "CMake", "will", "cache", "some", "variables", "and", "do", "unexpect", "things", "based", "on", "cached", "values", "NUMBER", "That", "be", "why", "there", "be", "mkdir", "out", "cd", "out", "and", "mkdir", "out", "static", "cd", "static", "out", "in", "readme", "NUMBER", "To", "cure", "the", "poisoned", "repository", "try", "git", "reset", "hard", "git", "clean", "dfx", "NUMBER", "Going", "to", "see", "if", "it", "be", "possible", "NUMBER", "If", "you", "point", "to", "a", "sample", "project", "with", "CMake", "build", "that", "features", "such", "option", "it", "will", "help", "greatly", "NUMBER", "Updated", "cmake", "to", "build", "both", "shared", "and", "static", "libraries", "the", "same", "time", "It", "seems", "to", "be", "a", "wrong", "name", "for", "the", "file", "NUMBER", "Actually", "sources", "be", "for", "python", "module", "distribution", "NUMBER", "We", "be", "on", "the", "way", "of", "splitting", "it", "out", "to", "brotli", "wheels", "subproject", "NUMBER", "Going", "to", "make", "an", "add", "full", "source", "release", "artifact", "and", "extend", "README", "ASAP", "NUMBER", "Source", "Code", "be", "the", "right", "link", "NUMBER", "It", "contains", "the", "full", "copy", "of", "repo", "NUMBER", "It", "be", "overweighted", "NUMBER", "MiB", "because", "it", "contains", "pdf", "images", "and", "other", "garbage", "NUMBER", "In", "next", "release", "going", "to", "create", "a", "distilled", "version", "with", "no", "garbage", "just", "sources", "meta", "and", "test", "NUMBER", "LINK", "Going", "to", "be", "push", "with", "next", "update", "NUMBER", "Hi", "NUMBER", "Was", "it", "ported", "by", "hand", "or", "with", "some", "tool", "It", "would", "be", "nice", "to", "have", "some", "semi", "automate", "way", "to", "downstream", "change", "from", "Java", "port", "to", "C", "NUMBER", "Managed", "to", "transpile", "Java", "decoder", "with", "sharpen", "NUMBER", "Will", "publish", "it", "soon", "NUMBER", "Please", "take", "a", "look", "at", "NUMBER", "Going", "to", "add", "integration", "test", "a", "little", "bit", "later", "NUMBER", "Thanks", "for", "the", "report", "NUMBER", "Going", "to", "fix", "it", "soon", "NUMBER", "Released", "NUMBER", "with", "fix", "structure", "of", "sources", "NUMBER", "jar", "Should", "become", "available", "in", "less", "than", "NUMBER", "hours", "NUMBER", "Hi", "NUMBER", "Thank", "you", "for", "help", "NUMBER", "Yup", "PGI", "environment", "would", "be", "nice", "to", "have", "NUMBER", "Thank", "you", "NUMBER", "Meged", "to", "NUMBER", "GZIPInputStream", "be", "based", "on", "native", "library", "NUMBER", "BrotliInputStream", "be", "a", "pure", "java", "implementation", "for", "platforms", "products", "where", "embedding", "of", "native", "code", "be", "not", "allow", "NUMBER", "For", "other", "platforms", "JNI", "wrapper", "should", "be", "use", "NUMBER", "Hello", "NUMBER", "Sorry", "this", "request", "has", "fallen", "out", "of", "my", "view", "NUMBER", "I", "ll", "give", "access", "to", "PyPI", "account", "soon", "NUMBER", "Going", "to", "investigate", "what", "bureaucracy", "needs", "to", "be", "do", "to", "create", "google", "brotli", "wheels", "repo", "NUMBER", "Woohoo", "LINK", "wheels", "has", "arrived", "No", "worries", "Any", "update", "This", "piece", "of", "code", "be", "very", "tricky", "it", "allows", "continuation", "after", "break", "in", "decoding", "NUMBER", "We", "use", "special", "value", "NUMBER", "to", "specify", "that", "distance", "be", "not", "decoded", "yet", "NUMBER", "If", "distance", "be", "decoded", "we", "retake", "it", "from", "distance", "ring", "buffer", "NUMBER", "Please", "take", "a", "look", "where", "s", "dist_rb_idx", "be", "incremented", "and", "decremented", "NUMBER", "For", "distance", "NUMBER", "it", "has", "one", "extra", "decrement", "so", "after", "processing", "the", "command", "it", "remains", "unchanged", "NUMBER", "Oh", "I", "see", "NUMBER", "Thanks", "for", "the", "report", "NUMBER", "Going", "to", "fix", "that", "ASAP", "NUMBER", "Fixed", "NUMBER", "Again", "thank", "you", "This", "bug", "be", "a", "new", "survival", "champion", "it", "was", "introduce", "about", "NUMBER", "years", "ago", "O", "For", "test", "the", "fix", "we", "have", "internally", "add", "NUMBER", "synthetic", "test", "c", "TEST", "SynthTest", "IntactDistanceRingBuffer", "NUMBER", "uint", "NUMBER", "_t", "compressed", "NUMBER", "x", "NUMBER", "b", "NUMBER", "x", "NUMBER", "a", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xe", "NUMBER", "NUMBER", "xb", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xe", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "x", "NUMBER", "b", "NUMBER", "xa", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "Verify", "R", "main_header", "metablock_header_easy", "NUMBER", "NUMBER", "command_inscopy_easy", "NUMBER", "NUMBER", "himself", "from", "dictionary", "bits", "NUMBER", "distance", "NUMBER", "from", "RB", "RB", "remains", "intact", "command_inscopy_easy", "NUMBER", "NUMBER", "copy", "self", "bits", "NUMBER", "distance", "NUMBER", "from", "RB", "RB", "remains", "intact", "compressed", "sizeof", "compressed", "BROTLI_DECODER_SUCCESS", "himselfself", "TEST", "SynthTest", "IntactDistanceRingBuffer", "NUMBER", "uint", "NUMBER", "_t", "compressed", "NUMBER", "x", "NUMBER", "b", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xe", "NUMBER", "NUMBER", "xb", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xe", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "x", "NUMBER", "b", "NUMBER", "x", "NUMBER", "NUMBER", "xa", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "Verify", "R", "main_header", "metablock_header_easy", "NUMBER", "NUMBER", "command_inscopy_easy", "NUMBER", "NUMBER", "scroll", "from", "dictionary", "bits", "NUMBER", "distance", "NUMBER", "from", "RB", "RB", "remains", "intact", "command_inscopy_easy", "NUMBER", "NUMBER", "copy", "roll", "bits", "NUMBER", "distance", "NUMBER", "from", "RB", "RB", "remains", "intact", "compressed", "sizeof", "compressed", "BROTLI_DECODER_SUCCESS", "scrollroll", "TEST", "SynthTest", "IntactDistanceRingBuffer", "NUMBER", "uint", "NUMBER", "_t", "compressed", "NUMBER", "x", "NUMBER", "b", "NUMBER", "x", "NUMBER", "f", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xe", "NUMBER", "NUMBER", "xb", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xe", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "x", "NUMBER", "b", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "Verify", "R", "main_header", "metablock_header_easy", "NUMBER", "NUMBER", "command_inscopy_easy", "NUMBER", "NUMBER", "left", "from", "dictionary", "index", "NUMBER", "NUMBER", "NUMBER", "bits", "NUMBER", "distance", "NUMBER", "from", "RB", "RB", "remains", "intact", "command_inscopy_easy", "NUMBER", "NUMBER", "data", "from", "dictionary", "index", "NUMBER", "NUMBER", "NUMBER", "bits", "NUMBER", "distance", "NUMBER", "from", "RB", "RB", "remains", "intact", "command_inscopy_easy", "NUMBER", "NUMBER", "data", "from", "dictionary", "index", "NUMBER", "NUMBER", "NUMBER", "bits", "NUMBER", "distance", "NUMBER", "from", "RB", "RB", "remains", "intact", "command_inscopy_easy", "NUMBER", "NUMBER", "left", "from", "dictionary", "index", "NUMBER", "NUMBER", "NUMBER", "bits", "NUMBER", "distance", "NUMBER", "from", "RB", "RB", "remains", "intact", "compressed", "sizeof", "compressed", "BROTLI_DECODER_SUCCESS", "leftdatadataleft", "The", "first", "parameter", "of", "Verify", "be", "DSL", "code", "snippet", "use", "to", "generate", "compressed", "NUMBER", "The", "last", "parameter", "be", "an", "expected", "output", "string", "NUMBER", "Ooops", "miss", "the", "case", "when", "distance", "code", "be", "baked", "into", "command", "NUMBER", "I", "hope", "now", "it", "be", "finally", "fix", "with", "NUMBER", "Brotli", "do", "not", "use", "any", "shared", "mutable", "data", "but", "there", "be", "no", "explicit", "memory", "barriers", "NUMBER", "So", "as", "long", "as", "all", "things", "with", "a", "single", "instance", "be", "do", "within", "one", "thread", "it", "be", "safe", "every", "thread", "may", "work", "with", "as", "many", "instances", "as", "it", "wants", "NUMBER", "But", "as", "soon", "as", "instance", "be", "pass", "between", "threads", "developer", "should", "take", "care", "of", "exclusive", "access", "to", "the", "instance", "and", "appropriate", "memory", "barriers", "NUMBER", "I", "believe", "this", "model", "be", "call", "conditionally", "safe", "LINK", "_safety", "NUMBER", "Hello", "NUMBER", "Thanks", "for", "the", "report", "going", "to", "fix", "it", "ASAP", "NUMBER", "NB", "exit", "on", "OOM", "be", "considered", "normal", "for", "code", "in", "production", "use", "DBROTLI_ENCODER_CLEANUP_ON_OOM", "compiler", "option", "to", "allow", "encoder", "finish", "its", "work", "and", "cleanup", "after", "itself", "NUMBER", "Pardon", "Fixed", "with", "NUMBER", "Oh", "this", "ifdef", "wasn", "t", "retouched", "for", "almost", "NUMBER", "years", "NUMBER", "Going", "to", "fix", "it", "with", "definitions", "taken", "from", "port", "NUMBER", "h", "very", "soon", "NUMBER", "Will", "be", "fix", "with", "NUMBER", "NUMBER", "Tried", "sharpen", "NUMBER", "Almost", "succeeded", "BitReader", "has", "problem", "with", "nio", "as", "expected", "InputStream", "be", "unexpectedly", "unknown", "to", "sharpen", "I", "believe", "with", "some", "minimal", "config", "it", "will", "be", "possible", "to", "have", "automate", "org", "NUMBER", "brotli", "NUMBER", "dec", "to", "c", "conversion", "NUMBER", "NUMBER", "for", "C", "wrapper", "for", "libbrotli", "NUMBER", "for", "NuGet", "support", "Updated", "issue", "title", "placed", "a", "task", "list", "into", "issue", "description", "About", "static_dict", "it", "be", "masked", "with", "NUMBER", "x", "NUMBER", "F", "to", "filter", "out", "highest", "bit", "NUMBER", "Going", "to", "add", "assert", "comment", "expand", "kBrotliDictionarySizeBitsByLength", "and", "make", "mask", "more", "narrow", "just", "to", "be", "on", "a", "safe", "side", "NUMBER", "As", "for", "other", "cases", "this", "never", "can", "happen", "according", "to", "BL", "take", "a", "look", "at", "EmitXXX", "function", "NUMBER", "We", "mask", "with", "NUMBER", "xFF", "for", "performance", "reasons", "it", "turns", "to", "movzbl", "instead", "of", "real", "masking", "NUMBER", "Going", "to", "add", "asserts", "to", "calm", "down", "VC", "Should", "be", "fix", "with", "NUMBER", "split", "brotli", "common", "dec", "enc", "NUMBER", "pc", "file", "add", "URL", "and", "use", "DEPENS_PRIVATE", "generator", "params", "We", "be", "terribly", "sorry", "for", "the", "inconveniences", "NUMBER", "It", "was", "a", "difficult", "decision", "that", "hit", "a", "lot", "of", "fans", "of", "brotli", "NUMBER", "But", "it", "has", "to", "be", "do", "to", "cover", "more", "use", "cases", "NUMBER", "In", "some", "use", "cases", "brotli", "encoder", "be", "an", "unbearable", "burden", "NUMBER", "So", "we", "decided", "to", "split", "brotli", "into", "encoder", "and", "decoder", "modules", "NUMBER", "common", "be", "a", "part", "required", "by", "both", "of", "them", "also", "there", "be", "an", "alternative", "variant", "of", "common", "module", "that", "do", "not", "bring", "dictionary", "and", "allows", "loading", "it", "for", "very", "special", "use", "cases", "NUMBER", "It", "be", "an", "unfortunate", "consequence", "we", "try", "to", "avoid", "redundancy", "NUMBER", "Thanks", "NUMBER", "Going", "to", "fix", "it", "soon", "NUMBER", "Sorry", "for", "the", "long", "delay", "NUMBER", "It", "can", "be", "do", "NUMBER", "but", "be", "there", "a", "use", "case", "for", "this", "NUMBER", "It", "be", "easier", "to", "make", "something", "when", "there", "be", "a", "clear", "goal", "to", "achieve", "NUMBER", "Currently", "there", "be", "no", "way", "to", "speedup", "decoding", "unless", "streams", "be", "completely", "independent", "compressed", "less", "efficiently", "NUMBER", "We", "be", "work", "on", "tool", "that", "may", "help", "create", "custom", "dictionaries", "improve", "compression", "over", "multiple", "chunks", "NUMBER", "For", "multicore", "compression", "I", "be", "going", "to", "return", "what", "was", "remove", "but", "based", "on", "new", "API", "so", "not", "dependent", "on", "internal", "details", "NUMBER", "But", "it", "will", "be", "rather", "a", "template", "for", "multicore", "compression", "it", "will", "be", "a", "function", "that", "compress", "chunks", "but", "on", "a", "single", "core", "NUMBER", "To", "make", "it", "multicore", "one", "will", "be", "required", "to", "add", "OS", "dependent", "multicore", "wrapper", "NUMBER", "There", "were", "tiny", "change", "NUMBER", "I", "d", "be", "glad", "to", "tag", "with", "NUMBER", "but", "to", "do", "that", "we", "need", "to", "remove", "function", "tag", "DEPRECATED", "first", "NUMBER", "I", "m", "going", "to", "ask", "ngx_brotli", "if", "they", "can", "stick", "to", "some", "specific", "commit", "so", "this", "removal", "won", "t", "hurt", "them", "NUMBER", "I", "ve", "prepared", "a", "patch", "for", "ngx_brotli", "but", "it", "may", "take", "some", "time", "to", "land", "it", "because", "of", "the", "holidays", "NUMBER", "We", "re", "get", "closer", "Just", "yesterday", "brotli", "NUMBER", "org", "became", "live", "NUMBER", "The", "only", "thing", "that", "holds", "now", "be", "nginx", "brotli", "module", "NUMBER", "It", "uses", "deprecate", "API", "I", "plan", "to", "remove", "before", "release", "NUMBER", "Just", "discover", "that", "ngx_brotli", "now", "depends", "on", "brotli", "via", "git", "submodule", "we", "be", "unblocked", "to", "move", "further", "So", "the", "plan", "be", "release", "NUMBER", "with", "as", "brotli", "be", "now", "and", "soon", "after", "that", "NUMBER", "with", "deprecate", "API", "remove", "NUMBER", "Just", "recently", "sent", "a", "PR", "with", "latest", "update", "NUMBER", "After", "it", "be", "landed", "we", "can", "start", "release", "NUMBER", "v", "NUMBER", "be", "release", "NUMBER", "Sorry", "for", "the", "delays", "NUMBER", "v", "NUMBER", "be", "come", "soon", "NUMBER", "Surely", "NUMBER", "Technically", "with", "bro", "be", "replaced", "with", "brotli", "and", "recent", "tiny", "API", "additions", "we", "be", "ready", "to", "do", "it", "Going", "to", "see", "through", "issue", "list", "and", "hopefully", "new", "release", "will", "happen", "next", "week", "NUMBER", "I", "m", "terribly", "sorry", "but", "NUMBER", "the", "answer", "be", "again", "very", "soon", "NUMBER", "We", "have", "find", "that", "Custom", "Dictionary", "feature", "be", "somewhat", "confusing", "and", "misleading", "NUMBER", "So", "we", "be", "going", "to", "unland", "it", "this", "week", "NUMBER", "After", "that", "our", "API", "be", "clean", "and", "concise", "and", "NUMBER", "ready", "NUMBER", "Hopefully", "it", "be", "the", "last", "delay", "NUMBER", "No", "more", "soon", "we", "will", "just", "release", "it", "Yup", "NUMBER", "Now", "going", "through", "open", "issue", "NUMBER", "Perhaps", "one", "more", "will", "be", "address", "before", "release", "build", "both", "static", "and", "dynamic", "libraries", "by", "CMake", "NUMBER", "It", "looks", "painful", "as", "it", "will", "double", "compilation", "time", "but", "I", "suppose", "a", "necessary", "thing", "NUMBER", "Releasing", "brotli", "tomorrow", "Just", "set", "one", "day", "to", "settle", "the", "dust", "of", "the", "latest", "change", "NUMBER", "tada", "Woohoo", "Brotli", "v", "NUMBER", "be", "release", "now", "tada", "Of", "course", "NUMBER", "This", "will", "be", "my", "first", "priority", "next", "week", "NUMBER", "release", "GIL", "on", "CPU", "intensive", "blocks", "fix", "NUMBER", "use", "BrotliDecoderTakeOutput", "less", "memory", "less", "memcpy", "nicksay", "could", "you", "review", "please", "NUMBER", "Finished", "well", "after", "rerun", "NUMBER", "Going", "to", "rebase", "and", "retest", "as", "a", "whole", "NUMBER", "Will", "Py_BEGIN_ALLOW_THREADS", "Py_END_ALLOW_THREADS", "do", "the", "trick", "or", "we", "need", "something", "more", "exotic", "Going", "do", "it", "this", "week", "NUMBER", "LINK", "cmake", "Done", "NUMBER", "If", "more", "enable", "disable", "with", "params", "be", "required", "feel", "free", "to", "request", "Surely", "NUMBER", "Will", "try", "to", "do", "it", "today", "NUMBER", "Please", "take", "a", "look", "at", "NUMBER", "Thanks", "NUMBER", "Currently", "we", "have", "no", "plan", "for", "Java", "encoder", "port", "NUMBER", "But", "for", "sure", "we", "will", "have", "JNI", "bindings", "NUMBER", "Encoder", "be", "complex", "and", "we", "try", "to", "use", "all", "the", "power", "of", "CPU", "to", "be", "competitive", "NUMBER", "With", "Java", "it", "be", "much", "harder", "to", "match", "plain", "C", "performance", "NUMBER", "However", "it", "be", "possible", "that", "some", "subset", "of", "encoder", "levels", "NUMBER", "NUMBER", "or", "something", "similar", "will", "be", "ported", "to", "support", "specific", "use", "cases", "NUMBER", "Merging", "into", "NUMBER", "Thank", "you", "Please", "write", "your", "thoughts", "on", "what", "features", "Brotli", "framing", "format", "should", "have", "NUMBER", "PS", "framing", "format", "should", "not", "be", "a", "swiss", "knife", "i", "NUMBER", "e", "NUMBER", "match", "every", "imaginable", "use", "case", "NUMBER", "Easy", "pick", "should", "not", "be", "a", "valid", "UTF", "NUMBER", "string", "should", "not", "be", "a", "valid", "brotli", "stream", "should", "have", "unique", "magic", "bytes", "signature", "First", "NUMBER", "requirements", "give", "us", "that", "the", "first", "magic", "byte", "be", "NUMBER", "x", "NUMBER", "NUMBER", "Hello", "NUMBER", "What", "be", "the", "difference", "between", "build", "and", "build_ext", "ooops", "rebase", "be", "required", "LINK", "ci", "NUMBER", "org", "google", "brotli", "jobs", "NUMBER", "May", "it", "be", "ralated", "to", "LINK", "ci", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "osx", "NUMBER", "default", "image", "live", "Homebrew", "gcc", "NUMBER", "formulae", "be", "not", "support", "for", "OS", "version", "newer", "than", "maverics", "Thanks", "fix", "this", "way", "NUMBER", "VS", "thinks", "that", "brotlienc", "depends", "on", "static", "brotlicommon", "NUMBER", "Of", "course", "we", "can", "modify", "appveyor", "config", "to", "force", "build", "static", "artefacts", "but", "first", "we", "should", "teach", "CMake", "to", "generate", "valid", "shared", "library", "build", "for", "VS", "NUMBER", "Working", "on", "DLL", "imports", "export", "stub", "lib", "generation", "NUMBER", "That", "will", "include", "this", "PR", "NUMBER", "Thank", "you", "NUMBER", "I", "think", "it", "should", "be", "if", "NOT", "WIN", "NUMBER", "install", "DIRECTORY", "BROTLI_INCLUDE_DIRS", "brotli", "DESTINATION", "CMAKE_INSTALL_INCLUDEDIR", "endif", "I", "meant", "it", "should", "be", "outside", "of", "be", "shared", "libs", "because", "when", "link", "statically", "include", "required", "as", "well", "Sounds", "logical", "NUMBER", "One", "last", "thing", "sorry", "any", "reason", "not", "to", "use", "paths", "provide", "by", "GNUInstallDirs", "I", "m", "not", "very", "experienced", "in", "that", "matter", "but", "it", "feels", "like", "this", "will", "make", "build", "a", "bit", "more", "portable", "NUMBER", "CMAKE_INSTALL_INCLUDEDIR", "NUMBER", "And", "CMake", "wants", "ARCHIVE", "DESTINATION", "as", "well", "NUMBER", "Hello", "Alex", "NUMBER", "Is", "it", "a", "workaround", "for", "miss", "apple", "gcc", "NUMBER", "NUMBER", "NUMBER", "If", "so", "then", "PR", "NUMBER", "resolve", "that", "problem", "NUMBER", "Lets", "not", "strick", "to", "particular", "images", "if", "possible", "NUMBER", "Hi", "NUMBER", "Looks", "nice", "NUMBER", "Would", "you", "mind", "to", "drop", "a", "few", "lines", "to", "README", "NUMBER", "md", "how", "to", "use", "yapf", "append", "a", "new", "Development", "section", "Hi", "NUMBER", "python", "README", "NUMBER", "md", "sounds", "better", "but", "then", "you", "should", "mention", "that", "format", "of", "setup", "NUMBER", "py", "in", "root", "directory", "be", "also", "a", "good", "habit", "Could", "you", "point", "where", "it", "be", "use", "in", "brotli", "please", "NUMBER", "The", "only", "double", "to", "string", "conversion", "occur", "in", "bro", "tool", "NUMBER", "Hello", "NUMBER", "We", "already", "have", "pure", "Java", "decoder", "NUMBER", "Unfortunately", "its", "quality", "isn", "t", "proven", "so", "it", "be", "too", "early", "to", "release", "it", "NUMBER", "I", "hope", "this", "will", "arrive", "shortly", "after", "v", "NUMBER", "brotli", "release", "that", "be", "get", "closer", "and", "closer", "NUMBER", "Good", "news", "we", "have", "decided", "to", "publish", "this", "draft", "very", "soon", "before", "v", "NUMBER", "NUMBER", "Update", "we", "have", "more", "or", "less", "work", "java", "decoder", "now", "going", "to", "publish", "it", "early", "next", "week", "NUMBER", "Done", "NUMBER", "Going", "to", "push", "to", "Maven", "Central", "but", "it", "might", "take", "a", "considerable", "amount", "time", "NUMBER", "poms", "be", "wrong", "but", "still", "work", "NUMBER", "Going", "to", "fix", "them", "ASAP", "NUMBER", "Next", "week", "I", "hope", "NUMBER", "Sorry", "for", "the", "delay", "again", "NUMBER", "Now", "I", "think", "it", "will", "be", "on", "the", "next", "week", "NUMBER", "Sorry", "NUMBER", "Still", "waiting", "for", "brotli", "NUMBER", "org", "to", "be", "made", "online", "NUMBER", "Sorry", "NUMBER", "org", "NUMBER", "brotli", "NUMBER", "dec", "be", "now", "accessible", "on", "Maven", "Central", "LINK", "search", "NUMBER", "Cga", "NUMBER", "C", "NUMBER", "NUMBER", "Corg", "NUMBER", "brotli", "NUMBER", "dec", "Please", "pick", "up", "sais", "as", "a", "git", "submodule", "NUMBER", "E", "NUMBER", "g", "NUMBER", "link", "research", "third_party", "esaxx", "to", "LINK", "Does", "this", "problem", "occur", "with", "CMake", "or", "Premake", "NUMBER", "generate", "XCode", "projects", "Ideally", "there", "will", "be", "only", "one", "port", "NUMBER", "h", "and", "we", "be", "moving", "towards", "this", "NUMBER", "Feel", "free", "to", "ping", "me", "if", "this", "be", "urgent", "NUMBER", "The", "only", "difference", "between", "v", "NUMBER", "and", "v", "NUMBER", "in", "decoder", "besides", "NUMBER", "vs", "NUMBER", "bits", "be", "use", "rbit", "instruction", "NUMBER", "Could", "you", "check", "that", "rbit", "works", "on", "ARMv", "NUMBER", "please", "NUMBER", "Hello", "NUMBER", "Hasn", "t", "NUMBER", "fix", "the", "rbit", "problem", "Hello", "mdejong", "NUMBER", "Please", "could", "you", "check", "that", "replacing", "if", "defined", "BROTLI_TARGET_ARMV", "NUMBER", "with", "if", "defined", "BROTLI_TARGET_ARMV", "NUMBER", "defined", "BROTLI_TARGET_ARMV", "NUMBER", "before", "BrotliRBit", "declaration", "do", "not", "break", "build", "test", "Thanks", "Nice", "Thanks", "Works", "for", "me", "both", "with", "NUMBER", "and", "NUMBER", "version", "NUMBER", "Could", "you", "publish", "verbose", "Bazel", "report", "NUMBER", "Perhaps", "there", "be", "some", "other", "bug", "in", "Bazel", "or", "some", "environment", "configuration", "problem", "NUMBER", "Please", "consider", "add", "TODO", "creating", "issue", "to", "use", "cc_inc_library", "when", "it", "be", "fix", "NUMBER", "Using", "include", "causes", "warning", "WARNING", "usr", "local", "google", "home", "eustas", "clients", "brotli", "BUILD", "NUMBER", "NUMBER", "in", "include", "attribute", "of", "cc_library", "rule", "brotli", "include", "resolve", "to", "include", "not", "in", "third_party", "NUMBER", "This", "will", "be", "an", "error", "in", "the", "future", "NUMBER", "Nice", "catch", "It", "be", "dead", "since", "last", "October", "but", "all", "compilers", "remain", "silent", "NUMBER", "TravisCL", "experience", "some", "troubles", "but", "I", "ll", "rerun", "the", "build", "when", "it", "feel", "better", "NUMBER", "Creating", "plugin", "be", "a", "nice", "initiative", "but", "NUMBER", "then", "it", "will", "be", "a", "painful", "experience", "for", "users", "they", "expect", "that", "everything", "works", "out", "of", "the", "box", "NUMBER", "Perhaps", "it", "will", "be", "more", "efficient", "to", "negotiate", "with", "Igor", "Pavlov", "NUMBER", "Zip", "author", "to", "make", "Brotli", "the", "part", "of", "official", "distribution", "NUMBER", "Meanwhile", "to", "play", "with", "different", "compressors", "one", "can", "use", "Squash", "LINK", "Compression", "Abstraction", "Library", "NUMBER", "It", "already", "has", "NUMBER", "compressor", "plugin", "including", "Brotli", "and", "has", "bindings", "for", "Vala", "and", "Rust", "NUMBER", "Cool", "With", "VS", "it", "be", "logical", "to", "use", "build", "system", "that", "support", "project", "file", "generation", "cmake", "or", "premake", "NUMBER", "for", "cmake", "run", "cmake", "G", "some_generator", "where", "_some_generator_", "be", "pick", "from", "the", "list", "provide", "by", "cmake", "help", "for", "premake", "NUMBER", "run", "premake", "NUMBER", "vs", "NUMBER", "Of", "course", "install", "cmake", "premake", "NUMBER", "be", "a", "prerequisite", "NUMBER", "Thanks", "for", "the", "report", "NUMBER", "I", "ll", "investigate", "it", "later", "NUMBER", "Feel", "free", "to", "ping", "me", "in", "a", "month", "or", "so", "it", "I", "do", "not", "report", "back", "NUMBER", "Going", "to", "add", "this", "behavior", "soon", "NUMBER", "Should", "be", "fix", "with", "PR", "NUMBER", "Though", "it", "be", "barely", "minimal", "implementation", "NUMBER", "please", "check", "if", "helps", "in", "your", "case", "NUMBER", "Going", "to", "revamp", "command", "line", "tool", "soon", "NUMBER", "Planned", "change", "more", "gzip", "like", "argument", "better", "help", "message", "man", "page", "rename", "to", "brotli", "to", "avoid", "clash", "with", "exist", "usr", "bin", "bro", "tool", "Already", "do", "Released", "as", "NUMBER", "to", "be", "safe", "No", "worries", "NUMBER", "Ooops", "NUMBER", "Released", "from", "master", "instead", "of", "branch", "NUMBER", "Done", "Please", "could", "you", "help", "with", "those", "things", "Internally", "we", "use", "SWIG", "and", "JNI", "wrappers", "for", "brotli", "library", "NUMBER", "We", "plan", "publish", "them", "closer", "to", "Brotli", "NUMBER", "release", "NUMBER", "Also", "we", "have", "pure", "java", "brotli", "decoder", "NUMBER", "And", "again", "it", "will", "publish", "a", "little", "bit", "later", "NUMBER", "Sorry", "NUMBER", "There", "be", "third", "party", "port", "to", "JavaScript", "and", "Rust", "NUMBER", "Not", "sure", "may", "be", "even", "to", "Go", "NUMBER", "v", "NUMBER", "be", "not", "about", "format", "it", "be", "about", "API", "NUMBER", "We", "need", "to", "make", "a", "final", "clean", "ups", "remove", "deprecate", "API", "and", "make", "sure", "that", "API", "be", "portable", "and", "easy", "to", "use", "NUMBER", "So", "I", "believe", "we", "be", "almost", "here", "NUMBER", "So", "when", "v", "NUMBER", "be", "release", "API", "be", "considered", "stable", "it", "be", "good", "time", "to", "write", "wrappers", "to", "different", "languages", "NUMBER", "Hi", "NUMBER", "Java", "decoder", "seems", "to", "be", "ready", "for", "usage", "NUMBER", "We", "ve", "fuzzed", "it", "and", "test", "on", "a", "large", "corpora", "NUMBER", "Soon", "maven", "artifact", "will", "be", "publish", "as", "well", "NUMBER", "Encoder", "port", "be", "not", "even", "planned", "NUMBER", "org", "NUMBER", "brotli", "NUMBER", "dec", "NUMBER", "has", "be", "recently", "release", "JNI", "bindings", "be", "already", "here", "see", "java", "org", "brotli", "wrapper", "Unfortunately", "JNI", "be", "a", "headache", "for", "portable", "projects", "NUMBER", "There", "be", "no", "convenient", "way", "to", "use", "it", "out", "of", "the", "box", "NUMBER", "Currently", "only", "Bazel", "build", "JNI", "artifacts", "NUMBER", "Hello", "NUMBER", "BrotliDecompressStream", "and", "BrotliDecoderDecompressStream", "be", "the", "same", "except", "the", "position", "of", "state", "argument", "NUMBER", "Decoder", "has", "internal", "storage", "ring", "buffer", "NUMBER", "In", "your", "example", "it", "seems", "to", "be", "NUMBER", "MB", "so", "in", "given", "example", "lines", "NUMBER", "NUMBER", "do", "not", "consume", "more", "input", "because", "there", "be", "some", "pending", "output", "in", "ring", "buffer", "NUMBER", "I", "suppose", "that", "the", "whole", "compressed", "file", "be", "bigger", "than", "NUMBER", "bytes", "NUMBER", "_No", "feedback", "for", "NUMBER", "days", "feel", "free", "to", "reopen", "if", "some", "concerns", "still", "remain", "NUMBER", "_", "Appveyor", "seems", "to", "be", "happy", "now", "NUMBER", "Will", "merge", "soon", "NUMBER", "Unguarded", "__STDC_VERSION__", "will", "be", "fix", "in", "next", "encoder", "decoder", "update", "NUMBER", "Hello", "NUMBER", "Perhaps", "you", "meant", "to", "post", "this", "issue", "to", "LINK", "_brotli", "issue", "Added", "section", "to", "README", "NUMBER", "md", "Hello", "Piotr", "NUMBER", "Please", "give", "me", "few", "days", "to", "publish", "new", "decoder", "API", "first", "NUMBER", "Hello", "NUMBER", "Sorry", "for", "the", "super", "late", "response", "NUMBER", "Thank", "you", "for", "your", "PR", "NUMBER", "Hello", "NUMBER", "For", "decompressor", "it", "be", "easy", "NUMBER", "For", "compressor", "we", "have", "only", "rough", "estimates", "there", "be", "about", "NUMBER", "places", "where", "memory", "be", "allocated", "NUMBER", "Going", "to", "add", "method", "for", "decompressor", "soon", "and", "for", "compressor", "after", "some", "code", "combing", "NUMBER", "For", "decompressor", "the", "worst", "case", "be", "NUMBER", "MiB", "NUMBER", "ringbuffer", "size", "NUMBER", "Soon", "an", "API", "for", "calculating", "ringbuffer", "size", "from", "the", "first", "byte", "will", "appear", "ability", "to", "remove", "NUMBER", "x", "multiplier", "NUMBER", "As", "for", "encoder", "we", "still", "need", "more", "time", "to", "build", "the", "right", "model", "NUMBER", "Travis", "looks", "happy", "indeed", "NUMBER", "The", "only", "thing", "left", "to", "do", "be", "to", "sign", "CLA", "sorry", "for", "the", "bureaucracy", "NUMBER", "Don", "t", "worry", "about", "CLA", "NUMBER", "Rerunning", "travis", "NUMBER", "Thank", "you", "for", "this", "PR", "It", "looks", "like", "problem", "with", "gcc", "NUMBER", "persists", "NUMBER", "Going", "to", "calm", "down", "clang", "ubsan", "in", "few", "moments", "NUMBER", "Ubsan", "be", "happy", "now", "NUMBER", "I", "sign", "it", "I", "think", "yes", "NUMBER", "This", "bot", "be", "always", "harassing", "me", "NUMBER", "Okay", "let", "s", "try", "Hi", "NUMBER", "Thanks", "for", "an", "offer", "but", "I", "m", "little", "bit", "hesitate", "and", "also", "it", "will", "a", "little", "bit", "easier", "for", "me", "to", "fix", "it", "in", "internal", "repository", "and", "then", "publish", "update", "to", "github", "NUMBER", "Ideas", "look", "great", "I", "ve", "planned", "to", "implement", "them", "next", "week", "though", "it", "would", "require", "lot", "of", "courage", "and", "will", "to", "switch", "to", "snake", "case", "I", "be", "old", "Java", "fan", "NUMBER", "Added", "a", "task", "to", "initial", "message", "NUMBER", "In", "the", "internal", "repo", "we", "already", "have", "conformant", "arrays", "NUMBER", "But", "it", "seems", "that", "this", "do", "not", "apply", "to", "streaming", "function", "NUMBER", "Am", "I", "right", "Hello", "jchampio", "Please", "could", "you", "describe", "toolchains", "you", "ve", "use", "that", "cause", "incompatible", "bools", "NUMBER", "I", "m", "going", "to", "modify", "BROTLI_BOOL", "definition", "in", "a", "way", "nemequ", "propose", "but", "I", "ll", "need", "then", "to", "recheck", "that", "problem", "be", "gone", "NUMBER", "Best", "regards", "Eugene", "NUMBER", "Well", "considering", "BROTLI_BOOL", "in", "API", "to", "be", "int", "in", "ABI", "we", "get", "both", "cleanliness", "and", "compatibility", "x", "Using", "_XXX_", "helps", "make", "the", "code", "more", "readable", "and", "reduce", "documentation", "lookups", "x", "No", "more", "the", "module", "and", "the", "library", "disagreed", "on", "the", "definition", "of", "_XXX_", "The", "only", "problem", "could", "be", "that", "result", "may", "have", "NUMBER", "B", "values", "different", "from", "BROTLI_TRUE", "and", "BROTLI_FALSE", "but", "brotli", "library", "swears", "not", "to", "return", "obscure", "values", "NUMBER", "Going", "to", "investigate", "it", "tomorrow", "NUMBER", "Thanks", "for", "the", "heads", "up", "Tried", "to", "add", "b", "bin", "to", "pip", "wheel", "it", "still", "fail", "NUMBER", "Going", "to", "prepare", "a", "separate", "PR", "to", "remove", "intermediate", "commit", "Hello", "Evan", "NUMBER", "I", "like", "the", "option", "NUMBER", "but", "the", "help", "with", "write", "CMakeLists", "NUMBER", "txt", "be", "much", "appreciated", "NUMBER", "I", "consider", "having", "multiple", "build", "systems", "on", "board", "as", "long", "as", "they", "do", "not", "interfere", "and", "reside", "in", "root", "and", "build", "directories", "NUMBER", "Currently", "planned", "build", "systems", "be", "CMake", "Premake", "and", "Bazel", "Premake", "be", "straightforward", "but", "might", "be", "inconvenient", "Bazel", "be", "also", "straightforward", "but", "I", "m", "not", "sure", "if", "it", "be", "possible", "to", "pull", "BUILD", "file", "out", "of", "subdirectories", "CMake", "looks", "powerful", "but", "complicated", "It", "be", "a", "problem", "that", "was", "recently", "introduce", "in", "premake", "NUMBER", "I", "have", "plan", "to", "add", "postfilter", "to", "fix", "it", "NUMBER", "There", "be", "NUMBER", "workarounds", "use", "xcodebuild", "remove", "Wl", "start", "group", "Wl", "end", "group", "enclosure", "in", "build", "file", "call", "directly", "make", "brotli", "to", "avoid", "build", "everything", "brotli", "NUMBER", "make", "seem", "to", "be", "not", "corrupted", "And", "yes", "cmake", "will", "be", "add", "soon", "NUMBER", "Running", "premake", "NUMBER", "gmake", "on", "mac", "fix", "the", "problem", "NUMBER", "Perhaps", "I", "ll", "remove", "generate", "buildfiles", "to", "avoid", "confusion", "NUMBER", "Removed", "generate", "buildfiles", "to", "avoid", "further", "confusion", "NUMBER", "Going", "to", "pull", "CMake", "soon", "NUMBER", "Wide", "list", "of", "compilers", "would", "be", "a", "nice", "addition", "different", "version", "of", "clang", "gcc", "mingw", "NUMBER", "Also", "I", "see", "it", "be", "possible", "to", "build", "test", "with", "ASAN", "MSAN", "NUMBER", "That", "be", "a", "super", "cool", "option", "NUMBER", "So", "if", "you", "add", "more", "variants", "we", "will", "be", "very", "grateful", "NUMBER", "Going", "to", "investigate", "ICC", "license", "question", "later", "NUMBER", "configure", "cmake", "seems", "to", "cover", "all", "possible", "use", "cases", "NUMBER", "Perhaps", "a", "more", "light", "weight", "version", "of", "this", "wrapper", "would", "fit", "our", "tiny", "simple", "project", "more", "About", "API", "stabilization", "you", "be", "absolutely", "right", "NUMBER", "We", "plan", "that", "API", "will", "finally", "stabilize", "in", "next", "NUMBER", "months", "and", "then", "going", "to", "publish", "package", "for", "distros", "NUMBER", "Though", "some", "background", "pre", "work", "could", "be", "do", "earlier", "NUMBER", "PR", "NUMBER", "has", "landed", "NUMBER", "WooHoo", "Kudos", "to", "Evan", "There", "be", "a", "very", "limited", "number", "of", "cases", "in", "which", "BrotliDecompressedSize", "works", "NUMBER", "NUMBER", "The", "whole", "input", "be", "compressed", "in", "a", "single", "block", "NUMBER", "The", "whole", "input", "be", "a", "single", "uncompressed", "block", "The", "length", "of", "both", "compressed", "and", "uncompressed", "block", "be", "limited", "to", "NUMBER", "TAG", "ts", "NUMBER", "join", "NUMBER", "b", "NUMBER", "format", "random", "NUMBER", "getrandbits", "NUMBER", "for", "i", "in", "range", "NUMBER", "then", "print", "len", "codecs", "NUMBER", "encode", "ts", "zip", "NUMBER", "print", "len", "codecs", "NUMBER", "encode", "ts", "bz", "NUMBER", "NUMBER", "print", "len", "brotli", "NUMBER", "compress", "ts", "NUMBER", "Yup", "it", "be", "not", "the", "first", "time", "we", "find", "that", "we", "could", "push", "the", "limit", "if", "the", "format", "wouldn", "t", "be", "frozen", "to", "the", "moment", "NUMBER", "But", "there", "be", "a", "trade", "off", "freeze", "format", "early", "and", "help", "customers", "adopting", "it", "or", "never", "freeze", "it", "have", "a", "full", "freedom", "but", "no", "customers", "NUMBER", "Thank", "you", "again", "for", "your", "experiments", "and", "analysis", "this", "would", "help", "us", "make", "the", "next", "compressor", "even", "better", "Going", "to", "merge", "be", "ASAP", "NUMBER", "Thank", "you", "for", "your", "research", "and", "report", "NUMBER", "We", "be", "going", "to", "fix", "those", "warnings", "soon", "NUMBER", "Ooops", "NUMBER", "We", "ve", "fix", "this", "in", "internal", "repo", "but", "still", "hasn", "t", "publised", "the", "fix", "NUMBER", "Going", "to", "do", "it", "ASAP", "NUMBER", "PR", "NUMBER", "Hi", "NUMBER", "Could", "you", "check", "again", "PR", "NUMBER", "just", "landed", "NUMBER", "The", "decoder", "thing", "seems", "to", "be", "easy", "to", "fix", "NUMBER", "But", "brotli", "doesn", "t", "have", "a", "macro", "length", "NUMBER", "Do", "you", "know", "where", "it", "be", "defined", "No", "worries", "we", "be", "going", "to", "try", "to", "decouple", "our", "header", "file", "so", "embedder", "code", "doesn", "t", "reach", "hash", "NUMBER", "h", "from", "encode", "NUMBER", "h", "Hey", "we", "ve", "update", "encoder", "recently", "many", "problem", "should", "be", "fix", "by", "now", "NUMBER", "If", "not", "feel", "free", "to", "reopen", "the", "issue", "NUMBER", "Unfortunately", "there", "be", "no", "magic", "bytes", "for", "brotli", "NUMBER", "In", "future", "brotli", "streams", "will", "be", "wrapped", "in", "some", "framing", "format", "which", "will", "have", "magic", "bytes", "that", "could", "be", "use", "to", "identify", "it", "NUMBER", "Mark", "Adler", "helped", "us", "much", "with", "proof", "test", "brotli", "and", "refining", "specification", "NUMBER", "Here", "be", "his", "framing", "format", "proposal", "LINK", "format", "v", "NUMBER", "txt", "Signature", "in", "hexadecimal", "four", "bytes", "ce", "b", "NUMBER", "cf", "NUMBER", "Already", "integrated", "NUMBER", "Sorry", "NUMBER", "Thank", "you", "for", "the", "request", "NUMBER", "We", "have", "this", "feature", "in", "our", "plan", "but", "first", "we", "have", "to", "finish", "refactoring", "and", "do", "some", "preparations", "NUMBER", "Implemented", "in", "v", "NUMBER", "Hello", "Matt", "NUMBER", "Thank", "you", "for", "your", "report", "NUMBER", "Could", "you", "check", "if", "casting", "mote", "to", "int", "in", "python", "brotlimodule", "NUMBER", "cc", "NUMBER", "fix", "the", "problem", "Best", "regards", "Eugene", "NUMBER", "Going", "to", "check", "fix", "it", "soon", "NUMBER", "And", "update", "documentation", "as", "well", "NUMBER", "Can", "not", "reproduce", "NUMBER", "Could", "you", "attach", "sample", "compressed", "file", "please", "Brotli", "archive", "header", "be", "less", "than", "NUMBER", "byte", "independently", "decompressible", "blocks", "be", "almost", "the", "same", "as", "independent", "archives", "NUMBER", "The", "code", "phase", "takes", "not", "much", "time", "the", "most", "of", "the", "time", "be", "use", "for", "finding", "better", "data", "decomposition", "NUMBER", "Trying", "to", "compress", "blocks", "of", "different", "size", "in", "parallel", "will", "not", "add", "much", "overhead", "comparing", "to", "special", "solution", "that", "estimates", "output", "size", "without", "producing", "output", "NUMBER", "So", "it", "looks", "that", "write", "some", "wrapper", "that", "try", "to", "find", "the", "maximum", "input", "block", "that", "produces", "maximal", "feasible", "output", "be", "the", "easiest", "solution", "NUMBER", "If", "we", "consider", "brotli", "as", "a", "format", "not", "implementation", "there", "be", "a", "way", "to", "create", "implementation", "that", "will", "be", "more", "efficient", "for", "specific", "data", "type", "and", "output", "size", "requirements", "e", "NUMBER", "g", "NUMBER", "it", "may", "omit", "some", "computations", "and", "use", "precalculated", "tables", "NUMBER", "But", "brotli", "be", "a", "general", "purpose", "data", "format", "NUMBER", "If", "you", "use", "some", "specific", "data", "format", "SEED", "it", "likely", "will", "be", "more", "efficient", "NUMBER", "Thank", "you", "Decoder", "dumps", "all", "the", "output", "be", "has", "after", "it", "consumed", "the", "next", "chunk", "of", "input", "LINK", "L", "NUMBER", "Please", "could", "you", "provide", "sample", "data", "and", "code", "so", "we", "could", "investigate", "what", "be", "going", "wrong", "Fixed", "in", "NUMBER", "Hello", "NUMBER", "Serialized", "context", "may", "take", "up", "to", "NUMBER", "megabytes", "the", "size", "of", "the", "window", "NUMBER", "Could", "you", "point", "to", "other", "compressors", "that", "have", "such", "API", "please", "NUMBER", "It", "will", "help", "us", "understand", "the", "best", "practices", "in", "the", "field", "NUMBER", "Best", "regards", "Eugene", "NUMBER", "Hello", "NUMBER", "I", "m", "going", "to", "investigate", "it", "NUMBER", "Thank", "you", "for", "the", "report", "and", "sorry", "for", "the", "late", "response", "NUMBER", "We", "have", "a", "fix", "for", "this", "NUMBER", "I", "hope", "it", "will", "be", "publish", "soon", "NUMBER", "Yes", "there", "be", "dependence", "between", "block", "size", "and", "maximum", "overhead", "NUMBER", "I", "ll", "check", "the", "implementation", "and", "plan", "to", "add", "utility", "method", "to", "brotli", "encoder", "API", "NUMBER", "WARNING", "this", "function", "result", "only", "applicable", "to", "BrotliEncoderCompress", "NUMBER", "Stream", "compression", "may", "use", "more", "output", "NUMBER", "E", "NUMBER", "g", "NUMBER", "if", "compress", "with", "level", "NUMBER", "or", "level", "NUMBER", "every", "chunk", "of", "input", "be", "compressed", "independently", "add", "more", "overhead", "NUMBER", "I", "m", "going", "to", "improve", "BrotliCompressStream", "behavior", "later", "and", "add", "another", "function", "for", "output", "size", "estimation", "NUMBER", "We", "be", "work", "on", "our", "own", "Java", "wrappers", "NUMBER", "Soon", "it", "will", "be", "possible", "to", "make", "measurements", "and", "compare", "results", "investigate", "bottlenecks", "NUMBER", "Hello", "Martin", "NUMBER", "Now", "we", "have", "our", "JNI", "wrappers", "publish", "NUMBER", "Could", "you", "test", "their", "performance", "and", "see", "if", "the", "problem", "be", "still", "here", "please", "NUMBER", "Thanks", "in", "advance", "Eugene", "NUMBER", "Thank", "you", "for", "your", "report", "NUMBER", "We", "be", "actively", "work", "on", "those", "warnings", "NUMBER", "Hello", "NUMBER", "Thank", "you", "for", "the", "report", "NUMBER", "Most", "probably", "this", "affects", "not", "only", "mingw", "but", "some", "other", "compilers", "NUMBER", "And", "again", "we", "be", "very", "grateful", "for", "the", "propose", "fix", "NUMBER", "I", "believe", "the", "fix", "will", "be", "landed", "tomorrow", "NUMBER", "Best", "regards", "Eugene", "NUMBER", "Hello", "NUMBER", "Thank", "you", "for", "the", "interest", "NUMBER", "Actually", "we", "re", "going", "to", "add", "custom", "memory", "allocation", "support", "to", "decoder", "soon", "NUMBER", "Encoder", "will", "get", "it", "a", "little", "bit", "later", "NUMBER", "Also", "we", "plan", "to", "update", "our", "API", "to", "converge", "with", "API", "of", "modern", "compressors", "NUMBER", "Best", "regards", "Eugene", "NUMBER", "Custom", "memory", "allocators", "for", "decoder", "feature", "has", "be", "landed", "recently", "NUMBER", "In", "v", "NUMBER", "encoder", "also", "have", "custom", "allocator", "feature", "NUMBER", "Hello", "NUMBER", "Thank", "you", "for", "your", "patch", "NUMBER", "Unfortunately", "we", "can", "t", "merge", "it", "until", "you", "sign", "CLA", "NUMBER", "More", "details", "here", "LINK", "Best", "regards", "Eugene", "NUMBER", "BrotliCompressWithCustomDictionary", "have", "be", "moved", "to", "compressor", "NUMBER", "cc", "and", "refactored", "NUMBER", "And", "soon", "will", "be", "deprecate", "Hello", "NUMBER", "encode_parallel", "be", "mostly", "a", "skeleton", "proof", "of", "concept", "NUMBER", "Currently", "we", "have", "no", "plan", "to", "develop", "it", "NUMBER", "Hello", "NUMBER", "You", "be", "right", "BrotliCompressBufferParallel", "be", "a", "proof", "of", "concept", "for", "parallel", "encoding", "NUMBER", "One", "can", "implement", "actual", "parallelly", "executing", "compressor", "with", "his", "favorite", "technology", "OpenMP", "TBB", "Hadoop", "whatever", "NUMBER", "use", "this", "method", "as", "a", "sketch", "NUMBER", "Nice", "We", "will", "be", "glad", "to", "hear", "any", "update", "on", "this", "topic", "NUMBER", "I", "start", "reviewing", "the", "change", "but", "I", "be", "not", "finished", "yet", "NUMBER", "I", "propose", "that", "we", "use", "this", "huge", "pull", "request", "for", "discussion", "and", "that", "you", "create", "separate", "pull", "request", "for", "each", "smaller", "change", "after", "the", "review", "for", "them", "be", "complete", "NUMBER", "As", "a", "start", "the", "commit", "for", "Section", "NUMBER", "f", "NUMBER", "f", "NUMBER", "c", "NUMBER", "looks", "good", "as", "be", "and", "could", "be", "merge", "NUMBER", "This", "could", "easily", "be", "add", "to", "BrotliCompressBuffer", "method", "but", "impossible", "for", "streaming", "version", "as", "the", "data", "size", "be", "unknown", "NUMBER", "So", "if", "we", "add", "the", "logic", "that", "reduces", "window", "size", "to", "BrotliCompressBuffer", "will", "it", "work", "for", "you", "It", "would", "look", "a", "little", "bit", "confusing", "and", "redundant", "lgwin", "and", "lgblock", "already", "specify", "the", "expected", "use", "case", "NUMBER", "Probably", "it", "can", "be", "do", "with", "some", "helper", "function", "that", "adjusts", "BrotliParams", "given", "the", "expected", "input", "size", "NUMBER", "Basic", "formulae", "be", "max", "NUMBER", "min", "NUMBER", "log", "NUMBER", "size", "NUMBER", "if", "memory", "itself", "be", "not", "a", "problem", "NUMBER", "If", "memory", "be", "a", "limited", "resource", "then", "lgwin", "should", "be", "lowered", "a", "bit", "but", "for", "higher", "qualities", "hashers", "might", "take", "more", "memory", "than", "ring", "buffer", "so", "cutting", "lgwin", "won", "t", "give", "a", "big", "win", "NUMBER", "Fixed", "with", "premake", "NUMBER", "generate", "build", "NUMBER", "This", "was", "fix", "by", "PR", "NUMBER", "Small", "change", "be", "fine", "NUMBER", "Let", "me", "know", "when", "you", "be", "do", "and", "then", "I", "will", "push", "a", "new", "version", "to", "the", "official", "IETF", "site", "NUMBER", "As", "mention", "in", "previous", "comment", "should", "be", "fix", "now", "NUMBER", "If", "not", "feel", "free", "to", "reopen", "the", "issue", "NUMBER", "Thank", "you", "for", "report", "this", "issue", "NUMBER", "This", "was", "fix", "in", "PR", "NUMBER", "Hello", "NUMBER", "Sorry", "for", "the", "late", "response", "NUMBER", "Thank", "you", "for", "your", "PR", "NUMBER", "Would", "you", "mind", "to", "rebase", "it", "According", "to", "the", "StackOverflow", "LINK", "be", "the", "differences", "between", "so", "and", "dylib", "on", "osx", "NUMBER", "so", "and", "NUMBER", "dylib", "be", "almost", "interchangable", "in", "modern", "version", "on", "OSX", "NUMBER", "Soon", "it", "will", "be", "possible", "to", "compile", "dylib", "with", "xcode", "see", "PR", "NUMBER", "Thanks", "a", "lot", "for", "catching", "this", "apparently", "we", "forgot", "to", "update", "the", "introduction", "part", "of", "the", "spec", "NUMBER", "I", "will", "do", "that", "shortly", "NUMBER", "I", "fix", "everything", "in", "enc", "in", "PR", "NUMBER", "Could", "you", "create", "a", "PR", "for", "the", "rest", "Pedantic", "warnings", "were", "fix", "in", "PR", "NUMBER", "This", "can", "be", "reused", "by", "all", "of", "the", "tool", "NUMBER", "Set", "the", "version", "to", "the", "next", "git", "release", "tag", "NUMBER", "NUMBER", "will", "be", "the", "version", "of", "the", "next", "release", "NUMBER", "It", "has", "to", "be", "update", "before", "cutting", "the", "release", "NUMBER", "We", "add", "the", "paper", "to", "the", "docs", "directory", "in", "PR", "NUMBER", "so", "you", "can", "use", "it", "with", "the", "same", "licence", "as", "the", "rest", "of", "the", "project", "NUMBER", "These", "were", "fix", "with", "PR", "NUMBER", "Thanks", "for", "the", "fix", "NUMBER", "Before", "we", "can", "merge", "you", "have", "to", "sign", "a", "CLA", "see", "LINK", "NUMBER", "Thanks", "Hello", "again", "NUMBER", "We", "have", "be", "busy", "last", "month", "and", "have", "had", "no", "time", "to", "integrate", "your", "improvement", "to", "brotli", "encoder", "NUMBER", "Sorry", "NUMBER", "But", "don", "t", "worry", "this", "awesome", "change", "be", "still", "on", "our", "radars", "and", "we", "be", "enthusiastic", "about", "integrating", "it", "NUMBER", "Thank", "you", "for", "your", "patience", "NUMBER", "Best", "regards", "Eugene", "NUMBER", "I", "ve", "add", "support", "for", "icc", "recently", "NUMBER", "Though", "it", "looks", "that", "icc", "and", "clang", "produce", "about", "NUMBER", "slower", "binary", "than", "gcc", "NUMBER", "Should", "be", "fix", "on", "v", "NUMBER", "Please", "check", "NUMBER", "If", "problem", "be", "still", "there", "feel", "free", "to", "reopen", "the", "issue", "NUMBER", "Fixed", "in", "premake", "NUMBER", "generate", "makefiles", "Update", "currently", "brotli", "at", "level", "NUMBER", "compresses", "the", "example", "file", "to", "NUMBER", "NUMBER", "NUMBER", "It", "be", "still", "bigger", "than", "LZMA", "output", "but", "there", "be", "a", "space", "for", "further", "encoder", "improvement", "NUMBER", "About", "NUMBER", "s", "with", "fix", "encoder", "on", "Intel", "Xeon", "E", "NUMBER", "NUMBER", "NUMBER", "MHz", "powersave", "mode", "NUMBER", "There", "be", "a", "problem", "in", "encoder", "that", "makes", "encoding", "of", "this", "file", "unexpectedly", "slow", "NUMBER", "I", "m", "preparing", "a", "fix", "soon", "it", "will", "be", "publish", "NUMBER", "We", "decided", "to", "change", "the", "interface", "of", "the", "bro", "tool", "to", "match", "gzip", "NUMBER", "Would", "you", "be", "willing", "to", "change", "bro", "NUMBER", "cc", "with", "these", "change", "to", "the", "command", "line", "parsing", "For", "easier", "review", "it", "could", "be", "broken", "up", "into", "multiple", "pull", "request", "e", "NUMBER", "g", "NUMBER", "as", "a", "first", "step", "factor", "out", "the", "function", "that", "processes", "one", "file", "from", "main", "NUMBER", "As", "for", "function", "naming", "and", "other", "style", "conventions", "please", "see", "LINK", "styleguide", "NUMBER", "googlecode", "NUMBER", "com", "svn", "trunk", "cppguide", "NUMBER", "html", "And", "in", "order", "to", "accept", "your", "contributions", "you", "have", "to", "sign", "a", "CLA", "see", "LINK", "Soon", "I", "will", "be", "landing", "next", "brotli", "update", "NUMBER", "Among", "other", "things", "it", "contains", "new", "CLI", "NUMBER", "These", "should", "be", "fix", "with", "PR", "NUMBER", "This", "be", "fix", "in", "PR", "NUMBER", "I", "think", "the", "Python", "module", "s", "version", "should", "refer", "to", "the", "version", "of", "the", "underlying", "Brotli", "library", "but", "it", "seems", "difficult", "to", "keep", "them", "in", "sync", "automatically", "NUMBER", "Any", "ideas", "would", "be", "welcome", "NUMBER", "If", "we", "would", "do", "it", "manually", "we", "would", "have", "to", "remember", "to", "bump", "the", "version", "number", "right", "_before_", "we", "tag", "the", "release", "right", "Doing", "it", "right", "after", "would", "be", "too", "late", "since", "everything", "build", "from", "the", "tag", "release", "would", "have", "the", "wrong", "version", "number", "as", "with", "v", "NUMBER", "NUMBER", "I", "will", "try", "to", "remember", "doing", "this", "going", "forward", "NUMBER", "It", "be", "not", "clear", "if", "this", "would", "work", "if", "the", "version", "be", "update", "through", "merge", "a", "pull", "request", "NUMBER", "Anyway", "let", "s", "try", "to", "remember", "update", "the", "version", "string", "before", "release", "for", "now", "and", "see", "if", "that", "works", "NUMBER", "The", "bro", "NUMBER", "cc", "do", "not", "have", "a", "version", "flag", "yet", "before", "we", "attempt", "to", "do", "this", "automation", "I", "want", "to", "move", "the", "BROTLI_VERSION", "define", "to", "a", "common", "place", "and", "use", "it", "from", "the", "bro", "NUMBER", "cc", "as", "well", "NUMBER", "I", "created", "the", "version", "NUMBER", "h", "header", "in", "PR", "NUMBER", "Closing", "this", "now", "as", "the", "question", "in", "the", "issue", "was", "decided", "NUMBER", "Fixed", "with", "PR", "NUMBER", "I", "m", "going", "to", "update", "squash", "plugin", "soon", "NUMBER", "Uninitialized", "variables", "and", "null", "dereference", "be", "all", "false", "positives", "NUMBER", "Usage", "of", "tainted", "values", "be", "natural", "almost", "false", "positive", "NUMBER", "Going", "to", "toss", "coda", "a", "little", "bit", "to", "convince", "Coverity", "Scan", "NUMBER", "Eric", "s", "version", "for", "open", "the", "file", "seems", "more", "robust", "NUMBER", "Dominik", "did", "you", "try", "that", "If", "that", "would", "work", "for", "you", "I", "will", "make", "these", "change", "to", "our", "internal", "version", "and", "push", "them", "here", "NUMBER", "Thanks", "for", "the", "report", "should", "be", "fix", "now", "Yeah", "I", "was", "just", "noticing", "the", "same", "thing", "I", "did", "it", "with", "_WIN", "NUMBER", "instead", "visual", "studio", "do", "not", "appear", "to", "have", "any", "flags", "relate", "to", "endianness", "but", "_WIN", "NUMBER", "can", "be", "assumed", "to", "be", "LE", "NUMBER", "I", "fix", "this", "in", "NUMBER", "could", "you", "test", "that", "it", "works", "now", "Added", "link", "to", "brotli", "NUMBER", "js", "in", "README", "NUMBER", "md", "JS", "decoder", "transpiled", "from", "Java", "decoder", "be", "come", "soon", "NUMBER", "Perhaps", "even", "AsmJS", "if", "it", "will", "give", "reasonable", "performance", "boost", "NUMBER", "It", "turns", "out", "that", "AsmJs", "speed", "varies", "a", "lot", "from", "browser", "to", "browser", "NUMBER", "Pure", "JS", "decodes", "be", "performant", "enough", "for", "practical", "usage", "it", "be", "NUMBER", "x", "times", "faster", "than", "brotli", "NUMBER", "js", "and", "NUMBER", "times", "faster", "than", "BrotliHaxe", "JS", "NUMBER", "Here", "be", "my", "playground", "decoders", "NUMBER", "zip", "LINK", "alice", "NUMBER", "br", "test", "file", "I", "ve", "use", "for", "benchmarks", "bar", "NUMBER", "html", "AsmJS", "decoder", "transpiled", "from", "Java", "bjs", "NUMBER", "html", "brotli", "NUMBER", "js", "browserified", "haxe", "NUMBER", "html", "BrotliHaxe", "JS", "xxx", "NUMBER", "html", "WebAssembly", "generate", "for", "C", "decoder", "with", "Emscripten", "yyy", "NUMBER", "html", "JS", "decoder", "transpiled", "from", "Java", "and", "publish", "in", "last", "commit", "AsmJs", "generate", "with", "Emscripten", "has", "nearly", "the", "same", "performance", "structure", "drawbacks", "as", "WebAssembly", "so", "I", "ve", "stopped", "experimenting", "with", "it", "NUMBER", "As", "for", "quality", "NUMBER", "it", "be", "allow", "but", "currently", "be", "the", "same", "as", "quality", "NUMBER", "I", "find", "why", "it", "be", "broken", "now", "I", "will", "fix", "it", "soon", "NUMBER", "There", "will", "be", "some", "more", "improvement", "to", "the", "encoder", "in", "the", "come", "weeks", "and", "I", "would", "prefer", "cutting", "a", "release", "after", "that", "NUMBER", "I", "have", "one", "quick", "question", "about", "the", "test", "in", "the", "python", "subdirectory", "NUMBER", "Is", "there", "any", "easy", "way", "to", "run", "them", "on", "Linux", "in", "a", "self", "contained", "manner", "i", "NUMBER", "e", "NUMBER", "without", "needing", "to", "install", "anything", "outside", "the", "root", "directory", "in", "the", "repository", "NUMBER", "Ideally", "the", "following", "would", "work", "python", "setup", "NUMBER", "py", "build_ext", "python", "setup", "NUMBER", "py", "test", "The", "first", "command", "succeeds", "but", "when", "I", "run", "the", "second", "I", "get", "ImportError", "No", "module", "named", "brotli", "which", "suggests", "to", "me", "that", "it", "be", "looking", "for", "brotli", "in", "a", "system", "wide", "lib", "and", "not", "in", "the", "created", "build", "directory", "NUMBER", "Thanks", "I", "confirmed", "that", "it", "works", "on", "Linux", "NUMBER", "Hello", "NUMBER", "Let", "s", "revive", "this", "effort", "NUMBER", "What", "needs", "to", "be", "do", "to", "proceed", "with", "publishing", "PyPI", "module", "Hi", "NUMBER", "Actually", "thanks", "for", "pinging", "Going", "to", "do", "it", "now", "NUMBER", "Hey", "That", "happened", "Wasn", "t", "that", "scary", "as", "I", "thought", "Yup", "make", "release", "automate", "be", "a", "nice", "idea", "NUMBER", "But", "to", "add", "you", "as", "a", "maintainer", "I", "need", "to", "know", "your", "username", "If", "it", "involves", "just", "the", "setup", "NUMBER", "py", "file", "it", "should", "be", "ok", "to", "have", "it", "in", "the", "top", "level", "directory", "NUMBER", "I", "fix", "it", "by", "use", "FastLog", "NUMBER", "NUMBER", "As", "report", "by", "anthrotype", "log", "NUMBER", "be", "miss", "from", "MSVS", "NUMBER", "This", "patch", "uses", "log", "and", "a", "multiplication", "in", "FastLog", "NUMBER", "for", "_MSV_VER", "NUMBER", "and", "uses", "FastLog", "NUMBER", "in", "literal_cost", "NUMBER", "cc", "instead", "of", "log", "NUMBER", "NUMBER", "I", "miss", "this", "one", "sorry", "fix", "in", "NUMBER", "NUMBER", "add", "streaming", "output", "support", "NUMBER", "Sorry", "for", "the", "delay", "I", "have", "not", "be", "actively", "work", "on", "brotli", "for", "a", "while", "NUMBER", "My", "plan", "now", "be", "to", "test", "and", "submit", "your", "non", "python", "change", "to", "our", "internal", "version", "and", "then", "update", "this", "github", "repository", "NUMBER", "After", "that", "be", "do", "for", "the", "remaining", "python", "part", "you", "will", "have", "to", "sign", "a", "CLA", "on", "this", "page", "LINK", "source", "cla", "individual", "csw", "NUMBER", "I", "fix", "the", "issue", "regard", "the", "file", "in", "the", "enc", "directory", "NUMBER", "Could", "you", "revert", "those", "file", "and", "try", "to", "compile", "it", "under", "visual", "studio", "If", "it", "be", "still", "broken", "please", "let", "me", "know", "NUMBER", "What", "e", "mail", "address", "and", "github", "user", "name", "did", "you", "use", "for", "the", "CLA", "The", "encoder", "do", "not", "use", "unordered_map", "any", "more", "NUMBER", "It", "turns", "out", "that", "this", "header", "be", "not", "needed", "at", "all", "so", "I", "remove", "it", "NUMBER", "Hope", "it", "works", "now", "for", "OSX", "NUMBER", "Hi", "Khaled", "NUMBER", "As", "per", "Google", "s", "open", "source", "policy", "you", "need", "to", "sign", "the", "Google", "Individual", "Contributor", "License", "Agreement", "LINK", "source", "cla", "individual", "csw", "NUMBER", "CLA", "which", "you", "can", "do", "online", "NUMBER", "I", "will", "close", "this", "as", "these", "issue", "were", "address", "recently", "NUMBER", "Done", "NUMBER", "enc", "encode", "NUMBER", "h", "and", "dec", "decode", "NUMBER", "h", "now", "depend", "only", "on", "common", "types", "NUMBER", "h", "This", "commit", "contains", "a", "batch", "of", "change", "that", "were", "made", "to", "the", "Brotli", "library", "since", "March", "NUMBER", "Most", "important", "change", "Fix", "BrotliDecompressedSize", "to", "work", "for", "an", "uncompressed", "plus", "an", "empty", "meta", "block", "NUMBER", "Move", "serialization", "function", "into", "their", "own", "file", "NUMBER", "Fix", "storing", "of", "the", "meta", "block", "header", "for", "last", "empty", "meta", "block", "NUMBER", "Add", "a", "fast", "version", "of", "the", "hasher", "NUMBER", "I", "be", "closing", "this", "now", "and", "will", "break", "it", "up", "into", "more", "commit", "at", "least", "one", "for", "decoder", "and", "one", "for", "encoder", "NUMBER"], "text_count": [0, 3800, 901, 499, 258, 85, 370, 3, 20, 402, 342, 1052, 699, 396, 358, 174, 0, 0, 0, 0, 1256, 519, 226, 74, 263, 233, 0, 0, 0, 0, 2225, 1370, 871, 33, 473, 141, 0, 0, 0, 0, 2444, 134, 986, 857, 644, 0, 0, 0, 0, 0, 723, 311, 392, 185, 242, 112, 235, 0, 0, 0, 2053, 128, 1629, 122, 0, 0, 0, 0, 0, 0, 1469, 107, 1102, 452, 170, 0, 0, 0, 0, 0, 2522, 1192, 273, 939, 150, 107, 0, 0, 0, 0, 154, 910, 223, 0, 0, 0, 0, 0, 0, 0, 2063, 304, 1240, 547, 0, 0, 0, 0, 0, 0, 3854, 7441, 199, 431, 81, 149, 0, 0, 0, 0, 10461, 9, 7632, 88, 1449, 2575]}, {"repo": "brotli", "type": "nonelite", "title": "", "number of text": 751, "text": "  1. Defect type: FORWARD_NULL \r\n```\r\n16. webkitgtk-2.14.7/Source/ThirdParty/brotli/dec/decode.c:1937: var_compare_op: Comparing \"s->ringbuffer\" to null implies that \"s->ringbuffer\" might be null.\r\n26. webkitgtk-2.14.7/Source/ThirdParty/brotli/dec/decode.c:2240: var_deref_model: Passing \"s\" to \"ProcessCommands\", which dereferences null \"s->ringbuffer\".\r\n27. webkitgtk-2.14.7/Source/ThirdParty/brotli/dec/decode.c:1868:3: deref_parm_in_call: Function \"ProcessCommandsInternal\" dereferences \"s->ringbuffer\".\r\n64. webkitgtk-2.14.7/Source/ThirdParty/brotli/dec/decode.c:1766:11: deref_parm_field_in_call: Function \"memcpy\" dereferences an offset off \"s->ringbuffer\". [Note: The source code implementation of the function has been overridden by a builtin model.]\r\n#  2238|         case BROTLI_STATE_COMMAND_POST_DECODE_LITERALS:\r\n#  2239|         case BROTLI_STATE_COMMAND_POST_WRAP_COPY:\r\n#  2240|->         result = ProcessCommands(s);\r\n#  2241|           if (result == BROTLI_DECODER_NEEDS_MORE_INPUT) {\r\n#  2242|             result = SafeProcessCommands(s);\r\n```\r\n2. Defect type: FORWARD_NULL\r\n```\r\n16. webkitgtk-2.14.7/Source/ThirdParty/brotli/dec/decode.c:1937: var_compare_op: Comparing \"s->ringbuffer\" to null implies that \"s->ringbuffer\" might be null.\r\n26. webkitgtk-2.14.7/Source/ThirdParty/brotli/dec/decode.c:2069: var_deref_model: Passing \"s\" to \"CopyUncompressedBlockToOutput\", which dereferences null \"s->ringbuffer\".\r\n34. webkitgtk-2.14.7/Source/ThirdParty/brotli/dec/decode.c:1313:9: deref_parm_field_in_call: Function \"BrotliCopyBytes\" dereferences an offset off \"s->ringbuffer\".\r\n37. webkitgtk-2.14.7/Source/ThirdParty/brotli/dec/bit_reader.h:346:5: deref_parm: Directly dereferencing parameter \"dest\".\r\n#   344|                                             BrotliBitReader* br, size_t num) {\r\n#   345|     while (BrotliGetAvailableBits(br) >= 8 && num > 0) {\r\n#   346|->     *dest = (uint8_t)BrotliGetBitsUnmasked(br);\r\n#   347|       BrotliDropBits(br, 8);\r\n#   348|       ++dest;\r\n```  The dictionary is only optimized for English, Spanish, Chinese, Hindi, Russian, Arabic, HTML, JavaScript and CSS. For texts in other languages, like German, brotli may have a worse compression rate than bzip2.\r\n\r\nI used the default settings for\r\n\r\ngcab-0.7 (with option -z)\r\nbrotli-0.6.0\r\nbzip2-1.0.6\r\ngzip-1.8\r\nzip-3.0 (Info-ZIP)\r\nxz-utils-5.2.3\r\np7zip-16.02\r\nlzip-1.16\r\n\r\nThis is my result for du -ab\r\n83437\t./goethe.cab\r\n190778\t./goethe.txt\r\n69034\t./goethe.br\r\n61132\t./goethe.bzip2\r\n77671\t./goethe.gz\r\n77812\t./goethe.zip\r\n69296\t./goethe.xz\r\n69364\t./goethe.txt.7z\r\n69303\t./goethe.lz\r\n\r\nThis is my test file: [goethe.txt](https://github.com/google/brotli/files/1373544/goethe.txt)\r\n\r\nI used German as an example, because that language is spoken by about 100 Million native speakers and it is the most most  widely  spoken  mother tongue in the European Union, even before English and French. (See [here](http://ec.europa.eu/commfrontoffice/publicopinion/archives/ebs/ebs_386_en.pdf#%5B%7B%22num%22%3A11%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C68%2C771%2C0%5D)).\r\n  Move from 755 to 644.  While trying to use the Go package `cbrotli`, I was getting error for `File not found` for all the header files `<brotli/encode.h>`, `<brotli/decode.h>`. I fixed this by adding the relative path as below:\r\n```go\r\n\r\n#include \"../../c/include/brotli/decode.h\"\r\n\r\n#include \"../../c/include/brotli/encode.h\"\r\n\r\n```\r\n\r\nBut even after this I get **ld: library not found for -lbrotlicommon** error and have no clue how to fix this. Trying to run the `cbrotli_test.go` throws the same error as shown:\r\n\r\n<img width=\"1105\" alt=\"screen shot 2017-10-08 at 1 46 29 am\" src=\"https://user-images.githubusercontent.com/5351262/31312720-1a67597e-abcb-11e7-94ee-78f69be1c15a.png\">\r\n\r\n I will give it a go. Thanks @eustas for the effort \ud83d\udc4d  @eustas Just as a side question, is there any existing usage/example of the `go` implementation somewhere. I tried below but to no avail:\r\n```\r\ngodep save github.com/google/brotli/cbrotli\r\n```\r\n\r\n> godep: Package (github.com/google/brotli/cbrotli) not found\r\n\r\n```\r\ngodep save github.com/google/cbrotli\r\n```\r\n\r\n> godep: Package (github.com/google/cbrotli) not found  Hi,\r\n\r\nwould it be possible to include the .dll files in the binary downloads for Windows?\r\nThe .dlls are kind of needed to make the JNI wrappers work. This is especially a problem for the encoder as there is no Java implementation (which is a huge adoption problem IMHO).\r\n\r\nI already tried to build the .dlls myself with CMake and MinGW, but I was not able to make the JNI encoder wrapper work with them. I always got an UnsatisfiedLinkError on instantiation with libbrotlicommon.dll and libbrotlienc.dll loaded.\r\n\r\n>java.lang.UnsatisfiedLinkError: org.brotli.wrapper.enc.EncoderJNI.nativeCreate([J)Ljava/nio/ByteBuffer;\r\n        at org.brotli.wrapper.enc.EncoderJNI.nativeCreate(Native Method)\r\n        at org.brotli.wrapper.enc.EncoderJNI.access$000(EncoderJNI.java:15)\r\n        at org.brotli.wrapper.enc.EncoderJNI$Wrapper.<init>(EncoderJNI.java:36)\r\n        at org.brotli.wrapper.enc.Encoder.compress(Encoder.java:159)\r\n        at org.brotli.wrapper.enc.Encoder.compress(Encoder.java:196)\r\n\r\nI suspect it has to do with [gcc using symbols incompatible with JNI](https://stackoverflow.com/questions/10274278/jni-unsatisfiedlinkerror-on-native-method) and me not able to make CMake to do the right thing.\r\n\r\nAnyways, it would be nice if we could have the Windows libs along with the executable similar to the other platforms. I was not using Bazel. I was basically just following the build instructions of the readme.md for CMake. \r\nI got the following .dlls as a result:\r\n- libbrotlicommon.dll\r\n- libbrotlidec.dll\r\n- libbrotlienc.dll\r\n\r\nHowever, when the JNI calls to those .dlls failed with the above `UnsatisfiedLinkError` I tried to add \r\n`CMAKE_CXX_FLAGS=-D_JNI_IMPLEMENTATION_ -Wl,--kill-at`\r\nand to include the JAVA headers\r\n`CMAKE_CXX_STANDARD_LIBRARIES=-I %JAVA_HOME%\\include -I %JAVA_HOME%\\include\\win32`\r\nAnyways the result was the same.\r\n\r\nThank you very much for looking into the matter.\r\n Yep, seems to work fine. Thanks! Another quick question: I don't see JNI builds for platforms other than Windows at [bintray](https://bintray.com/eustas/brotli/bin#files): \r\nDo other platforms not need separate JNI libraries? E.g. can I use `libbrotlicommon.so` + `libbrotlienc.so` on Linux for JNI calls to the encoder?  Subj Is 1.0.0 going to be a stable release? I am maintaining OCaml bindings to brotli and the API changes quite often? https://github.com/fxfactorial/ocaml-brotli  I just compiled brotli-1.0.0 on a Linux system (openSUSE Leap 42.3) according the build  instructions within the README.md file.\r\n\r\nAs a first test I compressed an arbitrary log file and I got an output file slightly smaller than the xz-variant (not a benchmark, no special optimizations). Just for curiosity I downloaded also the file brotli-linux-v1.0.0.zip and repeated the compression with the precompiled brotli binary and surprisingly the compression was now done nearly three times (!) faster (with the same resulting output). After some testing I found out that setting BUILD_TYPE=\"Release\" instead of the default BUILD_TYPE=\"Debug\" in the configure-cmake script leads also to the shorter compression time. This setting may be also achieved by the option \"--disable-debug\".\r\n\r\nSo I recommend to add an according information into the build instructions to let the brotli performance appear in the right light. But I am a layman in this area and maybe I have overseen something.  Hello,\r\nI just learned about this project, thumbs up!\r\n\r\nUnfortunately, the default install produces `/usr/bin/bro` executable and that conflicts with another well-known project [The Bro Network Security Monitor](https://www.bro.org/).\r\n\r\nOf course the executable name can be tweaked by each distribution, but I would rather see a change at the source (probably renaming it to `/usr/bin/brotli` ?).\r\nThere is one bug already for Gentoo, [#628620](https://bugs.gentoo.org/628620), I guess other distros will pop up...\r\n\r\nHow do you feel about that? Great!\r\n(I really hate reporting \"fixed-in-master\" bugs, apology for that; I only checked the latest release tarball)   This project is in C, but the releases are Python WHL? What gives wheel packages will no longer be uploaded to Github for next releases, as they are automatically published on the Python Package Index.\r\nhttps://github.com/google/brotli/pull/583 Well, Windows would be a start, seeing how Zstd, Lizard and LZ4 are already\r\ndoing that:\r\n\r\n- http://github.com/facebook/zstd/releases\r\n- http://github.com/inikep/lizard/releases\r\n- http://github.com/lz4/lz4/releases Agreed, executables for Windows (32/64 bit) would be a great start.   Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\n- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n<!-- need_sender_cla --> I don\u2019t have a Google work account. How can I sign the CLA?  It\u2019d be great if `brotli --version` and, as `-v` is already taken, `brotli -V` would output the version. I am sorry for only testing with release 0.6.0. I new release would be nice. ;-)  Alpine 3.6, any `go build` results in the following:\r\n\r\n```\r\n# github.com/google/brotli/go/cbrotli\r\n//usr/local/lib/libbrotlidec.a(state.c.o): In function `BrotliDecoderStateInitWithCustomAllocators':\r\n/usr/local/brotli/c/dec/state.c:56: undefined reference to `BrotliGetDictionary'\r\n//usr/local/lib/libbrotlienc.a(encode.c.o): In function `EncodeData':\r\n/usr/local/brotli/c/enc/encode.c:866: undefined reference to `BrotliGetDictionary'\r\n//usr/local/lib/libbrotlienc.a(encode.c.o): In function `BrotliCompressBufferQuality10':\r\n/usr/local/brotli/c/enc/encode.c:1103: undefined reference to `BrotliGetDictionary'\r\ncollect2: error: ld returned 1 exit status\r\n```\r\n\r\nBrotli is built using the following command in a Dockerfile:\r\n\r\n```\r\nRUN cd /usr/local && git clone https://github.com/google/brotli && \\\r\n\tcd brotli && mkdir out && cd out && ../configure-cmake \\\r\n\t--disable-shared-libs && make && make install\r\n```\r\n\r\nI have no idea what I should do, I am unable to reproduce it on OSX, local Alpine VM and so on. Whatever I do during the CI process (it's on CircleCI), this happens.  Running with `-x`:\r\n```\r\ngcc -I . -fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=$WORK=/tmp/go-build -gno-record-gcc-switches \\\r\n-o $WORK/bitbucket.org/portablecloud/cube/vendor/github.com/google/brotli/go/cbrotli/_obj/_cgo_.o \\\r\n$WORK/bitbucket.org/portablecloud/cube/vendor/github.com/google/brotli/go/cbrotli/_obj/_cgo_main.o \\\r\n$WORK/bitbucket.org/portablecloud/cube/vendor/github.com/google/brotli/go/cbrotli/_obj/_cgo_export.o \\\r\n$WORK/bitbucket.org/portablecloud/cube/vendor/github.com/google/brotli/go/cbrotli/_obj/cgo.cgo2.o \\\r\n$WORK/bitbucket.org/portablecloud/cube/vendor/github.com/google/brotli/go/cbrotli/_obj/reader.cgo2.o \\\r\n$WORK/bitbucket.org/portablecloud/cube/vendor/github.com/google/brotli/go/cbrotli/_obj/writer.cgo2.o \\\r\n-g -O2 -lbrotlicommon -lbrotlidec -lbrotlienc\r\n```  It might have to do with randomness in the file - I can easily compress a large file of zeros, but not JPGs over ~2MB or /dev/random over ~1572864 bytes.\r\n\r\n```javascript\r\n// brotli.js\r\nconst fs = require(\"fs\");\r\nconst compressSync = require(\"iltorb\").compressSync;\r\n\r\nconst args = process.argv.slice(2);\r\nconst filename = args[0];\r\n\r\nconsole.time(\"compress\");\r\nconst output = compressSync(fs.readFileSync(filename));\r\nconsole.timeEnd(\"compress\");\r\nconsole.log(output.length, \"bytes\");\r\n```\r\n\r\n```bash\r\n// increase to 1572865 to see it fail/stall (or you might need to go a little higher)\r\ndd if=/dev/urandom bs=1 count=1572864 > brotli.txt\r\nnode brotli.js brotli.txt\r\n```\r\n\r\n  We don't have to have it all, but I think it works best in the root directory so that the settings apply to all languages. Up to you!  After pulling https://github.com/google/brotli/commit/52441069ef31c3c02a4aecad727f2ec5a17ab68b, a bunch of JS and CSS files I have fail to compress with the following error:\r\n\r\n```\r\nbrotli: c/enc/././write_bits.h:54: BrotliWriteBits: Assertion `(bits >> n_bits) == 0' failed.\r\nbash: line 3:  1092 Aborted                 brotli -Zk ${MY_FILE_PATH}\r\n```\r\n\r\nUsing the previous commit resolves the issue. Cool, sounds good. I just tested, and it looks like it's consistently reproducible with this file:\r\n [balls.txt](https://github.com/google/brotli/files/1179163/balls.txt)\r\n\r\nOn an up-to-date Debian Sid running in Docker on a MacBook Pro Retina (2.4 GHz Haswell Core i5) with a build generated using `make brotli`, I get the above error. Outside of Docker (in OS X), the same command produces this error:\r\n\r\n```\r\nAssertion failed: ((bits >> n_bits) == 0), function BrotliWriteBits, file c/enc/./write_bits.h, line 54.\r\nAbort trap: 6\r\n``` Hm, well, this is what I see in Debian in Docker:\r\n\r\n```\r\ngibson@98aabb46c082:~$ cc -v\r\nUsing built-in specs.\r\nCOLLECT_GCC=cc\r\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/6/lto-wrapper\r\nTarget: x86_64-linux-gnu\r\nConfigured with: ../src/configure -v --with-pkgversion='Debian 6.4.0-1' --with-bugurl=file:///usr/share/doc/gcc-6/README.Bugs --enable-languages=c,ada,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-6 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-6-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-6-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-6-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\r\nThread model: posix\r\ngcc version 6.4.0 20170704 (Debian 6.4.0-1)\r\ngibson@98aabb46c082:~$ env\r\nHOSTNAME=98aabb46c082\r\nOLDPWD=/cyph/commands\r\nGPG_TTY=/dev/pts/0\r\nJAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\r\nGIT_EDITOR=vim\r\nSSH_AUTH_SOCK=/tmp/ssh-svgIx14CgOzU/agent.20\r\nGOPATH=/home/gibson/go\r\nPWD=/home/gibson\r\nHOME=/home/gibson\r\nSSH_AGENT_PID=21\r\nno_proxy=*.local, 169.254/16\r\nTERM=xterm\r\nEMSDK=/home/gibson/emsdk-portable\r\nSHLVL=1\r\nEMSCRIPTEN=/home/gibson/emsdk-portable/emscripten/1.37.16\r\nPATH=/home/gibson/google-cloud-sdk/bin:/opt/local/bin:/opt/local/sbin:/usr/local/opt/go/libexec/bin:/home/gibson/go/bin:/home/gibson/emsdk-portable:/home/gibson/emsdk-portable/clang/e1.37.16_64bit:/home/gibson/emsdk-portable/emscripten/1.37.16:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/node_modules/.bin\r\nBINARYEN_ROOT=/home/gibson/emsdk-portable/clang/e1.37.16_64bit/binaryen\r\nEM_CONFIG=/home/gibson/.emscripten\r\nBASH_FUNC_log%%=() {  echo -e \"\\n\\n\\n${*} ($(date))\\n\"\r\n}\r\nBASH_FUNC_checkfail%%=() {  if (( $? )); then\r\n fail \"${*}\";\r\n fi\r\n}\r\nBASH_FUNC_pass%%=() {  log 'PASS';\r\n exit 0\r\n}\r\nBASH_FUNC_fail%%=() {  if [ \"${*}\" ]; then\r\n log \"${*}\\n\\nFAIL\";\r\n else\r\n log 'FAIL';\r\n fi;\r\n exit 1\r\n}\r\nBASH_FUNC_unbindmount%%=() {  if [ ! \"${circleCI}\" ]; then\r\n sudo umount \"${1}\";\r\n fi;\r\n rm -rf \"${1}\"\r\n}\r\nBASH_FUNC_notify%%=() {  /node_modules/.bin/notify --text \"${*}\" > /dev/null;\r\n log \"${*}\"\r\n}\r\nBASH_FUNC_bindmount%%=() {  rm -rf \"${2}\" 2> /dev/null;\r\n if [ \"${circleCI}\" ]; then\r\n cp -a \"${1}\" \"${2}\";\r\n else\r\n mkdir \"${2}\" 2> /dev/null;\r\n sudo mount --bind \"${1}\" \"${2}\";\r\n fi\r\n}\r\n_=/usr/bin/env\r\n``` Hmm, I had an image that I was going to upload, but I can't reproduce it there; the only image where it's reproducible has some manual changes applied via `docker commit` (nothing directly relevant, just Google Cloud SDK authentication) and some local directories mounted (and locked in / required because of that `commit`), so it'd be a bit messy to try to share, although I can give a link and instructions for building the same image on your machine if needed.\r\n\r\nAll that being the case, maybe this is just a macOS problem that somehow sort of poisons Docker for Mac in the above scenario? Not sure what else would be worth testing if you've already tried it on a Mac, though. Since I didn't mention originally, in case it helps, I'm currently running OS X El Capitan. Sorry about the delay @eustas. You should be able to recreate the image by cloning https://github.com/cyph/cyph/tree/beta; ensuring that a recent version of Node.js is installed; making an empty `~/.cyph` directory; ensuring that `~/.gnupg`, `~/.ssh`, and `~/.gitconfig` exist; running `make`; and skipping through some Google Cloud authentication prompts at the end.\r\n\r\nThis should take about 30 - 60 minutes. You may also want to edit lines 91 and 92 of docker.js to point to directories other than your actual `~/.gnupg` and `~/.ssh`, and afterwards you can delete the generated `~/.cyphbackup`. Sorry about the delay @eustas! Just had a chance to look into this, and figured out what the problem was. \r\n\r\nI could still reproduce the `BrotliWriteBits` assertion failure even after building with debug mode as you suggested, but it turns out that debug and non-debug modes both work fine if I do a `make clean` before `make brotli`, so I guess this is just a minor build script issue.\r\n\r\nTo get into the state that causes the above error (reproducible on a standard Linux system without Docker), you can run `git checkout 172a378debedec81eb19747c96c28a81d917d284 ; make clean ; make brotli ; git checkout 5b4769990dc14a2bd466d2599c946c5652cba4b2 ; make brotli`.  Hi, `memoryview` objects are often used to avoid copies in data handling. Currently, in version `0.6.0`, the compress/decompress API does not support `memoryview` objects as input.\r\n\r\n```\r\nIn [23]: import brotli\r\n\r\nIn [24]: data_buf = memoryview(b'foo/bar')\r\n\r\nIn [25]: brotli.compress(data_buf)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-25-8364d41925a4> in <module>()\r\n----> 1 brotli.compress(data_buf)\r\n\r\n/Users/rolando/miniconda3/envs/env/lib/python3.6/site-packages/brotli.py in compress(string, mode, quality, lgwin, lgblock, dictionary)\r\n     48     compressor = Compressor(mode=mode, quality=quality, lgwin=lgwin,\r\n     49                             lgblock=lgblock, dictionary=dictionary)\r\n---> 50     return compressor.process(string) + compressor.finish()\r\n     51\r\n     52 # Decompress a compressed byte string.\r\n\r\nTypeError: process() argument 1 must be read-only bytes-like object, not memoryview\r\n```\r\n\r\nOther compressors, like `gzip`, do support `memoryview` objects as input:\r\n\r\n```\r\nIn [26]: import gzip\r\n\r\nIn [27]: gzip.compress(memoryview(b'foo/bar'))\r\nb'\\x1f\\x8b\\x08\\x006\\x10pY\\x02\\xffK\\xcb\\xcf\\xd7OJ,\\x02\\x00b\\x11%\\xe6\\x07\\x00\\x00\\x00'\r\n```  These decode methods not currently exported on win platforms without BROTLI_DEC_API modifier.  \r\nThey are currently being exported for OSX and Linux platforms.   In my quest to understand the format, I would expect -v, --verbose flags to show more output.  I started to write a verbose decoder from scratch but then noticed the excellent research/brotlidump.py script which is ultra helpful (once you copy dictionary.bin to ./).  It would be nice if this kind of output came from -v.  Will implement myself if necessary.  \\c\\tools\\brotli.c line 556\r\n\r\nmissing fclose(f);\r\n\r\nalso applicable for following if statements  Win32 and Win64 configuration support for visual studio solutions Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\n- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n<!-- need_sender_cla --> I've signed CLA CLAs look good, thanks!\n\n<!-- ok --> I though that `system:\"Windows\"` in filter configurations will make it only available in windows and results won't change anything in linux/gmake.\r\nThanks for the response and notes, I'll make it better Sorry, seems like VS only care about platform name, not what we write in front of architecture. But I fixed mistypings you mentioned.  Fixes #561.\r\nThe issue is with GCC 7 that adds a check `-Wint-in-bool-context`.\r\nMaybe you'd prefer to disable this check instead?\r\n\r\n(Note: I haven't signed the CLA yet.) Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\n- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n<!-- need_sender_cla --> I signed it! CLAs look good, thanks!\n\n<!-- ok -->   Oh Ohkay. Thanks for informing :)\r\n  * Use tools.ietf.org for displaying RFC7932\r\n  tools.ietf.org has HTML links which is helpful when reading in browser\r\n* Add appveyor badge Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->  Finally ;)  I have just released a new version of [7-Zip ZS](https://github.com/mcmilk/7-Zip-zstd).\r\n\r\nWithin the 7z-Zip container, the threading is done with [skippable frames](https://github.com/mcmilk/zstdmt) like in [ZStandard](https://github.com/facebook/zstd/).\r\n\r\nAll levels (0..11) use a default windows size of 24.\r\n\r\nHere is a screenshot of it:\r\n![Methods](https://mcmilk.de/projects/7-Zip-zstd/Methods.png \"Methods with Brotli\")\r\n\r\nCompression / decompression of `.br` files can be added also, when I have some MAGIC's therefore.\r\n\r\nI have done also some benchmarking:\r\n![Compression Speed vs Ratio](https://mcmilk.de/projects/7-Zip-zstd/dl/compr-v120.png \"Compression Speed vs Ratio\")\r\n![Decompression Speed](https://mcmilk.de/projects/7-Zip-zstd/dl/decomp-v120.png \"Decompression Speed per Level\")\r\n\r\nDoes the implementation look okay for you, or are there any issues with it ?\r\n  https://admin.fedoraproject.org/pkgdb/package/rpms/brotli/\r\nIt's currently in testing btw\r\nhttps://bodhi.fedoraproject.org/updates/?packages=brotli cc @mcatanzaro Awesome! Next step is to un-bundle it from WebKit....  Introduced in cdca91b6f59dd7632985667.\r\n\r\nWhen compiling the given `test.c` file with `script.sh` (just put them both in the same directory and run `script.sh`), you should see the following timing differences on compressing a 100MB buffer of zeroes (before and after the commit above):\r\n```\r\n+ ./b1\r\n\r\nreal    0m0.563s\r\nuser    0m0.560s\r\nsys     0m0.000s\r\n+ ./b2\r\n\r\nreal    0m2.676s\r\nuser    0m2.672s\r\nsys     0m0.000s\r\n```\r\n\r\nThis is most obvious when using `BrotliEncoderCompress` (uncomment the relevant 6 lines in `test.c` and comment out the rest to verify), but I've managed to reduce the problem to demonstrate it with `BrotliEncoderCompressStream`.\r\n\r\nThe cause appears to be the use of a 'large' value of `available_in`. If you swap the commented `partsize` line to be `65536` (matching the buffer size used in the `bro` tool), the performance difference almost vanishes.\r\n\r\n`test.c`\r\n```\r\n#include <stdlib.h>\r\n#include <sys/types.h>\r\n#include <brotli/encode.h>\r\n\r\n#define MIN(x, y) ((x) < (y) ? (x) : (y))\r\n\r\n#define SIZE ((size_t)(100*1024*1024))\r\nstatic uint8_t IN[SIZE] = { 0 };\r\nstatic uint8_t OUT[SIZE] = { 0 };\r\n\r\nint main(int argc, char** argv) {\r\n    //size_t outsize = SIZE;\r\n    //int rc = BrotliEncoderCompress(\r\n    //    6, BROTLI_DEFAULT_WINDOW, BROTLI_DEFAULT_MODE,\r\n    //    SIZE, IN, &outsize, OUT\r\n    //);\r\n    //if (!rc) { abort(); }\r\n\r\n    size_t partsize = 65536;\r\n    //size_t partsize = 1024*1024;\r\n    int quality = 6;\r\n    int lgwin = 22;\r\n    BrotliEncoderState* s = BrotliEncoderCreateInstance(0, 0, 0);\r\n    BrotliEncoderSetParameter(s, BROTLI_PARAM_QUALITY, (uint32_t)quality);\r\n    BrotliEncoderSetParameter(s, BROTLI_PARAM_LGWIN, (uint32_t)lgwin);\r\n    size_t insize = SIZE;\r\n    size_t outsize = SIZE;\r\n    const uint8_t *inbuf = &IN[0];\r\n    const uint8_t **inref = &inbuf;\r\n    uint8_t *outbuf = &OUT[0];\r\n    uint8_t **outref = &outbuf;\r\n    while (insize > 0) {\r\n        size_t thisinsize = MIN(partsize, insize);\r\n        insize -= thisinsize;\r\n        int rc = BrotliEncoderCompressStream(s,\r\n            insize != 0 ? BROTLI_OPERATION_PROCESS : BROTLI_OPERATION_FINISH,\r\n            &thisinsize, inref, &outsize, outref, NULL);\r\n        if (!rc) { abort(); }\r\n        if (thisinsize != 0) { abort(); }\r\n    }\r\n    BrotliEncoderDestroyInstance(s);\r\n}\r\n```\r\n\r\n`script.sh`\r\n```\r\n#!/bin/bash\r\nset -o errexit\r\nset -o pipefail\r\nset -o nounset\r\nset -o xtrace\r\n\r\nD1=brot1\r\nD2=brot2\r\n\r\n(git clone https://github.com/google/brotli.git $D1 && cd $D1 && git checkout cdca91b6f~1 && make lib)\r\n(git clone https://github.com/google/brotli.git $D2 && cd $D2 && git checkout cdca91b6f   && make lib)\r\n\r\ncc -Wall -Wextra -O2 -Wno-unused-parameter -o b1 -I$D1/include test.c $D1/libbrotli.a -lm\r\ncc -Wall -Wextra -O2 -Wno-unused-parameter -o b2 -I$D2/include test.c $D2/libbrotli.a -lm\r\n\r\ntime ./b1\r\ntime ./b2\r\n```  I'm not extremely familiar with the internals of Brotli or compression in general, so this may be a naive suggestion, but intuitively I think it aligns philosophically with Brotli's use of a built-in dictionary. Would it be practical for a future version of Brotli to detect strings of formats like base64 and hex and decode them to binary before compressing / re-encode them as part of the decompression process?\r\n\r\nI noticed just now during a comparison between compressing a binary file and the equivalent base64 (https://github.com/kripken/emscripten/issues/5104#issuecomment-302939570) that the base64 version ended up larger, which it occurs to me shouldn't need to be the case given that the two contain almost exactly the same information. Got it, thanks, I'll post it there.  python-brotli has Compressor for streaming compression but nothing for\r\nstreaming decompression.\r\nThis is a straight-forward copy of the Compressor code into the new\r\nclass Decompressor. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> I signed it! CLAs look good, thanks!\n\n<!-- ok --> Apologies (again) for the delay here.\r\n\r\nThe extension implementation looks right to me, but we should have some tests to verify correctness before exposing the Python Decompressor class in the module.  To keep from blocking this any longer, @eustas will add a simple test after landing this PR.  This makes the Maven build turn the created jar into an OSGi bundle. I'm not sure whether Maven or Bazel is the preferred build tool, though.\r\n Thanks Eugene!\r\n\r\nIf you want to make downstream OSGi users happy, they'll need a new artifact.\r\n\r\nWe've just merged a pull request for Apache Commons Compress that adds read-only support for brotli based on dec and all Apache Commons projects try to be bundles. We've marked the dependency as optional so people using Compress aren't directly affected. We haven't cut a release with it, yet, but I think we are close. If you are interested in publishing new artifacts, I'd be happy to hold back the release and upgrade the dependency. Sounds great, thanks! Wow, thanks a lot.\r\n\r\nhttps://github.com/apache/commons-compress/commit/0eccda844e59b6d5bdd06e62710bbf09dacc040d  Could you please add instructions to run build with cmake on Windows.\r\nAlso it seems it's not obvious how to build shared and static versions to have both of them in one INSTALL_PREFIX directory.\r\nAnother issue, install places *.lib files into \"bin\" folder, but \"lib\" is expected on Windows.\r\n @eustas , it looks like that usual solution is to name static lib differently on Windows, so both .lib files (for shared and static builds) can reside in the same directory.\r\nBut it seems that standard naming convention for this is not available. For example, conda-forge's Windows builds add \"_static\" suffix. Boost adds \"lib\" prefix for static libs (but it might be because boost's suffixes already depends on build configuration).\r\nCurrent ugly workaround to build static and shared libs with manual moving of built files can be found here https://github.com/conda-forge/brotli-feedstock/blob/master/recipe/bld.bat#L25\r\nSome sample of how \"_static\" suffix can be added https://github.com/apache/arrow/blob/master/cpp/cmake_modules/BuildUtils.cmake#L151\r\nThank you\r\n\r\n Yes, just plain cmake it's supposed way. Two runs is not an issue, the issues seems are no obvious support of static build, wrong installation paths and lack of documentation. On Windows includes should be processed similar. I guess, you can just remove `if(NOT WIN32)`\r\nAnd `${CMAKE_INSTALL_INCLUDEDIR}` should be equal to `include` I suppose.\r\nSo, finally, whole include directory on install will reside as `${INSTALL_PREFIX}/include/brotli/*.h` Great news @eustas ! Going to check as much as I can... It seems, the libs are in expected paths on Windows now, thanks!\r\n1. I've noticed that it seems there is still no possibility to build static and dynamic libs in one run.\r\n2. Also, as you mentioned before, static and dynamic import lib files default names the same and conflicts, so can't be installed to the same directory without renaming.\r\nAbove things seems are not critical, but in theory should a little bit simplify build process of brotli for [brotli-feedstock](https://github.com/conda-forge/brotli-feedstock).\r\n\r\n3. On Windows cmake provides \"NMake Makefiles\" and \"Visual Studio xxx\" generators. Current version of Readme.md describes the build process with gcc `make` tool, but it's not available with above generator on Windows. Universal cmake command line for all platforms might be as following:\r\n\r\n```\r\nmkdir build && cd build\r\ncmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./installed  ..\r\n# cmake command to build and install, should be universal for all platforms hopefully\r\ncmake --build . --config Release --target install  \r\n```\r\n Also it's might make sense to mention in Readme.md the possibility to rename output libs for static build, if it's required. For example, in the way like it's done [here](https://github.com/conda-forge/brotli-feedstock/blob/master/recipe/bld.bat#L25).\r\nHope that above helps, thanks! Unsure if this is the appropriate thread for CMAKE build issues on windows, so please excuse me, I do not intend to hijack the thread.\r\n\r\nI have attempted all the build options and they all arrive at a less than ideal conclusion.  I will describe each below.  Through trial and error I was able to finally build a stand alone Brotli executable...see end of post.\r\n\r\n\r\n**Autotools-style CMake The basic commands to build**\r\nmkdir out && cd out\r\n../configure-cmake <- fails as indicated below\r\n\r\n`C:\\Users\\gbown\\Documents\\google-brotli\\brotli>mkdir out && cd out\r\n\r\nC:\\Users\\gbown\\Documents\\google-brotli\\brotli\\out>../configure-cmake\r\n'..' is not recognized as an internal or external command,\r\noperable program or batch file.\r\nC:\\Users\\gbown\\Documents\\google-brotli\\brotli\\out>`\r\n\r\nUnable to proceed further, obviously this would apply to static build with autotools as well.\r\nmake\r\nmake test\r\nmake install\r\n\r\n**CMake The basic commands to build and install**\r\nmkdir out && cd out\r\ncmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./installed ..\r\ncmake --build . --config Release --target install\r\n\r\nBuild succeeded 0 Errors\r\nNo clear direction on installing or use.  Dropping dll files in Windows system folder for dlls and setting path to brotli.exe appears to make it work however none of this is documented\r\n\r\n**CMake to build static libraries**\r\nmkdir out-static && cd out-static\r\ncmake .. -DBUILD_SHARED_LIBS=OFF\r\nmake\r\n\r\nResult \r\n\r\n> No targets specified and no makefile found:\r\n\r\n`C:\\Users\\gbown\\Documents\\google-brotli\\brotli\\out-static>cmake .. -DBUILD_SHARED_LIBS=OFF\r\n-- Building for: Visual Studio 15 2017\r\n-- The C compiler identification is MSVC 19.11.25508.2\r\n-- The CXX compiler identification is MSVC 19.11.25508.2\r\n-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/VC/Tools/MSVC/14.11.25503/bin/HostX86/x86/cl.exe\r\n-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/VC/Tools/MSVC/14.11.25503/bin/HostX86/x86/cl.exe -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/VC/Tools/MSVC/14.11.25503/bin/HostX86/x86/cl.exe\r\n-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/VC/Tools/MSVC/14.11.25503/bin/HostX86/x86/cl.exe -- works\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Looking for log2\r\n-- Looking for log2 - found\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: C:/Users/gbown/Documents/google-brotli/brotli/out-static\r\n\r\nC:\\Users\\gbown\\Documents\\google-brotli\\brotli\\out-static>make\r\nmake: *** No targets specified and no makefile found.  Stop.\r\n`\r\n\r\nIf I add the flag -DBUILD_SHARED_LIBS=OFF to the first set of CMake instructions, it does build a stand alone brotli.exe without errors which is usable, however; I had to sort of guess that this was how to do it, point being not all of us are full on c++ developers.\r\n\r\nRunning brotli -9 -f -o my-file.brotli -- my-file works great however there is no clear way to run tests on the newly created executable.\r\n\r\nThe -q and --quality AND -# seem to be two different ways of setting the same thing however setting -q 11 produces a smaller file than -9 and the two commands cannot be used at the same time; is there documentation on this anywhere?\r\n-#                          **compression level (0-9)**\r\n-q NUM, --quality=NUM       **compression level (0-11)**\r\n\r\nSo to sum things up, to build a stand alone executable on Windows with CMake, the following works.\r\n\r\nmkdir out && cd out\r\n\r\ncmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=./installed ..\r\n\r\ncmake --build . --config Release --target install\r\n\r\nAfter this you should have a brotli.exe file that you can then set an environment path to allowing you to use brotli compression in your Windows build scripts anywhere.\r\n Just to clarify, the current README documented CMake commands will create a brotli.exe and a dozen other files. The brotli.exe that is generated will function as a standalone executable and there is no need to install the .dll files in your system\r\n\r\n![image](https://user-images.githubusercontent.com/1952728/30977011-24708f96-a42b-11e7-8efe-aa1a8c607656.png)  Compiling 0.6.0 with cmake and --disable-sharesd-libs as documented in the README has absolutly no effect.\r\nWhat is the correct way to build static libs and binary for 0.6.0 with cmake? Corresponding FreeBSD bugreport:\r\nhttps://bugs.freebsd.org/bugzilla/show_bug.cgi?id=218851 OK, -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON did it, thanks. Thanks for your realy fast response and fix. My builds had always been out-of-source builds (FreeBSDs Ports Makefile option `USES=cmake:outsource`), so that this is not the course of the issue. Also i'm not using git but the released source code archive (`v0.6.0.tar.gz`). Hi,\r\n\r\nactually we'd like to see both types of libraries (shared and static) like other ports do.\r\n\r\nIs there any chance to see three types of a build, i.e. SHARED, STATIC, COMBINED (SHARED_AND_STATIC).\r\n\r\nThanks in advance. https://cmake.org/Wiki/CMake_FAQ#Library_questions should help a bit.  Quoting; \r\n$ more README.md\r\nTo build and run tests, simply do:\r\n\r\n    $ ./configure && make\r\n\r\nIf you want to install brotli, use one of the more advanced build systems below.\r\n\r\n#### Bazel\r\n\r\nSee [Bazel](http://www.bazel.build/)\r\n\r\n#### CMake\r\n\r\nThe basic commands to build, test and install brotli are:\r\n\r\n    $ mkdir out && cd out && ../configure-cmake && make\r\n    $ make test\r\n    $ make install\r\n\r\nYou can use other [CMake](https://cmake.org/) configuration. For example, to\r\nbuild static libraries and use a custom installation directory:\r\n^C\r\n\r\n$ ls\r\ncommon           dec  include  MANIFEST.in  python     setup.cfg  tools\r\nCONTRIBUTING.md  enc  LICENSE  PKG-INFO     README.md  setup.py\r\n Find it especially strange that the Brotli-0.6.0.tar.gz contents seem have significant discrepancies with https://github.com/google/brotli/tree/v0.6 Yes, as @eustas said, that is the source distribution for the python module. It's generated by the `python setup.py sdist` command using patterns from the `MANIFEST.in` file.\r\nSorry I couldn't find the time to work on the brotli-wheels yet as I promised. I will get to it soon..\r\nThe idea is that Travis/Appveyor CI for this repo should no longer do the python packaging and deployment tasks, but only build and run the tests. The other separate repository will use this one as submodule, and upload artifacts to PyPI for distribution.\r\n Thank you anthrotype - yes it is not clear in this list the purpose of Brotli-0.6.0.tar.gz and distinctions between these packages;\r\n\r\nBrotli-0.6.0.tar.gz\r\nBrotli-0.6.0.zip\r\nSource code (zip)    (v0.6.0.zip)\r\nSource code (tar.gz)  (v0.6.0.tar.gz)\r\n\r\nReport still applies, that README.md seems not applicable for the first two packages, and works great for the later two (with bonus/unneeded files, but still.) Thanks for looking at this eustas, I can report that the CMAKE flavor has been working well here on master for some time. there is no distinction between Brotli-0.6.0.tar.gz and Brotli-0.6.0.zip; they are both sdist packages, which are meant to be uploaded to the Python Package Index and used by the `pip` installer, e.g. when one does `pip install brotli`, and when there are no binary \"wheel\" packages available for the python version/platform/architecture the user is running.\r\nWe shall get rid of those before the next tag, for now you can just ignore them.  For Read and Write calls, we can pass the Go-allocated slice buffers\r\ndirectly to the C API. (They do not contain Go pointers, so this\r\ncross-language aliasing is allowed for the duration of the call.)\r\n\r\nio.Reader and io.Writer are the Go primitives for this kind of I/O, so\r\nimplement those directly instead of providing separate internal\r\nencoder and decoder APIs. (The internal packages weren't laid out to\r\nbe compatible with the go toolchain anyway, making this wrapper\r\nawkward use with `go get` instead of Bazel.) (Attn: @eustas @dsnet)  Convert java code to C# code\r\n- use test_data.zip in java folder for test\r\n\r\nDependency\r\n- ICSharpCode.SharpZipLib Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> I signed it! CLAs look good, thanks!\n\n<!-- ok --> I'm ported it by hand. @eustas thank you. I will try soon.  The pkgconfig package is named libbrotlicommon, not brotlicommon. \r\n\r\nThis makes the generated pkgconfig package for libbrotlienc actually work.  The sources jar file contains the source files, but all at the top-level instead of the package path.\r\n\r\ncurrently:\r\n```\r\n> unzip -l dec-0.1.0-sources.jar\r\nArchive:  dec-0.1.0-sources.jar\r\n  Length      Date    Time    Name\r\n---------  ---------- -----   ----\r\n        0  02-20-2017 15:08   META-INF/\r\n      132  02-20-2017 15:08   META-INF/MANIFEST.MF\r\n     5066  02-20-2017 14:06   BitReader.java\r\n     5208  02-20-2017 14:06   BrotliInputStream.java\r\n      526  02-16-2017 16:46   BrotliRuntimeException.java\r\n     7835  02-16-2017 16:46   Context.java\r\n    31028  02-20-2017 14:06   Decode.java\r\n   243079  02-20-2017 14:06   Dictionary.java\r\n     4256  02-16-2017 16:46   Huffman.java\r\n     1416  02-16-2017 16:46   HuffmanTreeGroup.java\r\n     1521  02-16-2017 16:46   Prefix.java\r\n      491  02-16-2017 16:46   RunningState.java\r\n     3385  02-20-2017 14:05   State.java\r\n     8901  02-20-2017 14:05   Transform.java\r\n     1535  02-16-2017 16:46   Utils.java\r\n     1155  02-16-2017 16:46   WordTransformType.java\r\n---------                     -------\r\n   315534                     16 files\r\n```\r\n\r\nBut it should be structured by package like the compiled jar:\r\n\r\n```\r\n> unzip -l dec-0.1.0.jar\r\nArchive:  dec-0.1.0.jar\r\n  Length      Date    Time    Name\r\n---------  ---------- -----   ----\r\n        0  02-20-2017 15:08   META-INF/\r\n      132  02-20-2017 15:08   META-INF/MANIFEST.MF\r\n        0  02-20-2017 15:08   org/\r\n        0  02-20-2017 15:08   org/brotli/\r\n        0  02-20-2017 15:08   org/brotli/dec/\r\n     3479  02-20-2017 15:08   org/brotli/dec/BitReader.class\r\n     3003  02-20-2017 15:08   org/brotli/dec/BrotliInputStream.class\r\n      682  02-20-2017 15:08   org/brotli/dec/BrotliRuntimeException.class\r\n    11908  02-20-2017 15:08   org/brotli/dec/Context.class\r\n     1043  02-20-2017 15:08   org/brotli/dec/Decode$1.class\r\n    16233  02-20-2017 15:08   org/brotli/dec/Decode.class\r\n     1323  02-20-2017 15:08   org/brotli/dec/Dictionary$DataHolder.class\r\n    49485  02-20-2017 15:08   org/brotli/dec/Dictionary$DataHolder0.class\r\n    46155  02-20-2017 15:08   org/brotli/dec/Dictionary$DataHolder1.class\r\n    51863  02-20-2017 15:08   org/brotli/dec/Dictionary$DataHolder2.class\r\n     1313  02-20-2017 15:08   org/brotli/dec/Dictionary.class\r\n     2007  02-20-2017 15:08   org/brotli/dec/Huffman.class\r\n      982  02-20-2017 15:08   org/brotli/dec/HuffmanTreeGroup.class\r\n     1631  02-20-2017 15:08   org/brotli/dec/Prefix.class\r\n     1653  02-20-2017 15:08   org/brotli/dec/RunningState.class\r\n     3376  02-20-2017 15:08   org/brotli/dec/State.class\r\n     4980  02-20-2017 15:08   org/brotli/dec/Transform.class\r\n      952  02-20-2017 15:08   org/brotli/dec/Utils.class\r\n     2306  02-20-2017 15:08   org/brotli/dec/WordTransformType.class\r\n        0  02-20-2017 15:08   META-INF/maven/\r\n        0  02-20-2017 15:08   META-INF/maven/org.brotli/\r\n        0  02-20-2017 15:08   META-INF/maven/org.brotli/dec/\r\n     2470  02-20-2017 14:42   META-INF/maven/org.brotli/dec/pom.xml\r\n       98  02-20-2017 15:08   META-INF/maven/org.brotli/dec/pom.properties\r\n---------                     -------\r\n   207074                     29 files\r\n```\r\n\r\nThis makes the IDE not find the source files which would be very helpful for seeing javadoc and debugging.  There is a bug in pgcc with conformant array parameters where the\r\nlength argument is a pointer which triggers a compiler error\r\n(PGC-S-0094, to be specific).  The issue has been reported to PGI and\r\nis being tracked internally as TPR 23778.  For more information, see\r\n\r\n  https://www.pgroup.com/userforum/viewtopic.php?t=5501 If you're interested, I can also add a test for PGI on Travis (via [nemequ/pgi-travis](https://github.com/nemequ/pgi-travis)). PR updated w/ a PGI build.  It would be nice to have another release from master which incorporates the significant additions and improvements since 0.5.2... even if it's a 0.6.0 *grin* @jimjag I guess it's #483   BrotliInputStream with brotli format is much slower than GZIPInputStream with gzip format. Is there any performance problem with java decoder?\r\n\r\nSome statistics generated on my android device (xiaomi 4):\r\n\r\ndata size | format | decode cost (ms)\r\n---|---|---\r\n1kb | br | 4.46\r\n1kb | gzip | 1.38\r\n12kb | br | 17.36\r\n12kb | gzip | 4.35\r\n46kb | br | 52.59\r\n46kb | gzip | 8.66\r\n112kb | br | 82.91\r\n112kb | gzip | 15.63\r\n365kb | br | 247.37\r\n365kb | gzip | 41.47\r\n\r\n Yes! JNI wrapper is much more efficient. Time cost is even less than gzip. Thank you!\r\n\r\ndata size | format | decode cost (ms)\r\n---|---|---\r\n1kb | br | 0.47\r\n12kb | br | 1.44\r\n46kb | br | 3.88\r\n112kb | br | 6.53\r\n365kb | br | 17.98  The python bindings are currently provided as wheel packages on [Github](https://github.com/google/brotli/releases/tag/v0.5.2) and [PyPI](https://pypi.python.org/pypi/Brotli/0.5.2), but only for macOS and Windows, and for python2.7, 3.4, and 3.5. For other platforms like Linux, a source distribution is provided, but this of course requires users to have a C compiler.\r\n\r\nI would like to help setting up Travis CI to also build [`manylinux1`](https://www.python.org/dev/peps/pep-0513/) wheels which are portable across most Linux distributions.\r\n\r\nI've done this for several other projects using [`multibuild`](https://github.com/matthew-brett/multibuild), a set of shell scripts originally developed for the Python scientific stack (numpy, scipy, etc.), which makes super easy to set up Travis/Appveyor as wheel builders for Linux, macOS and Windows.\r\n\r\nBefore I proceed working on a pull request, I first wanted to gauge interest and ask for comments.\r\n\r\nWe have two options:\r\n\r\n1) add `multibuild` to the `google/brotli` repo and configure Travis with additional jobs to also build the Linux wheels.\r\n\r\n2) create a separate `google/brotli-wheels` repository with its own Travis/Appveyor CI configuration, which would clone the upstream repo as a git submodule, and would only trigger new builds when the submodule is manually updated, e.g. before a new release.\r\n\r\nThe latter is also the approach recommended in multibuild's README, and used by projects like https://github.com/MacPython/numpy-wheels, https://github.com/MacPython/matplotlib-wheels\r\nand others.\r\n\r\nI'd tend to opt for the second approach, because I see that brotli's Travis matrix is already quite crowded, and adding support for manylinux1 would add at least 8 new jobs (4 jobs cover all the python2.7, 32 vs 64 bit, \"narrow\" vs \"wide\" unicode build; plus 4 more to cover 3.5 and 3.6, 32 and 64 bit), thus further slowing it down.\r\n\r\nWhat do you think? ping @szabadka \r\n \r\nI can volunteer to maintain this `brotli-wheels` repository, and set it up to build wheels when the upstream `brotli` is released, and have it upload them automatically to PyPI.\r\n\r\nI could create the new repository under my Github username, or if you wish, you can create it under the `google` Github organization and add me as collaborator for that repo.\r\n\r\nI would also require access to the `brotli` PyPI account. Having a separate brotli-wheels looks like a good solution for this. How\ncan I give access to the brotli PyPI account?\n\nOn Wed, Mar 1, 2017 at 1:55 PM, Cosimo Lupo <notifications@github.com>\nwrote:\n\n> ping @szabadka <https://github.com/szabadka>\n>\n> I can volunteer to maintain this brotli-wheels repository, and set it up\n> to build wheels when the upstream brotli is released, and have it upload\n> them automatically to PyPI.\n>\n> I could create the new repository under my Github username, or if you\n> wish, you can create it under the google Github organization and add me\n> as collaborator for that repo.\n>\n> I would also require access to the brotli PyPI account.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/brotli/issues/507#issuecomment-283332384>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AIp1d6C0bMkv0uqXCT8Hb1Cc8YhU3qxiks5rhWqmgaJpZM4L7_ED>\n> .\n>\n you need to add me as collaborator in the \"roles\" section on the brotli PyPI page:\r\n\r\nhttps://pypi.python.org/pypi?:action=role_form&package_name=brotli\r\n\r\nMy pypi username is also `anthrotype`. Thank you! thanks @eustas! \ud83d\udc4d \r\nI won't be able to work on that before next week.  I was running fuzz testing on [my Brotli implementation](https://github.com/dsnet/compress/tree/master/brotli) and noticed that the following input differs when decompressed by my version compared to the canonical one here.\r\n\r\nThe input causing issues (in hex): `e2e184886a563080e0391603e430f9`\r\n\r\nWhen decompressed by the `google/brotli` C implementation: \r\n`worldwhitemediafirstirstirstirstirstirstirstirstirstirstirst...`\r\nWhen decompressed by my implementation: \r\n`worldorldorldorldorldorldorldorldorldorldorldorldorldorldorl...`\r\n\r\nAccording to section 4 of the RFC:\r\n>   When a distance symbol 0 appears, the distance it represents (i.e.,\r\n   the last distance in the sequence of distances) is not pushed to the\r\n   ring buffer of last distances\r\n\r\nHowever, this seems contrary to [what C decoder currently does](https://github.com/google/brotli/blob/ccabf811ffcef087d9f10cf417b05271c2067a82/dec/decode.c#L1706-L1710):\r\n```c\r\nif (s->distance_code >= 0) {\r\n\t--s->dist_rb_idx;\r\n\ts->distance_code = s->dist_rb[s->dist_rb_idx & 3];\r\n\tgoto postReadDistance;  /* We already have the implicit distance */\r\n}\r\n```\r\n\r\nThe logic in the C version seems contrary to the stated prose in the RFC, which makes no mention that an implicit zero *reverse* rotates the distance ring-buffer. I believe there is in a mismatch in the increments and decrements in the case where the implicit zero command is repeatedly used and the static dictionary case is hit. It seems that it will short-circuit the increment logic (which only occurs in the dynamic dictionary case), causing the handling of implicit zeros to accidentally decrement one too much each time.\r\n\r\nI compiled with debugging and logging enabled and ran `bro -d`. The relevant snippet is:\r\n```\r\n...\r\n[ProcessCommandsInternal] pos = 0 insert = 0 copy = 5\r\nIMPLICIT_ZERO\r\n[ProcessCommandsInternal] pos = 0 distance = 4\r\n[ProcessCommandsInternal] dictionary word: [world]\r\n[ProcessCommandsInternal] s->meta_block_remaining_len = 9995\r\n[ProcessCommandsInternal] pos = 5 insert = 0 copy = 5\r\nIMPLICIT_ZERO\r\n[ProcessCommandsInternal] pos = 5 distance = 11\r\n[ProcessCommandsInternal] dictionary word: [white]\r\n[ProcessCommandsInternal] s->meta_block_remaining_len = 9990\r\n[ProcessCommandsInternal] pos = 10 insert = 0 copy = 5\r\nIMPLICIT_ZERO\r\n[ProcessCommandsInternal] pos = 10 distance = 15\r\n[ProcessCommandsInternal] dictionary word: [media]\r\n[ProcessCommandsInternal] s->meta_block_remaining_len = 9985\r\n[ProcessCommandsInternal] pos = 15 insert = 0 copy = 5\r\nIMPLICIT_ZERO\r\n[ProcessCommandsInternal] pos = 15 distance = 16\r\n[ProcessCommandsInternal] dictionary word: [first]\r\n[ProcessCommandsInternal] s->meta_block_remaining_len = 9980\r\n[ProcessCommandsInternal] pos = 20 insert = 0 copy = 5\r\nIMPLICIT_ZERO\r\n[ProcessCommandsInternal] pos = 20 distance = 4\r\nUPDATE_RING_BUFFER\r\n[ProcessCommandsInternal] pos = 25 insert = 0 copy = 5\r\nIMPLICIT_ZERO\r\n[ProcessCommandsInternal] pos = 25 distance = 4\r\nUPDATE_RING_BUFFER\r\n[ProcessCommandsInternal] pos = 30 insert = 0 copy = 5\r\nIMPLICIT_ZERO\r\n...\r\n```\r\n\r\nThe `IMPLICIT_ZERO` message was a printf added after L1706 of decode.c. In the log printout, you see that the distance is sweeping through the sequences [4, 11, 15, 16, 4, 4, 4, 4, 4, ...]. Notice it how it goes in reverse order through the initial distances in the ring buffer (i.e., 4, 11, 15, 16) even though only the zero code is used? After exhausting the ring buffer, it no longer performs static dictionary lookups, and starts doing dynamic dictionary lookups, causing it to properly stay at 4 for the rest of the time.  Testing 0749d9c does not give me the same decompressed output as @dsnet proposes in his initial report of this issue.\r\n\r\nDecompressing hex `e2e184886a563080e0391603e430f9` results in\r\n\r\n`worldsmallmallmallmallmallmallmallmallmallmallmallmallma...` (10000 bytes in total)\r\n\r\ninstead of the expected\r\n\r\n`worldorldorldorldorldorldorldorldorldorldorldorldorldorldor...` (no total given).\r\n\r\n@dsnet's \"wrong\" output before 0749d9c matches mine, so I am inclined to believe that his fixed output is also correct, in which case the fix is wrong.\r\n\r\nCould @dsnet or @eustas please shed some light? Thanks!\r\n\r\nPS: Will there be a test case? @ralfjunker, what implementation is yours?\r\n\r\nMine repeats \"orld\" until the 10000 byte limit is hit. My interpretation of what should happen (assuming all implementations agree about huffman decoding of commands):\r\n\r\nThere is a repeated sequence of commands of the form (length:5, dist: 0).\r\n\r\nAccording to section 4, dist:0 should result in the last distance being used, which defaults to 4 (without updating the distance ring buffer; not that it matters).\r\n\r\nThus, this is really a repeated sequence of (length:5, dist:4) commands.\r\n\r\nFor the first command, there is no output, so it falls under the static dictionary case according to:\r\n```\r\nif distance is less than the max allowed distance plus one\r\n\tmove backwards distance bytes in the uncompressed data,\r\n\tand copy CLEN bytes from this position to\r\n\tthe uncompressed stream\r\nelse\r\n\tlook up the static dictionary word, transform the word as\r\n\tdirected, and copy the result to the uncompressed stream\r\n```\r\nThis copies \"world\" to the output.\r\n\r\nFor all subsequent commands, there is sufficient data in the output such that a distance of 4 is always satisfied by the dynamic dictionary. Thus, copying \"orldo\" the first time, \"rldor\" the second time, \"ldorl\" the third time, etc. I am using the C implementation from this repository, in particular this check-in: 0749d9ca8b8ec1.\r\n\r\nIt repeats `mall` until it reaches 10000 bytes.\r\n\r\nDid you test @eustas' fix to this C implementation?  Recently I get SEGV signals inside the brotli directory decoding content of Youtube and I was wondering if this brotli library is threadsafe ?\r\nI.e. can I use multiple threads that repeatedly do this:\r\n```\r\nbstate = BrotliDecoderCreateInstance( NULL, NULL, NULL );\r\nbretval = BrotliDecoderDecompress( ... );\r\nBrotliDecoderDestroyInstance( bstate );\r\n```\r\n  In the code below, `BrotliEncoderSetCustomDictionary()` causes a \"false\" OOM on compression, which causes the application to halt. Curiously, the OOM is not a real OOM. It only appears as such as a result of `malloc(0)` which returns `NULL`.\r\n\r\nWithout the `BrotliEncoderSetCustomDictionary()` call all works fine.\r\n\r\n```C\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n\r\n#include \"brotli/encode.h\"\r\n\r\nint main()\r\n{\r\n  unsigned int i;\r\n  uint8_t dictionary [0x1000];\r\n  uint8_t originalBuffer [0x2000];\r\n  uint8_t compressedBuffer [0x2000];\r\n  size_t availIn, availOut;\r\n  const uint8_t * nextIn;\r\n  uint8_t *nextOut;\r\n  BrotliEncoderState *s;\r\n  BROTLI_BOOL r;\r\n\r\n  /* Create random dictionary. */\r\n  for (i = 0; i < sizeof(dictionary); i++) {\r\n    dictionary[i] = rand() % 256;\r\n  }\r\n\r\n  /* Create an input buffer exactly two times the dictionary. */\r\n  memmove(originalBuffer, dictionary, sizeof(dictionary));\r\n  memmove(&originalBuffer[0x1000], dictionary, sizeof(dictionary));\r\n\r\n  s = BrotliEncoderCreateInstance(NULL, NULL, NULL);\r\n  if (!s)\r\n    printf(\"Error creating Brotli encoder\\n\");\r\n\r\n  /* Set the  custom dictionary. This causes the OOM during compression. */\r\n  BrotliEncoderSetCustomDictionary(s, sizeof(dictionary), &dictionary);\r\n\r\n  availIn = sizeof(originalBuffer);\r\n  nextIn = originalBuffer;\r\n\r\n  availOut = sizeof(compressedBuffer);\r\n  nextOut = compressedBuffer;\r\n\r\n  /* Because the OOM exits the application, this call does not return. */\r\n  r = BrotliEncoderCompressStream(s,\r\n    BROTLI_OPERATION_FINISH, &availIn, &nextIn, &availOut, &nextOut, NULL);\r\n  if (r != BROTLI_TRUE)\r\n    printf(\"Error compressing data\\n\");\r\n\r\n  BrotliEncoderDestroyInstance(s);\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\nThe OOM happens in `BrotliSplitBlock()`, file` block_splitter.c` on line 137:\r\n\r\nhttps://github.com/google/brotli/blob/master/enc/block_splitter.c#L137\r\n\r\nI hope you can reproduce the issue. If you have questions, please let me know. You are correct in saying that `-DBROTLI_ENCODER_CLEANUP_ON_OOM` works around the exit. However, compression still fails and `BrotliEncoderCompressStream()` returns `BROTLI_FALSE`.\r\n\r\nHere is a solution I found to pass my tests: _Don't_ call `BROTLI_ALLOC` if `literals_count` is `0`. It's a small change to https://github.com/google/brotli/blob/master/enc/block_splitter.c#L137, just replace \r\n\r\n```C\r\nuint8_t* literals = BROTLI_ALLOC(m, uint8_t, literals_count);\r\n```\r\n\r\nwith\r\n\r\n```C\r\nuint8_t* literals = literals_count ? BROTLI_ALLOC(m, uint8_t, literals_count) : NULL;\r\n```   My Bad.\nIt was by mistake....\nPlease ignore...\n\nOn 31 Jan 2017 14:40, \"Eugene Kliuchnikov\" <notifications@github.com> wrote:\n\n> Pardon?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/brotli/pull/499#issuecomment-276311419>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ARX--honmEDYouZ0PvnlqyRv07gLVRf2ks5rXvqhgaJpZM4LyTGM>\n> .\n>\n  It's defined as a non-const inline union...\r\ncf. [our current math.h](http://cgit.haiku-os.org/haiku/tree/headers/posix/math.h#n68)\r\nI'm open to a cleaner solution. Maybe we should make it const, not sure though... Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> Thank!  Haiku at least still requires GCC 2 for system components. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> Ugh, why would I want to bring my gmail account into this? For a oneliner!? thx!  - Do you intend to have official C# implementation, similar to Java ?\r\n- Are there any C# devs that plan to port to C# here?, \r\n\r\n----\r\n\r\n- [x] transpile (pure) Java decoder to C#\r\n- [ ] create NuGet package + wrapper for managed languages @McNeight,\r\nDo you have a plan to implement this? Now that there is a Java port, it should be fairly simple to build a .NET Core port. This is only for the decoder, which is great for clients. I'm interested in using brotli with an ASP.NET Core application for dynamic compression on the fly.\r\n\r\nI have seen a comment saying the encoder is more complex and C will give better performance etc. A wrapper around the C library would still suffice. Either way a simple NuGet package would be perfect. Hello, Thank you.\r\n\r\nI will test it :)\r\n  When building Chromium with the v1.0.0 version of Brotli using the VC++ /analyze feature I see the following warnings:\r\n\r\nbrotli\\enc\\compress_fragment_two_pass.c(461) : warning C6385: Reading invalid data from 'cmd_histo':  the readable size is '512' bytes, but '1024' bytes may be read.\r\nbrotli\\enc\\compress_fragment_two_pass.c(474) : warning C6385: Reading invalid data from 'cmd_bits':  the readable size is '256' bytes, but '512' bytes may be read.\r\nbrotli\\enc\\compress_fragment_two_pass.c(474) : warning C6385: Reading invalid data from 'cmd_depths':  the readable size is '128' bytes, but '256' bytes may be read.\r\nbrotli\\enc\\compress_fragment_two_pass.c(475) : warning C6385: Reading invalid data from 'kNumExtraBits':  the readable size is '512' bytes, but '1024' bytes may be read.\r\nbrotli\\enc\\static_dict.c(90) : warning C6385: Reading invalid data from 'kBrotliDictionarySizeBitsByLength':  the readable size is '25' bytes, but '128' bytes may be read.\r\n\r\nManual examination of these warnings suggest that they are all valid. In all cases an index is being anded with a bit mask but the bit mask has too many set bits.\r\n\r\nIn the first four cases a bit mask of 0xff is used by the arrays only have 128 elements. It would be safer to define a COUNTOF macro and change the code like this:\r\n\r\n    ++cmd_histo[commands[i] & 0xff];\r\n\r\nto something like this:\r\n\r\n    ++cmd_histo[commands[i] & (COUNTOF(cmd_histo) - 1)];\r\n\r\nOr, just change the constant to 0x7f, or use a named constant to make sure they stay in sync.\r\n\r\n\r\nThe fifth warning is a bit different because the index is being masked down to 0-127 but the array is 25 elements long. This seems odd. If the value of 'len' is guaranteed to be in range then the masking is not needed, and if isn't guaranteed to be in range then the masking is insufficient. Maybe there is other data in the high bits of 'len' - I can't tell. The safest thing to do, it seems, would be to pad kBrotliDictionarySizeBitsByLength out to 32 bytes (at a cost of six bytes of storage) and then mask with 0x1f instead of 0x7f. Thanks for the explanation.  VC++ gives many warnings in its /analyze mode and I ignore many of them, so I am fine with ignoring these as well. However they pointed out constructs which were suspicious - which looked wrong to a human eye. Comments to explain that the mask amounts are in fact correct (and why) would be sufficient I think. Suppressing /analyze warnings is a black art and making the code clear for human readers is more important, IMHO.  Why was this done?\r\n\r\nEverything once configured to use `pkg-config ... brotli` now fails...\r\n I can understand why you might want to split it for use cases which don't require linking everything, but why remove `brotli.pc`? I see, that's an unfortunate view to hold but at least there is a rational for others who might encounter this issue as systems are updated.  \\research\\draw_diff.cc line 99\r\n\r\nmissing fclose(fdiff);   FYI, the issue of failing tests returning 0 exit status has been fixed in the latest setuptools v32.1.0\r\nhttps://github.com/pypa/setuptools/pull/892 @anthrotype great, thanks for the confirmation   It seems that the API for encoding/decoding in parallel was removed for some reason.\r\nCan we please introduce it back? Large payloads can be decompressed more rapidly if you utilize multiple cores.\r\nThis is especially true when streaming compressed data through a socket.\r\n\r\nAlso compressing can be sped up by using multiple cores. Any chance to get this with 1.0?  There has been some API changes since 0.5.x.\r\nIt'd be great to have a new release tagged so that we can use them. Any news on this? We're waiting for the 1.0 release in order to upgrade the Ruby implementation. @eustas \u00bfAny update on this? Why hold off others who could use it, like Apache httpd, because of work needed for nginx? mod_brotli for httpd uses, and needs, the post 0.5.2 fixes and that's the only thing delaying our release of the module.\r\n\r\nThe world is waiting! Please don't show preferential treatment! :) :) Any update on the status of a release?\r\n Is it https://github.com/google/brotli/pull/520 ? It seems to be green ;-) Anything I/we can do to help? Any update on this? We (the Apache httpd PMC) were looking to doing a 2.4.26 release soon, and it would be great to be able to include mod_brotli; but we can't depend on an unreleased lib and the module requires the \"new\" API.\r\n\r\nThanks! WOOT!! Super Thx! @eustas Great, thanks! Do you also plan to submit a PR to google/woff2 to upgrade brotli when v1.0.0 is released? > v1.0.0 is coming soon.\r\n\r\n@eustas Do you have any idea about when v1.0.0 will be released? > Going to see through issues list and, hopefully, new release will happen next week.\r\n\r\n@eustas Sorry for pushing again, but are there still things blocking the 1.0.0 release? @eustas So it was https://github.com/google/brotli/pull/581 ? @eustas So I guess there is still delay...  :-(\r\n\r\nJust FYI, the web engines hackfest 2017 edition is in one month and I hope we would have a release of brotli with stable API since then so that we can package it in distros and start the work for WOFF2 too... with the goal of having at least Linux browsers using system libraries for web fonts. Yay!  @eustas Great, thanks and congrats!!!! Do you plan to you plan to submit a PR to https://github.com/google/woff2 to upgrade it to brotli 1.0.1???  Changes look good, but https://travis-ci.org/google/brotli/jobs/182575377 failed for some reason.  Maybe rebase on master to get the new unit tests to double-check?  The C extension doesn't currently release the GIL during [`compress_stream()`](https://github.com/google/brotli/blob/master/python/_brotli.cc#L92) and during `decompress_stream()` (between https://github.com/google/brotli/blob/master/python/_brotli.cc#L433 and https://github.com/google/brotli/blob/master/python/_brotli.cc#L452 which is a shame because we can enable greater parallelism . No need for anything else. That should do the trick.  This was an enhancement request proposed by @nemequ  @eustas thanks!  A woff2 generator or consumer will generally use only one of this library so it's better to have separate pc files. This is how it was done in @bagder 's initial commit but @nemequ only created a single pc file.\r\n\r\nThere were discussions about the names to use for pc files, but I'm not sure how important it is. @eustas Are you going to take care of this? Thanks. I trust you @eustas !  This is false positive, since it will always get set before use, but clang doesn't like it...  I see the decoder has been ported to Java recently. Are there plans for porting encoder to Java as well? I did release a java encoder of brotli. https://github.com/dominikhlbg/BrotliHaxe  AFAIK this should fix #326.  I came up with a possible design here: [brotli-framing-format.md](https://github.com/dsnet/compress/blob/master/doc/brotli-framing-format.md)\n\nHigh level ideas:\n- Designed to be more efficient with random-access decompression by coalescing records together into a unified index (like [xz](http://tukaani.org/xz/format.html)), rather than having the offsets be distributed throughout the file (like [lzip](http://lzip.nongnu.org/manual/lzip_manual.html#File-format)).\n- I don't feel strongly that the format should provide ways to encode the original filename, owner, group, modified date, etc. My opinion is that an archive format like tar or zip should be used and that the framed format is only responsible for compression.\n- No option to choose between multiple checksum methods (just use CRC-32). If a user cares about data integrity, they can encrypt and sign the file afterwards.\n- Limited support for parallel decompression when reading the input forwards as a stream. The \"sync markers\" to do this also provide limited forms of data recovery with partial files.\n- The StaticDict feature is experimental. I'm not sure if this should be part of the format, but it seems like an interesting idea to me.\n\nYou may want to consider giving the framed format a completely different name than simply \"brotli framing format\". There may be much confusion between what the difference is between two.\n > - should not be a valid UTF-8 string\n> - should not be a valid brotli stream\n\nWith `0x91` as the first byte, if the second byte doesn't have the highest bit set, we can guarantee that it isn't UTF-8 either.\n @eustas asked me to move my feature request from #549 to this thread:\r\n\r\n>Would it be practical for a future version of Brotli to detect strings of formats like base64 and hex and decode them to binary before compressing / re-encode them as part of the decompression process?\r\n>\r\n>I noticed just now during a comparison between compressing a binary file and the equivalent base64 (https://github.com/kripken/emscripten/issues/5104#issuecomment-302939570) that the base64 version ended up larger, which it occurs to me shouldn't need to be the case given that the two contain almost exactly the same information.\r\n\r\nSince I don't know anything about Brotli's internals, I have nothing more specific to suggest in terms of the framing format design.  ---\n\n_edited Oct 28: see updated commit description and in the thread below_\n build will also compile the pure python modules, besides in turn calling build_ext to compile the extension module. It is the correct command to use, now that brotli is a package with some pure python modules. Previously it was a single extension module.\n _updated commit description follows_\n\n---\n\nPreviously, the Python package consisted of a single extension\nmodule, so `build_ext` was sufficient.  Now, the package\ncontains a native module and an extension module, so both\n`build_py` and `build_ext` are required.  Instead, run `build`,\nwhich calls both `build_py` and `build_ext` automatically.\n Also, I rebased to the latest commit on `master`\n  You could tell Travis CI to use Mavericks by specifying `osx_image: beta-xcode6.1` or `osx_image: beta-xcode6.2`.\nSee https://docs.travis-ci.com/user/osx-ci-environment/\n  @eustas Let's see if that makes the bots happy (maybe we want to change the travis / appveyor files too...)\n Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n CLAs look good, thanks!\n\n<!-- ok -->\n Closing as it is included in #450 \n     @eustas Can you please take a look to that one-line change? I think this is the remaining important bit to fix issue #326 . The travis failures seem to happen on BUILD_SYSTEM=python, so that should be unrelated to CMake changes?\n @eustas OK, that works for me too (let's see later if some Cygwin or MSYS2 maintainers complain...). I updated the pull request.\n @eustas OK, but at the moment we do not install the libraries at all when building in static mode, so the headers are not going to be used anyway. Maybe we want to remove the whole if(BUILD_SHARED_LIBS) here so that we also install the lib & include in static mode too?\n @eustas OK, done.\n @eustas updated the install directory, but not sure what you mean with your last comment?\n(PS: feel free to take over this work if that's faster, I'm not experienced with all these cmake build configs either...)\n  Revert to the previous default macOS image \"beta-xcode6.1\"\n(macOS 10.9 / Xcode 6.4) to work around Travis compilation bug\nin the default image released on 04 Oct 2016, \"xcode7.3\"\n(macOS 10.11 / Xcode 7.3).\n\nhttps://blog.travis-ci.com/2016-10-04-osx-73-default-image-live/\n @eustas I believe this PR was meant to address the `/Users/travis/build.sh: line 109: shell_session_update: command not found` at the end of this Travis log https://travis-ci.org/google/brotli/jobs/165268025 (which is for the other PR by @nicksay #435) \n\nThat error message (which is unrelated to issue of the gcc version) is still showing up at the end of Travis log: e.g. https://travis-ci.org/google/brotli/jobs/167048215#L446 \nBut the brotli macpython build does not fail despite that error message. You can probably ignore it. It will surely be fixed it at some point by Travis CI team.\n Yes, this PR was just to be a temporary fix for the \"not found\" issues that were blocking #435 (and other pending changes), but #438 is better.  Happy to close this.\n   the changes are purely cosmetic, hence to some degree subjective, but if you prefer it like that, I don't mind.\n Agreed that these are (mostly) cosmetic changes.  There are 2 minor actual changes here:\n- I've updated the package `author` to be \"The Brotli Authors\"\n- I've removed the package `author_email`\n\nOtherwise, I think this formatting makes future changes to the extension configuration a little clearer / more isolated.\n\nAny ideas on why the travis build is failing with `unable to execute 'g++-4.2': No such file or directory`?\n\nIt passed on my local branch before the pull request:\nhttps://travis-ci.org/nicksay/brotli/jobs/164731291\nBut failed here:\nhttps://travis-ci.org/google/brotli/jobs/165268025\n Sounds like a Travis CI bug.\nSee here: https://github.com/python-pillow/pillow-wheels/issues/45#issuecomment-251448111\n\nthe workaround is to set `osx_image: xcode6.4`\n Ah, great, thanks.  I've sent #436 to solve that bug for now.\n I actually had to go back to the previous default `osx_image: beta-xcode6.1` since `xcode6.4` also had errors.\n I've added a [temporary commit](https://github.com/google/brotli/pull/435/commits/c5362081eb4a667e1a02d89efed72704155da828) to verify the build passes.  Once #436 is merged, I'll rebase and remove the commit.\n cc @nnorwitz FYI\n I u r\nOn Oct 5, 2016 8:53 PM, \"Alex Nicksay\" notifications@github.com wrote:\n\n> ---\n> \n> You can view, comment on, or merge this pull request online at:\n> \n>   https://github.com/google/brotli/pull/435\n> Commit Summary\n> - Python: Clean up setup.py file\n> \n> File Changes\n> - _M_ setup.cfg\n>   https://github.com/google/brotli/pull/435/files#diff-0 (2)\n> - _M_ setup.py https://github.com/google/brotli/pull/435/files#diff-1\n>   (322)\n> \n> Patch Links:\n> - https://github.com/google/brotli/pull/435.patch\n> - https://github.com/google/brotli/pull/435.diff\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/google/brotli/pull/435, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ANDH0hQyQ3ZoeSEcagMIM31VROSbPgs3ks5qw8EEgaJpZM4KO8Xt\n> .\n another workaround to this Travis CI bug, instead of using the old VM, is to call `rvm get head`, as mention here:\nhttps://github.com/travis-ci/travis-ci/issues/6307#issuecomment-233315824\n\nFor example:\nhttps://github.com/schwa/SwiftIO/commit/f9914fabda2ee1509bef5110f2028efc424d828d\n I've rebased and removed the temporary commit now that @eustas merged #438. \n Great, build is passing now; this PR is ready to go.\n @eustas Absolutely, I'll revert the `setup.cfg` change and open a new PR for both of those.  Do you want that in the base `README.md` or in `python/README.md`?\n It took an hour for Travis to finish, but this PR is again ready to go. \ud83d\ude04 \n  I got bitten by a this long standing bug in `modp_dtoa{,2,3}`: https://github.com/client9/stringencoders/issues/40. I was able to reproduce it with brotli as well.\n\nThe following values should rond to `1.0` but instead return `0.1`\n\n``` c\nmodp_dtoa(0.95, str, 1); \nmodp_dtoa(0.9999995, str, 6); \n```\n\nUnfortunately upstream does not seem to be maintained anymore.\n Apologies, I seem to have mixed up with another repository.\n  Right now the only way to use Brolti in the backend is to use the Java binding for Brotli (JNI). It is not always possible to run native code in backend. Could Google release a pure Java implementation of Brotli to facilitate its adoption. I am mostly interested in the decompression part.\n @eustas great news!!! Thanks :)\n Any ETA on when this can be published to Maven Central?\n Awesome! Thanks!\n Hello! Any updates on this being published? Thanks! Sorry to ask again, but any updates on the publish? Cool! Thanks for letting us know. Are there any plans to also implement the encoder?  This is a small set of simple tools used together with [large-window brotli](https://github.com/google/brotli/pull/426) to visualize backward reference distance distribution. You can find a description [here](https://github.com/Zip753/brotli/blob/master/research/README.md).\n Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n CLAs look good, thanks!\n\n<!-- ok -->\n  Hello\n\nI recently compiled brotli under Xcode for use in an iOS project and I hit one little snag. The files dec/port.h and common/port.h have the exact same filename and this makes it difficult to setup an Xcode project where all the brotli files live in one directory. Could you please rename common/port.h to common/common_port.h (or perhaps common/cport.h) so that it is possible to import these files into an Xcode project without a conflict. The built in include files logic in an Xcode project are a little weird and this change would make things a lot easier.\n No, I am building in Xcode but creating a new directory layout and the only catch is the fact that the same filename is being used in different directories. It is not a problem if you don't change anything and use the existing build structure, but then it is harder to integrate into an existing Xcode project as source code.\n  \u2026ng is detected, check for __ARM_ARCH being exactly equal to 7 so that arm64 arch does not define BROTLI_TARGET_ARMV7\n Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n I signed it\n\nMy github username is mdejong.\n\nMo DeJong\n\n> On Aug 30, 2016, at 12:38 PM, googlebot notifications@github.com wrote:\n> \n> I signed it\n CLAs look good, thanks!\n\n<!-- ok -->\n So, I can confirm that rbit would compile on arm64, but it causes a runtime error. It does compile, the generated asm on an arm64 target looks like:\n\n```\n0x1000a8f7c <+1208>: str    w9, [sp, #100]\n0x1000a8f80 <+1212>: ldr    w9, [sp, #100]\n0x1000a8f84 <+1216>: rbit   x9, x9\n0x1000a8f88 <+1220>: str    w9, [sp, #96]\n\n```\n\nFor example, you could make this compile after adding my patch by making this change:\n\n```\n#if BROTLI_MODERN_COMPILER || defined(__llvm__)\n#if defined(BROTLI_TARGET_ARMV7) || defined(BROTLI_TARGET_ARMV8)\nstatic BROTLI_INLINE unsigned BrotliRBit(unsigned input) {\n  unsigned output;\n  __asm__(\"rbit %0, %1\\n\" : \"=r\"(output) : \"r\"(input));\n  return output;\n}\n#define BROTLI_RBIT(x) BrotliRBit(x)\n#endif  /* armv7 */\n#endif  /* gcc || clang */\n\n```\n\nThe change I made was to just get BROTLI_TARGET_ARMV7 to only be defined for the ARM 7 targets while keeping it from being defined for arm64 which is v8.\n After a bit of poking around, I found the following: https://patchwork.kernel.org/patch/5144161/\n\nChanging BrotliRBit() to the following fixed the asm call to rbit on arm64:\n\n```\n#if BROTLI_MODERN_COMPILER || defined(__llvm__)\n#if defined(BROTLI_TARGET_ARMV7) || defined(BROTLI_TARGET_ARMV8)\nstatic BROTLI_INLINE unsigned BrotliRBit(unsigned input) {\n  unsigned output;\n#if defined(BROTLI_TARGET_ARMV8)\n  __asm__(\"rbit %w0, %w1\" : \"=r\" (output) : \"r\" (input));\n#elif defined(BROTLI_TARGET_ARMV7)\n  __asm__(\"rbit %0, %1\\n\" : \"=r\"(output) : \"r\"(input));\n#endif\n  return output;\n}\n#define BROTLI_RBIT(x) BrotliRBit(x)\n#endif  /* armv7 || arm64 */\n#endif  /* gcc || clang */\n\n```\n\nWith this change, both arm 32 and 64 bit targets compile and execute correctly.\n Hey guys, can this first commit be added to the repo? I can submit a second pull req for the second change related to the rbit instruction, but it depends on the first one.\n The rbit issue is an additional change that can be added on after this pull req. I proposed a rbit modification also (see above), but this pull req stands on its own.\n I just created 459 and verified that rbit is executing properly when built on ARM64 with that change.\n   Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n I signed it!\n  This changes allows to build a small brotli binary that relies on shared libraries dec, enc and common (instead of a single binary). In particular this will allows distro maintainers to create independent libbrotli libraries (issue #326).\n Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n I signed it!\n  Bazel doesn't like \"tools\" directory, which makes the whole\nBUILD file unusable.\n After wiping everything Bazel-related from my systems (since it was broken on all of them), I found the issue.\n\nIt was outdated `~/.bazelrc` file generated by older version of Bazel:\n\n```\nbuild --package_path %workspace%:/path/to/bazel/base_workspace\nfetch --package_path %workspace%:/path/to/bazel/base_workspace\nquery --package_path %workspace%:/path/to/bazel/base_workspace\n```\n\nThanks for double-checking and sorry for the noise!\n  cc_inc_library is broken when used with external repositories\n(see: https://github.com/bazelbuild/bazel/issues/1596), which\nmakes it a bit useless at the moment.\n\nSwitch to using cc_library with \"includes\" attribute to expose\npublic headers.\n\nWhile there, fix order of attributes in \":brotli_common\" target.\n Unfortunately, this warning is also known issue: https://github.com/bazelbuild/bazel/issues/1286\n   seems it feel better :)\n  please create a plugin for 7-Zip so that this open and free archiver can also compress images using FLIF.\nThis would also help making Brotli more famous in the world.\n\nthere are already plugins that work with 7-Zip (including descriptions and sources):\n\nZSTD\n\nhttps://github.com/mcmilk/7-Zip-Zstd\n\nLZHAM\nhttp://richg42.blogspot.de/search?updated-max=2015-12-03T16:22:00-08:00&max-results=7&start=21&by-date=false\nhttps://github.com/richgel999/lzham_codec_devel\n I am creating an 7-Zip plugin for brotli. Currently there seems to be no special magic for testing of brotli's presence in some data.\r\n\r\nI found some first definitions of a frame format v3 in the brotli repository of @madler ... but that's it.\r\n\r\nFor my 7-Zip extension, the stream with the container will be defined like this:\r\n- 12 bytes skippable frame\r\n  - 4 bytes magic id 0x184D2A50U\r\n  - 4 bytes length of the skippable frame (always 4)\r\n  - 4 bytes with the length of the following compressed data, CLEN (including 4 bytes magic)\r\n- 4 bytes magic id in the beginning of compressed data: \"BROT\"\r\n- CLEN bytes compressed data stream to be decoded\r\n\r\nBut I could also support \"normal\" brotli streams, if I can recognize them.\r\n\r\nAFAIK, Igor will not add new codecs to Standard 7-Zip currently.\r\n\r\nEdit: Oh, I just found https://github.com/google/brotli/issues/462 ... I think this issue can be closed now, cause you have an [7-Zip plugin for brotli](https://github.com/mcmilk/7-Zip-Zstd) now ;-)\r\n  Hi guys, what are the wheels files supposed to do? I installed a wheel thinking it would build a binary, but it didn't.\n\nRelatedly, what's the simplest way to build brotli on Windows? I see make, cmake, premake, the notes mention Bazel. I'm not familiar with the last two. What's the best Windows path here? (64-bit, Windows 10, VS 2015)\n @JoeArizona [Wheels](https://www.python.org/dev/peps/pep-0427/) are Python's binary package format.\n Hey thanks @eustas, I'm reading about premake now, and it looks pretty smart. premake5 is in alpha though, and 4.4 is in beta, so I'm puzzled by what version they want people to use, since those are the only downloads they feature. I'll try CMake. Exposing compiler optimizations in these tools has always been harder than it needs to be, buried in so much other content that it feels like compiler flags are an afterthought. Build tools should have a section in their make-equivalent files called **Optimization**, with subsections for CPU/hardware targets, linker optimization, math, etc. and then automatically convert all that to the correct compiler flags depending on the compiler. Maybe I'll sketch out something.\n\n@anthrotype I know that much, have occasionally gone to Christoph Gohlke's wonderful [repository of Python wheels for Windows](http://www.lfd.uci.edu/~gohlke/pythonlibs/) to grab stuff, but I don't know what the _brotli_ wheel is supposed to do exactly, since brotli isn't written in Python. I guess another way of framing my question: What do we need the Python stuff for here? What is Python doing in the brotli repo? I'm not used to seeing a bunch of Python/Ruby/scripting code in a compression codec written in C/C++. If we don't need it to build the binaries, then is for testing or something? I looked around for an explanation of the build process, and also of what the Python code was for, but so far I haven't found any docs or comments on that.\n @JoeArizona They are simply bindings which allow to call the brotli library from python code (Python has C API which can be used to write extension modules).\nFor example, we use brotli for compressing WOFF2 fonts in [FontTools](https://github.com/behdad/fonttools).\n Ah, okay, just bindings. The nine different wheels in the downloads/releases page threw me off, made me think wheels were being used to build brotli.exe. Thanks for clearing that up.\n Yeah, those should really be uploaded to the Python package index, IMO.\n  I found a test case where brotli with quality 9 compresses better than with quality 11.  This seemed worth reporting in case there might be some convenient way to detect and handle this case (short of compressing the whole file both ways to check).\n\nTest case and compressed versions: [brotli-test.tar.gz](https://github.com/google/brotli/files/417342/brotli-test.tar.gz)\n\n(This test case came from a locally modified version of [bsdiff](http://www.daemonology.net/bsdiff/) that doesn't use bzip2 internally, so that I could test it with brotli.  The bsdiff goes from jquery-2.2.3.min.js to jquery-2.2.4.min.js .)\n\nCompressing jquery.ubsdiff with brotli quality 11 produces 264 bytes; compressing with quality 9 produces 252 bytes.\n  gzip sets the file modification time of the new `.gz` file to match the original file. Brotli does not do that. Do you consider adding this feature?\n\nGZIP does also inherit the permissions of the original file - in contrast to Brotli.\n\nTasks:\n- [x] preserve original file modification date\n- [x] preserve original file permissions\n  ``` console\n$ ./bro -h                                       \nUsage: ./bro [--force] [--quality n] [--decompress] [--input filename] [--output filename] [--repeat iters] [--verbose] [--window n] [--custom-dictionary filename]\n```\n\nThis output is very few. E.g. I don't know what the `--repeat` or `--window` switches do.\n Any progress in this regard yet? Awesome! Just continue like this!  ```\nDeploying using GitHub provider\nCreating \"v0.5.0\" release for repository \"google/brotli\" tag \"v0.5.0\" commit \"2e0d3214c2b6248a486822d2c5267d1c961a29d0\"...Skipped - release with tag \"v0.5.0\" already exists\nNo artifacts were published. Make sure you have specified correct artifacts filter.\n```\n\nhttps://ci.appveyor.com/project/szabadka/brotli/build/1.0.502/job/sstt93cb5onyte0w#L390\n sorry, I jumped the gun. It is working fine.\n ops, I'm sorry I had you create the 0.5.1 tag... :(\n something might have gone wrong with the 0.5.0 tag. Some of the Windown 32-bit wheels are missing, as if subsequent builds on Appveyor have overwritten the existing Github release, deleting the files uploaded by the previous build.\nSo let's cross fingers with 0.5.1...\n ouch. The upload to 0.5.1 is now working fine from Appveyor, but the version string in the setup.py is still 0.5.0, so the wheels are named like that...\n\nThe solution is deprecate 0.5.1, commit a version string change (0.5.2?), and cut a new tag.\nSorry you have to go through this mess.\n the `BROTLI_VERSION` in `tools/version.h` should match the latest tag version.\n\nThere are tools like `setuptools_scm`, which take care of updating the package version (as well as the one in the header file) based on the latest git tag, when one generates a new source distribution, so that you won't need to remember to manually update the version file, but simply make an annotated tag.\n\nBut maybe that's overkill.\n for the python packages to have the right version string (matching the latest tag) you need to modify the `tools/version.h` file like this:\n\nhttps://github.com/google/brotli/blob/master/tools/version.h#L12\n\n``` diff\n-#define BROTLI_VERSION \"0.5.0\"\n+#define BROTLI_VERSION \"0.5.2\"\n```\n still no luck. :(\nthe 3.4 and 3.5 mac wheels in 0.5.2 release are still using 0.5.0 version\nhttps://github.com/google/brotli/releases/tag/v0.5.2\n actually no! they are just duplicate. The ones with the correct 0.5.2 version are also there.\nCan you please manually delete the 0.5.0 ones, to avoid any confusions?\nThank you very much.\n Thanks! Looks good now \ud83d\udc4d \n  you shouldn't use `pip3`, but activate the relevant python environment before calling the respective `pip` command.\n Sure, I'll do it later today.\n  I'm investigating Brotli for use in Java Android apps. I'm not aware of any project which provides this capability (if you are, I'd like to know), so I would like to build an interceptor for Android's OkHttp that compresses/decompresses using Brotli. Would someone be kind enough to point me to the correct release of the Brotli native library that would work on Android devices?\n\nRelated: https://github.com/square/retrofit/issues/1957\n I had assumed that as Brotli was now a standard, that the library would be complete. If this is not the case, is there somewhere I can read about what's missing, what's planned and look at a the roadmap?\n\nA pure Java implementation would be great, are there any other languages planned as part of 1.0?\n Cool. Do you have any rough (probably very rough) estimates (or guess-timates) of when v1.0.0 may happen? I'm interested in a Java and C# port and would be willing to help with the C# version if required.\n Chiming in to say that I'm also very interested in this and have been tracking this issue for a while. Very excited to see that the Java port is starting to make it into the codebase (e.g., with 5025365d0fe5a5ca874574b952ef53cfa98ca5c1). Is the current Java version in the repo 'safe' to start using externally?\n @eustas: Any update on the Maven artefact being published?\n @eustas I'm also interested in the mvn artifact. Any news? I'm also interested in a java port/jni bindings for brotli  For the new version of the R bindings I am switching to `BrotliDecompressStream` because this is what `bro` is using so I guess this part of the API should work. Two questions:\n- What is the difference with `BrotliDecoderDecompressStream`?\n- The docs state that:\n\n> After each call, `available_in` will be decremented by the amount of input bytes consumed, and the `next_in` pointer will be incremented by that amount.\n\nHowever if I look at my debugging output it seems that the first few iterations `available_in` is not being decremented, even though `total_out` is growing and `next_in` is moving.\n\n``` r\nbrotli_decompress(buf)\navailable_in:   5355157 - available_out:         0 - total_out:    131072\navailable_in:   5355157 - available_out:         0 - total_out:    262144\navailable_in:   5355157 - available_out:         0 - total_out:    524288\navailable_in:   5355157 - available_out:         0 - total_out:   1048576\navailable_in:   5355157 - available_out:         0 - total_out:   2097152\navailable_in:   4670826 - available_out:         0 - total_out:   4194304\navailable_in:   3603155 - available_out:         0 - total_out:   8388608\navailable_in:   2321579 - available_out:         0 - total_out:  16777216\navailable_in:    447663 - available_out:         0 - total_out:  33554432\navailable_in:         0 - available_out:  21996849 - total_out:  45112015\n```\n  This only goes back to VS 12 (2013) because MSVC didn't support log2 until then.\n\nI think I'm done now, unless you want me to do some of the stuff from #374 (pkg-config, install a library, configure-cmake, etc.).\n I added another commit to this which is unrelated to the PR title.  Apparently some versions of CMake will cache the result of the check for log2, so if it fails without linking to libm it would simply skip the test _with_ libm.  Changing the name of the variable for the second test (with libm) works around the issue.\n\nThe issue with Python on AppVeyor seems to have been caused by a change in AppVeyor; builds which previously worked don't anymore.  I'll submit a bug report with them and try to figure out what is going on there\u2026\n It looks like it's a bug in the latest setuptools not correctly enquoting library paths with spaces.\nMaybe you can temporarily try to download an earlier version of setuptools which was known to be workong.\nhttps://github.com/pypa/setuptools/issues/694\n Yes, https://github.com/FeodorFitsner/brotli/blob/master/appveyor.yml#L31 fixes the issue.  I'd just like to figure out if we should bother or just wait for setuptools to tag a new release\u2026\n Let's wait, I guess. They are usually pretty quick.\n Merged https://github.com/pypa/setuptools/pull/723\n hmm.. looks like it's not fixed yet:\nhttps://github.com/pypa/setuptools/issues/694#issuecomment-237873988\n\nI think it's a good idea to pin down a specific version of setuptools, instead of always upgrading to the latest at every appveyor build. We could update setuptools when needed and when we know does not break anything else.\n The latest setuptools v25.1.6 should fix the issue.\nhttps://pypi.python.org/pypi/setuptools/25.1.6\n\n@nemequ can you try to re-run the Appveyor build?\n I can't rebuild the PR without changing the commits; @eustas would need to do that.  However, it works in my repository now (see https://ci.appveyor.com/project/quixdb/brotli/build/1.0.26).\n  See https://travis-ci.org/quixdb/squash/jobs/148061907#L1491\n\nNote that this is coming from types.h, so it happens when compiling code _using_ brotli, not necessarily in brotli itself.  Even if you don't care about `-Wundef` in brotli, IMHO it should be possible for people who just want to use brotli to use whatever warning flags they want.\n\nUntested, but this should do the trick:\n\n``` diff\ndiff --git a/common/types.h b/common/types.h\nindex 4b050af..3508d74 100644\n--- a/common/types.h\n+++ b/common/types.h\n@@ -25,7 +25,7 @@ typedef __int64 int64_t;\n #endif  /* defined(_MSC_VER) && (_MSC_VER < 1600) */\n\n #if (!defined(_MSC_VER) || (_MSC_VER >= 1800)) && \\\n-    (defined(__cplusplus) || __STDC_VERSION__ >= 199901L)\n+    (defined(__cplusplus) || (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L))\n #include <stdbool.h>\n #define BROTLI_BOOL bool\n #define BROTLI_TRUE true\n```\n Closing since #399 fixes this; discussion (if necessary) can take place there.\n  But not working on full html pages.\n\nMy config:\n\n> brotli on;\n> brotli_static on;\n> brotli_min_length 1000;\n> brotli_buffers 32 8k;\n> brotli_comp_level 5;\n> brotli_types text/plain text/css text/xml application/javascript application/x-javascript application/xml application/xml+rss application/ecmascript application/json image/svg+xml;\n  Hello.\n\nDo you think you could add a short overview between other formats? E. g. speed and compression ratio, as comparison? Nothing big, perhaps just one small markdown table or something.\n\nFeel free to close this issue if this suggestion is considered to be unfit to the project, I was just mostly curious since I did not know brotli yet (sounds swiss german by the way, small bread haha). Thanks!\n Have you checked https://github.com/google/brotli/blob/master/docs/brotli-comparison-study-2015-09-22.pdf ?\n IMHO linking to third-party benchmark(s) would be a better idea, since there is less appearance of bias.  I'm partial to the [Squash Compression Benchmark](https://quixdb.github.io/squash-benchmark/) (or, for a more recent version, [Unstable Squash Compression Benchmark](https://quixdb.github.io/squash-benchmark/unstable/)), but I created them so I'm biased.  Others ([listed in the Squash Benchmark FAQ](https://quixdb.github.io/squash-benchmark/#faq-other-benchmarks)) include:\n- [Large Text Compression Benchmark](http://mattmahoney.net/dc/text.html)\n- [Squeeze Chart](http://www.squeezechart.com/)\n- [Maximum Compression](http://www.maximumcompression.com/)\n- [World Compression Challenge](http://heartofcomp.altervista.org/MOC/MOCA.htm)\n  Public headers are now available via:                                         \n\n```\n    #include <brotli/decode.h>\n    #include <brotli/encode.h>\n    #include <brotli/types.h>\n\n    #include <brotli/compressor.h>\n    #include <brotli/streams.h>\n```\n\nThe exposure of \"types.h\" (which is only useful for MSVC builds) is\na bit unfortunate, but this change would be much bigger without it.\n\nMakefile tested with \"make test\", BUILD file tested with ngx_brotli,\nsetup.py tested with \"python setup.py build_ext test\", premake5.lua\nis broken, but it was broken before this change.\n Please note that C++ interface wasn't very well tested, since there are no consumers of it.\n Hey Evgenii,\nshould I rebase this on top of new master? Are the changes proposed in this pull request acceptable?\n  This small change to the Makefile supports building a libbrotli.a archive of the encoding and decoding objects (not including the CLI tool object or running the test suite).  This provides an easy target for linking when brotli code is included in projects that use the encoding and decoding components.  This is only an extension, the previous behavior for other targets remain.\n\nP.S. I like the approach of providing a simple, portable Makefile for building when an autoconfig/configure/make can be avoided.  This simplicity makes incorporation of brotli into small projects (that do not have their own autoconf/etc.) that much easier.  Thanks!\n Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n I signed it!\n CLAs look good, thanks!\n\n<!-- ok -->\n  Is it possible to provide such functions?\nSuch as :\nint64 BrotliCompressionMemUsage(int quality, int lgwin, BrotliEncoderMode mode);\nint64 BrotliDecompressionMemUsage(int quality, int lgwin, BrotliEncoderMode mode);\n\nIn my program, I use multi-threaded compression, by executing multiple compressors on multiple threads.\nHowever I limit the number of simultaneous threads by the number of available memory .\n\nFor example if system has 4 GB of RAM.\nAnd each call to compress function would require 1 GB of memory usage.\nBased on that info I would know that I can create up to 4 threads.\n\nHowever I was unable to find any information about memory usage for compressing and decompressing with Brotli.\n\nThank you\n  :o didn't realize you opened a PR for this.  I signed the CLA for a patch to Gipfeli, so that shouldn't be an issue anymore.\n\nPretty much everything should be working now, the only real exception is TSan, which I don't think is going to happen on Ubuntu 12.04.\n\nThe Travis error above looks transient (it happens sometimes); asking Travis to rebuild the commit should work.\n That's very odd.  The same commit works for me: https://travis-ci.org/nemequ/brotli/jobs/146810092\n Disabled gcc-4.5, everything finally seems to be working.  The failure with ubsan is expected; there is some undefined behavior in brotli (even with `-DBROTLI_BUILD_PORTABLE`).\n\nStill not sure why gcc-4.5 works in my repo but not as a PR, but I guess it's not a big deal.\n I signed it!\n I'm guessing if **I** opened up a PR it would resolve the CLA thing\u2026  would that help?\n Argh, doesn't look like GitHub will let me file a duplicate PR; it just links me to this one.  I guess if you close this one I could probably do it\u2026\n  I recently rewrote Squash's brotli extension for the new API.  IMHO the API is pretty nice, and I love that it's C not C++.  That said, I do have a few ideas for improvements:\n- [x] For funcions which return 1 on success and 0 on failure, as well as other booleans (like the `is_last` argument to `BrotliEncoderWriteMetaBlock`), please use a `bool` (or `_Bool` if you prefer) intsead of an `int`.  Using bool helps make the code more readable and reduce documentation lookups.\n- [x] The decoder puts the state argument at the end, the encoder puts it first.  Please make it consistent.  FWIW, I prefer the instance to be first (and that's definitely more common).\n- [x] I'd really like to see [conformant array parameters](https://www.securecoding.cert.org/confluence/display/c/API05-C.+Use+conformant+array+parameters).  This would require a macro [like the one Squash has](https://github.com/quixdb/squash/blob/f4e67dada2fd68d7f1f89b7640a06a8c9a3378ee/squash/squash.h#L52), but it has the potential to help prevent bugs in software using the API, so I think it would be a good addition.  I see you already put the length first, so the change is pretty trivial.\n- [x] It's a bit odd that the everything in the encoder is called `BrotliEncoder*`, but everything in the decoder is `Brotli*` (e.g., `BrotliState` not `BrotliDecoderState`).  I think it would be better to move everything in the decoder to `BrotliDecoder*`\n- [x] Technically, stuff like `_BROTLI_COMMA` isn't allowed.  C99 (at least, but IIRC C89 too).  Anything which starts with an underscore follewed by an uppercase letter or another underscore.  In [C99](http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf), it's in \u00a7 7.1.3.  I've taken to using an underscore _suffix_ in my code (e.g., `BROTLI_COMMA_`) to indicate something is really supposed to be internal.\n- [ ] CamelCase for function names is fairly unusual in C.  Switching to lowercase_with_underscores would probably be better; CamelCase is usually used for type names (including callbacks like brotli_alloc_func and brotli_free_func).  Obviously there is no real standard, but anecdotally it seems like lowercase_with_underscores is the most common\u2026\n- [ ] Add \"zeroed-memory alloc\" to memory allocator interface; might improve performance.\n- [ ] It would be nice to have 'restrict' on the buffers.  Obviously it would also have to be hidden behind a macro (feel free to steal [the one from Hedley](https://github.com/nemequ/hedley/blob/master/hedley.h#L311))\n- [ ] A lot of parameters can/should be annotated with GCC's [nonnull](https://gcc.gnu.org/onlinedocs/gcc-6.1.0/gcc/Common-Function-Attributes.html#index-g_t_0040code_007bnonnull_007d-function-attribute-3238) attribute (again, [Hedley has a macro](https://github.com/nemequ/hedley/blob/master/hedley.h#L240) you can take).  This is great for static analyzers, and if you build with ubsan you can get runtime warnings, too.  The macro for this has to be variadic, so you _might_ want to hide this behind a check for C99; variadic macros aren't in C89, but all the common compilers have supported them for a while (even MSVC, since VC8 (2005)).\n- [ ] `BrotliEncoderMaxCompressedSize` could/should be annotated with the const attribute (GCC \u2265 2.5) or noalias declspec (MSVC, since VC8).  Again, [Hedley](https://github.com/nemequ/hedley/blob/master/hedley.h#L302).  This one is helpful for optimizing compilers, though honestly I doubt excessive calls to `BrotliEncoderMaxCompressedSize` is a performance bottleneck.\n\nThese are definitely not major issues, I just wanted to bring them up while changing the API is still an option.\n BTW, if you want I'd be happy to put together a PR for these, just tell me which one(s) you'd be okay with.  Or, of course, just close the bug if you're not interested :)\n > Hi. Thanks for an offer, but I'm little bit hesitate, and also it will a little bit easier for me to fix it in internal repository and then publish update to github.\n\nSounds good to me :).  Let me know if you change your mind, though; I don't mind helping with this, especially considering how supportive you guys have been of Squash.\n\n> Ideas look great! I've planned to implement them next week (though it would require lot of courage and will to switch to snake case, I am old Java fan =).\n\nHah :).  FWIW, the CamelCase thing is probably the least important of the ideas I mentioned; as long as you're consistent I don't think it's a big deal.\n Maybe I should create a new issue for this, but a related idea which may be helpful for your is to also have a callback for an allocation function of zeroed memory (i.e., calloc instead of malloc).  The default implementation could just call malloc and memcpy, but calling calloc can be a bit faster since the OS often keeps around pages of pre-zeroed memory.\n\nI'm not sure how much of a performance boost (if any) brotli would see, but I saw a pretty huge improvement in crush when I switched from malloc+memset to calloc\u2026 I think it's a bigger benefit for larger allocations because you don't have the cache hit from moving stuff into the CPU just to zero it.\n Added a few (4) more ideas to the list.  Sorry to make this a bit of a moving target.\n Depends on what you consider a streaming function, but I think you're correct.\n\nIf the size is a pointer, you can do something like\n\n``` c\nBROTLI_BOOL BrotliEncoderFinishStream(\n    BrotliEncoderState* state, size_t* encoded_size, uint8_t encoded_buffer[*encoded_size]);\n```\n\nWhich should work as expected.  The length can even be an expression like `*encoded_size * sizeof(uint64_t)` if you want (you don't in this case, just wanted to point out that it's pretty flexible).\n\nHowever, if you actually want to modify the array pointer itself (like you do for `BrotliEncoderCompressStream`, then you can't use a real array; it would have to be a `uint8_t**`.  Something like\n\n``` c\nBROTLI_BOOL BrotliEncoderCompressStream(\n    BrotliEncoderState* s, BrotliEncoderOperation op,\n    size_t* restroct available_in, const uint8_t (* restrict next_in)[*available_in],\n    size_t* restrict available_out, uint8_t (* restrict next_out)[*available_out],\n    size_t* restrict total_out);\n```\n\nIs tempting, but it would break because an attempt to change the value of `*next_in` or `*next_out` would fail.  So, assuming that's what you mean by the streaming functions, yeah, unfortunately that won't work :(.\n\nBasically, anywhere in brotli you have a `uint8_t**` parameter, I don't think you'll be able to use an array.  The good news is you can use `restrict` there, though\u2026\n\n``` c\nBROTLI_BOOL BrotliEncoderCompressStream(\n    BrotliEncoderState* s, BrotliEncoderOperation op,\n    size_t* restrict available_in, const uint8_t * restrict * restrict next_in,\n    size_t* restrict available_out, uint8_t * restrict * restrict next_out,\n    size_t* restrict total_out);\n```\n\nAdd in the fact that you'll really want to use `BROTLI_ARRAY_PARAM`/`BROTLI_RESTRICT` (or whatever you want to call it) macros, and I think it's pretty clear why so few people bother to properly use conformant array parameters and/or restrict.\n > For funcions which return 1 on success and 0 on failure, as well as other booleans (like the is_last argument to BrotliEncoderWriteMetaBlock), please use a bool (or _Bool if you prefer) intsead of an int. Using bool helps make the code more readable and reduce documentation lookups.\n\nA counter-argument: I don't think the `bool` concept really provides a stable, portable ABI in C.\n\nI was experimenting with the new mod_brotli for the Apache web server, which makes use of the libbrotli shared library. Unfortunately, the module and the library disagreed on the definition of `BROTLI_BOOL`, because the module was compiled using C89 and the library was not. This led to a situation where the library returned \"false\" but the module interpreted that value as \"true\", which broke everything.\n\nIn my opinion, an ABI that changes depending on the C standard in use by the compiler is not going to be portable enough for widespread use. I agree with the idea that a boolean concept is more documentation-friendly than `int`, but the current implementation causes problems. (And I humbly submit that `int` is still the most \"correct\", idiomatic type for booleans in a portable C ABI.)\n These days, even MSVC supports stdbool.h (as of VS 2013).  I'd prefer for Brotli to simply use the system bool everywhere and just require C99 (or at least the subset of it supported by VS 2013).  Being stuck with C89 in 2016 is ridiculous.\n\nC99 is pretty clear about boolean values; see \u00a7 7.16.  `true` is defined as 1, `false` is defined as 0.  Brotli defines `BROTLI_FALSE` as an enum value of 0 and `BROTLI_TRUE` as an enum value of `!BROTLI_FALSE` (which evaluates to 1), so the actual values shouldn't be an issue.  That said, I'd probably change `BROTLI_TRUE` to just be 1 instead of `!BROTLI_FALSE`.\n\nThe `_Bool` type, OTOH, could be a problem.  C99 specifies it as a type large enough to hold 0 or 1 (\u00a7 6.2.5,2), so 1-byte is sufficient and that's what every implementation I'm aware of uses.  However, most compilers use `sizeof(int)` for enums, and Brotli defines `BROTLI_BOOL` as an enum when in C89 mode.  I'm guessing that's why you had a problem.\n\n> I agree with the idea that a boolean concept is more documentation-friendly than int, but the current implementation causes problems.\n\nAgreed, implementing it as an enum is a bad idea.\n\n> (And I humbly submit that int is still the most \"correct\", idiomatic type for booleans in a portable C ABI.)\n\nIf you define \"portable\" as \"C89+\", then you're right.  However, targeting C99 is portable, and `bool` is the idiomatic type for C99, which pretty much every non-toy compiler other than MSVC has supported for a _very_ long time.  Realistically, the only place `_Bool`/stdbool.h isn't going to be supported is people using old versions of MSVC.  Everyone else supports them even in C89 mode.\n\n`sizeof(_Bool)` on Windows is 1, so I would go with something like:\n\n``` c\n#if define(BROTLI_NO_STDBOOL) || (defined(_MSC_VER) && (_MSC_VER < 1800))\n#  if !defined(bool)\n#    define bool unsigned char\n#  endif\n#  if !defined(true)\n#    define true 1\n#  endif\n#  if !defined(false)\n#    define false 0\n#  endif\n#else\n#include <stdbool.h>\n#endif\n```\n\nThen you can get rid of all the `BROTLI_BOOL` cruft.  Virtually every compiler/platform should work as expected.  I'm sure there is some weird compiler somewhere which targets an sbscure DSP or something which won't work, but worst-case scenario people can explicitly define a few preprocesor symbols before including brotli.\n\nOf course, if you're really attached to the `BROTLI_BOOL` idea, it would be easy enough to just `#define BROTLI_BOOL unsigned char` instead of using an enum.  `sizeof(_Bool)` is 1 on Windows and Linux x86_64, and probably most other places, though I haven't checked.\n As someone who'd like to use brotli as a library (which is why I made the libbrotli project that now looks like it will meet its maker soon), for a project that is C89/C90 compatible (curl) I would of course prefer a good old C89 compatible API so that my entire user base can have a chance of using all the brotli fun. But that of course also relies on everything else (at least in the decompressor lib) to be C89 as well, not just the API.\n Agreed. As a library, things should be as simple and as compatible and as PORTABLE as possible. It is not that much of a deal to stick w/ C89/C90 for this particular case, especially when the alternative breaks things horribly.\n As I mentioned, virtually everyone other than VS < 2013 supports `_Bool` (and `stdbool.h`), **even in C89 mode**.  With what I suggested Brotli would still be completely usable in your projects.\n\nSticking to pure C89 hare isn't really about portability, it's about being technically C89 compliant.  In practice the only place you're likely to run into a real portability problem is VS < 2013, and I suggested a solution for that which would work automatically.\n\nThere is a tiny group of people who really need pure C89.  If you're using gcc, clang, msvc >= 12.0, icc, suncc, xlc, or really any other vaguely modern non-toy compiler, _you are not in this group_.  This group consists of people using 20-year-old compilers, or targeting something exotic where only a specific compiler will work and that compiler only supports C89 (may be true for some DSPs or something).  You're more likely to end up on a platform where endianness cannot be determined at compile-time than to have what I proposed be a real portability issue.  However, even for that tiny group of people, what I proposed would only require defining a macro or two.\n\nHowever, since it sounds like @eustas wants to stick with the `BROTLI_BOOL` thing, I'd suggest something like\n\n``` c\n#if !defined(BROTLI_BOOL)\n#  if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L)) || \\\n       (defined(__GNUC__) && (__GNUC__ >= 3)) || \\\n       (defined(_MSC_VER) && (_MSC_VER >= 1800))\n#    include <stdbool.h>\n#    define BROTLI_BOOL bool\n#  else\n#    define BROTLI_BOOL unsigned char\n#  endif\n#endif\n#define BROTLI_TRUE 1\n#define BROTLI_FALSE 0\n```\n\nAlmost every compiler out there pretends to be either GCC or MSVC, and sufficiently recent versions of both are whitelisted as supporting `stdbool.h`, as are compilers in C99+ mode.  Other compilers (mostly old MSVC) will fall back on using `unsigned char`, but for the rare cases where that wouldn't be the correct type people can just define `BROTLI_BOOL` to something which works before including Brotli.\n\nNote that this would be quite easy to adapt to use `bool`, `true`, and `false` instead of creating a separate type for Brotli; you would just have to guard against redefining true and false.  That would give you a much nicer API.\n @nemequ \n\n> If you define \"portable\" as \"C89+\", then you're right.\n\nSure. I'm biased, since most of the C projects I've participated in are explicitly C89-compatible.\n\nI also define \"portable\" as \"capable of having C++ bindings written for it\", and `bool` has (or used to have?) issues there too. Hopefully we've gotten to the point where C++ and C toolchains targeting the same architecture agree on the size of `bool`, but IIRC, it used to be a problem... maybe someone with more recent experience can comment on this?\n\n> Being stuck with C89 in 2016 is ridiculous.\n\nUnless you're serious about being portable to a C89 toolchain subset, yes. ;) I mean, I hate old toolchains just as much as the next guy, but this is the game you play when authoring a C ABI for the masses. (And having a C89-subset ABI doesn't necessarily mean that you have to write your implementation in C89.)\n\n> virtually everyone other than VS < 2013\n\nI'm veering off-topic, but I disagree with your assertion that the users of old MSVC versions are \"a tiny group of people\". MSVC9 and MSVC11 were pretty popular the last time I checked (which, to be fair, was a year ago... YMMV).\n\nAnyway: if you're serious about using the `BROTLI_BOOL` thing, and assuming that you've made a decision only to support architectures where the most popular compilers agree that\n- `bool` is the same size as `unsigned char`, and\n- C `bool` is the same size as C++ `bool`,\n\nthen having the ability to override the definition of `BROTLI_BOOL` should help bail out the remainder.\n @eustas \n\n> Please, could you describe toolchains you've used that caused \"incompatible\" bools.\n\nSure -- I'm currently using GCC 5.4.0 on Ubuntu 16.04 (64-bit). Compile the [libbrotli](https://github.com/bagder/libbrotli) shared library as-is (with a modern C standard). For the client, compile and link against the library with the `-std=c89` flag.\n > Sure. I'm biased, since most of the C projects I've participated in are explicitly C89-compatible.\n\nTechnically brotli already isn't C89-only.  It uses the types from `stdint.h` (i.e., `uint8_t`), except for MSVC < 16 where it defines those types itself, which is almost exactly (only the version of MSVC is different) what I'm suggesting it do for `stdbool.h`.\n\nTo make matters worse, the exact-size types (`(u)intN_t`) technically aren't even required by C99 (see \u00a7 7.18.1.1).  Only the minimum-width and fast minimum-width types (`(u)int_leastN_t` and `(u)int_fastN_t`) are required.  That said, everyone supports them; AFAIK they're really just option to support `CHAR_BIT != 8`, and I doubt Brotli would work if `CHAR_BIT != 8` anyways.\n\n> I also define \"portable\" as \"capable of having C++ bindings written for it\", and bool has (or used to have?) issues there too. Hopefully we've gotten to the point where C++ and C toolchains targeting the same architecture agree on the size of bool, but IIRC, it used to be a problem... maybe someone with more recent experience can comment on this?\n\nI'm not really a C++ person, but IIRC they have a bool type which is (can be or must be, not sure which) implemented with an enum.  I'm not sure whether it is still a problem, but to get around it you can use `_Bool` (which is built-in, doesn't require a header) instead of `bool`.  Maybe it would be safer to define `BROTLI_BOOL` as _Bool instead of bool, in which case you could just skip including `stdbool.h` altogether.\n\n> > Being stuck with C89 in 2016 is ridiculous.\n> \n> Unless you're serious about being portable to a C89 toolchain subset, yes. ;) I mean, I hate old toolchains just as much as the next guy, but this is the game you play when authoring a C ABI for the masses. (And having a C89-subset ABI doesn't necessarily mean that you have to write your implementation in C89.)\n\nI don't care much about being portable to a generic, strictly C89 compiler.  I care about being portable to the toolchains people actually use, even relatively old ones.  C89 is mainly useful as a lowest-common-denominator, and if we want to use features outside C89 we should do so in a portable way.  The tiny areas of Brotli (like booleans) which aren't strictly C89-compliant can still be portable while providing a good API for people who have better compilers.\n\n> ```\n> virtually everyone other than VS < 2013\n> ```\n> \n> I'm veering off-topic, but I disagree with your assertion that the users of old MSVC versions are \"a tiny group of people\". MSVC9 and MSVC11 were pretty popular the last time I checked (which, to be fair, was a year ago... YMMV).\n\nYou're right, I didn't mean to include old MSVC in that \"tiny group\".  It's part of a separate group which can easily be special-cased (and, in every implementation I've suggested, is).  There are four groups\n- C99 compilers and compilers which support _Bool and stdbool.h, _even in C89 mode_.  This includes GCC >= 3, MSVC >= 18.0, and any compiler masquerading as one of them.\n- MSVC < 18 (a.k.a. VS 12 / 2013).\n- Everything else where `sizeof(_Bool) == 1`\n- Everything else.\n\nThe first group can be taken care of by simply using `stdbool.h` or `_Bool`.  Virtually every compiler pretends to be either GCC or MSVC (by defining things like `__GNUC__` and/or `_MSC_VER`).  The major exception is older versions of MSVC\u2026\n\nThe second group is easy to take care of by defining either `BROTLI_BOOL`, `bool`, or `_Bool` to a type compatible with what later versions of MSVC use for `_Bool`.  I don't have a Windows box with VS to test this with, but mingw says `sizeof(_Bool) == 1`, so I think `unsigned char` should work.\n\nWhat's left, the third and fourth groups, is what is extremely tiny.    You're really just left with toy compilers and probably a few special-purpose compilers targeting weird architectures.  TBH I'd be surprised if the rest of Brotli worked here without any effort, but with what I've been suggesting these platforms would still work as the boolean type would just be `#define`d as `unsigned char`.\n\nFinally, you have the group of compilers not pretending to be GCC or MSVC on platforms where booleans use multiple bytes of storage.  If you compile Brotli with the same compiler as your application then the boolean type will be `unsigned char` and you're done.  If, however, Brotli is compiled with a different compiler all you would have to do is define the boolean type to something compatible before including Brotli.\n\nThat covers every platform I can think of, which pretty much checks the \"portability\" box as far as I'm concerned.\n\n---\n\nSo, just in case the C++ issue @jchampio mentioned, how about this:\n\n``` c\n#if !defined(BROTLI_BOOL)\n#  if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L)) || \\\n      (defined(__GNUC__) && (__GNUC__ >= 3)) || \\\n      (defined(_MSC_VER) && (_MSC_VER >= 1800))\n#    define BROTLI_BOOL _Bool\n#  else\n#    define BROTLI_BOOL unsigned char\n#  endif\n#endif\n#define BROTLI_TRUE 1\n#define BROTLI_FALSE 0\n```\n\nAnother option would be to use the build system to determine the value of `sizeof(_Bool)` and write an appropriate type, but that would require running an executable compiled for the target architecture, which would be a problem for cross-compilers.\n Yeah, I'm just speaking myself as someone who is a consumer of the library (or, should I say, would be a consumer) for a popular web server which, for lowest-common-denominator reasons, has stayed w/ C89 semantics. So far, all testing has shown that the bool item is the only issue that hits us. Libraries, in general, should be agnostic as related to compiler differences between that used to build and the library and that used to build the application, or should have an ABI which resolves those issues in a portable fashion.\n Preface to my commentary: All I truly \"need\" from an upstream library is a stable API for me and a stable ABI for end users to link against. Choosing your own cost/benefit tradeoffs on how to implement that is, in the end, up to you; I'm just some guy on the Internet with an opinion, and I'll likely disappear after this issue. :smile: That said, I'll respond to @nemequ's last bit and then let you all duke out how you want to proceed...\n\n> I'm not really a C++ person, but IIRC they have a bool type which is (can be or must be, not sure which) implemented with an enum.\n\n`bool` is a built-in type in C++; there's no enum \"implementation\" that I'm aware of.\n\n> to get around it you can use _Bool (which is built-in, doesn't require a header)\n\nThere is no `_Bool` type in C++. And including stdbool.h in C++ is not even guaranteed to provide a `_Bool` macro (it does in GCC, but as I understand it, that's an extension).\n\nI want to reiterate that\n1. It's not just size you necessarily have to worry about. You want to make sure that the assembled code that deals with both types are equivalent, or you can bet that there will eventually be some bizarre corner case because of the mismatch.\n2. I don't know if `bool`-incompatibility between the two languages is a problem anymore. Modern compiler ABIs may have defined the two equivalently for the platforms you're targeting; I don't know.\n\n> Another option would be to use the build system to determine the value of sizeof(_Bool) and write an appropriate type, but that would require running an executable\n\nIf you're seriously considering this, I just have to know: what is so hate-worthy in the `int`-as-boolean idiom? :smile:\n\nAnyway. I think I've said my piece and then some. As long as downstream doesn't break in weird corner cases, I'm happy.\n Any user of the API would still read the documentation for the function in which you of course explain what it can return. If it only ever returns 1 and 0, say so. It doesn't matter that the type is 32bit. That's not a problem to users.\n Sorry, forgot to reply to this for a while\u2026\n\n> bool is a built-in type in C++; there's no enum \"implementation\" that I'm aware of.\n\nI poked around the C++ spec a bit, and you're right.  Based on what I read in the C++11 spec, as well as some posts I found around the internet, it seems like the way to be portable between C and C++ here is to use stdbool.h.  Unlike C, C++ also doesn't specify (at least as far as I can tell) what the actual values for true and false are, so technically we really need to use `true` and `false`, though I would be very surprised if there is an implementation where they aren't 1 and 0 respectively.\n\nSo, I think the safest solution would be\n\n``` c\n#if !defined(BROTLI_BOOL)\n#  if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L)) || \\\n      (defined(__GNUC__) && (__GNUC__ >= 3)) || \\\n      (defined(_MSC_VER) && (_MSC_VER >= 1800)) || \\\n      (defined(__cplusplus))\n#    if !defined(__cplusplus)\n#      include <stdbool.h>\n#    endif\n#    define BROTLI_BOOL bool\n#    define BROTLI_TRUE true\n#    define BROTLI_FALSE false\n#  else\n#    define BROTLI_BOOL unsigned char\n#    define BROTLI_TRUE 1\n#    define BROTLI_FALSE 0\n#  endif\n#endif\n```\n\n> If you're seriously considering this, I just have to know: what is so hate-worthy in the int-as-boolean idiom? :smile:\n\nThere isn't anything inherently wrong with it (other than the wasted space, but who cares about that?).  The real problem is that it's not clear what it is; every time I see an int return value I have to look up the documentation to see what the possible values are.  It's not just humans, either; static analyzers and optimizing compilers have no way of knowing what the possible return values are.  Enums would solve this, but they conflict with the standard booleans from C99+.\n\nHowever, all that is moot now.  Unless I'm missing something, 1.0 has been released, which means the API and ABI are stable.  Changing `BROTLI_BOOL` to an integer now would be a break.  Brotli doesn't specify a C standard for compilation, so C99 or C11 are used (depending on the version of the compiler used), which means existing compiles _of brotli_ should all use stdbool.  Basically, what @jchampio was seeing when compiling in C89 mode would happen to _everyone_ since the ABI would suddenly be returning `sizeof(int)` bytes instead of `sizeof(bool)`.\n stdbool.h is C99, not C89.\n Why bother with the ifdef maze? Why not make it `#define BROTLI_BOOL unsigned char` for all? (and frankly, it is probably even faster for most situations to make that at a plain `int` instead). And why the weirdo true and false defines? In C code we've used TRUE (1) and FALSE (0) for decades so they are familiar and known. Introducing other names for them are only making your code harder to read and weird.\n > stdbool.h is C99, not C89.\n\nWhich has come up several times in this issue.  What's your point?\n The point is that C89 compatibility _is_ the point, as mentioned quite a few times in the above comments.\n > Why bother with the ifdef maze? Why not make it #define BROTLI_BOOL unsigned char for all?\n- That would be incompatible with C99+ and C++ (not sure when they added bool, but I'm pretty sure it's in C++98\u2026).\n- Static analyzers and optimizing compilers can't make certain assumptions, so they'll be slightly less useful.\n\nThat said, it's a better solution than defining it as `int` or something else with a size other than `sizeof(bool)`.\n\n> And why the weirdo true and false defines? In C code we've used TRUE (1) and FALSE (0) for decades so they are familiar and known. Introducing other names for them are only making your code harder to read and weird.\n\nThis one I mostly agree with, but unfortunately the API is set already.  Removing them would break it.\n\nThe only real reason I can think of is to avoid conflicts with other libraries who try to define `true` and `false` (`TRUE` and `FALSE` are not the standard names, `true` and `false` are) themselves.  As you said, it's pretty common for people to define those macros, so if they include brotli first and don't guard their own defines with ifdefs things go bad quickly.  Admittedly it's a pretty minor concern; like I said, I mostly agree with you on this one.\n\n> The point is that C89 compatibility is the point, as mentioned quite a few times in the above comments.\n\nNo, the point is portability and, to a lesser extent, compatibility with other code.  C89 isn't really required for the former, and it's counterproductive to the latter.\n\nEven if portability depended on C89, the code I've posted works with pure C89 so you shouldn't have a problem.  It just also whitelists a few compilers known to support using stdbool.h (_even in C89 mode_).  If a compiler isn't known to support that it falls back on using `unsigned char` (which is available in C89), which is actually ABI compatible with what C99+ uses (as opposed to int, which isn't) with every compiler I've tried.  And, if that's not enough (because maybe `sizeof(bool) != sizeof(unsigned char)`) you can even define `BROTLI_BOOL` to whatever you want before including the file for those weird corner case platforms.\n\nAs for compatibility, these days most people are using C99+ or C++ (remember, both clang and gcc default to C11 now, and before that it was C99 for a long time).  For those people it's useful for brotli's boolean type to be compatible with their standard boolean type.  In other words, compatibility actually decreases if you just define `BROTLI_BOOL` to `int`.\n\nFinally, as I've mentioned, changing the return type in C99+ mode is a backwards-incompatible ABI break.  Maybe the brotli devs are comfortable with that, but I certainly wouldn't be if it were my project.\n > most people are using C99\n\nI like it how you just dismiss our claims that we value and treasure C89 compatibility so I won't waste more time here.\n I'm not dismissing your claims at all.  As I've repeatedly said, what I proposed is C89 compatible.  A pure C89 compiler with zero support for anything else would simply use `unsigned char`.\n\nWhat I am dismissing is the idea that being C89 compatible means you can't use an extension on a few compilers known to support it which allows the API to work better for most people without harming C89 compatibility in any way.  If you take away all the ifdefs, on a pure C89 compiler you end up with\n\n``` c\n#define BROTLI_BOOL unsigned char\n#define BROTLI_TRUE 1\n#define BROTLI_FALSE 0\n```\n\nHow is that not C89 compatible?\n  I'm trying to get Brotli integrated into the backup program I'm developing, HashBackup.  Previously I had been testing with a version downloaded May 18th, and it worked fine on OSX and Linux.\n\nI downloaded the latest version today for testing.  Instead of compressing, it is apparently expanding.  Any clues?\n\n```\n$ py\nPython 2.7.9 (default, Jun 22 2016, 12:43:12) \n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import brotli\n>>> x=1024*' '\n>>> z=brotli.compress(x)\n>>> len(z)\n11520\n>>> x2=brotli.decompress(z)\n>>> x==x2\nTrue\n>>> \n```\n\nHere's a test with bro.py:\n\n```\n[jim@mb python]$ py bro.py -i x.bro -o x.cc -d\n[jim@mb python]$ ls -l\ntotal 120\n-rw-r--r--@ 1 jim  staff    200 Jun 21 07:41 README.md\n-rwxr-xr-x@ 1 jim  staff   5440 Jun 21 07:41 bro.py\n-rw-r--r--@ 1 jim  staff   9048 Jun 21 07:41 brotlimodule.cc\ndrwxr-xr-x  6 jim  staff    204 Jun 21 07:41 tests\n-rw-r--r--  1 jim  staff  21550 Jun 22 13:12 x.bro\n-rw-r--r--  1 jim  staff   9048 Jun 22 13:12 x.cc\n[jim@mb python]$ cmp x.cc brotlimodule.cc\n```\n\nHere's a buffer test:\n\n```\n>>> x='jim' + 100*' ' + 'my'\n>>> z=brotli.compress(x)\n>>> len(z)\n10371\n>>> z\n'\\x1bh\\x00\\x00\\x8c\\x94n\\xe6\\xa2lS\\x03\\xa9\\xb4\\xbc\\x92\\x04\\xb4@\\xf6\\x89ree\\x00_BrotliBuildHistogramsWithContext\\x00_BrotliEstimateBitCostsForLiterals\n(a bunch more garbage)\n\\x00_BrotliEncoderInputBlockSize\\x00_BrotliEncoderWriteData\\x00enc/././metablock.h\\x00_BrotliEncoderCompressStream\\x00_BrotliEncoderCompress\\x00_BrotliEncoder'\n>>> z=z[:200]\n>>> brotli.decompress(z)\n'jim                                                                                                    my'\n>>> len(z)\n200\n>>> z=z[:100]\n>>> brotli.decompress(z)\n'jim                                                                                                    my'\n>>> z=z[:50]\n>>> brotli.decompress(z)\n'jim                                                                                                    my'\n>>> z\n'\\x1bh\\x00\\x00\\x8c\\x94n\\xe6\\xa2lS\\x03\\xa9\\xb4\\xbc\\x92\\x04\\xb4@\\xf6\\x89ree\\x00_BrotliBuildHistogramsWit'\n>>> brotli.decompress(z[:25])\n'jim                                                                                                    my'\n>>> brotli.decompress(z[:13])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nbrotli.error: BrotliDecompress failed\n>>> brotli.decompress(z[:20])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nbrotli.error: BrotliDecompress failed\n>>> brotli.decompress(z[:21])\n'jim                                                                                                    my'\n>>> \n```\n\nSo it appears to be compressing into a temp buffer but not setting the length right.  Probably a bug in python/brotlimodule.cc\n Found it: need to subtract available_out:\n\n```\n    ret = PyBytes_FromStringAndSize((char*)output, output_length-available_out);\n```\n\nWhile you're in there, you might want to bracket your compression, decompression, and string copies with Py_BEGIN_ALLOW_THREADS and Py_END_ALLOW_THREADS.\n  the problem is `pip wheel` command is trying to create a default \"build\" directory in the root of the repo, but there's a file called BUILD. You can try to pass the `-b`, or `--build <dir>` option to `pip wheel` command to use a different directory where to build into.\n oh I see that.. hm that's weird. Try adding a `-v` verbose flag maybe.\n\nOr also you can try calling the `bdist_wheel` command directly instead of through pip:\n\n```\npython setup.py bdist_wheel -b bin -d dist\n```\n I was able to replicate the issue locally on my VM.\nIt looks like a bug in either `setuptools` or `wheel` or `pip` (or all of them!).\nWith this command line I was able to make it work:\n\n```\npython setup.py build -b bin bdist_wheel -d dist\n```\n\nIt looks like the bdist_wheel command in turns calls the build command which somehow always defaults to create a `build` directory, despite we pass `-b bin` to bdist_wheel...\n yeah, the setup.cfg trick should also fix it :+1: \n  Since [Squash](https://quixdb.github.io/squash/) bundles Brotli in our tree, we basically maintain a separate build system for Brotli.  I'm trying to reduce the amount of duplication between Squash and the libraries it bundles, so I'd like to be able to reuse Brotli's build system, which would mean making it compatible with our own (CMake-based) build-system.  Obviously such a system wouldn't be specific to Squash; any project which uses CMake and wants to bundle Brotli could benefit from it.  With such a system, bundling Brotli would be as simple as something like:\n\n``` cmake\nset(BROTLI_BUNDLE_MODE ON)\nadd_subdirectory(brotli)\n\ntarget_link_libraries(mycode brotli)\n```\n\nBrotli would then be built as part of the parent project, including unit tests (which could also automatically integrate with ctest, so running `make test` would run brotli's tests as well) and documentation (if applicable).\n\nThe rest of this is largely copied from quixdb/squash#202, edited slightly to be specific to brotli.\n\nFrom Squash's perspective, as well as anyone else who wants to bundle the library, what we need is a way to build a static library (or two, if you want to separate the encoder and decoder), disable any installation, and control whether or not to have CTest run unit tests.  Finally, it would be great if we could simply reference a target and have it automatically set any necessary flags (CMake \u2265 2.8.11 can do this, you just need to set the proper `INTERFACE_*` target properties).\n\nIf you would like to see an example of a system which works the way we want, take a look at [BriefLZ's](https://github.com/jibsen/brieflz/blob/master/CMakeLists.txt).  I'm willing to create a similar system for Brotli, though obviously it would need to be a bit more extensive since Brotli is a larger project.  I don't want to fork anything, so if you aren't interested we'll just stick with the current system for that plugin.  Obviously not everyone is familiar with CMake so part of this is that I would help with maintenance as needed.  However, before I proceed I need a few questions answered:\n\nFirst, are you willing to provide a CMake-based build system in your tree?  If so, are you okay with making it flexible enough to meet our needs as described above?  If no to either of those, you can go ahead and close this issue and we'll keep interacting with Brotli just as we do today.  Otherwise, there are a few ways to put this together:\n1. Place a single CMakeLists.txt file in the top level of your project, which contains all the logic for your entire project.  If you're familiar with autotools, this is like a non-recursive build system.\n2. Place a CMakeLists.txt in the top level directory, as well as in each subdirectory.  The top-level file will basically include each subdirectory's file.  If you're familiar with autotools, it's a bit like a traditional recursive build system.\n3. Put the CMake build system in a subdirectory somewhere (such as `contrib/cmake`).\n\nNote that it may be necessary to put supplementary modules in a single directory somewhere.  I usually use a `cmake` subdirectory alongside the highest level CMakeLists.txt, wherever that is.\n\nOptions (1) and (2) basically treat CMake as a first-class citizen, whereas (3) makes it pretty clear that CMake is an option, but may not really be the recommended way to build your project.  Option (1) vs. (2) is mostly just about style; (1) puts your entire build system in one place, whereas (2) keeps the logic closer to the code.  I prefer (2), but it's up to you.\n\nWould you want CMake to replace your current system, or would you prefer for the two to exist in parallel?\n\nAlso, there are some optional features which I need to know if you would like to support (assuming you don't already, obviously we can't really remove features):\n- Do you want to install a library and the header files?\n  - If so, do you want to generate and install a [pkg-config](https://en.wikipedia.org/wiki/Pkg-config) file?  pkg-config is the preferred way to convey information about how other people should link to your library for pretty much everyone except CMake.\n- If you have unit tests, would you like to install them?  It's not very common, but https://wiki.gnome.org/Initiatives/GnomeGoals/InstalledTests lists some reasons you may want to.\n- Would you like to provide an autotools-style configure script as an optional wrapper for your build system (see [configure-cmake](https://github.com/nemequ/configure-cmake/) for details)\n\nNote that, as mentioned above, installation would need to be optional (projects integrating your project into their own tree probably don't want to install your CLI).\n\nFinally, if custom CMake modules are necessary (see https://github.com/quixdb/squash/tree/master/cmake for some examples), would you prefer to copy the modules into your tree, or use a git submodule?\n > I consider having multiple build systems on board, as long as they do not interfere and reside in root and build/ directories. Currently planned build systems are CMake, Premake, and Bazel:\n\nFWIW, I would avoid this if I were you.  It's easy to let the build systems get out of sync.  You're already forgetting about the build system for the python module.\n\nAnyways, I put together a quick CMake system at https://github.com/nemequ/brotli.  It would probably be a good idea to test it in Travis and/or AppVeyor, but unfortunately the python stuff is in the way.  I'll try to put together a quick helper script when I have time.  I think everything else should work, including running the tests (without depending on sh, so it should work on Windows) and installing the bro executable.\n Building a static .a library would be helpful for integrating Brotli into projects.  I've been developing a backup program, HashBackup, and everything is loaded statically into one self-contained executable.\n\nBrotli is a great compression program, but is complex compared to zstd.  I have to build on old platforms to have upward compatiblity, so that's:\n- Snow Leopard (OSX 10.6.8) on Mac\n- Centos 5 for Linux\n- FreeBSD 7\n\nThese seem ancient, but I have enterprise-y customers still using them.  Building zstd into Python/HashBackup was easy.  Adding Brotli was not so easy:\n- it doesn't compile on FreeBSD 7 - I guess gcc is too old\n- earlier versions worked on OSX, but yesterday's version expands instead of compressing (separate issue)\n- the version I downloaded yesterday doesn't build on OSX 10.6.8 with make\n\nHere's the make output with OSX 10.6.8:\n\n[jim@mb brotli-master]$ make\n==== Building brotli_common (release) ====\nCreating obj/Release/brotli_common\ndictionary.c\nLinking brotli_common\nld: warning: option -s is obsolete and being ignored\n==== Building brotli_dec (release) ====\nCreating obj/Release/brotli_dec\nbit_reader.c\ndecode.c\nhuffman.c\nstate.c\nLinking brotli_dec\nld: warning: option -s is obsolete and being ignored\nld: unknown option: --start-group\ncollect2: ld returned 1 exit status\nmake[2]: **\\* [../../bin/libbrotli_dec.so] Error 1\nmake[1]: **\\* [brotli_dec] Error 2\nmake: **\\* [all] Error 2\n That looks like an issue with premake.  Maybe because the files were generated ahead of time instead of on the system you're (trying to) compile on?\n\nAnyways, the cmake support in my repo builds 3 static libraries, just like the premake version.  I've also tested it by embedding the repo into Squash's brotli plugin, so if you're using cmake for HashBackup you should be able to just add_subdirectory(brotli) and use the brotli libraries as-needed.\n @eustas I managed to get travis working on my repo: https://travis-ci.org/nemequ/brotli/builds/140581300\n\nThat brings up a few more questions\u2026 for Squash we test [a bunch of different compilers on Travis](https://travis-ci.org/quixdb/squash).  Do you want me to do something similar for Brotli?  If so, which compiler(s) and versions?  For ICC you would need a license, but everything else should be feasible\u2026\n\nAlso, you never said whether you wanted a [configure-cmake](https://github.com/nemequ/configure-cmake/) wrapper for this.\n\nEventually it would probably be a good idea to generate a pkg-config file and maybe install the tests, but that should probably wait until the API stabilizes and brotli is ready to install a shared library.\n > Also I see, it is possible to build/test with ASAN / MSAN. That is a super-cool option.\n\nYes, and I'll do that, but it's worth noting that this is most useful with a more comprehensive test suite\u2026 as it is, you're not really throwing anything at brotli that it doesn't expect\u2026 if you want, I can look into porting at least some of the tests over from Squash (I'll open up a separate issue for that, though).\n\n> So if you add more variants, we will be very grateful.\n\nSure, I'll try to take care of it later today.\n\n> (Going to investigate ICC license question later).\n\nhttps://software.intel.com/en-us/articles/open-source-contributor-faq\n\nI don't think Google would meet the criteria for a free license, though being Google I guess it's likely you already own a license which could be used\u2026\n\n> configure-cmake seems to cover all possible use-cases.\n\nHeh, it really doesn't, but thank you for saying so ;).  I like to think it comes close.\n\n> Perhaps, a more light-weight version of this wrapper would fit our tiny simple project more =)\n\nPerhaps, but I don't see why you would want to reinvent the wheel here.  configure-cmake already exists and is known to work, the license is permissive, it doesn't create any hard dependencies (it's just shell scripting, not even bash), it's a single file (well, two if you count the configuration), and you happen to know the jerk who wrote it so if there are issues you have someone to talk to / blame.\n Okay, I managed to get _most_ of the stuff done for Travis.  See https://travis-ci.org/nemequ/brotli/builds/140999421\n\nI went with container builds instead of full VMs, which is faster and easier on Travis.  Unfortunately, it means the clang 3.5-3.8 builds can't be enabled yet because Travis hasn't re-enabled the LLVM apt repositories (they were down for a while, so Travis disabled them, but they're back up now).\n\nIt also messes things up for the sanitizers, which are apparently broken with the compilers packages from the ubuntu-toolchain-r repository.  It may be possible to fix this when the LLVM repositories are available by switching the sanitizer builds from gcc to clang.\n\nI did not include any builds using premake, though I guess it wouldn't be hard to add.  TBH, I just have no idea how to use premake.\n Virtually everything should be working now (see https://travis-ci.org/nemequ/brotli/builds/146808543).  The only real hole is TSan, which I don't think is going to happen on 12.04\u2026 between an ancient version of CMake and updated compilers which expect newer binutils, there are just too many problems :(.  I'm sure I could get it working on 14.04, but if you want to use Travis' container infrastructure 12.04 is required, and given the number of different builds I think the container infrastructure is definitely a good idea.\n\nRemaining related issues:\n- Not sure if you're willing to use an unmodified configure-cmake, but if so I'm happy to add a patch to add it.\n- I'm willing to add a pkg-config file and install a shared library, but I'm not sure you want to do that until the API is stable.  Unless you want to version everything (i.e., libbrotli0.5, brotli-0.5.pc, /usr/include/brotli/0.5/*, etc.), which I'd be happy to throw together.\n- If you want I could probably port most of Squash's tests over to Brotli (especially if you're okay with using [\u00b5nit](https://nemequ.github.io/munit/) like Squash does).\n The original issue is resolved, so I'm going to close this.  I'm still willing to put together PRs for the other stuff mentioned in [my previous comment](https://github.com/google/brotli/issues/374#issuecomment-234728813); just let me know if you want me to.\n  A user of the brotli R library has [reported](https://github.com/jeroenooms/brotli/issues/1) strange behavior of `BrotliDecompressedSize` failing for certain combinations of data and compression size.\n\nI put a few example files [here](https://gist.github.com/jeroenooms/9fe37c9f04ad7f054dc2901a0bc5edaa). I compressed the file `uncompressed` with quality 3, 4, and 5 and default settings otherwise `mode = \"generic\"`, `log_win = 22`, `log_block = 0`.\n\n``` sh\ngit clone https://gist.github.com/jeroenooms/9fe37c9f04ad7f054dc2901a0bc5edaa\n```\n\nIf I try to decompress the file `compressed3` via the C interface, the call to `BrotliDecompressedSize` fails. It does not happen for `compressed4` and `compressed5`. Also it does not seem to happen for the `bro` command line utility.\n So how is the client supposed to know how much memory to allocate for `BrotliDecompressBuffer` if we cannot rely on `BrotliDecompressedSize` ?\n Perhaps this is mostly a documentation bug then. Without fully understanding technical details of brotli, it seemed the basic API decompressing a buffer was to allocate memory based on `BrotliDecompressedSize` and then invoke `BrotliDecompressBuffer`. \n\nI maintain [brotli bindings for the R language](https://github.com/jeroenooms/brotli/blob/master/src/wrapper.cc). So I suppose I better switch to the `BrotliDecompressStream` API to decompress arbitrary brotli data? \n\nCan I still use `BrotliCompressBuffer` for encoding a buffer or does this API have similar limitations?\n Have you pushed the updates for `BrotliDecompressedSize` yet?\n  windef.h (included by windows.h) defines min+max macros, so to avoid compilation issues on windows whenever include brotli headers after including windows headers (which can be very tricky to avoid/workaround in some projects), its best to either:\n- convert lines like std::min(a,b) to (std::min)(a,b), or\n- keep such code out of the headers that get pulled in when including encode.h / decode.h\n  In my scene, I will not  finish compressing when I  run my program. so\uff0cBrotliCompressor object is only one. And on the client, I call the  BrotliStateInit(&s) just  for once.\nSo, like this:\nwhile(1)\n{\n     I read 500 bytes to compress------->send to the client--->client decompress the data----> \n}\nafter client decompress  the data, the decompressed data is not 500, sometimes,it may be 200, sometimes,it may be 800, How can I resolve  the problem?\n When you compress block you need to set \"force_flush\" parameter to \"true\".\nMoreover, after block is flushed, you need to append empty metadata block (WriteMetadata) to make sure that output is byte-aligned.\n\nSorry for confusing API. In two weeks API will be updated to make things like that more straightforward.\n\nBest regards,\n  Eugene.\n @eustas  Do you mean that I need call the Api like this below: \nWriteMetaBlock(0, NULL, true, encoded_size, encoded_buffer);\n\nif I set the parameter  of is_last  true,\u3000means this is the last frame, but I hava no last frame In my system, If I call this, how about next data,data is not finished!\n No, just something like this:\n\n```\nwhile (true) {\n...\n c->CopyInputToRingBuffer(input_size, input);\n...\n c->WriteBrotliData(/* is last */ false, /* force flush */ true, &output_size, output);\n...\n c->WriteMetaBlock(/* input size */ 0, /* input */ nullptr, /* is last */ false, &output_size, output);\n...\n}\n```\n @eustas \nHi eustas:\nI  write the code like yours:\n\n while (true) {\n      CopyOneBlockToRingBuffer(in, &compressor, &in_bytes, &final_block)\n      out_bytes = 0;\n    compressor.WriteBrotliData(false,true,&out_bytes, &output)\n    printf(\"bbbbbbbbbbbbbbbbbbbb:%d\\n\",out_bytes);\n    compressor.WriteMetaBlock( 0,NULL, false, &out_bytes, output);\n    printf(\"ttttttttttttttttttt:%d\\n\",out_bytes);\n  }\n\nThe test result is this:\n\nbbbbbbbbbbbbbbbbbbbb:16126\nttttttttttttttttttt:0\nbbbbbbbbbbbbbbbbbbbb:13349\nttttttttttttttttttt:0\nbbbbbbbbbbbbbbbbbbbb:12419\nttttttttttttttttttt:0\n\nHow to fix it????\nBest Regars:\n @eustas \n\nThanks your support, It seems to work!!!\n  ``` Python\n# Python\nimport brotli\n```\n\nIs there a reason it makes these in `$HOME`? I've yet to notice a `pip` installed package do this.\n\n``` Bash\n$ ls -R .python-eggs/\n.python-eggs/:\nBrotli-0.3.0-py2.7-linux-x86_64.egg-tmp\n\n.python-eggs/Brotli-0.3.0-py2.7-linux-x86_64.egg-tmp:\nbrotli.so\n```\n http://stackoverflow.com/questions/2192323/what-is-the-python-egg-cache-python-egg-cache\n\nI'd recommend you don't do \n    python setup.py install\nwhen installing from the source directory, as that triggers setuptools to create an .egg. Instead, use\n    pip install .\nThis will not create eggs, but will install the package unzipped in the site-packages.\n Thanks for the tip. This should be in the documentation. Ideally there would be a `pip` package.\n Well, there are \"pip packages\": that is, wheels, available from the GitHub releases page of this repository.\nI guess you meant that these wheels should be also available from PyPI, so one can just do pip install brotli. Of course, I'm with you on that.\n It didn't occur to me to try. That's good enough IMO, but should really be documented.\n\n``` Bash\npip install git+https://github.com/google/brotli/\n```\n @anthrotype: could you change README.md and python/README.md accordingly to use\r\n`pip install .` instead of `python setup.py install`?\r\nAnd in addition for people who don't want to clone the repository first\r\n`pip install git+https://github.com/google/brotli/`  In the header fast_log.h, the following constant is used:\n\n`static const double kLog2Inv = 1.4426950408889634f;`\n\nPlease, consider to replace this constant with exact formula not to loose accuracy:\n\n`static const double kLog2Inv = 1.0f / log(2);`\n Constant already has too high prescision.\nWhen either of kLog2Inv values is printed out the result is 1.4426950_2162933349609_\n perhaps removing the f from the end would change something on another compiler?\n  When attempting to cross-compile with mingw, I see a lot of \"error: visibility attribute not supported in this configuration; ignored [-Werror=attributes]\" messages (normally they're just warnings, but I use -Werror for CI builds).  See https://travis-ci.org/quixdb/squash/jobs/132697469#L1320 for an example.  I can reproduce on Fedora with Squash with something like `ming64-cmake . && make -j`.\n\nIf you want, you can adapt https://github.com/quixdb/squash/blob/26aa037b618c1a37d984099b8dd5a3e04d3058c3/squash/squash.h#L115\n Looks like it's still an issue: https://travis-ci.org/quixdb/squash/jobs/136512277\n\nThat's with 09543b5fc5637f1cda7a54dbf2b17f892006891b (you can verify that at https://travis-ci.org/quixdb/squash/jobs/136512277#L198).\n\nOn a somewhat related note (an easy way to switch compilers), if you are interested I'd be willing to put together a CMake-based build system for you; it could be useful for Squash, too, since we could share the build system\u2026\n Thanks, it works :)\n\nhttps://travis-ci.org/quixdb/squash/builds/137077283\n  Method log2 is not available on Android before API 18, so fast_log.h is not compilable for older Android.\n\nThe suggestion is to update the row\n\n```\n#if defined(_MSC_VER) && _MSC_VER <= 1700\n  // Visual Studio 2012 does not have the log2() function defined, so we use\n  // log() and a multiplication instead.\n```\n\nto\n\n```\n#if (defined(__ANDROID_API__) && __ANDROID_API__ <= 17) || (defined(_MSC_VER) && _MSC_VER <= 1700)\n  // Old Android API 17 and old Visual Studio 2012 do not have the log2() function defined, so we use\n  // log() and a multiplication instead.\n```\n  ### Abstract\n\nI appreciate that the brotli library offers a class for stream based compression.\nIn order to use this class as intended, I have some questions, which the sparse header file didn't answer.\n\nI consider myself as a novice C-Programmer and I'm just following the concept of\n[don't make me think](https://www.sensible.com/dmmt.html) - applied to API design ;-)\n### General usage\n\nJust from looking at the public method's signatures, I have some expectations.\nI would use the BrotliCompression class like this (pseudo-code).\n\n```\nc = new BrotliCompressor(params);\npartialBuffer = new buffer(c->input_block_size())    // use max partial buffer size for stream\nfor partialBuffer in hugeInputBuffer {\n    c->CopyInputToRingBuffer(partialBuffer)\n    c->WriteBrotliData(isLast=false, doFlush=false, size(partialBuffer), &outputBuffer)\n}\nc->WriteBrotliData(isLast=true, doFlush=true, 0, &outputBuffer)  // final flush\n```\n\nI wouldn't expect doing anything more, to write a valid brotli stream, which I can send over wire or save to disk.\n##### Questions\n- Why are the following methods public, and when to use them?\n  - WriteMetaBlock()\n  - WriteMetadata()\n  - FinishStream\n  - BrotliSetCustomDictionary()\n  - WriteStreamHeader()\n- I didn't use them and the compressor works fine (no errors)\n  - IMHO, If they are mandatory, the compressor should [fail fast](https://en.wikipedia.org/wiki/Fail-fast)\n### Is_Last vs. Do_Flush vs. FinishStream()\n\nI know, when it comes to file IO, what flush() means. But with these three options I'm confused.\n##### Questions\n- When do I use what?\n- What are the consequences?\n- What does Is_Last do?\n  - What is the consequence of not doing it?\n  - Is this mandatory or just a hint?\n- When there is a FinishStream(),\n  - Why isn't there a StartStream()? (it's all about wording, e.g. have consistent and symmetric naming)\n\nI'm looking forward to a fruitful discussion :-)\n\nThanks in advance\nMartin\n Current interface will be deprecated soon.\nWe will be grateful if you leave some comments on the future interface:\n\n```\nstatic const int kBrotliMaxWindowBits = 24;\nstatic const int kBrotliMinWindowBits = 10;\nstatic const int kBrotliMinInputBlockBits = 16;\nstatic const int kBrotliMaxInputBlockBits = 24;\n\ntypedef enum BrotliEncoderMode {\n  /* Default compression mode. The compressor does not know anything in\n     advance about the properties of the input. */\n  BROTLI_MODE_GENERIC = 0,\n  /* Compression mode for UTF-8 format text input. */\n  BROTLI_MODE_TEXT = 1,\n  /* Compression mode used in WOFF 2.0. */\n  BROTLI_MODE_FONT = 2\n} BrotliEncoderMode;\n\ntypedef enum BrotliEncoderOperation {\n  BROTLI_OPERATION_PROCESS = 0,\n  /* Request output stream to flush. Performed when input stream is depleted\n     and there is enough space in output stream. */\n  BROTLI_OPERATION_FLUSH = 1,\n  /* Request output stream to finish. Performed when input stream is depleted\n     and there is enough space in output stream. */\n  BROTLI_OPERATION_FINISH = 2\n} BrotliEncoderOperation;\n\ntypedef struct BrotliEncoderParams {\n  BrotliEncoderMode mode;\n  /* Controls the compression-speed vs compression-density tradeoffs. The higher\n     the |quality|, the slower the compression. Range is 0 to 11. */\n  int quality;\n  /* Base 2 logarithm of the sliding window size. Range is 10 to 24. */\n  int lgwin;\n  /* Base 2 logarithm of the maximum input block size. Range is 16 to 24.\n     If set to 0, the value will be set based on the quality. */\n  int lgblock;\n} BrotliEncoderParams;\n\nvoid BrotliEncoderParamsSetDefault(BrotliEncoderParams* params);\n\n/* A state, can not be reused for multiple brotli streams. */\ntypedef struct BrotliEncoderStateStruct BrotliEncoderState;\n\n/* Fills the new state with a dictionary for LZ77, warming up the ringbuffer,\n   e.g. for custom static dictionaries for data formats.\n   Not to be confused with the built-in transformable dictionary of Brotli.\n   To decode, use BrotliSetCustomDictionary() of the decoder with the same\n   dictionary. */\nvoid BrotliEncoderSetCustomDictionary(BrotliEncoderState* state, size_t size,\n                                      const uint8_t* dict);\n\n/* Compresses the data in |input_buffer| into |encoded_buffer|, and sets\n   |*encoded_size| to the compressed length.\n   Returns 0 if there was an error and 1 otherwise. */\nint BrotliEncoderCompressBuffer(const BrotliEncoderParams* params,\n                                size_t input_size, const uint8_t* input_buffer,\n                                size_t* encoded_size, uint8_t* encoded_buffer);\n\n/* Progressively compress input stream and push produced bytes to output stream.\n   Workflow consists of 3 tasks:\n    * (optional) copy input data to internal buffer\n    * actually compress data and (optionally) store it to internal buffer\n    * (optional) copy compressed bytes from internal buffer to output stream\n   Whenever all 3 tasks can't move forward anymore, or error occurs, this\n   method returns.\n\n   |available_in| and |next_in| represent input stream; when X bytes of input\n   are consumed, X is subtracted from |available_in| and added to |next_in|.\n   |available_out| and |next_out| represent output stream; when Y bytes are\n   pushed to output, Y is subtracted from |available_out| and added to\n   |next_out|. |total_out| is assigned to the total amount of bytes pushed by\n   the instance of encoder to output.\n\n   |op| is used to perform flush or finish the stream.\n\n   Flushing the stream means forcing encoding of all input passed to encoder and\n   completing the current output block, so it could be fully decoded by stream\n   decoder. To perform flush |op| must be set to BROTLI_OPERATION_FLUSH. Under\n   some circumstances (e.g. lack of output stream capacity) this operation would\n   require several calls to BrotliEncoderCompressStream. The method must be\n   called again until both input stream is depleted and encoder has no more\n   output (see BrotliEncoderHasMoreOutput) after the method is called.\n\n   Finishing the stream means encoding of all input passed to encoder and\n   adding specific \"final\" marks, so stream decoder could determine that stream\n   is complete. To perform finish |op| must be set to BROTLI_OPERATION_FINISH.\n   Under some circumstances (e.g. lack of output stream capacity) this operation\n   would require several calls to BrotliEncoderCompressStream. The method must\n   be called again until both input stream is depleted and encoder has no more\n   output (see BrotliEncoderHasMoreOutput) after the method is called.\n\n   WARNING: when flushing and finishing, |op| should not change until operation\n   is complete; input stream should not be refilled as well.\n\n   Returns 0 if there was an error and 1 otherwise.\n*/\nint BrotliEncoderCompressStream(BrotliEncoderState* s,\n                                BrotliEncoderOperation op, size_t* available_in,\n                                const uint8_t** next_in, size_t* available_out,\n                                uint8_t** next_out, size_t* total_out);\n\n/* Check if encoder is in \"finished\" state, i.e. no more input is acceptable and\n   no more output will be produced.\n   Works only with BrotliEncoderCompressStream workflow.\n   Returns 1 if stream is finished and 0 otherwise. */\nint BrotliEncoderIsFinished(BrotliEncoderState* s);\n\n/* Check if encoder has more output bytes in internal buffer.\n   Works only with BrotliEncoderCompressStream workflow.\n   Returns 1 if has more output (in internal buffer) and 0 otherwise. */\nint BrotliEncoderHasMoreOutput(BrotliEncoderState* s);\n```\n Hi Eugene,\n\nthank you for this outlook.\n\nThese are my thoughts/feedback:\n- stream encoderno externalizes it's state (BrotliEncoderState)\n  - sadly is no more a class\n  - but consistent with decoder now\n  - consistency I prefer more than a state I need to hold\n- docs of BrotliEncoderCompressStream: ...Workflow consists of 3 tasks...\n  - this is not clear to me: internal or external workflow\n  - I suggest to revise the wording to: ... internally workflow consists of 3 tasks...\n- prefixing constants with 'k' is old school\n  - I know, this follows Google's C++ guide, nevertheless I think this is awkward\n- documentation in general is more clear\n  - e.g. the breadcrumb/hint to custom dictionary from decoder is very helpful.\n- One thing I miss: How would I initiate a new/empty BrotliEncoderState?\n About the comments, what do you think about switching to\n[Doxygen](http://www.stack.nl/~dimitri/doxygen/index.html)?\n\nAs a benefit for users, you could then automatically generate docs and e.g. upload them to\nhttps://readthedocs.org/.\n\nWhat do you think?\n In the current v0.5.2 release, there is still a confusing declaration between\n- bool FinishStream(...);\n- bool WriteBrotliData(const bool is_last, ...);\n\n@eustas would you please give me a hint, when to use what?\n  The brotli code currently does not compile with Visual Studio 2012, because the code assumes that the `log2` function is supported by VIsual Studio 2012 and newer, which is not true.\n\nThis PR fixes the preprocessor check, so the workaround code is used with Visual Studio 2012 as well.\n Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n I've signed  the CLA.\n We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n\n<!-- need_author_cla -->\n No worries, it just was my first time I had to deal with the CLA, and unfortunately the commit had the wrong mail address. I've done a new merge request (which you already merged), so all is fine :)\n  When decoding quickfox_repeated.compressed\nThe local variable `index` can start off zero, which will result in an access to s.mtf[-1]\nhttps://github.com/google/brotli/blob/master/dec/decode.c#L881\n\nSince the previous variable in the struct is a 32 bit integer mtf_upper_bound, and usually little endian < 2^24, this generally results in a zero access.\n\nI believe this could exhibit itself as an issue on big endian systems and could be undefined behavior nevertheless. I think it would be more intuitive to restructure the code to avoid out of bounds access.\n  I am using BrotliDecompressBufferStreaming which does not provide a way to determine required size for output buffer. For large outputs, I am receiving BROTLI_RESULT_NEEDS_MORE_OUTPUT and the only solution I could work so far is to blindly increase the size of the output buffer and retry.\n\nPossible ways to address these shortcomings.\n1. when BROTLI_RESULT_NEEDS_MORE_OUTPUT is returned, available_in would contain the size of the required buffer.\n2. Even better solution, that would avoid memory fragmentation, is to allow the caller placing output into chained buffers. I.e. available_in could return the size of the input  buffer processed so far. In this case, one could create new buffer in a loop until available_in does not drop to 0. \n I generally encode the output size in a header on my branch here\nhttps://github.com/danielrh/brotli/tree/header\n\nit's also good to have a magic number and the commit ID of the binary that encoded it\n  Local variable shadowing makes code quite confusing in most cases.\n\nI'm not sure if the new variable names are correct in all those cases,\nso feel free to rename them.\n  While there, add -Wmissing-prototypes and -Wmissing-declarations\nto shared.mk in order to catch similar errors in the future.\n  For one particular file, I am seeing 41x slower compression speed versus the average for my data set, but only on quality 10/11. This file is a 57MB XML file that has the same small section repeated over and over. It compresses down to 13KB, but takes 72 minutes to process. If I reduce the window to 16 bits, it completes in 45 minutes, and at quality 9 with the default window, it compresses in 1.7s. Decompression takes .125s.\n\nFor my uses, I will be editing the file to not be so problematic, but there is something pathological about this case that seems to deserve some attention.\n\nHere is a [repo](https://github.com/phlknght/brotliBadXml) containing the problem file, compressed with Brotli.\n\nHere is the raw timing data:\n\n```\n$ time ./bro.exe --input /cygdrive/d/brotli/testFiles/bad.xml --output /cygdrive/d/brotli/testFiles/bad.xml.bro -f -q 9\n\nreal    0m1.700s\nuser    0m1.653s\nsys     0m0.046s\n\n$ time ./bro.exe --input /cygdrive/d/brotli/testFiles/bad.xml --output /cygdrive/d/brotli/testFiles/bad.xml.bro -f -q 10 -w 16\n\nreal    44m53.220s\nuser    44m50.720s\nsys     0m2.386s\n\n$ time ./bro.exe --input /cygdrive/d/brotli/testFiles/bad.xml --output /cygdrive/d/brotli/testFiles/bad.xml.bro -f -q 10\n\nreal    71m55.931s\nuser    71m51.150s\nsys     0m3.525s\n\n$ time ./bro.exe --input /cygdrive/d/brotli/testFiles/bad.xml.bro --output /cygdrive/d/brotli/testFiles/bad.xml.unbro -f -d\n\nreal    0m0.125s\nuser    0m0.061s\nsys     0m0.062s\n```\n\nI did some quick profiling on the first few seconds within Visual Studio 2015, and here are the results:\n![brotliperf](https://cloud.githubusercontent.com/assets/17853859/13858480/81e83232-ec44-11e5-8d27-e29471cd34c1.png)\n\nDrilling down:\n![brotliperf1](https://cloud.githubusercontent.com/assets/17853859/13858482/84e1bdfa-ec44-11e5-99f3-b56aa39519ce.png)\n\nAnd further down:\n![brotliperf2](https://cloud.githubusercontent.com/assets/17853859/13858487/87fcda6a-ec44-11e5-8445-ac68e8e4f258.png)\n  Using BrotliCompressWithCustomDictionary to compress certain files then decompressing after using BrotliSetCustomDictionary followed by BrotliDecompressStream results in output that doesn't match the original file. However, most files survive the round trip intact.\n\nHere is my compress code which is lightly modified from bro.cc, since it is possible that I am doing something wrong:\n\n```\nvoid Compress(FILE* fin, FILE* fout, FILE* dict, const string& output_path, int window, int quality)\n{\n    brotli::BrotliParams params;\n    params.lgwin = window;\n    params.quality = quality;\n    try {\n        brotli::BrotliFileIn in(fin, 1 << 16);\n        brotli::BrotliFileOut out(fout);\n\n        uint8_t* dictBuf = NULL;\n        if (dict != NULL)\n        {\n            dictBuf = new uint8_t[DICTIONARY_SIZE];\n            size_t dictSize = fread(dictBuf, 1, DICTIONARY_SIZE, dict);\n            if (!BrotliCompressWithCustomDictionary(dictSize, dictBuf, params, &in, &out)) {\n                fprintf(stderr, \"compression failed\\n\");\n                _unlink(output_path.c_str());\n                exit(1);\n            }\n        }\n        else if (!BrotliCompress(params, &in, &out)) {\n            fprintf(stderr, \"compression failed\\n\");\n            _unlink(output_path.c_str());\n            exit(1);\n        }\n    } catch (std::bad_alloc&) {\n        fprintf(stderr, \"not enough memory\\n\");\n        _unlink(output_path.c_str());\n        exit(1);\n    }\n}\n```\n\nAnd here is my decompress function:\n\n```\nvoid Decompress(FILE* fin, FILE* fout, FILE* dict) {\n    uint8_t* input = new uint8_t[kFileBufferSize];\n    uint8_t* output = new uint8_t[kFileBufferSize];\n    size_t total_out;\n    size_t available_in;\n    const uint8_t* next_in;\n    size_t available_out = kFileBufferSize;\n    uint8_t* next_out = output;\n    BrotliResult result = BROTLI_RESULT_NEEDS_MORE_INPUT;\n    BrotliState s;\n    BrotliStateInit(&s);\n\n    uint8_t* dictBuf = NULL;\n    if (dict != NULL)\n    {\n        dictBuf = new uint8_t[DICTIONARY_SIZE];\n        size_t dictSize = fread(dictBuf, 1, DICTIONARY_SIZE, dict);\n        BrotliSetCustomDictionary(dictSize, dictBuf, &s);\n    }\n    while (1) {\n        if (result == BROTLI_RESULT_NEEDS_MORE_INPUT) {\n            if (feof(fin)) {\n                break;\n            }\n            available_in = fread(input, 1, kFileBufferSize, fin);\n            next_in = input;\n            if (ferror(fin)) {\n                break;\n            }\n        } else if (result == BROTLI_RESULT_NEEDS_MORE_OUTPUT) {\n            fwrite(output, 1, kFileBufferSize, fout);\n            if (ferror(fout)) {\n                break;\n            }\n            available_out = kFileBufferSize;\n            next_out = output;\n        } else {\n            break; /* Error or success. */\n        }\n        result = BrotliDecompressStream(&available_in, &next_in,\n            &available_out, &next_out, &total_out, &s);\n    }\n    if (next_out != output) {\n        fwrite(output, 1, next_out - output, fout);\n    }\n    BrotliStateCleanup(&s);\n    delete[] input;\n    delete[] output;\n    delete[] dictBuf;\n    if ((result == BROTLI_RESULT_NEEDS_MORE_OUTPUT) || ferror(fout)) {\n        fprintf(stderr, \"failed to write output\\n\");\n        exit(1);\n    } else if (result != BROTLI_RESULT_SUCCESS) { /* Error or needs more input. */\n        fprintf(stderr, \"corrupt input\\n\");\n        exit(1);\n    }\n}\n```\n\nI created a repo with my [custom dictionary](https://github.com/phlknght/CustomDictionary), dictator.out, which I generated with Cloudflare's dictator.go script and then appended 7 bytes to the end because of the LOAD64 padding, along with broken.bin and works.bin. Broken.bin doesn't survive the round trip intact, and works.bin does.\n\nOn the positive side, I am getting a nice boost in compression ratio using the custom dictionary. It went from .336 to .285, though I can't completely trust that figure until the round trip test works for all files.\n This [commit](https://github.com/phlknght/brotli/commit/ff8680c8588478283eca5f66d56ac5d39ecc4fc1) has the same changes built directly into bro.cc. Probably easier to pull this locally to try it out. It also shows the same behavior.\n Thanks! I went ahead and created the actual test case using your same framework in this [commit](https://github.com/phlknght/brotli/commit/772903e324f333b22ae1d3ea90e78f26e9228abd).\n Thanks for the quick response.\n I pulled 510131d1db, and the custom dictionary round trip seems to be working properly now. Thanks!\n  Hey,\n\nI created the sub project libbrotli (https://github.com/bagder/libbrotli) a while ago to help build and install a _library_ for brotli encoding/decoding, using only code from this repository. libbrotli is only a meta-project with mostly autotools to build, install and package a \"library\" for brotli since this original brotli home does not provide that. It only uses compression/decompression source code from the brotli tree.\n\nThis concept seems to resonate with a decent amount of users who appreciate being able to get a library (or two actually) out of a build and install process for use in various projects.\n\nI would prefer if this functionality was provided by the brotli project itself and I'll offer to merge/translate it over to a pull-request or something if you'll agree this is interesting. I'd prefer to remove myself as a middle man here.\n I'd like to add my voice to support this idea. As the author of the Python wrapper library [brotlipy](https://pypi.python.org/pypi/brotlipy), I have had to adopt the changes made by @bagder in order to extract the portions of the code that are relevant to Python library usage. This is problematic, because it forces me to make transformations on the code that make it incompatible with any brotli library installed from elsewhere, ensuring that I have to keep track of changes made in this repository rather than dynamically link against a binary library provided by the OS itself.\n I'd also like to express support for this idea.\n\nThe [brotli nginx module](https://github.com/google/ngx_brotli) currently depends on @badger's libbrotli because it can't use this.\n\nIf we want to see Brotli adoption pick up on the web, we need to get the web server plugins packaged on various Linux distros. I'm personally very eager to get nginx + Brotli ready on Gentoo, but I'd strongly prefer to have the library and the encoder tools in the same git tree and on the same release cycle.\n I'd also like to express support for a separate library. I've worked on WOFF2 support in Gecko and the WebKit GTK port and it would be more convenient to link to a system library instead of having duplicating code in the repos that we have to build & keep in sync.\n Please go ahead with transforming libbrotli to a pull request that merges libbrotli into brotli.\n With the new CMake build system it's now easy to create such brotli libraries. FYI I've opened #421.\n @fred-wang but that doesn't mean that @bagder's  repo is no longer required, right? Built brotli with `-DBUILD_SHARED_LIBS=1` but nginx's `./configure` couldn't find the lib. Am i doing something wrong?\n\nMaintaining a [docker image for nginx with brotli](https://hub.docker.com/r/fholzer/nginx-brotli/) and was hoping i could finally build using only official google repos...\n @fholzer You installed/copied/linked the libs (*.so on Linux) into a well known libs directory (e.g. /usr/local/libs/) and executed ldconf thereafter !?\n BTW, the above mentioned brotli nginx module looks for libbrotlienc while cmake here creates libbrotli_enc.\n @rockdaboot hi, yes, though i found the issue, which is that the header files won't be copied to `$PREFIX/include` when running `make install`. Is this expected behavior?\n\nAs a workaround you can either copy the files to a well known include directory, or use `--with-cc-opt=\"-I /path/to/brotli/source/include\"` as a configure option for nginx.\n and yes, that is in addition to the fact that the naming (w/ underscore) is incorrect\n > hi, yes, though i found the issue, which is that the header files won't be copied to $PREFIX/include when running make install. Is this expected behavior?\n\nYou right I only considered the libraries, but I guess the header should be copied to include/ too. I'll try making a new pull request later to add them to the files to install.\n\nAs for the name of libraries (with underscore), I just kept the one that were used in the cmake by the brotli author.\n @fholzer Can you please try with https://github.com/google/brotli/pull/437 ?\n Sorry, should've created a PR myself, I guess. I'm using https://github.com/fholzer/brotli/tree/installHeaders and https://github.com/fholzer/ngx_brotli/tree/fixBrotliLinking at the moment, and that works fine. One is for installing the header, the other one adds underscores to the nginx module's `config` file so it finds the library. Not sure if this is the \"wanted\" solution, but if so, I can create PRs for both.\n @fholzer OK, I think installHeaders is essentially the same as mine (except that I also install headers on Windows, not sure what should be done on that platform). For fixBrotliLinking, I don't know what name is best but I guess it is up to the maintainer of the brotli project to decide...\n > For fixBrotliLinking, I don't know what name is best but I guess it is up to the maintainer of the brotli project to decide..\n\nRight, that's the main reason i didn't submit it yet.\n\nRegarding the headers on windows I wasn't sure myself, and I needed it for Linux only. Will post an update once I got the chance to test this on windows.\n > Regarding the headers on windows I wasn't sure myself, and I needed it for Linux only. Will post an update once I got the chance to test this on windows.\n\nSo my recollection is that the only thing needed is to have the libraries in the same directory as the executable, otherwise they are not found. I don't think there is a standard locations for libraries or headers on Windows, so I guess this does not really matter.  There are some UNIX-like systems on Windows (e.g. MSYS2) that may have different requirements, but maintainers can write patches if they want to. Anyway, it seems nice to have the public headers installed too.\n @eustas So I guess you replied on the pull request about the WIN32 case. Can you please indicate whether you want to preserve the underscore in the library names? Thanks!\n The pull request to install the headers has been merged. Are the library names with underscore fine for everybody? Is there anything else needed? Or can we now close this issue as well as the https://github.com/google/brotli/pull/332 pull request?\n\nI think it would also be nice to have a brotli release with the cmake library changes, so that we can start using the release as a reference for package maintainers & users (see for example the duplicate woff2 pull requests in https://github.com/google/woff2/pull/63 and https://github.com/google/woff2/pull/61).\n For the sake of consistency with the google / ngx_brotli, the underscores should not be present...\n > For the sake of consistency with the google / ngx_brotli, the underscores should not be present...\n\nngx_brotli relied on the unofficial librotli so I guess it should be updated to match whatever convention the maintainers of brotli want. Anyway, I opened https://github.com/google/brotli/pull/439\n @eustas thanks for merging my pull requests.\n\nSo now that the library names match google/ngx_brotli, is there anything else needed here?\n Shared libraries and proper SONAME versioning?\n We generate them in the libbrotli repo, although using autotools, but the same approach could be used.\n @bagder \n\n> Share libraries and proper SONAME versioning?\n\nYes, shared libraries can now be generated. I don't know if that's what you want but the version used in the one in common/version.h and if you follow the cmake instruction in the README, you get the following libraries and soft links:\nlibbrotlicommon.so ->libbrotlicommon.so.1.0.0\nlibbrotlidec.so -> libbrotlidec.so.1.0.0\nlibbrotlienc.so -> libbrotlienc.so.1.0.0\n Oh, shared libraries are _optional_. I didn't expect that, sorry. \n > Oh, shared libraries are optional. I didn't expect that, sorry.\n\nYes, I tried to follow CMake's usual approach i.e. to rely on the BUILD_SHARED_LIBS flag (off by default). I guess it is fine to have these shared libraries optional.\n We live in a shared library world these days. Most library build systems these days build shared by default and that's what most users use (compare even with other compression libraries). I think the brotli libs should build shared by default too.\n @bagder OK, that makes sense to me too.\n\n@eustas I don't know what is best but https://cmake.org/cmake/help/v3.0/variable/BUILD_SHARED_LIBS.html mentions using the OPTION cmake command. \n i.e. https://cmake.org/cmake/help/v3.0/command/option.html\n Yes, AFAIK with cmake you're expected to use this option if you want shared libs.\n Those docs says we can/should use an option. There's nothing there saying it should default to non-shared or that static is preferred. You could easily just switch the default to say shared by default unless you turn it off.\n > Those docs says we can/should use an option. There's nothing there saying it should default to non-shared or that static is preferred. You could easily just switch the default to say shared by default unless you turn it off.\n\nI don't know if that remark was directed to me but just to clarify I was replying to https://github.com/google/brotli/issues/326#issuecomment-254208935 and just suggesting to use the OPTION command instead (but of course making it on by default as otherwise that does not change the current behavior). I'll try to submit a pull request to do that.\n @eustas Regarding pc files, it seems we could use the configure_file command to generate them, see for example https://github.com/mysql/mysql-proxy/commit/6d108a4f8cc72b07ad046cb9a76448b056deb48d or https://github.com/madler/zlib/commit/ca6e7a0d552e3b54c0833658409e34f9de3bead6.\n > @eustas Regarding pc files, it seems we could use the configure_file command to generate them, see for example mysql/mysql-proxy@6d108a4 or madler/zlib@ca6e7a0.\n\nGenerating a pkg-config file from CMake using `configure_file` is problematic in a non-obvious way.  I ended up writing a CMake module for Squash to do it, and explained why I didn't just use `configure_file` directly; see [GenPkgConfig.cmake:35](https://github.com/quixdb/squash/blob/5af24aae817a3863371bebbeee30e0b3c69253f5/cmake/GenPkgConfig.cmake#L35)  It's a bit messy, but you can steal the module if you want.\n\nAs for versioning, now that shared libraries are possible the version information should be added to the target.  There is [an example in Squash](https://github.com/quixdb/squash/blob/e96595428755ef2c4a96afd57b213c9a1ed29fd6/squash/CMakeLists.txt#L55).  Note that soversion isn't quite the same as version, though if brotli adopts compatible rules for versioning they could be.  There is a good description of the issue in the autobook; [\u00a711.4: Library Versioning](https://www.sourceware.org/autobook/autobook/autobook_61.html)\n @nemequ That seems more complicated than the configure_file way and IIUC this would only be beneficial for Windows. Do you have any plan to clean this module up and submit it to the cmake maintainers? I would personally be more comfortable to rely on an official cmake module than to have to copy and maintain one in brotli... In any case, the configure_file way seems a reasonable and simple option, even if it's only for the short term.\n > @nemequ That seems more complicated than the configure_file way and IIUC this would only be beneficial for Windows.\n\nI'm not 100% on the \"only\" part (IIRC `--dont-define-prefix` and `--prefix-variable` are only available on Windows, but I could be wrong), but Windows is definitely the major problem.\n\n> Do you have any plan to clean this module up\n\nMaybe.  IIRC I didn't put a great deal of thought into the API, I just wanted a quick way to resolve the problem.  At some point I (or someone else) should probably review it, but I don't remember any glaring problems.\n\n> and submit it to the cmake maintainers?\n\nNo.\n\nThey can grab it if they want (I'd even be willing to relicense it if necessary), and if someone else wants to submit it that's fine, but AFAICT the CMake people are entirely disinterested in anything to do with pkg-config, and I don't feel like banging my head against that particular wall.\n\n> I would personally be more comfortable to rely on an official cmake module than to have to copy and maintain one in brotli...\n\nI don't really understand that, but okay.  I have fewer reservations about relying on in-tree code than a module distributed by someone else which is likely to change depending on what version happens to be installed.  Furthermore, a local copy means there is no need to bump the cmake dependency to get support for it, and any bugs can be fixed immediately instead of bumping the dependency again.  IIRC when I put together Brotli's CMake stuff it worked all the way back to 2.8.6 (which is the version shipped with Solaris 11).  A lot of CI providers (including Travis and Drone.io) use Ubuntu 12.04 which only has CMake 2.8.7, so supporting older versions of CMake is important.\n\n> In any case, the configure_file way seems a reasonable and simple option, even if it's only for the short term.\n\nUsing the module is a simple option, too; writing it wasn't, but that's already done.  It may not be pretty but AFAIK it works perfectly and IMHO the benefit of shipping a correct pkg-config file vastly outweighs any concerns about copying the module, but since Brotli isn't my project that's not my decision to make.  Note that it would also be possible to copy some of the contents of the file into Brotli's CMakeLists.txt to avoid polluting the source tree.\n @nemequ \n\n> but AFAICT the CMake people are entirely disinterested in anything to do with pkg-config\n> \n> I don't really understand that, but okay. I have fewer reservations about relying on in-tree code than a module distributed by someone else which is likely to change depending on what version happens to be installed.\n\nWell, my goal for the present GitHub issue is to have packages for Brotli/woff2 shared libraries that can be used by several programs, instead of having multiple copies of Brotli/woff2 bundled in their source code (in my case WebKit, Gecko and maybe fontforge). Achieving this by copying a cmake module seems a bit contradictory to that principle: IMHO the cmake module should really be upstreamed so that it can be used by all the projects that want pkg-config support without having to copy it everywhere. Now, if cmake devs don't care that's a bit problematic...\n\n> Using the module is a simple option, too; writing it wasn't, but that's already done. It may not be pretty but AFAIK it works perfectly and IMHO the benefit of shipping a correct pkg-config file vastly outweighs any concerns about copying the module, but since Brotli isn't my project that's not my decision to make. Note that it would also be possible to copy some of the contents of the file into Brotli's CMakeLists.txt to avoid polluting the source tree.\n\nNote that Brotli is not my project either so I don't decide either. As I said my main goal is to have packages for shared libraries in order to get rid of multiple copies in projects I work on. I don't really feel like submitting a cmake module I did not wrote, that I can not test (the windows part I mean) and whose author indicates it needs some clean up and review. However, if you want to open a PR and if the windows stuff is very important for your then please do so :-) Otherwise, I think I'll just try the configure_file way when I have time...\n > Achieving this by copying a cmake module seems a bit contradictory to that principle\n\nIt's not really related; you don't have to copy the module into projects which use brotli, it's just something for brotli's build system so it can output a correct pkg-config file.  Besides, even if it was included in CMake's standard modules tomorrow, it would be many years before brotli could really take advantage of it; cmake 2.8.6 is just over 5 years old, and we're still stuck with it if we want to support Solaris.  cmake 2.8.7 is slightly under 5 years old (by about 2 months), and we're still stuck with it for Ubuntu 12.04 and, by extension, Travis, Drone.io, etc.\n\nAnyways, I'll try to throw together a PR for all this stuff by next week.  I need to check a few of the changes which have been made to the CMake support anyways, since I think they'll break Squash when I pull them in.\n > It's not really related; you don't have to copy the module into projects which use brotli, it's just something for brotli's build system so it can output a correct pkg-config file.\n\nIndeed, it's worse than just \"projects which use brotli\": What you are suggesting is that any cmake project that generates pkg-config files (BTW, I plan to do the same work for woff2...) should not use a simple configure_file cmake command but copy your custom cmake module or at least the logic it contains. I'm just stating the obvious rule that if some pattern appears in several projects it should be shared as much as possible rather than duplicated in each place. IMHO, if generating pkg-config files is something important for many cmake projects, then a cmake command or module should be provided by the cmake developers.\n\n> Besides, even if it was included in CMake's standard modules tomorrow, it would be many years before brotli could really take advantage of it\n\nTrue, but I'm not sure it's a strong reason against trying it. If I continue the parallel with libbrotli, it will take time before the next version of brotli is released and before shared libraries are packaged in the various distros so that they can really be used by the projects that need brotli. But that does not prevent me from trying ;-)\n\n> Anyways, I'll try to throw together a PR for all this stuff by next week. I need to check a few of the changes which have been made to the CMake support anyways, since I think they'll break Squash when I pull them in.\n\nThank you!\n Ah, okay I misunderstood your point.  Looking at the issue globally instead of just what Brotli needs right now you're right, it would be good to get support added to CMake eventually.  I'll try to take a look at the module in the near future, clean it up if need be, and offer it up to the CMake people, but I'm not very confident about them accepting it.\n\n@eustas, do you have an opinion on having the module in a separate file vs. merging it into Brotli's CMakeLists.txt?  I don't really care.\n I put together some patches for this over the weekend (https://github.com/nemequ/brotli).  I want to do a bit more testing before I submit a PR, but in the meantime: comments welcome.\n Okay, I rebased my patches and did some more testing, AFAICT everything works as expected.  PR filed as #464.\n\nI believe that, once merged, this issue should be resolved.  Am I missing anything?\n Great, thank you @nemequ !\nCan we close #332 too now?\n > Can we close #332 too now?\n\n_Maybe_.  I'll respond there with details.\n For people interested in having separate pc files, I opened a follow issue #473   I have written a simple test (https://gist.github.com/mshneer/a9b442539917842bc0ef) that breaks HTML into chunks, then compresses, then decompressed. Somehow, there is a difference between chunks that come in and chunks that [come out](https://phabricator.fb.com/P56188426). My understanding that calling _WriteBrotliData(... ,                                    **/\\* force_flush */ true,** ...)_ should not have this effect.\n\nI was also testing against 0.3.0 release.\n\nAny ideas how to cause the compressor to not buffer things like this?\n Thanks for filing this issue.\ncc/ @jyrkialakuijala @eustas \n  Two issues Solaris 10 with Solaris Studio 12.3:\n- missing `basic_string` see: http://www.oracle.com/technetwork/server-storage/solaris/cmp-stlport-libcstd-142559.html\n- missing `__restrict`, see https://lists.gnu.org/archive/html/bug-autoconf/2009-01/msg00060.html\n\nFull build log below.\n\n```\n/opt/SunProd/studio12u3/solarisstudio12.3/bin/cc -xc99 -m64 -I/usr/lib/64/R/include -DNDEBUG     -DBROTLI_BUILD_PORTABLE -include config.h -KPIC  -xlibmieee  -c dec/bit_reader.c -o dec/bit_reader.o\n/opt/SunProd/studio12u3/solarisstudio12.3/bin/cc -xc99 -m64 -I/usr/lib/64/R/include -DNDEBUG     -DBROTLI_BUILD_PORTABLE -include config.h -KPIC  -xlibmieee  -c dec/decode.c -o dec/decode.o\n\"dec/decode.c\", line 1251: warning: statement not reached\n/opt/SunProd/studio12u3/solarisstudio12.3/bin/cc -xc99 -m64 -I/usr/lib/64/R/include -DNDEBUG     -DBROTLI_BUILD_PORTABLE -include config.h -KPIC  -xlibmieee  -c dec/dictionary.c -o dec/dictionary.o\n/opt/SunProd/studio12u3/solarisstudio12.3/bin/cc -xc99 -m64 -I/usr/lib/64/R/include -DNDEBUG     -DBROTLI_BUILD_PORTABLE -include config.h -KPIC  -xlibmieee  -c dec/huffman.c -o dec/huffman.o\n/opt/SunProd/studio12u3/solarisstudio12.3/bin/cc -xc99 -m64 -I/usr/lib/64/R/include -DNDEBUG     -DBROTLI_BUILD_PORTABLE -include config.h -KPIC  -xlibmieee  -c dec/state.c -o dec/state.o\nar rcs libdec.a dec/bit_reader.o dec/decode.o dec/dictionary.o dec/huffman.o dec/state.o\n/opt/SunProd/studio12u3/solarisstudio12.3/bin/CC -m64 -I/usr/lib/64/R/include -DNDEBUG      -KPIC  -g  -c enc/backward_references.cc -o enc/backward_references.o\n\"enc/./././transform.h\", line 203: Error: Could not find a match for std::string::basic_string(const unsigned char*, const unsigned char*) needed in brotli::TransformWord(brotli::WordTransformType, const unsigned char*, unsigned long).\n\"enc/./././transform.h\", line 211: Error: Could not find a match for std::string::basic_string(const unsigned char*, const unsigned char*) needed in brotli::TransformWord(brotli::WordTransformType, const unsigned char*, unsigned long).\n\"enc/./././transform.h\", line 214: Error: Could not find a match for std::string::basic_string(const unsigned char*, const unsigned char*) needed in brotli::TransformWord(brotli::WordTransformType, const unsigned char*, unsigned long).\n\"enc/././hash.h\", line 750: Error: \")\" expected instead of \"data\".\n\"enc/././hash.h\", line 755: Error: ) is not defined.\n\"enc/././hash.h\", line 706: Error: The function \"StoreAndFindMatches\" must have a prototype.\n\"enc/././hash.h\", line 733: Error: The function \"StoreAndFindMatches\" must have a prototype.\n\"enc/././hash.h\", line 179: Error: ) is not defined.\n\"enc/././hash.h\", line 868:     Where: While specializing \"brotli::HashLongestMatchQuickly<brotli::kBucketBits, brotli::kBucketSweep, brotli::kUseDictionary>\".\n\"enc/././hash.h\", line 868:     Where: Specialized in non-template code.\n\"enc/././hash.h\", line 392: Error: ) is not defined.\n\"enc/././hash.h\", line 871:     Where: While specializing \"brotli::HashLongestMatch<brotli::kBucketBits, brotli::kBlockBits, brotli::kNumLastDistancesToCheck>\".\n\"enc/././hash.h\", line 871:     Where: Specialized in non-template code.\n\"enc/././hash.h\", line 170: Error: \")\" expected instead of \"ring_buffer\".\n\"enc/././hash.h\", line 882:     Where: While specializing \"brotli::HashLongestMatchQuickly<16, 1, 1>\".\n\"enc/././hash.h\", line 882:     Where: Specialized in non-template code.\n\"enc/././hash.h\", line 179: Error: ) is not defined.\n\"enc/././hash.h\", line 882:     Where: While specializing \"brotli::HashLongestMatchQuickly<16, 1, 1>\".\n\"enc/././hash.h\", line 882:     Where: Specialized in non-template code.\n\"enc/././hash.h\", line 170: Error: \")\" expected instead of \"ring_buffer\".\n\n[[much more]]\n```\n  \u2026I_HAS_UBFX to force C compilers to interpret them as booleans and avoid constant-logical-operand warnings.\n Hi. I thought I had already signed Google CLA when I contributed to Chromium, but maybe that's a different one. I'll check that and come back to you later.\n @eustas OK, I've updated the commit author to use the address of my employer, which already signed a corporate CLA.\n  LGTM\n  Related to the 82ffc4df commit.\n @eustas I've signed the CLA as described in CONTRIBUTING.md a few minutes ago.\n  Sorry for being a newbie.\nI now made a branch caller \"dumper\" where I can commit developments of the file\nPlease ignore the other pull request: it contains old code.\n Will do. Sorry for the late reaction.\n\nOp 2 dec. 2016 14:41 schreef \"Eugene Kliuchnikov\" <notifications@github.com\n>:\n\n> Very nice and elegant! Would you mind moving it to research/ folder?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/brotli/pull/314#issuecomment-264456060>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AIjij7ZBuJ6k0v38joYStvJhtSTOOKo3ks5rEB_5gaJpZM4HYLiF>\n> .\n>\n I see you already did that. Thanks, as I was still trying to figure out how\nto do that. I'll have to work on that :-)\n\n2016-12-02 14:41 GMT+01:00 Eugene Kliuchnikov <notifications@github.com>:\n\n> Very nice and elegant! Would you mind moving it to research/ folder?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/brotli/pull/314#issuecomment-264456060>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AIjij7ZBuJ6k0v38joYStvJhtSTOOKo3ks5rEB_5gaJpZM4HYLiF>\n> .\n>\n\n\n\n-- \nJ.N.E. Bos\n  Brotli fails to build in Gecko when \"-Werror,-Wconstant-logical-operand\" is enabled:\n\n5:22.18 /home/ckerschb/moz/mc-obj-dbg/dist/include/./bit_reader.h:41:22: error: use of logical '||' with constant operand [-Werror,-Wconstant-logical-operand]\n 5:22.18   if (IS_CONSTANT(n) || BROTLI_HAS_UBFX) {\n 5:22.18                      ^  ~~~~~~~~~~~~~~~\n 5:22.18 /home/ckerschb/moz/mc-obj-dbg/dist/include/./bit_reader.h:41:22: note: use '|' for a bitwise operation\n 5:22.18   if (IS_CONSTANT(n) || BROTLI_HAS_UBFX) {\n 5:22.18                      ^~\n 5:22.18                      |\n 5:22.18 1 error generated.\n\n See https://bugzilla.mozilla.org/show_bug.cgi?id=1247301\n I did not try it, but from http://stackoverflow.com/a/32756885 one workaround might be to add a cast to an int in the definitions of BROTLI_HAS_UBFX and IS_CONSTANT(x)\n This appears in Mozilla MacOSX buildbot (search constant-logical-operand in the raw logs). I tried casting to an (int) but that does not help: https://treeherder.mozilla.org/logviewer.html#?job_id=17040941&repo=try\n I just pushed https://treeherder.mozilla.org/#/jobs?repo=try&revision=1133d2b81b26 let's see if that changes something (BTW, I can not reproduce the problem on my Linux system either and my gcc does not recognize the constant-logical-operand warning).\n OK, the double exclamation mark trick seems to work:\n\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=592ee4d1c523&selectedJob=17086321\nhttp://archive.mozilla.org/pub/firefox/try-builds/fred.wang@free.fr-592ee4d1c5238f8990b3deffc3cd42b6ff5fba1f/try-macosx64/try-macosx64-bm83-try1-build15516.txt.gz\n\nThe previous changeset was:\nhttps://treeherder.mozilla.org/#/jobs?repo=try&revision=2eb88e7da740\nhttp://archive.mozilla.org/pub/firefox/try-builds/jnicol@mozilla.com-2eb88e7da740319ac602ca3f0502cea59a498d3a/try-macosx64/try-macosx64-bm87-try1-build13456.txt.gz\n\n03:55:15     INFO -  In file included from /builds/slave/try-m64-0000000000000000000000/build/src/obj-firefox/x86_64/modules/woff2/Unified_cpp_modules_woff20.cpp:29:\n03:55:15     INFO -  In file included from /builds/slave/try-m64-0000000000000000000000/build/src/modules/woff2/src/woff2_dec.cc:39:\n03:55:15     INFO -  In file included from /builds/slave/try-m64-0000000000000000000000/build/src/obj-firefox/x86_64/dist/include/./decode.h:12:\n03:55:15     INFO -  In file included from /builds/slave/try-m64-0000000000000000000000/build/src/obj-firefox/x86_64/dist/include/./state.h:12:\n03:55:15     INFO -  Warning: -Wconstant-logical-operand in /builds/slave/try-m64-0000000000000000000000/build/src/obj-firefox/x86_64/dist/include/bit_reader.h: use of logical '||' with constant operand\n03:55:15     INFO -  /builds/slave/try-m64-0000000000000000000000/build/src/obj-firefox/x86_64/dist/include/./bit_reader.h:41:31: warning: use of logical '||' with constant operand [-Wconstant-logical-operand]\n03:55:15     INFO -    if (__builtin_constant_p(n) || 0) {\n03:55:15     INFO -                                ^  ~\n03:55:15     INFO -  /builds/slave/try-m64-0000000000000000000000/build/src/obj-firefox/x86_64/dist/include/./bit_reader.h:41:31: note: use '|' for a bitwise operation\n03:55:15     INFO -    if (__builtin_constant_p(n) || 0) {\n03:55:15     INFO -                                ^~\n03:55:15     INFO -                                |\n03:55:15     INFO -  1 warning generated.\n03:55:15     INFO -  libwoff2.a.desc\n03:55:15     INFO -  rm -f libwoff2.a\n03:55:15     INFO -  /builds/slave/try-m64-0000000000000000000000/build/src/obj-firefox/x86_64/_virtualenv/bin/python /builds/slave/try-m64-0000000000000000000000/build/src/config/expandlibs_gen.py -o libwoff2.a.desc Unified_cpp_modules_woff20.o\n > It seems you've missed\n> #define IS_CONSTANT(x) (!!__builtin_constant_p(x))\n\nThe constant-logical-operand warning only seems to complain about constant operands, but I guess it's safe to do that too...\n OK, I just opened #322\n  The code in master works well on Linux/OSX, not so well on Windows. This PR makes it work for all 3 main platforms. Props to #174 for giving helpful hints!\n\nTested on OSX 10.11.3 with clang 7.0.2, and Windows 10 with msys2, gcc 5.2.0\n  This is not a complaint, but more of a \"teaser\".\nIn case someone in here tries to squeeze the last drop out of the compressor, I found (after trying about everything, where brotli consistently beats both gzip and bzip) an easy way to generate strings where both bzip2 and gzip do produce shorter strings than brotli. Different from earlier reports, these are pretty short!\nI am convinced that there must be a way to get these compressed more efficiently, so there must be some strange reason the compressor doesn't this. \nEdited: version 0.3.0 does a better job than claimed here. These numbers are for 0.1.0. Still, there is  room for improvement; see below.\n\nIn English: make a list of random 10-bit patterns, written out in ASCII.\nIn Python3:\n\n> > > ts='\\n'.join('{:10b}\\n'.format(random.getrandbits(10)) for i in range(1000))\n> > > len(codecs.encode(bytes(ts,'ascii'),'zip'))\n\n2373\n\n> > > len(codecs.encode(bytes(ts,'ascii'),'bz2'))\n\n2107\n\n> > > len(brotli.compress((ts)))\n\n2385\nI hope this will inspire someone.\n Sorry, but I was using 0.1.0. Version 0.3.0 fares better, but still doesn't beat bz2:\n\n> > > ts='\\n'.join('{:10b}\\n'.format(random.getrandbits(10)) for i in range(1000))\n> > > len(codecs.encode(bytes(ts,'ascii'),'zip'))\n\n2390\n\n> > > len(codecs.encode(bytes(ts,'ascii'),'bz2'))\n\n2113\n\n> > > len(brotli.compress((ts)))\n\n2190\n You are absolutely right, of course.\nI was writing this because i was playing with this disassembler, and I was\ntrying to see which things compressed well and which didn't.\nYou can do a lot with clever block types and well chosen zero out one bit\ndistance and insert & copy encoding, and sometimes with contexts.\nWhat I found missing is a way to repeat the literal length without having\nto reencode the extra bits (with distance you can use last to handle that).\nI wrote a small program that produces the shortest compression i could\nthink of in that case (see my github fork).\n\nFrom all my playing and struggling, I found two ways to squeeze the\ncompression to the limit:\nAllow for more (flexible??) contexts; make a way to say \"same literal\nlength\".\nA context based on the character type 8 characters ago, for example, would\nsolve all problems (apart from creating lots of problems, of course...).\nThanks for inspiring me with this great compressor!\n-Jurjen\nOp 29 feb. 2016 17:45 schreef \"eustas\" notifications@github.com:\n\n> This seems to be limitation of encoding. bzip uses BWT and thus wins from\n> the input format (\\n, and ' ' get grouped). Thus it gets close to\n> conventional compressors limit - about 17 bits per integer; using range\n> coding would have improved the compression ratio.\n> And of course, this is much bigger than true entropy (10 bits per integer).\n> \n> BTW, if we remove spaces and new lines\n> \n> > ts=''.join('{:1b}'.format(random.getrandbits(1)) for i in range(10000))\n> > then\n> > print(len(codecs.encode(ts,'zip')))\n> > 1661\n> > print(len(codecs.encode(ts,'bz2')))\n> > 1692\n> > print(len(brotli.compress(ts)))\n> > 1262\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/brotli/issues/310#issuecomment-190283181.\n  firefox 44.0 recently shipped with brotli support. On Alpine Linux (which uses musl libc) it [crashed](https://bugzilla.mozilla.org/show_bug.cgi?id=1243724) due to it was not built with BROTLI_BUILD_PORTABLE set. (or BROTLI_SAFE_MEMMOVE to be sepcific)\n\nThere was no warning and there was no way to catch it til after the fact that it had happened. (it wouldn't been caught if we wouldn't build with FORTIFY_SOURCE).\n\nI would recommend that you flip the default setting around and by default build with `BROTLI_BUILD_PORTABLE` or change it to `BROTLI_BUILD_NONPORTABLE`, because the memcpy implementation is outside of your control, you can not verify or warn if things gets miscompiled and relying on \"undefined behavior\" is generally a bad idea.\n  Some compiler warnings:\n\n**gcc with c++98 on Fedora**\n\n```\ng++ -I/data/gannet/ripley/R/R-devel/include -DNDEBUG  -I/usr/local/include    -fpic  -g -O2 -Wall -pedantic -mtune=native  -c enc/streams.cc -o enc/streams.o\nIn file included from enc/encode.h:15:0,\n                 from wrapper.cc:3:\nenc/./hash.h:102:17: warning: invoking macro length argument 1: empty macro arguments are undefined in ISO C++98 [-Wpedantic]\n   size_t length() const {\n                 ^\nenc/./hash.h:107:33: warning: invoking macro length argument 1: empty macro arguments are undefined in ISO C++98 [-Wpedantic]\n     return code ? code : length();\n                                 ^\n```\n\n**clang on Fedora**\n\n```\nenc/brotli_bit_stream.cc:337:33: error: use of undeclared identifier 'malloc'\n      static_cast<HuffmanTree*>(malloc(max_tree_size * sizeof(HuffmanTree)));\n                                ^\nenc/brotli_bit_stream.cc:398:3: error: use of undeclared identifier 'free'\n  free(tree);\n  ^\n2 errors generated.\n/data/gannet/ripley/R/R-clang/etc/Makeconf:139: recipe for target 'enc/brotli_bit_stream.o' failed\nmake[1]: *** [enc/brotli_bit_stream.o] Error 1\nenc/encode.cc:260:3: error: use of undeclared identifier 'free'\n  free(commands_);\n  ^\nenc/encode.cc:391:31: error: use of undeclared identifier 'realloc'\n        static_cast<Command*>(realloc(commands_, sizeof(Command) * newsize));\n                              ^\n2 errors generated.\n/data/gannet/ripley/R/R-clang/etc/Makeconf:139: recipe for target 'enc/encode.o' failed\nmake[1]: *** [enc/encode.o] Error 1\nenc/encode_parallel.cc:99:7: error: use of undeclared identifier 'malloc'\n      malloc(sizeof(Command) * ((input_size + 1) >> 1)));\n      ^\nenc/encode_parallel.cc:175:3: error: use of undeclared identifier 'free'\n  free(commands);\n  ^\n2 errors generated.\n```\n\n**Solaris Studio 12.3**\n\n```\ncc -xc99 -I/home/ripley/R/cc/include -DNDEBUG  -I/usr/local/include   -DBROTLI_BUILD_PORTABLE -include config.h -KPIC  -O -xlibmieee -xtarget=native  -c dec/decode.c -o dec/decode.o\n\"dec/decode.c\", line 1205: warning: statement not reached\n```\n\n**gcc 4.6.3 on Windows**\n\n```\nenc/encode.cc -o enc/encode.o\nenc/encode.cc: In member function 'bool brotli::BrotliCompressor::WriteBrotliData(bool, bool, size_t*, uint8_t**)':\nenc/encode.cc:409:41: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n```\n\n**Solaris**\nLots of these: https://www.r-project.org/nosvn/R.check/r-patched-solaris-x86/brotli-00install.html\n Thank you. Let me know if I can help test something.\n\nFull build logs are here by the way: https://cran.r-project.org/web/checks/check_results_brotli.html\n Any updates? Need to fix these issues downstream...\n FWIW this causes compile error on FreeBSD 10 (ref: https://github.com/h2o/h2o/issues/815).\n Still getting a warning in C++98:\n\n```\ng++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused -pedantic  -c wrappe\nr.cc -o wrapper.o\nIn file included from enc/encode.h:15:0,\n                 from wrapper.cc:3:\nenc/./hash.h:111:33: warning: invoking macro length argument 1: empty macro arguments are undefined in ISO C90 and ISO C++98 [enabled by default]\n     return code ? code : length();\n                                 ^\n```\n\nAnd:\n\n```\n\"dec/decode.c\", line 1251: warning: statement not reached\n```\n Oh that might be in my bindings actually. Sorry for that...\n Thanks yes I was including a header file before brotli which apparently had a `length()` macro. Not sure if there is a sensible way to avoid such problems. \n\nI am opening a separate issue for Solaris problems.\n  This would be very useful for dealing with something like .tar.br fies.\n That's very helpful, thank you!\n\nDo you have any idea when the new framing could be introduced? And how to transition content and clients over to the new format?\n A framing or file format of some type sounds great.\n\nIs there a process through which people are peer reviewing how the new framing format is being designed?\n\nHas any thought been given to possibly re-using a \"framing\" format like the [XZ file format](http://tukaani.org/xz/xz-file-format-1.0.4.txt) where brotli is just one of the filter chains that can be used?\n    The decompression code supports using custom functions instead of malloc/free to allocate memory, It would be great to see the same thing from the compression code.\n  When compiling on OSX, I get this:\n\n```\npython/brotlimodule.cc:131:12: warning: comparison of constant -1 with expression of type 'BrotliParams::Mode' is always true\n      [-Wtautological-constant-out-of-range-compare]\n```\n\nI suspect the cast of the out-of-range -1 to an enum is undefined behaviour in C++, but I'm not certain.\n cc @khaledhosny \n  Using brotli from master, sometime when I call BrotliDecompressBufferStreaming (/ BrotliDecompressStream), it sets available_in to 1. This is happening while the result code is BROTLI_RESULT_SUCCESS, so according to the documentation comment, this shouldn't be possible., and it's not clear if+how I should deal with this, since it appears to be a bug I'm guessing I can't make any assumptions as to there being any way to recover from this?\n\nThis didn't occur with a month-or-so older master brotli, but that had other issues (BrotliDecompressBufferStreaming always returning huge 4mb chunk sizes)\n  Here is the use case: a continuous data stream (e.g. sensor data) needs to be compressed into chunked, fixed-length records.  Each record needs to be independent, meaning no compression state is shared or otherwise linked to neighbor records.\n\nThe current C interface for encoding, specifically BrotliCompressBuffer(), does not allow writing to a limited size buffer, i.e. the output buffer appears to be required to hold the compressed output of the entire input buffer.  It is possible that the C++ interface allows this and I cannot figure out how to write a C wrapper for it.\n\nA bit more about my use case: I am assessing whether brotli would be usable as an encoding of data samples in an international standard for time series seismic data.  The length of encoded data segments are approximately 448 to 4032 bytes.  Any suggestions within this context would be appreciated.\n I found what I was looking for in the form of the zlib-esque streaming interface (using pure C) created by Cloudflare for a NGINX filter module:\nhttps://github.com/cloudflare/ngx_brotli_module\n\nSuch an interface included in this reference repository would be very valuable.\n\nP.S. For what it is worth, I also vote for a more traditional \"library\" approach such done by Cloudflare, in the sense of creating libbrotli.a and providing brotli.h.  Continuing the digression, following as many of the points in the Tao of good compression API (http://richg42.blogspot.com/2015/01/good-lossless-codec-api-design.html) will increase usability, increase usage and reduce the re-invention of very common wheels.\n After more exploration it turns out that even with the zlib-esque interface my issue is not solved.  While it is possible to compress to a limited length buffer, if the output buffer is not large enough for a full flush it will not be valid compressed data.  Bummer.\n\nMy quest for a method to \"compress as much input as possible into a fixed length buffer (and be independently decompressable)\" remains unrealized.\n Thanks.  The suggested wrapper sounds like a brute force search for the optimal input block size, which would rarely be optimally efficient, but when the blocks are so small perhaps the overhead is minimal.  I will give that a try, it will be enough for exploring brotli's potential for this use.\n\nIt is for the SEED format that I explore new options.  Currently, the allowed encodings only include compression for integer data, floating point data are stored uncompressed.  The idea is precisely to find a general compression scheme that a) can be used for any data sample type and b) is broadly supported, will be readable in decades to come and is not seismology specific (and thus benefits from a much larger community).  There is certainly a trade-off with efficiency, a scheme specific for the data characteristics would result in better compression.\n Closing for now, I'll wait and see what I can get out of the new pure-C interfaces when a release is cut.\n  Hi,\nI found this minor typo in tools/Makefile.\n\nCheers,\nTomasz\n I submitted CLA too.\n  When streaming encoding, it's working fine using small buffer-sizes (indeed only does so), thus presumably it should be able to decode in similarly small chunks, however the streaming decoder seems to only return 4.19mb chunks (i.e. i'm streaming data to BrotliDecompressBufferStreaming in 16kb chunks, but it only first returns anything whenever it has accumulated 4.19mb available). \n\nGiven that this seems unneccessary (since the data was streamed on write in far smaller chunks), it would be very preferable to be able to have it return more frequent + smaller chunk sizes, as this kind of delay+chunkiness makes it unusable for some streaming scenarios, and less ideal for others.\n Ok, looks like you fixed it since I originally discovered the issue (Oct 21), as pulling the latest from master now fixed the issue (average chunk size dropped from that very consistent 4.19mb to ~31kb. I originally reported it in the forum, but then getting no response there discovered this place after a month or so - next time I'll post here I guess :)\n  Hi,\nI'm packaging brotli for Debian and I wanted to install bro.py in /usr/bin.\nI wanted to know what would be the official name for this program and rename it if it conflicts:\n- /usr/bin/bro.py => in Debian at least, .py scripts are discouraged in $PATH (https://lintian.debian.org/tags/script-with-language-extension.html)\n- /usr/bin/bro => it looks nice, but this is already occupied by this package: https://packages.debian.org/sid/amd64/bro/filelist\n- /usr/bin/brotli => seems to be fine\n\nAccording to the above, I'd be happy if you would rename bro.py to brotli or something else that does not conflict, nor violates Debian policy.\n\nBest regards,\nTomasz\n Hi @thinred,\nThe reason I did the `bro.py` script was primarily to test the Brotli Python extension on Windows (cf. https://github.com/google/brotli/pull/38).\n\nAt that time, I wasn't able to compile the `bro.cc` tool for\u00a0Windows, and I wanted to avoid having to install Cygwin, MSYS, etc., in order to run the `compatibility_test.sh` and `roundtrip_test.sh` scripts. So I wrote a Python clone of the `bro.cc` tool and equivalent scripts for compatibility and roundtrip tests.\n\nI didn't add `bro.py` to the `brotli` Python package, nor the `setup.py` script, because I thought that users of the Python bindings would be more interested in using `brotli` as a module to import in other applications, rather than as a command line script.\n\nHowever, if you or others think it could be useful, we could easily move it inside the package and have `setuptools` generate a platform-specific console script (using its `entry_points` feature). On Linux or OS X, it would be named without the `.py` extension, whereas on Windows it will have `.exe`.\n\nAlthough, I guess for Debian it would be fine to simply package the C++ command line tool (that is called `bro` with no language extensions).\n\nAlso, bear in mind, the Python bindings and hence `bro.py` still don't expose the new streaming API, while the `bro` C++ tool does (cf. https://github.com/google/brotli/pull/271).\n Hi @anthrotype,\nthank you for your elaborate response. I must admit that I missed bro.cc in the sources :).\nOk, I prefer bro.cc too, but the naming issue remains. I think that it must be installed as /usr/bin/brotli and not /usr/bin/bro...\n\nAnother problem that may deserve its own issue is that brotli has no dynamic library. Do you plan to provide libbrotli?\n > Another problem that may deserve its own issue is that brotli has no dynamic library. Do you plan to provide libbrotli?\n\nI could be wrong, but I don't think brotli is API/ABI stable yet; it might be wise to hold off on packaging a library for now.\n That's what I thought, fair enough.\nWhat about the name of cmdline program?\n would be great if the CLI followed standard patterns like gzip, bzip2 and xz use.\n  Hey!\n\nBrotli's compression ratio and decompression speed makes it a very viable candidate for serving pre-compressed files to decompress on the fly as they are downloading. For big files its common to offer resumable downloads, but with stream decompression its impossible to use without restoring the stream decoder's context at the time it was stopped.\n\nIs it possible add a function to the API to serialize the stream's context and resume it later?\n\nExcuse me if I'm talking nonsense, I'm unfamiliar with the grits of Brotli's implementation :)\n  Picked this up running the Squash unit tests in AddressSanitizer.  Basically, the plugin gives brotli 6 bytes to write to, but the write is 8 bytes at a time.  See quixdb/squash#168 for background, info from ASan follows:\n\n```\n==9544==ERROR: AddressSanitizer: unknown-crash on address 0x611000005389 at pc 0x7f45a295fd04 bp 0x7ffe63ec49f0 sp 0x7ffe63ec49e0\nWRITE of size 8 at 0x611000005389 thread T0\n    #0 0x7f45a295fd03 in BROTLI_UNALIGNED_STORE64(void*, unsigned long) /home/nemequ/local/src/squash/plugins/brotli/brotli/enc/././././port.h:148\n    #1 0x7f45a295fd03 in brotli::WriteBits(int, unsigned long, int*, unsigned char*) /home/nemequ/local/src/squash/plugins/brotli/brotli/enc/./write_bits.h:63\n    #2 0x7f45a295fd03 in brotli::BrotliCompressor::WriteMetadata(unsigned long, unsigned char const*, bool, unsigned long*, unsigned char*) /home/nemequ/local/src/squash/plugins/brotli/brotli/enc/encode.cc:545\n    #3 0x7f45a28f9c92 in squash_brotli_compress_stream /home/nemequ/local/src/squash/plugins/brotli/squash-brotli.cpp:191\n    #4 0x7f45a28f9c92 in squash_brotli_process_stream /home/nemequ/local/src/squash/plugins/brotli/squash-brotli.cpp:261\n    #5 0x7f45a6f344fe in squash_stream_process_internal /home/nemequ/local/src/squash/squash/stream.c:699\n    #6 0x401ad7 in flush_test /home/nemequ/local/src/squash/tests/flush.c:23\n    #7 0x7f45a69ff45a  (/lib64/libglib-2.0.so.0+0x6f45a)\n    #8 0x7f45a69ff622  (/lib64/libglib-2.0.so.0+0x6f622)\n    #9 0x7f45a69ff622  (/lib64/libglib-2.0.so.0+0x6f622)\n    #10 0x7f45a69ff82d in g_test_run_suite (/lib64/libglib-2.0.so.0+0x6f82d)\n    #11 0x7f45a69ff850 in g_test_run (/lib64/libglib-2.0.so.0+0x6f850)\n    #12 0x401705 in main /home/nemequ/local/src/squash/tests/test-codecs.c:63\n    #13 0x7f45a61e357f in __libc_start_main (/lib64/libc.so.6+0x2057f)\n    #14 0x4017f8 in _start (/home/nemequ/local/src/squash/build/tests/flush+0x4017f8)\n\n0x611000005390 is located 0 bytes to the right of 208-byte region [0x6110000052c0,0x611000005390)\nallocated by thread T0 here:\n    #0 0x7f45a71dba0a in malloc (/lib64/libasan.so.2+0x98a0a)\n    #1 0x7f45a28fa04a in squash_brotli_stream_new /home/nemequ/local/src/squash/plugins/brotli/squash-brotli.cpp:88\n    #2 0x7f45a28fa04a in squash_brotli_create_stream /home/nemequ/local/src/squash/plugins/brotli/squash-brotli.cpp:146\n    #3 0x7f45a6f26dba in squash_codec_create_stream /home/nemequ/local/src/squash/squash/codec.c:519\n\nSUMMARY: AddressSanitizer: unknown-crash /home/nemequ/local/src/squash/plugins/brotli/brotli/enc/././././port.h:148 BROTLI_UNALIGNED_STORE64(void*, unsigned long)\nShadow bytes around the buggy address:\n  0x0c227fff8a20: fd fd fd fd fd fd fd fd fa fa fa fa fa fa fa fa\n  0x0c227fff8a30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c227fff8a40: 00 00 00 00 00 00 00 00 00 00 fa fa fa fa fa fa\n  0x0c227fff8a50: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00\n  0x0c227fff8a60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c227fff8a70: 00[00]fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c227fff8a80: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c227fff8a90: fd fd fd fd fd fd fd fd fd fd fa fa fa fa fa fa\n  0x0c227fff8aa0: fa fa fa fa fa fa fa fa fd fd fd fd fd fd fd fd\n  0x0c227fff8ab0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c227fff8ac0: fd fd fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n==9544==ABORTING\n```\n\nIt would be easy enough to alter the plugin to give brotli 8 bytes to write to, but I'd rather see it fixed upstream than work around it in Squash.\n  Unless I'm missing something, Brotli doesn't include a function to calculate the maximum size of a compressed buffer given a specified input size (_i.e._, the brotli version of zlib's `compressBound` function).\n\nI've been using uncompressed_size + 5 in squash, but that doesn't work with larger buffers.  Based on some testing with blobs of random data, the points where the output size changes are:\n\n<table>\n  <thead>\n    <tr>\n      <th>Max input size</th>\n      <th>Max compressed extra bytes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>64 KiB</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>8 MiB</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <td>9 MiB</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <td>16 MiB</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td>24 MiB</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <td>???</td>\n      <td>16</td>\n    </tr>\n  </tbody>\n</table>\n\n\n24 MiB + 1 bytes requires input_size + 16, but I stopped testing there.  For now I'm going to use `uncompressed_size + 5 + ((uncompressed_size / (1024 * 1024 * 8)) * 4)` in Squash, but I would feel better if you provided a function or macro.\n Someone else can verify this work, but I believe this to be true.\n\nIn the worst case, when the data is highly uncompressible, the overhead comes from meta data to describe raw blocks. We compute the overhead by the followinG:\n\nThe stream header has:\n\n```\n7b  WINDOW_SIZE (best case is 1b, worst case is 7b. This setting is independent of input size)\n```\n\nThe overhead to encode each raw block is:\n\n```\n1b           ISLAST\n2b           MNIBBLES (4..6)\n4b*MNIBBLES  MLEN (1..16777216)\n1b           ISUNCOMPRESSED\n7b           PADDING (may be less depending on bit alignment)\n8b*MLEN      DATA\n```\n\nThe last block has:\n\n```\n1b  ISLAST\n1b  ISLASTEMPTY\n```\n\nThus, we produce the following table:\n\n| Max input size (<=) | Max compressed extra bytes |\n| --- | --- |\n| 65536 | 5 |\n| 1048576 | 5 |\n| 16777216 | 6 |\n| SIZE | 1 + 5*\u23a1SIZE/16777216\u23a4 + 1 |\n\nThese numbers, of course, assume that the encoder falls back to using raw encoding when it detects that its compressed output is worse than just encoding it raw. I cannot confirm that the C encoder does this.\n FWIW I don't think it's a big deal if this isn't exact, as long as it always returns >= the number of bytes really required.  Memory use shouldn't really be an issue here since if there is any concern about memory people should be using the streaming API.  A lot of the plugins in Squash are actually pretty wide of the mark in their estimates.\n It seems level 1 is **significantly** worse about this.  For example, a 935 byte buffer requires 119 extra bytes.\n\nDo you consider that to be a bug?  I don't really know how the encoder works\u2026  I can understand not wanting to spend the time checking for uncompressible data, but I can also see abandoning the idea of compression and just memcpying data being a good performance optimization.\n The relevant commits seem to be 27688e6 and 417107b3ddb04cfd4ddfa7592fed0eb886186281.\n 0.5 provides `BrotliEncoderMaxCompressedSize`\n FWIW using the buffer to buffer API is all we commit to our max_compressed_size function working for in Squash, so this isn't a problem for me.  Given all the complexities of estimating it with the stream API (like what happens if you flush every byte?), I don't think I would bother with that if I were you.\n\nNote that zlib's function (`compressBound`) only applies to its buffer-to-buffer functions.  I think all the others do the same, but I'd have to check\u2026\n  ### About\n\nI'm working on a project called [jbrotli](https://github.com/nitram509/jbrotli) to make Brotli compression available to Java developers.\nMy goal is to enable Java based HTTP server to use Brotli compression on the fly.\n\nI've did some performance benchmarks with the cp.html (from canterbury corpus).\nIt turns out, that gzip is little more than twice as fast as brotli, when compressing this HTML.\nThis fails may expectations - I thought the Brotli outnumbers gzip.\n### Issue\n\nMost other benchmarks make Brotli shine, compared to gzip.\nI'm looking forward to get feedback from the experts,\nwhy these numbers are so \"bad\" - or where the code could be improved.\n### Testcases\n\nAll these test cases use a) the 24kB HTML from canterbury corpus and b) 2xcp.html, all read from memory.\n##### brotli_compression_with_BrotliCompressor_using_ByteBuffer\n\nuses brotli::BrotliCompressBuffer()\nIntended to use simple stateless interface of brotli.\nSecond, it also is intended to show differences between byte[] and direct ByteBuffer in Java.\nRemark: Most likely this direct ByteBuffer thingy is faster than using byte[], as many other projects already experienced that. For comparison to brotli - this can be treated equal to using byte[]\n- brotli quality parameter = 5\n\nsource https://github.com/nitram509/jbrotli/blob/master/jbrotli-native/src/main/cpp/de_bitkings_jbrotli_BrotliCompressor.cxx\n##### brotli_compression_with_BrotliStreamCompressor_using_byte_array\n\nInstantiates only one object of brotli::BrotliCompressor\nand only does CopyInputToRingBuffer() followed by WriteBrotliData().\nIntended to have pure compression and reuse of the pre-calculated dictionary.\n- brotli quality parameter = 5\n\nsource https://github.com/nitram509/jbrotli/blob/master/jbrotli-native/src/main/cpp/de_bitkings_jbrotli_BrotliStreamCompressor.cxx\n##### gzip_compression\n\nUses default GZIPOutputStream with default compression level.\n- compression level default (expect 5 or 6)\n##### JNI_doing_simple_memcpy_using_byte_array\n\nThis test uses the same Java method signature as the compressor, but only does 'memcpy'.\nThis is intended to show how much overhead ther is for doing JNI calls.\n### Results\n\n```\n## using cp.html 24kB HTML\nBenchmark                                                         Mode  Cnt       Score      Error  Units\nbrotli_compression_with_BrotliCompressor_using_ByteBuffer        thrpt    5          65 \u00b1        2  ops/s\nbrotli_compression_with_BrotliStreamCompressor_using_byte_array  thrpt    5         761 \u00b1        6  ops/s\ngzip_compression                                                 thrpt    5        1992 \u00b1       47  ops/s\nJNI_doing_simple_memcpy_using_byte_array                         thrpt    5      837511 \u00b1     4273  ops/s\n\n## using 2xcp.html 48kB HTML\nBenchmark                                                         Mode  Cnt       Score      Error  Units\nbrotli_compression_with_BrotliCompressor_using_ByteBuffer        thrpt    5          60 \u00b1        0  ops/s\nbrotli_compression_with_BrotliStreamCompressor_using_byte_array  thrpt    5         384 \u00b1       58  ops/s\ngzip_compression                                                 thrpt    5        1613 \u00b1       52  ops/s\nJNI_doing_simple_memcpy_using_byte_array                         thrpt    5      461217 \u00b1     2856  ops/s\n```\n### Setup:\n- using brotli 0.2.0 release\n- using Visual Studio 2010 compiler 64bit\n- using custom cmake file (maybe some compiler options are missing)\n- using Java Micro Benchmark (jmh) for measurement\n- using Java 1.8.0_u65, 64bit\n- source https://github.com/nitram509/jbrotli   ... consider _experimental_ ;-)\n > It turns out, that gzip is little more than twice as fast as brotli, when compressing this HTML.\n> This fails may expectations - I thought the Brotli outnumbers gzip.\n\nBrotli is generally slower than gzip for compression.  It is usually a bit faster at **de**compression, and the compression ratio is much higher.  See https://quixdb.github.io/squash-benchmark/?dataset=cp.html&machine=peltast&visible-plugins=brotli,zlib#ratio-vs-decompression for results for cp.html; results are probably similar for most datasets.  If you turn on some of the other codecs squash offers (click the label in the legend) you'll get a more complete picture of where brotli fits in with the competition.\n\nThis is a pretty good place for brotli to be.  Compressing content once and decompressing many times is a pretty common use case, so it's usually better to emphasize decompressor speed and ratio at the expense of compressor speed.\n Wow cool, that you plan to provide Java wrappers. I'm interested in your outcomes.\nSo we might join forces and can further improve brotli support in the Java World.\n @nemequ said\r\n\r\n> Compressing content once and decompressing many times is a pretty common use case\r\n\r\nThis would apply back in the static HTML days.\r\n\r\nNowadays most websites are data driven and the HTML is  dynamically generated on the fly by most Java UI frameworks (and frameworks in other languages) so compressing once and reusing cached compressed versions of the HTML just doesn't really work naturally in that scenario.\r\n\r\nTo make it work you would need to add a serious amount of code to work out everything that could change on a page - content, theme selection changes (which CSS files to use), user permissions, available JS powered controls etc.,) and when something does change blow away the cached compressed version of the HTML and recompress.\r\n\r\nJust looking around the main sites I couldn't find any actually using brotli - weird!\r\n\r\nAt time of writing this, not Microsoft, not IBM, not even www.google.com uses it and they developed it!\r\n\r\nAssuming pre-compression isn't an option for dynamically generated HTML pages then, maybe the trade off between slower compression time (i.e. extra server CPU cycles consumed) vs the savings in the size of downloaded artifacts (consumes slightly less bandwidth) just doesn't hit the sweet spot? Well not  yet at least - maybe the compression algorithm implementations have some optimizations coming? Maybe faster to run in native machine code perhaps like the Apache/Tomcat APR?  Looks much smaller :)\n  Compiling with gcc 4.6.3 / mingw-w64: http://pastebin.com/raw.php?i=9pTWA0DA\n Update: most of these are now fixed, but a few remain. Here the new log: http://pastebin.com/raw.php?i=p74N5zkM\n Update: only a single warning remains:\n\n```\nenc/encode.cc -o enc/encode.o\nenc/encode.cc: In member function 'bool brotli::BrotliCompressor::WriteBrotliData(bool, bool, size_t*, uint8_t**)':\nenc/encode.cc:409:41: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\n```\n Closing in favor of https://github.com/google/brotli/issues/302.\n  Running this:\n\n```\n./bro.exe -q 4 -i butler.exe > /dev/null\n```\n- Where `bro.exe` is a 64-bit (PE32+) binary compiled using mingw-gcc (tested with v4.6 & v5.2)\n- Where `butler.exe` is the file contained in that 7z archive: https://misc.amos.me/butler/windows-amd64/v0.4.5/butler.7z (no need to trust/run the .exe, it's just a sample file to be compressed by brotli)\n\n...fails starting with  https://github.com/google/brotli/commit/ea48ce5a6fa8a3224dd270a7f60428084e7b590d, with the following message:\n\n```\n$ brotli/tools/bro.exe -q 4 -i butler.exe | tail\n\nThis application has requested the Runtime to terminate it in an unusual way.\nPlease contact the application's support team for more information.\nAssertion failed!\n\nProgram: C:\\msys64\\home\\amos\\tmp\\brotli\\tools\\bro.exe\nFile: ./write_bits.h, Line 52\n\nExpression: bits < 1UL << n_bits\n```\n\nCompiling+running with `#define BIT_WRITER_DEBUG` uncommented yields the following last few lines:\n\n```\nWriteBits   6  0x000000000000001d    19554445\nWriteBits   0  0x0000000000000000    19554451\nWriteBits   6  0x0000000000000011    19554451\nWriteBits   2  0x0000000000000002    19554457\nWriteBits   9  0x00000000000001c3    19554459\nWriteBits   8  0x0000000000000095    19554468\nWriteBits   6  0x0000000000000027    19554476\nWriteBits  16  0x0000000000000028    19554482\nWriteBits  12  0x0000000000000fff    19554498\nWriteBits  36  0x0000000003437182    19554510\n```\n\nI think `1UL << 36` might be overflowing on Windows, where unsigned longs seem to.. remain 32-bit ? (cf. http://stackoverflow.com/questions/384502/what-is-the-bit-size-of-long-on-64-bit-windows)\n\nIt might be worth using explicitly-sized types throughout the brotli codebase, I've never seen a large-scale \"replace int with size_t\" refactor go well :)\n Replacing `1UL` with `1ULL` in the assert in `enc/write_bits.h` seems to fix it.\n This was fixed in PR #266 \n Thanks a lot for the quick fix! :star2: \n  Hi there!\n\nMany other libraries, especially for compression (including all with zlib-style APIs) expose some way to hand over memory management to the library users, for a variety of reasons. This includes basically all applications that want to have a complete overview over the memory they use, and language bindings which wish to report the memory usage to some kind of garbage collection mechanism, which is the use case where this report is coming from: MayhemYDG/iltorb#3, esp. everything from https://github.com/MayhemYDG/iltorb/issues/3#issuecomment-154582578 downwards.\n\nNow, I have thought about working on a patch for this myself, but support for custom memory allocation would at least have to have a notable impact on the API, and so I don\u2019t really want to start coding anything before a few points are clarified (or before I have convinced you that this would be a useful feature!):\n#### C and C++ API\n\nThe decoder obviously should provide some C-only interface for this, e.g. passing a pointer to some structure to functions; The liblzma library supports the following allocator type: [lzma_allocator](https://github.com/addaleax/xz/blob/282e768a1484e88c8b7ec35655ee4959954ec87a/src/liblzma/api/lzma/base.h#L348).\n\nThis raises the question of whether the encoder should support the same structures: After all, it is written in C++, which has its own [`Allocator`](http://en.cppreference.com/w/cpp/concept/Allocator) concept, and using an C++-style allocator would have the benefit of being directly applicable to all STL containers.\n\nStill, library users may prefer a consistent API and not have to write different allocator types for encoding and decoding; It would probably be possible to accept the allocator structure used for the decoder and transparently upgrade it to a C++ Allocator type, e.g. by detecting whether it supports template parameters.\n#### Backwards compatibility\n\nI can not tell how important a backwards-compatible interface is right now to you; Allocator arguments would have to be passed to all library entry points, and the C++ side would probably best be served by using template arguments for specifying Allocators (as in the `std::vector` definition).\n\nThis could probably be implemented by making only additions to the API by renaming the old public functions/classes, e.g. renaming `BrotliCompressor` to `BasicBrotliCompressor<\u2026>`, adding the changes there, and then defining `BrotliCompressor` to be a `BasicBrotliCompressor<>` (imitating the C++ `std::basic_string`/`std::string` idea here).\n#### Passing along the allocator structures\n\nI don\u2019t really have an overview of your codebase (yet), but I feel like there\u2019s a lot of functions, esp. in the decoder, which would either have to receive an additional argument, or one would have to add an additional field to `BrotliState`, and in either way at least the ABI is broken (Side note: If one accepts that fact and goes with adding a field to `BrotliState`, it might be a good idea to include fields for forward compatibility here, as in e.g. [lzma_stream](https://github.com/addaleax/xz/blob/282e768a1484e88c8b7ec35655ee4959954ec87a/src/liblzma/api/lzma/base.h#L507)). And anyway, I\u2019m not sure whether `BrotliState` should contain the allocator methods semantically, since this is not really about the state of the decoder but rather the exact opposite, i.e. about the state of the \u201coutside world\u201d.\n\nSo: Is this worthwhile? How would the API best be changed? Let me know what you think!\n This would probably also apply to the contained python bindings, as the [docs](https://docs.python.org/3/c-api/memory.html) explain:\n\n> In most situations, however, it is recommended to allocate memory from the Python heap specifically because the latter is under control of the Python memory manager. For example, this is required when the interpreter is extended with new object types written in C. Another reason for using the Python heap is the desire to inform the Python memory manager about the memory needs of the extension module. Even when the requested memory is used exclusively for internal, highly-specific purposes, delegating all memory requests to the Python memory manager causes the interpreter to have a more accurate image of its memory footprint as a whole. Consequently, under certain circumstances, the Python memory manager may or may not trigger appropriate actions, like garbage collection, memory compaction or other preventive procedures. Note that by using the C library allocator as shown in the previous example, the allocated memory for the I/O buffer escapes completely the Python memory manager.\n Okay, great! Thanks, and let me know if I can help with anything. :)\n Great, thanks!\n Awesome, thanks!\n  The Microsoft Visual C++ compiler, or specifically linker, generates an error about a possible uninitialized pointer when linking with a C++/CLI application if `output` is left uninitialized. This fixes that issue.\n\nI get that this is a really minor thing but at least this way no one else needs to run into this issue if they want to use brotli in a C++/CLI project.\n OK, an CLA has been submitted. Pending review...\n  - Added new param n_threads to brotli params\n- brolti::BrotliCompressBufferParallel runs n_threads to compress input data\n **I am no project maintainer**\nI reviewed your pull request and will give you some feedback.\n Thx you for the review, I updated my pull request.\n @erikzenker Not a maintainer either, but I'm fairly familiar with the Brotli specification, albeit from a _decoder_ perspective rather than an encoder.\n\nI am surprised that it should be possible to parallelize metablock encoding. It is possible that my understanding is incorrect. I will try to explain why I think that parallel encoding can't work with Brotli.\n\nIn Brotli, there are three mutable concepts that get initialized at the start of the stream, and then live across metablock boundaries. They have an impact on the decoding behavior of each block, and they also potantially get mutated within each block.\n\nThe three concepts are:\n1. The output window (size defined by WSIZE in the stream header), initialized as empty. Used for back references, can span multiple blocks.\n2. The literals buffer of the last two literals, referred to as p1 and p2 in the specification, initialized as p1 = 0, p2 = 0. Used to calculate Context ID for literals.\n3. The distances (ring) buffer of the last four distances, initalized as [4, 11, 15, 16], where 4 is the most recent distance. Used in the decoding of distances, where distance codes can refer to these values.\n\nAs far as I understand it, parallel decoding of blocks is not possible because of those concepts, since subsequent bytes may depend on the state of any of these three concepts, which might have been mutated by actions on earlier compressed data.\n\nUnfortunately, all of the test cases that actually contain multiple metablocks are structured in a way that doesn't test for this. I.e. in all of those cases, all of the output data is really encoded in just one of the metablocks. Because of that, the three stream-wide concepts above do not actually get mutated in those test cases, and thus your parallel implementation passes, when really, it should conceptually fail.\n\n@szabadka Am I overlooking something?\n On Tue, Nov 10, 2015 at 2:28 PM, Thomas Pickert notifications@github.com\nwrote:\n\n> @erikzenker https://github.com/erikzenker Not a maintainer either, but\n> I'm fairly familiar with the Brotli specification, albeit from a _decoder_\n> perspective rather than an encoder.\n> \n> I am surprised that it should be possible to parallelize metablock\n> encoding. It is possible that my understanding is incorrect. I will try to\n> explain why I think that parallel encoding can't work with Brotli.\n> \n> In Brotli, there are three mutable concepts that get initialized at the\n> start of the stream, and then live across metablock boundaries. They have\n> an impact on the decoding behavior of each block, and they also potantially\n> get mutated within each block.\n> \n> The three concepts are:\n> 1. The output window (size defined by WSIZE in the stream header),\n> initialized as empty. Used for back references, can span multiple blocks.\n> 2. The literals buffer of the last two literals, referred to as p1 and p2\n> in the specification, initialized as p1 = 0, p2 = 0. Used to calculate\n> Context ID for literals.\n> 3. The distances (ring) buffer of the last four distances, initalized as\n> [4, 11, 15, 16], where 4 is the most recent distance. Used in the decoding\n> of distances, where distance codes can refer to these values.\n> \n> As far as I understand it, parallel decoding of blocks is not possible\n> because of those concepts, since subsequent bytes may depend on the state\n> of any of these three concepts, which might have been mutated by actions on\n> earlier compressed data.\n> \n> Unfortunately, all of the test cases that actually contain multiple\n> metablocks are structured in a way that doesn't test for this. I.e. in all\n> of those cases, all of the output data is really encoded in just one of the\n> metablocks. Because of that, the three stream-wide concepts above do not\n> actually get mutated in those test cases, and thus your parallel\n> implementation passes, when really, it should conceptually fail.\n> \n> @szabadka https://github.com/szabadka Am I overlooking something?\n> \n> Each thread of the parallel implementation can have access to the whole\n> input data, therefore each of them has access to 1. the window (which is\n> just past input data) and 2. to the last two bytes of the previous input\n> block.\n\nTo address 3. the parallel encoder has to ensure that it will not use the\nlast distances to create a distance short code for the first two commands\nof the meta-block (it is the choice of the encoder whether to make use of\nthe distance ringbuffer of to just output raw distances). After the first\ntwo commands, the distance ringbuffer is fully initialized based on the\ncurrent meta-block and the encoder can start using it.\n\nSo yes, it is possible to do parallel metablock encoding.\n\n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/brotli/pull/258#issuecomment-155419030.\n Ah, right, I did not consider that what I (as a decoder) typically consider \"output\" actually becomes \"input\" for an encoder.\n\nI apologize for the confusion! \n Are there some test for the parallel encoding interface preset ? \nThese tests could be used to verify the correctness of this\nparallel code.\n  Hi,\n\nI checked the BrotliCompressBufferParallel function in encode_parallel.cc and can't find\nany parallel execution, but it looks more like it was prepared for parallel execution with\nopenMP. Can you give me an idea where to find the parallel ?\n Okay thank you :-) I am going to try some OpenMP parallelisation \n  I recommend reviewing each commit individually. The \"large\" commits that touch many lines are actually fairly mechanical changes that do not change the semantic meaning of the text at all. I included rationale for every change in the description of each commit.\n\nKeeping track of what has been merged (or abandoned):\n- ~~(6ad0428) Minor formatting changes~~\n- ~~(317ea91) Fix ambiguity about whether final bit padding must be zero~~\n- (1a5c031) Make pseudo-code more code-like\n- ~~(466f356) Clarify simple and complex prefix codes~~\n- ~~(1a4f884) Define the maximum number of bytes transforms may add to a word~~\n- (805ff4f) Minor formatting changes\n- ~~(04ba9ac) Minor formatting of Section 9.2. and Section 9.3.~~\n- ~~(fcd05db) Clarify Section 4.~~\n- ~~(2459bb7) Use consistent bit convention in Section 5.~~\n- ~~(f9f173c) Clarify section 7.1.~~\n- ~~(4d375a2) Clarify Section 7.3~~\n- ~~(238d459) Clarify Section 8.~~\n SGTM. I made a seperate PR for Section 7.1. (f9f173c...)\n Could you create a new PR with the remaining two commits? This one does not seem to be mergeable any more.\n Abandoning, since this is getting too messy.\n  Hi,\n\nhow can I calculate the best values for lgwin and lgblock?\nIf I use the default values to compress a buffer with only a few KB, brotli allocates 8 MB for the ringbuffer.\nI think this makes no sense, so wouldnt it be a good idea to calculate the two values depending on the size of the data that should be compressed?\n\nthx\n Does this solution make sense?\n\n```\nparams.lgwin = 22;\n\nfor (int i = 10; i < 22; i++)\n{\n    if (encodedSize <= (1 << i))\n    {\n        params.lgwin = i;\n\n        break;\n    }\n}\n```\n lgwin can be up to 24 in brotli, but the maximum you want to use depends on the capabilities of the client running the decoder. For the mobile web use it might be wise to avoid the levels 23 and 24, and possibly smart to stay at 19.\n lgwin of 24 bit means more than 50 MB of memory usage.\n\nthe question is still active: does my code make sense, and wouldnt it be a good idea to add this functionality functionality to the param-class?\n Why not add the size as an optional parameter to BrotliParams() constructor?\n Yes, that would be good. \nAt least some formula on the documentation. I'm interested in knowing how can I limit the amount of memory used while decoding by tunning the encoding parameters,\n  To make `make` less confused.\n    If bits are to be parsed from left-to-right, then make the bit-strings left-justified.\nIf bits are to be parsed from right-to-left, then make the bit-strings right-justified.\n\nSection 3.1, which describes how prefix codes work shows prefix codes that are \"left-to-right\", which\nis better for demonstrating how the work. However, most of the rest of the document uses a \"right-to-left\"\nconvention. We should distinctly say at the end of section 3.1 that we are switching conventions.\n\nThus, change the prefix code in section 3.5 to be \"right-to-left\" to be consistent with sections 9.1\nand 9.2.\n\nAlso, change the variable names in section 7.3 to be consistent with those used in section 10.\n\nAlso, change the description of `MNIBBLES` to be `MNIBBLES - 4`, similar to the convention of saying\n`MLEN - 1`. Beforehand, the phrase \"If MNIBBLES is 0, then ...\" was unclear whether it meant MNIBBLES before the \"plus 4\" or after.\n For future pull requests regarding the spec, would you like me to collect all my thoughts into one big pull request? or would you like me to make small changes like this PR and the previous one?\n  I have a ~30GB text file filled with ascii numbers.\nIf I truncate to first 1GB, brotli outperforms gzip in size about ~20%.\nHowever, if I compress the whole file with quality 1, brotli compressed file is only 8% smaller.\nMore strange, if I compress the whole file with quality 6, brotli compressed file is actually 11% bigger than gzip.\n\nAny theory what is going on? Thanks.\n Tested on a 2.79GB file, results are same.\n\nEvery line in the file looks like the following one:\n\n```\n30878059857552670 50025829476611184 66874527287706175 375508968765795686 373127765632278220 375342102553363245 364326748989567069 366505919391298506 377457911994795327 363411424571894825 373898759588425536 374334808416099019 360760477436270128 361309365116896886 364352003089439073 375674008634286701 367152582065696876 367855851559397543 367273034879590470 373534666133923980 374767354319435320 364939151523857981 370766209358644373 368849862587483333 369375471723485160 360428992812683960 362756519526083575 368058669706273620 363374354726247701 383336502073316860 390840051326797822 389682673771031688 392042489058586768 382011509102760527 385448191113192450 384274092396816514 379180964994502905 382036106541650951 388203100937202784 393434223891394090 388010572174871871 380003376763688520 386570822226305665 380297123401928640 386596087792217231 383677090571341963 390567909615441534 389005466880157272 393969508707548020 387078554704535241 381737568827717361 392334530352732955 390266000934033127 394425453383066281 383385069065536734 389697536188506696 388212606095605133 388999121467810361 399878203990676585 405963764532775318 398673866377410605 404746856101231847 410863332993714830 399881472443165042 404307238551047893 404064578127766509 402851101716692827 396751564398309658 400444420333068725 408786268458861903 409681960326371980 400376894996149263 401096177915629208 397287185742754389 405113985967409613 413703204463637567 403771931572842749 402507102181568599 407150113799399139 400798926857979021 401045289602881283 407200800125504338 399083388635636878 411847794488541711 411032375813134263 410397688189064473 408149830613424760 404890282039985176 476848146289316439 469545715298139183 481242829052469824 478271635622728360 473675894149529551 470754644261353529 479402329352691534 472168062584460950 476539969431554962 479069280569433230 481430874913536310\n```\n Are these sorted 64-bit hashes?\n Yes, you can say that, @jyrkialakuijala.\nIt represents sparse feature.\n I have identified a problem in the hashing that degrades the compression performance after 2 GB for quality >= 5. We will fix this within three days.\n Sure, thanks.\nI've identified that it worked as expected with quality <= 4.\n Levels 5-9 should work in the head now. Level 11, the same as 10, is still misbehaving for files longer than 2 GB.\n  `encode.cc`:392\n\n```\n      static const int kSampleRate = 13;\n      static const double kMinEntropy = 7.92;\n      static const double kBitCostThreshold = bytes * kMinEntropy / kSampleRate;\n```\n\nkBitCostThreshold is cached once initialized. \nHowever, if brotli library is reused within the same process, first compress a small piece of data, then a large one will suffer from poor compression ratio, since some block will be misleadingly uncompressed.\n   Rebased.\n  Hi.\nI'm trying to build the lib using \"python setup.py build\" and I can see lib is placed at \"build/lib.macosx-10.10-intel-2.7/brotli.so\", however, I think .so file is not usable in MacOS, I expect to see a .dylib file, is this a problem? how to solve it please?\n\nThanks a lot! \n Yes, `.so` is the correct extension for Python extension modules on OS X. On \"win32\" the extension would be `.pyd`.\ndistutils gets it from sysconfig:\n\n``` python\nimport sysconfig\nprint(sysconfig.get_config_var('SO'))\n```\n Of course the setup.py script is only meant to build and install the Python bindings. If you are looking to build a shared library to link with other non-Python code, that's not the one to use.\nIn that case you can try  https://github.com/bagder/libbrotli\n Thanks @anthrotype , however, this .so file is working for me when I load it in Java via JNI interface (on Mac laptop). I was a little surprised, but it's working fine to compress my java bytes in memory. According to this, I guess this brotli.so is a \"shared library\". Anything misunderstood here... ?\n I am surprised it works.. Though that's not the intended purpose of a Python extension module. I'm sure others more knowledgeable of C/C++ or Java than me could suggest a better approach for what you're trying to do.\n @shawncao \nYou got brotli.so compiled under Mac OSX and running it in Java? Cool. \nHow do you managed to use the .so file from Java?\nWould you please provide some sources (e.g. via Github ghist)? \n  In the Python version, the allowed range of the Window is 16 to 24:\n`\n PyErr_SetString(BrotliError, \"Invalid lgwin. Range is 16 to 24.\");\n`\n\n`\n  params.add_argument('--lgwin', metavar=\"LGWIN\", type=int,\n                        choices=list(range(16, 25)),\n                        help='Base 2 logarithm of the sliding window size. Range is '\n                        '16 to 24. Defaults to 22.')\n`\n\nBut elsewhere, we see a different limit:\n\n`\n  // Base 2 logarithm of the sliding window size. Range is 10 to 24.\n  int lgwin;\n`\n\n`\n        if (*lgwin < 10 || *lgwin >= 25) {\n        goto error;\n`\n\nIs this expected?\n yes, it was changed with 6511d6b01629631ad76864fe499a27f36d448396\nthe python extension needs to be updated accordingly.\nthanks for spotting it!\n However, the latest draft of Brotli specification still says `16 to 24` though:\nhttps://github.com/google/brotli/blob/master/docs/draft-alakuijala-brotli-06.txt#L267\n\n> The sliding window size is a power of two, minus 16, where the power is in the range of 16 to 24.\n\nCould anyone confirm, before I send the patch, that for `--lgwin` the allowed range needs to be changed from the current `[16..24]` to `[10..24]`, like it says in `enc/encode.h` file, as per commit 6511d6b01629631ad76864fe499a27f36d448396?\nThanks.\n\n/cc @szabadka \n thanks to `grep` ;)\n  This patch is meant to address issue #200, by replacing all uses of `vector.data()` with `&vector[0]`.\n\nI also removed the distutils patch inside setup.py, so that the correct MSVC compiler version is selected automatically based on the python version (9.0 for Py2.7, 10.0 for Python 3.4, etc.) \n\nThe `import setuptools` at the beginning of setup.py is required to use the \"MS Visual C++ for Python 2.7\" (http://aka.ms/vcpython27). Unfortunately the stock distutils fails to locate the `vcvarsall.bat` file..\nThis issue is fixed in setuptools (which is now bundled along with pip with the latest Python.org installers, and is the recommended way to distribute Python packages).\n\nI know it looks terrible -- but at least shows how with little change we can make it work even with MSVC 9.0 and Windows Python 2.7.\n\nLet me know what you think.\nThanks\n Thanks!\nI've just rebased and forced-push to this same PR branch.\n\nThere was still one remaining instance of `.data()` inside `python/brotlimodule.cc`:\n\n```\n$ git grep \"\\.data()\"\npython/brotlimodule.cc:    ret = PyBytes_FromStringAndSize((char*)output.data(), output.size());`\n```\n\nI changed it to the following:\n\n``` diff\nif (ok) {\n-    ret = PyBytes_FromStringAndSize((char*)output.data(), output.size());\n+    ret = PyBytes_FromStringAndSize((char*)(output.size() ? &output[0] : NULL), output.size());\n   } else {\n```\n\nLet me know if that is ok.\n\nLet's cross fingers on the Appveyor Python 2.7 build: it should now be using its native MSVC 9.0...\n sorry for the typo: I meant, the Appveyor Py2.7 build should _now_ be using MSVC90\n it's working! :)\n  This is Ubuntu 14.04\n\n```\ng++ -I/usr/share/R/include -DNDEBUG     -Wno-sign-compare -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused -pedantic  -c wrapper.cc -o wrapper.o\n* installing *source* package \u2018brotli\u2019 ...\n** libs\nIn file included from enc/encode.h:23:0,\n                 from wrapper.cc:3:\nenc/./hash.h:104:14: warning: invoking macro length argument 1: empty macro arguments are undefined in ISO C90 and ISO C++98 [enabled by default]\n   int length() const {\n              ^\nenc/./hash.h:109:33: warning: invoking macro length argument 1: empty macro arguments are undefined in ISO C90 and ISO C++98 [enabled by default]\n     return code ? code : length();\n                                 ^\nIn file included from enc/./hash.h:34:0,\n                 from enc/encode.h:23,\n                 from wrapper.cc:3:\nenc/././transform.h:47:23: warning: comma at end of enumerator list [-Wpedantic]\n   kOmitFirst9     = 20,\n                       ^\nIn file included from wrapper.cc:3:0:\nenc/encode.h:54:18: warning: comma at end of enumerator list [-Wpedantic]\n     MODE_FONT = 2,\n                  ^\ngcc -std=gnu99 -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99 -c dec/bit_reader.c -o dec/bit_reader.o\ngcc -std=gnu99 -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99 -c dec/decode.c -o dec/decode.o\ngcc -std=gnu99 -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99 -c dec/dictionary.c -o dec/dictionary.o\ngcc -std=gnu99 -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99 -c dec/huffman.c -o dec/huffman.o\ngcc -std=gnu99 -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99 -c dec/state.c -o dec/state.o\ngcc -std=gnu99 -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99 -c dec/streams.c -o dec/streams.o\nar rcs libdec.a dec/bit_reader.o dec/decode.o dec/dictionary.o dec/huffman.o dec/state.o dec/streams.o\ng++ -I/usr/share/R/include -DNDEBUG     -Wno-sign-compare -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused -pedantic  -c enc/backward_references.cc -o enc/backward_references.o\nIn file included from enc/././hash.h:34:0,\n                 from enc/./backward_references.h:22,\n                 from enc/backward_references.cc:17:\nenc/./././transform.h:47:23: warning: comma at end of enumerator list [-Wpedantic]\n   kOmitFirst9     = 20,\n                       ^\ng++ -I/usr/share/R/include -DNDEBUG     -Wno-sign-compare -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused -pedantic  -c enc/block_splitter.cc -o enc/block_splitter.o\ng++ -I/usr/share/R/include -DNDEBUG     -Wno-sign-compare -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused -pedantic  -c enc/brotli_bit_stream.cc -o enc/brotli_bit_stream.o\nenc/brotli_bit_stream.cc:705:42: warning: use of C++0x long long integer constant [-Wlong-long]\n     uint64_t lenextra = cmd.cmd_extra_ & 0xffffffffffffULL;\n                                          ^\nenc/brotli_bit_stream.cc:811:48: warning: use of C++0x long long integer constant [-Wlong-long]\n     const uint64_t lenextra = cmd.cmd_extra_ & 0xffffffffffffULL;\n                                                ^\ng++ -I/usr/share/R/include -DNDEBUG     -Wno-sign-compare -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused -pedantic  -c enc/encode.cc -o enc/encode.o\nIn file included from enc/././hash.h:34:0,\n                 from enc/./encode.h:23,\n                 from enc/encode.cc:17:\nenc/./././transform.h:47:23: warning: comma at end of enumerator list [-Wpedantic]\n   kOmitFirst9     = 20,\n                       ^\nIn file included from enc/encode.cc:17:0:\nenc/./encode.h:54:18: warning: comma at end of enumerator list [-Wpedantic]\n     MODE_FONT = 2,\n                  ^\ng++ -I/usr/share/R/include -DNDEBUG     -Wno-sign-compare -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused -pedantic  -c enc/encode_parallel.cc -o enc/encode_parallel.o\nIn file included from enc/./././hash.h:34:0,\n                 from enc/././encode.h:23,\n                 from enc/./encode_parallel.h:23,\n                 from enc/encode_parallel.cc:17:\nenc/././././transform.h:47:23: warning: comma at end of enumerator list [-Wpedantic]\n   kOmitFirst9     = 20,\n                       ^\nIn file included from enc/./encode_parallel.h:23:0,\n                 from enc/encode_parallel.cc:17:\nenc/././encode.h:54:18: warning: comma at end of enumerator list [-Wpedantic]\n     MODE_FONT = 2,\n                  ^\ng++ -I/usr/share/R/include -DNDEBUG     -Wno-sign-compare -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused -pedantic  -c enc/entropy_encode.cc -o enc/entropy_encode.o\ng++ -I/usr/share/R/include -DNDEBUG     -Wno-sign-compare -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused -pedantic  -c enc/streams.cc -o enc/streams.o\ng++ -I/usr/share/R/include -DNDEBUG     -Wno-sign-compare -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused -pedantic  -c enc/histogram.cc -o enc/histogram.o\ng++ -I/usr/share/R/include -DNDEBUG     -Wno-sign-compare -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused -pedantic  -c enc/literal_cost.cc -o enc/literal_cost.o\ng++ -I/usr/share/R/include -DNDEBUG     -Wno-sign-compare -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused -pedantic  -c enc/metablock.cc -o enc/metablock.o\ng++ -I/usr/share/R/include -DNDEBUG     -Wno-sign-compare -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused -pedantic  -c enc/static_dict.cc -o enc/static_dict.o\nIn file included from enc/static_dict.cc:8:0:\nenc/./transform.h:47:23: warning: comma at end of enumerator list [-Wpedantic]\n   kOmitFirst9     = 20,\n                       ^\ng++ -I/usr/share/R/include -DNDEBUG     -Wno-sign-compare -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused -pedantic  -c enc/utf8_util.cc -o enc/utf8_util.o\nar rcs libenc.a enc/backward_references.o enc/block_splitter.o enc/brotli_bit_stream.o enc/encode.o enc/encode_parallel.o enc/entropy_encode.o enc/streams.o enc/histogram.o enc/literal_cost.o enc/metablock.o enc/static_dict.o enc/utf8_util.o\ng++ -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o brotli.so wrapper.o -L. -lenc -ldec -L/usr/lib/R/lib -lR\ninstalling to /usr/local/lib/R/site-library/brotli/libs\n```\n  Version is at 0.3.0 with no corresponding release?\n  What is the license of the paper [Comparison of Brotli, Deflate, Zopfli, LZMA, LZHAM and Bzip2 Compression Algorithms](http://www.gstatic.com/b/brotlidocs/brotli-2015-09-22.pdf)? Can I freely distribute this document?\n Thank you.\n  This is with gcc 4.6.3 on Windows. See [log file](http://pastebin.com/raw.php?i=QWDp6w27).\n  maybe you need to remove `enc/dictionary.h` and add `enc/dictionary.cc` to the list of sources and headers in the setup.py?\n never mind, the Appveyor build is passing now.\n  Hello!\nI had a trouble using BrotliMem(In/Out) adaptors while compressing large chunk of data ( > 3 GB).\nSo I'm sending PR that is supposed to fix this problem.\n Sure! Just did it.\n  Brotli currently always finds matches using \"cache tables\": each 4-byte (or 5-byte for lower quality compression) sequence is hashed and placed in a limited-size array of sequences which share the same hash code.  This works great in many cases but is not really well suited for large windows, especially in high compression modes.\n\nAn alternative which is used in LZMA and some other compressors is to have each hash bucket store a binary tree of sequences which share that hash code.  The tree is sorted in two ways: by sequences in lexicographic order, and as a minheap for distance (the shortest distances are at the top).  Matches can be found by searching for the current sequence in the tree, while re-rooting the tree.\n\nThere are normally two binary tree nodes allocated for each position in the sliding window, so this does require additional memory (8 times the sliding window size in bytes).\n\nI implemented this as a proof of concept to see what would happen.\n\nIt does indeed seem to be better; here are some example results with an uncompressed archive of the silesia corpus (211,941,764 bytes) at quality 11:\n\n```\nCurrent version: compressed to 51,973,280 bytes in 10 mins 10 secs\nWith binary tree matchfinder: compressed to 51,609,618 bytes in 7 mins 34 secs\n```\n\nThe code can be found at: repository https://github.com/ebiggers/brotli, branch \"bt_matchfinder\".  Please feel free to do whatever you want with the code.  I've left several TODOS in it.\n Tried the same data with a 16 MiB window:\n\nCurrent version: compressed to 51,587,583 bytes in 12 mins 29 secs\nWith binary tree matchfinder: compressed to 50,960,226 bytes in 8 mins 8 secs\n Hello.\n\n Thank you for your fantastic research!\n Changes that improve both speed and compression ratio are very valuable for any compressor.\n\n We are going to explore this solution and try to implement it in brotli.\n\n PS: sorry for the late response.\n Thanks for the suggestion, this was implemented in #306, mostly along the lines of your proof-of-concept.\n  Hi Brotli team,\ndespite me being one of Google \"haters\" let me share my 2 cents on current Brotli status.\n\nIn next several months I intend to juxtapose several high-performance textual compressors with one goal in mind - showing most balanced ones for high-ratio/high-decompression-speed scenario.\n\nYesterday I downloaded your 'master' zip and compiled (with several syntactic changes) with Intel v15.0 optimizer.\n\nIn my incoming showdown I want to include Brotli wanting to see how it performs in its best environment, I speak textual (mostly English texts) files.\n\n[Question #1:]\nSince my goal is to show tightness&decompression-speed top-performers, are following enforced defaults best?\n\nstruct BrotliParams {\n  BrotliParams()\n//      : mode(MODE_GENERIC),\n//        quality(11),\n//        lgwin(22),\n//        lgblock(0),\n//        enable_dictionary(true),\n//        enable_transforms(false),\n//        greedy_block_split(false),\n//        enable_context_modeling(true) {}\n\n```\n  : mode(MODE_TEXT),\n    quality(11),\n    lgwin(24),\n    lgblock(24),\n    enable_dictionary(true),\n    enable_transforms(false),\n    greedy_block_split(false),\n    enable_context_modeling(true) {}\n```\n\nIt would be very good to make these command line toggleable, no?\n\n[Question #2:]\nYour little announcement makes the impression Brotli is something special on text, what do I miss to see that? My quick test shows goodness but not greatness?\nThe below stats are for your yesterday commit compiled with Intel v15.0 (/O3 used), Brotli outperforms Shifune, but in decompression-speed department 3x is no joke, don't tell me if I use a browser or some English texts full-text browser/searcher Brotli will load 'dickens' faster than Zstd or even Shifune.\n\nD:>bro_Intel15.exe -i dickens -o dickens.brotli -v\nBrotli compression speed: 0.200944 MB/s\n\nD:>bro_Intel15.exe -i dickens.brotli -o dickens -v -d -f\nBrotli decompression speed: 142.945 MB/s\n\nD:>bro_Intel15.exe -i dickens.brotli -o dickens -v -d -f\nBrotli decompression speed: 138.861 MB/s\n\nD:>bro_Intel15.exe -i dickens.brotli -o dickens -v -d -f\nBrotli decompression speed: 145.079 MB/s\n\nD:>bro_Intel15.exe -i dickens.brotli -o dickens -v -d -f -r 5\nBrotli decompression speed: 144.647 MB/s\n\nD:>bro_Intel15.exe -i dickens.brotli -o dickens -v -d -f -r 5\nBrotli decompression speed: 145.513 MB/s\n\nD:>bro_Intel15.exe -i dickens.brotli -o dickens -v -d -f -r 20\nBrotli decompression speed: 145.841 MB/s\n\nD:>bro_Intel15.exe -i dickens.brotli -o dickens -v -d -f -r 40\nBrotli decompression speed: 144.701 MB/s\n\nD:>Nakamichi_Shifune_branchfull.exe dickens.Nakamichi /report\nNakamichi 'Shifune-Totenschiff', written by Kaze, based on Nobuo Ito's LZSS source, babealicious suggestion by m^2 enforced, muffinesque suggestion by Jim Dempsey enforced.\nNote: This compile can handle files up to 1711MB.\nDecompressing 3740418 bytes ...\nRAM-to-RAM performance: 512 MB/s.\nCompression Ratio (bigger-the-better): 2.72:1\n\nD:>dir dic*\n\n09/25/2015  03:32 AM        10,192,446 dickens\n09/25/2015  03:29 AM         2,962,118 dickens.brotli\n09/08/2015  02:33 AM         3,740,418 dickens.Nakamichi\n\nD:>\n\nThe above quick run was done on my Core 2 laptop, on Haswell the 3x may jump up to 5x hands down, hate that I don't have Haswell or alike to share the actual stats.\n\n[Question #3:]\nDon't you think that your defaults (encode.h) are too low, I do, my big test shows worse ratio than gzip?\n\nD:>zpaq64 add _Deathship_textual_corpus.tar.method58.zpaq _Deathship_textual_corpus.tar -method 58 -threads 1\nD:>bsc e _Deathship_textual_corpus.tar _Deathship_textual_corpus.tar.ST6Block256.bsc -b256 -m6 -cp -Tt\nD:>xz -z -k -f -9 -e -v -v --threads=1 _Deathship_textual_corpus.tar\nD:>lzturbo.exe -39 -b256 -p0 _Deathship_textual_corpus.tar _Deathship_textual_corpus.tar.256MB.lzturbo12-39.lzt\nD:>zpaq64 add _Deathship_textual_corpus.tar.method28.zpaq _Deathship_textual_corpus.tar -method 28 -threads 1\nD:>7za a -tgzip -mx9 _Deathship_textual_corpus.tar.zip _Deathship_textual_corpus.tar\nD:>bro_Intel15.exe -i _Deathship_textual_corpus.tar -o _Deathship_textual_corpus.tar.brotli -v\nD:>zstd.exe _Deathship_textual_corpus.tar\nD:>LZ4.exe -9 _Deathship_textual_corpus.tar\n\n09/12/2015 12:59 PM 1,125,281,882 _Deathship_textual_corpus.tar.method58.zpaq\n09/12/2015 02:34 AM 1,342,098,184 _Deathship_textual_corpus.tar.ST6Block256.bsc\n09/11/2015 11:56 AM 1,471,795,768 _Deathship_textual_corpus.tar.xz\n09/13/2015 07:31 PM 1,484,820,599 _Deathship_textual_corpus.tar.256MB.lzturbo12-39.lzt\n09/14/2015 09:18 AM 1,800,083,824 _Deathship_textual_corpus.tar.method28.zpaq\nHere comes Nakamichi 'Shifune' ...\n09/13/2015 06:29 AM 2,181,159,237 _Deathship_textual_corpus.tar.zip\n09/24/2015 11:36 PM 2,382,646,308 _Deathship_textual_corpus.tar.brotli\n09/13/2015 03:04 AM 2,491,454,533 _Deathship_textual_corpus.tar.zst\n09/13/2015 07:50 AM 2,626,828,543 _Deathship_textual_corpus.tar.lz4\n09/11/2015 06:41 AM 8,090,119,168 _Deathship_textual_corpus.tar\n\nA glimpse at my unfinished latest benchmark:\nwww.sanmayce.com/Hayabusa/Deathship_showdown.pdf\nwww.sanmayce.com/Hayabusa/Nakamichi_Shifune.pdf\n\n[Suggestion #1:]\nYour time reports seem problematic, I receive 0 MB/s for big files. Please make Brotli with '-b' benchmark or '-t' test (decompression without dump) ability, Zstd&Z4 have very good report.\nYour current speed report includes 'fwrite()' time, I want Brotli's pure RAM-2-RAM performance.\n\n[Suggestion #2:]\nMake it compileable with Intel C/C++ optimizer, this will be appreciated by me for one. Current changes in bro.cc (I made) to run it:\n#1:\n\n```\n    //#include <unistd.h>\n    #include <time.h>\n    #include <fcntl.h>\n    #include <io.h>\n```\n#2:\n\n```\nstatic FILE* OpenInputFile(const char* input_path) {\n//  if (input_path == 0) {\n//    return fdopen(STDIN_FILENO, \"rb\");\n//  }\n/*\ntools\\bro.cc(136): error: identifier \"STDIN_FILENO\" is undefined\n      return fdopen(STDIN_FILENO, \"rb\");\n                    ^\n*/\n  if (input_path == 0) {\n    setmode(_fileno( stdin ), O_BINARY);\n    return stdin;\n  }\n\n// https://msdn.microsoft.com/en-us/library/aa298581%28v=vs.60%29.aspx\n/*\n   int result;\n   // Set \"stdin\" to have binary mode:\n   result = _setmode( _fileno( stdin ), _O_BINARY );\n   if( result == -1 )\n      perror( \"Cannot set mode\" );\n   else\n      printf( \"'stdin' successfully changed to binary mode\\n\" );\n*/\n\n  FILE* f = fopen(input_path, \"rb\");\n  if (f == 0) {\n    perror(\"fopen\");\n    exit(1);\n  }\n  return f;\n}\n\nstatic FILE *OpenOutputFile(const char *output_path, const int force) {\n//  if (output_path == 0) {\n//    return fdopen(STDOUT_FILENO, \"wb\");\n//  }\n/*\ntools\\bro.cc(148): error: identifier \"STDOUT_FILENO\" is undefined\n      return fdopen(STDOUT_FILENO, \"wb\");\n                    ^\n*/\n  if (output_path == 0) {\n    setmode(_fileno( stdout ), O_BINARY);\n    return stdout;\n  }\n  if (!force) {\n    struct stat statbuf;\n    if (stat(output_path, &statbuf) == 0) {\n      fprintf(stderr, \"output file exists\\n\");\n      exit(1);\n    }\n  }\n//  int fd = open(output_path, O_CREAT | O_WRONLY | O_TRUNC,\n//                S_IRUSR | S_IWUSR);\n/*\ntools\\bro.cc(158): error: identifier \"S_IRUSR\" is undefined\n                  S_IRUSR | S_IWUSR);\n                  ^\n\ntools\\bro.cc(158): error: identifier \"S_IWUSR\" is undefined\n                  S_IRUSR | S_IWUSR);\n                            ^\n*/\n  FILE* f = fopen(output_path, \"wb\");\n/*\n  if (fd < 0) {\n    perror(\"open\");\n    exit(1);\n  }\n  return fdopen(fd, \"wb\");\n*/\n  if (f == 0) {\n    perror(\"fopen\");\n    exit(1);\n  }\n  return f;\n}\n```\n\nAnd the actual console dump of how the compilation went:\n\n// The next log/source is modified (for Windows compatibility) Brotli:\n\n```\n/*\nD:\\brotli-master>type makeEXE.bat\ncd dec\nicl /O3 /c bit_reader.c decode.c huffman.c state.c streams.c\ncd..\ncd enc\nicl /O3 /c backward_references.cc block_splitter.cc brotli_bit_stream.cc encode.cc encode_parallel.cc entropy_encode.cc histogram.cc literal_cost.cc metablock.cc static_dict.cc streams.cc\ncd..\ncd tools\nicl /O3 bro.cc ..\\dec\\bit_reader.obj ..\\dec\\decode.obj ..\\dec\\huffman.obj ..\\dec\\state.obj ..\\dec\\streams.obj ..\\enc\\backward_references.obj ..\\enc\\block_splitter.obj ..\\enc\\brotli_bit_stream.obj ..\\enc\\encode.obj ..\\enc\\encode_parallel.obj ..\\enc\\entropy_encode.obj ..\\enc\\histogram.obj ..\\enc\\literal_cost.obj ..\\enc\\metablock.obj ..\\enc\\static_dict.obj ..\\enc\\streams.obj\n\nD:\\brotli-master>makeEXE.bat\n\nD:\\brotli-master>cd dec\n\nD:\\brotli-master\\dec>icl /O3 /c bit_reader.c decode.c huffman.c state.c streams.c\nIntel(R) C++ Intel(R) 64 Compiler XE for applications running on Intel(R) 64, Version 15.0.0.108 Build 20140726\nCopyright (C) 1985-2014 Intel Corporation.  All rights reserved.\n\nbit_reader.c\ndecode.c\nhuffman.c\nstate.c\nstreams.c\n\nD:\\brotli-master\\dec>cd..\n\nD:\\brotli-master>cd enc\n\nD:\\brotli-master\\enc>icl /O3 /c backward_references.cc block_splitter.cc brotli_bit_stream.cc encode.cc encode_parallel.cc entropy_encode.cc histogram.cc literal_cost.cc metablock.cc static_dict.cc streams.cc\nIntel(R) C++ Intel(R) 64 Compiler XE for applications running on Intel(R) 64, Version 15.0.0.108 Build 20140726\nCopyright (C) 1985-2014 Intel Corporation.  All rights reserved.\n\nbackward_references.cc\nblock_splitter.cc\nbrotli_bit_stream.cc\nencode.cc\nencode_parallel.cc\nentropy_encode.cc\nhistogram.cc\nliteral_cost.cc\nmetablock.cc\nstatic_dict.cc\nstreams.cc\n\nD:\\brotli-master\\enc>cd..\n\nD:\\brotli-master>cd tools\n\nD:\\brotli-master\\tools>icl /O3 bro.cc ..\\dec\\bit_reader.obj ..\\dec\\decode.obj ..\\dec\\huffman.obj ..\\dec\\state.obj ..\\dec\\streams.obj ..\\enc\\backward_references.obj ..\\enc\\block_splitter.obj ..\\enc\\brotli_bit_stream.obj ..\\enc\\encode.obj ..\\enc\\encode_parallel.obj ..\\enc\\entropy_encode.obj ..\\enc\\histogram.obj ..\\enc\\literal_cost.obj ..\\enc\\metablock.obj ..\\enc\\static_dict.obj ..\\enc\\streams.obj\nIntel(R) C++ Intel(R) 64 Compiler XE for applications running on Intel(R) 64, Version 15.0.0.108 Build 20140726\nCopyright (C) 1985-2014 Intel Corporation.  All rights reserved.\n\nbro.cc\nMicrosoft (R) Incremental Linker Version 10.00.30319.01\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n-out:bro.exe\nbro.obj\n..\\dec\\bit_reader.obj\n..\\dec\\decode.obj\n..\\dec\\huffman.obj\n..\\dec\\state.obj\n..\\dec\\streams.obj\n..\\enc\\backward_references.obj\n..\\enc\\block_splitter.obj\n..\\enc\\brotli_bit_stream.obj\n..\\enc\\encode.obj\n..\\enc\\encode_parallel.obj\n..\\enc\\entropy_encode.obj\n..\\enc\\histogram.obj\n..\\enc\\literal_cost.obj\n..\\enc\\metablock.obj\n..\\enc\\static_dict.obj\n..\\enc\\streams.obj\n\nD:\\brotli-master\\tools>dir br*.exe\n Volume in drive D is S640_Vol5\n Volume Serial Number is 5861-9E6C\n\n Directory of D:\\brotli-master\\tools\n\n09/24/2015  06:56 AM         1,250,304 bro.exe\n               1 File(s)      1,250,304 bytes\n               0 Dir(s)   5,917,040,640 bytes free\n\nD:\\brotli-master\\tools>bro\n;\nD:\\brotli-master\\tools>bro /?\nUsage: bro [--force] [--quality n] [--decompress] [--input filename] [--output filename] [--repeat iters] [--verbose]\n\nD:\\brotli-master\\tools>\n*/\n```\n\nAnd a final note, a byte angry, in your promoting paper you say \"Decompresses much faster than current LZMA implementations\", usually amateurs like me use 2x, 3x or 15x, your much is not good, one would think from 2x to 20x.\nAlso why don't you mention the current best (IMO) decompressor on INTERNET?! Not mentioning it (LzTurbo) is like disrespecting not only the man behind it but the BEST as a general notion, yes?\n\nHope you will refine Brotli and make it usable hi-performance console tool.\n\nRegards,\nKaze\n > The above quick run was done on my Core 2 laptop, on Haswell the 3x may jump up to 5x hands down, hate that I don't have Haswell or alike to share the actual stats.\n\nI am not alone, one overclocker helped me a lot to benchmark your Brotli against the superb Zstd and my Shifune:\n- 1st column: Intel Core 2 Q9550s @2833MHz laptop Asus;\n- 2nd column: Intel i7 5960x 'Haswell E/EP' core/cache @4700MHz/@4200MHz RAM @2666MHz; MOBO Asus Rampage V Extreme; http://cdn.overclock.net/8/8b/8b2c8f32_decompshowdown.jpeg\n- 3rd column: Intel Core i5 6600K 'Skylake' core/cache @4700MHz/4500MHz RAM @3200MHz CL15; MOBO Asus Maximus VIII Extreme; http://cdn.overclock.net/6/6b/6b1770b9_decompshowdown.jpeg\n\n```\nD:\\Showdown_Brotli_vs_Zstd_vs_GZIP_vs_Shifune>dir\n\n09/26/2015 10:08 PM  13,713,275 Complete_Works_of_Fyodor_Dostoyevsky.txt\n09/26/2015 10:35 PM   3,717,191 Complete_Works_of_Fyodor_Dostoyevsky.txt.4MB.lzturbo12-39.lzt\n09/26/2015 10:16 PM   3,717,583 Complete_Works_of_Fyodor_Dostoyevsky.txt.brotli                         ! 153.228 MB/s; 364.29 MB/s; 397.508 MB/s !\n09/08/2015 02:33 AM   4,582,363 Complete_Works_of_Fyodor_Dostoyevsky.txt.Nakamichi                      ! 448 MB/s; 2112 MB/s; 1728 MB/s!\n09/26/2015 10:19 PM   4,617,360 Complete_Works_of_Fyodor_Dostoyevsky.txt.zip\n09/26/2015 10:11 PM   5,209,670 Complete_Works_of_Fyodor_Dostoyevsky.txt.zst                            ! 302.5 MB/s; 619.8 MB/s; 628.3 MB/s !\n\n09/26/2015 10:08 PM  10,192,446 dickens\n09/26/2015 10:35 PM   2,976,910 dickens.4MB.lzturbo12-39.lzt\n09/26/2015 10:17 PM   2,962,118 dickens.brotli                                                          ! 146.61 MB/s; 336.342 MB/s; 374.577 MB/s !\n09/08/2015 02:33 AM   3,740,418 dickens.Nakamichi                                                       ! 448 MB/s; 1984 MB/s; 1664 MB/s !\n09/26/2015 10:19 PM   3,681,828 dickens.zip\n09/26/2015 10:11 PM   4,134,924 dickens.zst                                                             ! 298.9 MB/s; 619.7 MB/s; 623.8 MB/s !\n\n09/26/2015 10:09 PM 100,000,000 enwik8\n09/26/2015 10:37 PM  29,148,393 enwik8.4MB.lzturbo12-39.lzt\n09/26/2015 10:24 PM  27,722,164 enwik8.brotli                                                           ! 134.094 MB/s; 285.19 MB/s; 305.225 MB/s !\n09/08/2015 02:33 AM  34,218,460 enwik8.Nakamichi                                                        ! 256 MB/s; 1024 MB/s; 1152 MB/s !\n09/26/2015 10:21 PM  35,102,891 enwik8.zip\n09/26/2015 10:11 PM  40,024,854 enwik8.zst                                                              ! 325.0 MB/s; 651.6 MB/s; 653.8 MB/s !\n\n09/26/2015 10:09 PM  14,613,183 The_Book_of_The_Thousand_Nights_and_a_Night.txt\n09/26/2015 10:37 PM   4,241,855 The_Book_of_The_Thousand_Nights_and_a_Night.txt.4MB.lzturbo12-39.lzt\n09/26/2015 10:19 PM   4,163,630 The_Book_of_The_Thousand_Nights_and_a_Night.txt.brotli                  ! 144.867 MB/s; 336.624 MB/s; 372.129 MB/s !\n09/08/2015 02:33 AM   5,293,102 The_Book_of_The_Thousand_Nights_and_a_Night.txt.Nakamichi               ! 384 MB/s; 1984 MB/s; 1600 MB/s !\n09/26/2015 10:22 PM   5,198,949 The_Book_of_The_Thousand_Nights_and_a_Night.txt.zip\n09/26/2015 10:11 PM   5,932,453 The_Book_of_The_Thousand_Nights_and_a_Night.txt.zst                     ! 305.8 MB/s; 625.4 MB/s; 631.3 MB/s !\n\n09/26/2015 10:09 PM   4,445,260 The_Project_Gutenberg_EBook_of_The_King_James_Bible_kjv10.txt\n09/26/2015 10:37 PM   1,089,279 The_Project_Gutenberg_EBook_of_The_King_James_Bible_kjv10.txt.4MB.lzturbo12-39.lzt\n09/26/2015 10:19 PM   1,087,439 The_Project_Gutenberg_EBook_of_The_King_James_Bible_kjv10.txt.brotli    ! 160.277 MB/s; 339.146 MB/s; 370.247 MB/s !\n09/08/2015 02:33 AM   1,441,679 The_Project_Gutenberg_EBook_of_The_King_James_Bible_kjv10.txt.Nakamichi ! 704 MB/s; 2432 MB/s; 2368 MB/s !\n09/26/2015 10:22 PM   1,320,100 The_Project_Gutenberg_EBook_of_The_King_James_Bible_kjv10.txt.zip\n09/26/2015 10:11 PM   1,537,047 The_Project_Gutenberg_EBook_of_The_King_James_Bible_kjv10.txt.zst       ! 320.7 MB/s; 656.1 MB/s; 668.6 MB/s !\n\n09/26/2015 10:09 PM   3,265,536 University_of_Canterbury_The_Calgary_Corpus.tar\n09/26/2015 10:37 PM     921,958 University_of_Canterbury_The_Calgary_Corpus.tar.4MB.lzturbo12-39.lzt\n09/26/2015 10:19 PM     867,503 University_of_Canterbury_The_Calgary_Corpus.tar.brotli                  ! 144.849 MB/s; 266.176 MB/s; 283.114 MB/s !\n09/08/2015 02:33 AM   1,319,701 University_of_Canterbury_The_Calgary_Corpus.tar.Nakamichi               ! 576 MB/s; 1792 MB/s; 1792 MB/s !\n09/26/2015 10:22 PM   1,017,658 University_of_Canterbury_The_Calgary_Corpus.tar.zip\n09/26/2015 10:11 PM   1,174,349 University_of_Canterbury_The_Calgary_Corpus.tar.zst                     ! 367.3 MB/s; 740.6 MB/s; 747.2 MB/s !\n\nD:\\Showdown_Brotli_vs_Zstd_vs_GZIP_vs_Shifune>\n```\n\nNote: Skylake is good, however being newer than Broadwell I expected more.\n ![github](https://cloud.githubusercontent.com/assets/14062548/10122308/693c5ac8-651d-11e5-9dca-df9e01bf7e8a.png)\n\nI was wrong about 5x hands down, in fact it is 4x-6x.\n Just a note on the unfairness about comparing LzTurbo, I deliberately hurt the compression ratio of LzTurbo by choosing 4MB block, my intention was to silent the empty-talkers who always complain, using 4MB sliding window gives significantly better compression since the inheritance in chunks/blocks is lost, this is in its turn unfair to LzTurbo!\n\nNowadays, with constantly growing #cores & #caches & RAM size the bigger is the better, so all these resources have to be utilized not like now - UNDERUTILIZED.\nHowever, running with small resources footprint is so cool - BUT ONLY IN HEAVY MULTI-THREADING, yes?!\n  I was trying to compress a 30GB sqlite file with data from wikipedia on a machine with 1GB of memory.\nAnd the command crash with std::bad_alloc on quality 11, 10 and 9.\n\nCommand was running on Debian 8.1 x64 compiled with G++ 4.9.2\n Could you share a link to the db file, please.\n\nI've experimented with file that contains 32 copies on enwik9 and memory usage peak is 837M...\n   Hello.\n\nshared.mk is used to extract common configuration from makefiles.\n\nBut currently we have no library targets...\n\nWhat is the disadvantage of placing \"-fPIC\" simply to CFLAGS and CXXFLAGS environment variables?\n I made a lua binding, it must be a .so. It not user friendly to build my binding with\n\n```\nCFLAGS=-fPIC CXXFLAGS=-fPIC make\n```\n\ninstead of just\n\n```\nmake\n```\n\nNow, My makefile call\n\n```\nmake $(MAKE) -C brotli/enc\nmake $(MAKE) -C brotli/dec\n```\n\nBut I think I can embed `brotli/enc/*.o` and `brotli/dec/*.o` into my makefile.\n\nThanks\n I put up a separate build project that builds a shared and/or static libbrotli library out of the brotli source code and it should use -fPIC already when necessary: https://github.com/bagder/libbrotli\n  I've long been a promonent of integrating LZMA2/LZMA into the browsers because of its incredible effectiveness for compressing binary data streams.  When I saw Brotli I thought that this was likely going to be just as good.  It isn't actually great.\n\nI am a frequent contributor to both http://ThreeJS.org as well as the http://Clara.io online 3D editor.  One of the biggest issues we run into is the size of mesh downloads.  Right now we are using LZMA.js scripts to do the decompression in worker threads, but this isn't optimal, especially on mobile.\n\nFor example, this real-world large-ish binary trimesh stream, very typical:\n\nhttps://d3ijcvgxwtkjmf.cloudfront.net/a4c3c7313b7bdeb68ad46a7e1b761f38z?filename=object-53-batman-tumbler-lw8-12.bingeom\n\nThe original size once downloaded is 6,779,000 bytes (be careful, this stream may be delivered with \"Content-Encoding: gzip\".)\n\nHere are the compression results:\n- LZMA\n  - Normal: 921,600 bytes\n  - Ultra: 920,147 bytes\n- GZip\n  - Normal: 2,296,362 bytes\n  - Ultra: 2,258,967 bytes\n- Brotli\n  - Normal and Ultra: 1,513,459 bytes.  [(source)](https://news.ycombinator.com/item?id=10258109)\n\nBrotli is significantly less effective that LZMA in this case -- not just a little but by a huge margin.\n\nWhat this means is that we can not replace our LZMA.js scripts with Brotli support.  This is pretty bad for us in the 3D community as we are still stuck with JavaScript-based decompression.\n I can confirm these results. At least for the example above brotli is about 10x slower with the default settings and still performs much worse than `xz`:\n\n``` r\n> # Compare size\n> length(x)\n[1] 6779000\n> system.time(print(length(brotli_compress(x))))\n[1] 1369587\n   user  system elapsed \n 26.702   0.672  27.371 \n> system.time(print(length(brotli_compress(x, mode = \"font\"))))\n[1] 1353634\n   user  system elapsed \n 26.417   0.624  27.038 \n> system.time(print(length(memCompress(x, \"gzip\"))))\n[1] 2323522\n   user  system elapsed \n  0.358   0.001   0.359 \n> system.time(print(length(memCompress(x, \"bzip2\"))))\n[1] 2289619\n   user  system elapsed \n  0.661   0.004   0.664 \n> system.time(print(length(memCompress(x, \"xz\"))))\n[1] 937728\n   user  system elapsed \n  2.006   0.045   2.050 \n```\n @bhouston why are you suck with JavaScript-based compression? There are C implementations of lzma?\n @jeroenooms I want to send LZMA compressed mesh data to our WebGL viewer that runs in JavaScript:\n\nhttps://clara.io/view/d3b82831-d56b-462f-b30c-500ea1c7f870\n\nThus I need to have browser-based client side decompression.  I would love it if LZMA or an equivalent (I was hoping Brotli) was integrated into all browsers, but as it stands, only gzip and deflate are available.  Thus yo have to use LZMA.js for browser-based LZMA decompression.\n Perhaps their main selling point is that decompression is faster than for lzma, to make things easier on the client. But I agree that the difference in compression ratio very big, given the proposal states that:\n\n>  This specification defines a lossless compressed data format that compresses data using a combination of the LZ77 algorithm and Huffman coding, with efficiency comparable to the best currently available general-purpose compression methods.\n @jeroenooms I think that LZMA also requires significant maximum memory for decompression, which Brotli may be improving upon.\n\nIt would be near if you could re-run your statistics with decompression times and maximum memory instead of compression times, if that was easy.  Maybe that will better emphasize Brotli's benefits?\n @bhouston yes it seems like brotli does outperform everyone in terms of decompression speed. It is similar, sometimes  bit faster than gzip. But I have yet to find an example where the compression ratio is better than xy or bzip2. \n Where I can read about TriMesh binary format?\nI have a feeling, that transposing and demuxing tables would make the file more compressible, especially by encoders with lower rank context modeling (zlib and brotli).\n I can also confirm that brotli sucks with some binary and text files using the GENERIC / TEXT setting! I can zip up the brotli source code on my mac down to 8.3MB using the standard archiver utility. If I try to archive the brotli source code using brotli it increases it from 19.8MB to 33.3MB with a quality setting of 6! Even with a quality of 11 it is still 31MB! I have tried both ways, where I combine the binary of all files into one file and compress or compressing individual files and combining into one file. Either way it works out to the same amount some how.\n\nNow, I have to hand it to brotli when it comes to a 5200x2500 image file which is 2.8MB in jpeg form at 100% quality. Brotli is able to compress it down to 900KB with just a quality of 6. With a quality of 11 it gets it down to 813KB roughly. It is a simple graphic of a logo though. However, it is better than a PNG version of the logo. A PNG version of the logo is 1.98MB. So, hey at least that is an improvement!\n I have checked lzturbo 1.2 ( https://sites.google.com/site/powturbo/home ) on this file:\n-49 mode: 894,729 \n-39 mode 1,256,602\nand LZA 0.82 ( http://encode.ru/threads/1969-LZA-archiver ): 995,014  \n\nI think the main issue is that Brotli still uses Huffman coding, which is terrible at skewed probability distributions, characteristic for some types of data. More recent compressors use ANS coding instead (lzturbo, LZA, LZNA, ZSTD, Apple LZFSE), which allows to repair it still maintaining the speed.\n My guess was right. Even without knowing the format, it is easy to improve compression ratio.\n\nStep 1: split odd and even bytes, e.g. with python script\n\n```\nf = open(\"input\", \"rb\")\nK = 2\nd = [[] for k in range(K)]\ni = 0\nb = f.read(1)\nwhile b != \"\":\n  d[i % K].append(b)\n  i = i + 1\n  b = f.read(1)\nf.close()\n\nf = open(\"output\", \"wb\")\nfor k in range(K):\n  f.write(''.join(d[k]))\nf.close()\n```\n\nStep 2: compress\nStep 3: profit!\n- Zopfli: 1,847,682 bytes (~22% smaller)\n- Brotli: 1,172,693 bytes (~29% smaller)\n\nI believe that with smarter transform results will be even better.\n > My guess was right. Even without knowing the format, it is easy to improve compression ratio.  Step 1: split odd and even bytes, e.g. with python script\n\nWeird approach but it gave good results.  The file is a bit of a mish-mash between float and integer data.  It will exhibit a 32-bit alignment pattern as it is filled mostly with 32 bit floats and 32 bit floats with some exceptions and we do align all internal data array starts on 32-bit boundaries for JavaScript ArrayBuffer access efficiency.\n\nAs some asked, a trimesh / polymesh format is for representing piece-wise linear objects in 3D.  This format supports both trimeshes and polygon meshes:\n\nhttps://en.wikipedia.org/wiki/Triangle_mesh\nhttps://en.wikipedia.org/wiki/Polygon_mesh\n\nIt is composed of a list of 3D positions (X,Y,Z as 32 bit floats triples), and then a list of integers which state how those points are connected to form triangles or polygons, (one list of integers which states how many points per face/polygon, and then another list of those indices for each face) and then it contains normals (more XYZ 32 bit float triples) and UVs (UV 32 bit float pairs) and more integers that state how these are to be used by the faces/polygons (these are called polygon mappings.)  This format actually will change the precision of the integers it uses from 8 to 16 to 32 bit depending upon their required maximum values, but I believe this files is mostly 32 bit integers because it is on the larger size (more than 65K vertices/points, and thus it exceeds the range of 16 bit integers.)\n One of reasons might be the fact that the first 9 bits of float ( https://en.wikipedia.org/wiki/Single-precision_floating-point_format ) is sign and exponent, which should be nearly the same for most of points. Also the next 8 bits: the most significant of the fraction, should be similar for neighboring points.\nSo if you group even or odd positions, you make these similar bytes closer and so simpler for compressor to use their similarity (most of them work on bytes).\n\nBut generally, these formats seem extremely wasteful - you could probably get an order of magnitude better compression with a cheap but dedicated compressor.\nStarting with storing differences instead of absolute positions, additionally entropy coder coder should be used for the most significant digits.\nStoring the mesh is a graph compression problem and mesh is a very specific one - should be cheaply compressible.\nMy first thought is to cover all triangles with a tree (like in https://en.wikipedia.org/wiki/File:Icosaedro_desarrollo.gif ) - then go through the tree and add new information for each node: usually one vertex per node - just store the difference of its position to the previous ones. \nOr even less as it has to agree with neighbors - one distance per node (difference from equilateral triangle) seems sufficient.\n > But generally, these formats seem extremely wasteful - you could probably get an order of magnitude better compression with a cheap but dedicated compressor.\n\nOur data is representative of a lot of non-video large binary streams -- it is composed of long streams of floats and integers, exactly what should be in a binary data stream.  Our case is an easy one because they are even 32-bit boundary aligned.  Of course we could write a custom compressor but then it will be in JavaScript again and we lose the speed and memory benefits of having it integrated into the browser.  It would also take a lot of time for us and also force that on all other 3D developers -- thus it is not a globally efficient solution nor a locally efficient solution.\n\nI would prefer to just use LZMA.js in that case or a browser-based compression tool that produces similar results.  Basically saying that I have to write a custom compression scheme because Brotli is inadequate compared to LZMA is not an acceptable answer.  We have good general purpose compression schemes for a reason and right now Brotli isn't one, even though it claims to be.\n If decompression in java is your requirement, LZMA would be still much slower than dedicated compressor I have sketched.\nBut generally I also think that it is too early to declare Brotli as a new standard - it is still far from state-of-art compressors ( http://encode.ru/threads/2313-Brotli?p=44970&viewfull=1#post44970 ) and uses Huffman making it terrible if skewed probability file happen.\n > My first thought is to cover all triangles with a tree (like in https://en.wikipedia.org/wiki/File:Icosaedro_desarrollo.gif ) - then go through the tree and add new information for each node: usually one vertex per node - just store the difference of its position to the previous ones. \n> Or even less as it has to agree with neighbors - one distance per node (difference from equilateral triangle) seems sufficient.\n\nThis sounds like the triangle strip idea:  https://en.wikipedia.org/wiki/Triangle_strip\n\nBut the standard storage format for Triangle Strips is still a list of vertices as XYZ 32 bit floats and then a long list of 32 bit integers.\n\nI am interested a bit in general purpose compressors, but only if they are easy to implement and ultra fast and give better results than LZMA.\n\nSo if I understand one could easily write a special purpose compressor for lists of 32 bit floats.  Basically you want a reordering of the positions to have neighbors close by, then an adjustment of their space to be fully positive in XYZ.  And then a reordering of their internal bytes.  And then I need to send this into a general purpose compression stream of some type -- what would you recommend?  One can do that fairly simply I guess.  This covers the compression of the 32bit floats.\n\nWhat would you do with the 32bit integers to maximize compression?  If one does a neighbor reordering of the XYZ positions, that imposes an ordering on the 32bit integers which reference those points.  Basically one can only impose an order on either the integers or the XYZ positions, but not both easily.\n Indeed imposing an order is difficult, better is to directly encode parameters of the \"triangle strip\":\n- first you have to encode the structure of the tree. For a triangular lattice you have full binary tree - their number is Catalan number, you need ~1 bit/node: if this is a leaf or not. \n  Comparing to 3x32 vertex numbers, it means 96x compression.\n- then you don't need 3 float numbers per vertex - imagine such triangular lattice you want to bend - there are lots of constraints due to the fact that lengths of triangle edges have to agree. It is sufficient to store 1 length per node of the tree - e.g. length of its edge on the right (on the left is from its neighbor).\n  Then decoder would need to perform the bending - it is a few trigonometric operations per node - really cheap comparing to what LZMA does.\n\nRegarding using floats - you store mostly very similar numbers - their exponent and sign (9 of 32 bits) are probably identical, also the most significant bits of the fraction.\nUsing fixed-precision numbers instead you should directly get like 1/2 savings.\nAnd their most significant digits are usually from some localized probability distribution, especially if you encode differences - you can use entropy coder for them.\n @JarekDuda Very interesting.  Our case is a bit more complex than what is outlined, and would require a fair bit of work to deduce, but I bet there is a good algorithm to be had in the end.\n I have started a general discussion about shape compression ( http://encode.ru/threads/2324-Data-compression-of-a-%283D%29-shape-e-g-of-TriMesh-or-a-chemical-molecule ) and was pointed a nice paper:\nhttp://www.cc.gatech.edu/~jarek/papers/Compression.pdf\nIt says we need ~1byte/triangle, what agrees with what I have written.\nIn contrast, the standard you have described uses 3x4 bytes per vertex plus ~3x4 bytes/triangle for labels - we are talking about a cheap ~20x compression, 3 times better than the best discussed above (which are much more expensive).\nIt's sad that standards are so wasteful ... it's what's happening when engineers don't talk with theoreticians ...\n @JarekDuda Just be careful that there are two major different mesh formats, one is purely for playback in a video game -- limited trimesh format with a fixed number of channels, and there is a second more general polygon format with arbitrary named channels -- also used for playback when one needs additional channels or knowledge of the polygonal structure.  Both are heavily used for data transfer needs.  I have interests in both.\n\nBTW the current most popular open mesh compression format is OpenCTM.  I think it is mostly LZMA: http://openctm.sourceforge.net/  And then this for in browser decompression: https://github.com/jcmellado/js-openctm\n I'm now seeing 1'236'531 bytes with --quality 11 --window 24. I have some ideas (using more LSB6/MSB6 context modeling and less blocks) that we will try out later this year, with an expected 5-10 % more compression for this kind of data.\n > BTW the current most popular open mesh compression format is OpenCTM. I think it is mostly LZMA:\n\nit is LZMA _plus_ vertices and triangles reordering, to improve compression:\nhttps://github.com/Danny02/OpenCTM/blob/master/lib/compressMG2.c#L191-L212\n\nThis scheme could probably be improved, but there are several constraints to take into account. IMHO the input mesh topology is the biggest constraint : as an example, you cannot perform triangle strip compression on a triangle soup, where all vertices are disconnected.\n I understand re-ordering the vertices as well as splitting out the Y, X and Z into linear arrays so that it is X0, X1, X2, X3.... Y0, Y1, Y2.... Z0, Z1, Z2, is better.\n But maybe you are corrent that OpenCTM is the best solution, maybe it is better than I thought.  I apologize.\n Those are fairly significant improvements to brotli.  That is nice.  It doesnt' have to his LZMA compression level, but 25% improvements over what it was is hugely significant.  What was the compression time for this file at level 11?\n @bhouston :  I wonder if \"utf8 webgl-loader\" mesh compression, with brotli is a better option than gzip ?  I did a quick test on the utf8 data here: http://webgl-tests.crbs.ucsd.edu/obj-viewer/?model=test\nand brotli ratio seemed comparable to lzma.\n60MB obj file (original file)\n12MB utf8 file...\n4.5MB utf8.gz (using default)\n3.4MB utf8.br (using q11, w24)\n3.4MB utf8.xz (using default)\n\nThe ideas in Won's utf8 webgl loader do the specialized transform that @eustas (and @JarekDuda)  mentioned, but it sounds like you want to avoid any deserializing in js land?\n  'brot' supports the same common usage as gzip/bzip2/xz .\n\nadd two test scripts:\n- brot-test.sh compares behaviour with gzip/bzip2/xz\n- brot-size-test.sh compares compression sizes with gzip/bzip2/xz\n\n(could be renamed to 'bro', but I didn't want to override the current 'bro' program).\n I feel like there's a better name that could be used. I do like `bro`, but if that's already in use, that isn't really an option.\n I think the existing `pro` tool can be replaced by this one, behaving like existing tools is a big plus.\n @khaledhosny I think you mean `bro`, and if so, I completely agree. The current command-line `bro` tool is extremely annoying to use. Both `gzip` and `xz` work excellently as command-line tools, and there's really no good reason to differ from those.\n That would be great!\n\nBTW shouldn't --best be an alias for -11 instead of -9? That will probably be a bit more complex to handle since -11 is not a short option anymore, though.\n Any chance to get this merged? Please Please Please merge it To anyone following this topic (the 'brot' stand-alone compression) program:\r\nI've long ago signed google's CLA (in fact, on Oct 02, 2015 11:23 PDT).\r\n\r\nI haven't been keeping track of brotli since I wrote this - but if anyone is interested in picking it up and making it work - they have my full support. If there are minor changes that I can help with - let me know.  I am writing bindings which should be portable across platforms and work with older compilers. Is there a way to fix the warnings below (without suppressing them)?\n\n```\nclang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG -Ienc -Idec -I/usr/local/include -I/usr/local/include/freetype2 -I/opt/X11/include   -std=c++11 -fPIC  -Wall -mtune=core2 -g -O2  -c enc/metablock.cc -o enc/metablock.o\nIn file included from enc/metablock.cc:18:\nenc/./metablock.h:28:1: warning: 'BlockSplit' defined as a struct here but previously declared as a class [-Wmismatched-tags]\nstruct BlockSplit {\n^\nenc/./histogram.h:30:1: note: did you mean struct here?\nclass BlockSplit;\n^~~~~\nstruct\n```\n\nAlso a few warnings about c++11 extensions. Is there a way to work around these for older compilers?\n\n```\nIn file included from enc/encode_parallel.cc:17:\nIn file included from enc/./encode_parallel.h:25:\nIn file included from enc/./encode.h:28:\nenc/./streams.h:59:46: warning: 'override' keyword is a C++11 extension [-Wc++11-extensions]\n  const void* Read(size_t n, size_t* OUTPUT) override;\n                                             ^\nenc/./streams.h:77:41: warning: 'override' keyword is a C++11 extension [-Wc++11-extensions]\n  bool Write(const void* buf, size_t n) override;\n                                        ^\nenc/./streams.h:95:41: warning: 'override' keyword is a C++11 extension [-Wc++11-extensions]\n  bool Write(const void* buf, size_t n) override;\n                                        ^\nenc/./streams.h:108:50: warning: 'override' keyword is a C++11 extension [-Wc++11-extensions]\n  const void* Read(size_t n, size_t* bytes_read) override;\n                                                 ^\nenc/./streams.h:121:41: warning: 'override' keyword is a C++11 extension [-Wc++11-extensions]\n  bool Write(const void* buf, size_t n) override;\n                                        ^\n```\n\nOn Ubuntu 14.04:\n\n```\ng++ -I/usr/share/R/include -DNDEBUG -Ienc -Idec     -fpic  -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -g  -c enc/backward_references.cc -o enc/backward_references.o\nIn file included from enc/./backward_references.h:23:0,\n                from enc/backward_references.cc:17:\nenc/././hash.h:673:3: error: \u2018unique_ptr\u2019 in namespace \u2018std\u2019 does not name a type\n  std::unique_ptr<H1> hash_h1;\n  ^\nenc/././hash.h:674:3: error: \u2018unique_ptr\u2019 in namespace \u2018std\u2019 does not name a type\n  std::unique_ptr<H2> hash_h2;\n  ^\nenc/././hash.h:675:3: error: \u2018unique_ptr\u2019 in namespace \u2018std\u2019 does not name a type\n  std::unique_ptr<H3> hash_h3;\n  ^\nenc/././hash.h:676:3: error: \u2018unique_ptr\u2019 in namespace \u2018std\u2019 does not name a type\n  std::unique_ptr<H4> hash_h4;\n  ^\nenc/././hash.h:677:3: error: \u2018unique_ptr\u2019 in namespace \u2018std\u2019 does not name a type\n  std::unique_ptr<H5> hash_h5;\n  ^\nenc/././hash.h:678:3: error: \u2018unique_ptr\u2019 in namespace \u2018std\u2019 does not name a type\n  std::unique_ptr<H6> hash_h6;\n  ^\nenc/././hash.h:679:3: error: \u2018unique_ptr\u2019 in namespace \u2018std\u2019 does not name a type\n  std::unique_ptr<H7> hash_h7;\n  ^\nenc/././hash.h:680:3: error: \u2018unique_ptr\u2019 in namespace \u2018std\u2019 does not name a type\n  std::unique_ptr<H8> hash_h8;\n  ^\nenc/././hash.h:681:3: error: \u2018unique_ptr\u2019 in namespace \u2018std\u2019 does not name a type\n  std::unique_ptr<H9> hash_h9;\n  ^\nenc/././hash.h: In member function \u2018void brotli::Hashers::Init(int)\u2019:\nenc/././hash.h:636:15: error: \u2018hash_h1\u2019 was not declared in this scope\n      case 1: hash_h1.reset(new H1); break;\n              ^\nenc/././hash.h:637:15: error: \u2018hash_h2\u2019 was not declared in this scope\n      case 2: hash_h2.reset(new H2); break;\n              ^\nenc/././hash.h:638:15: error: \u2018hash_h3\u2019 was not declared in this scope\n      case 3: hash_h3.reset(new H3); break;\n              ^\nenc/././hash.h:639:15: error: \u2018hash_h4\u2019 was not declared in this scope\n      case 4: hash_h4.reset(new H4); break;\n              ^\nenc/././hash.h:640:15: error: \u2018hash_h5\u2019 was not declared in this scope\n      case 5: hash_h5.reset(new H5); break;\n              ^\nenc/././hash.h:641:15: error: \u2018hash_h6\u2019 was not declared in this scope\n      case 6: hash_h6.reset(new H6); break;\n              ^\nenc/././hash.h:642:15: error: \u2018hash_h7\u2019 was not declared in this scope\n      case 7: hash_h7.reset(new H7); break;\n              ^\nenc/././hash.h:643:15: error: \u2018hash_h8\u2019 was not declared in this scope\n      case 8: hash_h8.reset(new H8); break;\n              ^\nenc/././hash.h:644:15: error: \u2018hash_h9\u2019 was not declared in this scope\n      case 9: hash_h9.reset(new H9); break;\n              ^\n```\n Hello,\n\nThank you for the report. We'll fix the struct/class mismatch soon. In addition, indeed we're planning to support C++98 with the encoder, also on the way soon.\n Yay thank you!\n  Shouldn't `\\dec\\dictionary.h` and `\\enc\\dictionary.h` be identical? \n\nhttps://github.com/google/brotli/blob/master/enc/dictionary.h looks like it may be out-of-date; it doesn't include, e.g. the\n\n```\n#if defined(__cplusplus) || defined(c_plusplus)\n}    /* extern \"C\" */\n#endif\n```\n\n...block at the end, for instance.\n\n(Incidentally, declaration of the constant in a header file is apparently frowned upon per people smarter than me. Naively building brotli.exe with VS2015 results in _6_ copies of the constant array in the resulting executable.)\n Thank you for reporting this. We'll fix it soon.\n  [v0.2.0](https://github.com/google/brotli/releases/tag/v0.2.0) has been tagged, but the Python package version as stored in `python/brotlimodule.cc` still says \"0.1.0\" (see [here](https://github.com/google/brotli/blob/master/python/brotlimodule.cc#L12)).\nThis version string is read by the setup.py, and stored in the package metadata upon installing.\n\nI wonder if the Python module's version should also increase every time a Brotli update is tagged, or if language bindings should have their own version numbers, independent from the core library.\n\nWDYT?\n [here](https://coderwall.com/p/mk18zq/automatic-git-version-tagging-for-npm-modules) they use a post-commit git hook which automatically adds a new tag whenever the version string is modified.\n\nI don't know if it's worth doing it though.\n yes, that sounds good to me. Thanks.\n thanks!\n  Per @eustas (in quixdb/squash#113), the brotli decoder doesn't properly handle flushing:\n\n> Looks like brotli decoder doesn't support flush... It is forced to dump its internal buffer only when last block is finished.\n\nI would love to see that fixed!\n  This is with revision d811b186c5037b434d56ddb831ceccdf5a954687.  I can't really reproduce the full report here, but here is a summary of each item it found.\n- `enc/histogram.h:37`: Non-static class member `bit_cost_` is not initialized in this constructor nor in any functions that it calls.\n- `enc/command.h:106`: Non-static class members `insert_len_`, `copy_len_`, `cmd_prefix_`, `dist_prefix_`, `cmd_extra_`, and `dist_extra_` are not initialized in this constructor nor in any functions that it calls.\n- `enc/brotli_bit_stream.cc:343`: `index` is passed to a parameter that cannot be negative. _IndexOf can return -1_\n- `enc/literal_cost.cc:102`: Execution cannot reach the expression 0 inside this statement: `last_c = ((i + window_half \u2026`\n  - at_least: At condition `i + window_half - 2 < 0`, the value of `i` must be at least 0.\n  - const: At condition `i + window_half - 2 < 0`, the value of `window_half` must be equal to 495.\n  - dead_error_condition: The condition `i + window_half - 2 < 0` cannot be true.\n- `enc/prefix.h:75`: In expression `distance_code >> bucket`, shifting by a negative amount has undefined behavior. The shift amount, `bucket`, is -2.\n  - return_constant: Function call `brotli::Log2Floor(distance_code)` returns -1.\n  - assignment: Assigning: `bucket = brotli::Log2Floor(distance_code) - 1`. The value of `bucket` is now -2.\n- `enc/entropy_encode.cc:45`: Non-static class members `total_count_`, `index_left_`, and `index_right_or_value_` are not initialized in this constructor nor in any functions that it calls.\n- `enc/backward_references.cc:157`: The compiler-generated constructor for this class does not initialize `min_cost_cmd_`\n- `enc/encode.cc:207`: Non-static class member `literal_cost_mask_` is not initialized in this constructor nor in any functions that it calls.\n- `dec/huffman.c:142`: Using uninitialized value `sorted[symbol++]` ![dec/huffman.c:142](https://cloud.githubusercontent.com/assets/1151/9540204/a5da6576-4d10-11e5-9b0d-70f8dc1f1438.png)\n- `dec/decode.c:871`: Using uninitialized value `s.loop_counter` when calling `BrotliDecompressStreaming`\n- `enc/metablock.cc:496`: Using tainted variable context as an index to pointer `static_context_map`\n  `enc/static_dict.cc:391`: `data[0] == '\\xc2'` is always false regardless of the values of its operands. This occurs as the logical operand of if.\n\nIf you need more details about an item let me know.  I only provided the full information on the one item because it is a bit difficult to follow without the it, but I think the others should be pretty easy to figure out.\n FWIW I would be willing to add someone to Squash's project on [Coverity Scan](https://scan.coverity.com/) so you can see the results in their interface, though I would suggest just creating a project for brotli.  It has actually uncovered quite a few real issues in other compression libraries (as well as Squash itself) with surprisingly few false positives\u2014definitely worth it, IMHO.\n All Coverity Scan reports have been addressed =)\n\nSee https://scan.coverity.com/projects/google-brotli\n\nThank you for reporting about these issues.\n I think it's time for another run; Coverity is [reporting](https://scan.coverity.com/projects/squash) 9 high-impact issues and 4 medium-impact issues in Brotli.\n FWIW, cppcheck picks up a couple minor issues, too:\n\n```\n[brotli/enc/block_splitter_inc.h:280] -> [brotli/enc/block_splitter_inc.h:281]: (style) Variable 'pairs' is reassigned a value before the old one has been used.\n[brotli/enc/write_bits.h:80]: (warning) %d in format string (no. 1) requires 'int' but the argument type is 'size_t {aka unsigned long}'.\n```\n\nTo fix the second one, you could cast to int, or if you want to really use size_t you can do something like this (stolen from https://github.com/nemequ/munit/blob/master/munit.h#L56):\n\n``` c\n#if !defined(_WIN32)\n  #define BROTLI_SIZE_SPECIFIER \"zu\"\n#elif defined(_M_X64) || defined(__amd64__)\n  #define BROTLI_SIZE_SPECIFIER \"I64u\"\n#else\n  #define BROTLI_SIZE_SPECIFIER \"u\"\n#endif\n```\n\nWindows make everything harder.\n @eustas, I see the only issue remaining is a null-pointer dereference; IIRC that can be \"fixed\" by adding an `assert(foo != NULL)`.  If it's a function parameter, another possibility might be to add a [nonnnull attribute](https://gcc.gnu.org/onlinedocs/gcc-6.1.0/gcc/Common-Function-Attributes.html#index-g_t_0040code_007bnonnull_007d-function-attribute-3238)\u2026  Looks like it's [available in GCC 3.3+](https://nemequ.github.io/hedley/api-reference.html#HEDLEY_NON_NULL).\n  - Fix: missing unistd.h\n- Add: missing STDIN, STDOUT, STDERR constants\n- Add: _CRT_SECURE_NO_WARNINGS constant to turn off error compiling\n  message \"unsafe function or variable\"\n- Add: _CRT_NONSTDC_NO_DEPRECATE constant to turn off error compiling\n  message \"deprecated postfix name\"\n- Fix: function OpenOutputFile write binary now\n It looks like the change may have introduced tab-based indentation in bro.cc while the rest of the file uses spaces? Also, looks like the latest change in trunk requires adding `<time.h>` to the top of bro.cc\n This change results in the output file having the `readonly` attribute set; see http://stackoverflow.com/a/11810168/126229 for an explanation of why that is. I think you want:\n\n```\nint fd = open(output_path, O_CREAT | O_WRONLY | O_TRUNC\n#ifdef _MSC_VER\n     | O_BINARY, S_IREAD | S_IWRITE\n#else\n   , S_IRUSR | S_IWUSR\n#endif\n```\n No fopen is more robust.\nhttp://stackoverflow.com/questions/1658476/c-fopen-vs-open\n\nopen() works with flags \"S_IREAD | S_IWRITE\"\nBut is it useful to use readflags Windows: \"S_IREAD\" and UNIX: \"S_IRUSR\" when file is use writeonlyflag \"O_WRONLY\"?\n In Windows, if you fail to pass `S_IRUSR | S_IWUSR` to `open`, the resulting file is created with the NTFS `ReadOnly` attribute set so the resulting file cannot be edited (or deleted by code).\n You talk about <code>S_IRUSR | S_IWUSR</code>.\nI talk about <code>S_IRUSR | S_IREAD</code>.\n Per MSDN, S_IWRITE also allows S_IREAD, so presumably the latter isn't truly necessary, although it is also harmless and a bit more clear about the intention.\n +1\n Hi,\nI just stumbled upon this issue and would like to add my 2$cents.\nI like to see MS Visual Studio related bugs fixed, as this makes the code more cross platform compatible. And I dislike to see the MS project file added. Simply because it is awkward to maintain two or more build files consistently.\n\nAs a side note:\nSince a few days I have good and painless experience by using CMake for building \"libbrotli\".\nAs it already comes with numerous templates I was able to compile Java bindings with it. I was able to compile with all three: VS GUI, command line MS nmake (32bit & 64bit) and OSX make.\nSee https://github.com/nitram509/jbrotli for details.\nFrankly said I'm not a CMake expert and I expect my version misses some settings ;-)\n\nThanks for listening, feedback is welcome.\nMartin\n We hope to add MSVS project files generation soon. Sorry for very late response.\n  after today's commit 94cd7085f79a707f5ba3d93086796e695b495975, I'm getting this error when trying to compile the Python extension on Windows. I'm using Microsoft Visual C compiler from Visual Studio 2010.\n\n```\n./dec/bit_reader.h(165) : error C2039: 'pos_' : is not a member of 'BrotliBitReader'\n        ./dec/bit_reader.h(39) : see declaration of 'BrotliBitReader'\nerror: command 'cl.exe' failed with exit status 2\n```\n\nCheers,\n\nCosimo\n thanks!\nit compiles now!\n\nIt is a bit strange though, because even with the undefined `pos_` member, the decoder was still compiling fine on OS X (clang) whereas it wasn't on Windows (msvc)...\n\nI believe the reason is because in the `port.h` module, the `BROTLI_LITTLE_ENDIAN` preprocessor flag is not being set for MSVC, whereas it should be, as I'm compiling on a little endian processor -- like virtually all Windows machines -- and for a 32-bit Python. \n\nI suspect the problem could be that MSVC does not define `__BYTE_ORDER__`, and therefore the following check from `port.h` does not work on Windows:\n\n``` c\n#if (defined(__BYTE_ORDER__) && (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))\n#define BROTLI_LITTLE_ENDIAN 1\n#else\n#define BROTLI_LITTLE_ENDIAN 0\n#endif\n```\n\nFor example, see: http://www.reactos.org/pipermail/ros-diffs/2014-January/051494.html\n\nI think it would be OK to simply assume that Windows is always little endian. \nWDYT?\n if I change `port.h` like that, then it compiles fine on MSVC as well (even without applying patch #130):\n\n``` diff\ndiff --git a/dec/port.h b/dec/port.h\nindex 27c6b6b..0bceca3 100644\n--- a/dec/port.h\n+++ b/dec/port.h\n@@ -102,7 +102,8 @@ OR:\n #define BROTLI_PRELOAD_SYMBOLS 0\n #endif\n\n-#if (defined(__BYTE_ORDER__) && (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))\n+#if defined(_MSC_VER) || \\\n+    (defined(__BYTE_ORDER__) && (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))\n #define BROTLI_LITTLE_ENDIAN 1\n #else\n #define BROTLI_LITTLE_ENDIAN 0\n```\n\nthat's because, when `BROTLI_LITTLE_ENDIAN` is defined, the pre-processor will trim the `#else` branch inside `dec/bit_reader.h` where the undefined `pos_` was used.\n that's great! thank you :+1: \n PS: maybe it'd be a good to set up Appveyor to make sure we test compiling Brotli on Windows...\n  I get the following errors on Windows using Visual Studio 2010 when trying to compile the Python extension:\n\n```\nenc/backward_references.cc(26) : error C2124: divide or mod by zero\nenc/backward_references.cc(140) : error C3861: 'log2': identifier not found\nenc/backward_references.cc(145) : error C3861: 'log2': identifier not found\n```\n\nThe patch tries to fix both issues.\n\nFor the `kInfinity` constant, I use `std::numeric_limits::infinity` as found in the `<limits>` header.\n\nFor the `log2` function (missing from Visual Studio 2010) which is used in `backward_references.cc`, I define a new `_log2` function inside `fast_log.h`. This MSVC specific workaround was previously incorporated in the `FastLog2` function, so I just extracted it from there.\n\nWe need to support Visual Studio 2010, otherwise it's not possible to compile the Python extension for Windows (Python 3.4 for Windows from Python.org is still built using Visual Studio 2010).\n\nCheers,\n\nCosimo\n @szabadka it works now, thanks! :+1: \n  Is there a JavaScript Implementation of the decompressor part for in browser usage?\n\nI found https://github.com/devongovett/brotli.js and created https://github.com/devongovett/brotli.js/issues/2 ... but maybe someone else knows a decompress implementation?\n I am looking for the same thing.\n Hello.\n\n \"brotli\" content-encoding support has been recently added to Firefox 44.\n In Chromium project there is also intent to support brotli content-encoding.\n\n When done will make decoding fast and transparent for developers.\n As a fallback, you could transpile brotli to JavaScript, for example, using Emscripten.\n I'll add more details how to do it soon.\n Quick tests with emscripten has shown that generated js code is 9 times slower on Firefox and about 14 times slower on Chrome.\n Hello, there is also this rust library : https://github.com/ende76/compression\nWhich will be used by servo the layout engine of the future, see: https://github.com/servo/servo/issues/8156\n:) \n Nice!\nThank you =)\n You're welcome ! =) \nAlso are you a Firefox dev ? Because it will be more intelligent to use this rust library as a common gecko and servo library instead of duplicate the work in two distinct library ;)  now that gecko can have rust code. \nAlso sorry for my poor english. \n I have a [demo working here](http://replete.github.io/brotli-experiments/).\n [brotli.js](https://github.com/devongovett/brotli.js) (linked in the original issue) now has a hand ported decoder instead of using Emscripten. It is less than half the size of the Emscripten JS output, and is over twice as fast according to my benchmarks. To use in the browser, you can build it with Browserify or similar.\n @eustas brotli.js is pure JS, hand ported (at least the decoder). I found it to be ~2x faster than an emscripten compile of the C++ code when I wrote it, and much smaller. Am I understanding correctly that your new JS decoder is 2x faster again than brotli.js (so 4x faster than emscripten)?  I added support for the new BrotliParams to the Python extension, as requested in https://github.com/google/brotli/issues/72.\nI also modified the bro.py script so that we can control these parameters from the command line.\n\nI have a question. In the encode.h, it's written that the parameter \"quality\" has to be in the range from 0 to 11. I presume this range is inclusive. Now, if I set the quality between 1 and 11, the output changes accordingly. However, if I set it to 0, the output is always truncated to the same 10 bytes. Does this mean that 0 is an invalid value for the 'quality' parameter?\n\nThanks.\n\nC.\n sure, I'll do that.\n @szabadka OK, I've rebased on top of master, set MODE_GENERIC as default compression mode, and removed the additional low-level parameters from the command line tool's arguments (but I left them in the module's compress function)\n thank you!\n  It would be nice to add Brotli to the official Python Package Index, so that users can download it with a simple `pip install brotli`.\n\nWe could add just the sdist tarball, or also some pre-compiled wheel packages for Windows and Mac platforms, maybe built automatically via Travis and/or AppVeyor -- like [here](https://github.com/anthrotype/brotli-wheels)\n\n/cc @khaledhosny \n We probably need a release of some kind to by able to identify which version have been uploaded?\n @szabadka would you be ready to tag a release?\n Ok, fair enough. Looking forward to those.\nThank you,\nC.\n you're right, it shouldn't do that.\nI'll try to fix it, thanks.\n @szabadka this works: https://github.com/google/brotli/pull/80\n Good! I can confirm it works on OSX and Windows too.\n Before the release we would need also to make sure the Python module exposes all features of the brotli library (like the new encoder params).\n I'm not one to really judge here, but if you guys are deciding on a versioning scheme, take a look at [Semantic Versioning](http://semver.org)! This project would benefit from it over other versioning schemes because it makes it easy to determine when breaking changes have been made to the API, which is obviously a concern considering the last comment that @khaledhosny made in this thread.\n > Before the release we would need also to make sure the Python module exposes all features of the brotli library (like the new encoder params).\n\nYes, we should add the encoder's newly introduced `BrotliParams`.\n\nWhat other feature would you like to expose in the Python module?\nCurrently, the module's `compress` function calls `BrotliCompressBuffer`, whereas the `bro` tool is using the new `BrotliCompress` with in/out callbacks.\nShall we expose `BrotliCompress` in the Python module as well?\n I think the parameters would be enough, unless we can come up with a compelling use case where Python users would benefit from the granularity of the API.\n do you think brotli is now ready to be uploaded to the Python Package Index (PyPI)?\n We just pushed a new version of the encoder and decoder, which is ready to be uploaded to PyPI after we fix the issue you pointed out.\n\nThere is one more thing that could be changed in the python interface. In the latest version of the encoder, the advanced fields in BrotliParams were deprecated and are ignored (these are enable_dictionary, enable_transforms, greedy_block_split, enable_context_modeling).\nI think it would make sense to remove them from the python command line interface as well.\n @szabadka very good!\n\nI have a question: those fields are not exposed in the _command line_ script (`bro.py`) already. I gather you meant we need to remove them also from the `brotlimodule.cc` extension module.\nI'll do that shortly in a new PR.\n Yes, I meant the brotlimodule.cc\n do we also need to bump the Python module's `version` in the setup.py before uploading it to PyPI?\ncurrently it's 0.1, but 1.0 would look nicer ;)\n Actually, we are planning to tag the current version of brotli as v0.1.0\n Ok, that's fine.\nCould you hold on an hour or so before actually tagging the release?\nI'd like to submit one more PR that fixes building the Python extension on Windows Python 2.7 when installing via pip. Thanks\n Sure, let me know when the python part is ready.\n I configured the Travis deployment in PR #147.\n\n@anthrotype Is this all we need to do? Will every release automatically uploaded to PyPI now?\n sorry for the late reply, I was on vacation.\n\nYou have set up automatic \"Github Releases\" deployment for Travis. The OSX compiled wheels will now be uploaded to GitHub every time you push a new tag (e.g. see [v0.2.0](https://github.com/google/brotli/releases/tag/v0.2.0)). This is cool, thanks for that! (By the way, Travis currently builds for OS X only; it would be nice to similarly configure AppVeyor with \"Github Releases\", so that the Windows wheels are also uploaded to GitHub...).\n\nHowever, the Github Releases and PyPI are two different things which need to be configured separately.\n\nTravis has some built-in support for automatic PyPI deployment -- see help docs:\nhttp://docs.travis-ci.com/user/deployment/pypi/\n\nFor AppVeyor, you can define a custom `deploy_script` that calls the \n[twine](https://pypi.python.org/pypi/twine) command to securely authenticate with PyPI and upload the compiled wheels.\n\nI'd say, let's first have both OSX and Windows wheels auto uploaded to GitHub upon tagging. Then we could see how to have them uploaded to PyPI as well. In the meantime, we could just upload them to PyPI manually.\n I just read news about this. I think it's great (better than zopfli).\n\nIt'd be better to use it from pypi.\n FWIW, my CFFI-based Python wrapper for Brotli is [available from PyPI](https://pypi.python.org/pypi/brotlipy), but I very deliberately did not register the name `brotli`. If you are still planning to ship the C-based bindings to PyPI, you should make sure you register that name as soon as possible to prevent anyone else from accidentally stepping on it.\n Any news on this?\n +1 for this. Great to know that @Lukasa has published a wrapper but it would probably be better to have the \"legit\" module on PyPI.\n what is the status of this? Is there something I could do to help speeding this up?\n\nBasically, all is left to do is register with the PyPI server and upload the binary wheels from 0.3.0 release, along with the source distribution (i'd say both .tar.gz and .zip formats, as in `python setup.py sdist --formats=gztar,zip`).\n\nhttp://python-packaging-user-guide.readthedocs.org/en/latest/distributing/#uploading-your-project-to-pypi\n\nSetting up automatic PyPI deployment upon tagging from Travis and Appveyor is a little tricky, but it can be done if you're interested in doing that too.\n It's all covered in the PyPA Packaging User Guide linked above. You need to create an account on PyPI, make a .pypirc file and use twine to register the new project and upload the built artifacts.\nYou can optionally have the CI deploy to PyPI on tag releases, in which case you need to encrypt the password.\nhttps://docs.travis-ci.com/user/deployment/pypi\n I can help you with the PyPI thing. Setting up the CI is possible, though I would need the PyPI account credentials to set that up.\nI don't know if it's feasible, but I\u00a0was thinking I could maintain the PyPI account for you, and manually upload the wheels on every new tag.\n While this is still ongoing, I'll continue to remind people that there is still a CFFI-based wrapper published on PyPI under the name `brotlipy`. The update to v0.5.1 of brotli should be coming along shortly.\n @Lukasa thanks for the reminder. I haven't tried it yet, but it would be nice if the two wrappers had the same API so they could be used interchangeably.\n @anthrotype Agreed. I think it'd be better for the core brotli implementation to choose what that API looks like though. =) At that point, I'd consider brotlipy to basically be a wrapper that is primarily useful as a drop-in replacement for people using PyPy.\n So, any news on the PyPI front?\n\nAt the very least, it would be already something if someone could upload to PyPI the wheels and sdist from the current 0.5.2 release.\n\nAll it takes is:\n\n1) create a PyPI account at https://pypi.python.org/pypi?%3Aaction=register_form\n2) install [Twine](https://github.com/pypa/twine) tool, required to securely upload packages to PyPI\n\n```\npip install twine\n```\n\n3) run `twine upload Brotli-0.5.2*.whl Brotli-0.5.2.zip`\n\nI could do that myself, but would be better if the official owners/maintainers register it first.\nIf you like, you can add me as collaborator on the newly registered brotli project on PyPI, and then I could help you setting up automatic deployment from Travis/Appveyor.\n\nBut for now, uploading manually the artifacts that are already published on Github Releases would be good.\n\nThanks.\n @eustas sorry to ping you (I see you are back online). Any plans on pushing the wheels to PyPI?\n AWESOME!!! Big thanks!\nhttps://pypi.python.org/pypi/Brotli\nmy username is anthrotype, of course ;)\n  there is a problem if one tries to build the Python extension using the `pip` installer. The problem is that the setup.py is not located in the root of the repository, but in the `python` binding subfolder. The way pip works is to copy the source files to a temporary folder and try to build from there. But since the C/C++ source files are located higher in the repository tree (`../enc`, `../dec`) relative to setup.py, then pip does not (cannot?) copy these over to its temporary build folder, and therefore it fails to build the extension.\n\nA solution would be to make a hard copy (instead of a symlink) of the `enc` and `dec` folders inside the `python` subfolder. I believe git can efficiently handle such duplicate files and store them under the same object, as long as they have the same content.\n\nThat means one would have to synchronise it every time there is a change. I don't know if anyone has a better solution...\n\nThe reason I want to use pip is to allow publishing the Brotli extension to the official Python Package Index (PyPI) repository. Once that is done, one could simply do `pip install brotli` to download, build and install the extension. Besides, one could add brotli to the list of dependencies for other packages (e.g. fontTools, etc.).\n\nI wonder whether @khaledhosny has already thought about publishing the Brotli extension to PyPI?\n\nI'm already experimenting in this direction in https://github.com/anthrotype/brotli-wheels\nI'm trying to use Travis and Appveyor to automatically build pre-compiled Python [wheel](http://pythonwheels.com/) packages for Windows and OS X.\n\nPlease let me know what you think.\nThank you,\n\nCosimo\n How are you building with pip? I do `pip install -e .` routinely and had no issue with it.\n I know, but that only runs `python setup develop` for testing a package while developing it.\nThe problem arises when doing `pip install .`, without the `-e` option.\nIf you look at the traceback, the reason why pip fails is because it cannot find the C/C++ sources, since they are referenced using a relative path which is \"above\" the setup.py working directory:\n\n```\n$ pip install .\nProcessing /Users/cosimolupo/Documents/Github/brotli/python\nInstalling collected packages: Brotli\n  Running setup.py install for Brotli\n    clang -fno-strict-aliasing -fno-common -dynamic -I/usr/local/include -I/usr/local/opt/sqlite/include -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -DOS_MACOSX=1 -I/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c /private/var/folders/1w/6098jtks69sgwz0vtz2ysmsm0000gn/T/dec/bit_reader.c -o build/temp.macosx-10.9-x86_64-2.7/private/var/folders/1w/6098jtks69sgwz0vtz2ysmsm0000gn/T/dec/bit_reader.o\n    clang: error: no such file or directory: '/private/var/folders/1w/6098jtks69sgwz0vtz2ysmsm0000gn/T/dec/bit_reader.c'\n    clang: error: no input files\n    error: command 'clang' failed with exit status 1\n    Complete output from command /usr/local/opt/python/bin/python2.7 -c \"import setuptools, tokenize;__file__='/var/folders/1w/6098jtks69sgwz0vtz2ysmsm0000gn/T/pip-oaQuzp-build/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" install --record /var/folders/1w/6098jtks69sgwz0vtz2ysmsm0000gn/T/pip-R4EIB0-record/install-record.txt --single-version-externally-managed --compile:\n    running install\n\n    running build\n\n    running build_ext\n\n    creating build\n\n    creating build/temp.macosx-10.9-x86_64-2.7\n\n    creating build/temp.macosx-10.9-x86_64-2.7/private\n\n    creating build/temp.macosx-10.9-x86_64-2.7/private/var\n\n    creating build/temp.macosx-10.9-x86_64-2.7/private/var/folders\n\n    creating build/temp.macosx-10.9-x86_64-2.7/private/var/folders/1w\n\n    creating build/temp.macosx-10.9-x86_64-2.7/private/var/folders/1w/6098jtks69sgwz0vtz2ysmsm0000gn\n\n    creating build/temp.macosx-10.9-x86_64-2.7/private/var/folders/1w/6098jtks69sgwz0vtz2ysmsm0000gn/T\n\n    creating build/temp.macosx-10.9-x86_64-2.7/private/var/folders/1w/6098jtks69sgwz0vtz2ysmsm0000gn/T/dec\n\n    clang -fno-strict-aliasing -fno-common -dynamic -I/usr/local/include -I/usr/local/opt/sqlite/include -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -DOS_MACOSX=1 -I/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c /private/var/folders/1w/6098jtks69sgwz0vtz2ysmsm0000gn/T/dec/bit_reader.c -o build/temp.macosx-10.9-x86_64-2.7/private/var/folders/1w/6098jtks69sgwz0vtz2ysmsm0000gn/T/dec/bit_reader.o\n\n    clang: error: no such file or directory: '/private/var/folders/1w/6098jtks69sgwz0vtz2ysmsm0000gn/T/dec/bit_reader.c'\n\n    clang: error: no input files\n\n    error: command 'clang' failed with exit status 1\n\n    ----------------------------------------\n    Command \"/usr/local/opt/python/bin/python2.7 -c \"import setuptools, tokenize;__file__='/var/folders/1w/6098jtks69sgwz0vtz2ysmsm0000gn/T/pip-oaQuzp-build/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" install --record /var/folders/1w/6098jtks69sgwz0vtz2ysmsm0000gn/T/pip-R4EIB0-record/install-record.txt --single-version-externally-managed --compile\" failed with error code 1 in /var/folders/1w/6098jtks69sgwz0vtz2ysmsm0000gn/T/pip-oaQuzp-build\n```\n I think we need to fix `sdist` command, since it seems not to copy any of the Brotli source files. If this does not fix `pip`, it will at least allow uploading to PyPI.\n I'll have look at sdist.\nThe thing is, the way pip (but also distutils, setuptools, etc.) expects python packages to be organised is with a setup.py at the root of the package, and then everything else positioned either on the same level or inside sub-folders reachable from the root. Whereas here we want to keep the python folder  isolated from the C/C++ source files, which is understandable, but this seems to conflict with the way Python packaging works. Maybe the solution could simply be to clone brotli as a submodule in another repository with a copy of setup.py positioned higher in the directory tree.\n > Maybe the solution could simply be to clone brotli as a submodule in another repository with a copy of setup.py positioned higher in the directory tree.\n\nThat is [how it was done originally](https://github.com/khaledhosny/brotli-python/issues/2) :) \n yes, I do remember.\n Thinking about it more, I think it shouldn\u2019t harm to move the setup.py file to the top level directory, and leave the C file where it is, if it will simplify things.\n It would definitely make the Python extension's setup much easier.\n\nOn Tue, Mar 31, 2015 at 8:42 AM, Khaled Hosny notifications@github.com\nwrote:\n\n> ## Thinking about it more, I think it shouldn\u2019t harm to move the setup.py file to the top level directory, and leave the C file where it is, if it will simplify things.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/google/brotli/issues/52#issuecomment-87980117\n I can confirm pip is happy after 5e3e97e2947d82971bcc9f1bb099de7d7da91ac2\n  Hi,\nafter commit 534654def1f7b858e6f24f895609e51e19a19580, the encoder fails to compile on MS Visual Studio 2010, with the following error:\n\n```\nc:\\userslocal\\cosimo.lupo\\documents\\github\\brotli\\enc\\./bit_cost.h(44) : error C2668: 'log' : ambiguous call to overloaded function\n    C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\INCLUDE\\math.h(575): could be 'long double log(long double)'\n    C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\INCLUDE\\math.h(527): or       'float log(float)'\n    C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\INCLUDE\\math.h(120): or       'double log(double)'\n    while trying to match the argument list '(int)'\n```\n\nAt line 44 of \"bit_cost.h\", there is a call to `log` function: I think the varialbe `sum` should be cast to double.\nAnyway, thanks for your work!\n\nCosimo\n :+1: \n  great, thank you!\n  :+1: \n unfortunately there is a problem in `literal_cost.cc:161`.\nthe `log2` function is used there without testing if the _MSC_VER <=1600.\nso the build fails because of \"identifier not found\".\n if I change line 161 of literal_cost.cc to this, it works:\n\n```\n-    float lit_cost = log2(static_cast<double>(in_window) / histo);\n+    float lit_cost = FastLog2(in_window) - FastLog2(histo);\n```\n you're fast! :)\n  From https://code.google.com/p/chromium/issues/detail?id=452335 where we are exploring how to support brotli as an HTTP transfer-encoding method\n\nComment Nb. 20:\n\"Chrome's networking stack is a single thread event loop. To prevent arbitrary data from being buffered in memory, and to get data to consumers as fast as possible, this will need to be rewritten in a way for the caller to call it repeatedly to get the data out of it.\"\n  this pull request is the same as @r-lyeh request #5 from October last year, with just some little modifications of mine.\n\nThere are three problems when trying to compile the C++ brotli encoder with Microsoft Visual C++ 12.0:\n- \"fast_log.h\" is missing the assert header include:\n  \n  enc/fast_log.h(44) : error C3861: 'assert': identifier not found\n- the use of function rand_r() inside \"block_splitter.cc\" makes the compiler raise \"identifier not found\". As @r-lyeh suggested, rand_r could be replaced by a combination of srand() and rand().\n  \n  enc/block_splitter.cc(100) : error C3861: 'rand_r': identifier not found\n- in \"write_bits.h\", the attempt to import \"endian.h\" fails on Windows, which unfortunately does not provide this header. Besides, the include does not seem to be necessary here. In fact, the macro \"IS_LITTLE_ENDIAN\" which is used in write_bits.h is already specified inside \"port.h\" header, which is among the includes. \n  \n  enc/write_bits.h(24) : fatal error C1083: Cannot open include file: 'endian.h': No such file or directory\n\nAs a workaround, @r-lyeh proposed a new portable \"endian.h\" header file. However, for the sake of detecting the byte order, I believe it would be sufficient to presume that when _WIN32 (or _WIN64) is defined, then the byte order will always little endian (ok, the XBox 360 has a big endian processor, but...).\nSo I added such Windows-specific #ifdef to \"port.h\", and removed @r-lyeh's \"endian.h\" file.\n\nI would like to emphasize that it's only by using the patch by @r-lyeh (with or without the superfluous endian.h) that I was able compile the brotli Python extension on the Windows platform.\n\nI have tested both gcc (via Cygwin or MinGW) and several Microsoft Visual C/C++ compilers.\n\nCygwin's gcc (POSIX) was able to compile only through @r-lyeh patch.\n\nThe MinGW-w64 gcc (targeting win32) was not able to compile even when using @r-lyeh's patch, so I gave up on gcc and tried one of MS Visual Studio compilers.\n\nI first tried MS Visual Studio 2008 (the same used for Windows Python 2.7), but it was missing stdint.h header...\n\nSo I tried to force Python's distutils to use Visual Studio 2010. This time stdint.h was found, but the math.h module was missing the binary logarithm (log2) function... (of course, that could be rewritten as log(v)/log(2) or something).\n\nFinally, I tried to make Python use MS Visual Studio 2013 as a compiler, and this time the Python extension compiled correctly, again thanks to @r-lyeh patch.\n\nThe brotli decoder (which is written in plain C) does compile successfully on Windows. It is the encoder, written in modern C++, which has the above mentioned issues. It would be nice if you could add Windows among the supported platforms. I'm interested because we are trying to use the brotli Python bindings in fontTools for decoding/encoding WOFF2.\n\nThanks a lot for your work.\n\nCosimo\n @khaledhosny \nin aac07290bee46acf5b9ee7821aeddf3b78f4ef70, I have slightly modified the setup.py script in order to avoid using symlinks to `../enc/` and `../dec/` directories. The reason is that Python for Windows (yes, again) cannot follow those symlinks and therefore the build fails.\nIn order to compile the Python extension on Windows, one can work around distutils' inability to use relative paths to the C/C++ source files by simply converting them to absolute paths.\n\n@szabadka Apologies for my insistence, but I would like to ask you if Brotli's core developers are interested at all in making Brotli (specifically its encoder and Python bindings) compatible with the Windows platform? If not, I would have to find other strategies to be able to encode WOFF2 fonts using Python.\n\nThank you.\n Thanks for your reply. I will sign the CLA tomorrow morning.\nCheers!\n\nC.\n @szabadka I signed the CLA on behalf of my employer (i.e., Dalton Maag Ltd). \n thanks for the fixes! I'm gonna try now and let you know the results.\nFor the email address we used `google.contributors [at] daltonmaag.com` (we created an ad-hoc Google Groups address for this purpose, as shown in the CLA web form).\nMy github username (i.e. @anthrotype) is linked to my work email address, `cosimo.lupo [at] daltonmaag.com`, and the latter email address is a member of the above mentioned google group.\nDoes that make sense?\n Yes, I can confirm the latest e60b7b846ab6a0a3de8d092b1a6aa1f1823dbb8c compile successfully under MS Visual C++ 12.0. \nThank you very much for addressing this issue. \nI can close this pull request now.\nI am going to open a new request, always Windows-specific, which has to do with the Python extension only.\nThanks again,\n\nC.\n  I was trying to use google/woff2 on a machine running OS X 10.8 and got the following error:\n\n``` sh\n./brotli/enc/./static_dict.h:21:10: fatal error: 'unordered_map' file not found\n```\n\nIt turns out that the version of gcc with Xcode 5 is too low, I had to upgrade it manually from 4.2 to 4.7. If it\u2019s relatively easy to clarify what that error message is about, I think it could be helpful. To be fair, I don\u2019t really know anything about this stuff though, so feel free to disregard as well.\n\nThanks!\n @kennethormandy, mind sharing the best way you found to upgrade Xcode's gcc? So many tuts out there it's hard to tell the good from the bad...\n Might be relevant. I was getting this same error and fixed the issue with adding some additional flags on build. See starting line 37. https://github.com/Psiablo/ttf2woff2/blob/91b55b30683f011ca415ee8e24a55228dc4fd834/binding.gyp\n\nOS X 10.10.3\n  Hello,\n\nthe sample \"bro\" tool does not compile on OSX (I'm using 10.9.5):\n\n```\nbro.cc:19:10: fatal error: 'malloc.h' file not found\n```\n\nIt seems like the malloc.h header file is located inside `/usr/include/malloc/malloc.h` on that platform.\nWith this patch, it compiles correctly.\n\nAll best,\n\nCosimo\n Yes, it's working now on OSX, thanks.\n  This adds Python bindings (developed originally as https://github.com/khaledhosny/brotli-python). Everything is kept under `python` subdirectory, but distutils is very inflexible, so I had to symlink `dec` and `enc` directories from top level for the build to work (I wouldn\u2019t insist on using a `setup.py` script myself, but it seems to be required for PyPI which I guess we would want to uploat to at some point). CC @behdad.\n Thanks Khaled.  Would be great to get this in.  I need it to implement WOFF2 in https://github.com/behdad/fonttools/\n FWIW, I need this for https://github.com/w3c/woff2-tests.\n I signed it now.\n  deprecated rand_r() calls removed();\nlog() disambiguation;\nmissing assert() header added;\nportable endian.h header added (public domain license);\n :+1: \n :+1: \n  IMO, it would be cleaner to move the public headers to a separate `include` directory, and/or give them less generic names like `brotli-decode.h` and `brotli-encode.h`, to streamline the use of the library.\n I gave it a quick try, but it seems that the public headers include on most of the other ones, so it will need a bit of thought.\n Hi,\n\nThank you for the comment. For now, if it helps, the headers that can be considered to contain the public API are \"decode.h\" and its included \"streams.h\" for the decoder, and \"encode.h\" and its included \"streams.h\" for the encoder.\n\nThis API is not final, we are in the process of revising it.\n  Thanks Zoltan.  Would be great if in the future you submit individual changes.  I like to understand the changes but is hard when it's such a big chunk.\n\nDoes this have implications for existing users?  Has this changed the format?\n Thanks :).\n", "text_all_count": 56192, "text_word_token": ["NUMBER", "Defect", "type", "FORWARD_NULL", "NUMBER", "webkitgtk", "NUMBER", "Source", "ThirdParty", "brotli", "dec", "decode", "NUMBER", "c", "NUMBER", "var_compare_op", "Comparing", "s", "ringbuffer", "to", "null", "implies", "that", "s", "ringbuffer", "might", "be", "null", "NUMBER", "NUMBER", "webkitgtk", "NUMBER", "Source", "ThirdParty", "brotli", "dec", "decode", "NUMBER", "c", "NUMBER", "var_deref_model", "Passing", "s", "to", "ProcessCommands", "which", "dereferences", "null", "s", "ringbuffer", "NUMBER", "NUMBER", "webkitgtk", "NUMBER", "Source", "ThirdParty", "brotli", "dec", "decode", "NUMBER", "c", "NUMBER", "NUMBER", "deref_parm_in_call", "Function", "ProcessCommandsInternal", "dereferences", "s", "ringbuffer", "NUMBER", "NUMBER", "webkitgtk", "NUMBER", "Source", "ThirdParty", "brotli", "dec", "decode", "NUMBER", "c", "NUMBER", "NUMBER", "deref_parm_field_in_call", "Function", "memcpy", "dereferences", "an", "offset", "off", "s", "ringbuffer", "NUMBER", "Note", "The", "source", "code", "implementation", "of", "the", "function", "has", "be", "overridden", "by", "a", "builtin", "model", "NUMBER", "NUMBER", "case", "BROTLI_STATE_COMMAND_POST_DECODE_LITERALS", "NUMBER", "case", "BROTLI_STATE_COMMAND_POST_WRAP_COPY", "NUMBER", "result", "ProcessCommands", "s", "NUMBER", "if", "result", "BROTLI_DECODER_NEEDS_MORE_INPUT", "NUMBER", "result", "SafeProcessCommands", "s", "NUMBER", "Defect", "type", "FORWARD_NULL", "NUMBER", "webkitgtk", "NUMBER", "Source", "ThirdParty", "brotli", "dec", "decode", "NUMBER", "c", "NUMBER", "var_compare_op", "Comparing", "s", "ringbuffer", "to", "null", "implies", "that", "s", "ringbuffer", "might", "be", "null", "NUMBER", "NUMBER", "webkitgtk", "NUMBER", "Source", "ThirdParty", "brotli", "dec", "decode", "NUMBER", "c", "NUMBER", "var_deref_model", "Passing", "s", "to", "CopyUncompressedBlockToOutput", "which", "dereferences", "null", "s", "ringbuffer", "NUMBER", "NUMBER", "webkitgtk", "NUMBER", "Source", "ThirdParty", "brotli", "dec", "decode", "NUMBER", "c", "NUMBER", "NUMBER", "deref_parm_field_in_call", "Function", "BrotliCopyBytes", "dereferences", "an", "offset", "off", "s", "ringbuffer", "NUMBER", "NUMBER", "webkitgtk", "NUMBER", "Source", "ThirdParty", "brotli", "dec", "bit_reader", "NUMBER", "h", "NUMBER", "NUMBER", "deref_parm", "Directly", "dereferencing", "parameter", "dest", "NUMBER", "NUMBER", "BrotliBitReader", "br", "size_t", "num", "NUMBER", "while", "BrotliGetAvailableBits", "br", "NUMBER", "num", "NUMBER", "NUMBER", "dest", "uint", "NUMBER", "_t", "BrotliGetBitsUnmasked", "br", "NUMBER", "BrotliDropBits", "br", "NUMBER", "NUMBER", "dest", "The", "dictionary", "be", "only", "optimized", "for", "English", "Spanish", "Chinese", "Hindi", "Russian", "Arabic", "HTML", "JavaScript", "and", "CSS", "NUMBER", "For", "texts", "in", "other", "languages", "like", "German", "brotli", "may", "have", "a", "worse", "compression", "rate", "than", "bzip", "NUMBER", "I", "use", "the", "default", "settings", "for", "gcab", "NUMBER", "with", "option", "z", "brotli", "NUMBER", "bzip", "NUMBER", "NUMBER", "gzip", "NUMBER", "zip", "NUMBER", "Info", "ZIP", "xz", "utils", "NUMBER", "p", "NUMBER", "zip", "NUMBER", "lzip", "NUMBER", "This", "be", "my", "result", "for", "du", "ab", "NUMBER", "NUMBER", "goethe", "NUMBER", "cab", "NUMBER", "NUMBER", "goethe", "NUMBER", "txt", "NUMBER", "NUMBER", "goethe", "NUMBER", "br", "NUMBER", "NUMBER", "goethe", "NUMBER", "bzip", "NUMBER", "NUMBER", "NUMBER", "goethe", "NUMBER", "gz", "NUMBER", "NUMBER", "goethe", "NUMBER", "zip", "NUMBER", "NUMBER", "goethe", "NUMBER", "xz", "NUMBER", "NUMBER", "goethe", "NUMBER", "txt", "NUMBER", "z", "NUMBER", "NUMBER", "goethe", "NUMBER", "lz", "This", "be", "my", "test", "file", "goethe", "NUMBER", "txt", "LINK", "I", "use", "German", "as", "an", "example", "because", "that", "language", "be", "spoken", "by", "about", "NUMBER", "Million", "native", "speakers", "and", "it", "be", "the", "most", "most", "widely", "spoken", "mother", "tongue", "in", "the", "European", "Union", "even", "before", "English", "and", "French", "NUMBER", "See", "here", "LINK", "_", "NUMBER", "_en", "NUMBER", "pdf", "NUMBER", "B", "NUMBER", "B", "NUMBER", "num", "NUMBER", "NUMBER", "A", "NUMBER", "NUMBER", "C", "NUMBER", "gen", "NUMBER", "NUMBER", "A", "NUMBER", "NUMBER", "D", "NUMBER", "C", "NUMBER", "B", "NUMBER", "name", "NUMBER", "NUMBER", "A", "NUMBER", "XYZ", "NUMBER", "NUMBER", "D", "NUMBER", "C", "NUMBER", "NUMBER", "C", "NUMBER", "NUMBER", "C", "NUMBER", "NUMBER", "D", "NUMBER", "Move", "from", "NUMBER", "to", "NUMBER", "While", "trying", "to", "use", "the", "Go", "package", "cbrotli", "I", "was", "get", "error", "for", "File", "not", "find", "for", "all", "the", "header", "file", "TAG", "TAG", "NUMBER", "I", "fix", "this", "by", "add", "the", "relative", "path", "as", "below", "go", "include", "NUMBER", "NUMBER", "c", "include", "brotli", "decode", "NUMBER", "h", "include", "NUMBER", "NUMBER", "c", "include", "brotli", "encode", "NUMBER", "h", "But", "even", "after", "this", "I", "get", "ld", "library", "not", "find", "for", "lbrotlicommon", "error", "and", "have", "no", "clue", "how", "to", "fix", "this", "NUMBER", "Trying", "to", "run", "the", "cbrotli_test", "NUMBER", "go", "throw", "the", "same", "error", "as", "shown", "TAG", "I", "will", "give", "it", "a", "go", "NUMBER", "Thanks", "eustas", "for", "the", "effort", "eustas", "Just", "as", "a", "side", "question", "be", "there", "any", "exist", "usage", "example", "of", "the", "go", "implementation", "somewhere", "NUMBER", "I", "tried", "below", "but", "to", "no", "avail", "godep", "save", "github", "NUMBER", "com", "google", "brotli", "cbrotli", "godep", "Package", "github", "NUMBER", "com", "google", "brotli", "cbrotli", "not", "find", "godep", "save", "github", "NUMBER", "com", "google", "cbrotli", "godep", "Package", "github", "NUMBER", "com", "google", "cbrotli", "not", "find", "Hi", "would", "it", "be", "possible", "to", "include", "the", "NUMBER", "dll", "file", "in", "the", "binary", "downloads", "for", "Windows", "The", "NUMBER", "dlls", "be", "kind", "of", "needed", "to", "make", "the", "JNI", "wrappers", "work", "NUMBER", "This", "be", "especially", "a", "problem", "for", "the", "encoder", "as", "there", "be", "no", "Java", "implementation", "which", "be", "a", "huge", "adoption", "problem", "IMHO", "NUMBER", "I", "already", "tried", "to", "build", "the", "NUMBER", "dlls", "myself", "with", "CMake", "and", "MinGW", "but", "I", "was", "not", "able", "to", "make", "the", "JNI", "encoder", "wrapper", "work", "with", "them", "NUMBER", "I", "always", "get", "an", "UnsatisfiedLinkError", "on", "instantiation", "with", "libbrotlicommon", "NUMBER", "dll", "and", "libbrotlienc", "NUMBER", "dll", "loaded", "NUMBER", "java", "NUMBER", "lang", "NUMBER", "UnsatisfiedLinkError", "org", "NUMBER", "brotli", "NUMBER", "wrapper", "NUMBER", "enc", "NUMBER", "EncoderJNI", "NUMBER", "nativeCreate", "J", "Ljava", "nio", "ByteBuffer", "at", "org", "NUMBER", "brotli", "NUMBER", "wrapper", "NUMBER", "enc", "NUMBER", "EncoderJNI", "NUMBER", "nativeCreate", "Native", "Method", "at", "org", "NUMBER", "brotli", "NUMBER", "wrapper", "NUMBER", "enc", "NUMBER", "EncoderJNI", "NUMBER", "access", "NUMBER", "EncoderJNI", "NUMBER", "java", "NUMBER", "at", "org", "NUMBER", "brotli", "NUMBER", "wrapper", "NUMBER", "enc", "NUMBER", "EncoderJNI", "Wrapper", "NUMBER", "TAG", "EncoderJNI", "NUMBER", "java", "NUMBER", "at", "org", "NUMBER", "brotli", "NUMBER", "wrapper", "NUMBER", "enc", "NUMBER", "Encoder", "NUMBER", "compress", "Encoder", "NUMBER", "java", "NUMBER", "at", "org", "NUMBER", "brotli", "NUMBER", "wrapper", "NUMBER", "enc", "NUMBER", "Encoder", "NUMBER", "compress", "Encoder", "NUMBER", "java", "NUMBER", "I", "suspect", "it", "has", "to", "do", "with", "gcc", "use", "symbols", "incompatible", "with", "JNI", "LINK", "unsatisfiedlinkerror", "on", "native", "method", "and", "me", "not", "able", "to", "make", "CMake", "to", "do", "the", "right", "thing", "NUMBER", "Anyways", "it", "would", "be", "nice", "if", "we", "could", "have", "the", "Windows", "libs", "along", "with", "the", "executable", "similar", "to", "the", "other", "platforms", "NUMBER", "I", "was", "not", "use", "Bazel", "NUMBER", "I", "was", "basically", "just", "following", "the", "build", "instructions", "of", "the", "readme", "NUMBER", "md", "for", "CMake", "NUMBER", "I", "get", "the", "following", "NUMBER", "dlls", "as", "a", "result", "libbrotlicommon", "NUMBER", "dll", "libbrotlidec", "NUMBER", "dll", "libbrotlienc", "NUMBER", "dll", "However", "when", "the", "JNI", "calls", "to", "those", "NUMBER", "dlls", "fail", "with", "the", "above", "UnsatisfiedLinkError", "I", "tried", "to", "add", "CMAKE_CXX_FLAGS", "D_JNI_IMPLEMENTATION_", "Wl", "kill", "at", "and", "to", "include", "the", "JAVA", "headers", "CMAKE_CXX_STANDARD_LIBRARIES", "I", "JAVA_HOME", "include", "I", "JAVA_HOME", "include", "win", "NUMBER", "Anyways", "the", "result", "was", "the", "same", "NUMBER", "Thank", "you", "very", "much", "for", "looking", "into", "the", "matter", "NUMBER", "Yep", "seems", "to", "work", "fine", "NUMBER", "Thanks", "Another", "quick", "question", "I", "don", "t", "see", "JNI", "build", "for", "platforms", "other", "than", "Windows", "at", "bintray", "LINK", "file", "Do", "other", "platforms", "not", "need", "separate", "JNI", "libraries", "E", "NUMBER", "g", "NUMBER", "can", "I", "use", "libbrotlicommon", "NUMBER", "so", "libbrotlienc", "NUMBER", "so", "on", "Linux", "for", "JNI", "calls", "to", "the", "encoder", "Subj", "Is", "NUMBER", "going", "to", "be", "a", "stable", "release", "I", "be", "maintaining", "OCaml", "bindings", "to", "brotli", "and", "the", "API", "change", "quite", "often", "LINK", "brotli", "I", "just", "compiled", "brotli", "NUMBER", "on", "a", "Linux", "system", "openSUSE", "Leap", "NUMBER", "according", "the", "build", "instructions", "within", "the", "README", "NUMBER", "md", "file", "NUMBER", "As", "a", "first", "test", "I", "compressed", "an", "arbitrary", "log", "file", "and", "I", "get", "an", "output", "file", "slightly", "smaller", "than", "the", "xz", "variant", "not", "a", "benchmark", "no", "special", "optimizations", "NUMBER", "Just", "for", "curiosity", "I", "downloaded", "also", "the", "file", "brotli", "linux", "v", "NUMBER", "zip", "and", "repeated", "the", "compression", "with", "the", "precompiled", "brotli", "binary", "and", "surprisingly", "the", "compression", "was", "now", "do", "nearly", "three", "times", "faster", "with", "the", "same", "resulting", "output", "NUMBER", "After", "some", "test", "I", "find", "out", "that", "setting", "BUILD_TYPE", "Release", "instead", "of", "the", "default", "BUILD_TYPE", "Debug", "in", "the", "configure", "cmake", "script", "leads", "also", "to", "the", "shorter", "compression", "time", "NUMBER", "This", "setting", "may", "be", "also", "achieved", "by", "the", "option", "disable", "debug", "NUMBER", "So", "I", "recommend", "to", "add", "an", "according", "information", "into", "the", "build", "instructions", "to", "let", "the", "brotli", "performance", "appear", "in", "the", "right", "light", "NUMBER", "But", "I", "be", "a", "layman", "in", "this", "area", "and", "maybe", "I", "have", "overseen", "something", "NUMBER", "Hello", "I", "just", "learned", "about", "this", "project", "thumbs", "up", "Unfortunately", "the", "default", "install", "produces", "usr", "bin", "bro", "executable", "and", "that", "conflict", "with", "another", "well", "know", "project", "The", "Bro", "Network", "Security", "Monitor", "LINK", "NUMBER", "Of", "course", "the", "executable", "name", "can", "be", "tweaked", "by", "each", "distribution", "but", "I", "would", "rather", "see", "a", "change", "at", "the", "source", "probably", "renaming", "it", "to", "usr", "bin", "brotli", "NUMBER", "There", "be", "one", "bug", "already", "for", "Gentoo", "NUMBER", "LINK", "I", "guess", "other", "distros", "will", "pop", "up", "NUMBER", "How", "do", "you", "feel", "about", "that", "Great", "I", "really", "hate", "report", "fix", "in", "master", "bug", "apology", "for", "that", "I", "only", "checked", "the", "latest", "release", "tarball", "This", "project", "be", "in", "C", "but", "the", "release", "be", "Python", "WHL", "What", "gives", "wheel", "package", "will", "no", "longer", "be", "uploaded", "to", "Github", "for", "next", "release", "as", "they", "be", "automatically", "publish", "on", "the", "Python", "Package", "Index", "NUMBER", "LINK", "Well", "Windows", "would", "be", "a", "start", "seeing", "how", "Zstd", "Lizard", "and", "LZ", "NUMBER", "be", "already", "doing", "that", "LINK", "LINK", "LINK", "Agreed", "executables", "for", "Windows", "NUMBER", "NUMBER", "bit", "would", "be", "a", "great", "start", "NUMBER", "Thanks", "for", "your", "pull", "request", "NUMBER", "It", "looks", "like", "this", "may", "be", "your", "first", "contribution", "to", "a", "Google", "open", "source", "project", "NUMBER", "Before", "we", "can", "look", "at", "your", "pull", "request", "you", "ll", "need", "to", "sign", "a", "Contributor", "License", "Agreement", "CLA", "NUMBER", "memo", "Please", "visit", "TAG", "to", "sign", "NUMBER", "Once", "you", "ve", "sign", "please", "reply", "here", "e", "NUMBER", "g", "NUMBER", "I", "sign", "it", "and", "we", "ll", "verify", "NUMBER", "Thanks", "NUMBER", "If", "you", "ve", "already", "sign", "a", "CLA", "it", "s", "possible", "we", "don", "t", "have", "your", "GitHub", "username", "or", "you", "re", "use", "a", "different", "email", "address", "NUMBER", "Check", "your", "exist", "CLA", "data", "LINK", "and", "verify", "that", "your", "email", "be", "set", "on", "your", "git", "commit", "LINK", "your", "email", "in", "git", "NUMBER", "If", "your", "company", "sign", "a", "CLA", "they", "designated", "a", "Point", "of", "Contact", "who", "decides", "which", "employees", "be", "authorized", "to", "participate", "NUMBER", "You", "may", "need", "to", "contact", "the", "Point", "of", "Contact", "for", "your", "company", "and", "ask", "to", "be", "add", "to", "the", "group", "of", "authorized", "contributors", "NUMBER", "If", "you", "don", "t", "know", "who", "your", "Point", "of", "Contact", "be", "direct", "the", "project", "maintainer", "to", "go", "cla", "troubleshoot", "NUMBER", "In", "order", "to", "pass", "this", "check", "please", "resolve", "this", "problem", "and", "have", "the", "pull", "request", "author", "add", "another", "comment", "and", "the", "bot", "will", "run", "again", "NUMBER", "TAG", "I", "don", "t", "have", "a", "Google", "work", "account", "NUMBER", "How", "can", "I", "sign", "the", "CLA", "It", "d", "be", "great", "if", "brotli", "version", "and", "as", "v", "be", "already", "taken", "brotli", "V", "would", "output", "the", "version", "NUMBER", "I", "be", "sorry", "for", "only", "test", "with", "release", "NUMBER", "I", "new", "release", "would", "be", "nice", "NUMBER", "Alpine", "NUMBER", "any", "go", "build", "results", "in", "the", "following", "github", "NUMBER", "com", "google", "brotli", "go", "cbrotli", "usr", "local", "lib", "libbrotlidec", "NUMBER", "a", "state", "NUMBER", "c", "NUMBER", "o", "In", "function", "BrotliDecoderStateInitWithCustomAllocators", "usr", "local", "brotli", "c", "dec", "state", "NUMBER", "c", "NUMBER", "undefined", "reference", "to", "BrotliGetDictionary", "usr", "local", "lib", "libbrotlienc", "NUMBER", "a", "encode", "NUMBER", "c", "NUMBER", "o", "In", "function", "EncodeData", "usr", "local", "brotli", "c", "enc", "encode", "NUMBER", "c", "NUMBER", "undefined", "reference", "to", "BrotliGetDictionary", "usr", "local", "lib", "libbrotlienc", "NUMBER", "a", "encode", "NUMBER", "c", "NUMBER", "o", "In", "function", "BrotliCompressBufferQuality", "NUMBER", "usr", "local", "brotli", "c", "enc", "encode", "NUMBER", "c", "NUMBER", "undefined", "reference", "to", "BrotliGetDictionary", "collect", "NUMBER", "error", "ld", "returned", "NUMBER", "exit", "status", "Brotli", "be", "build", "use", "the", "following", "command", "in", "a", "Dockerfile", "RUN", "cd", "usr", "local", "git", "clone", "LINK", "cd", "brotli", "mkdir", "out", "cd", "out", "NUMBER", "configure", "cmake", "disable", "shared", "libs", "make", "make", "install", "I", "have", "no", "idea", "what", "I", "should", "do", "I", "be", "unable", "to", "reproduce", "it", "on", "OSX", "local", "Alpine", "VM", "and", "so", "on", "NUMBER", "Whatever", "I", "do", "during", "the", "CI", "process", "it", "s", "on", "CircleCI", "this", "happens", "NUMBER", "Running", "with", "x", "gcc", "I", "NUMBER", "fPIC", "m", "NUMBER", "pthread", "fmessage", "length", "NUMBER", "fdebug", "prefix", "map", "WORK", "tmp", "go", "build", "gno", "record", "gcc", "switches", "o", "WORK", "bitbucket", "NUMBER", "org", "portablecloud", "cube", "vendor", "github", "NUMBER", "com", "google", "brotli", "go", "cbrotli", "_obj", "_cgo_", "NUMBER", "o", "WORK", "bitbucket", "NUMBER", "org", "portablecloud", "cube", "vendor", "github", "NUMBER", "com", "google", "brotli", "go", "cbrotli", "_obj", "_cgo_main", "NUMBER", "o", "WORK", "bitbucket", "NUMBER", "org", "portablecloud", "cube", "vendor", "github", "NUMBER", "com", "google", "brotli", "go", "cbrotli", "_obj", "_cgo_export", "NUMBER", "o", "WORK", "bitbucket", "NUMBER", "org", "portablecloud", "cube", "vendor", "github", "NUMBER", "com", "google", "brotli", "go", "cbrotli", "_obj", "cgo", "NUMBER", "cgo", "NUMBER", "o", "WORK", "bitbucket", "NUMBER", "org", "portablecloud", "cube", "vendor", "github", "NUMBER", "com", "google", "brotli", "go", "cbrotli", "_obj", "reader", "NUMBER", "cgo", "NUMBER", "o", "WORK", "bitbucket", "NUMBER", "org", "portablecloud", "cube", "vendor", "github", "NUMBER", "com", "google", "brotli", "go", "cbrotli", "_obj", "writer", "NUMBER", "cgo", "NUMBER", "o", "g", "O", "NUMBER", "lbrotlicommon", "lbrotlidec", "lbrotlienc", "It", "might", "have", "to", "do", "with", "randomness", "in", "the", "file", "I", "can", "easily", "compress", "a", "large", "file", "of", "zeros", "but", "not", "JPGs", "over", "NUMBER", "MB", "or", "dev", "random", "over", "NUMBER", "bytes", "NUMBER", "javascript", "brotli", "NUMBER", "js", "const", "fs", "require", "fs", "const", "compressSync", "require", "iltorb", "NUMBER", "compressSync", "const", "args", "process", "NUMBER", "argv", "NUMBER", "slice", "NUMBER", "const", "filename", "args", "NUMBER", "console", "NUMBER", "time", "compress", "const", "output", "compressSync", "fs", "NUMBER", "readFileSync", "filename", "console", "NUMBER", "timeEnd", "compress", "console", "NUMBER", "log", "output", "NUMBER", "length", "bytes", "bash", "increase", "to", "NUMBER", "to", "see", "it", "fail", "stall", "or", "you", "might", "need", "to", "go", "a", "little", "higher", "dd", "if", "dev", "urandom", "bs", "NUMBER", "count", "NUMBER", "brotli", "NUMBER", "txt", "node", "brotli", "NUMBER", "js", "brotli", "NUMBER", "txt", "We", "don", "t", "have", "to", "have", "it", "all", "but", "I", "think", "it", "works", "best", "in", "the", "root", "directory", "so", "that", "the", "settings", "apply", "to", "all", "languages", "NUMBER", "Up", "to", "you", "After", "pulling", "LINK", "a", "bunch", "of", "JS", "and", "CSS", "file", "I", "have", "fail", "to", "compress", "with", "the", "following", "error", "brotli", "c", "enc", "NUMBER", "NUMBER", "write_bits", "NUMBER", "h", "NUMBER", "BrotliWriteBits", "Assertion", "bits", "n_bits", "NUMBER", "fail", "NUMBER", "bash", "line", "NUMBER", "NUMBER", "Aborted", "brotli", "Zk", "MY_FILE_PATH", "Using", "the", "previous", "commit", "resolve", "the", "issue", "NUMBER", "Cool", "sounds", "good", "NUMBER", "I", "just", "test", "and", "it", "looks", "like", "it", "s", "consistently", "reproducible", "with", "this", "file", "balls", "NUMBER", "txt", "LINK", "On", "an", "up", "to", "date", "Debian", "Sid", "run", "in", "Docker", "on", "a", "MacBook", "Pro", "Retina", "NUMBER", "GHz", "Haswell", "Core", "i", "NUMBER", "with", "a", "build", "generate", "use", "make", "brotli", "I", "get", "the", "above", "error", "NUMBER", "Outside", "of", "Docker", "in", "OS", "X", "the", "same", "command", "produces", "this", "error", "Assertion", "fail", "bits", "n_bits", "NUMBER", "function", "BrotliWriteBits", "file", "c", "enc", "NUMBER", "write_bits", "NUMBER", "h", "line", "NUMBER", "Abort", "trap", "NUMBER", "Hm", "well", "this", "be", "what", "I", "see", "in", "Debian", "in", "Docker", "gibson", "NUMBER", "aabb", "NUMBER", "c", "NUMBER", "cc", "v", "Using", "build", "in", "specs", "NUMBER", "COLLECT_GCC", "cc", "COLLECT_LTO_WRAPPER", "usr", "lib", "gcc", "x", "NUMBER", "_", "NUMBER", "linux", "gnu", "NUMBER", "lto", "wrapper", "Target", "x", "NUMBER", "_", "NUMBER", "linux", "gnu", "Configured", "with", "NUMBER", "src", "configure", "v", "with", "pkgversion", "Debian", "NUMBER", "NUMBER", "with", "bugurl", "file", "usr", "share", "doc", "gcc", "NUMBER", "README", "NUMBER", "Bugs", "enable", "languages", "c", "ada", "c", "java", "go", "d", "fortran", "objc", "obj", "c", "prefix", "usr", "program", "suffix", "NUMBER", "program", "prefix", "x", "NUMBER", "_", "NUMBER", "linux", "gnu", "enable", "shared", "enable", "linker", "build", "id", "libexecdir", "usr", "lib", "without", "include", "gettext", "enable", "threads", "posix", "libdir", "usr", "lib", "enable", "nls", "with", "sysroot", "enable", "clocale", "gnu", "enable", "libstdcxx", "debug", "enable", "libstdcxx", "time", "yes", "with", "default", "libstdcxx", "abi", "new", "enable", "gnu", "unique", "object", "disable", "vtable", "verify", "enable", "libmpx", "enable", "plugin", "enable", "default", "pie", "with", "system", "zlib", "disable", "browser", "plugin", "enable", "java", "awt", "gtk", "enable", "gtk", "cairo", "with", "java", "home", "usr", "lib", "jvm", "java", "NUMBER", "gcj", "NUMBER", "amd", "NUMBER", "jre", "enable", "java", "home", "with", "jvm", "root", "dir", "usr", "lib", "jvm", "java", "NUMBER", "gcj", "NUMBER", "amd", "NUMBER", "with", "jvm", "jar", "dir", "usr", "lib", "jvm", "export", "java", "NUMBER", "gcj", "NUMBER", "amd", "NUMBER", "with", "arch", "directory", "amd", "NUMBER", "with", "ecj", "jar", "usr", "share", "java", "eclipse", "ecj", "NUMBER", "jar", "with", "target", "system", "zlib", "enable", "objc", "gc", "auto", "enable", "multiarch", "with", "arch", "NUMBER", "i", "NUMBER", "with", "abi", "m", "NUMBER", "with", "multilib", "list", "m", "NUMBER", "m", "NUMBER", "mx", "NUMBER", "enable", "multilib", "with", "tune", "generic", "enable", "checking", "release", "build", "x", "NUMBER", "_", "NUMBER", "linux", "gnu", "host", "x", "NUMBER", "_", "NUMBER", "linux", "gnu", "target", "x", "NUMBER", "_", "NUMBER", "linux", "gnu", "Thread", "model", "posix", "gcc", "version", "NUMBER", "NUMBER", "Debian", "NUMBER", "NUMBER", "gibson", "NUMBER", "aabb", "NUMBER", "c", "NUMBER", "env", "HOSTNAME", "NUMBER", "aabb", "NUMBER", "c", "NUMBER", "OLDPWD", "cyph", "commands", "GPG_TTY", "dev", "pts", "NUMBER", "JAVA_HOME", "usr", "lib", "jvm", "java", "NUMBER", "openjdk", "amd", "NUMBER", "GIT_EDITOR", "vim", "SSH_AUTH_SOCK", "tmp", "ssh", "svgIx", "NUMBER", "CgOzU", "agent", "NUMBER", "GOPATH", "home", "gibson", "go", "PWD", "home", "gibson", "HOME", "home", "gibson", "SSH_AGENT_PID", "NUMBER", "no_proxy", "NUMBER", "local", "NUMBER", "NUMBER", "TERM", "xterm", "EMSDK", "home", "gibson", "emsdk", "portable", "SHLVL", "NUMBER", "EMSCRIPTEN", "home", "gibson", "emsdk", "portable", "emscripten", "NUMBER", "PATH", "home", "gibson", "google", "cloud", "sdk", "bin", "opt", "local", "bin", "opt", "local", "sbin", "usr", "local", "opt", "go", "libexec", "bin", "home", "gibson", "go", "bin", "home", "gibson", "emsdk", "portable", "home", "gibson", "emsdk", "portable", "clang", "e", "NUMBER", "_", "NUMBER", "bit", "home", "gibson", "emsdk", "portable", "emscripten", "NUMBER", "usr", "local", "sbin", "usr", "local", "bin", "usr", "sbin", "usr", "bin", "sbin", "bin", "node_modules", "NUMBER", "bin", "BINARYEN_ROOT", "home", "gibson", "emsdk", "portable", "clang", "e", "NUMBER", "_", "NUMBER", "bit", "binaryen", "EM_CONFIG", "home", "gibson", "NUMBER", "emscripten", "BASH_FUNC_log", "echo", "e", "n", "n", "n", "date", "n", "BASH_FUNC_checkfail", "if", "then", "fail", "fi", "BASH_FUNC_pass", "log", "PASS", "exit", "NUMBER", "BASH_FUNC_fail", "if", "then", "log", "n", "nFAIL", "else", "log", "FAIL", "fi", "exit", "NUMBER", "BASH_FUNC_unbindmount", "if", "circleCI", "then", "sudo", "umount", "NUMBER", "fi", "rm", "rf", "NUMBER", "BASH_FUNC_notify", "node_modules", "NUMBER", "bin", "notify", "text", "dev", "null", "log", "BASH_FUNC_bindmount", "rm", "rf", "NUMBER", "NUMBER", "dev", "null", "if", "circleCI", "then", "cp", "a", "NUMBER", "NUMBER", "else", "mkdir", "NUMBER", "NUMBER", "dev", "null", "sudo", "mount", "bind", "NUMBER", "NUMBER", "fi", "_", "usr", "bin", "env", "Hmm", "I", "had", "an", "image", "that", "I", "was", "going", "to", "upload", "but", "I", "can", "t", "reproduce", "it", "there", "the", "only", "image", "where", "it", "s", "reproducible", "has", "some", "manual", "change", "applied", "via", "docker", "commit", "nothing", "directly", "relevant", "just", "Google", "Cloud", "SDK", "authentication", "and", "some", "local", "directories", "mounted", "and", "locked", "in", "required", "because", "of", "that", "commit", "so", "it", "d", "be", "a", "bit", "messy", "to", "try", "to", "share", "although", "I", "can", "give", "a", "link", "and", "instructions", "for", "build", "the", "same", "image", "on", "your", "machine", "if", "needed", "NUMBER", "All", "that", "be", "the", "case", "maybe", "this", "be", "just", "a", "macOS", "problem", "that", "somehow", "sort", "of", "poisons", "Docker", "for", "Mac", "in", "the", "above", "scenario", "Not", "sure", "what", "else", "would", "be", "worth", "test", "if", "you", "ve", "already", "tried", "it", "on", "a", "Mac", "though", "NUMBER", "Since", "I", "didn", "t", "mention", "originally", "in", "case", "it", "helps", "I", "m", "currently", "run", "OS", "X", "El", "Capitan", "NUMBER", "Sorry", "about", "the", "delay", "eustas", "NUMBER", "You", "should", "be", "able", "to", "recreate", "the", "image", "by", "cloning", "LINK", "ensuring", "that", "a", "recent", "version", "of", "Node", "NUMBER", "js", "be", "install", "make", "an", "empty", "NUMBER", "cyph", "directory", "ensuring", "that", "NUMBER", "gnupg", "NUMBER", "ssh", "and", "NUMBER", "gitconfig", "exist", "run", "make", "and", "skipping", "through", "some", "Google", "Cloud", "authentication", "prompts", "at", "the", "end", "NUMBER", "This", "should", "take", "about", "NUMBER", "NUMBER", "minutes", "NUMBER", "You", "may", "also", "want", "to", "edit", "lines", "NUMBER", "and", "NUMBER", "of", "docker", "NUMBER", "js", "to", "point", "to", "directories", "other", "than", "your", "actual", "NUMBER", "gnupg", "and", "NUMBER", "ssh", "and", "afterwards", "you", "can", "delete", "the", "generate", "NUMBER", "cyphbackup", "NUMBER", "Sorry", "about", "the", "delay", "eustas", "Just", "had", "a", "chance", "to", "look", "into", "this", "and", "figured", "out", "what", "the", "problem", "was", "NUMBER", "I", "could", "still", "reproduce", "the", "BrotliWriteBits", "assertion", "failure", "even", "after", "build", "with", "debug", "mode", "as", "you", "suggested", "but", "it", "turns", "out", "that", "debug", "and", "non", "debug", "modes", "both", "work", "fine", "if", "I", "do", "a", "make", "clean", "before", "make", "brotli", "so", "I", "guess", "this", "be", "just", "a", "minor", "build", "script", "issue", "NUMBER", "To", "get", "into", "the", "state", "that", "causes", "the", "above", "error", "reproducible", "on", "a", "standard", "Linux", "system", "without", "Docker", "you", "can", "run", "git", "checkout", "NUMBER", "a", "NUMBER", "debedec", "NUMBER", "eb", "NUMBER", "c", "NUMBER", "c", "NUMBER", "a", "NUMBER", "d", "NUMBER", "d", "NUMBER", "make", "clean", "make", "brotli", "git", "checkout", "NUMBER", "b", "NUMBER", "dc", "NUMBER", "a", "NUMBER", "bd", "NUMBER", "d", "NUMBER", "c", "NUMBER", "c", "NUMBER", "cba", "NUMBER", "b", "NUMBER", "make", "brotli", "NUMBER", "Hi", "memoryview", "objects", "be", "often", "use", "to", "avoid", "copies", "in", "data", "handle", "NUMBER", "Currently", "in", "version", "NUMBER", "the", "compress", "decompress", "API", "do", "not", "support", "memoryview", "objects", "as", "input", "NUMBER", "In", "NUMBER", "import", "brotli", "In", "NUMBER", "data_buf", "memoryview", "b", "foo", "bar", "In", "NUMBER", "brotli", "NUMBER", "compress", "data_buf", "TypeError", "Traceback", "most", "recent", "call", "last", "TAG", "in", "TAG", "NUMBER", "brotli", "NUMBER", "compress", "data_buf", "Users", "rolando", "miniconda", "NUMBER", "envs", "env", "lib", "python", "NUMBER", "site", "package", "brotli", "NUMBER", "py", "in", "compress", "string", "mode", "quality", "lgwin", "lgblock", "dictionary", "NUMBER", "compressor", "Compressor", "mode", "mode", "quality", "quality", "lgwin", "lgwin", "NUMBER", "lgblock", "lgblock", "dictionary", "dictionary", "NUMBER", "return", "compressor", "NUMBER", "process", "string", "compressor", "NUMBER", "finish", "NUMBER", "NUMBER", "Decompress", "a", "compressed", "byte", "string", "NUMBER", "TypeError", "process", "argument", "NUMBER", "must", "be", "read", "only", "bytes", "like", "object", "not", "memoryview", "Other", "compressors", "like", "gzip", "do", "support", "memoryview", "objects", "as", "input", "In", "NUMBER", "import", "gzip", "In", "NUMBER", "gzip", "NUMBER", "compress", "memoryview", "b", "foo", "bar", "b", "x", "NUMBER", "f", "x", "NUMBER", "b", "x", "NUMBER", "x", "NUMBER", "x", "NUMBER", "pY", "x", "NUMBER", "xffK", "xcb", "xcf", "xd", "NUMBER", "OJ", "x", "NUMBER", "x", "NUMBER", "b", "x", "NUMBER", "xe", "NUMBER", "x", "NUMBER", "x", "NUMBER", "x", "NUMBER", "x", "NUMBER", "These", "decode", "methods", "not", "currently", "export", "on", "win", "platforms", "without", "BROTLI_DEC_API", "modifier", "NUMBER", "They", "be", "currently", "be", "export", "for", "OSX", "and", "Linux", "platforms", "NUMBER", "In", "my", "quest", "to", "understand", "the", "format", "I", "would", "expect", "v", "verbose", "flags", "to", "show", "more", "output", "NUMBER", "I", "start", "to", "write", "a", "verbose", "decoder", "from", "scratch", "but", "then", "notice", "the", "excellent", "research", "brotlidump", "NUMBER", "py", "script", "which", "be", "ultra", "helpful", "once", "you", "copy", "dictionary", "NUMBER", "bin", "to", "NUMBER", "NUMBER", "It", "would", "be", "nice", "if", "this", "kind", "of", "output", "came", "from", "v", "NUMBER", "Will", "implement", "myself", "if", "necessary", "NUMBER", "c", "tool", "brotli", "NUMBER", "c", "line", "NUMBER", "miss", "fclose", "f", "also", "applicable", "for", "following", "if", "statements", "Win", "NUMBER", "and", "Win", "NUMBER", "configuration", "support", "for", "visual", "studio", "solutions", "Thanks", "for", "your", "pull", "request", "NUMBER", "It", "looks", "like", "this", "may", "be", "your", "first", "contribution", "to", "a", "Google", "open", "source", "project", "NUMBER", "Before", "we", "can", "look", "at", "your", "pull", "request", "you", "ll", "need", "to", "sign", "a", "Contributor", "License", "Agreement", "CLA", "NUMBER", "memo", "Please", "visit", "TAG", "to", "sign", "NUMBER", "Once", "you", "ve", "sign", "please", "reply", "here", "e", "NUMBER", "g", "NUMBER", "I", "sign", "it", "and", "we", "ll", "verify", "NUMBER", "Thanks", "NUMBER", "If", "you", "ve", "already", "sign", "a", "CLA", "it", "s", "possible", "we", "don", "t", "have", "your", "GitHub", "username", "or", "you", "re", "use", "a", "different", "email", "address", "NUMBER", "Check", "your", "exist", "CLA", "data", "LINK", "and", "verify", "that", "your", "email", "be", "set", "on", "your", "git", "commit", "LINK", "your", "email", "in", "git", "NUMBER", "If", "your", "company", "sign", "a", "CLA", "they", "designated", "a", "Point", "of", "Contact", "who", "decides", "which", "employees", "be", "authorized", "to", "participate", "NUMBER", "You", "may", "need", "to", "contact", "the", "Point", "of", "Contact", "for", "your", "company", "and", "ask", "to", "be", "add", "to", "the", "group", "of", "authorized", "contributors", "NUMBER", "If", "you", "don", "t", "know", "who", "your", "Point", "of", "Contact", "be", "direct", "the", "project", "maintainer", "to", "go", "cla", "troubleshoot", "NUMBER", "In", "order", "to", "pass", "this", "check", "please", "resolve", "this", "problem", "and", "have", "the", "pull", "request", "author", "add", "another", "comment", "and", "the", "bot", "will", "run", "again", "NUMBER", "TAG", "I", "ve", "sign", "CLA", "CLAs", "look", "good", "thanks", "TAG", "I", "though", "that", "system", "Windows", "in", "filter", "configurations", "will", "make", "it", "only", "available", "in", "windows", "and", "results", "won", "t", "change", "anything", "in", "linux", "gmake", "NUMBER", "Thanks", "for", "the", "response", "and", "note", "I", "ll", "make", "it", "better", "Sorry", "seems", "like", "VS", "only", "care", "about", "platform", "name", "not", "what", "we", "write", "in", "front", "of", "architecture", "NUMBER", "But", "I", "fix", "mistypings", "you", "mention", "NUMBER", "Fixes", "NUMBER", "The", "issue", "be", "with", "GCC", "NUMBER", "that", "add", "a", "check", "Wint", "in", "bool", "context", "NUMBER", "Maybe", "you", "d", "prefer", "to", "disable", "this", "check", "instead", "Note", "I", "haven", "t", "sign", "the", "CLA", "yet", "NUMBER", "Thanks", "for", "your", "pull", "request", "NUMBER", "It", "looks", "like", "this", "may", "be", "your", "first", "contribution", "to", "a", "Google", "open", "source", "project", "NUMBER", "Before", "we", "can", "look", "at", "your", "pull", "request", "you", "ll", "need", "to", "sign", "a", "Contributor", "License", "Agreement", "CLA", "NUMBER", "memo", "Please", "visit", "TAG", "to", "sign", "NUMBER", "Once", "you", "ve", "sign", "please", "reply", "here", "e", "NUMBER", "g", "NUMBER", "I", "sign", "it", "and", "we", "ll", "verify", "NUMBER", "Thanks", "NUMBER", "If", "you", "ve", "already", "sign", "a", "CLA", "it", "s", "possible", "we", "don", "t", "have", "your", "GitHub", "username", "or", "you", "re", "use", "a", "different", "email", "address", "NUMBER", "Check", "your", "exist", "CLA", "data", "LINK", "and", "verify", "that", "your", "email", "be", "set", "on", "your", "git", "commit", "LINK", "your", "email", "in", "git", "NUMBER", "If", "your", "company", "sign", "a", "CLA", "they", "designated", "a", "Point", "of", "Contact", "who", "decides", "which", "employees", "be", "authorized", "to", "participate", "NUMBER", "You", "may", "need", "to", "contact", "the", "Point", "of", "Contact", "for", "your", "company", "and", "ask", "to", "be", "add", "to", "the", "group", "of", "authorized", "contributors", "NUMBER", "If", "you", "don", "t", "know", "who", "your", "Point", "of", "Contact", "be", "direct", "the", "project", "maintainer", "to", "go", "cla", "troubleshoot", "NUMBER", "In", "order", "to", "pass", "this", "check", "please", "resolve", "this", "problem", "and", "have", "the", "pull", "request", "author", "add", "another", "comment", "and", "the", "bot", "will", "run", "again", "NUMBER", "TAG", "I", "sign", "it", "CLAs", "look", "good", "thanks", "TAG", "Oh", "Ohkay", "NUMBER", "Thanks", "for", "informing", "Use", "tool", "NUMBER", "ietf", "NUMBER", "org", "for", "display", "RFC", "NUMBER", "tool", "NUMBER", "ietf", "NUMBER", "org", "has", "HTML", "links", "which", "be", "helpful", "when", "reading", "in", "browser", "Add", "appveyor", "badge", "Thanks", "for", "your", "pull", "request", "NUMBER", "It", "looks", "like", "this", "may", "be", "your", "first", "contribution", "to", "a", "Google", "open", "source", "project", "NUMBER", "Before", "we", "can", "look", "at", "your", "pull", "request", "you", "ll", "need", "to", "sign", "a", "Contributor", "License", "Agreement", "CLA", "NUMBER", "memo", "Please", "visit", "TAG", "to", "sign", "NUMBER", "Once", "you", "ve", "sign", "please", "reply", "here", "e", "NUMBER", "g", "NUMBER", "I", "sign", "it", "and", "we", "ll", "verify", "NUMBER", "Thanks", "NUMBER", "If", "you", "ve", "already", "sign", "a", "CLA", "it", "s", "possible", "we", "don", "t", "have", "your", "GitHub", "username", "or", "you", "re", "use", "a", "different", "email", "address", "NUMBER", "Check", "your", "exist", "CLA", "data", "LINK", "and", "verify", "that", "your", "email", "be", "set", "on", "your", "git", "commit", "LINK", "your", "email", "in", "git", "NUMBER", "If", "you", "sign", "the", "CLA", "as", "a", "corporation", "please", "let", "us", "know", "the", "company", "s", "name", "NUMBER", "TAG", "Finally", "I", "have", "just", "release", "a", "new", "version", "of", "NUMBER", "Zip", "ZS", "LINK", "Zip", "zstd", "NUMBER", "Within", "the", "NUMBER", "z", "Zip", "container", "the", "threading", "be", "do", "with", "skippable", "frames", "LINK", "like", "in", "ZStandard", "LINK", "NUMBER", "All", "levels", "NUMBER", "use", "a", "default", "windows", "size", "of", "NUMBER", "Here", "be", "a", "screenshot", "of", "it", "Methods", "LINK", "Zip", "zstd", "Methods", "NUMBER", "png", "Methods", "with", "Brotli", "Compression", "decompression", "of", "NUMBER", "br", "file", "can", "be", "add", "also", "when", "I", "have", "some", "MAGIC", "s", "therefore", "NUMBER", "I", "have", "do", "also", "some", "benchmarking", "Compression", "Speed", "vs", "Ratio", "LINK", "Zip", "zstd", "dl", "compr", "v", "NUMBER", "png", "Compression", "Speed", "vs", "Ratio", "Decompression", "Speed", "LINK", "Zip", "zstd", "dl", "decomp", "v", "NUMBER", "png", "Decompression", "Speed", "per", "Level", "Does", "the", "implementation", "look", "okay", "for", "you", "or", "be", "there", "any", "issue", "with", "it", "LINK", "It", "s", "currently", "in", "test", "btw", "LINK", "brotli", "cc", "mcatanzaro", "Awesome", "Next", "step", "be", "to", "un", "bundle", "it", "from", "WebKit", "NUMBER", "Introduced", "in", "cdca", "NUMBER", "b", "NUMBER", "f", "NUMBER", "dd", "NUMBER", "When", "compile", "the", "given", "test", "NUMBER", "c", "file", "with", "script", "NUMBER", "sh", "just", "put", "them", "both", "in", "the", "same", "directory", "and", "run", "script", "NUMBER", "sh", "you", "should", "see", "the", "following", "timing", "differences", "on", "compressing", "a", "NUMBER", "MB", "buffer", "of", "zeroes", "before", "and", "after", "the", "commit", "above", "NUMBER", "b", "NUMBER", "real", "NUMBER", "m", "NUMBER", "s", "user", "NUMBER", "m", "NUMBER", "s", "sys", "NUMBER", "m", "NUMBER", "s", "NUMBER", "b", "NUMBER", "real", "NUMBER", "m", "NUMBER", "s", "user", "NUMBER", "m", "NUMBER", "s", "sys", "NUMBER", "m", "NUMBER", "s", "This", "be", "most", "obvious", "when", "use", "BrotliEncoderCompress", "uncomment", "the", "relevant", "NUMBER", "lines", "in", "test", "NUMBER", "c", "and", "comment", "out", "the", "rest", "to", "verify", "but", "I", "ve", "managed", "to", "reduce", "the", "problem", "to", "demonstrate", "it", "with", "BrotliEncoderCompressStream", "NUMBER", "The", "cause", "appears", "to", "be", "the", "use", "of", "a", "large", "value", "of", "available_in", "NUMBER", "If", "you", "swap", "the", "commented", "partsize", "line", "to", "be", "NUMBER", "matching", "the", "buffer", "size", "use", "in", "the", "bro", "tool", "the", "performance", "difference", "almost", "vanishes", "NUMBER", "test", "NUMBER", "c", "include", "TAG", "include", "TAG", "include", "TAG", "define", "MIN", "x", "y", "x", "TAG", "NUMBER", "size_t", "thisinsize", "MIN", "partsize", "insize", "insize", "thisinsize", "int", "rc", "BrotliEncoderCompressStream", "s", "insize", "NUMBER", "BROTLI_OPERATION_PROCESS", "BROTLI_OPERATION_FINISH", "thisinsize", "inref", "outsize", "outref", "NULL", "if", "rc", "abort", "if", "thisinsize", "NUMBER", "abort", "BrotliEncoderDestroyInstance", "s", "script", "NUMBER", "sh", "bin", "bash", "set", "o", "errexit", "set", "o", "pipefail", "set", "o", "nounset", "set", "o", "xtrace", "D", "NUMBER", "brot", "NUMBER", "D", "NUMBER", "brot", "NUMBER", "git", "clone", "LINK", "D", "NUMBER", "cd", "D", "NUMBER", "git", "checkout", "cdca", "NUMBER", "b", "NUMBER", "f", "NUMBER", "make", "lib", "git", "clone", "LINK", "D", "NUMBER", "cd", "D", "NUMBER", "git", "checkout", "cdca", "NUMBER", "b", "NUMBER", "f", "make", "lib", "cc", "Wall", "Wextra", "O", "NUMBER", "Wno", "unuse", "parameter", "o", "b", "NUMBER", "I", "D", "NUMBER", "include", "test", "NUMBER", "c", "D", "NUMBER", "libbrotli", "NUMBER", "a", "lm", "cc", "Wall", "Wextra", "O", "NUMBER", "Wno", "unuse", "parameter", "o", "b", "NUMBER", "I", "D", "NUMBER", "include", "test", "NUMBER", "c", "D", "NUMBER", "libbrotli", "NUMBER", "a", "lm", "time", "NUMBER", "b", "NUMBER", "time", "NUMBER", "b", "NUMBER", "I", "m", "not", "extremely", "familiar", "with", "the", "internals", "of", "Brotli", "or", "compression", "in", "general", "so", "this", "may", "be", "a", "naive", "suggestion", "but", "intuitively", "I", "think", "it", "aligns", "philosophically", "with", "Brotli", "s", "use", "of", "a", "build", "in", "dictionary", "NUMBER", "Would", "it", "be", "practical", "for", "a", "future", "version", "of", "Brotli", "to", "detect", "strings", "of", "formats", "like", "base", "NUMBER", "and", "hex", "and", "decode", "them", "to", "binary", "before", "compressing", "re", "encode", "them", "as", "part", "of", "the", "decompression", "process", "I", "notice", "just", "now", "during", "a", "comparison", "between", "compressing", "a", "binary", "file", "and", "the", "equivalent", "base", "NUMBER", "LINK", "issuecomment", "NUMBER", "that", "the", "base", "NUMBER", "version", "ended", "up", "larger", "which", "it", "occur", "to", "me", "shouldn", "t", "need", "to", "be", "the", "case", "given", "that", "the", "two", "contain", "almost", "exactly", "the", "same", "information", "NUMBER", "Got", "it", "thanks", "I", "ll", "post", "it", "there", "NUMBER", "python", "brotli", "has", "Compressor", "for", "streaming", "compression", "but", "nothing", "for", "streaming", "decompression", "NUMBER", "This", "be", "a", "straight", "forward", "copy", "of", "the", "Compressor", "code", "into", "the", "new", "class", "Decompressor", "NUMBER", "Thanks", "for", "your", "pull", "request", "NUMBER", "It", "looks", "like", "this", "may", "be", "your", "first", "contribution", "to", "a", "Google", "open", "source", "project", "NUMBER", "Before", "we", "can", "look", "at", "your", "pull", "request", "you", "ll", "need", "to", "sign", "a", "Contributor", "License", "Agreement", "CLA", "NUMBER", "memo", "Please", "visit", "TAG", "to", "sign", "NUMBER", "Once", "you", "ve", "sign", "please", "reply", "here", "e", "NUMBER", "g", "NUMBER", "I", "sign", "it", "and", "we", "ll", "verify", "NUMBER", "Thanks", "NUMBER", "If", "you", "ve", "already", "sign", "a", "CLA", "it", "s", "possible", "we", "don", "t", "have", "your", "GitHub", "username", "or", "you", "re", "use", "a", "different", "email", "address", "NUMBER", "Check", "your", "exist", "CLA", "data", "LINK", "and", "verify", "that", "your", "email", "be", "set", "on", "your", "git", "commit", "LINK", "your", "email", "in", "git", "NUMBER", "If", "you", "sign", "the", "CLA", "as", "a", "corporation", "please", "let", "us", "know", "the", "company", "s", "name", "NUMBER", "TAG", "I", "sign", "it", "CLAs", "look", "good", "thanks", "TAG", "Apologies", "again", "for", "the", "delay", "here", "NUMBER", "The", "extension", "implementation", "looks", "right", "to", "me", "but", "we", "should", "have", "some", "test", "to", "verify", "correctness", "before", "exposing", "the", "Python", "Decompressor", "class", "in", "the", "module", "NUMBER", "To", "keep", "from", "blocking", "this", "any", "longer", "eustas", "will", "add", "a", "simple", "test", "after", "landing", "this", "PR", "NUMBER", "This", "makes", "the", "Maven", "build", "turn", "the", "created", "jar", "into", "an", "OSGi", "bundle", "NUMBER", "I", "m", "not", "sure", "whether", "Maven", "or", "Bazel", "be", "the", "preferred", "build", "tool", "though", "NUMBER", "Thanks", "Eugene", "If", "you", "want", "to", "make", "downstream", "OSGi", "users", "happy", "they", "ll", "need", "a", "new", "artifact", "NUMBER", "We", "ve", "just", "merge", "a", "pull", "request", "for", "Apache", "Commons", "Compress", "that", "add", "read", "only", "support", "for", "brotli", "based", "on", "dec", "and", "all", "Apache", "Commons", "projects", "try", "to", "be", "bundle", "NUMBER", "We", "ve", "marked", "the", "dependency", "as", "optional", "so", "people", "use", "Compress", "aren", "t", "directly", "affected", "NUMBER", "We", "haven", "t", "cut", "a", "release", "with", "it", "yet", "but", "I", "think", "we", "be", "close", "NUMBER", "If", "you", "be", "interested", "in", "publishing", "new", "artifacts", "I", "d", "be", "happy", "to", "hold", "back", "the", "release", "and", "upgrade", "the", "dependency", "NUMBER", "Sounds", "great", "thanks", "Wow", "thanks", "a", "lot", "NUMBER", "LINK", "compress", "commit", "NUMBER", "eccda", "NUMBER", "e", "NUMBER", "b", "NUMBER", "d", "NUMBER", "bdd", "NUMBER", "e", "NUMBER", "bbf", "NUMBER", "dacc", "NUMBER", "d", "Could", "you", "please", "add", "instructions", "to", "run", "build", "with", "cmake", "on", "Windows", "NUMBER", "Also", "it", "seems", "it", "s", "not", "obvious", "how", "to", "build", "shared", "and", "static", "version", "to", "have", "both", "of", "them", "in", "one", "INSTALL_PREFIX", "directory", "NUMBER", "Another", "issue", "install", "places", "NUMBER", "lib", "file", "into", "bin", "folder", "but", "lib", "be", "expected", "on", "Windows", "NUMBER", "eustas", "it", "looks", "like", "that", "usual", "solution", "be", "to", "name", "static", "lib", "differently", "on", "Windows", "so", "both", "NUMBER", "lib", "file", "for", "shared", "and", "static", "build", "can", "reside", "in", "the", "same", "directory", "NUMBER", "But", "it", "seems", "that", "standard", "naming", "convention", "for", "this", "be", "not", "available", "NUMBER", "For", "example", "conda", "forge", "s", "Windows", "build", "add", "_static", "suffix", "NUMBER", "Boost", "add", "lib", "prefix", "for", "static", "libs", "but", "it", "might", "be", "because", "boost", "s", "suffixes", "already", "depends", "on", "build", "configuration", "NUMBER", "Current", "ugly", "workaround", "to", "build", "static", "and", "shared", "libs", "with", "manual", "moving", "of", "build", "file", "can", "be", "find", "here", "LINK", "forge", "brotli", "feedstock", "blob", "master", "recipe", "bld", "NUMBER", "bat", "L", "NUMBER", "Some", "sample", "of", "how", "_static", "suffix", "can", "be", "add", "LINK", "_modules", "BuildUtils", "NUMBER", "cmake", "L", "NUMBER", "Thank", "you", "Yes", "just", "plain", "cmake", "it", "s", "supposed", "way", "NUMBER", "Two", "runs", "be", "not", "an", "issue", "the", "issue", "seems", "be", "no", "obvious", "support", "of", "static", "build", "wrong", "installation", "paths", "and", "lack", "of", "documentation", "NUMBER", "On", "Windows", "include", "should", "be", "processed", "similar", "NUMBER", "I", "guess", "you", "can", "just", "remove", "if", "NOT", "WIN", "NUMBER", "And", "CMAKE_INSTALL_INCLUDEDIR", "should", "be", "equal", "to", "include", "I", "suppose", "NUMBER", "So", "finally", "whole", "include", "directory", "on", "install", "will", "reside", "as", "INSTALL_PREFIX", "include", "brotli", "NUMBER", "h", "Great", "news", "eustas", "Going", "to", "check", "as", "much", "as", "I", "can", "NUMBER", "It", "seems", "the", "libs", "be", "in", "expected", "paths", "on", "Windows", "now", "thanks", "NUMBER", "I", "ve", "notice", "that", "it", "seems", "there", "be", "still", "no", "possibility", "to", "build", "static", "and", "dynamic", "libs", "in", "one", "run", "NUMBER", "NUMBER", "Also", "as", "you", "mention", "before", "static", "and", "dynamic", "import", "lib", "file", "default", "names", "the", "same", "and", "conflict", "so", "can", "t", "be", "install", "to", "the", "same", "directory", "without", "renaming", "NUMBER", "Above", "things", "seems", "be", "not", "critical", "but", "in", "theory", "should", "a", "little", "bit", "simplify", "build", "process", "of", "brotli", "for", "brotli", "feedstock", "LINK", "forge", "brotli", "feedstock", "NUMBER", "NUMBER", "On", "Windows", "cmake", "provides", "NMake", "Makefiles", "and", "Visual", "Studio", "xxx", "generators", "NUMBER", "Current", "version", "of", "Readme", "NUMBER", "md", "describes", "the", "build", "process", "with", "gcc", "make", "tool", "but", "it", "s", "not", "available", "with", "above", "generator", "on", "Windows", "NUMBER", "Universal", "cmake", "command", "line", "for", "all", "platforms", "might", "be", "as", "following", "mkdir", "build", "cd", "build", "cmake", "DCMAKE_BUILD_TYPE", "Release", "DCMAKE_INSTALL_PREFIX", "NUMBER", "install", "NUMBER", "cmake", "command", "to", "build", "and", "install", "should", "be", "universal", "for", "all", "platforms", "hopefully", "cmake", "build", "NUMBER", "config", "Release", "target", "install", "Also", "it", "s", "might", "make", "sense", "to", "mention", "in", "Readme", "NUMBER", "md", "the", "possibility", "to", "rename", "output", "libs", "for", "static", "build", "if", "it", "s", "required", "NUMBER", "For", "example", "in", "the", "way", "like", "it", "s", "do", "here", "LINK", "forge", "brotli", "feedstock", "blob", "master", "recipe", "bld", "NUMBER", "bat", "L", "NUMBER", "NUMBER", "Hope", "that", "above", "helps", "thanks", "Unsure", "if", "this", "be", "the", "appropriate", "thread", "for", "CMAKE", "build", "issue", "on", "windows", "so", "please", "excuse", "me", "I", "do", "not", "intend", "to", "hijack", "the", "thread", "NUMBER", "I", "have", "attempted", "all", "the", "build", "options", "and", "they", "all", "arrive", "at", "a", "less", "than", "ideal", "conclusion", "NUMBER", "I", "will", "describe", "each", "below", "NUMBER", "Through", "trial", "and", "error", "I", "was", "able", "to", "finally", "build", "a", "stand", "alone", "Brotli", "executable", "NUMBER", "see", "end", "of", "post", "NUMBER", "Autotools", "style", "CMake", "The", "basic", "commands", "to", "build", "mkdir", "out", "cd", "out", "NUMBER", "configure", "cmake", "TAG", "mkdir", "out", "cd", "out", "C", "Users", "gbown", "Documents", "google", "brotli", "brotli", "out", "NUMBER", "configure", "cmake", "NUMBER", "be", "not", "recognized", "as", "an", "internal", "or", "external", "command", "operable", "program", "or", "batch", "file", "NUMBER", "C", "Users", "gbown", "Documents", "google", "brotli", "brotli", "out", "Unable", "to", "proceed", "further", "obviously", "this", "would", "apply", "to", "static", "build", "with", "autotools", "as", "well", "NUMBER", "make", "make", "test", "make", "install", "CMake", "The", "basic", "commands", "to", "build", "and", "install", "mkdir", "out", "cd", "out", "cmake", "DCMAKE_BUILD_TYPE", "Release", "DCMAKE_INSTALL_PREFIX", "NUMBER", "install", "NUMBER", "cmake", "build", "NUMBER", "config", "Release", "target", "install", "Build", "succeeded", "NUMBER", "Errors", "No", "clear", "direction", "on", "installing", "or", "use", "NUMBER", "Dropping", "dll", "file", "in", "Windows", "system", "folder", "for", "dlls", "and", "setting", "path", "to", "brotli", "NUMBER", "exe", "appears", "to", "make", "it", "work", "however", "none", "of", "this", "be", "documented", "CMake", "to", "build", "static", "libraries", "mkdir", "out", "static", "cd", "out", "static", "cmake", "NUMBER", "DBUILD_SHARED_LIBS", "OFF", "make", "Result", "No", "target", "specified", "and", "no", "makefile", "find", "C", "Users", "gbown", "Documents", "google", "brotli", "brotli", "out", "static", "cmake", "NUMBER", "DBUILD_SHARED_LIBS", "OFF", "Building", "for", "Visual", "Studio", "NUMBER", "NUMBER", "The", "C", "compiler", "identification", "be", "MSVC", "NUMBER", "The", "CXX", "compiler", "identification", "be", "MSVC", "NUMBER", "Check", "for", "work", "C", "compiler", "C", "Program", "Files", "x", "NUMBER", "Microsoft", "Visual", "Studio", "NUMBER", "BuildTools", "VC", "Tools", "MSVC", "NUMBER", "bin", "HostX", "NUMBER", "x", "NUMBER", "cl", "NUMBER", "exe", "Check", "for", "work", "C", "compiler", "C", "Program", "Files", "x", "NUMBER", "Microsoft", "Visual", "Studio", "NUMBER", "BuildTools", "VC", "Tools", "MSVC", "NUMBER", "bin", "HostX", "NUMBER", "x", "NUMBER", "cl", "NUMBER", "exe", "works", "Detecting", "C", "compiler", "ABI", "info", "Detecting", "C", "compiler", "ABI", "info", "do", "Check", "for", "work", "CXX", "compiler", "C", "Program", "Files", "x", "NUMBER", "Microsoft", "Visual", "Studio", "NUMBER", "BuildTools", "VC", "Tools", "MSVC", "NUMBER", "bin", "HostX", "NUMBER", "x", "NUMBER", "cl", "NUMBER", "exe", "Check", "for", "work", "CXX", "compiler", "C", "Program", "Files", "x", "NUMBER", "Microsoft", "Visual", "Studio", "NUMBER", "BuildTools", "VC", "Tools", "MSVC", "NUMBER", "bin", "HostX", "NUMBER", "x", "NUMBER", "cl", "NUMBER", "exe", "works", "Detecting", "CXX", "compiler", "ABI", "info", "Detecting", "CXX", "compiler", "ABI", "info", "do", "Detecting", "CXX", "compile", "features", "Detecting", "CXX", "compile", "features", "do", "Looking", "for", "log", "NUMBER", "Looking", "for", "log", "NUMBER", "find", "Configuring", "do", "Generating", "do", "Build", "file", "have", "be", "write", "to", "C", "Users", "gbown", "Documents", "google", "brotli", "brotli", "out", "static", "C", "Users", "gbown", "Documents", "google", "brotli", "brotli", "out", "static", "make", "make", "No", "target", "specified", "and", "no", "makefile", "find", "NUMBER", "Stop", "NUMBER", "If", "I", "add", "the", "flag", "DBUILD_SHARED_LIBS", "OFF", "to", "the", "first", "set", "of", "CMake", "instructions", "it", "do", "build", "a", "stand", "alone", "brotli", "NUMBER", "exe", "without", "error", "which", "be", "usable", "however", "I", "had", "to", "sort", "of", "guess", "that", "this", "was", "how", "to", "do", "it", "point", "be", "not", "all", "of", "us", "be", "full", "on", "c", "developers", "NUMBER", "Running", "brotli", "NUMBER", "f", "o", "my", "file", "NUMBER", "brotli", "my", "file", "works", "great", "however", "there", "be", "no", "clear", "way", "to", "run", "test", "on", "the", "newly", "created", "executable", "NUMBER", "The", "q", "and", "quality", "AND", "seem", "to", "be", "two", "different", "ways", "of", "setting", "the", "same", "thing", "however", "setting", "q", "NUMBER", "produces", "a", "smaller", "file", "than", "NUMBER", "and", "the", "two", "commands", "cannot", "be", "use", "at", "the", "same", "time", "be", "there", "documentation", "on", "this", "anywhere", "compression", "level", "NUMBER", "NUMBER", "q", "NUM", "quality", "NUM", "compression", "level", "NUMBER", "NUMBER", "So", "to", "sum", "things", "up", "to", "build", "a", "stand", "alone", "executable", "on", "Windows", "with", "CMake", "the", "following", "works", "NUMBER", "mkdir", "out", "cd", "out", "cmake", "DCMAKE_BUILD_TYPE", "Release", "DBUILD_SHARED_LIBS", "OFF", "DCMAKE_INSTALL_PREFIX", "NUMBER", "install", "NUMBER", "cmake", "build", "NUMBER", "config", "Release", "target", "install", "After", "this", "you", "should", "have", "a", "brotli", "NUMBER", "exe", "file", "that", "you", "can", "then", "set", "an", "environment", "path", "to", "allowing", "you", "to", "use", "brotli", "compression", "in", "your", "Windows", "build", "scripts", "anywhere", "NUMBER", "Just", "to", "clarify", "the", "current", "README", "documented", "CMake", "commands", "will", "create", "a", "brotli", "NUMBER", "exe", "and", "a", "dozen", "other", "file", "NUMBER", "The", "brotli", "NUMBER", "exe", "that", "be", "generate", "will", "function", "as", "a", "standalone", "executable", "and", "there", "be", "no", "need", "to", "install", "the", "NUMBER", "dll", "file", "in", "your", "system", "image", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "f", "NUMBER", "a", "NUMBER", "b", "NUMBER", "e", "NUMBER", "NUMBER", "efe", "aa", "NUMBER", "a", "NUMBER", "c", "NUMBER", "png", "Compiling", "NUMBER", "with", "cmake", "and", "disable", "sharesd", "libs", "as", "documented", "in", "the", "README", "has", "absolutly", "no", "effect", "NUMBER", "What", "be", "the", "correct", "way", "to", "build", "static", "libs", "and", "binary", "for", "NUMBER", "with", "cmake", "Corresponding", "FreeBSD", "bugreport", "LINK", "_bug", "NUMBER", "cgi", "id", "NUMBER", "OK", "DBUILD_SHARED_LIBS", "OFF", "DBUILD_STATIC_LIBS", "ON", "did", "it", "thanks", "NUMBER", "Thanks", "for", "your", "realy", "fast", "response", "and", "fix", "NUMBER", "My", "build", "had", "always", "be", "out", "of", "source", "build", "FreeBSDs", "Ports", "Makefile", "option", "USES", "cmake", "outsource", "so", "that", "this", "be", "not", "the", "course", "of", "the", "issue", "NUMBER", "Also", "i", "m", "not", "use", "git", "but", "the", "release", "source", "code", "archive", "v", "NUMBER", "tar", "NUMBER", "gz", "NUMBER", "Hi", "actually", "we", "d", "like", "to", "see", "both", "types", "of", "libraries", "shared", "and", "static", "like", "other", "ports", "do", "NUMBER", "Is", "there", "any", "chance", "to", "see", "three", "types", "of", "a", "build", "i", "NUMBER", "e", "NUMBER", "SHARED", "STATIC", "COMBINED", "SHARED_AND_STATIC", "NUMBER", "Thanks", "in", "advance", "NUMBER", "LINK", "_FAQ", "Library_questions", "should", "help", "a", "bit", "NUMBER", "Quoting", "more", "README", "NUMBER", "md", "To", "build", "and", "run", "test", "simply", "do", "NUMBER", "configure", "make", "If", "you", "want", "to", "install", "brotli", "use", "one", "of", "the", "more", "advance", "build", "systems", "below", "NUMBER", "Bazel", "See", "Bazel", "LINK", "CMake", "The", "basic", "commands", "to", "build", "test", "and", "install", "brotli", "be", "mkdir", "out", "cd", "out", "NUMBER", "configure", "cmake", "make", "make", "test", "make", "install", "You", "can", "use", "other", "CMake", "LINK", "configuration", "NUMBER", "For", "example", "to", "build", "static", "libraries", "and", "use", "a", "custom", "installation", "directory", "C", "ls", "common", "dec", "include", "MANIFEST", "NUMBER", "in", "python", "setup", "NUMBER", "cfg", "tool", "CONTRIBUTING", "NUMBER", "md", "enc", "LICENSE", "PKG", "INFO", "README", "NUMBER", "md", "setup", "NUMBER", "py", "Find", "it", "especially", "strange", "that", "the", "Brotli", "NUMBER", "tar", "NUMBER", "gz", "contents", "seem", "have", "significant", "discrepancies", "with", "LINK", "Yes", "as", "eustas", "said", "that", "be", "the", "source", "distribution", "for", "the", "python", "module", "NUMBER", "It", "s", "generate", "by", "the", "python", "setup", "NUMBER", "py", "sdist", "command", "use", "patterns", "from", "the", "MANIFEST", "NUMBER", "in", "file", "NUMBER", "Sorry", "I", "couldn", "t", "find", "the", "time", "to", "work", "on", "the", "brotli", "wheels", "yet", "as", "I", "promised", "NUMBER", "I", "will", "get", "to", "it", "soon", "NUMBER", "The", "idea", "be", "that", "Travis", "Appveyor", "CI", "for", "this", "repo", "should", "no", "longer", "do", "the", "python", "packaging", "and", "deployment", "tasks", "but", "only", "build", "and", "run", "the", "test", "NUMBER", "The", "other", "separate", "repository", "will", "use", "this", "one", "as", "submodule", "and", "upload", "artifacts", "to", "PyPI", "for", "distribution", "NUMBER", "Thank", "you", "anthrotype", "yes", "it", "be", "not", "clear", "in", "this", "list", "the", "purpose", "of", "Brotli", "NUMBER", "tar", "NUMBER", "gz", "and", "distinctions", "between", "these", "package", "Brotli", "NUMBER", "tar", "NUMBER", "gz", "Brotli", "NUMBER", "zip", "Source", "code", "zip", "v", "NUMBER", "zip", "Source", "code", "tar", "NUMBER", "gz", "v", "NUMBER", "tar", "NUMBER", "gz", "Report", "still", "applies", "that", "README", "NUMBER", "md", "seems", "not", "applicable", "for", "the", "first", "two", "package", "and", "works", "great", "for", "the", "later", "two", "with", "bonus", "unneed", "file", "but", "still", "NUMBER", "Thanks", "for", "looking", "at", "this", "eustas", "I", "can", "report", "that", "the", "CMAKE", "flavor", "has", "be", "work", "well", "here", "on", "master", "for", "some", "time", "NUMBER", "there", "be", "no", "distinction", "between", "Brotli", "NUMBER", "tar", "NUMBER", "gz", "and", "Brotli", "NUMBER", "zip", "they", "be", "both", "sdist", "package", "which", "be", "meant", "to", "be", "uploaded", "to", "the", "Python", "Package", "Index", "and", "use", "by", "the", "pip", "installer", "e", "NUMBER", "g", "NUMBER", "when", "one", "do", "pip", "install", "brotli", "and", "when", "there", "be", "no", "binary", "wheel", "package", "available", "for", "the", "python", "version", "platform", "architecture", "the", "user", "be", "run", "NUMBER", "We", "shall", "get", "rid", "of", "those", "before", "the", "next", "tag", "for", "now", "you", "can", "just", "ignore", "them", "NUMBER", "For", "Read", "and", "Write", "calls", "we", "can", "pass", "the", "Go", "allocated", "slice", "buffers", "directly", "to", "the", "C", "API", "NUMBER", "They", "do", "not", "contain", "Go", "pointers", "so", "this", "cross", "language", "aliasing", "be", "allow", "for", "the", "duration", "of", "the", "call", "NUMBER", "io", "NUMBER", "Reader", "and", "io", "NUMBER", "Writer", "be", "the", "Go", "primitives", "for", "this", "kind", "of", "I", "O", "so", "implement", "those", "directly", "instead", "of", "provide", "separate", "internal", "encoder", "and", "decoder", "APIs", "NUMBER", "The", "internal", "package", "weren", "t", "laid", "out", "to", "be", "compatible", "with", "the", "go", "toolchain", "anyway", "make", "this", "wrapper", "awkward", "use", "with", "go", "get", "instead", "of", "Bazel", "NUMBER", "Attn", "eustas", "dsnet", "Convert", "java", "code", "to", "C", "code", "use", "test_data", "NUMBER", "zip", "in", "java", "folder", "for", "test", "Dependency", "ICSharpCode", "NUMBER", "SharpZipLib", "Thanks", "for", "your", "pull", "request", "NUMBER", "It", "looks", "like", "this", "may", "be", "your", "first", "contribution", "to", "a", "Google", "open", "source", "project", "NUMBER", "Before", "we", "can", "look", "at", "your", "pull", "request", "you", "ll", "need", "to", "sign", "a", "Contributor", "License", "Agreement", "CLA", "NUMBER", "memo", "Please", "visit", "TAG", "to", "sign", "NUMBER", "Once", "you", "ve", "sign", "please", "reply", "here", "e", "NUMBER", "g", "NUMBER", "I", "sign", "it", "and", "we", "ll", "verify", "NUMBER", "Thanks", "NUMBER", "If", "you", "ve", "already", "sign", "a", "CLA", "it", "s", "possible", "we", "don", "t", "have", "your", "GitHub", "username", "or", "you", "re", "use", "a", "different", "email", "address", "NUMBER", "Check", "your", "exist", "CLA", "data", "LINK", "and", "verify", "that", "your", "email", "be", "set", "on", "your", "git", "commit", "LINK", "your", "email", "in", "git", "NUMBER", "If", "you", "sign", "the", "CLA", "as", "a", "corporation", "please", "let", "us", "know", "the", "company", "s", "name", "NUMBER", "TAG", "I", "sign", "it", "CLAs", "look", "good", "thanks", "TAG", "I", "m", "ported", "it", "by", "hand", "NUMBER", "eustas", "thank", "you", "NUMBER", "I", "will", "try", "soon", "NUMBER", "The", "pkgconfig", "package", "be", "named", "libbrotlicommon", "not", "brotlicommon", "NUMBER", "This", "makes", "the", "generate", "pkgconfig", "package", "for", "libbrotlienc", "actually", "work", "NUMBER", "The", "sources", "jar", "file", "contains", "the", "source", "file", "but", "all", "at", "the", "top", "level", "instead", "of", "the", "package", "path", "NUMBER", "currently", "unzip", "l", "dec", "NUMBER", "sources", "NUMBER", "jar", "Archive", "dec", "NUMBER", "sources", "NUMBER", "jar", "Length", "Date", "Time", "Name", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "META", "INF", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "META", "INF", "MANIFEST", "NUMBER", "MF", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "BitReader", "NUMBER", "java", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "BrotliInputStream", "NUMBER", "java", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "BrotliRuntimeException", "NUMBER", "java", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Context", "NUMBER", "java", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Decode", "NUMBER", "java", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Dictionary", "NUMBER", "java", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Huffman", "NUMBER", "java", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "HuffmanTreeGroup", "NUMBER", "java", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Prefix", "NUMBER", "java", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "RunningState", "NUMBER", "java", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "State", "NUMBER", "java", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Transform", "NUMBER", "java", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Utils", "NUMBER", "java", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "WordTransformType", "NUMBER", "java", "NUMBER", "NUMBER", "file", "But", "it", "should", "be", "structured", "by", "package", "like", "the", "compiled", "jar", "unzip", "l", "dec", "NUMBER", "jar", "Archive", "dec", "NUMBER", "jar", "Length", "Date", "Time", "Name", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "META", "INF", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "META", "INF", "MANIFEST", "NUMBER", "MF", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "BitReader", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "BrotliInputStream", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "BrotliRuntimeException", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "Context", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "Decode", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "Decode", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "Dictionary", "DataHolder", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "Dictionary", "DataHolder", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "Dictionary", "DataHolder", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "Dictionary", "DataHolder", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "Dictionary", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "Huffman", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "HuffmanTreeGroup", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "Prefix", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "RunningState", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "State", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "Transform", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "Utils", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "org", "brotli", "dec", "WordTransformType", "NUMBER", "class", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "META", "INF", "maven", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "META", "INF", "maven", "org", "NUMBER", "brotli", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "META", "INF", "maven", "org", "NUMBER", "brotli", "dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "META", "INF", "maven", "org", "NUMBER", "brotli", "dec", "pom", "NUMBER", "xml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "META", "INF", "maven", "org", "NUMBER", "brotli", "dec", "pom", "NUMBER", "properties", "NUMBER", "NUMBER", "file", "This", "makes", "the", "IDE", "not", "find", "the", "source", "file", "which", "would", "be", "very", "helpful", "for", "seeing", "javadoc", "and", "debugging", "NUMBER", "There", "be", "a", "bug", "in", "pgcc", "with", "conformant", "array", "parameters", "where", "the", "length", "argument", "be", "a", "pointer", "which", "triggers", "a", "compiler", "error", "PGC", "S", "NUMBER", "to", "be", "specific", "NUMBER", "The", "issue", "has", "be", "report", "to", "PGI", "and", "be", "be", "tracked", "internally", "as", "TPR", "NUMBER", "For", "more", "information", "see", "LINK", "NUMBER", "If", "you", "re", "interested", "I", "can", "also", "add", "a", "test", "for", "PGI", "on", "Travis", "via", "nemequ", "pgi", "travis", "LINK", "travis", "NUMBER", "PR", "update", "w", "a", "PGI", "build", "NUMBER", "It", "would", "be", "nice", "to", "have", "another", "release", "from", "master", "which", "incorporates", "the", "significant", "additions", "and", "improvement", "since", "NUMBER", "even", "if", "it", "s", "a", "NUMBER", "grin", "jimjag", "I", "guess", "it", "s", "NUMBER", "BrotliInputStream", "with", "brotli", "format", "be", "much", "slower", "than", "GZIPInputStream", "with", "gzip", "format", "NUMBER", "Is", "there", "any", "performance", "problem", "with", "java", "decoder", "Some", "statistics", "generate", "on", "my", "android", "device", "xiaomi", "NUMBER", "data", "size", "format", "decode", "cost", "ms", "NUMBER", "kb", "br", "NUMBER", "NUMBER", "kb", "gzip", "NUMBER", "NUMBER", "kb", "br", "NUMBER", "NUMBER", "kb", "gzip", "NUMBER", "NUMBER", "kb", "br", "NUMBER", "NUMBER", "kb", "gzip", "NUMBER", "NUMBER", "kb", "br", "NUMBER", "NUMBER", "kb", "gzip", "NUMBER", "NUMBER", "kb", "br", "NUMBER", "NUMBER", "kb", "gzip", "NUMBER", "Yes", "JNI", "wrapper", "be", "much", "more", "efficient", "NUMBER", "Time", "cost", "be", "even", "less", "than", "gzip", "NUMBER", "Thank", "you", "data", "size", "format", "decode", "cost", "ms", "NUMBER", "kb", "br", "NUMBER", "NUMBER", "kb", "br", "NUMBER", "NUMBER", "kb", "br", "NUMBER", "NUMBER", "kb", "br", "NUMBER", "NUMBER", "kb", "br", "NUMBER", "The", "python", "bindings", "be", "currently", "provide", "as", "wheel", "package", "on", "Github", "LINK", "and", "PyPI", "LINK", "but", "only", "for", "macOS", "and", "Windows", "and", "for", "python", "NUMBER", "NUMBER", "and", "NUMBER", "For", "other", "platforms", "like", "Linux", "a", "source", "distribution", "be", "provide", "but", "this", "of", "course", "requires", "users", "to", "have", "a", "C", "compiler", "NUMBER", "I", "would", "like", "to", "help", "setting", "up", "Travis", "CI", "to", "also", "build", "manylinux", "NUMBER", "LINK", "NUMBER", "wheels", "which", "be", "portable", "across", "most", "Linux", "distributions", "NUMBER", "I", "ve", "do", "this", "for", "several", "other", "projects", "use", "multibuild", "LINK", "brett", "multibuild", "a", "set", "of", "shell", "scripts", "originally", "developed", "for", "the", "Python", "scientific", "stack", "numpy", "scipy", "etc", "NUMBER", "which", "makes", "super", "easy", "to", "set", "up", "Travis", "Appveyor", "as", "wheel", "builders", "for", "Linux", "macOS", "and", "Windows", "NUMBER", "Before", "I", "proceed", "work", "on", "a", "pull", "request", "I", "first", "wanted", "to", "gauge", "interest", "and", "ask", "for", "comments", "NUMBER", "We", "have", "two", "options", "NUMBER", "add", "multibuild", "to", "the", "google", "brotli", "repo", "and", "configure", "Travis", "with", "additional", "jobs", "to", "also", "build", "the", "Linux", "wheels", "NUMBER", "NUMBER", "create", "a", "separate", "google", "brotli", "wheels", "repository", "with", "its", "own", "Travis", "Appveyor", "CI", "configuration", "which", "would", "clone", "the", "upstream", "repo", "as", "a", "git", "submodule", "and", "would", "only", "trigger", "new", "build", "when", "the", "submodule", "be", "manually", "update", "e", "NUMBER", "g", "NUMBER", "before", "a", "new", "release", "NUMBER", "The", "latter", "be", "also", "the", "approach", "recommended", "in", "multibuild", "s", "README", "and", "use", "by", "projects", "like", "LINK", "wheels", "LINK", "wheels", "and", "others", "NUMBER", "I", "d", "tend", "to", "opt", "for", "the", "second", "approach", "because", "I", "see", "that", "brotli", "s", "Travis", "matrix", "be", "already", "quite", "crowded", "and", "add", "support", "for", "manylinux", "NUMBER", "would", "add", "at", "least", "NUMBER", "new", "jobs", "NUMBER", "jobs", "cover", "all", "the", "python", "NUMBER", "NUMBER", "vs", "NUMBER", "bit", "narrow", "vs", "wide", "unicode", "build", "plus", "NUMBER", "more", "to", "cover", "NUMBER", "and", "NUMBER", "NUMBER", "and", "NUMBER", "bit", "thus", "further", "slowing", "it", "down", "NUMBER", "What", "do", "you", "think", "ping", "szabadka", "I", "can", "volunteer", "to", "maintain", "this", "brotli", "wheels", "repository", "and", "set", "it", "up", "to", "build", "wheels", "when", "the", "upstream", "brotli", "be", "release", "and", "have", "it", "upload", "them", "automatically", "to", "PyPI", "NUMBER", "I", "could", "create", "the", "new", "repository", "under", "my", "Github", "username", "or", "if", "you", "wish", "you", "can", "create", "it", "under", "the", "google", "Github", "organization", "and", "add", "me", "as", "collaborator", "for", "that", "repo", "NUMBER", "I", "would", "also", "require", "access", "to", "the", "brotli", "PyPI", "account", "NUMBER", "Having", "a", "separate", "brotli", "wheels", "looks", "like", "a", "good", "solution", "for", "this", "NUMBER", "How", "can", "I", "give", "access", "to", "the", "brotli", "PyPI", "account", "On", "Wed", "Mar", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Cosimo", "Lupo", "TAG", "write", "ping", "szabadka", "TAG", "I", "can", "volunteer", "to", "maintain", "this", "brotli", "wheels", "repository", "and", "set", "it", "up", "to", "build", "wheels", "when", "the", "upstream", "brotli", "be", "release", "and", "have", "it", "upload", "them", "automatically", "to", "PyPI", "NUMBER", "I", "could", "create", "the", "new", "repository", "under", "my", "Github", "username", "or", "if", "you", "wish", "you", "can", "create", "it", "under", "the", "google", "Github", "organization", "and", "add", "me", "as", "collaborator", "for", "that", "repo", "NUMBER", "I", "would", "also", "require", "access", "to", "the", "brotli", "PyPI", "account", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "you", "need", "to", "add", "me", "as", "collaborator", "in", "the", "roles", "section", "on", "the", "brotli", "PyPI", "page", "LINK", "role_form", "package_name", "brotli", "My", "pypi", "username", "be", "also", "anthrotype", "NUMBER", "Thank", "you", "thanks", "eustas", "I", "won", "t", "be", "able", "to", "work", "on", "that", "before", "next", "week", "NUMBER", "I", "was", "run", "fuzz", "test", "on", "my", "Brotli", "implementation", "LINK", "and", "notice", "that", "the", "following", "input", "differs", "when", "decompressed", "by", "my", "version", "compared", "to", "the", "canonical", "one", "here", "NUMBER", "The", "input", "cause", "issue", "in", "hex", "e", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "e", "NUMBER", "f", "NUMBER", "When", "decompressed", "by", "the", "google", "brotli", "C", "implementation", "worldwhitemediafirstirstirstirstirstirstirstirstirstirstirst", "NUMBER", "When", "decompressed", "by", "my", "implementation", "worldorldorldorldorldorldorldorldorldorldorldorldorldorldorl", "NUMBER", "According", "to", "section", "NUMBER", "of", "the", "RFC", "When", "a", "distance", "symbol", "NUMBER", "appears", "the", "distance", "it", "represents", "i", "NUMBER", "e", "NUMBER", "the", "last", "distance", "in", "the", "sequence", "of", "distances", "be", "not", "push", "to", "the", "ring", "buffer", "of", "last", "distances", "However", "this", "seems", "contrary", "to", "what", "C", "decoder", "currently", "do", "LINK", "L", "NUMBER", "L", "NUMBER", "c", "if", "s", "distance_code", "NUMBER", "s", "dist_rb_idx", "s", "distance_code", "s", "dist_rb", "s", "dist_rb_idx", "NUMBER", "goto", "postReadDistance", "We", "already", "have", "the", "implicit", "distance", "The", "logic", "in", "the", "C", "version", "seems", "contrary", "to", "the", "stated", "prose", "in", "the", "RFC", "which", "makes", "no", "mention", "that", "an", "implicit", "zero", "reverse", "rotates", "the", "distance", "ring", "buffer", "NUMBER", "I", "believe", "there", "be", "in", "a", "mismatch", "in", "the", "increments", "and", "decrements", "in", "the", "case", "where", "the", "implicit", "zero", "command", "be", "repeatedly", "use", "and", "the", "static", "dictionary", "case", "be", "hit", "NUMBER", "It", "seems", "that", "it", "will", "short", "circuit", "the", "increment", "logic", "which", "only", "occur", "in", "the", "dynamic", "dictionary", "case", "cause", "the", "handle", "of", "implicit", "zeros", "to", "accidentally", "decrement", "one", "too", "much", "each", "time", "NUMBER", "I", "compiled", "with", "debugging", "and", "logging", "enable", "and", "run", "bro", "d", "NUMBER", "The", "relevant", "snippet", "be", "NUMBER", "ProcessCommandsInternal", "pos", "NUMBER", "insert", "NUMBER", "copy", "NUMBER", "IMPLICIT_ZERO", "ProcessCommandsInternal", "pos", "NUMBER", "distance", "NUMBER", "ProcessCommandsInternal", "dictionary", "word", "world", "ProcessCommandsInternal", "s", "meta_block_remaining_len", "NUMBER", "ProcessCommandsInternal", "pos", "NUMBER", "insert", "NUMBER", "copy", "NUMBER", "IMPLICIT_ZERO", "ProcessCommandsInternal", "pos", "NUMBER", "distance", "NUMBER", "ProcessCommandsInternal", "dictionary", "word", "white", "ProcessCommandsInternal", "s", "meta_block_remaining_len", "NUMBER", "ProcessCommandsInternal", "pos", "NUMBER", "insert", "NUMBER", "copy", "NUMBER", "IMPLICIT_ZERO", "ProcessCommandsInternal", "pos", "NUMBER", "distance", "NUMBER", "ProcessCommandsInternal", "dictionary", "word", "media", "ProcessCommandsInternal", "s", "meta_block_remaining_len", "NUMBER", "ProcessCommandsInternal", "pos", "NUMBER", "insert", "NUMBER", "copy", "NUMBER", "IMPLICIT_ZERO", "ProcessCommandsInternal", "pos", "NUMBER", "distance", "NUMBER", "ProcessCommandsInternal", "dictionary", "word", "first", "ProcessCommandsInternal", "s", "meta_block_remaining_len", "NUMBER", "ProcessCommandsInternal", "pos", "NUMBER", "insert", "NUMBER", "copy", "NUMBER", "IMPLICIT_ZERO", "ProcessCommandsInternal", "pos", "NUMBER", "distance", "NUMBER", "UPDATE_RING_BUFFER", "ProcessCommandsInternal", "pos", "NUMBER", "insert", "NUMBER", "copy", "NUMBER", "IMPLICIT_ZERO", "ProcessCommandsInternal", "pos", "NUMBER", "distance", "NUMBER", "UPDATE_RING_BUFFER", "ProcessCommandsInternal", "pos", "NUMBER", "insert", "NUMBER", "copy", "NUMBER", "IMPLICIT_ZERO", "NUMBER", "The", "IMPLICIT_ZERO", "message", "was", "a", "printf", "add", "after", "L", "NUMBER", "of", "decode", "NUMBER", "c", "NUMBER", "In", "the", "log", "printout", "you", "see", "that", "the", "distance", "be", "sweeping", "through", "the", "sequences", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Notice", "it", "how", "it", "goes", "in", "reverse", "order", "through", "the", "initial", "distances", "in", "the", "ring", "buffer", "i", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "even", "though", "only", "the", "zero", "code", "be", "use", "After", "exhausting", "the", "ring", "buffer", "it", "no", "longer", "performs", "static", "dictionary", "lookups", "and", "starts", "doing", "dynamic", "dictionary", "lookups", "cause", "it", "to", "properly", "stay", "at", "NUMBER", "for", "the", "rest", "of", "the", "time", "NUMBER", "Testing", "NUMBER", "d", "NUMBER", "c", "do", "not", "give", "me", "the", "same", "decompressed", "output", "as", "dsnet", "proposes", "in", "his", "initial", "report", "of", "this", "issue", "NUMBER", "Decompressing", "hex", "e", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "e", "NUMBER", "f", "NUMBER", "results", "in", "worldsmallmallmallmallmallmallmallmallmallmallmallmallma", "NUMBER", "NUMBER", "bytes", "in", "total", "instead", "of", "the", "expected", "worldorldorldorldorldorldorldorldorldorldorldorldorldorldor", "NUMBER", "no", "total", "given", "NUMBER", "dsnet", "s", "wrong", "output", "before", "NUMBER", "d", "NUMBER", "c", "matches", "mine", "so", "I", "be", "inclined", "to", "believe", "that", "his", "fix", "output", "be", "also", "correct", "in", "which", "case", "the", "fix", "be", "wrong", "NUMBER", "Could", "dsnet", "or", "eustas", "please", "shed", "some", "light", "Thanks", "PS", "Will", "there", "be", "a", "test", "case", "ralfjunker", "what", "implementation", "be", "yours", "Mine", "repeats", "orld", "until", "the", "NUMBER", "byte", "limit", "be", "hit", "NUMBER", "My", "interpretation", "of", "what", "should", "happen", "assuming", "all", "implementations", "agree", "about", "huffman", "decoding", "of", "commands", "There", "be", "a", "repeated", "sequence", "of", "commands", "of", "the", "form", "length", "NUMBER", "dist", "NUMBER", "NUMBER", "According", "to", "section", "NUMBER", "dist", "NUMBER", "should", "result", "in", "the", "last", "distance", "be", "use", "which", "defaults", "to", "NUMBER", "without", "update", "the", "distance", "ring", "buffer", "not", "that", "it", "matters", "NUMBER", "Thus", "this", "be", "really", "a", "repeated", "sequence", "of", "length", "NUMBER", "dist", "NUMBER", "commands", "NUMBER", "For", "the", "first", "command", "there", "be", "no", "output", "so", "it", "falls", "under", "the", "static", "dictionary", "case", "according", "to", "if", "distance", "be", "less", "than", "the", "max", "allow", "distance", "plus", "one", "move", "backwards", "distance", "bytes", "in", "the", "uncompressed", "data", "and", "copy", "CLEN", "bytes", "from", "this", "position", "to", "the", "uncompressed", "stream", "else", "look", "up", "the", "static", "dictionary", "word", "transform", "the", "word", "as", "directed", "and", "copy", "the", "result", "to", "the", "uncompressed", "stream", "This", "copies", "world", "to", "the", "output", "NUMBER", "For", "all", "subsequent", "commands", "there", "be", "sufficient", "data", "in", "the", "output", "such", "that", "a", "distance", "of", "NUMBER", "be", "always", "satisfied", "by", "the", "dynamic", "dictionary", "NUMBER", "Thus", "copying", "orldo", "the", "first", "time", "rldor", "the", "second", "time", "ldorl", "the", "third", "time", "etc", "NUMBER", "I", "be", "use", "the", "C", "implementation", "from", "this", "repository", "in", "particular", "this", "check", "in", "NUMBER", "d", "NUMBER", "ca", "NUMBER", "b", "NUMBER", "ec", "NUMBER", "It", "repeats", "mall", "until", "it", "reaches", "NUMBER", "bytes", "NUMBER", "Did", "you", "test", "eustas", "fix", "to", "this", "C", "implementation", "Recently", "I", "get", "SEGV", "signals", "inside", "the", "brotli", "directory", "decoding", "content", "of", "Youtube", "and", "I", "was", "wondering", "if", "this", "brotli", "library", "be", "threadsafe", "I", "NUMBER", "e", "NUMBER", "can", "I", "use", "multiple", "threads", "that", "repeatedly", "do", "this", "bstate", "BrotliDecoderCreateInstance", "NULL", "NULL", "NULL", "bretval", "BrotliDecoderDecompress", "NUMBER", "BrotliDecoderDestroyInstance", "bstate", "In", "the", "code", "below", "BrotliEncoderSetCustomDictionary", "causes", "a", "false", "OOM", "on", "compression", "which", "causes", "the", "application", "to", "halt", "NUMBER", "Curiously", "the", "OOM", "be", "not", "a", "real", "OOM", "NUMBER", "It", "only", "appears", "as", "such", "as", "a", "result", "of", "malloc", "NUMBER", "which", "returns", "NULL", "NUMBER", "Without", "the", "BrotliEncoderSetCustomDictionary", "call", "all", "works", "fine", "NUMBER", "C", "include", "TAG", "include", "TAG", "include", "TAG", "include", "brotli", "encode", "NUMBER", "h", "int", "main", "unsigned", "int", "i", "uint", "NUMBER", "_t", "dictionary", "NUMBER", "x", "NUMBER", "uint", "NUMBER", "_t", "originalBuffer", "NUMBER", "x", "NUMBER", "uint", "NUMBER", "_t", "compressedBuffer", "NUMBER", "x", "NUMBER", "size_t", "availIn", "availOut", "const", "uint", "NUMBER", "_t", "nextIn", "uint", "NUMBER", "_t", "nextOut", "BrotliEncoderState", "s", "BROTLI_BOOL", "r", "Create", "random", "dictionary", "NUMBER", "for", "i", "NUMBER", "i", "TAG", "write", "Pardon", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "It", "s", "defined", "as", "a", "non", "const", "inline", "union", "NUMBER", "cf", "NUMBER", "our", "current", "math", "NUMBER", "h", "LINK", "os", "NUMBER", "org", "haiku", "tree", "headers", "posix", "math", "NUMBER", "h", "n", "NUMBER", "I", "m", "open", "to", "a", "cleaner", "solution", "NUMBER", "Maybe", "we", "should", "make", "it", "const", "not", "sure", "though", "NUMBER", "Thanks", "for", "your", "pull", "request", "NUMBER", "It", "looks", "like", "this", "may", "be", "your", "first", "contribution", "to", "a", "Google", "open", "source", "project", "NUMBER", "Before", "we", "can", "look", "at", "your", "pull", "request", "you", "ll", "need", "to", "sign", "a", "Contributor", "License", "Agreement", "CLA", "NUMBER", "memo", "Please", "visit", "TAG", "to", "sign", "NUMBER", "Once", "you", "ve", "sign", "please", "reply", "here", "e", "NUMBER", "g", "NUMBER", "I", "sign", "it", "and", "we", "ll", "verify", "NUMBER", "Thanks", "NUMBER", "If", "you", "ve", "already", "sign", "a", "CLA", "it", "s", "possible", "we", "don", "t", "have", "your", "GitHub", "username", "or", "you", "re", "use", "a", "different", "email", "address", "NUMBER", "Check", "your", "exist", "CLA", "data", "LINK", "and", "verify", "that", "your", "email", "be", "set", "on", "your", "git", "commit", "LINK", "your", "email", "in", "git", "NUMBER", "If", "you", "sign", "the", "CLA", "as", "a", "corporation", "please", "let", "us", "know", "the", "company", "s", "name", "NUMBER", "TAG", "Thank", "Haiku", "at", "least", "still", "requires", "GCC", "NUMBER", "for", "system", "components", "NUMBER", "Thanks", "for", "your", "pull", "request", "NUMBER", "It", "looks", "like", "this", "may", "be", "your", "first", "contribution", "to", "a", "Google", "open", "source", "project", "NUMBER", "Before", "we", "can", "look", "at", "your", "pull", "request", "you", "ll", "need", "to", "sign", "a", "Contributor", "License", "Agreement", "CLA", "NUMBER", "memo", "Please", "visit", "TAG", "to", "sign", "NUMBER", "Once", "you", "ve", "sign", "please", "reply", "here", "e", "NUMBER", "g", "NUMBER", "I", "sign", "it", "and", "we", "ll", "verify", "NUMBER", "Thanks", "NUMBER", "If", "you", "ve", "already", "sign", "a", "CLA", "it", "s", "possible", "we", "don", "t", "have", "your", "GitHub", "username", "or", "you", "re", "use", "a", "different", "email", "address", "NUMBER", "Check", "your", "exist", "CLA", "data", "LINK", "and", "verify", "that", "your", "email", "be", "set", "on", "your", "git", "commit", "LINK", "your", "email", "in", "git", "NUMBER", "If", "you", "sign", "the", "CLA", "as", "a", "corporation", "please", "let", "us", "know", "the", "company", "s", "name", "NUMBER", "TAG", "Ugh", "why", "would", "I", "want", "to", "bring", "my", "gmail", "account", "into", "this", "For", "a", "oneliner", "thx", "Do", "you", "intend", "to", "have", "official", "C", "implementation", "similar", "to", "Java", "Are", "there", "any", "C", "devs", "that", "plan", "to", "port", "to", "C", "here", "x", "transpile", "pure", "Java", "decoder", "to", "C", "create", "NuGet", "package", "wrapper", "for", "managed", "languages", "McNeight", "Do", "you", "have", "a", "plan", "to", "implement", "this", "Now", "that", "there", "be", "a", "Java", "port", "it", "should", "be", "fairly", "simple", "to", "build", "a", "NUMBER", "NET", "Core", "port", "NUMBER", "This", "be", "only", "for", "the", "decoder", "which", "be", "great", "for", "clients", "NUMBER", "I", "m", "interested", "in", "use", "brotli", "with", "an", "ASP", "NUMBER", "NET", "Core", "application", "for", "dynamic", "compression", "on", "the", "fly", "NUMBER", "I", "have", "seen", "a", "comment", "saying", "the", "encoder", "be", "more", "complex", "and", "C", "will", "give", "better", "performance", "etc", "NUMBER", "A", "wrapper", "around", "the", "C", "library", "would", "still", "suffice", "NUMBER", "Either", "way", "a", "simple", "NuGet", "package", "would", "be", "perfect", "NUMBER", "Hello", "Thank", "you", "NUMBER", "I", "will", "test", "it", "When", "build", "Chromium", "with", "the", "v", "NUMBER", "version", "of", "Brotli", "use", "the", "VC", "analyze", "feature", "I", "see", "the", "following", "warnings", "brotli", "enc", "compress_fragment_two_pass", "NUMBER", "c", "NUMBER", "warning", "C", "NUMBER", "Reading", "invalid", "data", "from", "cmd_histo", "the", "readable", "size", "be", "NUMBER", "bytes", "but", "NUMBER", "bytes", "may", "be", "read", "NUMBER", "brotli", "enc", "compress_fragment_two_pass", "NUMBER", "c", "NUMBER", "warning", "C", "NUMBER", "Reading", "invalid", "data", "from", "cmd_bits", "the", "readable", "size", "be", "NUMBER", "bytes", "but", "NUMBER", "bytes", "may", "be", "read", "NUMBER", "brotli", "enc", "compress_fragment_two_pass", "NUMBER", "c", "NUMBER", "warning", "C", "NUMBER", "Reading", "invalid", "data", "from", "cmd_depths", "the", "readable", "size", "be", "NUMBER", "bytes", "but", "NUMBER", "bytes", "may", "be", "read", "NUMBER", "brotli", "enc", "compress_fragment_two_pass", "NUMBER", "c", "NUMBER", "warning", "C", "NUMBER", "Reading", "invalid", "data", "from", "kNumExtraBits", "the", "readable", "size", "be", "NUMBER", "bytes", "but", "NUMBER", "bytes", "may", "be", "read", "NUMBER", "brotli", "enc", "static_dict", "NUMBER", "c", "NUMBER", "warning", "C", "NUMBER", "Reading", "invalid", "data", "from", "kBrotliDictionarySizeBitsByLength", "the", "readable", "size", "be", "NUMBER", "bytes", "but", "NUMBER", "bytes", "may", "be", "read", "NUMBER", "Manual", "examination", "of", "these", "warnings", "suggest", "that", "they", "be", "all", "valid", "NUMBER", "In", "all", "cases", "an", "index", "be", "be", "anded", "with", "a", "bit", "mask", "but", "the", "bit", "mask", "has", "too", "many", "set", "bits", "NUMBER", "In", "the", "first", "four", "cases", "a", "bit", "mask", "of", "NUMBER", "xff", "be", "use", "by", "the", "arrays", "only", "have", "NUMBER", "elements", "NUMBER", "It", "would", "be", "safer", "to", "define", "a", "COUNTOF", "macro", "and", "change", "the", "code", "like", "this", "cmd_histo", "commands", "i", "NUMBER", "xff", "to", "something", "like", "this", "cmd_histo", "commands", "i", "COUNTOF", "cmd_histo", "NUMBER", "Or", "just", "change", "the", "constant", "to", "NUMBER", "x", "NUMBER", "f", "or", "use", "a", "named", "constant", "to", "make", "sure", "they", "stay", "in", "sync", "NUMBER", "The", "fifth", "warning", "be", "a", "bit", "different", "because", "the", "index", "be", "be", "masked", "down", "to", "NUMBER", "NUMBER", "but", "the", "array", "be", "NUMBER", "elements", "long", "NUMBER", "This", "seems", "odd", "NUMBER", "If", "the", "value", "of", "len", "be", "guaranteed", "to", "be", "in", "range", "then", "the", "masking", "be", "not", "needed", "and", "if", "isn", "t", "guaranteed", "to", "be", "in", "range", "then", "the", "masking", "be", "insufficient", "NUMBER", "Maybe", "there", "be", "other", "data", "in", "the", "high", "bits", "of", "len", "I", "can", "t", "tell", "NUMBER", "The", "safest", "thing", "to", "do", "it", "seems", "would", "be", "to", "pad", "kBrotliDictionarySizeBitsByLength", "out", "to", "NUMBER", "bytes", "at", "a", "cost", "of", "six", "bytes", "of", "storage", "and", "then", "mask", "with", "NUMBER", "x", "NUMBER", "f", "instead", "of", "NUMBER", "x", "NUMBER", "f", "NUMBER", "Thanks", "for", "the", "explanation", "NUMBER", "VC", "gives", "many", "warnings", "in", "its", "analyze", "mode", "and", "I", "ignore", "many", "of", "them", "so", "I", "be", "fine", "with", "ignoring", "these", "as", "well", "NUMBER", "However", "they", "point", "out", "constructs", "which", "were", "suspicious", "which", "looked", "wrong", "to", "a", "human", "eye", "NUMBER", "Comments", "to", "explain", "that", "the", "mask", "amounts", "be", "in", "fact", "correct", "and", "why", "would", "be", "sufficient", "I", "think", "NUMBER", "Suppressing", "analyze", "warnings", "be", "a", "black", "art", "and", "make", "the", "code", "clear", "for", "human", "readers", "be", "more", "important", "IMHO", "NUMBER", "Why", "was", "this", "do", "Everything", "once", "configured", "to", "use", "pkg", "config", "NUMBER", "brotli", "now", "fail", "NUMBER", "I", "can", "understand", "why", "you", "might", "want", "to", "split", "it", "for", "use", "cases", "which", "don", "t", "require", "link", "everything", "but", "why", "remove", "brotli", "NUMBER", "pc", "I", "see", "that", "s", "an", "unfortunate", "view", "to", "hold", "but", "at", "least", "there", "be", "a", "rational", "for", "others", "who", "might", "encounter", "this", "issue", "as", "systems", "be", "update", "NUMBER", "research", "draw_diff", "NUMBER", "cc", "line", "NUMBER", "miss", "fclose", "fdiff", "FYI", "the", "issue", "of", "fail", "test", "returning", "NUMBER", "exit", "status", "has", "be", "fix", "in", "the", "latest", "setuptools", "v", "NUMBER", "LINK", "anthrotype", "great", "thanks", "for", "the", "confirmation", "It", "seems", "that", "the", "API", "for", "encoding", "decoding", "in", "parallel", "was", "remove", "for", "some", "reason", "NUMBER", "Can", "we", "please", "introduce", "it", "back", "Large", "payloads", "can", "be", "decompressed", "more", "rapidly", "if", "you", "utilize", "multiple", "cores", "NUMBER", "This", "be", "especially", "true", "when", "streaming", "compressed", "data", "through", "a", "socket", "NUMBER", "Also", "compressing", "can", "be", "sped", "up", "by", "use", "multiple", "cores", "NUMBER", "Any", "chance", "to", "get", "this", "with", "NUMBER", "There", "has", "be", "some", "API", "change", "since", "NUMBER", "x", "NUMBER", "It", "d", "be", "great", "to", "have", "a", "new", "release", "tag", "so", "that", "we", "can", "use", "them", "NUMBER", "Any", "news", "on", "this", "We", "re", "waiting", "for", "the", "NUMBER", "release", "in", "order", "to", "upgrade", "the", "Ruby", "implementation", "NUMBER", "eustas", "Any", "update", "on", "this", "Why", "hold", "off", "others", "who", "could", "use", "it", "like", "Apache", "httpd", "because", "of", "work", "needed", "for", "nginx", "mod_brotli", "for", "httpd", "uses", "and", "needs", "the", "post", "NUMBER", "fix", "and", "that", "s", "the", "only", "thing", "delaying", "our", "release", "of", "the", "module", "NUMBER", "The", "world", "be", "waiting", "Please", "don", "t", "show", "preferential", "treatment", "Any", "update", "on", "the", "status", "of", "a", "release", "Is", "it", "LINK", "It", "seems", "to", "be", "green", "Anything", "I", "we", "can", "do", "to", "help", "Any", "update", "on", "this", "We", "the", "Apache", "httpd", "PMC", "were", "looking", "to", "doing", "a", "NUMBER", "release", "soon", "and", "it", "would", "be", "great", "to", "be", "able", "to", "include", "mod_brotli", "but", "we", "can", "t", "depend", "on", "an", "unreleased", "lib", "and", "the", "module", "requires", "the", "new", "API", "NUMBER", "Thanks", "WOOT", "Super", "Thx", "eustas", "Great", "thanks", "Do", "you", "also", "plan", "to", "submit", "a", "PR", "to", "google", "woff", "NUMBER", "to", "upgrade", "brotli", "when", "v", "NUMBER", "be", "release", "v", "NUMBER", "be", "come", "soon", "NUMBER", "eustas", "Do", "you", "have", "any", "idea", "about", "when", "v", "NUMBER", "will", "be", "release", "Going", "to", "see", "through", "issue", "list", "and", "hopefully", "new", "release", "will", "happen", "next", "week", "NUMBER", "eustas", "Sorry", "for", "push", "again", "but", "be", "there", "still", "things", "blocking", "the", "NUMBER", "release", "eustas", "So", "it", "was", "LINK", "eustas", "So", "I", "guess", "there", "be", "still", "delay", "NUMBER", "Just", "FYI", "the", "web", "engines", "hackfest", "NUMBER", "edition", "be", "in", "one", "month", "and", "I", "hope", "we", "would", "have", "a", "release", "of", "brotli", "with", "stable", "API", "since", "then", "so", "that", "we", "can", "package", "it", "in", "distros", "and", "start", "the", "work", "for", "WOFF", "NUMBER", "too", "NUMBER", "with", "the", "goal", "of", "having", "at", "least", "Linux", "browsers", "use", "system", "libraries", "for", "web", "fonts", "NUMBER", "Yay", "eustas", "Great", "thanks", "and", "congrats", "Do", "you", "plan", "to", "you", "plan", "to", "submit", "a", "PR", "to", "LINK", "to", "upgrade", "it", "to", "brotli", "NUMBER", "Changes", "look", "good", "but", "LINK", "ci", "NUMBER", "org", "google", "brotli", "jobs", "NUMBER", "fail", "for", "some", "reason", "NUMBER", "Maybe", "rebase", "on", "master", "to", "get", "the", "new", "unit", "test", "to", "double", "check", "The", "C", "extension", "doesn", "t", "currently", "release", "the", "GIL", "during", "compress_stream", "LINK", "_brotli", "NUMBER", "cc", "L", "NUMBER", "and", "during", "decompress_stream", "between", "LINK", "_brotli", "NUMBER", "cc", "L", "NUMBER", "and", "LINK", "_brotli", "NUMBER", "cc", "L", "NUMBER", "which", "be", "a", "shame", "because", "we", "can", "enable", "greater", "parallelism", "NUMBER", "No", "need", "for", "anything", "else", "NUMBER", "That", "should", "do", "the", "trick", "NUMBER", "This", "was", "an", "enhancement", "request", "propose", "by", "nemequ", "eustas", "thanks", "A", "woff", "NUMBER", "generator", "or", "consumer", "will", "generally", "use", "only", "one", "of", "this", "library", "so", "it", "s", "better", "to", "have", "separate", "pc", "file", "NUMBER", "This", "be", "how", "it", "was", "do", "in", "bagder", "s", "initial", "commit", "but", "nemequ", "only", "created", "a", "single", "pc", "file", "NUMBER", "There", "were", "discussions", "about", "the", "names", "to", "use", "for", "pc", "file", "but", "I", "m", "not", "sure", "how", "important", "it", "be", "NUMBER", "eustas", "Are", "you", "going", "to", "take", "care", "of", "this", "Thanks", "NUMBER", "I", "trust", "you", "eustas", "This", "be", "false", "positive", "since", "it", "will", "always", "get", "set", "before", "use", "but", "clang", "doesn", "t", "like", "it", "NUMBER", "I", "see", "the", "decoder", "has", "be", "ported", "to", "Java", "recently", "NUMBER", "Are", "there", "plan", "for", "porting", "encoder", "to", "Java", "as", "well", "I", "did", "release", "a", "java", "encoder", "of", "brotli", "NUMBER", "LINK", "AFAIK", "this", "should", "fix", "NUMBER", "I", "came", "up", "with", "a", "possible", "design", "here", "brotli", "framing", "format", "NUMBER", "md", "LINK", "framing", "format", "NUMBER", "md", "High", "level", "ideas", "Designed", "to", "be", "more", "efficient", "with", "random", "access", "decompression", "by", "coalescing", "records", "together", "into", "a", "unified", "index", "like", "xz", "LINK", "rather", "than", "having", "the", "offsets", "be", "distributed", "throughout", "the", "file", "like", "lzip", "LINK", "_manual", "NUMBER", "html", "File", "format", "NUMBER", "I", "don", "t", "feel", "strongly", "that", "the", "format", "should", "provide", "ways", "to", "encode", "the", "original", "filename", "owner", "group", "modify", "date", "etc", "NUMBER", "My", "opinion", "be", "that", "an", "archive", "format", "like", "tar", "or", "zip", "should", "be", "use", "and", "that", "the", "framed", "format", "be", "only", "responsible", "for", "compression", "NUMBER", "No", "option", "to", "choose", "between", "multiple", "checksum", "methods", "just", "use", "CRC", "NUMBER", "NUMBER", "If", "a", "user", "cares", "about", "data", "integrity", "they", "can", "encrypt", "and", "sign", "the", "file", "afterwards", "NUMBER", "Limited", "support", "for", "parallel", "decompression", "when", "reading", "the", "input", "forwards", "as", "a", "stream", "NUMBER", "The", "sync", "markers", "to", "do", "this", "also", "provide", "limited", "form", "of", "data", "recovery", "with", "partial", "file", "NUMBER", "The", "StaticDict", "feature", "be", "experimental", "NUMBER", "I", "m", "not", "sure", "if", "this", "should", "be", "part", "of", "the", "format", "but", "it", "seems", "like", "an", "interesting", "idea", "to", "me", "NUMBER", "You", "may", "want", "to", "consider", "giving", "the", "framed", "format", "a", "completely", "different", "name", "than", "simply", "brotli", "framing", "format", "NUMBER", "There", "may", "be", "much", "confusion", "between", "what", "the", "difference", "be", "between", "two", "NUMBER", "should", "not", "be", "a", "valid", "UTF", "NUMBER", "string", "should", "not", "be", "a", "valid", "brotli", "stream", "With", "NUMBER", "x", "NUMBER", "as", "the", "first", "byte", "if", "the", "second", "byte", "doesn", "t", "have", "the", "highest", "bit", "set", "we", "can", "guarantee", "that", "it", "isn", "t", "UTF", "NUMBER", "either", "NUMBER", "eustas", "asked", "me", "to", "move", "my", "feature", "request", "from", "NUMBER", "to", "this", "thread", "Would", "it", "be", "practical", "for", "a", "future", "version", "of", "Brotli", "to", "detect", "strings", "of", "formats", "like", "base", "NUMBER", "and", "hex", "and", "decode", "them", "to", "binary", "before", "compressing", "re", "encode", "them", "as", "part", "of", "the", "decompression", "process", "I", "notice", "just", "now", "during", "a", "comparison", "between", "compressing", "a", "binary", "file", "and", "the", "equivalent", "base", "NUMBER", "LINK", "issuecomment", "NUMBER", "that", "the", "base", "NUMBER", "version", "ended", "up", "larger", "which", "it", "occur", "to", "me", "shouldn", "t", "need", "to", "be", "the", "case", "given", "that", "the", "two", "contain", "almost", "exactly", "the", "same", "information", "NUMBER", "Since", "I", "don", "t", "know", "anything", "about", "Brotli", "s", "internals", "I", "have", "nothing", "more", "specific", "to", "suggest", "in", "terms", "of", "the", "framing", "format", "design", "NUMBER", "_edited", "Oct", "NUMBER", "see", "update", "commit", "description", "and", "in", "the", "thread", "below_", "build", "will", "also", "compile", "the", "pure", "python", "modules", "besides", "in", "turn", "calling", "build_ext", "to", "compile", "the", "extension", "module", "NUMBER", "It", "be", "the", "correct", "command", "to", "use", "now", "that", "brotli", "be", "a", "package", "with", "some", "pure", "python", "modules", "NUMBER", "Previously", "it", "was", "a", "single", "extension", "module", "NUMBER", "_updated", "commit", "description", "follows_", "Previously", "the", "Python", "package", "consisted", "of", "a", "single", "extension", "module", "so", "build_ext", "was", "sufficient", "NUMBER", "Now", "the", "package", "contains", "a", "native", "module", "and", "an", "extension", "module", "so", "both", "build_py", "and", "build_ext", "be", "required", "NUMBER", "Instead", "run", "build", "which", "calls", "both", "build_py", "and", "build_ext", "automatically", "NUMBER", "Also", "I", "rebased", "to", "the", "latest", "commit", "on", "master", "You", "could", "tell", "Travis", "CI", "to", "use", "Mavericks", "by", "specify", "osx_image", "beta", "xcode", "NUMBER", "or", "osx_image", "beta", "xcode", "NUMBER", "NUMBER", "See", "LINK", "ci", "NUMBER", "com", "user", "osx", "ci", "environment", "eustas", "Let", "s", "see", "if", "that", "makes", "the", "bots", "happy", "maybe", "we", "want", "to", "change", "the", "travis", "appveyor", "file", "too", "NUMBER", "Thanks", "for", "your", "pull", "request", "NUMBER", "It", "looks", "like", "this", "may", "be", "your", "first", "contribution", "to", "a", "Google", "open", "source", "project", "NUMBER", "Before", "we", "can", "look", "at", "your", "pull", "request", "you", "ll", "need", "to", "sign", "a", "Contributor", "License", "Agreement", "CLA", "NUMBER", "memo", "Please", "visit", "LINK", "to", "sign", "NUMBER", "Once", "you", "ve", "sign", "please", "reply", "here", "e", "NUMBER", "g", "NUMBER", "I", "sign", "it", "and", "we", "ll", "verify", "NUMBER", "Thanks", "NUMBER", "If", "you", "ve", "already", "sign", "a", "CLA", "it", "s", "possible", "we", "don", "t", "have", "your", "GitHub", "username", "or", "you", "re", "use", "a", "different", "email", "address", "NUMBER", "Check", "your", "exist", "CLA", "data", "LINK", "and", "verify", "that", "your", "email", "be", "set", "on", "your", "git", "commit", "LINK", "your", "email", "in", "git", "NUMBER", "If", "you", "sign", "the", "CLA", "as", "a", "corporation", "please", "let", "us", "know", "the", "company", "s", "name", "NUMBER", "TAG", "CLAs", "look", "good", "thanks", "TAG", "Closing", "as", "it", "be", "include", "in", "NUMBER", "eustas", "Can", "you", "please", "take", "a", "look", "to", "that", "one", "line", "change", "I", "think", "this", "be", "the", "remaining", "important", "bit", "to", "fix", "issue", "NUMBER", "NUMBER", "The", "travis", "failures", "seem", "to", "happen", "on", "BUILD_SYSTEM", "python", "so", "that", "should", "be", "unrelated", "to", "CMake", "change", "eustas", "OK", "that", "works", "for", "me", "too", "let", "s", "see", "later", "if", "some", "Cygwin", "or", "MSYS", "NUMBER", "maintainers", "complain", "NUMBER", "NUMBER", "I", "update", "the", "pull", "request", "NUMBER", "eustas", "OK", "but", "at", "the", "moment", "we", "do", "not", "install", "the", "libraries", "at", "all", "when", "build", "in", "static", "mode", "so", "the", "headers", "be", "not", "going", "to", "be", "use", "anyway", "NUMBER", "Maybe", "we", "want", "to", "remove", "the", "whole", "if", "BUILD_SHARED_LIBS", "here", "so", "that", "we", "also", "install", "the", "lib", "include", "in", "static", "mode", "too", "eustas", "OK", "do", "NUMBER", "eustas", "update", "the", "install", "directory", "but", "not", "sure", "what", "you", "mean", "with", "your", "last", "comment", "PS", "feel", "free", "to", "take", "over", "this", "work", "if", "that", "s", "faster", "I", "m", "not", "experienced", "with", "all", "these", "cmake", "build", "configs", "either", "NUMBER", "Revert", "to", "the", "previous", "default", "macOS", "image", "beta", "xcode", "NUMBER", "macOS", "NUMBER", "Xcode", "NUMBER", "to", "work", "around", "Travis", "compilation", "bug", "in", "the", "default", "image", "release", "on", "NUMBER", "Oct", "NUMBER", "xcode", "NUMBER", "macOS", "NUMBER", "Xcode", "NUMBER", "NUMBER", "LINK", "ci", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "osx", "NUMBER", "default", "image", "live", "eustas", "I", "believe", "this", "PR", "was", "meant", "to", "address", "the", "Users", "travis", "build", "NUMBER", "sh", "line", "NUMBER", "shell_session_update", "command", "not", "find", "at", "the", "end", "of", "this", "Travis", "log", "LINK", "ci", "NUMBER", "org", "google", "brotli", "jobs", "NUMBER", "which", "be", "for", "the", "other", "PR", "by", "nicksay", "NUMBER", "That", "error", "message", "which", "be", "unrelated", "to", "issue", "of", "the", "gcc", "version", "be", "still", "showing", "up", "at", "the", "end", "of", "Travis", "log", "e", "NUMBER", "g", "NUMBER", "LINK", "ci", "NUMBER", "org", "google", "brotli", "jobs", "NUMBER", "L", "NUMBER", "But", "the", "brotli", "macpython", "build", "do", "not", "fail", "despite", "that", "error", "message", "NUMBER", "You", "can", "probably", "ignore", "it", "NUMBER", "It", "will", "surely", "be", "fix", "it", "at", "some", "point", "by", "Travis", "CI", "team", "NUMBER", "Yes", "this", "PR", "was", "just", "to", "be", "a", "temporary", "fix", "for", "the", "not", "find", "issue", "that", "were", "blocking", "NUMBER", "and", "other", "pending", "change", "but", "NUMBER", "be", "better", "NUMBER", "Happy", "to", "close", "this", "NUMBER", "the", "change", "be", "purely", "cosmetic", "hence", "to", "some", "degree", "subjective", "but", "if", "you", "prefer", "it", "like", "that", "I", "don", "t", "mind", "NUMBER", "Agreed", "that", "these", "be", "mostly", "cosmetic", "change", "NUMBER", "There", "be", "NUMBER", "minor", "actual", "change", "here", "I", "ve", "update", "the", "package", "author", "to", "be", "The", "Brotli", "Authors", "I", "ve", "remove", "the", "package", "author_email", "Otherwise", "I", "think", "this", "format", "makes", "future", "change", "to", "the", "extension", "configuration", "a", "little", "clearer", "more", "isolated", "NUMBER", "Any", "ideas", "on", "why", "the", "travis", "build", "be", "fail", "with", "unable", "to", "execute", "g", "NUMBER", "No", "such", "file", "or", "directory", "It", "pass", "on", "my", "local", "branch", "before", "the", "pull", "request", "LINK", "ci", "NUMBER", "org", "nicksay", "brotli", "jobs", "NUMBER", "But", "fail", "here", "LINK", "ci", "NUMBER", "org", "google", "brotli", "jobs", "NUMBER", "Sounds", "like", "a", "Travis", "CI", "bug", "NUMBER", "See", "here", "LINK", "pillow", "pillow", "wheels", "issue", "NUMBER", "issuecomment", "NUMBER", "the", "workaround", "be", "to", "set", "osx_image", "xcode", "NUMBER", "Ah", "great", "thanks", "NUMBER", "I", "ve", "sent", "NUMBER", "to", "solve", "that", "bug", "for", "now", "NUMBER", "I", "actually", "had", "to", "go", "back", "to", "the", "previous", "default", "osx_image", "beta", "xcode", "NUMBER", "since", "xcode", "NUMBER", "also", "had", "error", "NUMBER", "I", "ve", "add", "a", "temporary", "commit", "LINK", "to", "verify", "the", "build", "pass", "NUMBER", "Once", "NUMBER", "be", "merge", "I", "ll", "rebase", "and", "remove", "the", "commit", "NUMBER", "cc", "nnorwitz", "FYI", "I", "u", "r", "On", "Oct", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "Alex", "Nicksay", "notifications", "github", "NUMBER", "com", "write", "You", "can", "view", "comment", "on", "or", "merge", "this", "pull", "request", "online", "at", "LINK", "Commit", "Summary", "Python", "Clean", "up", "setup", "NUMBER", "py", "file", "File", "Changes", "_M_", "setup", "NUMBER", "cfg", "LINK", "diff", "NUMBER", "NUMBER", "_M_", "setup", "NUMBER", "py", "LINK", "diff", "NUMBER", "NUMBER", "Patch", "Links", "LINK", "LINK", "You", "be", "receiving", "this", "because", "you", "be", "subscribed", "to", "this", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "LINK", "or", "mute", "the", "thread", "LINK", "auth", "ANDH", "NUMBER", "hQyQ", "NUMBER", "ZoeSEcagMIM", "NUMBER", "VROSbPgs", "NUMBER", "ks", "NUMBER", "qw", "NUMBER", "EEgaJpZM", "NUMBER", "KO", "NUMBER", "Xt", "NUMBER", "another", "workaround", "to", "this", "Travis", "CI", "bug", "instead", "of", "use", "the", "old", "VM", "be", "to", "call", "rvm", "get", "head", "as", "mention", "here", "LINK", "ci", "travis", "ci", "issue", "NUMBER", "issuecomment", "NUMBER", "For", "example", "LINK", "I", "ve", "rebased", "and", "remove", "the", "temporary", "commit", "now", "that", "eustas", "merge", "NUMBER", "Great", "build", "be", "passing", "now", "this", "PR", "be", "ready", "to", "go", "NUMBER", "eustas", "Absolutely", "I", "ll", "revert", "the", "setup", "NUMBER", "cfg", "change", "and", "open", "a", "new", "PR", "for", "both", "of", "those", "NUMBER", "Do", "you", "want", "that", "in", "the", "base", "README", "NUMBER", "md", "or", "in", "python", "README", "NUMBER", "md", "It", "took", "an", "hour", "for", "Travis", "to", "finish", "but", "this", "PR", "be", "again", "ready", "to", "go", "NUMBER", "I", "get", "bitten", "by", "a", "this", "long", "standing", "bug", "in", "modp_dtoa", "NUMBER", "NUMBER", "LINK", "I", "was", "able", "to", "reproduce", "it", "with", "brotli", "as", "well", "NUMBER", "The", "following", "values", "should", "rond", "to", "NUMBER", "but", "instead", "return", "NUMBER", "c", "modp_dtoa", "NUMBER", "str", "NUMBER", "modp_dtoa", "NUMBER", "str", "NUMBER", "Unfortunately", "upstream", "do", "not", "seem", "to", "be", "maintained", "anymore", "NUMBER", "Apologies", "I", "seem", "to", "have", "mix", "up", "with", "another", "repository", "NUMBER", "Right", "now", "the", "only", "way", "to", "use", "Brolti", "in", "the", "backend", "be", "to", "use", "the", "Java", "binding", "for", "Brotli", "JNI", "NUMBER", "It", "be", "not", "always", "possible", "to", "run", "native", "code", "in", "backend", "NUMBER", "Could", "Google", "release", "a", "pure", "Java", "implementation", "of", "Brotli", "to", "facilitate", "its", "adoption", "NUMBER", "I", "be", "mostly", "interested", "in", "the", "decompression", "part", "NUMBER", "eustas", "great", "news", "Thanks", "Any", "ETA", "on", "when", "this", "can", "be", "publish", "to", "Maven", "Central", "Awesome", "Thanks", "Hello", "Any", "update", "on", "this", "be", "publish", "Thanks", "Sorry", "to", "ask", "again", "but", "any", "update", "on", "the", "publish", "Cool", "Thanks", "for", "letting", "us", "know", "NUMBER", "Are", "there", "any", "plan", "to", "also", "implement", "the", "encoder", "This", "be", "a", "small", "set", "of", "simple", "tool", "use", "together", "with", "large", "window", "brotli", "LINK", "to", "visualize", "backward", "reference", "distance", "distribution", "NUMBER", "You", "can", "find", "a", "description", "here", "LINK", "NUMBER", "Thanks", "for", "your", "pull", "request", "NUMBER", "It", "looks", "like", "this", "may", "be", "your", "first", "contribution", "to", "a", "Google", "open", "source", "project", "NUMBER", "Before", "we", "can", "look", "at", "your", "pull", "request", "you", "ll", "need", "to", "sign", "a", "Contributor", "License", "Agreement", "CLA", "NUMBER", "memo", "Please", "visit", "LINK", "to", "sign", "NUMBER", "Once", "you", "ve", "sign", "please", "reply", "here", "e", "NUMBER", "g", "NUMBER", "I", "sign", "it", "and", "we", "ll", "verify", "NUMBER", "Thanks", "NUMBER", "If", "you", "ve", "already", "sign", "a", "CLA", "it", "s", "possible", "we", "don", "t", "have", "your", "GitHub", "username", "or", "you", "re", "use", "a", "different", "email", "address", "NUMBER", "Check", "your", "exist", "CLA", "data", "LINK", "and", "verify", "that", "your", "email", "be", "set", "on", "your", "git", "commit", "LINK", "your", "email", "in", "git", "NUMBER", "If", "you", "sign", "the", "CLA", "as", "a", "corporation", "please", "let", "us", "know", "the", "company", "s", "name", "NUMBER", "TAG", "CLAs", "look", "good", "thanks", "TAG", "Hello", "I", "recently", "compiled", "brotli", "under", "Xcode", "for", "use", "in", "an", "iOS", "project", "and", "I", "hit", "one", "little", "snag", "NUMBER", "The", "file", "dec", "port", "NUMBER", "h", "and", "common", "port", "NUMBER", "h", "have", "the", "exact", "same", "filename", "and", "this", "makes", "it", "difficult", "to", "setup", "an", "Xcode", "project", "where", "all", "the", "brotli", "file", "live", "in", "one", "directory", "NUMBER", "Could", "you", "please", "rename", "common", "port", "NUMBER", "h", "to", "common", "common_port", "NUMBER", "h", "or", "perhaps", "common", "cport", "NUMBER", "h", "so", "that", "it", "be", "possible", "to", "import", "these", "file", "into", "an", "Xcode", "project", "without", "a", "conflict", "NUMBER", "The", "build", "in", "include", "file", "logic", "in", "an", "Xcode", "project", "be", "a", "little", "weird", "and", "this", "change", "would", "make", "things", "a", "lot", "easier", "NUMBER", "No", "I", "be", "build", "in", "Xcode", "but", "creating", "a", "new", "directory", "layout", "and", "the", "only", "catch", "be", "the", "fact", "that", "the", "same", "filename", "be", "be", "use", "in", "different", "directories", "NUMBER", "It", "be", "not", "a", "problem", "if", "you", "don", "t", "change", "anything", "and", "use", "the", "exist", "build", "structure", "but", "then", "it", "be", "harder", "to", "integrate", "into", "an", "exist", "Xcode", "project", "as", "source", "code", "NUMBER", "ng", "be", "detected", "check", "for", "__ARM_ARCH", "be", "exactly", "equal", "to", "NUMBER", "so", "that", "arm", "NUMBER", "arch", "do", "not", "define", "BROTLI_TARGET_ARMV", "NUMBER", "Thanks", "for", "your", "pull", "request", "NUMBER", "It", "looks", "like", "this", "may", "be", "your", "first", "contribution", "to", "a", "Google", "open", "source", "project", "NUMBER", "Before", "we", "can", "look", "at", "your", "pull", "request", "you", "ll", "need", "to", "sign", "a", "Contributor", "License", "Agreement", "CLA", "NUMBER", "memo", "Please", "visit", "LINK", "to", "sign", "NUMBER", "Once", "you", "ve", "sign", "please", "reply", "here", "e", "NUMBER", "g", "NUMBER", "I", "sign", "it", "and", "we", "ll", "verify", "NUMBER", "Thanks", "NUMBER", "If", "you", "ve", "already", "sign", "a", "CLA", "it", "s", "possible", "we", "don", "t", "have", "your", "GitHub", "username", "or", "you", "re", "use", "a", "different", "email", "address", "NUMBER", "Check", "your", "exist", "CLA", "data", "LINK", "and", "verify", "that", "your", "email", "be", "set", "on", "your", "git", "commit", "LINK", "your", "email", "in", "git", "NUMBER", "If", "you", "sign", "the", "CLA", "as", "a", "corporation", "please", "let", "us", "know", "the", "company", "s", "name", "NUMBER", "TAG", "I", "sign", "it", "My", "github", "username", "be", "mdejong", "NUMBER", "Mo", "DeJong", "On", "Aug", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "googlebot", "notifications", "github", "NUMBER", "com", "write", "I", "sign", "it", "CLAs", "look", "good", "thanks", "TAG", "So", "I", "can", "confirm", "that", "rbit", "would", "compile", "on", "arm", "NUMBER", "but", "it", "causes", "a", "runtime", "error", "NUMBER", "It", "do", "compile", "the", "generate", "asm", "on", "an", "arm", "NUMBER", "target", "looks", "like", "NUMBER", "x", "NUMBER", "a", "NUMBER", "f", "NUMBER", "c", "TAG", "str", "w", "NUMBER", "sp", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "f", "NUMBER", "TAG", "ldr", "w", "NUMBER", "sp", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "f", "NUMBER", "TAG", "rbit", "x", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "f", "NUMBER", "TAG", "str", "w", "NUMBER", "sp", "NUMBER", "For", "example", "you", "could", "make", "this", "compile", "after", "add", "my", "patch", "by", "make", "this", "change", "if", "BROTLI_MODERN_COMPILER", "defined", "__llvm__", "if", "defined", "BROTLI_TARGET_ARMV", "NUMBER", "defined", "BROTLI_TARGET_ARMV", "NUMBER", "static", "BROTLI_INLINE", "unsigned", "BrotliRBit", "unsigned", "input", "unsigned", "output", "__asm__", "rbit", "NUMBER", "NUMBER", "n", "r", "output", "r", "input", "return", "output", "define", "BROTLI_RBIT", "x", "BrotliRBit", "x", "endif", "armv", "NUMBER", "endif", "gcc", "clang", "The", "change", "I", "made", "was", "to", "just", "get", "BROTLI_TARGET_ARMV", "NUMBER", "to", "only", "be", "defined", "for", "the", "ARM", "NUMBER", "target", "while", "keep", "it", "from", "be", "defined", "for", "arm", "NUMBER", "which", "be", "v", "NUMBER", "After", "a", "bit", "of", "poking", "around", "I", "find", "the", "following", "LINK", "Changing", "BrotliRBit", "to", "the", "following", "fix", "the", "asm", "call", "to", "rbit", "on", "arm", "NUMBER", "if", "BROTLI_MODERN_COMPILER", "defined", "__llvm__", "if", "defined", "BROTLI_TARGET_ARMV", "NUMBER", "defined", "BROTLI_TARGET_ARMV", "NUMBER", "static", "BROTLI_INLINE", "unsigned", "BrotliRBit", "unsigned", "input", "unsigned", "output", "if", "defined", "BROTLI_TARGET_ARMV", "NUMBER", "__asm__", "rbit", "w", "NUMBER", "w", "NUMBER", "r", "output", "r", "input", "elif", "defined", "BROTLI_TARGET_ARMV", "NUMBER", "__asm__", "rbit", "NUMBER", "NUMBER", "n", "r", "output", "r", "input", "endif", "return", "output", "define", "BROTLI_RBIT", "x", "BrotliRBit", "x", "endif", "armv", "NUMBER", "arm", "NUMBER", "endif", "gcc", "clang", "With", "this", "change", "both", "arm", "NUMBER", "and", "NUMBER", "bit", "target", "compile", "and", "execute", "correctly", "NUMBER", "Hey", "guys", "can", "this", "first", "commit", "be", "add", "to", "the", "repo", "I", "can", "submit", "a", "second", "pull", "req", "for", "the", "second", "change", "relate", "to", "the", "rbit", "instruction", "but", "it", "depends", "on", "the", "first", "one", "NUMBER", "The", "rbit", "issue", "be", "an", "additional", "change", "that", "can", "be", "add", "on", "after", "this", "pull", "req", "NUMBER", "I", "propose", "a", "rbit", "modification", "also", "see", "above", "but", "this", "pull", "req", "stands", "on", "its", "own", "NUMBER", "I", "just", "created", "NUMBER", "and", "verify", "that", "rbit", "be", "executing", "properly", "when", "build", "on", "ARM", "NUMBER", "with", "that", "change", "NUMBER", "Thanks", "for", "your", "pull", "request", "NUMBER", "It", "looks", "like", "this", "may", "be", "your", "first", "contribution", "to", "a", "Google", "open", "source", "project", "NUMBER", "Before", "we", "can", "look", "at", "your", "pull", "request", "you", "ll", "need", "to", "sign", "a", "Contributor", "License", "Agreement", "CLA", "NUMBER", "memo", "Please", "visit", "LINK", "to", "sign", "NUMBER", "Once", "you", "ve", "sign", "please", "reply", "here", "e", "NUMBER", "g", "NUMBER", "I", "sign", "it", "and", "we", "ll", "verify", "NUMBER", "Thanks", "NUMBER", "If", "you", "ve", "already", "sign", "a", "CLA", "it", "s", "possible", "we", "don", "t", "have", "your", "GitHub", "username", "or", "you", "re", "use", "a", "different", "email", "address", "NUMBER", "Check", "your", "exist", "CLA", "data", "LINK", "and", "verify", "that", "your", "email", "be", "set", "on", "your", "git", "commit", "LINK", "your", "email", "in", "git", "NUMBER", "If", "you", "sign", "the", "CLA", "as", "a", "corporation", "please", "let", "us", "know", "the", "company", "s", "name", "NUMBER", "TAG", "I", "sign", "it", "This", "change", "allows", "to", "build", "a", "small", "brotli", "binary", "that", "relies", "on", "shared", "libraries", "dec", "enc", "and", "common", "instead", "of", "a", "single", "binary", "NUMBER", "In", "particular", "this", "will", "allows", "distro", "maintainers", "to", "create", "independent", "libbrotli", "libraries", "issue", "NUMBER", "NUMBER", "Thanks", "for", "your", "pull", "request", "NUMBER", "It", "looks", "like", "this", "may", "be", "your", "first", "contribution", "to", "a", "Google", "open", "source", "project", "NUMBER", "Before", "we", "can", "look", "at", "your", "pull", "request", "you", "ll", "need", "to", "sign", "a", "Contributor", "License", "Agreement", "CLA", "NUMBER", "memo", "Please", "visit", "LINK", "to", "sign", "NUMBER", "Once", "you", "ve", "sign", "please", "reply", "here", "e", "NUMBER", "g", "NUMBER", "I", "sign", "it", "and", "we", "ll", "verify", "NUMBER", "Thanks", "NUMBER", "If", "you", "ve", "already", "sign", "a", "CLA", "it", "s", "possible", "we", "don", "t", "have", "your", "GitHub", "username", "or", "you", "re", "use", "a", "different", "email", "address", "NUMBER", "Check", "your", "exist", "CLA", "data", "LINK", "and", "verify", "that", "your", "email", "be", "set", "on", "your", "git", "commit", "LINK", "your", "email", "in", "git", "NUMBER", "If", "you", "sign", "the", "CLA", "as", "a", "corporation", "please", "let", "us", "know", "the", "company", "s", "name", "NUMBER", "TAG", "I", "sign", "it", "Bazel", "doesn", "t", "like", "tool", "directory", "which", "makes", "the", "whole", "BUILD", "file", "unusable", "NUMBER", "After", "wiping", "everything", "Bazel", "relate", "from", "my", "systems", "since", "it", "was", "broken", "on", "all", "of", "them", "I", "find", "the", "issue", "NUMBER", "It", "was", "outdate", "NUMBER", "bazelrc", "file", "generate", "by", "older", "version", "of", "Bazel", "build", "package_path", "workspace", "path", "to", "bazel", "base_workspace", "fetch", "package_path", "workspace", "path", "to", "bazel", "base_workspace", "query", "package_path", "workspace", "path", "to", "bazel", "base_workspace", "Thanks", "for", "double", "checking", "and", "sorry", "for", "the", "noise", "cc_inc_library", "be", "broken", "when", "use", "with", "external", "repositories", "see", "LINK", "which", "makes", "it", "a", "bit", "useless", "at", "the", "moment", "NUMBER", "Switch", "to", "use", "cc_library", "with", "include", "attribute", "to", "expose", "public", "headers", "NUMBER", "While", "there", "fix", "order", "of", "attributes", "in", "brotli_common", "target", "NUMBER", "Unfortunately", "this", "warning", "be", "also", "know", "issue", "LINK", "seems", "it", "feel", "better", "please", "create", "a", "plugin", "for", "NUMBER", "Zip", "so", "that", "this", "open", "and", "free", "archiver", "can", "also", "compress", "images", "use", "FLIF", "NUMBER", "This", "would", "also", "help", "make", "Brotli", "more", "famous", "in", "the", "world", "NUMBER", "there", "be", "already", "plugins", "that", "work", "with", "NUMBER", "Zip", "including", "descriptions", "and", "sources", "ZSTD", "LINK", "Zip", "Zstd", "LZHAM", "LINK", "max", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "max", "results", "NUMBER", "start", "NUMBER", "by", "date", "false", "LINK", "_codec_devel", "I", "be", "creating", "an", "NUMBER", "Zip", "plugin", "for", "brotli", "NUMBER", "Currently", "there", "seems", "to", "be", "no", "special", "magic", "for", "test", "of", "brotli", "s", "presence", "in", "some", "data", "NUMBER", "I", "find", "some", "first", "definitions", "of", "a", "frame", "format", "v", "NUMBER", "in", "the", "brotli", "repository", "of", "madler", "NUMBER", "but", "that", "s", "it", "NUMBER", "For", "my", "NUMBER", "Zip", "extension", "the", "stream", "with", "the", "container", "will", "be", "defined", "like", "this", "NUMBER", "bytes", "skippable", "frame", "NUMBER", "bytes", "magic", "id", "NUMBER", "x", "NUMBER", "D", "NUMBER", "A", "NUMBER", "U", "NUMBER", "bytes", "length", "of", "the", "skippable", "frame", "always", "NUMBER", "NUMBER", "bytes", "with", "the", "length", "of", "the", "following", "compressed", "data", "CLEN", "including", "NUMBER", "bytes", "magic", "NUMBER", "bytes", "magic", "id", "in", "the", "beginning", "of", "compressed", "data", "BROT", "CLEN", "bytes", "compressed", "data", "stream", "to", "be", "decoded", "But", "I", "could", "also", "support", "normal", "brotli", "streams", "if", "I", "can", "recognize", "them", "NUMBER", "AFAIK", "Igor", "will", "not", "add", "new", "codecs", "to", "Standard", "NUMBER", "Zip", "currently", "NUMBER", "Edit", "Oh", "I", "just", "find", "LINK", "NUMBER", "I", "think", "this", "issue", "can", "be", "close", "now", "cause", "you", "have", "an", "NUMBER", "Zip", "plugin", "for", "brotli", "LINK", "Zip", "Zstd", "now", "Hi", "guys", "what", "be", "the", "wheels", "file", "supposed", "to", "do", "I", "install", "a", "wheel", "thinking", "it", "would", "build", "a", "binary", "but", "it", "didn", "t", "NUMBER", "Relatedly", "what", "s", "the", "simplest", "way", "to", "build", "brotli", "on", "Windows", "I", "see", "make", "cmake", "premake", "the", "note", "mention", "Bazel", "NUMBER", "I", "m", "not", "familiar", "with", "the", "last", "two", "NUMBER", "What", "s", "the", "best", "Windows", "path", "here", "NUMBER", "bit", "Windows", "NUMBER", "VS", "NUMBER", "JoeArizona", "Wheels", "LINK", "NUMBER", "be", "Python", "s", "binary", "package", "format", "NUMBER", "Hey", "thanks", "eustas", "I", "m", "reading", "about", "premake", "now", "and", "it", "looks", "pretty", "smart", "NUMBER", "premake", "NUMBER", "be", "in", "alpha", "though", "and", "NUMBER", "be", "in", "beta", "so", "I", "m", "puzzled", "by", "what", "version", "they", "want", "people", "to", "use", "since", "those", "be", "the", "only", "downloads", "they", "feature", "NUMBER", "I", "ll", "try", "CMake", "NUMBER", "Exposing", "compiler", "optimizations", "in", "these", "tool", "has", "always", "be", "harder", "than", "it", "needs", "to", "be", "buried", "in", "so", "much", "other", "content", "that", "it", "feels", "like", "compiler", "flags", "be", "an", "afterthought", "NUMBER", "Build", "tool", "should", "have", "a", "section", "in", "their", "make", "equivalent", "file", "call", "Optimization", "with", "subsections", "for", "CPU", "hardware", "target", "linker", "optimization", "math", "etc", "NUMBER", "and", "then", "automatically", "convert", "all", "that", "to", "the", "correct", "compiler", "flags", "depending", "on", "the", "compiler", "NUMBER", "Maybe", "I", "ll", "sketch", "out", "something", "NUMBER", "anthrotype", "I", "know", "that", "much", "have", "occasionally", "gone", "to", "Christoph", "Gohlke", "s", "wonderful", "repository", "of", "Python", "wheels", "for", "Windows", "LINK", "gohlke", "pythonlibs", "to", "grab", "stuff", "but", "I", "don", "t", "know", "what", "the", "_brotli_", "wheel", "be", "supposed", "to", "do", "exactly", "since", "brotli", "isn", "t", "write", "in", "Python", "NUMBER", "I", "guess", "another", "way", "of", "framing", "my", "question", "What", "do", "we", "need", "the", "Python", "stuff", "for", "here", "What", "be", "Python", "doing", "in", "the", "brotli", "repo", "I", "m", "not", "use", "to", "seeing", "a", "bunch", "of", "Python", "Ruby", "scripting", "code", "in", "a", "compression", "codec", "write", "in", "C", "C", "NUMBER", "If", "we", "don", "t", "need", "it", "to", "build", "the", "binaries", "then", "be", "for", "test", "or", "something", "I", "looked", "around", "for", "an", "explanation", "of", "the", "build", "process", "and", "also", "of", "what", "the", "Python", "code", "was", "for", "but", "so", "far", "I", "haven", "t", "find", "any", "docs", "or", "comments", "on", "that", "NUMBER", "JoeArizona", "They", "be", "simply", "bindings", "which", "allow", "to", "call", "the", "brotli", "library", "from", "python", "code", "Python", "has", "C", "API", "which", "can", "be", "use", "to", "write", "extension", "modules", "NUMBER", "For", "example", "we", "use", "brotli", "for", "compressing", "WOFF", "NUMBER", "fonts", "in", "FontTools", "LINK", "NUMBER", "Ah", "okay", "just", "bindings", "NUMBER", "The", "nine", "different", "wheels", "in", "the", "downloads", "release", "page", "throw", "me", "off", "made", "me", "think", "wheels", "were", "be", "use", "to", "build", "brotli", "NUMBER", "exe", "NUMBER", "Thanks", "for", "clearing", "that", "up", "NUMBER", "Yeah", "those", "should", "really", "be", "uploaded", "to", "the", "Python", "package", "index", "IMO", "NUMBER", "I", "find", "a", "test", "case", "where", "brotli", "with", "quality", "NUMBER", "compresses", "better", "than", "with", "quality", "NUMBER", "This", "seem", "worth", "report", "in", "case", "there", "might", "be", "some", "convenient", "way", "to", "detect", "and", "handle", "this", "case", "short", "of", "compressing", "the", "whole", "file", "both", "ways", "to", "check", "NUMBER", "Test", "case", "and", "compressed", "version", "brotli", "test", "NUMBER", "tar", "NUMBER", "gz", "LINK", "test", "NUMBER", "tar", "NUMBER", "gz", "This", "test", "case", "came", "from", "a", "locally", "modify", "version", "of", "bsdiff", "LINK", "that", "doesn", "t", "use", "bzip", "NUMBER", "internally", "so", "that", "I", "could", "test", "it", "with", "brotli", "NUMBER", "The", "bsdiff", "goes", "from", "jquery", "NUMBER", "min", "NUMBER", "js", "to", "jquery", "NUMBER", "min", "NUMBER", "js", "NUMBER", "Compressing", "jquery", "NUMBER", "ubsdiff", "with", "brotli", "quality", "NUMBER", "produces", "NUMBER", "bytes", "compressing", "with", "quality", "NUMBER", "produces", "NUMBER", "bytes", "NUMBER", "gzip", "sets", "the", "file", "modification", "time", "of", "the", "new", "NUMBER", "gz", "file", "to", "match", "the", "original", "file", "NUMBER", "Brotli", "do", "not", "do", "that", "NUMBER", "Do", "you", "consider", "add", "this", "feature", "GZIP", "do", "also", "inherit", "the", "permissions", "of", "the", "original", "file", "in", "contrast", "to", "Brotli", "NUMBER", "Tasks", "x", "preserve", "original", "file", "modification", "date", "x", "preserve", "original", "file", "permissions", "console", "NUMBER", "bro", "h", "Usage", "NUMBER", "bro", "force", "quality", "n", "decompress", "input", "filename", "output", "filename", "repeat", "iters", "verbose", "window", "n", "custom", "dictionary", "filename", "This", "output", "be", "very", "few", "NUMBER", "E", "NUMBER", "g", "NUMBER", "I", "don", "t", "know", "what", "the", "repeat", "or", "window", "switches", "do", "NUMBER", "Any", "progress", "in", "this", "regard", "yet", "Awesome", "Just", "continue", "like", "this", "Deploying", "use", "GitHub", "provider", "Creating", "v", "NUMBER", "release", "for", "repository", "google", "brotli", "tag", "v", "NUMBER", "commit", "NUMBER", "e", "NUMBER", "d", "NUMBER", "c", "NUMBER", "b", "NUMBER", "a", "NUMBER", "d", "NUMBER", "c", "NUMBER", "d", "NUMBER", "c", "NUMBER", "a", "NUMBER", "d", "NUMBER", "NUMBER", "Skipped", "release", "with", "tag", "v", "NUMBER", "already", "exists", "No", "artifacts", "were", "publish", "NUMBER", "Make", "sure", "you", "have", "specified", "correct", "artifacts", "filter", "NUMBER", "LINK", "L", "NUMBER", "sorry", "I", "jumped", "the", "gun", "NUMBER", "It", "be", "work", "fine", "NUMBER", "ops", "I", "m", "sorry", "I", "had", "you", "create", "the", "NUMBER", "tag", "NUMBER", "something", "might", "have", "gone", "wrong", "with", "the", "NUMBER", "tag", "NUMBER", "Some", "of", "the", "Windown", "NUMBER", "bit", "wheels", "be", "miss", "as", "if", "subsequent", "build", "on", "Appveyor", "have", "overwritten", "the", "exist", "Github", "release", "deleting", "the", "file", "uploaded", "by", "the", "previous", "build", "NUMBER", "So", "let", "s", "cross", "fingers", "with", "NUMBER", "ouch", "NUMBER", "The", "upload", "to", "NUMBER", "be", "now", "work", "fine", "from", "Appveyor", "but", "the", "version", "string", "in", "the", "setup", "NUMBER", "py", "be", "still", "NUMBER", "so", "the", "wheels", "be", "named", "like", "that", "NUMBER", "The", "solution", "be", "deprecate", "NUMBER", "commit", "a", "version", "string", "change", "NUMBER", "and", "cut", "a", "new", "tag", "NUMBER", "Sorry", "you", "have", "to", "go", "through", "this", "mess", "NUMBER", "the", "BROTLI_VERSION", "in", "tool", "version", "NUMBER", "h", "should", "match", "the", "latest", "tag", "version", "NUMBER", "There", "be", "tool", "like", "setuptools_scm", "which", "take", "care", "of", "update", "the", "package", "version", "as", "well", "as", "the", "one", "in", "the", "header", "file", "based", "on", "the", "latest", "git", "tag", "when", "one", "generates", "a", "new", "source", "distribution", "so", "that", "you", "won", "t", "need", "to", "remember", "to", "manually", "update", "the", "version", "file", "but", "simply", "make", "an", "annotated", "tag", "NUMBER", "But", "maybe", "that", "s", "overkill", "NUMBER", "for", "the", "python", "package", "to", "have", "the", "right", "version", "string", "matching", "the", "latest", "tag", "you", "need", "to", "modify", "the", "tool", "version", "NUMBER", "h", "file", "like", "this", "LINK", "L", "NUMBER", "diff", "define", "BROTLI_VERSION", "NUMBER", "define", "BROTLI_VERSION", "NUMBER", "still", "no", "luck", "NUMBER", "the", "NUMBER", "and", "NUMBER", "mac", "wheels", "in", "NUMBER", "release", "be", "still", "use", "NUMBER", "version", "LINK", "actually", "no", "they", "be", "just", "duplicate", "NUMBER", "The", "ones", "with", "the", "correct", "NUMBER", "version", "be", "also", "there", "NUMBER", "Can", "you", "please", "manually", "delete", "the", "NUMBER", "ones", "to", "avoid", "any", "confusions", "Thank", "you", "very", "much", "NUMBER", "Thanks", "Looks", "good", "now", "you", "shouldn", "t", "use", "pip", "NUMBER", "but", "activate", "the", "relevant", "python", "environment", "before", "calling", "the", "respective", "pip", "command", "NUMBER", "Sure", "I", "ll", "do", "it", "later", "today", "NUMBER", "I", "m", "investigating", "Brotli", "for", "use", "in", "Java", "Android", "apps", "NUMBER", "I", "m", "not", "aware", "of", "any", "project", "which", "provides", "this", "capability", "if", "you", "be", "I", "d", "like", "to", "know", "so", "I", "would", "like", "to", "build", "an", "interceptor", "for", "Android", "s", "OkHttp", "that", "compresses", "decompresses", "use", "Brotli", "NUMBER", "Would", "someone", "be", "kind", "enough", "to", "point", "me", "to", "the", "correct", "release", "of", "the", "Brotli", "native", "library", "that", "would", "work", "on", "Android", "devices", "Related", "LINK", "I", "had", "assumed", "that", "as", "Brotli", "was", "now", "a", "standard", "that", "the", "library", "would", "be", "complete", "NUMBER", "If", "this", "be", "not", "the", "case", "be", "there", "somewhere", "I", "can", "read", "about", "what", "s", "miss", "what", "s", "planned", "and", "look", "at", "a", "the", "roadmap", "A", "pure", "Java", "implementation", "would", "be", "great", "be", "there", "any", "other", "languages", "planned", "as", "part", "of", "NUMBER", "Cool", "NUMBER", "Do", "you", "have", "any", "rough", "probably", "very", "rough", "estimates", "or", "guess", "timates", "of", "when", "v", "NUMBER", "may", "happen", "I", "m", "interested", "in", "a", "Java", "and", "C", "port", "and", "would", "be", "willing", "to", "help", "with", "the", "C", "version", "if", "required", "NUMBER", "Chiming", "in", "to", "say", "that", "I", "m", "also", "very", "interested", "in", "this", "and", "have", "be", "track", "this", "issue", "for", "a", "while", "NUMBER", "Very", "excited", "to", "see", "that", "the", "Java", "port", "be", "starting", "to", "make", "it", "into", "the", "codebase", "e", "NUMBER", "g", "NUMBER", "with", "NUMBER", "d", "NUMBER", "fe", "NUMBER", "a", "NUMBER", "ca", "NUMBER", "b", "NUMBER", "ef", "NUMBER", "cfa", "NUMBER", "ca", "NUMBER", "c", "NUMBER", "NUMBER", "Is", "the", "current", "Java", "version", "in", "the", "repo", "safe", "to", "start", "use", "externally", "eustas", "Any", "update", "on", "the", "Maven", "artefact", "be", "publish", "eustas", "I", "m", "also", "interested", "in", "the", "mvn", "artifact", "NUMBER", "Any", "news", "I", "m", "also", "interested", "in", "a", "java", "port", "jni", "bindings", "for", "brotli", "For", "the", "new", "version", "of", "the", "R", "bindings", "I", "be", "switching", "to", "BrotliDecompressStream", "because", "this", "be", "what", "bro", "be", "use", "so", "I", "guess", "this", "part", "of", "the", "API", "should", "work", "NUMBER", "Two", "question", "What", "be", "the", "difference", "with", "BrotliDecoderDecompressStream", "The", "docs", "state", "that", "After", "each", "call", "available_in", "will", "be", "decremented", "by", "the", "amount", "of", "input", "bytes", "consumed", "and", "the", "next_in", "pointer", "will", "be", "incremented", "by", "that", "amount", "NUMBER", "However", "if", "I", "look", "at", "my", "debugging", "output", "it", "seems", "that", "the", "first", "few", "iterations", "available_in", "be", "not", "be", "decremented", "even", "though", "total_out", "be", "growing", "and", "next_in", "be", "moving", "NUMBER", "r", "brotli_decompress", "buf", "available_in", "NUMBER", "available_out", "NUMBER", "total_out", "NUMBER", "available_in", "NUMBER", "available_out", "NUMBER", "total_out", "NUMBER", "available_in", "NUMBER", "available_out", "NUMBER", "total_out", "NUMBER", "available_in", "NUMBER", "available_out", "NUMBER", "total_out", "NUMBER", "available_in", "NUMBER", "available_out", "NUMBER", "total_out", "NUMBER", "available_in", "NUMBER", "available_out", "NUMBER", "total_out", "NUMBER", "available_in", "NUMBER", "available_out", "NUMBER", "total_out", "NUMBER", "available_in", "NUMBER", "available_out", "NUMBER", "total_out", "NUMBER", "available_in", "NUMBER", "available_out", "NUMBER", "total_out", "NUMBER", "available_in", "NUMBER", "available_out", "NUMBER", "total_out", "NUMBER", "This", "only", "goes", "back", "to", "VS", "NUMBER", "NUMBER", "because", "MSVC", "didn", "t", "support", "log", "NUMBER", "until", "then", "NUMBER", "I", "think", "I", "m", "do", "now", "unless", "you", "want", "me", "to", "do", "some", "of", "the", "stuff", "from", "NUMBER", "pkg", "config", "install", "a", "library", "configure", "cmake", "etc", "NUMBER", "NUMBER", "I", "add", "another", "commit", "to", "this", "which", "be", "unrelated", "to", "the", "PR", "title", "NUMBER", "Apparently", "some", "version", "of", "CMake", "will", "cache", "the", "result", "of", "the", "check", "for", "log", "NUMBER", "so", "if", "it", "fail", "without", "link", "to", "libm", "it", "would", "simply", "skip", "the", "test", "_with_", "libm", "NUMBER", "Changing", "the", "name", "of", "the", "variable", "for", "the", "second", "test", "with", "libm", "works", "around", "the", "issue", "NUMBER", "The", "issue", "with", "Python", "on", "AppVeyor", "seems", "to", "have", "be", "cause", "by", "a", "change", "in", "AppVeyor", "build", "which", "previously", "worked", "don", "t", "anymore", "NUMBER", "I", "ll", "submit", "a", "bug", "report", "with", "them", "and", "try", "to", "figure", "out", "what", "be", "going", "on", "there", "It", "looks", "like", "it", "s", "a", "bug", "in", "the", "latest", "setuptools", "not", "correctly", "enquoting", "library", "paths", "with", "spaces", "NUMBER", "Maybe", "you", "can", "temporarily", "try", "to", "download", "an", "earlier", "version", "of", "setuptools", "which", "was", "know", "to", "be", "workong", "NUMBER", "LINK", "Yes", "LINK", "L", "NUMBER", "fix", "the", "issue", "NUMBER", "I", "d", "just", "like", "to", "figure", "out", "if", "we", "should", "bother", "or", "just", "wait", "for", "setuptools", "to", "tag", "a", "new", "release", "Let", "s", "wait", "I", "guess", "NUMBER", "They", "be", "usually", "pretty", "quick", "NUMBER", "Merged", "LINK", "hmm", "NUMBER", "looks", "like", "it", "s", "not", "fix", "yet", "LINK", "issuecomment", "NUMBER", "I", "think", "it", "s", "a", "good", "idea", "to", "pin", "down", "a", "specific", "version", "of", "setuptools", "instead", "of", "always", "upgrading", "to", "the", "latest", "at", "every", "appveyor", "build", "NUMBER", "We", "could", "update", "setuptools", "when", "needed", "and", "when", "we", "know", "do", "not", "break", "anything", "else", "NUMBER", "The", "latest", "setuptools", "v", "NUMBER", "should", "fix", "the", "issue", "NUMBER", "LINK", "nemequ", "can", "you", "try", "to", "re", "run", "the", "Appveyor", "build", "I", "can", "t", "rebuild", "the", "PR", "without", "change", "the", "commit", "eustas", "would", "need", "to", "do", "that", "NUMBER", "However", "it", "works", "in", "my", "repository", "now", "see", "LINK", "NUMBER", "See", "LINK", "ci", "NUMBER", "org", "quixdb", "squash", "jobs", "NUMBER", "L", "NUMBER", "Note", "that", "this", "be", "come", "from", "types", "NUMBER", "h", "so", "it", "happens", "when", "compile", "code", "_using_", "brotli", "not", "necessarily", "in", "brotli", "itself", "NUMBER", "Even", "if", "you", "don", "t", "care", "about", "Wundef", "in", "brotli", "IMHO", "it", "should", "be", "possible", "for", "people", "who", "just", "want", "to", "use", "brotli", "to", "use", "whatever", "warning", "flags", "they", "want", "NUMBER", "Untested", "but", "this", "should", "do", "the", "trick", "diff", "diff", "git", "a", "common", "types", "NUMBER", "h", "b", "common", "types", "NUMBER", "h", "index", "NUMBER", "b", "NUMBER", "af", "NUMBER", "d", "NUMBER", "NUMBER", "a", "common", "types", "NUMBER", "h", "b", "common", "types", "NUMBER", "h", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "typedef", "__int", "NUMBER", "int", "NUMBER", "_t", "endif", "defined", "_MSC_VER", "_MSC_VER", "TAG", "NUMBER", "defined", "__cplusplus", "__STDC_VERSION__", "NUMBER", "L", "defined", "__cplusplus", "defined", "__STDC_VERSION__", "__STDC_VERSION__", "NUMBER", "L", "include", "TAG", "define", "BROTLI_BOOL", "bool", "define", "BROTLI_TRUE", "true", "Closing", "since", "NUMBER", "fix", "this", "discussion", "if", "necessary", "can", "take", "place", "there", "NUMBER", "But", "not", "work", "on", "full", "html", "pages", "NUMBER", "My", "config", "brotli", "on", "brotli_static", "on", "brotli_min_length", "NUMBER", "brotli_buffers", "NUMBER", "NUMBER", "k", "brotli_comp_level", "NUMBER", "brotli_types", "text", "plain", "text", "css", "text", "xml", "application", "javascript", "application", "x", "javascript", "application", "xml", "application", "xml", "rss", "application", "ecmascript", "application", "json", "image", "svg", "xml", "Hello", "NUMBER", "Do", "you", "think", "you", "could", "add", "a", "short", "overview", "between", "other", "formats", "E", "NUMBER", "g", "NUMBER", "speed", "and", "compression", "ratio", "as", "comparison", "Nothing", "big", "perhaps", "just", "one", "small", "markdown", "table", "or", "something", "NUMBER", "Feel", "free", "to", "close", "this", "issue", "if", "this", "suggestion", "be", "considered", "to", "be", "unfit", "to", "the", "project", "I", "was", "just", "mostly", "curious", "since", "I", "did", "not", "know", "brotli", "yet", "sounds", "swiss", "german", "by", "the", "way", "small", "bread", "haha", "NUMBER", "Thanks", "Have", "you", "checked", "LINK", "comparison", "study", "NUMBER", "NUMBER", "NUMBER", "pdf", "IMHO", "link", "to", "third", "party", "benchmark", "s", "would", "be", "a", "better", "idea", "since", "there", "be", "less", "appearance", "of", "bias", "NUMBER", "I", "m", "partial", "to", "the", "Squash", "Compression", "Benchmark", "LINK", "benchmark", "or", "for", "a", "more", "recent", "version", "Unstable", "Squash", "Compression", "Benchmark", "LINK", "benchmark", "unstable", "but", "I", "created", "them", "so", "I", "m", "biased", "NUMBER", "Others", "listed", "in", "the", "Squash", "Benchmark", "FAQ", "LINK", "benchmark", "faq", "other", "benchmarks", "include", "Large", "Text", "Compression", "Benchmark", "LINK", "Squeeze", "Chart", "LINK", "Maximum", "Compression", "LINK", "World", "Compression", "Challenge", "LINK", "Public", "headers", "be", "now", "available", "via", "include", "TAG", "include", "TAG", "include", "TAG", "include", "TAG", "include", "TAG", "The", "exposure", "of", "types", "NUMBER", "h", "which", "be", "only", "useful", "for", "MSVC", "build", "be", "a", "bit", "unfortunate", "but", "this", "change", "would", "be", "much", "bigger", "without", "it", "NUMBER", "Makefile", "test", "with", "make", "test", "BUILD", "file", "test", "with", "ngx_brotli", "setup", "NUMBER", "py", "test", "with", "python", "setup", "NUMBER", "py", "build_ext", "test", "premake", "NUMBER", "lua", "be", "broken", "but", "it", "was", "broken", "before", "this", "change", "NUMBER", "Please", "note", "that", "C", "interface", "wasn", "t", "very", "well", "test", "since", "there", "be", "no", "consumers", "of", "it", "NUMBER", "Hey", "Evgenii", "should", "I", "rebase", "this", "on", "top", "of", "new", "master", "Are", "the", "change", "propose", "in", "this", "pull", "request", "acceptable", "This", "small", "change", "to", "the", "Makefile", "support", "build", "a", "libbrotli", "NUMBER", "a", "archive", "of", "the", "encoding", "and", "decoding", "objects", "not", "including", "the", "CLI", "tool", "object", "or", "run", "the", "test", "suite", "NUMBER", "This", "provides", "an", "easy", "target", "for", "link", "when", "brotli", "code", "be", "include", "in", "projects", "that", "use", "the", "encoding", "and", "decoding", "components", "NUMBER", "This", "be", "only", "an", "extension", "the", "previous", "behavior", "for", "other", "target", "remain", "NUMBER", "P", "NUMBER", "S", "NUMBER", "I", "like", "the", "approach", "of", "provide", "a", "simple", "portable", "Makefile", "for", "build", "when", "an", "autoconfig", "configure", "make", "can", "be", "avoided", "NUMBER", "This", "simplicity", "makes", "incorporation", "of", "brotli", "into", "small", "projects", "that", "do", "not", "have", "their", "own", "autoconf", "etc", "NUMBER", "that", "much", "easier", "NUMBER", "Thanks", "Thanks", "for", "your", "pull", "request", "NUMBER", "It", "looks", "like", "this", "may", "be", "your", "first", "contribution", "to", "a", "Google", "open", "source", "project", "NUMBER", "Before", "we", "can", "look", "at", "your", "pull", "request", "you", "ll", "need", "to", "sign", "a", "Contributor", "License", "Agreement", "CLA", "NUMBER", "memo", "Please", "visit", "LINK", "to", "sign", "NUMBER", "Once", "you", "ve", "sign", "please", "reply", "here", "e", "NUMBER", "g", "NUMBER", "I", "sign", "it", "and", "we", "ll", "verify", "NUMBER", "Thanks", "NUMBER", "If", "you", "ve", "already", "sign", "a", "CLA", "it", "s", "possible", "we", "don", "t", "have", "your", "GitHub", "username", "or", "you", "re", "use", "a", "different", "email", "address", "NUMBER", "Check", "your", "exist", "CLA", "data", "LINK", "and", "verify", "that", "your", "email", "be", "set", "on", "your", "git", "commit", "LINK", "your", "email", "in", "git", "NUMBER", "If", "you", "sign", "the", "CLA", "as", "a", "corporation", "please", "let", "us", "know", "the", "company", "s", "name", "NUMBER", "TAG", "I", "sign", "it", "CLAs", "look", "good", "thanks", "TAG", "Is", "it", "possible", "to", "provide", "such", "function", "Such", "as", "int", "NUMBER", "BrotliCompressionMemUsage", "int", "quality", "int", "lgwin", "BrotliEncoderMode", "mode", "int", "NUMBER", "BrotliDecompressionMemUsage", "int", "quality", "int", "lgwin", "BrotliEncoderMode", "mode", "In", "my", "program", "I", "use", "multi", "threaded", "compression", "by", "executing", "multiple", "compressors", "on", "multiple", "threads", "NUMBER", "However", "I", "limit", "the", "number", "of", "simultaneous", "threads", "by", "the", "number", "of", "available", "memory", "NUMBER", "For", "example", "if", "system", "has", "NUMBER", "GB", "of", "RAM", "NUMBER", "And", "each", "call", "to", "compress", "function", "would", "require", "NUMBER", "GB", "of", "memory", "usage", "NUMBER", "Based", "on", "that", "info", "I", "would", "know", "that", "I", "can", "create", "up", "to", "NUMBER", "threads", "NUMBER", "However", "I", "was", "unable", "to", "find", "any", "information", "about", "memory", "usage", "for", "compressing", "and", "decompressing", "with", "Brotli", "NUMBER", "Thank", "you", "o", "didn", "t", "realize", "you", "opened", "a", "PR", "for", "this", "NUMBER", "I", "sign", "the", "CLA", "for", "a", "patch", "to", "Gipfeli", "so", "that", "shouldn", "t", "be", "an", "issue", "anymore", "NUMBER", "Pretty", "much", "everything", "should", "be", "work", "now", "the", "only", "real", "exception", "be", "TSan", "which", "I", "don", "t", "think", "be", "going", "to", "happen", "on", "Ubuntu", "NUMBER", "The", "Travis", "error", "above", "looks", "transient", "it", "happens", "sometimes", "ask", "Travis", "to", "rebuild", "the", "commit", "should", "work", "NUMBER", "That", "s", "very", "odd", "NUMBER", "The", "same", "commit", "works", "for", "me", "LINK", "ci", "NUMBER", "org", "nemequ", "brotli", "jobs", "NUMBER", "Disabled", "gcc", "NUMBER", "everything", "finally", "seems", "to", "be", "work", "NUMBER", "The", "failure", "with", "ubsan", "be", "expected", "there", "be", "some", "undefined", "behavior", "in", "brotli", "even", "with", "DBROTLI_BUILD_PORTABLE", "NUMBER", "Still", "not", "sure", "why", "gcc", "NUMBER", "works", "in", "my", "repo", "but", "not", "as", "a", "PR", "but", "I", "guess", "it", "s", "not", "a", "big", "deal", "NUMBER", "I", "sign", "it", "I", "m", "guessing", "if", "I", "opened", "up", "a", "PR", "it", "would", "resolve", "the", "CLA", "thing", "would", "that", "help", "Argh", "doesn", "t", "look", "like", "GitHub", "will", "let", "me", "file", "a", "duplicate", "PR", "it", "just", "links", "me", "to", "this", "one", "NUMBER", "I", "guess", "if", "you", "close", "this", "one", "I", "could", "probably", "do", "it", "I", "recently", "rewrote", "Squash", "s", "brotli", "extension", "for", "the", "new", "API", "NUMBER", "IMHO", "the", "API", "be", "pretty", "nice", "and", "I", "love", "that", "it", "s", "C", "not", "C", "NUMBER", "That", "said", "I", "do", "have", "a", "few", "ideas", "for", "improvement", "x", "For", "funcions", "which", "return", "NUMBER", "on", "success", "and", "NUMBER", "on", "failure", "as", "well", "as", "other", "booleans", "like", "the", "is_last", "argument", "to", "BrotliEncoderWriteMetaBlock", "please", "use", "a", "bool", "or", "_Bool", "if", "you", "prefer", "intsead", "of", "an", "int", "NUMBER", "Using", "bool", "helps", "make", "the", "code", "more", "readable", "and", "reduce", "documentation", "lookups", "NUMBER", "x", "The", "decoder", "puts", "the", "state", "argument", "at", "the", "end", "the", "encoder", "puts", "it", "first", "NUMBER", "Please", "make", "it", "consistent", "NUMBER", "FWIW", "I", "prefer", "the", "instance", "to", "be", "first", "and", "that", "s", "definitely", "more", "common", "NUMBER", "x", "I", "d", "really", "like", "to", "see", "conformant", "array", "parameters", "LINK", "C", "NUMBER", "Use", "conformant", "array", "parameters", "NUMBER", "This", "would", "require", "a", "macro", "like", "the", "one", "Squash", "has", "LINK", "L", "NUMBER", "but", "it", "has", "the", "potential", "to", "help", "prevent", "bug", "in", "software", "use", "the", "API", "so", "I", "think", "it", "would", "be", "a", "good", "addition", "NUMBER", "I", "see", "you", "already", "put", "the", "length", "first", "so", "the", "change", "be", "pretty", "trivial", "NUMBER", "x", "It", "s", "a", "bit", "odd", "that", "the", "everything", "in", "the", "encoder", "be", "call", "BrotliEncoder", "but", "everything", "in", "the", "decoder", "be", "Brotli", "e", "NUMBER", "g", "NUMBER", "BrotliState", "not", "BrotliDecoderState", "NUMBER", "I", "think", "it", "would", "be", "better", "to", "move", "everything", "in", "the", "decoder", "to", "BrotliDecoder", "x", "Technically", "stuff", "like", "_BROTLI_COMMA", "isn", "t", "allow", "NUMBER", "C", "NUMBER", "at", "least", "but", "IIRC", "C", "NUMBER", "too", "NUMBER", "Anything", "which", "starts", "with", "an", "underscore", "follewed", "by", "an", "uppercase", "letter", "or", "another", "underscore", "NUMBER", "In", "C", "NUMBER", "LINK", "std", "NUMBER", "org", "jtc", "NUMBER", "sc", "NUMBER", "WG", "NUMBER", "www", "docs", "n", "NUMBER", "pdf", "it", "s", "in", "NUMBER", "I", "ve", "taken", "to", "use", "an", "underscore", "_suffix_", "in", "my", "code", "e", "NUMBER", "g", "NUMBER", "BROTLI_COMMA_", "to", "indicate", "something", "be", "really", "supposed", "to", "be", "internal", "NUMBER", "CamelCase", "for", "function", "names", "be", "fairly", "unusual", "in", "C", "NUMBER", "Switching", "to", "lowercase_with_underscores", "would", "probably", "be", "better", "CamelCase", "be", "usually", "use", "for", "type", "names", "including", "callbacks", "like", "brotli_alloc_func", "and", "brotli_free_func", "NUMBER", "Obviously", "there", "be", "no", "real", "standard", "but", "anecdotally", "it", "seems", "like", "lowercase_with_underscores", "be", "the", "most", "common", "Add", "zeroed", "memory", "alloc", "to", "memory", "allocator", "interface", "might", "improve", "performance", "NUMBER", "It", "would", "be", "nice", "to", "have", "restrict", "on", "the", "buffers", "NUMBER", "Obviously", "it", "would", "also", "have", "to", "be", "hidden", "behind", "a", "macro", "feel", "free", "to", "steal", "the", "one", "from", "Hedley", "LINK", "L", "NUMBER", "A", "lot", "of", "parameters", "can", "should", "be", "annotated", "with", "GCC", "s", "nonnull", "LINK", "NUMBER", "gcc", "Common", "Function", "Attributes", "NUMBER", "html", "index", "g_t_", "NUMBER", "code_", "NUMBER", "bnonnull_", "NUMBER", "d", "function", "attribute", "NUMBER", "attribute", "again", "Hedley", "has", "a", "macro", "LINK", "L", "NUMBER", "you", "can", "take", "NUMBER", "This", "be", "great", "for", "static", "analyzers", "and", "if", "you", "build", "with", "ubsan", "you", "can", "get", "runtime", "warnings", "too", "NUMBER", "The", "macro", "for", "this", "has", "to", "be", "variadic", "so", "you", "_might_", "want", "to", "hide", "this", "behind", "a", "check", "for", "C", "NUMBER", "variadic", "macros", "aren", "t", "in", "C", "NUMBER", "but", "all", "the", "common", "compilers", "have", "support", "them", "for", "a", "while", "even", "MSVC", "since", "VC", "NUMBER", "NUMBER", "NUMBER", "BrotliEncoderMaxCompressedSize", "could", "should", "be", "annotated", "with", "the", "const", "attribute", "GCC", "NUMBER", "or", "noalias", "declspec", "MSVC", "since", "VC", "NUMBER", "NUMBER", "Again", "Hedley", "LINK", "L", "NUMBER", "NUMBER", "This", "one", "be", "helpful", "for", "optimizing", "compilers", "though", "honestly", "I", "doubt", "excessive", "calls", "to", "BrotliEncoderMaxCompressedSize", "be", "a", "performance", "bottleneck", "NUMBER", "These", "be", "definitely", "not", "major", "issue", "I", "just", "wanted", "to", "bring", "them", "up", "while", "change", "the", "API", "be", "still", "an", "option", "NUMBER", "BTW", "if", "you", "want", "I", "d", "be", "happy", "to", "put", "together", "a", "PR", "for", "these", "just", "tell", "me", "which", "one", "s", "you", "d", "be", "okay", "with", "NUMBER", "Or", "of", "course", "just", "close", "the", "bug", "if", "you", "re", "not", "interested", "Hi", "NUMBER", "Thanks", "for", "an", "offer", "but", "I", "m", "little", "bit", "hesitate", "and", "also", "it", "will", "a", "little", "bit", "easier", "for", "me", "to", "fix", "it", "in", "internal", "repository", "and", "then", "publish", "update", "to", "github", "NUMBER", "Sounds", "good", "to", "me", "NUMBER", "Let", "me", "know", "if", "you", "change", "your", "mind", "though", "I", "don", "t", "mind", "helping", "with", "this", "especially", "considering", "how", "supportive", "you", "guys", "have", "be", "of", "Squash", "NUMBER", "Ideas", "look", "great", "I", "ve", "planned", "to", "implement", "them", "next", "week", "though", "it", "would", "require", "lot", "of", "courage", "and", "will", "to", "switch", "to", "snake", "case", "I", "be", "old", "Java", "fan", "NUMBER", "Hah", "NUMBER", "FWIW", "the", "CamelCase", "thing", "be", "probably", "the", "least", "important", "of", "the", "ideas", "I", "mention", "as", "long", "as", "you", "re", "consistent", "I", "don", "t", "think", "it", "s", "a", "big", "deal", "NUMBER", "Maybe", "I", "should", "create", "a", "new", "issue", "for", "this", "but", "a", "relate", "idea", "which", "may", "be", "helpful", "for", "your", "be", "to", "also", "have", "a", "callback", "for", "an", "allocation", "function", "of", "zeroed", "memory", "i", "NUMBER", "e", "NUMBER", "calloc", "instead", "of", "malloc", "NUMBER", "The", "default", "implementation", "could", "just", "call", "malloc", "and", "memcpy", "but", "calling", "calloc", "can", "be", "a", "bit", "faster", "since", "the", "OS", "often", "keep", "around", "pages", "of", "pre", "zeroed", "memory", "NUMBER", "I", "m", "not", "sure", "how", "much", "of", "a", "performance", "boost", "if", "any", "brotli", "would", "see", "but", "I", "saw", "a", "pretty", "huge", "improvement", "in", "crush", "when", "I", "switched", "from", "malloc", "memset", "to", "calloc", "I", "think", "it", "s", "a", "bigger", "benefit", "for", "larger", "allocations", "because", "you", "don", "t", "have", "the", "cache", "hit", "from", "moving", "stuff", "into", "the", "CPU", "just", "to", "zero", "it", "NUMBER", "Added", "a", "few", "NUMBER", "more", "ideas", "to", "the", "list", "NUMBER", "Sorry", "to", "make", "this", "a", "bit", "of", "a", "moving", "target", "NUMBER", "Depends", "on", "what", "you", "consider", "a", "streaming", "function", "but", "I", "think", "you", "re", "correct", "NUMBER", "If", "the", "size", "be", "a", "pointer", "you", "can", "do", "something", "like", "c", "BROTLI_BOOL", "BrotliEncoderFinishStream", "BrotliEncoderState", "state", "size_t", "encoded_size", "uint", "NUMBER", "_t", "encoded_buffer", "encoded_size", "Which", "should", "work", "as", "expected", "NUMBER", "The", "length", "can", "even", "be", "an", "expression", "like", "encoded_size", "sizeof", "uint", "NUMBER", "_t", "if", "you", "want", "you", "don", "t", "in", "this", "case", "just", "wanted", "to", "point", "out", "that", "it", "s", "pretty", "flexible", "NUMBER", "However", "if", "you", "actually", "want", "to", "modify", "the", "array", "pointer", "itself", "like", "you", "do", "for", "BrotliEncoderCompressStream", "then", "you", "can", "t", "use", "a", "real", "array", "it", "would", "have", "to", "be", "a", "uint", "NUMBER", "_t", "NUMBER", "Something", "like", "c", "BROTLI_BOOL", "BrotliEncoderCompressStream", "BrotliEncoderState", "s", "BrotliEncoderOperation", "op", "size_t", "restroct", "available_in", "const", "uint", "NUMBER", "_t", "restrict", "next_in", "available_in", "size_t", "restrict", "available_out", "uint", "NUMBER", "_t", "restrict", "next_out", "available_out", "size_t", "restrict", "total_out", "Is", "tempting", "but", "it", "would", "break", "because", "an", "attempt", "to", "change", "the", "value", "of", "next_in", "or", "next_out", "would", "fail", "NUMBER", "So", "assuming", "that", "s", "what", "you", "mean", "by", "the", "streaming", "function", "yeah", "unfortunately", "that", "won", "t", "work", "NUMBER", "Basically", "anywhere", "in", "brotli", "you", "have", "a", "uint", "NUMBER", "_t", "parameter", "I", "don", "t", "think", "you", "ll", "be", "able", "to", "use", "an", "array", "NUMBER", "The", "good", "news", "be", "you", "can", "use", "restrict", "there", "though", "c", "BROTLI_BOOL", "BrotliEncoderCompressStream", "BrotliEncoderState", "s", "BrotliEncoderOperation", "op", "size_t", "restrict", "available_in", "const", "uint", "NUMBER", "_t", "restrict", "restrict", "next_in", "size_t", "restrict", "available_out", "uint", "NUMBER", "_t", "restrict", "restrict", "next_out", "size_t", "restrict", "total_out", "Add", "in", "the", "fact", "that", "you", "ll", "really", "want", "to", "use", "BROTLI_ARRAY_PARAM", "BROTLI_RESTRICT", "or", "whatever", "you", "want", "to", "call", "it", "macros", "and", "I", "think", "it", "s", "pretty", "clear", "why", "so", "few", "people", "bother", "to", "properly", "use", "conformant", "array", "parameters", "and", "or", "restrict", "NUMBER", "For", "funcions", "which", "return", "NUMBER", "on", "success", "and", "NUMBER", "on", "failure", "as", "well", "as", "other", "booleans", "like", "the", "is_last", "argument", "to", "BrotliEncoderWriteMetaBlock", "please", "use", "a", "bool", "or", "_Bool", "if", "you", "prefer", "intsead", "of", "an", "int", "NUMBER", "Using", "bool", "helps", "make", "the", "code", "more", "readable", "and", "reduce", "documentation", "lookups", "NUMBER", "A", "counter", "argument", "I", "don", "t", "think", "the", "bool", "concept", "really", "provides", "a", "stable", "portable", "ABI", "in", "C", "NUMBER", "I", "was", "experimenting", "with", "the", "new", "mod_brotli", "for", "the", "Apache", "web", "server", "which", "makes", "use", "of", "the", "libbrotli", "shared", "library", "NUMBER", "Unfortunately", "the", "module", "and", "the", "library", "disagreed", "on", "the", "definition", "of", "BROTLI_BOOL", "because", "the", "module", "was", "compiled", "use", "C", "NUMBER", "and", "the", "library", "was", "not", "NUMBER", "This", "led", "to", "a", "situation", "where", "the", "library", "returned", "false", "but", "the", "module", "interpreted", "that", "value", "as", "true", "which", "broke", "everything", "NUMBER", "In", "my", "opinion", "an", "ABI", "that", "change", "depending", "on", "the", "C", "standard", "in", "use", "by", "the", "compiler", "be", "not", "going", "to", "be", "portable", "enough", "for", "widespread", "use", "NUMBER", "I", "agree", "with", "the", "idea", "that", "a", "boolean", "concept", "be", "more", "documentation", "friendly", "than", "int", "but", "the", "current", "implementation", "causes", "problem", "NUMBER", "And", "I", "humbly", "submit", "that", "int", "be", "still", "the", "most", "correct", "idiomatic", "type", "for", "booleans", "in", "a", "portable", "C", "ABI", "NUMBER", "These", "days", "even", "MSVC", "support", "stdbool", "NUMBER", "h", "as", "of", "VS", "NUMBER", "NUMBER", "I", "d", "prefer", "for", "Brotli", "to", "simply", "use", "the", "system", "bool", "everywhere", "and", "just", "require", "C", "NUMBER", "or", "at", "least", "the", "subset", "of", "it", "support", "by", "VS", "NUMBER", "NUMBER", "Being", "stuck", "with", "C", "NUMBER", "in", "NUMBER", "be", "ridiculous", "NUMBER", "C", "NUMBER", "be", "pretty", "clear", "about", "boolean", "values", "see", "NUMBER", "true", "be", "defined", "as", "NUMBER", "false", "be", "defined", "as", "NUMBER", "Brotli", "defines", "BROTLI_FALSE", "as", "an", "enum", "value", "of", "NUMBER", "and", "BROTLI_TRUE", "as", "an", "enum", "value", "of", "BROTLI_FALSE", "which", "evaluates", "to", "NUMBER", "so", "the", "actual", "values", "shouldn", "t", "be", "an", "issue", "NUMBER", "That", "said", "I", "d", "probably", "change", "BROTLI_TRUE", "to", "just", "be", "NUMBER", "instead", "of", "BROTLI_FALSE", "NUMBER", "The", "_Bool", "type", "OTOH", "could", "be", "a", "problem", "NUMBER", "C", "NUMBER", "specifies", "it", "as", "a", "type", "large", "enough", "to", "hold", "NUMBER", "or", "NUMBER", "NUMBER", "NUMBER", "so", "NUMBER", "byte", "be", "sufficient", "and", "that", "s", "what", "every", "implementation", "I", "m", "aware", "of", "uses", "NUMBER", "However", "most", "compilers", "use", "sizeof", "int", "for", "enums", "and", "Brotli", "defines", "BROTLI_BOOL", "as", "an", "enum", "when", "in", "C", "NUMBER", "mode", "NUMBER", "I", "m", "guessing", "that", "s", "why", "you", "had", "a", "problem", "NUMBER", "I", "agree", "with", "the", "idea", "that", "a", "boolean", "concept", "be", "more", "documentation", "friendly", "than", "int", "but", "the", "current", "implementation", "causes", "problem", "NUMBER", "Agreed", "implement", "it", "as", "an", "enum", "be", "a", "bad", "idea", "NUMBER", "And", "I", "humbly", "submit", "that", "int", "be", "still", "the", "most", "correct", "idiomatic", "type", "for", "booleans", "in", "a", "portable", "C", "ABI", "NUMBER", "If", "you", "define", "portable", "as", "C", "NUMBER", "then", "you", "re", "right", "NUMBER", "However", "targeting", "C", "NUMBER", "be", "portable", "and", "bool", "be", "the", "idiomatic", "type", "for", "C", "NUMBER", "which", "pretty", "much", "every", "non", "toy", "compiler", "other", "than", "MSVC", "has", "support", "for", "a", "_very_", "long", "time", "NUMBER", "Realistically", "the", "only", "place", "_Bool", "stdbool", "NUMBER", "h", "isn", "t", "going", "to", "be", "support", "be", "people", "use", "old", "version", "of", "MSVC", "NUMBER", "Everyone", "else", "support", "them", "even", "in", "C", "NUMBER", "mode", "NUMBER", "sizeof", "_Bool", "on", "Windows", "be", "NUMBER", "so", "I", "would", "go", "with", "something", "like", "c", "if", "define", "BROTLI_NO_STDBOOL", "defined", "_MSC_VER", "_MSC_VER", "TAG", "endif", "Then", "you", "can", "get", "rid", "of", "all", "the", "BROTLI_BOOL", "cruft", "NUMBER", "Virtually", "every", "compiler", "platform", "should", "work", "as", "expected", "NUMBER", "I", "m", "sure", "there", "be", "some", "weird", "compiler", "somewhere", "which", "target", "an", "sbscure", "DSP", "or", "something", "which", "won", "t", "work", "but", "worst", "case", "scenario", "people", "can", "explicitly", "define", "a", "few", "preprocesor", "symbols", "before", "including", "brotli", "NUMBER", "Of", "course", "if", "you", "re", "really", "attached", "to", "the", "BROTLI_BOOL", "idea", "it", "would", "be", "easy", "enough", "to", "just", "define", "BROTLI_BOOL", "unsigned", "char", "instead", "of", "use", "an", "enum", "NUMBER", "sizeof", "_Bool", "be", "NUMBER", "on", "Windows", "and", "Linux", "x", "NUMBER", "_", "NUMBER", "and", "probably", "most", "other", "places", "though", "I", "haven", "t", "checked", "NUMBER", "As", "someone", "who", "d", "like", "to", "use", "brotli", "as", "a", "library", "which", "be", "why", "I", "made", "the", "libbrotli", "project", "that", "now", "looks", "like", "it", "will", "meet", "its", "maker", "soon", "for", "a", "project", "that", "be", "C", "NUMBER", "C", "NUMBER", "compatible", "curl", "I", "would", "of", "course", "prefer", "a", "good", "old", "C", "NUMBER", "compatible", "API", "so", "that", "my", "entire", "user", "base", "can", "have", "a", "chance", "of", "use", "all", "the", "brotli", "fun", "NUMBER", "But", "that", "of", "course", "also", "relies", "on", "everything", "else", "at", "least", "in", "the", "decompressor", "lib", "to", "be", "C", "NUMBER", "as", "well", "not", "just", "the", "API", "NUMBER", "Agreed", "NUMBER", "As", "a", "library", "things", "should", "be", "as", "simple", "and", "as", "compatible", "and", "as", "PORTABLE", "as", "possible", "NUMBER", "It", "be", "not", "that", "much", "of", "a", "deal", "to", "stick", "w", "C", "NUMBER", "C", "NUMBER", "for", "this", "particular", "case", "especially", "when", "the", "alternative", "breaks", "things", "horribly", "NUMBER", "As", "I", "mention", "virtually", "everyone", "other", "than", "VS", "TAG", "NUMBER", "icc", "suncc", "xlc", "or", "really", "any", "other", "vaguely", "modern", "non", "toy", "compiler", "_you", "be", "not", "in", "this", "group_", "NUMBER", "This", "group", "consists", "of", "people", "use", "NUMBER", "year", "old", "compilers", "or", "targeting", "something", "exotic", "where", "only", "a", "specific", "compiler", "will", "work", "and", "that", "compiler", "only", "support", "C", "NUMBER", "may", "be", "true", "for", "some", "DSPs", "or", "something", "NUMBER", "You", "re", "more", "likely", "to", "end", "up", "on", "a", "platform", "where", "endianness", "cannot", "be", "determined", "at", "compile", "time", "than", "to", "have", "what", "I", "propose", "be", "a", "real", "portability", "issue", "NUMBER", "However", "even", "for", "that", "tiny", "group", "of", "people", "what", "I", "propose", "would", "only", "require", "defining", "a", "macro", "or", "two", "NUMBER", "However", "since", "it", "sounds", "like", "eustas", "wants", "to", "stick", "with", "the", "BROTLI_BOOL", "thing", "I", "d", "suggest", "something", "like", "c", "if", "defined", "BROTLI_BOOL", "if", "defined", "__STDC_VERSION__", "__STDC_VERSION__", "NUMBER", "L", "defined", "__GNUC__", "__GNUC__", "NUMBER", "defined", "_MSC_VER", "_MSC_VER", "NUMBER", "include", "TAG", "define", "BROTLI_BOOL", "bool", "else", "define", "BROTLI_BOOL", "unsigned", "char", "endif", "endif", "define", "BROTLI_TRUE", "NUMBER", "define", "BROTLI_FALSE", "NUMBER", "Almost", "every", "compiler", "out", "there", "pretends", "to", "be", "either", "GCC", "or", "MSVC", "and", "sufficiently", "recent", "version", "of", "both", "be", "whitelisted", "as", "support", "stdbool", "NUMBER", "h", "as", "be", "compilers", "in", "C", "NUMBER", "mode", "NUMBER", "Other", "compilers", "mostly", "old", "MSVC", "will", "fall", "back", "on", "use", "unsigned", "char", "but", "for", "the", "rare", "cases", "where", "that", "wouldn", "t", "be", "the", "correct", "type", "people", "can", "just", "define", "BROTLI_BOOL", "to", "something", "which", "works", "before", "including", "Brotli", "NUMBER", "Note", "that", "this", "would", "be", "quite", "easy", "to", "adapt", "to", "use", "bool", "true", "and", "false", "instead", "of", "creating", "a", "separate", "type", "for", "Brotli", "you", "would", "just", "have", "to", "guard", "against", "redefining", "true", "and", "false", "NUMBER", "That", "would", "give", "you", "a", "much", "nicer", "API", "NUMBER", "nemequ", "If", "you", "define", "portable", "as", "C", "NUMBER", "then", "you", "re", "right", "NUMBER", "Sure", "NUMBER", "I", "m", "biased", "since", "most", "of", "the", "C", "projects", "I", "ve", "participated", "in", "be", "explicitly", "C", "NUMBER", "compatible", "NUMBER", "I", "also", "define", "portable", "as", "capable", "of", "having", "C", "bindings", "write", "for", "it", "and", "bool", "has", "or", "use", "to", "have", "issue", "there", "too", "NUMBER", "Hopefully", "we", "ve", "gotten", "to", "the", "point", "where", "C", "and", "C", "toolchains", "targeting", "the", "same", "architecture", "agree", "on", "the", "size", "of", "bool", "but", "IIRC", "it", "use", "to", "be", "a", "problem", "NUMBER", "maybe", "someone", "with", "more", "recent", "experience", "can", "comment", "on", "this", "Being", "stuck", "with", "C", "NUMBER", "in", "NUMBER", "be", "ridiculous", "NUMBER", "Unless", "you", "re", "serious", "about", "be", "portable", "to", "a", "C", "NUMBER", "toolchain", "subset", "yes", "NUMBER", "I", "mean", "I", "hate", "old", "toolchains", "just", "as", "much", "as", "the", "next", "guy", "but", "this", "be", "the", "game", "you", "play", "when", "authoring", "a", "C", "ABI", "for", "the", "masses", "NUMBER", "And", "having", "a", "C", "NUMBER", "subset", "ABI", "doesn", "t", "necessarily", "mean", "that", "you", "have", "to", "write", "your", "implementation", "in", "C", "NUMBER", "virtually", "everyone", "other", "than", "VS", "TAG", "Please", "could", "you", "describe", "toolchains", "you", "ve", "use", "that", "cause", "incompatible", "bools", "NUMBER", "Sure", "I", "m", "currently", "use", "GCC", "NUMBER", "on", "Ubuntu", "NUMBER", "NUMBER", "bit", "NUMBER", "Compile", "the", "libbrotli", "LINK", "shared", "library", "as", "be", "with", "a", "modern", "C", "standard", "NUMBER", "For", "the", "client", "compile", "and", "link", "against", "the", "library", "with", "the", "std", "c", "NUMBER", "flag", "NUMBER", "Sure", "NUMBER", "I", "m", "biased", "since", "most", "of", "the", "C", "projects", "I", "ve", "participated", "in", "be", "explicitly", "C", "NUMBER", "compatible", "NUMBER", "Technically", "brotli", "already", "isn", "t", "C", "NUMBER", "only", "NUMBER", "It", "uses", "the", "types", "from", "stdint", "NUMBER", "h", "i", "NUMBER", "e", "NUMBER", "uint", "NUMBER", "_t", "except", "for", "MSVC", "TAG", "I", "also", "define", "portable", "as", "capable", "of", "having", "C", "bindings", "write", "for", "it", "and", "bool", "has", "or", "use", "to", "have", "issue", "there", "too", "NUMBER", "Hopefully", "we", "ve", "gotten", "to", "the", "point", "where", "C", "and", "C", "toolchains", "targeting", "the", "same", "architecture", "agree", "on", "the", "size", "of", "bool", "but", "IIRC", "it", "use", "to", "be", "a", "problem", "NUMBER", "maybe", "someone", "with", "more", "recent", "experience", "can", "comment", "on", "this", "I", "m", "not", "really", "a", "C", "person", "but", "IIRC", "they", "have", "a", "bool", "type", "which", "be", "can", "be", "or", "must", "be", "not", "sure", "which", "implement", "with", "an", "enum", "NUMBER", "I", "m", "not", "sure", "whether", "it", "be", "still", "a", "problem", "but", "to", "get", "around", "it", "you", "can", "use", "_Bool", "which", "be", "build", "in", "doesn", "t", "require", "a", "header", "instead", "of", "bool", "NUMBER", "Maybe", "it", "would", "be", "safer", "to", "define", "BROTLI_BOOL", "as", "_Bool", "instead", "of", "bool", "in", "which", "case", "you", "could", "just", "skip", "including", "stdbool", "NUMBER", "h", "altogether", "NUMBER", "Being", "stuck", "with", "C", "NUMBER", "in", "NUMBER", "be", "ridiculous", "NUMBER", "Unless", "you", "re", "serious", "about", "be", "portable", "to", "a", "C", "NUMBER", "toolchain", "subset", "yes", "NUMBER", "I", "mean", "I", "hate", "old", "toolchains", "just", "as", "much", "as", "the", "next", "guy", "but", "this", "be", "the", "game", "you", "play", "when", "authoring", "a", "C", "ABI", "for", "the", "masses", "NUMBER", "And", "having", "a", "C", "NUMBER", "subset", "ABI", "doesn", "t", "necessarily", "mean", "that", "you", "have", "to", "write", "your", "implementation", "in", "C", "NUMBER", "I", "don", "t", "care", "much", "about", "be", "portable", "to", "a", "generic", "strictly", "C", "NUMBER", "compiler", "NUMBER", "I", "care", "about", "be", "portable", "to", "the", "toolchains", "people", "actually", "use", "even", "relatively", "old", "ones", "NUMBER", "C", "NUMBER", "be", "mainly", "useful", "as", "a", "lowest", "common", "denominator", "and", "if", "we", "want", "to", "use", "features", "outside", "C", "NUMBER", "we", "should", "do", "so", "in", "a", "portable", "way", "NUMBER", "The", "tiny", "areas", "of", "Brotli", "like", "booleans", "which", "aren", "t", "strictly", "C", "NUMBER", "compliant", "can", "still", "be", "portable", "while", "provide", "a", "good", "API", "for", "people", "who", "have", "better", "compilers", "NUMBER", "virtually", "everyone", "other", "than", "VS", "TAG", "I", "m", "veering", "off", "topic", "but", "I", "disagree", "with", "your", "assertion", "that", "the", "users", "of", "old", "MSVC", "version", "be", "a", "tiny", "group", "of", "people", "NUMBER", "MSVC", "NUMBER", "and", "MSVC", "NUMBER", "were", "pretty", "popular", "the", "last", "time", "I", "checked", "which", "to", "be", "fair", "was", "a", "year", "ago", "NUMBER", "YMMV", "NUMBER", "You", "re", "right", "I", "didn", "t", "mean", "to", "include", "old", "MSVC", "in", "that", "tiny", "group", "NUMBER", "It", "s", "part", "of", "a", "separate", "group", "which", "can", "easily", "be", "special", "cased", "and", "in", "every", "implementation", "I", "ve", "suggested", "be", "NUMBER", "There", "be", "four", "group", "C", "NUMBER", "compilers", "and", "compilers", "which", "support", "_Bool", "and", "stdbool", "NUMBER", "h", "_even", "in", "C", "NUMBER", "mode_", "NUMBER", "This", "include", "GCC", "NUMBER", "MSVC", "NUMBER", "and", "any", "compiler", "masquerading", "as", "one", "of", "them", "NUMBER", "MSVC", "TAG", "NUMBER", "L", "defined", "__GNUC__", "__GNUC__", "NUMBER", "defined", "_MSC_VER", "_MSC_VER", "NUMBER", "define", "BROTLI_BOOL", "_Bool", "else", "define", "BROTLI_BOOL", "unsigned", "char", "endif", "endif", "define", "BROTLI_TRUE", "NUMBER", "define", "BROTLI_FALSE", "NUMBER", "Another", "option", "would", "be", "to", "use", "the", "build", "system", "to", "determine", "the", "value", "of", "sizeof", "_Bool", "and", "write", "an", "appropriate", "type", "but", "that", "would", "require", "run", "an", "executable", "compiled", "for", "the", "target", "architecture", "which", "would", "be", "a", "problem", "for", "cross", "compilers", "NUMBER", "Yeah", "I", "m", "just", "speaking", "myself", "as", "someone", "who", "be", "a", "consumer", "of", "the", "library", "or", "should", "I", "say", "would", "be", "a", "consumer", "for", "a", "popular", "web", "server", "which", "for", "lowest", "common", "denominator", "reasons", "has", "stayed", "w", "C", "NUMBER", "semantics", "NUMBER", "So", "far", "all", "test", "has", "shown", "that", "the", "bool", "item", "be", "the", "only", "issue", "that", "hits", "us", "NUMBER", "Libraries", "in", "general", "should", "be", "agnostic", "as", "relate", "to", "compiler", "differences", "between", "that", "use", "to", "build", "and", "the", "library", "and", "that", "use", "to", "build", "the", "application", "or", "should", "have", "an", "ABI", "which", "resolve", "those", "issue", "in", "a", "portable", "fashion", "NUMBER", "Preface", "to", "my", "commentary", "All", "I", "truly", "need", "from", "an", "upstream", "library", "be", "a", "stable", "API", "for", "me", "and", "a", "stable", "ABI", "for", "end", "users", "to", "link", "against", "NUMBER", "Choosing", "your", "own", "cost", "benefit", "tradeoffs", "on", "how", "to", "implement", "that", "be", "in", "the", "end", "up", "to", "you", "I", "m", "just", "some", "guy", "on", "the", "Internet", "with", "an", "opinion", "and", "I", "ll", "likely", "disappear", "after", "this", "issue", "NUMBER", "smile", "That", "said", "I", "ll", "respond", "to", "nemequ", "s", "last", "bit", "and", "then", "let", "you", "all", "duke", "out", "how", "you", "want", "to", "proceed", "NUMBER", "I", "m", "not", "really", "a", "C", "person", "but", "IIRC", "they", "have", "a", "bool", "type", "which", "be", "can", "be", "or", "must", "be", "not", "sure", "which", "implement", "with", "an", "enum", "NUMBER", "bool", "be", "a", "build", "in", "type", "in", "C", "there", "s", "no", "enum", "implementation", "that", "I", "m", "aware", "of", "NUMBER", "to", "get", "around", "it", "you", "can", "use", "_Bool", "which", "be", "build", "in", "doesn", "t", "require", "a", "header", "There", "be", "no", "_Bool", "type", "in", "C", "NUMBER", "And", "including", "stdbool", "NUMBER", "h", "in", "C", "be", "not", "even", "guaranteed", "to", "provide", "a", "_Bool", "macro", "it", "do", "in", "GCC", "but", "as", "I", "understand", "it", "that", "s", "an", "extension", "NUMBER", "I", "want", "to", "reiterate", "that", "NUMBER", "It", "s", "not", "just", "size", "you", "necessarily", "have", "to", "worry", "about", "NUMBER", "You", "want", "to", "make", "sure", "that", "the", "assembled", "code", "that", "deals", "with", "both", "types", "be", "equivalent", "or", "you", "can", "bet", "that", "there", "will", "eventually", "be", "some", "bizarre", "corner", "case", "because", "of", "the", "mismatch", "NUMBER", "NUMBER", "I", "don", "t", "know", "if", "bool", "incompatibility", "between", "the", "two", "languages", "be", "a", "problem", "anymore", "NUMBER", "Modern", "compiler", "ABIs", "may", "have", "defined", "the", "two", "equivalently", "for", "the", "platforms", "you", "re", "targeting", "I", "don", "t", "know", "NUMBER", "Another", "option", "would", "be", "to", "use", "the", "build", "system", "to", "determine", "the", "value", "of", "sizeof", "_Bool", "and", "write", "an", "appropriate", "type", "but", "that", "would", "require", "run", "an", "executable", "If", "you", "re", "seriously", "considering", "this", "I", "just", "have", "to", "know", "what", "be", "so", "hate", "worthy", "in", "the", "int", "as", "boolean", "idiom", "smile", "Anyway", "NUMBER", "I", "think", "I", "ve", "said", "my", "piece", "and", "then", "some", "NUMBER", "As", "long", "as", "downstream", "doesn", "t", "break", "in", "weird", "corner", "cases", "I", "m", "happy", "NUMBER", "Any", "user", "of", "the", "API", "would", "still", "read", "the", "documentation", "for", "the", "function", "in", "which", "you", "of", "course", "explain", "what", "it", "can", "return", "NUMBER", "If", "it", "only", "ever", "returns", "NUMBER", "and", "NUMBER", "say", "so", "NUMBER", "It", "doesn", "t", "matter", "that", "the", "type", "be", "NUMBER", "bit", "NUMBER", "That", "s", "not", "a", "problem", "to", "users", "NUMBER", "Sorry", "forgot", "to", "reply", "to", "this", "for", "a", "while", "bool", "be", "a", "build", "in", "type", "in", "C", "there", "s", "no", "enum", "implementation", "that", "I", "m", "aware", "of", "NUMBER", "I", "poked", "around", "the", "C", "spec", "a", "bit", "and", "you", "re", "right", "NUMBER", "Based", "on", "what", "I", "read", "in", "the", "C", "NUMBER", "spec", "as", "well", "as", "some", "posts", "I", "find", "around", "the", "internet", "it", "seems", "like", "the", "way", "to", "be", "portable", "between", "C", "and", "C", "here", "be", "to", "use", "stdbool", "NUMBER", "h", "NUMBER", "Unlike", "C", "C", "also", "doesn", "t", "specify", "at", "least", "as", "far", "as", "I", "can", "tell", "what", "the", "actual", "values", "for", "true", "and", "false", "be", "so", "technically", "we", "really", "need", "to", "use", "true", "and", "false", "though", "I", "would", "be", "very", "surprised", "if", "there", "be", "an", "implementation", "where", "they", "aren", "t", "NUMBER", "and", "NUMBER", "respectively", "NUMBER", "So", "I", "think", "the", "safest", "solution", "would", "be", "c", "if", "defined", "BROTLI_BOOL", "if", "defined", "__STDC_VERSION__", "__STDC_VERSION__", "NUMBER", "L", "defined", "__GNUC__", "__GNUC__", "NUMBER", "defined", "_MSC_VER", "_MSC_VER", "NUMBER", "defined", "__cplusplus", "if", "defined", "__cplusplus", "include", "TAG", "endif", "define", "BROTLI_BOOL", "bool", "define", "BROTLI_TRUE", "true", "define", "BROTLI_FALSE", "false", "else", "define", "BROTLI_BOOL", "unsigned", "char", "define", "BROTLI_TRUE", "NUMBER", "define", "BROTLI_FALSE", "NUMBER", "endif", "endif", "If", "you", "re", "seriously", "considering", "this", "I", "just", "have", "to", "know", "what", "be", "so", "hate", "worthy", "in", "the", "int", "as", "boolean", "idiom", "smile", "There", "isn", "t", "anything", "inherently", "wrong", "with", "it", "other", "than", "the", "wasted", "space", "but", "who", "cares", "about", "that", "NUMBER", "The", "real", "problem", "be", "that", "it", "s", "not", "clear", "what", "it", "be", "every", "time", "I", "see", "an", "int", "return", "value", "I", "have", "to", "look", "up", "the", "documentation", "to", "see", "what", "the", "possible", "values", "be", "NUMBER", "It", "s", "not", "just", "humans", "either", "static", "analyzers", "and", "optimizing", "compilers", "have", "no", "way", "of", "knowing", "what", "the", "possible", "return", "values", "be", "NUMBER", "Enums", "would", "solve", "this", "but", "they", "conflict", "with", "the", "standard", "booleans", "from", "C", "NUMBER", "NUMBER", "However", "all", "that", "be", "moot", "now", "NUMBER", "Unless", "I", "m", "miss", "something", "NUMBER", "has", "be", "release", "which", "means", "the", "API", "and", "ABI", "be", "stable", "NUMBER", "Changing", "BROTLI_BOOL", "to", "an", "integer", "now", "would", "be", "a", "break", "NUMBER", "Brotli", "doesn", "t", "specify", "a", "C", "standard", "for", "compilation", "so", "C", "NUMBER", "or", "C", "NUMBER", "be", "use", "depending", "on", "the", "version", "of", "the", "compiler", "use", "which", "means", "exist", "compiles", "_of", "brotli_", "should", "all", "use", "stdbool", "NUMBER", "Basically", "what", "jchampio", "was", "seeing", "when", "compile", "in", "C", "NUMBER", "mode", "would", "happen", "to", "_everyone_", "since", "the", "ABI", "would", "suddenly", "be", "returning", "sizeof", "int", "bytes", "instead", "of", "sizeof", "bool", "NUMBER", "stdbool", "NUMBER", "h", "be", "C", "NUMBER", "not", "C", "NUMBER", "Why", "bother", "with", "the", "ifdef", "maze", "Why", "not", "make", "it", "define", "BROTLI_BOOL", "unsigned", "char", "for", "all", "and", "frankly", "it", "be", "probably", "even", "faster", "for", "most", "situations", "to", "make", "that", "at", "a", "plain", "int", "instead", "NUMBER", "And", "why", "the", "weirdo", "true", "and", "false", "defines", "In", "C", "code", "we", "ve", "use", "TRUE", "NUMBER", "and", "FALSE", "NUMBER", "for", "decades", "so", "they", "be", "familiar", "and", "know", "NUMBER", "Introducing", "other", "names", "for", "them", "be", "only", "make", "your", "code", "harder", "to", "read", "and", "weird", "NUMBER", "stdbool", "NUMBER", "h", "be", "C", "NUMBER", "not", "C", "NUMBER", "Which", "has", "come", "up", "several", "times", "in", "this", "issue", "NUMBER", "What", "s", "your", "point", "The", "point", "be", "that", "C", "NUMBER", "compatibility", "_is_", "the", "point", "as", "mention", "quite", "a", "few", "times", "in", "the", "above", "comments", "NUMBER", "Why", "bother", "with", "the", "ifdef", "maze", "Why", "not", "make", "it", "define", "BROTLI_BOOL", "unsigned", "char", "for", "all", "That", "would", "be", "incompatible", "with", "C", "NUMBER", "and", "C", "not", "sure", "when", "they", "add", "bool", "but", "I", "m", "pretty", "sure", "it", "s", "in", "C", "NUMBER", "NUMBER", "Static", "analyzers", "and", "optimizing", "compilers", "can", "t", "make", "certain", "assumptions", "so", "they", "ll", "be", "slightly", "less", "useful", "NUMBER", "That", "said", "it", "s", "a", "better", "solution", "than", "defining", "it", "as", "int", "or", "something", "else", "with", "a", "size", "other", "than", "sizeof", "bool", "NUMBER", "And", "why", "the", "weirdo", "true", "and", "false", "defines", "In", "C", "code", "we", "ve", "use", "TRUE", "NUMBER", "and", "FALSE", "NUMBER", "for", "decades", "so", "they", "be", "familiar", "and", "know", "NUMBER", "Introducing", "other", "names", "for", "them", "be", "only", "make", "your", "code", "harder", "to", "read", "and", "weird", "NUMBER", "This", "one", "I", "mostly", "agree", "with", "but", "unfortunately", "the", "API", "be", "set", "already", "NUMBER", "Removing", "them", "would", "break", "it", "NUMBER", "The", "only", "real", "reason", "I", "can", "think", "of", "be", "to", "avoid", "conflict", "with", "other", "libraries", "who", "try", "to", "define", "true", "and", "false", "TRUE", "and", "FALSE", "be", "not", "the", "standard", "names", "true", "and", "false", "be", "themselves", "NUMBER", "As", "you", "said", "it", "s", "pretty", "common", "for", "people", "to", "define", "those", "macros", "so", "if", "they", "include", "brotli", "first", "and", "don", "t", "guard", "their", "own", "defines", "with", "ifdefs", "things", "go", "bad", "quickly", "NUMBER", "Admittedly", "it", "s", "a", "pretty", "minor", "concern", "like", "I", "said", "I", "mostly", "agree", "with", "you", "on", "this", "one", "NUMBER", "The", "point", "be", "that", "C", "NUMBER", "compatibility", "be", "the", "point", "as", "mention", "quite", "a", "few", "times", "in", "the", "above", "comments", "NUMBER", "No", "the", "point", "be", "portability", "and", "to", "a", "lesser", "extent", "compatibility", "with", "other", "code", "NUMBER", "C", "NUMBER", "isn", "t", "really", "required", "for", "the", "former", "and", "it", "s", "counterproductive", "to", "the", "latter", "NUMBER", "Even", "if", "portability", "depended", "on", "C", "NUMBER", "the", "code", "I", "ve", "posted", "works", "with", "pure", "C", "NUMBER", "so", "you", "shouldn", "t", "have", "a", "problem", "NUMBER", "It", "just", "also", "whitelists", "a", "few", "compilers", "know", "to", "support", "use", "stdbool", "NUMBER", "h", "_even", "in", "C", "NUMBER", "mode_", "NUMBER", "If", "a", "compiler", "isn", "t", "know", "to", "support", "that", "it", "falls", "back", "on", "use", "unsigned", "char", "which", "be", "available", "in", "C", "NUMBER", "which", "be", "actually", "ABI", "compatible", "with", "what", "C", "NUMBER", "uses", "as", "oppose", "to", "int", "which", "isn", "t", "with", "every", "compiler", "I", "ve", "tried", "NUMBER", "And", "if", "that", "s", "not", "enough", "because", "maybe", "sizeof", "bool", "sizeof", "unsigned", "char", "you", "can", "even", "define", "BROTLI_BOOL", "to", "whatever", "you", "want", "before", "including", "the", "file", "for", "those", "weird", "corner", "case", "platforms", "NUMBER", "As", "for", "compatibility", "these", "days", "most", "people", "be", "use", "C", "NUMBER", "or", "C", "remember", "both", "clang", "and", "gcc", "default", "to", "C", "NUMBER", "now", "and", "before", "that", "it", "was", "C", "NUMBER", "for", "a", "long", "time", "NUMBER", "For", "those", "people", "it", "s", "useful", "for", "brotli", "s", "boolean", "type", "to", "be", "compatible", "with", "their", "standard", "boolean", "type", "NUMBER", "In", "other", "words", "compatibility", "actually", "decreases", "if", "you", "just", "define", "BROTLI_BOOL", "to", "int", "NUMBER", "Finally", "as", "I", "ve", "mention", "change", "the", "return", "type", "in", "C", "NUMBER", "mode", "be", "a", "backwards", "incompatible", "ABI", "break", "NUMBER", "Maybe", "the", "brotli", "devs", "be", "comfortable", "with", "that", "but", "I", "certainly", "wouldn", "t", "be", "if", "it", "were", "my", "project", "NUMBER", "most", "people", "be", "use", "C", "NUMBER", "I", "like", "it", "how", "you", "just", "dismiss", "our", "claims", "that", "we", "value", "and", "treasure", "C", "NUMBER", "compatibility", "so", "I", "won", "t", "waste", "more", "time", "here", "NUMBER", "I", "m", "not", "dismissing", "your", "claims", "at", "all", "NUMBER", "As", "I", "ve", "repeatedly", "said", "what", "I", "propose", "be", "C", "NUMBER", "compatible", "NUMBER", "A", "pure", "C", "NUMBER", "compiler", "with", "zero", "support", "for", "anything", "else", "would", "simply", "use", "unsigned", "char", "NUMBER", "What", "I", "be", "dismissing", "be", "the", "idea", "that", "be", "C", "NUMBER", "compatible", "means", "you", "can", "t", "use", "an", "extension", "on", "a", "few", "compilers", "know", "to", "support", "it", "which", "allows", "the", "API", "to", "work", "better", "for", "most", "people", "without", "harming", "C", "NUMBER", "compatibility", "in", "any", "way", "NUMBER", "If", "you", "take", "away", "all", "the", "ifdefs", "on", "a", "pure", "C", "NUMBER", "compiler", "you", "end", "up", "with", "c", "define", "BROTLI_BOOL", "unsigned", "char", "define", "BROTLI_TRUE", "NUMBER", "define", "BROTLI_FALSE", "NUMBER", "How", "be", "that", "not", "C", "NUMBER", "compatible", "I", "m", "trying", "to", "get", "Brotli", "integrated", "into", "the", "backup", "program", "I", "m", "developing", "HashBackup", "NUMBER", "Previously", "I", "had", "be", "test", "with", "a", "version", "downloaded", "May", "NUMBER", "and", "it", "worked", "fine", "on", "OSX", "and", "Linux", "NUMBER", "I", "downloaded", "the", "latest", "version", "today", "for", "test", "NUMBER", "Instead", "of", "compressing", "it", "be", "apparently", "expanding", "NUMBER", "Any", "clues", "py", "Python", "NUMBER", "default", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GCC", "NUMBER", "Apple", "Inc", "NUMBER", "build", "NUMBER", "dot", "NUMBER", "on", "darwin", "Type", "help", "copyright", "credits", "or", "license", "for", "more", "information", "NUMBER", "import", "brotli", "x", "NUMBER", "z", "brotli", "NUMBER", "compress", "x", "len", "z", "NUMBER", "x", "NUMBER", "brotli", "NUMBER", "decompress", "z", "x", "x", "NUMBER", "True", "Here", "s", "a", "test", "with", "bro", "NUMBER", "py", "jim", "mb", "python", "py", "bro", "NUMBER", "py", "i", "x", "NUMBER", "bro", "o", "x", "NUMBER", "cc", "d", "jim", "mb", "python", "ls", "l", "total", "NUMBER", "rw", "r", "r", "NUMBER", "jim", "staff", "NUMBER", "Jun", "NUMBER", "NUMBER", "NUMBER", "README", "NUMBER", "md", "rwxr", "xr", "x", "NUMBER", "jim", "staff", "NUMBER", "Jun", "NUMBER", "NUMBER", "NUMBER", "bro", "NUMBER", "py", "rw", "r", "r", "NUMBER", "jim", "staff", "NUMBER", "Jun", "NUMBER", "NUMBER", "NUMBER", "brotlimodule", "NUMBER", "cc", "drwxr", "xr", "x", "NUMBER", "jim", "staff", "NUMBER", "Jun", "NUMBER", "NUMBER", "NUMBER", "test", "rw", "r", "r", "NUMBER", "jim", "staff", "NUMBER", "Jun", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "bro", "rw", "r", "r", "NUMBER", "jim", "staff", "NUMBER", "Jun", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "cc", "jim", "mb", "python", "cmp", "x", "NUMBER", "cc", "brotlimodule", "NUMBER", "cc", "Here", "s", "a", "buffer", "test", "x", "jim", "NUMBER", "my", "z", "brotli", "NUMBER", "compress", "x", "len", "z", "NUMBER", "z", "x", "NUMBER", "bh", "x", "NUMBER", "x", "NUMBER", "x", "NUMBER", "c", "x", "NUMBER", "n", "xe", "NUMBER", "xa", "NUMBER", "lS", "x", "NUMBER", "xa", "NUMBER", "xb", "NUMBER", "xbc", "x", "NUMBER", "x", "NUMBER", "xb", "NUMBER", "xf", "NUMBER", "x", "NUMBER", "ree", "x", "NUMBER", "_BrotliBuildHistogramsWithContext", "x", "NUMBER", "_BrotliEstimateBitCostsForLiterals", "a", "bunch", "more", "garbage", "x", "NUMBER", "_BrotliEncoderInputBlockSize", "x", "NUMBER", "_BrotliEncoderWriteData", "x", "NUMBER", "enc", "NUMBER", "NUMBER", "metablock", "NUMBER", "h", "x", "NUMBER", "_BrotliEncoderCompressStream", "x", "NUMBER", "_BrotliEncoderCompress", "x", "NUMBER", "_BrotliEncoder", "z", "z", "NUMBER", "brotli", "NUMBER", "decompress", "z", "jim", "my", "len", "z", "NUMBER", "z", "z", "NUMBER", "brotli", "NUMBER", "decompress", "z", "jim", "my", "z", "z", "NUMBER", "brotli", "NUMBER", "decompress", "z", "jim", "my", "z", "x", "NUMBER", "bh", "x", "NUMBER", "x", "NUMBER", "x", "NUMBER", "c", "x", "NUMBER", "n", "xe", "NUMBER", "xa", "NUMBER", "lS", "x", "NUMBER", "xa", "NUMBER", "xb", "NUMBER", "xbc", "x", "NUMBER", "x", "NUMBER", "xb", "NUMBER", "xf", "NUMBER", "x", "NUMBER", "ree", "x", "NUMBER", "_BrotliBuildHistogramsWit", "brotli", "NUMBER", "decompress", "z", "NUMBER", "jim", "my", "brotli", "NUMBER", "decompress", "z", "NUMBER", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "brotli", "NUMBER", "error", "BrotliDecompress", "fail", "brotli", "NUMBER", "decompress", "z", "NUMBER", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "brotli", "NUMBER", "error", "BrotliDecompress", "fail", "brotli", "NUMBER", "decompress", "z", "NUMBER", "jim", "my", "So", "it", "appears", "to", "be", "compressing", "into", "a", "temp", "buffer", "but", "not", "setting", "the", "length", "right", "NUMBER", "Probably", "a", "bug", "in", "python", "brotlimodule", "NUMBER", "cc", "Found", "it", "need", "to", "subtract", "available_out", "ret", "PyBytes_FromStringAndSize", "char", "output", "output_length", "available_out", "While", "you", "re", "in", "there", "you", "might", "want", "to", "bracket", "your", "compression", "decompression", "and", "string", "copies", "with", "Py_BEGIN_ALLOW_THREADS", "and", "Py_END_ALLOW_THREADS", "NUMBER", "the", "problem", "be", "pip", "wheel", "command", "be", "trying", "to", "create", "a", "default", "build", "directory", "in", "the", "root", "of", "the", "repo", "but", "there", "s", "a", "file", "call", "BUILD", "NUMBER", "You", "can", "try", "to", "pass", "the", "b", "or", "build", "TAG", "option", "to", "pip", "wheel", "command", "to", "use", "a", "different", "directory", "where", "to", "build", "into", "NUMBER", "oh", "I", "see", "that", "NUMBER", "hm", "that", "s", "weird", "NUMBER", "Try", "add", "a", "v", "verbose", "flag", "maybe", "NUMBER", "Or", "also", "you", "can", "try", "calling", "the", "bdist_wheel", "command", "directly", "instead", "of", "through", "pip", "python", "setup", "NUMBER", "py", "bdist_wheel", "b", "bin", "d", "dist", "I", "was", "able", "to", "replicate", "the", "issue", "locally", "on", "my", "VM", "NUMBER", "It", "looks", "like", "a", "bug", "in", "either", "setuptools", "or", "wheel", "or", "pip", "or", "all", "of", "them", "NUMBER", "With", "this", "command", "line", "I", "was", "able", "to", "make", "it", "work", "python", "setup", "NUMBER", "py", "build", "b", "bin", "bdist_wheel", "d", "dist", "It", "looks", "like", "the", "bdist_wheel", "command", "in", "turns", "calls", "the", "build", "command", "which", "somehow", "always", "defaults", "to", "create", "a", "build", "directory", "despite", "we", "pass", "b", "bin", "to", "bdist_wheel", "NUMBER", "yeah", "the", "setup", "NUMBER", "cfg", "trick", "should", "also", "fix", "it", "NUMBER", "Since", "Squash", "LINK", "bundle", "Brotli", "in", "our", "tree", "we", "basically", "maintain", "a", "separate", "build", "system", "for", "Brotli", "NUMBER", "I", "m", "trying", "to", "reduce", "the", "amount", "of", "duplication", "between", "Squash", "and", "the", "libraries", "it", "bundle", "so", "I", "d", "like", "to", "be", "able", "to", "reuse", "Brotli", "s", "build", "system", "which", "would", "mean", "make", "it", "compatible", "with", "our", "own", "CMake", "based", "build", "system", "NUMBER", "Obviously", "such", "a", "system", "wouldn", "t", "be", "specific", "to", "Squash", "any", "project", "which", "uses", "CMake", "and", "wants", "to", "bundle", "Brotli", "could", "benefit", "from", "it", "NUMBER", "With", "such", "a", "system", "bundling", "Brotli", "would", "be", "as", "simple", "as", "something", "like", "cmake", "set", "BROTLI_BUNDLE_MODE", "ON", "add_subdirectory", "brotli", "target_link_libraries", "mycode", "brotli", "Brotli", "would", "then", "be", "build", "as", "part", "of", "the", "parent", "project", "including", "unit", "test", "which", "could", "also", "automatically", "integrate", "with", "ctest", "so", "run", "make", "test", "would", "run", "brotli", "s", "test", "as", "well", "and", "documentation", "if", "applicable", "NUMBER", "The", "rest", "of", "this", "be", "largely", "copied", "from", "quixdb", "squash", "NUMBER", "edit", "slightly", "to", "be", "specific", "to", "brotli", "NUMBER", "From", "Squash", "s", "perspective", "as", "well", "as", "anyone", "else", "who", "wants", "to", "bundle", "the", "library", "what", "we", "need", "be", "a", "way", "to", "build", "a", "static", "library", "or", "two", "if", "you", "want", "to", "separate", "the", "encoder", "and", "decoder", "disable", "any", "installation", "and", "control", "whether", "or", "not", "to", "have", "CTest", "run", "unit", "test", "NUMBER", "Finally", "it", "would", "be", "great", "if", "we", "could", "simply", "reference", "a", "target", "and", "have", "it", "automatically", "set", "any", "necessary", "flags", "CMake", "NUMBER", "can", "do", "this", "you", "just", "need", "to", "set", "the", "proper", "INTERFACE_", "target", "properties", "NUMBER", "If", "you", "would", "like", "to", "see", "an", "example", "of", "a", "system", "which", "works", "the", "way", "we", "want", "take", "a", "look", "at", "BriefLZ", "s", "LINK", "NUMBER", "I", "m", "willing", "to", "create", "a", "similar", "system", "for", "Brotli", "though", "obviously", "it", "would", "need", "to", "be", "a", "bit", "more", "extensive", "since", "Brotli", "be", "a", "larger", "project", "NUMBER", "I", "don", "t", "want", "to", "fork", "anything", "so", "if", "you", "aren", "t", "interested", "we", "ll", "just", "stick", "with", "the", "current", "system", "for", "that", "plugin", "NUMBER", "Obviously", "not", "everyone", "be", "familiar", "with", "CMake", "so", "part", "of", "this", "be", "that", "I", "would", "help", "with", "maintenance", "as", "needed", "NUMBER", "However", "before", "I", "proceed", "I", "need", "a", "few", "question", "answered", "First", "be", "you", "willing", "to", "provide", "a", "CMake", "based", "build", "system", "in", "your", "tree", "If", "so", "be", "you", "okay", "with", "make", "it", "flexible", "enough", "to", "meet", "our", "needs", "as", "describe", "above", "If", "no", "to", "either", "of", "those", "you", "can", "go", "ahead", "and", "close", "this", "issue", "and", "we", "ll", "keep", "interacting", "with", "Brotli", "just", "as", "we", "do", "today", "NUMBER", "Otherwise", "there", "be", "a", "few", "ways", "to", "put", "this", "together", "NUMBER", "Place", "a", "single", "CMakeLists", "NUMBER", "txt", "file", "in", "the", "top", "level", "of", "your", "project", "which", "contains", "all", "the", "logic", "for", "your", "entire", "project", "NUMBER", "If", "you", "re", "familiar", "with", "autotools", "this", "be", "like", "a", "non", "recursive", "build", "system", "NUMBER", "NUMBER", "Place", "a", "CMakeLists", "NUMBER", "txt", "in", "the", "top", "level", "directory", "as", "well", "as", "in", "each", "subdirectory", "NUMBER", "The", "top", "level", "file", "will", "basically", "include", "each", "subdirectory", "s", "file", "NUMBER", "If", "you", "re", "familiar", "with", "autotools", "it", "s", "a", "bit", "like", "a", "traditional", "recursive", "build", "system", "NUMBER", "NUMBER", "Put", "the", "CMake", "build", "system", "in", "a", "subdirectory", "somewhere", "such", "as", "contrib", "cmake", "NUMBER", "Note", "that", "it", "may", "be", "necessary", "to", "put", "supplementary", "modules", "in", "a", "single", "directory", "somewhere", "NUMBER", "I", "usually", "use", "a", "cmake", "subdirectory", "alongside", "the", "highest", "level", "CMakeLists", "NUMBER", "txt", "wherever", "that", "be", "NUMBER", "Options", "NUMBER", "and", "NUMBER", "basically", "treat", "CMake", "as", "a", "first", "class", "citizen", "whereas", "NUMBER", "makes", "it", "pretty", "clear", "that", "CMake", "be", "an", "option", "but", "may", "not", "really", "be", "the", "recommended", "way", "to", "build", "your", "project", "NUMBER", "Option", "NUMBER", "vs", "NUMBER", "NUMBER", "be", "mostly", "just", "about", "style", "NUMBER", "puts", "your", "entire", "build", "system", "in", "one", "place", "whereas", "NUMBER", "keep", "the", "logic", "closer", "to", "the", "code", "NUMBER", "I", "prefer", "NUMBER", "but", "it", "s", "up", "to", "you", "NUMBER", "Would", "you", "want", "CMake", "to", "replace", "your", "current", "system", "or", "would", "you", "prefer", "for", "the", "two", "to", "exist", "in", "parallel", "Also", "there", "be", "some", "optional", "features", "which", "I", "need", "to", "know", "if", "you", "would", "like", "to", "support", "assuming", "you", "don", "t", "already", "obviously", "we", "can", "t", "really", "remove", "features", "Do", "you", "want", "to", "install", "a", "library", "and", "the", "header", "file", "If", "so", "do", "you", "want", "to", "generate", "and", "install", "a", "pkg", "config", "LINK", "config", "file", "pkg", "config", "be", "the", "preferred", "way", "to", "convey", "information", "about", "how", "other", "people", "should", "link", "to", "your", "library", "for", "pretty", "much", "everyone", "except", "CMake", "NUMBER", "If", "you", "have", "unit", "test", "would", "you", "like", "to", "install", "them", "It", "s", "not", "very", "common", "but", "LINK", "lists", "some", "reasons", "you", "may", "want", "to", "NUMBER", "Would", "you", "like", "to", "provide", "an", "autotools", "style", "configure", "script", "as", "an", "optional", "wrapper", "for", "your", "build", "system", "see", "configure", "cmake", "LINK", "cmake", "for", "details", "Note", "that", "as", "mention", "above", "installation", "would", "need", "to", "be", "optional", "projects", "integrating", "your", "project", "into", "their", "own", "tree", "probably", "don", "t", "want", "to", "install", "your", "CLI", "NUMBER", "Finally", "if", "custom", "CMake", "modules", "be", "necessary", "see", "LINK", "for", "some", "examples", "would", "you", "prefer", "to", "copy", "the", "modules", "into", "your", "tree", "or", "use", "a", "git", "submodule", "I", "consider", "having", "multiple", "build", "systems", "on", "board", "as", "long", "as", "they", "do", "not", "interfere", "and", "reside", "in", "root", "and", "build", "directories", "NUMBER", "Currently", "planned", "build", "systems", "be", "CMake", "Premake", "and", "Bazel", "FWIW", "I", "would", "avoid", "this", "if", "I", "were", "you", "NUMBER", "It", "s", "easy", "to", "let", "the", "build", "systems", "get", "out", "of", "sync", "NUMBER", "You", "re", "already", "forgetting", "about", "the", "build", "system", "for", "the", "python", "module", "NUMBER", "Anyways", "I", "put", "together", "a", "quick", "CMake", "system", "at", "LINK", "It", "would", "probably", "be", "a", "good", "idea", "to", "test", "it", "in", "Travis", "and", "or", "AppVeyor", "but", "unfortunately", "the", "python", "stuff", "be", "in", "the", "way", "NUMBER", "I", "ll", "try", "to", "put", "together", "a", "quick", "helper", "script", "when", "I", "have", "time", "NUMBER", "I", "think", "everything", "else", "should", "work", "including", "run", "the", "test", "without", "depending", "on", "sh", "so", "it", "should", "work", "on", "Windows", "and", "installing", "the", "bro", "executable", "NUMBER", "Building", "a", "static", "NUMBER", "a", "library", "would", "be", "helpful", "for", "integrating", "Brotli", "into", "projects", "NUMBER", "I", "ve", "be", "developing", "a", "backup", "program", "HashBackup", "and", "everything", "be", "loaded", "statically", "into", "one", "self", "contained", "executable", "NUMBER", "Brotli", "be", "a", "great", "compression", "program", "but", "be", "complex", "compared", "to", "zstd", "NUMBER", "I", "have", "to", "build", "on", "old", "platforms", "to", "have", "upward", "compatiblity", "so", "that", "s", "Snow", "Leopard", "OSX", "NUMBER", "on", "Mac", "Centos", "NUMBER", "for", "Linux", "FreeBSD", "NUMBER", "These", "seem", "ancient", "but", "I", "have", "enterprise", "y", "customers", "still", "use", "them", "NUMBER", "Building", "zstd", "into", "Python", "HashBackup", "was", "easy", "NUMBER", "Adding", "Brotli", "was", "not", "so", "easy", "it", "doesn", "t", "compile", "on", "FreeBSD", "NUMBER", "I", "guess", "gcc", "be", "too", "old", "earlier", "version", "worked", "on", "OSX", "but", "yesterday", "s", "version", "expands", "instead", "of", "compressing", "separate", "issue", "the", "version", "I", "downloaded", "yesterday", "doesn", "t", "build", "on", "OSX", "NUMBER", "with", "make", "Here", "s", "the", "make", "output", "with", "OSX", "NUMBER", "jim", "mb", "brotli", "master", "make", "Building", "brotli_common", "release", "Creating", "obj", "Release", "brotli_common", "dictionary", "NUMBER", "c", "Linking", "brotli_common", "ld", "warning", "option", "s", "be", "obsolete", "and", "be", "ignored", "Building", "brotli_dec", "release", "Creating", "obj", "Release", "brotli_dec", "bit_reader", "NUMBER", "c", "decode", "NUMBER", "c", "huffman", "NUMBER", "c", "state", "NUMBER", "c", "Linking", "brotli_dec", "ld", "warning", "option", "s", "be", "obsolete", "and", "be", "ignored", "ld", "unknown", "option", "start", "group", "collect", "NUMBER", "ld", "returned", "NUMBER", "exit", "status", "make", "NUMBER", "NUMBER", "NUMBER", "bin", "libbrotli_dec", "NUMBER", "so", "Error", "NUMBER", "make", "NUMBER", "brotli_dec", "Error", "NUMBER", "make", "all", "Error", "NUMBER", "That", "looks", "like", "an", "issue", "with", "premake", "NUMBER", "Maybe", "because", "the", "file", "were", "generate", "ahead", "of", "time", "instead", "of", "on", "the", "system", "you", "re", "trying", "to", "compile", "on", "Anyways", "the", "cmake", "support", "in", "my", "repo", "build", "NUMBER", "static", "libraries", "just", "like", "the", "premake", "version", "NUMBER", "I", "ve", "also", "test", "it", "by", "embedding", "the", "repo", "into", "Squash", "s", "brotli", "plugin", "so", "if", "you", "re", "use", "cmake", "for", "HashBackup", "you", "should", "be", "able", "to", "just", "add_subdirectory", "brotli", "and", "use", "the", "brotli", "libraries", "as", "needed", "NUMBER", "eustas", "I", "managed", "to", "get", "travis", "work", "on", "my", "repo", "LINK", "ci", "NUMBER", "org", "nemequ", "brotli", "build", "NUMBER", "That", "brings", "up", "a", "few", "more", "question", "for", "Squash", "we", "test", "a", "bunch", "of", "different", "compilers", "on", "Travis", "LINK", "ci", "NUMBER", "org", "quixdb", "squash", "NUMBER", "Do", "you", "want", "me", "to", "do", "something", "similar", "for", "Brotli", "If", "so", "which", "compiler", "s", "and", "version", "For", "ICC", "you", "would", "need", "a", "license", "but", "everything", "else", "should", "be", "feasible", "Also", "you", "never", "said", "whether", "you", "wanted", "a", "configure", "cmake", "LINK", "cmake", "wrapper", "for", "this", "NUMBER", "Eventually", "it", "would", "probably", "be", "a", "good", "idea", "to", "generate", "a", "pkg", "config", "file", "and", "maybe", "install", "the", "test", "but", "that", "should", "probably", "wait", "until", "the", "API", "stabilizes", "and", "brotli", "be", "ready", "to", "install", "a", "shared", "library", "NUMBER", "Also", "I", "see", "it", "be", "possible", "to", "build", "test", "with", "ASAN", "MSAN", "NUMBER", "That", "be", "a", "super", "cool", "option", "NUMBER", "Yes", "and", "I", "ll", "do", "that", "but", "it", "s", "worth", "noting", "that", "this", "be", "most", "useful", "with", "a", "more", "comprehensive", "test", "suite", "as", "it", "be", "you", "re", "not", "really", "throw", "anything", "at", "brotli", "that", "it", "doesn", "t", "expect", "if", "you", "want", "I", "can", "look", "into", "porting", "at", "least", "some", "of", "the", "test", "over", "from", "Squash", "I", "ll", "open", "up", "a", "separate", "issue", "for", "that", "though", "NUMBER", "So", "if", "you", "add", "more", "variants", "we", "will", "be", "very", "grateful", "NUMBER", "Sure", "I", "ll", "try", "to", "take", "care", "of", "it", "later", "today", "NUMBER", "Going", "to", "investigate", "ICC", "license", "question", "later", "NUMBER", "LINK", "us", "articles", "open", "source", "contributor", "faq", "I", "don", "t", "think", "Google", "would", "meet", "the", "criteria", "for", "a", "free", "license", "though", "be", "Google", "I", "guess", "it", "s", "likely", "you", "already", "own", "a", "license", "which", "could", "be", "use", "configure", "cmake", "seems", "to", "cover", "all", "possible", "use", "cases", "NUMBER", "Heh", "it", "really", "doesn", "t", "but", "thank", "you", "for", "saying", "so", "NUMBER", "I", "like", "to", "think", "it", "comes", "close", "NUMBER", "Perhaps", "a", "more", "light", "weight", "version", "of", "this", "wrapper", "would", "fit", "our", "tiny", "simple", "project", "more", "Perhaps", "but", "I", "don", "t", "see", "why", "you", "would", "want", "to", "reinvent", "the", "wheel", "here", "NUMBER", "configure", "cmake", "already", "exists", "and", "be", "know", "to", "work", "the", "license", "be", "permissive", "it", "doesn", "t", "create", "any", "hard", "dependencies", "it", "s", "just", "shell", "scripting", "not", "even", "bash", "it", "s", "a", "single", "file", "well", "two", "if", "you", "count", "the", "configuration", "and", "you", "happen", "to", "know", "the", "jerk", "who", "write", "it", "so", "if", "there", "be", "issue", "you", "have", "someone", "to", "talk", "to", "blame", "NUMBER", "Okay", "I", "managed", "to", "get", "_most_", "of", "the", "stuff", "do", "for", "Travis", "NUMBER", "See", "LINK", "ci", "NUMBER", "org", "nemequ", "brotli", "build", "NUMBER", "I", "went", "with", "container", "build", "instead", "of", "full", "VMs", "which", "be", "faster", "and", "easier", "on", "Travis", "NUMBER", "Unfortunately", "it", "means", "the", "clang", "NUMBER", "NUMBER", "build", "can", "t", "be", "enable", "yet", "because", "Travis", "hasn", "t", "re", "enable", "the", "LLVM", "apt", "repositories", "they", "were", "down", "for", "a", "while", "so", "Travis", "disabled", "them", "but", "they", "re", "back", "up", "now", "NUMBER", "It", "also", "messes", "things", "up", "for", "the", "sanitizers", "which", "be", "apparently", "broken", "with", "the", "compilers", "package", "from", "the", "ubuntu", "toolchain", "r", "repository", "NUMBER", "It", "may", "be", "possible", "to", "fix", "this", "when", "the", "LLVM", "repositories", "be", "available", "by", "switching", "the", "sanitizer", "build", "from", "gcc", "to", "clang", "NUMBER", "I", "did", "not", "include", "any", "build", "use", "premake", "though", "I", "guess", "it", "wouldn", "t", "be", "hard", "to", "add", "NUMBER", "TBH", "I", "just", "have", "no", "idea", "how", "to", "use", "premake", "NUMBER", "Virtually", "everything", "should", "be", "work", "now", "see", "LINK", "ci", "NUMBER", "org", "nemequ", "brotli", "build", "NUMBER", "NUMBER", "The", "only", "real", "hole", "be", "TSan", "which", "I", "don", "t", "think", "be", "going", "to", "happen", "on", "NUMBER", "between", "an", "ancient", "version", "of", "CMake", "and", "update", "compilers", "which", "expect", "newer", "binutils", "there", "be", "just", "too", "many", "problem", "NUMBER", "I", "m", "sure", "I", "could", "get", "it", "work", "on", "NUMBER", "but", "if", "you", "want", "to", "use", "Travis", "container", "infrastructure", "NUMBER", "be", "required", "and", "given", "the", "number", "of", "different", "build", "I", "think", "the", "container", "infrastructure", "be", "definitely", "a", "good", "idea", "NUMBER", "Remaining", "relate", "issue", "Not", "sure", "if", "you", "re", "willing", "to", "use", "an", "unmodified", "configure", "cmake", "but", "if", "so", "I", "m", "happy", "to", "add", "a", "patch", "to", "add", "it", "NUMBER", "I", "m", "willing", "to", "add", "a", "pkg", "config", "file", "and", "install", "a", "shared", "library", "but", "I", "m", "not", "sure", "you", "want", "to", "do", "that", "until", "the", "API", "be", "stable", "NUMBER", "Unless", "you", "want", "to", "version", "everything", "i", "NUMBER", "e", "NUMBER", "libbrotli", "NUMBER", "brotli", "NUMBER", "pc", "usr", "include", "brotli", "NUMBER", "etc", "NUMBER", "which", "I", "d", "be", "happy", "to", "throw", "together", "NUMBER", "If", "you", "want", "I", "could", "probably", "port", "most", "of", "Squash", "s", "test", "over", "to", "Brotli", "especially", "if", "you", "re", "okay", "with", "use", "\u00b5nit", "LINK", "like", "Squash", "do", "NUMBER", "The", "original", "issue", "be", "resolve", "so", "I", "m", "going", "to", "close", "this", "NUMBER", "I", "m", "still", "willing", "to", "put", "together", "PRs", "for", "the", "other", "stuff", "mention", "in", "my", "previous", "comment", "LINK", "issuecomment", "NUMBER", "just", "let", "me", "know", "if", "you", "want", "me", "to", "NUMBER", "A", "user", "of", "the", "brotli", "R", "library", "has", "report", "LINK", "strange", "behavior", "of", "BrotliDecompressedSize", "fail", "for", "certain", "combinations", "of", "data", "and", "compression", "size", "NUMBER", "I", "put", "a", "few", "example", "file", "here", "LINK", "NUMBER", "I", "compressed", "the", "file", "uncompressed", "with", "quality", "NUMBER", "NUMBER", "and", "NUMBER", "and", "default", "settings", "otherwise", "mode", "generic", "log_win", "NUMBER", "log_block", "NUMBER", "NUMBER", "sh", "git", "clone", "LINK", "If", "I", "try", "to", "decompress", "the", "file", "compressed", "NUMBER", "via", "the", "C", "interface", "the", "call", "to", "BrotliDecompressedSize", "fail", "NUMBER", "It", "do", "not", "happen", "for", "compressed", "NUMBER", "and", "compressed", "NUMBER", "NUMBER", "Also", "it", "do", "not", "seem", "to", "happen", "for", "the", "bro", "command", "line", "utility", "NUMBER", "So", "how", "be", "the", "client", "supposed", "to", "know", "how", "much", "memory", "to", "allocate", "for", "BrotliDecompressBuffer", "if", "we", "cannot", "rely", "on", "BrotliDecompressedSize", "Perhaps", "this", "be", "mostly", "a", "documentation", "bug", "then", "NUMBER", "Without", "fully", "understanding", "technical", "details", "of", "brotli", "it", "seem", "the", "basic", "API", "decompressing", "a", "buffer", "was", "to", "allocate", "memory", "based", "on", "BrotliDecompressedSize", "and", "then", "invoke", "BrotliDecompressBuffer", "NUMBER", "I", "maintain", "brotli", "bindings", "for", "the", "R", "language", "LINK", "NUMBER", "So", "I", "suppose", "I", "better", "switch", "to", "the", "BrotliDecompressStream", "API", "to", "decompress", "arbitrary", "brotli", "data", "Can", "I", "still", "use", "BrotliCompressBuffer", "for", "encoding", "a", "buffer", "or", "do", "this", "API", "have", "similar", "limitations", "Have", "you", "push", "the", "update", "for", "BrotliDecompressedSize", "yet", "windef", "NUMBER", "h", "include", "by", "windows", "NUMBER", "h", "defines", "min", "max", "macros", "so", "to", "avoid", "compilation", "issue", "on", "windows", "whenever", "include", "brotli", "headers", "after", "including", "windows", "headers", "which", "can", "be", "very", "tricky", "to", "avoid", "workaround", "in", "some", "projects", "its", "best", "to", "either", "convert", "lines", "like", "std", "min", "a", "b", "to", "std", "min", "a", "b", "or", "keep", "such", "code", "out", "of", "the", "headers", "that", "get", "pull", "in", "when", "including", "encode", "NUMBER", "h", "decode", "NUMBER", "h", "In", "my", "scene", "I", "will", "not", "finish", "compressing", "when", "I", "run", "my", "program", "NUMBER", "so", "BrotliCompressor", "object", "be", "only", "one", "NUMBER", "And", "on", "the", "client", "I", "call", "the", "BrotliStateInit", "s", "just", "for", "once", "NUMBER", "So", "like", "this", "while", "NUMBER", "I", "read", "NUMBER", "bytes", "to", "compress", "send", "to", "the", "client", "client", "decompress", "the", "data", "after", "client", "decompress", "the", "data", "the", "decompressed", "data", "be", "not", "NUMBER", "sometimes", "it", "may", "be", "NUMBER", "sometimes", "it", "may", "be", "NUMBER", "How", "can", "I", "resolve", "the", "problem", "When", "you", "compress", "block", "you", "need", "to", "set", "force_flush", "parameter", "to", "true", "NUMBER", "Moreover", "after", "block", "be", "flushed", "you", "need", "to", "append", "empty", "metadata", "block", "WriteMetadata", "to", "make", "sure", "that", "output", "be", "byte", "aligned", "NUMBER", "Sorry", "for", "confusing", "API", "NUMBER", "In", "two", "weeks", "API", "will", "be", "update", "to", "make", "things", "like", "that", "more", "straightforward", "NUMBER", "Best", "regards", "Eugene", "NUMBER", "eustas", "Do", "you", "mean", "that", "I", "need", "call", "the", "Api", "like", "this", "below", "WriteMetaBlock", "NUMBER", "NULL", "true", "encoded_size", "encoded_buffer", "if", "I", "set", "the", "parameter", "of", "is_last", "true", "means", "this", "be", "the", "last", "frame", "but", "I", "hava", "no", "last", "frame", "In", "my", "system", "If", "I", "call", "this", "how", "about", "next", "data", "data", "be", "not", "finished", "No", "just", "something", "like", "this", "while", "true", "NUMBER", "c", "CopyInputToRingBuffer", "input_size", "input", "NUMBER", "c", "WriteBrotliData", "be", "last", "false", "force", "flush", "true", "output_size", "output", "NUMBER", "c", "WriteMetaBlock", "input", "size", "NUMBER", "input", "nullptr", "be", "last", "false", "output_size", "output", "NUMBER", "eustas", "Hi", "eustas", "I", "write", "the", "code", "like", "yours", "while", "true", "CopyOneBlockToRingBuffer", "in", "compressor", "in_bytes", "final_block", "out_bytes", "NUMBER", "compressor", "NUMBER", "WriteBrotliData", "false", "true", "out_bytes", "output", "printf", "bbbbbbbbbbbbbbbbbbbb", "d", "n", "out_bytes", "compressor", "NUMBER", "WriteMetaBlock", "NUMBER", "NULL", "false", "out_bytes", "output", "printf", "ttttttttttttttttttt", "d", "n", "out_bytes", "The", "test", "result", "be", "this", "bbbbbbbbbbbbbbbbbbbb", "NUMBER", "ttttttttttttttttttt", "NUMBER", "bbbbbbbbbbbbbbbbbbbb", "NUMBER", "ttttttttttttttttttt", "NUMBER", "bbbbbbbbbbbbbbbbbbbb", "NUMBER", "ttttttttttttttttttt", "NUMBER", "How", "to", "fix", "it", "Best", "Regars", "eustas", "Thanks", "your", "support", "It", "seems", "to", "work", "Python", "Python", "import", "brotli", "Is", "there", "a", "reason", "it", "makes", "these", "in", "HOME", "I", "ve", "yet", "to", "notice", "a", "pip", "install", "package", "do", "this", "NUMBER", "Bash", "ls", "R", "NUMBER", "python", "eggs", "NUMBER", "python", "eggs", "Brotli", "NUMBER", "py", "NUMBER", "linux", "x", "NUMBER", "_", "NUMBER", "egg", "tmp", "NUMBER", "python", "eggs", "Brotli", "NUMBER", "py", "NUMBER", "linux", "x", "NUMBER", "_", "NUMBER", "egg", "tmp", "brotli", "NUMBER", "so", "LINK", "be", "the", "python", "egg", "cache", "python", "egg", "cache", "I", "d", "recommend", "you", "don", "t", "do", "python", "setup", "NUMBER", "py", "install", "when", "installing", "from", "the", "source", "directory", "as", "that", "triggers", "setuptools", "to", "create", "an", "NUMBER", "egg", "NUMBER", "Instead", "use", "pip", "install", "NUMBER", "This", "will", "not", "create", "eggs", "but", "will", "install", "the", "package", "unzipped", "in", "the", "site", "package", "NUMBER", "Thanks", "for", "the", "tip", "NUMBER", "This", "should", "be", "in", "the", "documentation", "NUMBER", "Ideally", "there", "would", "be", "a", "pip", "package", "NUMBER", "Well", "there", "be", "pip", "package", "that", "be", "wheels", "available", "from", "the", "GitHub", "release", "page", "of", "this", "repository", "NUMBER", "I", "guess", "you", "meant", "that", "these", "wheels", "should", "be", "also", "available", "from", "PyPI", "so", "one", "can", "just", "do", "pip", "install", "brotli", "NUMBER", "Of", "course", "I", "m", "with", "you", "on", "that", "NUMBER", "It", "didn", "t", "occur", "to", "me", "to", "try", "NUMBER", "That", "s", "good", "enough", "IMO", "but", "should", "really", "be", "documented", "NUMBER", "Bash", "pip", "install", "git", "LINK", "anthrotype", "could", "you", "change", "README", "NUMBER", "md", "and", "python", "README", "NUMBER", "md", "accordingly", "to", "use", "pip", "install", "NUMBER", "instead", "of", "python", "setup", "NUMBER", "py", "install", "And", "in", "addition", "for", "people", "who", "don", "t", "want", "to", "clone", "the", "repository", "first", "pip", "install", "git", "LINK", "In", "the", "header", "fast_log", "NUMBER", "h", "the", "following", "constant", "be", "use", "static", "const", "double", "kLog", "NUMBER", "Inv", "NUMBER", "f", "Please", "consider", "to", "replace", "this", "constant", "with", "exact", "formula", "not", "to", "loose", "accuracy", "static", "const", "double", "kLog", "NUMBER", "Inv", "NUMBER", "f", "log", "NUMBER", "Constant", "already", "has", "too", "high", "prescision", "NUMBER", "When", "either", "of", "kLog", "NUMBER", "Inv", "values", "be", "printed", "out", "the", "result", "be", "NUMBER", "_", "NUMBER", "_", "perhaps", "remove", "the", "f", "from", "the", "end", "would", "change", "something", "on", "another", "compiler", "When", "attempting", "to", "cross", "compile", "with", "mingw", "I", "see", "a", "lot", "of", "error", "visibility", "attribute", "not", "support", "in", "this", "configuration", "ignored", "Werror", "attributes", "message", "normally", "they", "re", "just", "warnings", "but", "I", "use", "Werror", "for", "CI", "build", "NUMBER", "See", "LINK", "ci", "NUMBER", "org", "quixdb", "squash", "jobs", "NUMBER", "L", "NUMBER", "for", "an", "example", "NUMBER", "I", "can", "reproduce", "on", "Fedora", "with", "Squash", "with", "something", "like", "ming", "NUMBER", "cmake", "NUMBER", "make", "j", "NUMBER", "If", "you", "want", "you", "can", "adapt", "LINK", "L", "NUMBER", "Looks", "like", "it", "s", "still", "an", "issue", "LINK", "ci", "NUMBER", "org", "quixdb", "squash", "jobs", "NUMBER", "That", "s", "with", "NUMBER", "b", "NUMBER", "fc", "NUMBER", "f", "NUMBER", "cda", "NUMBER", "a", "NUMBER", "dbf", "NUMBER", "b", "NUMBER", "f", "NUMBER", "b", "you", "can", "verify", "that", "at", "LINK", "ci", "NUMBER", "org", "quixdb", "squash", "jobs", "NUMBER", "L", "NUMBER", "NUMBER", "On", "a", "somewhat", "relate", "note", "an", "easy", "way", "to", "switch", "compilers", "if", "you", "be", "interested", "I", "d", "be", "willing", "to", "put", "together", "a", "CMake", "based", "build", "system", "for", "you", "it", "could", "be", "useful", "for", "Squash", "too", "since", "we", "could", "share", "the", "build", "system", "Thanks", "it", "works", "LINK", "ci", "NUMBER", "org", "quixdb", "squash", "build", "NUMBER", "Method", "log", "NUMBER", "be", "not", "available", "on", "Android", "before", "API", "NUMBER", "so", "fast_log", "NUMBER", "h", "be", "not", "compilable", "for", "older", "Android", "NUMBER", "The", "suggestion", "be", "to", "update", "the", "row", "if", "defined", "_MSC_VER", "_MSC_VER", "TAG", "input_block_size", "use", "max", "partial", "buffer", "size", "for", "stream", "for", "partialBuffer", "in", "hugeInputBuffer", "c", "CopyInputToRingBuffer", "partialBuffer", "c", "WriteBrotliData", "isLast", "false", "doFlush", "false", "size", "partialBuffer", "outputBuffer", "c", "WriteBrotliData", "isLast", "true", "doFlush", "true", "NUMBER", "outputBuffer", "final", "flush", "I", "wouldn", "t", "expect", "doing", "anything", "more", "to", "write", "a", "valid", "brotli", "stream", "which", "I", "can", "send", "over", "wire", "or", "save", "to", "disk", "NUMBER", "Questions", "Why", "be", "the", "following", "methods", "public", "and", "when", "to", "use", "them", "WriteMetaBlock", "WriteMetadata", "FinishStream", "BrotliSetCustomDictionary", "WriteStreamHeader", "I", "didn", "t", "use", "them", "and", "the", "compressor", "works", "fine", "no", "error", "IMHO", "If", "they", "be", "mandatory", "the", "compressor", "should", "fail", "fast", "LINK", "fast", "Is_Last", "vs", "NUMBER", "Do_Flush", "vs", "NUMBER", "FinishStream", "I", "know", "when", "it", "comes", "to", "file", "IO", "what", "flush", "means", "NUMBER", "But", "with", "these", "three", "options", "I", "m", "confused", "NUMBER", "Questions", "When", "do", "I", "use", "what", "What", "be", "the", "consequences", "What", "do", "Is_Last", "do", "What", "be", "the", "consequence", "of", "not", "doing", "it", "Is", "this", "mandatory", "or", "just", "a", "hint", "When", "there", "be", "a", "FinishStream", "Why", "isn", "t", "there", "a", "StartStream", "it", "s", "all", "about", "word", "e", "NUMBER", "g", "NUMBER", "have", "consistent", "and", "symmetric", "naming", "I", "m", "looking", "forward", "to", "a", "fruitful", "discussion", "Thanks", "in", "advance", "Martin", "Current", "interface", "will", "be", "deprecate", "soon", "NUMBER", "We", "will", "be", "grateful", "if", "you", "leave", "some", "comments", "on", "the", "future", "interface", "static", "const", "int", "kBrotliMaxWindowBits", "NUMBER", "static", "const", "int", "kBrotliMinWindowBits", "NUMBER", "static", "const", "int", "kBrotliMinInputBlockBits", "NUMBER", "static", "const", "int", "kBrotliMaxInputBlockBits", "NUMBER", "typedef", "enum", "BrotliEncoderMode", "Default", "compression", "mode", "NUMBER", "The", "compressor", "do", "not", "know", "anything", "in", "advance", "about", "the", "properties", "of", "the", "input", "NUMBER", "BROTLI_MODE_GENERIC", "NUMBER", "Compression", "mode", "for", "UTF", "NUMBER", "format", "text", "input", "NUMBER", "BROTLI_MODE_TEXT", "NUMBER", "Compression", "mode", "use", "in", "WOFF", "NUMBER", "BROTLI_MODE_FONT", "NUMBER", "BrotliEncoderMode", "typedef", "enum", "BrotliEncoderOperation", "BROTLI_OPERATION_PROCESS", "NUMBER", "Request", "output", "stream", "to", "flush", "NUMBER", "Performed", "when", "input", "stream", "be", "depleted", "and", "there", "be", "enough", "space", "in", "output", "stream", "NUMBER", "BROTLI_OPERATION_FLUSH", "NUMBER", "Request", "output", "stream", "to", "finish", "NUMBER", "Performed", "when", "input", "stream", "be", "depleted", "and", "there", "be", "enough", "space", "in", "output", "stream", "NUMBER", "BROTLI_OPERATION_FINISH", "NUMBER", "BrotliEncoderOperation", "typedef", "struct", "BrotliEncoderParams", "BrotliEncoderMode", "mode", "Controls", "the", "compression", "speed", "vs", "compression", "density", "tradeoffs", "NUMBER", "The", "higher", "the", "quality", "the", "slower", "the", "compression", "NUMBER", "Range", "be", "NUMBER", "to", "NUMBER", "int", "quality", "Base", "NUMBER", "logarithm", "of", "the", "sliding", "window", "size", "NUMBER", "Range", "be", "NUMBER", "to", "NUMBER", "int", "lgwin", "Base", "NUMBER", "logarithm", "of", "the", "maximum", "input", "block", "size", "NUMBER", "Range", "be", "NUMBER", "to", "NUMBER", "If", "set", "to", "NUMBER", "the", "value", "will", "be", "set", "based", "on", "the", "quality", "NUMBER", "int", "lgblock", "BrotliEncoderParams", "void", "BrotliEncoderParamsSetDefault", "BrotliEncoderParams", "params", "A", "state", "can", "not", "be", "reused", "for", "multiple", "brotli", "streams", "NUMBER", "typedef", "struct", "BrotliEncoderStateStruct", "BrotliEncoderState", "Fills", "the", "new", "state", "with", "a", "dictionary", "for", "LZ", "NUMBER", "warming", "up", "the", "ringbuffer", "e", "NUMBER", "g", "NUMBER", "for", "custom", "static", "dictionaries", "for", "data", "formats", "NUMBER", "Not", "to", "be", "confused", "with", "the", "build", "in", "transformable", "dictionary", "of", "Brotli", "NUMBER", "To", "decode", "use", "BrotliSetCustomDictionary", "of", "the", "decoder", "with", "the", "same", "dictionary", "NUMBER", "void", "BrotliEncoderSetCustomDictionary", "BrotliEncoderState", "state", "size_t", "size", "const", "uint", "NUMBER", "_t", "dict", "Compresses", "the", "data", "in", "input_buffer", "into", "encoded_buffer", "and", "sets", "encoded_size", "to", "the", "compressed", "length", "NUMBER", "Returns", "NUMBER", "if", "there", "was", "an", "error", "and", "NUMBER", "otherwise", "NUMBER", "int", "BrotliEncoderCompressBuffer", "const", "BrotliEncoderParams", "params", "size_t", "input_size", "const", "uint", "NUMBER", "_t", "input_buffer", "size_t", "encoded_size", "uint", "NUMBER", "_t", "encoded_buffer", "Progressively", "compress", "input", "stream", "and", "push", "produced", "bytes", "to", "output", "stream", "NUMBER", "Workflow", "consists", "of", "NUMBER", "tasks", "optional", "copy", "input", "data", "to", "internal", "buffer", "actually", "compress", "data", "and", "optionally", "store", "it", "to", "internal", "buffer", "optional", "copy", "compressed", "bytes", "from", "internal", "buffer", "to", "output", "stream", "Whenever", "all", "NUMBER", "tasks", "can", "t", "move", "forward", "anymore", "or", "error", "occur", "this", "method", "returns", "NUMBER", "available_in", "and", "next_in", "represent", "input", "stream", "when", "X", "bytes", "of", "input", "be", "consumed", "X", "be", "subtracted", "from", "available_in", "and", "add", "to", "next_in", "NUMBER", "available_out", "and", "next_out", "represent", "output", "stream", "when", "Y", "bytes", "be", "push", "to", "output", "Y", "be", "subtracted", "from", "available_out", "and", "add", "to", "next_out", "NUMBER", "total_out", "be", "assigned", "to", "the", "total", "amount", "of", "bytes", "push", "by", "the", "instance", "of", "encoder", "to", "output", "NUMBER", "op", "be", "use", "to", "perform", "flush", "or", "finish", "the", "stream", "NUMBER", "Flushing", "the", "stream", "means", "forcing", "encoding", "of", "all", "input", "pass", "to", "encoder", "and", "completing", "the", "current", "output", "block", "so", "it", "could", "be", "fully", "decoded", "by", "stream", "decoder", "NUMBER", "To", "perform", "flush", "op", "must", "be", "set", "to", "BROTLI_OPERATION_FLUSH", "NUMBER", "Under", "some", "circumstances", "e", "NUMBER", "g", "NUMBER", "lack", "of", "output", "stream", "capacity", "this", "operation", "would", "require", "several", "calls", "to", "BrotliEncoderCompressStream", "NUMBER", "The", "method", "must", "be", "call", "again", "until", "both", "input", "stream", "be", "depleted", "and", "encoder", "has", "no", "more", "output", "see", "BrotliEncoderHasMoreOutput", "after", "the", "method", "be", "call", "NUMBER", "Finishing", "the", "stream", "means", "encoding", "of", "all", "input", "pass", "to", "encoder", "and", "add", "specific", "final", "marks", "so", "stream", "decoder", "could", "determine", "that", "stream", "be", "complete", "NUMBER", "To", "perform", "finish", "op", "must", "be", "set", "to", "BROTLI_OPERATION_FINISH", "NUMBER", "Under", "some", "circumstances", "e", "NUMBER", "g", "NUMBER", "lack", "of", "output", "stream", "capacity", "this", "operation", "would", "require", "several", "calls", "to", "BrotliEncoderCompressStream", "NUMBER", "The", "method", "must", "be", "call", "again", "until", "both", "input", "stream", "be", "depleted", "and", "encoder", "has", "no", "more", "output", "see", "BrotliEncoderHasMoreOutput", "after", "the", "method", "be", "call", "NUMBER", "WARNING", "when", "flushing", "and", "finishing", "op", "should", "not", "change", "until", "operation", "be", "complete", "input", "stream", "should", "not", "be", "refilled", "as", "well", "NUMBER", "Returns", "NUMBER", "if", "there", "was", "an", "error", "and", "NUMBER", "otherwise", "NUMBER", "int", "BrotliEncoderCompressStream", "BrotliEncoderState", "s", "BrotliEncoderOperation", "op", "size_t", "available_in", "const", "uint", "NUMBER", "_t", "next_in", "size_t", "available_out", "uint", "NUMBER", "_t", "next_out", "size_t", "total_out", "Check", "if", "encoder", "be", "in", "finished", "state", "i", "NUMBER", "e", "NUMBER", "no", "more", "input", "be", "acceptable", "and", "no", "more", "output", "will", "be", "produced", "NUMBER", "Works", "only", "with", "BrotliEncoderCompressStream", "workflow", "NUMBER", "Returns", "NUMBER", "if", "stream", "be", "finished", "and", "NUMBER", "otherwise", "NUMBER", "int", "BrotliEncoderIsFinished", "BrotliEncoderState", "s", "Check", "if", "encoder", "has", "more", "output", "bytes", "in", "internal", "buffer", "NUMBER", "Works", "only", "with", "BrotliEncoderCompressStream", "workflow", "NUMBER", "Returns", "NUMBER", "if", "has", "more", "output", "in", "internal", "buffer", "and", "NUMBER", "otherwise", "NUMBER", "int", "BrotliEncoderHasMoreOutput", "BrotliEncoderState", "s", "Hi", "Eugene", "thank", "you", "for", "this", "outlook", "NUMBER", "These", "be", "my", "thoughts", "feedback", "stream", "encoderno", "externalizes", "it", "s", "state", "BrotliEncoderState", "sadly", "be", "no", "more", "a", "class", "but", "consistent", "with", "decoder", "now", "consistency", "I", "prefer", "more", "than", "a", "state", "I", "need", "to", "hold", "docs", "of", "BrotliEncoderCompressStream", "NUMBER", "Workflow", "consists", "of", "NUMBER", "tasks", "NUMBER", "this", "be", "not", "clear", "to", "me", "internal", "or", "external", "workflow", "I", "suggest", "to", "revise", "the", "word", "to", "NUMBER", "internally", "workflow", "consists", "of", "NUMBER", "tasks", "NUMBER", "prefixing", "constants", "with", "k", "be", "old", "school", "I", "know", "this", "follows", "Google", "s", "C", "guide", "nevertheless", "I", "think", "this", "be", "awkward", "documentation", "in", "general", "be", "more", "clear", "e", "NUMBER", "g", "NUMBER", "the", "breadcrumb", "hint", "to", "custom", "dictionary", "from", "decoder", "be", "very", "helpful", "NUMBER", "One", "thing", "I", "miss", "How", "would", "I", "initiate", "a", "new", "empty", "BrotliEncoderState", "About", "the", "comments", "what", "do", "you", "think", "about", "switching", "to", "Doxygen", "LINK", "dimitri", "doxygen", "index", "NUMBER", "html", "As", "a", "benefit", "for", "users", "you", "could", "then", "automatically", "generate", "docs", "and", "e", "NUMBER", "g", "NUMBER", "upload", "them", "to", "LINK", "What", "do", "you", "think", "In", "the", "current", "v", "NUMBER", "release", "there", "be", "still", "a", "confusing", "declaration", "between", "bool", "FinishStream", "NUMBER", "bool", "WriteBrotliData", "const", "bool", "is_last", "NUMBER", "eustas", "would", "you", "please", "give", "me", "a", "hint", "when", "to", "use", "what", "The", "brotli", "code", "currently", "do", "not", "compile", "with", "Visual", "Studio", "NUMBER", "because", "the", "code", "assumes", "that", "the", "log", "NUMBER", "function", "be", "support", "by", "VIsual", "Studio", "NUMBER", "and", "newer", "which", "be", "not", "true", "NUMBER", "This", "PR", "fix", "the", "preprocessor", "check", "so", "the", "workaround", "code", "be", "use", "with", "Visual", "Studio", "NUMBER", "as", "well", "NUMBER", "Thanks", "for", "your", "pull", "request", "NUMBER", "It", "looks", "like", "this", "may", "be", "your", "first", "contribution", "to", "a", "Google", "open", "source", "project", "NUMBER", "Before", "we", "can", "look", "at", "your", "pull", "request", "you", "ll", "need", "to", "sign", "a", "Contributor", "License", "Agreement", "CLA", "NUMBER", "memo", "Please", "visit", "LINK", "to", "sign", "NUMBER", "Once", "you", "ve", "sign", "please", "reply", "here", "e", "NUMBER", "g", "NUMBER", "I", "sign", "it", "and", "we", "ll", "verify", "NUMBER", "Thanks", "NUMBER", "If", "you", "ve", "already", "sign", "a", "CLA", "it", "s", "possible", "we", "don", "t", "have", "your", "GitHub", "username", "or", "you", "re", "use", "a", "different", "email", "address", "NUMBER", "Check", "your", "exist", "CLA", "data", "LINK", "and", "verify", "that", "your", "email", "be", "set", "on", "your", "git", "commit", "LINK", "your", "email", "in", "git", "NUMBER", "If", "you", "sign", "the", "CLA", "as", "a", "corporation", "please", "let", "us", "know", "the", "company", "s", "name", "NUMBER", "TAG", "I", "ve", "sign", "the", "CLA", "NUMBER", "We", "find", "a", "Contributor", "License", "Agreement", "for", "you", "the", "sender", "of", "this", "pull", "request", "but", "were", "unable", "to", "find", "agreements", "for", "the", "commit", "author", "s", "NUMBER", "If", "you", "authored", "these", "maybe", "you", "use", "a", "different", "email", "address", "in", "the", "git", "commit", "than", "was", "use", "to", "sign", "the", "CLA", "login", "here", "LINK", "to", "double", "check", "If", "these", "were", "authored", "by", "someone", "else", "then", "they", "will", "need", "to", "sign", "a", "CLA", "as", "well", "and", "confirm", "that", "they", "re", "okay", "with", "these", "be", "contributed", "to", "Google", "NUMBER", "TAG", "No", "worries", "it", "just", "was", "my", "first", "time", "I", "had", "to", "deal", "with", "the", "CLA", "and", "unfortunately", "the", "commit", "had", "the", "wrong", "mail", "address", "NUMBER", "I", "ve", "do", "a", "new", "merge", "request", "which", "you", "already", "merge", "so", "all", "be", "fine", "When", "decoding", "quickfox_repeated", "NUMBER", "compressed", "The", "local", "variable", "index", "can", "start", "off", "zero", "which", "will", "result", "in", "an", "access", "to", "s", "NUMBER", "mtf", "NUMBER", "LINK", "L", "NUMBER", "Since", "the", "previous", "variable", "in", "the", "struct", "be", "a", "NUMBER", "bit", "integer", "mtf_upper_bound", "and", "usually", "little", "endian", "TAG", "hi", "yes", "though", "i", "find", "the", "issue", "which", "be", "that", "the", "header", "file", "won", "t", "be", "copied", "to", "PREFIX", "include", "when", "run", "make", "install", "NUMBER", "Is", "this", "expected", "behavior", "You", "right", "I", "only", "considered", "the", "libraries", "but", "I", "guess", "the", "header", "should", "be", "copied", "to", "include", "too", "NUMBER", "I", "ll", "try", "make", "a", "new", "pull", "request", "later", "to", "add", "them", "to", "the", "file", "to", "install", "NUMBER", "As", "for", "the", "name", "of", "libraries", "with", "underscore", "I", "just", "keep", "the", "one", "that", "were", "use", "in", "the", "cmake", "by", "the", "brotli", "author", "NUMBER", "fholzer", "Can", "you", "please", "try", "with", "LINK", "Sorry", "should", "ve", "created", "a", "PR", "myself", "I", "guess", "NUMBER", "I", "m", "use", "LINK", "and", "LINK", "_brotli", "tree", "fixBrotliLinking", "at", "the", "moment", "and", "that", "works", "fine", "NUMBER", "One", "be", "for", "installing", "the", "header", "the", "other", "one", "add", "underscores", "to", "the", "nginx", "module", "s", "config", "file", "so", "it", "finds", "the", "library", "NUMBER", "Not", "sure", "if", "this", "be", "the", "wanted", "solution", "but", "if", "so", "I", "can", "create", "PRs", "for", "both", "NUMBER", "fholzer", "OK", "I", "think", "installHeaders", "be", "essentially", "the", "same", "as", "mine", "except", "that", "I", "also", "install", "headers", "on", "Windows", "not", "sure", "what", "should", "be", "do", "on", "that", "platform", "NUMBER", "For", "fixBrotliLinking", "I", "don", "t", "know", "what", "name", "be", "best", "but", "I", "guess", "it", "be", "up", "to", "the", "maintainer", "of", "the", "brotli", "project", "to", "decide", "NUMBER", "For", "fixBrotliLinking", "I", "don", "t", "know", "what", "name", "be", "best", "but", "I", "guess", "it", "be", "up", "to", "the", "maintainer", "of", "the", "brotli", "project", "to", "decide", "NUMBER", "Right", "that", "s", "the", "main", "reason", "i", "didn", "t", "submit", "it", "yet", "NUMBER", "Regarding", "the", "headers", "on", "windows", "I", "wasn", "t", "sure", "myself", "and", "I", "needed", "it", "for", "Linux", "only", "NUMBER", "Will", "post", "an", "update", "once", "I", "get", "the", "chance", "to", "test", "this", "on", "windows", "NUMBER", "Regarding", "the", "headers", "on", "windows", "I", "wasn", "t", "sure", "myself", "and", "I", "needed", "it", "for", "Linux", "only", "NUMBER", "Will", "post", "an", "update", "once", "I", "get", "the", "chance", "to", "test", "this", "on", "windows", "NUMBER", "So", "my", "recollection", "be", "that", "the", "only", "thing", "needed", "be", "to", "have", "the", "libraries", "in", "the", "same", "directory", "as", "the", "executable", "otherwise", "they", "be", "not", "find", "NUMBER", "I", "don", "t", "think", "there", "be", "a", "standard", "locations", "for", "libraries", "or", "headers", "on", "Windows", "so", "I", "guess", "this", "do", "not", "really", "matter", "NUMBER", "There", "be", "some", "UNIX", "like", "systems", "on", "Windows", "e", "NUMBER", "g", "NUMBER", "MSYS", "NUMBER", "that", "may", "have", "different", "requirements", "but", "maintainers", "can", "write", "patches", "if", "they", "want", "to", "NUMBER", "Anyway", "it", "seems", "nice", "to", "have", "the", "public", "headers", "install", "too", "NUMBER", "eustas", "So", "I", "guess", "you", "replied", "on", "the", "pull", "request", "about", "the", "WIN", "NUMBER", "case", "NUMBER", "Can", "you", "please", "indicate", "whether", "you", "want", "to", "preserve", "the", "underscore", "in", "the", "library", "names", "Thanks", "The", "pull", "request", "to", "install", "the", "headers", "has", "be", "merge", "NUMBER", "Are", "the", "library", "names", "with", "underscore", "fine", "for", "everybody", "Is", "there", "anything", "else", "needed", "Or", "can", "we", "now", "close", "this", "issue", "as", "well", "as", "the", "LINK", "pull", "request", "I", "think", "it", "would", "also", "be", "nice", "to", "have", "a", "brotli", "release", "with", "the", "cmake", "library", "change", "so", "that", "we", "can", "start", "use", "the", "release", "as", "a", "reference", "for", "package", "maintainers", "users", "see", "for", "example", "the", "duplicate", "woff", "NUMBER", "pull", "request", "in", "LINK", "and", "LINK", "NUMBER", "For", "the", "sake", "of", "consistency", "with", "the", "google", "ngx_brotli", "the", "underscores", "should", "not", "be", "present", "NUMBER", "For", "the", "sake", "of", "consistency", "with", "the", "google", "ngx_brotli", "the", "underscores", "should", "not", "be", "present", "NUMBER", "ngx_brotli", "relied", "on", "the", "unofficial", "librotli", "so", "I", "guess", "it", "should", "be", "update", "to", "match", "whatever", "convention", "the", "maintainers", "of", "brotli", "want", "NUMBER", "Anyway", "I", "opened", "LINK", "eustas", "thanks", "for", "merge", "my", "pull", "request", "NUMBER", "So", "now", "that", "the", "library", "names", "match", "google", "ngx_brotli", "be", "there", "anything", "else", "needed", "here", "Shared", "libraries", "and", "proper", "SONAME", "version", "We", "generate", "them", "in", "the", "libbrotli", "repo", "although", "use", "autotools", "but", "the", "same", "approach", "could", "be", "use", "NUMBER", "bagder", "Share", "libraries", "and", "proper", "SONAME", "version", "Yes", "shared", "libraries", "can", "now", "be", "generate", "NUMBER", "I", "don", "t", "know", "if", "that", "s", "what", "you", "want", "but", "the", "version", "use", "in", "the", "one", "in", "common", "version", "NUMBER", "h", "and", "if", "you", "follow", "the", "cmake", "instruction", "in", "the", "README", "you", "get", "the", "following", "libraries", "and", "soft", "links", "libbrotlicommon", "NUMBER", "so", "libbrotlicommon", "NUMBER", "so", "NUMBER", "libbrotlidec", "NUMBER", "so", "libbrotlidec", "NUMBER", "so", "NUMBER", "libbrotlienc", "NUMBER", "so", "libbrotlienc", "NUMBER", "so", "NUMBER", "Oh", "shared", "libraries", "be", "_optional_", "NUMBER", "I", "didn", "t", "expect", "that", "sorry", "NUMBER", "Oh", "shared", "libraries", "be", "optional", "NUMBER", "I", "didn", "t", "expect", "that", "sorry", "NUMBER", "Yes", "I", "tried", "to", "follow", "CMake", "s", "usual", "approach", "i", "NUMBER", "e", "NUMBER", "to", "rely", "on", "the", "BUILD_SHARED_LIBS", "flag", "off", "by", "default", "NUMBER", "I", "guess", "it", "be", "fine", "to", "have", "these", "shared", "libraries", "optional", "NUMBER", "We", "live", "in", "a", "shared", "library", "world", "these", "days", "NUMBER", "Most", "library", "build", "systems", "these", "days", "build", "shared", "by", "default", "and", "that", "s", "what", "most", "users", "use", "compare", "even", "with", "other", "compression", "libraries", "NUMBER", "I", "think", "the", "brotli", "libs", "should", "build", "shared", "by", "default", "too", "NUMBER", "bagder", "OK", "that", "makes", "sense", "to", "me", "too", "NUMBER", "eustas", "I", "don", "t", "know", "what", "be", "best", "but", "LINK", "_SHARED_LIBS", "NUMBER", "html", "mentions", "use", "the", "OPTION", "cmake", "command", "NUMBER", "i", "NUMBER", "e", "NUMBER", "LINK", "Yes", "AFAIK", "with", "cmake", "you", "re", "expected", "to", "use", "this", "option", "if", "you", "want", "shared", "libs", "NUMBER", "Those", "docs", "says", "we", "can", "should", "use", "an", "option", "NUMBER", "There", "s", "nothing", "there", "saying", "it", "should", "default", "to", "non", "shared", "or", "that", "static", "be", "preferred", "NUMBER", "You", "could", "easily", "just", "switch", "the", "default", "to", "say", "shared", "by", "default", "unless", "you", "turn", "it", "off", "NUMBER", "Those", "docs", "says", "we", "can", "should", "use", "an", "option", "NUMBER", "There", "s", "nothing", "there", "saying", "it", "should", "default", "to", "non", "shared", "or", "that", "static", "be", "preferred", "NUMBER", "You", "could", "easily", "just", "switch", "the", "default", "to", "say", "shared", "by", "default", "unless", "you", "turn", "it", "off", "NUMBER", "I", "don", "t", "know", "if", "that", "remark", "was", "directed", "to", "me", "but", "just", "to", "clarify", "I", "was", "replying", "to", "LINK", "issuecomment", "NUMBER", "and", "just", "suggesting", "to", "use", "the", "OPTION", "command", "instead", "but", "of", "course", "make", "it", "on", "by", "default", "as", "otherwise", "that", "do", "not", "change", "the", "current", "behavior", "NUMBER", "I", "ll", "try", "to", "submit", "a", "pull", "request", "to", "do", "that", "NUMBER", "eustas", "Regarding", "pc", "file", "it", "seems", "we", "could", "use", "the", "configure_file", "command", "to", "generate", "them", "see", "for", "example", "LINK", "proxy", "commit", "NUMBER", "d", "NUMBER", "a", "NUMBER", "f", "NUMBER", "cc", "NUMBER", "b", "NUMBER", "ad", "NUMBER", "cb", "NUMBER", "a", "NUMBER", "b", "NUMBER", "deb", "NUMBER", "d", "or", "LINK", "eustas", "Regarding", "pc", "file", "it", "seems", "we", "could", "use", "the", "configure_file", "command", "to", "generate", "them", "see", "for", "example", "mysql", "mysql", "proxy", "NUMBER", "d", "NUMBER", "a", "NUMBER", "or", "madler", "zlib", "ca", "NUMBER", "e", "NUMBER", "a", "NUMBER", "Generating", "a", "pkg", "config", "file", "from", "CMake", "use", "configure_file", "be", "problematic", "in", "a", "non", "obvious", "way", "NUMBER", "I", "ended", "up", "write", "a", "CMake", "module", "for", "Squash", "to", "do", "it", "and", "explained", "why", "I", "didn", "t", "just", "use", "configure_file", "directly", "see", "GenPkgConfig", "NUMBER", "cmake", "NUMBER", "LINK", "L", "NUMBER", "It", "s", "a", "bit", "messy", "but", "you", "can", "steal", "the", "module", "if", "you", "want", "NUMBER", "As", "for", "version", "now", "that", "shared", "libraries", "be", "possible", "the", "version", "information", "should", "be", "add", "to", "the", "target", "NUMBER", "There", "be", "an", "example", "in", "Squash", "LINK", "L", "NUMBER", "NUMBER", "Note", "that", "soversion", "isn", "t", "quite", "the", "same", "as", "version", "though", "if", "brotli", "adopts", "compatible", "rules", "for", "version", "they", "could", "be", "NUMBER", "There", "be", "a", "good", "description", "of", "the", "issue", "in", "the", "autobook", "NUMBER", "Library", "Versioning", "LINK", "_", "NUMBER", "html", "nemequ", "That", "seems", "more", "complicated", "than", "the", "configure_file", "way", "and", "IIUC", "this", "would", "only", "be", "beneficial", "for", "Windows", "NUMBER", "Do", "you", "have", "any", "plan", "to", "clean", "this", "module", "up", "and", "submit", "it", "to", "the", "cmake", "maintainers", "I", "would", "personally", "be", "more", "comfortable", "to", "rely", "on", "an", "official", "cmake", "module", "than", "to", "have", "to", "copy", "and", "maintain", "one", "in", "brotli", "NUMBER", "In", "any", "case", "the", "configure_file", "way", "seems", "a", "reasonable", "and", "simple", "option", "even", "if", "it", "s", "only", "for", "the", "short", "term", "NUMBER", "nemequ", "That", "seems", "more", "complicated", "than", "the", "configure_file", "way", "and", "IIUC", "this", "would", "only", "be", "beneficial", "for", "Windows", "NUMBER", "I", "m", "not", "NUMBER", "on", "the", "only", "part", "IIRC", "dont", "define", "prefix", "and", "prefix", "variable", "be", "only", "available", "on", "Windows", "but", "I", "could", "be", "wrong", "but", "Windows", "be", "definitely", "the", "major", "problem", "NUMBER", "Do", "you", "have", "any", "plan", "to", "clean", "this", "module", "up", "Maybe", "NUMBER", "IIRC", "I", "didn", "t", "put", "a", "great", "deal", "of", "thought", "into", "the", "API", "I", "just", "wanted", "a", "quick", "way", "to", "resolve", "the", "problem", "NUMBER", "At", "some", "point", "I", "or", "someone", "else", "should", "probably", "review", "it", "but", "I", "don", "t", "remember", "any", "glaring", "problem", "NUMBER", "and", "submit", "it", "to", "the", "cmake", "maintainers", "No", "NUMBER", "They", "can", "grab", "it", "if", "they", "want", "I", "d", "even", "be", "willing", "to", "relicense", "it", "if", "necessary", "and", "if", "someone", "else", "wants", "to", "submit", "it", "that", "s", "fine", "but", "AFAICT", "the", "CMake", "people", "be", "entirely", "disinterested", "in", "anything", "to", "do", "with", "pkg", "config", "and", "I", "don", "t", "feel", "like", "banging", "my", "head", "against", "that", "particular", "wall", "NUMBER", "I", "would", "personally", "be", "more", "comfortable", "to", "rely", "on", "an", "official", "cmake", "module", "than", "to", "have", "to", "copy", "and", "maintain", "one", "in", "brotli", "NUMBER", "I", "don", "t", "really", "understand", "that", "but", "okay", "NUMBER", "I", "have", "fewer", "reservations", "about", "relying", "on", "in", "tree", "code", "than", "a", "module", "distributed", "by", "someone", "else", "which", "be", "likely", "to", "change", "depending", "on", "what", "version", "happens", "to", "be", "install", "NUMBER", "Furthermore", "a", "local", "copy", "means", "there", "be", "no", "need", "to", "bump", "the", "cmake", "dependency", "to", "get", "support", "for", "it", "and", "any", "bug", "can", "be", "fix", "immediately", "instead", "of", "bumping", "the", "dependency", "again", "NUMBER", "IIRC", "when", "I", "put", "together", "Brotli", "s", "CMake", "stuff", "it", "worked", "all", "the", "way", "back", "to", "NUMBER", "which", "be", "the", "version", "shipped", "with", "Solaris", "NUMBER", "NUMBER", "A", "lot", "of", "CI", "providers", "including", "Travis", "and", "Drone", "NUMBER", "io", "use", "Ubuntu", "NUMBER", "which", "only", "has", "CMake", "NUMBER", "so", "support", "older", "version", "of", "CMake", "be", "important", "NUMBER", "In", "any", "case", "the", "configure_file", "way", "seems", "a", "reasonable", "and", "simple", "option", "even", "if", "it", "s", "only", "for", "the", "short", "term", "NUMBER", "Using", "the", "module", "be", "a", "simple", "option", "too", "write", "it", "wasn", "t", "but", "that", "s", "already", "do", "NUMBER", "It", "may", "not", "be", "pretty", "but", "AFAIK", "it", "works", "perfectly", "and", "IMHO", "the", "benefit", "of", "shipping", "a", "correct", "pkg", "config", "file", "vastly", "outweighs", "any", "concerns", "about", "copying", "the", "module", "but", "since", "Brotli", "isn", "t", "my", "project", "that", "s", "not", "my", "decision", "to", "make", "NUMBER", "Note", "that", "it", "would", "also", "be", "possible", "to", "copy", "some", "of", "the", "contents", "of", "the", "file", "into", "Brotli", "s", "CMakeLists", "NUMBER", "txt", "to", "avoid", "polluting", "the", "source", "tree", "NUMBER", "nemequ", "but", "AFAICT", "the", "CMake", "people", "be", "entirely", "disinterested", "in", "anything", "to", "do", "with", "pkg", "config", "I", "don", "t", "really", "understand", "that", "but", "okay", "NUMBER", "I", "have", "fewer", "reservations", "about", "relying", "on", "in", "tree", "code", "than", "a", "module", "distributed", "by", "someone", "else", "which", "be", "likely", "to", "change", "depending", "on", "what", "version", "happens", "to", "be", "install", "NUMBER", "Well", "my", "goal", "for", "the", "present", "GitHub", "issue", "be", "to", "have", "package", "for", "Brotli", "woff", "NUMBER", "shared", "libraries", "that", "can", "be", "use", "by", "several", "program", "instead", "of", "having", "multiple", "copies", "of", "Brotli", "woff", "NUMBER", "bundled", "in", "their", "source", "code", "in", "my", "case", "WebKit", "Gecko", "and", "maybe", "fontforge", "NUMBER", "Achieving", "this", "by", "copying", "a", "cmake", "module", "seems", "a", "bit", "contradictory", "to", "that", "principle", "IMHO", "the", "cmake", "module", "should", "really", "be", "upstreamed", "so", "that", "it", "can", "be", "use", "by", "all", "the", "projects", "that", "want", "pkg", "config", "support", "without", "having", "to", "copy", "it", "everywhere", "NUMBER", "Now", "if", "cmake", "devs", "don", "t", "care", "that", "s", "a", "bit", "problematic", "NUMBER", "Using", "the", "module", "be", "a", "simple", "option", "too", "write", "it", "wasn", "t", "but", "that", "s", "already", "do", "NUMBER", "It", "may", "not", "be", "pretty", "but", "AFAIK", "it", "works", "perfectly", "and", "IMHO", "the", "benefit", "of", "shipping", "a", "correct", "pkg", "config", "file", "vastly", "outweighs", "any", "concerns", "about", "copying", "the", "module", "but", "since", "Brotli", "isn", "t", "my", "project", "that", "s", "not", "my", "decision", "to", "make", "NUMBER", "Note", "that", "it", "would", "also", "be", "possible", "to", "copy", "some", "of", "the", "contents", "of", "the", "file", "into", "Brotli", "s", "CMakeLists", "NUMBER", "txt", "to", "avoid", "polluting", "the", "source", "tree", "NUMBER", "Note", "that", "Brotli", "be", "not", "my", "project", "either", "so", "I", "don", "t", "decide", "either", "NUMBER", "As", "I", "said", "my", "main", "goal", "be", "to", "have", "package", "for", "shared", "libraries", "in", "order", "to", "get", "rid", "of", "multiple", "copies", "in", "projects", "I", "work", "on", "NUMBER", "I", "don", "t", "really", "feel", "like", "submit", "a", "cmake", "module", "I", "did", "not", "write", "that", "I", "can", "not", "test", "the", "windows", "part", "I", "mean", "and", "whose", "author", "indicates", "it", "needs", "some", "clean", "up", "and", "review", "NUMBER", "However", "if", "you", "want", "to", "open", "a", "PR", "and", "if", "the", "windows", "stuff", "be", "very", "important", "for", "your", "then", "please", "do", "so", "Otherwise", "I", "think", "I", "ll", "just", "try", "the", "configure_file", "way", "when", "I", "have", "time", "NUMBER", "Achieving", "this", "by", "copying", "a", "cmake", "module", "seems", "a", "bit", "contradictory", "to", "that", "principle", "It", "s", "not", "really", "relate", "you", "don", "t", "have", "to", "copy", "the", "module", "into", "projects", "which", "use", "brotli", "it", "s", "just", "something", "for", "brotli", "s", "build", "system", "so", "it", "can", "output", "a", "correct", "pkg", "config", "file", "NUMBER", "Besides", "even", "if", "it", "was", "include", "in", "CMake", "s", "standard", "modules", "tomorrow", "it", "would", "be", "many", "years", "before", "brotli", "could", "really", "take", "advantage", "of", "it", "cmake", "NUMBER", "be", "just", "over", "NUMBER", "years", "old", "and", "we", "re", "still", "stuck", "with", "it", "if", "we", "want", "to", "support", "Solaris", "NUMBER", "cmake", "NUMBER", "be", "slightly", "under", "NUMBER", "years", "old", "by", "about", "NUMBER", "months", "and", "we", "re", "still", "stuck", "with", "it", "for", "Ubuntu", "NUMBER", "and", "by", "extension", "Travis", "Drone", "NUMBER", "io", "etc", "NUMBER", "Anyways", "I", "ll", "try", "to", "throw", "together", "a", "PR", "for", "all", "this", "stuff", "by", "next", "week", "NUMBER", "I", "need", "to", "check", "a", "few", "of", "the", "change", "which", "have", "be", "made", "to", "the", "CMake", "support", "anyways", "since", "I", "think", "they", "ll", "break", "Squash", "when", "I", "pull", "them", "in", "NUMBER", "It", "s", "not", "really", "relate", "you", "don", "t", "have", "to", "copy", "the", "module", "into", "projects", "which", "use", "brotli", "it", "s", "just", "something", "for", "brotli", "s", "build", "system", "so", "it", "can", "output", "a", "correct", "pkg", "config", "file", "NUMBER", "Indeed", "it", "s", "worse", "than", "just", "projects", "which", "use", "brotli", "What", "you", "be", "suggesting", "be", "that", "any", "cmake", "project", "that", "generates", "pkg", "config", "file", "BTW", "I", "plan", "to", "do", "the", "same", "work", "for", "woff", "NUMBER", "should", "not", "use", "a", "simple", "configure_file", "cmake", "command", "but", "copy", "your", "custom", "cmake", "module", "or", "at", "least", "the", "logic", "it", "contains", "NUMBER", "I", "m", "just", "stating", "the", "obvious", "rule", "that", "if", "some", "pattern", "appears", "in", "several", "projects", "it", "should", "be", "shared", "as", "much", "as", "possible", "rather", "than", "duplicate", "in", "each", "place", "NUMBER", "IMHO", "if", "generating", "pkg", "config", "file", "be", "something", "important", "for", "many", "cmake", "projects", "then", "a", "cmake", "command", "or", "module", "should", "be", "provide", "by", "the", "cmake", "developers", "NUMBER", "Besides", "even", "if", "it", "was", "include", "in", "CMake", "s", "standard", "modules", "tomorrow", "it", "would", "be", "many", "years", "before", "brotli", "could", "really", "take", "advantage", "of", "it", "True", "but", "I", "m", "not", "sure", "it", "s", "a", "strong", "reason", "against", "trying", "it", "NUMBER", "If", "I", "continue", "the", "parallel", "with", "libbrotli", "it", "will", "take", "time", "before", "the", "next", "version", "of", "brotli", "be", "release", "and", "before", "shared", "libraries", "be", "packaged", "in", "the", "various", "distros", "so", "that", "they", "can", "really", "be", "use", "by", "the", "projects", "that", "need", "brotli", "NUMBER", "But", "that", "do", "not", "prevent", "me", "from", "trying", "Anyways", "I", "ll", "try", "to", "throw", "together", "a", "PR", "for", "all", "this", "stuff", "by", "next", "week", "NUMBER", "I", "need", "to", "check", "a", "few", "of", "the", "change", "which", "have", "be", "made", "to", "the", "CMake", "support", "anyways", "since", "I", "think", "they", "ll", "break", "Squash", "when", "I", "pull", "them", "in", "NUMBER", "Thank", "you", "Ah", "okay", "I", "misunderstood", "your", "point", "NUMBER", "Looking", "at", "the", "issue", "globally", "instead", "of", "just", "what", "Brotli", "needs", "right", "now", "you", "re", "right", "it", "would", "be", "good", "to", "get", "support", "add", "to", "CMake", "eventually", "NUMBER", "I", "ll", "try", "to", "take", "a", "look", "at", "the", "module", "in", "the", "near", "future", "clean", "it", "up", "if", "need", "be", "and", "offer", "it", "up", "to", "the", "CMake", "people", "but", "I", "m", "not", "very", "confident", "about", "them", "accepting", "it", "NUMBER", "eustas", "do", "you", "have", "an", "opinion", "on", "having", "the", "module", "in", "a", "separate", "file", "vs", "NUMBER", "merge", "it", "into", "Brotli", "s", "CMakeLists", "NUMBER", "txt", "I", "don", "t", "really", "care", "NUMBER", "I", "put", "together", "some", "patches", "for", "this", "over", "the", "weekend", "LINK", "NUMBER", "I", "want", "to", "do", "a", "bit", "more", "test", "before", "I", "submit", "a", "PR", "but", "in", "the", "meantime", "comments", "welcome", "NUMBER", "Okay", "I", "rebased", "my", "patches", "and", "did", "some", "more", "test", "AFAICT", "everything", "works", "as", "expected", "NUMBER", "PR", "file", "as", "NUMBER", "I", "believe", "that", "once", "merge", "this", "issue", "should", "be", "resolve", "NUMBER", "Am", "I", "miss", "anything", "Great", "thank", "you", "nemequ", "Can", "we", "close", "NUMBER", "too", "now", "Can", "we", "close", "NUMBER", "too", "now", "_Maybe_", "NUMBER", "I", "ll", "respond", "there", "with", "details", "NUMBER", "For", "people", "interested", "in", "having", "separate", "pc", "file", "I", "opened", "a", "follow", "issue", "NUMBER", "I", "have", "write", "a", "simple", "test", "LINK", "that", "breaks", "HTML", "into", "chunks", "then", "compresses", "then", "decompressed", "NUMBER", "Somehow", "there", "be", "a", "difference", "between", "chunks", "that", "come", "in", "and", "chunks", "that", "come", "out", "LINK", "NUMBER", "My", "understanding", "that", "calling", "_WriteBrotliData", "NUMBER", "force_flush", "true", "NUMBER", "_", "should", "not", "have", "this", "effect", "NUMBER", "I", "was", "also", "test", "against", "NUMBER", "release", "NUMBER", "Any", "ideas", "how", "to", "cause", "the", "compressor", "to", "not", "buffer", "things", "like", "this", "Thanks", "for", "file", "this", "issue", "NUMBER", "cc", "jyrkialakuijala", "eustas", "Two", "issue", "Solaris", "NUMBER", "with", "Solaris", "Studio", "NUMBER", "miss", "basic_string", "see", "LINK", "storage", "solaris", "cmp", "stlport", "libcstd", "NUMBER", "html", "miss", "__restrict", "see", "LINK", "autoconf", "NUMBER", "NUMBER", "msg", "NUMBER", "html", "Full", "build", "log", "below", "NUMBER", "opt", "SunProd", "studio", "NUMBER", "u", "NUMBER", "solarisstudio", "NUMBER", "bin", "cc", "xc", "NUMBER", "m", "NUMBER", "I", "usr", "lib", "NUMBER", "R", "include", "DNDEBUG", "DBROTLI_BUILD_PORTABLE", "include", "config", "NUMBER", "h", "KPIC", "xlibmieee", "c", "dec", "bit_reader", "NUMBER", "c", "o", "dec", "bit_reader", "NUMBER", "o", "opt", "SunProd", "studio", "NUMBER", "u", "NUMBER", "solarisstudio", "NUMBER", "bin", "cc", "xc", "NUMBER", "m", "NUMBER", "I", "usr", "lib", "NUMBER", "R", "include", "DNDEBUG", "DBROTLI_BUILD_PORTABLE", "include", "config", "NUMBER", "h", "KPIC", "xlibmieee", "c", "dec", "decode", "NUMBER", "c", "o", "dec", "decode", "NUMBER", "o", "dec", "decode", "NUMBER", "c", "line", "NUMBER", "warning", "statement", "not", "reached", "opt", "SunProd", "studio", "NUMBER", "u", "NUMBER", "solarisstudio", "NUMBER", "bin", "cc", "xc", "NUMBER", "m", "NUMBER", "I", "usr", "lib", "NUMBER", "R", "include", "DNDEBUG", "DBROTLI_BUILD_PORTABLE", "include", "config", "NUMBER", "h", "KPIC", "xlibmieee", "c", "dec", "dictionary", "NUMBER", "c", "o", "dec", "dictionary", "NUMBER", "o", "opt", "SunProd", "studio", "NUMBER", "u", "NUMBER", "solarisstudio", "NUMBER", "bin", "cc", "xc", "NUMBER", "m", "NUMBER", "I", "usr", "lib", "NUMBER", "R", "include", "DNDEBUG", "DBROTLI_BUILD_PORTABLE", "include", "config", "NUMBER", "h", "KPIC", "xlibmieee", "c", "dec", "huffman", "NUMBER", "c", "o", "dec", "huffman", "NUMBER", "o", "opt", "SunProd", "studio", "NUMBER", "u", "NUMBER", "solarisstudio", "NUMBER", "bin", "cc", "xc", "NUMBER", "m", "NUMBER", "I", "usr", "lib", "NUMBER", "R", "include", "DNDEBUG", "DBROTLI_BUILD_PORTABLE", "include", "config", "NUMBER", "h", "KPIC", "xlibmieee", "c", "dec", "state", "NUMBER", "c", "o", "dec", "state", "NUMBER", "o", "ar", "rcs", "libdec", "NUMBER", "a", "dec", "bit_reader", "NUMBER", "o", "dec", "decode", "NUMBER", "o", "dec", "dictionary", "NUMBER", "o", "dec", "huffman", "NUMBER", "o", "dec", "state", "NUMBER", "o", "opt", "SunProd", "studio", "NUMBER", "u", "NUMBER", "solarisstudio", "NUMBER", "bin", "CC", "m", "NUMBER", "I", "usr", "lib", "NUMBER", "R", "include", "DNDEBUG", "KPIC", "g", "c", "enc", "backward_references", "NUMBER", "cc", "o", "enc", "backward_references", "NUMBER", "o", "enc", "NUMBER", "NUMBER", "NUMBER", "transform", "NUMBER", "h", "line", "NUMBER", "Error", "Could", "not", "find", "a", "match", "for", "std", "string", "basic_string", "const", "unsigned", "char", "const", "unsigned", "char", "needed", "in", "brotli", "TransformWord", "brotli", "WordTransformType", "const", "unsigned", "char", "unsigned", "long", "NUMBER", "enc", "NUMBER", "NUMBER", "NUMBER", "transform", "NUMBER", "h", "line", "NUMBER", "Error", "Could", "not", "find", "a", "match", "for", "std", "string", "basic_string", "const", "unsigned", "char", "const", "unsigned", "char", "needed", "in", "brotli", "TransformWord", "brotli", "WordTransformType", "const", "unsigned", "char", "unsigned", "long", "NUMBER", "enc", "NUMBER", "NUMBER", "NUMBER", "transform", "NUMBER", "h", "line", "NUMBER", "Error", "Could", "not", "find", "a", "match", "for", "std", "string", "basic_string", "const", "unsigned", "char", "const", "unsigned", "char", "needed", "in", "brotli", "TransformWord", "brotli", "WordTransformType", "const", "unsigned", "char", "unsigned", "long", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Error", "expected", "instead", "of", "data", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Error", "be", "not", "defined", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Error", "The", "function", "StoreAndFindMatches", "must", "have", "a", "prototype", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Error", "The", "function", "StoreAndFindMatches", "must", "have", "a", "prototype", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Error", "be", "not", "defined", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Where", "While", "specializing", "brotli", "HashLongestMatchQuickly", "TAG", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Where", "Specialized", "in", "non", "template", "code", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Error", "be", "not", "defined", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Where", "While", "specializing", "brotli", "HashLongestMatch", "TAG", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Where", "Specialized", "in", "non", "template", "code", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Error", "expected", "instead", "of", "ring_buffer", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Where", "While", "specializing", "brotli", "HashLongestMatchQuickly", "TAG", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Where", "Specialized", "in", "non", "template", "code", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Error", "be", "not", "defined", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Where", "While", "specializing", "brotli", "HashLongestMatchQuickly", "TAG", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Where", "Specialized", "in", "non", "template", "code", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "line", "NUMBER", "Error", "expected", "instead", "of", "ring_buffer", "NUMBER", "much", "more", "I_HAS_UBFX", "to", "force", "C", "compilers", "to", "interpret", "them", "as", "booleans", "and", "avoid", "constant", "logical", "operand", "warnings", "NUMBER", "Hi", "NUMBER", "I", "thought", "I", "had", "already", "sign", "Google", "CLA", "when", "I", "contributed", "to", "Chromium", "but", "maybe", "that", "s", "a", "different", "one", "NUMBER", "I", "ll", "check", "that", "and", "come", "back", "to", "you", "later", "NUMBER", "eustas", "OK", "I", "ve", "update", "the", "commit", "author", "to", "use", "the", "address", "of", "my", "employer", "which", "already", "sign", "a", "corporate", "CLA", "NUMBER", "LGTM", "Related", "to", "the", "NUMBER", "ffc", "NUMBER", "df", "commit", "NUMBER", "eustas", "I", "ve", "sign", "the", "CLA", "as", "describe", "in", "CONTRIBUTING", "NUMBER", "md", "a", "few", "minutes", "ago", "NUMBER", "Sorry", "for", "be", "a", "newbie", "NUMBER", "I", "now", "made", "a", "branch", "caller", "dumper", "where", "I", "can", "commit", "developments", "of", "the", "file", "Please", "ignore", "the", "other", "pull", "request", "it", "contains", "old", "code", "NUMBER", "Will", "do", "NUMBER", "Sorry", "for", "the", "late", "reaction", "NUMBER", "Op", "NUMBER", "dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "schreef", "Eugene", "Kliuchnikov", "TAG", "Very", "nice", "and", "elegant", "Would", "you", "mind", "moving", "it", "to", "research", "folder", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "I", "see", "you", "already", "did", "that", "NUMBER", "Thanks", "as", "I", "was", "still", "trying", "to", "figure", "out", "how", "to", "do", "that", "NUMBER", "I", "ll", "have", "to", "work", "on", "that", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "NUMBER", "NUMBER", "Eugene", "Kliuchnikov", "TAG", "Very", "nice", "and", "elegant", "Would", "you", "mind", "moving", "it", "to", "research", "folder", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "J", "NUMBER", "N", "NUMBER", "E", "NUMBER", "Bos", "Brotli", "fail", "to", "build", "in", "Gecko", "when", "Werror", "Wconstant", "logical", "operand", "be", "enable", "NUMBER", "NUMBER", "home", "ckerschb", "moz", "mc", "obj", "dbg", "dist", "include", "NUMBER", "bit_reader", "NUMBER", "h", "NUMBER", "NUMBER", "error", "use", "of", "logical", "with", "constant", "operand", "Werror", "Wconstant", "logical", "operand", "NUMBER", "NUMBER", "if", "IS_CONSTANT", "n", "BROTLI_HAS_UBFX", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "home", "ckerschb", "moz", "mc", "obj", "dbg", "dist", "include", "NUMBER", "bit_reader", "NUMBER", "h", "NUMBER", "NUMBER", "note", "use", "for", "a", "bitwise", "operation", "NUMBER", "NUMBER", "if", "IS_CONSTANT", "n", "BROTLI_HAS_UBFX", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "error", "generate", "NUMBER", "See", "LINK", "_bug", "NUMBER", "cgi", "id", "NUMBER", "I", "did", "not", "try", "it", "but", "from", "LINK", "one", "workaround", "might", "be", "to", "add", "a", "cast", "to", "an", "int", "in", "the", "definitions", "of", "BROTLI_HAS_UBFX", "and", "IS_CONSTANT", "x", "This", "appears", "in", "Mozilla", "MacOSX", "buildbot", "search", "constant", "logical", "operand", "in", "the", "raw", "logs", "NUMBER", "I", "tried", "casting", "to", "an", "int", "but", "that", "do", "not", "help", "LINK", "job_id", "NUMBER", "repo", "try", "I", "just", "push", "LINK", "jobs", "repo", "try", "revision", "NUMBER", "d", "NUMBER", "b", "NUMBER", "b", "NUMBER", "let", "s", "see", "if", "that", "change", "something", "BTW", "I", "can", "not", "reproduce", "the", "problem", "on", "my", "Linux", "system", "either", "and", "my", "gcc", "do", "not", "recognize", "the", "constant", "logical", "operand", "warning", "NUMBER", "OK", "the", "double", "exclamation", "mark", "trick", "seems", "to", "work", "LINK", "jobs", "repo", "try", "revision", "NUMBER", "ee", "NUMBER", "d", "NUMBER", "c", "NUMBER", "selectedJob", "NUMBER", "LINK", "build", "fred", "NUMBER", "wang", "free", "NUMBER", "fr", "NUMBER", "ee", "NUMBER", "d", "NUMBER", "c", "NUMBER", "f", "NUMBER", "b", "NUMBER", "deffc", "NUMBER", "cd", "NUMBER", "b", "NUMBER", "ff", "NUMBER", "fba", "NUMBER", "f", "try", "macosx", "NUMBER", "try", "macosx", "NUMBER", "bm", "NUMBER", "try", "NUMBER", "build", "NUMBER", "txt", "NUMBER", "gz", "The", "previous", "changeset", "was", "LINK", "jobs", "repo", "try", "revision", "NUMBER", "eb", "NUMBER", "e", "NUMBER", "da", "NUMBER", "LINK", "build", "jnicol", "mozilla", "NUMBER", "com", "NUMBER", "eb", "NUMBER", "e", "NUMBER", "da", "NUMBER", "ac", "NUMBER", "ca", "NUMBER", "f", "NUMBER", "cea", "NUMBER", "a", "NUMBER", "d", "NUMBER", "a", "try", "macosx", "NUMBER", "try", "macosx", "NUMBER", "bm", "NUMBER", "try", "NUMBER", "build", "NUMBER", "txt", "NUMBER", "gz", "NUMBER", "NUMBER", "NUMBER", "INFO", "In", "file", "include", "from", "build", "slave", "try", "m", "NUMBER", "NUMBER", "build", "src", "obj", "firefox", "x", "NUMBER", "_", "NUMBER", "modules", "woff", "NUMBER", "Unified_cpp_modules_woff", "NUMBER", "cpp", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "In", "file", "include", "from", "build", "slave", "try", "m", "NUMBER", "NUMBER", "build", "src", "modules", "woff", "NUMBER", "src", "woff", "NUMBER", "_dec", "NUMBER", "cc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "In", "file", "include", "from", "build", "slave", "try", "m", "NUMBER", "NUMBER", "build", "src", "obj", "firefox", "x", "NUMBER", "_", "NUMBER", "dist", "include", "NUMBER", "decode", "NUMBER", "h", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "In", "file", "include", "from", "build", "slave", "try", "m", "NUMBER", "NUMBER", "build", "src", "obj", "firefox", "x", "NUMBER", "_", "NUMBER", "dist", "include", "NUMBER", "state", "NUMBER", "h", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "Warning", "Wconstant", "logical", "operand", "in", "build", "slave", "try", "m", "NUMBER", "NUMBER", "build", "src", "obj", "firefox", "x", "NUMBER", "_", "NUMBER", "dist", "include", "bit_reader", "NUMBER", "h", "use", "of", "logical", "with", "constant", "operand", "NUMBER", "NUMBER", "NUMBER", "INFO", "build", "slave", "try", "m", "NUMBER", "NUMBER", "build", "src", "obj", "firefox", "x", "NUMBER", "_", "NUMBER", "dist", "include", "NUMBER", "bit_reader", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "use", "of", "logical", "with", "constant", "operand", "Wconstant", "logical", "operand", "NUMBER", "NUMBER", "NUMBER", "INFO", "if", "__builtin_constant_p", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "NUMBER", "NUMBER", "NUMBER", "INFO", "build", "slave", "try", "m", "NUMBER", "NUMBER", "build", "src", "obj", "firefox", "x", "NUMBER", "_", "NUMBER", "dist", "include", "NUMBER", "bit_reader", "NUMBER", "h", "NUMBER", "NUMBER", "note", "use", "for", "a", "bitwise", "operation", "NUMBER", "NUMBER", "NUMBER", "INFO", "if", "__builtin_constant_p", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "NUMBER", "NUMBER", "NUMBER", "INFO", "NUMBER", "NUMBER", "NUMBER", "INFO", "NUMBER", "warning", "generate", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "libwoff", "NUMBER", "a", "NUMBER", "desc", "NUMBER", "NUMBER", "NUMBER", "INFO", "rm", "f", "libwoff", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "INFO", "build", "slave", "try", "m", "NUMBER", "NUMBER", "build", "src", "obj", "firefox", "x", "NUMBER", "_", "NUMBER", "_virtualenv", "bin", "python", "build", "slave", "try", "m", "NUMBER", "NUMBER", "build", "src", "config", "expandlibs_gen", "NUMBER", "py", "o", "libwoff", "NUMBER", "a", "NUMBER", "desc", "Unified_cpp_modules_woff", "NUMBER", "o", "It", "seems", "you", "ve", "miss", "define", "IS_CONSTANT", "x", "__builtin_constant_p", "x", "The", "constant", "logical", "operand", "warning", "only", "seems", "to", "complain", "about", "constant", "operands", "but", "I", "guess", "it", "s", "safe", "to", "do", "that", "too", "NUMBER", "OK", "I", "just", "opened", "NUMBER", "The", "code", "in", "master", "works", "well", "on", "Linux", "OSX", "not", "so", "well", "on", "Windows", "NUMBER", "This", "PR", "makes", "it", "work", "for", "all", "NUMBER", "main", "platforms", "NUMBER", "Props", "to", "NUMBER", "for", "giving", "helpful", "hints", "Tested", "on", "OSX", "NUMBER", "with", "clang", "NUMBER", "and", "Windows", "NUMBER", "with", "msys", "NUMBER", "gcc", "NUMBER", "This", "be", "not", "a", "complaint", "but", "more", "of", "a", "teaser", "NUMBER", "In", "case", "someone", "in", "here", "try", "to", "squeeze", "the", "last", "drop", "out", "of", "the", "compressor", "I", "find", "after", "trying", "about", "everything", "where", "brotli", "consistently", "beats", "both", "gzip", "and", "bzip", "an", "easy", "way", "to", "generate", "strings", "where", "both", "bzip", "NUMBER", "and", "gzip", "do", "produce", "shorter", "strings", "than", "brotli", "NUMBER", "Different", "from", "earlier", "report", "these", "be", "pretty", "short", "I", "be", "convinced", "that", "there", "must", "be", "a", "way", "to", "get", "these", "compressed", "more", "efficiently", "so", "there", "must", "be", "some", "strange", "reason", "the", "compressor", "doesn", "t", "this", "NUMBER", "Edited", "version", "NUMBER", "do", "a", "better", "job", "than", "claimed", "here", "NUMBER", "These", "numbers", "be", "for", "NUMBER", "Still", "there", "be", "room", "for", "improvement", "see", "below", "NUMBER", "In", "English", "make", "a", "list", "of", "random", "NUMBER", "bit", "patterns", "write", "out", "in", "ASCII", "NUMBER", "In", "Python", "NUMBER", "ts", "n", "NUMBER", "join", "NUMBER", "b", "n", "NUMBER", "format", "random", "NUMBER", "getrandbits", "NUMBER", "for", "i", "in", "range", "NUMBER", "len", "codecs", "NUMBER", "encode", "bytes", "ts", "ascii", "zip", "NUMBER", "len", "codecs", "NUMBER", "encode", "bytes", "ts", "ascii", "bz", "NUMBER", "NUMBER", "len", "brotli", "NUMBER", "compress", "ts", "NUMBER", "I", "hope", "this", "will", "inspire", "someone", "NUMBER", "Sorry", "but", "I", "was", "use", "NUMBER", "Version", "NUMBER", "fares", "better", "but", "still", "doesn", "t", "beat", "bz", "NUMBER", "ts", "n", "NUMBER", "join", "NUMBER", "b", "n", "NUMBER", "format", "random", "NUMBER", "getrandbits", "NUMBER", "for", "i", "in", "range", "NUMBER", "len", "codecs", "NUMBER", "encode", "bytes", "ts", "ascii", "zip", "NUMBER", "len", "codecs", "NUMBER", "encode", "bytes", "ts", "ascii", "bz", "NUMBER", "NUMBER", "len", "brotli", "NUMBER", "compress", "ts", "NUMBER", "You", "be", "absolutely", "right", "of", "course", "NUMBER", "I", "was", "write", "this", "because", "i", "was", "playing", "with", "this", "disassembler", "and", "I", "was", "trying", "to", "see", "which", "things", "compressed", "well", "and", "which", "didn", "t", "NUMBER", "You", "can", "do", "a", "lot", "with", "clever", "block", "types", "and", "well", "chosen", "zero", "out", "one", "bit", "distance", "and", "insert", "copy", "encoding", "and", "sometimes", "with", "contexts", "NUMBER", "What", "I", "find", "miss", "be", "a", "way", "to", "repeat", "the", "literal", "length", "without", "having", "to", "reencode", "the", "extra", "bits", "with", "distance", "you", "can", "use", "last", "to", "handle", "that", "NUMBER", "I", "write", "a", "small", "program", "that", "produces", "the", "shortest", "compression", "i", "could", "think", "of", "in", "that", "case", "see", "my", "github", "fork", "NUMBER", "From", "all", "my", "playing", "and", "struggling", "I", "find", "two", "ways", "to", "squeeze", "the", "compression", "to", "the", "limit", "Allow", "for", "more", "flexible", "contexts", "make", "a", "way", "to", "say", "same", "literal", "length", "NUMBER", "A", "context", "based", "on", "the", "character", "type", "NUMBER", "characters", "ago", "for", "example", "would", "solve", "all", "problem", "apart", "from", "creating", "lots", "of", "problem", "of", "course", "NUMBER", "NUMBER", "Thanks", "for", "inspiring", "me", "with", "this", "great", "compressor", "Jurjen", "Op", "NUMBER", "feb", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "schreef", "eustas", "notifications", "github", "NUMBER", "com", "This", "seems", "to", "be", "limitation", "of", "encoding", "NUMBER", "bzip", "uses", "BWT", "and", "thus", "wins", "from", "the", "input", "format", "n", "and", "get", "grouped", "NUMBER", "Thus", "it", "gets", "close", "to", "conventional", "compressors", "limit", "about", "NUMBER", "bits", "per", "integer", "use", "range", "code", "would", "have", "improved", "the", "compression", "ratio", "NUMBER", "And", "of", "course", "this", "be", "much", "bigger", "than", "true", "entropy", "NUMBER", "bits", "per", "integer", "NUMBER", "BTW", "if", "we", "remove", "spaces", "and", "new", "lines", "ts", "NUMBER", "join", "NUMBER", "b", "NUMBER", "format", "random", "NUMBER", "getrandbits", "NUMBER", "for", "i", "in", "range", "NUMBER", "then", "print", "len", "codecs", "NUMBER", "encode", "ts", "zip", "NUMBER", "print", "len", "codecs", "NUMBER", "encode", "ts", "bz", "NUMBER", "NUMBER", "print", "len", "brotli", "NUMBER", "compress", "ts", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "firefox", "NUMBER", "recently", "shipped", "with", "brotli", "support", "NUMBER", "On", "Alpine", "Linux", "which", "uses", "musl", "libc", "it", "crashed", "LINK", "_bug", "NUMBER", "cgi", "id", "NUMBER", "due", "to", "it", "was", "not", "build", "with", "BROTLI_BUILD_PORTABLE", "set", "NUMBER", "or", "BROTLI_SAFE_MEMMOVE", "to", "be", "sepcific", "There", "was", "no", "warning", "and", "there", "was", "no", "way", "to", "catch", "it", "til", "after", "the", "fact", "that", "it", "had", "happened", "NUMBER", "it", "wouldn", "t", "be", "caught", "if", "we", "wouldn", "t", "build", "with", "FORTIFY_SOURCE", "NUMBER", "I", "would", "recommend", "that", "you", "flip", "the", "default", "setting", "around", "and", "by", "default", "build", "with", "BROTLI_BUILD_PORTABLE", "or", "change", "it", "to", "BROTLI_BUILD_NONPORTABLE", "because", "the", "memcpy", "implementation", "be", "outside", "of", "your", "control", "you", "can", "not", "verify", "or", "warn", "if", "things", "gets", "miscompiled", "and", "relying", "on", "undefined", "behavior", "be", "generally", "a", "bad", "idea", "NUMBER", "Some", "compiler", "warnings", "gcc", "with", "c", "NUMBER", "on", "Fedora", "g", "I", "data", "gannet", "ripley", "R", "R", "devel", "include", "DNDEBUG", "I", "usr", "local", "include", "fpic", "g", "O", "NUMBER", "Wall", "pedantic", "mtune", "native", "c", "enc", "streams", "NUMBER", "cc", "o", "enc", "streams", "NUMBER", "o", "In", "file", "include", "from", "enc", "encode", "NUMBER", "h", "NUMBER", "NUMBER", "from", "wrapper", "NUMBER", "cc", "NUMBER", "enc", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "invoking", "macro", "length", "argument", "NUMBER", "empty", "macro", "argument", "be", "undefined", "in", "ISO", "C", "NUMBER", "Wpedantic", "size_t", "length", "const", "enc", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "invoking", "macro", "length", "argument", "NUMBER", "empty", "macro", "argument", "be", "undefined", "in", "ISO", "C", "NUMBER", "Wpedantic", "return", "code", "code", "length", "clang", "on", "Fedora", "enc", "brotli_bit_stream", "NUMBER", "cc", "NUMBER", "NUMBER", "error", "use", "of", "undeclared", "identifier", "malloc", "static_cast", "TAG", "malloc", "max_tree_size", "sizeof", "HuffmanTree", "enc", "brotli_bit_stream", "NUMBER", "cc", "NUMBER", "NUMBER", "error", "use", "of", "undeclared", "identifier", "free", "free", "tree", "NUMBER", "error", "generate", "NUMBER", "data", "gannet", "ripley", "R", "R", "clang", "etc", "Makeconf", "NUMBER", "recipe", "for", "target", "enc", "brotli_bit_stream", "NUMBER", "o", "fail", "make", "NUMBER", "enc", "brotli_bit_stream", "NUMBER", "o", "Error", "NUMBER", "enc", "encode", "NUMBER", "cc", "NUMBER", "NUMBER", "error", "use", "of", "undeclared", "identifier", "free", "free", "commands_", "enc", "encode", "NUMBER", "cc", "NUMBER", "NUMBER", "error", "use", "of", "undeclared", "identifier", "realloc", "static_cast", "TAG", "realloc", "commands_", "sizeof", "Command", "newsize", "NUMBER", "error", "generate", "NUMBER", "data", "gannet", "ripley", "R", "R", "clang", "etc", "Makeconf", "NUMBER", "recipe", "for", "target", "enc", "encode", "NUMBER", "o", "fail", "make", "NUMBER", "enc", "encode", "NUMBER", "o", "Error", "NUMBER", "enc", "encode_parallel", "NUMBER", "cc", "NUMBER", "NUMBER", "error", "use", "of", "undeclared", "identifier", "malloc", "malloc", "sizeof", "Command", "input_size", "NUMBER", "NUMBER", "enc", "encode_parallel", "NUMBER", "cc", "NUMBER", "NUMBER", "error", "use", "of", "undeclared", "identifier", "free", "free", "commands", "NUMBER", "error", "generate", "NUMBER", "Solaris", "Studio", "NUMBER", "cc", "xc", "NUMBER", "I", "home", "ripley", "R", "cc", "include", "DNDEBUG", "I", "usr", "local", "include", "DBROTLI_BUILD_PORTABLE", "include", "config", "NUMBER", "h", "KPIC", "O", "xlibmieee", "xtarget", "native", "c", "dec", "decode", "NUMBER", "c", "o", "dec", "decode", "NUMBER", "o", "dec", "decode", "NUMBER", "c", "line", "NUMBER", "warning", "statement", "not", "reached", "gcc", "NUMBER", "on", "Windows", "enc", "encode", "NUMBER", "cc", "o", "enc", "encode", "NUMBER", "o", "enc", "encode", "NUMBER", "cc", "In", "member", "function", "bool", "brotli", "BrotliCompressor", "WriteBrotliData", "bool", "bool", "size_t", "uint", "NUMBER", "_t", "enc", "encode", "NUMBER", "cc", "NUMBER", "NUMBER", "warning", "comparison", "between", "sign", "and", "unsigned", "integer", "expressions", "Wsign", "compare", "Solaris", "Lots", "of", "these", "LINK", "project", "NUMBER", "org", "nosvn", "R", "NUMBER", "check", "r", "patched", "solaris", "x", "NUMBER", "brotli", "NUMBER", "install", "NUMBER", "html", "Thank", "you", "NUMBER", "Let", "me", "know", "if", "I", "can", "help", "test", "something", "NUMBER", "Full", "build", "logs", "be", "here", "by", "the", "way", "LINK", "project", "NUMBER", "org", "web", "checks", "check_results_brotli", "NUMBER", "html", "Any", "update", "Need", "to", "fix", "these", "issue", "downstream", "NUMBER", "FWIW", "this", "causes", "compile", "error", "on", "FreeBSD", "NUMBER", "ref", "LINK", "NUMBER", "Still", "get", "a", "warning", "in", "C", "NUMBER", "g", "I", "usr", "share", "R", "include", "DNDEBUG", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "Wno", "unuse", "pedantic", "c", "wrappe", "r", "NUMBER", "cc", "o", "wrapper", "NUMBER", "o", "In", "file", "include", "from", "enc", "encode", "NUMBER", "h", "NUMBER", "NUMBER", "from", "wrapper", "NUMBER", "cc", "NUMBER", "enc", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "invoking", "macro", "length", "argument", "NUMBER", "empty", "macro", "argument", "be", "undefined", "in", "ISO", "C", "NUMBER", "and", "ISO", "C", "NUMBER", "enable", "by", "default", "return", "code", "code", "length", "And", "dec", "decode", "NUMBER", "c", "line", "NUMBER", "warning", "statement", "not", "reached", "Oh", "that", "might", "be", "in", "my", "bindings", "actually", "NUMBER", "Sorry", "for", "that", "NUMBER", "Thanks", "yes", "I", "was", "including", "a", "header", "file", "before", "brotli", "which", "apparently", "had", "a", "length", "macro", "NUMBER", "Not", "sure", "if", "there", "be", "a", "sensible", "way", "to", "avoid", "such", "problem", "NUMBER", "I", "be", "open", "a", "separate", "issue", "for", "Solaris", "problem", "NUMBER", "This", "would", "be", "very", "useful", "for", "dealing", "with", "something", "like", "NUMBER", "tar", "NUMBER", "br", "fies", "NUMBER", "That", "s", "very", "helpful", "thank", "you", "Do", "you", "have", "any", "idea", "when", "the", "new", "framing", "could", "be", "introduce", "And", "how", "to", "transition", "content", "and", "clients", "over", "to", "the", "new", "format", "A", "framing", "or", "file", "format", "of", "some", "type", "sounds", "great", "NUMBER", "Is", "there", "a", "process", "through", "which", "people", "be", "peer", "reviewing", "how", "the", "new", "framing", "format", "be", "be", "designed", "Has", "any", "thought", "be", "given", "to", "possibly", "re", "use", "a", "framing", "format", "like", "the", "XZ", "file", "format", "LINK", "file", "format", "NUMBER", "txt", "where", "brotli", "be", "just", "one", "of", "the", "filter", "chains", "that", "can", "be", "use", "The", "decompression", "code", "support", "use", "custom", "function", "instead", "of", "malloc", "free", "to", "allocate", "memory", "It", "would", "be", "great", "to", "see", "the", "same", "thing", "from", "the", "compression", "code", "NUMBER", "When", "compile", "on", "OSX", "I", "get", "this", "python", "brotlimodule", "NUMBER", "cc", "NUMBER", "NUMBER", "warning", "comparison", "of", "constant", "NUMBER", "with", "expression", "of", "type", "BrotliParams", "Mode", "be", "always", "true", "Wtautological", "constant", "out", "of", "range", "compare", "I", "suspect", "the", "cast", "of", "the", "out", "of", "range", "NUMBER", "to", "an", "enum", "be", "undefined", "behaviour", "in", "C", "but", "I", "m", "not", "certain", "NUMBER", "cc", "khaledhosny", "Using", "brotli", "from", "master", "sometime", "when", "I", "call", "BrotliDecompressBufferStreaming", "BrotliDecompressStream", "it", "sets", "available_in", "to", "NUMBER", "This", "be", "happening", "while", "the", "result", "code", "be", "BROTLI_RESULT_SUCCESS", "so", "according", "to", "the", "documentation", "comment", "this", "shouldn", "t", "be", "possible", "NUMBER", "and", "it", "s", "not", "clear", "if", "how", "I", "should", "deal", "with", "this", "since", "it", "appears", "to", "be", "a", "bug", "I", "m", "guessing", "I", "can", "t", "make", "any", "assumptions", "as", "to", "there", "be", "any", "way", "to", "recover", "from", "this", "This", "didn", "t", "occur", "with", "a", "month", "or", "so", "older", "master", "brotli", "but", "that", "had", "other", "issue", "BrotliDecompressBufferStreaming", "always", "returning", "huge", "NUMBER", "mb", "chunk", "sizes", "Here", "be", "the", "use", "case", "a", "continuous", "data", "stream", "e", "NUMBER", "g", "NUMBER", "sensor", "data", "needs", "to", "be", "compressed", "into", "chunked", "fix", "length", "records", "NUMBER", "Each", "record", "needs", "to", "be", "independent", "meaning", "no", "compression", "state", "be", "shared", "or", "otherwise", "linked", "to", "neighbor", "records", "NUMBER", "The", "current", "C", "interface", "for", "encoding", "specifically", "BrotliCompressBuffer", "do", "not", "allow", "write", "to", "a", "limited", "size", "buffer", "i", "NUMBER", "e", "NUMBER", "the", "output", "buffer", "appears", "to", "be", "required", "to", "hold", "the", "compressed", "output", "of", "the", "entire", "input", "buffer", "NUMBER", "It", "be", "possible", "that", "the", "C", "interface", "allows", "this", "and", "I", "cannot", "figure", "out", "how", "to", "write", "a", "C", "wrapper", "for", "it", "NUMBER", "A", "bit", "more", "about", "my", "use", "case", "I", "be", "assessing", "whether", "brotli", "would", "be", "usable", "as", "an", "encoding", "of", "data", "samples", "in", "an", "international", "standard", "for", "time", "series", "seismic", "data", "NUMBER", "The", "length", "of", "encoded", "data", "segments", "be", "approximately", "NUMBER", "to", "NUMBER", "bytes", "NUMBER", "Any", "suggestions", "within", "this", "context", "would", "be", "appreciated", "NUMBER", "I", "find", "what", "I", "was", "looking", "for", "in", "the", "form", "of", "the", "zlib", "esque", "streaming", "interface", "use", "pure", "C", "created", "by", "Cloudflare", "for", "a", "NGINX", "filter", "module", "LINK", "_brotli_module", "Such", "an", "interface", "include", "in", "this", "reference", "repository", "would", "be", "very", "valuable", "NUMBER", "P", "NUMBER", "S", "NUMBER", "For", "what", "it", "be", "worth", "I", "also", "vote", "for", "a", "more", "traditional", "library", "approach", "such", "do", "by", "Cloudflare", "in", "the", "sense", "of", "creating", "libbrotli", "NUMBER", "a", "and", "provide", "brotli", "NUMBER", "h", "NUMBER", "Continuing", "the", "digression", "following", "as", "many", "of", "the", "points", "in", "the", "Tao", "of", "good", "compression", "API", "LINK", "lossless", "codec", "api", "design", "NUMBER", "html", "will", "increase", "usability", "increase", "usage", "and", "reduce", "the", "re", "invention", "of", "very", "common", "wheels", "NUMBER", "After", "more", "exploration", "it", "turns", "out", "that", "even", "with", "the", "zlib", "esque", "interface", "my", "issue", "be", "not", "solve", "NUMBER", "While", "it", "be", "possible", "to", "compress", "to", "a", "limited", "length", "buffer", "if", "the", "output", "buffer", "be", "not", "large", "enough", "for", "a", "full", "flush", "it", "will", "not", "be", "valid", "compressed", "data", "NUMBER", "Bummer", "NUMBER", "My", "quest", "for", "a", "method", "to", "compress", "as", "much", "input", "as", "possible", "into", "a", "fix", "length", "buffer", "and", "be", "independently", "decompressable", "remains", "unrealized", "NUMBER", "Thanks", "NUMBER", "The", "suggested", "wrapper", "sounds", "like", "a", "brute", "force", "search", "for", "the", "optimal", "input", "block", "size", "which", "would", "rarely", "be", "optimally", "efficient", "but", "when", "the", "blocks", "be", "so", "small", "perhaps", "the", "overhead", "be", "minimal", "NUMBER", "I", "will", "give", "that", "a", "try", "it", "will", "be", "enough", "for", "exploring", "brotli", "s", "potential", "for", "this", "use", "NUMBER", "It", "be", "for", "the", "SEED", "format", "that", "I", "explore", "new", "options", "NUMBER", "Currently", "the", "allow", "encodings", "only", "include", "compression", "for", "integer", "data", "floating", "point", "data", "be", "stored", "uncompressed", "NUMBER", "The", "idea", "be", "precisely", "to", "find", "a", "general", "compression", "scheme", "that", "a", "can", "be", "use", "for", "any", "data", "sample", "type", "and", "b", "be", "broadly", "support", "will", "be", "readable", "in", "decades", "to", "come", "and", "be", "not", "seismology", "specific", "and", "thus", "benefits", "from", "a", "much", "larger", "community", "NUMBER", "There", "be", "certainly", "a", "trade", "off", "with", "efficiency", "a", "scheme", "specific", "for", "the", "data", "characteristics", "would", "result", "in", "better", "compression", "NUMBER", "Closing", "for", "now", "I", "ll", "wait", "and", "see", "what", "I", "can", "get", "out", "of", "the", "new", "pure", "C", "interfaces", "when", "a", "release", "be", "cut", "NUMBER", "Hi", "I", "find", "this", "minor", "typo", "in", "tool", "Makefile", "NUMBER", "Cheers", "Tomasz", "I", "submitted", "CLA", "too", "NUMBER", "When", "streaming", "encoding", "it", "s", "work", "fine", "use", "small", "buffer", "sizes", "indeed", "only", "do", "so", "thus", "presumably", "it", "should", "be", "able", "to", "decode", "in", "similarly", "small", "chunks", "however", "the", "streaming", "decoder", "seems", "to", "only", "return", "NUMBER", "mb", "chunks", "i", "NUMBER", "e", "NUMBER", "i", "m", "streaming", "data", "to", "BrotliDecompressBufferStreaming", "in", "NUMBER", "kb", "chunks", "but", "it", "only", "first", "returns", "anything", "whenever", "it", "has", "accumulated", "NUMBER", "mb", "available", "NUMBER", "Given", "that", "this", "seems", "unneccessary", "since", "the", "data", "was", "streamed", "on", "write", "in", "far", "smaller", "chunks", "it", "would", "be", "very", "preferable", "to", "be", "able", "to", "have", "it", "return", "more", "frequent", "smaller", "chunk", "sizes", "as", "this", "kind", "of", "delay", "chunkiness", "makes", "it", "unusable", "for", "some", "streaming", "scenarios", "and", "less", "ideal", "for", "others", "NUMBER", "Ok", "looks", "like", "you", "fix", "it", "since", "I", "originally", "discover", "the", "issue", "Oct", "NUMBER", "as", "pulling", "the", "latest", "from", "master", "now", "fix", "the", "issue", "average", "chunk", "size", "drop", "from", "that", "very", "consistent", "NUMBER", "mb", "to", "NUMBER", "kb", "NUMBER", "I", "originally", "report", "it", "in", "the", "forum", "but", "then", "get", "no", "response", "there", "discover", "this", "place", "after", "a", "month", "or", "so", "next", "time", "I", "ll", "post", "here", "I", "guess", "Hi", "I", "m", "packaging", "brotli", "for", "Debian", "and", "I", "wanted", "to", "install", "bro", "NUMBER", "py", "in", "usr", "bin", "NUMBER", "I", "wanted", "to", "know", "what", "would", "be", "the", "official", "name", "for", "this", "program", "and", "rename", "it", "if", "it", "conflict", "usr", "bin", "bro", "NUMBER", "py", "in", "Debian", "at", "least", "NUMBER", "py", "scripts", "be", "discouraged", "in", "PATH", "LINK", "with", "language", "extension", "NUMBER", "html", "usr", "bin", "bro", "it", "looks", "nice", "but", "this", "be", "already", "occupied", "by", "this", "package", "LINK", "usr", "bin", "brotli", "seems", "to", "be", "fine", "According", "to", "the", "above", "I", "d", "be", "happy", "if", "you", "would", "rename", "bro", "NUMBER", "py", "to", "brotli", "or", "something", "else", "that", "do", "not", "conflict", "nor", "violates", "Debian", "policy", "NUMBER", "Best", "regards", "Tomasz", "Hi", "thinred", "The", "reason", "I", "did", "the", "bro", "NUMBER", "py", "script", "was", "primarily", "to", "test", "the", "Brotli", "Python", "extension", "on", "Windows", "cf", "NUMBER", "LINK", "NUMBER", "At", "that", "time", "I", "wasn", "t", "able", "to", "compile", "the", "bro", "NUMBER", "cc", "tool", "for", "Windows", "and", "I", "wanted", "to", "avoid", "having", "to", "install", "Cygwin", "MSYS", "etc", "NUMBER", "in", "order", "to", "run", "the", "compatibility_test", "NUMBER", "sh", "and", "roundtrip_test", "NUMBER", "sh", "scripts", "NUMBER", "So", "I", "write", "a", "Python", "clone", "of", "the", "bro", "NUMBER", "cc", "tool", "and", "equivalent", "scripts", "for", "compatibility", "and", "roundtrip", "test", "NUMBER", "I", "didn", "t", "add", "bro", "NUMBER", "py", "to", "the", "brotli", "Python", "package", "nor", "the", "setup", "NUMBER", "py", "script", "because", "I", "thought", "that", "users", "of", "the", "Python", "bindings", "would", "be", "more", "interested", "in", "use", "brotli", "as", "a", "module", "to", "import", "in", "other", "applications", "rather", "than", "as", "a", "command", "line", "script", "NUMBER", "However", "if", "you", "or", "others", "think", "it", "could", "be", "useful", "we", "could", "easily", "move", "it", "inside", "the", "package", "and", "have", "setuptools", "generate", "a", "platform", "specific", "console", "script", "use", "its", "entry_points", "feature", "NUMBER", "On", "Linux", "or", "OS", "X", "it", "would", "be", "named", "without", "the", "NUMBER", "py", "extension", "whereas", "on", "Windows", "it", "will", "have", "NUMBER", "exe", "NUMBER", "Although", "I", "guess", "for", "Debian", "it", "would", "be", "fine", "to", "simply", "package", "the", "C", "command", "line", "tool", "that", "be", "call", "bro", "with", "no", "language", "extensions", "NUMBER", "Also", "bear", "in", "mind", "the", "Python", "bindings", "and", "hence", "bro", "NUMBER", "py", "still", "don", "t", "expose", "the", "new", "streaming", "API", "while", "the", "bro", "C", "tool", "do", "cf", "NUMBER", "LINK", "NUMBER", "Hi", "anthrotype", "thank", "you", "for", "your", "elaborate", "response", "NUMBER", "I", "must", "admit", "that", "I", "miss", "bro", "NUMBER", "cc", "in", "the", "sources", "NUMBER", "Ok", "I", "prefer", "bro", "NUMBER", "cc", "too", "but", "the", "naming", "issue", "remains", "NUMBER", "I", "think", "that", "it", "must", "be", "install", "as", "usr", "bin", "brotli", "and", "not", "usr", "bin", "bro", "NUMBER", "Another", "problem", "that", "may", "deserve", "its", "own", "issue", "be", "that", "brotli", "has", "no", "dynamic", "library", "NUMBER", "Do", "you", "plan", "to", "provide", "libbrotli", "Another", "problem", "that", "may", "deserve", "its", "own", "issue", "be", "that", "brotli", "has", "no", "dynamic", "library", "NUMBER", "Do", "you", "plan", "to", "provide", "libbrotli", "I", "could", "be", "wrong", "but", "I", "don", "t", "think", "brotli", "be", "API", "ABI", "stable", "yet", "it", "might", "be", "wise", "to", "hold", "off", "on", "packaging", "a", "library", "for", "now", "NUMBER", "That", "s", "what", "I", "thought", "fair", "enough", "NUMBER", "What", "about", "the", "name", "of", "cmdline", "program", "would", "be", "great", "if", "the", "CLI", "followed", "standard", "patterns", "like", "gzip", "bzip", "NUMBER", "and", "xz", "use", "NUMBER", "Hey", "Brotli", "s", "compression", "ratio", "and", "decompression", "speed", "makes", "it", "a", "very", "viable", "candidate", "for", "serving", "pre", "compressed", "file", "to", "decompress", "on", "the", "fly", "as", "they", "be", "downloading", "NUMBER", "For", "big", "file", "its", "common", "to", "offer", "resumable", "downloads", "but", "with", "stream", "decompression", "its", "impossible", "to", "use", "without", "restoring", "the", "stream", "decoder", "s", "context", "at", "the", "time", "it", "was", "stopped", "NUMBER", "Is", "it", "possible", "add", "a", "function", "to", "the", "API", "to", "serialize", "the", "stream", "s", "context", "and", "resume", "it", "later", "Excuse", "me", "if", "I", "m", "talking", "nonsense", "I", "m", "unfamiliar", "with", "the", "grits", "of", "Brotli", "s", "implementation", "Picked", "this", "up", "run", "the", "Squash", "unit", "test", "in", "AddressSanitizer", "NUMBER", "Basically", "the", "plugin", "gives", "brotli", "NUMBER", "bytes", "to", "write", "to", "but", "the", "write", "be", "NUMBER", "bytes", "at", "a", "time", "NUMBER", "See", "quixdb", "squash", "NUMBER", "for", "background", "info", "from", "ASan", "follows", "NUMBER", "ERROR", "AddressSanitizer", "unknown", "crash", "on", "address", "NUMBER", "x", "NUMBER", "at", "pc", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "bp", "NUMBER", "x", "NUMBER", "ffe", "NUMBER", "ec", "NUMBER", "f", "NUMBER", "sp", "NUMBER", "x", "NUMBER", "ffe", "NUMBER", "ec", "NUMBER", "e", "NUMBER", "WRITE", "of", "size", "NUMBER", "at", "NUMBER", "x", "NUMBER", "thread", "T", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "in", "BROTLI_UNALIGNED_STORE", "NUMBER", "void", "unsigned", "long", "home", "nemequ", "local", "src", "squash", "plugins", "brotli", "brotli", "enc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "port", "NUMBER", "h", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "in", "brotli", "WriteBits", "int", "unsigned", "long", "int", "unsigned", "char", "home", "nemequ", "local", "src", "squash", "plugins", "brotli", "brotli", "enc", "NUMBER", "write_bits", "NUMBER", "h", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "in", "brotli", "BrotliCompressor", "WriteMetadata", "unsigned", "long", "unsigned", "char", "const", "bool", "unsigned", "long", "unsigned", "char", "home", "nemequ", "local", "src", "squash", "plugins", "brotli", "brotli", "enc", "encode", "NUMBER", "cc", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "f", "NUMBER", "c", "NUMBER", "in", "squash_brotli_compress_stream", "home", "nemequ", "local", "src", "squash", "plugins", "brotli", "squash", "brotli", "NUMBER", "cpp", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "f", "NUMBER", "c", "NUMBER", "in", "squash_brotli_process_stream", "home", "nemequ", "local", "src", "squash", "plugins", "brotli", "squash", "brotli", "NUMBER", "cpp", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "f", "NUMBER", "fe", "in", "squash_stream_process_internal", "home", "nemequ", "local", "src", "squash", "squash", "stream", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "ad", "NUMBER", "in", "flush_test", "home", "nemequ", "local", "src", "squash", "test", "flush", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "ff", "NUMBER", "a", "lib", "NUMBER", "libglib", "NUMBER", "so", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "ff", "NUMBER", "lib", "NUMBER", "libglib", "NUMBER", "so", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "ff", "NUMBER", "lib", "NUMBER", "libglib", "NUMBER", "so", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "ff", "NUMBER", "d", "in", "g_test_run_suite", "lib", "NUMBER", "libglib", "NUMBER", "so", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "d", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "ff", "NUMBER", "in", "g_test_run", "lib", "NUMBER", "libglib", "NUMBER", "so", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "in", "main", "home", "nemequ", "local", "src", "squash", "test", "test", "codecs", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "e", "NUMBER", "f", "in", "__libc_start_main", "lib", "NUMBER", "libc", "NUMBER", "so", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "in", "_start", "home", "nemequ", "local", "src", "squash", "build", "test", "flush", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "be", "located", "NUMBER", "bytes", "to", "the", "right", "of", "NUMBER", "byte", "region", "NUMBER", "x", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "allocated", "by", "thread", "T", "NUMBER", "here", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "dba", "NUMBER", "a", "in", "malloc", "lib", "NUMBER", "libasan", "NUMBER", "so", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "fa", "NUMBER", "a", "in", "squash_brotli_stream_new", "home", "nemequ", "local", "src", "squash", "plugins", "brotli", "squash", "brotli", "NUMBER", "cpp", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "fa", "NUMBER", "a", "in", "squash_brotli_create_stream", "home", "nemequ", "local", "src", "squash", "plugins", "brotli", "squash", "brotli", "NUMBER", "cpp", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "f", "NUMBER", "dba", "in", "squash_codec_create_stream", "home", "nemequ", "local", "src", "squash", "squash", "codec", "NUMBER", "c", "NUMBER", "SUMMARY", "AddressSanitizer", "unknown", "crash", "home", "nemequ", "local", "src", "squash", "plugins", "brotli", "brotli", "enc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "port", "NUMBER", "h", "NUMBER", "BROTLI_UNALIGNED_STORE", "NUMBER", "void", "unsigned", "long", "Shadow", "bytes", "around", "the", "buggy", "address", "NUMBER", "x", "NUMBER", "c", "NUMBER", "fff", "NUMBER", "a", "NUMBER", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "NUMBER", "x", "NUMBER", "c", "NUMBER", "fff", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "fff", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fa", "fa", "fa", "fa", "fa", "fa", "NUMBER", "x", "NUMBER", "c", "NUMBER", "fff", "NUMBER", "a", "NUMBER", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "fff", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "fff", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "NUMBER", "x", "NUMBER", "c", "NUMBER", "fff", "NUMBER", "a", "NUMBER", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "NUMBER", "x", "NUMBER", "c", "NUMBER", "fff", "NUMBER", "a", "NUMBER", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fa", "fa", "fa", "fa", "fa", "fa", "NUMBER", "x", "NUMBER", "c", "NUMBER", "fff", "NUMBER", "aa", "NUMBER", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "NUMBER", "x", "NUMBER", "c", "NUMBER", "fff", "NUMBER", "ab", "NUMBER", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "fd", "NUMBER", "x", "NUMBER", "c", "NUMBER", "fff", "NUMBER", "ac", "NUMBER", "fd", "fd", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "fa", "Shadow", "byte", "legend", "one", "shadow", "byte", "represents", "NUMBER", "application", "bytes", "Addressable", "NUMBER", "Partially", "addressable", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Heap", "left", "redzone", "fa", "Heap", "right", "redzone", "fb", "Freed", "heap", "region", "fd", "Stack", "left", "redzone", "f", "NUMBER", "Stack", "mid", "redzone", "f", "NUMBER", "Stack", "right", "redzone", "f", "NUMBER", "Stack", "partial", "redzone", "f", "NUMBER", "Stack", "after", "return", "f", "NUMBER", "Stack", "use", "after", "scope", "f", "NUMBER", "Global", "redzone", "f", "NUMBER", "Global", "init", "order", "f", "NUMBER", "Poisoned", "by", "user", "f", "NUMBER", "Container", "overflow", "fc", "Array", "cookie", "ac", "Intra", "object", "redzone", "bb", "ASan", "internal", "fe", "NUMBER", "ABORTING", "It", "would", "be", "easy", "enough", "to", "alter", "the", "plugin", "to", "give", "brotli", "NUMBER", "bytes", "to", "write", "to", "but", "I", "d", "rather", "see", "it", "fix", "upstream", "than", "work", "around", "it", "in", "Squash", "NUMBER", "Unless", "I", "m", "miss", "something", "Brotli", "doesn", "t", "include", "a", "function", "to", "calculate", "the", "maximum", "size", "of", "a", "compressed", "buffer", "given", "a", "specified", "input", "size", "_i", "NUMBER", "e", "NUMBER", "_", "the", "brotli", "version", "of", "zlib", "s", "compressBound", "function", "NUMBER", "I", "ve", "be", "use", "uncompressed_size", "NUMBER", "in", "squash", "but", "that", "doesn", "t", "work", "with", "larger", "buffers", "NUMBER", "Based", "on", "some", "test", "with", "blobs", "of", "random", "data", "the", "points", "where", "the", "output", "size", "change", "be", "TAG", "TAG", "TAG", "TAG", "Max", "input", "size", "TAG", "TAG", "Max", "compressed", "extra", "bytes", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "NUMBER", "KiB", "TAG", "TAG", "NUMBER", "TAG", "TAG", "TAG", "TAG", "NUMBER", "MiB", "TAG", "TAG", "NUMBER", "TAG", "TAG", "TAG", "TAG", "NUMBER", "MiB", "TAG", "TAG", "NUMBER", "TAG", "TAG", "TAG", "TAG", "NUMBER", "MiB", "TAG", "TAG", "NUMBER", "TAG", "TAG", "TAG", "TAG", "NUMBER", "MiB", "TAG", "TAG", "NUMBER", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "NUMBER", "TAG", "TAG", "TAG", "TAG", "NUMBER", "MiB", "NUMBER", "bytes", "requires", "input_size", "NUMBER", "but", "I", "stopped", "test", "there", "NUMBER", "For", "now", "I", "m", "going", "to", "use", "uncompressed_size", "NUMBER", "uncompressed_size", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "in", "Squash", "but", "I", "would", "feel", "better", "if", "you", "provide", "a", "function", "or", "macro", "NUMBER", "Someone", "else", "can", "verify", "this", "work", "but", "I", "believe", "this", "to", "be", "true", "NUMBER", "In", "the", "worst", "case", "when", "the", "data", "be", "highly", "uncompressible", "the", "overhead", "comes", "from", "meta", "data", "to", "describe", "raw", "blocks", "NUMBER", "We", "compute", "the", "overhead", "by", "the", "followinG", "The", "stream", "header", "has", "NUMBER", "b", "WINDOW_SIZE", "best", "case", "be", "NUMBER", "b", "worst", "case", "be", "NUMBER", "b", "NUMBER", "This", "setting", "be", "independent", "of", "input", "size", "The", "overhead", "to", "encode", "each", "raw", "block", "be", "NUMBER", "b", "ISLAST", "NUMBER", "b", "MNIBBLES", "NUMBER", "NUMBER", "b", "MNIBBLES", "MLEN", "NUMBER", "NUMBER", "b", "ISUNCOMPRESSED", "NUMBER", "b", "PADDING", "may", "be", "less", "depending", "on", "bit", "alignment", "NUMBER", "b", "MLEN", "DATA", "The", "last", "block", "has", "NUMBER", "b", "ISLAST", "NUMBER", "b", "ISLASTEMPTY", "Thus", "we", "produce", "the", "following", "table", "Max", "input", "size", "TAG", "the", "number", "of", "bytes", "really", "required", "NUMBER", "Memory", "use", "shouldn", "t", "really", "be", "an", "issue", "here", "since", "if", "there", "be", "any", "concern", "about", "memory", "people", "should", "be", "use", "the", "streaming", "API", "NUMBER", "A", "lot", "of", "the", "plugins", "in", "Squash", "be", "actually", "pretty", "wide", "of", "the", "mark", "in", "their", "estimates", "NUMBER", "It", "seems", "level", "NUMBER", "be", "significantly", "worse", "about", "this", "NUMBER", "For", "example", "a", "NUMBER", "byte", "buffer", "requires", "NUMBER", "extra", "bytes", "NUMBER", "Do", "you", "consider", "that", "to", "be", "a", "bug", "I", "don", "t", "really", "know", "how", "the", "encoder", "works", "I", "can", "understand", "not", "wanting", "to", "spend", "the", "time", "checking", "for", "uncompressible", "data", "but", "I", "can", "also", "see", "abandoning", "the", "idea", "of", "compression", "and", "just", "memcpying", "data", "be", "a", "good", "performance", "optimization", "NUMBER", "The", "relevant", "commit", "seem", "to", "be", "NUMBER", "e", "NUMBER", "and", "NUMBER", "b", "NUMBER", "ddb", "NUMBER", "cfd", "NUMBER", "ddfa", "NUMBER", "fed", "NUMBER", "eb", "NUMBER", "NUMBER", "provides", "BrotliEncoderMaxCompressedSize", "FWIW", "use", "the", "buffer", "to", "buffer", "API", "be", "all", "we", "commit", "to", "our", "max_compressed_size", "function", "work", "for", "in", "Squash", "so", "this", "isn", "t", "a", "problem", "for", "me", "NUMBER", "Given", "all", "the", "complexities", "of", "estimating", "it", "with", "the", "stream", "API", "like", "what", "happens", "if", "you", "flush", "every", "byte", "I", "don", "t", "think", "I", "would", "bother", "with", "that", "if", "I", "were", "you", "NUMBER", "Note", "that", "zlib", "s", "function", "compressBound", "only", "applies", "to", "its", "buffer", "to", "buffer", "function", "NUMBER", "I", "think", "all", "the", "others", "do", "the", "same", "but", "I", "d", "have", "to", "check", "About", "I", "m", "work", "on", "a", "project", "call", "jbrotli", "LINK", "to", "make", "Brotli", "compression", "available", "to", "Java", "developers", "NUMBER", "My", "goal", "be", "to", "enable", "Java", "based", "HTTP", "server", "to", "use", "Brotli", "compression", "on", "the", "fly", "NUMBER", "I", "ve", "did", "some", "performance", "benchmarks", "with", "the", "cp", "NUMBER", "html", "from", "canterbury", "corpus", "NUMBER", "It", "turns", "out", "that", "gzip", "be", "little", "more", "than", "twice", "as", "fast", "as", "brotli", "when", "compressing", "this", "HTML", "NUMBER", "This", "fail", "may", "expectations", "I", "thought", "the", "Brotli", "outnumbers", "gzip", "NUMBER", "Issue", "Most", "other", "benchmarks", "make", "Brotli", "shine", "compared", "to", "gzip", "NUMBER", "I", "m", "looking", "forward", "to", "get", "feedback", "from", "the", "experts", "why", "these", "numbers", "be", "so", "bad", "or", "where", "the", "code", "could", "be", "improved", "NUMBER", "Testcases", "All", "these", "test", "cases", "use", "a", "the", "NUMBER", "kB", "HTML", "from", "canterbury", "corpus", "and", "b", "NUMBER", "xcp", "NUMBER", "html", "all", "read", "from", "memory", "NUMBER", "brotli_compression_with_BrotliCompressor_using_ByteBuffer", "uses", "brotli", "BrotliCompressBuffer", "Intended", "to", "use", "simple", "stateless", "interface", "of", "brotli", "NUMBER", "Second", "it", "also", "be", "intended", "to", "show", "differences", "between", "byte", "and", "direct", "ByteBuffer", "in", "Java", "NUMBER", "Remark", "Most", "likely", "this", "direct", "ByteBuffer", "thingy", "be", "faster", "than", "use", "byte", "as", "many", "other", "projects", "already", "experienced", "that", "NUMBER", "For", "comparison", "to", "brotli", "this", "can", "be", "treated", "equal", "to", "use", "byte", "brotli", "quality", "parameter", "NUMBER", "source", "LINK", "native", "src", "main", "cpp", "de_bitkings_jbrotli_BrotliCompressor", "NUMBER", "cxx", "brotli_compression_with_BrotliStreamCompressor_using_byte_array", "Instantiates", "only", "one", "object", "of", "brotli", "BrotliCompressor", "and", "only", "do", "CopyInputToRingBuffer", "followed", "by", "WriteBrotliData", "NUMBER", "Intended", "to", "have", "pure", "compression", "and", "reuse", "of", "the", "pre", "calculated", "dictionary", "NUMBER", "brotli", "quality", "parameter", "NUMBER", "source", "LINK", "native", "src", "main", "cpp", "de_bitkings_jbrotli_BrotliStreamCompressor", "NUMBER", "cxx", "gzip_compression", "Uses", "default", "GZIPOutputStream", "with", "default", "compression", "level", "NUMBER", "compression", "level", "default", "expect", "NUMBER", "or", "NUMBER", "JNI_doing_simple_memcpy_using_byte_array", "This", "test", "uses", "the", "same", "Java", "method", "signature", "as", "the", "compressor", "but", "only", "do", "memcpy", "NUMBER", "This", "be", "intended", "to", "show", "how", "much", "overhead", "ther", "be", "for", "doing", "JNI", "calls", "NUMBER", "Results", "use", "cp", "NUMBER", "html", "NUMBER", "kB", "HTML", "Benchmark", "Mode", "Cnt", "Score", "Error", "Units", "brotli_compression_with_BrotliCompressor_using_ByteBuffer", "thrpt", "NUMBER", "NUMBER", "NUMBER", "ops", "s", "brotli_compression_with_BrotliStreamCompressor_using_byte_array", "thrpt", "NUMBER", "NUMBER", "NUMBER", "ops", "s", "gzip_compression", "thrpt", "NUMBER", "NUMBER", "NUMBER", "ops", "s", "JNI_doing_simple_memcpy_using_byte_array", "thrpt", "NUMBER", "NUMBER", "NUMBER", "ops", "s", "use", "NUMBER", "xcp", "NUMBER", "html", "NUMBER", "kB", "HTML", "Benchmark", "Mode", "Cnt", "Score", "Error", "Units", "brotli_compression_with_BrotliCompressor_using_ByteBuffer", "thrpt", "NUMBER", "NUMBER", "NUMBER", "ops", "s", "brotli_compression_with_BrotliStreamCompressor_using_byte_array", "thrpt", "NUMBER", "NUMBER", "NUMBER", "ops", "s", "gzip_compression", "thrpt", "NUMBER", "NUMBER", "NUMBER", "ops", "s", "JNI_doing_simple_memcpy_using_byte_array", "thrpt", "NUMBER", "NUMBER", "NUMBER", "ops", "s", "Setup", "use", "brotli", "NUMBER", "release", "use", "Visual", "Studio", "NUMBER", "compiler", "NUMBER", "bit", "use", "custom", "cmake", "file", "maybe", "some", "compiler", "options", "be", "miss", "use", "Java", "Micro", "Benchmark", "jmh", "for", "measurement", "use", "Java", "NUMBER", "_u", "NUMBER", "NUMBER", "bit", "source", "LINK", "NUMBER", "consider", "_experimental_", "It", "turns", "out", "that", "gzip", "be", "little", "more", "than", "twice", "as", "fast", "as", "brotli", "when", "compressing", "this", "HTML", "NUMBER", "This", "fail", "may", "expectations", "I", "thought", "the", "Brotli", "outnumbers", "gzip", "NUMBER", "Brotli", "be", "generally", "slower", "than", "gzip", "for", "compression", "NUMBER", "It", "be", "usually", "a", "bit", "faster", "at", "de", "compression", "and", "the", "compression", "ratio", "be", "much", "higher", "NUMBER", "See", "LINK", "benchmark", "dataset", "cp", "NUMBER", "html", "machine", "peltast", "visible", "plugins", "brotli", "zlib", "ratio", "vs", "decompression", "for", "results", "for", "cp", "NUMBER", "html", "results", "be", "probably", "similar", "for", "most", "datasets", "NUMBER", "If", "you", "turn", "on", "some", "of", "the", "other", "codecs", "squash", "offers", "click", "the", "label", "in", "the", "legend", "you", "ll", "get", "a", "more", "complete", "picture", "of", "where", "brotli", "fits", "in", "with", "the", "competition", "NUMBER", "This", "be", "a", "pretty", "good", "place", "for", "brotli", "to", "be", "NUMBER", "Compressing", "content", "once", "and", "decompressing", "many", "times", "be", "a", "pretty", "common", "use", "case", "so", "it", "s", "usually", "better", "to", "emphasize", "decompressor", "speed", "and", "ratio", "at", "the", "expense", "of", "compressor", "speed", "NUMBER", "Wow", "cool", "that", "you", "plan", "to", "provide", "Java", "wrappers", "NUMBER", "I", "m", "interested", "in", "your", "outcomes", "NUMBER", "So", "we", "might", "join", "forces", "and", "can", "further", "improve", "brotli", "support", "in", "the", "Java", "World", "NUMBER", "nemequ", "said", "Compressing", "content", "once", "and", "decompressing", "many", "times", "be", "a", "pretty", "common", "use", "case", "This", "would", "apply", "back", "in", "the", "static", "HTML", "days", "NUMBER", "Nowadays", "most", "websites", "be", "data", "driven", "and", "the", "HTML", "be", "dynamically", "generate", "on", "the", "fly", "by", "most", "Java", "UI", "frameworks", "and", "frameworks", "in", "other", "languages", "so", "compressing", "once", "and", "reusing", "cached", "compressed", "version", "of", "the", "HTML", "just", "doesn", "t", "really", "work", "naturally", "in", "that", "scenario", "NUMBER", "To", "make", "it", "work", "you", "would", "need", "to", "add", "a", "serious", "amount", "of", "code", "to", "work", "out", "everything", "that", "could", "change", "on", "a", "page", "content", "theme", "selection", "change", "which", "CSS", "file", "to", "use", "user", "permissions", "available", "JS", "powered", "controls", "etc", "NUMBER", "and", "when", "something", "do", "change", "blow", "away", "the", "cached", "compressed", "version", "of", "the", "HTML", "and", "recompress", "NUMBER", "Just", "looking", "around", "the", "main", "sites", "I", "couldn", "t", "find", "any", "actually", "use", "brotli", "weird", "At", "time", "of", "write", "this", "not", "Microsoft", "not", "IBM", "not", "even", "www", "NUMBER", "google", "NUMBER", "com", "uses", "it", "and", "they", "developed", "it", "Assuming", "pre", "compression", "isn", "t", "an", "option", "for", "dynamically", "generate", "HTML", "pages", "then", "maybe", "the", "trade", "off", "between", "slower", "compression", "time", "i", "NUMBER", "e", "NUMBER", "extra", "server", "CPU", "cycles", "consumed", "vs", "the", "savings", "in", "the", "size", "of", "downloaded", "artifacts", "consumes", "slightly", "less", "bandwidth", "just", "doesn", "t", "hit", "the", "sweet", "spot", "Well", "not", "yet", "at", "least", "maybe", "the", "compression", "algorithm", "implementations", "have", "some", "optimizations", "come", "Maybe", "faster", "to", "run", "in", "native", "machine", "code", "perhaps", "like", "the", "Apache", "Tomcat", "APR", "Looks", "much", "smaller", "Compiling", "with", "gcc", "NUMBER", "mingw", "w", "NUMBER", "LINK", "NUMBER", "pTWA", "NUMBER", "DA", "Update", "most", "of", "these", "be", "now", "fix", "but", "a", "few", "remain", "NUMBER", "Here", "the", "new", "log", "LINK", "p", "NUMBER", "N", "NUMBER", "zkM", "Update", "only", "a", "single", "warning", "remains", "enc", "encode", "NUMBER", "cc", "o", "enc", "encode", "NUMBER", "o", "enc", "encode", "NUMBER", "cc", "In", "member", "function", "bool", "brotli", "BrotliCompressor", "WriteBrotliData", "bool", "bool", "size_t", "uint", "NUMBER", "_t", "enc", "encode", "NUMBER", "cc", "NUMBER", "NUMBER", "warning", "comparison", "between", "sign", "and", "unsigned", "integer", "expressions", "Wsign", "compare", "Closing", "in", "favor", "of", "LINK", "Running", "this", "NUMBER", "bro", "NUMBER", "exe", "q", "NUMBER", "i", "butler", "NUMBER", "exe", "dev", "null", "Where", "bro", "NUMBER", "exe", "be", "a", "NUMBER", "bit", "PE", "NUMBER", "binary", "compiled", "use", "mingw", "gcc", "test", "with", "v", "NUMBER", "v", "NUMBER", "Where", "butler", "NUMBER", "exe", "be", "the", "file", "contained", "in", "that", "NUMBER", "z", "archive", "LINK", "amd", "NUMBER", "v", "NUMBER", "butler", "NUMBER", "z", "no", "need", "to", "trust", "run", "the", "NUMBER", "exe", "it", "s", "just", "a", "sample", "file", "to", "be", "compressed", "by", "brotli", "NUMBER", "fail", "starting", "with", "LINK", "with", "the", "following", "message", "brotli", "tool", "bro", "NUMBER", "exe", "q", "NUMBER", "i", "butler", "NUMBER", "exe", "tail", "This", "application", "has", "request", "the", "Runtime", "to", "terminate", "it", "in", "an", "unusual", "way", "NUMBER", "Please", "contact", "the", "application", "s", "support", "team", "for", "more", "information", "NUMBER", "Assertion", "fail", "Program", "C", "msys", "NUMBER", "home", "amos", "tmp", "brotli", "tool", "bro", "NUMBER", "exe", "File", "NUMBER", "write_bits", "NUMBER", "h", "Line", "NUMBER", "Expression", "bits", "TAG", "add", "the", "change", "there", "and", "then", "defining", "BrotliCompressor", "to", "be", "a", "BasicBrotliCompressor", "TAG", "imitating", "the", "C", "std", "basic_string", "std", "string", "idea", "here", "NUMBER", "Passing", "along", "the", "allocator", "structures", "I", "don", "t", "really", "have", "an", "overview", "of", "your", "codebase", "yet", "but", "I", "feel", "like", "there", "s", "a", "lot", "of", "function", "esp", "NUMBER", "in", "the", "decoder", "which", "would", "either", "have", "to", "receive", "an", "additional", "argument", "or", "one", "would", "have", "to", "add", "an", "additional", "field", "to", "BrotliState", "and", "in", "either", "way", "at", "least", "the", "ABI", "be", "broken", "Side", "note", "If", "one", "accepts", "that", "fact", "and", "goes", "with", "add", "a", "field", "to", "BrotliState", "it", "might", "be", "a", "good", "idea", "to", "include", "field", "for", "forward", "compatibility", "here", "as", "in", "e", "NUMBER", "g", "NUMBER", "lzma_stream", "LINK", "L", "NUMBER", "NUMBER", "And", "anyway", "I", "m", "not", "sure", "whether", "BrotliState", "should", "contain", "the", "allocator", "methods", "semantically", "since", "this", "be", "not", "really", "about", "the", "state", "of", "the", "decoder", "but", "rather", "the", "exact", "opposite", "i", "NUMBER", "e", "NUMBER", "about", "the", "state", "of", "the", "outside", "world", "NUMBER", "So", "Is", "this", "worthwhile", "How", "would", "the", "API", "best", "be", "change", "Let", "me", "know", "what", "you", "think", "This", "would", "probably", "also", "apply", "to", "the", "contained", "python", "bindings", "as", "the", "docs", "LINK", "api", "memory", "NUMBER", "html", "explain", "In", "most", "situations", "however", "it", "be", "recommended", "to", "allocate", "memory", "from", "the", "Python", "heap", "specifically", "because", "the", "latter", "be", "under", "control", "of", "the", "Python", "memory", "manager", "NUMBER", "For", "example", "this", "be", "required", "when", "the", "interpreter", "be", "extend", "with", "new", "object", "types", "write", "in", "C", "NUMBER", "Another", "reason", "for", "use", "the", "Python", "heap", "be", "the", "desire", "to", "inform", "the", "Python", "memory", "manager", "about", "the", "memory", "needs", "of", "the", "extension", "module", "NUMBER", "Even", "when", "the", "request", "memory", "be", "use", "exclusively", "for", "internal", "highly", "specific", "purposes", "delegating", "all", "memory", "request", "to", "the", "Python", "memory", "manager", "causes", "the", "interpreter", "to", "have", "a", "more", "accurate", "image", "of", "its", "memory", "footprint", "as", "a", "whole", "NUMBER", "Consequently", "under", "certain", "circumstances", "the", "Python", "memory", "manager", "may", "or", "may", "not", "trigger", "appropriate", "actions", "like", "garbage", "collection", "memory", "compaction", "or", "other", "preventive", "procedures", "NUMBER", "Note", "that", "by", "use", "the", "C", "library", "allocator", "as", "shown", "in", "the", "previous", "example", "the", "allocated", "memory", "for", "the", "I", "O", "buffer", "escapes", "completely", "the", "Python", "memory", "manager", "NUMBER", "Okay", "great", "Thanks", "and", "let", "me", "know", "if", "I", "can", "help", "with", "anything", "NUMBER", "Great", "thanks", "Awesome", "thanks", "The", "Microsoft", "Visual", "C", "compiler", "or", "specifically", "linker", "generates", "an", "error", "about", "a", "possible", "uninitialized", "pointer", "when", "link", "with", "a", "C", "CLI", "application", "if", "output", "be", "left", "uninitialized", "NUMBER", "This", "fix", "that", "issue", "NUMBER", "I", "get", "that", "this", "be", "a", "really", "minor", "thing", "but", "at", "least", "this", "way", "no", "one", "else", "needs", "to", "run", "into", "this", "issue", "if", "they", "want", "to", "use", "brotli", "in", "a", "C", "CLI", "project", "NUMBER", "OK", "an", "CLA", "has", "be", "submitted", "NUMBER", "Pending", "review", "NUMBER", "Added", "new", "param", "n_threads", "to", "brotli", "params", "brolti", "BrotliCompressBufferParallel", "runs", "n_threads", "to", "compress", "input", "data", "I", "be", "no", "project", "maintainer", "I", "review", "your", "pull", "request", "and", "will", "give", "you", "some", "feedback", "NUMBER", "Thx", "you", "for", "the", "review", "I", "update", "my", "pull", "request", "NUMBER", "erikzenker", "Not", "a", "maintainer", "either", "but", "I", "m", "fairly", "familiar", "with", "the", "Brotli", "specification", "albeit", "from", "a", "_decoder_", "perspective", "rather", "than", "an", "encoder", "NUMBER", "I", "be", "surprised", "that", "it", "should", "be", "possible", "to", "parallelize", "metablock", "encoding", "NUMBER", "It", "be", "possible", "that", "my", "understanding", "be", "incorrect", "NUMBER", "I", "will", "try", "to", "explain", "why", "I", "think", "that", "parallel", "encoding", "can", "t", "work", "with", "Brotli", "NUMBER", "In", "Brotli", "there", "be", "three", "mutable", "concepts", "that", "get", "initialized", "at", "the", "start", "of", "the", "stream", "and", "then", "live", "across", "metablock", "boundaries", "NUMBER", "They", "have", "an", "impact", "on", "the", "decoding", "behavior", "of", "each", "block", "and", "they", "also", "potantially", "get", "mutated", "within", "each", "block", "NUMBER", "The", "three", "concepts", "be", "NUMBER", "The", "output", "window", "size", "defined", "by", "WSIZE", "in", "the", "stream", "header", "initialized", "as", "empty", "NUMBER", "Used", "for", "back", "references", "can", "span", "multiple", "blocks", "NUMBER", "NUMBER", "The", "literals", "buffer", "of", "the", "last", "two", "literals", "referred", "to", "as", "p", "NUMBER", "and", "p", "NUMBER", "in", "the", "specification", "initialized", "as", "p", "NUMBER", "NUMBER", "p", "NUMBER", "NUMBER", "Used", "to", "calculate", "Context", "ID", "for", "literals", "NUMBER", "NUMBER", "The", "distances", "ring", "buffer", "of", "the", "last", "four", "distances", "initalized", "as", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "where", "NUMBER", "be", "the", "most", "recent", "distance", "NUMBER", "Used", "in", "the", "decoding", "of", "distances", "where", "distance", "code", "can", "refer", "to", "these", "values", "NUMBER", "As", "far", "as", "I", "understand", "it", "parallel", "decoding", "of", "blocks", "be", "not", "possible", "because", "of", "those", "concepts", "since", "subsequent", "bytes", "may", "depend", "on", "the", "state", "of", "any", "of", "these", "three", "concepts", "which", "might", "have", "be", "mutated", "by", "actions", "on", "earlier", "compressed", "data", "NUMBER", "Unfortunately", "all", "of", "the", "test", "cases", "that", "actually", "contain", "multiple", "metablocks", "be", "structured", "in", "a", "way", "that", "doesn", "t", "test", "for", "this", "NUMBER", "I", "NUMBER", "e", "NUMBER", "in", "all", "of", "those", "cases", "all", "of", "the", "output", "data", "be", "really", "encoded", "in", "just", "one", "of", "the", "metablocks", "NUMBER", "Because", "of", "that", "the", "three", "stream", "wide", "concepts", "above", "do", "not", "actually", "get", "mutated", "in", "those", "test", "cases", "and", "thus", "your", "parallel", "implementation", "pass", "when", "really", "it", "should", "conceptually", "fail", "NUMBER", "szabadka", "Am", "I", "overlooking", "something", "On", "Tue", "Nov", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Thomas", "Pickert", "notifications", "github", "NUMBER", "com", "write", "erikzenker", "LINK", "Not", "a", "maintainer", "either", "but", "I", "m", "fairly", "familiar", "with", "the", "Brotli", "specification", "albeit", "from", "a", "_decoder_", "perspective", "rather", "than", "an", "encoder", "NUMBER", "I", "be", "surprised", "that", "it", "should", "be", "possible", "to", "parallelize", "metablock", "encoding", "NUMBER", "It", "be", "possible", "that", "my", "understanding", "be", "incorrect", "NUMBER", "I", "will", "try", "to", "explain", "why", "I", "think", "that", "parallel", "encoding", "can", "t", "work", "with", "Brotli", "NUMBER", "In", "Brotli", "there", "be", "three", "mutable", "concepts", "that", "get", "initialized", "at", "the", "start", "of", "the", "stream", "and", "then", "live", "across", "metablock", "boundaries", "NUMBER", "They", "have", "an", "impact", "on", "the", "decoding", "behavior", "of", "each", "block", "and", "they", "also", "potantially", "get", "mutated", "within", "each", "block", "NUMBER", "The", "three", "concepts", "be", "NUMBER", "The", "output", "window", "size", "defined", "by", "WSIZE", "in", "the", "stream", "header", "initialized", "as", "empty", "NUMBER", "Used", "for", "back", "references", "can", "span", "multiple", "blocks", "NUMBER", "NUMBER", "The", "literals", "buffer", "of", "the", "last", "two", "literals", "referred", "to", "as", "p", "NUMBER", "and", "p", "NUMBER", "in", "the", "specification", "initialized", "as", "p", "NUMBER", "NUMBER", "p", "NUMBER", "NUMBER", "Used", "to", "calculate", "Context", "ID", "for", "literals", "NUMBER", "NUMBER", "The", "distances", "ring", "buffer", "of", "the", "last", "four", "distances", "initalized", "as", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "where", "NUMBER", "be", "the", "most", "recent", "distance", "NUMBER", "Used", "in", "the", "decoding", "of", "distances", "where", "distance", "code", "can", "refer", "to", "these", "values", "NUMBER", "As", "far", "as", "I", "understand", "it", "parallel", "decoding", "of", "blocks", "be", "not", "possible", "because", "of", "those", "concepts", "since", "subsequent", "bytes", "may", "depend", "on", "the", "state", "of", "any", "of", "these", "three", "concepts", "which", "might", "have", "be", "mutated", "by", "actions", "on", "earlier", "compressed", "data", "NUMBER", "Unfortunately", "all", "of", "the", "test", "cases", "that", "actually", "contain", "multiple", "metablocks", "be", "structured", "in", "a", "way", "that", "doesn", "t", "test", "for", "this", "NUMBER", "I", "NUMBER", "e", "NUMBER", "in", "all", "of", "those", "cases", "all", "of", "the", "output", "data", "be", "really", "encoded", "in", "just", "one", "of", "the", "metablocks", "NUMBER", "Because", "of", "that", "the", "three", "stream", "wide", "concepts", "above", "do", "not", "actually", "get", "mutated", "in", "those", "test", "cases", "and", "thus", "your", "parallel", "implementation", "pass", "when", "really", "it", "should", "conceptually", "fail", "NUMBER", "szabadka", "LINK", "Am", "I", "overlooking", "something", "Each", "thread", "of", "the", "parallel", "implementation", "can", "have", "access", "to", "the", "whole", "input", "data", "therefore", "each", "of", "them", "has", "access", "to", "NUMBER", "the", "window", "which", "be", "just", "past", "input", "data", "and", "NUMBER", "to", "the", "last", "two", "bytes", "of", "the", "previous", "input", "block", "NUMBER", "To", "address", "NUMBER", "the", "parallel", "encoder", "has", "to", "ensure", "that", "it", "will", "not", "use", "the", "last", "distances", "to", "create", "a", "distance", "short", "code", "for", "the", "first", "two", "commands", "of", "the", "meta", "block", "it", "be", "the", "choice", "of", "the", "encoder", "whether", "to", "make", "use", "of", "the", "distance", "ringbuffer", "of", "to", "just", "output", "raw", "distances", "NUMBER", "After", "the", "first", "two", "commands", "the", "distance", "ringbuffer", "be", "fully", "initialized", "based", "on", "the", "current", "meta", "block", "and", "the", "encoder", "can", "start", "use", "it", "NUMBER", "So", "yes", "it", "be", "possible", "to", "do", "parallel", "metablock", "encoding", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "Ah", "right", "I", "did", "not", "consider", "that", "what", "I", "as", "a", "decoder", "typically", "consider", "output", "actually", "becomes", "input", "for", "an", "encoder", "NUMBER", "I", "apologize", "for", "the", "confusion", "Are", "there", "some", "test", "for", "the", "parallel", "encoding", "interface", "preset", "These", "test", "could", "be", "use", "to", "verify", "the", "correctness", "of", "this", "parallel", "code", "NUMBER", "Hi", "I", "checked", "the", "BrotliCompressBufferParallel", "function", "in", "encode_parallel", "NUMBER", "cc", "and", "can", "t", "find", "any", "parallel", "execution", "but", "it", "looks", "more", "like", "it", "was", "prepared", "for", "parallel", "execution", "with", "openMP", "NUMBER", "Can", "you", "give", "me", "an", "idea", "where", "to", "find", "the", "parallel", "Okay", "thank", "you", "I", "be", "going", "to", "try", "some", "OpenMP", "parallelisation", "I", "recommend", "reviewing", "each", "commit", "individually", "NUMBER", "The", "large", "commit", "that", "touch", "many", "lines", "be", "actually", "fairly", "mechanical", "change", "that", "do", "not", "change", "the", "semantic", "meaning", "of", "the", "text", "at", "all", "NUMBER", "I", "include", "rationale", "for", "every", "change", "in", "the", "description", "of", "each", "commit", "NUMBER", "Keeping", "track", "of", "what", "has", "be", "merge", "or", "abandoned", "NUMBER", "ad", "NUMBER", "Minor", "format", "change", "NUMBER", "ea", "NUMBER", "Fix", "ambiguity", "about", "whether", "final", "bit", "padding", "must", "be", "zero", "NUMBER", "a", "NUMBER", "c", "NUMBER", "Make", "pseudo", "code", "more", "code", "like", "NUMBER", "f", "NUMBER", "Clarify", "simple", "and", "complex", "prefix", "code", "NUMBER", "a", "NUMBER", "f", "NUMBER", "Define", "the", "maximum", "number", "of", "bytes", "transforms", "may", "add", "to", "a", "word", "NUMBER", "ff", "NUMBER", "f", "Minor", "format", "change", "NUMBER", "ba", "NUMBER", "ac", "Minor", "format", "of", "Section", "NUMBER", "and", "Section", "NUMBER", "fcd", "NUMBER", "db", "Clarify", "Section", "NUMBER", "NUMBER", "bb", "NUMBER", "Use", "consistent", "bit", "convention", "in", "Section", "NUMBER", "f", "NUMBER", "f", "NUMBER", "c", "Clarify", "section", "NUMBER", "NUMBER", "d", "NUMBER", "a", "NUMBER", "Clarify", "Section", "NUMBER", "NUMBER", "d", "NUMBER", "Clarify", "Section", "NUMBER", "SGTM", "NUMBER", "I", "made", "a", "seperate", "PR", "for", "Section", "NUMBER", "f", "NUMBER", "f", "NUMBER", "c", "NUMBER", "Could", "you", "create", "a", "new", "PR", "with", "the", "remaining", "two", "commit", "This", "one", "do", "not", "seem", "to", "be", "mergeable", "any", "more", "NUMBER", "Abandoning", "since", "this", "be", "get", "too", "messy", "NUMBER", "Hi", "how", "can", "I", "calculate", "the", "best", "values", "for", "lgwin", "and", "lgblock", "If", "I", "use", "the", "default", "values", "to", "compress", "a", "buffer", "with", "only", "a", "few", "KB", "brotli", "allocates", "NUMBER", "MB", "for", "the", "ringbuffer", "NUMBER", "I", "think", "this", "makes", "no", "sense", "so", "wouldnt", "it", "be", "a", "good", "idea", "to", "calculate", "the", "two", "values", "depending", "on", "the", "size", "of", "the", "data", "that", "should", "be", "compressed", "thx", "Does", "this", "solution", "make", "sense", "params", "NUMBER", "lgwin", "NUMBER", "for", "int", "i", "NUMBER", "i", "TAG", "NUMBER", "We", "will", "fix", "this", "within", "three", "days", "NUMBER", "Sure", "thanks", "NUMBER", "I", "ve", "identified", "that", "it", "worked", "as", "expected", "with", "quality", "TAG", "NUMBER", "goto", "error", "Is", "this", "expected", "yes", "it", "was", "change", "with", "NUMBER", "d", "NUMBER", "b", "NUMBER", "ad", "NUMBER", "fe", "NUMBER", "a", "NUMBER", "f", "NUMBER", "d", "NUMBER", "the", "python", "extension", "needs", "to", "be", "update", "accordingly", "NUMBER", "thanks", "for", "spotting", "it", "However", "the", "latest", "draft", "of", "Brotli", "specification", "still", "says", "NUMBER", "to", "NUMBER", "though", "LINK", "alakuijala", "brotli", "NUMBER", "txt", "L", "NUMBER", "The", "sliding", "window", "size", "be", "a", "power", "of", "two", "minus", "NUMBER", "where", "the", "power", "be", "in", "the", "range", "of", "NUMBER", "to", "NUMBER", "Could", "anyone", "confirm", "before", "I", "send", "the", "patch", "that", "for", "lgwin", "the", "allow", "range", "needs", "to", "be", "change", "from", "the", "current", "NUMBER", "to", "NUMBER", "like", "it", "says", "in", "enc", "encode", "NUMBER", "h", "file", "as", "per", "commit", "NUMBER", "d", "NUMBER", "b", "NUMBER", "ad", "NUMBER", "fe", "NUMBER", "a", "NUMBER", "f", "NUMBER", "d", "NUMBER", "Thanks", "NUMBER", "cc", "szabadka", "thanks", "to", "grep", "This", "patch", "be", "meant", "to", "address", "issue", "NUMBER", "by", "replacing", "all", "uses", "of", "vector", "NUMBER", "data", "with", "vector", "NUMBER", "NUMBER", "I", "also", "remove", "the", "distutils", "patch", "inside", "setup", "NUMBER", "py", "so", "that", "the", "correct", "MSVC", "compiler", "version", "be", "selected", "automatically", "based", "on", "the", "python", "version", "NUMBER", "for", "Py", "NUMBER", "NUMBER", "for", "Python", "NUMBER", "etc", "NUMBER", "The", "import", "setuptools", "at", "the", "beginning", "of", "setup", "NUMBER", "py", "be", "required", "to", "use", "the", "MS", "Visual", "C", "for", "Python", "NUMBER", "LINK", "NUMBER", "Unfortunately", "the", "stock", "distutils", "fail", "to", "locate", "the", "vcvarsall", "NUMBER", "bat", "file", "NUMBER", "This", "issue", "be", "fix", "in", "setuptools", "which", "be", "now", "bundled", "along", "with", "pip", "with", "the", "latest", "Python", "NUMBER", "org", "installers", "and", "be", "the", "recommended", "way", "to", "distribute", "Python", "package", "NUMBER", "I", "know", "it", "looks", "terrible", "but", "at", "least", "shows", "how", "with", "little", "change", "we", "can", "make", "it", "work", "even", "with", "MSVC", "NUMBER", "and", "Windows", "Python", "NUMBER", "Let", "me", "know", "what", "you", "think", "NUMBER", "Thanks", "Thanks", "I", "ve", "just", "rebased", "and", "forced", "push", "to", "this", "same", "PR", "branch", "NUMBER", "There", "was", "still", "one", "remaining", "instance", "of", "NUMBER", "data", "inside", "python", "brotlimodule", "NUMBER", "cc", "git", "grep", "NUMBER", "data", "python", "brotlimodule", "NUMBER", "cc", "ret", "PyBytes_FromStringAndSize", "char", "output", "NUMBER", "data", "output", "NUMBER", "size", "I", "change", "it", "to", "the", "following", "diff", "if", "ok", "ret", "PyBytes_FromStringAndSize", "char", "output", "NUMBER", "data", "output", "NUMBER", "size", "ret", "PyBytes_FromStringAndSize", "char", "output", "NUMBER", "size", "output", "NUMBER", "NULL", "output", "NUMBER", "size", "else", "Let", "me", "know", "if", "that", "be", "ok", "NUMBER", "Let", "s", "cross", "fingers", "on", "the", "Appveyor", "Python", "NUMBER", "build", "it", "should", "now", "be", "use", "its", "native", "MSVC", "NUMBER", "sorry", "for", "the", "typo", "I", "meant", "the", "Appveyor", "Py", "NUMBER", "build", "should", "_now_", "be", "use", "MSVC", "NUMBER", "it", "s", "work", "This", "be", "Ubuntu", "NUMBER", "g", "I", "usr", "share", "R", "include", "DNDEBUG", "Wno", "sign", "compare", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "Wno", "unuse", "pedantic", "c", "wrapper", "NUMBER", "cc", "o", "wrapper", "NUMBER", "o", "installing", "source", "package", "brotli", "NUMBER", "libs", "In", "file", "include", "from", "enc", "encode", "NUMBER", "h", "NUMBER", "NUMBER", "from", "wrapper", "NUMBER", "cc", "NUMBER", "enc", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "invoking", "macro", "length", "argument", "NUMBER", "empty", "macro", "argument", "be", "undefined", "in", "ISO", "C", "NUMBER", "and", "ISO", "C", "NUMBER", "enable", "by", "default", "int", "length", "const", "enc", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "invoking", "macro", "length", "argument", "NUMBER", "empty", "macro", "argument", "be", "undefined", "in", "ISO", "C", "NUMBER", "and", "ISO", "C", "NUMBER", "enable", "by", "default", "return", "code", "code", "length", "In", "file", "include", "from", "enc", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "from", "enc", "encode", "NUMBER", "h", "NUMBER", "from", "wrapper", "NUMBER", "cc", "NUMBER", "enc", "NUMBER", "NUMBER", "transform", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "comma", "at", "end", "of", "enumerator", "list", "Wpedantic", "kOmitFirst", "NUMBER", "NUMBER", "In", "file", "include", "from", "wrapper", "NUMBER", "cc", "NUMBER", "NUMBER", "enc", "encode", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "comma", "at", "end", "of", "enumerator", "list", "Wpedantic", "MODE_FONT", "NUMBER", "gcc", "std", "gnu", "NUMBER", "I", "usr", "share", "R", "include", "DNDEBUG", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "pedantic", "std", "gnu", "NUMBER", "c", "dec", "bit_reader", "NUMBER", "c", "o", "dec", "bit_reader", "NUMBER", "o", "gcc", "std", "gnu", "NUMBER", "I", "usr", "share", "R", "include", "DNDEBUG", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "pedantic", "std", "gnu", "NUMBER", "c", "dec", "decode", "NUMBER", "c", "o", "dec", "decode", "NUMBER", "o", "gcc", "std", "gnu", "NUMBER", "I", "usr", "share", "R", "include", "DNDEBUG", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "pedantic", "std", "gnu", "NUMBER", "c", "dec", "dictionary", "NUMBER", "c", "o", "dec", "dictionary", "NUMBER", "o", "gcc", "std", "gnu", "NUMBER", "I", "usr", "share", "R", "include", "DNDEBUG", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "pedantic", "std", "gnu", "NUMBER", "c", "dec", "huffman", "NUMBER", "c", "o", "dec", "huffman", "NUMBER", "o", "gcc", "std", "gnu", "NUMBER", "I", "usr", "share", "R", "include", "DNDEBUG", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "pedantic", "std", "gnu", "NUMBER", "c", "dec", "state", "NUMBER", "c", "o", "dec", "state", "NUMBER", "o", "gcc", "std", "gnu", "NUMBER", "I", "usr", "share", "R", "include", "DNDEBUG", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "pedantic", "std", "gnu", "NUMBER", "c", "dec", "streams", "NUMBER", "c", "o", "dec", "streams", "NUMBER", "o", "ar", "rcs", "libdec", "NUMBER", "a", "dec", "bit_reader", "NUMBER", "o", "dec", "decode", "NUMBER", "o", "dec", "dictionary", "NUMBER", "o", "dec", "huffman", "NUMBER", "o", "dec", "state", "NUMBER", "o", "dec", "streams", "NUMBER", "o", "g", "I", "usr", "share", "R", "include", "DNDEBUG", "Wno", "sign", "compare", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "Wno", "unuse", "pedantic", "c", "enc", "backward_references", "NUMBER", "cc", "o", "enc", "backward_references", "NUMBER", "o", "In", "file", "include", "from", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "from", "enc", "NUMBER", "backward_references", "NUMBER", "h", "NUMBER", "from", "enc", "backward_references", "NUMBER", "cc", "NUMBER", "enc", "NUMBER", "NUMBER", "NUMBER", "transform", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "comma", "at", "end", "of", "enumerator", "list", "Wpedantic", "kOmitFirst", "NUMBER", "NUMBER", "g", "I", "usr", "share", "R", "include", "DNDEBUG", "Wno", "sign", "compare", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "Wno", "unuse", "pedantic", "c", "enc", "block_splitter", "NUMBER", "cc", "o", "enc", "block_splitter", "NUMBER", "o", "g", "I", "usr", "share", "R", "include", "DNDEBUG", "Wno", "sign", "compare", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "Wno", "unuse", "pedantic", "c", "enc", "brotli_bit_stream", "NUMBER", "cc", "o", "enc", "brotli_bit_stream", "NUMBER", "o", "enc", "brotli_bit_stream", "NUMBER", "cc", "NUMBER", "NUMBER", "warning", "use", "of", "C", "NUMBER", "x", "long", "long", "integer", "constant", "Wlong", "long", "uint", "NUMBER", "_t", "lenextra", "cmd", "NUMBER", "cmd_extra_", "NUMBER", "xffffffffffffULL", "enc", "brotli_bit_stream", "NUMBER", "cc", "NUMBER", "NUMBER", "warning", "use", "of", "C", "NUMBER", "x", "long", "long", "integer", "constant", "Wlong", "long", "const", "uint", "NUMBER", "_t", "lenextra", "cmd", "NUMBER", "cmd_extra_", "NUMBER", "xffffffffffffULL", "g", "I", "usr", "share", "R", "include", "DNDEBUG", "Wno", "sign", "compare", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "Wno", "unuse", "pedantic", "c", "enc", "encode", "NUMBER", "cc", "o", "enc", "encode", "NUMBER", "o", "In", "file", "include", "from", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "from", "enc", "NUMBER", "encode", "NUMBER", "h", "NUMBER", "from", "enc", "encode", "NUMBER", "cc", "NUMBER", "enc", "NUMBER", "NUMBER", "NUMBER", "transform", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "comma", "at", "end", "of", "enumerator", "list", "Wpedantic", "kOmitFirst", "NUMBER", "NUMBER", "In", "file", "include", "from", "enc", "encode", "NUMBER", "cc", "NUMBER", "NUMBER", "enc", "NUMBER", "encode", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "comma", "at", "end", "of", "enumerator", "list", "Wpedantic", "MODE_FONT", "NUMBER", "g", "I", "usr", "share", "R", "include", "DNDEBUG", "Wno", "sign", "compare", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "Wno", "unuse", "pedantic", "c", "enc", "encode_parallel", "NUMBER", "cc", "o", "enc", "encode_parallel", "NUMBER", "o", "In", "file", "include", "from", "enc", "NUMBER", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "from", "enc", "NUMBER", "NUMBER", "encode", "NUMBER", "h", "NUMBER", "from", "enc", "NUMBER", "encode_parallel", "NUMBER", "h", "NUMBER", "from", "enc", "encode_parallel", "NUMBER", "cc", "NUMBER", "enc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "transform", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "comma", "at", "end", "of", "enumerator", "list", "Wpedantic", "kOmitFirst", "NUMBER", "NUMBER", "In", "file", "include", "from", "enc", "NUMBER", "encode_parallel", "NUMBER", "h", "NUMBER", "NUMBER", "from", "enc", "encode_parallel", "NUMBER", "cc", "NUMBER", "enc", "NUMBER", "NUMBER", "encode", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "comma", "at", "end", "of", "enumerator", "list", "Wpedantic", "MODE_FONT", "NUMBER", "g", "I", "usr", "share", "R", "include", "DNDEBUG", "Wno", "sign", "compare", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "Wno", "unuse", "pedantic", "c", "enc", "entropy_encode", "NUMBER", "cc", "o", "enc", "entropy_encode", "NUMBER", "o", "g", "I", "usr", "share", "R", "include", "DNDEBUG", "Wno", "sign", "compare", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "Wno", "unuse", "pedantic", "c", "enc", "streams", "NUMBER", "cc", "o", "enc", "streams", "NUMBER", "o", "g", "I", "usr", "share", "R", "include", "DNDEBUG", "Wno", "sign", "compare", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "Wno", "unuse", "pedantic", "c", "enc", "histogram", "NUMBER", "cc", "o", "enc", "histogram", "NUMBER", "o", "g", "I", "usr", "share", "R", "include", "DNDEBUG", "Wno", "sign", "compare", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "Wno", "unuse", "pedantic", "c", "enc", "literal_cost", "NUMBER", "cc", "o", "enc", "literal_cost", "NUMBER", "o", "g", "I", "usr", "share", "R", "include", "DNDEBUG", "Wno", "sign", "compare", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "Wno", "unuse", "pedantic", "c", "enc", "metablock", "NUMBER", "cc", "o", "enc", "metablock", "NUMBER", "o", "g", "I", "usr", "share", "R", "include", "DNDEBUG", "Wno", "sign", "compare", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "Wno", "unuse", "pedantic", "c", "enc", "static_dict", "NUMBER", "cc", "o", "enc", "static_dict", "NUMBER", "o", "In", "file", "include", "from", "enc", "static_dict", "NUMBER", "cc", "NUMBER", "NUMBER", "enc", "NUMBER", "transform", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "comma", "at", "end", "of", "enumerator", "list", "Wpedantic", "kOmitFirst", "NUMBER", "NUMBER", "g", "I", "usr", "share", "R", "include", "DNDEBUG", "Wno", "sign", "compare", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "O", "NUMBER", "Wall", "pipe", "Wno", "unuse", "pedantic", "c", "enc", "utf", "NUMBER", "_util", "NUMBER", "cc", "o", "enc", "utf", "NUMBER", "_util", "NUMBER", "o", "ar", "rcs", "libenc", "NUMBER", "a", "enc", "backward_references", "NUMBER", "o", "enc", "block_splitter", "NUMBER", "o", "enc", "brotli_bit_stream", "NUMBER", "o", "enc", "encode", "NUMBER", "o", "enc", "encode_parallel", "NUMBER", "o", "enc", "entropy_encode", "NUMBER", "o", "enc", "streams", "NUMBER", "o", "enc", "histogram", "NUMBER", "o", "enc", "literal_cost", "NUMBER", "o", "enc", "metablock", "NUMBER", "o", "enc", "static_dict", "NUMBER", "o", "enc", "utf", "NUMBER", "_util", "NUMBER", "o", "g", "shared", "L", "usr", "lib", "R", "lib", "Wl", "Bsymbolic", "function", "Wl", "z", "relro", "o", "brotli", "NUMBER", "so", "wrapper", "NUMBER", "o", "L", "NUMBER", "lenc", "ldec", "L", "usr", "lib", "R", "lib", "lR", "installing", "to", "usr", "local", "lib", "R", "site", "library", "brotli", "libs", "Version", "be", "at", "NUMBER", "with", "no", "corresponding", "release", "What", "be", "the", "license", "of", "the", "paper", "Comparison", "of", "Brotli", "Deflate", "Zopfli", "LZMA", "LZHAM", "and", "Bzip", "NUMBER", "Compression", "Algorithms", "LINK", "NUMBER", "NUMBER", "NUMBER", "pdf", "Can", "I", "freely", "distribute", "this", "document", "Thank", "you", "NUMBER", "This", "be", "with", "gcc", "NUMBER", "on", "Windows", "NUMBER", "See", "log", "file", "LINK", "QWDp", "NUMBER", "w", "NUMBER", "NUMBER", "maybe", "you", "need", "to", "remove", "enc", "dictionary", "NUMBER", "h", "and", "add", "enc", "dictionary", "NUMBER", "cc", "to", "the", "list", "of", "sources", "and", "headers", "in", "the", "setup", "NUMBER", "py", "never", "mind", "the", "Appveyor", "build", "be", "passing", "now", "NUMBER", "Hello", "I", "had", "a", "trouble", "use", "BrotliMem", "In", "Out", "adaptors", "while", "compressing", "large", "chunk", "of", "data", "NUMBER", "GB", "NUMBER", "So", "I", "m", "sending", "PR", "that", "be", "supposed", "to", "fix", "this", "problem", "NUMBER", "Sure", "Just", "did", "it", "NUMBER", "Brotli", "currently", "always", "finds", "matches", "use", "cache", "tables", "each", "NUMBER", "byte", "or", "NUMBER", "byte", "for", "lower", "quality", "compression", "sequence", "be", "hashed", "and", "placed", "in", "a", "limited", "size", "array", "of", "sequences", "which", "share", "the", "same", "hash", "code", "NUMBER", "This", "works", "great", "in", "many", "cases", "but", "be", "not", "really", "well", "suited", "for", "large", "windows", "especially", "in", "high", "compression", "modes", "NUMBER", "An", "alternative", "which", "be", "use", "in", "LZMA", "and", "some", "other", "compressors", "be", "to", "have", "each", "hash", "bucket", "store", "a", "binary", "tree", "of", "sequences", "which", "share", "that", "hash", "code", "NUMBER", "The", "tree", "be", "sorted", "in", "two", "ways", "by", "sequences", "in", "lexicographic", "order", "and", "as", "a", "minheap", "for", "distance", "the", "shortest", "distances", "be", "at", "the", "top", "NUMBER", "Matches", "can", "be", "find", "by", "searching", "for", "the", "current", "sequence", "in", "the", "tree", "while", "re", "rooting", "the", "tree", "NUMBER", "There", "be", "normally", "two", "binary", "tree", "nodes", "allocated", "for", "each", "position", "in", "the", "sliding", "window", "so", "this", "do", "require", "additional", "memory", "NUMBER", "times", "the", "sliding", "window", "size", "in", "bytes", "NUMBER", "I", "implement", "this", "as", "a", "proof", "of", "concept", "to", "see", "what", "would", "happen", "NUMBER", "It", "do", "indeed", "seem", "to", "be", "better", "here", "be", "some", "example", "results", "with", "an", "uncompressed", "archive", "of", "the", "silesia", "corpus", "NUMBER", "NUMBER", "NUMBER", "bytes", "at", "quality", "NUMBER", "Current", "version", "compressed", "to", "NUMBER", "NUMBER", "NUMBER", "bytes", "in", "NUMBER", "mins", "NUMBER", "secs", "With", "binary", "tree", "matchfinder", "compressed", "to", "NUMBER", "NUMBER", "NUMBER", "bytes", "in", "NUMBER", "mins", "NUMBER", "secs", "The", "code", "can", "be", "find", "at", "repository", "LINK", "branch", "bt_matchfinder", "NUMBER", "Please", "feel", "free", "to", "do", "whatever", "you", "want", "with", "the", "code", "NUMBER", "I", "ve", "left", "several", "TODOS", "in", "it", "NUMBER", "Tried", "the", "same", "data", "with", "a", "NUMBER", "MiB", "window", "Current", "version", "compressed", "to", "NUMBER", "NUMBER", "NUMBER", "bytes", "in", "NUMBER", "mins", "NUMBER", "secs", "With", "binary", "tree", "matchfinder", "compressed", "to", "NUMBER", "NUMBER", "NUMBER", "bytes", "in", "NUMBER", "mins", "NUMBER", "secs", "Hello", "NUMBER", "Thank", "you", "for", "your", "fantastic", "research", "Changes", "that", "improve", "both", "speed", "and", "compression", "ratio", "be", "very", "valuable", "for", "any", "compressor", "NUMBER", "We", "be", "going", "to", "explore", "this", "solution", "and", "try", "to", "implement", "it", "in", "brotli", "NUMBER", "PS", "sorry", "for", "the", "late", "response", "NUMBER", "Thanks", "for", "the", "suggestion", "this", "was", "implement", "in", "NUMBER", "mostly", "along", "the", "lines", "of", "your", "proof", "of", "concept", "NUMBER", "Hi", "Brotli", "team", "despite", "me", "be", "one", "of", "Google", "haters", "let", "me", "share", "my", "NUMBER", "cents", "on", "current", "Brotli", "status", "NUMBER", "In", "next", "several", "months", "I", "intend", "to", "juxtapose", "several", "high", "performance", "textual", "compressors", "with", "one", "goal", "in", "mind", "showing", "most", "balanced", "ones", "for", "high", "ratio", "high", "decompression", "speed", "scenario", "NUMBER", "Yesterday", "I", "downloaded", "your", "master", "zip", "and", "compiled", "with", "several", "syntactic", "change", "with", "Intel", "v", "NUMBER", "optimizer", "NUMBER", "In", "my", "incoming", "showdown", "I", "want", "to", "include", "Brotli", "wanting", "to", "see", "how", "it", "performs", "in", "its", "best", "environment", "I", "speak", "textual", "mostly", "English", "texts", "file", "NUMBER", "Question", "NUMBER", "Since", "my", "goal", "be", "to", "show", "tightness", "decompression", "speed", "top", "performers", "be", "following", "enforced", "defaults", "best", "struct", "BrotliParams", "BrotliParams", "mode", "MODE_GENERIC", "quality", "NUMBER", "lgwin", "NUMBER", "lgblock", "NUMBER", "enable_dictionary", "true", "enable_transforms", "false", "greedy_block_split", "false", "enable_context_modeling", "true", "mode", "MODE_TEXT", "quality", "NUMBER", "lgwin", "NUMBER", "lgblock", "NUMBER", "enable_dictionary", "true", "enable_transforms", "false", "greedy_block_split", "false", "enable_context_modeling", "true", "It", "would", "be", "very", "good", "to", "make", "these", "command", "line", "toggleable", "no", "Question", "NUMBER", "Your", "little", "announcement", "makes", "the", "impression", "Brotli", "be", "something", "special", "on", "text", "what", "do", "I", "miss", "to", "see", "that", "My", "quick", "test", "shows", "goodness", "but", "not", "greatness", "The", "below", "stats", "be", "for", "your", "yesterday", "commit", "compiled", "with", "Intel", "v", "NUMBER", "O", "NUMBER", "use", "Brotli", "outperforms", "Shifune", "but", "in", "decompression", "speed", "department", "NUMBER", "x", "be", "no", "joke", "don", "t", "tell", "me", "if", "I", "use", "a", "browser", "or", "some", "English", "texts", "full", "text", "browser", "searcher", "Brotli", "will", "load", "dickens", "faster", "than", "Zstd", "or", "even", "Shifune", "NUMBER", "D", "bro_Intel", "NUMBER", "exe", "i", "dickens", "o", "dickens", "NUMBER", "brotli", "v", "Brotli", "compression", "speed", "NUMBER", "MB", "s", "D", "bro_Intel", "NUMBER", "exe", "i", "dickens", "NUMBER", "brotli", "o", "dickens", "v", "d", "f", "Brotli", "decompression", "speed", "NUMBER", "MB", "s", "D", "bro_Intel", "NUMBER", "exe", "i", "dickens", "NUMBER", "brotli", "o", "dickens", "v", "d", "f", "Brotli", "decompression", "speed", "NUMBER", "MB", "s", "D", "bro_Intel", "NUMBER", "exe", "i", "dickens", "NUMBER", "brotli", "o", "dickens", "v", "d", "f", "Brotli", "decompression", "speed", "NUMBER", "MB", "s", "D", "bro_Intel", "NUMBER", "exe", "i", "dickens", "NUMBER", "brotli", "o", "dickens", "v", "d", "f", "r", "NUMBER", "Brotli", "decompression", "speed", "NUMBER", "MB", "s", "D", "bro_Intel", "NUMBER", "exe", "i", "dickens", "NUMBER", "brotli", "o", "dickens", "v", "d", "f", "r", "NUMBER", "Brotli", "decompression", "speed", "NUMBER", "MB", "s", "D", "bro_Intel", "NUMBER", "exe", "i", "dickens", "NUMBER", "brotli", "o", "dickens", "v", "d", "f", "r", "NUMBER", "Brotli", "decompression", "speed", "NUMBER", "MB", "s", "D", "bro_Intel", "NUMBER", "exe", "i", "dickens", "NUMBER", "brotli", "o", "dickens", "v", "d", "f", "r", "NUMBER", "Brotli", "decompression", "speed", "NUMBER", "MB", "s", "D", "Nakamichi_Shifune_branchfull", "NUMBER", "exe", "dickens", "NUMBER", "Nakamichi", "report", "Nakamichi", "Shifune", "Totenschiff", "write", "by", "Kaze", "based", "on", "Nobuo", "Ito", "s", "LZSS", "source", "babealicious", "suggestion", "by", "m", "NUMBER", "enforced", "muffinesque", "suggestion", "by", "Jim", "Dempsey", "enforced", "NUMBER", "Note", "This", "compile", "can", "handle", "file", "up", "to", "NUMBER", "MB", "NUMBER", "Decompressing", "NUMBER", "bytes", "NUMBER", "RAM", "to", "RAM", "performance", "NUMBER", "MB", "s", "NUMBER", "Compression", "Ratio", "bigger", "the", "better", "NUMBER", "NUMBER", "D", "dir", "dic", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "dickens", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "dickens", "NUMBER", "brotli", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "dickens", "NUMBER", "Nakamichi", "D", "The", "above", "quick", "run", "was", "do", "on", "my", "Core", "NUMBER", "laptop", "on", "Haswell", "the", "NUMBER", "x", "may", "jump", "up", "to", "NUMBER", "x", "hands", "down", "hate", "that", "I", "don", "t", "have", "Haswell", "or", "alike", "to", "share", "the", "actual", "stats", "NUMBER", "Question", "NUMBER", "Don", "t", "you", "think", "that", "your", "defaults", "encode", "NUMBER", "h", "be", "too", "low", "I", "do", "my", "big", "test", "shows", "worse", "ratio", "than", "gzip", "D", "zpaq", "NUMBER", "add", "_Deathship_textual_corpus", "NUMBER", "tar", "NUMBER", "method", "NUMBER", "zpaq", "_Deathship_textual_corpus", "NUMBER", "tar", "method", "NUMBER", "threads", "NUMBER", "D", "bsc", "e", "_Deathship_textual_corpus", "NUMBER", "tar", "_Deathship_textual_corpus", "NUMBER", "tar", "NUMBER", "ST", "NUMBER", "Block", "NUMBER", "bsc", "b", "NUMBER", "m", "NUMBER", "cp", "Tt", "D", "xz", "z", "k", "f", "NUMBER", "e", "v", "v", "threads", "NUMBER", "_Deathship_textual_corpus", "NUMBER", "tar", "D", "lzturbo", "NUMBER", "exe", "NUMBER", "b", "NUMBER", "p", "NUMBER", "_Deathship_textual_corpus", "NUMBER", "tar", "_Deathship_textual_corpus", "NUMBER", "tar", "NUMBER", "MB", "NUMBER", "lzturbo", "NUMBER", "NUMBER", "lzt", "D", "zpaq", "NUMBER", "add", "_Deathship_textual_corpus", "NUMBER", "tar", "NUMBER", "method", "NUMBER", "zpaq", "_Deathship_textual_corpus", "NUMBER", "tar", "method", "NUMBER", "threads", "NUMBER", "D", "NUMBER", "za", "a", "tgzip", "mx", "NUMBER", "_Deathship_textual_corpus", "NUMBER", "tar", "NUMBER", "zip", "_Deathship_textual_corpus", "NUMBER", "tar", "D", "bro_Intel", "NUMBER", "exe", "i", "_Deathship_textual_corpus", "NUMBER", "tar", "o", "_Deathship_textual_corpus", "NUMBER", "tar", "NUMBER", "brotli", "v", "D", "zstd", "NUMBER", "exe", "_Deathship_textual_corpus", "NUMBER", "tar", "D", "LZ", "NUMBER", "exe", "NUMBER", "_Deathship_textual_corpus", "NUMBER", "tar", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "_Deathship_textual_corpus", "NUMBER", "tar", "NUMBER", "method", "NUMBER", "zpaq", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "_Deathship_textual_corpus", "NUMBER", "tar", "NUMBER", "ST", "NUMBER", "Block", "NUMBER", "bsc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "_Deathship_textual_corpus", "NUMBER", "tar", "NUMBER", "xz", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "_Deathship_textual_corpus", "NUMBER", "tar", "NUMBER", "MB", "NUMBER", "lzturbo", "NUMBER", "NUMBER", "lzt", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "_Deathship_textual_corpus", "NUMBER", "tar", "NUMBER", "method", "NUMBER", "zpaq", "Here", "comes", "Nakamichi", "Shifune", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "_Deathship_textual_corpus", "NUMBER", "tar", "NUMBER", "zip", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "_Deathship_textual_corpus", "NUMBER", "tar", "NUMBER", "brotli", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "_Deathship_textual_corpus", "NUMBER", "tar", "NUMBER", "zst", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "_Deathship_textual_corpus", "NUMBER", "tar", "NUMBER", "lz", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "_Deathship_textual_corpus", "NUMBER", "tar", "A", "glimpse", "at", "my", "unfinished", "latest", "benchmark", "www", "NUMBER", "sanmayce", "NUMBER", "com", "Hayabusa", "Deathship_showdown", "NUMBER", "pdf", "www", "NUMBER", "sanmayce", "NUMBER", "com", "Hayabusa", "Nakamichi_Shifune", "NUMBER", "pdf", "Suggestion", "NUMBER", "Your", "time", "report", "seem", "problematic", "I", "receive", "NUMBER", "MB", "s", "for", "big", "file", "NUMBER", "Please", "make", "Brotli", "with", "b", "benchmark", "or", "t", "test", "decompression", "without", "dump", "ability", "Zstd", "Z", "NUMBER", "have", "very", "good", "report", "NUMBER", "Your", "current", "speed", "report", "include", "fwrite", "time", "I", "want", "Brotli", "s", "pure", "RAM", "NUMBER", "RAM", "performance", "NUMBER", "Suggestion", "NUMBER", "Make", "it", "compileable", "with", "Intel", "C", "C", "optimizer", "this", "will", "be", "appreciated", "by", "me", "for", "one", "NUMBER", "Current", "change", "in", "bro", "NUMBER", "cc", "I", "made", "to", "run", "it", "NUMBER", "include", "TAG", "include", "TAG", "include", "TAG", "include", "TAG", "NUMBER", "static", "FILE", "OpenInputFile", "const", "char", "input_path", "if", "input_path", "NUMBER", "return", "fdopen", "STDIN_FILENO", "rb", "tool", "bro", "NUMBER", "cc", "NUMBER", "error", "identifier", "STDIN_FILENO", "be", "undefined", "return", "fdopen", "STDIN_FILENO", "rb", "if", "input_path", "NUMBER", "setmode", "_fileno", "stdin", "O_BINARY", "return", "stdin", "LINK", "us", "library", "aa", "NUMBER", "NUMBER", "v", "vs", "NUMBER", "NUMBER", "aspx", "int", "result", "Set", "stdin", "to", "have", "binary", "mode", "result", "_setmode", "_fileno", "stdin", "_O_BINARY", "if", "result", "NUMBER", "perror", "Cannot", "set", "mode", "else", "printf", "stdin", "successfully", "change", "to", "binary", "mode", "n", "FILE", "f", "fopen", "input_path", "rb", "if", "f", "NUMBER", "perror", "fopen", "exit", "NUMBER", "return", "f", "static", "FILE", "OpenOutputFile", "const", "char", "output_path", "const", "int", "force", "if", "output_path", "NUMBER", "return", "fdopen", "STDOUT_FILENO", "wb", "tool", "bro", "NUMBER", "cc", "NUMBER", "error", "identifier", "STDOUT_FILENO", "be", "undefined", "return", "fdopen", "STDOUT_FILENO", "wb", "if", "output_path", "NUMBER", "setmode", "_fileno", "stdout", "O_BINARY", "return", "stdout", "if", "force", "struct", "stat", "statbuf", "if", "stat", "output_path", "statbuf", "NUMBER", "fprintf", "stderr", "output", "file", "exists", "n", "exit", "NUMBER", "int", "fd", "open", "output_path", "O_CREAT", "O_WRONLY", "O_TRUNC", "S_IRUSR", "S_IWUSR", "tool", "bro", "NUMBER", "cc", "NUMBER", "error", "identifier", "S_IRUSR", "be", "undefined", "S_IRUSR", "S_IWUSR", "tool", "bro", "NUMBER", "cc", "NUMBER", "error", "identifier", "S_IWUSR", "be", "undefined", "S_IRUSR", "S_IWUSR", "FILE", "f", "fopen", "output_path", "wb", "if", "fd", "TAG", "type", "makeEXE", "NUMBER", "bat", "cd", "dec", "icl", "O", "NUMBER", "c", "bit_reader", "NUMBER", "c", "decode", "NUMBER", "c", "huffman", "NUMBER", "c", "state", "NUMBER", "c", "streams", "NUMBER", "c", "cd", "NUMBER", "cd", "enc", "icl", "O", "NUMBER", "c", "backward_references", "NUMBER", "cc", "block_splitter", "NUMBER", "cc", "brotli_bit_stream", "NUMBER", "cc", "encode", "NUMBER", "cc", "encode_parallel", "NUMBER", "cc", "entropy_encode", "NUMBER", "cc", "histogram", "NUMBER", "cc", "literal_cost", "NUMBER", "cc", "metablock", "NUMBER", "cc", "static_dict", "NUMBER", "cc", "streams", "NUMBER", "cc", "cd", "NUMBER", "cd", "tool", "icl", "O", "NUMBER", "bro", "NUMBER", "cc", "NUMBER", "dec", "bit_reader", "NUMBER", "obj", "NUMBER", "dec", "decode", "NUMBER", "obj", "NUMBER", "dec", "huffman", "NUMBER", "obj", "NUMBER", "dec", "state", "NUMBER", "obj", "NUMBER", "dec", "streams", "NUMBER", "obj", "NUMBER", "enc", "backward_references", "NUMBER", "obj", "NUMBER", "enc", "block_splitter", "NUMBER", "obj", "NUMBER", "enc", "brotli_bit_stream", "NUMBER", "obj", "NUMBER", "enc", "encode", "NUMBER", "obj", "NUMBER", "enc", "encode_parallel", "NUMBER", "obj", "NUMBER", "enc", "entropy_encode", "NUMBER", "obj", "NUMBER", "enc", "histogram", "NUMBER", "obj", "NUMBER", "enc", "literal_cost", "NUMBER", "obj", "NUMBER", "enc", "metablock", "NUMBER", "obj", "NUMBER", "enc", "static_dict", "NUMBER", "obj", "NUMBER", "enc", "streams", "NUMBER", "obj", "D", "brotli", "master", "makeEXE", "NUMBER", "bat", "D", "brotli", "master", "cd", "dec", "D", "brotli", "master", "dec", "icl", "O", "NUMBER", "c", "bit_reader", "NUMBER", "c", "decode", "NUMBER", "c", "huffman", "NUMBER", "c", "state", "NUMBER", "c", "streams", "NUMBER", "c", "Intel", "R", "C", "Intel", "R", "NUMBER", "Compiler", "XE", "for", "applications", "run", "on", "Intel", "R", "NUMBER", "Version", "NUMBER", "Build", "NUMBER", "Copyright", "C", "NUMBER", "NUMBER", "Intel", "Corporation", "NUMBER", "All", "rights", "reserved", "NUMBER", "bit_reader", "NUMBER", "c", "decode", "NUMBER", "c", "huffman", "NUMBER", "c", "state", "NUMBER", "c", "streams", "NUMBER", "c", "D", "brotli", "master", "dec", "cd", "NUMBER", "D", "brotli", "master", "cd", "enc", "D", "brotli", "master", "enc", "icl", "O", "NUMBER", "c", "backward_references", "NUMBER", "cc", "block_splitter", "NUMBER", "cc", "brotli_bit_stream", "NUMBER", "cc", "encode", "NUMBER", "cc", "encode_parallel", "NUMBER", "cc", "entropy_encode", "NUMBER", "cc", "histogram", "NUMBER", "cc", "literal_cost", "NUMBER", "cc", "metablock", "NUMBER", "cc", "static_dict", "NUMBER", "cc", "streams", "NUMBER", "cc", "Intel", "R", "C", "Intel", "R", "NUMBER", "Compiler", "XE", "for", "applications", "run", "on", "Intel", "R", "NUMBER", "Version", "NUMBER", "Build", "NUMBER", "Copyright", "C", "NUMBER", "NUMBER", "Intel", "Corporation", "NUMBER", "All", "rights", "reserved", "NUMBER", "backward_references", "NUMBER", "cc", "block_splitter", "NUMBER", "cc", "brotli_bit_stream", "NUMBER", "cc", "encode", "NUMBER", "cc", "encode_parallel", "NUMBER", "cc", "entropy_encode", "NUMBER", "cc", "histogram", "NUMBER", "cc", "literal_cost", "NUMBER", "cc", "metablock", "NUMBER", "cc", "static_dict", "NUMBER", "cc", "streams", "NUMBER", "cc", "D", "brotli", "master", "enc", "cd", "NUMBER", "D", "brotli", "master", "cd", "tool", "D", "brotli", "master", "tool", "icl", "O", "NUMBER", "bro", "NUMBER", "cc", "NUMBER", "dec", "bit_reader", "NUMBER", "obj", "NUMBER", "dec", "decode", "NUMBER", "obj", "NUMBER", "dec", "huffman", "NUMBER", "obj", "NUMBER", "dec", "state", "NUMBER", "obj", "NUMBER", "dec", "streams", "NUMBER", "obj", "NUMBER", "enc", "backward_references", "NUMBER", "obj", "NUMBER", "enc", "block_splitter", "NUMBER", "obj", "NUMBER", "enc", "brotli_bit_stream", "NUMBER", "obj", "NUMBER", "enc", "encode", "NUMBER", "obj", "NUMBER", "enc", "encode_parallel", "NUMBER", "obj", "NUMBER", "enc", "entropy_encode", "NUMBER", "obj", "NUMBER", "enc", "histogram", "NUMBER", "obj", "NUMBER", "enc", "literal_cost", "NUMBER", "obj", "NUMBER", "enc", "metablock", "NUMBER", "obj", "NUMBER", "enc", "static_dict", "NUMBER", "obj", "NUMBER", "enc", "streams", "NUMBER", "obj", "Intel", "R", "C", "Intel", "R", "NUMBER", "Compiler", "XE", "for", "applications", "run", "on", "Intel", "R", "NUMBER", "Version", "NUMBER", "Build", "NUMBER", "Copyright", "C", "NUMBER", "NUMBER", "Intel", "Corporation", "NUMBER", "All", "rights", "reserved", "NUMBER", "bro", "NUMBER", "cc", "Microsoft", "R", "Incremental", "Linker", "Version", "NUMBER", "Copyright", "C", "Microsoft", "Corporation", "NUMBER", "All", "rights", "reserved", "NUMBER", "out", "bro", "NUMBER", "exe", "bro", "NUMBER", "obj", "NUMBER", "dec", "bit_reader", "NUMBER", "obj", "NUMBER", "dec", "decode", "NUMBER", "obj", "NUMBER", "dec", "huffman", "NUMBER", "obj", "NUMBER", "dec", "state", "NUMBER", "obj", "NUMBER", "dec", "streams", "NUMBER", "obj", "NUMBER", "enc", "backward_references", "NUMBER", "obj", "NUMBER", "enc", "block_splitter", "NUMBER", "obj", "NUMBER", "enc", "brotli_bit_stream", "NUMBER", "obj", "NUMBER", "enc", "encode", "NUMBER", "obj", "NUMBER", "enc", "encode_parallel", "NUMBER", "obj", "NUMBER", "enc", "entropy_encode", "NUMBER", "obj", "NUMBER", "enc", "histogram", "NUMBER", "obj", "NUMBER", "enc", "literal_cost", "NUMBER", "obj", "NUMBER", "enc", "metablock", "NUMBER", "obj", "NUMBER", "enc", "static_dict", "NUMBER", "obj", "NUMBER", "enc", "streams", "NUMBER", "obj", "D", "brotli", "master", "tool", "dir", "br", "NUMBER", "exe", "Volume", "in", "drive", "D", "be", "S", "NUMBER", "_Vol", "NUMBER", "Volume", "Serial", "Number", "be", "NUMBER", "NUMBER", "E", "NUMBER", "C", "Directory", "of", "D", "brotli", "master", "tool", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "bro", "NUMBER", "exe", "NUMBER", "File", "s", "NUMBER", "NUMBER", "NUMBER", "bytes", "NUMBER", "Dir", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "bytes", "free", "D", "brotli", "master", "tool", "bro", "D", "brotli", "master", "tool", "bro", "Usage", "bro", "force", "quality", "n", "decompress", "input", "filename", "output", "filename", "repeat", "iters", "verbose", "D", "brotli", "master", "tool", "And", "a", "final", "note", "a", "byte", "angry", "in", "your", "promoting", "paper", "you", "say", "Decompresses", "much", "faster", "than", "current", "LZMA", "implementations", "usually", "amateurs", "like", "me", "use", "NUMBER", "x", "NUMBER", "x", "or", "NUMBER", "x", "your", "much", "be", "not", "good", "one", "would", "think", "from", "NUMBER", "x", "to", "NUMBER", "x", "NUMBER", "Also", "why", "don", "t", "you", "mention", "the", "current", "best", "IMO", "decompressor", "on", "INTERNET", "Not", "mentioning", "it", "LzTurbo", "be", "like", "disrespecting", "not", "only", "the", "man", "behind", "it", "but", "the", "BEST", "as", "a", "general", "notion", "yes", "Hope", "you", "will", "refine", "Brotli", "and", "make", "it", "usable", "hi", "performance", "console", "tool", "NUMBER", "Regards", "Kaze", "The", "above", "quick", "run", "was", "do", "on", "my", "Core", "NUMBER", "laptop", "on", "Haswell", "the", "NUMBER", "x", "may", "jump", "up", "to", "NUMBER", "x", "hands", "down", "hate", "that", "I", "don", "t", "have", "Haswell", "or", "alike", "to", "share", "the", "actual", "stats", "NUMBER", "I", "be", "not", "alone", "one", "overclocker", "helped", "me", "a", "lot", "to", "benchmark", "your", "Brotli", "against", "the", "superb", "Zstd", "and", "my", "Shifune", "NUMBER", "column", "Intel", "Core", "NUMBER", "Q", "NUMBER", "s", "NUMBER", "MHz", "laptop", "Asus", "NUMBER", "column", "Intel", "i", "NUMBER", "NUMBER", "x", "Haswell", "E", "EP", "core", "cache", "NUMBER", "MHz", "NUMBER", "MHz", "RAM", "NUMBER", "MHz", "MOBO", "Asus", "Rampage", "V", "Extreme", "LINK", "_decompshowdown", "NUMBER", "jpeg", "NUMBER", "column", "Intel", "Core", "i", "NUMBER", "NUMBER", "K", "Skylake", "core", "cache", "NUMBER", "MHz", "NUMBER", "MHz", "RAM", "NUMBER", "MHz", "CL", "NUMBER", "MOBO", "Asus", "Maximus", "VIII", "Extreme", "LINK", "_decompshowdown", "NUMBER", "jpeg", "D", "Showdown_Brotli_vs_Zstd_vs_GZIP_vs_Shifune", "dir", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "Complete_Works_of_Fyodor_Dostoyevsky", "NUMBER", "txt", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "Complete_Works_of_Fyodor_Dostoyevsky", "NUMBER", "txt", "NUMBER", "MB", "NUMBER", "lzturbo", "NUMBER", "NUMBER", "lzt", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "Complete_Works_of_Fyodor_Dostoyevsky", "NUMBER", "txt", "NUMBER", "brotli", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "Complete_Works_of_Fyodor_Dostoyevsky", "NUMBER", "txt", "NUMBER", "Nakamichi", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "Complete_Works_of_Fyodor_Dostoyevsky", "NUMBER", "txt", "NUMBER", "zip", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "Complete_Works_of_Fyodor_Dostoyevsky", "NUMBER", "txt", "NUMBER", "zst", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "dickens", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "dickens", "NUMBER", "MB", "NUMBER", "lzturbo", "NUMBER", "NUMBER", "lzt", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "dickens", "NUMBER", "brotli", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "dickens", "NUMBER", "Nakamichi", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "dickens", "NUMBER", "zip", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "dickens", "NUMBER", "zst", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "enwik", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "enwik", "NUMBER", "MB", "NUMBER", "lzturbo", "NUMBER", "NUMBER", "lzt", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "enwik", "NUMBER", "brotli", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "enwik", "NUMBER", "Nakamichi", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "enwik", "NUMBER", "zip", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "enwik", "NUMBER", "zst", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "The_Book_of_The_Thousand_Nights_and_a_Night", "NUMBER", "txt", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "The_Book_of_The_Thousand_Nights_and_a_Night", "NUMBER", "txt", "NUMBER", "MB", "NUMBER", "lzturbo", "NUMBER", "NUMBER", "lzt", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "The_Book_of_The_Thousand_Nights_and_a_Night", "NUMBER", "txt", "NUMBER", "brotli", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "The_Book_of_The_Thousand_Nights_and_a_Night", "NUMBER", "txt", "NUMBER", "Nakamichi", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "The_Book_of_The_Thousand_Nights_and_a_Night", "NUMBER", "txt", "NUMBER", "zip", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "The_Book_of_The_Thousand_Nights_and_a_Night", "NUMBER", "txt", "NUMBER", "zst", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "The_Project_Gutenberg_EBook_of_The_King_James_Bible_kjv", "NUMBER", "txt", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "The_Project_Gutenberg_EBook_of_The_King_James_Bible_kjv", "NUMBER", "txt", "NUMBER", "MB", "NUMBER", "lzturbo", "NUMBER", "NUMBER", "lzt", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "The_Project_Gutenberg_EBook_of_The_King_James_Bible_kjv", "NUMBER", "txt", "NUMBER", "brotli", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "The_Project_Gutenberg_EBook_of_The_King_James_Bible_kjv", "NUMBER", "txt", "NUMBER", "Nakamichi", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "The_Project_Gutenberg_EBook_of_The_King_James_Bible_kjv", "NUMBER", "txt", "NUMBER", "zip", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "The_Project_Gutenberg_EBook_of_The_King_James_Bible_kjv", "NUMBER", "txt", "NUMBER", "zst", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "University_of_Canterbury_The_Calgary_Corpus", "NUMBER", "tar", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "University_of_Canterbury_The_Calgary_Corpus", "NUMBER", "tar", "NUMBER", "MB", "NUMBER", "lzturbo", "NUMBER", "NUMBER", "lzt", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "University_of_Canterbury_The_Calgary_Corpus", "NUMBER", "tar", "NUMBER", "brotli", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "NUMBER", "NUMBER", "NUMBER", "University_of_Canterbury_The_Calgary_Corpus", "NUMBER", "tar", "NUMBER", "Nakamichi", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "University_of_Canterbury_The_Calgary_Corpus", "NUMBER", "tar", "NUMBER", "zip", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "NUMBER", "NUMBER", "NUMBER", "University_of_Canterbury_The_Calgary_Corpus", "NUMBER", "tar", "NUMBER", "zst", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "NUMBER", "MB", "s", "D", "Showdown_Brotli_vs_Zstd_vs_GZIP_vs_Shifune", "Note", "Skylake", "be", "good", "however", "be", "newer", "than", "Broadwell", "I", "expected", "more", "NUMBER", "github", "LINK", "NUMBER", "d", "NUMBER", "e", "NUMBER", "NUMBER", "dca", "df", "NUMBER", "e", "NUMBER", "bf", "NUMBER", "e", "NUMBER", "a", "NUMBER", "png", "I", "was", "wrong", "about", "NUMBER", "x", "hands", "down", "in", "fact", "it", "be", "NUMBER", "x", "NUMBER", "x", "NUMBER", "Just", "a", "note", "on", "the", "unfairness", "about", "comparing", "LzTurbo", "I", "deliberately", "hurt", "the", "compression", "ratio", "of", "LzTurbo", "by", "choosing", "NUMBER", "MB", "block", "my", "intention", "was", "to", "silent", "the", "empty", "talkers", "who", "always", "complain", "use", "NUMBER", "MB", "sliding", "window", "gives", "significantly", "better", "compression", "since", "the", "inheritance", "in", "chunks", "blocks", "be", "lost", "this", "be", "in", "its", "turn", "unfair", "to", "LzTurbo", "Nowadays", "with", "constantly", "growing", "cores", "caches", "RAM", "size", "the", "bigger", "be", "the", "better", "so", "all", "these", "resources", "have", "to", "be", "utilized", "not", "like", "now", "UNDERUTILIZED", "NUMBER", "However", "run", "with", "small", "resources", "footprint", "be", "so", "cool", "BUT", "ONLY", "IN", "HEAVY", "MULTI", "THREADING", "yes", "I", "was", "trying", "to", "compress", "a", "NUMBER", "GB", "sqlite", "file", "with", "data", "from", "wikipedia", "on", "a", "machine", "with", "NUMBER", "GB", "of", "memory", "NUMBER", "And", "the", "command", "crash", "with", "std", "bad_alloc", "on", "quality", "NUMBER", "NUMBER", "and", "NUMBER", "Command", "was", "run", "on", "Debian", "NUMBER", "x", "NUMBER", "compiled", "with", "G", "NUMBER", "Could", "you", "share", "a", "link", "to", "the", "db", "file", "please", "NUMBER", "I", "ve", "experimented", "with", "file", "that", "contains", "NUMBER", "copies", "on", "enwik", "NUMBER", "and", "memory", "usage", "peak", "be", "NUMBER", "M", "NUMBER", "Hello", "NUMBER", "shared", "NUMBER", "mk", "be", "use", "to", "extract", "common", "configuration", "from", "makefiles", "NUMBER", "But", "currently", "we", "have", "no", "library", "target", "NUMBER", "What", "be", "the", "disadvantage", "of", "placing", "fPIC", "simply", "to", "CFLAGS", "and", "CXXFLAGS", "environment", "variables", "I", "made", "a", "lua", "binding", "it", "must", "be", "a", "NUMBER", "so", "NUMBER", "It", "not", "user", "friendly", "to", "build", "my", "binding", "with", "CFLAGS", "fPIC", "CXXFLAGS", "fPIC", "make", "instead", "of", "just", "make", "Now", "My", "makefile", "call", "make", "MAKE", "C", "brotli", "enc", "make", "MAKE", "C", "brotli", "dec", "But", "I", "think", "I", "can", "embed", "brotli", "enc", "NUMBER", "o", "and", "brotli", "dec", "NUMBER", "o", "into", "my", "makefile", "NUMBER", "Thanks", "I", "put", "up", "a", "separate", "build", "project", "that", "build", "a", "shared", "and", "or", "static", "libbrotli", "library", "out", "of", "the", "brotli", "source", "code", "and", "it", "should", "use", "fPIC", "already", "when", "necessary", "LINK", "I", "ve", "long", "be", "a", "promonent", "of", "integrating", "LZMA", "NUMBER", "LZMA", "into", "the", "browsers", "because", "of", "its", "incredible", "effectiveness", "for", "compressing", "binary", "data", "streams", "NUMBER", "When", "I", "saw", "Brotli", "I", "thought", "that", "this", "was", "likely", "going", "to", "be", "just", "as", "good", "NUMBER", "It", "isn", "t", "actually", "great", "NUMBER", "I", "be", "a", "frequent", "contributor", "to", "both", "LINK", "as", "well", "as", "the", "LINK", "online", "NUMBER", "D", "editor", "NUMBER", "One", "of", "the", "biggest", "issue", "we", "run", "into", "be", "the", "size", "of", "mesh", "downloads", "NUMBER", "Right", "now", "we", "be", "use", "LZMA", "NUMBER", "js", "scripts", "to", "do", "the", "decompression", "in", "worker", "threads", "but", "this", "isn", "t", "optimal", "especially", "on", "mobile", "NUMBER", "For", "example", "this", "real", "world", "large", "ish", "binary", "trimesh", "stream", "very", "typical", "LINK", "object", "NUMBER", "batman", "tumbler", "lw", "NUMBER", "NUMBER", "bingeom", "The", "original", "size", "once", "downloaded", "be", "NUMBER", "NUMBER", "NUMBER", "bytes", "be", "careful", "this", "stream", "may", "be", "delivered", "with", "Content", "Encoding", "gzip", "NUMBER", "Here", "be", "the", "compression", "results", "LZMA", "Normal", "NUMBER", "NUMBER", "bytes", "Ultra", "NUMBER", "NUMBER", "bytes", "GZip", "Normal", "NUMBER", "NUMBER", "NUMBER", "bytes", "Ultra", "NUMBER", "NUMBER", "NUMBER", "bytes", "Brotli", "Normal", "and", "Ultra", "NUMBER", "NUMBER", "NUMBER", "bytes", "NUMBER", "source", "LINK", "NUMBER", "Brotli", "be", "significantly", "less", "effective", "that", "LZMA", "in", "this", "case", "not", "just", "a", "little", "but", "by", "a", "huge", "margin", "NUMBER", "What", "this", "means", "be", "that", "we", "can", "not", "replace", "our", "LZMA", "NUMBER", "js", "scripts", "with", "Brotli", "support", "NUMBER", "This", "be", "pretty", "bad", "for", "us", "in", "the", "NUMBER", "D", "community", "as", "we", "be", "still", "stuck", "with", "JavaScript", "based", "decompression", "NUMBER", "I", "can", "confirm", "these", "results", "NUMBER", "At", "least", "for", "the", "example", "above", "brotli", "be", "about", "NUMBER", "x", "slower", "with", "the", "default", "settings", "and", "still", "performs", "much", "worse", "than", "xz", "r", "Compare", "size", "length", "x", "NUMBER", "NUMBER", "system", "NUMBER", "time", "print", "length", "brotli_compress", "x", "NUMBER", "NUMBER", "user", "system", "elapse", "NUMBER", "NUMBER", "NUMBER", "system", "NUMBER", "time", "print", "length", "brotli_compress", "x", "mode", "font", "NUMBER", "NUMBER", "user", "system", "elapse", "NUMBER", "NUMBER", "NUMBER", "system", "NUMBER", "time", "print", "length", "memCompress", "x", "gzip", "NUMBER", "NUMBER", "user", "system", "elapse", "NUMBER", "NUMBER", "NUMBER", "system", "NUMBER", "time", "print", "length", "memCompress", "x", "bzip", "NUMBER", "NUMBER", "NUMBER", "user", "system", "elapse", "NUMBER", "NUMBER", "NUMBER", "system", "NUMBER", "time", "print", "length", "memCompress", "x", "xz", "NUMBER", "NUMBER", "user", "system", "elapse", "NUMBER", "NUMBER", "NUMBER", "bhouston", "why", "be", "you", "suck", "with", "JavaScript", "based", "compression", "There", "be", "C", "implementations", "of", "lzma", "jeroenooms", "I", "want", "to", "send", "LZMA", "compressed", "mesh", "data", "to", "our", "WebGL", "viewer", "that", "runs", "in", "JavaScript", "LINK", "d", "NUMBER", "b", "NUMBER", "f", "b", "NUMBER", "c", "NUMBER", "ea", "NUMBER", "c", "NUMBER", "f", "NUMBER", "Thus", "I", "need", "to", "have", "browser", "based", "client", "side", "decompression", "NUMBER", "I", "would", "love", "it", "if", "LZMA", "or", "an", "equivalent", "I", "was", "hoping", "Brotli", "was", "integrated", "into", "all", "browsers", "but", "as", "it", "stands", "only", "gzip", "and", "deflate", "be", "available", "NUMBER", "Thus", "yo", "have", "to", "use", "LZMA", "NUMBER", "js", "for", "browser", "based", "LZMA", "decompression", "NUMBER", "Perhaps", "their", "main", "selling", "point", "be", "that", "decompression", "be", "faster", "than", "for", "lzma", "to", "make", "things", "easier", "on", "the", "client", "NUMBER", "But", "I", "agree", "that", "the", "difference", "in", "compression", "ratio", "very", "big", "given", "the", "proposal", "state", "that", "This", "specification", "defines", "a", "lossless", "compressed", "data", "format", "that", "compresses", "data", "use", "a", "combination", "of", "the", "LZ", "NUMBER", "algorithm", "and", "Huffman", "code", "with", "efficiency", "comparable", "to", "the", "best", "currently", "available", "general", "purpose", "compression", "methods", "NUMBER", "jeroenooms", "I", "think", "that", "LZMA", "also", "requires", "significant", "maximum", "memory", "for", "decompression", "which", "Brotli", "may", "be", "improving", "upon", "NUMBER", "It", "would", "be", "near", "if", "you", "could", "re", "run", "your", "statistics", "with", "decompression", "times", "and", "maximum", "memory", "instead", "of", "compression", "times", "if", "that", "was", "easy", "NUMBER", "Maybe", "that", "will", "better", "emphasize", "Brotli", "s", "benefits", "bhouston", "yes", "it", "seems", "like", "brotli", "do", "outperform", "everyone", "in", "terms", "of", "decompression", "speed", "NUMBER", "It", "be", "similar", "sometimes", "bit", "faster", "than", "gzip", "NUMBER", "But", "I", "have", "yet", "to", "find", "an", "example", "where", "the", "compression", "ratio", "be", "better", "than", "xy", "or", "bzip", "NUMBER", "Where", "I", "can", "read", "about", "TriMesh", "binary", "format", "I", "have", "a", "feeling", "that", "transposing", "and", "demuxing", "tables", "would", "make", "the", "file", "more", "compressible", "especially", "by", "encoders", "with", "lower", "rank", "context", "modeling", "zlib", "and", "brotli", "NUMBER", "I", "can", "also", "confirm", "that", "brotli", "sucks", "with", "some", "binary", "and", "text", "file", "use", "the", "GENERIC", "TEXT", "setting", "I", "can", "zip", "up", "the", "brotli", "source", "code", "on", "my", "mac", "down", "to", "NUMBER", "MB", "use", "the", "standard", "archiver", "utility", "NUMBER", "If", "I", "try", "to", "archive", "the", "brotli", "source", "code", "use", "brotli", "it", "increases", "it", "from", "NUMBER", "MB", "to", "NUMBER", "MB", "with", "a", "quality", "setting", "of", "NUMBER", "Even", "with", "a", "quality", "of", "NUMBER", "it", "be", "still", "NUMBER", "MB", "I", "have", "tried", "both", "ways", "where", "I", "combine", "the", "binary", "of", "all", "file", "into", "one", "file", "and", "compress", "or", "compressing", "individual", "file", "and", "combining", "into", "one", "file", "NUMBER", "Either", "way", "it", "works", "out", "to", "the", "same", "amount", "some", "how", "NUMBER", "Now", "I", "have", "to", "hand", "it", "to", "brotli", "when", "it", "comes", "to", "a", "NUMBER", "x", "NUMBER", "image", "file", "which", "be", "NUMBER", "MB", "in", "jpeg", "form", "at", "NUMBER", "quality", "NUMBER", "Brotli", "be", "able", "to", "compress", "it", "down", "to", "NUMBER", "KB", "with", "just", "a", "quality", "of", "NUMBER", "With", "a", "quality", "of", "NUMBER", "it", "gets", "it", "down", "to", "NUMBER", "KB", "roughly", "NUMBER", "It", "be", "a", "simple", "graphic", "of", "a", "logo", "though", "NUMBER", "However", "it", "be", "better", "than", "a", "PNG", "version", "of", "the", "logo", "NUMBER", "A", "PNG", "version", "of", "the", "logo", "be", "NUMBER", "MB", "NUMBER", "So", "hey", "at", "least", "that", "be", "an", "improvement", "I", "have", "checked", "lzturbo", "NUMBER", "LINK", "on", "this", "file", "NUMBER", "mode", "NUMBER", "NUMBER", "NUMBER", "mode", "NUMBER", "NUMBER", "NUMBER", "and", "LZA", "NUMBER", "LINK", "LZA", "archiver", "NUMBER", "NUMBER", "I", "think", "the", "main", "issue", "be", "that", "Brotli", "still", "uses", "Huffman", "code", "which", "be", "terrible", "at", "skewed", "probability", "distributions", "characteristic", "for", "some", "types", "of", "data", "NUMBER", "More", "recent", "compressors", "use", "ANS", "code", "instead", "lzturbo", "LZA", "LZNA", "ZSTD", "Apple", "LZFSE", "which", "allows", "to", "repair", "it", "still", "maintaining", "the", "speed", "NUMBER", "My", "guess", "was", "right", "NUMBER", "Even", "without", "knowing", "the", "format", "it", "be", "easy", "to", "improve", "compression", "ratio", "NUMBER", "Step", "NUMBER", "split", "odd", "and", "even", "bytes", "e", "NUMBER", "g", "NUMBER", "with", "python", "script", "f", "open", "input", "rb", "K", "NUMBER", "d", "for", "k", "in", "range", "K", "i", "NUMBER", "b", "f", "NUMBER", "read", "NUMBER", "while", "b", "d", "i", "K", "NUMBER", "append", "b", "i", "i", "NUMBER", "b", "f", "NUMBER", "read", "NUMBER", "f", "NUMBER", "close", "f", "open", "output", "wb", "for", "k", "in", "range", "K", "f", "NUMBER", "write", "NUMBER", "join", "d", "k", "f", "NUMBER", "close", "Step", "NUMBER", "compress", "Step", "NUMBER", "profit", "Zopfli", "NUMBER", "NUMBER", "NUMBER", "bytes", "NUMBER", "smaller", "Brotli", "NUMBER", "NUMBER", "NUMBER", "bytes", "NUMBER", "smaller", "I", "believe", "that", "with", "smarter", "transform", "results", "will", "be", "even", "better", "NUMBER", "My", "guess", "was", "right", "NUMBER", "Even", "without", "knowing", "the", "format", "it", "be", "easy", "to", "improve", "compression", "ratio", "NUMBER", "Step", "NUMBER", "split", "odd", "and", "even", "bytes", "e", "NUMBER", "g", "NUMBER", "with", "python", "script", "Weird", "approach", "but", "it", "gave", "good", "results", "NUMBER", "The", "file", "be", "a", "bit", "of", "a", "mish", "mash", "between", "float", "and", "integer", "data", "NUMBER", "It", "will", "exhibit", "a", "NUMBER", "bit", "alignment", "pattern", "as", "it", "be", "filled", "mostly", "with", "NUMBER", "bit", "floats", "and", "NUMBER", "bit", "floats", "with", "some", "exception", "and", "we", "do", "align", "all", "internal", "data", "array", "starts", "on", "NUMBER", "bit", "boundaries", "for", "JavaScript", "ArrayBuffer", "access", "efficiency", "NUMBER", "As", "some", "asked", "a", "trimesh", "polymesh", "format", "be", "for", "representing", "piece", "wise", "linear", "objects", "in", "NUMBER", "D", "NUMBER", "This", "format", "support", "both", "trimeshes", "and", "polygon", "meshes", "LINK", "_mesh", "LINK", "_mesh", "It", "be", "composed", "of", "a", "list", "of", "NUMBER", "D", "positions", "X", "Y", "Z", "as", "NUMBER", "bit", "floats", "triples", "and", "then", "a", "list", "of", "integers", "which", "state", "how", "those", "points", "be", "connected", "to", "form", "triangles", "or", "polygons", "one", "list", "of", "integers", "which", "state", "how", "many", "points", "per", "face", "polygon", "and", "then", "another", "list", "of", "those", "indices", "for", "each", "face", "and", "then", "it", "contains", "normals", "more", "XYZ", "NUMBER", "bit", "float", "triples", "and", "UVs", "UV", "NUMBER", "bit", "float", "pairs", "and", "more", "integers", "that", "state", "how", "these", "be", "to", "be", "use", "by", "the", "faces", "polygons", "these", "be", "call", "polygon", "mappings", "NUMBER", "This", "format", "actually", "will", "change", "the", "precision", "of", "the", "integers", "it", "uses", "from", "NUMBER", "to", "NUMBER", "to", "NUMBER", "bit", "depending", "upon", "their", "required", "maximum", "values", "but", "I", "believe", "this", "file", "be", "mostly", "NUMBER", "bit", "integers", "because", "it", "be", "on", "the", "larger", "size", "more", "than", "NUMBER", "K", "vertices", "points", "and", "thus", "it", "exceeds", "the", "range", "of", "NUMBER", "bit", "integers", "NUMBER", "One", "of", "reasons", "might", "be", "the", "fact", "that", "the", "first", "NUMBER", "bits", "of", "float", "LINK", "precision_floating", "point_format", "be", "sign", "and", "exponent", "which", "should", "be", "nearly", "the", "same", "for", "most", "of", "points", "NUMBER", "Also", "the", "next", "NUMBER", "bits", "the", "most", "significant", "of", "the", "fraction", "should", "be", "similar", "for", "neighboring", "points", "NUMBER", "So", "if", "you", "group", "even", "or", "odd", "positions", "you", "make", "these", "similar", "bytes", "closer", "and", "so", "simpler", "for", "compressor", "to", "use", "their", "similarity", "most", "of", "them", "work", "on", "bytes", "NUMBER", "But", "generally", "these", "formats", "seem", "extremely", "wasteful", "you", "could", "probably", "get", "an", "order", "of", "magnitude", "better", "compression", "with", "a", "cheap", "but", "dedicated", "compressor", "NUMBER", "Starting", "with", "storing", "differences", "instead", "of", "absolute", "positions", "additionally", "entropy", "coder", "coder", "should", "be", "use", "for", "the", "most", "significant", "digits", "NUMBER", "Storing", "the", "mesh", "be", "a", "graph", "compression", "problem", "and", "mesh", "be", "a", "very", "specific", "one", "should", "be", "cheaply", "compressible", "NUMBER", "My", "first", "thought", "be", "to", "cover", "all", "triangles", "with", "a", "tree", "like", "in", "LINK", "_desarrollo", "NUMBER", "gif", "then", "go", "through", "the", "tree", "and", "add", "new", "information", "for", "each", "node", "usually", "one", "vertex", "per", "node", "just", "store", "the", "difference", "of", "its", "position", "to", "the", "previous", "ones", "NUMBER", "Or", "even", "less", "as", "it", "has", "to", "agree", "with", "neighbors", "one", "distance", "per", "node", "difference", "from", "equilateral", "triangle", "seems", "sufficient", "NUMBER", "But", "generally", "these", "formats", "seem", "extremely", "wasteful", "you", "could", "probably", "get", "an", "order", "of", "magnitude", "better", "compression", "with", "a", "cheap", "but", "dedicated", "compressor", "NUMBER", "Our", "data", "be", "representative", "of", "a", "lot", "of", "non", "video", "large", "binary", "streams", "it", "be", "composed", "of", "long", "streams", "of", "floats", "and", "integers", "exactly", "what", "should", "be", "in", "a", "binary", "data", "stream", "NUMBER", "Our", "case", "be", "an", "easy", "one", "because", "they", "be", "even", "NUMBER", "bit", "boundary", "aligned", "NUMBER", "Of", "course", "we", "could", "write", "a", "custom", "compressor", "but", "then", "it", "will", "be", "in", "JavaScript", "again", "and", "we", "lose", "the", "speed", "and", "memory", "benefits", "of", "having", "it", "integrated", "into", "the", "browser", "NUMBER", "It", "would", "also", "take", "a", "lot", "of", "time", "for", "us", "and", "also", "force", "that", "on", "all", "other", "NUMBER", "D", "developers", "thus", "it", "be", "not", "a", "globally", "efficient", "solution", "nor", "a", "locally", "efficient", "solution", "NUMBER", "I", "would", "prefer", "to", "just", "use", "LZMA", "NUMBER", "js", "in", "that", "case", "or", "a", "browser", "based", "compression", "tool", "that", "produces", "similar", "results", "NUMBER", "Basically", "saying", "that", "I", "have", "to", "write", "a", "custom", "compression", "scheme", "because", "Brotli", "be", "inadequate", "compared", "to", "LZMA", "be", "not", "an", "acceptable", "answer", "NUMBER", "We", "have", "good", "general", "purpose", "compression", "schemes", "for", "a", "reason", "and", "right", "now", "Brotli", "isn", "t", "one", "even", "though", "it", "claims", "to", "be", "NUMBER", "If", "decompression", "in", "java", "be", "your", "requirement", "LZMA", "would", "be", "still", "much", "slower", "than", "dedicated", "compressor", "I", "have", "sketched", "NUMBER", "But", "generally", "I", "also", "think", "that", "it", "be", "too", "early", "to", "declare", "Brotli", "as", "a", "new", "standard", "it", "be", "still", "far", "from", "state", "of", "art", "compressors", "LINK", "Brotli", "p", "NUMBER", "viewfull", "NUMBER", "post", "NUMBER", "and", "uses", "Huffman", "make", "it", "terrible", "if", "skewed", "probability", "file", "happen", "NUMBER", "My", "first", "thought", "be", "to", "cover", "all", "triangles", "with", "a", "tree", "like", "in", "LINK", "_desarrollo", "NUMBER", "gif", "then", "go", "through", "the", "tree", "and", "add", "new", "information", "for", "each", "node", "usually", "one", "vertex", "per", "node", "just", "store", "the", "difference", "of", "its", "position", "to", "the", "previous", "ones", "NUMBER", "Or", "even", "less", "as", "it", "has", "to", "agree", "with", "neighbors", "one", "distance", "per", "node", "difference", "from", "equilateral", "triangle", "seems", "sufficient", "NUMBER", "This", "sounds", "like", "the", "triangle", "strip", "idea", "LINK", "_strip", "But", "the", "standard", "storage", "format", "for", "Triangle", "Strips", "be", "still", "a", "list", "of", "vertices", "as", "XYZ", "NUMBER", "bit", "floats", "and", "then", "a", "long", "list", "of", "NUMBER", "bit", "integers", "NUMBER", "I", "be", "interested", "a", "bit", "in", "general", "purpose", "compressors", "but", "only", "if", "they", "be", "easy", "to", "implement", "and", "ultra", "fast", "and", "give", "better", "results", "than", "LZMA", "NUMBER", "So", "if", "I", "understand", "one", "could", "easily", "write", "a", "special", "purpose", "compressor", "for", "lists", "of", "NUMBER", "bit", "floats", "NUMBER", "Basically", "you", "want", "a", "reordering", "of", "the", "positions", "to", "have", "neighbors", "close", "by", "then", "an", "adjustment", "of", "their", "space", "to", "be", "fully", "positive", "in", "XYZ", "NUMBER", "And", "then", "a", "reordering", "of", "their", "internal", "bytes", "NUMBER", "And", "then", "I", "need", "to", "send", "this", "into", "a", "general", "purpose", "compression", "stream", "of", "some", "type", "what", "would", "you", "recommend", "One", "can", "do", "that", "fairly", "simply", "I", "guess", "NUMBER", "This", "covers", "the", "compression", "of", "the", "NUMBER", "bit", "floats", "NUMBER", "What", "would", "you", "do", "with", "the", "NUMBER", "bit", "integers", "to", "maximize", "compression", "If", "one", "do", "a", "neighbor", "reordering", "of", "the", "XYZ", "positions", "that", "imposes", "an", "ordering", "on", "the", "NUMBER", "bit", "integers", "which", "reference", "those", "points", "NUMBER", "Basically", "one", "can", "only", "impose", "an", "order", "on", "either", "the", "integers", "or", "the", "XYZ", "positions", "but", "not", "both", "easily", "NUMBER", "Indeed", "imposing", "an", "order", "be", "difficult", "better", "be", "to", "directly", "encode", "parameters", "of", "the", "triangle", "strip", "first", "you", "have", "to", "encode", "the", "structure", "of", "the", "tree", "NUMBER", "For", "a", "triangular", "lattice", "you", "have", "full", "binary", "tree", "their", "number", "be", "Catalan", "number", "you", "need", "NUMBER", "bit", "node", "if", "this", "be", "a", "leaf", "or", "not", "NUMBER", "Comparing", "to", "NUMBER", "x", "NUMBER", "vertex", "numbers", "it", "means", "NUMBER", "x", "compression", "NUMBER", "then", "you", "don", "t", "need", "NUMBER", "float", "numbers", "per", "vertex", "imagine", "such", "triangular", "lattice", "you", "want", "to", "bend", "there", "be", "lots", "of", "constraints", "due", "to", "the", "fact", "that", "lengths", "of", "triangle", "edges", "have", "to", "agree", "NUMBER", "It", "be", "sufficient", "to", "store", "NUMBER", "length", "per", "node", "of", "the", "tree", "e", "NUMBER", "g", "NUMBER", "length", "of", "its", "edge", "on", "the", "right", "on", "the", "left", "be", "from", "its", "neighbor", "NUMBER", "Then", "decoder", "would", "need", "to", "perform", "the", "bending", "it", "be", "a", "few", "trigonometric", "operations", "per", "node", "really", "cheap", "comparing", "to", "what", "LZMA", "do", "NUMBER", "Regarding", "use", "floats", "you", "store", "mostly", "very", "similar", "numbers", "their", "exponent", "and", "sign", "NUMBER", "of", "NUMBER", "bits", "be", "probably", "identical", "also", "the", "most", "significant", "bits", "of", "the", "fraction", "NUMBER", "Using", "fix", "precision", "numbers", "instead", "you", "should", "directly", "get", "like", "NUMBER", "NUMBER", "savings", "NUMBER", "And", "their", "most", "significant", "digits", "be", "usually", "from", "some", "localized", "probability", "distribution", "especially", "if", "you", "encode", "differences", "you", "can", "use", "entropy", "coder", "for", "them", "NUMBER", "JarekDuda", "Very", "interesting", "NUMBER", "Our", "case", "be", "a", "bit", "more", "complex", "than", "what", "be", "outlined", "and", "would", "require", "a", "fair", "bit", "of", "work", "to", "deduce", "but", "I", "bet", "there", "be", "a", "good", "algorithm", "to", "be", "had", "in", "the", "end", "NUMBER", "I", "have", "start", "a", "general", "discussion", "about", "shape", "compression", "LINK", "Data", "compression", "of", "a", "NUMBER", "D", "NUMBER", "shape", "e", "g", "of", "TriMesh", "or", "a", "chemical", "molecule", "and", "was", "point", "a", "nice", "paper", "LINK", "jarek", "papers", "Compression", "NUMBER", "pdf", "It", "says", "we", "need", "NUMBER", "byte", "triangle", "what", "agrees", "with", "what", "I", "have", "write", "NUMBER", "In", "contrast", "the", "standard", "you", "have", "describe", "uses", "NUMBER", "x", "NUMBER", "bytes", "per", "vertex", "plus", "NUMBER", "x", "NUMBER", "bytes", "triangle", "for", "labels", "we", "be", "talking", "about", "a", "cheap", "NUMBER", "x", "compression", "NUMBER", "times", "better", "than", "the", "best", "discussed", "above", "which", "be", "much", "more", "expensive", "NUMBER", "It", "s", "sad", "that", "standards", "be", "so", "wasteful", "NUMBER", "it", "s", "what", "s", "happening", "when", "engineers", "don", "t", "talk", "with", "theoreticians", "NUMBER", "JarekDuda", "Just", "be", "careful", "that", "there", "be", "two", "major", "different", "mesh", "formats", "one", "be", "purely", "for", "playback", "in", "a", "video", "game", "limited", "trimesh", "format", "with", "a", "fix", "number", "of", "channels", "and", "there", "be", "a", "second", "more", "general", "polygon", "format", "with", "arbitrary", "named", "channels", "also", "use", "for", "playback", "when", "one", "needs", "additional", "channels", "or", "knowledge", "of", "the", "polygonal", "structure", "NUMBER", "Both", "be", "heavily", "use", "for", "data", "transfer", "needs", "NUMBER", "I", "have", "interests", "in", "both", "NUMBER", "BTW", "the", "current", "most", "popular", "open", "mesh", "compression", "format", "be", "OpenCTM", "NUMBER", "I", "think", "it", "be", "mostly", "LZMA", "LINK", "And", "then", "this", "for", "in", "browser", "decompression", "LINK", "openctm", "I", "m", "now", "seeing", "NUMBER", "NUMBER", "NUMBER", "bytes", "with", "quality", "NUMBER", "window", "NUMBER", "I", "have", "some", "ideas", "use", "more", "LSB", "NUMBER", "MSB", "NUMBER", "context", "modeling", "and", "less", "blocks", "that", "we", "will", "try", "out", "later", "this", "year", "with", "an", "expected", "NUMBER", "NUMBER", "more", "compression", "for", "this", "kind", "of", "data", "NUMBER", "BTW", "the", "current", "most", "popular", "open", "mesh", "compression", "format", "be", "OpenCTM", "NUMBER", "I", "think", "it", "be", "mostly", "LZMA", "it", "be", "LZMA", "_plus_", "vertices", "and", "triangles", "reordering", "to", "improve", "compression", "LINK", "L", "NUMBER", "L", "NUMBER", "This", "scheme", "could", "probably", "be", "improved", "but", "there", "be", "several", "constraints", "to", "take", "into", "account", "NUMBER", "IMHO", "the", "input", "mesh", "topology", "be", "the", "biggest", "constraint", "as", "an", "example", "you", "cannot", "perform", "triangle", "strip", "compression", "on", "a", "triangle", "soup", "where", "all", "vertices", "be", "disconnected", "NUMBER", "I", "understand", "re", "ordering", "the", "vertices", "as", "well", "as", "splitting", "out", "the", "Y", "X", "and", "Z", "into", "linear", "arrays", "so", "that", "it", "be", "X", "NUMBER", "X", "NUMBER", "X", "NUMBER", "X", "NUMBER", "Y", "NUMBER", "Y", "NUMBER", "Y", "NUMBER", "Z", "NUMBER", "Z", "NUMBER", "Z", "NUMBER", "be", "better", "NUMBER", "But", "maybe", "you", "be", "corrent", "that", "OpenCTM", "be", "the", "best", "solution", "maybe", "it", "be", "better", "than", "I", "thought", "NUMBER", "I", "apologize", "NUMBER", "Those", "be", "fairly", "significant", "improvement", "to", "brotli", "NUMBER", "That", "be", "nice", "NUMBER", "It", "doesnt", "have", "to", "his", "LZMA", "compression", "level", "but", "NUMBER", "improvement", "over", "what", "it", "was", "be", "hugely", "significant", "NUMBER", "What", "was", "the", "compression", "time", "for", "this", "file", "at", "level", "NUMBER", "bhouston", "I", "wonder", "if", "utf", "NUMBER", "webgl", "loader", "mesh", "compression", "with", "brotli", "be", "a", "better", "option", "than", "gzip", "I", "did", "a", "quick", "test", "on", "the", "utf", "NUMBER", "data", "here", "LINK", "test", "NUMBER", "crbs", "NUMBER", "ucsd", "NUMBER", "edu", "obj", "viewer", "model", "test", "and", "brotli", "ratio", "seem", "comparable", "to", "lzma", "NUMBER", "NUMBER", "MB", "obj", "file", "original", "file", "NUMBER", "MB", "utf", "NUMBER", "file", "NUMBER", "NUMBER", "MB", "utf", "NUMBER", "gz", "use", "default", "NUMBER", "MB", "utf", "NUMBER", "br", "use", "q", "NUMBER", "w", "NUMBER", "NUMBER", "MB", "utf", "NUMBER", "xz", "use", "default", "The", "ideas", "in", "Won", "s", "utf", "NUMBER", "webgl", "loader", "do", "the", "specialized", "transform", "that", "eustas", "and", "JarekDuda", "mention", "but", "it", "sounds", "like", "you", "want", "to", "avoid", "any", "deserializing", "in", "js", "land", "brot", "support", "the", "same", "common", "usage", "as", "gzip", "bzip", "NUMBER", "xz", "NUMBER", "add", "two", "test", "scripts", "brot", "test", "NUMBER", "sh", "compares", "behaviour", "with", "gzip", "bzip", "NUMBER", "xz", "brot", "size", "test", "NUMBER", "sh", "compares", "compression", "sizes", "with", "gzip", "bzip", "NUMBER", "xz", "could", "be", "renamed", "to", "bro", "but", "I", "didn", "t", "want", "to", "override", "the", "current", "bro", "program", "NUMBER", "I", "feel", "like", "there", "s", "a", "better", "name", "that", "could", "be", "use", "NUMBER", "I", "do", "like", "bro", "but", "if", "that", "s", "already", "in", "use", "that", "isn", "t", "really", "an", "option", "NUMBER", "I", "think", "the", "exist", "pro", "tool", "can", "be", "replaced", "by", "this", "one", "behaving", "like", "exist", "tool", "be", "a", "big", "plus", "NUMBER", "khaledhosny", "I", "think", "you", "mean", "bro", "and", "if", "so", "I", "completely", "agree", "NUMBER", "The", "current", "command", "line", "bro", "tool", "be", "extremely", "annoying", "to", "use", "NUMBER", "Both", "gzip", "and", "xz", "work", "excellently", "as", "command", "line", "tool", "and", "there", "s", "really", "no", "good", "reason", "to", "differ", "from", "those", "NUMBER", "That", "would", "be", "great", "BTW", "shouldn", "t", "best", "be", "an", "alias", "for", "NUMBER", "instead", "of", "NUMBER", "That", "will", "probably", "be", "a", "bit", "more", "complex", "to", "handle", "since", "NUMBER", "be", "not", "a", "short", "option", "anymore", "though", "NUMBER", "Any", "chance", "to", "get", "this", "merge", "Please", "Please", "Please", "merge", "it", "To", "anyone", "following", "this", "topic", "the", "brot", "stand", "alone", "compression", "program", "I", "ve", "long", "ago", "sign", "google", "s", "CLA", "in", "fact", "on", "Oct", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PDT", "NUMBER", "I", "haven", "t", "be", "keep", "track", "of", "brotli", "since", "I", "write", "this", "but", "if", "anyone", "be", "interested", "in", "picking", "it", "up", "and", "make", "it", "work", "they", "have", "my", "full", "support", "NUMBER", "If", "there", "be", "minor", "change", "that", "I", "can", "help", "with", "let", "me", "know", "NUMBER", "I", "be", "write", "bindings", "which", "should", "be", "portable", "across", "platforms", "and", "work", "with", "older", "compilers", "NUMBER", "Is", "there", "a", "way", "to", "fix", "the", "warnings", "below", "without", "suppressing", "them", "clang", "I", "Library", "Frameworks", "R", "NUMBER", "framework", "Resources", "include", "DNDEBUG", "Ienc", "Idec", "I", "usr", "local", "include", "I", "usr", "local", "include", "freetype", "NUMBER", "I", "opt", "X", "NUMBER", "include", "std", "c", "NUMBER", "fPIC", "Wall", "mtune", "core", "NUMBER", "g", "O", "NUMBER", "c", "enc", "metablock", "NUMBER", "cc", "o", "enc", "metablock", "NUMBER", "o", "In", "file", "include", "from", "enc", "metablock", "NUMBER", "cc", "NUMBER", "enc", "NUMBER", "metablock", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "BlockSplit", "defined", "as", "a", "struct", "here", "but", "previously", "declared", "as", "a", "class", "Wmismatched", "tags", "struct", "BlockSplit", "enc", "NUMBER", "histogram", "NUMBER", "h", "NUMBER", "NUMBER", "note", "did", "you", "mean", "struct", "here", "class", "BlockSplit", "struct", "Also", "a", "few", "warnings", "about", "c", "NUMBER", "extensions", "NUMBER", "Is", "there", "a", "way", "to", "work", "around", "these", "for", "older", "compilers", "In", "file", "include", "from", "enc", "encode_parallel", "NUMBER", "cc", "NUMBER", "In", "file", "include", "from", "enc", "NUMBER", "encode_parallel", "NUMBER", "h", "NUMBER", "In", "file", "include", "from", "enc", "NUMBER", "encode", "NUMBER", "h", "NUMBER", "enc", "NUMBER", "streams", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "override", "keyword", "be", "a", "C", "NUMBER", "extension", "Wc", "NUMBER", "extensions", "const", "void", "Read", "size_t", "n", "size_t", "OUTPUT", "override", "enc", "NUMBER", "streams", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "override", "keyword", "be", "a", "C", "NUMBER", "extension", "Wc", "NUMBER", "extensions", "bool", "Write", "const", "void", "buf", "size_t", "n", "override", "enc", "NUMBER", "streams", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "override", "keyword", "be", "a", "C", "NUMBER", "extension", "Wc", "NUMBER", "extensions", "bool", "Write", "const", "void", "buf", "size_t", "n", "override", "enc", "NUMBER", "streams", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "override", "keyword", "be", "a", "C", "NUMBER", "extension", "Wc", "NUMBER", "extensions", "const", "void", "Read", "size_t", "n", "size_t", "bytes_read", "override", "enc", "NUMBER", "streams", "NUMBER", "h", "NUMBER", "NUMBER", "warning", "override", "keyword", "be", "a", "C", "NUMBER", "extension", "Wc", "NUMBER", "extensions", "bool", "Write", "const", "void", "buf", "size_t", "n", "override", "On", "Ubuntu", "NUMBER", "g", "I", "usr", "share", "R", "include", "DNDEBUG", "Ienc", "Idec", "fpic", "g", "O", "NUMBER", "fstack", "protector", "param", "ssp", "buffer", "size", "NUMBER", "Wformat", "Werror", "format", "security", "D_FORTIFY_SOURCE", "NUMBER", "g", "c", "enc", "backward_references", "NUMBER", "cc", "o", "enc", "backward_references", "NUMBER", "o", "In", "file", "include", "from", "enc", "NUMBER", "backward_references", "NUMBER", "h", "NUMBER", "NUMBER", "from", "enc", "backward_references", "NUMBER", "cc", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "unique_ptr", "in", "namespace", "std", "do", "not", "name", "a", "type", "std", "unique_ptr", "TAG", "hash_h", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "unique_ptr", "in", "namespace", "std", "do", "not", "name", "a", "type", "std", "unique_ptr", "TAG", "hash_h", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "unique_ptr", "in", "namespace", "std", "do", "not", "name", "a", "type", "std", "unique_ptr", "TAG", "hash_h", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "unique_ptr", "in", "namespace", "std", "do", "not", "name", "a", "type", "std", "unique_ptr", "TAG", "hash_h", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "unique_ptr", "in", "namespace", "std", "do", "not", "name", "a", "type", "std", "unique_ptr", "TAG", "hash_h", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "unique_ptr", "in", "namespace", "std", "do", "not", "name", "a", "type", "std", "unique_ptr", "TAG", "hash_h", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "unique_ptr", "in", "namespace", "std", "do", "not", "name", "a", "type", "std", "unique_ptr", "TAG", "hash_h", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "unique_ptr", "in", "namespace", "std", "do", "not", "name", "a", "type", "std", "unique_ptr", "TAG", "hash_h", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "unique_ptr", "in", "namespace", "std", "do", "not", "name", "a", "type", "std", "unique_ptr", "TAG", "hash_h", "NUMBER", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "In", "member", "function", "void", "brotli", "Hashers", "Init", "int", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "hash_h", "NUMBER", "was", "not", "declared", "in", "this", "scope", "case", "NUMBER", "hash_h", "NUMBER", "reset", "new", "H", "NUMBER", "break", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "hash_h", "NUMBER", "was", "not", "declared", "in", "this", "scope", "case", "NUMBER", "hash_h", "NUMBER", "reset", "new", "H", "NUMBER", "break", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "hash_h", "NUMBER", "was", "not", "declared", "in", "this", "scope", "case", "NUMBER", "hash_h", "NUMBER", "reset", "new", "H", "NUMBER", "break", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "hash_h", "NUMBER", "was", "not", "declared", "in", "this", "scope", "case", "NUMBER", "hash_h", "NUMBER", "reset", "new", "H", "NUMBER", "break", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "hash_h", "NUMBER", "was", "not", "declared", "in", "this", "scope", "case", "NUMBER", "hash_h", "NUMBER", "reset", "new", "H", "NUMBER", "break", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "hash_h", "NUMBER", "was", "not", "declared", "in", "this", "scope", "case", "NUMBER", "hash_h", "NUMBER", "reset", "new", "H", "NUMBER", "break", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "hash_h", "NUMBER", "was", "not", "declared", "in", "this", "scope", "case", "NUMBER", "hash_h", "NUMBER", "reset", "new", "H", "NUMBER", "break", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "hash_h", "NUMBER", "was", "not", "declared", "in", "this", "scope", "case", "NUMBER", "hash_h", "NUMBER", "reset", "new", "H", "NUMBER", "break", "enc", "NUMBER", "NUMBER", "hash", "NUMBER", "h", "NUMBER", "NUMBER", "error", "hash_h", "NUMBER", "was", "not", "declared", "in", "this", "scope", "case", "NUMBER", "hash_h", "NUMBER", "reset", "new", "H", "NUMBER", "break", "Hello", "Thank", "you", "for", "the", "report", "NUMBER", "We", "ll", "fix", "the", "struct", "class", "mismatch", "soon", "NUMBER", "In", "addition", "indeed", "we", "re", "planning", "to", "support", "C", "NUMBER", "with", "the", "encoder", "also", "on", "the", "way", "soon", "NUMBER", "Yay", "thank", "you", "Shouldn", "t", "dec", "dictionary", "NUMBER", "h", "and", "enc", "dictionary", "NUMBER", "h", "be", "identical", "LINK", "looks", "like", "it", "may", "be", "out", "of", "date", "it", "doesn", "t", "include", "e", "NUMBER", "g", "NUMBER", "the", "if", "defined", "__cplusplus", "defined", "c_plusplus", "extern", "C", "endif", "NUMBER", "block", "at", "the", "end", "for", "instance", "NUMBER", "Incidentally", "declaration", "of", "the", "constant", "in", "a", "header", "file", "be", "apparently", "frowned", "upon", "per", "people", "smarter", "than", "me", "NUMBER", "Naively", "build", "brotli", "NUMBER", "exe", "with", "VS", "NUMBER", "results", "in", "_", "NUMBER", "_", "copies", "of", "the", "constant", "array", "in", "the", "resulting", "executable", "NUMBER", "Thank", "you", "for", "report", "this", "NUMBER", "We", "ll", "fix", "it", "soon", "NUMBER", "v", "NUMBER", "LINK", "has", "be", "tag", "but", "the", "Python", "package", "version", "as", "stored", "in", "python", "brotlimodule", "NUMBER", "cc", "still", "says", "NUMBER", "see", "here", "LINK", "L", "NUMBER", "NUMBER", "This", "version", "string", "be", "read", "by", "the", "setup", "NUMBER", "py", "and", "stored", "in", "the", "package", "metadata", "upon", "installing", "NUMBER", "I", "wonder", "if", "the", "Python", "module", "s", "version", "should", "also", "increase", "every", "time", "a", "Brotli", "update", "be", "tag", "or", "if", "language", "bindings", "should", "have", "their", "own", "version", "numbers", "independent", "from", "the", "core", "library", "NUMBER", "WDYT", "here", "LINK", "git", "version", "tagging", "for", "npm", "modules", "they", "use", "a", "post", "commit", "git", "hook", "which", "automatically", "add", "a", "new", "tag", "whenever", "the", "version", "string", "be", "modify", "NUMBER", "I", "don", "t", "know", "if", "it", "s", "worth", "doing", "it", "though", "NUMBER", "yes", "that", "sounds", "good", "to", "me", "NUMBER", "Thanks", "NUMBER", "thanks", "Per", "eustas", "in", "quixdb", "squash", "NUMBER", "the", "brotli", "decoder", "doesn", "t", "properly", "handle", "flushing", "Looks", "like", "brotli", "decoder", "doesn", "t", "support", "flush", "NUMBER", "It", "be", "forced", "to", "dump", "its", "internal", "buffer", "only", "when", "last", "block", "be", "finished", "NUMBER", "I", "would", "love", "to", "see", "that", "fix", "This", "be", "with", "revision", "d", "NUMBER", "b", "NUMBER", "c", "NUMBER", "b", "NUMBER", "d", "NUMBER", "ddb", "NUMBER", "ceccdf", "NUMBER", "a", "NUMBER", "I", "can", "t", "really", "reproduce", "the", "full", "report", "here", "but", "here", "be", "a", "summary", "of", "each", "item", "it", "find", "NUMBER", "enc", "histogram", "NUMBER", "h", "NUMBER", "Non", "static", "class", "member", "bit_cost_", "be", "not", "initialized", "in", "this", "constructor", "nor", "in", "any", "function", "that", "it", "calls", "NUMBER", "enc", "command", "NUMBER", "h", "NUMBER", "Non", "static", "class", "members", "insert_len_", "copy_len_", "cmd_prefix_", "dist_prefix_", "cmd_extra_", "and", "dist_extra_", "be", "not", "initialized", "in", "this", "constructor", "nor", "in", "any", "function", "that", "it", "calls", "NUMBER", "enc", "brotli_bit_stream", "NUMBER", "cc", "NUMBER", "index", "be", "pass", "to", "a", "parameter", "that", "cannot", "be", "negative", "NUMBER", "_IndexOf", "can", "return", "NUMBER", "_", "enc", "literal_cost", "NUMBER", "cc", "NUMBER", "Execution", "cannot", "reach", "the", "expression", "NUMBER", "inside", "this", "statement", "last_c", "i", "window_half", "at_least", "At", "condition", "i", "window_half", "NUMBER", "TAG", "bucket", "shifting", "by", "a", "negative", "amount", "has", "undefined", "behavior", "NUMBER", "The", "shift", "amount", "bucket", "be", "NUMBER", "return_constant", "Function", "call", "brotli", "Log", "NUMBER", "Floor", "distance_code", "returns", "NUMBER", "assignment", "Assigning", "bucket", "brotli", "Log", "NUMBER", "Floor", "distance_code", "NUMBER", "NUMBER", "The", "value", "of", "bucket", "be", "now", "NUMBER", "enc", "entropy_encode", "NUMBER", "cc", "NUMBER", "Non", "static", "class", "members", "total_count_", "index_left_", "and", "index_right_or_value_", "be", "not", "initialized", "in", "this", "constructor", "nor", "in", "any", "function", "that", "it", "calls", "NUMBER", "enc", "backward_references", "NUMBER", "cc", "NUMBER", "The", "compiler", "generate", "constructor", "for", "this", "class", "do", "not", "initialize", "min_cost_cmd_", "enc", "encode", "NUMBER", "cc", "NUMBER", "Non", "static", "class", "member", "literal_cost_mask_", "be", "not", "initialized", "in", "this", "constructor", "nor", "in", "any", "function", "that", "it", "calls", "NUMBER", "dec", "huffman", "NUMBER", "c", "NUMBER", "Using", "uninitialized", "value", "sorted", "symbol", "dec", "huffman", "NUMBER", "c", "NUMBER", "LINK", "NUMBER", "d", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "b", "NUMBER", "d", "NUMBER", "f", "NUMBER", "dc", "NUMBER", "f", "NUMBER", "png", "dec", "decode", "NUMBER", "c", "NUMBER", "Using", "uninitialized", "value", "s", "NUMBER", "loop_counter", "when", "calling", "BrotliDecompressStreaming", "enc", "metablock", "NUMBER", "cc", "NUMBER", "Using", "tainted", "variable", "context", "as", "an", "index", "to", "pointer", "static_context_map", "enc", "static_dict", "NUMBER", "cc", "NUMBER", "data", "NUMBER", "xc", "NUMBER", "be", "always", "false", "regardless", "of", "the", "values", "of", "its", "operands", "NUMBER", "This", "occur", "as", "the", "logical", "operand", "of", "if", "NUMBER", "If", "you", "need", "more", "details", "about", "an", "item", "let", "me", "know", "NUMBER", "I", "only", "provide", "the", "full", "information", "on", "the", "one", "item", "because", "it", "be", "a", "bit", "difficult", "to", "follow", "without", "the", "it", "but", "I", "think", "the", "others", "should", "be", "pretty", "easy", "to", "figure", "out", "NUMBER", "FWIW", "I", "would", "be", "willing", "to", "add", "someone", "to", "Squash", "s", "project", "on", "Coverity", "Scan", "LINK", "so", "you", "can", "see", "the", "results", "in", "their", "interface", "though", "I", "would", "suggest", "just", "creating", "a", "project", "for", "brotli", "NUMBER", "It", "has", "actually", "uncovered", "quite", "a", "few", "real", "issue", "in", "other", "compression", "libraries", "as", "well", "as", "Squash", "itself", "with", "surprisingly", "few", "false", "positives", "definitely", "worth", "it", "IMHO", "NUMBER", "All", "Coverity", "Scan", "report", "have", "be", "address", "See", "LINK", "brotli", "Thank", "you", "for", "report", "about", "these", "issue", "NUMBER", "I", "think", "it", "s", "time", "for", "another", "run", "Coverity", "be", "report", "LINK", "NUMBER", "high", "impact", "issue", "and", "NUMBER", "medium", "impact", "issue", "in", "Brotli", "NUMBER", "FWIW", "cppcheck", "pick", "up", "a", "couple", "minor", "issue", "too", "brotli", "enc", "block_splitter_inc", "NUMBER", "h", "NUMBER", "brotli", "enc", "block_splitter_inc", "NUMBER", "h", "NUMBER", "style", "Variable", "pairs", "be", "reassigned", "a", "value", "before", "the", "old", "one", "has", "be", "use", "NUMBER", "brotli", "enc", "write_bits", "NUMBER", "h", "NUMBER", "warning", "d", "in", "format", "string", "no", "NUMBER", "NUMBER", "requires", "int", "but", "the", "argument", "type", "be", "size_t", "aka", "unsigned", "long", "NUMBER", "To", "fix", "the", "second", "one", "you", "could", "cast", "to", "int", "or", "if", "you", "want", "to", "really", "use", "size_t", "you", "can", "do", "something", "like", "this", "stolen", "from", "LINK", "L", "NUMBER", "c", "if", "defined", "_WIN", "NUMBER", "define", "BROTLI_SIZE_SPECIFIER", "zu", "elif", "defined", "_M_X", "NUMBER", "defined", "__amd", "NUMBER", "__", "define", "BROTLI_SIZE_SPECIFIER", "I", "NUMBER", "u", "else", "define", "BROTLI_SIZE_SPECIFIER", "u", "endif", "Windows", "make", "everything", "harder", "NUMBER", "eustas", "I", "see", "the", "only", "issue", "remaining", "be", "a", "null", "pointer", "dereference", "IIRC", "that", "can", "be", "fix", "by", "add", "an", "assert", "foo", "NULL", "NUMBER", "If", "it", "s", "a", "function", "parameter", "another", "possibility", "might", "be", "to", "add", "a", "nonnnull", "attribute", "LINK", "NUMBER", "gcc", "Common", "Function", "Attributes", "NUMBER", "html", "index", "g_t_", "NUMBER", "code_", "NUMBER", "bnonnull_", "NUMBER", "d", "function", "attribute", "NUMBER", "Looks", "like", "it", "s", "available", "in", "GCC", "NUMBER", "LINK", "reference", "NUMBER", "html", "HEDLEY_NON_NULL", "NUMBER", "Fix", "miss", "unistd", "NUMBER", "h", "Add", "miss", "STDIN", "STDOUT", "STDERR", "constants", "Add", "_CRT_SECURE_NO_WARNINGS", "constant", "to", "turn", "off", "error", "compile", "message", "unsafe", "function", "or", "variable", "Add", "_CRT_NONSTDC_NO_DEPRECATE", "constant", "to", "turn", "off", "error", "compile", "message", "deprecate", "postfix", "name", "Fix", "function", "OpenOutputFile", "write", "binary", "now", "It", "looks", "like", "the", "change", "may", "have", "introduce", "tab", "based", "indentation", "in", "bro", "NUMBER", "cc", "while", "the", "rest", "of", "the", "file", "uses", "spaces", "Also", "looks", "like", "the", "latest", "change", "in", "trunk", "requires", "add", "TAG", "to", "the", "top", "of", "bro", "NUMBER", "cc", "This", "change", "results", "in", "the", "output", "file", "having", "the", "readonly", "attribute", "set", "see", "LINK", "for", "an", "explanation", "of", "why", "that", "be", "NUMBER", "I", "think", "you", "want", "int", "fd", "open", "output_path", "O_CREAT", "O_WRONLY", "O_TRUNC", "ifdef", "_MSC_VER", "O_BINARY", "S_IREAD", "S_IWRITE", "else", "S_IRUSR", "S_IWUSR", "endif", "No", "fopen", "be", "more", "robust", "NUMBER", "LINK", "fopen", "vs", "open", "open", "works", "with", "flags", "S_IREAD", "S_IWRITE", "But", "be", "it", "useful", "to", "use", "readflags", "Windows", "S_IREAD", "and", "UNIX", "S_IRUSR", "when", "file", "be", "use", "writeonlyflag", "O_WRONLY", "In", "Windows", "if", "you", "fail", "to", "pass", "S_IRUSR", "S_IWUSR", "to", "open", "the", "resulting", "file", "be", "created", "with", "the", "NTFS", "ReadOnly", "attribute", "set", "so", "the", "resulting", "file", "cannot", "be", "edit", "or", "delete", "by", "code", "NUMBER", "You", "talk", "about", "TAG", "S_IRUSR", "S_IWUSR", "TAG", "NUMBER", "I", "talk", "about", "TAG", "S_IRUSR", "S_IREAD", "TAG", "NUMBER", "Per", "MSDN", "S_IWRITE", "also", "allows", "S_IREAD", "so", "presumably", "the", "latter", "isn", "t", "truly", "necessary", "although", "it", "be", "also", "harmless", "and", "a", "bit", "more", "clear", "about", "the", "intention", "NUMBER", "NUMBER", "Hi", "I", "just", "stumbled", "upon", "this", "issue", "and", "would", "like", "to", "add", "my", "NUMBER", "cents", "NUMBER", "I", "like", "to", "see", "MS", "Visual", "Studio", "relate", "bug", "fix", "as", "this", "makes", "the", "code", "more", "cross", "platform", "compatible", "NUMBER", "And", "I", "dislike", "to", "see", "the", "MS", "project", "file", "add", "NUMBER", "Simply", "because", "it", "be", "awkward", "to", "maintain", "two", "or", "more", "build", "file", "consistently", "NUMBER", "As", "a", "side", "note", "Since", "a", "few", "days", "I", "have", "good", "and", "painless", "experience", "by", "use", "CMake", "for", "build", "libbrotli", "NUMBER", "As", "it", "already", "comes", "with", "numerous", "template", "I", "was", "able", "to", "compile", "Java", "bindings", "with", "it", "NUMBER", "I", "was", "able", "to", "compile", "with", "all", "three", "VS", "GUI", "command", "line", "MS", "nmake", "NUMBER", "bit", "NUMBER", "bit", "and", "OSX", "make", "NUMBER", "See", "LINK", "for", "details", "NUMBER", "Frankly", "said", "I", "m", "not", "a", "CMake", "expert", "and", "I", "expect", "my", "version", "misses", "some", "settings", "Thanks", "for", "listening", "feedback", "be", "welcome", "NUMBER", "Martin", "We", "hope", "to", "add", "MSVS", "project", "file", "generation", "soon", "NUMBER", "Sorry", "for", "very", "late", "response", "NUMBER", "after", "today", "s", "commit", "NUMBER", "cd", "NUMBER", "f", "NUMBER", "a", "NUMBER", "f", "NUMBER", "ba", "NUMBER", "d", "NUMBER", "e", "NUMBER", "b", "NUMBER", "I", "m", "get", "this", "error", "when", "trying", "to", "compile", "the", "Python", "extension", "on", "Windows", "NUMBER", "I", "m", "use", "Microsoft", "Visual", "C", "compiler", "from", "Visual", "Studio", "NUMBER", "NUMBER", "dec", "bit_reader", "NUMBER", "h", "NUMBER", "error", "C", "NUMBER", "pos_", "be", "not", "a", "member", "of", "BrotliBitReader", "NUMBER", "dec", "bit_reader", "NUMBER", "h", "NUMBER", "see", "declaration", "of", "BrotliBitReader", "error", "command", "cl", "NUMBER", "exe", "fail", "with", "exit", "status", "NUMBER", "Cheers", "Cosimo", "thanks", "it", "compiles", "now", "It", "be", "a", "bit", "strange", "though", "because", "even", "with", "the", "undefined", "pos_", "member", "the", "decoder", "was", "still", "compile", "fine", "on", "OS", "X", "clang", "whereas", "it", "wasn", "t", "on", "Windows", "msvc", "NUMBER", "I", "believe", "the", "reason", "be", "because", "in", "the", "port", "NUMBER", "h", "module", "the", "BROTLI_LITTLE_ENDIAN", "preprocessor", "flag", "be", "not", "be", "set", "for", "MSVC", "whereas", "it", "should", "be", "as", "I", "m", "compile", "on", "a", "little", "endian", "processor", "like", "virtually", "all", "Windows", "machines", "and", "for", "a", "NUMBER", "bit", "Python", "NUMBER", "I", "suspect", "the", "problem", "could", "be", "that", "MSVC", "do", "not", "define", "__BYTE_ORDER__", "and", "therefore", "the", "following", "check", "from", "port", "NUMBER", "h", "do", "not", "work", "on", "Windows", "c", "if", "defined", "__BYTE_ORDER__", "__BYTE_ORDER__", "__ORDER_LITTLE_ENDIAN__", "define", "BROTLI_LITTLE_ENDIAN", "NUMBER", "else", "define", "BROTLI_LITTLE_ENDIAN", "NUMBER", "endif", "For", "example", "see", "LINK", "diffs", "NUMBER", "January", "NUMBER", "html", "I", "think", "it", "would", "be", "OK", "to", "simply", "assume", "that", "Windows", "be", "always", "little", "endian", "NUMBER", "WDYT", "if", "I", "change", "port", "NUMBER", "h", "like", "that", "then", "it", "compiles", "fine", "on", "MSVC", "as", "well", "even", "without", "applying", "patch", "NUMBER", "diff", "diff", "git", "a", "dec", "port", "NUMBER", "h", "b", "dec", "port", "NUMBER", "h", "index", "NUMBER", "c", "NUMBER", "b", "NUMBER", "b", "NUMBER", "bceca", "NUMBER", "NUMBER", "a", "dec", "port", "NUMBER", "h", "b", "dec", "port", "NUMBER", "h", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "OR", "define", "BROTLI_PRELOAD_SYMBOLS", "NUMBER", "endif", "if", "defined", "__BYTE_ORDER__", "__BYTE_ORDER__", "__ORDER_LITTLE_ENDIAN__", "if", "defined", "_MSC_VER", "defined", "__BYTE_ORDER__", "__BYTE_ORDER__", "__ORDER_LITTLE_ENDIAN__", "define", "BROTLI_LITTLE_ENDIAN", "NUMBER", "else", "define", "BROTLI_LITTLE_ENDIAN", "NUMBER", "that", "s", "because", "when", "BROTLI_LITTLE_ENDIAN", "be", "defined", "the", "pre", "processor", "will", "trim", "the", "else", "branch", "inside", "dec", "bit_reader", "NUMBER", "h", "where", "the", "undefined", "pos_", "was", "use", "NUMBER", "that", "s", "great", "thank", "you", "NUMBER", "PS", "maybe", "it", "d", "be", "a", "good", "to", "set", "up", "Appveyor", "to", "make", "sure", "we", "test", "compile", "Brotli", "on", "Windows", "NUMBER", "I", "get", "the", "following", "error", "on", "Windows", "use", "Visual", "Studio", "NUMBER", "when", "trying", "to", "compile", "the", "Python", "extension", "enc", "backward_references", "NUMBER", "cc", "NUMBER", "error", "C", "NUMBER", "divide", "or", "mod", "by", "zero", "enc", "backward_references", "NUMBER", "cc", "NUMBER", "error", "C", "NUMBER", "log", "NUMBER", "identifier", "not", "find", "enc", "backward_references", "NUMBER", "cc", "NUMBER", "error", "C", "NUMBER", "log", "NUMBER", "identifier", "not", "find", "The", "patch", "try", "to", "fix", "both", "issue", "NUMBER", "For", "the", "kInfinity", "constant", "I", "use", "std", "numeric_limits", "infinity", "as", "find", "in", "the", "TAG", "header", "NUMBER", "For", "the", "log", "NUMBER", "function", "miss", "from", "Visual", "Studio", "NUMBER", "which", "be", "use", "in", "backward_references", "NUMBER", "cc", "I", "define", "a", "new", "_log", "NUMBER", "function", "inside", "fast_log", "NUMBER", "h", "NUMBER", "This", "MSVC", "specific", "workaround", "was", "previously", "incorporated", "in", "the", "FastLog", "NUMBER", "function", "so", "I", "just", "extracted", "it", "from", "there", "NUMBER", "We", "need", "to", "support", "Visual", "Studio", "NUMBER", "otherwise", "it", "s", "not", "possible", "to", "compile", "the", "Python", "extension", "for", "Windows", "Python", "NUMBER", "for", "Windows", "from", "Python", "NUMBER", "org", "be", "still", "build", "use", "Visual", "Studio", "NUMBER", "NUMBER", "Cheers", "Cosimo", "szabadka", "it", "works", "now", "thanks", "NUMBER", "Is", "there", "a", "JavaScript", "Implementation", "of", "the", "decompressor", "part", "for", "in", "browser", "usage", "I", "find", "LINK", "and", "created", "LINK", "NUMBER", "but", "maybe", "someone", "else", "knows", "a", "decompress", "implementation", "I", "be", "looking", "for", "the", "same", "thing", "NUMBER", "Hello", "NUMBER", "brotli", "content", "encoding", "support", "has", "be", "recently", "add", "to", "Firefox", "NUMBER", "In", "Chromium", "project", "there", "be", "also", "intent", "to", "support", "brotli", "content", "encoding", "NUMBER", "When", "do", "will", "make", "decoding", "fast", "and", "transparent", "for", "developers", "NUMBER", "As", "a", "fallback", "you", "could", "transpile", "brotli", "to", "JavaScript", "for", "example", "use", "Emscripten", "NUMBER", "I", "ll", "add", "more", "details", "how", "to", "do", "it", "soon", "NUMBER", "Quick", "test", "with", "emscripten", "has", "shown", "that", "generate", "js", "code", "be", "NUMBER", "times", "slower", "on", "Firefox", "and", "about", "NUMBER", "times", "slower", "on", "Chrome", "NUMBER", "Hello", "there", "be", "also", "this", "rust", "library", "LINK", "Which", "will", "be", "use", "by", "servo", "the", "layout", "engine", "of", "the", "future", "see", "LINK", "Nice", "Thank", "you", "You", "re", "welcome", "Also", "be", "you", "a", "Firefox", "dev", "Because", "it", "will", "be", "more", "intelligent", "to", "use", "this", "rust", "library", "as", "a", "common", "gecko", "and", "servo", "library", "instead", "of", "duplicate", "the", "work", "in", "two", "distinct", "library", "now", "that", "gecko", "can", "have", "rust", "code", "NUMBER", "Also", "sorry", "for", "my", "poor", "english", "NUMBER", "I", "have", "a", "demo", "work", "here", "LINK", "experiments", "NUMBER", "brotli", "NUMBER", "js", "LINK", "linked", "in", "the", "original", "issue", "now", "has", "a", "hand", "ported", "decoder", "instead", "of", "use", "Emscripten", "NUMBER", "It", "be", "less", "than", "half", "the", "size", "of", "the", "Emscripten", "JS", "output", "and", "be", "over", "twice", "as", "fast", "according", "to", "my", "benchmarks", "NUMBER", "To", "use", "in", "the", "browser", "you", "can", "build", "it", "with", "Browserify", "or", "similar", "NUMBER", "eustas", "brotli", "NUMBER", "js", "be", "pure", "JS", "hand", "ported", "at", "least", "the", "decoder", "NUMBER", "I", "find", "it", "to", "be", "NUMBER", "x", "faster", "than", "an", "emscripten", "compile", "of", "the", "C", "code", "when", "I", "write", "it", "and", "much", "smaller", "NUMBER", "Am", "I", "understanding", "correctly", "that", "your", "new", "JS", "decoder", "be", "NUMBER", "x", "faster", "again", "than", "brotli", "NUMBER", "js", "so", "NUMBER", "x", "faster", "than", "emscripten", "I", "add", "support", "for", "the", "new", "BrotliParams", "to", "the", "Python", "extension", "as", "request", "in", "LINK", "I", "also", "modify", "the", "bro", "NUMBER", "py", "script", "so", "that", "we", "can", "control", "these", "parameters", "from", "the", "command", "line", "NUMBER", "I", "have", "a", "question", "NUMBER", "In", "the", "encode", "NUMBER", "h", "it", "s", "write", "that", "the", "parameter", "quality", "has", "to", "be", "in", "the", "range", "from", "NUMBER", "to", "NUMBER", "I", "presume", "this", "range", "be", "inclusive", "NUMBER", "Now", "if", "I", "set", "the", "quality", "between", "NUMBER", "and", "NUMBER", "the", "output", "change", "accordingly", "NUMBER", "However", "if", "I", "set", "it", "to", "NUMBER", "the", "output", "be", "always", "truncated", "to", "the", "same", "NUMBER", "bytes", "NUMBER", "Does", "this", "mean", "that", "NUMBER", "be", "an", "invalid", "value", "for", "the", "quality", "parameter", "Thanks", "NUMBER", "C", "NUMBER", "sure", "I", "ll", "do", "that", "NUMBER", "szabadka", "OK", "I", "ve", "rebased", "on", "top", "of", "master", "set", "MODE_GENERIC", "as", "default", "compression", "mode", "and", "remove", "the", "additional", "low", "level", "parameters", "from", "the", "command", "line", "tool", "s", "argument", "but", "I", "left", "them", "in", "the", "module", "s", "compress", "function", "thank", "you", "It", "would", "be", "nice", "to", "add", "Brotli", "to", "the", "official", "Python", "Package", "Index", "so", "that", "users", "can", "download", "it", "with", "a", "simple", "pip", "install", "brotli", "NUMBER", "We", "could", "add", "just", "the", "sdist", "tarball", "or", "also", "some", "pre", "compiled", "wheel", "package", "for", "Windows", "and", "Mac", "platforms", "maybe", "build", "automatically", "via", "Travis", "and", "or", "AppVeyor", "like", "here", "LINK", "wheels", "cc", "khaledhosny", "We", "probably", "need", "a", "release", "of", "some", "kind", "to", "by", "able", "to", "identify", "which", "version", "have", "be", "uploaded", "szabadka", "would", "you", "be", "ready", "to", "tag", "a", "release", "Ok", "fair", "enough", "NUMBER", "Looking", "forward", "to", "those", "NUMBER", "Thank", "you", "C", "NUMBER", "you", "re", "right", "it", "shouldn", "t", "do", "that", "NUMBER", "I", "ll", "try", "to", "fix", "it", "thanks", "NUMBER", "szabadka", "this", "works", "LINK", "Good", "I", "can", "confirm", "it", "works", "on", "OSX", "and", "Windows", "too", "NUMBER", "Before", "the", "release", "we", "would", "need", "also", "to", "make", "sure", "the", "Python", "module", "exposes", "all", "features", "of", "the", "brotli", "library", "like", "the", "new", "encoder", "params", "NUMBER", "I", "m", "not", "one", "to", "really", "judge", "here", "but", "if", "you", "guys", "be", "deciding", "on", "a", "version", "scheme", "take", "a", "look", "at", "Semantic", "Versioning", "LINK", "This", "project", "would", "benefit", "from", "it", "over", "other", "version", "schemes", "because", "it", "makes", "it", "easy", "to", "determine", "when", "breaking", "change", "have", "be", "made", "to", "the", "API", "which", "be", "obviously", "a", "concern", "considering", "the", "last", "comment", "that", "khaledhosny", "made", "in", "this", "thread", "NUMBER", "Before", "the", "release", "we", "would", "need", "also", "to", "make", "sure", "the", "Python", "module", "exposes", "all", "features", "of", "the", "brotli", "library", "like", "the", "new", "encoder", "params", "NUMBER", "Yes", "we", "should", "add", "the", "encoder", "s", "newly", "introduce", "BrotliParams", "NUMBER", "What", "other", "feature", "would", "you", "like", "to", "expose", "in", "the", "Python", "module", "Currently", "the", "module", "s", "compress", "function", "calls", "BrotliCompressBuffer", "whereas", "the", "bro", "tool", "be", "use", "the", "new", "BrotliCompress", "with", "in", "out", "callbacks", "NUMBER", "Shall", "we", "expose", "BrotliCompress", "in", "the", "Python", "module", "as", "well", "I", "think", "the", "parameters", "would", "be", "enough", "unless", "we", "can", "come", "up", "with", "a", "compelling", "use", "case", "where", "Python", "users", "would", "benefit", "from", "the", "granularity", "of", "the", "API", "NUMBER", "do", "you", "think", "brotli", "be", "now", "ready", "to", "be", "uploaded", "to", "the", "Python", "Package", "Index", "PyPI", "We", "just", "push", "a", "new", "version", "of", "the", "encoder", "and", "decoder", "which", "be", "ready", "to", "be", "uploaded", "to", "PyPI", "after", "we", "fix", "the", "issue", "you", "point", "out", "NUMBER", "There", "be", "one", "more", "thing", "that", "could", "be", "change", "in", "the", "python", "interface", "NUMBER", "In", "the", "latest", "version", "of", "the", "encoder", "the", "advance", "field", "in", "BrotliParams", "were", "deprecate", "and", "be", "ignored", "these", "be", "enable_dictionary", "enable_transforms", "greedy_block_split", "enable_context_modeling", "NUMBER", "I", "think", "it", "would", "make", "sense", "to", "remove", "them", "from", "the", "python", "command", "line", "interface", "as", "well", "NUMBER", "szabadka", "very", "good", "I", "have", "a", "question", "those", "field", "be", "not", "expose", "in", "the", "_command", "line_", "script", "bro", "NUMBER", "py", "already", "NUMBER", "I", "gather", "you", "meant", "we", "need", "to", "remove", "them", "also", "from", "the", "brotlimodule", "NUMBER", "cc", "extension", "module", "NUMBER", "I", "ll", "do", "that", "shortly", "in", "a", "new", "PR", "NUMBER", "Yes", "I", "meant", "the", "brotlimodule", "NUMBER", "cc", "do", "we", "also", "need", "to", "bump", "the", "Python", "module", "s", "version", "in", "the", "setup", "NUMBER", "py", "before", "uploading", "it", "to", "PyPI", "currently", "it", "s", "NUMBER", "but", "NUMBER", "would", "look", "nicer", "Actually", "we", "be", "planning", "to", "tag", "the", "current", "version", "of", "brotli", "as", "v", "NUMBER", "Ok", "that", "s", "fine", "NUMBER", "Could", "you", "hold", "on", "an", "hour", "or", "so", "before", "actually", "tagging", "the", "release", "I", "d", "like", "to", "submit", "one", "more", "PR", "that", "fix", "build", "the", "Python", "extension", "on", "Windows", "Python", "NUMBER", "when", "installing", "via", "pip", "NUMBER", "Thanks", "Sure", "let", "me", "know", "when", "the", "python", "part", "be", "ready", "NUMBER", "I", "configured", "the", "Travis", "deployment", "in", "PR", "NUMBER", "anthrotype", "Is", "this", "all", "we", "need", "to", "do", "Will", "every", "release", "automatically", "uploaded", "to", "PyPI", "now", "sorry", "for", "the", "late", "reply", "I", "was", "on", "vacation", "NUMBER", "You", "have", "set", "up", "automatic", "Github", "Releases", "deployment", "for", "Travis", "NUMBER", "The", "OSX", "compiled", "wheels", "will", "now", "be", "uploaded", "to", "GitHub", "every", "time", "you", "push", "a", "new", "tag", "e", "NUMBER", "g", "NUMBER", "see", "v", "NUMBER", "LINK", "NUMBER", "This", "be", "cool", "thanks", "for", "that", "By", "the", "way", "Travis", "currently", "build", "for", "OS", "X", "only", "it", "would", "be", "nice", "to", "similarly", "configure", "AppVeyor", "with", "Github", "Releases", "so", "that", "the", "Windows", "wheels", "be", "also", "uploaded", "to", "GitHub", "NUMBER", "NUMBER", "However", "the", "Github", "Releases", "and", "PyPI", "be", "two", "different", "things", "which", "need", "to", "be", "configured", "separately", "NUMBER", "Travis", "has", "some", "build", "in", "support", "for", "automatic", "PyPI", "deployment", "see", "help", "docs", "LINK", "ci", "NUMBER", "com", "user", "deployment", "pypi", "For", "AppVeyor", "you", "can", "define", "a", "custom", "deploy_script", "that", "calls", "the", "twine", "LINK", "command", "to", "securely", "authenticate", "with", "PyPI", "and", "upload", "the", "compiled", "wheels", "NUMBER", "I", "d", "say", "let", "s", "first", "have", "both", "OSX", "and", "Windows", "wheels", "auto", "uploaded", "to", "GitHub", "upon", "tagging", "NUMBER", "Then", "we", "could", "see", "how", "to", "have", "them", "uploaded", "to", "PyPI", "as", "well", "NUMBER", "In", "the", "meantime", "we", "could", "just", "upload", "them", "to", "PyPI", "manually", "NUMBER", "I", "just", "read", "news", "about", "this", "NUMBER", "I", "think", "it", "s", "great", "better", "than", "zopfli", "NUMBER", "It", "d", "be", "better", "to", "use", "it", "from", "pypi", "NUMBER", "FWIW", "my", "CFFI", "based", "Python", "wrapper", "for", "Brotli", "be", "available", "from", "PyPI", "LINK", "but", "I", "very", "deliberately", "did", "not", "register", "the", "name", "brotli", "NUMBER", "If", "you", "be", "still", "planning", "to", "ship", "the", "C", "based", "bindings", "to", "PyPI", "you", "should", "make", "sure", "you", "register", "that", "name", "as", "soon", "as", "possible", "to", "prevent", "anyone", "else", "from", "accidentally", "stepping", "on", "it", "NUMBER", "Any", "news", "on", "this", "NUMBER", "for", "this", "NUMBER", "Great", "to", "know", "that", "Lukasa", "has", "publish", "a", "wrapper", "but", "it", "would", "probably", "be", "better", "to", "have", "the", "legit", "module", "on", "PyPI", "NUMBER", "what", "be", "the", "status", "of", "this", "Is", "there", "something", "I", "could", "do", "to", "help", "speeding", "this", "up", "Basically", "all", "be", "left", "to", "do", "be", "register", "with", "the", "PyPI", "server", "and", "upload", "the", "binary", "wheels", "from", "NUMBER", "release", "along", "with", "the", "source", "distribution", "i", "d", "say", "both", "NUMBER", "tar", "NUMBER", "gz", "and", "NUMBER", "zip", "formats", "as", "in", "python", "setup", "NUMBER", "py", "sdist", "formats", "gztar", "zip", "NUMBER", "LINK", "packaging", "user", "guide", "NUMBER", "readthedocs", "NUMBER", "org", "en", "latest", "distributing", "uploading", "your", "project", "to", "pypi", "Setting", "up", "automatic", "PyPI", "deployment", "upon", "tagging", "from", "Travis", "and", "Appveyor", "be", "a", "little", "tricky", "but", "it", "can", "be", "do", "if", "you", "re", "interested", "in", "doing", "that", "too", "NUMBER", "It", "s", "all", "covered", "in", "the", "PyPA", "Packaging", "User", "Guide", "linked", "above", "NUMBER", "You", "need", "to", "create", "an", "account", "on", "PyPI", "make", "a", "NUMBER", "pypirc", "file", "and", "use", "twine", "to", "register", "the", "new", "project", "and", "upload", "the", "build", "artifacts", "NUMBER", "You", "can", "optionally", "have", "the", "CI", "deploy", "to", "PyPI", "on", "tag", "release", "in", "which", "case", "you", "need", "to", "encrypt", "the", "password", "NUMBER", "LINK", "ci", "NUMBER", "com", "user", "deployment", "pypi", "I", "can", "help", "you", "with", "the", "PyPI", "thing", "NUMBER", "Setting", "up", "the", "CI", "be", "possible", "though", "I", "would", "need", "the", "PyPI", "account", "credentials", "to", "set", "that", "up", "NUMBER", "I", "don", "t", "know", "if", "it", "s", "feasible", "but", "I", "was", "thinking", "I", "could", "maintain", "the", "PyPI", "account", "for", "you", "and", "manually", "upload", "the", "wheels", "on", "every", "new", "tag", "NUMBER", "While", "this", "be", "still", "ongoing", "I", "ll", "continue", "to", "remind", "people", "that", "there", "be", "still", "a", "CFFI", "based", "wrapper", "publish", "on", "PyPI", "under", "the", "name", "brotlipy", "NUMBER", "The", "update", "to", "v", "NUMBER", "of", "brotli", "should", "be", "come", "along", "shortly", "NUMBER", "Lukasa", "thanks", "for", "the", "reminder", "NUMBER", "I", "haven", "t", "tried", "it", "yet", "but", "it", "would", "be", "nice", "if", "the", "two", "wrappers", "had", "the", "same", "API", "so", "they", "could", "be", "use", "interchangeably", "NUMBER", "anthrotype", "Agreed", "NUMBER", "I", "think", "it", "d", "be", "better", "for", "the", "core", "brotli", "implementation", "to", "choose", "what", "that", "API", "looks", "like", "though", "NUMBER", "At", "that", "point", "I", "d", "consider", "brotlipy", "to", "basically", "be", "a", "wrapper", "that", "be", "primarily", "useful", "as", "a", "drop", "in", "replacement", "for", "people", "use", "PyPy", "NUMBER", "So", "any", "news", "on", "the", "PyPI", "front", "At", "the", "very", "least", "it", "would", "be", "already", "something", "if", "someone", "could", "upload", "to", "PyPI", "the", "wheels", "and", "sdist", "from", "the", "current", "NUMBER", "release", "NUMBER", "All", "it", "takes", "be", "NUMBER", "create", "a", "PyPI", "account", "at", "LINK", "NUMBER", "Aaction", "register_form", "NUMBER", "install", "Twine", "LINK", "tool", "required", "to", "securely", "upload", "package", "to", "PyPI", "pip", "install", "twine", "NUMBER", "run", "twine", "upload", "Brotli", "NUMBER", "NUMBER", "whl", "Brotli", "NUMBER", "zip", "I", "could", "do", "that", "myself", "but", "would", "be", "better", "if", "the", "official", "owners", "maintainers", "register", "it", "first", "NUMBER", "If", "you", "like", "you", "can", "add", "me", "as", "collaborator", "on", "the", "newly", "registered", "brotli", "project", "on", "PyPI", "and", "then", "I", "could", "help", "you", "setting", "up", "automatic", "deployment", "from", "Travis", "Appveyor", "NUMBER", "But", "for", "now", "uploading", "manually", "the", "artifacts", "that", "be", "already", "publish", "on", "Github", "Releases", "would", "be", "good", "NUMBER", "Thanks", "NUMBER", "eustas", "sorry", "to", "ping", "you", "I", "see", "you", "be", "back", "online", "NUMBER", "Any", "plan", "on", "push", "the", "wheels", "to", "PyPI", "AWESOME", "Big", "thanks", "LINK", "my", "username", "be", "anthrotype", "of", "course", "there", "be", "a", "problem", "if", "one", "try", "to", "build", "the", "Python", "extension", "use", "the", "pip", "installer", "NUMBER", "The", "problem", "be", "that", "the", "setup", "NUMBER", "py", "be", "not", "located", "in", "the", "root", "of", "the", "repository", "but", "in", "the", "python", "binding", "subfolder", "NUMBER", "The", "way", "pip", "works", "be", "to", "copy", "the", "source", "file", "to", "a", "temporary", "folder", "and", "try", "to", "build", "from", "there", "NUMBER", "But", "since", "the", "C", "C", "source", "file", "be", "located", "higher", "in", "the", "repository", "tree", "NUMBER", "enc", "NUMBER", "dec", "relative", "to", "setup", "NUMBER", "py", "then", "pip", "do", "not", "cannot", "copy", "these", "over", "to", "its", "temporary", "build", "folder", "and", "therefore", "it", "fail", "to", "build", "the", "extension", "NUMBER", "A", "solution", "would", "be", "to", "make", "a", "hard", "copy", "instead", "of", "a", "symlink", "of", "the", "enc", "and", "dec", "folders", "inside", "the", "python", "subfolder", "NUMBER", "I", "believe", "git", "can", "efficiently", "handle", "such", "duplicate", "file", "and", "store", "them", "under", "the", "same", "object", "as", "long", "as", "they", "have", "the", "same", "content", "NUMBER", "That", "means", "one", "would", "have", "to", "synchronise", "it", "every", "time", "there", "be", "a", "change", "NUMBER", "I", "don", "t", "know", "if", "anyone", "has", "a", "better", "solution", "NUMBER", "The", "reason", "I", "want", "to", "use", "pip", "be", "to", "allow", "publishing", "the", "Brotli", "extension", "to", "the", "official", "Python", "Package", "Index", "PyPI", "repository", "NUMBER", "Once", "that", "be", "do", "one", "could", "simply", "do", "pip", "install", "brotli", "to", "download", "build", "and", "install", "the", "extension", "NUMBER", "Besides", "one", "could", "add", "brotli", "to", "the", "list", "of", "dependencies", "for", "other", "package", "e", "NUMBER", "g", "NUMBER", "fontTools", "etc", "NUMBER", "NUMBER", "I", "wonder", "whether", "khaledhosny", "has", "already", "thought", "about", "publishing", "the", "Brotli", "extension", "to", "PyPI", "I", "m", "already", "experimenting", "in", "this", "direction", "in", "LINK", "wheels", "I", "m", "trying", "to", "use", "Travis", "and", "Appveyor", "to", "automatically", "build", "pre", "compiled", "Python", "wheel", "LINK", "package", "for", "Windows", "and", "OS", "X", "NUMBER", "Please", "let", "me", "know", "what", "you", "think", "NUMBER", "Thank", "you", "Cosimo", "How", "be", "you", "build", "with", "pip", "I", "do", "pip", "install", "e", "NUMBER", "routinely", "and", "had", "no", "issue", "with", "it", "NUMBER", "I", "know", "but", "that", "only", "runs", "python", "setup", "develop", "for", "test", "a", "package", "while", "developing", "it", "NUMBER", "The", "problem", "arises", "when", "doing", "pip", "install", "NUMBER", "without", "the", "e", "option", "NUMBER", "If", "you", "look", "at", "the", "traceback", "the", "reason", "why", "pip", "fail", "be", "because", "it", "cannot", "find", "the", "C", "C", "sources", "since", "they", "be", "referenced", "use", "a", "relative", "path", "which", "be", "above", "the", "setup", "NUMBER", "py", "work", "directory", "pip", "install", "NUMBER", "Processing", "Users", "cosimolupo", "Documents", "Github", "brotli", "python", "Installing", "collected", "package", "Brotli", "Running", "setup", "NUMBER", "py", "install", "for", "Brotli", "clang", "fno", "strict", "aliasing", "fno", "common", "dynamic", "I", "usr", "local", "include", "I", "usr", "local", "opt", "sqlite", "include", "DNDEBUG", "g", "fwrapv", "O", "NUMBER", "Wall", "Wstrict", "prototypes", "DOS_MACOSX", "NUMBER", "I", "usr", "local", "Cellar", "python", "NUMBER", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "include", "python", "NUMBER", "c", "private", "var", "folders", "NUMBER", "w", "NUMBER", "jtks", "NUMBER", "sgwz", "NUMBER", "vtz", "NUMBER", "ysmsm", "NUMBER", "gn", "T", "dec", "bit_reader", "NUMBER", "c", "o", "build", "temp", "NUMBER", "macosx", "NUMBER", "x", "NUMBER", "_", "NUMBER", "NUMBER", "private", "var", "folders", "NUMBER", "w", "NUMBER", "jtks", "NUMBER", "sgwz", "NUMBER", "vtz", "NUMBER", "ysmsm", "NUMBER", "gn", "T", "dec", "bit_reader", "NUMBER", "o", "clang", "error", "no", "such", "file", "or", "directory", "private", "var", "folders", "NUMBER", "w", "NUMBER", "jtks", "NUMBER", "sgwz", "NUMBER", "vtz", "NUMBER", "ysmsm", "NUMBER", "gn", "T", "dec", "bit_reader", "NUMBER", "c", "clang", "error", "no", "input", "file", "error", "command", "clang", "fail", "with", "exit", "status", "NUMBER", "Complete", "output", "from", "command", "usr", "local", "opt", "python", "bin", "python", "NUMBER", "c", "import", "setuptools", "tokenize", "__file__", "var", "folders", "NUMBER", "w", "NUMBER", "jtks", "NUMBER", "sgwz", "NUMBER", "vtz", "NUMBER", "ysmsm", "NUMBER", "gn", "T", "pip", "oaQuzp", "build", "setup", "NUMBER", "py", "exec", "compile", "getattr", "tokenize", "open", "open", "__file__", "NUMBER", "read", "NUMBER", "replace", "r", "n", "n", "__file__", "exec", "install", "record", "var", "folders", "NUMBER", "w", "NUMBER", "jtks", "NUMBER", "sgwz", "NUMBER", "vtz", "NUMBER", "ysmsm", "NUMBER", "gn", "T", "pip", "R", "NUMBER", "EIB", "NUMBER", "record", "install", "record", "NUMBER", "txt", "single", "version", "externally", "managed", "compile", "run", "install", "run", "build", "run", "build_ext", "creating", "build", "creating", "build", "temp", "NUMBER", "macosx", "NUMBER", "x", "NUMBER", "_", "NUMBER", "NUMBER", "creating", "build", "temp", "NUMBER", "macosx", "NUMBER", "x", "NUMBER", "_", "NUMBER", "NUMBER", "private", "creating", "build", "temp", "NUMBER", "macosx", "NUMBER", "x", "NUMBER", "_", "NUMBER", "NUMBER", "private", "var", "creating", "build", "temp", "NUMBER", "macosx", "NUMBER", "x", "NUMBER", "_", "NUMBER", "NUMBER", "private", "var", "folders", "creating", "build", "temp", "NUMBER", "macosx", "NUMBER", "x", "NUMBER", "_", "NUMBER", "NUMBER", "private", "var", "folders", "NUMBER", "w", "creating", "build", "temp", "NUMBER", "macosx", "NUMBER", "x", "NUMBER", "_", "NUMBER", "NUMBER", "private", "var", "folders", "NUMBER", "w", "NUMBER", "jtks", "NUMBER", "sgwz", "NUMBER", "vtz", "NUMBER", "ysmsm", "NUMBER", "gn", "creating", "build", "temp", "NUMBER", "macosx", "NUMBER", "x", "NUMBER", "_", "NUMBER", "NUMBER", "private", "var", "folders", "NUMBER", "w", "NUMBER", "jtks", "NUMBER", "sgwz", "NUMBER", "vtz", "NUMBER", "ysmsm", "NUMBER", "gn", "T", "creating", "build", "temp", "NUMBER", "macosx", "NUMBER", "x", "NUMBER", "_", "NUMBER", "NUMBER", "private", "var", "folders", "NUMBER", "w", "NUMBER", "jtks", "NUMBER", "sgwz", "NUMBER", "vtz", "NUMBER", "ysmsm", "NUMBER", "gn", "T", "dec", "clang", "fno", "strict", "aliasing", "fno", "common", "dynamic", "I", "usr", "local", "include", "I", "usr", "local", "opt", "sqlite", "include", "DNDEBUG", "g", "fwrapv", "O", "NUMBER", "Wall", "Wstrict", "prototypes", "DOS_MACOSX", "NUMBER", "I", "usr", "local", "Cellar", "python", "NUMBER", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "include", "python", "NUMBER", "c", "private", "var", "folders", "NUMBER", "w", "NUMBER", "jtks", "NUMBER", "sgwz", "NUMBER", "vtz", "NUMBER", "ysmsm", "NUMBER", "gn", "T", "dec", "bit_reader", "NUMBER", "c", "o", "build", "temp", "NUMBER", "macosx", "NUMBER", "x", "NUMBER", "_", "NUMBER", "NUMBER", "private", "var", "folders", "NUMBER", "w", "NUMBER", "jtks", "NUMBER", "sgwz", "NUMBER", "vtz", "NUMBER", "ysmsm", "NUMBER", "gn", "T", "dec", "bit_reader", "NUMBER", "o", "clang", "error", "no", "such", "file", "or", "directory", "private", "var", "folders", "NUMBER", "w", "NUMBER", "jtks", "NUMBER", "sgwz", "NUMBER", "vtz", "NUMBER", "ysmsm", "NUMBER", "gn", "T", "dec", "bit_reader", "NUMBER", "c", "clang", "error", "no", "input", "file", "error", "command", "clang", "fail", "with", "exit", "status", "NUMBER", "Command", "usr", "local", "opt", "python", "bin", "python", "NUMBER", "c", "import", "setuptools", "tokenize", "__file__", "var", "folders", "NUMBER", "w", "NUMBER", "jtks", "NUMBER", "sgwz", "NUMBER", "vtz", "NUMBER", "ysmsm", "NUMBER", "gn", "T", "pip", "oaQuzp", "build", "setup", "NUMBER", "py", "exec", "compile", "getattr", "tokenize", "open", "open", "__file__", "NUMBER", "read", "NUMBER", "replace", "r", "n", "n", "__file__", "exec", "install", "record", "var", "folders", "NUMBER", "w", "NUMBER", "jtks", "NUMBER", "sgwz", "NUMBER", "vtz", "NUMBER", "ysmsm", "NUMBER", "gn", "T", "pip", "R", "NUMBER", "EIB", "NUMBER", "record", "install", "record", "NUMBER", "txt", "single", "version", "externally", "managed", "compile", "fail", "with", "error", "code", "NUMBER", "in", "var", "folders", "NUMBER", "w", "NUMBER", "jtks", "NUMBER", "sgwz", "NUMBER", "vtz", "NUMBER", "ysmsm", "NUMBER", "gn", "T", "pip", "oaQuzp", "build", "I", "think", "we", "need", "to", "fix", "sdist", "command", "since", "it", "seems", "not", "to", "copy", "any", "of", "the", "Brotli", "source", "file", "NUMBER", "If", "this", "do", "not", "fix", "pip", "it", "will", "at", "least", "allow", "uploading", "to", "PyPI", "NUMBER", "I", "ll", "have", "look", "at", "sdist", "NUMBER", "The", "thing", "be", "the", "way", "pip", "but", "also", "distutils", "setuptools", "etc", "NUMBER", "expects", "python", "package", "to", "be", "organised", "be", "with", "a", "setup", "NUMBER", "py", "at", "the", "root", "of", "the", "package", "and", "then", "everything", "else", "positioned", "either", "on", "the", "same", "level", "or", "inside", "sub", "folders", "reachable", "from", "the", "root", "NUMBER", "Whereas", "here", "we", "want", "to", "keep", "the", "python", "folder", "isolated", "from", "the", "C", "C", "source", "file", "which", "be", "understandable", "but", "this", "seems", "to", "conflict", "with", "the", "way", "Python", "packaging", "works", "NUMBER", "Maybe", "the", "solution", "could", "simply", "be", "to", "clone", "brotli", "as", "a", "submodule", "in", "another", "repository", "with", "a", "copy", "of", "setup", "NUMBER", "py", "positioned", "higher", "in", "the", "directory", "tree", "NUMBER", "Maybe", "the", "solution", "could", "simply", "be", "to", "clone", "brotli", "as", "a", "submodule", "in", "another", "repository", "with", "a", "copy", "of", "setup", "NUMBER", "py", "positioned", "higher", "in", "the", "directory", "tree", "NUMBER", "That", "be", "how", "it", "was", "do", "originally", "LINK", "python", "issue", "NUMBER", "yes", "I", "do", "remember", "NUMBER", "Thinking", "about", "it", "more", "I", "think", "it", "shouldn", "t", "harm", "to", "move", "the", "setup", "NUMBER", "py", "file", "to", "the", "top", "level", "directory", "and", "leave", "the", "C", "file", "where", "it", "be", "if", "it", "will", "simplify", "things", "NUMBER", "It", "would", "definitely", "make", "the", "Python", "extension", "s", "setup", "much", "easier", "NUMBER", "On", "Tue", "Mar", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Khaled", "Hosny", "notifications", "github", "NUMBER", "com", "write", "Thinking", "about", "it", "more", "I", "think", "it", "shouldn", "t", "harm", "to", "move", "the", "setup", "NUMBER", "py", "file", "to", "the", "top", "level", "directory", "and", "leave", "the", "C", "file", "where", "it", "be", "if", "it", "will", "simplify", "things", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "I", "can", "confirm", "pip", "be", "happy", "after", "NUMBER", "e", "NUMBER", "e", "NUMBER", "e", "NUMBER", "d", "NUMBER", "bcc", "NUMBER", "f", "NUMBER", "bb", "NUMBER", "de", "NUMBER", "d", "NUMBER", "da", "NUMBER", "ac", "NUMBER", "Hi", "after", "commit", "NUMBER", "def", "NUMBER", "f", "NUMBER", "b", "NUMBER", "e", "NUMBER", "f", "NUMBER", "f", "NUMBER", "e", "NUMBER", "e", "NUMBER", "a", "NUMBER", "the", "encoder", "fail", "to", "compile", "on", "MS", "Visual", "Studio", "NUMBER", "with", "the", "following", "error", "c", "userslocal", "cosimo", "NUMBER", "lupo", "documents", "github", "brotli", "enc", "NUMBER", "bit_cost", "NUMBER", "h", "NUMBER", "error", "C", "NUMBER", "log", "ambiguous", "call", "to", "overloaded", "function", "C", "Program", "Files", "x", "NUMBER", "Microsoft", "Visual", "Studio", "NUMBER", "VC", "INCLUDE", "math", "NUMBER", "h", "NUMBER", "could", "be", "long", "double", "log", "long", "double", "C", "Program", "Files", "x", "NUMBER", "Microsoft", "Visual", "Studio", "NUMBER", "VC", "INCLUDE", "math", "NUMBER", "h", "NUMBER", "or", "float", "log", "float", "C", "Program", "Files", "x", "NUMBER", "Microsoft", "Visual", "Studio", "NUMBER", "VC", "INCLUDE", "math", "NUMBER", "h", "NUMBER", "or", "double", "log", "double", "while", "trying", "to", "match", "the", "argument", "list", "int", "At", "line", "NUMBER", "of", "bit_cost", "NUMBER", "h", "there", "be", "a", "call", "to", "log", "function", "I", "think", "the", "varialbe", "sum", "should", "be", "cast", "to", "double", "NUMBER", "Anyway", "thanks", "for", "your", "work", "Cosimo", "NUMBER", "great", "thank", "you", "NUMBER", "unfortunately", "there", "be", "a", "problem", "in", "literal_cost", "NUMBER", "cc", "NUMBER", "NUMBER", "the", "log", "NUMBER", "function", "be", "use", "there", "without", "test", "if", "the", "_MSC_VER", "TAG", "in_window", "histo", "float", "lit_cost", "FastLog", "NUMBER", "in_window", "FastLog", "NUMBER", "histo", "you", "re", "fast", "From", "LINK", "NUMBER", "where", "we", "be", "exploring", "how", "to", "support", "brotli", "as", "an", "HTTP", "transfer", "encoding", "method", "Comment", "Nb", "NUMBER", "NUMBER", "Chrome", "s", "networking", "stack", "be", "a", "single", "thread", "event", "loop", "NUMBER", "To", "prevent", "arbitrary", "data", "from", "be", "buffered", "in", "memory", "and", "to", "get", "data", "to", "consumers", "as", "fast", "as", "possible", "this", "will", "need", "to", "be", "rewritten", "in", "a", "way", "for", "the", "caller", "to", "call", "it", "repeatedly", "to", "get", "the", "data", "out", "of", "it", "NUMBER", "this", "pull", "request", "be", "the", "same", "as", "r", "lyeh", "request", "NUMBER", "from", "October", "last", "year", "with", "just", "some", "little", "modifications", "of", "mine", "NUMBER", "There", "be", "three", "problem", "when", "trying", "to", "compile", "the", "C", "brotli", "encoder", "with", "Microsoft", "Visual", "C", "NUMBER", "fast_log", "NUMBER", "h", "be", "miss", "the", "assert", "header", "include", "enc", "fast_log", "NUMBER", "h", "NUMBER", "error", "C", "NUMBER", "assert", "identifier", "not", "find", "the", "use", "of", "function", "rand_r", "inside", "block_splitter", "NUMBER", "cc", "makes", "the", "compiler", "raise", "identifier", "not", "find", "NUMBER", "As", "r", "lyeh", "suggested", "rand_r", "could", "be", "replaced", "by", "a", "combination", "of", "srand", "and", "rand", "NUMBER", "enc", "block_splitter", "NUMBER", "cc", "NUMBER", "error", "C", "NUMBER", "rand_r", "identifier", "not", "find", "in", "write_bits", "NUMBER", "h", "the", "attempt", "to", "import", "endian", "NUMBER", "h", "fail", "on", "Windows", "which", "unfortunately", "do", "not", "provide", "this", "header", "NUMBER", "Besides", "the", "include", "do", "not", "seem", "to", "be", "necessary", "here", "NUMBER", "In", "fact", "the", "macro", "IS_LITTLE_ENDIAN", "which", "be", "use", "in", "write_bits", "NUMBER", "h", "be", "already", "specified", "inside", "port", "NUMBER", "h", "header", "which", "be", "among", "the", "include", "NUMBER", "enc", "write_bits", "NUMBER", "h", "NUMBER", "fatal", "error", "C", "NUMBER", "Cannot", "open", "include", "file", "endian", "NUMBER", "h", "No", "such", "file", "or", "directory", "As", "a", "workaround", "r", "lyeh", "propose", "a", "new", "portable", "endian", "NUMBER", "h", "header", "file", "NUMBER", "However", "for", "the", "sake", "of", "detecting", "the", "byte", "order", "I", "believe", "it", "would", "be", "sufficient", "to", "presume", "that", "when", "_WIN", "NUMBER", "or", "_WIN", "NUMBER", "be", "defined", "then", "the", "byte", "order", "will", "always", "little", "endian", "ok", "the", "XBox", "NUMBER", "has", "a", "big", "endian", "processor", "but", "NUMBER", "NUMBER", "So", "I", "add", "such", "Windows", "specific", "ifdef", "to", "port", "NUMBER", "h", "and", "remove", "r", "lyeh", "s", "endian", "NUMBER", "h", "file", "NUMBER", "I", "would", "like", "to", "emphasize", "that", "it", "s", "only", "by", "use", "the", "patch", "by", "r", "lyeh", "with", "or", "without", "the", "superfluous", "endian", "NUMBER", "h", "that", "I", "was", "able", "compile", "the", "brotli", "Python", "extension", "on", "the", "Windows", "platform", "NUMBER", "I", "have", "test", "both", "gcc", "via", "Cygwin", "or", "MinGW", "and", "several", "Microsoft", "Visual", "C", "C", "compilers", "NUMBER", "Cygwin", "s", "gcc", "POSIX", "was", "able", "to", "compile", "only", "through", "r", "lyeh", "patch", "NUMBER", "The", "MinGW", "w", "NUMBER", "gcc", "targeting", "win", "NUMBER", "was", "not", "able", "to", "compile", "even", "when", "use", "r", "lyeh", "s", "patch", "so", "I", "gave", "up", "on", "gcc", "and", "tried", "one", "of", "MS", "Visual", "Studio", "compilers", "NUMBER", "I", "first", "tried", "MS", "Visual", "Studio", "NUMBER", "the", "same", "use", "for", "Windows", "Python", "NUMBER", "but", "it", "was", "miss", "stdint", "NUMBER", "h", "header", "NUMBER", "So", "I", "tried", "to", "force", "Python", "s", "distutils", "to", "use", "Visual", "Studio", "NUMBER", "This", "time", "stdint", "NUMBER", "h", "was", "find", "but", "the", "math", "NUMBER", "h", "module", "was", "miss", "the", "binary", "logarithm", "log", "NUMBER", "function", "NUMBER", "of", "course", "that", "could", "be", "rewritten", "as", "log", "v", "log", "NUMBER", "or", "something", "NUMBER", "Finally", "I", "tried", "to", "make", "Python", "use", "MS", "Visual", "Studio", "NUMBER", "as", "a", "compiler", "and", "this", "time", "the", "Python", "extension", "compiled", "correctly", "again", "thanks", "to", "r", "lyeh", "patch", "NUMBER", "The", "brotli", "decoder", "which", "be", "write", "in", "plain", "C", "do", "compile", "successfully", "on", "Windows", "NUMBER", "It", "be", "the", "encoder", "write", "in", "modern", "C", "which", "has", "the", "above", "mention", "issue", "NUMBER", "It", "would", "be", "nice", "if", "you", "could", "add", "Windows", "among", "the", "support", "platforms", "NUMBER", "I", "m", "interested", "because", "we", "be", "trying", "to", "use", "the", "brotli", "Python", "bindings", "in", "fontTools", "for", "decoding", "encoding", "WOFF", "NUMBER", "Thanks", "a", "lot", "for", "your", "work", "NUMBER", "Cosimo", "khaledhosny", "in", "aac", "NUMBER", "bee", "NUMBER", "acf", "NUMBER", "b", "NUMBER", "ee", "NUMBER", "aeddf", "NUMBER", "b", "NUMBER", "f", "NUMBER", "ef", "NUMBER", "I", "have", "slightly", "modify", "the", "setup", "NUMBER", "py", "script", "in", "order", "to", "avoid", "use", "symlinks", "to", "NUMBER", "enc", "and", "NUMBER", "dec", "directories", "NUMBER", "The", "reason", "be", "that", "Python", "for", "Windows", "yes", "again", "cannot", "follow", "those", "symlinks", "and", "therefore", "the", "build", "fail", "NUMBER", "In", "order", "to", "compile", "the", "Python", "extension", "on", "Windows", "one", "can", "work", "around", "distutils", "inability", "to", "use", "relative", "paths", "to", "the", "C", "C", "source", "file", "by", "simply", "converting", "them", "to", "absolute", "paths", "NUMBER", "szabadka", "Apologies", "for", "my", "insistence", "but", "I", "would", "like", "to", "ask", "you", "if", "Brotli", "s", "core", "developers", "be", "interested", "at", "all", "in", "make", "Brotli", "specifically", "its", "encoder", "and", "Python", "bindings", "compatible", "with", "the", "Windows", "platform", "If", "not", "I", "would", "have", "to", "find", "other", "strategies", "to", "be", "able", "to", "encode", "WOFF", "NUMBER", "fonts", "use", "Python", "NUMBER", "Thank", "you", "NUMBER", "Thanks", "for", "your", "reply", "NUMBER", "I", "will", "sign", "the", "CLA", "tomorrow", "morning", "NUMBER", "Cheers", "C", "NUMBER", "szabadka", "I", "sign", "the", "CLA", "on", "behalf", "of", "my", "employer", "i", "NUMBER", "e", "NUMBER", "Dalton", "Maag", "Ltd", "NUMBER", "thanks", "for", "the", "fix", "I", "m", "gonna", "try", "now", "and", "let", "you", "know", "the", "results", "NUMBER", "For", "the", "email", "address", "we", "use", "google", "NUMBER", "contributors", "at", "daltonmaag", "NUMBER", "com", "we", "created", "an", "ad", "hoc", "Google", "Groups", "address", "for", "this", "purpose", "as", "shown", "in", "the", "CLA", "web", "form", "NUMBER", "My", "github", "username", "i", "NUMBER", "e", "NUMBER", "anthrotype", "be", "linked", "to", "my", "work", "email", "address", "cosimo", "NUMBER", "lupo", "at", "daltonmaag", "NUMBER", "com", "and", "the", "latter", "email", "address", "be", "a", "member", "of", "the", "above", "mention", "google", "group", "NUMBER", "Does", "that", "make", "sense", "Yes", "I", "can", "confirm", "the", "latest", "e", "NUMBER", "b", "NUMBER", "b", "NUMBER", "ab", "NUMBER", "a", "NUMBER", "a", "NUMBER", "de", "NUMBER", "d", "NUMBER", "b", "NUMBER", "a", "NUMBER", "aa", "NUMBER", "f", "NUMBER", "dbb", "NUMBER", "c", "compile", "successfully", "under", "MS", "Visual", "C", "NUMBER", "Thank", "you", "very", "much", "for", "addressing", "this", "issue", "NUMBER", "I", "can", "close", "this", "pull", "request", "now", "NUMBER", "I", "be", "going", "to", "open", "a", "new", "request", "always", "Windows", "specific", "which", "has", "to", "do", "with", "the", "Python", "extension", "only", "NUMBER", "Thanks", "again", "C", "NUMBER", "I", "was", "trying", "to", "use", "google", "woff", "NUMBER", "on", "a", "machine", "run", "OS", "X", "NUMBER", "and", "get", "the", "following", "error", "sh", "NUMBER", "brotli", "enc", "NUMBER", "static_dict", "NUMBER", "h", "NUMBER", "NUMBER", "fatal", "error", "unordered_map", "file", "not", "find", "It", "turns", "out", "that", "the", "version", "of", "gcc", "with", "Xcode", "NUMBER", "be", "too", "low", "I", "had", "to", "upgrade", "it", "manually", "from", "NUMBER", "to", "NUMBER", "If", "it", "s", "relatively", "easy", "to", "clarify", "what", "that", "error", "message", "be", "about", "I", "think", "it", "could", "be", "helpful", "NUMBER", "To", "be", "fair", "I", "don", "t", "really", "know", "anything", "about", "this", "stuff", "though", "so", "feel", "free", "to", "disregard", "as", "well", "NUMBER", "Thanks", "kennethormandy", "mind", "sharing", "the", "best", "way", "you", "find", "to", "upgrade", "Xcode", "s", "gcc", "So", "many", "tuts", "out", "there", "it", "s", "hard", "to", "tell", "the", "good", "from", "the", "bad", "NUMBER", "Might", "be", "relevant", "NUMBER", "I", "was", "get", "this", "same", "error", "and", "fix", "the", "issue", "with", "add", "some", "additional", "flags", "on", "build", "NUMBER", "See", "starting", "line", "NUMBER", "LINK", "OS", "X", "NUMBER", "Hello", "the", "sample", "bro", "tool", "do", "not", "compile", "on", "OSX", "I", "m", "use", "NUMBER", "bro", "NUMBER", "cc", "NUMBER", "NUMBER", "fatal", "error", "malloc", "NUMBER", "h", "file", "not", "find", "It", "seems", "like", "the", "malloc", "NUMBER", "h", "header", "file", "be", "located", "inside", "usr", "include", "malloc", "malloc", "NUMBER", "h", "on", "that", "platform", "NUMBER", "With", "this", "patch", "it", "compiles", "correctly", "NUMBER", "All", "best", "Cosimo", "Yes", "it", "s", "work", "now", "on", "OSX", "thanks", "NUMBER", "This", "add", "Python", "bindings", "developed", "originally", "as", "LINK", "python", "NUMBER", "Everything", "be", "keep", "under", "python", "subdirectory", "but", "distutils", "be", "very", "inflexible", "so", "I", "had", "to", "symlink", "dec", "and", "enc", "directories", "from", "top", "level", "for", "the", "build", "to", "work", "I", "wouldn", "t", "insist", "on", "use", "a", "setup", "NUMBER", "py", "script", "myself", "but", "it", "seems", "to", "be", "required", "for", "PyPI", "which", "I", "guess", "we", "would", "want", "to", "uploat", "to", "at", "some", "point", "NUMBER", "CC", "behdad", "NUMBER", "Thanks", "Khaled", "NUMBER", "Would", "be", "great", "to", "get", "this", "in", "NUMBER", "I", "need", "it", "to", "implement", "WOFF", "NUMBER", "in", "LINK", "FWIW", "I", "need", "this", "for", "LINK", "test", "NUMBER", "I", "sign", "it", "now", "NUMBER", "deprecate", "rand_r", "calls", "remove", "log", "disambiguation", "miss", "assert", "header", "add", "portable", "endian", "NUMBER", "h", "header", "add", "public", "domain", "license", "NUMBER", "NUMBER", "IMO", "it", "would", "be", "cleaner", "to", "move", "the", "public", "headers", "to", "a", "separate", "include", "directory", "and", "or", "give", "them", "less", "generic", "names", "like", "brotli", "decode", "NUMBER", "h", "and", "brotli", "encode", "NUMBER", "h", "to", "streamline", "the", "use", "of", "the", "library", "NUMBER", "I", "gave", "it", "a", "quick", "try", "but", "it", "seems", "that", "the", "public", "headers", "include", "on", "most", "of", "the", "other", "ones", "so", "it", "will", "need", "a", "bit", "of", "thought", "NUMBER", "Hi", "Thank", "you", "for", "the", "comment", "NUMBER", "For", "now", "if", "it", "helps", "the", "headers", "that", "can", "be", "considered", "to", "contain", "the", "public", "API", "be", "decode", "NUMBER", "h", "and", "its", "include", "streams", "NUMBER", "h", "for", "the", "decoder", "and", "encode", "NUMBER", "h", "and", "its", "include", "streams", "NUMBER", "h", "for", "the", "encoder", "NUMBER", "This", "API", "be", "not", "final", "we", "be", "in", "the", "process", "of", "revising", "it", "NUMBER", "Thanks", "Zoltan", "NUMBER", "Would", "be", "great", "if", "in", "the", "future", "you", "submit", "individual", "change", "NUMBER", "I", "like", "to", "understand", "the", "change", "but", "be", "hard", "when", "it", "s", "such", "a", "big", "chunk", "NUMBER", "Does", "this", "have", "implications", "for", "exist", "users", "Has", "this", "change", "the", "format", "Thanks", "NUMBER"], "text_count": [0, 20499, 4830, 2532, 1524, 178, 1980, 3, 123, 2293, 2873, 5436, 3059, 2079, 2296, 823, 0, 0, 0, 0, 6066, 2109, 1238, 682, 1904, 951, 0, 0, 0, 0, 12052, 7464, 4705, 226, 2384, 763, 0, 0, 0, 0, 15297, 954, 6407, 5232, 4621, 0, 0, 0, 0, 0, 4339, 1849, 2100, 1067, 1576, 703, 1583, 0, 0, 0, 11344, 558, 9542, 551, 0, 0, 0, 0, 0, 0, 8702, 836, 6503, 2966, 814, 0, 0, 0, 0, 0, 13839, 7274, 1224, 4850, 708, 632, 0, 0, 0, 0, 841, 4360, 354, 0, 0, 0, 0, 0, 0, 0, 10627, 1912, 6706, 2312, 0, 0, 0, 0, 0, 0, 23381, 46215, 766, 2312, 524, 735, 0, 0, 0, 0, 62658, 348, 46181, 698, 10335, 14211]}]