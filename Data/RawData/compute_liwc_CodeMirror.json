[{"repo": "CodeMirror", "type": "elite", "title": "", "number of text": 219, "text": "  Thanks for spotting that. Merged.\n  Indeed. The &nbsp is supposed to be there to ensure the DIV is given a height, but the fact that the cursor was drawn after it was a bug in the measuring code. Please test whether attached patch fixes it for you.\n  @mightyguava Please take a look at the attached patch and tell me if you can think of any problems it might cause for the vim mode. It changes `nofallthrough` to not kill keypress events anymore, and adds a new keymap property `disableInput` that, when the top-level keymap has it, will prevent regular typing from adding characters to the editor. I've added that property to the vim keymap, and it seems, to work, and has the additional pleasant side effect of no longer blocking ctrl-r when within the keymap.\n  You're right, it seems the top padding wasn't being included in the coordinates that `charCoords` reported. There was also a rather huge bug in `coordsChar` when using \"local\" coordinates (which not many people used so far, I guess).\n\nDoes this work for you?\n Indeed, some code was explicitly compensating for the absence of the top padding from the local coordinates. I fixed that in the attached patch. There might be more fallout from this, if we're unlucky. (Still, the 'consistent' model is preferable to what we used to have.)\n  Please see my attached patch instead -- I guess a general way to cheaply find the line at a given y offset would be more generally useful, and less 'random exposed internals'-y.\n No, it returns the first line -- i.e. the line at offset 0. \"local\" coordinates are not scroll-sensitive.\n\n`editor.lineAtHeight(editor.getScrollInfo().top, \"local\")` will probably work better.\n  That's emacs lisp code. You appear to be either very confused about what CodeMirror is, or trying to make a bad joke.\n No, no, **no**. CodeMirror modes aren't just random files that happen to work with other editors. They are CodeMirror-specific JavaScript programs that parse a given language. Look over a few of them. They don't look XML-ly.\n  I could only reproduce the case where the text vanished, and I found the bug that caused that (see attached patch). Could you see if it also takes care of the problem where the widgets get duplicated? And if not, could you give me a short HTML page that demonstrates that problem?\n  Does the attached patch help?\n You can turn the explode behavior off entirely by setting a `autoCloseBrackets: {explode: false}` option (optionally with a `pairs: \"...\"` property in the object to specify custom completion pairs).\n  See attached patch. Please test also on your side!\n Great! When you go live, don't forget to send me a link for the real-world uses page.\n  Great. Merged.\n  Thanks. Merged as 8e6b9f5e15d16f388fa15f88a930013a87f\n  Your 'all-spaces' overlay is creating a single token per character, so the behavior you're seeing is what is expected -- tokens aren't joined when you disable `flattenSpans`.\n > The issue is that the 'first-two-spaces' overlay is being applied to twice per line and it should only be applied once per line. If you look at the spans, you will see the cm-first-two-spaces style being applied to the first two spans of each line and this is not the expected behavior. Only the first span of each line should have the cm-first-two-spaces style applied.\n\nThe list of tokens will be made single-dimensional, since CodeMirror treats a line as a sequence, not a tree, of styled tokens. When one overlay or mode is creating small tokens, this will cause tokens produced by other overlays or modes to also be split on the start and end of those small tokens. You _can_ override the per-editor `flattenSpans` option per mode, by setting the `flattenSpans` property of the mode object. Maybe that helps in your case?\n Did you see my remark about setting `flattenSpans` per-mode? I'd imagine that should be a good workaround.\n  Indeed, I broke the resize listener two days ago. Should be fixed in 83fdc1e77cc078029504de549b2eef8e1bb83f12\n  This is problematic because if the (hidden) scrollbar on the actual scrolling DIV is there, but our fake one isn't, there'll be a margin at the bottom or right of the editor created by the size of the hidden scrollbar, and not filled by the fake one.\n\nDo you have a way to reliably reproduce the problem?\n Actually, your original patch _was_ safe, since when overflow is auto, the appearance of the scrollbar itself will, on platforms where scrollbars take up space, make sure the size difference between `offsetWidth` and `scrollWidth` will jump over one pixel when the scrollbar appears. On platforms where the scrollbar does not take up space, the problem I was worried about won't occur, so that's also fine. Merged. Thanks for you patience and for the exta info.\n  This is by design. But if you bind Home/End to `\"goLineLeft\"`/`\"goLineRight\"` (instead of the default `\"goLineStart\"`/`\"goLineEnd\"`), you get the behavior you want.\n  Looks great! Merged as 65c74d5905fe362350a8cf7e70f9e032e2043986\n  Looks good. I've pushed a slightly adjusted patch that leaves the addon file in place, so that users don't have to update their paths on the next release. See 3818137291d94bfb168e037309727040d693b756\n  Oh joy, another file that I have to bump version numbers in. Is the `version` field obligatory, or can we get the tool to just look at `package.json`?\n Great. Merged. Version field removed in attached patch.\n Okay, reverted.\n  This is a good idea. But how about moving the `signal`  call to `makeChangeFromHistory` and feeding it a regular change object similar to the one that `beforeChange` gets?\n Yes, though -- sorry to waste your time -- I decided that actually that's not what I want either. I've pushed a different change (see attached patch) where `beforeChange` is also fired on undo events, but without the `update` method. Since  that was the only part that was problematic to support.\n\nDoes that work for you?\n  This is by design. See https://groups.google.com/d/msg/codemirror/TQqQW5lSdZQ/-u1RF80lzLYJ\n  I see the point, but merging this would set a precedent for all kinds of other common shortcuts and clever commands to be included in core, which would end up bloating it. So I'm going to say no. It's easy enough to drop these into a site when you need them.\n\nMaybe an extra-bindings addon would make a good dumping ground for such things, but since it'd have a fuzzy scope, I'm not too keen on maintaining it. If you want to set up a repository and link it from https://github.com/marijnh/CodeMirror/wiki/CodeMirror-addons , that'd work best.\n I guess the reason you can't easily do this on top of the public interface is the bidi part? Wouldn't it make more sense to expose some of that, so that a wider variety of bidi-aware functionality can be written external to the core editor?\n\nProblem is, of course, that the bidi code is rather subtle and not very well encapsulated.\n > posEq() -- easy to replicate\n\nIndeed.\n\n> Pos() function -- easy to replicate since I can still call new CodeMirror.Pos()\n\nThe two are the same function.\n\n> lineStart() -- has dependencies on other functions in the bidi code, so this is harder to replicate\n> getOrder() -- also tied into the bidi code\n\nI'm a bit torn on starting to export these. It'd lock me into keeping them around, and blow up the api quite a bit (there's a whole string of functions on this level). What do you need `getOrder` for? Any chance you could epxress it using the `moveH` function instead?\n\n> CodeMirror.commands.killLine(cm)\n\nIt's a command, not a method. Those are not documented, but part of the interface, and can be considered stable.\n  And merged! 51292d0b8d2c632eeeccbd6ff83a88316a83c038\n  Merged!\n  I can't reproduce this -- maybe I just misunderstand the issue. If I copy-paste this into the scss demo and auto-reindent it with shift-tab, the `top` and `bottom` lines still get two spaces, which seems correct.\n  Which browser?\n It does. Could you try with the attached patch?\n Great!\n  I think, though I'm not entirely sure, that you misunderstand the mechanism. If `Shift-` is explicitly part of the binding, automatic shift-selection handling is turned off, intentionally. It is only active when a regular binding that binds a `go*` command is invoked with the shift key added to the regular combination. I guess you want to bind `\"Up\"` to `\"goMoveUpAcrossRegions\"`, and do your motion in that command. That'll make it work normally without shift, and selection-growingly with shift.\n\nDoes that make sense?\n > Binding a \"go\" command to a key enables Shift selection when Shift is pressed. Binding a \"go\" command to a key containing Shift does not enable Shift selection when Shift is pressed. Doesn't that seem inconsistent?\n\nNo, that's the point. If you write a command specifically for shift, you can use `setExtending` explicitly to get selection-extending behavior. The hack with `\"go\"` (which I'll agree is crummy) is there solely to be able to use a single binding for both the shift-less and the with-shift version of a motion command. It's an abbreviation mechanism, pretty much.\n It's not 'all crummy'. It's a hack that works well within the constraints of the rest of the system.\n  Do you have a link to (or copy-paste of) the full list of svg properties that we should recognize?\n Added.\n  Looks good. Test pass. Merged as 36fe7d5b4a3ffd\n  All clean. Merged.\n\nThanks both of you for your continued, meticulous efforts!\n  Merged. Stray character removed in attached patch.\n  I guess this is another good reason (besides #1513) to figure out a reliable way to detect composition starting and ending on all browsers that fire enough events to allow that.\n\nIf someone else tackles that part (well-tested, cross-platform, cross-browser, not too fragile detection of these events), I'll happily take care of integrating the CodeMirror functionality (making sure these form a single undo event, showing the underline).\n  Thanks! Merged. I rewrote part of it, not because I am sure it was incorrect, but because the extra complexity from handling anchor/head rather than start/end made it hard for me to see whether it was correct. (What worried me was that new spans appeared to be always added at the back of the array, yet the start of the covered range was found by calling `find()` on the first element.)\n  Please try with the attached patch.\n  Thanks for continuing to improve this! Merged.\n\nOne not on git convention -- put a blank line between the patch 'title' and the rest of the description. Otherwise, tools will treat the whole description as title.\n  Thank you. Merged in squashed form as 1bcd6e1 .\n  Do you really need both modes (`dontAlignCalls` and `dontAlignCalls` + `nonAlignedCalls`)? I find the names sound like both do the same thing, and in fact, I'm not entirely close on what the difference is.\n So conceptually, what you wanted was to _not_ pass `dontAlignCalls`, since you do want to align calls. Rather than adding another confusing option, the attached patch fixes `statementIndentUnit` when `dontAlignCalls` is false.\n  Subtract the `top` and `bottom` properties of the object returned by `charCoords` to get a more accurate line height (the height of _that_ line, as opposed to the height of an unstyled line). Otherwise, this looks good.\n > Testing DOM related stuff across a bunch of browsers manually is a painful experience\n\nBelieve me, I know! The code looks good now, but the tests also fail on my Linux Chrome. In general, you can't hard code pixel values in the tests, since fonts and such differ between platforms. Either adjust the tests to use a less fragile way to verify the behavior (maybe duplicate some computations in them) or remove them altogether.\n\n(Here's what I get:)\n\n```\nvim_zz\n  3035 != 3110\nvim_zb\n  2813 != 2882\nvim_zt\n  3255 != 3335\nvim_z.\n  3035 != 3110\nvim_z-\n  2813 != 2882\nvim_zEnter\n  3255 != 3335\n```\n Almost. I still get this failure:\n\n```\nvim_zt==zEnter\n 3255 != 2812\n```\n Well, I'm confused about the order in which this and #1527 are supposed to be merged. I get failures when merging only one of them, so they seem to depend on each other. But I get conflicts when I try to merge both. Please condense both down to a single commit, put them on the same branch, make sure the tests pass, and overwrite one of the pull requests with the result, closing the other.\n  Merged.\n  Looks like some kind of weakness in Webkit's algorithm for determining what needs to be repainted. It appears that adding `.CodeMirror-gutters { clear: both; }` works around the problem. Could you test whether it also works for you? If so, I'll add it to the default stylesheet.\n Indeed, that hack only seems to work for fixed-height editors. The underlying problem was that the gutter had height 100%, which apparently caused it to be repainted whenever the editor's insides briefly changed height during a resize (remove old line, add new line). Attached patch should fix this. It's slightly scary, since keeping sizing consistent by explicitly setting heights is always more fragile than letting the CSS engine handle it, but it does solve the problem.\n  See #1382 for an abandoned start of a solution for this. The problem is that browser don't fire coherent events when IME happens, and no one has put in the work to figure out a way to convert the incompatible event soup into something workable.\n  Fixed in attached patch. JavaScript has no sane way to detect word characters, and I don't want to add a half-a-megabyte regexp to match all possible Unicode word chars, so I'm adding these per language as they come up in bug reports.\n  Thanks again. Merged as b50aef3\n  The script tried to pass extra arguments to uglifyjs, but it appears that uglifyjs is very picky about the order of its arguments. Should be fixed now, and I also added a default set of arguments.\n  Thank you. Merged.\n  Looks good. Merged.\n  (And do leave a comment when you add a test patch, since github doesn't notify me when a patch is added.)\n Thanks, very nice! Merged as 32050bbb0a9aa4d7e4ff995c4ecd06abf5c926b6\n  Great, thanks for pointing that out. Merged.\n  Yes, you should call `.refresh()` on your CodeMirror instance after unhiding it. http://codemirror.net/doc/manual.html#refresh\n  Thanks! Merged.\n  Thanks for catching that. Merged.\n  Could you give me a minimal html page that helps reproduce the problem? Or alternatively, can you see whether adding a third argument, `true` to the call to `option` that defines the new option helps? And, failing that, whether removing the line that that patch adds to `guttersChanged` makes a difference?\n Thanks for the reproduction code. See attached patch for a fix.\n  That's pretty invasive and crummy on the part of Bootstrap, but in this case it's easy to work around. See attached patch.\n  Thanks! Merged as a3402da8e342d6925f5a431b7ccf3ff4bfd2966c . That `toggleOverwrite` wasn't document was an oversight. Corrected in 1aae9a9453cdbe5e549ec8c11495098ccdf20810.\n  > But \"yellow\" and \"white\" should be suppressed from var valueKeywords = keySet([.\n\nWhat do you mean by that?\n  Thanks. Merged. Indeed, if we're going to pass three fields from `cm` to `updateScrollbars`, we might as well pass the whole editor.\n\nI also prefer the look of the editor without this, so I made it an option that defaults to off. See attached patch. Set `coverGutterNextToScrollbar` to true to turn it back on.\n  Makes sense. Though your commit calls it `CodeMirror-line`, which seems confusing. I've used the class name in your pull request message, `CodeMirror-code`, instead. See attached patch.\n  Eww. But yeah, copy-paste should work. Merged, and then cleaned up a little in patch 64113ec97bb73c2a740d42d56021acb01ce05a92 . I assume the SPAN element served no purpose. If it did, please point it out to me.\n  This won't work when the editor is inside a relative or absolutely positioned element. Messing with the style of the top-level element from an option also seems too dangerous. So again, I'd rather not have an addon for something than an addon that will cause problems and generate support requests.\n  The regexp for numbers was too broad. Should be fixed now.\n  Unfortunately, the one piece of Apple hardware I own is a 2006-era macbook, which does not yet have multitouch support, so I can't test/reproduce this.\n\nIt's quite odd that the glitch happens _after_ the selection is finished. If this was some mouse event confusion, I'd expect it to glitch right away. Though maybe CodeMirror is failing to detect that the select drag ended. You could look at the `onMouseDown` handler and verify that the internal `done` function is properly called when the mouse gesture ends.\n\nJust to be sure -- the selection you get does look the same are normal CodeMirror selections, no? It might also be a DOM selection, if the gesture somehow prevents the usual mouse events from firing.\n Is there a clean way to detect this case? If so, yes, a workaround that cancels the bogus re-selection sounds reasonable.\n\nMaybe there's also some shuffle with `preventDefault`-ing the right events that helps here, problem is finding out about it.\n You may be right -- I guess browsers _always_ fire a move before the mouseup if a drag happened. Does simply removing the `doSelect` call already help with this problem? We could also add a variable that ensures that `done`'s body only executes once.\n Done in the attached patch. If the `done` handler doesn't fire immediately, though, wouldn't you have a problem with the editor not being focused at the end of the drag, and further mouse activity still messing with the selection?\n > Can you elaborate a set of steps that you think could cause problems?\n\nUnfortunately, all I know is that there's probably a reason for the call to `focusInput` in the `done` function. But some git arheology traces that back to patch 66499c7a , which suggests it is only important in IE.\n  Thanks! Merged as de983c613392d5f886e0142fc0a6c8ab9a81832e\n  Fixed by 0d8a43a05e331c1cb1881e8f11b970141fde23dd\n  The line number showing up there doesn't bother me, but it would probably be quite simple to make this an option. Want to submit a pull request?\n This has been implemented (http://codemirror.net/doc/manual.html#option_coverGutterNextToScrollbar)\n  Fixed in #1523\n  Good call. Merged, and did the same for `CodeMirror.Doc.prototype` in 9069b222ce48e8d5155ef10700f41e2c40cc5668\n  It's all in the manual. You can bind keys to functions with [`extraKeys`](http://codemirror.net/doc/manual.html#option_extraKeys), use the programming API to check whether you are between brackets, and if so, do your thing, otherwise, return `CodeMirror.Pass` to let the next hander for the enter key have its turn.\n  If I understand the movie correctly, you are at the bottom of the document. There's no space to scroll beyond that. You could try setting a bigger vertical padding (`.CodeMirror-lines { padding-bottom: 1em; }` or so).\n Still works for me. Please see http://jsbin.com/idiwek/1/edit . If that page doesn't work for you, please be more explicit about what you expect to happen versus what happens.\n  The double-colon thing was still broken, but should be better now.\n  A fix for the Firefox bug has been posted in https://bugzilla.mozilla.org/show_bug.cgi?id=876098 . Will take a while before it's reviewed, landed, and pushed out in an actual update, but things are moving in the right direction.\n  Is still still broken with the current code? Does it influence indentation or local-variable recognition in a problematic way?\n Well, I must really have been asleep when I wrote that code. Found another two stupid bugs. Should be better now. A set of tests for the JS mode would be great to have, but I am not currently motivated to work on that (would need to extend the test runner to check indentation).\n  Undone again in b9e9d5c3a676f83f2cc8b2793615d31798d52ed3 -- crashes were still being reported.\n  Still happening, as of b9e9d5c3a676f83f2cc8b2793615d31798d52ed3 , since our hack to enable `setDragImage` wasn't reliable.\n  That's a somewhat different problem, and much easier to work around. See attached patch (though a full fix would require knowledge of Unicode categories, which JavaScript does not expose)\n  Closing this as not very critical and hard to work around. Still happy to hear about any CSS tricks that minimize or solve the effect.\n  Closing this. We can revisit when/if a serious multi-cursor implementation happens.\n  Apparently @benkeen is aware of the problem. I myself am not going to work on this. Fixes are welcome, but I'm trying to keep the issue list focused on things that concern me.\n  The current approach of returning `CodeMirror.Pass` works reasonably well, and doesn't add too much complexity.\n  Great idea! Also, additional events (e.g. `contextmenu`) could be exposed as a side shot.\n I was looking for a good way to listen to context menu events in CodeMirror for integration with WebKit. Its current editor listens for `contextmenu` events, and forwards line number and gutter / not gutter info so that the WebInspector can create its own context menus to expose features.\n  Maybe there can be a test making sure that http://codemirror.net/doc/compress.html works, reducing to the smallest failing file group when there is a problem?\n Sweet, thanks for that.\n  Thanks Marijn! v3 is looking great.\n  As @repenaxa indicated in issue #722, the default blink rate in Windows is 530ms. It feels similar on Mac and Ubuntu, but I couldn't find any evidence to support this claim.\n  Not sure if very useful but it shows CodeMirror cares about its tests and passes them.\n  This changes the API slightly to allow `setMarker(line, marker, className)` to take a DOM ElementNode instead of a text as `marker`. Note: It is still possible to call it with a text.\n Sorry about that, it was a misunderstanding.\n  To control a CodeMirror property from a `<select>` element, you can simply copy the [theme demo](http://codemirror.net/demo/theme.html).\n  Regarding issue #688:\n\nI removed the explicit null pointers from the `Line` object constructor, and I benchmarked this change loading a 178K-lines file into a single CodeMirror instance. I ran `Chrome 21 Linux 64 bits`, and took heap snapshots in both cases with the chrome heap profiler, looking at the shallow sizes of the three biggest footprint items.\n## Before\n\n178 K `Line` objects in memory, taking up 20 MB of heap.\n279 K `(array)` objects in memory, taking up 58 MB of heap.\n374 K `(string)` objects in memory, taking up 14 MB of heap.\n## After\n\n178 K `Line` objects in memory, taking up 11 MB of heap.\n281 K `(array)` objects in memory, taking up 60 MB of heap.\n378 K `(string)` objects in memory, taking up 14 MB of heap.\n\nThis change seems to cut the `Line` objects memory footprint by 45%.\n\nI didn't precisely measure loading time and highlighting / scrolling performance in both cases, but I there is no noticeable difference.\n  We've been investigating heap footprint of CodeMirror with Pavel Feldman and this is what we found out: Loading 500K lines of text into the editor takes ~140 MB of heap.  Tested on Chrome 64bit: 19 MB of strings, 64 MB of LeafChunk objects, ~50 MB of Arrays. It looks like there is room for improvement by saving on pointers and arrays. I'm currently experimenting on a patch to address this.\n Yes eliminating the `styles` array in the `Line` object could definitely save up some memory. It also turns out that commenting out lines [2439](https://github.com/marijnh/CodeMirror2/blob/master/lib/codemirror.js#L2439) and [2440](https://github.com/marijnh/CodeMirror2/blob/master/lib/codemirror.js#L2440) in the `Line` constructor doesn't create the null pointers for every object, and this divides the `Line` object footprint by two in the above example (Chrome 64bits).\n  Currently line numbers scroll away horizontally along with the content. Other editors tend to keep them fixed. If you have an idea how to fix it please let me know.\n Oh, so there is a `fixedGutter` option. Problem solved, thanks :)\n\nIt flickers a bit though.\n  When you paste `\u05e2\u05b4\u05d1\u05b0\u05e8\u05b4\u05d9\u05ea` into the editor, and then try to place the cursor inside the word, the cursor seems to stay on the left of the word.\n Memo to self: remember to check previous issues _before_ filing\n  The Python mode lexer currently attempts to validate the use of a '@' or '.' character by looking ahead to verify that the next token in the stream is a valid variable (or builtin). This has the undesired side effect of combining the '@' or '.' character with the token identifier that follows it.  For example, with the cursor placed at the location of the | character below:\n\n``` python\nfoo.bar|\n```\n\nRunning the following in a JavaScript console produces:\n\n``` javascript\n> editor.getTokenAt(editor.getCursor()).string\n\".bar\"\n```\n\nSimilarly, with the cursor placed here:\n\n``` python\n@some_decorator|\n```\n\nWe see:\n\n``` javascript\n> editor.getTokenAt(editor.getCursor()).string\n\"@some_decorator\"\n```\n Ah excellent, the \"consume\" arg to match was exactly what I was looking for.  This does solve the issue partially, as it correctly parses the . or @ as a separate token from the variable that follows it.  However, I think we'd also want to continue applying a \"meta\" style to a variable that follows a meta token like @, so that the entire decorator can be displayed in a particular visual style.  For example, in the following snippet:\n\n``` python\n@dot.separated.decorator\ndef foo(bar):\n  pass\n```\n\nThe `dot.separated.decorator` should also receive the \"meta\" visual treatment, while tokenizing each package component separately to allow for correct code completion.  I've taken a crack at a solution to this in:\nhttps://github.com/metzen/CodeMirror2/commit/3e20687701ab9159f739699bec04c1f79e856dfa\n  Well, the tragic thing is that it works fine on my machine now. But yes, I guess two reports is enough reason to disable the `setDragImage` call again for Safari. See attached patch. This will cause an ugly effect where the whole editor appears to be dragged around, but it's still better than a crash.\n  Thank you. Integrated.\n  I'd rather leave this to the user. It's a pretty easy problem to diagnose, and people might be writing Markdown text, for example, from right to left.\n  The brokenness seems to only occur in Webkit. Removing the draggable=true from the divs makes webkit cycle properly through the elements, but it gets confused again as soon as it causes a scroll event to happen in the editor (which triggers an update to the DOM to make sure the scrolled-to elements are available). This seems to be a browser bug, more than a CodeMirror bug.\n\nOn the other hand, CodeMirror will never, even in browsers with better search implementations, be fully searchable through the browser, because it doesn't generate DOM nodes for the whole edited document, so the browser doesn't know about all the text that's available.\n  I don't implement language modes unless I need them myself, or someone pays me to. However, it should not be too hard for someone else to implement something like ERB as a CodeMirror mode.\n  Thanks, integrated. Next time, try to rebase first so that your tree is a continuation of mine (and then force-push to update your github repository, or push into a new branch).\n  This will:\n- Allow custom keybindings\n- Allow variable-width tabs\n- Make it possible to implement a goal column (and make goal-colum work at all on IE7/8)\n- Remove some particularly bad hacks from the code\n- Allow (with a lot more work) sane navigation in wrapped lines (when wrapped lines are implemented)\n\nIt will also make CodeMirror no longer automatically recognize native non-standard keybindings, but very few people seem to be relying on those anyway.\n  I've improved the error message a bit, but couldn't find a workaround (except for removing the nodes that I use `innerHTML` on from the document and then putting them back every single time, which is very expensive).\n  Hi Volker,\n\nI've modified the commit slightly to pass the numbers as separate arguments instead of an object. I can see people using runMode in situations where performance is relevant, so I'd rather not allocate an extra object for every token\u2014especially since passing them separately is hardly less practical.\n\nSee https://github.com/marijnh/CodeMirror2/commit/640016a1850e9a55d4e9e43f66db352ae27bd23e\n\nBest,\nMarijn\n  Hi,\n\nCould you try whether the patch I just added (5af5292b865384d8dd47b6a5b65d6f629130ccd0) helps on Gecko? Polling is quite expensive, so I'd like to go to any length to avoid it (see also [1](https://bugzilla.mozilla.org/show_bug.cgi?id=354358), if you haven't already). For Opera, it does look like polling is our only option. Would modifying `fastPoll` to not give up after a single miss but try a few times, at least on Opera, not be a less invasive way to get what we want here?\n\nBest,\nMarijn\n Update: It seems recent Opera versions also fire an 'input' event, at least for normal input. (What would it take to enable IME, for testing, on my own machine?) Also, browsers seem to fire specific keycodes when starting an IME (see [1](http://stackoverflow.com/questions/2500923/opera-ime-support)), if the input event thing doesn't work out, maybe we could rely on that and only poll when such a code is fired.\n (I'll look into this more closely soon. Very busy right now.)\n Hey,\n\nThanks for the great explanation and tables. The patch still seems a bit more complex than necessary. How about doing something like this:\n- Make the 2000 in slowPoll a variable (in CodeMirror constructor scope)\n- In onKeyDown, when options.pollForIME is true and the event looks like it might be an IME event (use the keycode when possible, otherwise just assume it is so), set this variable to something smaller (say 200).\n- When an 'input' event is seen or no change has been detected for X (say, 5) seconds, reset the poll delay variable to 2000 to make sure we're not wasting browser resources for no reason.\n\nThis way, we don't have two separate poll timers running at the same time, which seems needlessly confusing.\n Actually, 200 is probably way too much for the polling time. Try 50.\n I've commented on the gist.\n  The reason for the `multiple = true` is that older browsers always display non-multiple select inputs as a single line, even when size is set to something >1.\n\nIf you want to provide more details on the 'too few entries' thing, please open a different bug for it.\n  I am not seeing this in IE8.0.6001.18702 -- in the full-screen demo, the selected text always corresponds to the mouse position.\n  Thanks. Integrated.\n  Hi Alexander,\n\nNo mistakes jump out, but I must say that I don't really have time to go over this very closely.\n\nBest,\nMarijn\n > what type is `lineHandle`?\n\nThese are opaque objects, you're not supposed to do anything with them\nexcept pass them back to lineInfo, setLineClass, addGutterMarker, or\nremoveGutterMarker.\n Sorry, used the internal names. I meant setMarker and clearMarker.\nAlso note that the mentioned functions accept both an integer and a\nline handle, so you can't simply specify them to only take line\nhandles.\n  You can just loop over the lines after initializing your editor and indent them through indentLine -- seems that something that's four lines of code to emulate shouldn't be a built-in option.\n It's only one, in fact:\n\n```\nfor (var i = 0, e = editor.lineCount(); i < e; ++i) editor.indentLine(i);\n```\n Ah, sorry, I wanted to tell you -- as I tried out the code I gave you\nI noticed this bug. I pushed a fix to the repository earlier today. If\nyou get the dev snapshot, the problem should be gone.\n  I've integrated this, though I still have my reservations. If you're calling this, you're probably first fetching the content of the editor with `getValue`, then processing the whole string that returns, and then moving back to {line, ch} coordinates. This is perfectly okay for small documents but will be quite slow for bigger ones.\n  Hi Marco,\n\nI think this is best done as a piece of add-on code, not in core CodeMirror. Hook into onKeyEvent, and call the indentLine method when detecting a cmd-[ / ]. There's any number of keybindings that people are used to, and supporting them all in the core would bloat it. (I am hoping to, eventually, move to a system where keybinding sets are first-class things, and the editor comes with a bunch of different ones. This will take time, though.)\n\nBest,\nMarijn\n  CodeMirror doesn't internally track character offsets, it treats the document simply as an array of lines. So you'll have to convert (which may be slow on big documents).\n Nope. But a tight loop that uses .indexOf to find all newlines before a given position should be relatively fast (unless we're talking really big strings).\n  Integrated. Though I would have preferred if you'd try to re-use as many of the 'standard' styles defined in the existing themes as possible, to make it easier to apply themes to the mode.\n  See 9e069dac23aba66b582d66b020bfab38c42fd0d6 . Such syntax is definitely bogus, so it should be highlighted as an error. With this patch, just the quoted value is colored red, and the parser continues properly after it.\n  Did you accidentally upgrade to chrome 15? (I didn't change anything that was intended to fix this. Tried to reproduce, but couldn't.)\n I can reproduce this neither in 2.15 nor in the latest version. Closing.\n  See 3bb871ce5535ebe7cf0108f8e157b818cd48c281 and http://codemirror.net/demo/folding.html . Needs testing.\n  Thanks for investigating this deeply. I can't reproduce the issue, though. Does it happen on all browsers? Could you be a bit more specific with the reproduction instructions? (Which < do I type over? How do I select '<title'?)\n  [Just commenting on 69f9fb9de4b7cbb17bf96ccf70ae31f2aa982f21 for now, haven't read the other patch yet.]\n\nI like the clearAll\\* methods. I'm not so happy about your approach to error checking. I see how there is a hole in the functionality provided by the current CodeMirror core, but I don't think this solution is general enough -- you just get line numbers, not error messages, so you have to do a bunch of extra magic if you want messages.\n\nWould an approach where a parser can emit an error by returning a {style: \"error\", message: \"some string\"} object instead of just \"error\" work for you? The messages can then be saved in the lines, and we could have a method to pull them out, with associated line/char information. This way you don't have to re-parse the whole buffer every time an error gets added or deleted.\n  The best way to change the font is to set a font-family/font-size in the .CodeMirror class, that will ensure the whole editor is using the same font. I've updated the manual to be clearer about this.\n  Pulled. And revised somewhat in 69953ceffa6852466e77865d1470014c66a94a41 to be more lightweight.\n  The problem appears to be your absolutely positioned body in combination with some webkit scrolling bug (the textarea is still positioned correctly, and is being scrolled out of view by webkit). This is a rather pathological case, and I don't have time to look into this further at the moment.\n  Fixed by 54a37ba6e65209ec3293619c3dfc62425ff7c1e5\n  This is a different manifestation of issue #144 (key polling somehow not working well)\n  Could you be more specific on what 'not repeating reliably at all' means? Holding an up/down arrow seems to work for me. \n\nCould it be that you're on a slower-than-usual computer? Maybe I'm setting a timeout too short.\n Very odd, especially since it seems to happen on all browsers for you. Could it be that you have key repeat speed set very low somehow? What happens if you change the '80' in function fastPoll (on line 565 of the current git version) to, say, 200?\n\nAlso, are you seeing any script errors?\n Hm. I am out of ideas on what might cause this, and not able to reproduce it (I'm running Ubuntu myself, but never saw the issue). If you happen to figure out which setting/program/hardware causes this, do let me know.\n  Thanks! Pulled in as 454df5d964cb9b7116ad24e866e2a2e550b1231f\n  Fixed by 454df5d964cb9b7116ad24e866e2a2e550b1231f\n  Could you create a minimal, simple HTML page that shows the problem? I can't reproduce this by adding a long line to the XML mode demo.\n  Detecting automatic semicolon insertion is currently out of scope for the JS mode (contributions welcome). If you program in a semicolon-omitting style, try setting the enterMode option to \"keep\". You'll have to do a bit more work managing your own indentation, but at least CodeMirror won't constantly wrongly indent for you.\n  There are no '4 space hard tabs', tabs are tabs, and browsers render them as 8 spaces wide. I'd like to have a setting to control tab width, but unfortunately browsers do not currently support this. Representing tabs with some other string is easy in the display, but very hard to do in the textarea (I could no longer leave cursor movement and editing entirely up to the browser), so I'm not really willing to go there.\n  Use the `text/x-php` mime type as your mode spec, and you should get the behaviour you want. (You don't have to load the XML, JS, and CSS modes if you're doing that.)\n  This is getting clunky. Worked around in d433e702a5f2ebe393e8724eec3c6966fab80109\n  You could update `historySize` to have a different name (`historyData` or so) and also return the actual history data (in the internal format), and provide a similar setter function. The internal format (`{start, added, old}` objects) is probably okay for an external interface.\n  Added an exception for this in f11e8843f34fca47039b95aa6dd80d7a011a8231\n  Thanks! Merged, with a few small changes (most notably, wiring up the preview updates to onChange, to not waste too much cycles on unnecessary updates)\n  Thanks, merged.\n  I can't think of anything. Try to make your use case more and more like the demo pages until you find out what triggers this. Then, if the problem isn't obvious, send me a minimal testcase.\n  Thanks! Merged.\n  Instead of this...\n\n```\n  CodeMirror.defineMIME(\"text/x-csharp\", {\n    name: \"clike\",\n    keywords: words(\"...\"),\n    atoms: words(\"true false null\"),\n    hooks: {...}\n  }\n```\n\nYou'd have something like:\n\n```\n  CodeMirror.defineMode(\"csharp\", function(config, parserConfig) {\n    return CodeMirror.getMode(config, {\n      name: \"clike\",\n      keywords: parserConfig.version == XXX ? words(\"set for one version\") : word(\"other version\"),\n      atoms: words(\"true false null\"),\n      hooks: {...}\n    });\n  }\n  CodeMirror.defineMIME(\"text/x-csharp\", \"csharp\");\n```\n\nBut note that this only makes sense when you need to implement actual C#-specific configuration parameters.\n All right. Closing this then, feel free to make changes like I described to c-like modes when it becomes necessary.\n  Since 3f8f0ddaf160c4c3db16c02ea227164b8ff158f3 (which will be in the release I'm about to make), you can pass a fourth argument to addWidget to exercise some control over positioning. Passing `\"fit\"` should do pretty much what you described here. Please test!\n Take a look at 1ba143f4414696988e74ce35b5c0e16559b8190e . I've renamed \"fit\" to \"near\", since that covers the current functionality better, and, hopefully, fixed the issues you saw.\n  Thanks! Merged.\n  This was a problem with the highlighter concluding it was 'done' when it found an empty line, because the style of the empty line didn't change. Fixed in 33bfc07f06296da99697ada3a093b5e0138fca6f\n  This won't happen. Tabs are tabs, and if you want to convert them to spaces it is trivial to use some external code to do that.\n Ah, I see what you mean now. This is not practical, unfortunately, until browsers allow reliable control over tab-size through CSS styling. To make cursor movement consistent, the tab size in the display has to match the tab size in the hidden textarea.\n  I'm not even going to look at this in this form. You reformatted stuff all over the place for no reason. Also, a single commit would work a lot better. Git isn't that hard to figure out.\n I guess your IDE did something then. See e190ed562a749c59fc9c935d73c636bdd9d42a93 .\n\nAlso, I think I'd rather implement something that doesn't use eval to inject code in the CodeMirror scope, so that the distinction between public API and private API doesn't start blurring. I can add some things to the public API if this is necessary for plug-in writers.\n  This happens when the editor is taken out of the DOM or given a display: none. Patch 830cc331712d9789333072765611c109d374669d should fix thsi.\n  I've implemented a version where it only suppresses the cursor when readOnly is \"nocursor\" in ee6b56d9b0a160c452cb19f06ca5979a4fb232c5\n  Thanks for the patch. Do you have a use case to go with it?\n No, not a unit test -- an example of a situation where you needed this.\n Merged, with a revision that removes your comment ('git blame' can track down line authors) and updates the docs.\n  Thanks for the code. However, it looks somewhat more invasive and inefficient than necessary. I've pushed an alternative at 78ba45078ea061959dcf3236e6d5753bbfce7f2f. Please see if that works for you.\n  Which mode? Which tabMode? What happens? What did you expect to happen?\n Actually, it sounds like you want tabMode: \"indent\".\n\n@ankit: CodeMirror 1 worked that way, and there was an endless stream of bug reports that 'tab doesn't work'. So I set the default to something that is easy to understand, and allow people to set it to something different if they want to.\n  Hi Alexey,\n\nFirst, I appreciate the pull request. But I'm trying to keep this editor as minimal and lightweight as possible, and since all these, except the word-wrapper, can be trivially done on top of the existing API, I think they have no place in the core editor. The word-wrapping is certainly useful -- if you could implement it as a separate file, I'd gladly put that in, for example lib/wordwrap.js. For example, you could assign CodeMirror.wordWrap to be a function taking an instance as the first argument (there is no 'plugin' system yet where you can add methods), and the range to wrap as the next arguments.\n  Hi Ebrahim,\n\nI'd like to work with you to support this better, but I currently don't have the time to really debug and fix it myself. I suggest you look at the charX and charFromX functions, if you didn't already, and figure out how to make them work for reversed text. If you have any specific questions, feel free to ask, either in this bug or by direct mail.\n\nBest,\nMarijn\n Touching pageX is probably the wrong way to go. You don't want to invert the whole coordinate system, you just want to determine the X coordinates of characters in the editor differently. Hence, look at charX and charFromX instead.\n  Question: Wouldn't a unique class (or optionally multiple classes if you also need a non-unique one for styling) do just as well? As I understand it, you'll register a handler that will look at the id of the event target, and do something based on that. Could also look at the class, no?\n Okay, I'm closing this then. Sorry to be so picky, but it's important to try and keep the lib as small and simple as possible.\n  I don't have my Mac handy right now, and this isn't happening on Safari 5.0.5 Windows. I've marked this on my to-do list and will try to look into it next month, when I get home.\n  Thanks. Fixed now.\n  Thanks, merged.\n  If you can get this script to me in a way that doesn't involve me clicking around chinese-language sites that cause my browser to pop up security warnings, I'll gladly take a look at it.\n The chinese page was linked from your other issue, I confused them (they sound like they describe the same problem). The script you linked contains a single-line minified jQuery. CodeMirror is known to be slow on huge lines, see https://github.com/marijnh/CodeMirror2/issues/37\n  See your other bug. Put the script you're talking about on a pastebin somewhere, don't make me go through dodgy websites.\n Again, see your other bug. 125+k line is causing the slowness.\n The difference is caused by the first script having the long line 'off screen' when opened, whereas this one has its long line at the top, so it will be added to the dom straight away (and the DOM is the bottleneck -- parsing is clever enough to just give up when a line is too huge).\n  Thanks!\n  Thanks for noticing those!\n I have no idea. The github automerge feature seems to be a bit screwy. I've merged it again, the old-fashioned way.\n  I've considered doing something with a textarea like that, but it seems like a real can of worms wrt browser quircks. What exactly was not working in iOS before? I played around on my Android and, barring the scroll-bar absence, it seems to work pretty well.\n", "text_all_count": 8580, "text_word_token": ["Thanks", "for", "spotting", "that", "NUMBER", "Merged", "NUMBER", "Indeed", "NUMBER", "The", "nbsp", "be", "supposed", "to", "be", "there", "to", "ensure", "the", "DIV", "be", "given", "a", "height", "but", "the", "fact", "that", "the", "cursor", "was", "drawn", "after", "it", "was", "a", "bug", "in", "the", "measuring", "code", "NUMBER", "Please", "test", "whether", "attached", "patch", "fix", "it", "for", "you", "NUMBER", "mightyguava", "Please", "take", "a", "look", "at", "the", "attached", "patch", "and", "tell", "me", "if", "you", "can", "think", "of", "any", "problem", "it", "might", "cause", "for", "the", "vim", "mode", "NUMBER", "It", "change", "nofallthrough", "to", "not", "kill", "keypress", "events", "anymore", "and", "add", "a", "new", "keymap", "property", "disableInput", "that", "when", "the", "top", "level", "keymap", "has", "it", "will", "prevent", "regular", "typing", "from", "add", "characters", "to", "the", "editor", "NUMBER", "I", "ve", "add", "that", "property", "to", "the", "vim", "keymap", "and", "it", "seems", "to", "work", "and", "has", "the", "additional", "pleasant", "side", "effect", "of", "no", "longer", "blocking", "ctrl", "r", "when", "within", "the", "keymap", "NUMBER", "You", "re", "right", "it", "seems", "the", "top", "padding", "wasn", "t", "be", "include", "in", "the", "coordinates", "that", "charCoords", "report", "NUMBER", "There", "was", "also", "a", "rather", "huge", "bug", "in", "coordsChar", "when", "use", "local", "coordinates", "which", "not", "many", "people", "use", "so", "far", "I", "guess", "NUMBER", "Does", "this", "work", "for", "you", "Indeed", "some", "code", "was", "explicitly", "compensating", "for", "the", "absence", "of", "the", "top", "padding", "from", "the", "local", "coordinates", "NUMBER", "I", "fix", "that", "in", "the", "attached", "patch", "NUMBER", "There", "might", "be", "more", "fallout", "from", "this", "if", "we", "re", "unlucky", "NUMBER", "Still", "the", "consistent", "model", "be", "preferable", "to", "what", "we", "use", "to", "have", "NUMBER", "Please", "see", "my", "attached", "patch", "instead", "I", "guess", "a", "general", "way", "to", "cheaply", "find", "the", "line", "at", "a", "given", "y", "offset", "would", "be", "more", "generally", "useful", "and", "less", "random", "expose", "internals", "y", "NUMBER", "No", "it", "returns", "the", "first", "line", "i", "NUMBER", "e", "NUMBER", "the", "line", "at", "offset", "NUMBER", "local", "coordinates", "be", "not", "scroll", "sensitive", "NUMBER", "editor", "NUMBER", "lineAtHeight", "editor", "NUMBER", "getScrollInfo", "NUMBER", "top", "local", "will", "probably", "work", "better", "NUMBER", "That", "s", "emacs", "lisp", "code", "NUMBER", "You", "appear", "to", "be", "either", "very", "confused", "about", "what", "CodeMirror", "be", "or", "trying", "to", "make", "a", "bad", "joke", "NUMBER", "No", "no", "no", "NUMBER", "CodeMirror", "modes", "aren", "t", "just", "random", "file", "that", "happen", "to", "work", "with", "other", "editors", "NUMBER", "They", "be", "CodeMirror", "specific", "JavaScript", "program", "that", "parse", "a", "given", "language", "NUMBER", "Look", "over", "a", "few", "of", "them", "NUMBER", "They", "don", "t", "look", "XML", "ly", "NUMBER", "I", "could", "only", "reproduce", "the", "case", "where", "the", "text", "vanished", "and", "I", "find", "the", "bug", "that", "cause", "that", "see", "attached", "patch", "NUMBER", "Could", "you", "see", "if", "it", "also", "takes", "care", "of", "the", "problem", "where", "the", "widgets", "get", "duplicate", "And", "if", "not", "could", "you", "give", "me", "a", "short", "HTML", "page", "that", "demonstrates", "that", "problem", "Does", "the", "attached", "patch", "help", "You", "can", "turn", "the", "explode", "behavior", "off", "entirely", "by", "setting", "a", "autoCloseBrackets", "explode", "false", "option", "optionally", "with", "a", "pairs", "NUMBER", "property", "in", "the", "object", "to", "specify", "custom", "completion", "pairs", "NUMBER", "See", "attached", "patch", "NUMBER", "Please", "test", "also", "on", "your", "side", "Great", "When", "you", "go", "live", "don", "t", "forget", "to", "send", "me", "a", "link", "for", "the", "real", "world", "uses", "page", "NUMBER", "Great", "NUMBER", "Merged", "NUMBER", "Thanks", "NUMBER", "Merged", "as", "NUMBER", "e", "NUMBER", "b", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "f", "NUMBER", "fa", "NUMBER", "f", "NUMBER", "a", "NUMBER", "a", "NUMBER", "f", "Your", "all", "spaces", "overlay", "be", "creating", "a", "single", "token", "per", "character", "so", "the", "behavior", "you", "re", "seeing", "be", "what", "be", "expected", "tokens", "aren", "t", "joined", "when", "you", "disable", "flattenSpans", "NUMBER", "The", "issue", "be", "that", "the", "first", "two", "spaces", "overlay", "be", "be", "applied", "to", "twice", "per", "line", "and", "it", "should", "only", "be", "applied", "once", "per", "line", "NUMBER", "If", "you", "look", "at", "the", "spans", "you", "will", "see", "the", "cm", "first", "two", "spaces", "style", "be", "applied", "to", "the", "first", "two", "spans", "of", "each", "line", "and", "this", "be", "not", "the", "expected", "behavior", "NUMBER", "Only", "the", "first", "span", "of", "each", "line", "should", "have", "the", "cm", "first", "two", "spaces", "style", "applied", "NUMBER", "The", "list", "of", "tokens", "will", "be", "made", "single", "dimensional", "since", "CodeMirror", "treats", "a", "line", "as", "a", "sequence", "not", "a", "tree", "of", "styled", "tokens", "NUMBER", "When", "one", "overlay", "or", "mode", "be", "creating", "small", "tokens", "this", "will", "cause", "tokens", "produced", "by", "other", "overlays", "or", "modes", "to", "also", "be", "split", "on", "the", "start", "and", "end", "of", "those", "small", "tokens", "NUMBER", "You", "_can_", "override", "the", "per", "editor", "flattenSpans", "option", "per", "mode", "by", "setting", "the", "flattenSpans", "property", "of", "the", "mode", "object", "NUMBER", "Maybe", "that", "helps", "in", "your", "case", "Did", "you", "see", "my", "remark", "about", "setting", "flattenSpans", "per", "mode", "I", "d", "imagine", "that", "should", "be", "a", "good", "workaround", "NUMBER", "Indeed", "I", "broke", "the", "resize", "listener", "two", "days", "ago", "NUMBER", "Should", "be", "fix", "in", "NUMBER", "fdc", "NUMBER", "e", "NUMBER", "cc", "NUMBER", "de", "NUMBER", "b", "NUMBER", "eef", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "f", "NUMBER", "This", "be", "problematic", "because", "if", "the", "hidden", "scrollbar", "on", "the", "actual", "scrolling", "DIV", "be", "there", "but", "our", "fake", "one", "isn", "t", "there", "ll", "be", "a", "margin", "at", "the", "bottom", "or", "right", "of", "the", "editor", "created", "by", "the", "size", "of", "the", "hidden", "scrollbar", "and", "not", "filled", "by", "the", "fake", "one", "NUMBER", "Do", "you", "have", "a", "way", "to", "reliably", "reproduce", "the", "problem", "Actually", "your", "original", "patch", "_was_", "safe", "since", "when", "overflow", "be", "auto", "the", "appearance", "of", "the", "scrollbar", "itself", "will", "on", "platforms", "where", "scrollbars", "take", "up", "space", "make", "sure", "the", "size", "difference", "between", "offsetWidth", "and", "scrollWidth", "will", "jump", "over", "one", "pixel", "when", "the", "scrollbar", "appears", "NUMBER", "On", "platforms", "where", "the", "scrollbar", "do", "not", "take", "up", "space", "the", "problem", "I", "was", "worried", "about", "won", "t", "occur", "so", "that", "s", "also", "fine", "NUMBER", "Merged", "NUMBER", "Thanks", "for", "you", "patience", "and", "for", "the", "exta", "info", "NUMBER", "This", "be", "by", "design", "NUMBER", "But", "if", "you", "bind", "Home", "End", "to", "goLineLeft", "goLineRight", "instead", "of", "the", "default", "goLineStart", "goLineEnd", "you", "get", "the", "behavior", "you", "want", "NUMBER", "Looks", "great", "Merged", "as", "NUMBER", "c", "NUMBER", "d", "NUMBER", "fe", "NUMBER", "a", "NUMBER", "cf", "NUMBER", "e", "NUMBER", "f", "NUMBER", "e", "NUMBER", "e", "NUMBER", "Looks", "good", "NUMBER", "I", "ve", "push", "a", "slightly", "adjusted", "patch", "that", "leaves", "the", "addon", "file", "in", "place", "so", "that", "users", "don", "t", "have", "to", "update", "their", "paths", "on", "the", "next", "release", "NUMBER", "See", "NUMBER", "d", "NUMBER", "bfb", "NUMBER", "e", "NUMBER", "d", "NUMBER", "b", "NUMBER", "Oh", "joy", "another", "file", "that", "I", "have", "to", "bump", "version", "numbers", "in", "NUMBER", "Is", "the", "version", "field", "obligatory", "or", "can", "we", "get", "the", "tool", "to", "just", "look", "at", "package", "NUMBER", "json", "Great", "NUMBER", "Merged", "NUMBER", "Version", "field", "remove", "in", "attached", "patch", "NUMBER", "Okay", "revert", "NUMBER", "This", "be", "a", "good", "idea", "NUMBER", "But", "how", "about", "moving", "the", "signal", "call", "to", "makeChangeFromHistory", "and", "feeding", "it", "a", "regular", "change", "object", "similar", "to", "the", "one", "that", "beforeChange", "gets", "Yes", "though", "sorry", "to", "waste", "your", "time", "I", "decided", "that", "actually", "that", "s", "not", "what", "I", "want", "either", "NUMBER", "I", "ve", "push", "a", "different", "change", "see", "attached", "patch", "where", "beforeChange", "be", "also", "fired", "on", "undo", "events", "but", "without", "the", "update", "method", "NUMBER", "Since", "that", "was", "the", "only", "part", "that", "was", "problematic", "to", "support", "NUMBER", "Does", "that", "work", "for", "you", "This", "be", "by", "design", "NUMBER", "See", "LINK", "u", "NUMBER", "RF", "NUMBER", "lzLYJ", "I", "see", "the", "point", "but", "merge", "this", "would", "set", "a", "precedent", "for", "all", "kinds", "of", "other", "common", "shortcuts", "and", "clever", "commands", "to", "be", "include", "in", "core", "which", "would", "end", "up", "bloating", "it", "NUMBER", "So", "I", "m", "going", "to", "say", "no", "NUMBER", "It", "s", "easy", "enough", "to", "drop", "these", "into", "a", "site", "when", "you", "need", "them", "NUMBER", "Maybe", "an", "extra", "bindings", "addon", "would", "make", "a", "good", "dumping", "ground", "for", "such", "things", "but", "since", "it", "d", "have", "a", "fuzzy", "scope", "I", "m", "not", "too", "keen", "on", "maintaining", "it", "NUMBER", "If", "you", "want", "to", "set", "up", "a", "repository", "and", "link", "it", "from", "LINK", "addons", "that", "d", "work", "best", "NUMBER", "I", "guess", "the", "reason", "you", "can", "t", "easily", "do", "this", "on", "top", "of", "the", "public", "interface", "be", "the", "bidi", "part", "Wouldn", "t", "it", "make", "more", "sense", "to", "expose", "some", "of", "that", "so", "that", "a", "wider", "variety", "of", "bidi", "aware", "functionality", "can", "be", "write", "external", "to", "the", "core", "editor", "Problem", "be", "of", "course", "that", "the", "bidi", "code", "be", "rather", "subtle", "and", "not", "very", "well", "encapsulated", "NUMBER", "posEq", "easy", "to", "replicate", "Indeed", "NUMBER", "Pos", "function", "easy", "to", "replicate", "since", "I", "can", "still", "call", "new", "CodeMirror", "NUMBER", "Pos", "The", "two", "be", "the", "same", "function", "NUMBER", "lineStart", "has", "dependencies", "on", "other", "function", "in", "the", "bidi", "code", "so", "this", "be", "harder", "to", "replicate", "getOrder", "also", "tied", "into", "the", "bidi", "code", "I", "m", "a", "bit", "torn", "on", "starting", "to", "export", "these", "NUMBER", "It", "d", "lock", "me", "into", "keep", "them", "around", "and", "blow", "up", "the", "api", "quite", "a", "bit", "there", "s", "a", "whole", "string", "of", "function", "on", "this", "level", "NUMBER", "What", "do", "you", "need", "getOrder", "for", "Any", "chance", "you", "could", "epxress", "it", "use", "the", "moveH", "function", "instead", "CodeMirror", "NUMBER", "commands", "NUMBER", "killLine", "cm", "It", "s", "a", "command", "not", "a", "method", "NUMBER", "Those", "be", "not", "documented", "but", "part", "of", "the", "interface", "and", "can", "be", "considered", "stable", "NUMBER", "And", "merge", "NUMBER", "d", "NUMBER", "b", "NUMBER", "d", "NUMBER", "c", "NUMBER", "eeeccbd", "NUMBER", "ff", "NUMBER", "a", "NUMBER", "a", "NUMBER", "c", "NUMBER", "Merged", "I", "can", "t", "reproduce", "this", "maybe", "I", "just", "misunderstand", "the", "issue", "NUMBER", "If", "I", "copy", "paste", "this", "into", "the", "scss", "demo", "and", "auto", "reindent", "it", "with", "shift", "tab", "the", "top", "and", "bottom", "lines", "still", "get", "two", "spaces", "which", "seems", "correct", "NUMBER", "Which", "browser", "It", "do", "NUMBER", "Could", "you", "try", "with", "the", "attached", "patch", "Great", "I", "think", "though", "I", "m", "not", "entirely", "sure", "that", "you", "misunderstand", "the", "mechanism", "NUMBER", "If", "Shift", "be", "explicitly", "part", "of", "the", "binding", "automatic", "shift", "selection", "handle", "be", "turned", "off", "intentionally", "NUMBER", "It", "be", "only", "active", "when", "a", "regular", "binding", "that", "binds", "a", "go", "command", "be", "invoked", "with", "the", "shift", "key", "add", "to", "the", "regular", "combination", "NUMBER", "I", "guess", "you", "want", "to", "bind", "Up", "to", "goMoveUpAcrossRegions", "and", "do", "your", "motion", "in", "that", "command", "NUMBER", "That", "ll", "make", "it", "work", "normally", "without", "shift", "and", "selection", "growingly", "with", "shift", "NUMBER", "Does", "that", "make", "sense", "Binding", "a", "go", "command", "to", "a", "key", "enable", "Shift", "selection", "when", "Shift", "be", "pressed", "NUMBER", "Binding", "a", "go", "command", "to", "a", "key", "containing", "Shift", "do", "not", "enable", "Shift", "selection", "when", "Shift", "be", "pressed", "NUMBER", "Doesn", "t", "that", "seem", "inconsistent", "No", "that", "s", "the", "point", "NUMBER", "If", "you", "write", "a", "command", "specifically", "for", "shift", "you", "can", "use", "setExtending", "explicitly", "to", "get", "selection", "extending", "behavior", "NUMBER", "The", "hack", "with", "go", "which", "I", "ll", "agree", "be", "crummy", "be", "there", "solely", "to", "be", "able", "to", "use", "a", "single", "binding", "for", "both", "the", "shift", "less", "and", "the", "with", "shift", "version", "of", "a", "motion", "command", "NUMBER", "It", "s", "an", "abbreviation", "mechanism", "pretty", "much", "NUMBER", "It", "s", "not", "all", "crummy", "NUMBER", "It", "s", "a", "hack", "that", "works", "well", "within", "the", "constraints", "of", "the", "rest", "of", "the", "system", "NUMBER", "Do", "you", "have", "a", "link", "to", "or", "copy", "paste", "of", "the", "full", "list", "of", "svg", "properties", "that", "we", "should", "recognize", "Added", "NUMBER", "Looks", "good", "NUMBER", "Test", "pass", "NUMBER", "Merged", "as", "NUMBER", "fe", "NUMBER", "d", "NUMBER", "b", "NUMBER", "a", "NUMBER", "ffd", "All", "clean", "NUMBER", "Merged", "NUMBER", "Thanks", "both", "of", "you", "for", "your", "continued", "meticulous", "efforts", "Merged", "NUMBER", "Stray", "character", "remove", "in", "attached", "patch", "NUMBER", "I", "guess", "this", "be", "another", "good", "reason", "besides", "NUMBER", "to", "figure", "out", "a", "reliable", "way", "to", "detect", "composition", "starting", "and", "ending", "on", "all", "browsers", "that", "fire", "enough", "events", "to", "allow", "that", "NUMBER", "If", "someone", "else", "tackles", "that", "part", "well", "test", "cross", "platform", "cross", "browser", "not", "too", "fragile", "detection", "of", "these", "events", "I", "ll", "happily", "take", "care", "of", "integrating", "the", "CodeMirror", "functionality", "make", "sure", "these", "form", "a", "single", "undo", "event", "showing", "the", "underline", "NUMBER", "Thanks", "Merged", "NUMBER", "I", "rewrote", "part", "of", "it", "not", "because", "I", "be", "sure", "it", "was", "incorrect", "but", "because", "the", "extra", "complexity", "from", "handle", "anchor", "head", "rather", "than", "start", "end", "made", "it", "hard", "for", "me", "to", "see", "whether", "it", "was", "correct", "NUMBER", "What", "worried", "me", "was", "that", "new", "spans", "appeared", "to", "be", "always", "add", "at", "the", "back", "of", "the", "array", "yet", "the", "start", "of", "the", "covered", "range", "was", "find", "by", "calling", "find", "on", "the", "first", "element", "NUMBER", "Please", "try", "with", "the", "attached", "patch", "NUMBER", "Thanks", "for", "continuing", "to", "improve", "this", "Merged", "NUMBER", "One", "not", "on", "git", "convention", "put", "a", "blank", "line", "between", "the", "patch", "title", "and", "the", "rest", "of", "the", "description", "NUMBER", "Otherwise", "tool", "will", "treat", "the", "whole", "description", "as", "title", "NUMBER", "Thank", "you", "NUMBER", "Merged", "in", "squashed", "form", "as", "NUMBER", "bcd", "NUMBER", "e", "NUMBER", "NUMBER", "Do", "you", "really", "need", "both", "modes", "dontAlignCalls", "and", "dontAlignCalls", "nonAlignedCalls", "I", "find", "the", "names", "sound", "like", "both", "do", "the", "same", "thing", "and", "in", "fact", "I", "m", "not", "entirely", "close", "on", "what", "the", "difference", "be", "NUMBER", "So", "conceptually", "what", "you", "wanted", "was", "to", "_not_", "pass", "dontAlignCalls", "since", "you", "do", "want", "to", "align", "calls", "NUMBER", "Rather", "than", "add", "another", "confusing", "option", "the", "attached", "patch", "fix", "statementIndentUnit", "when", "dontAlignCalls", "be", "false", "NUMBER", "Subtract", "the", "top", "and", "bottom", "properties", "of", "the", "object", "returned", "by", "charCoords", "to", "get", "a", "more", "accurate", "line", "height", "the", "height", "of", "_that_", "line", "as", "oppose", "to", "the", "height", "of", "an", "unstyled", "line", "NUMBER", "Otherwise", "this", "looks", "good", "NUMBER", "Testing", "DOM", "relate", "stuff", "across", "a", "bunch", "of", "browsers", "manually", "be", "a", "painful", "experience", "Believe", "me", "I", "know", "The", "code", "looks", "good", "now", "but", "the", "test", "also", "fail", "on", "my", "Linux", "Chrome", "NUMBER", "In", "general", "you", "can", "t", "hard", "code", "pixel", "values", "in", "the", "test", "since", "fonts", "and", "such", "differ", "between", "platforms", "NUMBER", "Either", "adjust", "the", "test", "to", "use", "a", "less", "fragile", "way", "to", "verify", "the", "behavior", "maybe", "duplicate", "some", "computations", "in", "them", "or", "remove", "them", "altogether", "NUMBER", "Here", "s", "what", "I", "get", "vim_zz", "NUMBER", "NUMBER", "vim_zb", "NUMBER", "NUMBER", "vim_zt", "NUMBER", "NUMBER", "vim_z", "NUMBER", "NUMBER", "NUMBER", "vim_z", "NUMBER", "NUMBER", "vim_zEnter", "NUMBER", "NUMBER", "Almost", "NUMBER", "I", "still", "get", "this", "failure", "vim_zt", "zEnter", "NUMBER", "NUMBER", "Well", "I", "m", "confused", "about", "the", "order", "in", "which", "this", "and", "NUMBER", "be", "supposed", "to", "be", "merge", "NUMBER", "I", "get", "failures", "when", "merge", "only", "one", "of", "them", "so", "they", "seem", "to", "depend", "on", "each", "other", "NUMBER", "But", "I", "get", "conflict", "when", "I", "try", "to", "merge", "both", "NUMBER", "Please", "condense", "both", "down", "to", "a", "single", "commit", "put", "them", "on", "the", "same", "branch", "make", "sure", "the", "test", "pass", "and", "overwrite", "one", "of", "the", "pull", "request", "with", "the", "result", "closing", "the", "other", "NUMBER", "Merged", "NUMBER", "Looks", "like", "some", "kind", "of", "weakness", "in", "Webkit", "s", "algorithm", "for", "determining", "what", "needs", "to", "be", "repainted", "NUMBER", "It", "appears", "that", "add", "NUMBER", "CodeMirror", "gutters", "clear", "both", "works", "around", "the", "problem", "NUMBER", "Could", "you", "test", "whether", "it", "also", "works", "for", "you", "If", "so", "I", "ll", "add", "it", "to", "the", "default", "stylesheet", "NUMBER", "Indeed", "that", "hack", "only", "seems", "to", "work", "for", "fix", "height", "editors", "NUMBER", "The", "underlying", "problem", "was", "that", "the", "gutter", "had", "height", "NUMBER", "which", "apparently", "cause", "it", "to", "be", "repainted", "whenever", "the", "editor", "s", "insides", "briefly", "change", "height", "during", "a", "resize", "remove", "old", "line", "add", "new", "line", "NUMBER", "Attached", "patch", "should", "fix", "this", "NUMBER", "It", "s", "slightly", "scary", "since", "keep", "sizing", "consistent", "by", "explicitly", "setting", "heights", "be", "always", "more", "fragile", "than", "letting", "the", "CSS", "engine", "handle", "it", "but", "it", "do", "solve", "the", "problem", "NUMBER", "See", "NUMBER", "for", "an", "abandoned", "start", "of", "a", "solution", "for", "this", "NUMBER", "The", "problem", "be", "that", "browser", "don", "t", "fire", "coherent", "events", "when", "IME", "happens", "and", "no", "one", "has", "put", "in", "the", "work", "to", "figure", "out", "a", "way", "to", "convert", "the", "incompatible", "event", "soup", "into", "something", "workable", "NUMBER", "Fixed", "in", "attached", "patch", "NUMBER", "JavaScript", "has", "no", "sane", "way", "to", "detect", "word", "characters", "and", "I", "don", "t", "want", "to", "add", "a", "half", "a", "megabyte", "regexp", "to", "match", "all", "possible", "Unicode", "word", "chars", "so", "I", "m", "add", "these", "per", "language", "as", "they", "come", "up", "in", "bug", "report", "NUMBER", "Thanks", "again", "NUMBER", "Merged", "as", "b", "NUMBER", "aef", "NUMBER", "The", "script", "tried", "to", "pass", "extra", "argument", "to", "uglifyjs", "but", "it", "appears", "that", "uglifyjs", "be", "very", "picky", "about", "the", "order", "of", "its", "argument", "NUMBER", "Should", "be", "fix", "now", "and", "I", "also", "add", "a", "default", "set", "of", "argument", "NUMBER", "Thank", "you", "NUMBER", "Merged", "NUMBER", "Looks", "good", "NUMBER", "Merged", "NUMBER", "And", "do", "leave", "a", "comment", "when", "you", "add", "a", "test", "patch", "since", "github", "doesn", "t", "notify", "me", "when", "a", "patch", "be", "add", "NUMBER", "Thanks", "very", "nice", "Merged", "as", "NUMBER", "bbb", "NUMBER", "a", "NUMBER", "aa", "NUMBER", "d", "NUMBER", "e", "NUMBER", "ff", "NUMBER", "c", "NUMBER", "ecd", "NUMBER", "abf", "NUMBER", "c", "NUMBER", "b", "NUMBER", "Great", "thanks", "for", "point", "that", "out", "NUMBER", "Merged", "NUMBER", "Yes", "you", "should", "call", "NUMBER", "refresh", "on", "your", "CodeMirror", "instance", "after", "unhiding", "it", "NUMBER", "LINK", "refresh", "Thanks", "Merged", "NUMBER", "Thanks", "for", "catching", "that", "NUMBER", "Merged", "NUMBER", "Could", "you", "give", "me", "a", "minimal", "html", "page", "that", "helps", "reproduce", "the", "problem", "Or", "alternatively", "can", "you", "see", "whether", "add", "a", "third", "argument", "true", "to", "the", "call", "to", "option", "that", "defines", "the", "new", "option", "helps", "And", "fail", "that", "whether", "remove", "the", "line", "that", "that", "patch", "add", "to", "guttersChanged", "makes", "a", "difference", "Thanks", "for", "the", "reproduction", "code", "NUMBER", "See", "attached", "patch", "for", "a", "fix", "NUMBER", "That", "s", "pretty", "invasive", "and", "crummy", "on", "the", "part", "of", "Bootstrap", "but", "in", "this", "case", "it", "s", "easy", "to", "work", "around", "NUMBER", "See", "attached", "patch", "NUMBER", "Thanks", "Merged", "as", "a", "NUMBER", "da", "NUMBER", "e", "NUMBER", "d", "NUMBER", "f", "NUMBER", "a", "NUMBER", "b", "NUMBER", "ccf", "NUMBER", "ff", "NUMBER", "bfd", "NUMBER", "c", "NUMBER", "That", "toggleOverwrite", "wasn", "t", "document", "was", "an", "oversight", "NUMBER", "Corrected", "in", "NUMBER", "aae", "NUMBER", "a", "NUMBER", "cdbe", "NUMBER", "e", "NUMBER", "ec", "NUMBER", "c", "NUMBER", "ccdf", "NUMBER", "But", "yellow", "and", "white", "should", "be", "suppressed", "from", "var", "valueKeywords", "keySet", "NUMBER", "What", "do", "you", "mean", "by", "that", "Thanks", "NUMBER", "Merged", "NUMBER", "Indeed", "if", "we", "re", "going", "to", "pass", "three", "field", "from", "cm", "to", "updateScrollbars", "we", "might", "as", "well", "pass", "the", "whole", "editor", "NUMBER", "I", "also", "prefer", "the", "look", "of", "the", "editor", "without", "this", "so", "I", "made", "it", "an", "option", "that", "defaults", "to", "off", "NUMBER", "See", "attached", "patch", "NUMBER", "Set", "coverGutterNextToScrollbar", "to", "true", "to", "turn", "it", "back", "on", "NUMBER", "Makes", "sense", "NUMBER", "Though", "your", "commit", "calls", "it", "CodeMirror", "line", "which", "seems", "confusing", "NUMBER", "I", "ve", "use", "the", "class", "name", "in", "your", "pull", "request", "message", "CodeMirror", "code", "instead", "NUMBER", "See", "attached", "patch", "NUMBER", "Eww", "NUMBER", "But", "yeah", "copy", "paste", "should", "work", "NUMBER", "Merged", "and", "then", "cleaned", "up", "a", "little", "in", "patch", "NUMBER", "ec", "NUMBER", "bb", "NUMBER", "c", "NUMBER", "a", "NUMBER", "d", "NUMBER", "d", "NUMBER", "acb", "NUMBER", "ce", "NUMBER", "a", "NUMBER", "NUMBER", "I", "assume", "the", "SPAN", "element", "served", "no", "purpose", "NUMBER", "If", "it", "did", "please", "point", "it", "out", "to", "me", "NUMBER", "This", "won", "t", "work", "when", "the", "editor", "be", "inside", "a", "relative", "or", "absolutely", "positioned", "element", "NUMBER", "Messing", "with", "the", "style", "of", "the", "top", "level", "element", "from", "an", "option", "also", "seems", "too", "dangerous", "NUMBER", "So", "again", "I", "d", "rather", "not", "have", "an", "addon", "for", "something", "than", "an", "addon", "that", "will", "cause", "problem", "and", "generate", "support", "request", "NUMBER", "The", "regexp", "for", "numbers", "was", "too", "broad", "NUMBER", "Should", "be", "fix", "now", "NUMBER", "Unfortunately", "the", "one", "piece", "of", "Apple", "hardware", "I", "own", "be", "a", "NUMBER", "era", "macbook", "which", "do", "not", "yet", "have", "multitouch", "support", "so", "I", "can", "t", "test", "reproduce", "this", "NUMBER", "It", "s", "quite", "odd", "that", "the", "glitch", "happens", "_after_", "the", "selection", "be", "finished", "NUMBER", "If", "this", "was", "some", "mouse", "event", "confusion", "I", "d", "expect", "it", "to", "glitch", "right", "away", "NUMBER", "Though", "maybe", "CodeMirror", "be", "fail", "to", "detect", "that", "the", "select", "drag", "ended", "NUMBER", "You", "could", "look", "at", "the", "onMouseDown", "handler", "and", "verify", "that", "the", "internal", "do", "function", "be", "properly", "call", "when", "the", "mouse", "gesture", "ends", "NUMBER", "Just", "to", "be", "sure", "the", "selection", "you", "get", "do", "look", "the", "same", "be", "normal", "CodeMirror", "selections", "no", "It", "might", "also", "be", "a", "DOM", "selection", "if", "the", "gesture", "somehow", "prevents", "the", "usual", "mouse", "events", "from", "firing", "NUMBER", "Is", "there", "a", "clean", "way", "to", "detect", "this", "case", "If", "so", "yes", "a", "workaround", "that", "cancels", "the", "bogus", "re", "selection", "sounds", "reasonable", "NUMBER", "Maybe", "there", "s", "also", "some", "shuffle", "with", "preventDefault", "ing", "the", "right", "events", "that", "helps", "here", "problem", "be", "finding", "out", "about", "it", "NUMBER", "You", "may", "be", "right", "I", "guess", "browsers", "_always_", "fire", "a", "move", "before", "the", "mouseup", "if", "a", "drag", "happened", "NUMBER", "Does", "simply", "remove", "the", "doSelect", "call", "already", "help", "with", "this", "problem", "We", "could", "also", "add", "a", "variable", "that", "ensures", "that", "do", "s", "body", "only", "executes", "once", "NUMBER", "Done", "in", "the", "attached", "patch", "NUMBER", "If", "the", "do", "handler", "doesn", "t", "fire", "immediately", "though", "wouldn", "t", "you", "have", "a", "problem", "with", "the", "editor", "not", "be", "focused", "at", "the", "end", "of", "the", "drag", "and", "further", "mouse", "activity", "still", "messing", "with", "the", "selection", "Can", "you", "elaborate", "a", "set", "of", "steps", "that", "you", "think", "could", "cause", "problem", "Unfortunately", "all", "I", "know", "be", "that", "there", "s", "probably", "a", "reason", "for", "the", "call", "to", "focusInput", "in", "the", "do", "function", "NUMBER", "But", "some", "git", "arheology", "traces", "that", "back", "to", "patch", "NUMBER", "c", "NUMBER", "a", "which", "suggests", "it", "be", "only", "important", "in", "IE", "NUMBER", "Thanks", "Merged", "as", "de", "NUMBER", "c", "NUMBER", "d", "NUMBER", "f", "NUMBER", "e", "NUMBER", "fc", "NUMBER", "a", "NUMBER", "c", "NUMBER", "ab", "NUMBER", "a", "NUMBER", "e", "Fixed", "by", "NUMBER", "d", "NUMBER", "a", "NUMBER", "a", "NUMBER", "e", "NUMBER", "c", "NUMBER", "cb", "NUMBER", "e", "NUMBER", "f", "NUMBER", "b", "NUMBER", "fde", "NUMBER", "dd", "The", "line", "number", "showing", "up", "there", "doesn", "t", "bother", "me", "but", "it", "would", "probably", "be", "quite", "simple", "to", "make", "this", "an", "option", "NUMBER", "Want", "to", "submit", "a", "pull", "request", "This", "has", "be", "implement", "LINK", "option_coverGutterNextToScrollbar", "Fixed", "in", "NUMBER", "Good", "call", "NUMBER", "Merged", "and", "did", "the", "same", "for", "CodeMirror", "NUMBER", "Doc", "NUMBER", "prototype", "in", "NUMBER", "b", "NUMBER", "ce", "NUMBER", "e", "NUMBER", "d", "NUMBER", "ef", "NUMBER", "f", "NUMBER", "e", "NUMBER", "c", "NUMBER", "cc", "NUMBER", "It", "s", "all", "in", "the", "manual", "NUMBER", "You", "can", "bind", "keys", "to", "function", "with", "extraKeys", "LINK", "option_extraKeys", "use", "the", "programming", "API", "to", "check", "whether", "you", "be", "between", "brackets", "and", "if", "so", "do", "your", "thing", "otherwise", "return", "CodeMirror", "NUMBER", "Pass", "to", "let", "the", "next", "hander", "for", "the", "enter", "key", "have", "its", "turn", "NUMBER", "If", "I", "understand", "the", "movie", "correctly", "you", "be", "at", "the", "bottom", "of", "the", "document", "NUMBER", "There", "s", "no", "space", "to", "scroll", "beyond", "that", "NUMBER", "You", "could", "try", "setting", "a", "bigger", "vertical", "padding", "NUMBER", "CodeMirror", "lines", "padding", "bottom", "NUMBER", "em", "or", "so", "NUMBER", "Still", "works", "for", "me", "NUMBER", "Please", "see", "LINK", "NUMBER", "If", "that", "page", "doesn", "t", "work", "for", "you", "please", "be", "more", "explicit", "about", "what", "you", "expect", "to", "happen", "versus", "what", "happens", "NUMBER", "The", "double", "colon", "thing", "was", "still", "broken", "but", "should", "be", "better", "now", "NUMBER", "A", "fix", "for", "the", "Firefox", "bug", "has", "be", "posted", "in", "LINK", "_bug", "NUMBER", "cgi", "id", "NUMBER", "NUMBER", "Will", "take", "a", "while", "before", "it", "s", "review", "landed", "and", "push", "out", "in", "an", "actual", "update", "but", "things", "be", "moving", "in", "the", "right", "direction", "NUMBER", "Is", "still", "still", "broken", "with", "the", "current", "code", "Does", "it", "influence", "indentation", "or", "local", "variable", "recognition", "in", "a", "problematic", "way", "Well", "I", "must", "really", "have", "be", "asleep", "when", "I", "write", "that", "code", "NUMBER", "Found", "another", "two", "stupid", "bug", "NUMBER", "Should", "be", "better", "now", "NUMBER", "A", "set", "of", "test", "for", "the", "JS", "mode", "would", "be", "great", "to", "have", "but", "I", "be", "not", "currently", "motivated", "to", "work", "on", "that", "would", "need", "to", "extend", "the", "test", "runner", "to", "check", "indentation", "NUMBER", "Undone", "again", "in", "b", "NUMBER", "e", "NUMBER", "d", "NUMBER", "c", "NUMBER", "a", "NUMBER", "f", "NUMBER", "f", "NUMBER", "cc", "NUMBER", "b", "NUMBER", "d", "NUMBER", "d", "NUMBER", "ed", "NUMBER", "crashes", "were", "still", "be", "report", "NUMBER", "Still", "happening", "as", "of", "b", "NUMBER", "e", "NUMBER", "d", "NUMBER", "c", "NUMBER", "a", "NUMBER", "f", "NUMBER", "f", "NUMBER", "cc", "NUMBER", "b", "NUMBER", "d", "NUMBER", "d", "NUMBER", "ed", "NUMBER", "since", "our", "hack", "to", "enable", "setDragImage", "wasn", "t", "reliable", "NUMBER", "That", "s", "a", "somewhat", "different", "problem", "and", "much", "easier", "to", "work", "around", "NUMBER", "See", "attached", "patch", "though", "a", "full", "fix", "would", "require", "knowledge", "of", "Unicode", "categories", "which", "JavaScript", "do", "not", "expose", "Closing", "this", "as", "not", "very", "critical", "and", "hard", "to", "work", "around", "NUMBER", "Still", "happy", "to", "hear", "about", "any", "CSS", "tricks", "that", "minimize", "or", "solve", "the", "effect", "NUMBER", "Closing", "this", "NUMBER", "We", "can", "revisit", "when", "if", "a", "serious", "multi", "cursor", "implementation", "happens", "NUMBER", "Apparently", "benkeen", "be", "aware", "of", "the", "problem", "NUMBER", "I", "myself", "be", "not", "going", "to", "work", "on", "this", "NUMBER", "Fixes", "be", "welcome", "but", "I", "m", "trying", "to", "keep", "the", "issue", "list", "focused", "on", "things", "that", "concern", "me", "NUMBER", "The", "current", "approach", "of", "returning", "CodeMirror", "NUMBER", "Pass", "works", "reasonably", "well", "and", "doesn", "t", "add", "too", "much", "complexity", "NUMBER", "Great", "idea", "Also", "additional", "events", "e", "NUMBER", "g", "NUMBER", "contextmenu", "could", "be", "expose", "as", "a", "side", "shot", "NUMBER", "I", "was", "looking", "for", "a", "good", "way", "to", "listen", "to", "context", "menu", "events", "in", "CodeMirror", "for", "integration", "with", "WebKit", "NUMBER", "Its", "current", "editor", "listens", "for", "contextmenu", "events", "and", "forwards", "line", "number", "and", "gutter", "not", "gutter", "info", "so", "that", "the", "WebInspector", "can", "create", "its", "own", "context", "menus", "to", "expose", "features", "NUMBER", "Maybe", "there", "can", "be", "a", "test", "make", "sure", "that", "LINK", "works", "reducing", "to", "the", "smallest", "fail", "file", "group", "when", "there", "be", "a", "problem", "Sweet", "thanks", "for", "that", "NUMBER", "Thanks", "Marijn", "v", "NUMBER", "be", "looking", "great", "NUMBER", "As", "repenaxa", "indicated", "in", "issue", "NUMBER", "the", "default", "blink", "rate", "in", "Windows", "be", "NUMBER", "ms", "NUMBER", "It", "feels", "similar", "on", "Mac", "and", "Ubuntu", "but", "I", "couldn", "t", "find", "any", "evidence", "to", "support", "this", "claim", "NUMBER", "Not", "sure", "if", "very", "useful", "but", "it", "shows", "CodeMirror", "cares", "about", "its", "test", "and", "pass", "them", "NUMBER", "This", "change", "the", "API", "slightly", "to", "allow", "setMarker", "line", "marker", "className", "to", "take", "a", "DOM", "ElementNode", "instead", "of", "a", "text", "as", "marker", "NUMBER", "Note", "It", "be", "still", "possible", "to", "call", "it", "with", "a", "text", "NUMBER", "Sorry", "about", "that", "it", "was", "a", "misunderstanding", "NUMBER", "To", "control", "a", "CodeMirror", "property", "from", "a", "TAG", "element", "you", "can", "simply", "copy", "the", "theme", "demo", "LINK", "NUMBER", "Regarding", "issue", "NUMBER", "I", "remove", "the", "explicit", "null", "pointers", "from", "the", "Line", "object", "constructor", "and", "I", "benchmarked", "this", "change", "loading", "a", "NUMBER", "K", "lines", "file", "into", "a", "single", "CodeMirror", "instance", "NUMBER", "I", "run", "Chrome", "NUMBER", "Linux", "NUMBER", "bits", "and", "took", "heap", "snapshot", "in", "both", "cases", "with", "the", "chrome", "heap", "profiler", "looking", "at", "the", "shallow", "sizes", "of", "the", "three", "biggest", "footprint", "items", "NUMBER", "Before", "NUMBER", "K", "Line", "objects", "in", "memory", "taking", "up", "NUMBER", "MB", "of", "heap", "NUMBER", "NUMBER", "K", "array", "objects", "in", "memory", "taking", "up", "NUMBER", "MB", "of", "heap", "NUMBER", "NUMBER", "K", "string", "objects", "in", "memory", "taking", "up", "NUMBER", "MB", "of", "heap", "NUMBER", "After", "NUMBER", "K", "Line", "objects", "in", "memory", "taking", "up", "NUMBER", "MB", "of", "heap", "NUMBER", "NUMBER", "K", "array", "objects", "in", "memory", "taking", "up", "NUMBER", "MB", "of", "heap", "NUMBER", "NUMBER", "K", "string", "objects", "in", "memory", "taking", "up", "NUMBER", "MB", "of", "heap", "NUMBER", "This", "change", "seems", "to", "cut", "the", "Line", "objects", "memory", "footprint", "by", "NUMBER", "NUMBER", "I", "didn", "t", "precisely", "measure", "loading", "time", "and", "highlight", "scrolling", "performance", "in", "both", "cases", "but", "I", "there", "be", "no", "noticeable", "difference", "NUMBER", "We", "ve", "be", "investigating", "heap", "footprint", "of", "CodeMirror", "with", "Pavel", "Feldman", "and", "this", "be", "what", "we", "find", "out", "Loading", "NUMBER", "K", "lines", "of", "text", "into", "the", "editor", "takes", "NUMBER", "MB", "of", "heap", "NUMBER", "Tested", "on", "Chrome", "NUMBER", "bit", "NUMBER", "MB", "of", "strings", "NUMBER", "MB", "of", "LeafChunk", "objects", "NUMBER", "MB", "of", "Arrays", "NUMBER", "It", "looks", "like", "there", "be", "room", "for", "improvement", "by", "saving", "on", "pointers", "and", "arrays", "NUMBER", "I", "m", "currently", "experimenting", "on", "a", "patch", "to", "address", "this", "NUMBER", "Yes", "eliminating", "the", "styles", "array", "in", "the", "Line", "object", "could", "definitely", "save", "up", "some", "memory", "NUMBER", "It", "also", "turns", "out", "that", "commenting", "out", "lines", "NUMBER", "LINK", "L", "NUMBER", "and", "NUMBER", "LINK", "L", "NUMBER", "in", "the", "Line", "constructor", "doesn", "t", "create", "the", "null", "pointers", "for", "every", "object", "and", "this", "divides", "the", "Line", "object", "footprint", "by", "two", "in", "the", "above", "example", "Chrome", "NUMBER", "bits", "NUMBER", "Currently", "line", "numbers", "scroll", "away", "horizontally", "along", "with", "the", "content", "NUMBER", "Other", "editors", "tend", "to", "keep", "them", "fix", "NUMBER", "If", "you", "have", "an", "idea", "how", "to", "fix", "it", "please", "let", "me", "know", "NUMBER", "Oh", "so", "there", "be", "a", "fixedGutter", "option", "NUMBER", "Problem", "solve", "thanks", "It", "flickers", "a", "bit", "though", "NUMBER", "When", "you", "paste", "\u05e2", "\u05d1", "\u05e8", "\u05d9\u05ea", "into", "the", "editor", "and", "then", "try", "to", "place", "the", "cursor", "inside", "the", "word", "the", "cursor", "seems", "to", "stay", "on", "the", "left", "of", "the", "word", "NUMBER", "Memo", "to", "self", "remember", "to", "check", "previous", "issue", "_before_", "file", "The", "Python", "mode", "lexer", "currently", "attempts", "to", "validate", "the", "use", "of", "a", "or", "NUMBER", "character", "by", "looking", "ahead", "to", "verify", "that", "the", "next", "token", "in", "the", "stream", "be", "a", "valid", "variable", "or", "builtin", "NUMBER", "This", "has", "the", "undesired", "side", "effect", "of", "combining", "the", "or", "NUMBER", "character", "with", "the", "token", "identifier", "that", "follows", "it", "NUMBER", "For", "example", "with", "the", "cursor", "placed", "at", "the", "location", "of", "the", "character", "below", "python", "foo", "NUMBER", "bar", "Running", "the", "following", "in", "a", "JavaScript", "console", "produces", "javascript", "editor", "NUMBER", "getTokenAt", "editor", "NUMBER", "getCursor", "NUMBER", "ring", "NUMBER", "bar", "Similarly", "with", "the", "cursor", "placed", "here", "python", "some_decorator", "We", "see", "javascript", "editor", "NUMBER", "getTokenAt", "editor", "NUMBER", "getCursor", "NUMBER", "ring", "some_decorator", "Ah", "excellent", "the", "consume", "arg", "to", "match", "was", "exactly", "what", "I", "was", "looking", "for", "NUMBER", "This", "do", "solve", "the", "issue", "partially", "as", "it", "correctly", "parses", "the", "NUMBER", "or", "as", "a", "separate", "token", "from", "the", "variable", "that", "follows", "it", "NUMBER", "However", "I", "think", "we", "d", "also", "want", "to", "continue", "applying", "a", "meta", "style", "to", "a", "variable", "that", "follows", "a", "meta", "token", "like", "so", "that", "the", "entire", "decorator", "can", "be", "display", "in", "a", "particular", "visual", "style", "NUMBER", "For", "example", "in", "the", "following", "snippet", "python", "dot", "NUMBER", "separated", "NUMBER", "decorator", "def", "foo", "bar", "pass", "The", "dot", "NUMBER", "separated", "NUMBER", "decorator", "should", "also", "receive", "the", "meta", "visual", "treatment", "while", "tokenizing", "each", "package", "component", "separately", "to", "allow", "for", "correct", "code", "completion", "NUMBER", "I", "ve", "taken", "a", "crack", "at", "a", "solution", "to", "this", "in", "LINK", "Well", "the", "tragic", "thing", "be", "that", "it", "works", "fine", "on", "my", "machine", "now", "NUMBER", "But", "yes", "I", "guess", "two", "report", "be", "enough", "reason", "to", "disable", "the", "setDragImage", "call", "again", "for", "Safari", "NUMBER", "See", "attached", "patch", "NUMBER", "This", "will", "cause", "an", "ugly", "effect", "where", "the", "whole", "editor", "appears", "to", "be", "dragged", "around", "but", "it", "s", "still", "better", "than", "a", "crash", "NUMBER", "Thank", "you", "NUMBER", "Integrated", "NUMBER", "I", "d", "rather", "leave", "this", "to", "the", "user", "NUMBER", "It", "s", "a", "pretty", "easy", "problem", "to", "diagnose", "and", "people", "might", "be", "write", "Markdown", "text", "for", "example", "from", "right", "to", "left", "NUMBER", "The", "brokenness", "seems", "to", "only", "occur", "in", "Webkit", "NUMBER", "Removing", "the", "draggable", "true", "from", "the", "divs", "makes", "webkit", "cycle", "properly", "through", "the", "elements", "but", "it", "gets", "confused", "again", "as", "soon", "as", "it", "causes", "a", "scroll", "event", "to", "happen", "in", "the", "editor", "which", "triggers", "an", "update", "to", "the", "DOM", "to", "make", "sure", "the", "scrolled", "to", "elements", "be", "available", "NUMBER", "This", "seems", "to", "be", "a", "browser", "bug", "more", "than", "a", "CodeMirror", "bug", "NUMBER", "On", "the", "other", "hand", "CodeMirror", "will", "never", "even", "in", "browsers", "with", "better", "search", "implementations", "be", "fully", "searchable", "through", "the", "browser", "because", "it", "doesn", "t", "generate", "DOM", "nodes", "for", "the", "whole", "edit", "document", "so", "the", "browser", "doesn", "t", "know", "about", "all", "the", "text", "that", "s", "available", "NUMBER", "I", "don", "t", "implement", "language", "modes", "unless", "I", "need", "them", "myself", "or", "someone", "pays", "me", "to", "NUMBER", "However", "it", "should", "not", "be", "too", "hard", "for", "someone", "else", "to", "implement", "something", "like", "ERB", "as", "a", "CodeMirror", "mode", "NUMBER", "Thanks", "integrated", "NUMBER", "Next", "time", "try", "to", "rebase", "first", "so", "that", "your", "tree", "be", "a", "continuation", "of", "mine", "and", "then", "force", "push", "to", "update", "your", "github", "repository", "or", "push", "into", "a", "new", "branch", "NUMBER", "This", "will", "Allow", "custom", "keybindings", "Allow", "variable", "width", "tabs", "Make", "it", "possible", "to", "implement", "a", "goal", "column", "and", "make", "goal", "colum", "work", "at", "all", "on", "IE", "NUMBER", "NUMBER", "Remove", "some", "particularly", "bad", "hacks", "from", "the", "code", "Allow", "with", "a", "lot", "more", "work", "sane", "navigation", "in", "wrapped", "lines", "when", "wrapped", "lines", "be", "implement", "It", "will", "also", "make", "CodeMirror", "no", "longer", "automatically", "recognize", "native", "non", "standard", "keybindings", "but", "very", "few", "people", "seem", "to", "be", "relying", "on", "those", "anyway", "NUMBER", "I", "ve", "improved", "the", "error", "message", "a", "bit", "but", "couldn", "t", "find", "a", "workaround", "except", "for", "remove", "the", "nodes", "that", "I", "use", "innerHTML", "on", "from", "the", "document", "and", "then", "putting", "them", "back", "every", "single", "time", "which", "be", "very", "expensive", "NUMBER", "Hi", "Volker", "I", "ve", "modify", "the", "commit", "slightly", "to", "pass", "the", "numbers", "as", "separate", "argument", "instead", "of", "an", "object", "NUMBER", "I", "can", "see", "people", "use", "runMode", "in", "situations", "where", "performance", "be", "relevant", "so", "I", "d", "rather", "not", "allocate", "an", "extra", "object", "for", "every", "token", "especially", "since", "passing", "them", "separately", "be", "hardly", "less", "practical", "NUMBER", "See", "LINK", "Best", "Marijn", "Hi", "Could", "you", "try", "whether", "the", "patch", "I", "just", "add", "NUMBER", "af", "NUMBER", "b", "NUMBER", "d", "NUMBER", "dd", "NUMBER", "b", "NUMBER", "a", "NUMBER", "b", "NUMBER", "d", "NUMBER", "f", "NUMBER", "ccd", "NUMBER", "helps", "on", "Gecko", "Polling", "be", "quite", "expensive", "so", "I", "d", "like", "to", "go", "to", "any", "length", "to", "avoid", "it", "see", "also", "NUMBER", "LINK", "_bug", "NUMBER", "cgi", "id", "NUMBER", "if", "you", "haven", "t", "already", "NUMBER", "For", "Opera", "it", "do", "look", "like", "polling", "be", "our", "only", "option", "NUMBER", "Would", "modifying", "fastPoll", "to", "not", "give", "up", "after", "a", "single", "miss", "but", "try", "a", "few", "times", "at", "least", "on", "Opera", "not", "be", "a", "less", "invasive", "way", "to", "get", "what", "we", "want", "here", "Best", "Marijn", "Update", "It", "seems", "recent", "Opera", "version", "also", "fire", "an", "input", "event", "at", "least", "for", "normal", "input", "NUMBER", "What", "would", "it", "take", "to", "enable", "IME", "for", "test", "on", "my", "own", "machine", "Also", "browsers", "seem", "to", "fire", "specific", "keycodes", "when", "starting", "an", "IME", "see", "NUMBER", "LINK", "ime", "support", "if", "the", "input", "event", "thing", "doesn", "t", "work", "out", "maybe", "we", "could", "rely", "on", "that", "and", "only", "poll", "when", "such", "a", "code", "be", "fired", "NUMBER", "I", "ll", "look", "into", "this", "more", "closely", "soon", "NUMBER", "Very", "busy", "right", "now", "NUMBER", "Hey", "Thanks", "for", "the", "great", "explanation", "and", "tables", "NUMBER", "The", "patch", "still", "seems", "a", "bit", "more", "complex", "than", "necessary", "NUMBER", "How", "about", "doing", "something", "like", "this", "Make", "the", "NUMBER", "in", "slowPoll", "a", "variable", "in", "CodeMirror", "constructor", "scope", "In", "onKeyDown", "when", "options", "NUMBER", "pollForIME", "be", "true", "and", "the", "event", "looks", "like", "it", "might", "be", "an", "IME", "event", "use", "the", "keycode", "when", "possible", "otherwise", "just", "assume", "it", "be", "so", "set", "this", "variable", "to", "something", "smaller", "say", "NUMBER", "NUMBER", "When", "an", "input", "event", "be", "seen", "or", "no", "change", "has", "be", "detected", "for", "X", "say", "NUMBER", "seconds", "reset", "the", "poll", "delay", "variable", "to", "NUMBER", "to", "make", "sure", "we", "re", "not", "wasting", "browser", "resources", "for", "no", "reason", "NUMBER", "This", "way", "we", "don", "t", "have", "two", "separate", "poll", "timers", "run", "at", "the", "same", "time", "which", "seems", "needlessly", "confusing", "NUMBER", "Actually", "NUMBER", "be", "probably", "way", "too", "much", "for", "the", "polling", "time", "NUMBER", "Try", "NUMBER", "I", "ve", "commented", "on", "the", "gist", "NUMBER", "The", "reason", "for", "the", "multiple", "true", "be", "that", "older", "browsers", "always", "display", "non", "multiple", "select", "inputs", "as", "a", "single", "line", "even", "when", "size", "be", "set", "to", "something", "NUMBER", "If", "you", "want", "to", "provide", "more", "details", "on", "the", "too", "few", "entries", "thing", "please", "open", "a", "different", "bug", "for", "it", "NUMBER", "I", "be", "not", "seeing", "this", "in", "IE", "NUMBER", "in", "the", "full", "screen", "demo", "the", "selected", "text", "always", "corresponds", "to", "the", "mouse", "position", "NUMBER", "Thanks", "NUMBER", "Integrated", "NUMBER", "Hi", "Alexander", "No", "mistakes", "jump", "out", "but", "I", "must", "say", "that", "I", "don", "t", "really", "have", "time", "to", "go", "over", "this", "very", "closely", "NUMBER", "Best", "Marijn", "what", "type", "be", "lineHandle", "These", "be", "opaque", "objects", "you", "re", "not", "supposed", "to", "do", "anything", "with", "them", "except", "pass", "them", "back", "to", "lineInfo", "setLineClass", "addGutterMarker", "or", "removeGutterMarker", "NUMBER", "Sorry", "use", "the", "internal", "names", "NUMBER", "I", "meant", "setMarker", "and", "clearMarker", "NUMBER", "Also", "note", "that", "the", "mention", "function", "accept", "both", "an", "integer", "and", "a", "line", "handle", "so", "you", "can", "t", "simply", "specify", "them", "to", "only", "take", "line", "handles", "NUMBER", "You", "can", "just", "loop", "over", "the", "lines", "after", "initializing", "your", "editor", "and", "indent", "them", "through", "indentLine", "seems", "that", "something", "that", "s", "four", "lines", "of", "code", "to", "emulate", "shouldn", "t", "be", "a", "build", "in", "option", "NUMBER", "It", "s", "only", "one", "in", "fact", "for", "var", "i", "NUMBER", "e", "editor", "NUMBER", "lineCount", "i", "e", "i", "editor", "NUMBER", "indentLine", "i", "Ah", "sorry", "I", "wanted", "to", "tell", "you", "as", "I", "tried", "out", "the", "code", "I", "gave", "you", "I", "notice", "this", "bug", "NUMBER", "I", "push", "a", "fix", "to", "the", "repository", "earlier", "today", "NUMBER", "If", "you", "get", "the", "dev", "snapshot", "the", "problem", "should", "be", "gone", "NUMBER", "I", "ve", "integrated", "this", "though", "I", "still", "have", "my", "reservations", "NUMBER", "If", "you", "re", "calling", "this", "you", "re", "probably", "first", "fetching", "the", "content", "of", "the", "editor", "with", "getValue", "then", "processing", "the", "whole", "string", "that", "returns", "and", "then", "moving", "back", "to", "line", "ch", "coordinates", "NUMBER", "This", "be", "perfectly", "okay", "for", "small", "documents", "but", "will", "be", "quite", "slow", "for", "bigger", "ones", "NUMBER", "Hi", "Marco", "I", "think", "this", "be", "best", "do", "as", "a", "piece", "of", "add", "on", "code", "not", "in", "core", "CodeMirror", "NUMBER", "Hook", "into", "onKeyEvent", "and", "call", "the", "indentLine", "method", "when", "detecting", "a", "cmd", "NUMBER", "There", "s", "any", "number", "of", "keybindings", "that", "people", "be", "use", "to", "and", "support", "them", "all", "in", "the", "core", "would", "bloat", "it", "NUMBER", "I", "be", "hoping", "to", "eventually", "move", "to", "a", "system", "where", "keybinding", "sets", "be", "first", "class", "things", "and", "the", "editor", "comes", "with", "a", "bunch", "of", "different", "ones", "NUMBER", "This", "will", "take", "time", "though", "NUMBER", "Best", "Marijn", "CodeMirror", "doesn", "t", "internally", "track", "character", "offsets", "it", "treats", "the", "document", "simply", "as", "an", "array", "of", "lines", "NUMBER", "So", "you", "ll", "have", "to", "convert", "which", "may", "be", "slow", "on", "big", "documents", "NUMBER", "Nope", "NUMBER", "But", "a", "tight", "loop", "that", "uses", "NUMBER", "indexOf", "to", "find", "all", "newlines", "before", "a", "given", "position", "should", "be", "relatively", "fast", "unless", "we", "re", "talking", "really", "big", "strings", "NUMBER", "Integrated", "NUMBER", "Though", "I", "would", "have", "preferred", "if", "you", "d", "try", "to", "re", "use", "as", "many", "of", "the", "standard", "styles", "defined", "in", "the", "exist", "themes", "as", "possible", "to", "make", "it", "easier", "to", "apply", "themes", "to", "the", "mode", "NUMBER", "See", "NUMBER", "e", "NUMBER", "dac", "NUMBER", "aba", "NUMBER", "b", "NUMBER", "d", "NUMBER", "b", "NUMBER", "bfab", "NUMBER", "c", "NUMBER", "fd", "NUMBER", "d", "NUMBER", "NUMBER", "Such", "syntax", "be", "definitely", "bogus", "so", "it", "should", "be", "highlight", "as", "an", "error", "NUMBER", "With", "this", "patch", "just", "the", "quoted", "value", "be", "colored", "red", "and", "the", "parser", "continues", "properly", "after", "it", "NUMBER", "Did", "you", "accidentally", "upgrade", "to", "chrome", "NUMBER", "I", "didn", "t", "change", "anything", "that", "was", "intended", "to", "fix", "this", "NUMBER", "Tried", "to", "reproduce", "but", "couldn", "t", "NUMBER", "I", "can", "reproduce", "this", "neither", "in", "NUMBER", "nor", "in", "the", "latest", "version", "NUMBER", "Closing", "NUMBER", "See", "NUMBER", "bb", "NUMBER", "ce", "NUMBER", "ebe", "NUMBER", "cf", "NUMBER", "f", "NUMBER", "e", "NUMBER", "b", "NUMBER", "cd", "NUMBER", "c", "NUMBER", "and", "LINK", "NUMBER", "Needs", "test", "NUMBER", "Thanks", "for", "investigating", "this", "deeply", "NUMBER", "I", "can", "t", "reproduce", "the", "issue", "though", "NUMBER", "Does", "it", "happen", "on", "all", "browsers", "Could", "you", "be", "a", "bit", "more", "specific", "with", "the", "reproduction", "instructions", "Which", "do", "I", "type", "over", "How", "do", "I", "select", "title", "Just", "commenting", "on", "NUMBER", "f", "NUMBER", "fb", "NUMBER", "de", "NUMBER", "b", "NUMBER", "cbb", "NUMBER", "bf", "NUMBER", "ccf", "NUMBER", "ae", "NUMBER", "f", "NUMBER", "aa", "NUMBER", "f", "NUMBER", "for", "now", "haven", "t", "read", "the", "other", "patch", "yet", "NUMBER", "I", "like", "the", "clearAll", "methods", "NUMBER", "I", "m", "not", "so", "happy", "about", "your", "approach", "to", "error", "checking", "NUMBER", "I", "see", "how", "there", "be", "a", "hole", "in", "the", "functionality", "provide", "by", "the", "current", "CodeMirror", "core", "but", "I", "don", "t", "think", "this", "solution", "be", "general", "enough", "you", "just", "get", "line", "numbers", "not", "error", "message", "so", "you", "have", "to", "do", "a", "bunch", "of", "extra", "magic", "if", "you", "want", "message", "NUMBER", "Would", "an", "approach", "where", "a", "parser", "can", "emit", "an", "error", "by", "returning", "a", "style", "error", "message", "some", "string", "object", "instead", "of", "just", "error", "work", "for", "you", "The", "message", "can", "then", "be", "saved", "in", "the", "lines", "and", "we", "could", "have", "a", "method", "to", "pull", "them", "out", "with", "associated", "line", "char", "information", "NUMBER", "This", "way", "you", "don", "t", "have", "to", "re", "parse", "the", "whole", "buffer", "every", "time", "an", "error", "gets", "add", "or", "delete", "NUMBER", "The", "best", "way", "to", "change", "the", "font", "be", "to", "set", "a", "font", "family", "font", "size", "in", "the", "NUMBER", "CodeMirror", "class", "that", "will", "ensure", "the", "whole", "editor", "be", "use", "the", "same", "font", "NUMBER", "I", "ve", "update", "the", "manual", "to", "be", "clearer", "about", "this", "NUMBER", "Pulled", "NUMBER", "And", "revised", "somewhat", "in", "NUMBER", "ceffa", "NUMBER", "e", "NUMBER", "d", "NUMBER", "c", "NUMBER", "a", "NUMBER", "a", "NUMBER", "to", "be", "more", "lightweight", "NUMBER", "The", "problem", "appears", "to", "be", "your", "absolutely", "positioned", "body", "in", "combination", "with", "some", "webkit", "scrolling", "bug", "the", "textarea", "be", "still", "positioned", "correctly", "and", "be", "be", "scrolled", "out", "of", "view", "by", "webkit", "NUMBER", "This", "be", "a", "rather", "pathological", "case", "and", "I", "don", "t", "have", "time", "to", "look", "into", "this", "further", "at", "the", "moment", "NUMBER", "Fixed", "by", "NUMBER", "a", "NUMBER", "ba", "NUMBER", "e", "NUMBER", "ec", "NUMBER", "c", "NUMBER", "dfc", "NUMBER", "ff", "NUMBER", "c", "NUMBER", "e", "NUMBER", "This", "be", "a", "different", "manifestation", "of", "issue", "NUMBER", "key", "polling", "somehow", "not", "work", "well", "Could", "you", "be", "more", "specific", "on", "what", "not", "repeating", "reliably", "at", "all", "means", "Holding", "an", "up", "down", "arrow", "seems", "to", "work", "for", "me", "NUMBER", "Could", "it", "be", "that", "you", "re", "on", "a", "slower", "than", "usual", "computer", "Maybe", "I", "m", "setting", "a", "timeout", "too", "short", "NUMBER", "Very", "odd", "especially", "since", "it", "seems", "to", "happen", "on", "all", "browsers", "for", "you", "NUMBER", "Could", "it", "be", "that", "you", "have", "key", "repeat", "speed", "set", "very", "low", "somehow", "What", "happens", "if", "you", "change", "the", "NUMBER", "in", "function", "fastPoll", "on", "line", "NUMBER", "of", "the", "current", "git", "version", "to", "say", "NUMBER", "Also", "be", "you", "seeing", "any", "script", "error", "Hm", "NUMBER", "I", "be", "out", "of", "ideas", "on", "what", "might", "cause", "this", "and", "not", "able", "to", "reproduce", "it", "I", "m", "run", "Ubuntu", "myself", "but", "never", "saw", "the", "issue", "NUMBER", "If", "you", "happen", "to", "figure", "out", "which", "setting", "program", "hardware", "causes", "this", "do", "let", "me", "know", "NUMBER", "Thanks", "Pulled", "in", "as", "NUMBER", "df", "NUMBER", "d", "NUMBER", "cb", "NUMBER", "b", "NUMBER", "ad", "NUMBER", "e", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "b", "NUMBER", "f", "Fixed", "by", "NUMBER", "df", "NUMBER", "d", "NUMBER", "cb", "NUMBER", "b", "NUMBER", "ad", "NUMBER", "e", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "b", "NUMBER", "f", "Could", "you", "create", "a", "minimal", "simple", "HTML", "page", "that", "shows", "the", "problem", "I", "can", "t", "reproduce", "this", "by", "add", "a", "long", "line", "to", "the", "XML", "mode", "demo", "NUMBER", "Detecting", "automatic", "semicolon", "insertion", "be", "currently", "out", "of", "scope", "for", "the", "JS", "mode", "contributions", "welcome", "NUMBER", "If", "you", "program", "in", "a", "semicolon", "omitting", "style", "try", "setting", "the", "enterMode", "option", "to", "keep", "NUMBER", "You", "ll", "have", "to", "do", "a", "bit", "more", "work", "managing", "your", "own", "indentation", "but", "at", "least", "CodeMirror", "won", "t", "constantly", "wrongly", "indent", "for", "you", "NUMBER", "There", "be", "no", "NUMBER", "space", "hard", "tabs", "tabs", "be", "tabs", "and", "browsers", "render", "them", "as", "NUMBER", "spaces", "wide", "NUMBER", "I", "d", "like", "to", "have", "a", "setting", "to", "control", "tab", "width", "but", "unfortunately", "browsers", "do", "not", "currently", "support", "this", "NUMBER", "Representing", "tabs", "with", "some", "other", "string", "be", "easy", "in", "the", "display", "but", "very", "hard", "to", "do", "in", "the", "textarea", "I", "could", "no", "longer", "leave", "cursor", "movement", "and", "editing", "entirely", "up", "to", "the", "browser", "so", "I", "m", "not", "really", "willing", "to", "go", "there", "NUMBER", "Use", "the", "text", "x", "php", "mime", "type", "as", "your", "mode", "spec", "and", "you", "should", "get", "the", "behaviour", "you", "want", "NUMBER", "You", "don", "t", "have", "to", "load", "the", "XML", "JS", "and", "CSS", "modes", "if", "you", "re", "doing", "that", "NUMBER", "This", "be", "get", "clunky", "NUMBER", "Worked", "around", "in", "d", "NUMBER", "e", "NUMBER", "a", "NUMBER", "f", "NUMBER", "ebe", "NUMBER", "e", "NUMBER", "eec", "NUMBER", "c", "NUMBER", "fab", "NUMBER", "You", "could", "update", "historySize", "to", "have", "a", "different", "name", "historyData", "or", "so", "and", "also", "return", "the", "actual", "history", "data", "in", "the", "internal", "format", "and", "provide", "a", "similar", "setter", "function", "NUMBER", "The", "internal", "format", "start", "add", "old", "objects", "be", "probably", "okay", "for", "an", "external", "interface", "NUMBER", "Added", "an", "exception", "for", "this", "in", "f", "NUMBER", "e", "NUMBER", "f", "NUMBER", "fca", "NUMBER", "b", "NUMBER", "aa", "NUMBER", "dd", "NUMBER", "d", "NUMBER", "a", "NUMBER", "a", "NUMBER", "Thanks", "Merged", "with", "a", "few", "small", "change", "most", "notably", "wiring", "up", "the", "preview", "update", "to", "onChange", "to", "not", "waste", "too", "much", "cycles", "on", "unnecessary", "update", "Thanks", "merge", "NUMBER", "I", "can", "t", "think", "of", "anything", "NUMBER", "Try", "to", "make", "your", "use", "case", "more", "and", "more", "like", "the", "demo", "pages", "until", "you", "find", "out", "what", "triggers", "this", "NUMBER", "Then", "if", "the", "problem", "isn", "t", "obvious", "send", "me", "a", "minimal", "testcase", "NUMBER", "Thanks", "Merged", "NUMBER", "Instead", "of", "this", "NUMBER", "CodeMirror", "NUMBER", "defineMIME", "text", "x", "csharp", "name", "clike", "keywords", "words", "NUMBER", "atoms", "words", "true", "false", "null", "hooks", "NUMBER", "You", "d", "have", "something", "like", "CodeMirror", "NUMBER", "defineMode", "csharp", "function", "config", "parserConfig", "return", "CodeMirror", "NUMBER", "getMode", "config", "name", "clike", "keywords", "parserConfig", "NUMBER", "version", "XXX", "words", "set", "for", "one", "version", "word", "other", "version", "atoms", "words", "true", "false", "null", "hooks", "NUMBER", "CodeMirror", "NUMBER", "defineMIME", "text", "x", "csharp", "csharp", "But", "note", "that", "this", "only", "makes", "sense", "when", "you", "need", "to", "implement", "actual", "C", "specific", "configuration", "parameters", "NUMBER", "All", "right", "NUMBER", "Closing", "this", "then", "feel", "free", "to", "make", "change", "like", "I", "describe", "to", "c", "like", "modes", "when", "it", "becomes", "necessary", "NUMBER", "Since", "NUMBER", "f", "NUMBER", "f", "NUMBER", "ddaf", "NUMBER", "c", "NUMBER", "c", "NUMBER", "db", "NUMBER", "c", "NUMBER", "ea", "NUMBER", "b", "NUMBER", "ff", "NUMBER", "f", "NUMBER", "which", "will", "be", "in", "the", "release", "I", "m", "about", "to", "make", "you", "can", "pass", "a", "fourth", "argument", "to", "addWidget", "to", "exercise", "some", "control", "over", "positioning", "NUMBER", "Passing", "fit", "should", "do", "pretty", "much", "what", "you", "describe", "here", "NUMBER", "Please", "test", "Take", "a", "look", "at", "NUMBER", "ba", "NUMBER", "f", "NUMBER", "e", "NUMBER", "ce", "NUMBER", "b", "NUMBER", "c", "NUMBER", "e", "NUMBER", "b", "NUMBER", "e", "NUMBER", "I", "ve", "renamed", "fit", "to", "near", "since", "that", "covers", "the", "current", "functionality", "better", "and", "hopefully", "fix", "the", "issue", "you", "saw", "NUMBER", "Thanks", "Merged", "NUMBER", "This", "was", "a", "problem", "with", "the", "highlighter", "concluding", "it", "was", "do", "when", "it", "find", "an", "empty", "line", "because", "the", "style", "of", "the", "empty", "line", "didn", "t", "change", "NUMBER", "Fixed", "in", "NUMBER", "bfc", "NUMBER", "f", "NUMBER", "da", "NUMBER", "ada", "NUMBER", "a", "NUMBER", "b", "NUMBER", "e", "NUMBER", "fca", "NUMBER", "f", "This", "won", "t", "happen", "NUMBER", "Tabs", "be", "tabs", "and", "if", "you", "want", "to", "convert", "them", "to", "spaces", "it", "be", "trivial", "to", "use", "some", "external", "code", "to", "do", "that", "NUMBER", "Ah", "I", "see", "what", "you", "mean", "now", "NUMBER", "This", "be", "not", "practical", "unfortunately", "until", "browsers", "allow", "reliable", "control", "over", "tab", "size", "through", "CSS", "styling", "NUMBER", "To", "make", "cursor", "movement", "consistent", "the", "tab", "size", "in", "the", "display", "has", "to", "match", "the", "tab", "size", "in", "the", "hidden", "textarea", "NUMBER", "I", "m", "not", "even", "going", "to", "look", "at", "this", "in", "this", "form", "NUMBER", "You", "reformatted", "stuff", "all", "over", "the", "place", "for", "no", "reason", "NUMBER", "Also", "a", "single", "commit", "would", "work", "a", "lot", "better", "NUMBER", "Git", "isn", "t", "that", "hard", "to", "figure", "out", "NUMBER", "I", "guess", "your", "IDE", "did", "something", "then", "NUMBER", "See", "e", "NUMBER", "ed", "NUMBER", "a", "NUMBER", "c", "NUMBER", "fc", "NUMBER", "c", "NUMBER", "d", "NUMBER", "c", "NUMBER", "bdd", "NUMBER", "d", "NUMBER", "a", "NUMBER", "NUMBER", "Also", "I", "think", "I", "d", "rather", "implement", "something", "that", "doesn", "t", "use", "eval", "to", "inject", "code", "in", "the", "CodeMirror", "scope", "so", "that", "the", "distinction", "between", "public", "API", "and", "private", "API", "doesn", "t", "start", "blurring", "NUMBER", "I", "can", "add", "some", "things", "to", "the", "public", "API", "if", "this", "be", "necessary", "for", "plug", "in", "writers", "NUMBER", "This", "happens", "when", "the", "editor", "be", "taken", "out", "of", "the", "DOM", "or", "given", "a", "display", "none", "NUMBER", "Patch", "NUMBER", "cc", "NUMBER", "d", "NUMBER", "c", "NUMBER", "d", "NUMBER", "d", "should", "fix", "thsi", "NUMBER", "I", "ve", "implement", "a", "version", "where", "it", "only", "suppresses", "the", "cursor", "when", "readOnly", "be", "nocursor", "in", "ee", "NUMBER", "b", "NUMBER", "d", "NUMBER", "b", "NUMBER", "a", "NUMBER", "c", "NUMBER", "cb", "NUMBER", "f", "NUMBER", "ca", "NUMBER", "a", "NUMBER", "fb", "NUMBER", "c", "NUMBER", "Thanks", "for", "the", "patch", "NUMBER", "Do", "you", "have", "a", "use", "case", "to", "go", "with", "it", "No", "not", "a", "unit", "test", "an", "example", "of", "a", "situation", "where", "you", "needed", "this", "NUMBER", "Merged", "with", "a", "revision", "that", "remove", "your", "comment", "git", "blame", "can", "track", "down", "line", "authors", "and", "update", "the", "docs", "NUMBER", "Thanks", "for", "the", "code", "NUMBER", "However", "it", "looks", "somewhat", "more", "invasive", "and", "inefficient", "than", "necessary", "NUMBER", "I", "ve", "push", "an", "alternative", "at", "NUMBER", "ba", "NUMBER", "ea", "NUMBER", "dcf", "NUMBER", "e", "NUMBER", "d", "NUMBER", "bbfce", "NUMBER", "f", "NUMBER", "f", "NUMBER", "Please", "see", "if", "that", "works", "for", "you", "NUMBER", "Which", "mode", "Which", "tabMode", "What", "happens", "What", "did", "you", "expect", "to", "happen", "Actually", "it", "sounds", "like", "you", "want", "tabMode", "indent", "NUMBER", "ankit", "CodeMirror", "NUMBER", "worked", "that", "way", "and", "there", "was", "an", "endless", "stream", "of", "bug", "report", "that", "tab", "doesn", "t", "work", "NUMBER", "So", "I", "set", "the", "default", "to", "something", "that", "be", "easy", "to", "understand", "and", "allow", "people", "to", "set", "it", "to", "something", "different", "if", "they", "want", "to", "NUMBER", "Hi", "Alexey", "First", "I", "appreciate", "the", "pull", "request", "NUMBER", "But", "I", "m", "trying", "to", "keep", "this", "editor", "as", "minimal", "and", "lightweight", "as", "possible", "and", "since", "all", "these", "except", "the", "word", "wrapper", "can", "be", "trivially", "do", "on", "top", "of", "the", "exist", "API", "I", "think", "they", "have", "no", "place", "in", "the", "core", "editor", "NUMBER", "The", "word", "wrapping", "be", "certainly", "useful", "if", "you", "could", "implement", "it", "as", "a", "separate", "file", "I", "d", "gladly", "put", "that", "in", "for", "example", "lib", "wordwrap", "NUMBER", "js", "NUMBER", "For", "example", "you", "could", "assign", "CodeMirror", "NUMBER", "wordWrap", "to", "be", "a", "function", "taking", "an", "instance", "as", "the", "first", "argument", "there", "be", "no", "plugin", "system", "yet", "where", "you", "can", "add", "methods", "and", "the", "range", "to", "wrap", "as", "the", "next", "argument", "NUMBER", "Hi", "Ebrahim", "I", "d", "like", "to", "work", "with", "you", "to", "support", "this", "better", "but", "I", "currently", "don", "t", "have", "the", "time", "to", "really", "debug", "and", "fix", "it", "myself", "NUMBER", "I", "suggest", "you", "look", "at", "the", "charX", "and", "charFromX", "function", "if", "you", "didn", "t", "already", "and", "figure", "out", "how", "to", "make", "them", "work", "for", "reversed", "text", "NUMBER", "If", "you", "have", "any", "specific", "question", "feel", "free", "to", "ask", "either", "in", "this", "bug", "or", "by", "direct", "mail", "NUMBER", "Best", "Marijn", "Touching", "pageX", "be", "probably", "the", "wrong", "way", "to", "go", "NUMBER", "You", "don", "t", "want", "to", "invert", "the", "whole", "coordinate", "system", "you", "just", "want", "to", "determine", "the", "X", "coordinates", "of", "characters", "in", "the", "editor", "differently", "NUMBER", "Hence", "look", "at", "charX", "and", "charFromX", "instead", "NUMBER", "Question", "Wouldn", "t", "a", "unique", "class", "or", "optionally", "multiple", "classes", "if", "you", "also", "need", "a", "non", "unique", "one", "for", "styling", "do", "just", "as", "well", "As", "I", "understand", "it", "you", "ll", "register", "a", "handler", "that", "will", "look", "at", "the", "id", "of", "the", "event", "target", "and", "do", "something", "based", "on", "that", "NUMBER", "Could", "also", "look", "at", "the", "class", "no", "Okay", "I", "m", "closing", "this", "then", "NUMBER", "Sorry", "to", "be", "so", "picky", "but", "it", "s", "important", "to", "try", "and", "keep", "the", "lib", "as", "small", "and", "simple", "as", "possible", "NUMBER", "I", "don", "t", "have", "my", "Mac", "handy", "right", "now", "and", "this", "isn", "t", "happening", "on", "Safari", "NUMBER", "Windows", "NUMBER", "I", "ve", "marked", "this", "on", "my", "to", "do", "list", "and", "will", "try", "to", "look", "into", "it", "next", "month", "when", "I", "get", "home", "NUMBER", "Thanks", "NUMBER", "Fixed", "now", "NUMBER", "Thanks", "merge", "NUMBER", "If", "you", "can", "get", "this", "script", "to", "me", "in", "a", "way", "that", "doesn", "t", "involve", "me", "clicking", "around", "chinese", "language", "sites", "that", "cause", "my", "browser", "to", "pop", "up", "security", "warnings", "I", "ll", "gladly", "take", "a", "look", "at", "it", "NUMBER", "The", "chinese", "page", "was", "linked", "from", "your", "other", "issue", "I", "confused", "them", "they", "sound", "like", "they", "describe", "the", "same", "problem", "NUMBER", "The", "script", "you", "linked", "contains", "a", "single", "line", "minify", "jQuery", "NUMBER", "CodeMirror", "be", "know", "to", "be", "slow", "on", "huge", "lines", "see", "LINK", "See", "your", "other", "bug", "NUMBER", "Put", "the", "script", "you", "re", "talking", "about", "on", "a", "pastebin", "somewhere", "don", "t", "make", "me", "go", "through", "dodgy", "websites", "NUMBER", "Again", "see", "your", "other", "bug", "NUMBER", "NUMBER", "k", "line", "be", "cause", "the", "slowness", "NUMBER", "The", "difference", "be", "cause", "by", "the", "first", "script", "having", "the", "long", "line", "off", "screen", "when", "opened", "whereas", "this", "one", "has", "its", "long", "line", "at", "the", "top", "so", "it", "will", "be", "add", "to", "the", "dom", "straight", "away", "and", "the", "DOM", "be", "the", "bottleneck", "parsing", "be", "clever", "enough", "to", "just", "give", "up", "when", "a", "line", "be", "too", "huge", "NUMBER", "Thanks", "Thanks", "for", "noticing", "those", "I", "have", "no", "idea", "NUMBER", "The", "github", "automerge", "feature", "seems", "to", "be", "a", "bit", "screwy", "NUMBER", "I", "ve", "merge", "it", "again", "the", "old", "fashioned", "way", "NUMBER", "I", "ve", "considered", "doing", "something", "with", "a", "textarea", "like", "that", "but", "it", "seems", "like", "a", "real", "can", "of", "worms", "wrt", "browser", "quircks", "NUMBER", "What", "exactly", "was", "not", "work", "in", "iOS", "before", "I", "played", "around", "on", "my", "Android", "and", "barring", "the", "scroll", "bar", "absence", "it", "seems", "to", "work", "pretty", "well", "NUMBER"], "text_count": [0, 3371, 720, 311, 124, 17, 221, 0, 29, 408, 588, 925, 436, 387, 405, 113, 0, 0, 0, 0, 968, 359, 183, 154, 225, 194, 0, 0, 0, 0, 1868, 1220, 664, 23, 340, 126, 0, 0, 0, 0, 2244, 37, 813, 748, 794, 0, 0, 0, 0, 0, 617, 267, 237, 161, 267, 121, 251, 0, 0, 0, 1734, 155, 1372, 130, 0, 0, 0, 0, 0, 0, 1126, 129, 796, 281, 152, 0, 0, 0, 0, 0, 1946, 903, 215, 692, 135, 100, 0, 0, 0, 0, 131, 711, 54, 0, 0, 0, 0, 0, 0, 0, 1848, 343, 1140, 380, 0, 0, 0, 0, 0, 0, 3002, 6487, 105, 310, 71, 108, 0, 0, 0, 0, 8840, 36, 6727, 92, 1674, 1830]}, {"repo": "CodeMirror", "type": "nonelite", "title": "", "number of text": 507, "text": "    1. Go to http://jsfiddle.net/sCqph/\n2. Click on line 2 (where there's a single collapsed 'X' character)\n   Notice that the cursor is not placed at the beginning of the line.  There's a single space before it.  In fact, since I have inclusiveLeft: true, there's no way to get the cursor to the beginning of the line.\n3. Type 'x'.\n   Notice that the space disappears and the 'x' is rendered where the space was.  If you move the cursor before the 'x', it is at the beginning of the line now.  This is operating as I'd expect.\n\nIt would be great if after step 2, the line rendered as a blank line and the cursor would appear all the way to the left.\n Looks good.  Thank you!\n  When in keyMap: 'vim' (or presumably using vim.js), apple keystrokes are overridden (they aren't being passed to the browser). \n Hi @francisreyes, what specific apple keystrokes are you having problems with?\n for example in http://codemirror.net/demo/vim.html\n\nClicking in the code mirror window, and insert some text, press ESC. \n\nApple +T, Apple+N, Apple+W, etc doesn't add a new tab, open a new window, or close a window as expected. \n\nUsing Safari 6.0.3 (8536.28.10)\n It looks like this is caused by \"nofallthrough\", which vim sets to prevent random key presses in normal mode from inserting characters into the editor.\n\nIf handled = \"stop\" is returned from lookupKey(), handleCharBinding() will call preventDefault(). I'm not sure if this is intended behavior or an oversight. @marijnh? If it's intended behavior, then it'd be nice to have an additional option for a keymap to have \"nofallthrough\" behavior without preventDefault.\n\nWorks in Chrome because Chrome doesn't let you capture system shortcuts.  \n\n## \n\nYunchi Luo\nSent with Sparrow (http://www.sparrowmailapp.com/?sig)\n\nOn Thursday, May 30, 2013 at 1:14 PM, Francis Reyes wrote:\n\n> for example in http://codemirror.net/demo/vim.html\n> Clicking in the code mirror window, and insert some text, press ESC.  \n> Apple +T, Apple+N, Apple+W, etc doesn't add a new tab, open a new window, or close a window as expected.  \n> Using Safari 6.0.3 (8536.28.10)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub (https://github.com/marijnh/CodeMirror/issues/1558#issuecomment-18694958).\n @marijnh thank you for the quick patch. Unfortunately `disableInput` does break vim mode. It should be possible to edit in normal mode. For example, pressing `dw` should delete a word, and then pressing `p` should paste the deleted word back in.\n\nIn VIM normal mode, text insertions from CodeMirror's hidden input should be disabled, but programmatic edits triggered by the keymap should still work. Is that doable?\n Opened https://github.com/marijnh/CodeMirror/pull/1565 to address.\n Thanks! Sorry for the poorly thought out patch. I guess that should do it then.\n  ##### Step-by-step:\n- Open http://codemirror.net/demo/complete.html\n- Copy text couple of times to get about 200 lines\n- Scroll to the very end of the text\n- Execute `editor.scrollIntoView(CodeMirror.Pos(100, 0))` \n- Get CM's current scroll state with `editor.getScrollInfo().top`, which outputs `1284` for me\n- Run `editor.charCoords(CodeMirror.Pos(100, 0), \"local\").top`, which output `1280` for me\n##### Expected\n\n`editor.charCoords` will return top value exactly the same as `editor.getScrollInfo()` \n It looks like `scrollIntoView` method doesn't work properly now: the topmost line is not 100% visible (step number 4)\n It seems be working for me,\nThanks!\n  #### Problem\n\nThe only way to figure out a first visible line number (or a bottom visible line number)\nis to call `codeMirror.coordsChar({left: 0, top: 0}, \"local\")`. (please correct me if I'm wrong).\nThe problem is, however, that this method is pretty expensive because of a `measureLineInner` call, so in case of calling it multiple times in a `scroll` event handler on a file with multiple long lines - scrolling gets laggy.\n\nThe `visibleLines` method seems to be a natural solution for the problem.\n Does the `editor.lineAtHeight(0, \"local\")` return the top visible line? It always returns `0` for me\n Thanks, that works.\n  jade and stylus rock! drop that mode in!\n Yea let's drop in [this one by aaronmccall](https://github.com/aaronmccall/jade.mode). Aaron's looks pretty XMLy so let me know if CodeMirror is ready for that or what. I totally agree, I'm super confused all the time but I could kick you back another commit with the aaronmccall mode or [miksago's classic tmbundle](https://github.com/miksago/jade-tmbundle#readme). Let me know so I could start using your app right away, it looks awesome\n Oh tough luck. Yea I look like a retarded person because I'm accustomed to everything being done for me by much better programmers who happen to surround everything I'm into. I guess that comes with the turf in any decent programming language these days... So yea I meant no offense, I'm looking at the CodeMirror modes now and OK I see what you're saying. Well jade is like a JavaScript library, written through JavaScript in the first place as far as I know, what is that called, a dictionary...  it's probably doable over loops or reversing reg exs already written, so I'm def interested... Earlier today I enjoyed Adobe's build--it had me on a fun little environment in no time with free server reloads plus client side page refreshes (well you just have to switch socket.io on) and it was great--not even one line of file watcher stuff: https://github.com/DennisKehrig/brackets-v8-node-live\n Bro, after reading all this, all I can think of is this awesome horseshark:\n\n![Wat](http://25.media.tumblr.com/2a281a4d77538c8c777df9d9aecbf8dc/tumblr_mj3yln6bOm1qbx93do1_500.jpg)\n Can't believe there's a picture out there on the internet that captured my state of mind during this commit, the fact that you brought it into this discussion is even more impressive\n not entirely sure what this commit was all about... but I've added a jade mode here: 087331f \nI'm looking to add stylus soon\n  I'm experimenting with line widgets for the first time and it would have been convenient to place them above the line, which CodeMirror also provides functionality for.\n\nIn short, this is what I'm doing:\n\n> The editor is read-only. When a user clicks a list item, the text is inserted at the cursor if it is at the beginning of a line. All the current line contents, if any, are shifted down one line. If it's not at the beginning, the text is inserted on the line below.\n> \n> Upon insertion, the text is marked atomic and a line widget is placed above it.\n\nSo this was the result:\n\n![Line Widgets above bug](https://f.cloud.github.com/assets/4290238/571692/e0966b72-c77c-11e2-9c6d-9aab1c3acf63.png)\n\nAs you can see, the bug is that line widgets get their \"own\" line after a few insertions. Also somewhere in the code, to create the new line, I have:\n`editor.replaceRange(\"\\n\", start);`\nThis also has weird behaviour because when I do that, the line contents seem to **disappear when there is a line widget above**.\n\nJust by having the line widgets placed **below**, it works correctly, see:\n\n![working](https://f.cloud.github.com/assets/4290238/571710/fb2c55f4-c77d-11e2-87db-bf453f15a648.png)\n\nThe bug can only be in CodeMirror because placing the widget below works fine.\n\nHere's the code that inserts it:\n\n``` javascript\nvar start = editor.getCursor(\"anchor\");\nif(start.ch != 0 || editor.getLine(start.line).trim() !== \"\") {\n    editor.replaceRange(\"\\n\", start);\n    if(start.ch!=0) {\n        start.line += 1;\n        start.ch = 0;\n    }\n}\n\nvar replaceString = \"<__\" + name + \"__>\";\neditor.replaceRange(replaceString, start);\nvar end = {line: start.line, ch: replaceString.length};\n\neditor.markText(start, end, {className: id, atomic: true});\nvar widget = $('<div class=\"ct-description-widget ct-' + id + '-descr\">' + descr + '</div>').get(0);\neditor.addLineWidget(end.line, widget, {noHScroll: true, above: true});\n```\n## Update\n\nThe culprit is indeed this line of code: `editor.replaceRange(\"\\n\", start);`. I changed the above code to remove it and place the newline character in the `replaceString` itself. This way it lasts a little longer but it still breaks if the cursor is at the start of a line that has other contents!\n @marijnh your last commit seems to have fixed it. However **now** the problem is that the height is calculated incorrectly. The cursor appears slightly above each line, even when refreshing. I **might** be doing something wrong myself, but just to make sure I'll try to throw you a demo together. What's the best way to send it to you btw?\n  1. Define a mode with indentation for the contents of bracketed contents (e.g. `[` token increases indent, `]` token decreases indent, and indent called with textAfter of `]` decreases indent for the line)\n2. Use the closebrackets plugin and set autoCloseBrackets appropriately (e.g. `\"[]\"`)\n3. Type `foo: [`, press Enter, type `bar`\n\nResult:\n\n```\nfoo: [\nbar]\n```\n\nThis \"naturally\" falls out of the interaction of these two features, but looks ugly. One possibility is that if Enter is hit within a bracket pair, an extra newline is inserted after the cursor position and indentation is computed for both new lines. This would result in:\n\n```\nfoo: [\n  bar\n]\n```\n\n... with the cursor right after the \"r\" in \"bar\". This might require an additional option to be specified for closebrackets.\n From code inspection, it looks great. I'll report back when I've had a chance to actually try it out (within a day or two).\n Tried it out - it's live at http://calormen.com/jslogo/ (hit the arrow to make the entry field multi-line). Works great in multi-line mode... but the change introduces one bug with regard to keymaps.\n\nhttp://calormen.com/jslogo/ uses styles and a keyMap to provide a \"single-line\" entry by default (REPL-style). The keyMap overrides Enter to \"run\" the current entry. The \"explode\" feature revision alters the behavior when Enter is pressed between brackets (regardless of whether or not explode is specified). The add-on consumes the keypress rather than letting the app see it.\n\nPrior to a808849: type `show [` and it autocompletes to `show []` with the cursor between the brackets. Press Enter - the page catches it and runs.\n\nAfter a808849: type `show [` and it would auto-close to `show []` with the cursor between the brackets. Then press enter and the cursor jumps to after the brackets. Pressing Enter one more time is required to run it.\n\n(The single-line entry is a bit of a hack, but otherwise works well. I'll file another issue eventually about supporting that via an add-on.)\n Ah, I'd misunderstood the options. Yes, this works as expected with: `autoCloseBrackets: { pairs: X, explode: Y }` - perfect.\n\nOne more nit: The backspace-removes-bracket-pair behavior seems to have broken as well.\n And indeed, if you hit Backspace inside a pair, an exception will be thrown: `line` is an undefined reference in closebrackets.js line 33\n\nHere's a fix - basically, restoring the previous declaration/initialization of `line`.\n\n``` javascript\n-        var cur = cm.getCursor(), around = charsAround(cm, cur);\n+        var cur = cm.getCursor(), around = charsAround(cm, cur), line = cm.getLine(cur.line);\n```\n That was a refactoring screwup, should be better now.\n\nDid you expect backspace, when inside an 'exploded' pair, to remove all whitespace inside the pair?\n I hadn't thought through that case. It seems reasonable, but I wouldn't consider it required for the feature.\n\nOn Jun 2, 2013, at 9:03 AM, Marijn Haverbeke notifications@github.com wrote:\n\n> That was a refactoring screwup, should be better now.\n> \n> Did you expect backspace, when inside an 'exploded' pair, to remove all whitespace inside the pair?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n Tried the new code - seems great now.\n  Hi, I am very happy I found CodeMirror, I am a new user and would like to have many instances of codemirror on one page.\nI noticed that when using IE 10 the inserted text gets doubled (with drag and drop from an other instance). Note with Chrome, I don't have that problem.\nThe setup is reproduced on jsbin: http://jsbin.com/ihunin/230\nWhen I drag some text from the upper to the lower textarea, the text is doubled.\nI would be very happy if this problem could be fixed.\n\nMany thanks in advance!\n\nDirk Goossenaerts\n Hi Marijn,\n\nIndeed, the problem is fixed!\nThank you very much for the very quick fix!\n\nI am now building a javascript based static website generator tool. Your CodeMirror software is the perfect solution for authoring the content (HTML) and for the configuration of the website tool (templates, settings, ...).\nAs you will understand, your CodeMirror software will play a crucial role in my project. Therefore within a few months from now, I will request for a paid support contract with you, in order to give you something in return for your great software you made available for me.\n\nMany thanks!\n\nDirk Goossenaerts \n  Current behavior:\n\n```\nword1\nword2\n\n```\n\nIf the cursor is on the last line and 'dd' is executed, the buffer does\nnot change.\n\nExpected behavior:\n\n```\nword1\nword2\n```\n Thanks for bring this to attention. There are a couple of minor issues with your patch.\n- `dd` on last line is not being pushed into the paste buffer correctly\n- does not fix `dj` on second last line.\n- I don't think your special case is needed. The vim keymap aborts if you try to delete past the last line, so it can't occur. This does not match vim behavior but is quite minor and is a separate issue.\n\nPlease see  https://github.com/mightyguava/CodeMirror/commit/33e5a4771ea50bc578fb0b11384987f99b0dfb2b for a corrected patch\n @mightyguava updated from 33e5a47 \n Good to merge. Thanks\n  Hi Marijn,\n\n@Develooper spotted a few minor problems with the Smarty mode (both version 2 and 3). This pull request fixes the following:\n- escaped quotes within a string no longer incorrectly close the string's highlighting.\n- parentheses are now highlighted consistently as \"brackets\" class (they'd default to \"tag\" sometimes); neither these nor variable qualifiers (followed by |) are now affected by whitespace.\n\nThanks!\n\nBen\n  **OS:** Windows 7\n\n**Browser:** Chrome Version 26.0.1410.64 m\n\n**Repro Steps:**\n\n<ol>\n<li>Copy <a href=\"https://gist.github.com/lkcampbell/5647299#file-cm-overlay-bug-html\">this gist</a> into an appropriate CodeMirror environment.</li>\n<li>Comment out line 49, launch in browser, and observe results:</li>\n\n<img src=\"https://f.cloud.github.com/assets/1774931/563350/0a6ce7d2-c4d0-11e2-8e57-a6161fc32da1.png\">\n\n<li>Remove comments from line 49, comment out line 50, launch in browser, and observe results:</li>\n\n<img src=\"https://f.cloud.github.com/assets/1774931/563354/418caea0-c4d0-11e2-9b76-84b32691235a.png\">\n\n<li value=4>Remove comments from line 50, launch in browser, and observe results.</li>\n</ol>\n\n\n**Observed Results:**\nAfter step 4, the CodeMirror editor looks like this:\n\n![cm-overlay-bug-003](https://f.cloud.github.com/assets/1774931/563355/49d2b0fa-c4d0-11e2-9ef1-9f540f8f4cd7.png)\n\n**Expected Results:**\nAfter step 4, the CodeMirror editor should look like a combination of step 2 and step 3, like this:\n\n![cm-overlay-bug-004](https://f.cloud.github.com/assets/1774931/563356/4dc4dc56-c4d0-11e2-8c5a-a209280228cc.png)\n Yeah, I see the problem now, I actually removed that comment just moments ago :).  You are exactly right, I was thinking of it as a tree model.  There may not be a solution to my bug.  I'll play around with it some more and see what I can come up with.\n Okay, I understand what you are saying now.  It would work in this case, correct (in fact that's how I simulated the expected result screen shot) but this is a simplified case of the real bug.  In the real scenario, both of the modes need flattenSpans set to false.  But I have some ideas I will play with today.\n Marijn, thanks for your time and help.  After this discussion, I was able to figure out how to fix my bug.\n  1. Open http://codemirror.net/demo/indentwrap.html in a browser and resize the width of the browser window smaller so that you see some lines with line wrapping.\n2. Double-click to select a word (eg. straightforwardly on line 5).\n3. Now resize the browser window horizontally.\n\nResult: Selection rectangle stays in the old location and does not follow the selected word as you resize. Now if you double-click on any word, then you see a selection rectangle that is not on word boundary. If you set the cursor on a wrapped line and type a letter, the letter may appear in a different location in the wrapped line.\n  Sometimes I find that CodeMirror adds scrollbars inappropriately (most often due to browser zoom). Digging around suggested that it is some non-integers resulting in rounding up the measured size, and I haven't been able to find a case where the two values differ by more than one pixel, so simply setting the threshold one pixel higher seems to address the issue.\n\nThis PR forgives one pixel in the size comparison before drawing the scrollbars.\n The following repro works for me in Chrome 26.0.1410.63 (Linux)\n- Go to http://codemirror.net/demo/complete.html\n- Hit `Ctrl`+`+` twice\n- Update CM's size with `document.body.style.width = \"881px\"; editor.refresh();`\n another repro (Chrome 28.0.1500.20 OS X 10.8.3):\n- http://codemirror.net/demo/resize.html\n- `Ctrl` `+` for 125% zoom\n- refresh page\n @marijnh - can you show an example of what it would look like with hidden scrollbars and not drawn fake ones? I can't seem to make this happen.\n\nMy real goal here is actually to disable the scrollbars altogether - I simply never want scrollbars to be visible, but there doesn't seem to be any way to make that happen (`overflow: hidden` does _not_ work). I have autoresized CM areas, but if the text is zoomed, it ~always draws scrollbars even though there isn't any room to actually scroll.\n Both examples indeed reproduce the problem we also noticed in our app (Chrome 25.0.1364.160 Ubuntu 12.04). And the patch makes it disappear.\n\n@minrk, in https://github.com/ipython/ipython/pull/3358 you suggest it may be a bug in Chrome. And indeed the problem does not appear in Firefox. Have you filed a report with them?\n I haven't, but I should (or someone with more familiarity of browser internals / vocabulary should do so).\n\nI don't _know_ that it's a bug, but it is true that on Chrome the two sizes CM compares to determine whether there is a scrollbar can differ by up to one pixel before a scrollbar is actually added. I have not seen this discrepancy on other browsers, nor on Chrome without text zooming, so a bug seemed most likely to my na\u00efve eyes.  It's too bad there doesn't seem to be a direct js API for \"Is there an effing scrollbar?\"\n  1. Open http://codemirror.net/demo/indentwrap.html in a browser and resize the width of the browser window smaller so that you see some lines with line wrapping.\n2. Set cursor somewhere in the middle of a wrapped line (say the line after the line with number 5 displayed in the gutter).\n3. Hit Home/End key. On Mac use Cmd+Left/Right arrow key.\n\nResult: Cursor moves to the beginning/end of line 5. (ie. cursor is next to the number 5 in the gutter with Home key in my example)\n  Hi Marijn,\n\nThis pull request updates the Smarty mode for Smarty 3. For backward compatibility, I've left the default Smarty version to be 2, but people can enable it by adding a \"smartyVersion\" config option, set to 3. Otherwise, the mode should work exactly as before (despite the refactor).\n\nI've put up a demo here, that highlights the new features supported by Smarty 3, including nested functions, permissible standalone curly braces and other stuff:\nhttp://www.benjaminkeen.com/experiments/CodeMirror/mode/smarty/\n\nLet me know if you'd like me to change anything. Thanks!\n\nBen\n  This is needed, for example, for applying different color schemes to submodes.\n   Oh, we're gonna ditch version unless the repo doesn't have a tag - so as long as you tag your repo as vX.X.X or X.X.X (which it looks like you started doing with 3.13.0), you don't need to worry about it. \n I wouldn't remove the version yet - we need to update bower to use the [new spec](https://docs.google.com/document/d/1APq7oA9tNao1UYWyOm8dKqlRP2blVkROYLZ2fLIjtWc/edit#heading=h.et2qzfg7dk01) implementation. I just wouldn't worry about updating it for now, if you don't mind. \n yay! \n![](http://danheberden.com/share/88c9eeb.png)\n  Intent: the event is useful to get notifications about\nfuture changes of the document so that one might be able\nto update his own external document representation on an incremental\nbasis. This event is complimentary to the \"beforeChange\" event which\nmay be used for this purpose but which doesn't fire for the undo/redo\ncommands.\n Do you mean smth like [this](https://github.com/aslushnikov/CodeMirror/commit/b5d5511376e64d644120b845fa7c20b73aab6529)?\n That works for me, thank you for your time.\n  `beforeChange` event is not fired on undo/redo modifications\n\nTest case:\n- Goto http://codemirror.net/demo/complete.html \n- Open js console\n- Type `editor.on(\"beforeChange\", function() { console.log(\"beforeChange event\"); });`\n- Try playing with undo/redo stack: it changes document's contents but does not fire event\n  Adds two shortcuts as defaults on the Mac:\n- Cmd + Delete triggers killLine(), which deletes the text on a line after the cursor.\n- Cmd + Backspace triggers a new killLineSmartStart() function, which deletes the text on the line before the cursor (but preserves leading whitespace on the line)\n\nThese are common shortcuts in code editors (and many other text-content editors), such as:\n- Sublime Text 2\n- TextEdit\n- Eclipse\n- Chrome (url bar, dev tools)\n- and even Microsoft Outlook\n\nI only added these as defaults to the Mac shortcuts because I'm not sure what the equivalents are on Windows and other configurations (or if there even is a common equivalent).\n\nAs mentioned above, part of this change involved creating a new function killLineSmartStart(). It is basically a mashup between killLine() and goLineSmartStart(). There is probably some room for removing code duplication between those functions and the new one, but I didn't want to go that far in modifying the library.\n Would you be willing to consider pulling the killLineSmartStart() function, even without the default bindings?\n\nI'm interested in having these shortcuts in Brackets. I started by writing a Brackets plugin, but I wasn't able to access some of the CodeMirror hooks I needed to be able to do it well. (I do have a Brackets plugin working but it's pretty hacky -- it deletes one word at a time while testing if the cursor has reached the start/end position.)\n\nWith the killLineSmartStart() function then at least I would have something to hook into. Or if that's too specific, if I write a function for finding the \"smart start\" position would you consider taking that as a pull request? That's the main hook that I am missing to do a cleaner plugin.\n From a selfish perspective, I'd rather have higher-level APIs to write to, so in that sense I prefer having the killLineSmartStart() function =)\n\nBut yes, now that I've taken what I learned hacking on CodeMirror back to my Brackets plugin, these are the functions that I don't have access to that I would want to have access to if I'm creating a plugin with killLineSmartStart() functionality:\n- posEq() -- easy to replicate\n- Pos() function -- easy to replicate since I can still call new CodeMirror.Pos()\n- lineStart() -- has dependencies on other functions in the bidi code, so this is harder to replicate\n- getOrder() -- also tied into the bidi code\n\nThe other thing I'm using that doesn't seem to be officially documented is calling the killLine() command this way:\n- CodeMirror.commands.killLine(cm)\n\nThe killLine() function isn't listed in the API docs (and neither is the CodeMirror.commands mechanism of accessing it), so if there's an \"approved\" way of accessing it I'm not sure what it is.\n\nP.S. Thanks for being so responsive!\n  The current patch fixes two issues with normalMode macro:\n1. Eliminate the risk of wrongly matching `<C-[>ada<C-[>` instead of  `<C-[>`.\n2. Avoid logging `keyToKey` twice.\n  This changeset is to allow the `cm to vim` key conversion logic in `handleKeyEvent_` to be reused by our later `insertMode keylogger` upon raw key events.\n Looks good, thanks!\n\nBtw, before you start on coding up insertMode logging, it might be a good idea to write a short google doc with an implementation overview. This way we can agree on some details beforehand and can potentially save you from revising the approach later. Would be good for distilling your thoughts too. No pressure though, I'll be happy to just review a pull request too.\n  ``` SCSS\npadding: {\n  top: 40px;\n  bottom: 40px;\n}\n```\n\nis rendered with double indentation for the children of \"padding:\".\n Hey hey, we have this issue on CodePen too. A simple example is, which you can reproduce on http://codemirror.net/mode/css/scss.html --\n\nwrite like:\n\n```\na {\n  color: red;\n  &:hover, &:focus {\n```\n\nThen enter, you'll see the bracket goes indented too far. And the space before properties looks like it doubles.\n\nLet me know if I can help more!\n Things should be better with the attached patch.\n\n@dqminh I wasn't able to figure out what that line I removed was supposed to do (since I'm not very familiar with scss), but it caused problems in very common situations so I guess for now the code is better without it.\n Ah, never mind, I broke some tests, and now understand what the (rather obvious) point of that line was. Looking into it further.\n @marijnh @chriscoyier @dubiousdavid  i think the line was introduce here https://github.com/marijnh/CodeMirror/pull/1313/files#L0L449 with the purpose of handling `propertyValue` inside nested block.\n\nActually it wasnt obvious to me what the incorrect behavior is. When i pasted @chriscoyier example and press enter, it adds one more indentation level, and remove it when i pressed `}` to close. Which seems reasonable to me as it's easier to write new property this way.\n > Actually it wasnt obvious to me what the incorrect behavior is. \n\nThat's because I fixed it by now. It used to add two indentation levels.\n @marijnh ahhh i see the wrong behavior now when revert back to the last known bad state. Thanks a lot for the fix :heart: \n  1. Open http://codemirror.net/demo/indentwrap.html.\n2. Paste the following code.\n\n``` html\n<iframe src=\"http://loremipsum.com/?foo=lorem+ipsum+dolor+sit+amet&amp;bar=123.45,-67.890&amp;foobar=123.45,6.789&amp;foo=lorem+ipsum+dolor+sit+amet&amp;bar=123.45,-67.890&amp;foobar=123.45,6.789\"></iframe>          \n```\n1. Set the cursor somewhere after \"?\" and start typing.\n\nResult: Word wrapping rearranges the long line and then shows the cursor in a different place. Besides, the text you typed also appears in the wrong place (not where you typed in). If you don't see the issue, then resize your browser window so that you see some different line breaks in that long line and then try again.\n I tested in Safari, but I don't think the browser would matter.\n Thanks. It does fix the issue.\n  Our codebase contained something like:\n\n```\nCodeMirror.keyMap.basic[\"Up\"] = moveUpAcrossRegions;\n```\n\nWhere `moveUpAcrossRegions` used `moveV` internally. Shift-selections\nweren't working. Documentation stated that shift is passed through for\n\"go\" prefixed commands, so assumed this would work:\n\n```\nCodeMirror.keyMap.basic[\"Shift-Up\"] = \"goLineDown\";\nCodeMirror.keyMap.basic[\"Up\"] = moveUpAcrossRegions;\n```\n\nBut the shift was still being dropped. This commit makes the key event\nhandling properly passes it through.\n It's a solution I thought about but I would not like to put my `moveUpAcrossRegions` function into `CodeMirror.commands`. I'm compiling to JavaScript, so mutating an external object is slightly messier (plus, urgh).\n\nBinding a \"go\" command to a key enables Shift selection when Shift is pressed. Binding a \"go\" command to a key containing Shift does not enable Shift selection when Shift is pressed. Doesn't that seem inconsistent?\n I understand the intention. I think it's inconsistent. It just doesn't make sense that \"go\" means \"pass through shift\" unless it's actually bound to shift. That's a wat.\n\nYes, it's all crummy.\n  1. Open CodeMirror / mode / css / index.html in a browser.\n2. Paste the following css into the input field after the line starting with `@import url`.\n\n```\n#internal rect {  \n  fill: slategrey;  \n  stroke: black;  \n  stroke-width: 3;  \n  -webkit-transition: all 350ms;  \n}  \n\n```\n1. Look at the color of the css properties (fill, stroke and stroke-width) in the pasted block.\n\nResult: They're in red indicating that they're invalid CSS properties.\nExpected: CodeMirror should show CSS properties for SVG with the same color used for valid CSS properties.\n Not sure if this is latest, but it's a good start: http://www.w3.org/TR/SVG/styling.html\n  As a result of the discussions in #1527, we decide to use desktop vim key-notation instead of the current one.\n @mightyguava\nThe moment when I ran the test suite without changing the related tests, regressions popped out like a firework show...\n The current patch should address the above 4 comments, anything else need to be fixed?\n Looks good except the comment above.\n  This pull request is a break down from #1521, it allows vim normal mode to support register based macros.\n First round of comments. This is open discussion, so feel free to push back against any of my comments:\n- `@` should be repeatable\n- I really dislike duplicated logic. For `@@`, either simply merge it with `replayMacro` and add a special case for the `@` character, or have `replayLatestMacro` call `replayMacro` with `actionArgs.selectedCharacter` set to `registerName`\n- Instead of having a conversion from `normalModeKey` to `registerText`, what do you think about changing usages of `normalModeKey` in the keymap so that `normalModeKey == registerText`? The changes shouldn't be extensive and saves a level of complexity\n- Regarding storing the `keyBuffer` in registers, I'm wondering if it makes sense here. I might be making a horrible suggestion here and any divergences I've suggested to Vim has invoked hostile reactions so far so I want your take on this.\n  - The benefit of converting to text is that in Vim, you can actually open a register as a buffer and modify the macro, generate macros dynamically, as well as persist macros in your startup script. All of the above don't seem like it will ever be a part of the Vim mode, short term or long term.\n  - If we don't convert to text, we save quite a bit of complexity. The serialization/deserialization logic doesn't need to exist. The macros also have no reason to coincide with registers. Thus we can maintain separate sets of registers and macro keybuffers (since making macros keys and paste buffers persist in the same location can be a source of confusion).\n\n> This part really took me some effort to let it work. I tried to take the low-level hook approach, but it seemed like I'll need to change a lot of code, so instead of changing I feel much safer with adding.\n\nI appreciate that you are very careful about not regressing, but the \"I feel much safer with adding\" line of thought is going to increase technical debt and make things harder down the line. The accrued technical debt is why I decided to scrap the orignal vim mode implementation and start from scratch.\n - [x] @@ duplicated logic. For @@, either simply merge it with replayMacro and add a special case for the @ \n- [x] remove ugly swapping of 'q'\n- [ ] @ should be repeatable\n- [ ] change `normalModeKey` to `registerText` in defaultKeymap\n- [ ] `textRegister` vs `keyRegister` \n\n> `@` should be repeatable\n\nIt's already repeatable by `@@`, do you mean repeatable by `.`?\n\n> Instead of having a conversion from normalModeKey to registerText, what do you think about changing usages of normalModeKey in the keymap so that `normalModeKey == registerText`.\n\nThis is exactly what I wanted. Now that we've reached a consensus on this part, I'll do the following changes to the defaultKeymap:\n`Ctrl-a`  ->  `<C-a>`\n`C-Space`  ->  `<C-Space>`\n`C-Backspace`  ->  `<C-BS>`\n`Space`  ->  `<Space>`\n`Enter`  ->  `<CR>`\n`Backspace`  ->  `<BS>`\n`Tab`  ->  `<Tab>`\n\nRegarding to `textRegister` vs `keyRegister`, I personally in favor of the `textRegister` approach, since that could make future implementation of `.vimrc` more convenient. This is also for the sake of conforming to original Vim.\n\nThe `keyRegister` approach is not bad either, I'll regard it as a cached version of `textRegister`, I can still convert between key sequence and text stream when I need to. \n\nEither approach is fine with me, which one you see is more maintainable?\n\n> I appreciate that you are very careful about not regressing, but the \"I feel much safer with adding\" line of thought is going to increase technical debt and make things harder down the line. The accrued technical debt is why I decided to scrap the original vim mode implementation and start from scratch.\n\nSome times I fail to see some big ideas in terms of code quality and such, could you suggest me some trust-able reading materials for that?\n > Enter -> \\n\n> Backspace -> \\b\n> Tab -> \\t\n\nThe above 3 I would make `<Enter>`, `<Backspace>`, `<Tab>`. They do not directly translate to the escape sequences you specified. VIM uses special sequences to denote them as well, `^I` for `Tab` and `^M^ for`Enter`.\n\nWould you mind separating this set of changes into its own pull request as well, preceding this one? It would make it much easier on me to review and I'd really appreciate it.\n\n> Either approach is fine with me, which one you see is more maintainable?\n\nGo with the approach you prefer. Going back to `keyRegister` shouldn't be too hard if needed as far as I can see. I think at this stage the `textRegister` approach is overengineering but since you have it coded up and working I don't see a good reason to revert that. Wanted to bring up the alternative thogh.\n\n> Some times I fail to see some big ideas in terms of code quality and such, could you suggest me some trust-able reading materials for that?\n\nI think it's just something you end up picking up when you work on gigantic projects, but here's a couple references I found on the net. In my opinion, you are doing pretty well.\n\nhttp://salvetore.wordpress.com/2012/08/08/open-technical-debt/\nhttp://stackoverflow.com/a/162866\n > The above 3 I would make `<Enter>` `<Backspace>`\n\nYeah, I know you mean `<CR>` `<BS>`, by typing `:h key-notation` in vim, I found a complete list of vim's key-notations.\n\n> Would you mind separating this set of changes into its own pull request as well, preceding this one? It would make it much easier on me to review and I'd really appreciate it.\n\nSure, please see #1528.\n Since #1528 is merged, now our progress is updated to:\n- [x] @@ duplicated logic. For @@, either simply merge it with replayMacro and add a special case for the @ \n- [x] remove ugly swapping of 'q'\n- [x] change `normalModeKey` to `registerText` in defaultKeymap\n- [ ] `@` should be repeatable\n- [ ] finish `textRegister`\n\n> `@` should be repeatable\n\nCan it be more specific?  Repeatable by `@@` or `.`?\nIf it means `@@`, then I already have it implemented.\n > Can it be more specific? Repeatable by @@ or .?\n> If it means @@, then I already have it implemented.\n\nSorry, I meant it should be repeatable with a `count`. `2@@` should run the macro twice.\n Ah, good call, I'll fix it soon.\n - [x] @@ duplicated logic. For @@, either simply merge it with replayMacro and add a special case for the @ \n- [x] remove ugly swapping of 'q'\n- [x] change `normalModeKey` to `registerText` in defaultKeymap\n- [x] `@` should be repeatable\n- [ ] finish `textRegister`\n\nSeems like the only thing left is to delete `normalModeKeyToTextToken` and its call sites. Anything else I'm missing?\n > Seems like the only thing left is to delete normalModeKeyToTextToken and its call sites. Anything else I'm missing?\n\nSounds right. The `buildLookup` function would make more sense to have in the insert mode implementation if you weren't planning to remove it already.\n - [x] @@ duplicated logic. For @@, either simply merge it with replayMacro and add a special case for the @ \n- [x] remove ugly swapping of 'q'\n- [x] change `normalModeKey` to `registerText` in defaultKeymap\n- [x] `@` should be repeatable\n- [x] finish `textRegister`\n\n---\n- [x] Transparentize hidden states\n- [x] Revise logKey logic\n- [x] IE compatible array.forEach\n- [x] Remove deprecated lookups\n\nAnything else need to be fixed?\n Just a couple more nits. Thanks for following through with this.\n Alright, that should do it.\n Looks good to me. Thanks again.\n @marijnh \nThe changeset in #1517 is now merged to this branch. #1517 is no longer needed, please discard it.\n  This pull request is responding to the received suggestions from #1521.\n\n`actionArgs.insertAt` can be later used for recording cursor behaviors for latest `enterInsertMode` commands.\n Looks good. Nit: in general, prefer `==` over `===`.\n > Nit: in general, prefer `==` over `===`.\n\nAfter viewing the benchmarks from\nhttp://jsperf.com/comparison-of-comparisons\n\nI kinda agree with you.\nIn Chrome, `===` is no longer faster than `==`\n That should do it.\n Looks good. Thanks.\n  1. Open http://codemirror.net/demo/closetag.html in a browser.\n2. Switch to Chinese IME (pinyin - simplified).\n3. Delete `<html` and type \"pin\". On Windows you need to hit space bar to see the candidate window.\n4. Select any Chinese character from the candidate window.\n5. Press Ctrl-Z to undo.\n\nResult: You will see \"pin\" appear in place of the Chinese character.\nExpected: Should just remove the Chinese charter and no need to show English alphabets used in composition.\n  Addresses issue #1484 and speeds up mark-selection add-on by\nmaintaining text selection coverage with small chunks of text marks.\n Great, thanks!\n  Right click + \"select all\" does not work under IE9 & IE8 whereas it does under Firefox/Chrome.\n\nUsing keyboard shortcut \"Ctrl+A\" does work though.\n  A bit nervous about this change. Repeatedly introduced infinite loops in the code while I was tweaking it. I think I worked them all out and the unit tests have OK coverage.\n\nIn searchcursor.js:\n- Makes \"backtracking\" matches match forward search matches.\n- Fixes \"0 or more\" `\\w*` type searches\n\nFor \"0 or more\" type searches, any character will now produce a match, since it can technically match the empty string.\n\nIn vim.js:\n- Greedy regex searches will no longer match submatches. i.e. for query of `\\w+`, and text of `abc def`, `abc` and `def` will be matched, but `bc`, `c`, `ef`, nor `f` will be matched.\n  - Refactored core `moveToWord` logic to be cleaner, and prepare to possibly move clipping logic over\n- Now treating empty lines as words for word navigation motions other than `e`, matching VIM\n- Modified whitespace clipping logic to properly account for multiple whitespace lines and empty lines\n- Lots of unit tests\n So this breaks in the case of:  (interpret \"*\" as a space)\n\n```\nword1\n**  \n**word2\n```\n\nIf I place the cursor on the \"o\" in \"word1\" and press \"dw\" I end up with:\n\n```\nwoword2\n```\n\nAnd I should end up with:\n\n```\nwo\n**\n**word2\n```\n Can't believe I forgot to test that case. Disadvantages of coding past 3am. Fixed. Let me know if you find any other issues.\n I can't seem to break it!  Also it looks like this fixes all sorts of stuff, like \"dH\", \"dL\", etc.  :D\n  Supporting aligned calls functionality (for function calls that contain at least one-parameter in the first line) along with dontAlignCall (which will be indented by statementIndentUnit) for function calls that doesnt contain parameters in the first line.\n\nvoid foo(\n    int i, <== indented by statementIndentUnit (instead of indentUnit).\n    int j) {\n\n https://groups.google.com/forum/#!topic/codemirror/mGAd18fcHZc\n Here is the use case:\nFor .java we are using 4-space indentation for multi-line function calls.\nWe configure codemirror with dontAlignCalls for .java files.\n\nFor .cc files, we align calls if there is at least one parameter in the\nfirst line of function call. If first line of function call doesnt contain\nany parameter, we indent sub-sequent lines in the function call with\n4-spaces.\n\nexample:\nvoid aligned(int i,\n                  int j, // aligned multi-line function calls\n                  int k) {\n\nvoid foo(\n    int i, // aligned with 4-spaces -- similar to dontAlignCalls; but align\ntakes priority\n    int j,\n    int k) {\n\nThx,\nChandra\n\nOn Sun, May 12, 2013 at 11:23 PM, Marijn Haverbeke <notifications@github.com\n\n> wrote:\n> \n> Do you really need both modes (dontAlignCalls and dontAlignCalls +\n> nonAlignedCalls)? I find the names sound like both do the same thing, and\n> in fact, I'm not entirely close on what the difference is.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/marijnh/CodeMirror/pull/1518#issuecomment-17794517\n> .\n\n## \n\nChandra\n// follow me @ http://twitter.com/pydichandra\n\n```\n \"Overcoming the unexpected and discovering the unknown is what ignites our\nspirit.  It is what life is all about.\"\n```\n  Seems like the unit tests does not cover this set of features.\n\nWhen I press `zz``zt``zb`, the text doesn't scroll for me.\nBut when I run `CodeMirror.Vim.handleKey(cm, 'z')` twice from console, the text scrolls as expected.\nPretty weird.\n\nWith a little inspection, I figure out it's caused by `cm.scrollIntoView()`.\n\nThe current patch uses some minor tweaks to work instead of `cm.scrollIntoView()`.\n Not quite familiar with this CodeMirror scrolling. I think I mostly copied from a discussion on the google group for this.\n\n@marijnh would you mind reviewing this one? It scrolls the current cursor position to the top, center, or bottom of the page. No vim specific knowledge is needed.\n @marijnh Testing DOM related stuff across a bunch of browsers manually is a painful experience, the current patch doesn't cover test cases for IE, hope this suffices.\n Oops, never saw that coming. In that case, I'll change the tests to a more robust form.\n I tried the duplicated computation approach, but I couldn't get it right, there's always a few pixels off, to figure it out might take far too much time. Here I just do a simple check for zb<zz<zt.\n > Almost. I still get this failure:\n> \n>  vim_zt==zEnter\n>   3255 != 2812\n\nPredictable, since #1528 is merged before this one, the old `Enter` no longer be a valid key in vim keymap.\nI'll change it to `<CR>` to fix this issue.\n > Please condense both down to a single commit, put them on the same branch, make sure the tests pass, and overwrite one of the pull requests with the result, closing the other.\n\nAlright, the current change set is merged to #1527, please discard this pull request as soon as you merged #1527.\n  When Ctrl-o/Ctrl-i tries to jump back to bookmarks that are no longer on the text buffer, exceptions occurred. This patch is aiming at fixing such issue.\n Looks good to me.\n  In Brackets, we noticed a performance regression since we've upgraded to version 3. I've narrowed this down to the fact that we removed the default `border-right: 1px solid #ddd;` on `CodeMirror-gutters`.\n\nI've reproduced this using a boilerplate CodeMirror demo here http://jsfiddle.net/jason_sanjose/zYeUJ/8/embedded/result/ and using the Chrome dev tools timeline to capture performance when typing a character in the editor. \n\nThe screen shot below shows a `Paint` event with a repaint region shown for the entire window. Normally, we should only see repaints for the new character, the line element and possibly the line gutter.\n\n![repaint performance](https://f.cloud.github.com/assets/1148713/484183/8dba8aae-b8d2-11e2-9e34-262f7bc3a215.png)\n Hmm, that didn't work for me on Chrome 26.0.1410.65 on mac. You meant `.CodeMirror-gutters { clear: both; border: none; }` right? I tried that in developer tools with this demo http://codemirror.net/demo/resize.html and I still see the  whole editor repaint.\n Ah, that makes sense. That patch fixes my jsfiddle example. I'll try this out in Brackets.\n  1. Open http://codemirror.net/demo/closetag.html in a browser.\n2. Switch to Hiragana mode in Japanese IME.\n3. Type `p`.\n4. Type `a`.\n\nResult: No underline for letter p in step 3 and \u3071 in step 4.\nExpected: Should show underline to indicate that those characters are part of composition and not final characters yet.\n  1. Open http://codemirror.net/demo/closetag.html in a browser.\n2. Paste the following html into the text field.\n\n```\n<html>\n  <ul>\n    <li>\uae4c\uce58\ubc1c</li>\n  </ul>\n</html>\n```\n1. Double-click on Korean characters.\n\nResult: `>` before Korean characters and `</` after these characters are also selected.\n  Now % works like original.\n I vaguely remember that `findMatchedSymbol` has a few corner cases that can cause it to throw exceptions, and there was a plan to follow CodeMirror's `matchbrackets` code to do this https://github.com/marijnh/CodeMirror/issues/1031.\n\nDid you check corner cases? Deleting line 8 in the vim demo seems to cause brace seeking to completely fail.\n @mightyguava \nDeleting line 8 in vim demo won't reproduce the bug for me, brace seeking still works as intended.\nAre there any other ways to test these corner cases?\n Turns out it was a bug with the jumpList. I didn't check the exception before. Made a comment on the pull request.\n\nCan't pick out any corner cases at the moment. We can fix things as they come along if there are still issues.\n\nThe work mentioned in https://github.com/marijnh/CodeMirror/issues/1031 would still be useful so that vim can skip over braces in comments and quotes, if you are interested. Thanks for the continued contributions.\n Thanks for spotting the jumpList bug, I've opened up #1515 to address the issue.\nRegarding to #1031, I'll spend some time to get my bearings.\n The current patch makes the forward seeking a bit different than the original:\n\n```\nOriginal: %forward seeking does not skip \"comments/quotes\"\n\nCurrent patch: Skip \"comments/quotes\" if cursor is outside of \"comments/quotes\", \n                     otherwise seek to match-able brackets\n```\n\nThis is a bit beyond the original, do we want this feature?\n\n Besides, now the bracket-matching handles comments/quotes almost the same as original:\n\n```\nCursor outsides \"comments/quotes\" only matches \nother outsiders(brackets outside \"comments/quotes\").\n\nBut insiders can match both insiders and outsiders.\n```\n\nFrom what I've got so far, it's technically feasible to eliminate all the bracket-matching inside \"comments/quotes\", so that insiders would never match any insiders or outsiders, but that would make it nonconforming the original, do we want it? Or shall we leave it like this to conform with the original?\n As much as VIM's behavior feels like a bug, let's conform to it as has been done previously when there were choices as to whether to diverge.\n I'm kinda scary of touching the `vimApi`, but in order to allow toggling optional behaviors, I've added `CodeMirror.Vim.settings.changeDefaultKeymapBehavior_()` for changing `motionArgs` in the `defualtKeymap`.\nIt might look a bit ugly to you though, please let me know what you think and give me some suggestions to make it look good.\n It would be best if defaultKeyMap was treated as immutable. There are a few things that need to be done before this set of changes.\n1. The default keymap needs to be made/copied into a per-instance map so that we can make local and global changes to the keymaps (or maybe have an instances of custom local/global keymaps in addition to default keymap).\n2. Make ex mode's set keymap behavior not write directly into default keymap\n3. I think a more appropriate way of setting options would be to implement `set` and `setlocal` like in Vim, as well as exposing a programmatic interface similar to `cm.setOption`.\n\nI've been meaning to do this for a long time but it'd be a big batch of changes and haven't found time to do so. Would you be OK with keeping the original, un-customizable behavior as the only option for now since it matches desktop VIM, and revert the last change?\n Is this good enough? What else shall I do?\n Looks great. Thanks!\n  One can't pass compression parameters to local uglifyjs using bin/compress (and it doesn't pass any by default)\n\nOnline:\nnode bin\\compress codemirror\n=> 101 kB\n\nLocal:\nnode bin\\compress --local C:[path]\\uglifyjs.cmd codemirror\n=> 148 kB\n\nbin\\compress modified to run uglifyjs.cmd with -c -m\n=> 101 kB\n  Currently, running a vim command like `:w` doesn't work--it throws an exception when closing the dialog because it tries to call `callback`, which doesn't exist. If I'm understanding the code correctly, it should call `onClose` instead.\n\n(It looks like this code has been in there for a long time, so I'm not sure why this hasn't caused a problem before--maybe no one is using the default implementation of `openDialog()`.)\n You are right, my bad. Thanks for the fix.\n  A line break with dimension (e.g. \"\\\\[1cm]\") was being parsed as the start of an equation (\"\\[...\\]\").\n\nFix: \"\\\\\" is now matched before \"\\[\".\n\nTest added.\n  One of the killer features in Vim, which allows user to jump around previous cursor positions.\n\nHere's how vimdoc defines a jump:\n\n> A \"jump\" is one of the following commands:  `'`, `backtick`, `G`, `/`, `?`, `n`,\n> `N`, `%`, `(`, `)`, `[[`, `]]`, `{`, `}`, `:s`, `:tag`, `L`, `M`, `H`  and\n> the commands that start editing a new file.  If you make the cursor \"jump\"\n> with one of these commands, the position of the cursor before the jump is\n> remembered.  You can return to that position with the \"''\" and \"``\" command,\n> unless the line containing that position was changed or deleted.\n\nI tried to make it match the original as much as I could,\nhowever there's still something **missing** in my implementation:\n1. recording postion for `(` `)`  _(depending on sentence motions which is not yet implemented)_\n2. cross-file jumps _(depending on native file buffer support)_\n Cool feature. I didn't know about it.\n\nIt mostly looks good. In addition to the in-code comments above, I believe the jumplist commands should NOT be motions? i.e. the key sequence `d`, `Ctrl-o` should not be orthogonal and should not delete everything between the cursor and the previous position in the jumplist.\n\nChanging them to `actions` should fix the orthogonality problem. It looks like they also aren't supposed to work in visual mode, but it's not too important to match this, though it'd be nice as a future improvement.\n > Cool feature. I didn't know about it.\n\nSeriously? I'm interested how you do the similar thing without using this feature?\n\n> I believe the jumplist commands should NOT be motions? i.e. the key sequence d, Ctrl-o should not be orthogonal and should not delete everything between the cursor and the previous position in the jumplist.\n\nGood call, I didn't even think about the orthogonality issue.\n With the current patch:\n- [x] cm.setBookmark moved into the jumpList logic\n- [x] bookmark.clear() being called when the bookmark is removed from the jumpList\n- [x] use cursorEqual() instead of the reimplemented one\n- [x] changed from motion to action to fix orthogonality issue\n- [x] suppress this action in visualMode\n- [ ] create test cases (in progress)\n This looks good to me. @marijnh please merge when @lynschinzer commits the unit tests. No need for another review from me.\n\nThanks for the continued contributions!\n @marijnh\nTested on Chrome/Firefox/Opera, all my tests passed.\n  Improve character, symbol literals syntax and remove unused variable.\n  If a code mirror instance is in an DIV with \"display:none\", when I use JavaScript to change this DIV's style \"display\" to block, an error occurred (Line number and content text hidden), futuremore, I find that when I use css \"visibility\" property will not cause this problem.\n  There are several variants of the bug, but, most basically, if you have this text and are sitting on \"A\":\n\n`foo bAr baz`\n\nAnd you execute `diw`, you'll get:\n\n`foo r baz`\n\nInstead of:\n\n`foo  baz`\n\nThis issue affects all of the following delete motions: `diw`, `daw`, `diW`, `daW` as well as their change (`ciw`...), yank (`yiw`...) and visual (`viw`...) variations.\n\nI created 28 tests covering various edge cases (26 cases fail without the patch) and all now pass. lint was happy as well.\n\nLet me know if there's anything you'd like me to change \u2014 style, completeness or otherwise.\n\nThanks!\n I'd been hoping someone would take a serious crack at fixing text objects. This is one of the best patches I've seen so far. Great job and thanks for the unit tests!\n\nThe patch mostly looks good, except that I think you need to also consider words separated by multiple spaces? Your patch seems to only take into account single spaces.\n I'd be happy to. Give me a few minutes or so and I'll push again.\n @mightyguava Good call. Vim deletes all whitespace trailing or preceding for the \"a\" inclusive motions. This will take longer as I adjust the code. I'll update the pull request with the new changes when they're done.\n This updated push addresses both the multi-whitespace tests and the fixed logic to handle the multi-whitespace inclusion. Really, the logic reads more like the Vim behavior now anyways.\n\nLet me know if there are more tests or other changes to the commits you'd like to see.\n Looks good to me. Thank you for taking the time to make these changes. I really appreciate your attention to detail. Lots of people will be happy to see these fixes :)\n Thanks! I really appreciate the project and hope to contribute again. :)\n Thanks +1, this patch is seriously awesome!\n  WebKit on Mac does not honor autocorrect=off like WebKit on iOS, but it does honor\nspellcheck=false. CodeMirror should set spellcheck=false to prevent OS X from autocorrecting while typing.\n  Applies to commit 9d92920b4fbb2d50f0246ebae3eeacef50bd56f4\n\nI'm attempting to enable \"lintWith\" for javascript files but not for HTML. With any commit between v3.12 and the commit before this one, I could switch between file types. From this commit onwards, the gutters are initially drawn incorrectly as shown in the screenshots. If you reload the file, it is then drawn correctly. This is a single instance of the editor. The tabs switch between two documents using cm.swapDoc (which works brilliantly). However these screenshots are immediately after reloading the file. The loading sequence is:\n1. cm.setOption(mode)\n2. If mode is javascript cm.setOption('gutters', [\"CodeMirror-lint-markers\"]) followed by cm.setOption('lintWith', CodeMirror.javascriptValidator)\n3. Otherwise cm.setOption('gutters', []) followed by cm.setOption('lintWith', false)\n4. cm.setValue(text-from-file)\n\nIt seems that this change has altered the way the gutter widths are calculated\n\n![gutter_issues](https://f.cloud.github.com/assets/1315648/462622/c4a6019a-b4c9-11e2-9763-159cc1a16ed1.png)\n Here is an example which runs from the codemirror/demo directory. With CM v3.12 it works as expected but after \ncommit 9d92920b4fbb2d50f0246ebae3eeacef50bd56f4 the first button click redraws the gutter incorrectly and you have to click the button a second time to get the desired effect.\n\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>CodeMirror: Gutter Issue</title>\n    <link rel=\"stylesheet\" href=\"../lib/codemirror.css\">\n    <script src=\"../lib/codemirror.js\"></script>\n    <link rel=\"stylesheet\" href=\"../theme/cobalt.css\">\n    <script src=\"../mode/javascript/javascript.js\"></script>\n    <link rel=\"stylesheet\" href=\"../addon/lint/lint.css\">\n    <link rel=\"stylesheet\" href=\"../doc/docs.css\">\n\n    <style type=\"text/css\">\n      .CodeMirror {border: 1px solid black; font-size:13px}\n    </style>\n</head>\n<body>\n    <h1>CodeMirror: Gutter issue</h1>\n    <p>CM v3.12 is fine but after the commit \"coverGutterNextToScrollbar\" you have to set the gutter twice</p>\n    <textarea id=\"code\" name=\"code\">\nfunction findSequence(goal) {\n  function find(start, history) {\n    if (start == goal)\n      return history;\n    else if (start > goal)\n      return null;\n    else\n      return find(start + 5, \"(\" + history + \" + 5)\") ||\n             find(start * 3, \"(\" + history + \" * 3)\");\n  }\n  return find(1, \"1\");\n}\n    </textarea>\n    <p>\n    <button type=button onclick=\"setgutter()\">set gutter</button>\n    <button type=button onclick=\"cleargutter()\">clear gutter</button>\n    </p>\n<script>\n    var editor = CodeMirror.fromTextArea(document.getElementById(\"code\"), {\n        lineNumbers: true,\n        theme: 'cobalt'\n    });\n\n    console.log('CodeMirror version: ' + CodeMirror.version);\n\n    function setgutter() {\n        editor.setOption('gutters', ['CodeMirror-lint-markers']);\n    }\n    function cleargutter() {\n        editor.setOption('gutters', []);\n    }\n</script>\n</body>\n</html>\n```\n Looking at your other suggestions:\n1. If option fixedGutter is set to false, the buttons in the demo work as expected\n2. Can't make option coverGutterNextToScrollbar do anything\n\nThe problem seems to be in the left position of the CodeMirror-gutters element, for example here it is with the problem but when you click the \"set gutter\" button a second time, it changes to 0px:\n\n```\n<div class=\"CodeMirror-gutters\" style=\"left: 16px;\">\n    <div class=\"CodeMirror-gutter CodeMirror-lint-markers\"></div>\n    <div class=\"CodeMirror-gutter CodeMirror-linenumbers\" style=\"width: 28px;\"></div>\n</div>\n```\n Thank you for the quick fix and confirming that gutters are agaiin working as expected.\n  The two styles used by the lint add-on for errors and warnings have class names like \"CodeMirror-lint-span-error\". These clash with bootstrap rules that match any class name with \"span\" in it, leading to the misalignment shown in the attachment (error is missing right parenthesis).\n\nA simple workaround would be to change these class names in lint.css to \"CodeMirror-lint-marked-error\" and \"CodeMirror-lint-marked-warning\" and the string in lint.js to \"CodeMirror-lint-marked-\". I couldn't find any other examples of \"span\" being embedded in a CodeMirror class name.\n\n![js error](https://f.cloud.github.com/assets/1315648/462319/5ad37e6e-b49c-11e2-9b33-7cd09519f57b.png)\n Hi Marijnh Thanks for fixing this so quickly. This is to confirm that the issue is fixed. Unfortunately, advancing from v3.12 to this latest commit has uncovered an issue with gutter widths. Sorry about that. david\n   Thanks for contributing to the Vim keymap!\n\nLooks good. Just 2 minor comments.\n1. Could you rename overwriteMode to replaceMode to better match vim naming?\n2. @marijnh toggleOverwriteMode doesn't appear to be part of the documented API. Is it safe to use here?\n Just noticed that the backspace behaviour is not quite original: should undo character input unless cursor was moved, I think, otherwise just move cursor left.\n ...still not original, but a bit better.\n  The color list is incomplete.\n\n``` js\n  var colorKeywords = keySet([\n    \"aliceblue\", \"antiquewhite\",\"aqua\",\"aquamarine\",\"azure\",\"beige\",\n    \"bisque\", \"black\", \"blanchedalmond\", \"blue\", \"blueviolet\", \"brown\",\n    \"burlywood\", \"cadetblue\", \"chartreuse\", \"chocolate\", \"coral\", \"cornflowerblue\",\n    \"cornsilk\", \"crimson\", \"cyan\", \"darkblue\", \"darkcyan\", \"darkgoldenrod\",\n    \"darkgray\", \"darkgreen\", \"darkkhaki\", \"darkmagenta\", \"darkolivegreen\",\n    \"darkorange\", \"darkorchid\", \"darkred\", \"darksalmon\", \"darkseagreen\",\n    \"darkslateblue\", \"darkslategray\", \"darkturquoise\", \"darkviolet\",\n    \"deeppink\", \"deepskyblue\", \"dimgray\", \"dodgerblue\", \"firebrick\",\n    \"floralwhite\", \"forestgreen\", \"fuchsia\", \"gainsboro\", \"ghostwhite\",\n    \"gold\", \"goldenrod\", \"gray\", \"green\", \"greenyellow\", \"honeydew\",\n    \"hotpink\", \"indianred\", \"indigo\", \"ivory\", \"khaki\", \"lavender\",\n    \"lavenderblush\", \"lawngreen\", \"lemonchiffon\", \"lightblue\", \"lightcoral\",\n    \"lightcyan\", \"lightgoldenrodyellow\", \"lightgray\", \"lightgreen\", \"lightpink\",\n    \"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\",\n    \"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\", \"linen\", \"magenta\",\n    \"maroon\", \"mediumaquamarine\", \"mediumblue\", \"mediumorchid\", \"mediumpurple\",\n    \"mediumseagreen\", \"mediumslateblue\", \"mediumspringgreen\", \"mediumturquoise\",\n    \"mediumvioletred\", \"midnightblue\", \"mintcream\", \"mistyrose\", \"moccasin\",\n    \"navajowhite\", \"navy\", \"oldlace\", \"olive\", \"olivedrab\", \"orange\", \"orangered\",\n    \"orchid\", \"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\",\n    \"papayawhip\", \"peachpuff\", \"peru\", \"pink\", \"plum\", \"powderblue\",\n    \"purple\", \"red\", \"rosybrown\", \"royalblue\", \"saddlebrown\", \"salmon\",\n    \"sandybrown\", \"seagreen\", \"seashell\", \"sienna\", \"silver\", \"skyblue\",\n    \"slateblue\", \"slategray\", \"snow\", \"springgreen\", \"steelblue\", \"tan\",\n    \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\", \"white\",\n    \"whitesmoke\", \"yellow\", \"yellowgreen\"\n  ]);\n```\n\nBut \"yellow\" and \"white\" should be suppressed from  var valueKeywords = keySet([.\n  This is for issue #1485.\n\nI added a new parameter to `updateScrollbars()`, but it seems like just passing `cm` to that function is a littler cleaner, so let me know if I should change it.\n\nI didn't make it an option because I don't know why anyone would not want it this way. Let me know if you still want it as an option.\n  Added a 'CodeMirror-code' css class to the div containing the pre elements with the code. I found this useful to differentiate the pre elements from the ones present in CodeMirror-measure div when doing some specific DOM manipulations.  \n  This fixes a problem with the rrunmode addon in which copy and paste in IE results in newlines being stripped.\n\nA related problem with [google-code-prettify](https://code.google.com/p/google-code-prettify/) is discussed [here](http://stackoverflow.com/questions/136443/why-doesnt-ie7-copy-precode-blocks-to-the-clipboard-correctly).\n\nThe solution in this pull request is to change to using newlines instead of `<br/>`.\n\nPlus there is some special handling for IE8 and earlier, inspired by [google-code-prettify](https://code.google.com/p/google-code-prettify/source/browse/trunk/src/prettify.js#1203)\n does it work? I've opened index page on codemirror site and copied code on main page. It still doesnt copy formatting\nhttp://clip2net.com/s/6vB2gO\n It is not supposed to copy any non-textual formatting.\n I know. Under formatting I mean new line\n What you are describing definitely does not have anything to do with the original intent of this pull request. Could you open a new issue, and mention which version of IE you are using, as well as what exactly, step by step, you are doing?\n  Hi Marijn,\n\nI have created the fullscreen addon for my CodeMirror-Eclipse (https://github.com/angelozerr/CodeMirror-Eclipse) because I embed CM in a Eclipse EditorPart with fullscreen mode.\n\nThis addon is just a copy/paste of the javascript of your demo/fullscreen.html. Here the benefit with this addon : \n\n1) avoid copying/pasting the fullscreen javascript of demo/fullscreen.html to manage fullscreen (just include the addon/display/fullscreen.js\n2) can initialize the fullscreen with options : \n\n---\n\nvar editor = CodeMirror.fromTextArea(document.getElementById(\"code\"), {\n  ...\n  fullScreen:true\n## }\n\nI have created too a fullscreen.css (copy/paste the style included in the demo/fullscreen.html. I have just modified the z-index because my completion is not displayed.\n\nI have modified the fullscreen demo with this new addon.\n\nHope you will like it.\n\nRegards Angelo\n If I understand your comment, your fullscreen javascript in your demo cannot be used for editor which is inside  a relative or absolutely positioned element? \n\nIn my case, I use this javascript like your demo, so it works for  me. I will host this addon on the CodeMirror XQuery.\n\n Regards Angelo\n  Hi,\n\nWhen using the 'text/x-sql' mode I get the wrong color coding in a specific case.\n\nBug:\nWhen having the following characters: .e\n\nThe result is '.' in black and the 'e' in green.\n\nHowever, when switching the 'e' character to any other alphabetic character, the alphabetic character is displayed in blue.\n\nThis behavior also occurs when the character is in uppercase.\n\nI saw this behavior on Google Chrome and on IE9. I was able to reproduce this behavior with the demo on the web site.\n\nExpectation:\nI expect the color of the alphabet character following the '.' character to always be the same. In this case it should be blue.\n\nLet me know if someone is able to fix this.\n\nThank you,\n\nAlexis Theriault\n  In MacOS X (with trackpad), there's a \"Three finger drag\" gesture that can be used to select text. Deleting a selection done in codemirror using this gesture often results in the selection being restored after the lines have been deleted.\n\n**Steps to reproduce:**\n_I haven't been able to pinpoint this so far or generate a reliable set of steps to reproduce, but the frequency with which this happens is quite high that this should be easily discoverable._\n- Open any codemirror demo page (preferably one with long text such as http://codemirror.net/demo/html5complete.html or http://codemirror.net/demo/search.html).\n- Randomly use the three finger drag gesture to create a selection of 4-6 lines.\n- Press backspace to remove the lines.\n\n**Result:**\nOften, the selection will be restored after being removed.\n\n**Expected:**\nThe selection to not be restored.\n Hi @marijnh, sorry it's taken me so long to get back at this. \n\nI've verified that the `done` function is indeed called, but it has some delay with respect the regular mouseup event. Also, yes, the selection is the normal CodeMirror selection, everything behaves as if regular mousedown-move-up events are triggered.\n\nThe problem is that it works like this by design. It is designed to let the user resume the gesture after briefly lifting the fingers, in order to make adjustments to the selection. For that, the OS seems to introduce a small delay before dispatching the mouseup event, which is cancelled it if the gesture is resumed before the delay has finished.\n\nWith this in mind, I'd say a possible fix would be to _invalidate_ or force _complete_ the current select operation after a keypress if we are on this case. Does that sound right to you? Is there already any similar case?\n Afaict there's no _native_ way to detect this case. I've checked, and the mouse events in both cases are exactly the same, so there's no way to tell them apart based on any event-related information.\n\nOne thing I've noticed though, is that inside `done`, in the regular case the mouseup event is immediate, and `cur = posFromMouse(cm, e)` always matches the position from the last mousemove. Checking that this condition holds true before the `doSelect(cur)` fixes this issue. Going even further, it looks as if this `doSelect(cur)` could just be removed. Do you think it would be ok to do so? Is there a case in which it makes a difference?\n Yes, simply removing the `doSelect` does fix this issue and doesn't seem to introduce any noticeable issues.\n\nThe `done`'s body already executes only once. The problem is that it executes well after other actions like keypresses that change the cursor position discarding the selection, so the resulting effect is like it restores it.\n\nAnother possible option if you don't want to just remove the `doSelect` call could be to expose the `up` operation so that we could detach it from `mouseup` on the `keypress` handler.\n Thanks a lot! I've pulled the latest changes and the issue doesn't reproduce anymore :)\n\nAbout the editor not being focused right ahead... I haven't seen anything weird so far. Can you elaborate a set of steps that you think could cause problems?\n\nIn any case, this looks good to close! Thanks again! :)\n  This is the start of an @import context in css mode.\n\nIt needs more styles, but this makes it much easier to provide url hinting for @import rules.\n\nurl() is currently given a \"tag\" style only to match what the style was before -- not sure what the best style should be. All of the media types/queries could also be improved.\n  If you load htmlmixed.js on the same page that's viewing a CodeMirror instance in Markdown mode, it stops the XML parts from coloring. The Markdown parts will color fine, but the XML parts won't.\n\nExample:\nhttp://www.mattpass.com/c.htm\n\n(This is exactly the same as your own Markdown demo page (though I am loading the JS files remotely for this demo) and also included the htmlmixed.js file on line 11).\n\nIf you remove...\n\n```\n<script src=\"http://codemirror.net/mode/htmlmixed/htmlmixed.js\"></script>\n```\n\n...on line 11 in my example, the XML part of the Markdown document colors fine.\n  It would be nice to have a scrollbar filler on the left side of the horizontal scrollbar when line numbers are showing, so line numbers are not displayed next to the horizontal scrollbar.\n\n![linenumbers1](https://f.cloud.github.com/assets/1197144/444872/e0f41e82-b1ad-11e2-89c6-7b1fbb4e0388.png)\n  #### Problem/Intent\n\n`mark-selection` addon is slow. \n\nStep-by-step repro\n- Go to http://codemirror.net/demo/markselection.html\n- Copy-paste lines to get about 70k lines total\n- Select first 60k lines\n- Try to extend selection with Shift-PageDown/Shift-ArrowDown\n\n**Expected**: works as fast as codemirror's selection without this add-on\n**Actual**: rendering lags\n\nThe problem escalates quickly if the selected text has syntax highlight - In my case things get slow after selecting first 400 lines of js code.\n\nIt looks like the problem is in \"markText\" function - the addon remarks text on every selection change. Is it possible to update mark instead of recreation?\n This is well known, and does not have an obvious solution (except simply not using the addon). I accepted the code as a contribution, which might not have been a good idea, since it is written in a very naive way. I am not supporting it, though.\n\nUpdating markers is not something I want to add (since it's messy), but one avenue you might try is to make the plugin smarter -- having it create its markers in 10-line blocks, for example, so that you only have to update small ranges when the edges of the selection change.\n Thanks for the reply,\n\nI'll give it a shot.\n  In some cases it's more convenient to access `CodeMirror`\nfrom the instance itself, but the way prototype was defined\nmade `editor.codemirror` be an `Object` instead.\n  Javascript indentation works fine except at one place.\n\nWhen I hit enter when a cursor is before a closing bracket, indentation does not work.\nfunction myFunction(){\n}\n\nThe cursor stays right before the closing bracket.\n You replied for this  as follows\n\"This is intentional. People tend to align their closing brackets with the line that opened the bracket. I'd be okay with a pull request that makes this configurable (on the mode level).\"\n\nBut I still want indentation to work as follows\n When user hits enter, it should create an extra line between the brackets and automatically indent.\nPlease help.\n Firstly, I'd appreciate if you stopped opening issues. You can comment on a closed issue, and the proper avenue for support requests in the mailing list.\n\n> But I still want indentation to work as follows\n\nCodeMirror is configurable. You can write code to make it do that. The default behavior is going to stay the way it is.\n Thanks. I did not know that I can comment on a closed issue. \nActually I was not asking to change your javascript.js code. I want to know which code should I modify to acheive the following scenario.\nThe cursor is between the opening and closing bracket {cursor} . When user hits enter, \n1) Cursor should be indented on a new line\n2) And the Closing bracket should go to the next line and should be aligned accordingly.\n\nPlease let me know.\n  I'm new to CodeMirror and tried to look in the documentation, but found nothing.\n\nIs there a way to set extra space when the cursor reach the edge of window like shown in the screenshot?\n\n![Screen Shot 2013-04-23 at 2 50 47 AM](https://f.cloud.github.com/assets/525332/410962/9e195068-ab7d-11e2-8b1e-71f02c07ea59.png)\n There wasn't, but it was trivial to add. See 94007aacbe84046a1fb898aff065c03ee1ce3fc5\n @marijnh tried it. \n\nDoesn't work.\n @steverandy What browser and operating system?\n Using latest chrome on OS X.\n @steverandy If you want further help on this, try to be somewhat more helpful. What exactly did you try? Did you set the option? How did you test it?\n Yes I did. \n\nBelow is the snippet.\n\n```\n@editor = CodeMirror @$(\"#editor\")[0],\n  mode: \"markdown\"\n  lineNumbers: false\n  lineWrapping: true\n  width: \"100%\"\n  height: \"100%\"\n  minHeight: 400\n  saveFunction: @saveDebounced\n  cursorScrollMargin: 20\n```\n\nI recorded the screen to better show what happened.\n\nhttps://dl.dropboxusercontent.com/u/2271268/cursormargin.mov\n Actually there is still space to scroll. It's just that once the cursor hit the edge of visible view, there is no some kind of padding bottom.\n\nI tried the trick with CSS that you mentioned above, but it didn't work.\n  Sass mode: http://codemirror.net/mode/sass/index.html\n\nTest:\n\n``` sass\nbody\n  div:first-child\n  div:last-child\n```\n\nThe mode highlights \"first-child\" as a pseudo element selector, but not \"last-child\".\n\nThe tokenizer only matches a very limited set of pseudo elements / pseudo classes. Compare to the LESS mode's regex for example. Even if the tokenization isn't made generic there is room for improvement for adding some common selectors: `last-child`, `nth-child(n)`, `nth-of-type(n)`, `only-child`.\n\nFor some good test cases see:\nhttp://dev.w3.org/csswg/selectors4/#overview\nhttps://github.com/nex3/sass/blob/stable/test/sass/scss/css_test.rb#L653\n @rubymaverick Want to take a look at this? It indeed seems that the list should either be more exhaustive, or we should tokenize everything that follows a colon as a pseudo-class (as the CSS mode does)\n There is ::selection too.\n\nThere are any number of vendor specific pseudo elements for experimental or internal features. Things like: ::-webkit-search-decoration, ::-webkit-input-placeholder, etc.\n\nThe shadow DOM lets you designate an element as a custom pseudo element by using the \"pseudo\" attribute. Doing so creates an association with that element in the shadow tree and lets you access it via CSS selectors.\n\nSo we should just remove the fixed list of pseudo classes and elements and make the mode parse anything after the colon (or double colon) as a pseudo.\n\nIt is also surprising that the modes have fixed lists of tag names. As HTML evolves, so will the tags \u2014 like <main>, which is missing from the list. You can also make up your own tags in XML and style them with CSS, and those wouldn't highlight correctly.\n It appears the double colon (which is allowed and recommended by CSS3 for pseudo elements, to distinguish from pseudo classes) is not parsed correctly either. Only the single colon seems to be supported. The code confuses pseudo elements and pseudo classes by mixing the two in a `pseudoElements` variable. That name should be generic if it has both types in the list.\n\nAs mentioned above the list should go, and be replaced by parsing. So double or single colon should be supported.\n I unfortunately don't have time to look at this right now but @xeenon feel\nfree to add it in there\n\nOn Sun, Apr 21, 2013 at 11:52 AM, Timothy Hatcher\nnotifications@github.comwrote:\n\n> It appears the double colon (which is allowed and recommended by CSS3 for\n> pseudo elements, to distinguish from pseudo classes) is not parsed\n> correctly either. Only the single colon seems to be supported. The code\n> confuses pseudo elements and pseudo classes by mixing the two in a\n> pseudoElements variable. THat name should be generic if it has both types\n> in the list.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/marijnh/CodeMirror/issues/1461#issuecomment-16729200\n> .\n\n## \n\n\"I wish you way more than luck\" - DFW\n I might take a look if I get time. I also filed a similar issue as #1466.\n I think this was fixed by c690083563f86739dc3d271516916d88b04370ed.\n  When editing a longer css, part of the text sometimes disappears.\n\nError from console:\nTimestamp: 15.4.2013 11:29:41\nError: TypeError: cur is null\nSource File: http://codemirror.net/lib/codemirror.js\nLine: 612\n\nsource line is: `while (cur.lineObj != line) cur = rm(cur);`\n\nI have tested in FF23 (nigtly build), but have a report from FF20.\n\nSteps to reporuce:\nopen http://jsbin.com/ihunin/211\nscroll to bottom (or almost bottom)\ntype randomly some characters (may be needed to repeat several times)\n I've opened https://bugzilla.mozilla.org/show_bug.cgi?id=861807 for this.\n Fixed in Firefox 23, thanks for your work.\n Great!\n  At CodeMirror: 4c53964\n\nI'm seeing unexpected tokenization of both:\n\n``` javascript\nvar o={a:!1,b:{},c:1};\nvar o={a:!1,b:function(){},c:1};\n```\n\nThe `!` seems to break tokenization later on. When tokenizing the function, the lexical stack doesn't adjust as expected and things break when the first `}` is reached.\n\nReduction:\n\n``` html\n<textarea id=\"code\"></textarea>\n<pre id=\"output\"></pre>\n\n<script>\n// Create editor and initialize with test string.\nvar cm = CodeMirror.fromTextArea(document.getElementById('code'));\nvar str = ['var o={a:1,b:function(){},c:1};','// ---','var o={a:!1,b:function(){},c:1};'].join(\"\\n\")\ncm.setValue(str);\ncm.refresh();\n// Populate pre#output with debug output. Same as Issue 1441.\n</script>\n```\n\nResult:\n\n![issues](https://f.cloud.github.com/assets/11351/354674/4f16cafa-a0aa-11e2-9e2d-134973a7444e.png)\n On a related note. It would also be good to test this at the same time:\n\n``` javascript\nif (!1,(1)) true;\n```\n\nIt is similar in nature (a comma expression starting with an operator and the expected closing character happens before the real close is expected). Currently it works as expected.\n In ToT the original cases were fixed, but the extra case noted in the comments broke:\n\n``` javascript\nif (!1,(1)) true;\n```\n\nFixing the original issue was more important then this secondary issue.\n  setDragImage was disabled for safari to aviod crashing browser. By\nsetting datauri of a transparent gif as src for the img, the problem is\navoided and user no longer sees entire editor being dragged instead of\ntext selection. Now there is no indication of something being dragged,\nbut still an improvement.\nfixes #1279\n The crash still occurs for me (with your patch) on Safari 6.0.2\n That is really strange! It works for me both in an updated complete.html demo and our own solution in Safari 6.0.2 (8536.26.17).\nHere is the jsbin experiment: http://jsbin.com/axiqok/30\nDoes this work for you?\n The jsbin demo works (in that I can drag the green bar without crashing). But if I apply your patch, hard-reload CodeMirror in safari, and then drag, it still segfaults.\n I'm puzzled. Here is a jsbin with the exact copy of codemirror.js I commited. http://jsbin.com/oripew/2/\nIt works as expected for me. Does it crash for you?\n Yes, it does crash (so that really rules out a caching problem). Odd. If I change the src to a regular image url, it still crashes. I think the problem might be that the image hasn't been initialized yet. If I put an image on the page and use that, `setDragImage` works.\n Strange. I did start off by using jsbin's logo image and when that worked, tried the datauri mini gif to avoid adding an image resource to codemirror... (scratchinghead)\n\nI got osX 10.8.2 & Safari 6.0.2 (8536.26.17). You?\n Apparently, the image has to be in the DOM for my Safari not to crash. Could you verify whether the attached patch works for you?\n Thumbs up. Another one off my list. Thanks!\n Bad news! I don't know what happened, but on the same Mac, with the same version of Safari I previously tested on, both your fix & mine crash most of the time, but not always(!). The only version that so far never crashed is http://jsbin.com/axiqok/32, on the other hand you mentioned that it indeed crashes for you. \nMaybe the fix should be reverted? Ugly is still better than crashing.\n Oh, that's too bad. Are you 100% sure that you are testing with the current code when the crash happens?\n\nIf yes, then indeed, I guess we'll disable the `dragImage` call on safari again.\n Yesterday, after having cleared all caches, it was crashing ( both locally and on CM demo ), but I was too busy to investigate. Today all lights are green...\nLet's not roll back just yet, but I will be testing this now on regular basis.\nAlso sent reports to apple every time Safari crashed... maybe they can see something and fix one day. (dreaming)\n Okay, I'm going to assume this is fine until I hear otherwise.\n Hi\u2014\n\nStill crashes for me. I\u2019m using Sfari 6.0.2 (8536.26.17) on Mountain Lion. :(\n  OS: Mac OS\nBrowser: Safari 6.0.2\nCodeMirror: 3.1+\nUrl: http://codemirror.net/demo/search.html\n\nto reproduce:\n1) select some text\n2) drag the selected text\n\nDuring the dragging the whole editor ( .CodeMirror-scroll ) will be moving with the mouse.\n( Once dropped, only the selected text is re-positioned, as expected. )\n See #332 . The trick we use to disable such behavior on other browsers somehow causes Safari to segfault. Bad Safari. If you want to spend time on looking for a workaround, that'd be much appreciated.\n  Test case that demonstrates the problem at http://s1.doria.fi/javuori/test.html\n\nIn some cases it happens that text gets inserted somewhere else in the string than where the cursor is displayed. I don't know exactly which conditions are required for this to happen, but I get it with long non-ascii strings with line wrapping turned on in CodeMirror. See the bug in action in the linked document.\n Indeed. I can only reproduce this on Webkit -- Opera and Firefox seem to behave more sanely.\n\nWhat happens is that Webkit, for a reason I have yet to figure out, wraps the visible text differently from the text in its hidden 'measurement' node, which it uses to get the position of individual characters (for cursor drawing and click handling).\n\nThis appears to be a rounding bug (in Webkit) -- the text in the measurement div is split into single-character spans, which, for some reason, throws off the computation of whether a word fits on a line -- but only for non-ascii text.\n I've also seen this, but I have found a shorter example, so I thought I'd record it here in case it helps. (I'm not sure whether it should go here or in #1353 -- both seem relevant.)\n\nPaste the following line\nHere is a line with a long word at the end aaa\u2026aaa\non a new line in\nhttp://codemirror.net/demo/btree.html\n(or any other demo with lineWrapping enabled).\n\nNote that the word at the end has an ellipsis character (U+2026) in it.\n\nResize until the second \"aaa\" no longer fits on the line. In FF20.0.1 (WinXP) and IE8 (WinXP), wrapping and cursor movement are as expected. In WebKit (Safari 6.0.4, Chrome 26 Linux), the second \"aaa\" appears to wrap onto the second line, but the cursor behaves as though the whole \"aaa\u2026aaa\" has wrapped onto the second line for both insertion and selection.\n This is probably fixed in recent Webkit/Blink versions. Add another comment if you can still reproduce.\n  ## Steps to reproduce\n1. Open http://codemirror.net/mode/markdown/ in IE9\n2. Left-click in the blank space to the right of `Markdown: Basics` to place the cursor at the end of line 1\n3. Right-click in the same spot\n### Expected results\n\nThe browser's text cursor should not be visible (only CodeMirror's text cursor should).\n### Actual results\n\nThe browser's text cursor appears under the mouse cursor and CodeMirror's text cursor appears after `Basics`.\n IE9 appears to freeze the JavaScript execution for as long as the context menu is visible. This means that the trick that kicks in on other browsers, where we hide the textarea again after the menu pops up, doesn't work here. IE also doesn't apply opacity styling to the cursor, so that blocks off another avenue for hiding it.\n\nIf you have any other ideas for working around this, I'd love to hear them.\n  vim mode currently lacks Ctrl-v style column select.  Is this something that codemirror is capable of at the moment?  Is it blocked by issue #778 ?\n This isn't possible with the current built-in selection model. It might be workable for the vim mode to keep its own selection, but that's probably going to get messy.\n  Smarty source code isn't highlighted correctly.\n<code>{$result = {math equation=\"x + y\" x=5 y=10}}</code>\n\nThe opening brace of the math-function and the function name itself are shown in blue, like attributes, but they should be shown in green.\nAdditionally, the second closing brace is displayed in black, but should be green as well.\n\nWithout assignment, the highlighting is correct:\n<code>{math equation=\"x + y\" x=5 y=10}</code>\n @benkeen care to take a look?\n Sure! My time's not great these days, but I'll see if I can figure something out. \n- Ben\n Hi Develooper, \n\nI'm afraid the Smarty mode actually only supports Smarty 2, not 3. Smarty 3 contains a number of new short-cuts and syntactical changes over Smarty 2, such as the problem you posted. \n\nWhen I get a little more time I'll investigate all the changes that have been made and update the Codemirror mode. \n\nSorry about that! \n- Ben\n Why was this issue closed? It's still not fixed.\n In that case it would make sense if you write on codemirror.net at \"Supported modes\", that it only support Smarty 2 syntax. Currently it looks like CodeMirror would support all Smarty versions (including Smarty 3-syntax).\n Hi Develooper - I'll take a look at this and see if I can add in support for Smarty 3. Keep you posted!\n- Ben\n Hi Develooper. I updated the mode tonight to allow for the new Smarty 3 syntax. Pending pull request, but you can see it here: http://www.benjaminkeen.com/experiments/CodeMirror/mode/smarty/\n\nAll the best! \n- Ben\n Hello Ben,\n\nthank you, that's wonderful!\n\nI've just found a problem with Smarty comments. May I post them here?\n\n{$a = 1}    {\\* set $a to \"1 _}\n{$b = 2}    {_ set $b to \"2 _}\n{$c = 3}    {_ set $c to \"3 _}\n{$d = 4}    {_ set $d to \"4 _}\n{$e = 5}    {_ set $e to \"5 _}\n{$f = 6}    {_ set $f to \"6 _}\n{$g = 7}    {_ set $g to \"7 *}\n\n{\\* ##### Example Code ##### *}\n\nIf you copy it into your Smarty3-box it looks very colorful, but it shouldn't. It seems like the content of comments get parsed like normal code.\n\nEDIT:\nIt seems like the comment editor on github is buggy too. it removes the \\* at the beginning and end of the Smarty comment. Only the first opening comment is shown corrently here.\n Hey, Develooper. Ah! Glad you caught this. I'll check it out tomorrow night. Thanks :)\n\nEDIT: Huh... actually, isn't this correct? If the comment isn't properly closed, it will all appear as a comment until the closing *}. Feel free to email me it if github's mutilating the code. (ben.keen@gmail.com)\n- Ben\n  Currently, they are simply set to indentation zero by most of the modes. It would be nice if <enter> gives you the indentation of the line before, and block-reindent _preserves_ the current indentation.\n  So that\n- Callbacks can be registered multiple times, so that you can have modular code acting on a CodeMirror instance\n- Key/mouse events can be easily simulated by the testsuite\n- We can start abstracting over the document data structure, to pave the way for multiple-views-per-document and multiple-documents-per-view situations.\n\nI haven't decided just which model to use for the events. Suggestions welcome.\n What would you use a `contextMenu` event for? (it's not like you'd actually be able to influence the menu)\n Partially done in 873fe349ce1e0c9b5702c07409bc5a98bc82f1b3 and 3e36c4db6812be6e77108d340ae618e4be3854fb\n\nI gave up on unifying DOM and other events. Keeping track of DOM event handlers in a way that doesn't leak (or requires manually unregistering every single one) appears to be hard.\n If you propose an API, I'll be happy to integrate it. Adding events is very easy now.\n\nBut do keep in mind that CodeMirror events are an after-the-fact thing -- their handlers are called when something has already taken place, and usually can't influence that thing. In the case of a context menu, it depends entirely on the API you're using to influence that menu whether an event fired on a right-mouse click will help.\n Will this only be part of version 3? I'd love to be able to register event handlers such as onGutterClick after the instance has been inited. For now I've patched the source code with a simple\n\nonGutterClick: function(func) {\n  options.onGutterClick = func;\n}\n\nbut better to have it supported in a more natural way.\n There's already `editor.setOption(\"onGutterClick\", value)`.\n\nBut yes, the `on` method will be only in v3. It shouldn't be too long until v3 becomes stable, though.\n Cool, that'll do for now. Am I assuming correctly that `on` allows attaching multiple handlers and controls event propagation? Usually (i.e. jQuery) you can `return false` in an event handler to prevent the rest of the handlers from executing.\n There is no event propagation in CodeMirror events (they always fire on a specific object). And there is no way to prevent other handlers from running\u2014this is intentional. CodeMirror events are notifications, they don't provide you with a way to cancel the event from happening or influence it somehow, they just tell you that something happened. In that context, it rarely makes sense to prevent other subcomponent from being notified about the event.\n  This pull request [passes](http://travis-ci.org/marijnh/CodeMirror/builds/2209106) (merged 4743deb4 into 97030154).\n Thanks, merged. I've added some logic to the linter (which is run as part of the test suite) to complain when it finds a BOM. See 3d787908adcba42a8565bf9ee45d39505ab5b8f8\n  As I scroll horizontally, gutter is jumping due to asynchronous position update in onScrollMain. It sounds like horizontal scrolling needs treatment similar to the vertical one (i.e. making scrollbar/scrollbarInner fake horizontal dimension as well).\n\nI do realize it might add come complexity, but I was wondering what your take on it was? Would you be willing to implement it? Would you be open to getting a pull request? Any complexities involved that you know of?\n `fixedGutter` is, most likely, on its way out. As you noticed, it is flaky (jittery), and in the new gutter and line-height model that version 3 will use, there's no efficient way to implement it. If people care a **lot** about this feature, I could implement it in an inefficient way (requires walking N nodes and repositioning them on every horizontal scroll event, where N is the number of visible lines -- and would still be jittery). But personally, I'm not too fond of the feature.\n Where do I learn more about v3, its features and milestones? I am asking since I am assessing the potential use of CodeMirror as a part of the WebKit Web Inspector. We are using fixed gutter in the present editor and would not want to change the model.\n Actually, to make sure I understand the problem properly. I thought that adding horizontal scroll to the scrollbar, hiding it from the scroller and adjusting gutter's style upon onscroll + delegating it to the scroller's scrollLeft would solve it. There probably are complexities I don't understand.\n See https://groups.google.com/forum/?fromgroups#!topic/CodeMirror/mSFsEmhn1Cs%5B1-25%5D\n\nIf a fixed gutter is a requirement for Webkit integration, I'm willing to take that seriously. The main problem is that line numbers need to be vertically positioned relative to the line that they are part of, so they are children of that line in the new model. To have a moving gutter, they'd have to be horizontally positioned relative to that gutter. I know of no way to obtain that effect in HTML/CSS, so we'd have to resort to changing their position through a script that reacts to scroll events. This script will, on most browsers, only run _after_ the actual scrolling took place, so you'll get the jitter you noticed -- the numbers first move, then snap into place again.\n Oh, Ok, I see. I started from this way of living in the WebKit's editor, but then we needed to make gutter an independent div to the left from the main area + we sync the vertical offsets using JS. Syncing height turned to be less noticeable - rows don't change their height too often.\n\nAs for the WebKit integration requirements, fixed gutter is fairly important to us, primarily due to the breakpoint markers. We don't want breakpoints to get behind the screen - one would need to scroll to remove them + you always want to know what line you are at. We don't have line wrapping and even if we did, it would be turned off by default. So yes, it is important for our use cases. Tell us if we can help with it.\n Thanks for the details. The main motivation behind positioning the line numbers inside the lines that they belong to, instead of in a separate gutter element, is performance -- repopulating the whole gutter every time something changed is quite expensive in the current codebase.\n\nBut I guess would be possible to still provide this model in version 3, and turn it on when `fixedGutter` is active. I'm not making a decision on this right now, but I'll think about it some more.\n The v3 branch now contains a working implementation of a fixed scrollbar (that even handles varying-height lines). I won't fix this in the v2 series (too invasive to do in a backwards-compatible way).\n  This pull request [passes](http://travis-ci.org/marijnh/CodeMirror2/builds/2127653) (merged 483965ec into ed2863d9).\n Merged!\n  This pull request [passes](http://travis-ci.org/marijnh/CodeMirror2/builds/2103212) (merged 729edd6b into 7ac53982).\n Cute. Merged.\n  This pull request [passes](http://travis-ci.org/marijnh/CodeMirror2/builds/2102976) (merged 328376f9 into 7ac53982).\n I agree with Pavel that this seems needlessly obscure, and, ultimately, not very useful.\n\nI'm in the process of overhauling the gutter system, but I think I'll stick to HTML-insertion as the way to add widgets. It would be useful to hear _why_ you needed this.\n  How would I go about changing modes on the fly programatically based on some value from an `input` or `select` form field ?\n\nSo lets say, current mode is `javascript`, and then someone selects `'css'` from a select dropdown. That would change the editor's mode to `css`.\n Not really an 'issue', but, register a change event handler on your dropdown, and when it fires, call `.setOption(\"mode\", ...)\" on your editor instance with the right mode name, object, or MIME type.\n Look at the [Lazy Mode Loading](http://codemirror.net/demo/loadmode.html)\n ya thanks I already got it sorted with `setOption` hours ago!\n  Thanks. I had those in there because of the idea that accessing non-existing properties was a performance hit. At one point, Firefox's (precursor of) strict mode errored when you did this, but I guess by now all implementations have learned to also inline-cache lookup misses. I hadn't expected that those null properties would take up _that_ much space.\n\nMerged.\n  I actually have been thinking of a way to seriously reduce this footprint by no longer storing the individual token styles, but just recomputing them from stored parser state during rendering. That'd eliminate the `styles` array in `Line` objects.\n\nThe size of the `stateAfter` object can be tweaked by modifying individual modes. For sites where memory footprint is an issue, it'd be possible to write a simpler, crappier, state-less or minimal-state mode, which doesn't highlight and indent as precisely, but also doesn't allocate big state structures. That would make it possible to cut down the overhead to a single object and a single string per line (plus tree chunks, of course).\n I've looked seriously into removing the `styles` arrays, but, while it would certainly be viable to do so, I don't think it is a very good idea. It would cause a some work\u2014the parsing\u2014to be repeated (a lot), and remove a bunch of nice properties (the `getHTML` method being dependent mostly on state already in the line object, and being able to detect whether it changed any styles).\n\nSo for now, I'm not going through with this. I kept the work in a branch that I may at one point get back to.\n I think that's about as far as we can go here. Closing. Add more comments if you see more opportunities.\n\n(@jankeromnes Also if you could run your benchmark again and compare the memory use in the new situation with the old, and post numbers here, that'd be interesting. Use the master branch, to make sure you're not accidentally testing some other change made in v3.)\n Sorry for commenting on a very old issue, but I'm also en countering very high memory usage when running 10 MB of JSON data through the runmode plugin. I wrap the content in a scrollable div, but the runmode plugin is doing all its work eagerly, right?\nShould I create an issue or just use a \"regular\" CodeMirror for huge files?\n A lazy runMode variant wouldn't be hard to do, but is out of scope for the library itself. Look over runmode.js -- it's 50-odd lines, and shouldn't be hard to duplicate in a way that suits your use case (you'll have to do some magic with scroll handlers and estimating the height of the scrollable content). But of course, yes, you can also simply use CodeMirror normally (though that'll also eat some memory for a 10mb file).\n  This is what you are looking for\nhttp://codemirror.net/doc/manual.html#option_fixedGutter\n Or: http://codemirror.net/doc/manual.html#option_lineWrapping\n  This is a duplicate of #294 . Chances are, I'll have some time to look into this sometime this month.\n  Does the above fix work for you? It's simpler than the one you proposed, and doesn't require messing around with stream internals.\n That patch looks good. I've merged it in.\n  In the latest version of Safari \u2014 Version 5.1.2 (7534.52.7) \u2014 if you highlight a piece of code, then attempt to drag it, Safari's default crash happens. The default crash looks like a page refresh. I do not have any older versions of Safari to test on, so I can't speak to that. This does not happen on any other browsers that I've tested (Chrome, Firefox, Opera, IE).\n\nTo reproduce:\n1. In Safari open any CodeMirror example page, such as [Auto-Resize Demo](http://codemirror.net/demo/resize.html)\n2. Highlight a section of code\n3. Click on the highlighted code and attempt to drag anywhere in the editor\n\nI've attempted to debug this by setting a breakpoint on the `onDragStart` function. Sometimes it will crash inside of this function, other times it will continue and crash on the `wrapHandler` function. \n\nIt is difficult to tell what is going on because Safari is simply refreshing the page, so any data that might be gleaned is lost in that refresh.\n\nP.S. Thanks for an awesome app!\n I've tried (in 5.0.4 and 5.0.5) to reproduce this. Drag-and-drop inside the editor _is_ broken -- the onDrop event is never fired, for some reason -- but I couldn't get the browser to crash.\n I noticed you pushed some updates to the codebase recently. Any chance this bug is one of them?\n\nThanks\n Nope. As I said, I was unable to reproduce.\n Hey Marijn, thanks for the response.\n\nStrange you can not reproduce this error. I've created a screencast showing how I do it. You will notice that on drag the browser refreshes. After about 3 times the whole browser crashes and produces an error. \n\nThe screencast was made using Safari Version 5.1.3 (7534.53.10). Here is a link to the video: http://bit.ly/xpCkZR\n\n## \n\nWe're using Codemirror heavily on Cargo (http://cargocollective.com) and we love it. Thanks again for an awesome product.\n Hi All - I think the problem is this statement in function onDragStart(e)\n\ne.dataTransfer.setDragImage(escapeElement, 0, 0);\n\nIf you leave it in, as soon as you start dragging, Safari and Webkit crash, Chrome displays a generic globe cursor and Firefox displays the edit caret. If you comment it out, all three browsers show a ghost image of the entire edit buffer with the selection highlighted and drag and drop works for all three. According to the Moz docs, you should only be seeing a ghost of the selection (which has been put into the escapeElement). I can make it work with an image but not with a pre element.\n\nNB All browsers are latest Mac versions Webkit r108077, Chrome 17.0.963.56 and Firefox 10.0.2\n Thanks for narrowing it down to the `setDragImage` call. This is a rather obscure and poorly-supported API. I've commented out the call for now. If someone finds a way to make the actual dragged text show up as the drag cursor in a reliable way, I'd love to hear about it.\n Thanks guys. That has solved the crashing issue. \n Just to let you know. It does work in Safari but not with CodeMirror in safari.\nSee this demo: http://help.dottoro.com/ljdpgfkx.php\n I don't know if this or #1279 or #1284 should be reopened, but this bug is definitely still present for CM master (c294a0c91eb7e4059cbf8e665d6895a749745b18) and Safari 6.0.4. Just visit any demo (e.g. resize mentioned above) and drag to reproduce.\n Thanks, it has fixed the issue, but has the 'cool' effect of image drag.\nHow can we best report this dumb behaviour to apple?\n It's a Safari bug, not a Webkit bug, that much is certain. It seems the Safari bug handling isn't done in an open way, so I guess you go to https://bugreport.apple.com , jump through the hoops, and hope for the best.\n submitted a report. thanks again.\n  The setLineClass() function can set a class to a line, but\nthere's not way to get the current class of a line. This\ncommit adds the information to the lineInfo function as a\nnew property called \"lineClass\".\n  The CodeMirror works weird on RTL pages because it also behave from right to left. I'm assuming all computer languages are written from left to right, so to make it work on RTL pages, it's required to add this bit to the stylesheet:\n.CodeMirror {\n                direction: ltr !IMPORTANT;\n}\nThanks.\n  When using a CodeMirror editor that is taller than the browser window (such as an auto-resizing editor) and searching for a word using the browser's built-in Find functionality (e.g., Edit > Find), if any occurrences appear in the CodeMirror editor, the browser scrolls to the very bottom of the page regardless of where the first occurrence is.\n\nAlso, the browser's Find Next command only \"stops\" once in a CodeMirror editor regardless of how many search match occurrences are in the editor.  I can tell that Chrome sees all the occurrences, because the Find UI that drops down from the upper right of the browser window says \"1 of 40\".\n\nTo see an example of these behaviors, open the [Auto-resizing editor demo](http://codemirror.net/demo/resize.html) page and copy/paste the editor's content several times over until it becomes tall enough to cause the browser window to have a vertical scroll bar.  I have tried this in Chrome and Safari on OS X.\n\nThese are difficult behaviors to explain, but the gist of it is that CodeMirror seems to confuse the browser's Find functionality.  I know I can use CodeMirror's built-in find/replace, and I'm headed in that direction, but I thought it was worth bringing this up.\n\nAnd as always, thanks for such an awesome in-browser editor!\n May be it is possible to create a hidden textarea with full text, and then track selection in it created by in-browser built-in find?\n Keeping a textarea with the full text is even more expensive than just rendering the full text to the DOM, not to mention that the synchronizing would be a nightmare.\n Thanks for taking a look at this.  I know browser-specific issues are always a pain, so I completely understand where you're coming from.  The good news is that the browser's find command isn't entirely broken, because the search matches are still visually highlighted.  (The brokenness is in that the browser scrolls all the way to the bottom of the page rather than to the first match.)\n\nAnyway, I just wanted to follow up and say thanks.  If I come up with any creative ways to solve this, I'll post here again, but this is admittedly a low-priority issue, especially since it is browser-specific.\n See also issue #232 . Combined with a hack that turns off draggable in Webkit and only turns it on when a mousedown event is seen, this will probably improve the situation.\n This is now fixed as far as it can be fixed without moving to a completely different architecture. Documents with more than 100 lines will still cause browsers to miss matches in some cases, as the document won't be wholly rendered.\n Excellent, thanks!  I tested it out a bit and it works great!\n    I'm sorry, this pull request seems to be including another commit I did over a month ago (which I sent in a separate pull request).  I'm not really sure how to fix this, or if I should; I don't really use github.  Just thought I'd pass along this fix to you.\n  This is implemented in the `keymap` branch, and will land on master after a bit more testing.\n  IE displays this error when you try to insert a block-level element into an element that doesn't support them via innerHTML.  I traced the problem I was having down to line 1215 in codemirror.js:\n\n``` javascript\nmeasure.innerHTML = \"<pre>x</pre>\";\n```\n\nThe problem is that, if you have your textarea inside of a paragraph element (like many do), you get this 'Unknown runtime error' when initializing CodeMirror.fromTextArea() and the editor fails to load.  The workaround is to change the paragraph to an element that supports block-level children\u2014a DIV for example.\n\nI'm not sure how to approach a fix for this.  Having a textarea inside of a paragraph element is perfectly valid, so letting CodeMirror error-out without any warning doesn't seem like a good idea.  It took me a bit to figure out why it wasn't working in IE, whereas a try/catch or even a smarter check with an alert would have saved a lot of time and confusion.  I'm certain this has affected many others.\n\nHere's some sample markup to reproduce the issue in IE:\n\n``` html\n<p>\n    Source:<br />\n    <textarea id=\"source\" name=\"source\" rows=\"4\" cols=\"40\"></textarea>\n</p>\n```\n\n``` javascript\nvar editor = CodeMirror.fromTextArea( document.getElementById('source') );\n```\n\nI've created a simple test case that you can try this on here.  Just open it up in IE and keep an eye on the error in the status bar: http://csnl.net/temp/CodeMirror-IE/\n I think you'd have have manually change the element to a DIV or something...probably not the best idea to do that.  I think the more informative error message will be sufficient.  Thanks :)\n  The callback in runmode currently returns for every token\nonly the text and the style. This commit adds the position,\nthe line and the character, to the callback. It's an object\nwith \"line\" and \"ch\" as properties.\n\nWith this commit you can easily add markers to the code (e.g. for errors) that need the parsing of the full source.\n  Hello,\n\nThe users who use multi byte character, need to use the IME for input. However, when using IME, the CodeMirror2 does not work correctly in the Firefox and the Opera.\n\nWhen useing IME, these browsers won't trigger \"keypress\" and \"keydown\" event for the 2nd keystroke or later. therefore, the inputted characters are not immediately reflected to the editor.\n\nAnd when useing IME, the method of detecting update is only polling.  \n\nThus, the user who use IME, needs the option to check for updates, and reflect.\n\nIt may be better that the default value of the \"forcePolling\" is \"false\" for the users who does not use IME.\n\nIME: http://en.wikipedia.org/wiki/Input_method_editor\n Many thanks!!\n\nI tried added patch (5af5292b865384d8dd47b6a5b65d6f629130ccd0). This patch reduce the problems a bit. But the Firefox(7.0.1) and the Opera(11.52) fire the \"input\" event after the characters are composed. So, still will not be reflected interactively. (I want to reflect interactively.)\n\nI think polling is quite expensive, too. But, as far as I know, polling is the only way to detect the update for textarea element while using IME. (We can detect the update for div element that has \"contenteditable=true\" by the \"DOMCharacterDataModified\" event.)\n\nThe Firefox and the Opera return the key code below for first keystroke.\n- Firefox@Windows : 229\n- Opera@Windows   : 197\n- Firefox@Mac     : The key code of the pressed key\n- Opera@Mac       : The \"keydown\" event is fired each keystroke (work correctly)\n- Firefox@Linux   : Any event is not fired untill composed.\n- Opera@Linux     : Any event is not fired untill composed.\n\nBased on these results, I created the other commit.\nhttps://github.com/movabletype/CodeMirror2/commit/7841c948c20f4428c90a3fe499eedb3549779eea\nIn this commit, trying to detect by polling only if the conditions are matched.\n\nThe results of for each commits:\n\n# Firefox @ Windows\n\n| Seq | Keyboard input | \"keydown\" | \"keypress\" | \"keyup\" | \"input\" | case1 | case2 | case3 | case4 |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 1 | a | 229 (1) |  |  |  | \u3042 | \u3042 | \u3042 | \u3042 |\n| 2 | i |  |  |  |  | \u3042 | \u3042 | \u3042\u3044 | \u3042\u3044 |\n| 3 | u |  |  |  |  | \u3042 | \u3042 | \u3042\u3044\u3046 | \u3042\u3044\u3046 |\n| 4 | Enter |  |  | 13 | fired | \u3042 | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 |\n| 5 | (a few sec) |  |  |  |  | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 |\n- (1) : keyCode\n- case1: be8e768c797dd6def57d5b573e1ee28597beacee\n- case2: 5af5292b865384d8dd47b6a5b65d6f629130ccd0\n- case3: afbb3f1df95ba1d7a9d1c9867847aa93dd203a15\n- case4: 7841c948c20f4428c90a3fe499eedb3549779eea\n\n# Opera @ Windows\n\n| Seq | Keyboard input | \"keydown\" | \"keypress\" | \"keyup\" | \"input\" | case1 | case2 | case3 | case4 |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 1 | a | 197 |  |  |  | \u3042 | \u3042 | \u3042 | \u3042 |\n| 2 | i |  |  |  |  | \u3042 | \u3042 | \u3042\u3044 | \u3042\u3044 |\n| 3 | u |  |  |  |  | \u3042 | \u3042 | \u3042\u3044\u3046 | \u3042\u3044\u3046 |\n| 4 | Enter |  |  |  | fired | \u3042 | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 |\n| 5 | (a few sec) |  |  |  |  | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 |\n\n# Firefox @ Mac\n\n| Seq | Keyboard input | \"keydown\" | \"keypress\" | \"keyup\" | \"input\" | case1 | case2 | case3 | case4 |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 1 | a | 65 |  |  |  | \u3042 | \u3042 | \u3042 | \u3042 |\n| 2 | i |  |  |  |  | \u3042 | \u3042 | \u3042\u3044 | \u3042\u3044 |\n| 3 | u |  |  |  |  | \u3042 | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 |\n| 4 | Enter |  |  | 13(2) | fired | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 |\n- (2) : Updated (2011/10/31)\n\n# Opera @ Mac\n\n| Seq | Keyboard input | \"keydown\" | \"keypress\" | \"keyup\" | \"input\" | case1 | case2 | case3 | case4 |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 1 | a | 65 |  | 65 |  | \u3042 | \u3042 | \u3042 | \u3042 |\n| 2 | i | 73 |  | 73 |  | \u3042\u3044 | \u3042\u3044 | \u3042\u3044 | \u3042\u3044 |\n| 3 | u | 85 |  | 85 |  | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 |\n| 4 | Enter |  |  |  | fired | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 |\n\n# Firefox @ Linux\n\n| Seq | Keyboard input | \"keydown\" | \"keypress\" | \"keyup\" | \"input\" | case1 | case2 | case3 | case4 |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 1 | a |  |  |  |  |  |  |  | \u3042 |\n| 2 | i |  |  |  |  |  |  |  | \u3042\u3044 |\n| 3 | u |  |  |  |  |  |  |  | \u3042\u3044\u3046 |\n| 4 | Enter |  |  |  | fired |  | \u3042\u3044\u3046 |  | \u3042\u3044\u3046 |\n| 5 | (a few sec) |  |  |  |  | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 |\n\n# Opera @ Linux\n\n| Seq | Keyboard input | \"keydown\" | \"keypress\" | \"keyup\" | \"input\" | case1 | case2 | case3 | case4 |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 1 | a |  |  |  |  |  |  |  | \u3042 |\n| 2 | i |  |  |  |  |  |  |  | \u3042\u3044 |\n| 3 | u |  |  |  |  |  |  |  | \u3042\u3044\u3046 |\n| 4 | Enter | 1254, 1256, 1258 | 1254, 1256, 1258 | 1254, 1256, 1258 | fired 3 times | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 | \u3042\u3044\u3046 |\n Thanks.\n\nI found a strange results for the Opera at Windows.\n\n# Opera @ Windows  (more sequence)\n\n| Seq | Keyboard input | \"keydown\" | \"keypress\" | \"keyup\" | \"input\" |\n| --- | --- | --- | --- | --- | --- |\n| 1 | a | 197 |  |  |  |\n| 2 | i |  |  |  |  |\n| 3 | u |  |  |  |  |\n| 4 | Enter |  |  |  | fired |\n| 5 | a | (not fired) |  |  |  |\n| 6 | i |  |  |  |  |\n| 7 | u |  |  |  |  |\n| 8 | Enter |  |  |  | fired |\n| 9 | Enter | 13 | 13 | 13 | fired |\n\nAnd I updated the table in my previous comment. (for Firefox @ Mac)\n\n### From these results\n- I think that it is better to stop polling with a short interval by 'keyup' event instead of 'input' event.\n- If CodeMirror will stop polling when there is no change for some seconds, I wish to specify the number of seconds by options or I wish to disable that feature by options.\n\n### Patch\n\nPlease review this patch.\n\nhttps://gist.github.com/3cfb19345895223d8c92\n I've replied on the gist.\n I hate to resist this patch even further -- I really appreciate the effort you're putting into this -- but the code, as it stands, is extremely unattractive from the perspective of someone who has to maintain it. The (repeated) combinations of platform and browser tests make it very hard to see what's going on, and why. Could you maybe factor them into one or more predicates (or constants, since I guess the ones that don't depend on key codes don't change at run-time), with descriptive names, so that the code is at least a little self-documenting?\n Thanks for your comment.\n\nI have revised the patch.\nhttps://gist.github.com/3cfb19345895223d8c92\n\nIf satisfactory with this patch, after testing, I will send pull request again.\n Thanks! There's a simplified patch (plus comment) at\nhttps://gist.github.com/40f25a78a304d819c5c8 .\n Integrated in 0fd987a3c9ef290c227e41e680f487053d649e3a .\n Many thanks!!!\n\nI confirmed that the CodeMirror2 works interactively by that commit useing IME.\n If you have time, could you also take a look at the branch at https://github.com/marijnh/CodeMirror2/tree/keymap ? I am in the process of reorganizing the input handling in a way that will make polling much cheaper (so we could potentially just make the default poll interval smaller), but it involves resetting the textarea on every change, and I'm unsure how that will work with IME.\n Actually, never mind. I've finally installed a Chinese locale & IME driver myself, and can now test this stuff on my own. (Also, my revision does break IME. Working on a fix.)\n Sorry for the late reply.\n\nI had tried this branch https://github.com/marijnh/CodeMirror2/tree/keymap .\n\nThis version almost works as expected even when IME is ON.\n\nHowever, when I tryed the following operations, it did not work correctly.\n\n### Steps\n1. Press 'A'  for 1 second. \n2. Press 'Backspase' for 1 second.\n\n### Screencast\n\nhttp://screencast.com/t/yV3bHNCVZWZ\n Hey,\n\nI can't reproduce the problem you are seeing, unfortunately. Does it\nstill happen in the current version (available at\nhttp://codemirror.net/keymap/)? And does it also occur when you type\nwith IME disabled? Also, which input method, precisely, are you using?\nI installed 'Chinese - Pinyin', but it gives me a different character\nwhen I hold A (sorry, I know very little about Chinese).\n\nBest,\nMarijn\n Thanks.\n\nI tryed in newest version. I am a Japanese and use IME for Japanese usually.\n\n### My environments\n- Windows: Microsoft IME\n- Mac: Google IME  or  Kotoeri\n- Linux: Anthy\n\nThat problem was reproduced in all these environments. And not reproduced when IME is Off.\n\nIn Chinese, reproduced in the following environment.\n\n### Chinese environment\n- Windows: Microsoft Pinyin ABC input style http://gyazo.com/57d9860659f960b1176c8b72975264f3\n Thanks, I'll install a Japanese locale and try to reproduce again.\n Still no luck reproducing this on Chrome, and Firefox doesn't seem to\nwork well with ibus, which is the ime daemon I'm using. Which browser\ndid you observe the problem in?\n  http://codemirror.net/demo/complete.html\n\nType 'get'\n Press ctrl-space to trigger autocomplete \n\nBug 1: too few entries (different bug)\n Bug 2: can't use keyboard to move selection in Opera (because they use 'select multiple' and expect things to be selected automatically when you use keyboard?)\n\n``` javascript\n // Build the select widget\n var complete = document.createElement(\"div\");\n complete.className = \"completions\";\n var sel = complete.appendChild(document.createElement(\"select\"));\n sel.multiple = true; \n```\n\nSee http://my.opera.com/hallvors/blog/2011/10/18/codemirrors-autocomplete-broken-by-opera-keyboard-accessibility-feature\n\nThat 'multiple=true' statement is the problem.\n Happy to send along a pull request, but is there any valid reason for wanting `sel.multiple = true` in this case?\n  I was working on a reduced test case, when I discovered the bug is readily reproducible using the [Full Screen demo](http://codemirror.net/demo/fullscreen.html) from the Code Mirror website.\n\nIf the `.CodeMirror` div, or any parent div, is given `absolute` or `fixed` positioning, the selection code breaks in IE 8 (And 7 I think). \n\n**Steps to reproduce:**\n- Visit the [Full Screen demo](http://codemirror.net/demo/fullscreen.html) page in IE 8\n- Click in the editor, then hit `Escape`\n- Try to select lines in the middle of the screen. \n\n**Expected Bug that appears:**\n\nThe editor will immediately scroll to the bottom. In my personal code, I have also run into a bug that causes the selection to start to become offset from the actual text selected \u2013\u00a0this seems to be caused when lines run longer than the visible part of the editor.\n\n**Possible Workaround**:\nSince it works great with 'relative' positioning, Instead of using CSS, use JavaScript to provide negative `top` and `left` values, and a set `height` and `width`. In my quick test, this seemed to not cause an issue.\n Sorry to waste your time \u2013\u00a0it was IE8 mode in IE9 that I was testing. I will close the issue as it does work correctly in IE 8. Thank you!\n  Hi Marijn,\n\nLike I promised a while ago, here comes an optimized Game of Life clojure demo. @hans said the new code runs twice as fast on his machine as the old one.\n\nBest,\nJan.\n  Hi!\n\nI wrote a Closure Compiler extern for CodeMirror and want to ask to review it.\n\nI probably messed with some optional parameters, not null parameters and other stuff.\n\nhttps://github.com/urmuzov/closure-externs/blob/master/codemirror.js\n\nThis is a manual for annotating js:\nhttp://code.google.com/intl/ru/closure/compiler/docs/js-for-compiler.html\n Can you, please, one more time look at this\nhttps://github.com/urmuzov/closure-externs/blob/master/codemirror.js#L129\nand this line\nhttps://github.com/urmuzov/closure-externs/blob/master/codemirror.js#L143\nwhat type is `lineHandle`? \n Ok, thanks!\n I can't find any info about `addGutterMarker` and `removeGutterMarker` here http://codemirror.net/manual.html This manual is not actual?\n Ok! Now it looks like:\n\n```\n/**\n * Clears a marker created with <code>setMarker</code>. <code>line</code> can be either a number or a handle returned\n * by <code>setMarker</code> (since a number may now refer to a different line if something was added or deleted).\n * @param {(number|CodeMirrorLineHandle)} line\n */\nCodeMirrorObj.prototype.clearMarker = function(line){};\n```\n\nAnd it can take `number` or `lineHandle`.\n  Noticed that CM2 doesn't have this anymore and it's a bummer :(\n Fair enough. Can you show what those four lines might be? I played with indentLine function but it seems to indent regardless of the line context. My javascript-fu is weak. Thanks.\n Thank you very much. I'll try it out today.\n Yey. Seems to working. However for some reason first-level tags are not highlighted ('cm-null' class) but second level ones are fine ('cm-tag' class). When you start editing they will highlight properly.\n\nThis is what I'm talking about:\n\n```\n<ul>\n   <li> One </li>\n   <li> Two </li>\n</ul>\n```\n\nSo the `<ul>` will be of `cm-null` class but `<li>` is properly highlighted with `cm-tag` class.\n Thanks!\n  As mentioned in https://github.com/marijnh/CodeMirror2/issues/201#issuecomment-2341615, here is the pull request. For reference, I've copied the comment here:\n\n> Hi Marijn,\n> \n> I discovered a nice way of doing this so I will be making a pull request shortly to include a \"coordsFromIndex\" method.\n> \n> The method I'm using is pretty fast as it doesn't do any string matching. The function basically loops through the strings in the lines array until the total of their lengths so far exceeds the index we are interested in, then it can easily calculate a {line, ch} object. The 'line' comes from which line it's got to in the loop and 'ch' is calculated by subtracting the total chars in previous lines from the index we want. The function also takes into account '\\r\\n' in IE although I personally think it would be best to stick to \"\\n\" at all times.\n> \n> I have added the method, written some tests for it and updated manual.html with the new method. Pull request on it's way.\n> \n> Thanks for your pointers on this.\n I've updated coordsFromIndex so that it clips the returned object rather than returning null to make it consistent with the existing API.\n\nAlso, I noticed that getValue always returns a string joined on \"\\n\" regardless of IE's \"\\r\\n\" which is good, so coordsFromIndex now also assumes just newlines.\n\nI've found the ability go convert to and from indexes missing from most javascript editors and it's quite a common requirement, so this small method aims to fix that in quite an efficient way.\n @marijnh In my use case I'm not calling `getValue` before getting the `{line, ch}`... it's complicated but I'm basically managing my own string data (it's actually a fake DOM tree... don't ask), I can then get an index for a given fake DOM node that then needs to be converted to update the editor text editor caret/range.\n\nThanks for your help on this, and for merging it in.\n  Hi there,\n\nOn Mac OS X, the standard shortcuts for indenting and dedenting lines are `Cmd+]` and `Cmd+[`... (Or at least, these are the shortcuts used by both Xcode and TextMate.)\n\nIt seems that, at least with the default setup, CodeMirror does not implement these shortcuts. (It implements the same functionality with `Tab` and `Shift+Tab` instead)\n\nAs someone who's used to coding on the Mac, I find myself constantly trying to indent lines with these shortcuts, which doesn't work. \n\nTo make things worse, the same shortcuts (`Cmd+[` and `Cmd+]`) are used by all the major browsers on OS X for \"Back\" and \"Forward\" actions, which keeps me constantly navigating back whenever I press `Cmd+[`.\n\nI'm not sure if overriding browser shortcuts by default by calling something like `e.preventDefault()` would be a good idea, but I would like to suggest adding at least a setting to enable this optionally.\n\nIf you guys are OK with something like that, I would be more than happy to contribute with a patch.\n\nThanks,\n  Hi,\n\nI'm sure this is probably an obvious question but I'll ask it anyway...\n\nI need to be able to get and set positions/ranges/selections based on the number of characters from the start of the text. I know you can do this with getCursor, setCursor, getRange, replaceRange, setSelection, however you have to specify line and char. Is there a way do just use an index (which is the common way to work with strings), otherwise it means having to somehow convert an index to a line/char combination?\n\nThanks in advance... I'm loving CodeMirror 2.\n Oh no, that is going to be slow. I suppose I'll have to count up the number of newlines before where I want the selection to start and end and calculate on that. I don't suppose there are and internal optimisations that would help with this?\n Thanks, I didn't realise that indexOf takes a start position, that helps. So I guess I'll just have to call getValue to return the entire text string, and then loop while the indexOf is less than my desired position. Is getValue relatively quick as a lot of this needs to happen in real time as the user types?\n\nOne more quick question if you don't mind... does CodeMirror always use \"\\n\" or will IE be spitting out \"\\r\\n\" as that could throw a spanner in the works.\n Hi Marijn,\n\nI discovered a nice way of doing this so I will be making a pull request shortly to include a \"coordsFromIndex\" method.\n\nThe method I'm using is pretty fast as it doesn't do any string matching. The function basically loops through the strings in the lines array until the total of their lengths so far exceeds the index we are interested in, then it can easily calculate a {line, ch} object. The 'line' comes from which line it's got to in the loop and 'ch' is calculated by subtracting the total chars in previous lines from the index we want. The function also takes into account '\\r\\n' in IE although I personally think it would be best to stick to \"\\n\" at all times.\n\nI have added the method, written some tests for it and updated manual.html with the new method. Pull request on it's way.\n\nThanks for your pointers on this.\n Pull request here for reference should anyone come across this ticket: https://github.com/marijnh/CodeMirror2/pull/203\n  Hi marijnh,\nI did create tiddlywiki.js mode for CM2. index.html and css is included. \n\nThere should be a TwMixed mode in the future, which should handle html, js, css and TW syntax at once. \n\nHow to use it with TiddlyWiki, can be seen at:\nhttps://github.com/pmario/CodeMirror2/blob/tw-syntax/mode/tiddlywiki/tiddlywiki.js\n\nhave fun!\nmario\n I choose to have different styles, because of a future mixed mode. \neg: something like this:\n\n```\nTiddlyWiki ''style'' //content// outside of a code block. \n/*{{{*/\n.myStyle {\n}\n/*}}}*/\n```\n\nIn TW syntax `/*{{{*/` is a start of CSS code block. So the \"outside\" is TW rendered and inside it should be CSS rendered. At the moment the tiddlywiki.js only styles `/*{{{*/` and `/*}}}*/` and doesn't deal with the code in between.\n\nimo there should be a difference between TW syntax and other \"standard\" syntax modes. May be if I integrate the mixed mode, it turns out, that I'm totally wrong. Or there's a lot of feedback, to change it. I'll change it :)\n\n-m\n  line 166:\n\n  function attributes(type) {\n    if (type == \"word\" | type == \"string\") {setStyle = \"attribute\"; return cont(attributes);}\n    if (type == \"equals\") return cont(attvalue, attributes);\n    return pass();\n  }\n\ni added \"string\" to be a valid attribute. that way i can have strings within a tag and still keep the syntax highlighting intact. i need this for a cms application that expects a string within the tag without a \"=\"\ni am not sure if this is less then 100% html standard but without this fix the html syntax highlighting goes totally cracy if you enter just a string.\n\nexample:\n\n<x><y \"\"></y></x>\n\nthe </y></x> part will be red with existing xml.js\n\nwith my little fix it will stay ok and still recognice errors for not matching tags.\n\nhope this will find its way into the sources.\nregards\nmatthias\n  in chrome 14 (not in 13) pressing del works only every 2nd time. you have to press del 2 times to delete the next charakter.\n seems to work fine in the development version i downloaded yesterday. does this mean there is someone working on that ;-)\nor is it just coincidence\n no i did not. my chrome version is 14.0.835.202 m\n\nyou should be able to reproduce it with this version. it used to ocur on the codemirror.net website on the demo pages. since yesterday it did not ocur anymore so i downloaded the last developer version and now my programm runs fine in chrome 14.\nthe version i used before was 2.1.15\n\nlet me know if i can be of any help\n i can not reproduce it anymore either. but be asured it was there. i also reported the bug to the chromium team. maybe they fixed it.\nand you were right assuming a chrome update happened. not to 15 but to the next step version as described above. the bug definetly appeard with 2.1.15 and chrome: 14.0.835.163 m\n\nsorry for any trouble.\nthx \nmatthias\n  All modern code editors have the ability to collapse blocks of code using +/- icons in the gutter.\n\nCould this be done in CodeMirror?\n\nI use CM for HTML/CSS (LESS) editing and the ability to collapse whole nested blocks of LESS CSS down while I work on other areas would be amazing.\n Not cleanly (yet). This is related to line wrapping. It's clear how it should be implemented, but I don't have the time to actually implement it.\n I've not seen any other editors that do this online and it would be a huge selling point for codemirror.  Something to shout about :)\n I agree, this would be an awesome feature.\n @hades200082 ace already supports this\n I also would love to see this feature implimented! :+1: \n @Daniel-Hug http://codemirror.net/demo/folding.html as you can see code folding was already implemented, and https://github.com/marijnh/CodeMirror/issues/182 was closed a year ago. Enjoy!\n @Daniel-Hug @jankeromnes And an even better folding demo in v3: http://codemirror.net/3/demo/folding.html (start/end tags are collapsed onto the same line).\n  When a character is selected in the editor and same character is pressed on the keyboard, codemirror proceed like there isn't any change in readInput function. On the other hand it continues to process some part of code like there is a change. Therefore readInput gives wrong parameters to updateLines so updateLines gives to updateLinesNoUndo. \n\nAfter these problems, we can't change \u007fselecting text with character which we broke by selecting and pressing. I fix this issue by adding changed = true; before if(changed) { (line: 644). But i can't be sure if this break something else :).\n\nTo see issue by trying:\nselect < in xml mode and press < then select <title and press < so you will get <<title \n Yes, it happens on all browser. I tried on last stable versions of chrome, ie, firefox. But i have just realized that it doesn't happen if you select from left to right. It seems like a hard producing bug :) , but my friends and i had this issue for several times. \nIt happens on all modes but you can use xml demo (http://codemirror.net/mode/xml/index.html) to reproduce it. First select a character, for example select any **<**. While it is selected press **<** key on the keyboard. Then select anything you want  from right to left, for example **indentation**. When you press **<** key on the keyboard it doesn't replace, it should be **<** but it become **<indentation**. This issue happens for all characters, you can try with whatever you want. I give this example because we had this issue while using xml mode.\n  Hi,\n\nThe two commits (one for each file) contain a new XML parser (see commit comments), which is based on the old one and on the infrastructure which every mode uses (or should use, anyway); and a couple of utility functions that I added to my own codemirror.js, which I though might be useful to the general population.\n\nThanks,\n-DrorBG (deebugger)\n Hi Marijn,\n\nThanks for reviewing this.\n\nMy original code (and indeed the code I'm using) also adds a 'description' field to the errorLines[i] array, so you're actually preaching to the choir :-) I intentionally made errorLines an array of structs, instead of just an array of number, so that you put description, type (I'm using type for different images in the gutter like error, warning and info) and anything else you may think of.\n\nAn alternate approach would be to have the user provide two callbacks:\n- checkStateError - which is required to check the state (kinda like something the user might do in your solution of onHighlightComplete) - already in the code\n- createErrorStruct - which will take an state which has an error, and fill it with stuff like description etc.\n\nAnother solution, which would be even better, is to provide a single callback which will employ both. Something like \"getErrorFromState\" which will check the state for error, return null if no error was found, otherwise return a struct with all the good stuff (minus the line, which can be auto-filled in codemirror.js).\n\n-Dror\n  I'm thinking this is either a bug, or a question.  I'll let you decide.\n\nBased on the [CodeMirror manual section on this topic](http://codemirror.net/manual.html#class_CodeMirror_gutter_text), I concluded that in order to change the font-size and line-height of `.CodeMirror-lines`, I would need to set `.CodeMirror-gutter-text` to the same sizes.  This caused the cursor to display slightly to the left of where it belongs in FireFox 4.  (Not sure about other versions. Things looked OK in Chrome, but that was all I had available today.)\n\nSetting the font-size and line-height on `.CodeMirror` instead gave me consistent cursor positioning.  Does it make sense to set the font-size and line-height there instead?  And if so, should the manual be updated to reflect that recommendation?\n\nIncluding a screenshot where my cursor **should** be positioned at the end of a line, but isn't.  http://dl.dropbox.com/u/11089/Screenshots/kjz4m~uzzie2.png\n\nI also found this issue, which has a similar screenshot so I'm including it too just in case it helps.\nhttps://github.com/marijnh/CodeMirror2/issues/13\n\np.s.:  THANK YOU for all of your work on CodeMirror.  I'm loving using it.\n  Hey Marijn, \n\nI sent you an email regarding security concerns around the htmlEscape function. Here is the change I propose, which will let the browser take care of escaping. \n\nCreating the div and setting the innerText on the object is highly optimized, so there shouldn't be any performance impacts. If there are concerns around that, the creation of the div can be moved out of the function in the Codemirror namespace, but I don't think that is necessary.\n\nLet me know if you have any thoughts, concerns, or questions.\n\nThanks,\n\nThomas\n  I am attaching an example below that shows the bug.  Here is how to reproduce:\n- Open up the page in a Webkit browser (Chrome or Safari).\n- Click the area to dynamically insert more code editors.  Keep adding until the container div starts to scroll a bit.\n- Scroll down and try to type in one of the code editors that is off the bottom of the div.\n- Some of the time, when you click in the code editor, the div will scroll to the top.\n- Some of the time, you are able to click in the code editor, but typing causes a scroll jitter.\n\nSome of the factors that seems to influence this behavior.\n- The fact that I am using overflow: hidden on the body to make the div rather than the page scroll.\n- The fact that I am using the flexible box model and the container div is a vbox.  Removing this makes the problems go away.\n ```\n<!DOCTYPE HTML>\n<html>\n\n<head>\n    <title>Code Mirror Scroll Bug</title>\n\n    <link rel=\"stylesheet\" href=\"static/codemirror2/lib/codemirror.css\">\n    <link rel=\"stylesheet\" href=\"static/codemirror2/theme/default.css\">\n\n    <style type=\"text/css\">\n    body {\n        position: absolute;\n        left: 0px;\n        right: 0px;\n        top: 0px;\n        bottom: 0px;\n        overflow: hidden;\n    }\n        div#outer_vbox {\n            height: 100%;\n        }\n        div#container {\n            overflow: scroll;\n            border: 1px solid black;\n            padding: 10px;\n            margin: 10px;\n        }\n        .CodeMirror {\n          border: 1px solid black;\n          padding: 10px;\n          margin: 10px;\n        }\n        .CodeMirror-scroll {\n          height: auto;\n          overflow-y: hidden;\n          overflow-x: auto;\n        }\n        .vbox {\n            display: -webkit-box;\n            -webkit-box-orient: vertical;\n            -webkit-box-align: stretch;\n\n            display: -moz-box;\n            -moz-box-orient: vertical;\n            -moz-box-align: stretch;\n\n            display: box;\n            box-orient: vertical;\n            box-align: stretch;\n        }\n        .box-flex {\n            -webkit-box-flex: 1;\n            -moz-box-flex: 1;\n            box-flex: 1;\n        }\n    </style>\n</head>\n\n<body>\n\n<div id=\"outer_vbox\" class=\"vbox\">\n\n<!-- Without the vbox, the bug goes away -->\n<!-- <div id=\"container\" class=\"box-flex\"></div> -->\n<!-- With the vbox, the bug is present -->\n<div id=\"container\" class=\"vbox box-flex\"></div>\n</div>\n\n\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js\">\n// <script src=\"static/jquery/js/jquery-1.6.2.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"static/codemirror2/lib/codemirror.js\"></script>\n<script src=\"static/codemirror2/mode/python/python.js\"></script>\n\n<script>\n    $(document).ready(function () {\n\n        var add_cell = function () {\n            var code_mirror = CodeMirror($('div#container').get(0),\n                {value: 'a=10'}\n            );\n        };\n\n        $('div#container').append(\n            $('<div style=\"border: 1px solid black\">Click to add CodeMirror editor</div>').click(\n                function () {add_cell();})\n        );\n\n    });\n</script>\n\n</body>\n\n</html>\n```\n Thanks for looking into this.  It looks like there are some deeper bugs in the way browsers and handling the flexible box model in situations like this.  I have refactored my code and am able to avoid the issue completely.  This can be closed.\n  Selecting Multiple lines and hitting TAB to indent does not indent the last 2 selected lines\n(As of the 04-07-2011: Version 2.11 update)\n Thanks Marijn :)\n  If I press and hold a key, like `a`, I see _one_ 'a' appear at first, then nothing happens until I release the key -- at which point a whole bunch of 'a's appears. Happens on JSBin and also on [this demo page](http://codemirror.net/demo/fullscreen.html). Have replicated this in Chrome 12 on both Linux (Ubuntu 10.04) and Windows 7, Firefox 3.6 on Linux, and Firefox 4 on Windows 7.\n  Using CodeMirror on JSBin and also on [this demo page](http://codemirror.net/demo/fullscreen.html), the Up and Down arrow keys don't repeat reliably at all. This is relatively recent (I only noticed a couple of weeks ago as of a big update at JSBin; prior to that it worked). Have replicated this in Chrome 12 on both Linux (Ubuntu 10.04) and Windows 7, Firefox 3.6 on Linux, and Firefox 4 on Windows 7.\n @marijnh: If I'm at the bottom of the demo area and press and hold the Up arrow, it'll usually go up one line, then nothing until I release the key and then it goes up again. On rare occasions it'll sputter along, but usually not at all. I can be holding the key quite a long time. The computer is pretty quick, processor is an Intel i3 Core 530 (dual-core, each hyperthreaded) at ~3GHz.\n\nOdd thing, btw: It doesn't happen if I'm recording with screenr.\n @marijnh: As I said, this doesn't happen in normal text areas, so it's not just my normal key repeat. I usually have key repeat set fairly quick, actually, as I'm impatient. :-)\n\nChanging the 80 to 200 didn't make any difference. (Don't worry, I _did_ check to make sure the browser had picked up the change.) Also, not knowing remotely what it controls, for fits and giggles I tried 20 and 2000 as well, no difference.\n\nNo script errors.\n\nApologies for this, wasn't expecting such a fast a response from your end(!), but I'll have to leave any further debugging until tomorrow. But I will keep trying things as directed, to help get to the bottom of it.\n Can confirm that the behavior does not replicate for me on my notebook using Chrome 12 and Windows 7. So it's something about my Ubuntu 10.04 desktop, which reliably replicates it both in browsers running on the native OS and in a Windows 7 VM.\n Just a bump, I'm seeing this behavior for CodeMirror 2.13 in Chrome 13.0.782.218 on Mac OS 10.7.1.  It's noticeably slower than the key repeat rate for the rest of the system/text boxes.  \n This is almost certainly a symptom of the old cursor handling kludge. The kludge is gone in current HEAD.\n I can confirm that this is now sorted. Thanks!!\n  Fix for Issue 142 (https://github.com/marijnh/CodeMirror2/issues/142)\n Credit @surenm\n  ### Steps to Reproduce\n1. Set codemirror to clike mode (eg. http://codemirror.net/mode/clike/index.html)\n2. Enter any preprocessor directive (eg. #include <iostream>)\n3. Hit enter\n### Expected Behavior\n\nNo indenting should occur\n### Observed Behavior\n\nThe new line is indented by one indent unit.\n  I've a strange problem with Codemirror 2.11. In a gwt application we're using a widget with codemirror to show xml files. The widget has an horizontal scrollbar\n\nFor some 'big' files and using the scrollbar the file is not shown (< pre > are not there). You've to select this empty space to make the rest of the content exist by magic.\n\nAlso in stackoverflow : http://stackoverflow.com/questions/6640048/codemirror-not-showing-all-lines\n\nThanks a lot for the great library :-)\n Eventually we got the problem (our side issue, sorry) :\n\nCodeMirror-scroll was missing from the css. Now it's working nicely\n\n.CodeMirror-scroll {\n    overflow: auto;\n    height: 100%;\n    /\\* This is needed to prevent an IE[67] bug where the scrolled content\nis visible outside of the scrolling box. */\n    position: relative;\n}\n  If I type alert('test') and press enter, the line is automatically indented. This is annoying.\n  Any time I paste or use content with 4 space 'hard' tabs, it is rendered with twice as many spaces ( a 4 space tab turns into 8 ). This happens reliably across all browsers.\n Argh, not having tab space support is so frustrating.\n  I am applying codemirror to a text area that contains fragments of PHP (without the <?php opening tag).\n\nThis used to work fine on Codemirror 1. On Codemirror 2, the parser seems to assume that it's parsing a document which will contain a <?php tag at some point, and therefore doesn't do any syntax highlighting (until, that is, I hand type the opening tag).\n\nWould it be possible for the PHP mode to assume that we are starting out as a piece of PHP? If this isn't considered to be a good idea by default, perhaps it could be an option?\n Works like a charm. Thanks for the spectacularly quick response.\n  I have an issue with the horizontal scrollbar. Here's how to reproduce it:\n1. Open any CodeMirror2 editor (for instance http://codemirror.net/mode/javascript/index.html).\n2. At the end of any line, type until the horizontal scrollbar gets impacted.\n3. Remove what you typed: the scroll bar remains at maximum size.\n\nThis problem happens on my FF4 and IE8.\nOn Chrome 12, removing the letters you typed with repeated backspace resizes the scrollbar correctly, but if you remove your letters by selection+backspace, the scrollbar remains unchanged.\n\nBut maybe it's not necessary to fix this if you plan on doing some sort of line wrapping?\n  Hi there --\n\nIt would be useful to be able to retrieve the editor's history, serialize it as plain data, and then restore it, just like its contents. I'm looking for a way to implement this functionality, but I don't think it can currently be done without a little more support from the API.\n\nIs this something that's been considered, or are there plans to? I can propose (and implement) a couple of ideas, but I wanted to ask beforehand in order to avoid duplicate work.\n\nThanks!\n +1 for this addition/modification to the API\n\nUse case: We use CodeMirror on webputty.net to allow you to edit multiple versions of CSS stylesheets. Currently we store and restore your cursor position when you switch between versions of your stylesheets (and use clearHistory() during the switch), but it'd be great if we could also store and restore your undo history when switching.\n Closing this. A history is innately tied to the document that it is based off. Setting/getting histories is too fragile. Simply create multiple editors if you want to have multiple documents open at the same time (and hide/show them to cycle between documents).\n  Hi,\n\nThis isn't really an issue because you said the auto-detection script was a bit crude, but anonymous javascript functions are detected as scheme code :\n\n```\n(function $(){return $();})()\n```\n\nP.S. The problem seems to come from the opening parenthesis. Starting with a // comment for example saves the day.\n  Hi,\n\nIn order to demonstrate how useful and simple CodeMirror is to edit web pages (and also to promote HTML5), here is a little HTML5 real time preview demo (some sort of WhatYouSeeIsWhatYouGet).\n\nCheers,\nJan.\n The wiring is great, I had tried to do something like this but failed to correctly use the timeOuts. Thanks for the code, I'll be able to reuse this in my project!\n nice demo, but how are the chances to make this work in ie 7/8? \n I expect (though I didn't test) that the demo itself works just fine in old IEs. The document included by default uses canvas, so that obviously won't show in such browsers, but if you replace it by `<blink>HEY</blink>`, you should see the preview.\n  Hi,\n\nI have just started use this very nice project and I had faced the problem when I tried to minify \"codemirror.js\" by \"Microsoft Ajax Minifier\":\n\n<pre><code>AjaxMin.exe codemirror.js -o codemirror.min.js\nMicrosoft Ajax Minifier - JavaScript and CSS minification and verification utility\nCopyright 2010 Microsoft Corporation\nMinifying file 'codemirror.js'...\ncodemirror.js(2045,9-19): run-time error JS1281: Ambiguous reference to named function ex\npression. Cross-browser behavior difference: splitLines\ncodemirror.js(2070,11-22): run-time error JS1281: Ambiguous reference to named function e\nxpression. Cross-browser behavior difference: setSelRange\ncodemirror.js(2077,9-17): run-time error JS1281: Ambiguous reference to named function ex\npression. Cross-browser behavior difference: selRange\ncodemirror.js(2099,9-20): run-time error JS1281: Ambiguous reference to named function ex\npression. Cross-browser behavior difference: setSelRange\nOriginal Size: 86367 bytes; reduced size: 36919 bytes (57.3% minification)\nGzip of output approximately 15346 bytes (58.4% compression)</code></pre>\n  in chrome pressing tab and backspace repeatedly breaks the format and the codemirror windows ends up broken.\nusing Chrome version: 12.0.742.112 at this time.\n\nHope you will be able to fix this.\n It seems to be a setting we have enabled, as http://codemirror.net/demo/theme.html does not show this error.\n\nCould you think of any setting that would cause this, anywhere you purpose I look ?\n Timing this out. Reopen if you see it again.\n  Added MIME \"application/x-httpd-php-open\" for PHP mode that starts in PHP.\n  Hi there --\n\nAs I understand it, the mode option can be either a string or an object. If it's a string, it can be either the name of a mode directly, or a MIME type defined by a mode. If it's an object, however, the name property can only specify a mode, not a MIME type. Thus, it is currently impossible to use parameters together with MIME types.\n\nThis ability would be useful in order to specify, for example, that the content type is `text/x-python` and that the `version` thereof is 3.\n\nIn order to enable this functionality, I've thought of two ways to do it:\n1. The simplest way is to allow `{name: ...}` in the mode object to refer to a MIME type. The spec is then 'merged' with whatever parameters are provided (e.g. `version`) to create the config.\n2. Alternatively, the MIME type string can be allowed to have inline parameters, as they are elsewhere. For example, to specify the above, one could use: `\"text/x-python;version=3\"`. The parameters can be parsed and merged with the spec.\n\nOne (quick and dirty) way to implement the first option is as follows:\n\n``` js\n   CodeMirror.getMode = function(options, spec) {\n     if (typeof spec == \"string\" && mimeModes.hasOwnProperty(spec))\n       spec = mimeModes[spec];\n+    else if (spec != null && mimeModes.hasOwnProperty(spec.name)) {\n+      var mode = mimeModes[spec.name];\n+      if (typeof mode == \"string\") spec = mode;\n+      else for (var m in mode) if (!spec.hasOwnProperty(m)) spec[m] = mode[m];      \n+    }\n     if (typeof spec == \"string\")\n       var mname = spec, config = {};\n     else if (spec != null)\n```\n\nThanks!\n > Thus, it is currently impossible to use parameters together with MIME types.\n\nThis is by design -- MIME types are intended to be specializations of regular 'named' modes. I originally did it this way because there were plans to have a common mode format shared with the ACE editor, and the proposed system used MIME types to identify modes. ACE has made no move to support this format, so it's not really a priority anymore for CodeMirror either.\n\nWhy do you want to use a MIME type here, not just a regular mode name?\n > Why do you want to use a MIME type here, not just a regular mode name?\n\nMainly for two reasons:\n\nFirst, external content providers supply a MIME type but not a mode name (since they don't know about CodeMirror). If I were to use a mode name directly, I'd have to maintain a manual mapping between MIMEs and modes, which seems wrongheaded when CodeMirror already handles that very elegantly.\n\nSecond, more importantly, in some cases that is the only way to handle certain content. For example, say I wanted to load a C++ file. The `clike` mode does not name a version for that, only a MIME type (viz. `text/x-c++src`).\n\nOr am I missing something...?\n The first problem seems odd -- if they can supply MIME types, not mode names, they also can't supply MIME types with funny CodeMirror-specific options embedded in them.\n\nThe second concern is valid though, but I think the solution is to define a new mode name. In case of the Python mode there's already \"python\", but say you wanted to handle multiple versions of C#, you'd use CodeMirror.defineMode instead of CodeMirror.defineMIME to define a C# mode, which just calls through to the \"clike\" mode, but passes a different set of keywords, say, depending on the version. Does that sound sane?\n > The first problem seems odd -- if they can supply MIME types, not mode names, they also can't supply MIME types with funny CodeMirror-specific options embedded in them.\n\nThat's true, though in my case the parameter I'm interested in (the version) is semantic, so it's supplied independently of the editor.\n\n> Does that sound sane?\n\nI'm not sure I've fully understood. Is your suggestion to give all specializations names instead of MIME types? If so, then yes, it does sound sane to me, as that way there will be a one-to-one correspondence. (For example, you could have `clike-c++`, `clike-csharp`, `clike-java`, and so on. Or just `c++`, `csharp`, `java`, etc., which is more intuitive.)\n\nI assume that then, MIME types can be associated with named specializations. E.g. `text/x-c++src` => `clike-c++`.\n Yeah, I think that makes sense; the mode can be addressed by its name or MIME type.\n  Works fine on CodeMirror 2b2, buggy on 2.1.\nFor example, if we scroll somewhere on editor (lets say scrollTop is 500px) and add a widget to a point in the visible area (lets say 100px left, 100px top), editor adds widget to (x:100, y:600) correctly but scrolls to (x:100, y:100) instead of scrolling to (x:100, y:600).\n\n```\naddWidget: function(pos, node, scroll) {\n  var pos = localCoords(clipPos(pos), true);\n  node.style.top = (showingFrom * lineHeight() + pos.yBot + paddingTop()) + \"px\";\n  node.style.left = (pos.x + paddingLeft()) + \"px\";\n  code.appendChild(node);\n  if (scroll)\n    scrollIntoView(pos.x, pos.yBot, pos.x + node.offsetWidth, pos.yBot + node.offsetHeight);\n},\n```\n\n`showingFrom * lineHeight()` should also be added to y position when calling `scrollIntoView` as it is added when setting `node.style.top`\n _Note:_ For one thing the `var` is definetely useless (and confusing) there because a variable named `pos` is already defined as an argument. There's actually a bunch of _out of scope_ and _already defined_ errors according to jshint.\n I'm actually thinking of deprecating addWidget, as it adds very little and is much more problematic than just putting the widget outside of the editor (like demo/complete.html does). Can you try going that way and letting me know whether you encounter any problems?\n\nAs for jshint, it has different opinions about what JS code should look like than I do, so CM will probably never come up clean there.\n @marijnh - Yes, I understand that you have your own coding discipline, there's nothing wrong with that. But dismissing tools like JSHint _altogether_ isn't the right approach.\n\nI think if you look into this case for example, there is no reason why you would want to have `var` before `pos` when it's already defined. It will be ignored by the interpreter, but can lead to confusion to someone reading the code.\n\nAnother problem is that it's incosistent with other parts of the code. E.g (line 488):\n\n```\nfunction replaceRange(code, from, to) {\n      from = clipPos(from);\n```\n\nSame situation, no `var` before the already defined variable `from`.\n I dont think adding widget outside of the editor would cause any problems because currently i use `addWidget` with no problems by setting `scroll` parameter to false.\n On second thought, addWidget wasn't as flaky as I imagined. It won't update the widget position when lines are added/removed, but it _will_ make the widget scroll with the editor content. So I'm not deprecating it, and I think I've fixed this bug in 37cfc8280017c0cd69d22a596120f19e22b7bcff (please verify).\n The main problem is fixed, but because of using the `vcoords` to scroll, editor doesn't scroll to show all the content of the widget.\nmy solution for this issue was:\n\n```\naddWidget: function(pos, node, scroll) {\n  pos = localCoords(clipPos(pos), true);\n  node.style.visibility = \"hidden\";\n  code.appendChild(node);\n  var ntop = showingFrom * lineHeight() + pos.yBot,\n  nh = node.offsetHeight,\n  nw = node.offsetWidth;\n  if (ntop + paddingTop() > Math.max(code.offsetHeight, wrapper.offsetHeight) - nh) {\n    ntop = ntop - lineHeight() - nh;\n  }\n  node.style.top = (ntop + paddingTop()) + \"px\";\n  node.style.left = Math.min(pos.x + paddingLeft(), Math.max(code.offsetWidth, lineSpace.offsetWidth) - nw - 7) + \"px\"; //7 is needed but i dont know why\n  node.style.visibility = \"\";\n  if (scroll)\n    scrollIntoView(pos.x, ntop, pos.x + nw, ntop + nh);\n}\n```\n\nThis one scrolls to widget like the old code and also sets widget coordinates to not to overflow current `code` element. \ni.e. if addWidget is called for the last line in editor, it is added to top of the current line instead of adding to bottom and causing scroller to move.\ni added this control because its really annoying when editor scrolls down for widget and scrolls back when widget is removed.\n I see the problem. However, your solution seems too intimately tied to your application to make much sense as a general API. I'm starting to lean towards deprecating again -- this method is breaking so many abstraction barriers that it'll probably never be solid. Have you tried just keeping your widget external to the editor? How does that work out?\n I haven't tried external widget but similar problems would occur when it is added close to browser window edges.\nI also think its better when widget does not overflow from the editor (as external does) and scrolls with the content.\n There are 2 differences and a bug:\n\n**bug:**\nwidget is added to wrong position when horizontal scrollbar is shown and `scrollLeft` is not zero.\nthis can be fixed by using `Math.max(code.clientWidth, lineSpace.clientWidth)` instead of `code.clientWidth` when calculating `hspace`\n\n**diff1:**\nWidget used to be added below current line but it is added over the line in new code.\nI think this is because of using `pos.y` instead of `pos.yBot` when setting `top`.\nIt would be better using `pos.yBot` on `fit` mode.\n\n**diff2:**\nOn the code I pasted 4 messages above, it behaved different for preventing vertical and horizontal overflows such as:\nhorizontal: fits widget to rightmost edge of editor content to prevent expanding. _(this is same with yours)_\nvertical: to keep curent line visible, adds widget above current line instead of fitting to bottom.\ni mean i prefer  `pos.y - node.offsetHeight` over `vspace - node.offsetHeight` when calculating `top`.\n All issues seems fixed on this commit.\n    I've tested this on mixed mode demo <sup>[1]</sup> and with the latest jQuery source <sup>[2]</sup> as an example.\n\nThere are two general cases:\n1. Simply paste jQuery into the existing `<script>` tags. Last few lines are not highlighted.\n2. Paste jQuery into an empty document _then_ wrap it into `<script>` tags. Highlighting is completely messed up.\n\nMy first bet was the regexes, but in Javascript-only mode it works as expected. Tested in latest Chrome and Firefox.\n\nThat's all I have.\n\nPeace bro :)\n\n[1] http://codemirror.net/mode/htmlmixed/index.html\n[2] http://code.jquery.com/jquery-1.6.1.js\n  Here's a feature request for translating tab to spaces. (like one tab -> two or four spaces )\n\nCode mirror use pre to emulate tabs , but the default tab width in browser is too big ,\nA suggestion is to create a option to use spaces with a xml-tab wrapper to instead of tab.\n\nThat will make it more useful , although I think it also will gain some performance cost.\n I mean it's still a tab in \"value\", but use spaces in \"view\".\n\nWhat actually I want is a \"tab size\"  feature\nThat make sense for almost all modern editor ,\nlike in Notepad++ it has a \"tab size\" to adjust the tab view.\n\nhttp://screencast.com/t/3xKezQxpzlBB\n\nIt's just a feature request , i could handle it well by myself,\nI am fine if you think that's still a trivial one. ;)\n\nBut I think it's still a common usage for editors and worth to post a feature request for me.\n ok ,got it. Thanks anyway. ;)\n Why is this impractical?  Can't the tab be marked up with a span in which we can change the letter spacing?\n\nOr, better yet, why not auto-convert tabs to a set number of spaces, and just treat them differently when navigating, deleting, etc?\n\nThis is a must-have for any text editor, for sure.\n  Here are the changes discussed here:\nhttp://groups.google.com/group/codemirror/browse_thread/thread/8f4a48cd1bc3f176\n\nThe changes make it possible to extend CodeMirror with new API functions which have access both to other API functions and to CodeMirror internal objects (like \"sel\", for example). Also, they allow adding new methods and properties to modes registered in the CodeMirror object (the modes are extended when retrieved via CodeMirror.getMode).\n\nThe three lines marked as removed and added in the middle of codemirror.js are not my changes - looks like a bug at github, because I only copy-pasted the source from your branch and inserted the three portions of new code.\n I used multiple commits to sync the current version of the code with the latest version of CodeMirror from your branch. After that, I copy-pasted the three pieces of new code (as you see, there are only 26 additions and 4 deletions, some of which are comments and false positives). I would have rolled back to a previous version or simply re-created my repository anew if I knew the number of commit actions affects smth...\n\nAs for the reformatting, I'm not sure what problem is - I just copy-pasted your code with minimal changes and never applied any auto-formatting to it.\n  Unable to get value of the property 'stateAfter': object is null or undefined \ncodemirror.js, line 1226 character 9 (IE9)\n\nIf lineHeight() returns 0, visibleLines() will compute a result of NaN which cascades to the value of the \"showingFrom\" variable resulting in the error indicated.  lineHeight can return 0 if lineDiv.offsetHeight is 0 and nLines is > 0.\n\nHow is it possible for lineDiv.offsetHeight to be 0?  Beats me.  I'm integrating CM2 into a larger application and haven't found a way to reproduce this in a standalone scenario, so this could be a bug on my side and not CM's fault.\n\nRegardless, adding \" || 1\" to the end of \"if (nlines) return lineDiv.offsetHeight / nlines;\" (as is already done a couple lines down) fixes the problem and may be worth adding as a sanity check.\n Ah yes, definitely some display:none going on.  Thanks!\n  With readOnly set to true, CodeMirror should ignore the onFocus and onBlur events. Closes #97\n Nice! :D\n  Any particular reason you excluded 'keyup' and only included 'keydown' and 'keypress'?\n No, do you want me to write one? I am assuming you mean a unit test\n Oh, ok. I am using the keyup handler for live syntax checking and saving the user input into a data store. \n\nUsing it in stylebot :)\nhttps://github.com/ankit/stylebot/blob/769a3740d8024a74cde05ebf8a3b58123463aa2d/stylebot/js/widget.advanced.js#L28\n  Fixed issue where if editor had a fixed position or had a parent with fixed position, the cursor was placed at the wrong position on clicks. Led to the editor becoming unresponsive.\n Use case: CodeMirror inside a modal popup with fixed position\n  Try this\n\n```\nfoo {}\n<left_key>\n<enter>\n<enter>\n<up_key>\n<tab>\n```\n\nand check out the indentation of that line, \n Oh sorry about the poor report! here are the details:\n- **mode**: css\n- **tabMode**. \"classic\"\n- **indentUnit**: 4\n- **expected**: the mentioned line should be 4 spaces away from the left border. It should look like this:\n\n```\nfoo {\n    |\n}\n```\n- **behavior**: the mentioned line is 8 spaces away from the left border. Even if I delete the content of the line and retab it, it looks like this:\n\n```\nfoo {\n        |\n}\n```\n\n**Note**: maybe it has something to do with the tabMode, anyway I think that shouldn't be the normal behavior because is a bit misleading. Also, if I do this, it works as expected:\n\n```\nfoo {\n<enter>\n<enter>\n}\n```\n\nIt automatically gets the right indentation on the blank line (in the above example, treat every line as something you type)\n @rduenasf \n\nenterMode - Behavior when Enter is pressed. \"indent\" is the default. It uses the mode's indentation rules to give the new line the correct indentation.\n\ntabMode - Behavior when Tab is pressed. \"classic\" is the default. When nothing is selected, insert a tab. Otherwise, behave like the \"shift\" mode. \n\nSo, setting \"tabMode\" to shift will solve your problem.\n\n@marijnh\nI too think that it'll be more intuitive if the tabMode default setting behaved similar to the enterMode i.e. use the mode's indentation rules instead of inserting a tab.\n  Here are my sources which have been discussed here:\nhttp://groups.google.com/group/codemirror/browse_thread/thread/19101023e091d748\n\nI used the release v. 2.0 of CodeMirror as the base (just with a single onChange patch applied). All changes are marked with comments like (done that for my own convenience):\n// ===== Changed by A.K. ====== \n.... \n// ========================\n\nHere is a detailed list of changes:\n1. Entities added to the javascript, css, xml and htmlmixed modes:\n- var commentStart\n- var commentEnd\n- var wordWrapChars\n- function autoFormatLines(text)\n- function getModeAtPos(text, absPos)\n- Functions added to the htmlmixed mode:\n- function getModeInfos(text, absPos)\n- Functions added to the javascript mode:\n- function getNonBreakableBlocks(text)\n- Methods added to CodeMirror internals:\n- function relToAbs(relPos)\n- function absToRel(absPos)\n- function getWrappedText(text, charsPerLine)\n- Methods added to the CodeMirror API (public methods):\n- function getSelectedRange()\n- function indentRange(isIncreaseIndent, from, to)\n- function commentRange(isComment, from, to)\n- function wordWrapRange(from, to)\n- function autoIndentRange(from, to)\n- function autoFormatRange(from, to)\n- Changes to CodeMirror internals:\n- The onChange event patch applied to the endOperation function (see comments in code).\n\nI only made changes to the javascript, xml, css and htmlmixed modes since those are the modes I work with. \n Hi Marijn,\n\nOK, I'll move the word wrapper to a separate file and share my results. You\nmean adding a wordWrap method to the CodeMirror object (the one which also\nhas the CodeMirror.fromTextArea method), not to the API, right?\n\nThe amount of additional code isn't so great, actually, I just use a\nformatting model different from the one used by you - that's why the code\nlooks significantly longer although it's really not ;-) I'm also afraid that\nVisual Studio reformatted the entire codemirror.js file, that's why it\nlooked like there were many changes although I only added several functions\nto the API and several more functions to the internals. When it comes to a\n\"real\" environment, I'll probably find a tool to remove all indents and\ncomments from JavaScript files to make the code files as small as possible -\njust keep it exceedingly indented during development.\n\nAs for the auto-formatting feature, I'd like to note that this can be a\nreally useful functionality. It was actually requested by a Russian-speaking\nCodeMirror user who contacted me directly via e-mail some time ago. Let me\ntry to convice you that it can be useful and does not increase the traffic\nsignificantly :-)\n\nWhile the indentation part of the formatting feature is trivial indeed (it\njust uses your indentLine API method), the lines breaking feature is not so\nobvious - specifically for HTML and JavaScript markup. All changes which\nconcern auto-formatting are mainly implemented in corresponding mode files\n(which will only be loaded if you want to work with this specific mode), so\nthe size of codemirror.js is only incresed by 10 lines (if unneeded line\nbreaks and comments are removed). Now, consider the following use case: when\nyou need to work with a piece of markup copied from a web browser, with a\npage source or with a JavaScript file, with line breaks and indentation\nremoved, it is really hard to read the code. A perfect example is Google\nChrome which gave me 50+ Kb of source code in a single line when I copied a\nsmall attributes table from w3schools and pasted it to a WYSIWYG HTML\neditor.\n\nThe methods I added to the htmlmixed, javascript, css and xml modes allow\nconverting the ugly markup to a human-readable form. Also, when dealing with\nHTML, different rules are applied to different pieces of code (depending on\ntheir automatically detected xml, js or css mode) and therefore the markup's\n\"meaning\" remains unchanged (e.g. string constants or for loop headers in\nJavaScript are not broken even if they contain the ;, { or } chars). So, the\nfeature is not as simple as it seems ;-)\n\nOn Mon, May 16, 2011 at 9:09 PM, marijnh <\nreply@reply.github.com>wrote:\n\n> Hi Alexey,\n> \n> First, I appreciate the pull request. But I'm trying to keep this editor as\n> minimal and lightweight as possible, and since all these, except the\n> word-wrapper, can be trivially done on top of the existing API, I think they\n> have no place in the core editor. The word-wrapping is certainly useful --\n> if you could implement it as a separate file, I'd gladly put that in, for\n> example lib/wordwrap.js. For example, you could assign CodeMirror.wordWrap\n> to be a function taking an instance as the first argument (there is no\n> 'plugin' system yet where you can add methods), and the range to wrap as the\n> next arguments.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/marijnh/CodeMirror2/pull/94#issuecomment-1177679\n\n## \n\nBest regards,\nAlexey\n Hi, any news on that?\n If you're interested in word wrapping a text range, the latest news are here:\nhttp://groups.google.com/group/codemirror/browse_thread/thread/6f3308fc16eaa83e/2cac2c44b40594e7?lnk=gst&q=wrap#2cac2c44b40594e7\n\nHowever, the code was created for CM 2.0 and it currently contains a compatibility issue (I haven't updated it to get the correct editor width from the new Scroller element yet). As for other features, I gave up trying to configure Github on my Windows PC (as mentioned in the post above). I can send you the whole code (wrapping, auto-formatting, etc.) if you want to use it (and if you're probably willing to create a properly arranged Github pull request from that). Note, however, that it includes a few changes/additions to codemirror.js, which are necessary to make the whole thing work.\n Has there been any progress in making this part of the core? This feature is really useful.\n Not really. I've posted a newer version of the wrapping code in the thread mentioned above a while ago. Also, I've asked one of CodeMirror users to share my code here when he has time for that. The point is that I gave up configuring GitHub client on my machine, so I was never able make a pull request with my additional files, which extend codemirror.js and some modes I work with (CSS, XML, HTML, JavaScript). Currently, I just send my code to any person which is interested in it via e-mail.\n Wow. OK. Thank you for sending the code.\n\nIf it works without any hiccups I'm more then happy to send through a pull request on your behalf (in addition to this one, I understand Marjin had concerns over the size of this pull request).\n Looks like you no longer need to - I've forwarded the code to Marijn\nyesterday via e-mail. Feel free to ask me if you'll have any questions on\nthe code. It would probably be better to use the CodeMirror group in Google\nGroups for that.\n\n## \n\nBest,\nAlexey\n  I'm trying to use CodeMirror 2 for a reStructuredText editor, specifically in codemirror branch of [redmine_restructuredtext_formatter](http://code.ebrahim.ir/redmine_restructuredtext_formatter). The editor is supposed to work well in both left-to-right and right-to-left layouts. I'm using a patched version of CodeMirror  for RTL layouts. The patch is available in [codemirror-patches](http://code.ebrahim.ir/codemirror-patches). Everything is good except some mouse/cursor issues which I couldn't fix. I thought maybe you can help me with that part.\n\nTo reproduce the bug, apply my [right-to-left-layout.diff](http://code.ebrahim.ir/codemirror-patches/src/tip/right-to-left-layout.diff) and then modify your mode/rst/index.html and add a `dir=\"rtl\"` to your `form` or `html` tag. Then try to reposition cursor or select some part of text using mouse, specially when a horizontal scrollbar is present. Try with both line numbers enabled and disabled. Also try some right-to-left and/or bidirectional text, such as following text, because it changes how the selection of text is done:\n\n\u0633\u0644\u0627\u0645! \u0627\u06cc\u0646 \u06cc\u06a9 \u0645\u062a\u0646 \u062f\u0648\u062c\u0647\u062a\u0647 \u06cc\u0627 bidirectional \u0627\u0633\u062a.\n In fact I've already changed pageX like [this](http://code.ebrahim.ir/codemirror-patches/src/703d692eef61/right-to-left-layout.diff#cl-86):\n\n```\n    pageX: function() {\n-      if (this.e.pageX != null) return this.e.pageX;\n       var doc = this.target().ownerDocument;\n-      return this.e.clientX + doc.body.scrollLeft + doc.documentElement.scrollLeft;\n+      if (this.e.pageX != null) return doc.body.clientWidth - this.e.pageX;\n+      return doc.body.clientWidth - this.e.clientX - doc.body.scrollLeft - doc.documentElement.scrollLeft;\n    },\n```\n\nAnd it works well, but only when you have a unidirectional RTL text and no scrollbars. I couldn't fix the positioning of cursor when an scrollbar is present and/or the text is bidirectional (mixed LTR and RTL). I tried tampering with `posFromMouse` and `eltOffset` trying to take width and offset of scrollbars into account, but no success, and no clue what to do next. :(\n Merging this into #294\n  added an option to pass in the marker data as an object when adding a marker. The marker data may now hold an id (along with the text and className) which will be the id of the <pre> element that is used for the marker. This is useful for binding actions to the marker (e.g. onclick, onmouseover events, etc...)\n Well.. I'm currently binding event handler directly on the marker element which I lookup by the provided id. It's very easy to generate unique ids as I add the markers, but also it enables me to assign whatever unique handlers for every marker I add. Since I used it from within GWT, searching by id supported out-of-the-box, but I guess you can do the same with classes. In a way classes may be even better as you can share behavior between the same marker \"types\". You can always emulate and \"id\" by assigning a unique class for each marker.\n  When making a selection using the keyboard in Safari (e.g., holding shift and pressing an arrow key), the insertion point is inconsistent.  To reproduce this bug:\n1. In Safari on Mac, open a simple CodeMirror page, such as the [Auto-Resize Demo](http://codemirror.net/demo/resize.html)\n2. Place your cursor at the beginning of the word \"auto\" on line 2.\n3. Hold the shift key and press the right arrow key to select the word \"auto\".\n4. While still holding the shift key, press the left arrow key.  At this point the selection should be `\"aut\"`, but instead it is `\" auto\"`, because the selection insertion point moves from the left rather than from the right of the selection.\n\nI'm guessing this bug has to do with handling the carat when a selection exist and the shift key is **not** held down.  (When the shift key is not in use, then the behavior described above is correct.)  It's also worth noting that this bug does not exist in Chrome on Mac.\n\nThanks again for such an awesome code editor!\n This appears to be a difference in what Chrome and Safari return when calling `textarea.selectionStart`\n\nI tracked this down to CodeMirror's `prepareInput` function, which calls the `setSelRange` function to set the selection range.  When I add log output and test in Safari and Chrome, I see two different ranges being set.  It's the value of `sel.from.ch` that is different between Safari and Chrome.\n\nI'm still trying to track down the real source of this bug, which appears to be caused by the insertion point being kept at the beginning of the selection when it should be at the end of the selection.  I'll comment here again if/when I can find out more.\n I'm still working on finding the difference between Chrome and Safari that is causing this bug.  In case anyone is interested, visit a simple CodeMirror page (like the [Auto-Resize Demo](http://codemirror.net/demo/resize.html)) and run the following two lines in a Safari web inspector console.\n\n``` javascript\nvar t = document.getElementsByTagName('textarea')[1];\ndocument.body.appendChild(t);\nt.style.position = 'static';\nt.style.width='100%';\n```\n\nThis code makes CodeMirror's internal textarea visible at the bottom of the page so you can see what's going on behind the scenes with cursor position and text selection.\n hi, your script to look at the textarea is very useful...\n\nOk, I can confirm this also happens in a WebView embedded in another app, \nI checked this because it is a variant on safari and does have slightly different Webkit features by default. (I have had other bits that work in it and chrome but not safari)\nAlso this particular comment box (that I'm typing in [on safari] behalves properly and subtracts a char for left and/or right shift/arrow, so it's not part of Safari's default behavior to 'add-to' for shift/right arrow. \ncheers  John\n Sorry for taking forever on this! It was caused by a somewhat weird do-what-i-mean approach that Safari takes to programmatically set selections.\n Thanks so much for fixing this!  Much appreciated!\n It appears this issue has cropped up in Chrome now (though Safari is still fine).\n\nI did a quick test, and this can be fixed by changing [line 2451](https://github.com/marijnh/CodeMirror2/blob/f2ffee9fd375bae7e9c01b571afa6b4b4b70d158/lib/codemirror.js#L2541) of `codemirror.js` to detect `/AppleWebKit/` in `navigator.userAgent` instead of detecting `/Apple Computer/` in `navigator.vendor`.\n\nIt'd also of course make sense to rename the `safari` variable to `webkit`.  I verified that this variable is not currently being used for anything but fixing the original bug reported in this issue.\n  http://codemirror.net/manual.html says:\n\n  myTextArea.parentNode.replaceChild(myTextArea, elt);\n\nBut it needs to be:\n\n  myTextArea.parentNode.replaceChild(elt, myTextArea);\n   CodeMirror should not handle Ctrl+Tab which is a browser shortcut.\n  Again the Tampermonkey use case. :)\n\nScript Source/Editor Value: http://userscripts.org/scripts/source/23671.user.js\n\nIf this script is opened the syntax highlighting starts and it is possible to scroll or edit something for about 1 second. After this the editor freezes for 30-40 seconds.\n\nI'm using CodeMirror Release 28-03-2011: Version 2.0.\n What chinese pages do you mean? The editor content was the javascript source that can be downloaded from the given link. In this case \"Google Reader Filter\" that works at the reader.google.com. But no problem, you can get the source now from pastebin.com too: http://pastebin.com/ixZnpDsV\n\nThanks for your time...\n  I'm using CM2 in tampermonkey for chrome to allow the user to edit scripts, but some scripts make the editor unresponsible for a minute or two.\n\nFor example if the source of this script: http://userscripts.org/scripts/show/60231 is loaded into the editor it takes 2 minutes until the syntax highlighting starts.\n\nThanks,\nJan\n Forgot to mention:\n\nI'm using CodeMirror Release 28-03-2011: Version 2.0.\n\nAnd thanks for this great editor! :)\n Ok, I got it. :) The link above points to the userscript page and not the source. Sorry.\nThis is the link to the userscripts source: http://userscripts.org/scripts/source/60231.user.js\n\nI've pasted this to pastebin too (http://pastebin.com/AGxbFMdg) but it seems that the encoding got broken while copying. So maybe you want use the first link.\n\nThanks again. :)\n Ok, I'll add this to tampermonkeys known issues. I thought the two issues might have a different root cause, because the script from the other issue is editable for about 1 second whilst this script blocks any user input immediately when the editor is opened. Thanks for your time and keep up the great work! :)\n  Hi there\n\nTiny one-line fix for the css mode.\nMulti-token selectors were being marked as css values, rather than selectors (visible [here](http://codemirror.net/mode/css/index.html) on the `#navigation a` and `h1:before, h2:before` lines)\n\nCheers for the great tool\n  - Trailing commas in object literals are not allowed by the spec and are handled poorly in some browsers.\n- Added var to some variable declarations that were not meant to be globals.\n I don't see this commit in master anymore. Did a subsequent push accidentally orphan it?\n Thanks!\n  While this isn't exactly an issue, I figured this might be the best place to bring your attention to support for iOS devices (and possibly Android, Windows 7, etc.).  Obviously this wasn't possible with CodeMirror 1 and its use of an IFRAME and contentEditable, but with very little modification to codemirror.js I was able to get a functional version on my iPad and iPhone.  That said, I think the future of CodeMirror on mobile devices is very promising, but there are a couple issues I immediately noticed that may prove to be very simple to solve.\n\nFirst, for devices with soft keyboards the hidden textarea needs to gain focus in order for the keyboard to appear on-screen.  I was able to work around this by making the text area visible and giving it focus.  After it's initial focus, the keyboard responded rather naturally (but not perfectly) to focusing and blurring on CodeMirror itself.  Further testing is needed, but I think it would be possible to make the textarea \"visible\" and position it absolutely off the screen to accommodate this.\n\nThe other problem I noticed is that, when the textarea receives input and is out of the viewport, mobile Safari centers the display on the textarea.  This seems like it would be easy to fix by setting the vertical position of the hidden textarea to the same line the \"cursor\" is on.\n\nLet me know what you think, Marijn.  And congrats and great work on CodeMirror 2!\n I unfortunately do not have time to test and hack and debug on iOS devices at this point. I'm happy to hear things seem to be close to working, and I'd very much appreciate if someone could contribute a patch that makes them really work.\n\nThe textarea is already visible, in that it stuffed in an overflow: hidden, zero-width div. Ths div is also already being positioned to prevent the scrolling issue you saw. I'm not sure what mobile safari uses to determine whether something is on screen. For all the big desktop browsers, the inside-zero-width-div thing seems to suffice.\n I see...the textarea moves to the cursor location on click.  I was under the impression that it was static and didn't move.  I think that Mobile Safari is centering on the textarea before it is replaced, which might be worked around by manipulating the focus to occur after the textarea is moved.\n\nIf I get the time I'll play around with it some more.  In the meantime, maybe a few more folks will jump in with some ideas.  It's definitely not far off.\n @claviska: you said \"with very little modification to codemirror.js I was able to get a functional version on my iPad and iPhone. \".  Can you post a fork with your changes? I've played a little with codemirror on the ipad today.\n I unfortunately didn't save any of my changes.  But to clarify, I didn't intend for \"functional\" to mean production-ready.  The adjustments I made were very simple\u2014if I recall correctly they were making the hidden text area visible and changing it's position just a bit.  Once the text area was visible, CodeMirror worked to a reasonable degree in iOS, but it was still buggy at times (see my comment above).\n I took a primitive stab at things, and made my experiment available here: www.litech.org/~schanzer/iOS\nI haven't bothered with scrolling yet, only mucked about with selection and inserting the cursor. \n Selection in iOS is great, but hard to fake - a contextual menu appears at the cursor location, and dots appear at the upper-left and bottom-right corner of your selection. Moving these dots extends or shrinks the selected area. You can't select anything outside of the inputDiv, which is a problem unless the inputDiv were to grow and move with the selection boundaries. I spent some time trying to make that happen, and then gave up and tried the alternate approach. \n\nCan I ask what's the quirkiness that makes the other approach so bad? Assuming one restricts font-family and font-weight to be constant (line-height is already restricted), this seems work perfectly on all non-IE browsers. I'd rather have a simple core, with all the faked-cursor and selection code enabled only for IE. \n There are multiple issues with keeping a textarea aligned. The biggest one is that it requires the whole document to be present in the textarea, so that clicks are interpreted properly. This gets slow for bigger documents. I simply didn't architect CodeMirror like this, and to change to this model is going to be a lot of work. If someone else does all this work, I'm very interested in the result. But I won't accept a half-hearted patch and then take on the burden of supporting it.\n Understood -- for the record, I don't consider my tinkering around to be anywhere close to a patch. I spent a little time mocking something up that seemed to work, and wondered if you'd already gone down that road and deemed it foolish. I'll continue to play, and if anything legit comes back I'll be sure to submit a patch.\n OK people, has anyone besides me jumped in and tried an iPad (iOS) with a Bluetooth keyboard? The only thing that did not seem to be working was the left/right/up/down arrows. I tried a number of ways to grab the values without success. Any ideas? I am using this keyboard but since the arrows work in web text boxes it doesn't seem to be a keyboard issue. It seems to be the way safari works on iOS. http://www.logitech.com/en-us/1111/8214?section=overview&tabs=1,3,2,4,5&hub=1\n\nFor me it seems most of the rest is up and running. It is in fact the best text code editor I have used on the device to date.\n Nice! Possibly, the arrow issue is simply caused by those keys firing non-standard key codes in iOS. Could you go to http://mochi.github.com/mochikit/examples/key_events/index.html and see which (if any) key events are fired when you press the arrow keys?\n There are no key events firing. This is strange because the editor works. I was expecting only the arrow keys to not work.\n https://groups.google.com/forum/?fromgroups=#!topic/CodeMirror/exGdyp4NTOo is relevant here (an implementation of iOS selection behavior)\n Marijnh, Copy and Paste works on standard 2.35 CodeMirror (just double-tap inside editor)! Only selection doesn't work! It's only required to repair select function. The schanzer's version is very large, has really a lot of issues, superfluous function of additional keyboard and works very-very-very slow (can't use it). We only need to repair selection on the CodeMirror to bring iOS support!\n Relax, my friend. There's a lot of low-hanging performance fruit to be picked, but I'm working on making all the corner cases work correctly before I start optimizing. Native selection behavior is very difficult to emulate - if you can do it in less than 200 LOC, that would be wonderful! \n :+1: for better mobile support!\n", "text_all_count": 29566, "text_word_token": ["NUMBER", "Go", "to", "LINK", "NUMBER", "Click", "on", "line", "NUMBER", "where", "there", "s", "a", "single", "collapsed", "X", "character", "Notice", "that", "the", "cursor", "be", "not", "placed", "at", "the", "beginning", "of", "the", "line", "NUMBER", "There", "s", "a", "single", "space", "before", "it", "NUMBER", "In", "fact", "since", "I", "have", "inclusiveLeft", "true", "there", "s", "no", "way", "to", "get", "the", "cursor", "to", "the", "beginning", "of", "the", "line", "NUMBER", "NUMBER", "Type", "x", "NUMBER", "Notice", "that", "the", "space", "disappears", "and", "the", "x", "be", "rendered", "where", "the", "space", "was", "NUMBER", "If", "you", "move", "the", "cursor", "before", "the", "x", "it", "be", "at", "the", "beginning", "of", "the", "line", "now", "NUMBER", "This", "be", "operate", "as", "I", "d", "expect", "NUMBER", "It", "would", "be", "great", "if", "after", "step", "NUMBER", "the", "line", "rendered", "as", "a", "blank", "line", "and", "the", "cursor", "would", "appear", "all", "the", "way", "to", "the", "left", "NUMBER", "Looks", "good", "NUMBER", "Thank", "you", "When", "in", "keyMap", "vim", "or", "presumably", "use", "vim", "NUMBER", "js", "apple", "keystrokes", "be", "overridden", "they", "aren", "t", "be", "pass", "to", "the", "browser", "NUMBER", "Hi", "francisreyes", "what", "specific", "apple", "keystrokes", "be", "you", "having", "problem", "with", "for", "example", "in", "LINK", "Clicking", "in", "the", "code", "mirror", "window", "and", "insert", "some", "text", "press", "ESC", "NUMBER", "Apple", "T", "Apple", "N", "Apple", "W", "etc", "doesn", "t", "add", "a", "new", "tab", "open", "a", "new", "window", "or", "close", "a", "window", "as", "expected", "NUMBER", "Using", "Safari", "NUMBER", "NUMBER", "It", "looks", "like", "this", "be", "cause", "by", "nofallthrough", "which", "vim", "sets", "to", "prevent", "random", "key", "presses", "in", "normal", "mode", "from", "inserting", "characters", "into", "the", "editor", "NUMBER", "If", "handle", "stop", "be", "returned", "from", "lookupKey", "handleCharBinding", "will", "call", "preventDefault", "NUMBER", "I", "m", "not", "sure", "if", "this", "be", "intended", "behavior", "or", "an", "oversight", "NUMBER", "marijnh", "If", "it", "s", "intended", "behavior", "then", "it", "d", "be", "nice", "to", "have", "an", "additional", "option", "for", "a", "keymap", "to", "have", "nofallthrough", "behavior", "without", "preventDefault", "NUMBER", "Works", "in", "Chrome", "because", "Chrome", "doesn", "t", "let", "you", "capture", "system", "shortcuts", "NUMBER", "Yunchi", "Luo", "Sent", "with", "Sparrow", "LINK", "On", "Thursday", "May", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Francis", "Reyes", "write", "for", "example", "in", "LINK", "Clicking", "in", "the", "code", "mirror", "window", "and", "insert", "some", "text", "press", "ESC", "NUMBER", "Apple", "T", "Apple", "N", "Apple", "W", "etc", "doesn", "t", "add", "a", "new", "tab", "open", "a", "new", "window", "or", "close", "a", "window", "as", "expected", "NUMBER", "Using", "Safari", "NUMBER", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "NUMBER", "marijnh", "thank", "you", "for", "the", "quick", "patch", "NUMBER", "Unfortunately", "disableInput", "do", "break", "vim", "mode", "NUMBER", "It", "should", "be", "possible", "to", "edit", "in", "normal", "mode", "NUMBER", "For", "example", "pressing", "dw", "should", "delete", "a", "word", "and", "then", "pressing", "p", "should", "paste", "the", "delete", "word", "back", "in", "NUMBER", "In", "VIM", "normal", "mode", "text", "insertions", "from", "CodeMirror", "s", "hidden", "input", "should", "be", "disabled", "but", "programmatic", "edits", "triggered", "by", "the", "keymap", "should", "still", "work", "NUMBER", "Is", "that", "doable", "Opened", "LINK", "to", "address", "NUMBER", "Thanks", "Sorry", "for", "the", "poorly", "thought", "out", "patch", "NUMBER", "I", "guess", "that", "should", "do", "it", "then", "NUMBER", "Step", "by", "step", "Open", "LINK", "Copy", "text", "couple", "of", "times", "to", "get", "about", "NUMBER", "lines", "Scroll", "to", "the", "very", "end", "of", "the", "text", "Execute", "editor", "NUMBER", "scrollIntoView", "CodeMirror", "NUMBER", "Pos", "NUMBER", "NUMBER", "Get", "CM", "s", "current", "scroll", "state", "with", "editor", "NUMBER", "getScrollInfo", "NUMBER", "top", "which", "outputs", "NUMBER", "for", "me", "Run", "editor", "NUMBER", "charCoords", "CodeMirror", "NUMBER", "Pos", "NUMBER", "NUMBER", "local", "NUMBER", "top", "which", "output", "NUMBER", "for", "me", "Expected", "editor", "NUMBER", "charCoords", "will", "return", "top", "value", "exactly", "the", "same", "as", "editor", "NUMBER", "getScrollInfo", "It", "looks", "like", "scrollIntoView", "method", "doesn", "t", "work", "properly", "now", "the", "topmost", "line", "be", "not", "NUMBER", "visible", "step", "number", "NUMBER", "It", "seems", "be", "work", "for", "me", "Thanks", "Problem", "The", "only", "way", "to", "figure", "out", "a", "first", "visible", "line", "number", "or", "a", "bottom", "visible", "line", "number", "be", "to", "call", "codeMirror", "NUMBER", "coordsChar", "left", "NUMBER", "top", "NUMBER", "local", "NUMBER", "please", "correct", "me", "if", "I", "m", "wrong", "NUMBER", "The", "problem", "be", "however", "that", "this", "method", "be", "pretty", "expensive", "because", "of", "a", "measureLineInner", "call", "so", "in", "case", "of", "calling", "it", "multiple", "times", "in", "a", "scroll", "event", "handler", "on", "a", "file", "with", "multiple", "long", "lines", "scrolling", "gets", "laggy", "NUMBER", "The", "visibleLines", "method", "seems", "to", "be", "a", "natural", "solution", "for", "the", "problem", "NUMBER", "Does", "the", "editor", "NUMBER", "lineAtHeight", "NUMBER", "local", "return", "the", "top", "visible", "line", "It", "always", "returns", "NUMBER", "for", "me", "Thanks", "that", "works", "NUMBER", "jade", "and", "stylus", "rock", "drop", "that", "mode", "in", "Yea", "let", "s", "drop", "in", "this", "one", "by", "aaronmccall", "LINK", "NUMBER", "Aaron", "s", "looks", "pretty", "XMLy", "so", "let", "me", "know", "if", "CodeMirror", "be", "ready", "for", "that", "or", "what", "NUMBER", "I", "totally", "agree", "I", "m", "super", "confused", "all", "the", "time", "but", "I", "could", "kick", "you", "back", "another", "commit", "with", "the", "aaronmccall", "mode", "or", "miksago", "s", "classic", "tmbundle", "LINK", "tmbundle", "readme", "NUMBER", "Let", "me", "know", "so", "I", "could", "start", "use", "your", "app", "right", "away", "it", "looks", "awesome", "Oh", "tough", "luck", "NUMBER", "Yea", "I", "look", "like", "a", "retarded", "person", "because", "I", "m", "accustomed", "to", "everything", "be", "do", "for", "me", "by", "much", "better", "programmers", "who", "happen", "to", "surround", "everything", "I", "m", "into", "NUMBER", "I", "guess", "that", "comes", "with", "the", "turf", "in", "any", "decent", "programming", "language", "these", "days", "NUMBER", "So", "yea", "I", "meant", "no", "offense", "I", "m", "looking", "at", "the", "CodeMirror", "modes", "now", "and", "OK", "I", "see", "what", "you", "re", "saying", "NUMBER", "Well", "jade", "be", "like", "a", "JavaScript", "library", "write", "through", "JavaScript", "in", "the", "first", "place", "as", "far", "as", "I", "know", "what", "be", "that", "call", "a", "dictionary", "NUMBER", "it", "s", "probably", "doable", "over", "loops", "or", "reversing", "reg", "exs", "already", "write", "so", "I", "m", "def", "interested", "NUMBER", "Earlier", "today", "I", "enjoyed", "Adobe", "s", "build", "it", "had", "me", "on", "a", "fun", "little", "environment", "in", "no", "time", "with", "free", "server", "reloads", "plus", "client", "side", "page", "refreshes", "well", "you", "just", "have", "to", "switch", "socket", "NUMBER", "io", "on", "and", "it", "was", "great", "not", "even", "one", "line", "of", "file", "watcher", "stuff", "LINK", "v", "NUMBER", "node", "live", "Bro", "after", "reading", "all", "this", "all", "I", "can", "think", "of", "be", "this", "awesome", "horseshark", "Wat", "LINK", "_mj", "NUMBER", "yln", "NUMBER", "bOm", "NUMBER", "qbx", "NUMBER", "do", "NUMBER", "_", "NUMBER", "jpg", "Can", "t", "believe", "there", "s", "a", "picture", "out", "there", "on", "the", "internet", "that", "captured", "my", "state", "of", "mind", "during", "this", "commit", "the", "fact", "that", "you", "brought", "it", "into", "this", "discussion", "be", "even", "more", "impressive", "not", "entirely", "sure", "what", "this", "commit", "was", "all", "about", "NUMBER", "but", "I", "ve", "add", "a", "jade", "mode", "here", "NUMBER", "f", "I", "m", "looking", "to", "add", "stylus", "soon", "I", "m", "experimenting", "with", "line", "widgets", "for", "the", "first", "time", "and", "it", "would", "have", "be", "convenient", "to", "place", "them", "above", "the", "line", "which", "CodeMirror", "also", "provides", "functionality", "for", "NUMBER", "In", "short", "this", "be", "what", "I", "m", "doing", "The", "editor", "be", "read", "only", "NUMBER", "When", "a", "user", "clicks", "a", "list", "item", "the", "text", "be", "inserted", "at", "the", "cursor", "if", "it", "be", "at", "the", "beginning", "of", "a", "line", "NUMBER", "All", "the", "current", "line", "contents", "if", "any", "be", "shifted", "down", "one", "line", "NUMBER", "If", "it", "s", "not", "at", "the", "beginning", "the", "text", "be", "inserted", "on", "the", "line", "below", "NUMBER", "Upon", "insertion", "the", "text", "be", "marked", "atomic", "and", "a", "line", "widget", "be", "placed", "above", "it", "NUMBER", "So", "this", "was", "the", "result", "Line", "Widgets", "above", "bug", "LINK", "c", "NUMBER", "c", "NUMBER", "e", "NUMBER", "NUMBER", "c", "NUMBER", "d", "NUMBER", "aab", "NUMBER", "c", "NUMBER", "acf", "NUMBER", "png", "As", "you", "can", "see", "the", "bug", "be", "that", "line", "widgets", "get", "their", "own", "line", "after", "a", "few", "insertions", "NUMBER", "Also", "somewhere", "in", "the", "code", "to", "create", "the", "new", "line", "I", "have", "editor", "NUMBER", "replaceRange", "n", "start", "This", "also", "has", "weird", "behaviour", "because", "when", "I", "do", "that", "the", "line", "contents", "seem", "to", "disappear", "when", "there", "be", "a", "line", "widget", "above", "NUMBER", "Just", "by", "having", "the", "line", "widgets", "placed", "below", "it", "works", "correctly", "see", "work", "LINK", "c", "NUMBER", "d", "NUMBER", "e", "NUMBER", "NUMBER", "db", "bf", "NUMBER", "f", "NUMBER", "a", "NUMBER", "png", "The", "bug", "can", "only", "be", "in", "CodeMirror", "because", "placing", "the", "widget", "below", "works", "fine", "NUMBER", "Here", "s", "the", "code", "that", "inserts", "it", "javascript", "var", "start", "editor", "NUMBER", "getCursor", "anchor", "if", "start", "NUMBER", "ch", "NUMBER", "editor", "NUMBER", "getLine", "start", "NUMBER", "line", "NUMBER", "trim", "editor", "NUMBER", "replaceRange", "n", "start", "if", "start", "NUMBER", "ch", "NUMBER", "start", "NUMBER", "line", "NUMBER", "start", "NUMBER", "ch", "NUMBER", "var", "replaceString", "TAG", "editor", "NUMBER", "replaceRange", "replaceString", "start", "var", "end", "line", "start", "NUMBER", "line", "ch", "replaceString", "NUMBER", "length", "editor", "NUMBER", "markText", "start", "end", "className", "id", "atomic", "true", "var", "widget", "TAG", "descr", "TAG", "NUMBER", "get", "NUMBER", "editor", "NUMBER", "addLineWidget", "end", "NUMBER", "line", "widget", "noHScroll", "true", "above", "true", "Update", "The", "culprit", "be", "indeed", "this", "line", "of", "code", "editor", "NUMBER", "replaceRange", "n", "start", "NUMBER", "I", "change", "the", "above", "code", "to", "remove", "it", "and", "place", "the", "newline", "character", "in", "the", "replaceString", "itself", "NUMBER", "This", "way", "it", "lasts", "a", "little", "longer", "but", "it", "still", "breaks", "if", "the", "cursor", "be", "at", "the", "start", "of", "a", "line", "that", "has", "other", "contents", "marijnh", "your", "last", "commit", "seems", "to", "have", "fix", "it", "NUMBER", "However", "now", "the", "problem", "be", "that", "the", "height", "be", "calculated", "incorrectly", "NUMBER", "The", "cursor", "appears", "slightly", "above", "each", "line", "even", "when", "refreshing", "NUMBER", "I", "might", "be", "doing", "something", "wrong", "myself", "but", "just", "to", "make", "sure", "I", "ll", "try", "to", "throw", "you", "a", "demo", "together", "NUMBER", "What", "s", "the", "best", "way", "to", "send", "it", "to", "you", "btw", "NUMBER", "Define", "a", "mode", "with", "indentation", "for", "the", "contents", "of", "bracketed", "contents", "e", "NUMBER", "g", "NUMBER", "token", "increases", "indent", "token", "decreases", "indent", "and", "indent", "call", "with", "textAfter", "of", "decreases", "indent", "for", "the", "line", "NUMBER", "Use", "the", "closebrackets", "plugin", "and", "set", "autoCloseBrackets", "appropriately", "e", "NUMBER", "g", "NUMBER", "NUMBER", "Type", "foo", "press", "Enter", "type", "bar", "Result", "foo", "bar", "This", "naturally", "falls", "out", "of", "the", "interaction", "of", "these", "two", "features", "but", "looks", "ugly", "NUMBER", "One", "possibility", "be", "that", "if", "Enter", "be", "hit", "within", "a", "bracket", "pair", "an", "extra", "newline", "be", "inserted", "after", "the", "cursor", "position", "and", "indentation", "be", "computed", "for", "both", "new", "lines", "NUMBER", "This", "would", "result", "in", "foo", "bar", "NUMBER", "with", "the", "cursor", "right", "after", "the", "r", "in", "bar", "NUMBER", "This", "might", "require", "an", "additional", "option", "to", "be", "specified", "for", "closebrackets", "NUMBER", "From", "code", "inspection", "it", "looks", "great", "NUMBER", "I", "ll", "report", "back", "when", "I", "ve", "had", "a", "chance", "to", "actually", "try", "it", "out", "within", "a", "day", "or", "two", "NUMBER", "Tried", "it", "out", "it", "s", "live", "at", "LINK", "hit", "the", "arrow", "to", "make", "the", "entry", "field", "multi", "line", "NUMBER", "Works", "great", "in", "multi", "line", "mode", "NUMBER", "but", "the", "change", "introduces", "one", "bug", "with", "regard", "to", "keymaps", "NUMBER", "LINK", "uses", "styles", "and", "a", "keyMap", "to", "provide", "a", "single", "line", "entry", "by", "default", "REPL", "style", "NUMBER", "The", "keyMap", "overrides", "Enter", "to", "run", "the", "current", "entry", "NUMBER", "The", "explode", "feature", "revision", "alters", "the", "behavior", "when", "Enter", "be", "pressed", "between", "brackets", "regardless", "of", "whether", "or", "not", "explode", "be", "specified", "NUMBER", "The", "add", "on", "consumes", "the", "keypress", "rather", "than", "letting", "the", "app", "see", "it", "NUMBER", "Prior", "to", "a", "NUMBER", "type", "show", "and", "it", "autocompletes", "to", "show", "with", "the", "cursor", "between", "the", "brackets", "NUMBER", "Press", "Enter", "the", "page", "catches", "it", "and", "runs", "NUMBER", "After", "a", "NUMBER", "type", "show", "and", "it", "would", "auto", "close", "to", "show", "with", "the", "cursor", "between", "the", "brackets", "NUMBER", "Then", "press", "enter", "and", "the", "cursor", "jumps", "to", "after", "the", "brackets", "NUMBER", "Pressing", "Enter", "one", "more", "time", "be", "required", "to", "run", "it", "NUMBER", "The", "single", "line", "entry", "be", "a", "bit", "of", "a", "hack", "but", "otherwise", "works", "well", "NUMBER", "I", "ll", "file", "another", "issue", "eventually", "about", "support", "that", "via", "an", "add", "on", "NUMBER", "Ah", "I", "d", "misunderstood", "the", "options", "NUMBER", "Yes", "this", "works", "as", "expected", "with", "autoCloseBrackets", "pairs", "X", "explode", "Y", "perfect", "NUMBER", "One", "more", "nit", "The", "backspace", "remove", "bracket", "pair", "behavior", "seems", "to", "have", "broken", "as", "well", "NUMBER", "And", "indeed", "if", "you", "hit", "Backspace", "inside", "a", "pair", "an", "exception", "will", "be", "throw", "line", "be", "an", "undefined", "reference", "in", "closebrackets", "NUMBER", "js", "line", "NUMBER", "Here", "s", "a", "fix", "basically", "restoring", "the", "previous", "declaration", "initialization", "of", "line", "NUMBER", "javascript", "var", "cur", "cm", "NUMBER", "getCursor", "around", "charsAround", "cm", "cur", "var", "cur", "cm", "NUMBER", "getCursor", "around", "charsAround", "cm", "cur", "line", "cm", "NUMBER", "getLine", "cur", "NUMBER", "line", "That", "was", "a", "refactoring", "screwup", "should", "be", "better", "now", "NUMBER", "Did", "you", "expect", "backspace", "when", "inside", "an", "exploded", "pair", "to", "remove", "all", "whitespace", "inside", "the", "pair", "I", "hadn", "t", "thought", "through", "that", "case", "NUMBER", "It", "seems", "reasonable", "but", "I", "wouldn", "t", "consider", "it", "required", "for", "the", "feature", "NUMBER", "On", "Jun", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Marijn", "Haverbeke", "notifications", "github", "NUMBER", "com", "write", "That", "was", "a", "refactoring", "screwup", "should", "be", "better", "now", "NUMBER", "Did", "you", "expect", "backspace", "when", "inside", "an", "exploded", "pair", "to", "remove", "all", "whitespace", "inside", "the", "pair", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "NUMBER", "Tried", "the", "new", "code", "seems", "great", "now", "NUMBER", "Hi", "I", "be", "very", "happy", "I", "find", "CodeMirror", "I", "be", "a", "new", "user", "and", "would", "like", "to", "have", "many", "instances", "of", "codemirror", "on", "one", "page", "NUMBER", "I", "notice", "that", "when", "use", "IE", "NUMBER", "the", "inserted", "text", "gets", "doubled", "with", "drag", "and", "drop", "from", "an", "other", "instance", "NUMBER", "Note", "with", "Chrome", "I", "don", "t", "have", "that", "problem", "NUMBER", "The", "setup", "be", "reproduced", "on", "jsbin", "LINK", "When", "I", "drag", "some", "text", "from", "the", "upper", "to", "the", "lower", "textarea", "the", "text", "be", "doubled", "NUMBER", "I", "would", "be", "very", "happy", "if", "this", "problem", "could", "be", "fix", "NUMBER", "Many", "thanks", "in", "advance", "Dirk", "Goossenaerts", "Hi", "Marijn", "Indeed", "the", "problem", "be", "fix", "Thank", "you", "very", "much", "for", "the", "very", "quick", "fix", "I", "be", "now", "build", "a", "javascript", "based", "static", "website", "generator", "tool", "NUMBER", "Your", "CodeMirror", "software", "be", "the", "perfect", "solution", "for", "authoring", "the", "content", "HTML", "and", "for", "the", "configuration", "of", "the", "website", "tool", "template", "settings", "NUMBER", "NUMBER", "As", "you", "will", "understand", "your", "CodeMirror", "software", "will", "play", "a", "crucial", "role", "in", "my", "project", "NUMBER", "Therefore", "within", "a", "few", "months", "from", "now", "I", "will", "request", "for", "a", "paid", "support", "contract", "with", "you", "in", "order", "to", "give", "you", "something", "in", "return", "for", "your", "great", "software", "you", "made", "available", "for", "me", "NUMBER", "Many", "thanks", "Dirk", "Goossenaerts", "Current", "behavior", "word", "NUMBER", "word", "NUMBER", "If", "the", "cursor", "be", "on", "the", "last", "line", "and", "dd", "be", "executed", "the", "buffer", "do", "not", "change", "NUMBER", "Expected", "behavior", "word", "NUMBER", "word", "NUMBER", "Thanks", "for", "bring", "this", "to", "attention", "NUMBER", "There", "be", "a", "couple", "of", "minor", "issue", "with", "your", "patch", "NUMBER", "dd", "on", "last", "line", "be", "not", "be", "push", "into", "the", "paste", "buffer", "correctly", "do", "not", "fix", "dj", "on", "second", "last", "line", "NUMBER", "I", "don", "t", "think", "your", "special", "case", "be", "needed", "NUMBER", "The", "vim", "keymap", "aborts", "if", "you", "try", "to", "delete", "past", "the", "last", "line", "so", "it", "can", "t", "occur", "NUMBER", "This", "do", "not", "match", "vim", "behavior", "but", "be", "quite", "minor", "and", "be", "a", "separate", "issue", "NUMBER", "Please", "see", "LINK", "for", "a", "correct", "patch", "mightyguava", "update", "from", "NUMBER", "e", "NUMBER", "a", "NUMBER", "Good", "to", "merge", "NUMBER", "Thanks", "Hi", "Marijn", "Develooper", "spotted", "a", "few", "minor", "problem", "with", "the", "Smarty", "mode", "both", "version", "NUMBER", "and", "NUMBER", "NUMBER", "This", "pull", "request", "fix", "the", "following", "escaped", "quotes", "within", "a", "string", "no", "longer", "incorrectly", "close", "the", "string", "s", "highlight", "NUMBER", "parentheses", "be", "now", "highlight", "consistently", "as", "brackets", "class", "they", "d", "default", "to", "tag", "sometimes", "neither", "these", "nor", "variable", "qualifiers", "followed", "by", "be", "now", "affected", "by", "whitespace", "NUMBER", "Thanks", "Ben", "OS", "Windows", "NUMBER", "Browser", "Chrome", "Version", "NUMBER", "m", "Repro", "Steps", "TAG", "TAG", "Copy", "TAG", "this", "gist", "TAG", "into", "an", "appropriate", "CodeMirror", "environment", "NUMBER", "TAG", "TAG", "Comment", "out", "line", "NUMBER", "launch", "in", "browser", "and", "observe", "results", "TAG", "TAG", "TAG", "Remove", "comments", "from", "line", "NUMBER", "comment", "out", "line", "NUMBER", "launch", "in", "browser", "and", "observe", "results", "TAG", "TAG", "TAG", "Remove", "comments", "from", "line", "NUMBER", "launch", "in", "browser", "and", "observe", "results", "NUMBER", "TAG", "TAG", "Observed", "Results", "After", "step", "NUMBER", "the", "CodeMirror", "editor", "looks", "like", "this", "cm", "overlay", "bug", "NUMBER", "LINK", "c", "NUMBER", "d", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "ef", "NUMBER", "NUMBER", "f", "NUMBER", "f", "NUMBER", "f", "NUMBER", "cd", "NUMBER", "png", "Expected", "Results", "After", "step", "NUMBER", "the", "CodeMirror", "editor", "should", "look", "like", "a", "combination", "of", "step", "NUMBER", "and", "step", "NUMBER", "like", "this", "cm", "overlay", "bug", "NUMBER", "LINK", "c", "NUMBER", "d", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "c", "NUMBER", "a", "a", "NUMBER", "cc", "NUMBER", "png", "Yeah", "I", "see", "the", "problem", "now", "I", "actually", "remove", "that", "comment", "just", "moments", "ago", "NUMBER", "You", "be", "exactly", "right", "I", "was", "thinking", "of", "it", "as", "a", "tree", "model", "NUMBER", "There", "may", "not", "be", "a", "solution", "to", "my", "bug", "NUMBER", "I", "ll", "play", "around", "with", "it", "some", "more", "and", "see", "what", "I", "can", "come", "up", "with", "NUMBER", "Okay", "I", "understand", "what", "you", "be", "saying", "now", "NUMBER", "It", "would", "work", "in", "this", "case", "correct", "in", "fact", "that", "s", "how", "I", "simulated", "the", "expected", "result", "screen", "shot", "but", "this", "be", "a", "simplified", "case", "of", "the", "real", "bug", "NUMBER", "In", "the", "real", "scenario", "both", "of", "the", "modes", "need", "flattenSpans", "set", "to", "false", "NUMBER", "But", "I", "have", "some", "ideas", "I", "will", "play", "with", "today", "NUMBER", "Marijn", "thanks", "for", "your", "time", "and", "help", "NUMBER", "After", "this", "discussion", "I", "was", "able", "to", "figure", "out", "how", "to", "fix", "my", "bug", "NUMBER", "NUMBER", "Open", "LINK", "in", "a", "browser", "and", "resize", "the", "width", "of", "the", "browser", "window", "smaller", "so", "that", "you", "see", "some", "lines", "with", "line", "wrapping", "NUMBER", "NUMBER", "Double", "click", "to", "select", "a", "word", "eg", "NUMBER", "straightforwardly", "on", "line", "NUMBER", "NUMBER", "NUMBER", "Now", "resize", "the", "browser", "window", "horizontally", "NUMBER", "Result", "Selection", "rectangle", "stays", "in", "the", "old", "location", "and", "do", "not", "follow", "the", "selected", "word", "as", "you", "resize", "NUMBER", "Now", "if", "you", "double", "click", "on", "any", "word", "then", "you", "see", "a", "selection", "rectangle", "that", "be", "not", "on", "word", "boundary", "NUMBER", "If", "you", "set", "the", "cursor", "on", "a", "wrapped", "line", "and", "type", "a", "letter", "the", "letter", "may", "appear", "in", "a", "different", "location", "in", "the", "wrapped", "line", "NUMBER", "Sometimes", "I", "find", "that", "CodeMirror", "add", "scrollbars", "inappropriately", "most", "often", "due", "to", "browser", "zoom", "NUMBER", "Digging", "around", "suggested", "that", "it", "be", "some", "non", "integers", "resulting", "in", "rounding", "up", "the", "measured", "size", "and", "I", "haven", "t", "be", "able", "to", "find", "a", "case", "where", "the", "two", "values", "differ", "by", "more", "than", "one", "pixel", "so", "simply", "setting", "the", "threshold", "one", "pixel", "higher", "seems", "to", "address", "the", "issue", "NUMBER", "This", "PR", "forgives", "one", "pixel", "in", "the", "size", "comparison", "before", "drawing", "the", "scrollbars", "NUMBER", "The", "following", "repro", "works", "for", "me", "in", "Chrome", "NUMBER", "Linux", "Go", "to", "LINK", "Hit", "Ctrl", "twice", "Update", "CM", "s", "size", "with", "document", "NUMBER", "body", "NUMBER", "yle", "NUMBER", "width", "NUMBER", "px", "editor", "NUMBER", "refresh", "another", "repro", "Chrome", "NUMBER", "OS", "X", "NUMBER", "LINK", "Ctrl", "for", "NUMBER", "zoom", "refresh", "page", "marijnh", "can", "you", "show", "an", "example", "of", "what", "it", "would", "look", "like", "with", "hidden", "scrollbars", "and", "not", "drawn", "fake", "ones", "I", "can", "t", "seem", "to", "make", "this", "happen", "NUMBER", "My", "real", "goal", "here", "be", "actually", "to", "disable", "the", "scrollbars", "altogether", "I", "simply", "never", "want", "scrollbars", "to", "be", "visible", "but", "there", "doesn", "t", "seem", "to", "be", "any", "way", "to", "make", "that", "happen", "overflow", "hidden", "do", "_not_", "work", "NUMBER", "I", "have", "autoresized", "CM", "areas", "but", "if", "the", "text", "be", "zoomed", "it", "always", "draws", "scrollbars", "even", "though", "there", "isn", "t", "any", "room", "to", "actually", "scroll", "NUMBER", "Both", "examples", "indeed", "reproduce", "the", "problem", "we", "also", "notice", "in", "our", "app", "Chrome", "NUMBER", "Ubuntu", "NUMBER", "NUMBER", "And", "the", "patch", "makes", "it", "disappear", "NUMBER", "minrk", "in", "LINK", "you", "suggest", "it", "may", "be", "a", "bug", "in", "Chrome", "NUMBER", "And", "indeed", "the", "problem", "do", "not", "appear", "in", "Firefox", "NUMBER", "Have", "you", "file", "a", "report", "with", "them", "I", "haven", "t", "but", "I", "should", "or", "someone", "with", "more", "familiarity", "of", "browser", "internals", "vocabulary", "should", "do", "so", "NUMBER", "I", "don", "t", "_know_", "that", "it", "s", "a", "bug", "but", "it", "be", "true", "that", "on", "Chrome", "the", "two", "sizes", "CM", "compares", "to", "determine", "whether", "there", "be", "a", "scrollbar", "can", "differ", "by", "up", "to", "one", "pixel", "before", "a", "scrollbar", "be", "actually", "add", "NUMBER", "I", "have", "not", "seen", "this", "discrepancy", "on", "other", "browsers", "nor", "on", "Chrome", "without", "text", "zooming", "so", "a", "bug", "seem", "most", "likely", "to", "my", "na\u00efve", "eyes", "NUMBER", "It", "s", "too", "bad", "there", "doesn", "t", "seem", "to", "be", "a", "direct", "js", "API", "for", "Is", "there", "an", "effing", "scrollbar", "NUMBER", "Open", "LINK", "in", "a", "browser", "and", "resize", "the", "width", "of", "the", "browser", "window", "smaller", "so", "that", "you", "see", "some", "lines", "with", "line", "wrapping", "NUMBER", "NUMBER", "Set", "cursor", "somewhere", "in", "the", "middle", "of", "a", "wrapped", "line", "say", "the", "line", "after", "the", "line", "with", "number", "NUMBER", "display", "in", "the", "gutter", "NUMBER", "NUMBER", "Hit", "Home", "End", "key", "NUMBER", "On", "Mac", "use", "Cmd", "Left", "Right", "arrow", "key", "NUMBER", "Result", "Cursor", "moves", "to", "the", "beginning", "end", "of", "line", "NUMBER", "ie", "NUMBER", "cursor", "be", "next", "to", "the", "number", "NUMBER", "in", "the", "gutter", "with", "Home", "key", "in", "my", "example", "Hi", "Marijn", "This", "pull", "request", "update", "the", "Smarty", "mode", "for", "Smarty", "NUMBER", "For", "backward", "compatibility", "I", "ve", "left", "the", "default", "Smarty", "version", "to", "be", "NUMBER", "but", "people", "can", "enable", "it", "by", "add", "a", "smartyVersion", "config", "option", "set", "to", "NUMBER", "Otherwise", "the", "mode", "should", "work", "exactly", "as", "before", "despite", "the", "refactor", "NUMBER", "I", "ve", "put", "up", "a", "demo", "here", "that", "highlights", "the", "new", "features", "support", "by", "Smarty", "NUMBER", "including", "nested", "function", "permissible", "standalone", "curly", "braces", "and", "other", "stuff", "LINK", "Let", "me", "know", "if", "you", "d", "like", "me", "to", "change", "anything", "NUMBER", "Thanks", "Ben", "This", "be", "needed", "for", "example", "for", "applying", "different", "color", "schemes", "to", "submodes", "NUMBER", "Oh", "we", "re", "gonna", "ditch", "version", "unless", "the", "repo", "doesn", "t", "have", "a", "tag", "so", "as", "long", "as", "you", "tag", "your", "repo", "as", "vX", "NUMBER", "X", "NUMBER", "X", "or", "X", "NUMBER", "X", "NUMBER", "X", "which", "it", "looks", "like", "you", "start", "doing", "with", "NUMBER", "you", "don", "t", "need", "to", "worry", "about", "it", "NUMBER", "I", "wouldn", "t", "remove", "the", "version", "yet", "we", "need", "to", "update", "bower", "to", "use", "the", "new", "spec", "LINK", "heading", "h", "NUMBER", "et", "NUMBER", "qzfg", "NUMBER", "dk", "NUMBER", "implementation", "NUMBER", "I", "just", "wouldn", "t", "worry", "about", "update", "it", "for", "now", "if", "you", "don", "t", "mind", "NUMBER", "yay", "LINK", "Intent", "the", "event", "be", "useful", "to", "get", "notifications", "about", "future", "change", "of", "the", "document", "so", "that", "one", "might", "be", "able", "to", "update", "his", "own", "external", "document", "representation", "on", "an", "incremental", "basis", "NUMBER", "This", "event", "be", "complimentary", "to", "the", "beforeChange", "event", "which", "may", "be", "use", "for", "this", "purpose", "but", "which", "doesn", "t", "fire", "for", "the", "undo", "redo", "commands", "NUMBER", "Do", "you", "mean", "smth", "like", "this", "LINK", "That", "works", "for", "me", "thank", "you", "for", "your", "time", "NUMBER", "beforeChange", "event", "be", "not", "fired", "on", "undo", "redo", "modifications", "Test", "case", "Goto", "LINK", "Open", "js", "console", "Type", "editor", "NUMBER", "on", "beforeChange", "function", "console", "NUMBER", "log", "beforeChange", "event", "Try", "playing", "with", "undo", "redo", "stack", "it", "change", "document", "s", "contents", "but", "do", "not", "fire", "event", "Adds", "two", "shortcuts", "as", "defaults", "on", "the", "Mac", "Cmd", "Delete", "triggers", "killLine", "which", "deletes", "the", "text", "on", "a", "line", "after", "the", "cursor", "NUMBER", "Cmd", "Backspace", "triggers", "a", "new", "killLineSmartStart", "function", "which", "deletes", "the", "text", "on", "the", "line", "before", "the", "cursor", "but", "preserves", "leading", "whitespace", "on", "the", "line", "These", "be", "common", "shortcuts", "in", "code", "editors", "and", "many", "other", "text", "content", "editors", "such", "as", "Sublime", "Text", "NUMBER", "TextEdit", "Eclipse", "Chrome", "url", "bar", "dev", "tool", "and", "even", "Microsoft", "Outlook", "I", "only", "add", "these", "as", "defaults", "to", "the", "Mac", "shortcuts", "because", "I", "m", "not", "sure", "what", "the", "equivalents", "be", "on", "Windows", "and", "other", "configurations", "or", "if", "there", "even", "be", "a", "common", "equivalent", "NUMBER", "As", "mention", "above", "part", "of", "this", "change", "involved", "creating", "a", "new", "function", "killLineSmartStart", "NUMBER", "It", "be", "basically", "a", "mashup", "between", "killLine", "and", "goLineSmartStart", "NUMBER", "There", "be", "probably", "some", "room", "for", "remove", "code", "duplication", "between", "those", "function", "and", "the", "new", "one", "but", "I", "didn", "t", "want", "to", "go", "that", "far", "in", "modifying", "the", "library", "NUMBER", "Would", "you", "be", "willing", "to", "consider", "pulling", "the", "killLineSmartStart", "function", "even", "without", "the", "default", "bindings", "I", "m", "interested", "in", "having", "these", "shortcuts", "in", "Brackets", "NUMBER", "I", "start", "by", "write", "a", "Brackets", "plugin", "but", "I", "wasn", "t", "able", "to", "access", "some", "of", "the", "CodeMirror", "hooks", "I", "needed", "to", "be", "able", "to", "do", "it", "well", "NUMBER", "I", "do", "have", "a", "Brackets", "plugin", "work", "but", "it", "s", "pretty", "hacky", "it", "deletes", "one", "word", "at", "a", "time", "while", "test", "if", "the", "cursor", "has", "reached", "the", "start", "end", "position", "NUMBER", "With", "the", "killLineSmartStart", "function", "then", "at", "least", "I", "would", "have", "something", "to", "hook", "into", "NUMBER", "Or", "if", "that", "s", "too", "specific", "if", "I", "write", "a", "function", "for", "finding", "the", "smart", "start", "position", "would", "you", "consider", "taking", "that", "as", "a", "pull", "request", "That", "s", "the", "main", "hook", "that", "I", "be", "miss", "to", "do", "a", "cleaner", "plugin", "NUMBER", "From", "a", "selfish", "perspective", "I", "d", "rather", "have", "higher", "level", "APIs", "to", "write", "to", "so", "in", "that", "sense", "I", "prefer", "having", "the", "killLineSmartStart", "function", "But", "yes", "now", "that", "I", "ve", "taken", "what", "I", "learned", "hacking", "on", "CodeMirror", "back", "to", "my", "Brackets", "plugin", "these", "be", "the", "function", "that", "I", "don", "t", "have", "access", "to", "that", "I", "would", "want", "to", "have", "access", "to", "if", "I", "m", "creating", "a", "plugin", "with", "killLineSmartStart", "functionality", "posEq", "easy", "to", "replicate", "Pos", "function", "easy", "to", "replicate", "since", "I", "can", "still", "call", "new", "CodeMirror", "NUMBER", "Pos", "lineStart", "has", "dependencies", "on", "other", "function", "in", "the", "bidi", "code", "so", "this", "be", "harder", "to", "replicate", "getOrder", "also", "tied", "into", "the", "bidi", "code", "The", "other", "thing", "I", "m", "use", "that", "doesn", "t", "seem", "to", "be", "officially", "documented", "be", "calling", "the", "killLine", "command", "this", "way", "CodeMirror", "NUMBER", "commands", "NUMBER", "killLine", "cm", "The", "killLine", "function", "isn", "t", "listed", "in", "the", "API", "docs", "and", "neither", "be", "the", "CodeMirror", "NUMBER", "commands", "mechanism", "of", "accessing", "it", "so", "if", "there", "s", "an", "approved", "way", "of", "accessing", "it", "I", "m", "not", "sure", "what", "it", "be", "NUMBER", "P", "NUMBER", "S", "NUMBER", "Thanks", "for", "be", "so", "responsive", "The", "current", "patch", "fix", "two", "issue", "with", "normalMode", "macro", "NUMBER", "Eliminate", "the", "risk", "of", "wrongly", "matching", "TAG", "ada", "TAG", "instead", "of", "TAG", "NUMBER", "NUMBER", "Avoid", "logging", "keyToKey", "twice", "NUMBER", "This", "changeset", "be", "to", "allow", "the", "cm", "to", "vim", "key", "conversion", "logic", "in", "handleKeyEvent_", "to", "be", "reused", "by", "our", "later", "insertMode", "keylogger", "upon", "raw", "key", "events", "NUMBER", "Looks", "good", "thanks", "Btw", "before", "you", "start", "on", "code", "up", "insertMode", "logging", "it", "might", "be", "a", "good", "idea", "to", "write", "a", "short", "google", "doc", "with", "an", "implementation", "overview", "NUMBER", "This", "way", "we", "can", "agree", "on", "some", "details", "beforehand", "and", "can", "potentially", "save", "you", "from", "revising", "the", "approach", "later", "NUMBER", "Would", "be", "good", "for", "distilling", "your", "thoughts", "too", "NUMBER", "No", "pressure", "though", "I", "ll", "be", "happy", "to", "just", "review", "a", "pull", "request", "too", "NUMBER", "SCSS", "padding", "top", "NUMBER", "px", "bottom", "NUMBER", "px", "be", "rendered", "with", "double", "indentation", "for", "the", "children", "of", "padding", "NUMBER", "Hey", "hey", "we", "have", "this", "issue", "on", "CodePen", "too", "NUMBER", "A", "simple", "example", "be", "which", "you", "can", "reproduce", "on", "LINK", "write", "like", "a", "color", "red", "hover", "focus", "Then", "enter", "you", "ll", "see", "the", "bracket", "goes", "indented", "too", "far", "NUMBER", "And", "the", "space", "before", "properties", "looks", "like", "it", "doubles", "NUMBER", "Let", "me", "know", "if", "I", "can", "help", "more", "Things", "should", "be", "better", "with", "the", "attached", "patch", "NUMBER", "dqminh", "I", "wasn", "t", "able", "to", "figure", "out", "what", "that", "line", "I", "remove", "was", "supposed", "to", "do", "since", "I", "m", "not", "very", "familiar", "with", "scss", "but", "it", "cause", "problem", "in", "very", "common", "situations", "so", "I", "guess", "for", "now", "the", "code", "be", "better", "without", "it", "NUMBER", "Ah", "never", "mind", "I", "broke", "some", "test", "and", "now", "understand", "what", "the", "rather", "obvious", "point", "of", "that", "line", "was", "NUMBER", "Looking", "into", "it", "further", "NUMBER", "marijnh", "chriscoyier", "dubiousdavid", "i", "think", "the", "line", "was", "introduce", "here", "LINK", "L", "NUMBER", "L", "NUMBER", "with", "the", "purpose", "of", "handle", "propertyValue", "inside", "nested", "block", "NUMBER", "Actually", "it", "wasnt", "obvious", "to", "me", "what", "the", "incorrect", "behavior", "be", "NUMBER", "When", "i", "pasted", "chriscoyier", "example", "and", "press", "enter", "it", "add", "one", "more", "indentation", "level", "and", "remove", "it", "when", "i", "pressed", "to", "close", "NUMBER", "Which", "seems", "reasonable", "to", "me", "as", "it", "s", "easier", "to", "write", "new", "property", "this", "way", "NUMBER", "Actually", "it", "wasnt", "obvious", "to", "me", "what", "the", "incorrect", "behavior", "be", "NUMBER", "That", "s", "because", "I", "fix", "it", "by", "now", "NUMBER", "It", "use", "to", "add", "two", "indentation", "levels", "NUMBER", "marijnh", "ahhh", "i", "see", "the", "wrong", "behavior", "now", "when", "revert", "back", "to", "the", "last", "know", "bad", "state", "NUMBER", "Thanks", "a", "lot", "for", "the", "fix", "heart", "NUMBER", "Open", "LINK", "NUMBER", "Paste", "the", "following", "code", "NUMBER", "html", "TAG", "TAG", "NUMBER", "Set", "the", "cursor", "somewhere", "after", "and", "start", "typing", "NUMBER", "Result", "Word", "wrapping", "rearranges", "the", "long", "line", "and", "then", "shows", "the", "cursor", "in", "a", "different", "place", "NUMBER", "Besides", "the", "text", "you", "typed", "also", "appears", "in", "the", "wrong", "place", "not", "where", "you", "typed", "in", "NUMBER", "If", "you", "don", "t", "see", "the", "issue", "then", "resize", "your", "browser", "window", "so", "that", "you", "see", "some", "different", "line", "breaks", "in", "that", "long", "line", "and", "then", "try", "again", "NUMBER", "I", "test", "in", "Safari", "but", "I", "don", "t", "think", "the", "browser", "would", "matter", "NUMBER", "Thanks", "NUMBER", "It", "do", "fix", "the", "issue", "NUMBER", "Our", "codebase", "contained", "something", "like", "CodeMirror", "NUMBER", "keyMap", "NUMBER", "basic", "Up", "moveUpAcrossRegions", "Where", "moveUpAcrossRegions", "use", "moveV", "internally", "NUMBER", "Shift", "selections", "weren", "t", "work", "NUMBER", "Documentation", "stated", "that", "shift", "be", "pass", "through", "for", "go", "prefixed", "commands", "so", "assumed", "this", "would", "work", "CodeMirror", "NUMBER", "keyMap", "NUMBER", "basic", "Shift", "Up", "goLineDown", "CodeMirror", "NUMBER", "keyMap", "NUMBER", "basic", "Up", "moveUpAcrossRegions", "But", "the", "shift", "was", "still", "be", "drop", "NUMBER", "This", "commit", "makes", "the", "key", "event", "handle", "properly", "pass", "it", "through", "NUMBER", "It", "s", "a", "solution", "I", "thought", "about", "but", "I", "would", "not", "like", "to", "put", "my", "moveUpAcrossRegions", "function", "into", "CodeMirror", "NUMBER", "commands", "NUMBER", "I", "m", "compile", "to", "JavaScript", "so", "mutating", "an", "external", "object", "be", "slightly", "messier", "plus", "urgh", "NUMBER", "Binding", "a", "go", "command", "to", "a", "key", "enable", "Shift", "selection", "when", "Shift", "be", "pressed", "NUMBER", "Binding", "a", "go", "command", "to", "a", "key", "containing", "Shift", "do", "not", "enable", "Shift", "selection", "when", "Shift", "be", "pressed", "NUMBER", "Doesn", "t", "that", "seem", "inconsistent", "I", "understand", "the", "intention", "NUMBER", "I", "think", "it", "s", "inconsistent", "NUMBER", "It", "just", "doesn", "t", "make", "sense", "that", "go", "means", "pass", "through", "shift", "unless", "it", "s", "actually", "bound", "to", "shift", "NUMBER", "That", "s", "a", "wat", "NUMBER", "Yes", "it", "s", "all", "crummy", "NUMBER", "NUMBER", "Open", "CodeMirror", "mode", "css", "index", "NUMBER", "html", "in", "a", "browser", "NUMBER", "NUMBER", "Paste", "the", "following", "css", "into", "the", "input", "field", "after", "the", "line", "starting", "with", "import", "url", "NUMBER", "internal", "rect", "fill", "slategrey", "stroke", "black", "stroke", "width", "NUMBER", "webkit", "transition", "all", "NUMBER", "ms", "NUMBER", "Look", "at", "the", "color", "of", "the", "css", "properties", "fill", "stroke", "and", "stroke", "width", "in", "the", "pasted", "block", "NUMBER", "Result", "They", "re", "in", "red", "indicating", "that", "they", "re", "invalid", "CSS", "properties", "NUMBER", "Expected", "CodeMirror", "should", "show", "CSS", "properties", "for", "SVG", "with", "the", "same", "color", "use", "for", "valid", "CSS", "properties", "NUMBER", "Not", "sure", "if", "this", "be", "latest", "but", "it", "s", "a", "good", "start", "LINK", "As", "a", "result", "of", "the", "discussions", "in", "NUMBER", "we", "decide", "to", "use", "desktop", "vim", "key", "notation", "instead", "of", "the", "current", "one", "NUMBER", "mightyguava", "The", "moment", "when", "I", "run", "the", "test", "suite", "without", "change", "the", "relate", "test", "regressions", "popped", "out", "like", "a", "firework", "show", "NUMBER", "The", "current", "patch", "should", "address", "the", "above", "NUMBER", "comments", "anything", "else", "need", "to", "be", "fix", "Looks", "good", "except", "the", "comment", "above", "NUMBER", "This", "pull", "request", "be", "a", "break", "down", "from", "NUMBER", "it", "allows", "vim", "normal", "mode", "to", "support", "register", "based", "macros", "NUMBER", "First", "round", "of", "comments", "NUMBER", "This", "be", "open", "discussion", "so", "feel", "free", "to", "push", "back", "against", "any", "of", "my", "comments", "should", "be", "repeatable", "I", "really", "dislike", "duplicate", "logic", "NUMBER", "For", "either", "simply", "merge", "it", "with", "replayMacro", "and", "add", "a", "special", "case", "for", "the", "character", "or", "have", "replayLatestMacro", "call", "replayMacro", "with", "actionArgs", "NUMBER", "selectedCharacter", "set", "to", "registerName", "Instead", "of", "having", "a", "conversion", "from", "normalModeKey", "to", "registerText", "what", "do", "you", "think", "about", "change", "usages", "of", "normalModeKey", "in", "the", "keymap", "so", "that", "normalModeKey", "registerText", "The", "change", "shouldn", "t", "be", "extensive", "and", "saves", "a", "level", "of", "complexity", "Regarding", "storing", "the", "keyBuffer", "in", "registers", "I", "m", "wondering", "if", "it", "makes", "sense", "here", "NUMBER", "I", "might", "be", "make", "a", "horrible", "suggestion", "here", "and", "any", "divergences", "I", "ve", "suggested", "to", "Vim", "has", "invoked", "hostile", "reactions", "so", "far", "so", "I", "want", "your", "take", "on", "this", "NUMBER", "The", "benefit", "of", "converting", "to", "text", "be", "that", "in", "Vim", "you", "can", "actually", "open", "a", "register", "as", "a", "buffer", "and", "modify", "the", "macro", "generate", "macros", "dynamically", "as", "well", "as", "persist", "macros", "in", "your", "startup", "script", "NUMBER", "All", "of", "the", "above", "don", "t", "seem", "like", "it", "will", "ever", "be", "a", "part", "of", "the", "Vim", "mode", "short", "term", "or", "long", "term", "NUMBER", "If", "we", "don", "t", "convert", "to", "text", "we", "save", "quite", "a", "bit", "of", "complexity", "NUMBER", "The", "serialization", "deserialization", "logic", "doesn", "t", "need", "to", "exist", "NUMBER", "The", "macros", "also", "have", "no", "reason", "to", "coincide", "with", "registers", "NUMBER", "Thus", "we", "can", "maintain", "separate", "sets", "of", "registers", "and", "macro", "keybuffers", "since", "make", "macros", "keys", "and", "paste", "buffers", "persist", "in", "the", "same", "location", "can", "be", "a", "source", "of", "confusion", "NUMBER", "This", "part", "really", "took", "me", "some", "effort", "to", "let", "it", "work", "NUMBER", "I", "tried", "to", "take", "the", "low", "level", "hook", "approach", "but", "it", "seem", "like", "I", "ll", "need", "to", "change", "a", "lot", "of", "code", "so", "instead", "of", "change", "I", "feel", "much", "safer", "with", "add", "NUMBER", "I", "appreciate", "that", "you", "be", "very", "careful", "about", "not", "regressing", "but", "the", "I", "feel", "much", "safer", "with", "add", "line", "of", "thought", "be", "going", "to", "increase", "technical", "debt", "and", "make", "things", "harder", "down", "the", "line", "NUMBER", "The", "accrued", "technical", "debt", "be", "why", "I", "decided", "to", "scrap", "the", "orignal", "vim", "mode", "implementation", "and", "start", "from", "scratch", "NUMBER", "x", "duplicate", "logic", "NUMBER", "For", "either", "simply", "merge", "it", "with", "replayMacro", "and", "add", "a", "special", "case", "for", "the", "x", "remove", "ugly", "swapping", "of", "q", "should", "be", "repeatable", "change", "normalModeKey", "to", "registerText", "in", "defaultKeymap", "textRegister", "vs", "keyRegister", "should", "be", "repeatable", "It", "s", "already", "repeatable", "by", "do", "you", "mean", "repeatable", "by", "NUMBER", "Instead", "of", "having", "a", "conversion", "from", "normalModeKey", "to", "registerText", "what", "do", "you", "think", "about", "change", "usages", "of", "normalModeKey", "in", "the", "keymap", "so", "that", "normalModeKey", "registerText", "NUMBER", "This", "be", "exactly", "what", "I", "wanted", "NUMBER", "Now", "that", "we", "ve", "reached", "a", "consensus", "on", "this", "part", "I", "ll", "do", "the", "following", "change", "to", "the", "defaultKeymap", "Ctrl", "a", "TAG", "C", "Space", "TAG", "C", "Backspace", "TAG", "Space", "TAG", "Enter", "TAG", "Backspace", "TAG", "Tab", "TAG", "Regarding", "to", "textRegister", "vs", "keyRegister", "I", "personally", "in", "favor", "of", "the", "textRegister", "approach", "since", "that", "could", "make", "future", "implementation", "of", "NUMBER", "vimrc", "more", "convenient", "NUMBER", "This", "be", "also", "for", "the", "sake", "of", "conforming", "to", "original", "Vim", "NUMBER", "The", "keyRegister", "approach", "be", "not", "bad", "either", "I", "ll", "regard", "it", "as", "a", "cached", "version", "of", "textRegister", "I", "can", "still", "convert", "between", "key", "sequence", "and", "text", "stream", "when", "I", "need", "to", "NUMBER", "Either", "approach", "be", "fine", "with", "me", "which", "one", "you", "see", "be", "more", "maintainable", "I", "appreciate", "that", "you", "be", "very", "careful", "about", "not", "regressing", "but", "the", "I", "feel", "much", "safer", "with", "add", "line", "of", "thought", "be", "going", "to", "increase", "technical", "debt", "and", "make", "things", "harder", "down", "the", "line", "NUMBER", "The", "accrued", "technical", "debt", "be", "why", "I", "decided", "to", "scrap", "the", "original", "vim", "mode", "implementation", "and", "start", "from", "scratch", "NUMBER", "Some", "times", "I", "fail", "to", "see", "some", "big", "ideas", "in", "terms", "of", "code", "quality", "and", "such", "could", "you", "suggest", "me", "some", "trust", "able", "reading", "materials", "for", "that", "Enter", "n", "Backspace", "b", "Tab", "t", "The", "above", "NUMBER", "I", "would", "make", "TAG", "TAG", "TAG", "NUMBER", "They", "do", "not", "directly", "translate", "to", "the", "escape", "sequences", "you", "specified", "NUMBER", "VIM", "uses", "special", "sequences", "to", "denote", "them", "as", "well", "I", "for", "Tab", "and", "M", "for", "Enter", "NUMBER", "Would", "you", "mind", "separating", "this", "set", "of", "change", "into", "its", "own", "pull", "request", "as", "well", "preceding", "this", "one", "It", "would", "make", "it", "much", "easier", "on", "me", "to", "review", "and", "I", "d", "really", "appreciate", "it", "NUMBER", "Either", "approach", "be", "fine", "with", "me", "which", "one", "you", "see", "be", "more", "maintainable", "Go", "with", "the", "approach", "you", "prefer", "NUMBER", "Going", "back", "to", "keyRegister", "shouldn", "t", "be", "too", "hard", "if", "needed", "as", "far", "as", "I", "can", "see", "NUMBER", "I", "think", "at", "this", "stage", "the", "textRegister", "approach", "be", "overengineering", "but", "since", "you", "have", "it", "code", "up", "and", "work", "I", "don", "t", "see", "a", "good", "reason", "to", "revert", "that", "NUMBER", "Wanted", "to", "bring", "up", "the", "alternative", "thogh", "NUMBER", "Some", "times", "I", "fail", "to", "see", "some", "big", "ideas", "in", "terms", "of", "code", "quality", "and", "such", "could", "you", "suggest", "me", "some", "trust", "able", "reading", "materials", "for", "that", "I", "think", "it", "s", "just", "something", "you", "end", "up", "picking", "up", "when", "you", "work", "on", "gigantic", "projects", "but", "here", "s", "a", "couple", "references", "I", "find", "on", "the", "net", "NUMBER", "In", "my", "opinion", "you", "be", "doing", "pretty", "well", "NUMBER", "LINK", "technical", "debt", "LINK", "The", "above", "NUMBER", "I", "would", "make", "TAG", "TAG", "Yeah", "I", "know", "you", "mean", "TAG", "TAG", "by", "typing", "h", "key", "notation", "in", "vim", "I", "find", "a", "complete", "list", "of", "vim", "s", "key", "notations", "NUMBER", "Would", "you", "mind", "separating", "this", "set", "of", "change", "into", "its", "own", "pull", "request", "as", "well", "preceding", "this", "one", "It", "would", "make", "it", "much", "easier", "on", "me", "to", "review", "and", "I", "d", "really", "appreciate", "it", "NUMBER", "Sure", "please", "see", "NUMBER", "Since", "NUMBER", "be", "merge", "now", "our", "progress", "be", "update", "to", "x", "duplicate", "logic", "NUMBER", "For", "either", "simply", "merge", "it", "with", "replayMacro", "and", "add", "a", "special", "case", "for", "the", "x", "remove", "ugly", "swapping", "of", "q", "x", "change", "normalModeKey", "to", "registerText", "in", "defaultKeymap", "should", "be", "repeatable", "finish", "textRegister", "should", "be", "repeatable", "Can", "it", "be", "more", "specific", "Repeatable", "by", "or", "NUMBER", "If", "it", "means", "then", "I", "already", "have", "it", "implement", "NUMBER", "Can", "it", "be", "more", "specific", "Repeatable", "by", "or", "NUMBER", "If", "it", "means", "then", "I", "already", "have", "it", "implement", "NUMBER", "Sorry", "I", "meant", "it", "should", "be", "repeatable", "with", "a", "count", "NUMBER", "NUMBER", "should", "run", "the", "macro", "twice", "NUMBER", "Ah", "good", "call", "I", "ll", "fix", "it", "soon", "NUMBER", "x", "duplicate", "logic", "NUMBER", "For", "either", "simply", "merge", "it", "with", "replayMacro", "and", "add", "a", "special", "case", "for", "the", "x", "remove", "ugly", "swapping", "of", "q", "x", "change", "normalModeKey", "to", "registerText", "in", "defaultKeymap", "x", "should", "be", "repeatable", "finish", "textRegister", "Seems", "like", "the", "only", "thing", "left", "be", "to", "delete", "normalModeKeyToTextToken", "and", "its", "call", "sites", "NUMBER", "Anything", "else", "I", "m", "miss", "Seems", "like", "the", "only", "thing", "left", "be", "to", "delete", "normalModeKeyToTextToken", "and", "its", "call", "sites", "NUMBER", "Anything", "else", "I", "m", "miss", "Sounds", "right", "NUMBER", "The", "buildLookup", "function", "would", "make", "more", "sense", "to", "have", "in", "the", "insert", "mode", "implementation", "if", "you", "weren", "t", "planning", "to", "remove", "it", "already", "NUMBER", "x", "duplicate", "logic", "NUMBER", "For", "either", "simply", "merge", "it", "with", "replayMacro", "and", "add", "a", "special", "case", "for", "the", "x", "remove", "ugly", "swapping", "of", "q", "x", "change", "normalModeKey", "to", "registerText", "in", "defaultKeymap", "x", "should", "be", "repeatable", "x", "finish", "textRegister", "x", "Transparentize", "hidden", "state", "x", "Revise", "logKey", "logic", "x", "IE", "compatible", "array", "NUMBER", "forEach", "x", "Remove", "deprecate", "lookups", "Anything", "else", "need", "to", "be", "fix", "Just", "a", "couple", "more", "nits", "NUMBER", "Thanks", "for", "following", "through", "with", "this", "NUMBER", "Alright", "that", "should", "do", "it", "NUMBER", "Looks", "good", "to", "me", "NUMBER", "Thanks", "again", "NUMBER", "marijnh", "The", "changeset", "in", "NUMBER", "be", "now", "merge", "to", "this", "branch", "NUMBER", "NUMBER", "be", "no", "longer", "needed", "please", "discard", "it", "NUMBER", "This", "pull", "request", "be", "responding", "to", "the", "received", "suggestions", "from", "NUMBER", "actionArgs", "NUMBER", "insertAt", "can", "be", "later", "use", "for", "recording", "cursor", "behaviors", "for", "latest", "enterInsertMode", "commands", "NUMBER", "Looks", "good", "NUMBER", "Nit", "in", "general", "prefer", "over", "NUMBER", "Nit", "in", "general", "prefer", "over", "NUMBER", "After", "viewing", "the", "benchmarks", "from", "LINK", "of", "comparisons", "I", "kinda", "agree", "with", "you", "NUMBER", "In", "Chrome", "be", "no", "longer", "faster", "than", "That", "should", "do", "it", "NUMBER", "Looks", "good", "NUMBER", "Thanks", "NUMBER", "NUMBER", "Open", "LINK", "in", "a", "browser", "NUMBER", "NUMBER", "Switch", "to", "Chinese", "IME", "pinyin", "simplified", "NUMBER", "NUMBER", "Delete", "TAG", "write", "Do", "you", "really", "need", "both", "modes", "dontAlignCalls", "and", "dontAlignCalls", "nonAlignedCalls", "I", "find", "the", "names", "sound", "like", "both", "do", "the", "same", "thing", "and", "in", "fact", "I", "m", "not", "entirely", "close", "on", "what", "the", "difference", "be", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "NUMBER", "Chandra", "follow", "me", "LINK", "Overcoming", "the", "unexpect", "and", "discovering", "the", "unknown", "be", "what", "ignites", "our", "spirit", "NUMBER", "It", "be", "what", "life", "be", "all", "about", "NUMBER", "Seems", "like", "the", "unit", "test", "do", "not", "cover", "this", "set", "of", "features", "NUMBER", "When", "I", "press", "zz", "zt", "zb", "the", "text", "doesn", "t", "scroll", "for", "me", "NUMBER", "But", "when", "I", "run", "CodeMirror", "NUMBER", "Vim", "NUMBER", "handleKey", "cm", "z", "twice", "from", "console", "the", "text", "scrolls", "as", "expected", "NUMBER", "Pretty", "weird", "NUMBER", "With", "a", "little", "inspection", "I", "figure", "out", "it", "s", "cause", "by", "cm", "NUMBER", "scrollIntoView", "NUMBER", "The", "current", "patch", "uses", "some", "minor", "tweak", "to", "work", "instead", "of", "cm", "NUMBER", "scrollIntoView", "NUMBER", "Not", "quite", "familiar", "with", "this", "CodeMirror", "scrolling", "NUMBER", "I", "think", "I", "mostly", "copied", "from", "a", "discussion", "on", "the", "google", "group", "for", "this", "NUMBER", "marijnh", "would", "you", "mind", "reviewing", "this", "one", "It", "scrolls", "the", "current", "cursor", "position", "to", "the", "top", "center", "or", "bottom", "of", "the", "page", "NUMBER", "No", "vim", "specific", "knowledge", "be", "needed", "NUMBER", "marijnh", "Testing", "DOM", "relate", "stuff", "across", "a", "bunch", "of", "browsers", "manually", "be", "a", "painful", "experience", "the", "current", "patch", "doesn", "t", "cover", "test", "cases", "for", "IE", "hope", "this", "suffices", "NUMBER", "Oops", "never", "saw", "that", "come", "NUMBER", "In", "that", "case", "I", "ll", "change", "the", "test", "to", "a", "more", "robust", "form", "NUMBER", "I", "tried", "the", "duplicate", "computation", "approach", "but", "I", "couldn", "t", "get", "it", "right", "there", "s", "always", "a", "few", "pixels", "off", "to", "figure", "it", "out", "might", "take", "far", "too", "much", "time", "NUMBER", "Here", "I", "just", "do", "a", "simple", "check", "for", "zb", "TAG", "Almost", "NUMBER", "I", "still", "get", "this", "failure", "vim_zt", "zEnter", "NUMBER", "NUMBER", "Predictable", "since", "NUMBER", "be", "merge", "before", "this", "one", "the", "old", "Enter", "no", "longer", "be", "a", "valid", "key", "in", "vim", "keymap", "NUMBER", "I", "ll", "change", "it", "to", "TAG", "to", "fix", "this", "issue", "NUMBER", "Please", "condense", "both", "down", "to", "a", "single", "commit", "put", "them", "on", "the", "same", "branch", "make", "sure", "the", "test", "pass", "and", "overwrite", "one", "of", "the", "pull", "request", "with", "the", "result", "closing", "the", "other", "NUMBER", "Alright", "the", "current", "change", "set", "be", "merge", "to", "NUMBER", "please", "discard", "this", "pull", "request", "as", "soon", "as", "you", "merge", "NUMBER", "When", "Ctrl", "o", "Ctrl", "i", "try", "to", "jump", "back", "to", "bookmarks", "that", "be", "no", "longer", "on", "the", "text", "buffer", "exception", "occur", "NUMBER", "This", "patch", "be", "aiming", "at", "fix", "such", "issue", "NUMBER", "Looks", "good", "to", "me", "NUMBER", "In", "Brackets", "we", "notice", "a", "performance", "regression", "since", "we", "ve", "upgrade", "to", "version", "NUMBER", "I", "ve", "narrowed", "this", "down", "to", "the", "fact", "that", "we", "remove", "the", "default", "border", "right", "NUMBER", "px", "solid", "ddd", "on", "CodeMirror", "gutters", "NUMBER", "I", "ve", "reproduced", "this", "use", "a", "boilerplate", "CodeMirror", "demo", "here", "LINK", "_sanjose", "zYeUJ", "NUMBER", "embedded", "result", "and", "use", "the", "Chrome", "dev", "tool", "timeline", "to", "capture", "performance", "when", "typing", "a", "character", "in", "the", "editor", "NUMBER", "The", "screen", "shot", "below", "shows", "a", "Paint", "event", "with", "a", "repaint", "region", "shown", "for", "the", "entire", "window", "NUMBER", "Normally", "we", "should", "only", "see", "repaints", "for", "the", "new", "character", "the", "line", "element", "and", "possibly", "the", "line", "gutter", "NUMBER", "repaint", "performance", "LINK", "b", "NUMBER", "d", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "f", "NUMBER", "bc", "NUMBER", "a", "NUMBER", "png", "Hmm", "that", "didn", "t", "work", "for", "me", "on", "Chrome", "NUMBER", "on", "mac", "NUMBER", "You", "meant", "NUMBER", "CodeMirror", "gutters", "clear", "both", "border", "none", "right", "I", "tried", "that", "in", "developer", "tool", "with", "this", "demo", "LINK", "and", "I", "still", "see", "the", "whole", "editor", "repaint", "NUMBER", "Ah", "that", "makes", "sense", "NUMBER", "That", "patch", "fix", "my", "jsfiddle", "example", "NUMBER", "I", "ll", "try", "this", "out", "in", "Brackets", "NUMBER", "NUMBER", "Open", "LINK", "in", "a", "browser", "NUMBER", "NUMBER", "Switch", "to", "Hiragana", "mode", "in", "Japanese", "IME", "NUMBER", "NUMBER", "Type", "p", "NUMBER", "NUMBER", "Type", "a", "NUMBER", "Result", "No", "underline", "for", "letter", "p", "in", "step", "NUMBER", "and", "\u3071", "in", "step", "NUMBER", "Expected", "Should", "show", "underline", "to", "indicate", "that", "those", "characters", "be", "part", "of", "composition", "and", "not", "final", "characters", "yet", "NUMBER", "NUMBER", "Open", "LINK", "in", "a", "browser", "NUMBER", "NUMBER", "Paste", "the", "following", "html", "into", "the", "text", "field", "NUMBER", "TAG", "TAG", "TAG", "\uae4c\uce58\ubc1c", "TAG", "TAG", "TAG", "NUMBER", "Double", "click", "on", "Korean", "characters", "NUMBER", "Result", "before", "Korean", "characters", "and", "TAG", "NUMBER", "kB", "Local", "node", "bin", "compress", "local", "C", "path", "uglifyjs", "NUMBER", "cmd", "codemirror", "NUMBER", "kB", "bin", "compress", "modify", "to", "run", "uglifyjs", "NUMBER", "cmd", "with", "c", "m", "NUMBER", "kB", "Currently", "run", "a", "vim", "command", "like", "w", "doesn", "t", "work", "it", "throw", "an", "exception", "when", "closing", "the", "dialog", "because", "it", "try", "to", "call", "callback", "which", "doesn", "t", "exist", "NUMBER", "If", "I", "m", "understanding", "the", "code", "correctly", "it", "should", "call", "onClose", "instead", "NUMBER", "It", "looks", "like", "this", "code", "has", "be", "in", "there", "for", "a", "long", "time", "so", "I", "m", "not", "sure", "why", "this", "hasn", "t", "cause", "a", "problem", "before", "maybe", "no", "one", "be", "use", "the", "default", "implementation", "of", "openDialog", "NUMBER", "You", "be", "right", "my", "bad", "NUMBER", "Thanks", "for", "the", "fix", "NUMBER", "A", "line", "break", "with", "dimension", "e", "NUMBER", "g", "NUMBER", "NUMBER", "cm", "was", "be", "parsed", "as", "the", "start", "of", "an", "equation", "NUMBER", "NUMBER", "Fix", "be", "now", "matched", "before", "NUMBER", "Test", "add", "NUMBER", "One", "of", "the", "killer", "features", "in", "Vim", "which", "allows", "user", "to", "jump", "around", "previous", "cursor", "positions", "NUMBER", "Here", "s", "how", "vimdoc", "defines", "a", "jump", "A", "jump", "be", "one", "of", "the", "following", "commands", "backtick", "G", "n", "N", "s", "tag", "L", "M", "H", "and", "the", "commands", "that", "start", "editing", "a", "new", "file", "NUMBER", "If", "you", "make", "the", "cursor", "jump", "with", "one", "of", "these", "commands", "the", "position", "of", "the", "cursor", "before", "the", "jump", "be", "remembered", "NUMBER", "You", "can", "return", "to", "that", "position", "with", "the", "and", "command", "unless", "the", "line", "containing", "that", "position", "was", "change", "or", "delete", "NUMBER", "I", "tried", "to", "make", "it", "match", "the", "original", "as", "much", "as", "I", "could", "however", "there", "s", "still", "something", "miss", "in", "my", "implementation", "NUMBER", "recording", "postion", "for", "_", "depending", "on", "sentence", "motions", "which", "be", "not", "yet", "implement", "_", "NUMBER", "cross", "file", "jumps", "_", "depending", "on", "native", "file", "buffer", "support", "_", "Cool", "feature", "NUMBER", "I", "didn", "t", "know", "about", "it", "NUMBER", "It", "mostly", "looks", "good", "NUMBER", "In", "addition", "to", "the", "in", "code", "comments", "above", "I", "believe", "the", "jumplist", "commands", "should", "NOT", "be", "motions", "i", "NUMBER", "e", "NUMBER", "the", "key", "sequence", "d", "Ctrl", "o", "should", "not", "be", "orthogonal", "and", "should", "not", "delete", "everything", "between", "the", "cursor", "and", "the", "previous", "position", "in", "the", "jumplist", "NUMBER", "Changing", "them", "to", "actions", "should", "fix", "the", "orthogonality", "problem", "NUMBER", "It", "looks", "like", "they", "also", "aren", "t", "supposed", "to", "work", "in", "visual", "mode", "but", "it", "s", "not", "too", "important", "to", "match", "this", "though", "it", "d", "be", "nice", "as", "a", "future", "improvement", "NUMBER", "Cool", "feature", "NUMBER", "I", "didn", "t", "know", "about", "it", "NUMBER", "Seriously", "I", "m", "interested", "how", "you", "do", "the", "similar", "thing", "without", "use", "this", "feature", "I", "believe", "the", "jumplist", "commands", "should", "NOT", "be", "motions", "i", "NUMBER", "e", "NUMBER", "the", "key", "sequence", "d", "Ctrl", "o", "should", "not", "be", "orthogonal", "and", "should", "not", "delete", "everything", "between", "the", "cursor", "and", "the", "previous", "position", "in", "the", "jumplist", "NUMBER", "Good", "call", "I", "didn", "t", "even", "think", "about", "the", "orthogonality", "issue", "NUMBER", "With", "the", "current", "patch", "x", "cm", "NUMBER", "setBookmark", "moved", "into", "the", "jumpList", "logic", "x", "bookmark", "NUMBER", "clear", "be", "call", "when", "the", "bookmark", "be", "remove", "from", "the", "jumpList", "x", "use", "cursorEqual", "instead", "of", "the", "reimplemented", "one", "x", "change", "from", "motion", "to", "action", "to", "fix", "orthogonality", "issue", "x", "suppress", "this", "action", "in", "visualMode", "create", "test", "cases", "in", "progress", "This", "looks", "good", "to", "me", "NUMBER", "marijnh", "please", "merge", "when", "lynschinzer", "commit", "the", "unit", "test", "NUMBER", "No", "need", "for", "another", "review", "from", "me", "NUMBER", "Thanks", "for", "the", "continued", "contributions", "marijnh", "Tested", "on", "Chrome", "Firefox", "Opera", "all", "my", "test", "pass", "NUMBER", "Improve", "character", "symbol", "literals", "syntax", "and", "remove", "unuse", "variable", "NUMBER", "If", "a", "code", "mirror", "instance", "be", "in", "an", "DIV", "with", "display", "none", "when", "I", "use", "JavaScript", "to", "change", "this", "DIV", "s", "style", "display", "to", "block", "an", "error", "occur", "Line", "number", "and", "content", "text", "hidden", "futuremore", "I", "find", "that", "when", "I", "use", "css", "visibility", "property", "will", "not", "cause", "this", "problem", "NUMBER", "There", "be", "several", "variants", "of", "the", "bug", "but", "most", "basically", "if", "you", "have", "this", "text", "and", "be", "sitting", "on", "A", "foo", "bAr", "baz", "And", "you", "execute", "diw", "you", "ll", "get", "foo", "r", "baz", "Instead", "of", "foo", "baz", "This", "issue", "affects", "all", "of", "the", "following", "delete", "motions", "diw", "daw", "diW", "daW", "as", "well", "as", "their", "change", "ciw", "NUMBER", "yank", "yiw", "NUMBER", "and", "visual", "viw", "NUMBER", "variations", "NUMBER", "I", "created", "NUMBER", "test", "covering", "various", "edge", "cases", "NUMBER", "cases", "fail", "without", "the", "patch", "and", "all", "now", "pass", "NUMBER", "lint", "was", "happy", "as", "well", "NUMBER", "Let", "me", "know", "if", "there", "s", "anything", "you", "d", "like", "me", "to", "change", "style", "completeness", "or", "otherwise", "NUMBER", "Thanks", "I", "d", "be", "hoping", "someone", "would", "take", "a", "serious", "crack", "at", "fix", "text", "objects", "NUMBER", "This", "be", "one", "of", "the", "best", "patches", "I", "ve", "seen", "so", "far", "NUMBER", "Great", "job", "and", "thanks", "for", "the", "unit", "test", "The", "patch", "mostly", "looks", "good", "except", "that", "I", "think", "you", "need", "to", "also", "consider", "words", "separated", "by", "multiple", "spaces", "Your", "patch", "seems", "to", "only", "take", "into", "account", "single", "spaces", "NUMBER", "I", "d", "be", "happy", "to", "NUMBER", "Give", "me", "a", "few", "minutes", "or", "so", "and", "I", "ll", "push", "again", "NUMBER", "mightyguava", "Good", "call", "NUMBER", "Vim", "deletes", "all", "whitespace", "trail", "or", "preceding", "for", "the", "a", "inclusive", "motions", "NUMBER", "This", "will", "take", "longer", "as", "I", "adjust", "the", "code", "NUMBER", "I", "ll", "update", "the", "pull", "request", "with", "the", "new", "change", "when", "they", "re", "do", "NUMBER", "This", "update", "push", "address", "both", "the", "multi", "whitespace", "test", "and", "the", "fix", "logic", "to", "handle", "the", "multi", "whitespace", "inclusion", "NUMBER", "Really", "the", "logic", "reads", "more", "like", "the", "Vim", "behavior", "now", "anyways", "NUMBER", "Let", "me", "know", "if", "there", "be", "more", "test", "or", "other", "change", "to", "the", "commit", "you", "d", "like", "to", "see", "NUMBER", "Looks", "good", "to", "me", "NUMBER", "Thank", "you", "for", "taking", "the", "time", "to", "make", "these", "change", "NUMBER", "I", "really", "appreciate", "your", "attention", "to", "detail", "NUMBER", "Lots", "of", "people", "will", "be", "happy", "to", "see", "these", "fix", "Thanks", "I", "really", "appreciate", "the", "project", "and", "hope", "to", "contribute", "again", "NUMBER", "Thanks", "NUMBER", "this", "patch", "be", "seriously", "awesome", "WebKit", "on", "Mac", "do", "not", "honor", "autocorrect", "off", "like", "WebKit", "on", "iOS", "but", "it", "do", "honor", "spellcheck", "false", "NUMBER", "CodeMirror", "should", "set", "spellcheck", "false", "to", "prevent", "OS", "X", "from", "autocorrecting", "while", "typing", "NUMBER", "Applies", "to", "commit", "NUMBER", "d", "NUMBER", "b", "NUMBER", "fbb", "NUMBER", "d", "NUMBER", "f", "NUMBER", "ebae", "NUMBER", "eeacef", "NUMBER", "bd", "NUMBER", "f", "NUMBER", "I", "m", "attempting", "to", "enable", "lintWith", "for", "javascript", "file", "but", "not", "for", "HTML", "NUMBER", "With", "any", "commit", "between", "v", "NUMBER", "and", "the", "commit", "before", "this", "one", "I", "could", "switch", "between", "file", "types", "NUMBER", "From", "this", "commit", "onwards", "the", "gutters", "be", "initially", "drawn", "incorrectly", "as", "shown", "in", "the", "screenshots", "NUMBER", "If", "you", "reload", "the", "file", "it", "be", "then", "drawn", "correctly", "NUMBER", "This", "be", "a", "single", "instance", "of", "the", "editor", "NUMBER", "The", "tabs", "switch", "between", "two", "documents", "use", "cm", "NUMBER", "swapDoc", "which", "works", "brilliantly", "NUMBER", "However", "these", "screenshots", "be", "immediately", "after", "reloading", "the", "file", "NUMBER", "The", "loading", "sequence", "be", "NUMBER", "cm", "NUMBER", "setOption", "mode", "NUMBER", "If", "mode", "be", "javascript", "cm", "NUMBER", "setOption", "gutters", "CodeMirror", "lint", "markers", "followed", "by", "cm", "NUMBER", "setOption", "lintWith", "CodeMirror", "NUMBER", "javascriptValidator", "NUMBER", "Otherwise", "cm", "NUMBER", "setOption", "gutters", "followed", "by", "cm", "NUMBER", "setOption", "lintWith", "false", "NUMBER", "cm", "NUMBER", "setValue", "text", "from", "file", "It", "seems", "that", "this", "change", "has", "altered", "the", "way", "the", "gutter", "widths", "be", "calculated", "gutter_issues", "LINK", "b", "NUMBER", "c", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "cc", "NUMBER", "a", "NUMBER", "ed", "NUMBER", "png", "Here", "be", "an", "example", "which", "runs", "from", "the", "codemirror", "demo", "directory", "NUMBER", "With", "CM", "v", "NUMBER", "it", "works", "as", "expected", "but", "after", "commit", "NUMBER", "d", "NUMBER", "b", "NUMBER", "fbb", "NUMBER", "d", "NUMBER", "f", "NUMBER", "ebae", "NUMBER", "eeacef", "NUMBER", "bd", "NUMBER", "f", "NUMBER", "the", "first", "button", "click", "redraws", "the", "gutter", "incorrectly", "and", "you", "have", "to", "click", "the", "button", "a", "second", "time", "to", "get", "the", "desired", "effect", "NUMBER", "TAG", "TAG", "TAG", "TAG", "TAG", "CodeMirror", "Gutter", "Issue", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "NUMBER", "CodeMirror", "border", "NUMBER", "px", "solid", "black", "font", "size", "NUMBER", "px", "TAG", "TAG", "TAG", "TAG", "CodeMirror", "Gutter", "issue", "TAG", "TAG", "CM", "v", "NUMBER", "be", "fine", "but", "after", "the", "commit", "coverGutterNextToScrollbar", "you", "have", "to", "set", "the", "gutter", "twice", "TAG", "TAG", "function", "findSequence", "goal", "function", "find", "start", "history", "if", "start", "goal", "return", "history", "else", "if", "start", "goal", "return", "null", "else", "return", "find", "start", "NUMBER", "history", "NUMBER", "find", "start", "NUMBER", "history", "NUMBER", "return", "find", "NUMBER", "NUMBER", "TAG", "TAG", "TAG", "set", "gutter", "TAG", "TAG", "clear", "gutter", "TAG", "TAG", "TAG", "var", "editor", "CodeMirror", "NUMBER", "fromTextArea", "document", "NUMBER", "getElementById", "code", "lineNumbers", "true", "theme", "cobalt", "console", "NUMBER", "log", "CodeMirror", "version", "CodeMirror", "NUMBER", "version", "function", "setgutter", "editor", "NUMBER", "setOption", "gutters", "CodeMirror", "lint", "markers", "function", "cleargutter", "editor", "NUMBER", "setOption", "gutters", "TAG", "TAG", "TAG", "Looking", "at", "your", "other", "suggestions", "NUMBER", "If", "option", "fixedGutter", "be", "set", "to", "false", "the", "buttons", "in", "the", "demo", "work", "as", "expected", "NUMBER", "Can", "t", "make", "option", "coverGutterNextToScrollbar", "do", "anything", "The", "problem", "seems", "to", "be", "in", "the", "left", "position", "of", "the", "CodeMirror", "gutters", "element", "for", "example", "here", "it", "be", "with", "the", "problem", "but", "when", "you", "click", "the", "set", "gutter", "button", "a", "second", "time", "it", "change", "to", "NUMBER", "px", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "Thank", "you", "for", "the", "quick", "fix", "and", "confirming", "that", "gutters", "be", "agaiin", "work", "as", "expected", "NUMBER", "The", "two", "styles", "use", "by", "the", "lint", "add", "on", "for", "error", "and", "warnings", "have", "class", "names", "like", "CodeMirror", "lint", "span", "error", "NUMBER", "These", "clash", "with", "bootstrap", "rules", "that", "match", "any", "class", "name", "with", "span", "in", "it", "leading", "to", "the", "misalignment", "shown", "in", "the", "attachment", "error", "be", "miss", "right", "parenthesis", "NUMBER", "A", "simple", "workaround", "would", "be", "to", "change", "these", "class", "names", "in", "lint", "NUMBER", "css", "to", "CodeMirror", "lint", "marked", "error", "and", "CodeMirror", "lint", "marked", "warning", "and", "the", "string", "in", "lint", "NUMBER", "js", "to", "CodeMirror", "lint", "marked", "NUMBER", "I", "couldn", "t", "find", "any", "other", "examples", "of", "span", "be", "embedded", "in", "a", "CodeMirror", "class", "name", "NUMBER", "js", "error", "LINK", "b", "NUMBER", "c", "NUMBER", "e", "NUMBER", "NUMBER", "b", "NUMBER", "NUMBER", "cd", "NUMBER", "f", "NUMBER", "b", "NUMBER", "png", "Hi", "Marijnh", "Thanks", "for", "fix", "this", "so", "quickly", "NUMBER", "This", "be", "to", "confirm", "that", "the", "issue", "be", "fix", "NUMBER", "Unfortunately", "advancing", "from", "v", "NUMBER", "to", "this", "latest", "commit", "has", "uncovered", "an", "issue", "with", "gutter", "widths", "NUMBER", "Sorry", "about", "that", "NUMBER", "david", "Thanks", "for", "contribute", "to", "the", "Vim", "keymap", "Looks", "good", "NUMBER", "Just", "NUMBER", "minor", "comments", "NUMBER", "NUMBER", "Could", "you", "rename", "overwriteMode", "to", "replaceMode", "to", "better", "match", "vim", "naming", "NUMBER", "marijnh", "toggleOverwriteMode", "doesn", "t", "appear", "to", "be", "part", "of", "the", "documented", "API", "NUMBER", "Is", "it", "safe", "to", "use", "here", "Just", "notice", "that", "the", "backspace", "behaviour", "be", "not", "quite", "original", "should", "undo", "character", "input", "unless", "cursor", "was", "moved", "I", "think", "otherwise", "just", "move", "cursor", "left", "NUMBER", "NUMBER", "ill", "not", "original", "but", "a", "bit", "better", "NUMBER", "The", "color", "list", "be", "incomplete", "NUMBER", "js", "var", "colorKeywords", "keySet", "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightpink", "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta", "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin", "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered", "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred", "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue", "purple", "red", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue", "slateblue", "slategray", "snow", "springgreen", "steelblue", "tan", "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white", "whitesmoke", "yellow", "yellowgreen", "But", "yellow", "and", "white", "should", "be", "suppressed", "from", "var", "valueKeywords", "keySet", "NUMBER", "This", "be", "for", "issue", "NUMBER", "I", "add", "a", "new", "parameter", "to", "updateScrollbars", "but", "it", "seems", "like", "just", "passing", "cm", "to", "that", "function", "be", "a", "littler", "cleaner", "so", "let", "me", "know", "if", "I", "should", "change", "it", "NUMBER", "I", "didn", "t", "make", "it", "an", "option", "because", "I", "don", "t", "know", "why", "anyone", "would", "not", "want", "it", "this", "way", "NUMBER", "Let", "me", "know", "if", "you", "still", "want", "it", "as", "an", "option", "NUMBER", "Added", "a", "CodeMirror", "code", "css", "class", "to", "the", "div", "containing", "the", "pre", "elements", "with", "the", "code", "NUMBER", "I", "find", "this", "useful", "to", "differentiate", "the", "pre", "elements", "from", "the", "ones", "present", "in", "CodeMirror", "measure", "div", "when", "doing", "some", "specific", "DOM", "manipulations", "NUMBER", "This", "fix", "a", "problem", "with", "the", "rrunmode", "addon", "in", "which", "copy", "and", "paste", "in", "IE", "results", "in", "newlines", "be", "stripped", "NUMBER", "A", "relate", "problem", "with", "google", "code", "prettify", "LINK", "code", "prettify", "be", "discussed", "here", "LINK", "doesnt", "ie", "NUMBER", "copy", "precode", "blocks", "to", "the", "clipboard", "correctly", "NUMBER", "The", "solution", "in", "this", "pull", "request", "be", "to", "change", "to", "use", "newlines", "instead", "of", "TAG", "NUMBER", "Plus", "there", "be", "some", "special", "handle", "for", "IE", "NUMBER", "and", "earlier", "inspired", "by", "google", "code", "prettify", "LINK", "code", "prettify", "source", "browse", "trunk", "src", "prettify", "NUMBER", "js", "NUMBER", "do", "it", "work", "I", "ve", "opened", "index", "page", "on", "codemirror", "site", "and", "copied", "code", "on", "main", "page", "NUMBER", "It", "still", "doesnt", "copy", "format", "LINK", "It", "be", "not", "supposed", "to", "copy", "any", "non", "textual", "format", "NUMBER", "I", "know", "NUMBER", "Under", "format", "I", "mean", "new", "line", "What", "you", "be", "describing", "definitely", "do", "not", "have", "anything", "to", "do", "with", "the", "original", "intent", "of", "this", "pull", "request", "NUMBER", "Could", "you", "open", "a", "new", "issue", "and", "mention", "which", "version", "of", "IE", "you", "be", "use", "as", "well", "as", "what", "exactly", "step", "by", "step", "you", "be", "doing", "Hi", "Marijn", "I", "have", "created", "the", "fullscreen", "addon", "for", "my", "CodeMirror", "Eclipse", "LINK", "Eclipse", "because", "I", "embed", "CM", "in", "a", "Eclipse", "EditorPart", "with", "fullscreen", "mode", "NUMBER", "This", "addon", "be", "just", "a", "copy", "paste", "of", "the", "javascript", "of", "your", "demo", "fullscreen", "NUMBER", "html", "NUMBER", "Here", "the", "benefit", "with", "this", "addon", "NUMBER", "avoid", "copying", "pasting", "the", "fullscreen", "javascript", "of", "demo", "fullscreen", "NUMBER", "html", "to", "manage", "fullscreen", "just", "include", "the", "addon", "display", "fullscreen", "NUMBER", "js", "NUMBER", "can", "initialize", "the", "fullscreen", "with", "options", "var", "editor", "CodeMirror", "NUMBER", "fromTextArea", "document", "NUMBER", "getElementById", "code", "NUMBER", "fullScreen", "true", "I", "have", "created", "too", "a", "fullscreen", "NUMBER", "css", "copy", "paste", "the", "style", "include", "in", "the", "demo", "fullscreen", "NUMBER", "html", "NUMBER", "I", "have", "just", "modify", "the", "z", "index", "because", "my", "completion", "be", "not", "display", "NUMBER", "I", "have", "modify", "the", "fullscreen", "demo", "with", "this", "new", "addon", "NUMBER", "Hope", "you", "will", "like", "it", "NUMBER", "Regards", "Angelo", "If", "I", "understand", "your", "comment", "your", "fullscreen", "javascript", "in", "your", "demo", "cannot", "be", "use", "for", "editor", "which", "be", "inside", "a", "relative", "or", "absolutely", "positioned", "element", "In", "my", "case", "I", "use", "this", "javascript", "like", "your", "demo", "so", "it", "works", "for", "me", "NUMBER", "I", "will", "host", "this", "addon", "on", "the", "CodeMirror", "XQuery", "NUMBER", "Regards", "Angelo", "Hi", "When", "use", "the", "text", "x", "sql", "mode", "I", "get", "the", "wrong", "color", "code", "in", "a", "specific", "case", "NUMBER", "Bug", "When", "having", "the", "following", "characters", "NUMBER", "e", "The", "result", "be", "NUMBER", "in", "black", "and", "the", "e", "in", "green", "NUMBER", "However", "when", "switching", "the", "e", "character", "to", "any", "other", "alphabetic", "character", "the", "alphabetic", "character", "be", "display", "in", "blue", "NUMBER", "This", "behavior", "also", "occur", "when", "the", "character", "be", "in", "uppercase", "NUMBER", "I", "saw", "this", "behavior", "on", "Google", "Chrome", "and", "on", "IE", "NUMBER", "I", "was", "able", "to", "reproduce", "this", "behavior", "with", "the", "demo", "on", "the", "web", "site", "NUMBER", "Expectation", "I", "expect", "the", "color", "of", "the", "alphabet", "character", "following", "the", "NUMBER", "character", "to", "always", "be", "the", "same", "NUMBER", "In", "this", "case", "it", "should", "be", "blue", "NUMBER", "Let", "me", "know", "if", "someone", "be", "able", "to", "fix", "this", "NUMBER", "Thank", "you", "Alexis", "Theriault", "In", "MacOS", "X", "with", "trackpad", "there", "s", "a", "Three", "finger", "drag", "gesture", "that", "can", "be", "use", "to", "select", "text", "NUMBER", "Deleting", "a", "selection", "do", "in", "codemirror", "use", "this", "gesture", "often", "results", "in", "the", "selection", "be", "restored", "after", "the", "lines", "have", "be", "delete", "NUMBER", "Steps", "to", "reproduce", "_I", "haven", "t", "be", "able", "to", "pinpoint", "this", "so", "far", "or", "generate", "a", "reliable", "set", "of", "steps", "to", "reproduce", "but", "the", "frequency", "with", "which", "this", "happens", "be", "quite", "high", "that", "this", "should", "be", "easily", "discoverable", "NUMBER", "_", "Open", "any", "codemirror", "demo", "page", "preferably", "one", "with", "long", "text", "such", "as", "LINK", "or", "LINK", "NUMBER", "Randomly", "use", "the", "three", "finger", "drag", "gesture", "to", "create", "a", "selection", "of", "NUMBER", "NUMBER", "lines", "NUMBER", "Press", "backspace", "to", "remove", "the", "lines", "NUMBER", "Result", "Often", "the", "selection", "will", "be", "restored", "after", "be", "remove", "NUMBER", "Expected", "The", "selection", "to", "not", "be", "restored", "NUMBER", "Hi", "marijnh", "sorry", "it", "s", "taken", "me", "so", "long", "to", "get", "back", "at", "this", "NUMBER", "I", "ve", "verify", "that", "the", "do", "function", "be", "indeed", "call", "but", "it", "has", "some", "delay", "with", "respect", "the", "regular", "mouseup", "event", "NUMBER", "Also", "yes", "the", "selection", "be", "the", "normal", "CodeMirror", "selection", "everything", "behaves", "as", "if", "regular", "mousedown", "move", "up", "events", "be", "triggered", "NUMBER", "The", "problem", "be", "that", "it", "works", "like", "this", "by", "design", "NUMBER", "It", "be", "designed", "to", "let", "the", "user", "resume", "the", "gesture", "after", "briefly", "lifting", "the", "fingers", "in", "order", "to", "make", "adjustments", "to", "the", "selection", "NUMBER", "For", "that", "the", "OS", "seems", "to", "introduce", "a", "small", "delay", "before", "dispatching", "the", "mouseup", "event", "which", "be", "cancelled", "it", "if", "the", "gesture", "be", "resumed", "before", "the", "delay", "has", "finished", "NUMBER", "With", "this", "in", "mind", "I", "d", "say", "a", "possible", "fix", "would", "be", "to", "_invalidate_", "or", "force", "_complete_", "the", "current", "select", "operation", "after", "a", "keypress", "if", "we", "be", "on", "this", "case", "NUMBER", "Does", "that", "sound", "right", "to", "you", "Is", "there", "already", "any", "similar", "case", "Afaict", "there", "s", "no", "_native_", "way", "to", "detect", "this", "case", "NUMBER", "I", "ve", "checked", "and", "the", "mouse", "events", "in", "both", "cases", "be", "exactly", "the", "same", "so", "there", "s", "no", "way", "to", "tell", "them", "apart", "based", "on", "any", "event", "relate", "information", "NUMBER", "One", "thing", "I", "ve", "notice", "though", "be", "that", "inside", "do", "in", "the", "regular", "case", "the", "mouseup", "event", "be", "immediate", "and", "cur", "posFromMouse", "cm", "e", "always", "matches", "the", "position", "from", "the", "last", "mousemove", "NUMBER", "Checking", "that", "this", "condition", "holds", "true", "before", "the", "doSelect", "cur", "fix", "this", "issue", "NUMBER", "Going", "even", "further", "it", "looks", "as", "if", "this", "doSelect", "cur", "could", "just", "be", "remove", "NUMBER", "Do", "you", "think", "it", "would", "be", "ok", "to", "do", "so", "Is", "there", "a", "case", "in", "which", "it", "makes", "a", "difference", "Yes", "simply", "remove", "the", "doSelect", "do", "fix", "this", "issue", "and", "doesn", "t", "seem", "to", "introduce", "any", "noticeable", "issue", "NUMBER", "The", "do", "s", "body", "already", "executes", "only", "once", "NUMBER", "The", "problem", "be", "that", "it", "executes", "well", "after", "other", "actions", "like", "keypresses", "that", "change", "the", "cursor", "position", "discarding", "the", "selection", "so", "the", "resulting", "effect", "be", "like", "it", "restores", "it", "NUMBER", "Another", "possible", "option", "if", "you", "don", "t", "want", "to", "just", "remove", "the", "doSelect", "call", "could", "be", "to", "expose", "the", "up", "operation", "so", "that", "we", "could", "detach", "it", "from", "mouseup", "on", "the", "keypress", "handler", "NUMBER", "Thanks", "a", "lot", "I", "ve", "pull", "the", "latest", "change", "and", "the", "issue", "doesn", "t", "reproduce", "anymore", "About", "the", "editor", "not", "be", "focused", "right", "ahead", "NUMBER", "I", "haven", "t", "seen", "anything", "weird", "so", "far", "NUMBER", "Can", "you", "elaborate", "a", "set", "of", "steps", "that", "you", "think", "could", "cause", "problem", "In", "any", "case", "this", "looks", "good", "to", "close", "Thanks", "again", "This", "be", "the", "start", "of", "an", "import", "context", "in", "css", "mode", "NUMBER", "It", "needs", "more", "styles", "but", "this", "makes", "it", "much", "easier", "to", "provide", "url", "hinting", "for", "import", "rules", "NUMBER", "url", "be", "currently", "given", "a", "tag", "style", "only", "to", "match", "what", "the", "style", "was", "before", "not", "sure", "what", "the", "best", "style", "should", "be", "NUMBER", "All", "of", "the", "media", "types", "queries", "could", "also", "be", "improved", "NUMBER", "If", "you", "load", "htmlmixed", "NUMBER", "js", "on", "the", "same", "page", "that", "s", "viewing", "a", "CodeMirror", "instance", "in", "Markdown", "mode", "it", "stops", "the", "XML", "parts", "from", "coloring", "NUMBER", "The", "Markdown", "parts", "will", "color", "fine", "but", "the", "XML", "parts", "won", "t", "NUMBER", "Example", "LINK", "This", "be", "exactly", "the", "same", "as", "your", "own", "Markdown", "demo", "page", "though", "I", "be", "loading", "the", "JS", "file", "remotely", "for", "this", "demo", "and", "also", "include", "the", "htmlmixed", "NUMBER", "js", "file", "on", "line", "NUMBER", "NUMBER", "If", "you", "remove", "NUMBER", "TAG", "TAG", "NUMBER", "on", "line", "NUMBER", "in", "my", "example", "the", "XML", "part", "of", "the", "Markdown", "document", "colors", "fine", "NUMBER", "It", "would", "be", "nice", "to", "have", "a", "scrollbar", "filler", "on", "the", "left", "side", "of", "the", "horizontal", "scrollbar", "when", "line", "numbers", "be", "showing", "so", "line", "numbers", "be", "not", "display", "next", "to", "the", "horizontal", "scrollbar", "NUMBER", "linenumbers", "NUMBER", "LINK", "b", "NUMBER", "ad", "NUMBER", "e", "NUMBER", "NUMBER", "c", "NUMBER", "NUMBER", "b", "NUMBER", "fbb", "NUMBER", "e", "NUMBER", "png", "Problem", "Intent", "mark", "selection", "addon", "be", "slow", "NUMBER", "Step", "by", "step", "repro", "Go", "to", "LINK", "Copy", "paste", "lines", "to", "get", "about", "NUMBER", "k", "lines", "total", "Select", "first", "NUMBER", "k", "lines", "Try", "to", "extend", "selection", "with", "Shift", "PageDown", "Shift", "ArrowDown", "Expected", "works", "as", "fast", "as", "codemirror", "s", "selection", "without", "this", "add", "on", "Actual", "rendering", "lags", "The", "problem", "escalates", "quickly", "if", "the", "selected", "text", "has", "syntax", "highlight", "In", "my", "case", "things", "get", "slow", "after", "selecting", "first", "NUMBER", "lines", "of", "js", "code", "NUMBER", "It", "looks", "like", "the", "problem", "be", "in", "markText", "function", "the", "addon", "remarks", "text", "on", "every", "selection", "change", "NUMBER", "Is", "it", "possible", "to", "update", "mark", "instead", "of", "recreation", "This", "be", "well", "know", "and", "do", "not", "have", "an", "obvious", "solution", "except", "simply", "not", "use", "the", "addon", "NUMBER", "I", "accepted", "the", "code", "as", "a", "contribution", "which", "might", "not", "have", "be", "a", "good", "idea", "since", "it", "be", "write", "in", "a", "very", "naive", "way", "NUMBER", "I", "be", "not", "support", "it", "though", "NUMBER", "Updating", "markers", "be", "not", "something", "I", "want", "to", "add", "since", "it", "s", "messy", "but", "one", "avenue", "you", "might", "try", "be", "to", "make", "the", "plugin", "smarter", "having", "it", "create", "its", "markers", "in", "NUMBER", "line", "blocks", "for", "example", "so", "that", "you", "only", "have", "to", "update", "small", "ranges", "when", "the", "edges", "of", "the", "selection", "change", "NUMBER", "Thanks", "for", "the", "reply", "I", "ll", "give", "it", "a", "shot", "NUMBER", "In", "some", "cases", "it", "s", "more", "convenient", "to", "access", "CodeMirror", "from", "the", "instance", "itself", "but", "the", "way", "prototype", "was", "defined", "made", "editor", "NUMBER", "codemirror", "be", "an", "Object", "instead", "NUMBER", "Javascript", "indentation", "works", "fine", "except", "at", "one", "place", "NUMBER", "When", "I", "hit", "enter", "when", "a", "cursor", "be", "before", "a", "closing", "bracket", "indentation", "do", "not", "work", "NUMBER", "function", "myFunction", "The", "cursor", "stays", "right", "before", "the", "closing", "bracket", "NUMBER", "You", "replied", "for", "this", "as", "follows", "This", "be", "intentional", "NUMBER", "People", "tend", "to", "align", "their", "closing", "brackets", "with", "the", "line", "that", "opened", "the", "bracket", "NUMBER", "I", "d", "be", "okay", "with", "a", "pull", "request", "that", "makes", "this", "configurable", "on", "the", "mode", "level", "NUMBER", "But", "I", "still", "want", "indentation", "to", "work", "as", "follows", "When", "user", "hits", "enter", "it", "should", "create", "an", "extra", "line", "between", "the", "brackets", "and", "automatically", "indent", "NUMBER", "Please", "help", "NUMBER", "Firstly", "I", "d", "appreciate", "if", "you", "stopped", "open", "issue", "NUMBER", "You", "can", "comment", "on", "a", "close", "issue", "and", "the", "proper", "avenue", "for", "support", "request", "in", "the", "mailing", "list", "NUMBER", "But", "I", "still", "want", "indentation", "to", "work", "as", "follows", "CodeMirror", "be", "configurable", "NUMBER", "You", "can", "write", "code", "to", "make", "it", "do", "that", "NUMBER", "The", "default", "behavior", "be", "going", "to", "stay", "the", "way", "it", "be", "NUMBER", "Thanks", "NUMBER", "I", "did", "not", "know", "that", "I", "can", "comment", "on", "a", "close", "issue", "NUMBER", "Actually", "I", "was", "not", "ask", "to", "change", "your", "javascript", "NUMBER", "js", "code", "NUMBER", "I", "want", "to", "know", "which", "code", "should", "I", "modify", "to", "acheive", "the", "following", "scenario", "NUMBER", "The", "cursor", "be", "between", "the", "open", "and", "closing", "bracket", "cursor", "NUMBER", "When", "user", "hits", "enter", "NUMBER", "Cursor", "should", "be", "indented", "on", "a", "new", "line", "NUMBER", "And", "the", "Closing", "bracket", "should", "go", "to", "the", "next", "line", "and", "should", "be", "aligned", "accordingly", "NUMBER", "Please", "let", "me", "know", "NUMBER", "I", "m", "new", "to", "CodeMirror", "and", "tried", "to", "look", "in", "the", "documentation", "but", "find", "nothing", "NUMBER", "Is", "there", "a", "way", "to", "set", "extra", "space", "when", "the", "cursor", "reach", "the", "edge", "of", "window", "like", "shown", "in", "the", "screenshot", "Screen", "Shot", "NUMBER", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "NUMBER", "AM", "LINK", "ab", "NUMBER", "d", "NUMBER", "e", "NUMBER", "NUMBER", "b", "NUMBER", "e", "NUMBER", "f", "NUMBER", "c", "NUMBER", "ea", "NUMBER", "png", "There", "wasn", "t", "but", "it", "was", "trivial", "to", "add", "NUMBER", "See", "NUMBER", "aacbe", "NUMBER", "a", "NUMBER", "fb", "NUMBER", "aff", "NUMBER", "c", "NUMBER", "ee", "NUMBER", "ce", "NUMBER", "fc", "NUMBER", "marijnh", "tried", "it", "NUMBER", "Doesn", "t", "work", "NUMBER", "steverandy", "What", "browser", "and", "operate", "system", "Using", "latest", "chrome", "on", "OS", "X", "NUMBER", "steverandy", "If", "you", "want", "further", "help", "on", "this", "try", "to", "be", "somewhat", "more", "helpful", "NUMBER", "What", "exactly", "did", "you", "try", "Did", "you", "set", "the", "option", "How", "did", "you", "test", "it", "Yes", "I", "did", "NUMBER", "Below", "be", "the", "snippet", "NUMBER", "editor", "CodeMirror", "editor", "NUMBER", "mode", "markdown", "lineNumbers", "false", "lineWrapping", "true", "width", "NUMBER", "height", "NUMBER", "minHeight", "NUMBER", "saveFunction", "saveDebounced", "cursorScrollMargin", "NUMBER", "I", "recorded", "the", "screen", "to", "better", "show", "what", "happened", "NUMBER", "LINK", "Actually", "there", "be", "still", "space", "to", "scroll", "NUMBER", "It", "s", "just", "that", "once", "the", "cursor", "hit", "the", "edge", "of", "visible", "view", "there", "be", "no", "some", "kind", "of", "padding", "bottom", "NUMBER", "I", "tried", "the", "trick", "with", "CSS", "that", "you", "mention", "above", "but", "it", "didn", "t", "work", "NUMBER", "Sass", "mode", "LINK", "Test", "sass", "body", "div", "first", "child", "div", "last", "child", "The", "mode", "highlights", "first", "child", "as", "a", "pseudo", "element", "selector", "but", "not", "last", "child", "NUMBER", "The", "tokenizer", "only", "matches", "a", "very", "limited", "set", "of", "pseudo", "elements", "pseudo", "classes", "NUMBER", "Compare", "to", "the", "LESS", "mode", "s", "regex", "for", "example", "NUMBER", "Even", "if", "the", "tokenization", "isn", "t", "made", "generic", "there", "be", "room", "for", "improvement", "for", "add", "some", "common", "selectors", "last", "child", "nth", "child", "n", "nth", "of", "type", "n", "only", "child", "NUMBER", "For", "some", "good", "test", "cases", "see", "LINK", "overview", "LINK", "_test", "NUMBER", "rb", "L", "NUMBER", "rubymaverick", "Want", "to", "take", "a", "look", "at", "this", "It", "indeed", "seems", "that", "the", "list", "should", "either", "be", "more", "exhaustive", "or", "we", "should", "tokenize", "everything", "that", "follows", "a", "colon", "as", "a", "pseudo", "class", "as", "the", "CSS", "mode", "do", "There", "be", "selection", "too", "NUMBER", "There", "be", "any", "number", "of", "vendor", "specific", "pseudo", "elements", "for", "experimental", "or", "internal", "features", "NUMBER", "Things", "like", "webkit", "search", "decoration", "webkit", "input", "placeholder", "etc", "NUMBER", "The", "shadow", "DOM", "lets", "you", "designate", "an", "element", "as", "a", "custom", "pseudo", "element", "by", "use", "the", "pseudo", "attribute", "NUMBER", "Doing", "so", "creates", "an", "association", "with", "that", "element", "in", "the", "shadow", "tree", "and", "lets", "you", "access", "it", "via", "CSS", "selectors", "NUMBER", "So", "we", "should", "just", "remove", "the", "fix", "list", "of", "pseudo", "classes", "and", "elements", "and", "make", "the", "mode", "parse", "anything", "after", "the", "colon", "or", "double", "colon", "as", "a", "pseudo", "NUMBER", "It", "be", "also", "surprising", "that", "the", "modes", "have", "fix", "lists", "of", "tag", "names", "NUMBER", "As", "HTML", "evolves", "so", "will", "the", "tags", "like", "TAG", "which", "be", "miss", "from", "the", "list", "NUMBER", "You", "can", "also", "make", "up", "your", "own", "tags", "in", "XML", "and", "style", "them", "with", "CSS", "and", "those", "wouldn", "t", "highlight", "correctly", "NUMBER", "It", "appears", "the", "double", "colon", "which", "be", "allow", "and", "recommended", "by", "CSS", "NUMBER", "for", "pseudo", "elements", "to", "distinguish", "from", "pseudo", "classes", "be", "not", "parsed", "correctly", "either", "NUMBER", "Only", "the", "single", "colon", "seems", "to", "be", "support", "NUMBER", "The", "code", "confuses", "pseudo", "elements", "and", "pseudo", "classes", "by", "mixing", "the", "two", "in", "a", "pseudoElements", "variable", "NUMBER", "That", "name", "should", "be", "generic", "if", "it", "has", "both", "types", "in", "the", "list", "NUMBER", "As", "mention", "above", "the", "list", "should", "go", "and", "be", "replaced", "by", "parsing", "NUMBER", "So", "double", "or", "single", "colon", "should", "be", "support", "NUMBER", "I", "unfortunately", "don", "t", "have", "time", "to", "look", "at", "this", "right", "now", "but", "xeenon", "feel", "free", "to", "add", "it", "in", "there", "On", "Sun", "Apr", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Timothy", "Hatcher", "notifications", "github", "NUMBER", "comwrote", "It", "appears", "the", "double", "colon", "which", "be", "allow", "and", "recommended", "by", "CSS", "NUMBER", "for", "pseudo", "elements", "to", "distinguish", "from", "pseudo", "classes", "be", "not", "parsed", "correctly", "either", "NUMBER", "Only", "the", "single", "colon", "seems", "to", "be", "support", "NUMBER", "The", "code", "confuses", "pseudo", "elements", "and", "pseudo", "classes", "by", "mixing", "the", "two", "in", "a", "pseudoElements", "variable", "NUMBER", "THat", "name", "should", "be", "generic", "if", "it", "has", "both", "types", "in", "the", "list", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "NUMBER", "I", "wish", "you", "way", "more", "than", "luck", "DFW", "I", "might", "take", "a", "look", "if", "I", "get", "time", "NUMBER", "I", "also", "file", "a", "similar", "issue", "as", "NUMBER", "I", "think", "this", "was", "fix", "by", "c", "NUMBER", "f", "NUMBER", "dc", "NUMBER", "d", "NUMBER", "d", "NUMBER", "b", "NUMBER", "ed", "NUMBER", "When", "editing", "a", "longer", "css", "part", "of", "the", "text", "sometimes", "disappears", "NUMBER", "Error", "from", "console", "Timestamp", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Error", "TypeError", "cur", "be", "null", "Source", "File", "LINK", "Line", "NUMBER", "source", "line", "be", "while", "cur", "NUMBER", "lineObj", "line", "cur", "rm", "cur", "I", "have", "test", "in", "FF", "NUMBER", "nigtly", "build", "but", "have", "a", "report", "from", "FF", "NUMBER", "Steps", "to", "reporuce", "open", "LINK", "scroll", "to", "bottom", "or", "almost", "bottom", "type", "randomly", "some", "characters", "may", "be", "needed", "to", "repeat", "several", "times", "I", "ve", "opened", "LINK", "_bug", "NUMBER", "cgi", "id", "NUMBER", "for", "this", "NUMBER", "Fixed", "in", "Firefox", "NUMBER", "thanks", "for", "your", "work", "NUMBER", "Great", "At", "CodeMirror", "NUMBER", "c", "NUMBER", "I", "m", "seeing", "unexpect", "tokenization", "of", "both", "javascript", "var", "o", "a", "NUMBER", "b", "c", "NUMBER", "var", "o", "a", "NUMBER", "b", "function", "c", "NUMBER", "The", "seems", "to", "break", "tokenization", "later", "on", "NUMBER", "When", "tokenizing", "the", "function", "the", "lexical", "stack", "doesn", "t", "adjust", "as", "expected", "and", "things", "break", "when", "the", "first", "be", "reached", "NUMBER", "Reduction", "html", "TAG", "TAG", "TAG", "TAG", "TAG", "Create", "editor", "and", "initialize", "with", "test", "string", "NUMBER", "var", "cm", "CodeMirror", "NUMBER", "fromTextArea", "document", "NUMBER", "getElementById", "code", "var", "str", "var", "o", "a", "NUMBER", "b", "function", "c", "NUMBER", "var", "o", "a", "NUMBER", "b", "function", "c", "NUMBER", "NUMBER", "join", "n", "cm", "NUMBER", "setValue", "str", "cm", "NUMBER", "refresh", "Populate", "pre", "output", "with", "debug", "output", "NUMBER", "Same", "as", "Issue", "NUMBER", "TAG", "Result", "issue", "LINK", "a", "NUMBER", "aa", "NUMBER", "e", "NUMBER", "NUMBER", "e", "NUMBER", "d", "NUMBER", "a", "NUMBER", "e", "NUMBER", "png", "On", "a", "relate", "note", "NUMBER", "It", "would", "also", "be", "good", "to", "test", "this", "at", "the", "same", "time", "javascript", "if", "NUMBER", "NUMBER", "true", "It", "be", "similar", "in", "nature", "a", "comma", "expression", "starting", "with", "an", "operator", "and", "the", "expected", "closing", "character", "happens", "before", "the", "real", "close", "be", "expected", "NUMBER", "Currently", "it", "works", "as", "expected", "NUMBER", "In", "ToT", "the", "original", "cases", "were", "fix", "but", "the", "extra", "case", "noted", "in", "the", "comments", "broke", "javascript", "if", "NUMBER", "NUMBER", "true", "Fixing", "the", "original", "issue", "was", "more", "important", "then", "this", "secondary", "issue", "NUMBER", "setDragImage", "was", "disabled", "for", "safari", "to", "aviod", "crash", "browser", "NUMBER", "By", "setting", "datauri", "of", "a", "transparent", "gif", "as", "src", "for", "the", "img", "the", "problem", "be", "avoided", "and", "user", "no", "longer", "sees", "entire", "editor", "be", "dragged", "instead", "of", "text", "selection", "NUMBER", "Now", "there", "be", "no", "indication", "of", "something", "be", "dragged", "but", "still", "an", "improvement", "NUMBER", "fix", "NUMBER", "The", "crash", "still", "occur", "for", "me", "with", "your", "patch", "on", "Safari", "NUMBER", "That", "be", "really", "strange", "It", "works", "for", "me", "both", "in", "an", "update", "complete", "NUMBER", "html", "demo", "and", "our", "own", "solution", "in", "Safari", "NUMBER", "NUMBER", "NUMBER", "Here", "be", "the", "jsbin", "experiment", "LINK", "Does", "this", "work", "for", "you", "The", "jsbin", "demo", "works", "in", "that", "I", "can", "drag", "the", "green", "bar", "without", "crash", "NUMBER", "But", "if", "I", "apply", "your", "patch", "hard", "reload", "CodeMirror", "in", "safari", "and", "then", "drag", "it", "still", "segfaults", "NUMBER", "I", "m", "puzzled", "NUMBER", "Here", "be", "a", "jsbin", "with", "the", "exact", "copy", "of", "codemirror", "NUMBER", "js", "I", "commit", "NUMBER", "LINK", "It", "works", "as", "expected", "for", "me", "NUMBER", "Does", "it", "crash", "for", "you", "Yes", "it", "do", "crash", "so", "that", "really", "rules", "out", "a", "caching", "problem", "NUMBER", "Odd", "NUMBER", "If", "I", "change", "the", "src", "to", "a", "regular", "image", "url", "it", "still", "crashes", "NUMBER", "I", "think", "the", "problem", "might", "be", "that", "the", "image", "hasn", "t", "be", "initialized", "yet", "NUMBER", "If", "I", "put", "an", "image", "on", "the", "page", "and", "use", "that", "setDragImage", "works", "NUMBER", "Strange", "NUMBER", "I", "did", "start", "off", "by", "use", "jsbin", "s", "logo", "image", "and", "when", "that", "worked", "tried", "the", "datauri", "mini", "gif", "to", "avoid", "add", "an", "image", "resource", "to", "codemirror", "NUMBER", "scratchinghead", "I", "get", "osX", "NUMBER", "Safari", "NUMBER", "NUMBER", "NUMBER", "You", "Apparently", "the", "image", "has", "to", "be", "in", "the", "DOM", "for", "my", "Safari", "not", "to", "crash", "NUMBER", "Could", "you", "verify", "whether", "the", "attached", "patch", "works", "for", "you", "Thumbs", "up", "NUMBER", "Another", "one", "off", "my", "list", "NUMBER", "Thanks", "Bad", "news", "I", "don", "t", "know", "what", "happened", "but", "on", "the", "same", "Mac", "with", "the", "same", "version", "of", "Safari", "I", "previously", "test", "on", "both", "your", "fix", "mine", "crash", "most", "of", "the", "time", "but", "not", "always", "NUMBER", "The", "only", "version", "that", "so", "far", "never", "crashed", "be", "LINK", "on", "the", "other", "hand", "you", "mention", "that", "it", "indeed", "crashes", "for", "you", "NUMBER", "Maybe", "the", "fix", "should", "be", "revert", "Ugly", "be", "still", "better", "than", "crash", "NUMBER", "Oh", "that", "s", "too", "bad", "NUMBER", "Are", "you", "NUMBER", "sure", "that", "you", "be", "test", "with", "the", "current", "code", "when", "the", "crash", "happens", "If", "yes", "then", "indeed", "I", "guess", "we", "ll", "disable", "the", "dragImage", "call", "on", "safari", "again", "NUMBER", "Yesterday", "after", "having", "cleared", "all", "caches", "it", "was", "crash", "both", "locally", "and", "on", "CM", "demo", "but", "I", "was", "too", "busy", "to", "investigate", "NUMBER", "Today", "all", "lights", "be", "green", "NUMBER", "Let", "s", "not", "roll", "back", "just", "yet", "but", "I", "will", "be", "test", "this", "now", "on", "regular", "basis", "NUMBER", "Also", "sent", "report", "to", "apple", "every", "time", "Safari", "crashed", "NUMBER", "maybe", "they", "can", "see", "something", "and", "fix", "one", "day", "NUMBER", "dreaming", "Okay", "I", "m", "going", "to", "assume", "this", "be", "fine", "until", "I", "hear", "otherwise", "NUMBER", "Hi", "Still", "crashes", "for", "me", "NUMBER", "I", "m", "use", "Sfari", "NUMBER", "NUMBER", "on", "Mountain", "Lion", "NUMBER", "OS", "Mac", "OS", "Browser", "Safari", "NUMBER", "CodeMirror", "NUMBER", "Url", "LINK", "to", "reproduce", "NUMBER", "select", "some", "text", "NUMBER", "drag", "the", "selected", "text", "During", "the", "dragging", "the", "whole", "editor", "NUMBER", "CodeMirror", "scroll", "will", "be", "moving", "with", "the", "mouse", "NUMBER", "Once", "drop", "only", "the", "selected", "text", "be", "re", "positioned", "as", "expected", "NUMBER", "See", "NUMBER", "NUMBER", "The", "trick", "we", "use", "to", "disable", "such", "behavior", "on", "other", "browsers", "somehow", "causes", "Safari", "to", "segfault", "NUMBER", "Bad", "Safari", "NUMBER", "If", "you", "want", "to", "spend", "time", "on", "looking", "for", "a", "workaround", "that", "d", "be", "much", "appreciated", "NUMBER", "Test", "case", "that", "demonstrates", "the", "problem", "at", "LINK", "In", "some", "cases", "it", "happens", "that", "text", "gets", "inserted", "somewhere", "else", "in", "the", "string", "than", "where", "the", "cursor", "be", "display", "NUMBER", "I", "don", "t", "know", "exactly", "which", "conditions", "be", "required", "for", "this", "to", "happen", "but", "I", "get", "it", "with", "long", "non", "ascii", "strings", "with", "line", "wrapping", "turned", "on", "in", "CodeMirror", "NUMBER", "See", "the", "bug", "in", "action", "in", "the", "linked", "document", "NUMBER", "Indeed", "NUMBER", "I", "can", "only", "reproduce", "this", "on", "Webkit", "Opera", "and", "Firefox", "seem", "to", "behave", "more", "sanely", "NUMBER", "What", "happens", "be", "that", "Webkit", "for", "a", "reason", "I", "have", "yet", "to", "figure", "out", "wraps", "the", "visible", "text", "differently", "from", "the", "text", "in", "its", "hidden", "measurement", "node", "which", "it", "uses", "to", "get", "the", "position", "of", "individual", "characters", "for", "cursor", "drawing", "and", "click", "handle", "NUMBER", "This", "appears", "to", "be", "a", "rounding", "bug", "in", "Webkit", "the", "text", "in", "the", "measurement", "div", "be", "split", "into", "single", "character", "spans", "which", "for", "some", "reason", "throw", "off", "the", "computation", "of", "whether", "a", "word", "fits", "on", "a", "line", "but", "only", "for", "non", "ascii", "text", "NUMBER", "I", "ve", "also", "seen", "this", "but", "I", "have", "find", "a", "shorter", "example", "so", "I", "thought", "I", "d", "record", "it", "here", "in", "case", "it", "helps", "NUMBER", "I", "m", "not", "sure", "whether", "it", "should", "go", "here", "or", "in", "NUMBER", "both", "seem", "relevant", "NUMBER", "Paste", "the", "following", "line", "Here", "be", "a", "line", "with", "a", "long", "word", "at", "the", "end", "aaa", "aaa", "on", "a", "new", "line", "in", "LINK", "or", "any", "other", "demo", "with", "lineWrapping", "enable", "NUMBER", "Note", "that", "the", "word", "at", "the", "end", "has", "an", "ellipsis", "character", "U", "NUMBER", "in", "it", "NUMBER", "Resize", "until", "the", "second", "aaa", "no", "longer", "fits", "on", "the", "line", "NUMBER", "In", "FF", "NUMBER", "WinXP", "and", "IE", "NUMBER", "WinXP", "wrapping", "and", "cursor", "movement", "be", "as", "expected", "NUMBER", "In", "WebKit", "Safari", "NUMBER", "Chrome", "NUMBER", "Linux", "the", "second", "aaa", "appears", "to", "wrap", "onto", "the", "second", "line", "but", "the", "cursor", "behaves", "as", "though", "the", "whole", "aaa", "aaa", "has", "wrapped", "onto", "the", "second", "line", "for", "both", "insertion", "and", "selection", "NUMBER", "This", "be", "probably", "fix", "in", "recent", "Webkit", "Blink", "version", "NUMBER", "Add", "another", "comment", "if", "you", "can", "still", "reproduce", "NUMBER", "Steps", "to", "reproduce", "NUMBER", "Open", "LINK", "in", "IE", "NUMBER", "NUMBER", "Left", "click", "in", "the", "blank", "space", "to", "the", "right", "of", "Markdown", "Basics", "to", "place", "the", "cursor", "at", "the", "end", "of", "line", "NUMBER", "NUMBER", "Right", "click", "in", "the", "same", "spot", "Expected", "results", "The", "browser", "s", "text", "cursor", "should", "not", "be", "visible", "only", "CodeMirror", "s", "text", "cursor", "should", "NUMBER", "Actual", "results", "The", "browser", "s", "text", "cursor", "appears", "under", "the", "mouse", "cursor", "and", "CodeMirror", "s", "text", "cursor", "appears", "after", "Basics", "NUMBER", "IE", "NUMBER", "appears", "to", "freeze", "the", "JavaScript", "execution", "for", "as", "long", "as", "the", "context", "menu", "be", "visible", "NUMBER", "This", "means", "that", "the", "trick", "that", "kicks", "in", "on", "other", "browsers", "where", "we", "hide", "the", "textarea", "again", "after", "the", "menu", "pops", "up", "doesn", "t", "work", "here", "NUMBER", "IE", "also", "doesn", "t", "apply", "opacity", "styling", "to", "the", "cursor", "so", "that", "blocks", "off", "another", "avenue", "for", "hiding", "it", "NUMBER", "If", "you", "have", "any", "other", "ideas", "for", "work", "around", "this", "I", "d", "love", "to", "hear", "them", "NUMBER", "vim", "mode", "currently", "lacks", "Ctrl", "v", "style", "column", "select", "NUMBER", "Is", "this", "something", "that", "codemirror", "be", "capable", "of", "at", "the", "moment", "Is", "it", "blocked", "by", "issue", "NUMBER", "This", "isn", "t", "possible", "with", "the", "current", "build", "in", "selection", "model", "NUMBER", "It", "might", "be", "workable", "for", "the", "vim", "mode", "to", "keep", "its", "own", "selection", "but", "that", "s", "probably", "going", "to", "get", "messy", "NUMBER", "Smarty", "source", "code", "isn", "t", "highlight", "correctly", "NUMBER", "TAG", "result", "math", "equation", "x", "y", "x", "NUMBER", "y", "NUMBER", "TAG", "The", "open", "brace", "of", "the", "math", "function", "and", "the", "function", "name", "itself", "be", "shown", "in", "blue", "like", "attributes", "but", "they", "should", "be", "shown", "in", "green", "NUMBER", "Additionally", "the", "second", "closing", "brace", "be", "display", "in", "black", "but", "should", "be", "green", "as", "well", "NUMBER", "Without", "assignment", "the", "highlight", "be", "correct", "TAG", "math", "equation", "x", "y", "x", "NUMBER", "y", "NUMBER", "TAG", "benkeen", "care", "to", "take", "a", "look", "Sure", "My", "time", "s", "not", "great", "these", "days", "but", "I", "ll", "see", "if", "I", "can", "figure", "something", "out", "NUMBER", "Ben", "Hi", "Develooper", "I", "m", "afraid", "the", "Smarty", "mode", "actually", "only", "support", "Smarty", "NUMBER", "not", "NUMBER", "Smarty", "NUMBER", "contains", "a", "number", "of", "new", "short", "cuts", "and", "syntactical", "change", "over", "Smarty", "NUMBER", "such", "as", "the", "problem", "you", "posted", "NUMBER", "When", "I", "get", "a", "little", "more", "time", "I", "ll", "investigate", "all", "the", "change", "that", "have", "be", "made", "and", "update", "the", "Codemirror", "mode", "NUMBER", "Sorry", "about", "that", "Ben", "Why", "was", "this", "issue", "close", "It", "s", "still", "not", "fix", "NUMBER", "In", "that", "case", "it", "would", "make", "sense", "if", "you", "write", "on", "codemirror", "NUMBER", "net", "at", "Supported", "modes", "that", "it", "only", "support", "Smarty", "NUMBER", "syntax", "NUMBER", "Currently", "it", "looks", "like", "CodeMirror", "would", "support", "all", "Smarty", "version", "including", "Smarty", "NUMBER", "syntax", "NUMBER", "Hi", "Develooper", "I", "ll", "take", "a", "look", "at", "this", "and", "see", "if", "I", "can", "add", "in", "support", "for", "Smarty", "NUMBER", "Keep", "you", "posted", "Ben", "Hi", "Develooper", "NUMBER", "I", "update", "the", "mode", "tonight", "to", "allow", "for", "the", "new", "Smarty", "NUMBER", "syntax", "NUMBER", "Pending", "pull", "request", "but", "you", "can", "see", "it", "here", "LINK", "All", "the", "best", "Ben", "Hello", "Ben", "thank", "you", "that", "s", "wonderful", "I", "ve", "just", "find", "a", "problem", "with", "Smarty", "comments", "NUMBER", "May", "I", "post", "them", "here", "a", "NUMBER", "set", "a", "to", "NUMBER", "_", "b", "NUMBER", "_", "set", "b", "to", "NUMBER", "_", "c", "NUMBER", "_", "set", "c", "to", "NUMBER", "_", "d", "NUMBER", "_", "set", "d", "to", "NUMBER", "_", "e", "NUMBER", "_", "set", "e", "to", "NUMBER", "_", "f", "NUMBER", "_", "set", "f", "to", "NUMBER", "_", "g", "NUMBER", "_", "set", "g", "to", "NUMBER", "Example", "Code", "If", "you", "copy", "it", "into", "your", "Smarty", "NUMBER", "box", "it", "looks", "very", "colorful", "but", "it", "shouldn", "t", "NUMBER", "It", "seems", "like", "the", "content", "of", "comments", "get", "parsed", "like", "normal", "code", "NUMBER", "EDIT", "It", "seems", "like", "the", "comment", "editor", "on", "github", "be", "buggy", "too", "NUMBER", "it", "remove", "the", "at", "the", "beginning", "and", "end", "of", "the", "Smarty", "comment", "NUMBER", "Only", "the", "first", "open", "comment", "be", "shown", "corrently", "here", "NUMBER", "Hey", "Develooper", "NUMBER", "Ah", "Glad", "you", "caught", "this", "NUMBER", "I", "ll", "check", "it", "out", "tomorrow", "night", "NUMBER", "Thanks", "EDIT", "Huh", "NUMBER", "actually", "isn", "t", "this", "correct", "If", "the", "comment", "isn", "t", "properly", "close", "it", "will", "all", "appear", "as", "a", "comment", "until", "the", "closing", "NUMBER", "Feel", "free", "to", "email", "me", "it", "if", "github", "s", "mutilating", "the", "code", "NUMBER", "ben", "NUMBER", "keen", "gmail", "NUMBER", "com", "Ben", "Currently", "they", "be", "simply", "set", "to", "indentation", "zero", "by", "most", "of", "the", "modes", "NUMBER", "It", "would", "be", "nice", "if", "TAG", "gives", "you", "the", "indentation", "of", "the", "line", "before", "and", "block", "reindent", "_preserves_", "the", "current", "indentation", "NUMBER", "So", "that", "Callbacks", "can", "be", "registered", "multiple", "times", "so", "that", "you", "can", "have", "modular", "code", "acting", "on", "a", "CodeMirror", "instance", "Key", "mouse", "events", "can", "be", "easily", "simulated", "by", "the", "testsuite", "We", "can", "start", "abstracting", "over", "the", "document", "data", "structure", "to", "pave", "the", "way", "for", "multiple", "views", "per", "document", "and", "multiple", "documents", "per", "view", "situations", "NUMBER", "I", "haven", "t", "decided", "just", "which", "model", "to", "use", "for", "the", "events", "NUMBER", "Suggestions", "welcome", "NUMBER", "What", "would", "you", "use", "a", "contextMenu", "event", "for", "it", "s", "not", "like", "you", "d", "actually", "be", "able", "to", "influence", "the", "menu", "Partially", "do", "in", "NUMBER", "fe", "NUMBER", "ce", "NUMBER", "e", "NUMBER", "c", "NUMBER", "b", "NUMBER", "c", "NUMBER", "bc", "NUMBER", "a", "NUMBER", "bc", "NUMBER", "f", "NUMBER", "b", "NUMBER", "and", "NUMBER", "e", "NUMBER", "c", "NUMBER", "db", "NUMBER", "be", "NUMBER", "e", "NUMBER", "d", "NUMBER", "ae", "NUMBER", "e", "NUMBER", "be", "NUMBER", "fb", "I", "gave", "up", "on", "unifying", "DOM", "and", "other", "events", "NUMBER", "Keeping", "track", "of", "DOM", "event", "handlers", "in", "a", "way", "that", "doesn", "t", "leak", "or", "requires", "manually", "unregistering", "every", "single", "one", "appears", "to", "be", "hard", "NUMBER", "If", "you", "propose", "an", "API", "I", "ll", "be", "happy", "to", "integrate", "it", "NUMBER", "Adding", "events", "be", "very", "easy", "now", "NUMBER", "But", "do", "keep", "in", "mind", "that", "CodeMirror", "events", "be", "an", "after", "the", "fact", "thing", "their", "handlers", "be", "call", "when", "something", "has", "already", "taken", "place", "and", "usually", "can", "t", "influence", "that", "thing", "NUMBER", "In", "the", "case", "of", "a", "context", "menu", "it", "depends", "entirely", "on", "the", "API", "you", "re", "use", "to", "influence", "that", "menu", "whether", "an", "event", "fired", "on", "a", "right", "mouse", "click", "will", "help", "NUMBER", "Will", "this", "only", "be", "part", "of", "version", "NUMBER", "I", "d", "love", "to", "be", "able", "to", "register", "event", "handlers", "such", "as", "onGutterClick", "after", "the", "instance", "has", "be", "inited", "NUMBER", "For", "now", "I", "ve", "patched", "the", "source", "code", "with", "a", "simple", "onGutterClick", "function", "func", "options", "NUMBER", "onGutterClick", "func", "but", "better", "to", "have", "it", "support", "in", "a", "more", "natural", "way", "NUMBER", "There", "s", "already", "editor", "NUMBER", "setOption", "onGutterClick", "value", "NUMBER", "But", "yes", "the", "on", "method", "will", "be", "only", "in", "v", "NUMBER", "It", "shouldn", "t", "be", "too", "long", "until", "v", "NUMBER", "becomes", "stable", "though", "NUMBER", "Cool", "that", "ll", "do", "for", "now", "NUMBER", "Am", "I", "assuming", "correctly", "that", "on", "allows", "attaching", "multiple", "handlers", "and", "controls", "event", "propagation", "Usually", "i", "NUMBER", "e", "NUMBER", "jQuery", "you", "can", "return", "false", "in", "an", "event", "handler", "to", "prevent", "the", "rest", "of", "the", "handlers", "from", "executing", "NUMBER", "There", "be", "no", "event", "propagation", "in", "CodeMirror", "events", "they", "always", "fire", "on", "a", "specific", "object", "NUMBER", "And", "there", "be", "no", "way", "to", "prevent", "other", "handlers", "from", "run", "this", "be", "intentional", "NUMBER", "CodeMirror", "events", "be", "notifications", "they", "don", "t", "provide", "you", "with", "a", "way", "to", "cancel", "the", "event", "from", "happening", "or", "influence", "it", "somehow", "they", "just", "tell", "you", "that", "something", "happened", "NUMBER", "In", "that", "context", "it", "rarely", "makes", "sense", "to", "prevent", "other", "subcomponent", "from", "be", "notified", "about", "the", "event", "NUMBER", "This", "pull", "request", "pass", "LINK", "ci", "NUMBER", "org", "marijnh", "CodeMirror", "build", "NUMBER", "merge", "NUMBER", "deb", "NUMBER", "into", "NUMBER", "NUMBER", "Thanks", "merge", "NUMBER", "I", "ve", "add", "some", "logic", "to", "the", "linter", "which", "be", "run", "as", "part", "of", "the", "test", "suite", "to", "complain", "when", "it", "finds", "a", "BOM", "NUMBER", "See", "NUMBER", "d", "NUMBER", "adcba", "NUMBER", "a", "NUMBER", "bf", "NUMBER", "ee", "NUMBER", "d", "NUMBER", "ab", "NUMBER", "b", "NUMBER", "f", "NUMBER", "As", "I", "scroll", "horizontally", "gutter", "be", "jumping", "due", "to", "asynchronous", "position", "update", "in", "onScrollMain", "NUMBER", "It", "sounds", "like", "horizontal", "scrolling", "needs", "treatment", "similar", "to", "the", "vertical", "one", "i", "NUMBER", "e", "NUMBER", "make", "scrollbar", "scrollbarInner", "fake", "horizontal", "dimension", "as", "well", "NUMBER", "I", "do", "realize", "it", "might", "add", "come", "complexity", "but", "I", "was", "wondering", "what", "your", "take", "on", "it", "was", "Would", "you", "be", "willing", "to", "implement", "it", "Would", "you", "be", "open", "to", "get", "a", "pull", "request", "Any", "complexities", "involved", "that", "you", "know", "of", "fixedGutter", "be", "most", "likely", "on", "its", "way", "out", "NUMBER", "As", "you", "notice", "it", "be", "flaky", "jittery", "and", "in", "the", "new", "gutter", "and", "line", "height", "model", "that", "version", "NUMBER", "will", "use", "there", "s", "no", "efficient", "way", "to", "implement", "it", "NUMBER", "If", "people", "care", "a", "lot", "about", "this", "feature", "I", "could", "implement", "it", "in", "an", "inefficient", "way", "requires", "walking", "N", "nodes", "and", "repositioning", "them", "on", "every", "horizontal", "scroll", "event", "where", "N", "be", "the", "number", "of", "visible", "lines", "and", "would", "still", "be", "jittery", "NUMBER", "But", "personally", "I", "m", "not", "too", "fond", "of", "the", "feature", "NUMBER", "Where", "do", "I", "learn", "more", "about", "v", "NUMBER", "its", "features", "and", "milestones", "I", "be", "ask", "since", "I", "be", "assessing", "the", "potential", "use", "of", "CodeMirror", "as", "a", "part", "of", "the", "WebKit", "Web", "Inspector", "NUMBER", "We", "be", "use", "fix", "gutter", "in", "the", "present", "editor", "and", "would", "not", "want", "to", "change", "the", "model", "NUMBER", "Actually", "to", "make", "sure", "I", "understand", "the", "problem", "properly", "NUMBER", "I", "thought", "that", "add", "horizontal", "scroll", "to", "the", "scrollbar", "hiding", "it", "from", "the", "scroller", "and", "adjusting", "gutter", "s", "style", "upon", "onscroll", "delegating", "it", "to", "the", "scroller", "s", "scrollLeft", "would", "solve", "it", "NUMBER", "There", "probably", "be", "complexities", "I", "don", "t", "understand", "NUMBER", "See", "LINK", "topic", "CodeMirror", "mSFsEmhn", "NUMBER", "Cs", "NUMBER", "B", "NUMBER", "NUMBER", "NUMBER", "D", "If", "a", "fix", "gutter", "be", "a", "requirement", "for", "Webkit", "integration", "I", "m", "willing", "to", "take", "that", "seriously", "NUMBER", "The", "main", "problem", "be", "that", "line", "numbers", "need", "to", "be", "vertically", "positioned", "relative", "to", "the", "line", "that", "they", "be", "part", "of", "so", "they", "be", "children", "of", "that", "line", "in", "the", "new", "model", "NUMBER", "To", "have", "a", "moving", "gutter", "they", "d", "have", "to", "be", "horizontally", "positioned", "relative", "to", "that", "gutter", "NUMBER", "I", "know", "of", "no", "way", "to", "obtain", "that", "effect", "in", "HTML", "CSS", "so", "we", "d", "have", "to", "resort", "to", "change", "their", "position", "through", "a", "script", "that", "reacts", "to", "scroll", "events", "NUMBER", "This", "script", "will", "on", "most", "browsers", "only", "run", "_after_", "the", "actual", "scrolling", "took", "place", "so", "you", "ll", "get", "the", "jitter", "you", "notice", "the", "numbers", "first", "move", "then", "snap", "into", "place", "again", "NUMBER", "Oh", "Ok", "I", "see", "NUMBER", "I", "start", "from", "this", "way", "of", "living", "in", "the", "WebKit", "s", "editor", "but", "then", "we", "needed", "to", "make", "gutter", "an", "independent", "div", "to", "the", "left", "from", "the", "main", "area", "we", "sync", "the", "vertical", "offsets", "use", "JS", "NUMBER", "Syncing", "height", "turned", "to", "be", "less", "noticeable", "rows", "don", "t", "change", "their", "height", "too", "often", "NUMBER", "As", "for", "the", "WebKit", "integration", "requirements", "fix", "gutter", "be", "fairly", "important", "to", "us", "primarily", "due", "to", "the", "breakpoint", "markers", "NUMBER", "We", "don", "t", "want", "breakpoints", "to", "get", "behind", "the", "screen", "one", "would", "need", "to", "scroll", "to", "remove", "them", "you", "always", "want", "to", "know", "what", "line", "you", "be", "at", "NUMBER", "We", "don", "t", "have", "line", "wrapping", "and", "even", "if", "we", "did", "it", "would", "be", "turned", "off", "by", "default", "NUMBER", "So", "yes", "it", "be", "important", "for", "our", "use", "cases", "NUMBER", "Tell", "us", "if", "we", "can", "help", "with", "it", "NUMBER", "Thanks", "for", "the", "details", "NUMBER", "The", "main", "motivation", "behind", "positioning", "the", "line", "numbers", "inside", "the", "lines", "that", "they", "belong", "to", "instead", "of", "in", "a", "separate", "gutter", "element", "be", "performance", "repopulating", "the", "whole", "gutter", "every", "time", "something", "change", "be", "quite", "expensive", "in", "the", "current", "codebase", "NUMBER", "But", "I", "guess", "would", "be", "possible", "to", "still", "provide", "this", "model", "in", "version", "NUMBER", "and", "turn", "it", "on", "when", "fixedGutter", "be", "active", "NUMBER", "I", "m", "not", "make", "a", "decision", "on", "this", "right", "now", "but", "I", "ll", "think", "about", "it", "some", "more", "NUMBER", "The", "v", "NUMBER", "branch", "now", "contains", "a", "work", "implementation", "of", "a", "fix", "scrollbar", "that", "even", "handles", "varying", "height", "lines", "NUMBER", "I", "won", "t", "fix", "this", "in", "the", "v", "NUMBER", "series", "too", "invasive", "to", "do", "in", "a", "backwards", "compatible", "way", "NUMBER", "This", "pull", "request", "pass", "LINK", "ci", "NUMBER", "org", "marijnh", "CodeMirror", "NUMBER", "build", "NUMBER", "merge", "NUMBER", "ec", "into", "ed", "NUMBER", "d", "NUMBER", "NUMBER", "Merged", "This", "pull", "request", "pass", "LINK", "ci", "NUMBER", "org", "marijnh", "CodeMirror", "NUMBER", "build", "NUMBER", "merge", "NUMBER", "edd", "NUMBER", "b", "into", "NUMBER", "ac", "NUMBER", "NUMBER", "Cute", "NUMBER", "Merged", "NUMBER", "This", "pull", "request", "pass", "LINK", "ci", "NUMBER", "org", "marijnh", "CodeMirror", "NUMBER", "build", "NUMBER", "merge", "NUMBER", "f", "NUMBER", "into", "NUMBER", "ac", "NUMBER", "NUMBER", "I", "agree", "with", "Pavel", "that", "this", "seems", "needlessly", "obscure", "and", "ultimately", "not", "very", "useful", "NUMBER", "I", "m", "in", "the", "process", "of", "overhauling", "the", "gutter", "system", "but", "I", "think", "I", "ll", "stick", "to", "HTML", "insertion", "as", "the", "way", "to", "add", "widgets", "NUMBER", "It", "would", "be", "useful", "to", "hear", "_why_", "you", "needed", "this", "NUMBER", "How", "would", "I", "go", "about", "change", "modes", "on", "the", "fly", "programatically", "based", "on", "some", "value", "from", "an", "input", "or", "select", "form", "field", "So", "lets", "say", "current", "mode", "be", "javascript", "and", "then", "someone", "selects", "css", "from", "a", "select", "dropdown", "NUMBER", "That", "would", "change", "the", "editor", "s", "mode", "to", "css", "NUMBER", "Not", "really", "an", "issue", "but", "register", "a", "change", "event", "handler", "on", "your", "dropdown", "and", "when", "it", "fires", "call", "NUMBER", "setOption", "mode", "NUMBER", "on", "your", "editor", "instance", "with", "the", "right", "mode", "name", "object", "or", "MIME", "type", "NUMBER", "Look", "at", "the", "Lazy", "Mode", "Loading", "LINK", "ya", "thanks", "I", "already", "get", "it", "sorted", "with", "setOption", "hours", "ago", "Thanks", "NUMBER", "I", "had", "those", "in", "there", "because", "of", "the", "idea", "that", "accessing", "non", "exist", "properties", "was", "a", "performance", "hit", "NUMBER", "At", "one", "point", "Firefox", "s", "precursor", "of", "strict", "mode", "error", "when", "you", "did", "this", "but", "I", "guess", "by", "now", "all", "implementations", "have", "learned", "to", "also", "inline", "cache", "lookup", "misses", "NUMBER", "I", "hadn", "t", "expected", "that", "those", "null", "properties", "would", "take", "up", "_that_", "much", "space", "NUMBER", "Merged", "NUMBER", "I", "actually", "have", "be", "thinking", "of", "a", "way", "to", "seriously", "reduce", "this", "footprint", "by", "no", "longer", "storing", "the", "individual", "token", "styles", "but", "just", "recomputing", "them", "from", "stored", "parser", "state", "during", "rendering", "NUMBER", "That", "d", "eliminate", "the", "styles", "array", "in", "Line", "objects", "NUMBER", "The", "size", "of", "the", "stateAfter", "object", "can", "be", "tweaked", "by", "modifying", "individual", "modes", "NUMBER", "For", "sites", "where", "memory", "footprint", "be", "an", "issue", "it", "d", "be", "possible", "to", "write", "a", "simpler", "crappier", "state", "less", "or", "minimal", "state", "mode", "which", "doesn", "t", "highlight", "and", "indent", "as", "precisely", "but", "also", "doesn", "t", "allocate", "big", "state", "structures", "NUMBER", "That", "would", "make", "it", "possible", "to", "cut", "down", "the", "overhead", "to", "a", "single", "object", "and", "a", "single", "string", "per", "line", "plus", "tree", "chunks", "of", "course", "NUMBER", "I", "ve", "looked", "seriously", "into", "remove", "the", "styles", "arrays", "but", "while", "it", "would", "certainly", "be", "viable", "to", "do", "so", "I", "don", "t", "think", "it", "be", "a", "very", "good", "idea", "NUMBER", "It", "would", "cause", "a", "some", "work", "the", "parsing", "to", "be", "repeated", "a", "lot", "and", "remove", "a", "bunch", "of", "nice", "properties", "the", "getHTML", "method", "be", "dependent", "mostly", "on", "state", "already", "in", "the", "line", "object", "and", "be", "able", "to", "detect", "whether", "it", "change", "any", "styles", "NUMBER", "So", "for", "now", "I", "m", "not", "going", "through", "with", "this", "NUMBER", "I", "keep", "the", "work", "in", "a", "branch", "that", "I", "may", "at", "one", "point", "get", "back", "to", "NUMBER", "I", "think", "that", "s", "about", "as", "far", "as", "we", "can", "go", "here", "NUMBER", "Closing", "NUMBER", "Add", "more", "comments", "if", "you", "see", "more", "opportunities", "NUMBER", "jankeromnes", "Also", "if", "you", "could", "run", "your", "benchmark", "again", "and", "compare", "the", "memory", "use", "in", "the", "new", "situation", "with", "the", "old", "and", "post", "numbers", "here", "that", "d", "be", "interesting", "NUMBER", "Use", "the", "master", "branch", "to", "make", "sure", "you", "re", "not", "accidentally", "test", "some", "other", "change", "made", "in", "v", "NUMBER", "Sorry", "for", "commenting", "on", "a", "very", "old", "issue", "but", "I", "m", "also", "en", "countering", "very", "high", "memory", "usage", "when", "run", "NUMBER", "MB", "of", "JSON", "data", "through", "the", "runmode", "plugin", "NUMBER", "I", "wrap", "the", "content", "in", "a", "scrollable", "div", "but", "the", "runmode", "plugin", "be", "doing", "all", "its", "work", "eagerly", "right", "Should", "I", "create", "an", "issue", "or", "just", "use", "a", "regular", "CodeMirror", "for", "huge", "file", "A", "lazy", "runMode", "variant", "wouldn", "t", "be", "hard", "to", "do", "but", "be", "out", "of", "scope", "for", "the", "library", "itself", "NUMBER", "Look", "over", "runmode", "NUMBER", "js", "it", "s", "NUMBER", "odd", "lines", "and", "shouldn", "t", "be", "hard", "to", "duplicate", "in", "a", "way", "that", "suits", "your", "use", "case", "you", "ll", "have", "to", "do", "some", "magic", "with", "scroll", "handlers", "and", "estimating", "the", "height", "of", "the", "scrollable", "content", "NUMBER", "But", "of", "course", "yes", "you", "can", "also", "simply", "use", "CodeMirror", "normally", "though", "that", "ll", "also", "eat", "some", "memory", "for", "a", "NUMBER", "mb", "file", "NUMBER", "This", "be", "what", "you", "be", "looking", "for", "LINK", "option_fixedGutter", "Or", "LINK", "option_lineWrapping", "This", "be", "a", "duplicate", "of", "NUMBER", "NUMBER", "Chances", "be", "I", "ll", "have", "some", "time", "to", "look", "into", "this", "sometime", "this", "month", "NUMBER", "Does", "the", "above", "fix", "work", "for", "you", "It", "s", "simpler", "than", "the", "one", "you", "propose", "and", "doesn", "t", "require", "messing", "around", "with", "stream", "internals", "NUMBER", "That", "patch", "looks", "good", "NUMBER", "I", "ve", "merge", "it", "in", "NUMBER", "In", "the", "latest", "version", "of", "Safari", "Version", "NUMBER", "NUMBER", "if", "you", "highlight", "a", "piece", "of", "code", "then", "attempt", "to", "drag", "it", "Safari", "s", "default", "crash", "happens", "NUMBER", "The", "default", "crash", "looks", "like", "a", "page", "refresh", "NUMBER", "I", "do", "not", "have", "any", "older", "version", "of", "Safari", "to", "test", "on", "so", "I", "can", "t", "speak", "to", "that", "NUMBER", "This", "do", "not", "happen", "on", "any", "other", "browsers", "that", "I", "ve", "test", "Chrome", "Firefox", "Opera", "IE", "NUMBER", "To", "reproduce", "NUMBER", "In", "Safari", "open", "any", "CodeMirror", "example", "page", "such", "as", "Auto", "Resize", "Demo", "LINK", "NUMBER", "Highlight", "a", "section", "of", "code", "NUMBER", "Click", "on", "the", "highlight", "code", "and", "attempt", "to", "drag", "anywhere", "in", "the", "editor", "I", "ve", "attempted", "to", "debug", "this", "by", "setting", "a", "breakpoint", "on", "the", "onDragStart", "function", "NUMBER", "Sometimes", "it", "will", "crash", "inside", "of", "this", "function", "other", "times", "it", "will", "continue", "and", "crash", "on", "the", "wrapHandler", "function", "NUMBER", "It", "be", "difficult", "to", "tell", "what", "be", "going", "on", "because", "Safari", "be", "simply", "refreshing", "the", "page", "so", "any", "data", "that", "might", "be", "gleaned", "be", "lost", "in", "that", "refresh", "NUMBER", "P", "NUMBER", "S", "NUMBER", "Thanks", "for", "an", "awesome", "app", "I", "ve", "tried", "in", "NUMBER", "and", "NUMBER", "to", "reproduce", "this", "NUMBER", "Drag", "and", "drop", "inside", "the", "editor", "_is_", "broken", "the", "onDrop", "event", "be", "never", "fired", "for", "some", "reason", "but", "I", "couldn", "t", "get", "the", "browser", "to", "crash", "NUMBER", "I", "notice", "you", "push", "some", "update", "to", "the", "codebase", "recently", "NUMBER", "Any", "chance", "this", "bug", "be", "one", "of", "them", "Thanks", "Nope", "NUMBER", "As", "I", "said", "I", "was", "unable", "to", "reproduce", "NUMBER", "Hey", "Marijn", "thanks", "for", "the", "response", "NUMBER", "Strange", "you", "can", "not", "reproduce", "this", "error", "NUMBER", "I", "ve", "created", "a", "screencast", "showing", "how", "I", "do", "it", "NUMBER", "You", "will", "notice", "that", "on", "drag", "the", "browser", "refreshes", "NUMBER", "After", "about", "NUMBER", "times", "the", "whole", "browser", "crashes", "and", "produces", "an", "error", "NUMBER", "The", "screencast", "was", "made", "use", "Safari", "Version", "NUMBER", "NUMBER", "NUMBER", "Here", "be", "a", "link", "to", "the", "video", "LINK", "We", "re", "use", "Codemirror", "heavily", "on", "Cargo", "LINK", "and", "we", "love", "it", "NUMBER", "Thanks", "again", "for", "an", "awesome", "product", "NUMBER", "Hi", "All", "I", "think", "the", "problem", "be", "this", "statement", "in", "function", "onDragStart", "e", "e", "NUMBER", "dataTransfer", "NUMBER", "setDragImage", "escapeElement", "NUMBER", "NUMBER", "If", "you", "leave", "it", "in", "as", "soon", "as", "you", "start", "dragging", "Safari", "and", "Webkit", "crash", "Chrome", "displays", "a", "generic", "globe", "cursor", "and", "Firefox", "displays", "the", "edit", "caret", "NUMBER", "If", "you", "comment", "it", "out", "all", "three", "browsers", "show", "a", "ghost", "image", "of", "the", "entire", "edit", "buffer", "with", "the", "selection", "highlight", "and", "drag", "and", "drop", "works", "for", "all", "three", "NUMBER", "According", "to", "the", "Moz", "docs", "you", "should", "only", "be", "seeing", "a", "ghost", "of", "the", "selection", "which", "has", "be", "put", "into", "the", "escapeElement", "NUMBER", "I", "can", "make", "it", "work", "with", "an", "image", "but", "not", "with", "a", "pre", "element", "NUMBER", "NB", "All", "browsers", "be", "latest", "Mac", "version", "Webkit", "r", "NUMBER", "Chrome", "NUMBER", "and", "Firefox", "NUMBER", "Thanks", "for", "narrowing", "it", "down", "to", "the", "setDragImage", "call", "NUMBER", "This", "be", "a", "rather", "obscure", "and", "poorly", "support", "API", "NUMBER", "I", "ve", "commented", "out", "the", "call", "for", "now", "NUMBER", "If", "someone", "finds", "a", "way", "to", "make", "the", "actual", "dragged", "text", "show", "up", "as", "the", "drag", "cursor", "in", "a", "reliable", "way", "I", "d", "love", "to", "hear", "about", "it", "NUMBER", "Thanks", "guys", "NUMBER", "That", "has", "solve", "the", "crash", "issue", "NUMBER", "Just", "to", "let", "you", "know", "NUMBER", "It", "do", "work", "in", "Safari", "but", "not", "with", "CodeMirror", "in", "safari", "NUMBER", "See", "this", "demo", "LINK", "I", "don", "t", "know", "if", "this", "or", "NUMBER", "or", "NUMBER", "should", "be", "reopened", "but", "this", "bug", "be", "definitely", "still", "present", "for", "CM", "master", "c", "NUMBER", "a", "NUMBER", "c", "NUMBER", "eb", "NUMBER", "e", "NUMBER", "cbf", "NUMBER", "e", "NUMBER", "d", "NUMBER", "a", "NUMBER", "b", "NUMBER", "and", "Safari", "NUMBER", "Just", "visit", "any", "demo", "e", "NUMBER", "g", "NUMBER", "resize", "mention", "above", "and", "drag", "to", "reproduce", "NUMBER", "Thanks", "it", "has", "fix", "the", "issue", "but", "has", "the", "cool", "effect", "of", "image", "drag", "NUMBER", "How", "can", "we", "best", "report", "this", "dumb", "behaviour", "to", "apple", "It", "s", "a", "Safari", "bug", "not", "a", "Webkit", "bug", "that", "much", "be", "certain", "NUMBER", "It", "seems", "the", "Safari", "bug", "handle", "isn", "t", "do", "in", "an", "open", "way", "so", "I", "guess", "you", "go", "to", "LINK", "jump", "through", "the", "hoops", "and", "hope", "for", "the", "best", "NUMBER", "submitted", "a", "report", "NUMBER", "thanks", "again", "NUMBER", "The", "setLineClass", "function", "can", "set", "a", "class", "to", "a", "line", "but", "there", "s", "not", "way", "to", "get", "the", "current", "class", "of", "a", "line", "NUMBER", "This", "commit", "add", "the", "information", "to", "the", "lineInfo", "function", "as", "a", "new", "property", "call", "lineClass", "NUMBER", "The", "CodeMirror", "works", "weird", "on", "RTL", "pages", "because", "it", "also", "behave", "from", "right", "to", "left", "NUMBER", "I", "m", "assuming", "all", "computer", "languages", "be", "write", "from", "left", "to", "right", "so", "to", "make", "it", "work", "on", "RTL", "pages", "it", "s", "required", "to", "add", "this", "bit", "to", "the", "stylesheet", "NUMBER", "CodeMirror", "direction", "ltr", "IMPORTANT", "Thanks", "NUMBER", "When", "use", "a", "CodeMirror", "editor", "that", "be", "taller", "than", "the", "browser", "window", "such", "as", "an", "auto", "resizing", "editor", "and", "searching", "for", "a", "word", "use", "the", "browser", "s", "build", "in", "Find", "functionality", "e", "NUMBER", "g", "NUMBER", "Edit", "Find", "if", "any", "occurrences", "appear", "in", "the", "CodeMirror", "editor", "the", "browser", "scrolls", "to", "the", "very", "bottom", "of", "the", "page", "regardless", "of", "where", "the", "first", "occurrence", "be", "NUMBER", "Also", "the", "browser", "s", "Find", "Next", "command", "only", "stops", "once", "in", "a", "CodeMirror", "editor", "regardless", "of", "how", "many", "search", "match", "occurrences", "be", "in", "the", "editor", "NUMBER", "I", "can", "tell", "that", "Chrome", "sees", "all", "the", "occurrences", "because", "the", "Find", "UI", "that", "drops", "down", "from", "the", "upper", "right", "of", "the", "browser", "window", "says", "NUMBER", "of", "NUMBER", "NUMBER", "To", "see", "an", "example", "of", "these", "behaviors", "open", "the", "Auto", "resizing", "editor", "demo", "LINK", "page", "and", "copy", "paste", "the", "editor", "s", "content", "several", "times", "over", "until", "it", "becomes", "tall", "enough", "to", "cause", "the", "browser", "window", "to", "have", "a", "vertical", "scroll", "bar", "NUMBER", "I", "have", "tried", "this", "in", "Chrome", "and", "Safari", "on", "OS", "X", "NUMBER", "These", "be", "difficult", "behaviors", "to", "explain", "but", "the", "gist", "of", "it", "be", "that", "CodeMirror", "seems", "to", "confuse", "the", "browser", "s", "Find", "functionality", "NUMBER", "I", "know", "I", "can", "use", "CodeMirror", "s", "build", "in", "find", "replace", "and", "I", "m", "headed", "in", "that", "direction", "but", "I", "thought", "it", "was", "worth", "bringing", "this", "up", "NUMBER", "And", "as", "always", "thanks", "for", "such", "an", "awesome", "in", "browser", "editor", "May", "be", "it", "be", "possible", "to", "create", "a", "hidden", "textarea", "with", "full", "text", "and", "then", "track", "selection", "in", "it", "created", "by", "in", "browser", "build", "in", "find", "Keeping", "a", "textarea", "with", "the", "full", "text", "be", "even", "more", "expensive", "than", "just", "rendering", "the", "full", "text", "to", "the", "DOM", "not", "to", "mention", "that", "the", "synchronizing", "would", "be", "a", "nightmare", "NUMBER", "Thanks", "for", "taking", "a", "look", "at", "this", "NUMBER", "I", "know", "browser", "specific", "issue", "be", "always", "a", "pain", "so", "I", "completely", "understand", "where", "you", "re", "come", "from", "NUMBER", "The", "good", "news", "be", "that", "the", "browser", "s", "find", "command", "isn", "t", "entirely", "broken", "because", "the", "search", "matches", "be", "still", "visually", "highlight", "NUMBER", "The", "brokenness", "be", "in", "that", "the", "browser", "scrolls", "all", "the", "way", "to", "the", "bottom", "of", "the", "page", "rather", "than", "to", "the", "first", "match", "NUMBER", "Anyway", "I", "just", "wanted", "to", "follow", "up", "and", "say", "thanks", "NUMBER", "If", "I", "come", "up", "with", "any", "creative", "ways", "to", "solve", "this", "I", "ll", "post", "here", "again", "but", "this", "be", "admittedly", "a", "low", "priority", "issue", "especially", "since", "it", "be", "browser", "specific", "NUMBER", "See", "also", "issue", "NUMBER", "NUMBER", "Combined", "with", "a", "hack", "that", "turns", "off", "draggable", "in", "Webkit", "and", "only", "turns", "it", "on", "when", "a", "mousedown", "event", "be", "seen", "this", "will", "probably", "improve", "the", "situation", "NUMBER", "This", "be", "now", "fix", "as", "far", "as", "it", "can", "be", "fix", "without", "moving", "to", "a", "completely", "different", "architecture", "NUMBER", "Documents", "with", "more", "than", "NUMBER", "lines", "will", "still", "cause", "browsers", "to", "miss", "matches", "in", "some", "cases", "as", "the", "document", "won", "t", "be", "wholly", "rendered", "NUMBER", "Excellent", "thanks", "I", "test", "it", "out", "a", "bit", "and", "it", "works", "great", "I", "m", "sorry", "this", "pull", "request", "seems", "to", "be", "including", "another", "commit", "I", "did", "over", "a", "month", "ago", "which", "I", "sent", "in", "a", "separate", "pull", "request", "NUMBER", "I", "m", "not", "really", "sure", "how", "to", "fix", "this", "or", "if", "I", "should", "I", "don", "t", "really", "use", "github", "NUMBER", "Just", "thought", "I", "d", "pass", "along", "this", "fix", "to", "you", "NUMBER", "This", "be", "implement", "in", "the", "keymap", "branch", "and", "will", "land", "on", "master", "after", "a", "bit", "more", "test", "NUMBER", "IE", "displays", "this", "error", "when", "you", "try", "to", "insert", "a", "block", "level", "element", "into", "an", "element", "that", "doesn", "t", "support", "them", "via", "innerHTML", "NUMBER", "I", "traced", "the", "problem", "I", "was", "having", "down", "to", "line", "NUMBER", "in", "codemirror", "NUMBER", "js", "javascript", "measure", "NUMBER", "innerHTML", "TAG", "x", "TAG", "The", "problem", "be", "that", "if", "you", "have", "your", "textarea", "inside", "of", "a", "paragraph", "element", "like", "many", "do", "you", "get", "this", "Unknown", "runtime", "error", "when", "initializing", "CodeMirror", "NUMBER", "fromTextArea", "and", "the", "editor", "fail", "to", "load", "NUMBER", "The", "workaround", "be", "to", "change", "the", "paragraph", "to", "an", "element", "that", "support", "block", "level", "children", "a", "DIV", "for", "example", "NUMBER", "I", "m", "not", "sure", "how", "to", "approach", "a", "fix", "for", "this", "NUMBER", "Having", "a", "textarea", "inside", "of", "a", "paragraph", "element", "be", "perfectly", "valid", "so", "letting", "CodeMirror", "error", "out", "without", "any", "warning", "doesn", "t", "seem", "like", "a", "good", "idea", "NUMBER", "It", "took", "me", "a", "bit", "to", "figure", "out", "why", "it", "wasn", "t", "work", "in", "IE", "whereas", "a", "try", "catch", "or", "even", "a", "smarter", "check", "with", "an", "alert", "would", "have", "saved", "a", "lot", "of", "time", "and", "confusion", "NUMBER", "I", "m", "certain", "this", "has", "affected", "many", "others", "NUMBER", "Here", "s", "some", "sample", "markup", "to", "reproduce", "the", "issue", "in", "IE", "html", "TAG", "Source", "TAG", "TAG", "TAG", "TAG", "javascript", "var", "editor", "CodeMirror", "NUMBER", "fromTextArea", "document", "NUMBER", "getElementById", "source", "I", "ve", "created", "a", "simple", "test", "case", "that", "you", "can", "try", "this", "on", "here", "NUMBER", "Just", "open", "it", "up", "in", "IE", "and", "keep", "an", "eye", "on", "the", "error", "in", "the", "status", "bar", "LINK", "IE", "I", "think", "you", "d", "have", "have", "manually", "change", "the", "element", "to", "a", "DIV", "or", "something", "NUMBER", "probably", "not", "the", "best", "idea", "to", "do", "that", "NUMBER", "I", "think", "the", "more", "informative", "error", "message", "will", "be", "sufficient", "NUMBER", "Thanks", "The", "callback", "in", "runmode", "currently", "returns", "for", "every", "token", "only", "the", "text", "and", "the", "style", "NUMBER", "This", "commit", "add", "the", "position", "the", "line", "and", "the", "character", "to", "the", "callback", "NUMBER", "It", "s", "an", "object", "with", "line", "and", "ch", "as", "properties", "NUMBER", "With", "this", "commit", "you", "can", "easily", "add", "markers", "to", "the", "code", "e", "NUMBER", "g", "NUMBER", "for", "error", "that", "need", "the", "parsing", "of", "the", "full", "source", "NUMBER", "Hello", "The", "users", "who", "use", "multi", "byte", "character", "need", "to", "use", "the", "IME", "for", "input", "NUMBER", "However", "when", "use", "IME", "the", "CodeMirror", "NUMBER", "do", "not", "work", "correctly", "in", "the", "Firefox", "and", "the", "Opera", "NUMBER", "When", "useing", "IME", "these", "browsers", "won", "t", "trigger", "keypress", "and", "keydown", "event", "for", "the", "NUMBER", "keystroke", "or", "later", "NUMBER", "therefore", "the", "inputted", "characters", "be", "not", "immediately", "reflected", "to", "the", "editor", "NUMBER", "And", "when", "useing", "IME", "the", "method", "of", "detecting", "update", "be", "only", "polling", "NUMBER", "Thus", "the", "user", "who", "use", "IME", "needs", "the", "option", "to", "check", "for", "update", "and", "reflect", "NUMBER", "It", "may", "be", "better", "that", "the", "default", "value", "of", "the", "forcePolling", "be", "false", "for", "the", "users", "who", "do", "not", "use", "IME", "NUMBER", "IME", "LINK", "_method_editor", "Many", "thanks", "I", "tried", "add", "patch", "NUMBER", "af", "NUMBER", "b", "NUMBER", "d", "NUMBER", "dd", "NUMBER", "b", "NUMBER", "a", "NUMBER", "b", "NUMBER", "d", "NUMBER", "f", "NUMBER", "ccd", "NUMBER", "NUMBER", "This", "patch", "reduce", "the", "problem", "a", "bit", "NUMBER", "But", "the", "Firefox", "NUMBER", "and", "the", "Opera", "NUMBER", "fire", "the", "input", "event", "after", "the", "characters", "be", "composed", "NUMBER", "So", "still", "will", "not", "be", "reflected", "interactively", "NUMBER", "I", "want", "to", "reflect", "interactively", "NUMBER", "I", "think", "polling", "be", "quite", "expensive", "too", "NUMBER", "But", "as", "far", "as", "I", "know", "polling", "be", "the", "only", "way", "to", "detect", "the", "update", "for", "textarea", "element", "while", "use", "IME", "NUMBER", "We", "can", "detect", "the", "update", "for", "div", "element", "that", "has", "contenteditable", "true", "by", "the", "DOMCharacterDataModified", "event", "NUMBER", "The", "Firefox", "and", "the", "Opera", "return", "the", "key", "code", "below", "for", "first", "keystroke", "NUMBER", "Firefox", "Windows", "NUMBER", "Opera", "Windows", "NUMBER", "Firefox", "Mac", "The", "key", "code", "of", "the", "pressed", "key", "Opera", "Mac", "The", "keydown", "event", "be", "fired", "each", "keystroke", "work", "correctly", "Firefox", "Linux", "Any", "event", "be", "not", "fired", "untill", "composed", "NUMBER", "Opera", "Linux", "Any", "event", "be", "not", "fired", "untill", "composed", "NUMBER", "Based", "on", "these", "results", "I", "created", "the", "other", "commit", "NUMBER", "LINK", "In", "this", "commit", "trying", "to", "detect", "by", "polling", "only", "if", "the", "conditions", "be", "matched", "NUMBER", "The", "results", "of", "for", "each", "commit", "Firefox", "Windows", "Seq", "Keyboard", "input", "keydown", "keypress", "keyup", "input", "case", "NUMBER", "case", "NUMBER", "case", "NUMBER", "case", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "\u3042", "\u3042", "\u3042", "\u3042", "NUMBER", "i", "\u3042", "\u3042", "\u3042\u3044", "\u3042\u3044", "NUMBER", "u", "\u3042", "\u3042", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "NUMBER", "Enter", "NUMBER", "fired", "\u3042", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "NUMBER", "a", "few", "sec", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "NUMBER", "keyCode", "case", "NUMBER", "be", "NUMBER", "e", "NUMBER", "c", "NUMBER", "dd", "NUMBER", "def", "NUMBER", "d", "NUMBER", "b", "NUMBER", "e", "NUMBER", "ee", "NUMBER", "beacee", "case", "NUMBER", "NUMBER", "af", "NUMBER", "b", "NUMBER", "d", "NUMBER", "dd", "NUMBER", "b", "NUMBER", "a", "NUMBER", "b", "NUMBER", "d", "NUMBER", "f", "NUMBER", "ccd", "NUMBER", "case", "NUMBER", "afbb", "NUMBER", "f", "NUMBER", "df", "NUMBER", "ba", "NUMBER", "d", "NUMBER", "a", "NUMBER", "d", "NUMBER", "c", "NUMBER", "aa", "NUMBER", "dd", "NUMBER", "a", "NUMBER", "case", "NUMBER", "NUMBER", "c", "NUMBER", "c", "NUMBER", "f", "NUMBER", "c", "NUMBER", "a", "NUMBER", "fe", "NUMBER", "eedb", "NUMBER", "eea", "Opera", "Windows", "Seq", "Keyboard", "input", "keydown", "keypress", "keyup", "input", "case", "NUMBER", "case", "NUMBER", "case", "NUMBER", "case", "NUMBER", "NUMBER", "a", "NUMBER", "\u3042", "\u3042", "\u3042", "\u3042", "NUMBER", "i", "\u3042", "\u3042", "\u3042\u3044", "\u3042\u3044", "NUMBER", "u", "\u3042", "\u3042", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "NUMBER", "Enter", "fired", "\u3042", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "NUMBER", "a", "few", "sec", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "Firefox", "Mac", "Seq", "Keyboard", "input", "keydown", "keypress", "keyup", "input", "case", "NUMBER", "case", "NUMBER", "case", "NUMBER", "case", "NUMBER", "NUMBER", "a", "NUMBER", "\u3042", "\u3042", "\u3042", "\u3042", "NUMBER", "i", "\u3042", "\u3042", "\u3042\u3044", "\u3042\u3044", "NUMBER", "u", "\u3042", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "NUMBER", "Enter", "NUMBER", "NUMBER", "fired", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "NUMBER", "Updated", "NUMBER", "NUMBER", "NUMBER", "Opera", "Mac", "Seq", "Keyboard", "input", "keydown", "keypress", "keyup", "input", "case", "NUMBER", "case", "NUMBER", "case", "NUMBER", "case", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "\u3042", "\u3042", "\u3042", "\u3042", "NUMBER", "i", "NUMBER", "NUMBER", "\u3042\u3044", "\u3042\u3044", "\u3042\u3044", "\u3042\u3044", "NUMBER", "u", "NUMBER", "NUMBER", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "NUMBER", "Enter", "fired", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "Firefox", "Linux", "Seq", "Keyboard", "input", "keydown", "keypress", "keyup", "input", "case", "NUMBER", "case", "NUMBER", "case", "NUMBER", "case", "NUMBER", "NUMBER", "a", "\u3042", "NUMBER", "i", "\u3042\u3044", "NUMBER", "u", "\u3042\u3044\u3046", "NUMBER", "Enter", "fired", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "NUMBER", "a", "few", "sec", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "Opera", "Linux", "Seq", "Keyboard", "input", "keydown", "keypress", "keyup", "input", "case", "NUMBER", "case", "NUMBER", "case", "NUMBER", "case", "NUMBER", "NUMBER", "a", "\u3042", "NUMBER", "i", "\u3042\u3044", "NUMBER", "u", "\u3042\u3044\u3046", "NUMBER", "Enter", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fired", "NUMBER", "times", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "\u3042\u3044\u3046", "Thanks", "NUMBER", "I", "find", "a", "strange", "results", "for", "the", "Opera", "at", "Windows", "NUMBER", "Opera", "Windows", "more", "sequence", "Seq", "Keyboard", "input", "keydown", "keypress", "keyup", "input", "NUMBER", "a", "NUMBER", "NUMBER", "i", "NUMBER", "u", "NUMBER", "Enter", "fired", "NUMBER", "a", "not", "fired", "NUMBER", "i", "NUMBER", "u", "NUMBER", "Enter", "fired", "NUMBER", "Enter", "NUMBER", "NUMBER", "NUMBER", "fired", "And", "I", "update", "the", "table", "in", "my", "previous", "comment", "NUMBER", "for", "Firefox", "Mac", "From", "these", "results", "I", "think", "that", "it", "be", "better", "to", "stop", "polling", "with", "a", "short", "interval", "by", "keyup", "event", "instead", "of", "input", "event", "NUMBER", "If", "CodeMirror", "will", "stop", "polling", "when", "there", "be", "no", "change", "for", "some", "seconds", "I", "wish", "to", "specify", "the", "number", "of", "seconds", "by", "options", "or", "I", "wish", "to", "disable", "that", "feature", "by", "options", "NUMBER", "Patch", "Please", "review", "this", "patch", "NUMBER", "LINK", "I", "ve", "replied", "on", "the", "gist", "NUMBER", "I", "hate", "to", "resist", "this", "patch", "even", "further", "I", "really", "appreciate", "the", "effort", "you", "re", "putting", "into", "this", "but", "the", "code", "as", "it", "stands", "be", "extremely", "unattractive", "from", "the", "perspective", "of", "someone", "who", "has", "to", "maintain", "it", "NUMBER", "The", "repeated", "combinations", "of", "platform", "and", "browser", "test", "make", "it", "very", "hard", "to", "see", "what", "s", "going", "on", "and", "why", "NUMBER", "Could", "you", "maybe", "factor", "them", "into", "one", "or", "more", "predicates", "or", "constants", "since", "I", "guess", "the", "ones", "that", "don", "t", "depend", "on", "key", "code", "don", "t", "change", "at", "run", "time", "with", "descriptive", "names", "so", "that", "the", "code", "be", "at", "least", "a", "little", "self", "documenting", "Thanks", "for", "your", "comment", "NUMBER", "I", "have", "revised", "the", "patch", "NUMBER", "LINK", "If", "satisfactory", "with", "this", "patch", "after", "test", "I", "will", "send", "pull", "request", "again", "NUMBER", "Thanks", "There", "s", "a", "simplified", "patch", "plus", "comment", "at", "LINK", "NUMBER", "Integrated", "in", "NUMBER", "fd", "NUMBER", "a", "NUMBER", "c", "NUMBER", "ef", "NUMBER", "c", "NUMBER", "e", "NUMBER", "e", "NUMBER", "f", "NUMBER", "d", "NUMBER", "e", "NUMBER", "a", "NUMBER", "Many", "thanks", "I", "confirmed", "that", "the", "CodeMirror", "NUMBER", "works", "interactively", "by", "that", "commit", "useing", "IME", "NUMBER", "If", "you", "have", "time", "could", "you", "also", "take", "a", "look", "at", "the", "branch", "at", "LINK", "I", "be", "in", "the", "process", "of", "reorganizing", "the", "input", "handle", "in", "a", "way", "that", "will", "make", "polling", "much", "cheaper", "so", "we", "could", "potentially", "just", "make", "the", "default", "poll", "interval", "smaller", "but", "it", "involves", "resetting", "the", "textarea", "on", "every", "change", "and", "I", "m", "unsure", "how", "that", "will", "work", "with", "IME", "NUMBER", "Actually", "never", "mind", "NUMBER", "I", "ve", "finally", "install", "a", "Chinese", "locale", "IME", "driver", "myself", "and", "can", "now", "test", "this", "stuff", "on", "my", "own", "NUMBER", "Also", "my", "revision", "do", "break", "IME", "NUMBER", "Working", "on", "a", "fix", "NUMBER", "Sorry", "for", "the", "late", "reply", "NUMBER", "I", "had", "tried", "this", "branch", "LINK", "NUMBER", "This", "version", "almost", "works", "as", "expected", "even", "when", "IME", "be", "ON", "NUMBER", "However", "when", "I", "tryed", "the", "following", "operations", "it", "did", "not", "work", "correctly", "NUMBER", "Steps", "NUMBER", "Press", "A", "for", "NUMBER", "second", "NUMBER", "NUMBER", "Press", "Backspase", "for", "NUMBER", "second", "NUMBER", "Screencast", "LINK", "Hey", "I", "can", "t", "reproduce", "the", "problem", "you", "be", "seeing", "unfortunately", "NUMBER", "Does", "it", "still", "happen", "in", "the", "current", "version", "available", "at", "LINK", "And", "do", "it", "also", "occur", "when", "you", "type", "with", "IME", "disabled", "Also", "which", "input", "method", "precisely", "be", "you", "use", "I", "install", "Chinese", "Pinyin", "but", "it", "gives", "me", "a", "different", "character", "when", "I", "hold", "A", "sorry", "I", "know", "very", "little", "about", "Chinese", "NUMBER", "Best", "Marijn", "Thanks", "NUMBER", "I", "tryed", "in", "newest", "version", "NUMBER", "I", "be", "a", "Japanese", "and", "use", "IME", "for", "Japanese", "usually", "NUMBER", "My", "environments", "Windows", "Microsoft", "IME", "Mac", "Google", "IME", "or", "Kotoeri", "Linux", "Anthy", "That", "problem", "was", "reproduced", "in", "all", "these", "environments", "NUMBER", "And", "not", "reproduced", "when", "IME", "be", "Off", "NUMBER", "In", "Chinese", "reproduced", "in", "the", "following", "environment", "NUMBER", "Chinese", "environment", "Windows", "Microsoft", "Pinyin", "ABC", "input", "style", "LINK", "Thanks", "I", "ll", "install", "a", "Japanese", "locale", "and", "try", "to", "reproduce", "again", "NUMBER", "Still", "no", "luck", "reproducing", "this", "on", "Chrome", "and", "Firefox", "doesn", "t", "seem", "to", "work", "well", "with", "ibus", "which", "be", "the", "ime", "daemon", "I", "m", "use", "NUMBER", "Which", "browser", "did", "you", "observe", "the", "problem", "in", "LINK", "Type", "get", "Press", "ctrl", "space", "to", "trigger", "autocomplete", "Bug", "NUMBER", "too", "few", "entries", "different", "bug", "Bug", "NUMBER", "can", "t", "use", "keyboard", "to", "move", "selection", "in", "Opera", "because", "they", "use", "select", "multiple", "and", "expect", "things", "to", "be", "selected", "automatically", "when", "you", "use", "keyboard", "javascript", "Build", "the", "select", "widget", "var", "complete", "document", "NUMBER", "createElement", "div", "complete", "NUMBER", "className", "completions", "var", "sel", "complete", "NUMBER", "appendChild", "document", "NUMBER", "createElement", "select", "sel", "NUMBER", "multiple", "true", "See", "LINK", "autocomplete", "broken", "by", "opera", "keyboard", "accessibility", "feature", "That", "multiple", "true", "statement", "be", "the", "problem", "NUMBER", "Happy", "to", "send", "along", "a", "pull", "request", "but", "be", "there", "any", "valid", "reason", "for", "wanting", "sel", "NUMBER", "multiple", "true", "in", "this", "case", "I", "was", "work", "on", "a", "reduced", "test", "case", "when", "I", "discover", "the", "bug", "be", "readily", "reproducible", "use", "the", "Full", "Screen", "demo", "LINK", "from", "the", "Code", "Mirror", "website", "NUMBER", "If", "the", "NUMBER", "CodeMirror", "div", "or", "any", "parent", "div", "be", "given", "absolute", "or", "fix", "positioning", "the", "selection", "code", "breaks", "in", "IE", "NUMBER", "And", "NUMBER", "I", "think", "NUMBER", "Steps", "to", "reproduce", "Visit", "the", "Full", "Screen", "demo", "LINK", "page", "in", "IE", "NUMBER", "Click", "in", "the", "editor", "then", "hit", "Escape", "Try", "to", "select", "lines", "in", "the", "middle", "of", "the", "screen", "NUMBER", "Expected", "Bug", "that", "appears", "The", "editor", "will", "immediately", "scroll", "to", "the", "bottom", "NUMBER", "In", "my", "personal", "code", "I", "have", "also", "run", "into", "a", "bug", "that", "causes", "the", "selection", "to", "start", "to", "become", "offset", "from", "the", "actual", "text", "selected", "this", "seems", "to", "be", "cause", "when", "lines", "run", "longer", "than", "the", "visible", "part", "of", "the", "editor", "NUMBER", "Possible", "Workaround", "Since", "it", "works", "great", "with", "relative", "positioning", "Instead", "of", "use", "CSS", "use", "JavaScript", "to", "provide", "negative", "top", "and", "left", "values", "and", "a", "set", "height", "and", "width", "NUMBER", "In", "my", "quick", "test", "this", "seem", "to", "not", "cause", "an", "issue", "NUMBER", "Sorry", "to", "waste", "your", "time", "it", "was", "IE", "NUMBER", "mode", "in", "IE", "NUMBER", "that", "I", "was", "test", "NUMBER", "I", "will", "close", "the", "issue", "as", "it", "do", "work", "correctly", "in", "IE", "NUMBER", "Thank", "you", "Hi", "Marijn", "Like", "I", "promised", "a", "while", "ago", "here", "comes", "an", "optimized", "Game", "of", "Life", "clojure", "demo", "NUMBER", "hans", "said", "the", "new", "code", "runs", "twice", "as", "fast", "on", "his", "machine", "as", "the", "old", "one", "NUMBER", "Best", "Jan", "NUMBER", "Hi", "I", "write", "a", "Closure", "Compiler", "extern", "for", "CodeMirror", "and", "want", "to", "ask", "to", "review", "it", "NUMBER", "I", "probably", "messed", "with", "some", "optional", "parameters", "not", "null", "parameters", "and", "other", "stuff", "NUMBER", "LINK", "externs", "blob", "master", "codemirror", "NUMBER", "js", "This", "be", "a", "manual", "for", "annotating", "js", "LINK", "for", "compiler", "NUMBER", "html", "Can", "you", "please", "one", "more", "time", "look", "at", "this", "LINK", "externs", "blob", "master", "codemirror", "NUMBER", "js", "L", "NUMBER", "and", "this", "line", "LINK", "externs", "blob", "master", "codemirror", "NUMBER", "js", "L", "NUMBER", "what", "type", "be", "lineHandle", "Ok", "thanks", "I", "can", "t", "find", "any", "info", "about", "addGutterMarker", "and", "removeGutterMarker", "here", "LINK", "This", "manual", "be", "not", "actual", "Ok", "Now", "it", "looks", "like", "Clears", "a", "marker", "created", "with", "TAG", "setMarker", "TAG", "NUMBER", "TAG", "line", "TAG", "can", "be", "either", "a", "number", "or", "a", "handle", "returned", "by", "TAG", "setMarker", "TAG", "since", "a", "number", "may", "now", "refer", "to", "a", "different", "line", "if", "something", "was", "add", "or", "delete", "NUMBER", "param", "number", "CodeMirrorLineHandle", "line", "CodeMirrorObj", "NUMBER", "prototype", "NUMBER", "clearMarker", "function", "line", "And", "it", "can", "take", "number", "or", "lineHandle", "NUMBER", "Noticed", "that", "CM", "NUMBER", "doesn", "t", "have", "this", "anymore", "and", "it", "s", "a", "bummer", "Fair", "enough", "NUMBER", "Can", "you", "show", "what", "those", "four", "lines", "might", "be", "I", "played", "with", "indentLine", "function", "but", "it", "seems", "to", "indent", "regardless", "of", "the", "line", "context", "NUMBER", "My", "javascript", "fu", "be", "weak", "NUMBER", "Thanks", "NUMBER", "Thank", "you", "very", "much", "NUMBER", "I", "ll", "try", "it", "out", "today", "NUMBER", "Yey", "NUMBER", "Seems", "to", "work", "NUMBER", "However", "for", "some", "reason", "first", "level", "tags", "be", "not", "highlight", "cm", "null", "class", "but", "second", "level", "ones", "be", "fine", "cm", "tag", "class", "NUMBER", "When", "you", "start", "editing", "they", "will", "highlight", "properly", "NUMBER", "This", "be", "what", "I", "m", "talking", "about", "TAG", "TAG", "One", "TAG", "TAG", "Two", "TAG", "TAG", "So", "the", "TAG", "will", "be", "of", "cm", "null", "class", "but", "TAG", "be", "properly", "highlight", "with", "cm", "tag", "class", "NUMBER", "Thanks", "As", "mention", "in", "LINK", "issuecomment", "NUMBER", "here", "be", "the", "pull", "request", "NUMBER", "For", "reference", "I", "ve", "copied", "the", "comment", "here", "Hi", "Marijn", "I", "discover", "a", "nice", "way", "of", "doing", "this", "so", "I", "will", "be", "make", "a", "pull", "request", "shortly", "to", "include", "a", "coordsFromIndex", "method", "NUMBER", "The", "method", "I", "m", "use", "be", "pretty", "fast", "as", "it", "doesn", "t", "do", "any", "string", "matching", "NUMBER", "The", "function", "basically", "loops", "through", "the", "strings", "in", "the", "lines", "array", "until", "the", "total", "of", "their", "lengths", "so", "far", "exceeds", "the", "index", "we", "be", "interested", "in", "then", "it", "can", "easily", "calculate", "a", "line", "ch", "object", "NUMBER", "The", "line", "comes", "from", "which", "line", "it", "s", "get", "to", "in", "the", "loop", "and", "ch", "be", "calculated", "by", "subtracting", "the", "total", "chars", "in", "previous", "lines", "from", "the", "index", "we", "want", "NUMBER", "The", "function", "also", "takes", "into", "account", "r", "n", "in", "IE", "although", "I", "personally", "think", "it", "would", "be", "best", "to", "stick", "to", "n", "at", "all", "times", "NUMBER", "I", "have", "add", "the", "method", "write", "some", "test", "for", "it", "and", "update", "manual", "NUMBER", "html", "with", "the", "new", "method", "NUMBER", "Pull", "request", "on", "it", "s", "way", "NUMBER", "Thanks", "for", "your", "pointers", "on", "this", "NUMBER", "I", "ve", "update", "coordsFromIndex", "so", "that", "it", "clips", "the", "returned", "object", "rather", "than", "returning", "null", "to", "make", "it", "consistent", "with", "the", "exist", "API", "NUMBER", "Also", "I", "notice", "that", "getValue", "always", "returns", "a", "string", "joined", "on", "n", "regardless", "of", "IE", "s", "r", "n", "which", "be", "good", "so", "coordsFromIndex", "now", "also", "assumes", "just", "newlines", "NUMBER", "I", "ve", "find", "the", "ability", "go", "convert", "to", "and", "from", "indexes", "miss", "from", "most", "javascript", "editors", "and", "it", "s", "quite", "a", "common", "requirement", "so", "this", "small", "method", "aims", "to", "fix", "that", "in", "quite", "an", "efficient", "way", "NUMBER", "marijnh", "In", "my", "use", "case", "I", "m", "not", "calling", "getValue", "before", "get", "the", "line", "ch", "NUMBER", "it", "s", "complicated", "but", "I", "m", "basically", "managing", "my", "own", "string", "data", "it", "s", "actually", "a", "fake", "DOM", "tree", "NUMBER", "don", "t", "ask", "I", "can", "then", "get", "an", "index", "for", "a", "given", "fake", "DOM", "node", "that", "then", "needs", "to", "be", "converted", "to", "update", "the", "editor", "text", "editor", "caret", "range", "NUMBER", "Thanks", "for", "your", "help", "on", "this", "and", "for", "merge", "it", "in", "NUMBER", "Hi", "there", "On", "Mac", "OS", "X", "the", "standard", "shortcuts", "for", "indenting", "and", "dedenting", "lines", "be", "Cmd", "and", "Cmd", "NUMBER", "Or", "at", "least", "these", "be", "the", "shortcuts", "use", "by", "both", "Xcode", "and", "TextMate", "NUMBER", "It", "seems", "that", "at", "least", "with", "the", "default", "setup", "CodeMirror", "do", "not", "implement", "these", "shortcuts", "NUMBER", "It", "implement", "the", "same", "functionality", "with", "Tab", "and", "Shift", "Tab", "instead", "As", "someone", "who", "s", "use", "to", "code", "on", "the", "Mac", "I", "find", "myself", "constantly", "trying", "to", "indent", "lines", "with", "these", "shortcuts", "which", "doesn", "t", "work", "NUMBER", "To", "make", "things", "worse", "the", "same", "shortcuts", "Cmd", "and", "Cmd", "be", "use", "by", "all", "the", "major", "browsers", "on", "OS", "X", "for", "Back", "and", "Forward", "actions", "which", "keep", "me", "constantly", "navigating", "back", "whenever", "I", "press", "Cmd", "NUMBER", "I", "m", "not", "sure", "if", "overriding", "browser", "shortcuts", "by", "default", "by", "calling", "something", "like", "e", "NUMBER", "preventDefault", "would", "be", "a", "good", "idea", "but", "I", "would", "like", "to", "suggest", "add", "at", "least", "a", "setting", "to", "enable", "this", "optionally", "NUMBER", "If", "you", "guys", "be", "OK", "with", "something", "like", "that", "I", "would", "be", "more", "than", "happy", "to", "contribute", "with", "a", "patch", "NUMBER", "Thanks", "Hi", "I", "m", "sure", "this", "be", "probably", "an", "obvious", "question", "but", "I", "ll", "ask", "it", "anyway", "NUMBER", "I", "need", "to", "be", "able", "to", "get", "and", "set", "positions", "ranges", "selections", "based", "on", "the", "number", "of", "characters", "from", "the", "start", "of", "the", "text", "NUMBER", "I", "know", "you", "can", "do", "this", "with", "getCursor", "setCursor", "getRange", "replaceRange", "setSelection", "however", "you", "have", "to", "specify", "line", "and", "char", "NUMBER", "Is", "there", "a", "way", "do", "just", "use", "an", "index", "which", "be", "the", "common", "way", "to", "work", "with", "strings", "otherwise", "it", "means", "having", "to", "somehow", "convert", "an", "index", "to", "a", "line", "char", "combination", "Thanks", "in", "advance", "NUMBER", "I", "m", "loving", "CodeMirror", "NUMBER", "Oh", "no", "that", "be", "going", "to", "be", "slow", "NUMBER", "I", "suppose", "I", "ll", "have", "to", "count", "up", "the", "number", "of", "newlines", "before", "where", "I", "want", "the", "selection", "to", "start", "and", "end", "and", "calculate", "on", "that", "NUMBER", "I", "don", "t", "suppose", "there", "be", "and", "internal", "optimisations", "that", "would", "help", "with", "this", "Thanks", "I", "didn", "t", "realise", "that", "indexOf", "takes", "a", "start", "position", "that", "helps", "NUMBER", "So", "I", "guess", "I", "ll", "just", "have", "to", "call", "getValue", "to", "return", "the", "entire", "text", "string", "and", "then", "loop", "while", "the", "indexOf", "be", "less", "than", "my", "desired", "position", "NUMBER", "Is", "getValue", "relatively", "quick", "as", "a", "lot", "of", "this", "needs", "to", "happen", "in", "real", "time", "as", "the", "user", "types", "One", "more", "quick", "question", "if", "you", "don", "t", "mind", "NUMBER", "do", "CodeMirror", "always", "use", "n", "or", "will", "IE", "be", "spitting", "out", "r", "n", "as", "that", "could", "throw", "a", "spanner", "in", "the", "works", "NUMBER", "Hi", "Marijn", "I", "discover", "a", "nice", "way", "of", "doing", "this", "so", "I", "will", "be", "make", "a", "pull", "request", "shortly", "to", "include", "a", "coordsFromIndex", "method", "NUMBER", "The", "method", "I", "m", "use", "be", "pretty", "fast", "as", "it", "doesn", "t", "do", "any", "string", "matching", "NUMBER", "The", "function", "basically", "loops", "through", "the", "strings", "in", "the", "lines", "array", "until", "the", "total", "of", "their", "lengths", "so", "far", "exceeds", "the", "index", "we", "be", "interested", "in", "then", "it", "can", "easily", "calculate", "a", "line", "ch", "object", "NUMBER", "The", "line", "comes", "from", "which", "line", "it", "s", "get", "to", "in", "the", "loop", "and", "ch", "be", "calculated", "by", "subtracting", "the", "total", "chars", "in", "previous", "lines", "from", "the", "index", "we", "want", "NUMBER", "The", "function", "also", "takes", "into", "account", "r", "n", "in", "IE", "although", "I", "personally", "think", "it", "would", "be", "best", "to", "stick", "to", "n", "at", "all", "times", "NUMBER", "I", "have", "add", "the", "method", "write", "some", "test", "for", "it", "and", "update", "manual", "NUMBER", "html", "with", "the", "new", "method", "NUMBER", "Pull", "request", "on", "it", "s", "way", "NUMBER", "Thanks", "for", "your", "pointers", "on", "this", "NUMBER", "Pull", "request", "here", "for", "reference", "should", "anyone", "come", "across", "this", "ticket", "LINK", "Hi", "marijnh", "I", "did", "create", "tiddlywiki", "NUMBER", "js", "mode", "for", "CM", "NUMBER", "index", "NUMBER", "html", "and", "css", "be", "include", "NUMBER", "There", "should", "be", "a", "TwMixed", "mode", "in", "the", "future", "which", "should", "handle", "html", "js", "css", "and", "TW", "syntax", "at", "once", "NUMBER", "How", "to", "use", "it", "with", "TiddlyWiki", "can", "be", "seen", "at", "LINK", "syntax", "mode", "tiddlywiki", "tiddlywiki", "NUMBER", "js", "have", "fun", "mario", "I", "choose", "to", "have", "different", "styles", "because", "of", "a", "future", "mix", "mode", "NUMBER", "eg", "something", "like", "this", "TiddlyWiki", "style", "content", "outside", "of", "a", "code", "block", "NUMBER", "NUMBER", "myStyle", "In", "TW", "syntax", "be", "a", "start", "of", "CSS", "code", "block", "NUMBER", "So", "the", "outside", "be", "TW", "rendered", "and", "inside", "it", "should", "be", "CSS", "rendered", "NUMBER", "At", "the", "moment", "the", "tiddlywiki", "NUMBER", "js", "only", "styles", "and", "and", "doesn", "t", "deal", "with", "the", "code", "in", "between", "NUMBER", "imo", "there", "should", "be", "a", "difference", "between", "TW", "syntax", "and", "other", "standard", "syntax", "modes", "NUMBER", "May", "be", "if", "I", "integrate", "the", "mix", "mode", "it", "turns", "out", "that", "I", "m", "totally", "wrong", "NUMBER", "Or", "there", "s", "a", "lot", "of", "feedback", "to", "change", "it", "NUMBER", "I", "ll", "change", "it", "m", "line", "NUMBER", "function", "attributes", "type", "if", "type", "word", "type", "string", "setStyle", "attribute", "return", "cont", "attributes", "if", "type", "equals", "return", "cont", "attvalue", "attributes", "return", "pass", "i", "add", "string", "to", "be", "a", "valid", "attribute", "NUMBER", "that", "way", "i", "can", "have", "strings", "within", "a", "tag", "and", "still", "keep", "the", "syntax", "highlight", "intact", "NUMBER", "i", "need", "this", "for", "a", "cms", "application", "that", "expects", "a", "string", "within", "the", "tag", "without", "a", "i", "be", "not", "sure", "if", "this", "be", "less", "then", "NUMBER", "html", "standard", "but", "without", "this", "fix", "the", "html", "syntax", "highlight", "goes", "totally", "cracy", "if", "you", "enter", "just", "a", "string", "NUMBER", "example", "TAG", "TAG", "TAG", "TAG", "the", "TAG", "TAG", "part", "will", "be", "red", "with", "exist", "xml", "NUMBER", "js", "with", "my", "little", "fix", "it", "will", "stay", "ok", "and", "still", "recognice", "error", "for", "not", "matching", "tags", "NUMBER", "hope", "this", "will", "find", "its", "way", "into", "the", "sources", "NUMBER", "regards", "matthias", "in", "chrome", "NUMBER", "not", "in", "NUMBER", "pressing", "del", "works", "only", "every", "NUMBER", "time", "NUMBER", "you", "have", "to", "press", "del", "NUMBER", "times", "to", "delete", "the", "next", "charakter", "NUMBER", "seems", "to", "work", "fine", "in", "the", "development", "version", "i", "downloaded", "yesterday", "NUMBER", "do", "this", "mean", "there", "be", "someone", "work", "on", "that", "or", "be", "it", "just", "coincidence", "no", "i", "did", "not", "NUMBER", "my", "chrome", "version", "be", "NUMBER", "m", "you", "should", "be", "able", "to", "reproduce", "it", "with", "this", "version", "NUMBER", "it", "use", "to", "ocur", "on", "the", "codemirror", "NUMBER", "net", "website", "on", "the", "demo", "pages", "NUMBER", "since", "yesterday", "it", "did", "not", "ocur", "anymore", "so", "i", "downloaded", "the", "last", "developer", "version", "and", "now", "my", "programm", "runs", "fine", "in", "chrome", "NUMBER", "the", "version", "i", "use", "before", "was", "NUMBER", "let", "me", "know", "if", "i", "can", "be", "of", "any", "help", "i", "can", "not", "reproduce", "it", "anymore", "either", "NUMBER", "but", "be", "asured", "it", "was", "there", "NUMBER", "i", "also", "report", "the", "bug", "to", "the", "chromium", "team", "NUMBER", "maybe", "they", "fix", "it", "NUMBER", "and", "you", "were", "right", "assuming", "a", "chrome", "update", "happened", "NUMBER", "not", "to", "NUMBER", "but", "to", "the", "next", "step", "version", "as", "describe", "above", "NUMBER", "the", "bug", "definetly", "appeard", "with", "NUMBER", "and", "chrome", "NUMBER", "m", "sorry", "for", "any", "trouble", "NUMBER", "thx", "matthias", "All", "modern", "code", "editors", "have", "the", "ability", "to", "collapse", "blocks", "of", "code", "use", "icons", "in", "the", "gutter", "NUMBER", "Could", "this", "be", "do", "in", "CodeMirror", "I", "use", "CM", "for", "HTML", "CSS", "LESS", "editing", "and", "the", "ability", "to", "collapse", "whole", "nested", "blocks", "of", "LESS", "CSS", "down", "while", "I", "work", "on", "other", "areas", "would", "be", "amazing", "NUMBER", "Not", "cleanly", "yet", "NUMBER", "This", "be", "relate", "to", "line", "wrapping", "NUMBER", "It", "s", "clear", "how", "it", "should", "be", "implement", "but", "I", "don", "t", "have", "the", "time", "to", "actually", "implement", "it", "NUMBER", "I", "ve", "not", "seen", "any", "other", "editors", "that", "do", "this", "online", "and", "it", "would", "be", "a", "huge", "selling", "point", "for", "codemirror", "NUMBER", "Something", "to", "shout", "about", "I", "agree", "this", "would", "be", "an", "awesome", "feature", "NUMBER", "hades", "NUMBER", "ace", "already", "support", "this", "I", "also", "would", "love", "to", "see", "this", "feature", "implimented", "NUMBER", "Daniel", "Hug", "LINK", "as", "you", "can", "see", "code", "folding", "was", "already", "implement", "and", "LINK", "was", "close", "a", "year", "ago", "NUMBER", "Enjoy", "Daniel", "Hug", "jankeromnes", "And", "an", "even", "better", "folding", "demo", "in", "v", "NUMBER", "LINK", "start", "end", "tags", "be", "collapsed", "onto", "the", "same", "line", "NUMBER", "When", "a", "character", "be", "selected", "in", "the", "editor", "and", "same", "character", "be", "pressed", "on", "the", "keyboard", "codemirror", "proceed", "like", "there", "isn", "t", "any", "change", "in", "readInput", "function", "NUMBER", "On", "the", "other", "hand", "it", "continues", "to", "process", "some", "part", "of", "code", "like", "there", "be", "a", "change", "NUMBER", "Therefore", "readInput", "gives", "wrong", "parameters", "to", "updateLines", "so", "updateLines", "gives", "to", "updateLinesNoUndo", "NUMBER", "After", "these", "problem", "we", "can", "t", "change", "selecting", "text", "with", "character", "which", "we", "broke", "by", "selecting", "and", "pressing", "NUMBER", "I", "fix", "this", "issue", "by", "add", "change", "true", "before", "if", "change", "line", "NUMBER", "NUMBER", "But", "i", "can", "t", "be", "sure", "if", "this", "break", "something", "else", "NUMBER", "To", "see", "issue", "by", "trying", "select", "TAG", "TAG", "TAG", "TAG", "Code", "Mirror", "Scroll", "Bug", "TAG", "TAG", "TAG", "TAG", "body", "position", "absolute", "left", "NUMBER", "px", "right", "NUMBER", "px", "top", "NUMBER", "px", "bottom", "NUMBER", "px", "overflow", "hidden", "div", "outer_vbox", "height", "NUMBER", "div", "container", "overflow", "scroll", "border", "NUMBER", "px", "solid", "black", "padding", "NUMBER", "px", "margin", "NUMBER", "px", "NUMBER", "CodeMirror", "border", "NUMBER", "px", "solid", "black", "padding", "NUMBER", "px", "margin", "NUMBER", "px", "NUMBER", "CodeMirror", "scroll", "height", "auto", "overflow", "y", "hidden", "overflow", "x", "auto", "NUMBER", "vbox", "display", "webkit", "box", "webkit", "box", "orient", "vertical", "webkit", "box", "align", "stretch", "display", "moz", "box", "moz", "box", "orient", "vertical", "moz", "box", "align", "stretch", "display", "box", "box", "orient", "vertical", "box", "align", "stretch", "NUMBER", "box", "flex", "webkit", "box", "flex", "NUMBER", "moz", "box", "flex", "NUMBER", "box", "flex", "NUMBER", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "document", "NUMBER", "ready", "function", "var", "add_cell", "function", "var", "code_mirror", "CodeMirror", "div", "container", "NUMBER", "get", "NUMBER", "value", "a", "NUMBER", "div", "container", "NUMBER", "append", "TAG", "Click", "to", "add", "CodeMirror", "editor", "TAG", "NUMBER", "click", "function", "add_cell", "TAG", "TAG", "TAG", "Thanks", "for", "looking", "into", "this", "NUMBER", "It", "looks", "like", "there", "be", "some", "deeper", "bug", "in", "the", "way", "browsers", "and", "handle", "the", "flexible", "box", "model", "in", "situations", "like", "this", "NUMBER", "I", "have", "refactored", "my", "code", "and", "be", "able", "to", "avoid", "the", "issue", "completely", "NUMBER", "This", "can", "be", "close", "NUMBER", "Selecting", "Multiple", "lines", "and", "hitting", "TAB", "to", "indent", "do", "not", "indent", "the", "last", "NUMBER", "selected", "lines", "As", "of", "the", "NUMBER", "NUMBER", "NUMBER", "Version", "NUMBER", "update", "Thanks", "Marijn", "If", "I", "press", "and", "hold", "a", "key", "like", "a", "I", "see", "_one_", "a", "appear", "at", "first", "then", "nothing", "happens", "until", "I", "release", "the", "key", "at", "which", "point", "a", "whole", "bunch", "of", "a", "s", "appears", "NUMBER", "Happens", "on", "JSBin", "and", "also", "on", "this", "demo", "page", "LINK", "NUMBER", "Have", "replicated", "this", "in", "Chrome", "NUMBER", "on", "both", "Linux", "Ubuntu", "NUMBER", "and", "Windows", "NUMBER", "Firefox", "NUMBER", "on", "Linux", "and", "Firefox", "NUMBER", "on", "Windows", "NUMBER", "Using", "CodeMirror", "on", "JSBin", "and", "also", "on", "this", "demo", "page", "LINK", "the", "Up", "and", "Down", "arrow", "keys", "don", "t", "repeat", "reliably", "at", "all", "NUMBER", "This", "be", "relatively", "recent", "I", "only", "notice", "a", "couple", "of", "weeks", "ago", "as", "of", "a", "big", "update", "at", "JSBin", "prior", "to", "that", "it", "worked", "NUMBER", "Have", "replicated", "this", "in", "Chrome", "NUMBER", "on", "both", "Linux", "Ubuntu", "NUMBER", "and", "Windows", "NUMBER", "Firefox", "NUMBER", "on", "Linux", "and", "Firefox", "NUMBER", "on", "Windows", "NUMBER", "marijnh", "If", "I", "m", "at", "the", "bottom", "of", "the", "demo", "area", "and", "press", "and", "hold", "the", "Up", "arrow", "it", "ll", "usually", "go", "up", "one", "line", "then", "nothing", "until", "I", "release", "the", "key", "and", "then", "it", "goes", "up", "again", "NUMBER", "On", "rare", "occasions", "it", "ll", "sputter", "along", "but", "usually", "not", "at", "all", "NUMBER", "I", "can", "be", "holding", "the", "key", "quite", "a", "long", "time", "NUMBER", "The", "computer", "be", "pretty", "quick", "processor", "be", "an", "Intel", "i", "NUMBER", "Core", "NUMBER", "dual", "core", "each", "hyperthreaded", "at", "NUMBER", "GHz", "NUMBER", "Odd", "thing", "btw", "It", "doesn", "t", "happen", "if", "I", "m", "recording", "with", "screenr", "NUMBER", "marijnh", "As", "I", "said", "this", "doesn", "t", "happen", "in", "normal", "text", "areas", "so", "it", "s", "not", "just", "my", "normal", "key", "repeat", "NUMBER", "I", "usually", "have", "key", "repeat", "set", "fairly", "quick", "actually", "as", "I", "m", "impatient", "NUMBER", "Changing", "the", "NUMBER", "to", "NUMBER", "didn", "t", "make", "any", "difference", "NUMBER", "Don", "t", "worry", "I", "_did_", "check", "to", "make", "sure", "the", "browser", "had", "pick", "up", "the", "change", "NUMBER", "Also", "not", "knowing", "remotely", "what", "it", "controls", "for", "fits", "and", "giggles", "I", "tried", "NUMBER", "and", "NUMBER", "as", "well", "no", "difference", "NUMBER", "No", "script", "error", "NUMBER", "Apologies", "for", "this", "wasn", "t", "expecting", "such", "a", "fast", "a", "response", "from", "your", "end", "but", "I", "ll", "have", "to", "leave", "any", "further", "debugging", "until", "tomorrow", "NUMBER", "But", "I", "will", "keep", "trying", "things", "as", "directed", "to", "help", "get", "to", "the", "bottom", "of", "it", "NUMBER", "Can", "confirm", "that", "the", "behavior", "do", "not", "replicate", "for", "me", "on", "my", "notebook", "use", "Chrome", "NUMBER", "and", "Windows", "NUMBER", "So", "it", "s", "something", "about", "my", "Ubuntu", "NUMBER", "desktop", "which", "reliably", "replicates", "it", "both", "in", "browsers", "run", "on", "the", "native", "OS", "and", "in", "a", "Windows", "NUMBER", "VM", "NUMBER", "Just", "a", "bump", "I", "m", "seeing", "this", "behavior", "for", "CodeMirror", "NUMBER", "in", "Chrome", "NUMBER", "on", "Mac", "OS", "NUMBER", "It", "s", "noticeably", "slower", "than", "the", "key", "repeat", "rate", "for", "the", "rest", "of", "the", "system", "text", "boxes", "NUMBER", "This", "be", "almost", "certainly", "a", "symptom", "of", "the", "old", "cursor", "handle", "kludge", "NUMBER", "The", "kludge", "be", "gone", "in", "current", "HEAD", "NUMBER", "I", "can", "confirm", "that", "this", "be", "now", "sorted", "NUMBER", "Thanks", "Fix", "for", "Issue", "NUMBER", "LINK", "Credit", "surenm", "Steps", "to", "Reproduce", "NUMBER", "Set", "codemirror", "to", "clike", "mode", "eg", "NUMBER", "LINK", "NUMBER", "Enter", "any", "preprocessor", "directive", "eg", "NUMBER", "include", "TAG", "NUMBER", "Hit", "enter", "Expected", "Behavior", "No", "indenting", "should", "occur", "Observed", "Behavior", "The", "new", "line", "be", "indented", "by", "one", "indent", "unit", "NUMBER", "I", "ve", "a", "strange", "problem", "with", "Codemirror", "NUMBER", "In", "a", "gwt", "application", "we", "re", "use", "a", "widget", "with", "codemirror", "to", "show", "xml", "file", "NUMBER", "The", "widget", "has", "an", "horizontal", "scrollbar", "For", "some", "big", "file", "and", "use", "the", "scrollbar", "the", "file", "be", "not", "shown", "TAG", "be", "not", "there", "NUMBER", "You", "ve", "to", "select", "this", "empty", "space", "to", "make", "the", "rest", "of", "the", "content", "exist", "by", "magic", "NUMBER", "Also", "in", "stackoverflow", "LINK", "not", "showing", "all", "lines", "Thanks", "a", "lot", "for", "the", "great", "library", "Eventually", "we", "get", "the", "problem", "our", "side", "issue", "sorry", "CodeMirror", "scroll", "was", "miss", "from", "the", "css", "NUMBER", "Now", "it", "s", "work", "nicely", "NUMBER", "CodeMirror", "scroll", "overflow", "auto", "height", "NUMBER", "This", "be", "needed", "to", "prevent", "an", "IE", "NUMBER", "bug", "where", "the", "scrolled", "content", "be", "visible", "outside", "of", "the", "scrolling", "box", "NUMBER", "position", "relative", "If", "I", "type", "alert", "test", "and", "press", "enter", "the", "line", "be", "automatically", "indented", "NUMBER", "This", "be", "annoying", "NUMBER", "Any", "time", "I", "paste", "or", "use", "content", "with", "NUMBER", "space", "hard", "tabs", "it", "be", "rendered", "with", "twice", "as", "many", "spaces", "a", "NUMBER", "space", "tab", "turns", "into", "NUMBER", "NUMBER", "This", "happens", "reliably", "across", "all", "browsers", "NUMBER", "Argh", "not", "having", "tab", "space", "support", "be", "so", "frustrating", "NUMBER", "I", "be", "applying", "codemirror", "to", "a", "text", "area", "that", "contains", "fragment", "of", "PHP", "without", "the", "TAG", "HEY", "TAG", "you", "should", "see", "the", "preview", "NUMBER", "Hi", "I", "have", "just", "start", "use", "this", "very", "nice", "project", "and", "I", "had", "faced", "the", "problem", "when", "I", "tried", "to", "minify", "codemirror", "NUMBER", "js", "by", "Microsoft", "Ajax", "Minifier", "TAG", "TAG", "AjaxMin", "NUMBER", "exe", "codemirror", "NUMBER", "js", "o", "codemirror", "NUMBER", "min", "NUMBER", "js", "Microsoft", "Ajax", "Minifier", "JavaScript", "and", "CSS", "minification", "and", "verification", "utility", "Copyright", "NUMBER", "Microsoft", "Corporation", "Minifying", "file", "codemirror", "NUMBER", "js", "NUMBER", "codemirror", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "run", "time", "error", "JS", "NUMBER", "Ambiguous", "reference", "to", "named", "function", "ex", "pression", "NUMBER", "Cross", "browser", "behavior", "difference", "splitLines", "codemirror", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "run", "time", "error", "JS", "NUMBER", "Ambiguous", "reference", "to", "named", "function", "e", "xpression", "NUMBER", "Cross", "browser", "behavior", "difference", "setSelRange", "codemirror", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "run", "time", "error", "JS", "NUMBER", "Ambiguous", "reference", "to", "named", "function", "ex", "pression", "NUMBER", "Cross", "browser", "behavior", "difference", "selRange", "codemirror", "NUMBER", "js", "NUMBER", "NUMBER", "NUMBER", "run", "time", "error", "JS", "NUMBER", "Ambiguous", "reference", "to", "named", "function", "ex", "pression", "NUMBER", "Cross", "browser", "behavior", "difference", "setSelRange", "Original", "Size", "NUMBER", "bytes", "reduced", "size", "NUMBER", "bytes", "NUMBER", "minification", "Gzip", "of", "output", "approximately", "NUMBER", "bytes", "NUMBER", "compression", "TAG", "TAG", "in", "chrome", "pressing", "tab", "and", "backspace", "repeatedly", "breaks", "the", "format", "and", "the", "codemirror", "windows", "ends", "up", "broken", "NUMBER", "use", "Chrome", "version", "NUMBER", "at", "this", "time", "NUMBER", "Hope", "you", "will", "be", "able", "to", "fix", "this", "NUMBER", "It", "seems", "to", "be", "a", "setting", "we", "have", "enable", "as", "LINK", "do", "not", "show", "this", "error", "NUMBER", "Could", "you", "think", "of", "any", "setting", "that", "would", "cause", "this", "anywhere", "you", "purpose", "I", "look", "Timing", "this", "out", "NUMBER", "Reopen", "if", "you", "see", "it", "again", "NUMBER", "Added", "MIME", "application", "x", "httpd", "php", "open", "for", "PHP", "mode", "that", "starts", "in", "PHP", "NUMBER", "Hi", "there", "As", "I", "understand", "it", "the", "mode", "option", "can", "be", "either", "a", "string", "or", "an", "object", "NUMBER", "If", "it", "s", "a", "string", "it", "can", "be", "either", "the", "name", "of", "a", "mode", "directly", "or", "a", "MIME", "type", "defined", "by", "a", "mode", "NUMBER", "If", "it", "s", "an", "object", "however", "the", "name", "property", "can", "only", "specify", "a", "mode", "not", "a", "MIME", "type", "NUMBER", "Thus", "it", "be", "currently", "impossible", "to", "use", "parameters", "together", "with", "MIME", "types", "NUMBER", "This", "ability", "would", "be", "useful", "in", "order", "to", "specify", "for", "example", "that", "the", "content", "type", "be", "text", "x", "python", "and", "that", "the", "version", "thereof", "be", "NUMBER", "In", "order", "to", "enable", "this", "functionality", "I", "ve", "thought", "of", "two", "ways", "to", "do", "it", "NUMBER", "The", "simplest", "way", "be", "to", "allow", "name", "NUMBER", "in", "the", "mode", "object", "to", "refer", "to", "a", "MIME", "type", "NUMBER", "The", "spec", "be", "then", "merge", "with", "whatever", "parameters", "be", "provide", "e", "NUMBER", "g", "NUMBER", "version", "to", "create", "the", "config", "NUMBER", "NUMBER", "Alternatively", "the", "MIME", "type", "string", "can", "be", "allow", "to", "have", "inline", "parameters", "as", "they", "be", "elsewhere", "NUMBER", "For", "example", "to", "specify", "the", "above", "one", "could", "use", "text", "x", "python", "version", "NUMBER", "NUMBER", "The", "parameters", "can", "be", "parsed", "and", "merge", "with", "the", "spec", "NUMBER", "One", "quick", "and", "dirty", "way", "to", "implement", "the", "first", "option", "be", "as", "follows", "js", "CodeMirror", "NUMBER", "getMode", "function", "options", "spec", "if", "typeof", "spec", "string", "mimeModes", "NUMBER", "hasOwnProperty", "spec", "spec", "mimeModes", "spec", "else", "if", "spec", "null", "mimeModes", "NUMBER", "hasOwnProperty", "spec", "NUMBER", "name", "var", "mode", "mimeModes", "spec", "NUMBER", "name", "if", "typeof", "mode", "string", "spec", "mode", "else", "for", "var", "m", "in", "mode", "if", "spec", "NUMBER", "hasOwnProperty", "m", "spec", "m", "mode", "m", "if", "typeof", "spec", "string", "var", "mname", "spec", "config", "else", "if", "spec", "null", "Thanks", "Thus", "it", "be", "currently", "impossible", "to", "use", "parameters", "together", "with", "MIME", "types", "NUMBER", "This", "be", "by", "design", "MIME", "types", "be", "intended", "to", "be", "specializations", "of", "regular", "named", "modes", "NUMBER", "I", "originally", "did", "it", "this", "way", "because", "there", "were", "plan", "to", "have", "a", "common", "mode", "format", "shared", "with", "the", "ACE", "editor", "and", "the", "propose", "system", "use", "MIME", "types", "to", "identify", "modes", "NUMBER", "ACE", "has", "made", "no", "move", "to", "support", "this", "format", "so", "it", "s", "not", "really", "a", "priority", "anymore", "for", "CodeMirror", "either", "NUMBER", "Why", "do", "you", "want", "to", "use", "a", "MIME", "type", "here", "not", "just", "a", "regular", "mode", "name", "Why", "do", "you", "want", "to", "use", "a", "MIME", "type", "here", "not", "just", "a", "regular", "mode", "name", "Mainly", "for", "two", "reasons", "First", "external", "content", "providers", "supply", "a", "MIME", "type", "but", "not", "a", "mode", "name", "since", "they", "don", "t", "know", "about", "CodeMirror", "NUMBER", "If", "I", "were", "to", "use", "a", "mode", "name", "directly", "I", "d", "have", "to", "maintain", "a", "manual", "mapping", "between", "MIMEs", "and", "modes", "which", "seems", "wrongheaded", "when", "CodeMirror", "already", "handles", "that", "very", "elegantly", "NUMBER", "Second", "more", "importantly", "in", "some", "cases", "that", "be", "the", "only", "way", "to", "handle", "certain", "content", "NUMBER", "For", "example", "say", "I", "wanted", "to", "load", "a", "C", "file", "NUMBER", "The", "clike", "mode", "do", "not", "name", "a", "version", "for", "that", "only", "a", "MIME", "type", "viz", "NUMBER", "text", "x", "c", "src", "NUMBER", "Or", "be", "I", "miss", "something", "NUMBER", "The", "first", "problem", "seems", "odd", "if", "they", "can", "supply", "MIME", "types", "not", "mode", "names", "they", "also", "can", "t", "supply", "MIME", "types", "with", "funny", "CodeMirror", "specific", "options", "embedded", "in", "them", "NUMBER", "The", "second", "concern", "be", "valid", "though", "but", "I", "think", "the", "solution", "be", "to", "define", "a", "new", "mode", "name", "NUMBER", "In", "case", "of", "the", "Python", "mode", "there", "s", "already", "python", "but", "say", "you", "wanted", "to", "handle", "multiple", "version", "of", "C", "you", "d", "use", "CodeMirror", "NUMBER", "defineMode", "instead", "of", "CodeMirror", "NUMBER", "defineMIME", "to", "define", "a", "C", "mode", "which", "just", "calls", "through", "to", "the", "clike", "mode", "but", "pass", "a", "different", "set", "of", "keywords", "say", "depending", "on", "the", "version", "NUMBER", "Does", "that", "sound", "sane", "The", "first", "problem", "seems", "odd", "if", "they", "can", "supply", "MIME", "types", "not", "mode", "names", "they", "also", "can", "t", "supply", "MIME", "types", "with", "funny", "CodeMirror", "specific", "options", "embedded", "in", "them", "NUMBER", "That", "s", "true", "though", "in", "my", "case", "the", "parameter", "I", "m", "interested", "in", "the", "version", "be", "semantic", "so", "it", "s", "supplied", "independently", "of", "the", "editor", "NUMBER", "Does", "that", "sound", "sane", "I", "m", "not", "sure", "I", "ve", "fully", "understood", "NUMBER", "Is", "your", "suggestion", "to", "give", "all", "specializations", "names", "instead", "of", "MIME", "types", "If", "so", "then", "yes", "it", "do", "sound", "sane", "to", "me", "as", "that", "way", "there", "will", "be", "a", "one", "to", "one", "correspondence", "NUMBER", "For", "example", "you", "could", "have", "clike", "c", "clike", "csharp", "clike", "java", "and", "so", "on", "NUMBER", "Or", "just", "c", "csharp", "java", "etc", "NUMBER", "which", "be", "more", "intuitive", "NUMBER", "I", "assume", "that", "then", "MIME", "types", "can", "be", "associated", "with", "named", "specializations", "NUMBER", "E", "NUMBER", "g", "NUMBER", "text", "x", "c", "src", "clike", "c", "NUMBER", "Yeah", "I", "think", "that", "makes", "sense", "the", "mode", "can", "be", "address", "by", "its", "name", "or", "MIME", "type", "NUMBER", "Works", "fine", "on", "CodeMirror", "NUMBER", "b", "NUMBER", "buggy", "on", "NUMBER", "For", "example", "if", "we", "scroll", "somewhere", "on", "editor", "lets", "say", "scrollTop", "be", "NUMBER", "px", "and", "add", "a", "widget", "to", "a", "point", "in", "the", "visible", "area", "lets", "say", "NUMBER", "px", "left", "NUMBER", "px", "top", "editor", "add", "widget", "to", "x", "NUMBER", "y", "NUMBER", "correctly", "but", "scrolls", "to", "x", "NUMBER", "y", "NUMBER", "instead", "of", "scrolling", "to", "x", "NUMBER", "y", "NUMBER", "NUMBER", "addWidget", "function", "pos", "node", "scroll", "var", "pos", "localCoords", "clipPos", "pos", "true", "node", "NUMBER", "yle", "NUMBER", "top", "showingFrom", "lineHeight", "pos", "NUMBER", "yBot", "paddingTop", "px", "node", "NUMBER", "yle", "NUMBER", "left", "pos", "NUMBER", "x", "paddingLeft", "px", "code", "NUMBER", "appendChild", "node", "if", "scroll", "scrollIntoView", "pos", "NUMBER", "x", "pos", "NUMBER", "yBot", "pos", "NUMBER", "x", "node", "NUMBER", "offsetWidth", "pos", "NUMBER", "yBot", "node", "NUMBER", "offsetHeight", "showingFrom", "lineHeight", "should", "also", "be", "add", "to", "y", "position", "when", "calling", "scrollIntoView", "as", "it", "be", "add", "when", "setting", "node", "NUMBER", "yle", "NUMBER", "top", "_Note", "_", "For", "one", "thing", "the", "var", "be", "definetely", "useless", "and", "confusing", "there", "because", "a", "variable", "named", "pos", "be", "already", "defined", "as", "an", "argument", "NUMBER", "There", "s", "actually", "a", "bunch", "of", "_out", "of", "scope_", "and", "_already", "defined_", "error", "according", "to", "jshint", "NUMBER", "I", "m", "actually", "thinking", "of", "deprecating", "addWidget", "as", "it", "add", "very", "little", "and", "be", "much", "more", "problematic", "than", "just", "putting", "the", "widget", "outside", "of", "the", "editor", "like", "demo", "complete", "NUMBER", "html", "do", "NUMBER", "Can", "you", "try", "going", "that", "way", "and", "letting", "me", "know", "whether", "you", "encounter", "any", "problem", "As", "for", "jshint", "it", "has", "different", "opinions", "about", "what", "JS", "code", "should", "look", "like", "than", "I", "do", "so", "CM", "will", "probably", "never", "come", "up", "clean", "there", "NUMBER", "marijnh", "Yes", "I", "understand", "that", "you", "have", "your", "own", "code", "discipline", "there", "s", "nothing", "wrong", "with", "that", "NUMBER", "But", "dismissing", "tool", "like", "JSHint", "_altogether_", "isn", "t", "the", "right", "approach", "NUMBER", "I", "think", "if", "you", "look", "into", "this", "case", "for", "example", "there", "be", "no", "reason", "why", "you", "would", "want", "to", "have", "var", "before", "pos", "when", "it", "s", "already", "defined", "NUMBER", "It", "will", "be", "ignored", "by", "the", "interpreter", "but", "can", "lead", "to", "confusion", "to", "someone", "reading", "the", "code", "NUMBER", "Another", "problem", "be", "that", "it", "s", "incosistent", "with", "other", "parts", "of", "the", "code", "NUMBER", "E", "NUMBER", "g", "line", "NUMBER", "function", "replaceRange", "code", "from", "to", "from", "clipPos", "from", "Same", "situation", "no", "var", "before", "the", "already", "defined", "variable", "from", "NUMBER", "I", "dont", "think", "add", "widget", "outside", "of", "the", "editor", "would", "cause", "any", "problem", "because", "currently", "i", "use", "addWidget", "with", "no", "problem", "by", "setting", "scroll", "parameter", "to", "false", "NUMBER", "On", "second", "thought", "addWidget", "wasn", "t", "as", "flaky", "as", "I", "imagined", "NUMBER", "It", "won", "t", "update", "the", "widget", "position", "when", "lines", "be", "add", "remove", "but", "it", "_will_", "make", "the", "widget", "scroll", "with", "the", "editor", "content", "NUMBER", "So", "I", "m", "not", "deprecating", "it", "and", "I", "think", "I", "ve", "fix", "this", "bug", "in", "NUMBER", "cfc", "NUMBER", "c", "NUMBER", "cd", "NUMBER", "d", "NUMBER", "a", "NUMBER", "f", "NUMBER", "e", "NUMBER", "b", "NUMBER", "bcff", "please", "verify", "NUMBER", "The", "main", "problem", "be", "fix", "but", "because", "of", "use", "the", "vcoords", "to", "scroll", "editor", "doesn", "t", "scroll", "to", "show", "all", "the", "content", "of", "the", "widget", "NUMBER", "my", "solution", "for", "this", "issue", "was", "addWidget", "function", "pos", "node", "scroll", "pos", "localCoords", "clipPos", "pos", "true", "node", "NUMBER", "yle", "NUMBER", "visibility", "hidden", "code", "NUMBER", "appendChild", "node", "var", "ntop", "showingFrom", "lineHeight", "pos", "NUMBER", "yBot", "nh", "node", "NUMBER", "offsetHeight", "nw", "node", "NUMBER", "offsetWidth", "if", "ntop", "paddingTop", "Math", "NUMBER", "max", "code", "NUMBER", "offsetHeight", "wrapper", "NUMBER", "offsetHeight", "nh", "ntop", "ntop", "lineHeight", "nh", "node", "NUMBER", "yle", "NUMBER", "top", "ntop", "paddingTop", "px", "node", "NUMBER", "yle", "NUMBER", "left", "Math", "NUMBER", "min", "pos", "NUMBER", "x", "paddingLeft", "Math", "NUMBER", "max", "code", "NUMBER", "offsetWidth", "lineSpace", "NUMBER", "offsetWidth", "nw", "NUMBER", "px", "NUMBER", "be", "needed", "but", "i", "dont", "know", "why", "node", "NUMBER", "yle", "NUMBER", "visibility", "if", "scroll", "scrollIntoView", "pos", "NUMBER", "x", "ntop", "pos", "NUMBER", "x", "nw", "ntop", "nh", "This", "one", "scrolls", "to", "widget", "like", "the", "old", "code", "and", "also", "sets", "widget", "coordinates", "to", "not", "to", "overflow", "current", "code", "element", "NUMBER", "i", "NUMBER", "e", "NUMBER", "if", "addWidget", "be", "call", "for", "the", "last", "line", "in", "editor", "it", "be", "add", "to", "top", "of", "the", "current", "line", "instead", "of", "add", "to", "bottom", "and", "cause", "scroller", "to", "move", "NUMBER", "i", "add", "this", "control", "because", "its", "really", "annoying", "when", "editor", "scrolls", "down", "for", "widget", "and", "scrolls", "back", "when", "widget", "be", "remove", "NUMBER", "I", "see", "the", "problem", "NUMBER", "However", "your", "solution", "seems", "too", "intimately", "tied", "to", "your", "application", "to", "make", "much", "sense", "as", "a", "general", "API", "NUMBER", "I", "m", "starting", "to", "lean", "towards", "deprecating", "again", "this", "method", "be", "breaking", "so", "many", "abstraction", "barriers", "that", "it", "ll", "probably", "never", "be", "solid", "NUMBER", "Have", "you", "tried", "just", "keep", "your", "widget", "external", "to", "the", "editor", "How", "do", "that", "work", "out", "I", "haven", "t", "tried", "external", "widget", "but", "similar", "problem", "would", "occur", "when", "it", "be", "add", "close", "to", "browser", "window", "edges", "NUMBER", "I", "also", "think", "its", "better", "when", "widget", "do", "not", "overflow", "from", "the", "editor", "as", "external", "do", "and", "scrolls", "with", "the", "content", "NUMBER", "There", "be", "NUMBER", "differences", "and", "a", "bug", "bug", "widget", "be", "add", "to", "wrong", "position", "when", "horizontal", "scrollbar", "be", "shown", "and", "scrollLeft", "be", "not", "zero", "NUMBER", "this", "can", "be", "fix", "by", "use", "Math", "NUMBER", "max", "code", "NUMBER", "clientWidth", "lineSpace", "NUMBER", "clientWidth", "instead", "of", "code", "NUMBER", "clientWidth", "when", "calculating", "hspace", "diff", "NUMBER", "Widget", "use", "to", "be", "add", "below", "current", "line", "but", "it", "be", "add", "over", "the", "line", "in", "new", "code", "NUMBER", "I", "think", "this", "be", "because", "of", "use", "pos", "NUMBER", "y", "instead", "of", "pos", "NUMBER", "yBot", "when", "setting", "top", "NUMBER", "It", "would", "be", "better", "use", "pos", "NUMBER", "yBot", "on", "fit", "mode", "NUMBER", "diff", "NUMBER", "On", "the", "code", "I", "pasted", "NUMBER", "message", "above", "it", "behaved", "different", "for", "preventing", "vertical", "and", "horizontal", "overflows", "such", "as", "horizontal", "fits", "widget", "to", "rightmost", "edge", "of", "editor", "content", "to", "prevent", "expanding", "NUMBER", "_", "this", "be", "same", "with", "yours", "_", "vertical", "to", "keep", "curent", "line", "visible", "add", "widget", "above", "current", "line", "instead", "of", "fitting", "to", "bottom", "NUMBER", "i", "mean", "i", "prefer", "pos", "NUMBER", "y", "node", "NUMBER", "offsetHeight", "over", "vspace", "node", "NUMBER", "offsetHeight", "when", "calculating", "top", "NUMBER", "All", "issue", "seems", "fix", "on", "this", "commit", "NUMBER", "I", "ve", "test", "this", "on", "mix", "mode", "demo", "TAG", "NUMBER", "TAG", "and", "with", "the", "latest", "jQuery", "source", "TAG", "NUMBER", "TAG", "as", "an", "example", "NUMBER", "There", "be", "two", "general", "cases", "NUMBER", "Simply", "paste", "jQuery", "into", "the", "exist", "TAG", "tags", "NUMBER", "Last", "few", "lines", "be", "not", "highlight", "NUMBER", "NUMBER", "Paste", "jQuery", "into", "an", "empty", "document", "_then_", "wrap", "it", "into", "TAG", "tags", "NUMBER", "Highlighting", "be", "completely", "messed", "up", "NUMBER", "My", "first", "bet", "was", "the", "regexes", "but", "in", "Javascript", "only", "mode", "it", "works", "as", "expected", "NUMBER", "Tested", "in", "latest", "Chrome", "and", "Firefox", "NUMBER", "That", "s", "all", "I", "have", "NUMBER", "Peace", "bro", "NUMBER", "LINK", "NUMBER", "LINK", "NUMBER", "js", "Here", "s", "a", "feature", "request", "for", "translating", "tab", "to", "spaces", "NUMBER", "like", "one", "tab", "two", "or", "four", "spaces", "Code", "mirror", "use", "pre", "to", "emulate", "tabs", "but", "the", "default", "tab", "width", "in", "browser", "be", "too", "big", "A", "suggestion", "be", "to", "create", "a", "option", "to", "use", "spaces", "with", "a", "xml", "tab", "wrapper", "to", "instead", "of", "tab", "NUMBER", "That", "will", "make", "it", "more", "useful", "although", "I", "think", "it", "also", "will", "gain", "some", "performance", "cost", "NUMBER", "I", "mean", "it", "s", "still", "a", "tab", "in", "value", "but", "use", "spaces", "in", "view", "NUMBER", "What", "actually", "I", "want", "be", "a", "tab", "size", "feature", "That", "make", "sense", "for", "almost", "all", "modern", "editor", "like", "in", "Notepad", "it", "has", "a", "tab", "size", "to", "adjust", "the", "tab", "view", "NUMBER", "LINK", "It", "s", "just", "a", "feature", "request", "i", "could", "handle", "it", "well", "by", "myself", "I", "be", "fine", "if", "you", "think", "that", "s", "still", "a", "trivial", "one", "NUMBER", "But", "I", "think", "it", "s", "still", "a", "common", "usage", "for", "editors", "and", "worth", "to", "post", "a", "feature", "request", "for", "me", "NUMBER", "ok", "get", "it", "NUMBER", "Thanks", "anyway", "NUMBER", "Why", "be", "this", "impractical", "Can", "t", "the", "tab", "be", "marked", "up", "with", "a", "span", "in", "which", "we", "can", "change", "the", "letter", "space", "Or", "better", "yet", "why", "not", "auto", "convert", "tabs", "to", "a", "set", "number", "of", "spaces", "and", "just", "treat", "them", "differently", "when", "navigating", "deleting", "etc", "This", "be", "a", "must", "have", "for", "any", "text", "editor", "for", "sure", "NUMBER", "Here", "be", "the", "change", "discussed", "here", "LINK", "_thread", "thread", "NUMBER", "f", "NUMBER", "a", "NUMBER", "cd", "NUMBER", "bc", "NUMBER", "f", "NUMBER", "The", "change", "make", "it", "possible", "to", "extend", "CodeMirror", "with", "new", "API", "function", "which", "have", "access", "both", "to", "other", "API", "function", "and", "to", "CodeMirror", "internal", "objects", "like", "sel", "for", "example", "NUMBER", "Also", "they", "allow", "add", "new", "methods", "and", "properties", "to", "modes", "registered", "in", "the", "CodeMirror", "object", "the", "modes", "be", "extend", "when", "retrieved", "via", "CodeMirror", "NUMBER", "getMode", "NUMBER", "The", "three", "lines", "marked", "as", "remove", "and", "add", "in", "the", "middle", "of", "codemirror", "NUMBER", "js", "be", "not", "my", "change", "looks", "like", "a", "bug", "at", "github", "because", "I", "only", "copy", "pasted", "the", "source", "from", "your", "branch", "and", "inserted", "the", "three", "portions", "of", "new", "code", "NUMBER", "I", "use", "multiple", "commit", "to", "sync", "the", "current", "version", "of", "the", "code", "with", "the", "latest", "version", "of", "CodeMirror", "from", "your", "branch", "NUMBER", "After", "that", "I", "copy", "pasted", "the", "three", "pieces", "of", "new", "code", "as", "you", "see", "there", "be", "only", "NUMBER", "additions", "and", "NUMBER", "deletions", "some", "of", "which", "be", "comments", "and", "false", "positives", "NUMBER", "I", "would", "have", "rolled", "back", "to", "a", "previous", "version", "or", "simply", "re", "created", "my", "repository", "anew", "if", "I", "knew", "the", "number", "of", "commit", "actions", "affects", "smth", "NUMBER", "As", "for", "the", "reformatting", "I", "m", "not", "sure", "what", "problem", "be", "I", "just", "copy", "pasted", "your", "code", "with", "minimal", "change", "and", "never", "applied", "any", "auto", "format", "to", "it", "NUMBER", "Unable", "to", "get", "value", "of", "the", "property", "stateAfter", "object", "be", "null", "or", "undefined", "codemirror", "NUMBER", "js", "line", "NUMBER", "character", "NUMBER", "IE", "NUMBER", "If", "lineHeight", "returns", "NUMBER", "visibleLines", "will", "compute", "a", "result", "of", "NaN", "which", "cascades", "to", "the", "value", "of", "the", "showingFrom", "variable", "resulting", "in", "the", "error", "indicated", "NUMBER", "lineHeight", "can", "return", "NUMBER", "if", "lineDiv", "NUMBER", "offsetHeight", "be", "NUMBER", "and", "nLines", "be", "NUMBER", "How", "be", "it", "possible", "for", "lineDiv", "NUMBER", "offsetHeight", "to", "be", "NUMBER", "Beats", "me", "NUMBER", "I", "m", "integrating", "CM", "NUMBER", "into", "a", "larger", "application", "and", "haven", "t", "find", "a", "way", "to", "reproduce", "this", "in", "a", "standalone", "scenario", "so", "this", "could", "be", "a", "bug", "on", "my", "side", "and", "not", "CM", "s", "fault", "NUMBER", "Regardless", "add", "NUMBER", "to", "the", "end", "of", "if", "nlines", "return", "lineDiv", "NUMBER", "offsetHeight", "nlines", "as", "be", "already", "do", "a", "couple", "lines", "down", "fix", "the", "problem", "and", "may", "be", "worth", "add", "as", "a", "sanity", "check", "NUMBER", "Ah", "yes", "definitely", "some", "display", "none", "going", "on", "NUMBER", "Thanks", "With", "readOnly", "set", "to", "true", "CodeMirror", "should", "ignore", "the", "onFocus", "and", "onBlur", "events", "NUMBER", "Closes", "NUMBER", "Nice", "D", "Any", "particular", "reason", "you", "excluded", "keyup", "and", "only", "include", "keydown", "and", "keypress", "No", "do", "you", "want", "me", "to", "write", "one", "I", "be", "assuming", "you", "mean", "a", "unit", "test", "Oh", "ok", "NUMBER", "I", "be", "use", "the", "keyup", "handler", "for", "live", "syntax", "checking", "and", "saving", "the", "user", "input", "into", "a", "data", "store", "NUMBER", "Using", "it", "in", "stylebot", "LINK", "L", "NUMBER", "Fixed", "issue", "where", "if", "editor", "had", "a", "fix", "position", "or", "had", "a", "parent", "with", "fix", "position", "the", "cursor", "was", "placed", "at", "the", "wrong", "position", "on", "clicks", "NUMBER", "Led", "to", "the", "editor", "becoming", "unresponsive", "NUMBER", "Use", "case", "CodeMirror", "inside", "a", "modal", "popup", "with", "fix", "position", "Try", "this", "foo", "TAG", "TAG", "TAG", "TAG", "TAG", "and", "check", "out", "the", "indentation", "of", "that", "line", "Oh", "sorry", "about", "the", "poor", "report", "here", "be", "the", "details", "mode", "css", "tabMode", "NUMBER", "classic", "indentUnit", "NUMBER", "expected", "the", "mention", "line", "should", "be", "NUMBER", "spaces", "away", "from", "the", "left", "border", "NUMBER", "It", "should", "look", "like", "this", "foo", "behavior", "the", "mention", "line", "be", "NUMBER", "spaces", "away", "from", "the", "left", "border", "NUMBER", "Even", "if", "I", "delete", "the", "content", "of", "the", "line", "and", "retab", "it", "it", "looks", "like", "this", "foo", "Note", "maybe", "it", "has", "something", "to", "do", "with", "the", "tabMode", "anyway", "I", "think", "that", "shouldn", "t", "be", "the", "normal", "behavior", "because", "be", "a", "bit", "misleading", "NUMBER", "Also", "if", "I", "do", "this", "it", "works", "as", "expected", "foo", "TAG", "TAG", "It", "automatically", "gets", "the", "right", "indentation", "on", "the", "blank", "line", "in", "the", "above", "example", "treat", "every", "line", "as", "something", "you", "type", "rduenasf", "enterMode", "Behavior", "when", "Enter", "be", "pressed", "NUMBER", "indent", "be", "the", "default", "NUMBER", "It", "uses", "the", "mode", "s", "indentation", "rules", "to", "give", "the", "new", "line", "the", "correct", "indentation", "NUMBER", "tabMode", "Behavior", "when", "Tab", "be", "pressed", "NUMBER", "classic", "be", "the", "default", "NUMBER", "When", "nothing", "be", "selected", "insert", "a", "tab", "NUMBER", "Otherwise", "behave", "like", "the", "shift", "mode", "NUMBER", "So", "setting", "tabMode", "to", "shift", "will", "solve", "your", "problem", "NUMBER", "marijnh", "I", "too", "think", "that", "it", "ll", "be", "more", "intuitive", "if", "the", "tabMode", "default", "setting", "behaved", "similar", "to", "the", "enterMode", "i", "NUMBER", "e", "NUMBER", "use", "the", "mode", "s", "indentation", "rules", "instead", "of", "inserting", "a", "tab", "NUMBER", "Here", "be", "my", "sources", "which", "have", "be", "discussed", "here", "LINK", "_thread", "thread", "NUMBER", "e", "NUMBER", "d", "NUMBER", "I", "use", "the", "release", "v", "NUMBER", "NUMBER", "of", "CodeMirror", "as", "the", "base", "just", "with", "a", "single", "onChange", "patch", "applied", "NUMBER", "All", "change", "be", "marked", "with", "comments", "like", "do", "that", "for", "my", "own", "convenience", "Changed", "by", "A", "NUMBER", "K", "NUMBER", "NUMBER", "Here", "be", "a", "detailed", "list", "of", "change", "NUMBER", "Entities", "add", "to", "the", "javascript", "css", "xml", "and", "htmlmixed", "modes", "var", "commentStart", "var", "commentEnd", "var", "wordWrapChars", "function", "autoFormatLines", "text", "function", "getModeAtPos", "text", "absPos", "Functions", "add", "to", "the", "htmlmixed", "mode", "function", "getModeInfos", "text", "absPos", "Functions", "add", "to", "the", "javascript", "mode", "function", "getNonBreakableBlocks", "text", "Methods", "add", "to", "CodeMirror", "internals", "function", "relToAbs", "relPos", "function", "absToRel", "absPos", "function", "getWrappedText", "text", "charsPerLine", "Methods", "add", "to", "the", "CodeMirror", "API", "public", "methods", "function", "getSelectedRange", "function", "indentRange", "isIncreaseIndent", "from", "to", "function", "commentRange", "isComment", "from", "to", "function", "wordWrapRange", "from", "to", "function", "autoIndentRange", "from", "to", "function", "autoFormatRange", "from", "to", "Changes", "to", "CodeMirror", "internals", "The", "onChange", "event", "patch", "applied", "to", "the", "endOperation", "function", "see", "comments", "in", "code", "NUMBER", "I", "only", "made", "change", "to", "the", "javascript", "xml", "css", "and", "htmlmixed", "modes", "since", "those", "be", "the", "modes", "I", "work", "with", "NUMBER", "Hi", "Marijn", "OK", "I", "ll", "move", "the", "word", "wrapper", "to", "a", "separate", "file", "and", "share", "my", "results", "NUMBER", "You", "mean", "add", "a", "wordWrap", "method", "to", "the", "CodeMirror", "object", "the", "one", "which", "also", "has", "the", "CodeMirror", "NUMBER", "fromTextArea", "method", "not", "to", "the", "API", "right", "The", "amount", "of", "additional", "code", "isn", "t", "so", "great", "actually", "I", "just", "use", "a", "format", "model", "different", "from", "the", "one", "use", "by", "you", "that", "s", "why", "the", "code", "looks", "significantly", "longer", "although", "it", "s", "really", "not", "I", "m", "also", "afraid", "that", "Visual", "Studio", "reformatted", "the", "entire", "codemirror", "NUMBER", "js", "file", "that", "s", "why", "it", "looked", "like", "there", "were", "many", "change", "although", "I", "only", "add", "several", "function", "to", "the", "API", "and", "several", "more", "function", "to", "the", "internals", "NUMBER", "When", "it", "comes", "to", "a", "real", "environment", "I", "ll", "probably", "find", "a", "tool", "to", "remove", "all", "indents", "and", "comments", "from", "JavaScript", "file", "to", "make", "the", "code", "file", "as", "small", "as", "possible", "just", "keep", "it", "exceedingly", "indented", "during", "development", "NUMBER", "As", "for", "the", "auto", "format", "feature", "I", "d", "like", "to", "note", "that", "this", "can", "be", "a", "really", "useful", "functionality", "NUMBER", "It", "was", "actually", "request", "by", "a", "Russian", "speaking", "CodeMirror", "user", "who", "contacted", "me", "directly", "via", "e", "mail", "some", "time", "ago", "NUMBER", "Let", "me", "try", "to", "convice", "you", "that", "it", "can", "be", "useful", "and", "do", "not", "increase", "the", "traffic", "significantly", "While", "the", "indentation", "part", "of", "the", "format", "feature", "be", "trivial", "indeed", "it", "just", "uses", "your", "indentLine", "API", "method", "the", "lines", "breaking", "feature", "be", "not", "so", "obvious", "specifically", "for", "HTML", "and", "JavaScript", "markup", "NUMBER", "All", "change", "which", "concern", "auto", "format", "be", "mainly", "implement", "in", "corresponding", "mode", "file", "which", "will", "only", "be", "loaded", "if", "you", "want", "to", "work", "with", "this", "specific", "mode", "so", "the", "size", "of", "codemirror", "NUMBER", "js", "be", "only", "incresed", "by", "NUMBER", "lines", "if", "unneed", "line", "breaks", "and", "comments", "be", "remove", "NUMBER", "Now", "consider", "the", "following", "use", "case", "when", "you", "need", "to", "work", "with", "a", "piece", "of", "markup", "copied", "from", "a", "web", "browser", "with", "a", "page", "source", "or", "with", "a", "JavaScript", "file", "with", "line", "breaks", "and", "indentation", "remove", "it", "be", "really", "hard", "to", "read", "the", "code", "NUMBER", "A", "perfect", "example", "be", "Google", "Chrome", "which", "gave", "me", "NUMBER", "Kb", "of", "source", "code", "in", "a", "single", "line", "when", "I", "copied", "a", "small", "attributes", "table", "from", "w", "NUMBER", "schools", "and", "pasted", "it", "to", "a", "WYSIWYG", "HTML", "editor", "NUMBER", "The", "methods", "I", "add", "to", "the", "htmlmixed", "javascript", "css", "and", "xml", "modes", "allow", "converting", "the", "ugly", "markup", "to", "a", "human", "readable", "form", "NUMBER", "Also", "when", "dealing", "with", "HTML", "different", "rules", "be", "applied", "to", "different", "pieces", "of", "code", "depending", "on", "their", "automatically", "detected", "xml", "js", "or", "css", "mode", "and", "therefore", "the", "markup", "s", "meaning", "remains", "unchanged", "e", "NUMBER", "g", "NUMBER", "string", "constants", "or", "for", "loop", "headers", "in", "JavaScript", "be", "not", "broken", "even", "if", "they", "contain", "the", "or", "chars", "NUMBER", "So", "the", "feature", "be", "not", "as", "simple", "as", "it", "seems", "On", "Mon", "May", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "marijnh", "TAG", "write", "Hi", "Alexey", "First", "I", "appreciate", "the", "pull", "request", "NUMBER", "But", "I", "m", "trying", "to", "keep", "this", "editor", "as", "minimal", "and", "lightweight", "as", "possible", "and", "since", "all", "these", "except", "the", "word", "wrapper", "can", "be", "trivially", "do", "on", "top", "of", "the", "exist", "API", "I", "think", "they", "have", "no", "place", "in", "the", "core", "editor", "NUMBER", "The", "word", "wrapping", "be", "certainly", "useful", "if", "you", "could", "implement", "it", "as", "a", "separate", "file", "I", "d", "gladly", "put", "that", "in", "for", "example", "lib", "wordwrap", "NUMBER", "js", "NUMBER", "For", "example", "you", "could", "assign", "CodeMirror", "NUMBER", "wordWrap", "to", "be", "a", "function", "taking", "an", "instance", "as", "the", "first", "argument", "there", "be", "no", "plugin", "system", "yet", "where", "you", "can", "add", "methods", "and", "the", "range", "to", "wrap", "as", "the", "next", "argument", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "Best", "regards", "Alexey", "Hi", "any", "news", "on", "that", "If", "you", "re", "interested", "in", "word", "wrapping", "a", "text", "range", "the", "latest", "news", "be", "here", "LINK", "_thread", "thread", "NUMBER", "f", "NUMBER", "fc", "NUMBER", "eaa", "NUMBER", "e", "NUMBER", "cac", "NUMBER", "c", "NUMBER", "b", "NUMBER", "e", "NUMBER", "lnk", "gst", "q", "wrap", "NUMBER", "cac", "NUMBER", "c", "NUMBER", "b", "NUMBER", "e", "NUMBER", "However", "the", "code", "was", "created", "for", "CM", "NUMBER", "and", "it", "currently", "contains", "a", "compatibility", "issue", "I", "haven", "t", "update", "it", "to", "get", "the", "correct", "editor", "width", "from", "the", "new", "Scroller", "element", "yet", "NUMBER", "As", "for", "other", "features", "I", "gave", "up", "trying", "to", "configure", "Github", "on", "my", "Windows", "PC", "as", "mention", "in", "the", "post", "above", "NUMBER", "I", "can", "send", "you", "the", "whole", "code", "wrapping", "auto", "format", "etc", "NUMBER", "if", "you", "want", "to", "use", "it", "and", "if", "you", "re", "probably", "willing", "to", "create", "a", "properly", "arranged", "Github", "pull", "request", "from", "that", "NUMBER", "Note", "however", "that", "it", "include", "a", "few", "change", "additions", "to", "codemirror", "NUMBER", "js", "which", "be", "necessary", "to", "make", "the", "whole", "thing", "work", "NUMBER", "Has", "there", "be", "any", "progress", "in", "make", "this", "part", "of", "the", "core", "This", "feature", "be", "really", "useful", "NUMBER", "Not", "really", "NUMBER", "I", "ve", "posted", "a", "newer", "version", "of", "the", "wrapping", "code", "in", "the", "thread", "mention", "above", "a", "while", "ago", "NUMBER", "Also", "I", "ve", "asked", "one", "of", "CodeMirror", "users", "to", "share", "my", "code", "here", "when", "he", "has", "time", "for", "that", "NUMBER", "The", "point", "be", "that", "I", "gave", "up", "configuring", "GitHub", "client", "on", "my", "machine", "so", "I", "was", "never", "able", "make", "a", "pull", "request", "with", "my", "additional", "file", "which", "extend", "codemirror", "NUMBER", "js", "and", "some", "modes", "I", "work", "with", "CSS", "XML", "HTML", "JavaScript", "NUMBER", "Currently", "I", "just", "send", "my", "code", "to", "any", "person", "which", "be", "interested", "in", "it", "via", "e", "mail", "NUMBER", "Wow", "NUMBER", "OK", "NUMBER", "Thank", "you", "for", "sending", "the", "code", "NUMBER", "If", "it", "works", "without", "any", "hiccups", "I", "m", "more", "then", "happy", "to", "send", "through", "a", "pull", "request", "on", "your", "behalf", "in", "addition", "to", "this", "one", "I", "understand", "Marjin", "had", "concerns", "over", "the", "size", "of", "this", "pull", "request", "NUMBER", "Looks", "like", "you", "no", "longer", "need", "to", "I", "ve", "forwarded", "the", "code", "to", "Marijn", "yesterday", "via", "e", "mail", "NUMBER", "Feel", "free", "to", "ask", "me", "if", "you", "ll", "have", "any", "question", "on", "the", "code", "NUMBER", "It", "would", "probably", "be", "better", "to", "use", "the", "CodeMirror", "group", "in", "Google", "Groups", "for", "that", "NUMBER", "Best", "Alexey", "I", "m", "trying", "to", "use", "CodeMirror", "NUMBER", "for", "a", "reStructuredText", "editor", "specifically", "in", "codemirror", "branch", "of", "redmine_restructuredtext_formatter", "LINK", "_restructuredtext_formatter", "NUMBER", "The", "editor", "be", "supposed", "to", "work", "well", "in", "both", "left", "to", "right", "and", "right", "to", "left", "layouts", "NUMBER", "I", "m", "use", "a", "patched", "version", "of", "CodeMirror", "for", "RTL", "layouts", "NUMBER", "The", "patch", "be", "available", "in", "codemirror", "patches", "LINK", "patches", "NUMBER", "Everything", "be", "good", "except", "some", "mouse", "cursor", "issue", "which", "I", "couldn", "t", "fix", "NUMBER", "I", "thought", "maybe", "you", "can", "help", "me", "with", "that", "part", "NUMBER", "To", "reproduce", "the", "bug", "apply", "my", "right", "to", "left", "layout", "NUMBER", "diff", "LINK", "patches", "src", "tip", "right", "to", "left", "layout", "NUMBER", "diff", "and", "then", "modify", "your", "mode", "rst", "index", "NUMBER", "html", "and", "add", "a", "dir", "rtl", "to", "your", "form", "or", "html", "tag", "NUMBER", "Then", "try", "to", "reposition", "cursor", "or", "select", "some", "part", "of", "text", "use", "mouse", "specially", "when", "a", "horizontal", "scrollbar", "be", "present", "NUMBER", "Try", "with", "both", "line", "numbers", "enable", "and", "disabled", "NUMBER", "Also", "try", "some", "right", "to", "left", "and", "or", "bidirectional", "text", "such", "as", "following", "text", "because", "it", "change", "how", "the", "selection", "of", "text", "be", "do", "\u0633\u0644\u0627\u0645", "\u0627\u06cc\u0646", "\u06cc\u06a9", "\u0645\u062a\u0646", "\u062f\u0648\u062c\u0647\u062a\u0647", "\u06cc\u0627", "bidirectional", "\u0627\u0633\u062a", "NUMBER", "In", "fact", "I", "ve", "already", "change", "pageX", "like", "this", "LINK", "patches", "src", "NUMBER", "d", "NUMBER", "eef", "NUMBER", "right", "to", "left", "layout", "NUMBER", "diff", "cl", "NUMBER", "pageX", "function", "if", "this", "NUMBER", "e", "NUMBER", "pageX", "null", "return", "this", "NUMBER", "e", "NUMBER", "pageX", "var", "doc", "this", "NUMBER", "target", "NUMBER", "ownerDocument", "return", "this", "NUMBER", "e", "NUMBER", "clientX", "doc", "NUMBER", "body", "NUMBER", "scrollLeft", "doc", "NUMBER", "documentElement", "NUMBER", "scrollLeft", "if", "this", "NUMBER", "e", "NUMBER", "pageX", "null", "return", "doc", "NUMBER", "body", "NUMBER", "clientWidth", "this", "NUMBER", "e", "NUMBER", "pageX", "return", "doc", "NUMBER", "body", "NUMBER", "clientWidth", "this", "NUMBER", "e", "NUMBER", "clientX", "doc", "NUMBER", "body", "NUMBER", "scrollLeft", "doc", "NUMBER", "documentElement", "NUMBER", "scrollLeft", "And", "it", "works", "well", "but", "only", "when", "you", "have", "a", "unidirectional", "RTL", "text", "and", "no", "scrollbars", "NUMBER", "I", "couldn", "t", "fix", "the", "positioning", "of", "cursor", "when", "an", "scrollbar", "be", "present", "and", "or", "the", "text", "be", "bidirectional", "mix", "LTR", "and", "RTL", "NUMBER", "I", "tried", "tampering", "with", "posFromMouse", "and", "eltOffset", "trying", "to", "take", "width", "and", "offset", "of", "scrollbars", "into", "account", "but", "no", "success", "and", "no", "clue", "what", "to", "do", "next", "NUMBER", "Merging", "this", "into", "NUMBER", "add", "an", "option", "to", "pass", "in", "the", "marker", "data", "as", "an", "object", "when", "add", "a", "marker", "NUMBER", "The", "marker", "data", "may", "now", "hold", "an", "id", "along", "with", "the", "text", "and", "className", "which", "will", "be", "the", "id", "of", "the", "TAG", "element", "that", "be", "use", "for", "the", "marker", "NUMBER", "This", "be", "useful", "for", "binding", "actions", "to", "the", "marker", "e", "NUMBER", "g", "NUMBER", "onclick", "onmouseover", "events", "etc", "NUMBER", "Well", "NUMBER", "I", "m", "currently", "binding", "event", "handler", "directly", "on", "the", "marker", "element", "which", "I", "lookup", "by", "the", "provide", "id", "NUMBER", "It", "s", "very", "easy", "to", "generate", "unique", "ids", "as", "I", "add", "the", "markers", "but", "also", "it", "enable", "me", "to", "assign", "whatever", "unique", "handlers", "for", "every", "marker", "I", "add", "NUMBER", "Since", "I", "use", "it", "from", "within", "GWT", "searching", "by", "id", "support", "out", "of", "the", "box", "but", "I", "guess", "you", "can", "do", "the", "same", "with", "classes", "NUMBER", "In", "a", "way", "classes", "may", "be", "even", "better", "as", "you", "can", "share", "behavior", "between", "the", "same", "marker", "types", "NUMBER", "You", "can", "always", "emulate", "and", "id", "by", "assigning", "a", "unique", "class", "for", "each", "marker", "NUMBER", "When", "make", "a", "selection", "use", "the", "keyboard", "in", "Safari", "e", "NUMBER", "g", "NUMBER", "holding", "shift", "and", "pressing", "an", "arrow", "key", "the", "insertion", "point", "be", "inconsistent", "NUMBER", "To", "reproduce", "this", "bug", "NUMBER", "In", "Safari", "on", "Mac", "open", "a", "simple", "CodeMirror", "page", "such", "as", "the", "Auto", "Resize", "Demo", "LINK", "NUMBER", "Place", "your", "cursor", "at", "the", "beginning", "of", "the", "word", "auto", "on", "line", "NUMBER", "NUMBER", "Hold", "the", "shift", "key", "and", "press", "the", "right", "arrow", "key", "to", "select", "the", "word", "auto", "NUMBER", "NUMBER", "While", "still", "holding", "the", "shift", "key", "press", "the", "left", "arrow", "key", "NUMBER", "At", "this", "point", "the", "selection", "should", "be", "aut", "but", "instead", "it", "be", "auto", "because", "the", "selection", "insertion", "point", "moves", "from", "the", "left", "rather", "than", "from", "the", "right", "of", "the", "selection", "NUMBER", "I", "m", "guessing", "this", "bug", "has", "to", "do", "with", "handle", "the", "carat", "when", "a", "selection", "exist", "and", "the", "shift", "key", "be", "not", "held", "down", "NUMBER", "When", "the", "shift", "key", "be", "not", "in", "use", "then", "the", "behavior", "describe", "above", "be", "correct", "NUMBER", "It", "s", "also", "worth", "noting", "that", "this", "bug", "do", "not", "exist", "in", "Chrome", "on", "Mac", "NUMBER", "Thanks", "again", "for", "such", "an", "awesome", "code", "editor", "This", "appears", "to", "be", "a", "difference", "in", "what", "Chrome", "and", "Safari", "return", "when", "calling", "textarea", "NUMBER", "selectionStart", "I", "tracked", "this", "down", "to", "CodeMirror", "s", "prepareInput", "function", "which", "calls", "the", "setSelRange", "function", "to", "set", "the", "selection", "range", "NUMBER", "When", "I", "add", "log", "output", "and", "test", "in", "Safari", "and", "Chrome", "I", "see", "two", "different", "ranges", "be", "set", "NUMBER", "It", "s", "the", "value", "of", "sel", "NUMBER", "from", "NUMBER", "ch", "that", "be", "different", "between", "Safari", "and", "Chrome", "NUMBER", "I", "m", "still", "trying", "to", "track", "down", "the", "real", "source", "of", "this", "bug", "which", "appears", "to", "be", "cause", "by", "the", "insertion", "point", "be", "keep", "at", "the", "beginning", "of", "the", "selection", "when", "it", "should", "be", "at", "the", "end", "of", "the", "selection", "NUMBER", "I", "ll", "comment", "here", "again", "if", "when", "I", "can", "find", "out", "more", "NUMBER", "I", "m", "still", "work", "on", "finding", "the", "difference", "between", "Chrome", "and", "Safari", "that", "be", "cause", "this", "bug", "NUMBER", "In", "case", "anyone", "be", "interested", "visit", "a", "simple", "CodeMirror", "page", "like", "the", "Auto", "Resize", "Demo", "LINK", "and", "run", "the", "following", "two", "lines", "in", "a", "Safari", "web", "inspector", "console", "NUMBER", "javascript", "var", "t", "document", "NUMBER", "getElementsByTagName", "textarea", "NUMBER", "document", "NUMBER", "body", "NUMBER", "appendChild", "t", "t", "NUMBER", "yle", "NUMBER", "position", "static", "t", "NUMBER", "yle", "NUMBER", "width", "NUMBER", "This", "code", "makes", "CodeMirror", "s", "internal", "textarea", "visible", "at", "the", "bottom", "of", "the", "page", "so", "you", "can", "see", "what", "s", "going", "on", "behind", "the", "scenes", "with", "cursor", "position", "and", "text", "selection", "NUMBER", "hi", "your", "script", "to", "look", "at", "the", "textarea", "be", "very", "useful", "NUMBER", "Ok", "I", "can", "confirm", "this", "also", "happens", "in", "a", "WebView", "embedded", "in", "another", "app", "I", "checked", "this", "because", "it", "be", "a", "variant", "on", "safari", "and", "do", "have", "slightly", "different", "Webkit", "features", "by", "default", "NUMBER", "I", "have", "had", "other", "bits", "that", "work", "in", "it", "and", "chrome", "but", "not", "safari", "Also", "this", "particular", "comment", "box", "that", "I", "m", "typing", "in", "on", "safari", "behalves", "properly", "and", "subtracts", "a", "char", "for", "left", "and", "or", "right", "shift", "arrow", "so", "it", "s", "not", "part", "of", "Safari", "s", "default", "behavior", "to", "add", "to", "for", "shift", "right", "arrow", "NUMBER", "cheer", "John", "Sorry", "for", "taking", "forever", "on", "this", "It", "was", "cause", "by", "a", "somewhat", "weird", "do", "what", "i", "mean", "approach", "that", "Safari", "takes", "to", "programmatically", "set", "selections", "NUMBER", "Thanks", "so", "much", "for", "fix", "this", "Much", "appreciated", "It", "appears", "this", "issue", "has", "cropped", "up", "in", "Chrome", "now", "though", "Safari", "be", "still", "fine", "NUMBER", "I", "did", "a", "quick", "test", "and", "this", "can", "be", "fix", "by", "change", "line", "NUMBER", "LINK", "L", "NUMBER", "of", "codemirror", "NUMBER", "js", "to", "detect", "AppleWebKit", "in", "navigator", "NUMBER", "userAgent", "instead", "of", "detecting", "Apple", "Computer", "in", "navigator", "NUMBER", "vendor", "NUMBER", "It", "d", "also", "of", "course", "make", "sense", "to", "rename", "the", "safari", "variable", "to", "webkit", "NUMBER", "I", "verify", "that", "this", "variable", "be", "not", "currently", "be", "use", "for", "anything", "but", "fix", "the", "original", "bug", "report", "in", "this", "issue", "NUMBER", "LINK", "says", "myTextArea", "NUMBER", "parentNode", "NUMBER", "replaceChild", "myTextArea", "elt", "But", "it", "needs", "to", "be", "myTextArea", "NUMBER", "parentNode", "NUMBER", "replaceChild", "elt", "myTextArea", "CodeMirror", "should", "not", "handle", "Ctrl", "Tab", "which", "be", "a", "browser", "shortcut", "NUMBER", "Again", "the", "Tampermonkey", "use", "case", "NUMBER", "Script", "Source", "Editor", "Value", "LINK", "If", "this", "script", "be", "opened", "the", "syntax", "highlight", "starts", "and", "it", "be", "possible", "to", "scroll", "or", "edit", "something", "for", "about", "NUMBER", "second", "NUMBER", "After", "this", "the", "editor", "freezes", "for", "NUMBER", "NUMBER", "seconds", "NUMBER", "I", "m", "use", "CodeMirror", "Release", "NUMBER", "NUMBER", "NUMBER", "Version", "NUMBER", "What", "chinese", "pages", "do", "you", "mean", "The", "editor", "content", "was", "the", "javascript", "source", "that", "can", "be", "downloaded", "from", "the", "given", "link", "NUMBER", "In", "this", "case", "Google", "Reader", "Filter", "that", "works", "at", "the", "reader", "NUMBER", "google", "NUMBER", "com", "NUMBER", "But", "no", "problem", "you", "can", "get", "the", "source", "now", "from", "pastebin", "NUMBER", "com", "too", "LINK", "Thanks", "for", "your", "time", "NUMBER", "I", "m", "use", "CM", "NUMBER", "in", "tampermonkey", "for", "chrome", "to", "allow", "the", "user", "to", "edit", "scripts", "but", "some", "scripts", "make", "the", "editor", "unresponsible", "for", "a", "minute", "or", "two", "NUMBER", "For", "example", "if", "the", "source", "of", "this", "script", "LINK", "be", "loaded", "into", "the", "editor", "it", "takes", "NUMBER", "minutes", "until", "the", "syntax", "highlight", "starts", "NUMBER", "Thanks", "Jan", "Forgot", "to", "mention", "I", "m", "use", "CodeMirror", "Release", "NUMBER", "NUMBER", "NUMBER", "Version", "NUMBER", "And", "thanks", "for", "this", "great", "editor", "Ok", "I", "get", "it", "NUMBER", "The", "link", "above", "points", "to", "the", "userscript", "page", "and", "not", "the", "source", "NUMBER", "Sorry", "NUMBER", "This", "be", "the", "link", "to", "the", "userscripts", "source", "LINK", "I", "ve", "pasted", "this", "to", "pastebin", "too", "LINK", "but", "it", "seems", "that", "the", "encoding", "get", "broken", "while", "copying", "NUMBER", "So", "maybe", "you", "want", "use", "the", "first", "link", "NUMBER", "Thanks", "again", "NUMBER", "Ok", "I", "ll", "add", "this", "to", "tampermonkeys", "know", "issue", "NUMBER", "I", "thought", "the", "two", "issue", "might", "have", "a", "different", "root", "cause", "because", "the", "script", "from", "the", "other", "issue", "be", "editable", "for", "about", "NUMBER", "second", "whilst", "this", "script", "blocks", "any", "user", "input", "immediately", "when", "the", "editor", "be", "opened", "NUMBER", "Thanks", "for", "your", "time", "and", "keep", "up", "the", "great", "work", "Hi", "there", "Tiny", "one", "line", "fix", "for", "the", "css", "mode", "NUMBER", "Multi", "token", "selectors", "were", "be", "marked", "as", "css", "values", "rather", "than", "selectors", "visible", "here", "LINK", "on", "the", "navigation", "a", "and", "h", "NUMBER", "before", "h", "NUMBER", "before", "lines", "Cheers", "for", "the", "great", "tool", "Trailing", "commas", "in", "object", "literals", "be", "not", "allow", "by", "the", "spec", "and", "be", "handle", "poorly", "in", "some", "browsers", "NUMBER", "Added", "var", "to", "some", "variable", "declarations", "that", "were", "not", "meant", "to", "be", "globals", "NUMBER", "I", "don", "t", "see", "this", "commit", "in", "master", "anymore", "NUMBER", "Did", "a", "subsequent", "push", "accidentally", "orphan", "it", "Thanks", "While", "this", "isn", "t", "exactly", "an", "issue", "I", "figured", "this", "might", "be", "the", "best", "place", "to", "bring", "your", "attention", "to", "support", "for", "iOS", "devices", "and", "possibly", "Android", "Windows", "NUMBER", "etc", "NUMBER", "NUMBER", "Obviously", "this", "wasn", "t", "possible", "with", "CodeMirror", "NUMBER", "and", "its", "use", "of", "an", "IFRAME", "and", "contentEditable", "but", "with", "very", "little", "modification", "to", "codemirror", "NUMBER", "js", "I", "was", "able", "to", "get", "a", "functional", "version", "on", "my", "iPad", "and", "iPhone", "NUMBER", "That", "said", "I", "think", "the", "future", "of", "CodeMirror", "on", "mobile", "devices", "be", "very", "promising", "but", "there", "be", "a", "couple", "issue", "I", "immediately", "notice", "that", "may", "prove", "to", "be", "very", "simple", "to", "solve", "NUMBER", "First", "for", "devices", "with", "soft", "keyboards", "the", "hidden", "textarea", "needs", "to", "gain", "focus", "in", "order", "for", "the", "keyboard", "to", "appear", "on", "screen", "NUMBER", "I", "was", "able", "to", "work", "around", "this", "by", "make", "the", "text", "area", "visible", "and", "giving", "it", "focus", "NUMBER", "After", "it", "s", "initial", "focus", "the", "keyboard", "responded", "rather", "naturally", "but", "not", "perfectly", "to", "focusing", "and", "blurring", "on", "CodeMirror", "itself", "NUMBER", "Further", "test", "be", "needed", "but", "I", "think", "it", "would", "be", "possible", "to", "make", "the", "textarea", "visible", "and", "position", "it", "absolutely", "off", "the", "screen", "to", "accommodate", "this", "NUMBER", "The", "other", "problem", "I", "notice", "be", "that", "when", "the", "textarea", "receives", "input", "and", "be", "out", "of", "the", "viewport", "mobile", "Safari", "centers", "the", "display", "on", "the", "textarea", "NUMBER", "This", "seems", "like", "it", "would", "be", "easy", "to", "fix", "by", "setting", "the", "vertical", "position", "of", "the", "hidden", "textarea", "to", "the", "same", "line", "the", "cursor", "be", "on", "NUMBER", "Let", "me", "know", "what", "you", "think", "Marijn", "NUMBER", "And", "congrats", "and", "great", "work", "on", "CodeMirror", "NUMBER", "I", "unfortunately", "do", "not", "have", "time", "to", "test", "and", "hack", "and", "debug", "on", "iOS", "devices", "at", "this", "point", "NUMBER", "I", "m", "happy", "to", "hear", "things", "seem", "to", "be", "close", "to", "work", "and", "I", "d", "very", "much", "appreciate", "if", "someone", "could", "contribute", "a", "patch", "that", "makes", "them", "really", "work", "NUMBER", "The", "textarea", "be", "already", "visible", "in", "that", "it", "stuffed", "in", "an", "overflow", "hidden", "zero", "width", "div", "NUMBER", "Ths", "div", "be", "also", "already", "be", "positioned", "to", "prevent", "the", "scrolling", "issue", "you", "saw", "NUMBER", "I", "m", "not", "sure", "what", "mobile", "safari", "uses", "to", "determine", "whether", "something", "be", "on", "screen", "NUMBER", "For", "all", "the", "big", "desktop", "browsers", "the", "inside", "zero", "width", "div", "thing", "seems", "to", "suffice", "NUMBER", "I", "see", "NUMBER", "e", "textarea", "moves", "to", "the", "cursor", "location", "on", "click", "NUMBER", "I", "was", "under", "the", "impression", "that", "it", "was", "static", "and", "didn", "t", "move", "NUMBER", "I", "think", "that", "Mobile", "Safari", "be", "centering", "on", "the", "textarea", "before", "it", "be", "replaced", "which", "might", "be", "worked", "around", "by", "manipulating", "the", "focus", "to", "occur", "after", "the", "textarea", "be", "moved", "NUMBER", "If", "I", "get", "the", "time", "I", "ll", "play", "around", "with", "it", "some", "more", "NUMBER", "In", "the", "meantime", "maybe", "a", "few", "more", "folks", "will", "jump", "in", "with", "some", "ideas", "NUMBER", "It", "s", "definitely", "not", "far", "off", "NUMBER", "claviska", "you", "said", "with", "very", "little", "modification", "to", "codemirror", "NUMBER", "js", "I", "was", "able", "to", "get", "a", "functional", "version", "on", "my", "iPad", "and", "iPhone", "NUMBER", "NUMBER", "Can", "you", "post", "a", "fork", "with", "your", "change", "I", "ve", "played", "a", "little", "with", "codemirror", "on", "the", "ipad", "today", "NUMBER", "I", "unfortunately", "didn", "t", "save", "any", "of", "my", "change", "NUMBER", "But", "to", "clarify", "I", "didn", "t", "intend", "for", "functional", "to", "mean", "production", "ready", "NUMBER", "The", "adjustments", "I", "made", "were", "very", "simple", "if", "I", "recall", "correctly", "they", "were", "make", "the", "hidden", "text", "area", "visible", "and", "change", "it", "s", "position", "just", "a", "bit", "NUMBER", "Once", "the", "text", "area", "was", "visible", "CodeMirror", "worked", "to", "a", "reasonable", "degree", "in", "iOS", "but", "it", "was", "still", "buggy", "at", "times", "see", "my", "comment", "above", "NUMBER", "I", "took", "a", "primitive", "stab", "at", "things", "and", "made", "my", "experiment", "available", "here", "www", "NUMBER", "litech", "NUMBER", "org", "schanzer", "iOS", "I", "haven", "t", "bothered", "with", "scrolling", "yet", "only", "mucked", "about", "with", "selection", "and", "inserting", "the", "cursor", "NUMBER", "Selection", "in", "iOS", "be", "great", "but", "hard", "to", "fake", "a", "contextual", "menu", "appears", "at", "the", "cursor", "location", "and", "dots", "appear", "at", "the", "upper", "left", "and", "bottom", "right", "corner", "of", "your", "selection", "NUMBER", "Moving", "these", "dots", "extend", "or", "shrinks", "the", "selected", "area", "NUMBER", "You", "can", "t", "select", "anything", "outside", "of", "the", "inputDiv", "which", "be", "a", "problem", "unless", "the", "inputDiv", "were", "to", "grow", "and", "move", "with", "the", "selection", "boundaries", "NUMBER", "I", "spent", "some", "time", "trying", "to", "make", "that", "happen", "and", "then", "gave", "up", "and", "tried", "the", "alternate", "approach", "NUMBER", "Can", "I", "ask", "what", "s", "the", "quirkiness", "that", "makes", "the", "other", "approach", "so", "bad", "Assuming", "one", "restricts", "font", "family", "and", "font", "weight", "to", "be", "constant", "line", "height", "be", "already", "restricted", "this", "seems", "work", "perfectly", "on", "all", "non", "IE", "browsers", "NUMBER", "I", "d", "rather", "have", "a", "simple", "core", "with", "all", "the", "faked", "cursor", "and", "selection", "code", "enable", "only", "for", "IE", "NUMBER", "There", "be", "multiple", "issue", "with", "keep", "a", "textarea", "aligned", "NUMBER", "The", "biggest", "one", "be", "that", "it", "requires", "the", "whole", "document", "to", "be", "present", "in", "the", "textarea", "so", "that", "clicks", "be", "interpreted", "properly", "NUMBER", "This", "gets", "slow", "for", "bigger", "documents", "NUMBER", "I", "simply", "didn", "t", "architect", "CodeMirror", "like", "this", "and", "to", "change", "to", "this", "model", "be", "going", "to", "be", "a", "lot", "of", "work", "NUMBER", "If", "someone", "else", "do", "all", "this", "work", "I", "m", "very", "interested", "in", "the", "result", "NUMBER", "But", "I", "won", "t", "accept", "a", "half", "hearted", "patch", "and", "then", "take", "on", "the", "burden", "of", "support", "it", "NUMBER", "Understood", "for", "the", "record", "I", "don", "t", "consider", "my", "tinkering", "around", "to", "be", "anywhere", "close", "to", "a", "patch", "NUMBER", "I", "spent", "a", "little", "time", "mocking", "something", "up", "that", "seem", "to", "work", "and", "wondered", "if", "you", "d", "already", "gone", "down", "that", "road", "and", "deemed", "it", "foolish", "NUMBER", "I", "ll", "continue", "to", "play", "and", "if", "anything", "legit", "comes", "back", "I", "ll", "be", "sure", "to", "submit", "a", "patch", "NUMBER", "OK", "people", "has", "anyone", "besides", "me", "jumped", "in", "and", "tried", "an", "iPad", "iOS", "with", "a", "Bluetooth", "keyboard", "The", "only", "thing", "that", "did", "not", "seem", "to", "be", "work", "was", "the", "left", "right", "up", "down", "arrows", "NUMBER", "I", "tried", "a", "number", "of", "ways", "to", "grab", "the", "values", "without", "success", "NUMBER", "Any", "ideas", "I", "be", "use", "this", "keyboard", "but", "since", "the", "arrows", "work", "in", "web", "text", "boxes", "it", "doesn", "t", "seem", "to", "be", "a", "keyboard", "issue", "NUMBER", "It", "seems", "to", "be", "the", "way", "safari", "works", "on", "iOS", "NUMBER", "LINK", "us", "NUMBER", "NUMBER", "section", "overview", "tabs", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "hub", "NUMBER", "For", "me", "it", "seems", "most", "of", "the", "rest", "be", "up", "and", "run", "NUMBER", "It", "be", "in", "fact", "the", "best", "text", "code", "editor", "I", "have", "use", "on", "the", "device", "to", "date", "NUMBER", "Nice", "Possibly", "the", "arrow", "issue", "be", "simply", "cause", "by", "those", "keys", "firing", "non", "standard", "key", "code", "in", "iOS", "NUMBER", "Could", "you", "go", "to", "LINK", "_events", "index", "NUMBER", "html", "and", "see", "which", "if", "any", "key", "events", "be", "fired", "when", "you", "press", "the", "arrow", "keys", "There", "be", "no", "key", "events", "firing", "NUMBER", "This", "be", "strange", "because", "the", "editor", "works", "NUMBER", "I", "was", "expecting", "only", "the", "arrow", "keys", "to", "not", "work", "NUMBER", "LINK", "topic", "CodeMirror", "exGdyp", "NUMBER", "NTOo", "be", "relevant", "here", "an", "implementation", "of", "iOS", "selection", "behavior", "Marijnh", "Copy", "and", "Paste", "works", "on", "standard", "NUMBER", "CodeMirror", "just", "double", "tap", "inside", "editor", "Only", "selection", "doesn", "t", "work", "It", "s", "only", "required", "to", "repair", "select", "function", "NUMBER", "The", "schanzer", "s", "version", "be", "very", "large", "has", "really", "a", "lot", "of", "issue", "superfluous", "function", "of", "additional", "keyboard", "and", "works", "very", "very", "very", "slow", "can", "t", "use", "it", "NUMBER", "We", "only", "need", "to", "repair", "selection", "on", "the", "CodeMirror", "to", "bring", "iOS", "support", "Relax", "my", "friend", "NUMBER", "There", "s", "a", "lot", "of", "low", "hanging", "performance", "fruit", "to", "be", "pick", "but", "I", "m", "work", "on", "make", "all", "the", "corner", "cases", "work", "correctly", "before", "I", "start", "optimizing", "NUMBER", "Native", "selection", "behavior", "be", "very", "difficult", "to", "emulate", "if", "you", "can", "do", "it", "in", "less", "than", "NUMBER", "LOC", "that", "would", "be", "wonderful", "NUMBER", "for", "better", "mobile", "support"], "text_count": [0, 12454, 2587, 1038, 524, 67, 707, 3, 59, 1544, 2071, 3496, 1746, 1258, 1519, 411, 0, 0, 0, 0, 3816, 1181, 680, 448, 864, 641, 0, 0, 0, 0, 6371, 3956, 2530, 106, 1282, 448, 0, 0, 0, 0, 8088, 121, 3031, 2746, 2695, 0, 0, 0, 0, 0, 2424, 998, 1056, 571, 970, 417, 915, 0, 0, 0, 7032, 713, 5585, 372, 0, 0, 0, 0, 0, 0, 4532, 724, 3076, 1163, 531, 0, 0, 0, 0, 0, 7425, 3412, 781, 2751, 480, 419, 0, 0, 0, 0, 587, 2588, 230, 0, 0, 0, 0, 0, 0, 0, 7354, 1550, 4294, 1543, 0, 0, 0, 0, 0, 0, 12378, 26221, 399, 1057, 280, 500, 0, 0, 0, 0, 34987, 133, 25998, 416, 6309, 7893]}]